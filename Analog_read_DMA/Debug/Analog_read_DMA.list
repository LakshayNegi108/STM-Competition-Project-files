
Analog_read_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08006d70  08006d70  00016d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007174  08007174  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800717c  0800717c  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08007184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000021c  080073a0  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  080073a0  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b98c  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f50  00000000  00000000  0002bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002e4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018269  00000000  00000000  0002eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c26e  00000000  00000000  00047009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093119  00000000  00000000  00053277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6390  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d0  00000000  00000000  000e63e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d58 	.word	0x08006d58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	08006d58 	.word	0x08006d58

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f000 fbed 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec6:	f000 f83d 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eca:	f000 f943 	bl	8001154 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ece:	f000 f921 	bl	8001114 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ed2:	f000 f8f5 	bl	80010c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ed6:	f000 f8a1 	bl	800101c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uart_print_config(9600);
 8000eda:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000ede:	f002 ffd7 	bl	8003e90 <uart_print_config>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	4911      	ldr	r1, [pc, #68]	; (8000f2c <main+0x70>)
 8000ee6:	4812      	ldr	r0, [pc, #72]	; (8000f30 <main+0x74>)
 8000ee8:	f000 fc90 	bl	800180c <HAL_ADC_Start_DMA>
  print("Working");
 8000eec:	4811      	ldr	r0, [pc, #68]	; (8000f34 <main+0x78>)
 8000eee:	f002 ffab 	bl	8003e48 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint8_t i = 0; i < ADC_BUF_LEN; i++){
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	e014      	b.n	8000f22 <main+0x66>
		  	sprintf(print_char, "%d\n", adc_buf[i]);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <main+0x70>)
 8000efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f00:	461a      	mov	r2, r3
 8000f02:	490d      	ldr	r1, [pc, #52]	; (8000f38 <main+0x7c>)
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <main+0x80>)
 8000f06:	f003 fc75 	bl	80047f4 <siprintf>
		  	USART_WRITE(USART2, print_char, strlen(print_char), 100);
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <main+0x80>)
 8000f0c:	f7ff f968 	bl	80001e0 <strlen>
 8000f10:	4602      	mov	r2, r0
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	4909      	ldr	r1, [pc, #36]	; (8000f3c <main+0x80>)
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <main+0x84>)
 8000f18:	f002 ff66 	bl	8003de8 <USART_WRITE>
	  for(uint8_t i = 0; i < ADC_BUF_LEN; i++){
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d9e7      	bls.n	8000ef8 <main+0x3c>
 8000f28:	e7e3      	b.n	8000ef2 <main+0x36>
 8000f2a:	bf00      	nop
 8000f2c:	20000324 	.word	0x20000324
 8000f30:	20000238 	.word	0x20000238
 8000f34:	08006d70 	.word	0x08006d70
 8000f38:	08006d78 	.word	0x08006d78
 8000f3c:	2000032c 	.word	0x2000032c
 8000f40:	40004400 	.word	0x40004400

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 ffdc 	bl	8003f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b29      	ldr	r3, [pc, #164]	; (8001014 <SystemClock_Config+0xd0>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a28      	ldr	r2, [pc, #160]	; (8001014 <SystemClock_Config+0xd0>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <SystemClock_Config+0xd0>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b23      	ldr	r3, [pc, #140]	; (8001018 <SystemClock_Config+0xd4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <SystemClock_Config+0xd4>)
 8000f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <SystemClock_Config+0xd4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fac:	2310      	movs	r3, #16
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fbc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fdd6 	bl	8002b80 <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fda:	f000 f93d 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	230f      	movs	r3, #15
 8000fe0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000ff0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ff4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 f837 	bl	8003070 <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001008:	f000 f926 	bl	8001258 <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3750      	adds	r7, #80	; 0x50
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	463b      	mov	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <MX_ADC1_Init+0x9c>)
 8001032:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001048:	2201      	movs	r2, #1
 800104a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_ADC1_Init+0x98>)
 800105c:	4a17      	ldr	r2, [pc, #92]	; (80010bc <MX_ADC1_Init+0xa0>)
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001068:	2201      	movs	r2, #1
 800106a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_ADC1_Init+0x98>)
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001076:	2201      	movs	r2, #1
 8001078:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107a:	480e      	ldr	r0, [pc, #56]	; (80010b4 <MX_ADC1_Init+0x98>)
 800107c:	f000 fb82 	bl	8001784 <HAL_ADC_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 f8e7 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800108a:	230e      	movs	r3, #14
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800108e:	2301      	movs	r3, #1
 8001090:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_ADC1_Init+0x98>)
 800109c:	f000 fcb0 	bl	8001a00 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010a6:	f000 f8d7 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000238 	.word	0x20000238
 80010b8:	40012000 	.word	0x40012000
 80010bc:	0f000001 	.word	0x0f000001

080010c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_USART2_UART_Init+0x50>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010f8:	f002 f9da 	bl	80034b0 <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001102:	f000 f8a9 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002e0 	.word	0x200002e0
 8001110:	40004400 	.word	0x40004400

08001114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_DMA_Init+0x3c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <MX_DMA_Init+0x3c>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_DMA_Init+0x3c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2038      	movs	r0, #56	; 0x38
 800113c:	f000 ffdb 	bl	80020f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001140:	2038      	movs	r0, #56	; 0x38
 8001142:	f000 fff4 	bl	800212e <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <MX_GPIO_Init+0xd0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a2c      	ldr	r2, [pc, #176]	; (8001224 <MX_GPIO_Init+0xd0>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_GPIO_Init+0xd0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <MX_GPIO_Init+0xd0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a25      	ldr	r2, [pc, #148]	; (8001224 <MX_GPIO_Init+0xd0>)
 8001190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_GPIO_Init+0xd0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2120      	movs	r1, #32
 80011de:	4812      	ldr	r0, [pc, #72]	; (8001228 <MX_GPIO_Init+0xd4>)
 80011e0:	f001 fcb4 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_GPIO_Init+0xd8>)
 80011fc:	f001 fb22 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001200:	2320      	movs	r3, #32
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_GPIO_Init+0xd4>)
 8001218:	f001 fb14 	bl	8002844 <HAL_GPIO_Init>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020800 	.word	0x40020800

08001230 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
//	sprintf(print_char, "%d\n", (adc_buf[0] + adc_buf[1]) / 2);
//	USART_WRITE(USART2, print_char, strlen(print_char), 100);
//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
//	sprintf(print_char, "%d\n", (adc_buf[2] + adc_buf[3]) / 2);
//	USART_WRITE(USART2, print_char, strlen(print_char), 100);
//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a2:	2007      	movs	r0, #7
 80012a4:	f000 ff1c 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <HAL_ADC_MspInit+0xdc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d157      	bne.n	8001386 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a2d      	ldr	r2, [pc, #180]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a26      	ldr	r2, [pc, #152]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800130e:	2310      	movs	r3, #16
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 8001322:	f001 fa8f 	bl	8002844 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_ADC_MspInit+0xec>)
 800132a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_ADC_MspInit+0xe8>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_ADC_MspInit+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001344:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800134c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001350:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001354:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800135c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_ADC_MspInit+0xe8>)
 800136c:	f000 fefa 	bl	8002164 <HAL_DMA_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001376:	f7ff ff6f 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_ADC_MspInit+0xe8>)
 800137e:	639a      	str	r2, [r3, #56]	; 0x38
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_ADC_MspInit+0xe8>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40012000 	.word	0x40012000
 8001394:	40023800 	.word	0x40023800
 8001398:	40020800 	.word	0x40020800
 800139c:	20000280 	.word	0x20000280
 80013a0:	40026410 	.word	0x40026410

080013a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_UART_MspInit+0x84>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12b      	bne.n	800141e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_UART_MspInit+0x88>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_UART_MspInit+0x88>)
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_UART_MspInit+0x88>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_UART_MspInit+0x88>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_UART_MspInit+0x88>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_UART_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013fe:	230c      	movs	r3, #12
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140e:	2307      	movs	r3, #7
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_UART_MspInit+0x8c>)
 800141a:	f001 fa13 	bl	8002844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40004400 	.word	0x40004400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001480:	f000 f960 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <DMA2_Stream0_IRQHandler+0x10>)
 800148e:	f000 ff6f 	bl	8002370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000280 	.word	0x20000280

0800149c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	return 1;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_kill>:

int _kill(int pid, int sig)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014b6:	f002 fd01 	bl	8003ebc <__errno>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2216      	movs	r2, #22
 80014be:	601a      	str	r2, [r3, #0]
	return -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_exit>:

void _exit (int status)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ffe7 	bl	80014ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80014de:	e7fe      	b.n	80014de <_exit+0x12>

080014e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00a      	b.n	8001508 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	4601      	mov	r1, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf0      	blt.n	80014f2 <_read+0x12>
	}

return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e009      	b.n	8001540 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf1      	blt.n	800152c <_write+0x12>
	}
	return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_close>:

int _close(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	return -1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157a:	605a      	str	r2, [r3, #4]
	return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_isatty>:

int _isatty(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
	return 1;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f002 fc66 	bl	8003ebc <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20018000 	.word	0x20018000
 800161c:	00000400 	.word	0x00000400
 8001620:	20000390 	.word	0x20000390
 8001624:	200004a8 	.word	0x200004a8

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001684 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001652:	490e      	ldr	r1, [pc, #56]	; (800168c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001654:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001668:	4c0b      	ldr	r4, [pc, #44]	; (8001698 <LoopFillZerobss+0x26>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001676:	f7ff ffd7 	bl	8001628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f002 fc25 	bl	8003ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167e:	f7ff fc1d 	bl	8000ebc <main>
  bx  lr    
 8001682:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001684:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001690:	08007184 	.word	0x08007184
  ldr r2, =_sbss
 8001694:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8001698:	200004a8 	.word	0x200004a8

0800169c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_Init+0x40>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_Init+0x40>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_Init+0x40>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 fd09 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fdc6 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fd21 	bl	800214a <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 fce9 	bl	80020f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	20000008 	.word	0x20000008
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	20000394 	.word	0x20000394

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000394 	.word	0x20000394

08001784 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e033      	b.n	8001802 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fd86 	bl	80012b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d118      	bne.n	80017f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017ca:	f023 0302 	bic.w	r3, r3, #2
 80017ce:	f043 0202 	orr.w	r2, r3, #2
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fa34 	bl	8001c44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
 80017f2:	e001      	b.n	80017f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADC_Start_DMA+0x1e>
 8001826:	2302      	movs	r3, #2
 8001828:	e0ce      	b.n	80019c8 <HAL_ADC_Start_DMA+0x1bc>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d018      	beq.n	8001872 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001850:	4b5f      	ldr	r3, [pc, #380]	; (80019d0 <HAL_ADC_Start_DMA+0x1c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a5f      	ldr	r2, [pc, #380]	; (80019d4 <HAL_ADC_Start_DMA+0x1c8>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9a      	lsrs	r2, r3, #18
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001864:	e002      	b.n	800186c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	3b01      	subs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f9      	bne.n	8001866 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001880:	d107      	bne.n	8001892 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001890:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	f040 8086 	bne.w	80019ae <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e0:	d106      	bne.n	80018f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f023 0206 	bic.w	r2, r3, #6
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
 80018ee:	e002      	b.n	80018f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_ADC_Start_DMA+0x1cc>)
 8001900:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	4a35      	ldr	r2, [pc, #212]	; (80019dc <HAL_ADC_Start_DMA+0x1d0>)
 8001908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	4a34      	ldr	r2, [pc, #208]	; (80019e0 <HAL_ADC_Start_DMA+0x1d4>)
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	4a33      	ldr	r2, [pc, #204]	; (80019e4 <HAL_ADC_Start_DMA+0x1d8>)
 8001918:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001922:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001932:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001942:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	334c      	adds	r3, #76	; 0x4c
 800194e:	4619      	mov	r1, r3
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f000 fcb4 	bl	80022c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10f      	bne.n	8001984 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d129      	bne.n	80019c6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	e020      	b.n	80019c6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_ADC_Start_DMA+0x1dc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d11b      	bne.n	80019c6 <HAL_ADC_Start_DMA+0x1ba>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d114      	bne.n	80019c6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	e00b      	b.n	80019c6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f043 0210 	orr.w	r2, r3, #16
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f043 0201 	orr.w	r2, r3, #1
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000000 	.word	0x20000000
 80019d4:	431bde83 	.word	0x431bde83
 80019d8:	40012300 	.word	0x40012300
 80019dc:	08001e3d 	.word	0x08001e3d
 80019e0:	08001ef7 	.word	0x08001ef7
 80019e4:	08001f13 	.word	0x08001f13
 80019e8:	40012000 	.word	0x40012000

080019ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1c>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e105      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x228>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d925      	bls.n	8001a78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68d9      	ldr	r1, [r3, #12]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b1e      	subs	r3, #30
 8001a42:	2207      	movs	r2, #7
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	400a      	ands	r2, r1
 8001a50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68d9      	ldr	r1, [r3, #12]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4403      	add	r3, r0
 8001a6a:	3b1e      	subs	r3, #30
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	e022      	b.n	8001abe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6919      	ldr	r1, [r3, #16]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	400a      	ands	r2, r1
 8001a9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6919      	ldr	r1, [r3, #16]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4403      	add	r3, r0
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d824      	bhi.n	8001b10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3b05      	subs	r3, #5
 8001ad8:	221f      	movs	r2, #31
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	3b05      	subs	r3, #5
 8001b02:	fa00 f203 	lsl.w	r2, r0, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b0e:	e04c      	b.n	8001baa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b0c      	cmp	r3, #12
 8001b16:	d824      	bhi.n	8001b62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	3b23      	subs	r3, #35	; 0x23
 8001b2a:	221f      	movs	r2, #31
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43da      	mvns	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	400a      	ands	r2, r1
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b23      	subs	r3, #35	; 0x23
 8001b54:	fa00 f203 	lsl.w	r2, r0, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b60:	e023      	b.n	8001baa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	3b41      	subs	r3, #65	; 0x41
 8001b74:	221f      	movs	r2, #31
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	400a      	ands	r2, r1
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4618      	mov	r0, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b41      	subs	r3, #65	; 0x41
 8001b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_ADC_ConfigChannel+0x234>)
 8001bac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <HAL_ADC_ConfigChannel+0x238>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d109      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1cc>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b12      	cmp	r3, #18
 8001bbe:	d105      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_ADC_ConfigChannel+0x238>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d123      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x21e>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d003      	beq.n	8001be6 <HAL_ADC_ConfigChannel+0x1e6>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b11      	cmp	r3, #17
 8001be4:	d11b      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d111      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_ADC_ConfigChannel+0x23c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_ADC_ConfigChannel+0x240>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	0c9a      	lsrs	r2, r3, #18
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c10:	e002      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f9      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40012300 	.word	0x40012300
 8001c38:	40012000 	.word	0x40012000
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	431bde83 	.word	0x431bde83

08001c44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c4c:	4b79      	ldr	r3, [pc, #484]	; (8001e34 <ADC_Init+0x1f0>)
 8001c4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	021a      	lsls	r2, r3, #8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6899      	ldr	r1, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <ADC_Init+0x1f4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d022      	beq.n	8001d22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6899      	ldr	r1, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6899      	ldr	r1, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	e00f      	b.n	8001d42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0202 	bic.w	r2, r2, #2
 8001d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6899      	ldr	r1, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7e1b      	ldrb	r3, [r3, #24]
 8001d5c:	005a      	lsls	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01b      	beq.n	8001da8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	035a      	lsls	r2, r3, #13
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	e007      	b.n	8001db8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	051a      	lsls	r2, r3, #20
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dfa:	025a      	lsls	r2, r3, #9
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	029a      	lsls	r2, r3, #10
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40012300 	.word	0x40012300
 8001e38:	0f000001 	.word	0x0f000001

08001e3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e48:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d13c      	bne.n	8001ed0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d12b      	bne.n	8001ec8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d127      	bne.n	8001ec8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d119      	bne.n	8001ec8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0220 	bic.w	r2, r2, #32
 8001ea2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f7ff f9bb 	bl	8001244 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ece:	e00e      	b.n	8001eee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff fd85 	bl	80019ec <HAL_ADC_ErrorCallback>
}
 8001ee2:	e004      	b.n	8001eee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff f993 	bl	8001230 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2240      	movs	r2, #64	; 0x40
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f043 0204 	orr.w	r2, r3, #4
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fd5a 	bl	80019ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 0307 	and.w	r3, r3, #7
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db0b      	blt.n	8001fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	4907      	ldr	r1, [pc, #28]	; (8001fdc <__NVIC_EnableIRQ+0x38>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000e100 	.word	0xe000e100

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	; (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
         );
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff8e 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff29 	bl	8001f40 <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff3e 	bl	8001f88 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff8e 	bl	8002034 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5d 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff31 	bl	8001fa4 <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa2 	bl	800209c <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff fafc 	bl	800176c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e099      	b.n	80022b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a0:	e00f      	b.n	80021c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a2:	f7ff fae3 	bl	800176c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d908      	bls.n	80021c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e078      	b.n	80022b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e8      	bne.n	80021a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_DMA_Init+0x158>)
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b04      	cmp	r3, #4
 800221a:	d107      	bne.n	800222c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4313      	orrs	r3, r2
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f023 0307 	bic.w	r3, r3, #7
 8002242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2b04      	cmp	r3, #4
 8002254:	d117      	bne.n	8002286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fa6f 	bl	800274c <DMA_CheckFifoParam>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2240      	movs	r2, #64	; 0x40
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002282:	2301      	movs	r3, #1
 8002284:	e016      	b.n	80022b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fa26 	bl	80026e0 <DMA_CalcBaseAndBitshift>
 8002294:	4603      	mov	r3, r0
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	223f      	movs	r2, #63	; 0x3f
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	f010803f 	.word	0xf010803f

080022c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_DMA_Start_IT+0x26>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e040      	b.n	8002368 <HAL_DMA_Start_IT+0xa8>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d12f      	bne.n	800235a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f9b8 	bl	8002684 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	223f      	movs	r2, #63	; 0x3f
 800231a:	409a      	lsls	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0216 	orr.w	r2, r2, #22
 800232e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0208 	orr.w	r2, r2, #8
 8002346:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e005      	b.n	8002366 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002362:	2302      	movs	r3, #2
 8002364:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002366:	7dfb      	ldrb	r3, [r7, #23]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800237c:	4b8e      	ldr	r3, [pc, #568]	; (80025b8 <HAL_DMA_IRQHandler+0x248>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a8e      	ldr	r2, [pc, #568]	; (80025bc <HAL_DMA_IRQHandler+0x24c>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	0a9b      	lsrs	r3, r3, #10
 8002388:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	2208      	movs	r2, #8
 800239c:	409a      	lsls	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d01a      	beq.n	80023dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0204 	bic.w	r2, r2, #4
 80023c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c8:	2208      	movs	r2, #8
 80023ca:	409a      	lsls	r2, r3
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	2201      	movs	r2, #1
 80023e2:	409a      	lsls	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d012      	beq.n	8002412 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	2201      	movs	r2, #1
 8002400:	409a      	lsls	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	f043 0202 	orr.w	r2, r3, #2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	2204      	movs	r2, #4
 8002418:	409a      	lsls	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d012      	beq.n	8002448 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	2204      	movs	r2, #4
 8002436:	409a      	lsls	r2, r3
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	f043 0204 	orr.w	r2, r3, #4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	2210      	movs	r2, #16
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d043      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d03c      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	2210      	movs	r2, #16
 800246c:	409a      	lsls	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d018      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d108      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d024      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4798      	blx	r3
 800249e:	e01f      	b.n	80024e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01b      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
 80024b0:	e016      	b.n	80024e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d107      	bne.n	80024d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0208 	bic.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	2220      	movs	r2, #32
 80024e6:	409a      	lsls	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 808f 	beq.w	8002610 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8087 	beq.w	8002610 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2220      	movs	r2, #32
 8002508:	409a      	lsls	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b05      	cmp	r3, #5
 8002518:	d136      	bne.n	8002588 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0216 	bic.w	r2, r2, #22
 8002528:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002538:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <HAL_DMA_IRQHandler+0x1da>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0208 	bic.w	r2, r2, #8
 8002558:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	223f      	movs	r2, #63	; 0x3f
 8002560:	409a      	lsls	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257a:	2b00      	cmp	r3, #0
 800257c:	d07e      	beq.n	800267c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4798      	blx	r3
        }
        return;
 8002586:	e079      	b.n	800267c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01d      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d031      	beq.n	8002610 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
 80025b4:	e02c      	b.n	8002610 <HAL_DMA_IRQHandler+0x2a0>
 80025b6:	bf00      	nop
 80025b8:	20000000 	.word	0x20000000
 80025bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d023      	beq.n	8002610 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
 80025d0:	e01e      	b.n	8002610 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10f      	bne.n	8002600 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0210 	bic.w	r2, r2, #16
 80025ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	2b00      	cmp	r3, #0
 8002616:	d032      	beq.n	800267e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d022      	beq.n	800266a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2205      	movs	r2, #5
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	3301      	adds	r3, #1
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	d307      	bcc.n	8002658 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f2      	bne.n	800263c <HAL_DMA_IRQHandler+0x2cc>
 8002656:	e000      	b.n	800265a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002658:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
 800267a:	e000      	b.n	800267e <HAL_DMA_IRQHandler+0x30e>
        return;
 800267c:	bf00      	nop
    }
  }
}
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d108      	bne.n	80026c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026c2:	e007      	b.n	80026d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	60da      	str	r2, [r3, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3b10      	subs	r3, #16
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <DMA_CalcBaseAndBitshift+0x64>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026fa:	4a13      	ldr	r2, [pc, #76]	; (8002748 <DMA_CalcBaseAndBitshift+0x68>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d909      	bls.n	8002722 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002716:	f023 0303 	bic.w	r3, r3, #3
 800271a:	1d1a      	adds	r2, r3, #4
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	659a      	str	r2, [r3, #88]	; 0x58
 8002720:	e007      	b.n	8002732 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	aaaaaaab 	.word	0xaaaaaaab
 8002748:	08006d94 	.word	0x08006d94

0800274c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11f      	bne.n	80027a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d856      	bhi.n	800281a <DMA_CheckFifoParam+0xce>
 800276c:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <DMA_CheckFifoParam+0x28>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	08002785 	.word	0x08002785
 8002778:	08002797 	.word	0x08002797
 800277c:	08002785 	.word	0x08002785
 8002780:	0800281b 	.word	0x0800281b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d046      	beq.n	800281e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e043      	b.n	800281e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800279e:	d140      	bne.n	8002822 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a4:	e03d      	b.n	8002822 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ae:	d121      	bne.n	80027f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d837      	bhi.n	8002826 <DMA_CheckFifoParam+0xda>
 80027b6:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <DMA_CheckFifoParam+0x70>)
 80027b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027bc:	080027cd 	.word	0x080027cd
 80027c0:	080027d3 	.word	0x080027d3
 80027c4:	080027cd 	.word	0x080027cd
 80027c8:	080027e5 	.word	0x080027e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      break;
 80027d0:	e030      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d025      	beq.n	800282a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e2:	e022      	b.n	800282a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ec:	d11f      	bne.n	800282e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027f2:	e01c      	b.n	800282e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d903      	bls.n	8002802 <DMA_CheckFifoParam+0xb6>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d003      	beq.n	8002808 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002800:	e018      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
      break;
 8002806:	e015      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00e      	beq.n	8002832 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	e00b      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
      break;
 800281a:	bf00      	nop
 800281c:	e00a      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;
 800281e:	bf00      	nop
 8002820:	e008      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
 8002824:	e006      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
 8002828:	e004      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;   
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;
 8002832:	bf00      	nop
    }
  } 
  
  return status; 
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop

08002844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e159      	b.n	8002b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	f040 8148 	bne.w	8002b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d005      	beq.n	8002896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002892:	2b02      	cmp	r3, #2
 8002894:	d130      	bne.n	80028f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028cc:	2201      	movs	r2, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 0201 	and.w	r2, r3, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b03      	cmp	r3, #3
 8002902:	d017      	beq.n	8002934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d123      	bne.n	8002988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	08da      	lsrs	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3208      	adds	r2, #8
 8002948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	220f      	movs	r2, #15
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	08da      	lsrs	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3208      	adds	r2, #8
 8002982:	69b9      	ldr	r1, [r7, #24]
 8002984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a2 	beq.w	8002b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <HAL_GPIO_Init+0x2e8>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a56      	ldr	r2, [pc, #344]	; (8002b2c <HAL_GPIO_Init+0x2e8>)
 80029d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b54      	ldr	r3, [pc, #336]	; (8002b2c <HAL_GPIO_Init+0x2e8>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e6:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_GPIO_Init+0x2ec>)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a49      	ldr	r2, [pc, #292]	; (8002b34 <HAL_GPIO_Init+0x2f0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a48      	ldr	r2, [pc, #288]	; (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x1fe>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a47      	ldr	r2, [pc, #284]	; (8002b3c <HAL_GPIO_Init+0x2f8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x1fa>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a46      	ldr	r2, [pc, #280]	; (8002b40 <HAL_GPIO_Init+0x2fc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x1f6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a45      	ldr	r2, [pc, #276]	; (8002b44 <HAL_GPIO_Init+0x300>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x1f2>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a36:	2307      	movs	r3, #7
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a46:	2300      	movs	r3, #0
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a58:	4935      	ldr	r1, [pc, #212]	; (8002b30 <HAL_GPIO_Init+0x2ec>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a66:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8a:	4a2f      	ldr	r2, [pc, #188]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a90:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab4:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ade:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b08:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	f67f aea2 	bls.w	8002860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40013c00 	.word	0x40013c00

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b68:	e003      	b.n	8002b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e267      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d075      	beq.n	8002c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9e:	4b88      	ldr	r3, [pc, #544]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d00c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002baa:	4b85      	ldr	r3, [pc, #532]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d112      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb6:	4b82      	ldr	r3, [pc, #520]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc2:	d10b      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	4b7e      	ldr	r3, [pc, #504]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05b      	beq.n	8002c88 <HAL_RCC_OscConfig+0x108>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d157      	bne.n	8002c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e242      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x74>
 8002be6:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a75      	ldr	r2, [pc, #468]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xb0>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x98>
 8002bfe:	4b70      	ldr	r3, [pc, #448]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6f      	ldr	r2, [pc, #444]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b6d      	ldr	r3, [pc, #436]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6c      	ldr	r2, [pc, #432]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xb0>
 8002c18:	4b69      	ldr	r3, [pc, #420]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a68      	ldr	r2, [pc, #416]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b66      	ldr	r3, [pc, #408]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a65      	ldr	r2, [pc, #404]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe fd98 	bl	800176c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe fd94 	bl	800176c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e207      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b5b      	ldr	r3, [pc, #364]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xc0>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fd84 	bl	800176c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe fd80 	bl	800176c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1f3      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b51      	ldr	r3, [pc, #324]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0xe8>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d063      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c96:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cae:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x152>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1c7      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4937      	ldr	r1, [pc, #220]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e03a      	b.n	8002d5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_RCC_OscConfig+0x244>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fd39 	bl	800176c <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fd35 	bl	800176c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e1a8      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4925      	ldr	r1, [pc, #148]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e015      	b.n	8002d5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <HAL_RCC_OscConfig+0x244>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fd18 	bl	800176c <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe fd14 	bl	800176c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e187      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d036      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d016      	beq.n	8002da0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCC_OscConfig+0x248>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fe fcf8 	bl	800176c <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d80:	f7fe fcf4 	bl	800176c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e167      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x200>
 8002d9e:	e01b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_OscConfig+0x248>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fce1 	bl	800176c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	e00e      	b.n	8002dcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dae:	f7fe fcdd 	bl	800176c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d907      	bls.n	8002dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e150      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	42470000 	.word	0x42470000
 8002dc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ea      	bne.n	8002dae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8097 	beq.w	8002f14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	4b7d      	ldr	r3, [pc, #500]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a7c      	ldr	r2, [pc, #496]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b7a      	ldr	r3, [pc, #488]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b77      	ldr	r3, [pc, #476]	; (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d118      	bne.n	8002e54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e22:	4b74      	ldr	r3, [pc, #464]	; (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a73      	ldr	r2, [pc, #460]	; (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fc9d 	bl	800176c <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fe fc99 	bl	800176c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e10c      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2ea>
 8002e5c:	4b64      	ldr	r3, [pc, #400]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a63      	ldr	r2, [pc, #396]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x324>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x30c>
 8002e72:	4b5f      	ldr	r3, [pc, #380]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a5e      	ldr	r2, [pc, #376]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a5b      	ldr	r2, [pc, #364]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x324>
 8002e8c:	4b58      	ldr	r3, [pc, #352]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a57      	ldr	r2, [pc, #348]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	4b55      	ldr	r3, [pc, #340]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a54      	ldr	r2, [pc, #336]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	f023 0304 	bic.w	r3, r3, #4
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d015      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe fc5e 	bl	800176c <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fc5a 	bl	800176c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0cb      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eca:	4b49      	ldr	r3, [pc, #292]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0ee      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x334>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fc48 	bl	800176c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fc44 	bl	800176c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0b5      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef6:	4b3e      	ldr	r3, [pc, #248]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ee      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	4a38      	ldr	r2, [pc, #224]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80a1 	beq.w	8003060 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f1e:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d05c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d141      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <HAL_RCC_OscConfig+0x478>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe fc18 	bl	800176c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fe fc14 	bl	800176c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e087      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	491b      	ldr	r1, [pc, #108]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x478>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fbed 	bl	800176c <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe fbe9 	bl	800176c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e05c      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x416>
 8002fb4:	e054      	b.n	8003060 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_RCC_OscConfig+0x478>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fbd6 	bl	800176c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe fbd2 	bl	800176c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e045      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x444>
 8002fe2:	e03d      	b.n	8003060 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e038      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40007000 	.word	0x40007000
 8002ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x4ec>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d028      	beq.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d121      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d11a      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003034:	4293      	cmp	r3, r2
 8003036:	d111      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	3b01      	subs	r3, #1
 8003046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0cc      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b68      	ldr	r3, [pc, #416]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d90c      	bls.n	80030ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b65      	ldr	r3, [pc, #404]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b63      	ldr	r3, [pc, #396]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0b8      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c4:	4b59      	ldr	r3, [pc, #356]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a58      	ldr	r2, [pc, #352]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030dc:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a52      	ldr	r2, [pc, #328]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4b50      	ldr	r3, [pc, #320]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	494d      	ldr	r1, [pc, #308]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d044      	beq.n	8003190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d119      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e07f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d003      	beq.n	800312e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312a:	2b03      	cmp	r3, #3
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e067      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314e:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 0203 	bic.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4934      	ldr	r1, [pc, #208]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003160:	f7fe fb04 	bl	800176c <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	e00a      	b.n	800317e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003168:	f7fe fb00 	bl	800176c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e04f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 020c 	and.w	r2, r3, #12
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	429a      	cmp	r2, r3
 800318e:	d1eb      	bne.n	8003168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d20c      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e032      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4916      	ldr	r1, [pc, #88]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	490e      	ldr	r1, [pc, #56]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031f6:	f000 f821 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80031fa:	4602      	mov	r2, r0
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	490a      	ldr	r1, [pc, #40]	; (8003230 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	5ccb      	ldrb	r3, [r1, r3]
 800320a:	fa22 f303 	lsr.w	r3, r2, r3
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fa64 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00
 800322c:	40023800 	.word	0x40023800
 8003230:	08006d7c 	.word	0x08006d7c
 8003234:	20000000 	.word	0x20000000
 8003238:	20000004 	.word	0x20000004

0800323c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800323c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003240:	b094      	sub	sp, #80	; 0x50
 8003242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	647b      	str	r3, [r7, #68]	; 0x44
 8003248:	2300      	movs	r3, #0
 800324a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800324c:	2300      	movs	r3, #0
 800324e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003254:	4b79      	ldr	r3, [pc, #484]	; (800343c <HAL_RCC_GetSysClockFreq+0x200>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d00d      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x40>
 8003260:	2b08      	cmp	r3, #8
 8003262:	f200 80e1 	bhi.w	8003428 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x34>
 800326a:	2b04      	cmp	r3, #4
 800326c:	d003      	beq.n	8003276 <HAL_RCC_GetSysClockFreq+0x3a>
 800326e:	e0db      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b73      	ldr	r3, [pc, #460]	; (8003440 <HAL_RCC_GetSysClockFreq+0x204>)
 8003272:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003274:	e0db      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003276:	4b73      	ldr	r3, [pc, #460]	; (8003444 <HAL_RCC_GetSysClockFreq+0x208>)
 8003278:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800327a:	e0d8      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327c:	4b6f      	ldr	r3, [pc, #444]	; (800343c <HAL_RCC_GetSysClockFreq+0x200>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003284:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003286:	4b6d      	ldr	r3, [pc, #436]	; (800343c <HAL_RCC_GetSysClockFreq+0x200>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d063      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCC_GetSysClockFreq+0x200>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	2200      	movs	r2, #0
 800329a:	63bb      	str	r3, [r7, #56]	; 0x38
 800329c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a4:	633b      	str	r3, [r7, #48]	; 0x30
 80032a6:	2300      	movs	r3, #0
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
 80032aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032ae:	4622      	mov	r2, r4
 80032b0:	462b      	mov	r3, r5
 80032b2:	f04f 0000 	mov.w	r0, #0
 80032b6:	f04f 0100 	mov.w	r1, #0
 80032ba:	0159      	lsls	r1, r3, #5
 80032bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c0:	0150      	lsls	r0, r2, #5
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4621      	mov	r1, r4
 80032c8:	1a51      	subs	r1, r2, r1
 80032ca:	6139      	str	r1, [r7, #16]
 80032cc:	4629      	mov	r1, r5
 80032ce:	eb63 0301 	sbc.w	r3, r3, r1
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032e0:	4659      	mov	r1, fp
 80032e2:	018b      	lsls	r3, r1, #6
 80032e4:	4651      	mov	r1, sl
 80032e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ea:	4651      	mov	r1, sl
 80032ec:	018a      	lsls	r2, r1, #6
 80032ee:	4651      	mov	r1, sl
 80032f0:	ebb2 0801 	subs.w	r8, r2, r1
 80032f4:	4659      	mov	r1, fp
 80032f6:	eb63 0901 	sbc.w	r9, r3, r1
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800330a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800330e:	4690      	mov	r8, r2
 8003310:	4699      	mov	r9, r3
 8003312:	4623      	mov	r3, r4
 8003314:	eb18 0303 	adds.w	r3, r8, r3
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	462b      	mov	r3, r5
 800331c:	eb49 0303 	adc.w	r3, r9, r3
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800332e:	4629      	mov	r1, r5
 8003330:	024b      	lsls	r3, r1, #9
 8003332:	4621      	mov	r1, r4
 8003334:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003338:	4621      	mov	r1, r4
 800333a:	024a      	lsls	r2, r1, #9
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003342:	2200      	movs	r2, #0
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
 8003346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003348:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800334c:	f7fd fc34 	bl	8000bb8 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4613      	mov	r3, r2
 8003356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003358:	e058      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <HAL_RCC_GetSysClockFreq+0x200>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	2200      	movs	r2, #0
 8003362:	4618      	mov	r0, r3
 8003364:	4611      	mov	r1, r2
 8003366:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800336a:	623b      	str	r3, [r7, #32]
 800336c:	2300      	movs	r3, #0
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
 8003370:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003374:	4642      	mov	r2, r8
 8003376:	464b      	mov	r3, r9
 8003378:	f04f 0000 	mov.w	r0, #0
 800337c:	f04f 0100 	mov.w	r1, #0
 8003380:	0159      	lsls	r1, r3, #5
 8003382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003386:	0150      	lsls	r0, r2, #5
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4641      	mov	r1, r8
 800338e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003392:	4649      	mov	r1, r9
 8003394:	eb63 0b01 	sbc.w	fp, r3, r1
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033ac:	ebb2 040a 	subs.w	r4, r2, sl
 80033b0:	eb63 050b 	sbc.w	r5, r3, fp
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	00eb      	lsls	r3, r5, #3
 80033be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033c2:	00e2      	lsls	r2, r4, #3
 80033c4:	4614      	mov	r4, r2
 80033c6:	461d      	mov	r5, r3
 80033c8:	4643      	mov	r3, r8
 80033ca:	18e3      	adds	r3, r4, r3
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	464b      	mov	r3, r9
 80033d0:	eb45 0303 	adc.w	r3, r5, r3
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033e2:	4629      	mov	r1, r5
 80033e4:	028b      	lsls	r3, r1, #10
 80033e6:	4621      	mov	r1, r4
 80033e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033ec:	4621      	mov	r1, r4
 80033ee:	028a      	lsls	r2, r1, #10
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f6:	2200      	movs	r2, #0
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	61fa      	str	r2, [r7, #28]
 80033fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003400:	f7fd fbda 	bl	8000bb8 <__aeabi_uldivmod>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4613      	mov	r3, r2
 800340a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_GetSysClockFreq+0x200>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	3301      	adds	r3, #1
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800341c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800341e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003426:	e002      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_GetSysClockFreq+0x204>)
 800342a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800342c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003430:	4618      	mov	r0, r3
 8003432:	3750      	adds	r7, #80	; 0x50
 8003434:	46bd      	mov	sp, r7
 8003436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	00f42400 	.word	0x00f42400
 8003444:	007a1200 	.word	0x007a1200

08003448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_RCC_GetHCLKFreq+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000000 	.word	0x20000000

08003460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003464:	f7ff fff0 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0a9b      	lsrs	r3, r3, #10
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	08006d8c 	.word	0x08006d8c

08003488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800348c:	f7ff ffdc 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	0b5b      	lsrs	r3, r3, #13
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4903      	ldr	r1, [pc, #12]	; (80034ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800349e:	5ccb      	ldrb	r3, [r1, r3]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40023800 	.word	0x40023800
 80034ac:	08006d8c 	.word	0x08006d8c

080034b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e03f      	b.n	8003542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd ff64 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f829 	bl	800354c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800354c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003550:	b0c0      	sub	sp, #256	; 0x100
 8003552:	af00      	add	r7, sp, #0
 8003554:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	ea40 0301 	orr.w	r3, r0, r1
 8003574:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	431a      	orrs	r2, r3
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	431a      	orrs	r2, r3
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035a4:	f021 010c 	bic.w	r1, r1, #12
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035b2:	430b      	orrs	r3, r1
 80035b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	6999      	ldr	r1, [r3, #24]
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	ea40 0301 	orr.w	r3, r0, r1
 80035d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b8f      	ldr	r3, [pc, #572]	; (8003818 <UART_SetConfig+0x2cc>)
 80035dc:	429a      	cmp	r2, r3
 80035de:	d005      	beq.n	80035ec <UART_SetConfig+0xa0>
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b8d      	ldr	r3, [pc, #564]	; (800381c <UART_SetConfig+0x2d0>)
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d104      	bne.n	80035f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035ec:	f7ff ff4c 	bl	8003488 <HAL_RCC_GetPCLK2Freq>
 80035f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035f4:	e003      	b.n	80035fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035f6:	f7ff ff33 	bl	8003460 <HAL_RCC_GetPCLK1Freq>
 80035fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003608:	f040 810c 	bne.w	8003824 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800360c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003610:	2200      	movs	r2, #0
 8003612:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003616:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800361a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800361e:	4622      	mov	r2, r4
 8003620:	462b      	mov	r3, r5
 8003622:	1891      	adds	r1, r2, r2
 8003624:	65b9      	str	r1, [r7, #88]	; 0x58
 8003626:	415b      	adcs	r3, r3
 8003628:	65fb      	str	r3, [r7, #92]	; 0x5c
 800362a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800362e:	4621      	mov	r1, r4
 8003630:	eb12 0801 	adds.w	r8, r2, r1
 8003634:	4629      	mov	r1, r5
 8003636:	eb43 0901 	adc.w	r9, r3, r1
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800364a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800364e:	4690      	mov	r8, r2
 8003650:	4699      	mov	r9, r3
 8003652:	4623      	mov	r3, r4
 8003654:	eb18 0303 	adds.w	r3, r8, r3
 8003658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800365c:	462b      	mov	r3, r5
 800365e:	eb49 0303 	adc.w	r3, r9, r3
 8003662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003672:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800367a:	460b      	mov	r3, r1
 800367c:	18db      	adds	r3, r3, r3
 800367e:	653b      	str	r3, [r7, #80]	; 0x50
 8003680:	4613      	mov	r3, r2
 8003682:	eb42 0303 	adc.w	r3, r2, r3
 8003686:	657b      	str	r3, [r7, #84]	; 0x54
 8003688:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800368c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003690:	f7fd fa92 	bl	8000bb8 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4b61      	ldr	r3, [pc, #388]	; (8003820 <UART_SetConfig+0x2d4>)
 800369a:	fba3 2302 	umull	r2, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	011c      	lsls	r4, r3, #4
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	1891      	adds	r1, r2, r2
 80036ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80036bc:	415b      	adcs	r3, r3
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036c4:	4641      	mov	r1, r8
 80036c6:	eb12 0a01 	adds.w	sl, r2, r1
 80036ca:	4649      	mov	r1, r9
 80036cc:	eb43 0b01 	adc.w	fp, r3, r1
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036e4:	4692      	mov	sl, r2
 80036e6:	469b      	mov	fp, r3
 80036e8:	4643      	mov	r3, r8
 80036ea:	eb1a 0303 	adds.w	r3, sl, r3
 80036ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036f2:	464b      	mov	r3, r9
 80036f4:	eb4b 0303 	adc.w	r3, fp, r3
 80036f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003708:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800370c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003710:	460b      	mov	r3, r1
 8003712:	18db      	adds	r3, r3, r3
 8003714:	643b      	str	r3, [r7, #64]	; 0x40
 8003716:	4613      	mov	r3, r2
 8003718:	eb42 0303 	adc.w	r3, r2, r3
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
 800371e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003722:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003726:	f7fd fa47 	bl	8000bb8 <__aeabi_uldivmod>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4611      	mov	r1, r2
 8003730:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <UART_SetConfig+0x2d4>)
 8003732:	fba3 2301 	umull	r2, r3, r3, r1
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2264      	movs	r2, #100	; 0x64
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	1acb      	subs	r3, r1, r3
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003746:	4b36      	ldr	r3, [pc, #216]	; (8003820 <UART_SetConfig+0x2d4>)
 8003748:	fba3 2302 	umull	r2, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003754:	441c      	add	r4, r3
 8003756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375a:	2200      	movs	r2, #0
 800375c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003760:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003764:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003768:	4642      	mov	r2, r8
 800376a:	464b      	mov	r3, r9
 800376c:	1891      	adds	r1, r2, r2
 800376e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003770:	415b      	adcs	r3, r3
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003778:	4641      	mov	r1, r8
 800377a:	1851      	adds	r1, r2, r1
 800377c:	6339      	str	r1, [r7, #48]	; 0x30
 800377e:	4649      	mov	r1, r9
 8003780:	414b      	adcs	r3, r1
 8003782:	637b      	str	r3, [r7, #52]	; 0x34
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003790:	4659      	mov	r1, fp
 8003792:	00cb      	lsls	r3, r1, #3
 8003794:	4651      	mov	r1, sl
 8003796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800379a:	4651      	mov	r1, sl
 800379c:	00ca      	lsls	r2, r1, #3
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	4642      	mov	r2, r8
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037ac:	464b      	mov	r3, r9
 80037ae:	460a      	mov	r2, r1
 80037b0:	eb42 0303 	adc.w	r3, r2, r3
 80037b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037cc:	460b      	mov	r3, r1
 80037ce:	18db      	adds	r3, r3, r3
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d2:	4613      	mov	r3, r2
 80037d4:	eb42 0303 	adc.w	r3, r2, r3
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037e2:	f7fd f9e9 	bl	8000bb8 <__aeabi_uldivmod>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <UART_SetConfig+0x2d4>)
 80037ec:	fba3 1302 	umull	r1, r3, r3, r2
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	2164      	movs	r1, #100	; 0x64
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	3332      	adds	r3, #50	; 0x32
 80037fe:	4a08      	ldr	r2, [pc, #32]	; (8003820 <UART_SetConfig+0x2d4>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	f003 0207 	and.w	r2, r3, #7
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4422      	add	r2, r4
 8003812:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003814:	e105      	b.n	8003a22 <UART_SetConfig+0x4d6>
 8003816:	bf00      	nop
 8003818:	40011000 	.word	0x40011000
 800381c:	40011400 	.word	0x40011400
 8003820:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003828:	2200      	movs	r2, #0
 800382a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800382e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003832:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003836:	4642      	mov	r2, r8
 8003838:	464b      	mov	r3, r9
 800383a:	1891      	adds	r1, r2, r2
 800383c:	6239      	str	r1, [r7, #32]
 800383e:	415b      	adcs	r3, r3
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003846:	4641      	mov	r1, r8
 8003848:	1854      	adds	r4, r2, r1
 800384a:	4649      	mov	r1, r9
 800384c:	eb43 0501 	adc.w	r5, r3, r1
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	00eb      	lsls	r3, r5, #3
 800385a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385e:	00e2      	lsls	r2, r4, #3
 8003860:	4614      	mov	r4, r2
 8003862:	461d      	mov	r5, r3
 8003864:	4643      	mov	r3, r8
 8003866:	18e3      	adds	r3, r4, r3
 8003868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800386c:	464b      	mov	r3, r9
 800386e:	eb45 0303 	adc.w	r3, r5, r3
 8003872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003892:	4629      	mov	r1, r5
 8003894:	008b      	lsls	r3, r1, #2
 8003896:	4621      	mov	r1, r4
 8003898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800389c:	4621      	mov	r1, r4
 800389e:	008a      	lsls	r2, r1, #2
 80038a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038a4:	f7fd f988 	bl	8000bb8 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4b60      	ldr	r3, [pc, #384]	; (8003a30 <UART_SetConfig+0x4e4>)
 80038ae:	fba3 2302 	umull	r2, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	011c      	lsls	r4, r3, #4
 80038b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	1891      	adds	r1, r2, r2
 80038ce:	61b9      	str	r1, [r7, #24]
 80038d0:	415b      	adcs	r3, r3
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038d8:	4641      	mov	r1, r8
 80038da:	1851      	adds	r1, r2, r1
 80038dc:	6139      	str	r1, [r7, #16]
 80038de:	4649      	mov	r1, r9
 80038e0:	414b      	adcs	r3, r1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038f0:	4659      	mov	r1, fp
 80038f2:	00cb      	lsls	r3, r1, #3
 80038f4:	4651      	mov	r1, sl
 80038f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fa:	4651      	mov	r1, sl
 80038fc:	00ca      	lsls	r2, r1, #3
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	4603      	mov	r3, r0
 8003904:	4642      	mov	r2, r8
 8003906:	189b      	adds	r3, r3, r2
 8003908:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800390c:	464b      	mov	r3, r9
 800390e:	460a      	mov	r2, r1
 8003910:	eb42 0303 	adc.w	r3, r2, r3
 8003914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	67bb      	str	r3, [r7, #120]	; 0x78
 8003922:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003930:	4649      	mov	r1, r9
 8003932:	008b      	lsls	r3, r1, #2
 8003934:	4641      	mov	r1, r8
 8003936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800393a:	4641      	mov	r1, r8
 800393c:	008a      	lsls	r2, r1, #2
 800393e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003942:	f7fd f939 	bl	8000bb8 <__aeabi_uldivmod>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <UART_SetConfig+0x4e4>)
 800394c:	fba3 1302 	umull	r1, r3, r3, r2
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	2164      	movs	r1, #100	; 0x64
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	3332      	adds	r3, #50	; 0x32
 800395e:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <UART_SetConfig+0x4e4>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396a:	441c      	add	r4, r3
 800396c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003970:	2200      	movs	r2, #0
 8003972:	673b      	str	r3, [r7, #112]	; 0x70
 8003974:	677a      	str	r2, [r7, #116]	; 0x74
 8003976:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800397a:	4642      	mov	r2, r8
 800397c:	464b      	mov	r3, r9
 800397e:	1891      	adds	r1, r2, r2
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	415b      	adcs	r3, r3
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800398a:	4641      	mov	r1, r8
 800398c:	1851      	adds	r1, r2, r1
 800398e:	6039      	str	r1, [r7, #0]
 8003990:	4649      	mov	r1, r9
 8003992:	414b      	adcs	r3, r1
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039a2:	4659      	mov	r1, fp
 80039a4:	00cb      	lsls	r3, r1, #3
 80039a6:	4651      	mov	r1, sl
 80039a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ac:	4651      	mov	r1, sl
 80039ae:	00ca      	lsls	r2, r1, #3
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	4603      	mov	r3, r0
 80039b6:	4642      	mov	r2, r8
 80039b8:	189b      	adds	r3, r3, r2
 80039ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80039bc:	464b      	mov	r3, r9
 80039be:	460a      	mov	r2, r1
 80039c0:	eb42 0303 	adc.w	r3, r2, r3
 80039c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	663b      	str	r3, [r7, #96]	; 0x60
 80039d0:	667a      	str	r2, [r7, #100]	; 0x64
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039de:	4649      	mov	r1, r9
 80039e0:	008b      	lsls	r3, r1, #2
 80039e2:	4641      	mov	r1, r8
 80039e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039e8:	4641      	mov	r1, r8
 80039ea:	008a      	lsls	r2, r1, #2
 80039ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039f0:	f7fd f8e2 	bl	8000bb8 <__aeabi_uldivmod>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <UART_SetConfig+0x4e4>)
 80039fa:	fba3 1302 	umull	r1, r3, r3, r2
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2164      	movs	r1, #100	; 0x64
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	3332      	adds	r3, #50	; 0x32
 8003a0c:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <UART_SetConfig+0x4e4>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4422      	add	r2, r4
 8003a20:	609a      	str	r2, [r3, #8]
}
 8003a22:	bf00      	nop
 8003a24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a2e:	bf00      	nop
 8003a30:	51eb851f 	.word	0x51eb851f

08003a34 <gpio_clk_en>:
		uint16_t out_max) {
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
}

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <gpio_clk_en+0x78>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d106      	bne.n	8003a52 <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <gpio_clk_en+0x7c>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <gpio_clk_en+0x7c>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 8003a50:	e026      	b.n	8003aa0 <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a17      	ldr	r2, [pc, #92]	; (8003ab4 <gpio_clk_en+0x80>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d106      	bne.n	8003a68 <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <gpio_clk_en+0x7c>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <gpio_clk_en+0x7c>)
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003a66:	e01b      	b.n	8003aa0 <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <gpio_clk_en+0x84>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d106      	bne.n	8003a7e <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <gpio_clk_en+0x7c>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	4a0e      	ldr	r2, [pc, #56]	; (8003ab0 <gpio_clk_en+0x7c>)
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003a7c:	e010      	b.n	8003aa0 <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <gpio_clk_en+0x88>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d106      	bne.n	8003a94 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <gpio_clk_en+0x7c>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <gpio_clk_en+0x7c>)
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003a92:	e005      	b.n	8003aa0 <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <gpio_clk_en+0x7c>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <gpio_clk_en+0x7c>)
 8003a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40020000 	.word	0x40020000
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40020400 	.word	0x40020400
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020c00 	.word	0x40020c00

08003ac0 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d117      	bne.n	8003b04 <gpio_config+0x44>
		gpio_clk_en(port);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff ffad 	bl	8003a34 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f846 	bl	8003b70 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f85b 	bl	8003ba4 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f870 	bl	8003bd8 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f885 	bl	8003c0c <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 8003b02:	e031      	b.n	8003b68 <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10d      	bne.n	8003b26 <gpio_config+0x66>
		gpio_clk_en(port);
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff ff92 	bl	8003a34 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f82b 	bl	8003b70 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f85a 	bl	8003bd8 <gpio_PUPD>
}
 8003b24:	e020      	b.n	8003b68 <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d112      	bne.n	8003b52 <gpio_config+0x92>
		gpio_clk_en(port);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff ff81 	bl	8003a34 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f81a 	bl	8003b70 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f849 	bl	8003bd8 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f85e 	bl	8003c0c <gpio_PHPL_OD>
}
 8003b50:	e00a      	b.n	8003b68 <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d107      	bne.n	8003b68 <gpio_config+0xa8>
		gpio_clk_en(port);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff ff6b 	bl	8003a34 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f804 	bl	8003b70 <gpio_moder>
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4907      	ldr	r1, [pc, #28]	; (8003ba0 <gpio_moder+0x30>)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	2000000c 	.word	0x2000000c

08003ba4 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	4907      	ldr	r1, [pc, #28]	; (8003bd4 <gpio_speed+0x30>)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	2000000c 	.word	0x2000000c

08003bd8 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	4907      	ldr	r1, [pc, #28]	; (8003c08 <gpio_PUPD+0x30>)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	60da      	str	r2, [r3, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	2000000c 	.word	0x2000000c

08003c0c <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	605a      	str	r2, [r3, #4]
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b07      	cmp	r3, #7
 8003c46:	d80a      	bhi.n	8003c5e <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1a      	ldr	r2, [r3, #32]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8003c5c:	e00a      	b.n	8003c74 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3b08      	subs	r3, #8
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f818 	bl	8003cc4 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f842 	bl	8003d28 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8003ca4:	69f9      	ldr	r1, [r7, #28]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f884 	bl	8003db4 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cb4:	f043 030c 	orr.w	r3, r3, #12
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	60d3      	str	r3, [r2, #12]

}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <USART_CLK_EN+0x54>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d106      	bne.n	8003ce2 <USART_CLK_EN+0x1e>
		USART1_CLK_EN;
 8003cd4:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <USART_CLK_EN+0x58>)
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <USART_CLK_EN+0x58>)
 8003cda:	f043 0310 	orr.w	r3, r3, #16
 8003cde:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (usart == USART2) {
		USART2_CLK_EN;
	} else if (usart == USART6) {
		USART6_CLK_EN;
	}
}
 8003ce0:	e014      	b.n	8003d0c <USART_CLK_EN+0x48>
	} else if (usart == USART2) {
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <USART_CLK_EN+0x5c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d106      	bne.n	8003cf8 <USART_CLK_EN+0x34>
		USART2_CLK_EN;
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <USART_CLK_EN+0x58>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a0b      	ldr	r2, [pc, #44]	; (8003d1c <USART_CLK_EN+0x58>)
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003cf6:	e009      	b.n	8003d0c <USART_CLK_EN+0x48>
	} else if (usart == USART6) {
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <USART_CLK_EN+0x60>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d105      	bne.n	8003d0c <USART_CLK_EN+0x48>
		USART6_CLK_EN;
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <USART_CLK_EN+0x58>)
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	4a05      	ldr	r2, [pc, #20]	; (8003d1c <USART_CLK_EN+0x58>)
 8003d06:	f043 0320 	orr.w	r3, r3, #32
 8003d0a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40011000 	.word	0x40011000
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40004400 	.word	0x40004400
 8003d24:	40011400 	.word	0x40011400

08003d28 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8003d36:	2300      	movs	r3, #0
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2302      	movs	r3, #2
 8003d40:	2202      	movs	r2, #2
 8003d42:	6839      	ldr	r1, [r7, #0]
 8003d44:	68b8      	ldr	r0, [r7, #8]
 8003d46:	f7ff febb 	bl	8003ac0 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	2302      	movs	r3, #2
 8003d54:	2202      	movs	r2, #2
 8003d56:	69b9      	ldr	r1, [r7, #24]
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff feb1 	bl	8003ac0 <gpio_config>

	if (usart == USART1) {
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a11      	ldr	r2, [pc, #68]	; (8003da8 <USART_PIN_CONFIG+0x80>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01b      	beq.n	8003d9e <USART_PIN_CONFIG+0x76>
		if (rx_port == PORTA && rx_pinNumber == 10) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
		}
	} else if (usart == USART2) {
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a10      	ldr	r2, [pc, #64]	; (8003dac <USART_PIN_CONFIG+0x84>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d117      	bne.n	8003d9e <USART_PIN_CONFIG+0x76>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 2) {
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4a0f      	ldr	r2, [pc, #60]	; (8003db0 <USART_PIN_CONFIG+0x88>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d107      	bne.n	8003d86 <USART_PIN_CONFIG+0x5e>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d104      	bne.n	8003d86 <USART_PIN_CONFIG+0x5e>
			gpio_altfn(tx_port, tx_pinNumber, PA2_USART2_TX);
 8003d7c:	2207      	movs	r2, #7
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	68b8      	ldr	r0, [r7, #8]
 8003d82:	f7ff ff58 	bl	8003c36 <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 3) {
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <USART_PIN_CONFIG+0x88>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d107      	bne.n	8003d9e <USART_PIN_CONFIG+0x76>
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d104      	bne.n	8003d9e <USART_PIN_CONFIG+0x76>
			gpio_altfn(rx_port, rx_pinNumber, PA3_USART2_RX);
 8003d94:	2207      	movs	r2, #7
 8003d96:	69b9      	ldr	r1, [r7, #24]
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff4c 	bl	8003c36 <gpio_altfn>
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
		}
	}
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40011000 	.word	0x40011000
 8003dac:	40004400 	.word	0x40004400
 8003db0:	40020000 	.word	0x40020000

08003db4 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <USART_BDR_SEL+0x30>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud / 2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	20000000 	.word	0x20000000

08003de8 <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]
 8003dfe:	e017      	b.n	8003e30 <USART_WRITE+0x48>
		if (len == 1) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d103      	bne.n	8003e0e <USART_WRITE+0x26>
			usart->DR = ch;
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	605a      	str	r2, [r3, #4]
 8003e0c:	e006      	b.n	8003e1c <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	4413      	add	r3, r2
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 8003e1c:	bf00      	nop
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f9      	beq.n	8003e1e <USART_WRITE+0x36>
	for (uint8_t i = 0; i < len; i++) {
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d8e3      	bhi.n	8003e00 <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8003e48:	b40f      	push	{r0, r1, r2, r3}
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8003e50:	f107 0314 	add.w	r3, r7, #20
 8003e54:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e5e:	480a      	ldr	r0, [pc, #40]	; (8003e88 <print+0x40>)
 8003e60:	f000 fd14 	bl	800488c <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8003e64:	4808      	ldr	r0, [pc, #32]	; (8003e88 <print+0x40>)
 8003e66:	f7fc f9bb 	bl	80001e0 <strlen>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	2364      	movs	r3, #100	; 0x64
 8003e72:	4905      	ldr	r1, [pc, #20]	; (8003e88 <print+0x40>)
 8003e74:	4805      	ldr	r0, [pc, #20]	; (8003e8c <print+0x44>)
 8003e76:	f7ff ffb7 	bl	8003de8 <USART_WRITE>

}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e84:	b004      	add	sp, #16
 8003e86:	4770      	bx	lr
 8003e88:	20000398 	.word	0x20000398
 8003e8c:	40004400 	.word	0x40004400

08003e90 <uart_print_config>:
	USART_WRITE(UART_TYPE, buffer, len, 100);
	USART_WRITE(UART_TYPE, '\n', 1, 100);

}

void uart_print_config(uint32_t baudRate) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <uart_print_config+0x24>)
 8003ea4:	4903      	ldr	r1, [pc, #12]	; (8003eb4 <uart_print_config+0x24>)
 8003ea6:	4804      	ldr	r0, [pc, #16]	; (8003eb8 <uart_print_config+0x28>)
 8003ea8:	f7ff feea 	bl	8003c80 <USART_INIT>
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40020000 	.word	0x40020000
 8003eb8:	40004400 	.word	0x40004400

08003ebc <__errno>:
 8003ebc:	4b01      	ldr	r3, [pc, #4]	; (8003ec4 <__errno+0x8>)
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	2000004c 	.word	0x2000004c

08003ec8 <__libc_init_array>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	4d0d      	ldr	r5, [pc, #52]	; (8003f00 <__libc_init_array+0x38>)
 8003ecc:	4c0d      	ldr	r4, [pc, #52]	; (8003f04 <__libc_init_array+0x3c>)
 8003ece:	1b64      	subs	r4, r4, r5
 8003ed0:	10a4      	asrs	r4, r4, #2
 8003ed2:	2600      	movs	r6, #0
 8003ed4:	42a6      	cmp	r6, r4
 8003ed6:	d109      	bne.n	8003eec <__libc_init_array+0x24>
 8003ed8:	4d0b      	ldr	r5, [pc, #44]	; (8003f08 <__libc_init_array+0x40>)
 8003eda:	4c0c      	ldr	r4, [pc, #48]	; (8003f0c <__libc_init_array+0x44>)
 8003edc:	f002 ff3c 	bl	8006d58 <_init>
 8003ee0:	1b64      	subs	r4, r4, r5
 8003ee2:	10a4      	asrs	r4, r4, #2
 8003ee4:	2600      	movs	r6, #0
 8003ee6:	42a6      	cmp	r6, r4
 8003ee8:	d105      	bne.n	8003ef6 <__libc_init_array+0x2e>
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef0:	4798      	blx	r3
 8003ef2:	3601      	adds	r6, #1
 8003ef4:	e7ee      	b.n	8003ed4 <__libc_init_array+0xc>
 8003ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efa:	4798      	blx	r3
 8003efc:	3601      	adds	r6, #1
 8003efe:	e7f2      	b.n	8003ee6 <__libc_init_array+0x1e>
 8003f00:	0800717c 	.word	0x0800717c
 8003f04:	0800717c 	.word	0x0800717c
 8003f08:	0800717c 	.word	0x0800717c
 8003f0c:	08007180 	.word	0x08007180

08003f10 <memset>:
 8003f10:	4402      	add	r2, r0
 8003f12:	4603      	mov	r3, r0
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d100      	bne.n	8003f1a <memset+0xa>
 8003f18:	4770      	bx	lr
 8003f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1e:	e7f9      	b.n	8003f14 <memset+0x4>

08003f20 <__cvt>:
 8003f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f24:	ec55 4b10 	vmov	r4, r5, d0
 8003f28:	2d00      	cmp	r5, #0
 8003f2a:	460e      	mov	r6, r1
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	462b      	mov	r3, r5
 8003f30:	bfbb      	ittet	lt
 8003f32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f36:	461d      	movlt	r5, r3
 8003f38:	2300      	movge	r3, #0
 8003f3a:	232d      	movlt	r3, #45	; 0x2d
 8003f3c:	700b      	strb	r3, [r1, #0]
 8003f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f44:	4691      	mov	r9, r2
 8003f46:	f023 0820 	bic.w	r8, r3, #32
 8003f4a:	bfbc      	itt	lt
 8003f4c:	4622      	movlt	r2, r4
 8003f4e:	4614      	movlt	r4, r2
 8003f50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f54:	d005      	beq.n	8003f62 <__cvt+0x42>
 8003f56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f5a:	d100      	bne.n	8003f5e <__cvt+0x3e>
 8003f5c:	3601      	adds	r6, #1
 8003f5e:	2102      	movs	r1, #2
 8003f60:	e000      	b.n	8003f64 <__cvt+0x44>
 8003f62:	2103      	movs	r1, #3
 8003f64:	ab03      	add	r3, sp, #12
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	ab02      	add	r3, sp, #8
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	ec45 4b10 	vmov	d0, r4, r5
 8003f70:	4653      	mov	r3, sl
 8003f72:	4632      	mov	r2, r6
 8003f74:	f000 fd24 	bl	80049c0 <_dtoa_r>
 8003f78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f7c:	4607      	mov	r7, r0
 8003f7e:	d102      	bne.n	8003f86 <__cvt+0x66>
 8003f80:	f019 0f01 	tst.w	r9, #1
 8003f84:	d022      	beq.n	8003fcc <__cvt+0xac>
 8003f86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f8a:	eb07 0906 	add.w	r9, r7, r6
 8003f8e:	d110      	bne.n	8003fb2 <__cvt+0x92>
 8003f90:	783b      	ldrb	r3, [r7, #0]
 8003f92:	2b30      	cmp	r3, #48	; 0x30
 8003f94:	d10a      	bne.n	8003fac <__cvt+0x8c>
 8003f96:	2200      	movs	r2, #0
 8003f98:	2300      	movs	r3, #0
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	f7fc fd9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fa2:	b918      	cbnz	r0, 8003fac <__cvt+0x8c>
 8003fa4:	f1c6 0601 	rsb	r6, r6, #1
 8003fa8:	f8ca 6000 	str.w	r6, [sl]
 8003fac:	f8da 3000 	ldr.w	r3, [sl]
 8003fb0:	4499      	add	r9, r3
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4629      	mov	r1, r5
 8003fba:	f7fc fd8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fbe:	b108      	cbz	r0, 8003fc4 <__cvt+0xa4>
 8003fc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8003fc4:	2230      	movs	r2, #48	; 0x30
 8003fc6:	9b03      	ldr	r3, [sp, #12]
 8003fc8:	454b      	cmp	r3, r9
 8003fca:	d307      	bcc.n	8003fdc <__cvt+0xbc>
 8003fcc:	9b03      	ldr	r3, [sp, #12]
 8003fce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fd0:	1bdb      	subs	r3, r3, r7
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	b004      	add	sp, #16
 8003fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fdc:	1c59      	adds	r1, r3, #1
 8003fde:	9103      	str	r1, [sp, #12]
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e7f0      	b.n	8003fc6 <__cvt+0xa6>

08003fe4 <__exponent>:
 8003fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2900      	cmp	r1, #0
 8003fea:	bfb8      	it	lt
 8003fec:	4249      	neglt	r1, r1
 8003fee:	f803 2b02 	strb.w	r2, [r3], #2
 8003ff2:	bfb4      	ite	lt
 8003ff4:	222d      	movlt	r2, #45	; 0x2d
 8003ff6:	222b      	movge	r2, #43	; 0x2b
 8003ff8:	2909      	cmp	r1, #9
 8003ffa:	7042      	strb	r2, [r0, #1]
 8003ffc:	dd2a      	ble.n	8004054 <__exponent+0x70>
 8003ffe:	f10d 0407 	add.w	r4, sp, #7
 8004002:	46a4      	mov	ip, r4
 8004004:	270a      	movs	r7, #10
 8004006:	46a6      	mov	lr, r4
 8004008:	460a      	mov	r2, r1
 800400a:	fb91 f6f7 	sdiv	r6, r1, r7
 800400e:	fb07 1516 	mls	r5, r7, r6, r1
 8004012:	3530      	adds	r5, #48	; 0x30
 8004014:	2a63      	cmp	r2, #99	; 0x63
 8004016:	f104 34ff 	add.w	r4, r4, #4294967295
 800401a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800401e:	4631      	mov	r1, r6
 8004020:	dcf1      	bgt.n	8004006 <__exponent+0x22>
 8004022:	3130      	adds	r1, #48	; 0x30
 8004024:	f1ae 0502 	sub.w	r5, lr, #2
 8004028:	f804 1c01 	strb.w	r1, [r4, #-1]
 800402c:	1c44      	adds	r4, r0, #1
 800402e:	4629      	mov	r1, r5
 8004030:	4561      	cmp	r1, ip
 8004032:	d30a      	bcc.n	800404a <__exponent+0x66>
 8004034:	f10d 0209 	add.w	r2, sp, #9
 8004038:	eba2 020e 	sub.w	r2, r2, lr
 800403c:	4565      	cmp	r5, ip
 800403e:	bf88      	it	hi
 8004040:	2200      	movhi	r2, #0
 8004042:	4413      	add	r3, r2
 8004044:	1a18      	subs	r0, r3, r0
 8004046:	b003      	add	sp, #12
 8004048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800404a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004052:	e7ed      	b.n	8004030 <__exponent+0x4c>
 8004054:	2330      	movs	r3, #48	; 0x30
 8004056:	3130      	adds	r1, #48	; 0x30
 8004058:	7083      	strb	r3, [r0, #2]
 800405a:	70c1      	strb	r1, [r0, #3]
 800405c:	1d03      	adds	r3, r0, #4
 800405e:	e7f1      	b.n	8004044 <__exponent+0x60>

08004060 <_printf_float>:
 8004060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004064:	ed2d 8b02 	vpush	{d8}
 8004068:	b08d      	sub	sp, #52	; 0x34
 800406a:	460c      	mov	r4, r1
 800406c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004070:	4616      	mov	r6, r2
 8004072:	461f      	mov	r7, r3
 8004074:	4605      	mov	r5, r0
 8004076:	f001 fa91 	bl	800559c <_localeconv_r>
 800407a:	f8d0 a000 	ldr.w	sl, [r0]
 800407e:	4650      	mov	r0, sl
 8004080:	f7fc f8ae 	bl	80001e0 <strlen>
 8004084:	2300      	movs	r3, #0
 8004086:	930a      	str	r3, [sp, #40]	; 0x28
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	9305      	str	r3, [sp, #20]
 800408c:	f8d8 3000 	ldr.w	r3, [r8]
 8004090:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004094:	3307      	adds	r3, #7
 8004096:	f023 0307 	bic.w	r3, r3, #7
 800409a:	f103 0208 	add.w	r2, r3, #8
 800409e:	f8c8 2000 	str.w	r2, [r8]
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80040ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040b2:	9307      	str	r3, [sp, #28]
 80040b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80040b8:	ee08 0a10 	vmov	s16, r0
 80040bc:	4b9f      	ldr	r3, [pc, #636]	; (800433c <_printf_float+0x2dc>)
 80040be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295
 80040c6:	f7fc fd39 	bl	8000b3c <__aeabi_dcmpun>
 80040ca:	bb88      	cbnz	r0, 8004130 <_printf_float+0xd0>
 80040cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040d0:	4b9a      	ldr	r3, [pc, #616]	; (800433c <_printf_float+0x2dc>)
 80040d2:	f04f 32ff 	mov.w	r2, #4294967295
 80040d6:	f7fc fd13 	bl	8000b00 <__aeabi_dcmple>
 80040da:	bb48      	cbnz	r0, 8004130 <_printf_float+0xd0>
 80040dc:	2200      	movs	r2, #0
 80040de:	2300      	movs	r3, #0
 80040e0:	4640      	mov	r0, r8
 80040e2:	4649      	mov	r1, r9
 80040e4:	f7fc fd02 	bl	8000aec <__aeabi_dcmplt>
 80040e8:	b110      	cbz	r0, 80040f0 <_printf_float+0x90>
 80040ea:	232d      	movs	r3, #45	; 0x2d
 80040ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040f0:	4b93      	ldr	r3, [pc, #588]	; (8004340 <_printf_float+0x2e0>)
 80040f2:	4894      	ldr	r0, [pc, #592]	; (8004344 <_printf_float+0x2e4>)
 80040f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80040f8:	bf94      	ite	ls
 80040fa:	4698      	movls	r8, r3
 80040fc:	4680      	movhi	r8, r0
 80040fe:	2303      	movs	r3, #3
 8004100:	6123      	str	r3, [r4, #16]
 8004102:	9b05      	ldr	r3, [sp, #20]
 8004104:	f023 0204 	bic.w	r2, r3, #4
 8004108:	6022      	str	r2, [r4, #0]
 800410a:	f04f 0900 	mov.w	r9, #0
 800410e:	9700      	str	r7, [sp, #0]
 8004110:	4633      	mov	r3, r6
 8004112:	aa0b      	add	r2, sp, #44	; 0x2c
 8004114:	4621      	mov	r1, r4
 8004116:	4628      	mov	r0, r5
 8004118:	f000 f9d8 	bl	80044cc <_printf_common>
 800411c:	3001      	adds	r0, #1
 800411e:	f040 8090 	bne.w	8004242 <_printf_float+0x1e2>
 8004122:	f04f 30ff 	mov.w	r0, #4294967295
 8004126:	b00d      	add	sp, #52	; 0x34
 8004128:	ecbd 8b02 	vpop	{d8}
 800412c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	4640      	mov	r0, r8
 8004136:	4649      	mov	r1, r9
 8004138:	f7fc fd00 	bl	8000b3c <__aeabi_dcmpun>
 800413c:	b140      	cbz	r0, 8004150 <_printf_float+0xf0>
 800413e:	464b      	mov	r3, r9
 8004140:	2b00      	cmp	r3, #0
 8004142:	bfbc      	itt	lt
 8004144:	232d      	movlt	r3, #45	; 0x2d
 8004146:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800414a:	487f      	ldr	r0, [pc, #508]	; (8004348 <_printf_float+0x2e8>)
 800414c:	4b7f      	ldr	r3, [pc, #508]	; (800434c <_printf_float+0x2ec>)
 800414e:	e7d1      	b.n	80040f4 <_printf_float+0x94>
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004156:	9206      	str	r2, [sp, #24]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	d13f      	bne.n	80041dc <_printf_float+0x17c>
 800415c:	2306      	movs	r3, #6
 800415e:	6063      	str	r3, [r4, #4]
 8004160:	9b05      	ldr	r3, [sp, #20]
 8004162:	6861      	ldr	r1, [r4, #4]
 8004164:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004168:	2300      	movs	r3, #0
 800416a:	9303      	str	r3, [sp, #12]
 800416c:	ab0a      	add	r3, sp, #40	; 0x28
 800416e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004172:	ab09      	add	r3, sp, #36	; 0x24
 8004174:	ec49 8b10 	vmov	d0, r8, r9
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	6022      	str	r2, [r4, #0]
 800417c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004180:	4628      	mov	r0, r5
 8004182:	f7ff fecd 	bl	8003f20 <__cvt>
 8004186:	9b06      	ldr	r3, [sp, #24]
 8004188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800418a:	2b47      	cmp	r3, #71	; 0x47
 800418c:	4680      	mov	r8, r0
 800418e:	d108      	bne.n	80041a2 <_printf_float+0x142>
 8004190:	1cc8      	adds	r0, r1, #3
 8004192:	db02      	blt.n	800419a <_printf_float+0x13a>
 8004194:	6863      	ldr	r3, [r4, #4]
 8004196:	4299      	cmp	r1, r3
 8004198:	dd41      	ble.n	800421e <_printf_float+0x1be>
 800419a:	f1ab 0b02 	sub.w	fp, fp, #2
 800419e:	fa5f fb8b 	uxtb.w	fp, fp
 80041a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041a6:	d820      	bhi.n	80041ea <_printf_float+0x18a>
 80041a8:	3901      	subs	r1, #1
 80041aa:	465a      	mov	r2, fp
 80041ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041b0:	9109      	str	r1, [sp, #36]	; 0x24
 80041b2:	f7ff ff17 	bl	8003fe4 <__exponent>
 80041b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041b8:	1813      	adds	r3, r2, r0
 80041ba:	2a01      	cmp	r2, #1
 80041bc:	4681      	mov	r9, r0
 80041be:	6123      	str	r3, [r4, #16]
 80041c0:	dc02      	bgt.n	80041c8 <_printf_float+0x168>
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	07d2      	lsls	r2, r2, #31
 80041c6:	d501      	bpl.n	80041cc <_printf_float+0x16c>
 80041c8:	3301      	adds	r3, #1
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d09c      	beq.n	800410e <_printf_float+0xae>
 80041d4:	232d      	movs	r3, #45	; 0x2d
 80041d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041da:	e798      	b.n	800410e <_printf_float+0xae>
 80041dc:	9a06      	ldr	r2, [sp, #24]
 80041de:	2a47      	cmp	r2, #71	; 0x47
 80041e0:	d1be      	bne.n	8004160 <_printf_float+0x100>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1bc      	bne.n	8004160 <_printf_float+0x100>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e7b9      	b.n	800415e <_printf_float+0xfe>
 80041ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80041ee:	d118      	bne.n	8004222 <_printf_float+0x1c2>
 80041f0:	2900      	cmp	r1, #0
 80041f2:	6863      	ldr	r3, [r4, #4]
 80041f4:	dd0b      	ble.n	800420e <_printf_float+0x1ae>
 80041f6:	6121      	str	r1, [r4, #16]
 80041f8:	b913      	cbnz	r3, 8004200 <_printf_float+0x1a0>
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	07d0      	lsls	r0, r2, #31
 80041fe:	d502      	bpl.n	8004206 <_printf_float+0x1a6>
 8004200:	3301      	adds	r3, #1
 8004202:	440b      	add	r3, r1
 8004204:	6123      	str	r3, [r4, #16]
 8004206:	65a1      	str	r1, [r4, #88]	; 0x58
 8004208:	f04f 0900 	mov.w	r9, #0
 800420c:	e7de      	b.n	80041cc <_printf_float+0x16c>
 800420e:	b913      	cbnz	r3, 8004216 <_printf_float+0x1b6>
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	07d2      	lsls	r2, r2, #31
 8004214:	d501      	bpl.n	800421a <_printf_float+0x1ba>
 8004216:	3302      	adds	r3, #2
 8004218:	e7f4      	b.n	8004204 <_printf_float+0x1a4>
 800421a:	2301      	movs	r3, #1
 800421c:	e7f2      	b.n	8004204 <_printf_float+0x1a4>
 800421e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004224:	4299      	cmp	r1, r3
 8004226:	db05      	blt.n	8004234 <_printf_float+0x1d4>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	6121      	str	r1, [r4, #16]
 800422c:	07d8      	lsls	r0, r3, #31
 800422e:	d5ea      	bpl.n	8004206 <_printf_float+0x1a6>
 8004230:	1c4b      	adds	r3, r1, #1
 8004232:	e7e7      	b.n	8004204 <_printf_float+0x1a4>
 8004234:	2900      	cmp	r1, #0
 8004236:	bfd4      	ite	le
 8004238:	f1c1 0202 	rsble	r2, r1, #2
 800423c:	2201      	movgt	r2, #1
 800423e:	4413      	add	r3, r2
 8004240:	e7e0      	b.n	8004204 <_printf_float+0x1a4>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	055a      	lsls	r2, r3, #21
 8004246:	d407      	bmi.n	8004258 <_printf_float+0x1f8>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	4642      	mov	r2, r8
 800424c:	4631      	mov	r1, r6
 800424e:	4628      	mov	r0, r5
 8004250:	47b8      	blx	r7
 8004252:	3001      	adds	r0, #1
 8004254:	d12c      	bne.n	80042b0 <_printf_float+0x250>
 8004256:	e764      	b.n	8004122 <_printf_float+0xc2>
 8004258:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800425c:	f240 80e0 	bls.w	8004420 <_printf_float+0x3c0>
 8004260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004264:	2200      	movs	r2, #0
 8004266:	2300      	movs	r3, #0
 8004268:	f7fc fc36 	bl	8000ad8 <__aeabi_dcmpeq>
 800426c:	2800      	cmp	r0, #0
 800426e:	d034      	beq.n	80042da <_printf_float+0x27a>
 8004270:	4a37      	ldr	r2, [pc, #220]	; (8004350 <_printf_float+0x2f0>)
 8004272:	2301      	movs	r3, #1
 8004274:	4631      	mov	r1, r6
 8004276:	4628      	mov	r0, r5
 8004278:	47b8      	blx	r7
 800427a:	3001      	adds	r0, #1
 800427c:	f43f af51 	beq.w	8004122 <_printf_float+0xc2>
 8004280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004284:	429a      	cmp	r2, r3
 8004286:	db02      	blt.n	800428e <_printf_float+0x22e>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	07d8      	lsls	r0, r3, #31
 800428c:	d510      	bpl.n	80042b0 <_printf_float+0x250>
 800428e:	ee18 3a10 	vmov	r3, s16
 8004292:	4652      	mov	r2, sl
 8004294:	4631      	mov	r1, r6
 8004296:	4628      	mov	r0, r5
 8004298:	47b8      	blx	r7
 800429a:	3001      	adds	r0, #1
 800429c:	f43f af41 	beq.w	8004122 <_printf_float+0xc2>
 80042a0:	f04f 0800 	mov.w	r8, #0
 80042a4:	f104 091a 	add.w	r9, r4, #26
 80042a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042aa:	3b01      	subs	r3, #1
 80042ac:	4543      	cmp	r3, r8
 80042ae:	dc09      	bgt.n	80042c4 <_printf_float+0x264>
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	079b      	lsls	r3, r3, #30
 80042b4:	f100 8105 	bmi.w	80044c2 <_printf_float+0x462>
 80042b8:	68e0      	ldr	r0, [r4, #12]
 80042ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042bc:	4298      	cmp	r0, r3
 80042be:	bfb8      	it	lt
 80042c0:	4618      	movlt	r0, r3
 80042c2:	e730      	b.n	8004126 <_printf_float+0xc6>
 80042c4:	2301      	movs	r3, #1
 80042c6:	464a      	mov	r2, r9
 80042c8:	4631      	mov	r1, r6
 80042ca:	4628      	mov	r0, r5
 80042cc:	47b8      	blx	r7
 80042ce:	3001      	adds	r0, #1
 80042d0:	f43f af27 	beq.w	8004122 <_printf_float+0xc2>
 80042d4:	f108 0801 	add.w	r8, r8, #1
 80042d8:	e7e6      	b.n	80042a8 <_printf_float+0x248>
 80042da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	dc39      	bgt.n	8004354 <_printf_float+0x2f4>
 80042e0:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <_printf_float+0x2f0>)
 80042e2:	2301      	movs	r3, #1
 80042e4:	4631      	mov	r1, r6
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	f43f af19 	beq.w	8004122 <_printf_float+0xc2>
 80042f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042f4:	4313      	orrs	r3, r2
 80042f6:	d102      	bne.n	80042fe <_printf_float+0x29e>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	07d9      	lsls	r1, r3, #31
 80042fc:	d5d8      	bpl.n	80042b0 <_printf_float+0x250>
 80042fe:	ee18 3a10 	vmov	r3, s16
 8004302:	4652      	mov	r2, sl
 8004304:	4631      	mov	r1, r6
 8004306:	4628      	mov	r0, r5
 8004308:	47b8      	blx	r7
 800430a:	3001      	adds	r0, #1
 800430c:	f43f af09 	beq.w	8004122 <_printf_float+0xc2>
 8004310:	f04f 0900 	mov.w	r9, #0
 8004314:	f104 0a1a 	add.w	sl, r4, #26
 8004318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800431a:	425b      	negs	r3, r3
 800431c:	454b      	cmp	r3, r9
 800431e:	dc01      	bgt.n	8004324 <_printf_float+0x2c4>
 8004320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004322:	e792      	b.n	800424a <_printf_float+0x1ea>
 8004324:	2301      	movs	r3, #1
 8004326:	4652      	mov	r2, sl
 8004328:	4631      	mov	r1, r6
 800432a:	4628      	mov	r0, r5
 800432c:	47b8      	blx	r7
 800432e:	3001      	adds	r0, #1
 8004330:	f43f aef7 	beq.w	8004122 <_printf_float+0xc2>
 8004334:	f109 0901 	add.w	r9, r9, #1
 8004338:	e7ee      	b.n	8004318 <_printf_float+0x2b8>
 800433a:	bf00      	nop
 800433c:	7fefffff 	.word	0x7fefffff
 8004340:	08006da0 	.word	0x08006da0
 8004344:	08006da4 	.word	0x08006da4
 8004348:	08006dac 	.word	0x08006dac
 800434c:	08006da8 	.word	0x08006da8
 8004350:	08006db0 	.word	0x08006db0
 8004354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004358:	429a      	cmp	r2, r3
 800435a:	bfa8      	it	ge
 800435c:	461a      	movge	r2, r3
 800435e:	2a00      	cmp	r2, #0
 8004360:	4691      	mov	r9, r2
 8004362:	dc37      	bgt.n	80043d4 <_printf_float+0x374>
 8004364:	f04f 0b00 	mov.w	fp, #0
 8004368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800436c:	f104 021a 	add.w	r2, r4, #26
 8004370:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004372:	9305      	str	r3, [sp, #20]
 8004374:	eba3 0309 	sub.w	r3, r3, r9
 8004378:	455b      	cmp	r3, fp
 800437a:	dc33      	bgt.n	80043e4 <_printf_float+0x384>
 800437c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004380:	429a      	cmp	r2, r3
 8004382:	db3b      	blt.n	80043fc <_printf_float+0x39c>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	07da      	lsls	r2, r3, #31
 8004388:	d438      	bmi.n	80043fc <_printf_float+0x39c>
 800438a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800438c:	9a05      	ldr	r2, [sp, #20]
 800438e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004390:	1a9a      	subs	r2, r3, r2
 8004392:	eba3 0901 	sub.w	r9, r3, r1
 8004396:	4591      	cmp	r9, r2
 8004398:	bfa8      	it	ge
 800439a:	4691      	movge	r9, r2
 800439c:	f1b9 0f00 	cmp.w	r9, #0
 80043a0:	dc35      	bgt.n	800440e <_printf_float+0x3ae>
 80043a2:	f04f 0800 	mov.w	r8, #0
 80043a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043aa:	f104 0a1a 	add.w	sl, r4, #26
 80043ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	eba3 0309 	sub.w	r3, r3, r9
 80043b8:	4543      	cmp	r3, r8
 80043ba:	f77f af79 	ble.w	80042b0 <_printf_float+0x250>
 80043be:	2301      	movs	r3, #1
 80043c0:	4652      	mov	r2, sl
 80043c2:	4631      	mov	r1, r6
 80043c4:	4628      	mov	r0, r5
 80043c6:	47b8      	blx	r7
 80043c8:	3001      	adds	r0, #1
 80043ca:	f43f aeaa 	beq.w	8004122 <_printf_float+0xc2>
 80043ce:	f108 0801 	add.w	r8, r8, #1
 80043d2:	e7ec      	b.n	80043ae <_printf_float+0x34e>
 80043d4:	4613      	mov	r3, r2
 80043d6:	4631      	mov	r1, r6
 80043d8:	4642      	mov	r2, r8
 80043da:	4628      	mov	r0, r5
 80043dc:	47b8      	blx	r7
 80043de:	3001      	adds	r0, #1
 80043e0:	d1c0      	bne.n	8004364 <_printf_float+0x304>
 80043e2:	e69e      	b.n	8004122 <_printf_float+0xc2>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4631      	mov	r1, r6
 80043e8:	4628      	mov	r0, r5
 80043ea:	9205      	str	r2, [sp, #20]
 80043ec:	47b8      	blx	r7
 80043ee:	3001      	adds	r0, #1
 80043f0:	f43f ae97 	beq.w	8004122 <_printf_float+0xc2>
 80043f4:	9a05      	ldr	r2, [sp, #20]
 80043f6:	f10b 0b01 	add.w	fp, fp, #1
 80043fa:	e7b9      	b.n	8004370 <_printf_float+0x310>
 80043fc:	ee18 3a10 	vmov	r3, s16
 8004400:	4652      	mov	r2, sl
 8004402:	4631      	mov	r1, r6
 8004404:	4628      	mov	r0, r5
 8004406:	47b8      	blx	r7
 8004408:	3001      	adds	r0, #1
 800440a:	d1be      	bne.n	800438a <_printf_float+0x32a>
 800440c:	e689      	b.n	8004122 <_printf_float+0xc2>
 800440e:	9a05      	ldr	r2, [sp, #20]
 8004410:	464b      	mov	r3, r9
 8004412:	4442      	add	r2, r8
 8004414:	4631      	mov	r1, r6
 8004416:	4628      	mov	r0, r5
 8004418:	47b8      	blx	r7
 800441a:	3001      	adds	r0, #1
 800441c:	d1c1      	bne.n	80043a2 <_printf_float+0x342>
 800441e:	e680      	b.n	8004122 <_printf_float+0xc2>
 8004420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004422:	2a01      	cmp	r2, #1
 8004424:	dc01      	bgt.n	800442a <_printf_float+0x3ca>
 8004426:	07db      	lsls	r3, r3, #31
 8004428:	d538      	bpl.n	800449c <_printf_float+0x43c>
 800442a:	2301      	movs	r3, #1
 800442c:	4642      	mov	r2, r8
 800442e:	4631      	mov	r1, r6
 8004430:	4628      	mov	r0, r5
 8004432:	47b8      	blx	r7
 8004434:	3001      	adds	r0, #1
 8004436:	f43f ae74 	beq.w	8004122 <_printf_float+0xc2>
 800443a:	ee18 3a10 	vmov	r3, s16
 800443e:	4652      	mov	r2, sl
 8004440:	4631      	mov	r1, r6
 8004442:	4628      	mov	r0, r5
 8004444:	47b8      	blx	r7
 8004446:	3001      	adds	r0, #1
 8004448:	f43f ae6b 	beq.w	8004122 <_printf_float+0xc2>
 800444c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004450:	2200      	movs	r2, #0
 8004452:	2300      	movs	r3, #0
 8004454:	f7fc fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 8004458:	b9d8      	cbnz	r0, 8004492 <_printf_float+0x432>
 800445a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800445c:	f108 0201 	add.w	r2, r8, #1
 8004460:	3b01      	subs	r3, #1
 8004462:	4631      	mov	r1, r6
 8004464:	4628      	mov	r0, r5
 8004466:	47b8      	blx	r7
 8004468:	3001      	adds	r0, #1
 800446a:	d10e      	bne.n	800448a <_printf_float+0x42a>
 800446c:	e659      	b.n	8004122 <_printf_float+0xc2>
 800446e:	2301      	movs	r3, #1
 8004470:	4652      	mov	r2, sl
 8004472:	4631      	mov	r1, r6
 8004474:	4628      	mov	r0, r5
 8004476:	47b8      	blx	r7
 8004478:	3001      	adds	r0, #1
 800447a:	f43f ae52 	beq.w	8004122 <_printf_float+0xc2>
 800447e:	f108 0801 	add.w	r8, r8, #1
 8004482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	4543      	cmp	r3, r8
 8004488:	dcf1      	bgt.n	800446e <_printf_float+0x40e>
 800448a:	464b      	mov	r3, r9
 800448c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004490:	e6dc      	b.n	800424c <_printf_float+0x1ec>
 8004492:	f04f 0800 	mov.w	r8, #0
 8004496:	f104 0a1a 	add.w	sl, r4, #26
 800449a:	e7f2      	b.n	8004482 <_printf_float+0x422>
 800449c:	2301      	movs	r3, #1
 800449e:	4642      	mov	r2, r8
 80044a0:	e7df      	b.n	8004462 <_printf_float+0x402>
 80044a2:	2301      	movs	r3, #1
 80044a4:	464a      	mov	r2, r9
 80044a6:	4631      	mov	r1, r6
 80044a8:	4628      	mov	r0, r5
 80044aa:	47b8      	blx	r7
 80044ac:	3001      	adds	r0, #1
 80044ae:	f43f ae38 	beq.w	8004122 <_printf_float+0xc2>
 80044b2:	f108 0801 	add.w	r8, r8, #1
 80044b6:	68e3      	ldr	r3, [r4, #12]
 80044b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044ba:	1a5b      	subs	r3, r3, r1
 80044bc:	4543      	cmp	r3, r8
 80044be:	dcf0      	bgt.n	80044a2 <_printf_float+0x442>
 80044c0:	e6fa      	b.n	80042b8 <_printf_float+0x258>
 80044c2:	f04f 0800 	mov.w	r8, #0
 80044c6:	f104 0919 	add.w	r9, r4, #25
 80044ca:	e7f4      	b.n	80044b6 <_printf_float+0x456>

080044cc <_printf_common>:
 80044cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d0:	4616      	mov	r6, r2
 80044d2:	4699      	mov	r9, r3
 80044d4:	688a      	ldr	r2, [r1, #8]
 80044d6:	690b      	ldr	r3, [r1, #16]
 80044d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044dc:	4293      	cmp	r3, r2
 80044de:	bfb8      	it	lt
 80044e0:	4613      	movlt	r3, r2
 80044e2:	6033      	str	r3, [r6, #0]
 80044e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044e8:	4607      	mov	r7, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	b10a      	cbz	r2, 80044f2 <_printf_common+0x26>
 80044ee:	3301      	adds	r3, #1
 80044f0:	6033      	str	r3, [r6, #0]
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	0699      	lsls	r1, r3, #26
 80044f6:	bf42      	ittt	mi
 80044f8:	6833      	ldrmi	r3, [r6, #0]
 80044fa:	3302      	addmi	r3, #2
 80044fc:	6033      	strmi	r3, [r6, #0]
 80044fe:	6825      	ldr	r5, [r4, #0]
 8004500:	f015 0506 	ands.w	r5, r5, #6
 8004504:	d106      	bne.n	8004514 <_printf_common+0x48>
 8004506:	f104 0a19 	add.w	sl, r4, #25
 800450a:	68e3      	ldr	r3, [r4, #12]
 800450c:	6832      	ldr	r2, [r6, #0]
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	42ab      	cmp	r3, r5
 8004512:	dc26      	bgt.n	8004562 <_printf_common+0x96>
 8004514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004518:	1e13      	subs	r3, r2, #0
 800451a:	6822      	ldr	r2, [r4, #0]
 800451c:	bf18      	it	ne
 800451e:	2301      	movne	r3, #1
 8004520:	0692      	lsls	r2, r2, #26
 8004522:	d42b      	bmi.n	800457c <_printf_common+0xb0>
 8004524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004528:	4649      	mov	r1, r9
 800452a:	4638      	mov	r0, r7
 800452c:	47c0      	blx	r8
 800452e:	3001      	adds	r0, #1
 8004530:	d01e      	beq.n	8004570 <_printf_common+0xa4>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	68e5      	ldr	r5, [r4, #12]
 8004536:	6832      	ldr	r2, [r6, #0]
 8004538:	f003 0306 	and.w	r3, r3, #6
 800453c:	2b04      	cmp	r3, #4
 800453e:	bf08      	it	eq
 8004540:	1aad      	subeq	r5, r5, r2
 8004542:	68a3      	ldr	r3, [r4, #8]
 8004544:	6922      	ldr	r2, [r4, #16]
 8004546:	bf0c      	ite	eq
 8004548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800454c:	2500      	movne	r5, #0
 800454e:	4293      	cmp	r3, r2
 8004550:	bfc4      	itt	gt
 8004552:	1a9b      	subgt	r3, r3, r2
 8004554:	18ed      	addgt	r5, r5, r3
 8004556:	2600      	movs	r6, #0
 8004558:	341a      	adds	r4, #26
 800455a:	42b5      	cmp	r5, r6
 800455c:	d11a      	bne.n	8004594 <_printf_common+0xc8>
 800455e:	2000      	movs	r0, #0
 8004560:	e008      	b.n	8004574 <_printf_common+0xa8>
 8004562:	2301      	movs	r3, #1
 8004564:	4652      	mov	r2, sl
 8004566:	4649      	mov	r1, r9
 8004568:	4638      	mov	r0, r7
 800456a:	47c0      	blx	r8
 800456c:	3001      	adds	r0, #1
 800456e:	d103      	bne.n	8004578 <_printf_common+0xac>
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004578:	3501      	adds	r5, #1
 800457a:	e7c6      	b.n	800450a <_printf_common+0x3e>
 800457c:	18e1      	adds	r1, r4, r3
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	2030      	movs	r0, #48	; 0x30
 8004582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004586:	4422      	add	r2, r4
 8004588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800458c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004590:	3302      	adds	r3, #2
 8004592:	e7c7      	b.n	8004524 <_printf_common+0x58>
 8004594:	2301      	movs	r3, #1
 8004596:	4622      	mov	r2, r4
 8004598:	4649      	mov	r1, r9
 800459a:	4638      	mov	r0, r7
 800459c:	47c0      	blx	r8
 800459e:	3001      	adds	r0, #1
 80045a0:	d0e6      	beq.n	8004570 <_printf_common+0xa4>
 80045a2:	3601      	adds	r6, #1
 80045a4:	e7d9      	b.n	800455a <_printf_common+0x8e>
	...

080045a8 <_printf_i>:
 80045a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045ac:	7e0f      	ldrb	r7, [r1, #24]
 80045ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045b0:	2f78      	cmp	r7, #120	; 0x78
 80045b2:	4691      	mov	r9, r2
 80045b4:	4680      	mov	r8, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	469a      	mov	sl, r3
 80045ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045be:	d807      	bhi.n	80045d0 <_printf_i+0x28>
 80045c0:	2f62      	cmp	r7, #98	; 0x62
 80045c2:	d80a      	bhi.n	80045da <_printf_i+0x32>
 80045c4:	2f00      	cmp	r7, #0
 80045c6:	f000 80d8 	beq.w	800477a <_printf_i+0x1d2>
 80045ca:	2f58      	cmp	r7, #88	; 0x58
 80045cc:	f000 80a3 	beq.w	8004716 <_printf_i+0x16e>
 80045d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045d8:	e03a      	b.n	8004650 <_printf_i+0xa8>
 80045da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045de:	2b15      	cmp	r3, #21
 80045e0:	d8f6      	bhi.n	80045d0 <_printf_i+0x28>
 80045e2:	a101      	add	r1, pc, #4	; (adr r1, 80045e8 <_printf_i+0x40>)
 80045e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045e8:	08004641 	.word	0x08004641
 80045ec:	08004655 	.word	0x08004655
 80045f0:	080045d1 	.word	0x080045d1
 80045f4:	080045d1 	.word	0x080045d1
 80045f8:	080045d1 	.word	0x080045d1
 80045fc:	080045d1 	.word	0x080045d1
 8004600:	08004655 	.word	0x08004655
 8004604:	080045d1 	.word	0x080045d1
 8004608:	080045d1 	.word	0x080045d1
 800460c:	080045d1 	.word	0x080045d1
 8004610:	080045d1 	.word	0x080045d1
 8004614:	08004761 	.word	0x08004761
 8004618:	08004685 	.word	0x08004685
 800461c:	08004743 	.word	0x08004743
 8004620:	080045d1 	.word	0x080045d1
 8004624:	080045d1 	.word	0x080045d1
 8004628:	08004783 	.word	0x08004783
 800462c:	080045d1 	.word	0x080045d1
 8004630:	08004685 	.word	0x08004685
 8004634:	080045d1 	.word	0x080045d1
 8004638:	080045d1 	.word	0x080045d1
 800463c:	0800474b 	.word	0x0800474b
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	1d1a      	adds	r2, r3, #4
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	602a      	str	r2, [r5, #0]
 8004648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800464c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004650:	2301      	movs	r3, #1
 8004652:	e0a3      	b.n	800479c <_printf_i+0x1f4>
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	6829      	ldr	r1, [r5, #0]
 8004658:	0606      	lsls	r6, r0, #24
 800465a:	f101 0304 	add.w	r3, r1, #4
 800465e:	d50a      	bpl.n	8004676 <_printf_i+0xce>
 8004660:	680e      	ldr	r6, [r1, #0]
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	2e00      	cmp	r6, #0
 8004666:	da03      	bge.n	8004670 <_printf_i+0xc8>
 8004668:	232d      	movs	r3, #45	; 0x2d
 800466a:	4276      	negs	r6, r6
 800466c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004670:	485e      	ldr	r0, [pc, #376]	; (80047ec <_printf_i+0x244>)
 8004672:	230a      	movs	r3, #10
 8004674:	e019      	b.n	80046aa <_printf_i+0x102>
 8004676:	680e      	ldr	r6, [r1, #0]
 8004678:	602b      	str	r3, [r5, #0]
 800467a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800467e:	bf18      	it	ne
 8004680:	b236      	sxthne	r6, r6
 8004682:	e7ef      	b.n	8004664 <_printf_i+0xbc>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	1d19      	adds	r1, r3, #4
 800468a:	6029      	str	r1, [r5, #0]
 800468c:	0601      	lsls	r1, r0, #24
 800468e:	d501      	bpl.n	8004694 <_printf_i+0xec>
 8004690:	681e      	ldr	r6, [r3, #0]
 8004692:	e002      	b.n	800469a <_printf_i+0xf2>
 8004694:	0646      	lsls	r6, r0, #25
 8004696:	d5fb      	bpl.n	8004690 <_printf_i+0xe8>
 8004698:	881e      	ldrh	r6, [r3, #0]
 800469a:	4854      	ldr	r0, [pc, #336]	; (80047ec <_printf_i+0x244>)
 800469c:	2f6f      	cmp	r7, #111	; 0x6f
 800469e:	bf0c      	ite	eq
 80046a0:	2308      	moveq	r3, #8
 80046a2:	230a      	movne	r3, #10
 80046a4:	2100      	movs	r1, #0
 80046a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046aa:	6865      	ldr	r5, [r4, #4]
 80046ac:	60a5      	str	r5, [r4, #8]
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	bfa2      	ittt	ge
 80046b2:	6821      	ldrge	r1, [r4, #0]
 80046b4:	f021 0104 	bicge.w	r1, r1, #4
 80046b8:	6021      	strge	r1, [r4, #0]
 80046ba:	b90e      	cbnz	r6, 80046c0 <_printf_i+0x118>
 80046bc:	2d00      	cmp	r5, #0
 80046be:	d04d      	beq.n	800475c <_printf_i+0x1b4>
 80046c0:	4615      	mov	r5, r2
 80046c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80046c6:	fb03 6711 	mls	r7, r3, r1, r6
 80046ca:	5dc7      	ldrb	r7, [r0, r7]
 80046cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046d0:	4637      	mov	r7, r6
 80046d2:	42bb      	cmp	r3, r7
 80046d4:	460e      	mov	r6, r1
 80046d6:	d9f4      	bls.n	80046c2 <_printf_i+0x11a>
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d10b      	bne.n	80046f4 <_printf_i+0x14c>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	07de      	lsls	r6, r3, #31
 80046e0:	d508      	bpl.n	80046f4 <_printf_i+0x14c>
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	6861      	ldr	r1, [r4, #4]
 80046e6:	4299      	cmp	r1, r3
 80046e8:	bfde      	ittt	le
 80046ea:	2330      	movle	r3, #48	; 0x30
 80046ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046f4:	1b52      	subs	r2, r2, r5
 80046f6:	6122      	str	r2, [r4, #16]
 80046f8:	f8cd a000 	str.w	sl, [sp]
 80046fc:	464b      	mov	r3, r9
 80046fe:	aa03      	add	r2, sp, #12
 8004700:	4621      	mov	r1, r4
 8004702:	4640      	mov	r0, r8
 8004704:	f7ff fee2 	bl	80044cc <_printf_common>
 8004708:	3001      	adds	r0, #1
 800470a:	d14c      	bne.n	80047a6 <_printf_i+0x1fe>
 800470c:	f04f 30ff 	mov.w	r0, #4294967295
 8004710:	b004      	add	sp, #16
 8004712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004716:	4835      	ldr	r0, [pc, #212]	; (80047ec <_printf_i+0x244>)
 8004718:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800471c:	6829      	ldr	r1, [r5, #0]
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	f851 6b04 	ldr.w	r6, [r1], #4
 8004724:	6029      	str	r1, [r5, #0]
 8004726:	061d      	lsls	r5, r3, #24
 8004728:	d514      	bpl.n	8004754 <_printf_i+0x1ac>
 800472a:	07df      	lsls	r7, r3, #31
 800472c:	bf44      	itt	mi
 800472e:	f043 0320 	orrmi.w	r3, r3, #32
 8004732:	6023      	strmi	r3, [r4, #0]
 8004734:	b91e      	cbnz	r6, 800473e <_printf_i+0x196>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	f023 0320 	bic.w	r3, r3, #32
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	2310      	movs	r3, #16
 8004740:	e7b0      	b.n	80046a4 <_printf_i+0xfc>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	f043 0320 	orr.w	r3, r3, #32
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	2378      	movs	r3, #120	; 0x78
 800474c:	4828      	ldr	r0, [pc, #160]	; (80047f0 <_printf_i+0x248>)
 800474e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004752:	e7e3      	b.n	800471c <_printf_i+0x174>
 8004754:	0659      	lsls	r1, r3, #25
 8004756:	bf48      	it	mi
 8004758:	b2b6      	uxthmi	r6, r6
 800475a:	e7e6      	b.n	800472a <_printf_i+0x182>
 800475c:	4615      	mov	r5, r2
 800475e:	e7bb      	b.n	80046d8 <_printf_i+0x130>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	6826      	ldr	r6, [r4, #0]
 8004764:	6961      	ldr	r1, [r4, #20]
 8004766:	1d18      	adds	r0, r3, #4
 8004768:	6028      	str	r0, [r5, #0]
 800476a:	0635      	lsls	r5, r6, #24
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	d501      	bpl.n	8004774 <_printf_i+0x1cc>
 8004770:	6019      	str	r1, [r3, #0]
 8004772:	e002      	b.n	800477a <_printf_i+0x1d2>
 8004774:	0670      	lsls	r0, r6, #25
 8004776:	d5fb      	bpl.n	8004770 <_printf_i+0x1c8>
 8004778:	8019      	strh	r1, [r3, #0]
 800477a:	2300      	movs	r3, #0
 800477c:	6123      	str	r3, [r4, #16]
 800477e:	4615      	mov	r5, r2
 8004780:	e7ba      	b.n	80046f8 <_printf_i+0x150>
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	1d1a      	adds	r2, r3, #4
 8004786:	602a      	str	r2, [r5, #0]
 8004788:	681d      	ldr	r5, [r3, #0]
 800478a:	6862      	ldr	r2, [r4, #4]
 800478c:	2100      	movs	r1, #0
 800478e:	4628      	mov	r0, r5
 8004790:	f7fb fd2e 	bl	80001f0 <memchr>
 8004794:	b108      	cbz	r0, 800479a <_printf_i+0x1f2>
 8004796:	1b40      	subs	r0, r0, r5
 8004798:	6060      	str	r0, [r4, #4]
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	6123      	str	r3, [r4, #16]
 800479e:	2300      	movs	r3, #0
 80047a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a4:	e7a8      	b.n	80046f8 <_printf_i+0x150>
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	462a      	mov	r2, r5
 80047aa:	4649      	mov	r1, r9
 80047ac:	4640      	mov	r0, r8
 80047ae:	47d0      	blx	sl
 80047b0:	3001      	adds	r0, #1
 80047b2:	d0ab      	beq.n	800470c <_printf_i+0x164>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	079b      	lsls	r3, r3, #30
 80047b8:	d413      	bmi.n	80047e2 <_printf_i+0x23a>
 80047ba:	68e0      	ldr	r0, [r4, #12]
 80047bc:	9b03      	ldr	r3, [sp, #12]
 80047be:	4298      	cmp	r0, r3
 80047c0:	bfb8      	it	lt
 80047c2:	4618      	movlt	r0, r3
 80047c4:	e7a4      	b.n	8004710 <_printf_i+0x168>
 80047c6:	2301      	movs	r3, #1
 80047c8:	4632      	mov	r2, r6
 80047ca:	4649      	mov	r1, r9
 80047cc:	4640      	mov	r0, r8
 80047ce:	47d0      	blx	sl
 80047d0:	3001      	adds	r0, #1
 80047d2:	d09b      	beq.n	800470c <_printf_i+0x164>
 80047d4:	3501      	adds	r5, #1
 80047d6:	68e3      	ldr	r3, [r4, #12]
 80047d8:	9903      	ldr	r1, [sp, #12]
 80047da:	1a5b      	subs	r3, r3, r1
 80047dc:	42ab      	cmp	r3, r5
 80047de:	dcf2      	bgt.n	80047c6 <_printf_i+0x21e>
 80047e0:	e7eb      	b.n	80047ba <_printf_i+0x212>
 80047e2:	2500      	movs	r5, #0
 80047e4:	f104 0619 	add.w	r6, r4, #25
 80047e8:	e7f5      	b.n	80047d6 <_printf_i+0x22e>
 80047ea:	bf00      	nop
 80047ec:	08006db2 	.word	0x08006db2
 80047f0:	08006dc3 	.word	0x08006dc3

080047f4 <siprintf>:
 80047f4:	b40e      	push	{r1, r2, r3}
 80047f6:	b500      	push	{lr}
 80047f8:	b09c      	sub	sp, #112	; 0x70
 80047fa:	ab1d      	add	r3, sp, #116	; 0x74
 80047fc:	9002      	str	r0, [sp, #8]
 80047fe:	9006      	str	r0, [sp, #24]
 8004800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004804:	4809      	ldr	r0, [pc, #36]	; (800482c <siprintf+0x38>)
 8004806:	9107      	str	r1, [sp, #28]
 8004808:	9104      	str	r1, [sp, #16]
 800480a:	4909      	ldr	r1, [pc, #36]	; (8004830 <siprintf+0x3c>)
 800480c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004810:	9105      	str	r1, [sp, #20]
 8004812:	6800      	ldr	r0, [r0, #0]
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	a902      	add	r1, sp, #8
 8004818:	f001 fbb0 	bl	8005f7c <_svfiprintf_r>
 800481c:	9b02      	ldr	r3, [sp, #8]
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	b01c      	add	sp, #112	; 0x70
 8004824:	f85d eb04 	ldr.w	lr, [sp], #4
 8004828:	b003      	add	sp, #12
 800482a:	4770      	bx	lr
 800482c:	2000004c 	.word	0x2000004c
 8004830:	ffff0208 	.word	0xffff0208

08004834 <_vsniprintf_r>:
 8004834:	b530      	push	{r4, r5, lr}
 8004836:	4614      	mov	r4, r2
 8004838:	2c00      	cmp	r4, #0
 800483a:	b09b      	sub	sp, #108	; 0x6c
 800483c:	4605      	mov	r5, r0
 800483e:	461a      	mov	r2, r3
 8004840:	da05      	bge.n	800484e <_vsniprintf_r+0x1a>
 8004842:	238b      	movs	r3, #139	; 0x8b
 8004844:	6003      	str	r3, [r0, #0]
 8004846:	f04f 30ff 	mov.w	r0, #4294967295
 800484a:	b01b      	add	sp, #108	; 0x6c
 800484c:	bd30      	pop	{r4, r5, pc}
 800484e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004852:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004856:	bf14      	ite	ne
 8004858:	f104 33ff 	addne.w	r3, r4, #4294967295
 800485c:	4623      	moveq	r3, r4
 800485e:	9302      	str	r3, [sp, #8]
 8004860:	9305      	str	r3, [sp, #20]
 8004862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004866:	9100      	str	r1, [sp, #0]
 8004868:	9104      	str	r1, [sp, #16]
 800486a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800486e:	4669      	mov	r1, sp
 8004870:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004872:	f001 fb83 	bl	8005f7c <_svfiprintf_r>
 8004876:	1c43      	adds	r3, r0, #1
 8004878:	bfbc      	itt	lt
 800487a:	238b      	movlt	r3, #139	; 0x8b
 800487c:	602b      	strlt	r3, [r5, #0]
 800487e:	2c00      	cmp	r4, #0
 8004880:	d0e3      	beq.n	800484a <_vsniprintf_r+0x16>
 8004882:	9b00      	ldr	r3, [sp, #0]
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e7df      	b.n	800484a <_vsniprintf_r+0x16>
	...

0800488c <vsniprintf>:
 800488c:	b507      	push	{r0, r1, r2, lr}
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	460a      	mov	r2, r1
 8004894:	4601      	mov	r1, r0
 8004896:	4803      	ldr	r0, [pc, #12]	; (80048a4 <vsniprintf+0x18>)
 8004898:	6800      	ldr	r0, [r0, #0]
 800489a:	f7ff ffcb 	bl	8004834 <_vsniprintf_r>
 800489e:	b003      	add	sp, #12
 80048a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80048a4:	2000004c 	.word	0x2000004c

080048a8 <quorem>:
 80048a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	6903      	ldr	r3, [r0, #16]
 80048ae:	690c      	ldr	r4, [r1, #16]
 80048b0:	42a3      	cmp	r3, r4
 80048b2:	4607      	mov	r7, r0
 80048b4:	f2c0 8081 	blt.w	80049ba <quorem+0x112>
 80048b8:	3c01      	subs	r4, #1
 80048ba:	f101 0814 	add.w	r8, r1, #20
 80048be:	f100 0514 	add.w	r5, r0, #20
 80048c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048d0:	3301      	adds	r3, #1
 80048d2:	429a      	cmp	r2, r3
 80048d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80048d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80048dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80048e0:	d331      	bcc.n	8004946 <quorem+0x9e>
 80048e2:	f04f 0e00 	mov.w	lr, #0
 80048e6:	4640      	mov	r0, r8
 80048e8:	46ac      	mov	ip, r5
 80048ea:	46f2      	mov	sl, lr
 80048ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80048f0:	b293      	uxth	r3, r2
 80048f2:	fb06 e303 	mla	r3, r6, r3, lr
 80048f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	ebaa 0303 	sub.w	r3, sl, r3
 8004900:	f8dc a000 	ldr.w	sl, [ip]
 8004904:	0c12      	lsrs	r2, r2, #16
 8004906:	fa13 f38a 	uxtah	r3, r3, sl
 800490a:	fb06 e202 	mla	r2, r6, r2, lr
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	9b00      	ldr	r3, [sp, #0]
 8004912:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004916:	b292      	uxth	r2, r2
 8004918:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800491c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004920:	f8bd 3000 	ldrh.w	r3, [sp]
 8004924:	4581      	cmp	r9, r0
 8004926:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800492a:	f84c 3b04 	str.w	r3, [ip], #4
 800492e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004932:	d2db      	bcs.n	80048ec <quorem+0x44>
 8004934:	f855 300b 	ldr.w	r3, [r5, fp]
 8004938:	b92b      	cbnz	r3, 8004946 <quorem+0x9e>
 800493a:	9b01      	ldr	r3, [sp, #4]
 800493c:	3b04      	subs	r3, #4
 800493e:	429d      	cmp	r5, r3
 8004940:	461a      	mov	r2, r3
 8004942:	d32e      	bcc.n	80049a2 <quorem+0xfa>
 8004944:	613c      	str	r4, [r7, #16]
 8004946:	4638      	mov	r0, r7
 8004948:	f001 f8c4 	bl	8005ad4 <__mcmp>
 800494c:	2800      	cmp	r0, #0
 800494e:	db24      	blt.n	800499a <quorem+0xf2>
 8004950:	3601      	adds	r6, #1
 8004952:	4628      	mov	r0, r5
 8004954:	f04f 0c00 	mov.w	ip, #0
 8004958:	f858 2b04 	ldr.w	r2, [r8], #4
 800495c:	f8d0 e000 	ldr.w	lr, [r0]
 8004960:	b293      	uxth	r3, r2
 8004962:	ebac 0303 	sub.w	r3, ip, r3
 8004966:	0c12      	lsrs	r2, r2, #16
 8004968:	fa13 f38e 	uxtah	r3, r3, lr
 800496c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004974:	b29b      	uxth	r3, r3
 8004976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800497a:	45c1      	cmp	r9, r8
 800497c:	f840 3b04 	str.w	r3, [r0], #4
 8004980:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004984:	d2e8      	bcs.n	8004958 <quorem+0xb0>
 8004986:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800498a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800498e:	b922      	cbnz	r2, 800499a <quorem+0xf2>
 8004990:	3b04      	subs	r3, #4
 8004992:	429d      	cmp	r5, r3
 8004994:	461a      	mov	r2, r3
 8004996:	d30a      	bcc.n	80049ae <quorem+0x106>
 8004998:	613c      	str	r4, [r7, #16]
 800499a:	4630      	mov	r0, r6
 800499c:	b003      	add	sp, #12
 800499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	d1cc      	bne.n	8004944 <quorem+0x9c>
 80049aa:	3c01      	subs	r4, #1
 80049ac:	e7c7      	b.n	800493e <quorem+0x96>
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	3b04      	subs	r3, #4
 80049b2:	2a00      	cmp	r2, #0
 80049b4:	d1f0      	bne.n	8004998 <quorem+0xf0>
 80049b6:	3c01      	subs	r4, #1
 80049b8:	e7eb      	b.n	8004992 <quorem+0xea>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e7ee      	b.n	800499c <quorem+0xf4>
	...

080049c0 <_dtoa_r>:
 80049c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	ed2d 8b04 	vpush	{d8-d9}
 80049c8:	ec57 6b10 	vmov	r6, r7, d0
 80049cc:	b093      	sub	sp, #76	; 0x4c
 80049ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80049d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80049d4:	9106      	str	r1, [sp, #24]
 80049d6:	ee10 aa10 	vmov	sl, s0
 80049da:	4604      	mov	r4, r0
 80049dc:	9209      	str	r2, [sp, #36]	; 0x24
 80049de:	930c      	str	r3, [sp, #48]	; 0x30
 80049e0:	46bb      	mov	fp, r7
 80049e2:	b975      	cbnz	r5, 8004a02 <_dtoa_r+0x42>
 80049e4:	2010      	movs	r0, #16
 80049e6:	f000 fddd 	bl	80055a4 <malloc>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6260      	str	r0, [r4, #36]	; 0x24
 80049ee:	b920      	cbnz	r0, 80049fa <_dtoa_r+0x3a>
 80049f0:	4ba7      	ldr	r3, [pc, #668]	; (8004c90 <_dtoa_r+0x2d0>)
 80049f2:	21ea      	movs	r1, #234	; 0xea
 80049f4:	48a7      	ldr	r0, [pc, #668]	; (8004c94 <_dtoa_r+0x2d4>)
 80049f6:	f001 fbd1 	bl	800619c <__assert_func>
 80049fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80049fe:	6005      	str	r5, [r0, #0]
 8004a00:	60c5      	str	r5, [r0, #12]
 8004a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a04:	6819      	ldr	r1, [r3, #0]
 8004a06:	b151      	cbz	r1, 8004a1e <_dtoa_r+0x5e>
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	604a      	str	r2, [r1, #4]
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4093      	lsls	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
 8004a12:	4620      	mov	r0, r4
 8004a14:	f000 fe1c 	bl	8005650 <_Bfree>
 8004a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	1e3b      	subs	r3, r7, #0
 8004a20:	bfaa      	itet	ge
 8004a22:	2300      	movge	r3, #0
 8004a24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004a28:	f8c8 3000 	strge.w	r3, [r8]
 8004a2c:	4b9a      	ldr	r3, [pc, #616]	; (8004c98 <_dtoa_r+0x2d8>)
 8004a2e:	bfbc      	itt	lt
 8004a30:	2201      	movlt	r2, #1
 8004a32:	f8c8 2000 	strlt.w	r2, [r8]
 8004a36:	ea33 030b 	bics.w	r3, r3, fp
 8004a3a:	d11b      	bne.n	8004a74 <_dtoa_r+0xb4>
 8004a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a48:	4333      	orrs	r3, r6
 8004a4a:	f000 8592 	beq.w	8005572 <_dtoa_r+0xbb2>
 8004a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a50:	b963      	cbnz	r3, 8004a6c <_dtoa_r+0xac>
 8004a52:	4b92      	ldr	r3, [pc, #584]	; (8004c9c <_dtoa_r+0x2dc>)
 8004a54:	e022      	b.n	8004a9c <_dtoa_r+0xdc>
 8004a56:	4b92      	ldr	r3, [pc, #584]	; (8004ca0 <_dtoa_r+0x2e0>)
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	9801      	ldr	r0, [sp, #4]
 8004a62:	b013      	add	sp, #76	; 0x4c
 8004a64:	ecbd 8b04 	vpop	{d8-d9}
 8004a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6c:	4b8b      	ldr	r3, [pc, #556]	; (8004c9c <_dtoa_r+0x2dc>)
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	3303      	adds	r3, #3
 8004a72:	e7f3      	b.n	8004a5c <_dtoa_r+0x9c>
 8004a74:	2200      	movs	r2, #0
 8004a76:	2300      	movs	r3, #0
 8004a78:	4650      	mov	r0, sl
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	f7fc f82c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a80:	ec4b ab19 	vmov	d9, sl, fp
 8004a84:	4680      	mov	r8, r0
 8004a86:	b158      	cbz	r0, 8004aa0 <_dtoa_r+0xe0>
 8004a88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 856b 	beq.w	800556c <_dtoa_r+0xbac>
 8004a96:	4883      	ldr	r0, [pc, #524]	; (8004ca4 <_dtoa_r+0x2e4>)
 8004a98:	6018      	str	r0, [r3, #0]
 8004a9a:	1e43      	subs	r3, r0, #1
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	e7df      	b.n	8004a60 <_dtoa_r+0xa0>
 8004aa0:	ec4b ab10 	vmov	d0, sl, fp
 8004aa4:	aa10      	add	r2, sp, #64	; 0x40
 8004aa6:	a911      	add	r1, sp, #68	; 0x44
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f001 f8b9 	bl	8005c20 <__d2b>
 8004aae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004ab2:	ee08 0a10 	vmov	s16, r0
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	f000 8084 	beq.w	8004bc4 <_dtoa_r+0x204>
 8004abc:	ee19 3a90 	vmov	r3, s19
 8004ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004ac8:	4656      	mov	r6, sl
 8004aca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004ace:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004ad2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004ad6:	4b74      	ldr	r3, [pc, #464]	; (8004ca8 <_dtoa_r+0x2e8>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	4630      	mov	r0, r6
 8004adc:	4639      	mov	r1, r7
 8004ade:	f7fb fbdb 	bl	8000298 <__aeabi_dsub>
 8004ae2:	a365      	add	r3, pc, #404	; (adr r3, 8004c78 <_dtoa_r+0x2b8>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb fd8e 	bl	8000608 <__aeabi_dmul>
 8004aec:	a364      	add	r3, pc, #400	; (adr r3, 8004c80 <_dtoa_r+0x2c0>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb fbd3 	bl	800029c <__adddf3>
 8004af6:	4606      	mov	r6, r0
 8004af8:	4628      	mov	r0, r5
 8004afa:	460f      	mov	r7, r1
 8004afc:	f7fb fd1a 	bl	8000534 <__aeabi_i2d>
 8004b00:	a361      	add	r3, pc, #388	; (adr r3, 8004c88 <_dtoa_r+0x2c8>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fd7f 	bl	8000608 <__aeabi_dmul>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4630      	mov	r0, r6
 8004b10:	4639      	mov	r1, r7
 8004b12:	f7fb fbc3 	bl	800029c <__adddf3>
 8004b16:	4606      	mov	r6, r0
 8004b18:	460f      	mov	r7, r1
 8004b1a:	f7fc f825 	bl	8000b68 <__aeabi_d2iz>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	9000      	str	r0, [sp, #0]
 8004b22:	2300      	movs	r3, #0
 8004b24:	4630      	mov	r0, r6
 8004b26:	4639      	mov	r1, r7
 8004b28:	f7fb ffe0 	bl	8000aec <__aeabi_dcmplt>
 8004b2c:	b150      	cbz	r0, 8004b44 <_dtoa_r+0x184>
 8004b2e:	9800      	ldr	r0, [sp, #0]
 8004b30:	f7fb fd00 	bl	8000534 <__aeabi_i2d>
 8004b34:	4632      	mov	r2, r6
 8004b36:	463b      	mov	r3, r7
 8004b38:	f7fb ffce 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b3c:	b910      	cbnz	r0, 8004b44 <_dtoa_r+0x184>
 8004b3e:	9b00      	ldr	r3, [sp, #0]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	9b00      	ldr	r3, [sp, #0]
 8004b46:	2b16      	cmp	r3, #22
 8004b48:	d85a      	bhi.n	8004c00 <_dtoa_r+0x240>
 8004b4a:	9a00      	ldr	r2, [sp, #0]
 8004b4c:	4b57      	ldr	r3, [pc, #348]	; (8004cac <_dtoa_r+0x2ec>)
 8004b4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	ec51 0b19 	vmov	r0, r1, d9
 8004b5a:	f7fb ffc7 	bl	8000aec <__aeabi_dcmplt>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d050      	beq.n	8004c04 <_dtoa_r+0x244>
 8004b62:	9b00      	ldr	r3, [sp, #0]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b6e:	1b5d      	subs	r5, r3, r5
 8004b70:	1e6b      	subs	r3, r5, #1
 8004b72:	9305      	str	r3, [sp, #20]
 8004b74:	bf45      	ittet	mi
 8004b76:	f1c5 0301 	rsbmi	r3, r5, #1
 8004b7a:	9304      	strmi	r3, [sp, #16]
 8004b7c:	2300      	movpl	r3, #0
 8004b7e:	2300      	movmi	r3, #0
 8004b80:	bf4c      	ite	mi
 8004b82:	9305      	strmi	r3, [sp, #20]
 8004b84:	9304      	strpl	r3, [sp, #16]
 8004b86:	9b00      	ldr	r3, [sp, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	db3d      	blt.n	8004c08 <_dtoa_r+0x248>
 8004b8c:	9b05      	ldr	r3, [sp, #20]
 8004b8e:	9a00      	ldr	r2, [sp, #0]
 8004b90:	920a      	str	r2, [sp, #40]	; 0x28
 8004b92:	4413      	add	r3, r2
 8004b94:	9305      	str	r3, [sp, #20]
 8004b96:	2300      	movs	r3, #0
 8004b98:	9307      	str	r3, [sp, #28]
 8004b9a:	9b06      	ldr	r3, [sp, #24]
 8004b9c:	2b09      	cmp	r3, #9
 8004b9e:	f200 8089 	bhi.w	8004cb4 <_dtoa_r+0x2f4>
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	bfc4      	itt	gt
 8004ba6:	3b04      	subgt	r3, #4
 8004ba8:	9306      	strgt	r3, [sp, #24]
 8004baa:	9b06      	ldr	r3, [sp, #24]
 8004bac:	f1a3 0302 	sub.w	r3, r3, #2
 8004bb0:	bfcc      	ite	gt
 8004bb2:	2500      	movgt	r5, #0
 8004bb4:	2501      	movle	r5, #1
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	f200 8087 	bhi.w	8004cca <_dtoa_r+0x30a>
 8004bbc:	e8df f003 	tbb	[pc, r3]
 8004bc0:	59383a2d 	.word	0x59383a2d
 8004bc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004bc8:	441d      	add	r5, r3
 8004bca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	bfc1      	itttt	gt
 8004bd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004bd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004bda:	fa0b f303 	lslgt.w	r3, fp, r3
 8004bde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004be2:	bfda      	itte	le
 8004be4:	f1c3 0320 	rsble	r3, r3, #32
 8004be8:	fa06 f003 	lslle.w	r0, r6, r3
 8004bec:	4318      	orrgt	r0, r3
 8004bee:	f7fb fc91 	bl	8000514 <__aeabi_ui2d>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004bfa:	3d01      	subs	r5, #1
 8004bfc:	930e      	str	r3, [sp, #56]	; 0x38
 8004bfe:	e76a      	b.n	8004ad6 <_dtoa_r+0x116>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e7b2      	b.n	8004b6a <_dtoa_r+0x1aa>
 8004c04:	900b      	str	r0, [sp, #44]	; 0x2c
 8004c06:	e7b1      	b.n	8004b6c <_dtoa_r+0x1ac>
 8004c08:	9b04      	ldr	r3, [sp, #16]
 8004c0a:	9a00      	ldr	r2, [sp, #0]
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	9304      	str	r3, [sp, #16]
 8004c10:	4253      	negs	r3, r2
 8004c12:	9307      	str	r3, [sp, #28]
 8004c14:	2300      	movs	r3, #0
 8004c16:	930a      	str	r3, [sp, #40]	; 0x28
 8004c18:	e7bf      	b.n	8004b9a <_dtoa_r+0x1da>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	9308      	str	r3, [sp, #32]
 8004c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	dc55      	bgt.n	8004cd0 <_dtoa_r+0x310>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c2e:	e00c      	b.n	8004c4a <_dtoa_r+0x28a>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e7f3      	b.n	8004c1c <_dtoa_r+0x25c>
 8004c34:	2300      	movs	r3, #0
 8004c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c38:	9308      	str	r3, [sp, #32]
 8004c3a:	9b00      	ldr	r3, [sp, #0]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	9302      	str	r3, [sp, #8]
 8004c40:	3301      	adds	r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	9303      	str	r3, [sp, #12]
 8004c46:	bfb8      	it	lt
 8004c48:	2301      	movlt	r3, #1
 8004c4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	6042      	str	r2, [r0, #4]
 8004c50:	2204      	movs	r2, #4
 8004c52:	f102 0614 	add.w	r6, r2, #20
 8004c56:	429e      	cmp	r6, r3
 8004c58:	6841      	ldr	r1, [r0, #4]
 8004c5a:	d93d      	bls.n	8004cd8 <_dtoa_r+0x318>
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f000 fcb7 	bl	80055d0 <_Balloc>
 8004c62:	9001      	str	r0, [sp, #4]
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d13b      	bne.n	8004ce0 <_dtoa_r+0x320>
 8004c68:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <_dtoa_r+0x2f0>)
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c70:	e6c0      	b.n	80049f4 <_dtoa_r+0x34>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e7df      	b.n	8004c36 <_dtoa_r+0x276>
 8004c76:	bf00      	nop
 8004c78:	636f4361 	.word	0x636f4361
 8004c7c:	3fd287a7 	.word	0x3fd287a7
 8004c80:	8b60c8b3 	.word	0x8b60c8b3
 8004c84:	3fc68a28 	.word	0x3fc68a28
 8004c88:	509f79fb 	.word	0x509f79fb
 8004c8c:	3fd34413 	.word	0x3fd34413
 8004c90:	08006de1 	.word	0x08006de1
 8004c94:	08006df8 	.word	0x08006df8
 8004c98:	7ff00000 	.word	0x7ff00000
 8004c9c:	08006ddd 	.word	0x08006ddd
 8004ca0:	08006dd4 	.word	0x08006dd4
 8004ca4:	08006db1 	.word	0x08006db1
 8004ca8:	3ff80000 	.word	0x3ff80000
 8004cac:	08006ee8 	.word	0x08006ee8
 8004cb0:	08006e53 	.word	0x08006e53
 8004cb4:	2501      	movs	r5, #1
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	9306      	str	r3, [sp, #24]
 8004cba:	9508      	str	r5, [sp, #32]
 8004cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2312      	movs	r3, #18
 8004cc8:	e7b0      	b.n	8004c2c <_dtoa_r+0x26c>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	9308      	str	r3, [sp, #32]
 8004cce:	e7f5      	b.n	8004cbc <_dtoa_r+0x2fc>
 8004cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004cd6:	e7b8      	b.n	8004c4a <_dtoa_r+0x28a>
 8004cd8:	3101      	adds	r1, #1
 8004cda:	6041      	str	r1, [r0, #4]
 8004cdc:	0052      	lsls	r2, r2, #1
 8004cde:	e7b8      	b.n	8004c52 <_dtoa_r+0x292>
 8004ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ce2:	9a01      	ldr	r2, [sp, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	2b0e      	cmp	r3, #14
 8004cea:	f200 809d 	bhi.w	8004e28 <_dtoa_r+0x468>
 8004cee:	2d00      	cmp	r5, #0
 8004cf0:	f000 809a 	beq.w	8004e28 <_dtoa_r+0x468>
 8004cf4:	9b00      	ldr	r3, [sp, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	dd32      	ble.n	8004d60 <_dtoa_r+0x3a0>
 8004cfa:	4ab7      	ldr	r2, [pc, #732]	; (8004fd8 <_dtoa_r+0x618>)
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d08:	9b00      	ldr	r3, [sp, #0]
 8004d0a:	05d8      	lsls	r0, r3, #23
 8004d0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004d10:	d516      	bpl.n	8004d40 <_dtoa_r+0x380>
 8004d12:	4bb2      	ldr	r3, [pc, #712]	; (8004fdc <_dtoa_r+0x61c>)
 8004d14:	ec51 0b19 	vmov	r0, r1, d9
 8004d18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d1c:	f7fb fd9e 	bl	800085c <__aeabi_ddiv>
 8004d20:	f007 070f 	and.w	r7, r7, #15
 8004d24:	4682      	mov	sl, r0
 8004d26:	468b      	mov	fp, r1
 8004d28:	2503      	movs	r5, #3
 8004d2a:	4eac      	ldr	r6, [pc, #688]	; (8004fdc <_dtoa_r+0x61c>)
 8004d2c:	b957      	cbnz	r7, 8004d44 <_dtoa_r+0x384>
 8004d2e:	4642      	mov	r2, r8
 8004d30:	464b      	mov	r3, r9
 8004d32:	4650      	mov	r0, sl
 8004d34:	4659      	mov	r1, fp
 8004d36:	f7fb fd91 	bl	800085c <__aeabi_ddiv>
 8004d3a:	4682      	mov	sl, r0
 8004d3c:	468b      	mov	fp, r1
 8004d3e:	e028      	b.n	8004d92 <_dtoa_r+0x3d2>
 8004d40:	2502      	movs	r5, #2
 8004d42:	e7f2      	b.n	8004d2a <_dtoa_r+0x36a>
 8004d44:	07f9      	lsls	r1, r7, #31
 8004d46:	d508      	bpl.n	8004d5a <_dtoa_r+0x39a>
 8004d48:	4640      	mov	r0, r8
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d50:	f7fb fc5a 	bl	8000608 <__aeabi_dmul>
 8004d54:	3501      	adds	r5, #1
 8004d56:	4680      	mov	r8, r0
 8004d58:	4689      	mov	r9, r1
 8004d5a:	107f      	asrs	r7, r7, #1
 8004d5c:	3608      	adds	r6, #8
 8004d5e:	e7e5      	b.n	8004d2c <_dtoa_r+0x36c>
 8004d60:	f000 809b 	beq.w	8004e9a <_dtoa_r+0x4da>
 8004d64:	9b00      	ldr	r3, [sp, #0]
 8004d66:	4f9d      	ldr	r7, [pc, #628]	; (8004fdc <_dtoa_r+0x61c>)
 8004d68:	425e      	negs	r6, r3
 8004d6a:	4b9b      	ldr	r3, [pc, #620]	; (8004fd8 <_dtoa_r+0x618>)
 8004d6c:	f006 020f 	and.w	r2, r6, #15
 8004d70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	ec51 0b19 	vmov	r0, r1, d9
 8004d7c:	f7fb fc44 	bl	8000608 <__aeabi_dmul>
 8004d80:	1136      	asrs	r6, r6, #4
 8004d82:	4682      	mov	sl, r0
 8004d84:	468b      	mov	fp, r1
 8004d86:	2300      	movs	r3, #0
 8004d88:	2502      	movs	r5, #2
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	d17a      	bne.n	8004e84 <_dtoa_r+0x4c4>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1d3      	bne.n	8004d3a <_dtoa_r+0x37a>
 8004d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8082 	beq.w	8004e9e <_dtoa_r+0x4de>
 8004d9a:	4b91      	ldr	r3, [pc, #580]	; (8004fe0 <_dtoa_r+0x620>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4650      	mov	r0, sl
 8004da0:	4659      	mov	r1, fp
 8004da2:	f7fb fea3 	bl	8000aec <__aeabi_dcmplt>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d079      	beq.n	8004e9e <_dtoa_r+0x4de>
 8004daa:	9b03      	ldr	r3, [sp, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d076      	beq.n	8004e9e <_dtoa_r+0x4de>
 8004db0:	9b02      	ldr	r3, [sp, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	dd36      	ble.n	8004e24 <_dtoa_r+0x464>
 8004db6:	9b00      	ldr	r3, [sp, #0]
 8004db8:	4650      	mov	r0, sl
 8004dba:	4659      	mov	r1, fp
 8004dbc:	1e5f      	subs	r7, r3, #1
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4b88      	ldr	r3, [pc, #544]	; (8004fe4 <_dtoa_r+0x624>)
 8004dc2:	f7fb fc21 	bl	8000608 <__aeabi_dmul>
 8004dc6:	9e02      	ldr	r6, [sp, #8]
 8004dc8:	4682      	mov	sl, r0
 8004dca:	468b      	mov	fp, r1
 8004dcc:	3501      	adds	r5, #1
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f7fb fbb0 	bl	8000534 <__aeabi_i2d>
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	465b      	mov	r3, fp
 8004dd8:	f7fb fc16 	bl	8000608 <__aeabi_dmul>
 8004ddc:	4b82      	ldr	r3, [pc, #520]	; (8004fe8 <_dtoa_r+0x628>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	f7fb fa5c 	bl	800029c <__adddf3>
 8004de4:	46d0      	mov	r8, sl
 8004de6:	46d9      	mov	r9, fp
 8004de8:	4682      	mov	sl, r0
 8004dea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004dee:	2e00      	cmp	r6, #0
 8004df0:	d158      	bne.n	8004ea4 <_dtoa_r+0x4e4>
 8004df2:	4b7e      	ldr	r3, [pc, #504]	; (8004fec <_dtoa_r+0x62c>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	4640      	mov	r0, r8
 8004df8:	4649      	mov	r1, r9
 8004dfa:	f7fb fa4d 	bl	8000298 <__aeabi_dsub>
 8004dfe:	4652      	mov	r2, sl
 8004e00:	465b      	mov	r3, fp
 8004e02:	4680      	mov	r8, r0
 8004e04:	4689      	mov	r9, r1
 8004e06:	f7fb fe8f 	bl	8000b28 <__aeabi_dcmpgt>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	f040 8295 	bne.w	800533a <_dtoa_r+0x97a>
 8004e10:	4652      	mov	r2, sl
 8004e12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004e16:	4640      	mov	r0, r8
 8004e18:	4649      	mov	r1, r9
 8004e1a:	f7fb fe67 	bl	8000aec <__aeabi_dcmplt>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	f040 8289 	bne.w	8005336 <_dtoa_r+0x976>
 8004e24:	ec5b ab19 	vmov	sl, fp, d9
 8004e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f2c0 8148 	blt.w	80050c0 <_dtoa_r+0x700>
 8004e30:	9a00      	ldr	r2, [sp, #0]
 8004e32:	2a0e      	cmp	r2, #14
 8004e34:	f300 8144 	bgt.w	80050c0 <_dtoa_r+0x700>
 8004e38:	4b67      	ldr	r3, [pc, #412]	; (8004fd8 <_dtoa_r+0x618>)
 8004e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f280 80d5 	bge.w	8004ff4 <_dtoa_r+0x634>
 8004e4a:	9b03      	ldr	r3, [sp, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f300 80d1 	bgt.w	8004ff4 <_dtoa_r+0x634>
 8004e52:	f040 826f 	bne.w	8005334 <_dtoa_r+0x974>
 8004e56:	4b65      	ldr	r3, [pc, #404]	; (8004fec <_dtoa_r+0x62c>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	f7fb fbd3 	bl	8000608 <__aeabi_dmul>
 8004e62:	4652      	mov	r2, sl
 8004e64:	465b      	mov	r3, fp
 8004e66:	f7fb fe55 	bl	8000b14 <__aeabi_dcmpge>
 8004e6a:	9e03      	ldr	r6, [sp, #12]
 8004e6c:	4637      	mov	r7, r6
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	f040 8245 	bne.w	80052fe <_dtoa_r+0x93e>
 8004e74:	9d01      	ldr	r5, [sp, #4]
 8004e76:	2331      	movs	r3, #49	; 0x31
 8004e78:	f805 3b01 	strb.w	r3, [r5], #1
 8004e7c:	9b00      	ldr	r3, [sp, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	e240      	b.n	8005306 <_dtoa_r+0x946>
 8004e84:	07f2      	lsls	r2, r6, #31
 8004e86:	d505      	bpl.n	8004e94 <_dtoa_r+0x4d4>
 8004e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e8c:	f7fb fbbc 	bl	8000608 <__aeabi_dmul>
 8004e90:	3501      	adds	r5, #1
 8004e92:	2301      	movs	r3, #1
 8004e94:	1076      	asrs	r6, r6, #1
 8004e96:	3708      	adds	r7, #8
 8004e98:	e777      	b.n	8004d8a <_dtoa_r+0x3ca>
 8004e9a:	2502      	movs	r5, #2
 8004e9c:	e779      	b.n	8004d92 <_dtoa_r+0x3d2>
 8004e9e:	9f00      	ldr	r7, [sp, #0]
 8004ea0:	9e03      	ldr	r6, [sp, #12]
 8004ea2:	e794      	b.n	8004dce <_dtoa_r+0x40e>
 8004ea4:	9901      	ldr	r1, [sp, #4]
 8004ea6:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <_dtoa_r+0x618>)
 8004ea8:	4431      	add	r1, r6
 8004eaa:	910d      	str	r1, [sp, #52]	; 0x34
 8004eac:	9908      	ldr	r1, [sp, #32]
 8004eae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004eb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004eb6:	2900      	cmp	r1, #0
 8004eb8:	d043      	beq.n	8004f42 <_dtoa_r+0x582>
 8004eba:	494d      	ldr	r1, [pc, #308]	; (8004ff0 <_dtoa_r+0x630>)
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f7fb fccd 	bl	800085c <__aeabi_ddiv>
 8004ec2:	4652      	mov	r2, sl
 8004ec4:	465b      	mov	r3, fp
 8004ec6:	f7fb f9e7 	bl	8000298 <__aeabi_dsub>
 8004eca:	9d01      	ldr	r5, [sp, #4]
 8004ecc:	4682      	mov	sl, r0
 8004ece:	468b      	mov	fp, r1
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	f7fb fe48 	bl	8000b68 <__aeabi_d2iz>
 8004ed8:	4606      	mov	r6, r0
 8004eda:	f7fb fb2b 	bl	8000534 <__aeabi_i2d>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	f7fb f9d7 	bl	8000298 <__aeabi_dsub>
 8004eea:	3630      	adds	r6, #48	; 0x30
 8004eec:	f805 6b01 	strb.w	r6, [r5], #1
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	465b      	mov	r3, fp
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	4689      	mov	r9, r1
 8004ef8:	f7fb fdf8 	bl	8000aec <__aeabi_dcmplt>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d163      	bne.n	8004fc8 <_dtoa_r+0x608>
 8004f00:	4642      	mov	r2, r8
 8004f02:	464b      	mov	r3, r9
 8004f04:	4936      	ldr	r1, [pc, #216]	; (8004fe0 <_dtoa_r+0x620>)
 8004f06:	2000      	movs	r0, #0
 8004f08:	f7fb f9c6 	bl	8000298 <__aeabi_dsub>
 8004f0c:	4652      	mov	r2, sl
 8004f0e:	465b      	mov	r3, fp
 8004f10:	f7fb fdec 	bl	8000aec <__aeabi_dcmplt>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	f040 80b5 	bne.w	8005084 <_dtoa_r+0x6c4>
 8004f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f1c:	429d      	cmp	r5, r3
 8004f1e:	d081      	beq.n	8004e24 <_dtoa_r+0x464>
 8004f20:	4b30      	ldr	r3, [pc, #192]	; (8004fe4 <_dtoa_r+0x624>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	4650      	mov	r0, sl
 8004f26:	4659      	mov	r1, fp
 8004f28:	f7fb fb6e 	bl	8000608 <__aeabi_dmul>
 8004f2c:	4b2d      	ldr	r3, [pc, #180]	; (8004fe4 <_dtoa_r+0x624>)
 8004f2e:	4682      	mov	sl, r0
 8004f30:	468b      	mov	fp, r1
 8004f32:	4640      	mov	r0, r8
 8004f34:	4649      	mov	r1, r9
 8004f36:	2200      	movs	r2, #0
 8004f38:	f7fb fb66 	bl	8000608 <__aeabi_dmul>
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	4689      	mov	r9, r1
 8004f40:	e7c6      	b.n	8004ed0 <_dtoa_r+0x510>
 8004f42:	4650      	mov	r0, sl
 8004f44:	4659      	mov	r1, fp
 8004f46:	f7fb fb5f 	bl	8000608 <__aeabi_dmul>
 8004f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f4c:	9d01      	ldr	r5, [sp, #4]
 8004f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f50:	4682      	mov	sl, r0
 8004f52:	468b      	mov	fp, r1
 8004f54:	4649      	mov	r1, r9
 8004f56:	4640      	mov	r0, r8
 8004f58:	f7fb fe06 	bl	8000b68 <__aeabi_d2iz>
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	f7fb fae9 	bl	8000534 <__aeabi_i2d>
 8004f62:	3630      	adds	r6, #48	; 0x30
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4640      	mov	r0, r8
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	f7fb f994 	bl	8000298 <__aeabi_dsub>
 8004f70:	f805 6b01 	strb.w	r6, [r5], #1
 8004f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f76:	429d      	cmp	r5, r3
 8004f78:	4680      	mov	r8, r0
 8004f7a:	4689      	mov	r9, r1
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	d124      	bne.n	8004fcc <_dtoa_r+0x60c>
 8004f82:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <_dtoa_r+0x630>)
 8004f84:	4650      	mov	r0, sl
 8004f86:	4659      	mov	r1, fp
 8004f88:	f7fb f988 	bl	800029c <__adddf3>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4640      	mov	r0, r8
 8004f92:	4649      	mov	r1, r9
 8004f94:	f7fb fdc8 	bl	8000b28 <__aeabi_dcmpgt>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d173      	bne.n	8005084 <_dtoa_r+0x6c4>
 8004f9c:	4652      	mov	r2, sl
 8004f9e:	465b      	mov	r3, fp
 8004fa0:	4913      	ldr	r1, [pc, #76]	; (8004ff0 <_dtoa_r+0x630>)
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f7fb f978 	bl	8000298 <__aeabi_dsub>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4640      	mov	r0, r8
 8004fae:	4649      	mov	r1, r9
 8004fb0:	f7fb fd9c 	bl	8000aec <__aeabi_dcmplt>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f43f af35 	beq.w	8004e24 <_dtoa_r+0x464>
 8004fba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004fbc:	1e6b      	subs	r3, r5, #1
 8004fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004fc4:	2b30      	cmp	r3, #48	; 0x30
 8004fc6:	d0f8      	beq.n	8004fba <_dtoa_r+0x5fa>
 8004fc8:	9700      	str	r7, [sp, #0]
 8004fca:	e049      	b.n	8005060 <_dtoa_r+0x6a0>
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <_dtoa_r+0x624>)
 8004fce:	f7fb fb1b 	bl	8000608 <__aeabi_dmul>
 8004fd2:	4680      	mov	r8, r0
 8004fd4:	4689      	mov	r9, r1
 8004fd6:	e7bd      	b.n	8004f54 <_dtoa_r+0x594>
 8004fd8:	08006ee8 	.word	0x08006ee8
 8004fdc:	08006ec0 	.word	0x08006ec0
 8004fe0:	3ff00000 	.word	0x3ff00000
 8004fe4:	40240000 	.word	0x40240000
 8004fe8:	401c0000 	.word	0x401c0000
 8004fec:	40140000 	.word	0x40140000
 8004ff0:	3fe00000 	.word	0x3fe00000
 8004ff4:	9d01      	ldr	r5, [sp, #4]
 8004ff6:	4656      	mov	r6, sl
 8004ff8:	465f      	mov	r7, fp
 8004ffa:	4642      	mov	r2, r8
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	4630      	mov	r0, r6
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb fc2b 	bl	800085c <__aeabi_ddiv>
 8005006:	f7fb fdaf 	bl	8000b68 <__aeabi_d2iz>
 800500a:	4682      	mov	sl, r0
 800500c:	f7fb fa92 	bl	8000534 <__aeabi_i2d>
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	f7fb faf8 	bl	8000608 <__aeabi_dmul>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4630      	mov	r0, r6
 800501e:	4639      	mov	r1, r7
 8005020:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005024:	f7fb f938 	bl	8000298 <__aeabi_dsub>
 8005028:	f805 6b01 	strb.w	r6, [r5], #1
 800502c:	9e01      	ldr	r6, [sp, #4]
 800502e:	9f03      	ldr	r7, [sp, #12]
 8005030:	1bae      	subs	r6, r5, r6
 8005032:	42b7      	cmp	r7, r6
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	d135      	bne.n	80050a6 <_dtoa_r+0x6e6>
 800503a:	f7fb f92f 	bl	800029c <__adddf3>
 800503e:	4642      	mov	r2, r8
 8005040:	464b      	mov	r3, r9
 8005042:	4606      	mov	r6, r0
 8005044:	460f      	mov	r7, r1
 8005046:	f7fb fd6f 	bl	8000b28 <__aeabi_dcmpgt>
 800504a:	b9d0      	cbnz	r0, 8005082 <_dtoa_r+0x6c2>
 800504c:	4642      	mov	r2, r8
 800504e:	464b      	mov	r3, r9
 8005050:	4630      	mov	r0, r6
 8005052:	4639      	mov	r1, r7
 8005054:	f7fb fd40 	bl	8000ad8 <__aeabi_dcmpeq>
 8005058:	b110      	cbz	r0, 8005060 <_dtoa_r+0x6a0>
 800505a:	f01a 0f01 	tst.w	sl, #1
 800505e:	d110      	bne.n	8005082 <_dtoa_r+0x6c2>
 8005060:	4620      	mov	r0, r4
 8005062:	ee18 1a10 	vmov	r1, s16
 8005066:	f000 faf3 	bl	8005650 <_Bfree>
 800506a:	2300      	movs	r3, #0
 800506c:	9800      	ldr	r0, [sp, #0]
 800506e:	702b      	strb	r3, [r5, #0]
 8005070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005072:	3001      	adds	r0, #1
 8005074:	6018      	str	r0, [r3, #0]
 8005076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005078:	2b00      	cmp	r3, #0
 800507a:	f43f acf1 	beq.w	8004a60 <_dtoa_r+0xa0>
 800507e:	601d      	str	r5, [r3, #0]
 8005080:	e4ee      	b.n	8004a60 <_dtoa_r+0xa0>
 8005082:	9f00      	ldr	r7, [sp, #0]
 8005084:	462b      	mov	r3, r5
 8005086:	461d      	mov	r5, r3
 8005088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800508c:	2a39      	cmp	r2, #57	; 0x39
 800508e:	d106      	bne.n	800509e <_dtoa_r+0x6de>
 8005090:	9a01      	ldr	r2, [sp, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d1f7      	bne.n	8005086 <_dtoa_r+0x6c6>
 8005096:	9901      	ldr	r1, [sp, #4]
 8005098:	2230      	movs	r2, #48	; 0x30
 800509a:	3701      	adds	r7, #1
 800509c:	700a      	strb	r2, [r1, #0]
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	3201      	adds	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e790      	b.n	8004fc8 <_dtoa_r+0x608>
 80050a6:	4ba6      	ldr	r3, [pc, #664]	; (8005340 <_dtoa_r+0x980>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	f7fb faad 	bl	8000608 <__aeabi_dmul>
 80050ae:	2200      	movs	r2, #0
 80050b0:	2300      	movs	r3, #0
 80050b2:	4606      	mov	r6, r0
 80050b4:	460f      	mov	r7, r1
 80050b6:	f7fb fd0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d09d      	beq.n	8004ffa <_dtoa_r+0x63a>
 80050be:	e7cf      	b.n	8005060 <_dtoa_r+0x6a0>
 80050c0:	9a08      	ldr	r2, [sp, #32]
 80050c2:	2a00      	cmp	r2, #0
 80050c4:	f000 80d7 	beq.w	8005276 <_dtoa_r+0x8b6>
 80050c8:	9a06      	ldr	r2, [sp, #24]
 80050ca:	2a01      	cmp	r2, #1
 80050cc:	f300 80ba 	bgt.w	8005244 <_dtoa_r+0x884>
 80050d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050d2:	2a00      	cmp	r2, #0
 80050d4:	f000 80b2 	beq.w	800523c <_dtoa_r+0x87c>
 80050d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050dc:	9e07      	ldr	r6, [sp, #28]
 80050de:	9d04      	ldr	r5, [sp, #16]
 80050e0:	9a04      	ldr	r2, [sp, #16]
 80050e2:	441a      	add	r2, r3
 80050e4:	9204      	str	r2, [sp, #16]
 80050e6:	9a05      	ldr	r2, [sp, #20]
 80050e8:	2101      	movs	r1, #1
 80050ea:	441a      	add	r2, r3
 80050ec:	4620      	mov	r0, r4
 80050ee:	9205      	str	r2, [sp, #20]
 80050f0:	f000 fb66 	bl	80057c0 <__i2b>
 80050f4:	4607      	mov	r7, r0
 80050f6:	2d00      	cmp	r5, #0
 80050f8:	dd0c      	ble.n	8005114 <_dtoa_r+0x754>
 80050fa:	9b05      	ldr	r3, [sp, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dd09      	ble.n	8005114 <_dtoa_r+0x754>
 8005100:	42ab      	cmp	r3, r5
 8005102:	9a04      	ldr	r2, [sp, #16]
 8005104:	bfa8      	it	ge
 8005106:	462b      	movge	r3, r5
 8005108:	1ad2      	subs	r2, r2, r3
 800510a:	9204      	str	r2, [sp, #16]
 800510c:	9a05      	ldr	r2, [sp, #20]
 800510e:	1aed      	subs	r5, r5, r3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	9305      	str	r3, [sp, #20]
 8005114:	9b07      	ldr	r3, [sp, #28]
 8005116:	b31b      	cbz	r3, 8005160 <_dtoa_r+0x7a0>
 8005118:	9b08      	ldr	r3, [sp, #32]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80af 	beq.w	800527e <_dtoa_r+0x8be>
 8005120:	2e00      	cmp	r6, #0
 8005122:	dd13      	ble.n	800514c <_dtoa_r+0x78c>
 8005124:	4639      	mov	r1, r7
 8005126:	4632      	mov	r2, r6
 8005128:	4620      	mov	r0, r4
 800512a:	f000 fc09 	bl	8005940 <__pow5mult>
 800512e:	ee18 2a10 	vmov	r2, s16
 8005132:	4601      	mov	r1, r0
 8005134:	4607      	mov	r7, r0
 8005136:	4620      	mov	r0, r4
 8005138:	f000 fb58 	bl	80057ec <__multiply>
 800513c:	ee18 1a10 	vmov	r1, s16
 8005140:	4680      	mov	r8, r0
 8005142:	4620      	mov	r0, r4
 8005144:	f000 fa84 	bl	8005650 <_Bfree>
 8005148:	ee08 8a10 	vmov	s16, r8
 800514c:	9b07      	ldr	r3, [sp, #28]
 800514e:	1b9a      	subs	r2, r3, r6
 8005150:	d006      	beq.n	8005160 <_dtoa_r+0x7a0>
 8005152:	ee18 1a10 	vmov	r1, s16
 8005156:	4620      	mov	r0, r4
 8005158:	f000 fbf2 	bl	8005940 <__pow5mult>
 800515c:	ee08 0a10 	vmov	s16, r0
 8005160:	2101      	movs	r1, #1
 8005162:	4620      	mov	r0, r4
 8005164:	f000 fb2c 	bl	80057c0 <__i2b>
 8005168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	4606      	mov	r6, r0
 800516e:	f340 8088 	ble.w	8005282 <_dtoa_r+0x8c2>
 8005172:	461a      	mov	r2, r3
 8005174:	4601      	mov	r1, r0
 8005176:	4620      	mov	r0, r4
 8005178:	f000 fbe2 	bl	8005940 <__pow5mult>
 800517c:	9b06      	ldr	r3, [sp, #24]
 800517e:	2b01      	cmp	r3, #1
 8005180:	4606      	mov	r6, r0
 8005182:	f340 8081 	ble.w	8005288 <_dtoa_r+0x8c8>
 8005186:	f04f 0800 	mov.w	r8, #0
 800518a:	6933      	ldr	r3, [r6, #16]
 800518c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005190:	6918      	ldr	r0, [r3, #16]
 8005192:	f000 fac5 	bl	8005720 <__hi0bits>
 8005196:	f1c0 0020 	rsb	r0, r0, #32
 800519a:	9b05      	ldr	r3, [sp, #20]
 800519c:	4418      	add	r0, r3
 800519e:	f010 001f 	ands.w	r0, r0, #31
 80051a2:	f000 8092 	beq.w	80052ca <_dtoa_r+0x90a>
 80051a6:	f1c0 0320 	rsb	r3, r0, #32
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	f340 808a 	ble.w	80052c4 <_dtoa_r+0x904>
 80051b0:	f1c0 001c 	rsb	r0, r0, #28
 80051b4:	9b04      	ldr	r3, [sp, #16]
 80051b6:	4403      	add	r3, r0
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	9b05      	ldr	r3, [sp, #20]
 80051bc:	4403      	add	r3, r0
 80051be:	4405      	add	r5, r0
 80051c0:	9305      	str	r3, [sp, #20]
 80051c2:	9b04      	ldr	r3, [sp, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	dd07      	ble.n	80051d8 <_dtoa_r+0x818>
 80051c8:	ee18 1a10 	vmov	r1, s16
 80051cc:	461a      	mov	r2, r3
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 fc10 	bl	80059f4 <__lshift>
 80051d4:	ee08 0a10 	vmov	s16, r0
 80051d8:	9b05      	ldr	r3, [sp, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	dd05      	ble.n	80051ea <_dtoa_r+0x82a>
 80051de:	4631      	mov	r1, r6
 80051e0:	461a      	mov	r2, r3
 80051e2:	4620      	mov	r0, r4
 80051e4:	f000 fc06 	bl	80059f4 <__lshift>
 80051e8:	4606      	mov	r6, r0
 80051ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d06e      	beq.n	80052ce <_dtoa_r+0x90e>
 80051f0:	ee18 0a10 	vmov	r0, s16
 80051f4:	4631      	mov	r1, r6
 80051f6:	f000 fc6d 	bl	8005ad4 <__mcmp>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	da67      	bge.n	80052ce <_dtoa_r+0x90e>
 80051fe:	9b00      	ldr	r3, [sp, #0]
 8005200:	3b01      	subs	r3, #1
 8005202:	ee18 1a10 	vmov	r1, s16
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	220a      	movs	r2, #10
 800520a:	2300      	movs	r3, #0
 800520c:	4620      	mov	r0, r4
 800520e:	f000 fa41 	bl	8005694 <__multadd>
 8005212:	9b08      	ldr	r3, [sp, #32]
 8005214:	ee08 0a10 	vmov	s16, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 81b1 	beq.w	8005580 <_dtoa_r+0xbc0>
 800521e:	2300      	movs	r3, #0
 8005220:	4639      	mov	r1, r7
 8005222:	220a      	movs	r2, #10
 8005224:	4620      	mov	r0, r4
 8005226:	f000 fa35 	bl	8005694 <__multadd>
 800522a:	9b02      	ldr	r3, [sp, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	4607      	mov	r7, r0
 8005230:	f300 808e 	bgt.w	8005350 <_dtoa_r+0x990>
 8005234:	9b06      	ldr	r3, [sp, #24]
 8005236:	2b02      	cmp	r3, #2
 8005238:	dc51      	bgt.n	80052de <_dtoa_r+0x91e>
 800523a:	e089      	b.n	8005350 <_dtoa_r+0x990>
 800523c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800523e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005242:	e74b      	b.n	80050dc <_dtoa_r+0x71c>
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	1e5e      	subs	r6, r3, #1
 8005248:	9b07      	ldr	r3, [sp, #28]
 800524a:	42b3      	cmp	r3, r6
 800524c:	bfbf      	itttt	lt
 800524e:	9b07      	ldrlt	r3, [sp, #28]
 8005250:	9607      	strlt	r6, [sp, #28]
 8005252:	1af2      	sublt	r2, r6, r3
 8005254:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005256:	bfb6      	itet	lt
 8005258:	189b      	addlt	r3, r3, r2
 800525a:	1b9e      	subge	r6, r3, r6
 800525c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800525e:	9b03      	ldr	r3, [sp, #12]
 8005260:	bfb8      	it	lt
 8005262:	2600      	movlt	r6, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	bfb7      	itett	lt
 8005268:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800526c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005270:	1a9d      	sublt	r5, r3, r2
 8005272:	2300      	movlt	r3, #0
 8005274:	e734      	b.n	80050e0 <_dtoa_r+0x720>
 8005276:	9e07      	ldr	r6, [sp, #28]
 8005278:	9d04      	ldr	r5, [sp, #16]
 800527a:	9f08      	ldr	r7, [sp, #32]
 800527c:	e73b      	b.n	80050f6 <_dtoa_r+0x736>
 800527e:	9a07      	ldr	r2, [sp, #28]
 8005280:	e767      	b.n	8005152 <_dtoa_r+0x792>
 8005282:	9b06      	ldr	r3, [sp, #24]
 8005284:	2b01      	cmp	r3, #1
 8005286:	dc18      	bgt.n	80052ba <_dtoa_r+0x8fa>
 8005288:	f1ba 0f00 	cmp.w	sl, #0
 800528c:	d115      	bne.n	80052ba <_dtoa_r+0x8fa>
 800528e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005292:	b993      	cbnz	r3, 80052ba <_dtoa_r+0x8fa>
 8005294:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005298:	0d1b      	lsrs	r3, r3, #20
 800529a:	051b      	lsls	r3, r3, #20
 800529c:	b183      	cbz	r3, 80052c0 <_dtoa_r+0x900>
 800529e:	9b04      	ldr	r3, [sp, #16]
 80052a0:	3301      	adds	r3, #1
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	9b05      	ldr	r3, [sp, #20]
 80052a6:	3301      	adds	r3, #1
 80052a8:	9305      	str	r3, [sp, #20]
 80052aa:	f04f 0801 	mov.w	r8, #1
 80052ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f47f af6a 	bne.w	800518a <_dtoa_r+0x7ca>
 80052b6:	2001      	movs	r0, #1
 80052b8:	e76f      	b.n	800519a <_dtoa_r+0x7da>
 80052ba:	f04f 0800 	mov.w	r8, #0
 80052be:	e7f6      	b.n	80052ae <_dtoa_r+0x8ee>
 80052c0:	4698      	mov	r8, r3
 80052c2:	e7f4      	b.n	80052ae <_dtoa_r+0x8ee>
 80052c4:	f43f af7d 	beq.w	80051c2 <_dtoa_r+0x802>
 80052c8:	4618      	mov	r0, r3
 80052ca:	301c      	adds	r0, #28
 80052cc:	e772      	b.n	80051b4 <_dtoa_r+0x7f4>
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dc37      	bgt.n	8005344 <_dtoa_r+0x984>
 80052d4:	9b06      	ldr	r3, [sp, #24]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	dd34      	ble.n	8005344 <_dtoa_r+0x984>
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	9302      	str	r3, [sp, #8]
 80052de:	9b02      	ldr	r3, [sp, #8]
 80052e0:	b96b      	cbnz	r3, 80052fe <_dtoa_r+0x93e>
 80052e2:	4631      	mov	r1, r6
 80052e4:	2205      	movs	r2, #5
 80052e6:	4620      	mov	r0, r4
 80052e8:	f000 f9d4 	bl	8005694 <__multadd>
 80052ec:	4601      	mov	r1, r0
 80052ee:	4606      	mov	r6, r0
 80052f0:	ee18 0a10 	vmov	r0, s16
 80052f4:	f000 fbee 	bl	8005ad4 <__mcmp>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	f73f adbb 	bgt.w	8004e74 <_dtoa_r+0x4b4>
 80052fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005300:	9d01      	ldr	r5, [sp, #4]
 8005302:	43db      	mvns	r3, r3
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	f04f 0800 	mov.w	r8, #0
 800530a:	4631      	mov	r1, r6
 800530c:	4620      	mov	r0, r4
 800530e:	f000 f99f 	bl	8005650 <_Bfree>
 8005312:	2f00      	cmp	r7, #0
 8005314:	f43f aea4 	beq.w	8005060 <_dtoa_r+0x6a0>
 8005318:	f1b8 0f00 	cmp.w	r8, #0
 800531c:	d005      	beq.n	800532a <_dtoa_r+0x96a>
 800531e:	45b8      	cmp	r8, r7
 8005320:	d003      	beq.n	800532a <_dtoa_r+0x96a>
 8005322:	4641      	mov	r1, r8
 8005324:	4620      	mov	r0, r4
 8005326:	f000 f993 	bl	8005650 <_Bfree>
 800532a:	4639      	mov	r1, r7
 800532c:	4620      	mov	r0, r4
 800532e:	f000 f98f 	bl	8005650 <_Bfree>
 8005332:	e695      	b.n	8005060 <_dtoa_r+0x6a0>
 8005334:	2600      	movs	r6, #0
 8005336:	4637      	mov	r7, r6
 8005338:	e7e1      	b.n	80052fe <_dtoa_r+0x93e>
 800533a:	9700      	str	r7, [sp, #0]
 800533c:	4637      	mov	r7, r6
 800533e:	e599      	b.n	8004e74 <_dtoa_r+0x4b4>
 8005340:	40240000 	.word	0x40240000
 8005344:	9b08      	ldr	r3, [sp, #32]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80ca 	beq.w	80054e0 <_dtoa_r+0xb20>
 800534c:	9b03      	ldr	r3, [sp, #12]
 800534e:	9302      	str	r3, [sp, #8]
 8005350:	2d00      	cmp	r5, #0
 8005352:	dd05      	ble.n	8005360 <_dtoa_r+0x9a0>
 8005354:	4639      	mov	r1, r7
 8005356:	462a      	mov	r2, r5
 8005358:	4620      	mov	r0, r4
 800535a:	f000 fb4b 	bl	80059f4 <__lshift>
 800535e:	4607      	mov	r7, r0
 8005360:	f1b8 0f00 	cmp.w	r8, #0
 8005364:	d05b      	beq.n	800541e <_dtoa_r+0xa5e>
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4620      	mov	r0, r4
 800536a:	f000 f931 	bl	80055d0 <_Balloc>
 800536e:	4605      	mov	r5, r0
 8005370:	b928      	cbnz	r0, 800537e <_dtoa_r+0x9be>
 8005372:	4b87      	ldr	r3, [pc, #540]	; (8005590 <_dtoa_r+0xbd0>)
 8005374:	4602      	mov	r2, r0
 8005376:	f240 21ea 	movw	r1, #746	; 0x2ea
 800537a:	f7ff bb3b 	b.w	80049f4 <_dtoa_r+0x34>
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	3202      	adds	r2, #2
 8005382:	0092      	lsls	r2, r2, #2
 8005384:	f107 010c 	add.w	r1, r7, #12
 8005388:	300c      	adds	r0, #12
 800538a:	f000 f913 	bl	80055b4 <memcpy>
 800538e:	2201      	movs	r2, #1
 8005390:	4629      	mov	r1, r5
 8005392:	4620      	mov	r0, r4
 8005394:	f000 fb2e 	bl	80059f4 <__lshift>
 8005398:	9b01      	ldr	r3, [sp, #4]
 800539a:	f103 0901 	add.w	r9, r3, #1
 800539e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	9305      	str	r3, [sp, #20]
 80053a6:	f00a 0301 	and.w	r3, sl, #1
 80053aa:	46b8      	mov	r8, r7
 80053ac:	9304      	str	r3, [sp, #16]
 80053ae:	4607      	mov	r7, r0
 80053b0:	4631      	mov	r1, r6
 80053b2:	ee18 0a10 	vmov	r0, s16
 80053b6:	f7ff fa77 	bl	80048a8 <quorem>
 80053ba:	4641      	mov	r1, r8
 80053bc:	9002      	str	r0, [sp, #8]
 80053be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80053c2:	ee18 0a10 	vmov	r0, s16
 80053c6:	f000 fb85 	bl	8005ad4 <__mcmp>
 80053ca:	463a      	mov	r2, r7
 80053cc:	9003      	str	r0, [sp, #12]
 80053ce:	4631      	mov	r1, r6
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 fb9b 	bl	8005b0c <__mdiff>
 80053d6:	68c2      	ldr	r2, [r0, #12]
 80053d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80053dc:	4605      	mov	r5, r0
 80053de:	bb02      	cbnz	r2, 8005422 <_dtoa_r+0xa62>
 80053e0:	4601      	mov	r1, r0
 80053e2:	ee18 0a10 	vmov	r0, s16
 80053e6:	f000 fb75 	bl	8005ad4 <__mcmp>
 80053ea:	4602      	mov	r2, r0
 80053ec:	4629      	mov	r1, r5
 80053ee:	4620      	mov	r0, r4
 80053f0:	9207      	str	r2, [sp, #28]
 80053f2:	f000 f92d 	bl	8005650 <_Bfree>
 80053f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80053fa:	ea43 0102 	orr.w	r1, r3, r2
 80053fe:	9b04      	ldr	r3, [sp, #16]
 8005400:	430b      	orrs	r3, r1
 8005402:	464d      	mov	r5, r9
 8005404:	d10f      	bne.n	8005426 <_dtoa_r+0xa66>
 8005406:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800540a:	d02a      	beq.n	8005462 <_dtoa_r+0xaa2>
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	dd02      	ble.n	8005418 <_dtoa_r+0xa58>
 8005412:	9b02      	ldr	r3, [sp, #8]
 8005414:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005418:	f88b a000 	strb.w	sl, [fp]
 800541c:	e775      	b.n	800530a <_dtoa_r+0x94a>
 800541e:	4638      	mov	r0, r7
 8005420:	e7ba      	b.n	8005398 <_dtoa_r+0x9d8>
 8005422:	2201      	movs	r2, #1
 8005424:	e7e2      	b.n	80053ec <_dtoa_r+0xa2c>
 8005426:	9b03      	ldr	r3, [sp, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db04      	blt.n	8005436 <_dtoa_r+0xa76>
 800542c:	9906      	ldr	r1, [sp, #24]
 800542e:	430b      	orrs	r3, r1
 8005430:	9904      	ldr	r1, [sp, #16]
 8005432:	430b      	orrs	r3, r1
 8005434:	d122      	bne.n	800547c <_dtoa_r+0xabc>
 8005436:	2a00      	cmp	r2, #0
 8005438:	ddee      	ble.n	8005418 <_dtoa_r+0xa58>
 800543a:	ee18 1a10 	vmov	r1, s16
 800543e:	2201      	movs	r2, #1
 8005440:	4620      	mov	r0, r4
 8005442:	f000 fad7 	bl	80059f4 <__lshift>
 8005446:	4631      	mov	r1, r6
 8005448:	ee08 0a10 	vmov	s16, r0
 800544c:	f000 fb42 	bl	8005ad4 <__mcmp>
 8005450:	2800      	cmp	r0, #0
 8005452:	dc03      	bgt.n	800545c <_dtoa_r+0xa9c>
 8005454:	d1e0      	bne.n	8005418 <_dtoa_r+0xa58>
 8005456:	f01a 0f01 	tst.w	sl, #1
 800545a:	d0dd      	beq.n	8005418 <_dtoa_r+0xa58>
 800545c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005460:	d1d7      	bne.n	8005412 <_dtoa_r+0xa52>
 8005462:	2339      	movs	r3, #57	; 0x39
 8005464:	f88b 3000 	strb.w	r3, [fp]
 8005468:	462b      	mov	r3, r5
 800546a:	461d      	mov	r5, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005472:	2a39      	cmp	r2, #57	; 0x39
 8005474:	d071      	beq.n	800555a <_dtoa_r+0xb9a>
 8005476:	3201      	adds	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e746      	b.n	800530a <_dtoa_r+0x94a>
 800547c:	2a00      	cmp	r2, #0
 800547e:	dd07      	ble.n	8005490 <_dtoa_r+0xad0>
 8005480:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005484:	d0ed      	beq.n	8005462 <_dtoa_r+0xaa2>
 8005486:	f10a 0301 	add.w	r3, sl, #1
 800548a:	f88b 3000 	strb.w	r3, [fp]
 800548e:	e73c      	b.n	800530a <_dtoa_r+0x94a>
 8005490:	9b05      	ldr	r3, [sp, #20]
 8005492:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005496:	4599      	cmp	r9, r3
 8005498:	d047      	beq.n	800552a <_dtoa_r+0xb6a>
 800549a:	ee18 1a10 	vmov	r1, s16
 800549e:	2300      	movs	r3, #0
 80054a0:	220a      	movs	r2, #10
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 f8f6 	bl	8005694 <__multadd>
 80054a8:	45b8      	cmp	r8, r7
 80054aa:	ee08 0a10 	vmov	s16, r0
 80054ae:	f04f 0300 	mov.w	r3, #0
 80054b2:	f04f 020a 	mov.w	r2, #10
 80054b6:	4641      	mov	r1, r8
 80054b8:	4620      	mov	r0, r4
 80054ba:	d106      	bne.n	80054ca <_dtoa_r+0xb0a>
 80054bc:	f000 f8ea 	bl	8005694 <__multadd>
 80054c0:	4680      	mov	r8, r0
 80054c2:	4607      	mov	r7, r0
 80054c4:	f109 0901 	add.w	r9, r9, #1
 80054c8:	e772      	b.n	80053b0 <_dtoa_r+0x9f0>
 80054ca:	f000 f8e3 	bl	8005694 <__multadd>
 80054ce:	4639      	mov	r1, r7
 80054d0:	4680      	mov	r8, r0
 80054d2:	2300      	movs	r3, #0
 80054d4:	220a      	movs	r2, #10
 80054d6:	4620      	mov	r0, r4
 80054d8:	f000 f8dc 	bl	8005694 <__multadd>
 80054dc:	4607      	mov	r7, r0
 80054de:	e7f1      	b.n	80054c4 <_dtoa_r+0xb04>
 80054e0:	9b03      	ldr	r3, [sp, #12]
 80054e2:	9302      	str	r3, [sp, #8]
 80054e4:	9d01      	ldr	r5, [sp, #4]
 80054e6:	ee18 0a10 	vmov	r0, s16
 80054ea:	4631      	mov	r1, r6
 80054ec:	f7ff f9dc 	bl	80048a8 <quorem>
 80054f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80054f4:	9b01      	ldr	r3, [sp, #4]
 80054f6:	f805 ab01 	strb.w	sl, [r5], #1
 80054fa:	1aea      	subs	r2, r5, r3
 80054fc:	9b02      	ldr	r3, [sp, #8]
 80054fe:	4293      	cmp	r3, r2
 8005500:	dd09      	ble.n	8005516 <_dtoa_r+0xb56>
 8005502:	ee18 1a10 	vmov	r1, s16
 8005506:	2300      	movs	r3, #0
 8005508:	220a      	movs	r2, #10
 800550a:	4620      	mov	r0, r4
 800550c:	f000 f8c2 	bl	8005694 <__multadd>
 8005510:	ee08 0a10 	vmov	s16, r0
 8005514:	e7e7      	b.n	80054e6 <_dtoa_r+0xb26>
 8005516:	9b02      	ldr	r3, [sp, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	bfc8      	it	gt
 800551c:	461d      	movgt	r5, r3
 800551e:	9b01      	ldr	r3, [sp, #4]
 8005520:	bfd8      	it	le
 8005522:	2501      	movle	r5, #1
 8005524:	441d      	add	r5, r3
 8005526:	f04f 0800 	mov.w	r8, #0
 800552a:	ee18 1a10 	vmov	r1, s16
 800552e:	2201      	movs	r2, #1
 8005530:	4620      	mov	r0, r4
 8005532:	f000 fa5f 	bl	80059f4 <__lshift>
 8005536:	4631      	mov	r1, r6
 8005538:	ee08 0a10 	vmov	s16, r0
 800553c:	f000 faca 	bl	8005ad4 <__mcmp>
 8005540:	2800      	cmp	r0, #0
 8005542:	dc91      	bgt.n	8005468 <_dtoa_r+0xaa8>
 8005544:	d102      	bne.n	800554c <_dtoa_r+0xb8c>
 8005546:	f01a 0f01 	tst.w	sl, #1
 800554a:	d18d      	bne.n	8005468 <_dtoa_r+0xaa8>
 800554c:	462b      	mov	r3, r5
 800554e:	461d      	mov	r5, r3
 8005550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005554:	2a30      	cmp	r2, #48	; 0x30
 8005556:	d0fa      	beq.n	800554e <_dtoa_r+0xb8e>
 8005558:	e6d7      	b.n	800530a <_dtoa_r+0x94a>
 800555a:	9a01      	ldr	r2, [sp, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d184      	bne.n	800546a <_dtoa_r+0xaaa>
 8005560:	9b00      	ldr	r3, [sp, #0]
 8005562:	3301      	adds	r3, #1
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2331      	movs	r3, #49	; 0x31
 8005568:	7013      	strb	r3, [r2, #0]
 800556a:	e6ce      	b.n	800530a <_dtoa_r+0x94a>
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <_dtoa_r+0xbd4>)
 800556e:	f7ff ba95 	b.w	8004a9c <_dtoa_r+0xdc>
 8005572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005574:	2b00      	cmp	r3, #0
 8005576:	f47f aa6e 	bne.w	8004a56 <_dtoa_r+0x96>
 800557a:	4b07      	ldr	r3, [pc, #28]	; (8005598 <_dtoa_r+0xbd8>)
 800557c:	f7ff ba8e 	b.w	8004a9c <_dtoa_r+0xdc>
 8005580:	9b02      	ldr	r3, [sp, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	dcae      	bgt.n	80054e4 <_dtoa_r+0xb24>
 8005586:	9b06      	ldr	r3, [sp, #24]
 8005588:	2b02      	cmp	r3, #2
 800558a:	f73f aea8 	bgt.w	80052de <_dtoa_r+0x91e>
 800558e:	e7a9      	b.n	80054e4 <_dtoa_r+0xb24>
 8005590:	08006e53 	.word	0x08006e53
 8005594:	08006db0 	.word	0x08006db0
 8005598:	08006dd4 	.word	0x08006dd4

0800559c <_localeconv_r>:
 800559c:	4800      	ldr	r0, [pc, #0]	; (80055a0 <_localeconv_r+0x4>)
 800559e:	4770      	bx	lr
 80055a0:	200001a0 	.word	0x200001a0

080055a4 <malloc>:
 80055a4:	4b02      	ldr	r3, [pc, #8]	; (80055b0 <malloc+0xc>)
 80055a6:	4601      	mov	r1, r0
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	f000 bc17 	b.w	8005ddc <_malloc_r>
 80055ae:	bf00      	nop
 80055b0:	2000004c 	.word	0x2000004c

080055b4 <memcpy>:
 80055b4:	440a      	add	r2, r1
 80055b6:	4291      	cmp	r1, r2
 80055b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055bc:	d100      	bne.n	80055c0 <memcpy+0xc>
 80055be:	4770      	bx	lr
 80055c0:	b510      	push	{r4, lr}
 80055c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ca:	4291      	cmp	r1, r2
 80055cc:	d1f9      	bne.n	80055c2 <memcpy+0xe>
 80055ce:	bd10      	pop	{r4, pc}

080055d0 <_Balloc>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055d4:	4604      	mov	r4, r0
 80055d6:	460d      	mov	r5, r1
 80055d8:	b976      	cbnz	r6, 80055f8 <_Balloc+0x28>
 80055da:	2010      	movs	r0, #16
 80055dc:	f7ff ffe2 	bl	80055a4 <malloc>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6260      	str	r0, [r4, #36]	; 0x24
 80055e4:	b920      	cbnz	r0, 80055f0 <_Balloc+0x20>
 80055e6:	4b18      	ldr	r3, [pc, #96]	; (8005648 <_Balloc+0x78>)
 80055e8:	4818      	ldr	r0, [pc, #96]	; (800564c <_Balloc+0x7c>)
 80055ea:	2166      	movs	r1, #102	; 0x66
 80055ec:	f000 fdd6 	bl	800619c <__assert_func>
 80055f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055f4:	6006      	str	r6, [r0, #0]
 80055f6:	60c6      	str	r6, [r0, #12]
 80055f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055fa:	68f3      	ldr	r3, [r6, #12]
 80055fc:	b183      	cbz	r3, 8005620 <_Balloc+0x50>
 80055fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005606:	b9b8      	cbnz	r0, 8005638 <_Balloc+0x68>
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f605 	lsl.w	r6, r1, r5
 800560e:	1d72      	adds	r2, r6, #5
 8005610:	0092      	lsls	r2, r2, #2
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fb60 	bl	8005cd8 <_calloc_r>
 8005618:	b160      	cbz	r0, 8005634 <_Balloc+0x64>
 800561a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800561e:	e00e      	b.n	800563e <_Balloc+0x6e>
 8005620:	2221      	movs	r2, #33	; 0x21
 8005622:	2104      	movs	r1, #4
 8005624:	4620      	mov	r0, r4
 8005626:	f000 fb57 	bl	8005cd8 <_calloc_r>
 800562a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800562c:	60f0      	str	r0, [r6, #12]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e4      	bne.n	80055fe <_Balloc+0x2e>
 8005634:	2000      	movs	r0, #0
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	6802      	ldr	r2, [r0, #0]
 800563a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800563e:	2300      	movs	r3, #0
 8005640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005644:	e7f7      	b.n	8005636 <_Balloc+0x66>
 8005646:	bf00      	nop
 8005648:	08006de1 	.word	0x08006de1
 800564c:	08006e64 	.word	0x08006e64

08005650 <_Bfree>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005654:	4605      	mov	r5, r0
 8005656:	460c      	mov	r4, r1
 8005658:	b976      	cbnz	r6, 8005678 <_Bfree+0x28>
 800565a:	2010      	movs	r0, #16
 800565c:	f7ff ffa2 	bl	80055a4 <malloc>
 8005660:	4602      	mov	r2, r0
 8005662:	6268      	str	r0, [r5, #36]	; 0x24
 8005664:	b920      	cbnz	r0, 8005670 <_Bfree+0x20>
 8005666:	4b09      	ldr	r3, [pc, #36]	; (800568c <_Bfree+0x3c>)
 8005668:	4809      	ldr	r0, [pc, #36]	; (8005690 <_Bfree+0x40>)
 800566a:	218a      	movs	r1, #138	; 0x8a
 800566c:	f000 fd96 	bl	800619c <__assert_func>
 8005670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005674:	6006      	str	r6, [r0, #0]
 8005676:	60c6      	str	r6, [r0, #12]
 8005678:	b13c      	cbz	r4, 800568a <_Bfree+0x3a>
 800567a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800567c:	6862      	ldr	r2, [r4, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005684:	6021      	str	r1, [r4, #0]
 8005686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	08006de1 	.word	0x08006de1
 8005690:	08006e64 	.word	0x08006e64

08005694 <__multadd>:
 8005694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005698:	690d      	ldr	r5, [r1, #16]
 800569a:	4607      	mov	r7, r0
 800569c:	460c      	mov	r4, r1
 800569e:	461e      	mov	r6, r3
 80056a0:	f101 0c14 	add.w	ip, r1, #20
 80056a4:	2000      	movs	r0, #0
 80056a6:	f8dc 3000 	ldr.w	r3, [ip]
 80056aa:	b299      	uxth	r1, r3
 80056ac:	fb02 6101 	mla	r1, r2, r1, r6
 80056b0:	0c1e      	lsrs	r6, r3, #16
 80056b2:	0c0b      	lsrs	r3, r1, #16
 80056b4:	fb02 3306 	mla	r3, r2, r6, r3
 80056b8:	b289      	uxth	r1, r1
 80056ba:	3001      	adds	r0, #1
 80056bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056c0:	4285      	cmp	r5, r0
 80056c2:	f84c 1b04 	str.w	r1, [ip], #4
 80056c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056ca:	dcec      	bgt.n	80056a6 <__multadd+0x12>
 80056cc:	b30e      	cbz	r6, 8005712 <__multadd+0x7e>
 80056ce:	68a3      	ldr	r3, [r4, #8]
 80056d0:	42ab      	cmp	r3, r5
 80056d2:	dc19      	bgt.n	8005708 <__multadd+0x74>
 80056d4:	6861      	ldr	r1, [r4, #4]
 80056d6:	4638      	mov	r0, r7
 80056d8:	3101      	adds	r1, #1
 80056da:	f7ff ff79 	bl	80055d0 <_Balloc>
 80056de:	4680      	mov	r8, r0
 80056e0:	b928      	cbnz	r0, 80056ee <__multadd+0x5a>
 80056e2:	4602      	mov	r2, r0
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <__multadd+0x84>)
 80056e6:	480d      	ldr	r0, [pc, #52]	; (800571c <__multadd+0x88>)
 80056e8:	21b5      	movs	r1, #181	; 0xb5
 80056ea:	f000 fd57 	bl	800619c <__assert_func>
 80056ee:	6922      	ldr	r2, [r4, #16]
 80056f0:	3202      	adds	r2, #2
 80056f2:	f104 010c 	add.w	r1, r4, #12
 80056f6:	0092      	lsls	r2, r2, #2
 80056f8:	300c      	adds	r0, #12
 80056fa:	f7ff ff5b 	bl	80055b4 <memcpy>
 80056fe:	4621      	mov	r1, r4
 8005700:	4638      	mov	r0, r7
 8005702:	f7ff ffa5 	bl	8005650 <_Bfree>
 8005706:	4644      	mov	r4, r8
 8005708:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800570c:	3501      	adds	r5, #1
 800570e:	615e      	str	r6, [r3, #20]
 8005710:	6125      	str	r5, [r4, #16]
 8005712:	4620      	mov	r0, r4
 8005714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005718:	08006e53 	.word	0x08006e53
 800571c:	08006e64 	.word	0x08006e64

08005720 <__hi0bits>:
 8005720:	0c03      	lsrs	r3, r0, #16
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	b9d3      	cbnz	r3, 800575c <__hi0bits+0x3c>
 8005726:	0400      	lsls	r0, r0, #16
 8005728:	2310      	movs	r3, #16
 800572a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800572e:	bf04      	itt	eq
 8005730:	0200      	lsleq	r0, r0, #8
 8005732:	3308      	addeq	r3, #8
 8005734:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005738:	bf04      	itt	eq
 800573a:	0100      	lsleq	r0, r0, #4
 800573c:	3304      	addeq	r3, #4
 800573e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005742:	bf04      	itt	eq
 8005744:	0080      	lsleq	r0, r0, #2
 8005746:	3302      	addeq	r3, #2
 8005748:	2800      	cmp	r0, #0
 800574a:	db05      	blt.n	8005758 <__hi0bits+0x38>
 800574c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005750:	f103 0301 	add.w	r3, r3, #1
 8005754:	bf08      	it	eq
 8005756:	2320      	moveq	r3, #32
 8005758:	4618      	mov	r0, r3
 800575a:	4770      	bx	lr
 800575c:	2300      	movs	r3, #0
 800575e:	e7e4      	b.n	800572a <__hi0bits+0xa>

08005760 <__lo0bits>:
 8005760:	6803      	ldr	r3, [r0, #0]
 8005762:	f013 0207 	ands.w	r2, r3, #7
 8005766:	4601      	mov	r1, r0
 8005768:	d00b      	beq.n	8005782 <__lo0bits+0x22>
 800576a:	07da      	lsls	r2, r3, #31
 800576c:	d423      	bmi.n	80057b6 <__lo0bits+0x56>
 800576e:	0798      	lsls	r0, r3, #30
 8005770:	bf49      	itett	mi
 8005772:	085b      	lsrmi	r3, r3, #1
 8005774:	089b      	lsrpl	r3, r3, #2
 8005776:	2001      	movmi	r0, #1
 8005778:	600b      	strmi	r3, [r1, #0]
 800577a:	bf5c      	itt	pl
 800577c:	600b      	strpl	r3, [r1, #0]
 800577e:	2002      	movpl	r0, #2
 8005780:	4770      	bx	lr
 8005782:	b298      	uxth	r0, r3
 8005784:	b9a8      	cbnz	r0, 80057b2 <__lo0bits+0x52>
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	2010      	movs	r0, #16
 800578a:	b2da      	uxtb	r2, r3
 800578c:	b90a      	cbnz	r2, 8005792 <__lo0bits+0x32>
 800578e:	3008      	adds	r0, #8
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	071a      	lsls	r2, r3, #28
 8005794:	bf04      	itt	eq
 8005796:	091b      	lsreq	r3, r3, #4
 8005798:	3004      	addeq	r0, #4
 800579a:	079a      	lsls	r2, r3, #30
 800579c:	bf04      	itt	eq
 800579e:	089b      	lsreq	r3, r3, #2
 80057a0:	3002      	addeq	r0, #2
 80057a2:	07da      	lsls	r2, r3, #31
 80057a4:	d403      	bmi.n	80057ae <__lo0bits+0x4e>
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	f100 0001 	add.w	r0, r0, #1
 80057ac:	d005      	beq.n	80057ba <__lo0bits+0x5a>
 80057ae:	600b      	str	r3, [r1, #0]
 80057b0:	4770      	bx	lr
 80057b2:	4610      	mov	r0, r2
 80057b4:	e7e9      	b.n	800578a <__lo0bits+0x2a>
 80057b6:	2000      	movs	r0, #0
 80057b8:	4770      	bx	lr
 80057ba:	2020      	movs	r0, #32
 80057bc:	4770      	bx	lr
	...

080057c0 <__i2b>:
 80057c0:	b510      	push	{r4, lr}
 80057c2:	460c      	mov	r4, r1
 80057c4:	2101      	movs	r1, #1
 80057c6:	f7ff ff03 	bl	80055d0 <_Balloc>
 80057ca:	4602      	mov	r2, r0
 80057cc:	b928      	cbnz	r0, 80057da <__i2b+0x1a>
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <__i2b+0x24>)
 80057d0:	4805      	ldr	r0, [pc, #20]	; (80057e8 <__i2b+0x28>)
 80057d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80057d6:	f000 fce1 	bl	800619c <__assert_func>
 80057da:	2301      	movs	r3, #1
 80057dc:	6144      	str	r4, [r0, #20]
 80057de:	6103      	str	r3, [r0, #16]
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	bf00      	nop
 80057e4:	08006e53 	.word	0x08006e53
 80057e8:	08006e64 	.word	0x08006e64

080057ec <__multiply>:
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	4691      	mov	r9, r2
 80057f2:	690a      	ldr	r2, [r1, #16]
 80057f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	bfb8      	it	lt
 80057fc:	460b      	movlt	r3, r1
 80057fe:	460c      	mov	r4, r1
 8005800:	bfbc      	itt	lt
 8005802:	464c      	movlt	r4, r9
 8005804:	4699      	movlt	r9, r3
 8005806:	6927      	ldr	r7, [r4, #16]
 8005808:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800580c:	68a3      	ldr	r3, [r4, #8]
 800580e:	6861      	ldr	r1, [r4, #4]
 8005810:	eb07 060a 	add.w	r6, r7, sl
 8005814:	42b3      	cmp	r3, r6
 8005816:	b085      	sub	sp, #20
 8005818:	bfb8      	it	lt
 800581a:	3101      	addlt	r1, #1
 800581c:	f7ff fed8 	bl	80055d0 <_Balloc>
 8005820:	b930      	cbnz	r0, 8005830 <__multiply+0x44>
 8005822:	4602      	mov	r2, r0
 8005824:	4b44      	ldr	r3, [pc, #272]	; (8005938 <__multiply+0x14c>)
 8005826:	4845      	ldr	r0, [pc, #276]	; (800593c <__multiply+0x150>)
 8005828:	f240 115d 	movw	r1, #349	; 0x15d
 800582c:	f000 fcb6 	bl	800619c <__assert_func>
 8005830:	f100 0514 	add.w	r5, r0, #20
 8005834:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005838:	462b      	mov	r3, r5
 800583a:	2200      	movs	r2, #0
 800583c:	4543      	cmp	r3, r8
 800583e:	d321      	bcc.n	8005884 <__multiply+0x98>
 8005840:	f104 0314 	add.w	r3, r4, #20
 8005844:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005848:	f109 0314 	add.w	r3, r9, #20
 800584c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005850:	9202      	str	r2, [sp, #8]
 8005852:	1b3a      	subs	r2, r7, r4
 8005854:	3a15      	subs	r2, #21
 8005856:	f022 0203 	bic.w	r2, r2, #3
 800585a:	3204      	adds	r2, #4
 800585c:	f104 0115 	add.w	r1, r4, #21
 8005860:	428f      	cmp	r7, r1
 8005862:	bf38      	it	cc
 8005864:	2204      	movcc	r2, #4
 8005866:	9201      	str	r2, [sp, #4]
 8005868:	9a02      	ldr	r2, [sp, #8]
 800586a:	9303      	str	r3, [sp, #12]
 800586c:	429a      	cmp	r2, r3
 800586e:	d80c      	bhi.n	800588a <__multiply+0x9e>
 8005870:	2e00      	cmp	r6, #0
 8005872:	dd03      	ble.n	800587c <__multiply+0x90>
 8005874:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005878:	2b00      	cmp	r3, #0
 800587a:	d05a      	beq.n	8005932 <__multiply+0x146>
 800587c:	6106      	str	r6, [r0, #16]
 800587e:	b005      	add	sp, #20
 8005880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005884:	f843 2b04 	str.w	r2, [r3], #4
 8005888:	e7d8      	b.n	800583c <__multiply+0x50>
 800588a:	f8b3 a000 	ldrh.w	sl, [r3]
 800588e:	f1ba 0f00 	cmp.w	sl, #0
 8005892:	d024      	beq.n	80058de <__multiply+0xf2>
 8005894:	f104 0e14 	add.w	lr, r4, #20
 8005898:	46a9      	mov	r9, r5
 800589a:	f04f 0c00 	mov.w	ip, #0
 800589e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80058a2:	f8d9 1000 	ldr.w	r1, [r9]
 80058a6:	fa1f fb82 	uxth.w	fp, r2
 80058aa:	b289      	uxth	r1, r1
 80058ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80058b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80058b4:	f8d9 2000 	ldr.w	r2, [r9]
 80058b8:	4461      	add	r1, ip
 80058ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058be:	fb0a c20b 	mla	r2, sl, fp, ip
 80058c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80058c6:	b289      	uxth	r1, r1
 80058c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058cc:	4577      	cmp	r7, lr
 80058ce:	f849 1b04 	str.w	r1, [r9], #4
 80058d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058d6:	d8e2      	bhi.n	800589e <__multiply+0xb2>
 80058d8:	9a01      	ldr	r2, [sp, #4]
 80058da:	f845 c002 	str.w	ip, [r5, r2]
 80058de:	9a03      	ldr	r2, [sp, #12]
 80058e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80058e4:	3304      	adds	r3, #4
 80058e6:	f1b9 0f00 	cmp.w	r9, #0
 80058ea:	d020      	beq.n	800592e <__multiply+0x142>
 80058ec:	6829      	ldr	r1, [r5, #0]
 80058ee:	f104 0c14 	add.w	ip, r4, #20
 80058f2:	46ae      	mov	lr, r5
 80058f4:	f04f 0a00 	mov.w	sl, #0
 80058f8:	f8bc b000 	ldrh.w	fp, [ip]
 80058fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005900:	fb09 220b 	mla	r2, r9, fp, r2
 8005904:	4492      	add	sl, r2
 8005906:	b289      	uxth	r1, r1
 8005908:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800590c:	f84e 1b04 	str.w	r1, [lr], #4
 8005910:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005914:	f8be 1000 	ldrh.w	r1, [lr]
 8005918:	0c12      	lsrs	r2, r2, #16
 800591a:	fb09 1102 	mla	r1, r9, r2, r1
 800591e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005922:	4567      	cmp	r7, ip
 8005924:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005928:	d8e6      	bhi.n	80058f8 <__multiply+0x10c>
 800592a:	9a01      	ldr	r2, [sp, #4]
 800592c:	50a9      	str	r1, [r5, r2]
 800592e:	3504      	adds	r5, #4
 8005930:	e79a      	b.n	8005868 <__multiply+0x7c>
 8005932:	3e01      	subs	r6, #1
 8005934:	e79c      	b.n	8005870 <__multiply+0x84>
 8005936:	bf00      	nop
 8005938:	08006e53 	.word	0x08006e53
 800593c:	08006e64 	.word	0x08006e64

08005940 <__pow5mult>:
 8005940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005944:	4615      	mov	r5, r2
 8005946:	f012 0203 	ands.w	r2, r2, #3
 800594a:	4606      	mov	r6, r0
 800594c:	460f      	mov	r7, r1
 800594e:	d007      	beq.n	8005960 <__pow5mult+0x20>
 8005950:	4c25      	ldr	r4, [pc, #148]	; (80059e8 <__pow5mult+0xa8>)
 8005952:	3a01      	subs	r2, #1
 8005954:	2300      	movs	r3, #0
 8005956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800595a:	f7ff fe9b 	bl	8005694 <__multadd>
 800595e:	4607      	mov	r7, r0
 8005960:	10ad      	asrs	r5, r5, #2
 8005962:	d03d      	beq.n	80059e0 <__pow5mult+0xa0>
 8005964:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005966:	b97c      	cbnz	r4, 8005988 <__pow5mult+0x48>
 8005968:	2010      	movs	r0, #16
 800596a:	f7ff fe1b 	bl	80055a4 <malloc>
 800596e:	4602      	mov	r2, r0
 8005970:	6270      	str	r0, [r6, #36]	; 0x24
 8005972:	b928      	cbnz	r0, 8005980 <__pow5mult+0x40>
 8005974:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <__pow5mult+0xac>)
 8005976:	481e      	ldr	r0, [pc, #120]	; (80059f0 <__pow5mult+0xb0>)
 8005978:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800597c:	f000 fc0e 	bl	800619c <__assert_func>
 8005980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005984:	6004      	str	r4, [r0, #0]
 8005986:	60c4      	str	r4, [r0, #12]
 8005988:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800598c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005990:	b94c      	cbnz	r4, 80059a6 <__pow5mult+0x66>
 8005992:	f240 2171 	movw	r1, #625	; 0x271
 8005996:	4630      	mov	r0, r6
 8005998:	f7ff ff12 	bl	80057c0 <__i2b>
 800599c:	2300      	movs	r3, #0
 800599e:	f8c8 0008 	str.w	r0, [r8, #8]
 80059a2:	4604      	mov	r4, r0
 80059a4:	6003      	str	r3, [r0, #0]
 80059a6:	f04f 0900 	mov.w	r9, #0
 80059aa:	07eb      	lsls	r3, r5, #31
 80059ac:	d50a      	bpl.n	80059c4 <__pow5mult+0x84>
 80059ae:	4639      	mov	r1, r7
 80059b0:	4622      	mov	r2, r4
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7ff ff1a 	bl	80057ec <__multiply>
 80059b8:	4639      	mov	r1, r7
 80059ba:	4680      	mov	r8, r0
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff fe47 	bl	8005650 <_Bfree>
 80059c2:	4647      	mov	r7, r8
 80059c4:	106d      	asrs	r5, r5, #1
 80059c6:	d00b      	beq.n	80059e0 <__pow5mult+0xa0>
 80059c8:	6820      	ldr	r0, [r4, #0]
 80059ca:	b938      	cbnz	r0, 80059dc <__pow5mult+0x9c>
 80059cc:	4622      	mov	r2, r4
 80059ce:	4621      	mov	r1, r4
 80059d0:	4630      	mov	r0, r6
 80059d2:	f7ff ff0b 	bl	80057ec <__multiply>
 80059d6:	6020      	str	r0, [r4, #0]
 80059d8:	f8c0 9000 	str.w	r9, [r0]
 80059dc:	4604      	mov	r4, r0
 80059de:	e7e4      	b.n	80059aa <__pow5mult+0x6a>
 80059e0:	4638      	mov	r0, r7
 80059e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059e6:	bf00      	nop
 80059e8:	08006fb0 	.word	0x08006fb0
 80059ec:	08006de1 	.word	0x08006de1
 80059f0:	08006e64 	.word	0x08006e64

080059f4 <__lshift>:
 80059f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	460c      	mov	r4, r1
 80059fa:	6849      	ldr	r1, [r1, #4]
 80059fc:	6923      	ldr	r3, [r4, #16]
 80059fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a02:	68a3      	ldr	r3, [r4, #8]
 8005a04:	4607      	mov	r7, r0
 8005a06:	4691      	mov	r9, r2
 8005a08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a0c:	f108 0601 	add.w	r6, r8, #1
 8005a10:	42b3      	cmp	r3, r6
 8005a12:	db0b      	blt.n	8005a2c <__lshift+0x38>
 8005a14:	4638      	mov	r0, r7
 8005a16:	f7ff fddb 	bl	80055d0 <_Balloc>
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	b948      	cbnz	r0, 8005a32 <__lshift+0x3e>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <__lshift+0xd8>)
 8005a22:	482b      	ldr	r0, [pc, #172]	; (8005ad0 <__lshift+0xdc>)
 8005a24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a28:	f000 fbb8 	bl	800619c <__assert_func>
 8005a2c:	3101      	adds	r1, #1
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	e7ee      	b.n	8005a10 <__lshift+0x1c>
 8005a32:	2300      	movs	r3, #0
 8005a34:	f100 0114 	add.w	r1, r0, #20
 8005a38:	f100 0210 	add.w	r2, r0, #16
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	4553      	cmp	r3, sl
 8005a40:	db37      	blt.n	8005ab2 <__lshift+0xbe>
 8005a42:	6920      	ldr	r0, [r4, #16]
 8005a44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a48:	f104 0314 	add.w	r3, r4, #20
 8005a4c:	f019 091f 	ands.w	r9, r9, #31
 8005a50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005a58:	d02f      	beq.n	8005aba <__lshift+0xc6>
 8005a5a:	f1c9 0e20 	rsb	lr, r9, #32
 8005a5e:	468a      	mov	sl, r1
 8005a60:	f04f 0c00 	mov.w	ip, #0
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	fa02 f209 	lsl.w	r2, r2, r9
 8005a6a:	ea42 020c 	orr.w	r2, r2, ip
 8005a6e:	f84a 2b04 	str.w	r2, [sl], #4
 8005a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a76:	4298      	cmp	r0, r3
 8005a78:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005a7c:	d8f2      	bhi.n	8005a64 <__lshift+0x70>
 8005a7e:	1b03      	subs	r3, r0, r4
 8005a80:	3b15      	subs	r3, #21
 8005a82:	f023 0303 	bic.w	r3, r3, #3
 8005a86:	3304      	adds	r3, #4
 8005a88:	f104 0215 	add.w	r2, r4, #21
 8005a8c:	4290      	cmp	r0, r2
 8005a8e:	bf38      	it	cc
 8005a90:	2304      	movcc	r3, #4
 8005a92:	f841 c003 	str.w	ip, [r1, r3]
 8005a96:	f1bc 0f00 	cmp.w	ip, #0
 8005a9a:	d001      	beq.n	8005aa0 <__lshift+0xac>
 8005a9c:	f108 0602 	add.w	r6, r8, #2
 8005aa0:	3e01      	subs	r6, #1
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	612e      	str	r6, [r5, #16]
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	f7ff fdd2 	bl	8005650 <_Bfree>
 8005aac:	4628      	mov	r0, r5
 8005aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	e7c1      	b.n	8005a3e <__lshift+0x4a>
 8005aba:	3904      	subs	r1, #4
 8005abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ac4:	4298      	cmp	r0, r3
 8005ac6:	d8f9      	bhi.n	8005abc <__lshift+0xc8>
 8005ac8:	e7ea      	b.n	8005aa0 <__lshift+0xac>
 8005aca:	bf00      	nop
 8005acc:	08006e53 	.word	0x08006e53
 8005ad0:	08006e64 	.word	0x08006e64

08005ad4 <__mcmp>:
 8005ad4:	b530      	push	{r4, r5, lr}
 8005ad6:	6902      	ldr	r2, [r0, #16]
 8005ad8:	690c      	ldr	r4, [r1, #16]
 8005ada:	1b12      	subs	r2, r2, r4
 8005adc:	d10e      	bne.n	8005afc <__mcmp+0x28>
 8005ade:	f100 0314 	add.w	r3, r0, #20
 8005ae2:	3114      	adds	r1, #20
 8005ae4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005ae8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005aec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005af0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005af4:	42a5      	cmp	r5, r4
 8005af6:	d003      	beq.n	8005b00 <__mcmp+0x2c>
 8005af8:	d305      	bcc.n	8005b06 <__mcmp+0x32>
 8005afa:	2201      	movs	r2, #1
 8005afc:	4610      	mov	r0, r2
 8005afe:	bd30      	pop	{r4, r5, pc}
 8005b00:	4283      	cmp	r3, r0
 8005b02:	d3f3      	bcc.n	8005aec <__mcmp+0x18>
 8005b04:	e7fa      	b.n	8005afc <__mcmp+0x28>
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0a:	e7f7      	b.n	8005afc <__mcmp+0x28>

08005b0c <__mdiff>:
 8005b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	460c      	mov	r4, r1
 8005b12:	4606      	mov	r6, r0
 8005b14:	4611      	mov	r1, r2
 8005b16:	4620      	mov	r0, r4
 8005b18:	4690      	mov	r8, r2
 8005b1a:	f7ff ffdb 	bl	8005ad4 <__mcmp>
 8005b1e:	1e05      	subs	r5, r0, #0
 8005b20:	d110      	bne.n	8005b44 <__mdiff+0x38>
 8005b22:	4629      	mov	r1, r5
 8005b24:	4630      	mov	r0, r6
 8005b26:	f7ff fd53 	bl	80055d0 <_Balloc>
 8005b2a:	b930      	cbnz	r0, 8005b3a <__mdiff+0x2e>
 8005b2c:	4b3a      	ldr	r3, [pc, #232]	; (8005c18 <__mdiff+0x10c>)
 8005b2e:	4602      	mov	r2, r0
 8005b30:	f240 2132 	movw	r1, #562	; 0x232
 8005b34:	4839      	ldr	r0, [pc, #228]	; (8005c1c <__mdiff+0x110>)
 8005b36:	f000 fb31 	bl	800619c <__assert_func>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b44:	bfa4      	itt	ge
 8005b46:	4643      	movge	r3, r8
 8005b48:	46a0      	movge	r8, r4
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b50:	bfa6      	itte	ge
 8005b52:	461c      	movge	r4, r3
 8005b54:	2500      	movge	r5, #0
 8005b56:	2501      	movlt	r5, #1
 8005b58:	f7ff fd3a 	bl	80055d0 <_Balloc>
 8005b5c:	b920      	cbnz	r0, 8005b68 <__mdiff+0x5c>
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <__mdiff+0x10c>)
 8005b60:	4602      	mov	r2, r0
 8005b62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005b66:	e7e5      	b.n	8005b34 <__mdiff+0x28>
 8005b68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b6c:	6926      	ldr	r6, [r4, #16]
 8005b6e:	60c5      	str	r5, [r0, #12]
 8005b70:	f104 0914 	add.w	r9, r4, #20
 8005b74:	f108 0514 	add.w	r5, r8, #20
 8005b78:	f100 0e14 	add.w	lr, r0, #20
 8005b7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005b80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b84:	f108 0210 	add.w	r2, r8, #16
 8005b88:	46f2      	mov	sl, lr
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005b94:	fa1f f883 	uxth.w	r8, r3
 8005b98:	fa11 f18b 	uxtah	r1, r1, fp
 8005b9c:	0c1b      	lsrs	r3, r3, #16
 8005b9e:	eba1 0808 	sub.w	r8, r1, r8
 8005ba2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ba6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005baa:	fa1f f888 	uxth.w	r8, r8
 8005bae:	1419      	asrs	r1, r3, #16
 8005bb0:	454e      	cmp	r6, r9
 8005bb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005bb6:	f84a 3b04 	str.w	r3, [sl], #4
 8005bba:	d8e7      	bhi.n	8005b8c <__mdiff+0x80>
 8005bbc:	1b33      	subs	r3, r6, r4
 8005bbe:	3b15      	subs	r3, #21
 8005bc0:	f023 0303 	bic.w	r3, r3, #3
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	3415      	adds	r4, #21
 8005bc8:	42a6      	cmp	r6, r4
 8005bca:	bf38      	it	cc
 8005bcc:	2304      	movcc	r3, #4
 8005bce:	441d      	add	r5, r3
 8005bd0:	4473      	add	r3, lr
 8005bd2:	469e      	mov	lr, r3
 8005bd4:	462e      	mov	r6, r5
 8005bd6:	4566      	cmp	r6, ip
 8005bd8:	d30e      	bcc.n	8005bf8 <__mdiff+0xec>
 8005bda:	f10c 0203 	add.w	r2, ip, #3
 8005bde:	1b52      	subs	r2, r2, r5
 8005be0:	f022 0203 	bic.w	r2, r2, #3
 8005be4:	3d03      	subs	r5, #3
 8005be6:	45ac      	cmp	ip, r5
 8005be8:	bf38      	it	cc
 8005bea:	2200      	movcc	r2, #0
 8005bec:	441a      	add	r2, r3
 8005bee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005bf2:	b17b      	cbz	r3, 8005c14 <__mdiff+0x108>
 8005bf4:	6107      	str	r7, [r0, #16]
 8005bf6:	e7a3      	b.n	8005b40 <__mdiff+0x34>
 8005bf8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005bfc:	fa11 f288 	uxtah	r2, r1, r8
 8005c00:	1414      	asrs	r4, r2, #16
 8005c02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005c06:	b292      	uxth	r2, r2
 8005c08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005c0c:	f84e 2b04 	str.w	r2, [lr], #4
 8005c10:	1421      	asrs	r1, r4, #16
 8005c12:	e7e0      	b.n	8005bd6 <__mdiff+0xca>
 8005c14:	3f01      	subs	r7, #1
 8005c16:	e7ea      	b.n	8005bee <__mdiff+0xe2>
 8005c18:	08006e53 	.word	0x08006e53
 8005c1c:	08006e64 	.word	0x08006e64

08005c20 <__d2b>:
 8005c20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c24:	4689      	mov	r9, r1
 8005c26:	2101      	movs	r1, #1
 8005c28:	ec57 6b10 	vmov	r6, r7, d0
 8005c2c:	4690      	mov	r8, r2
 8005c2e:	f7ff fccf 	bl	80055d0 <_Balloc>
 8005c32:	4604      	mov	r4, r0
 8005c34:	b930      	cbnz	r0, 8005c44 <__d2b+0x24>
 8005c36:	4602      	mov	r2, r0
 8005c38:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <__d2b+0xb0>)
 8005c3a:	4826      	ldr	r0, [pc, #152]	; (8005cd4 <__d2b+0xb4>)
 8005c3c:	f240 310a 	movw	r1, #778	; 0x30a
 8005c40:	f000 faac 	bl	800619c <__assert_func>
 8005c44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c4c:	bb35      	cbnz	r5, 8005c9c <__d2b+0x7c>
 8005c4e:	2e00      	cmp	r6, #0
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	d028      	beq.n	8005ca6 <__d2b+0x86>
 8005c54:	4668      	mov	r0, sp
 8005c56:	9600      	str	r6, [sp, #0]
 8005c58:	f7ff fd82 	bl	8005760 <__lo0bits>
 8005c5c:	9900      	ldr	r1, [sp, #0]
 8005c5e:	b300      	cbz	r0, 8005ca2 <__d2b+0x82>
 8005c60:	9a01      	ldr	r2, [sp, #4]
 8005c62:	f1c0 0320 	rsb	r3, r0, #32
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	40c2      	lsrs	r2, r0
 8005c6e:	6163      	str	r3, [r4, #20]
 8005c70:	9201      	str	r2, [sp, #4]
 8005c72:	9b01      	ldr	r3, [sp, #4]
 8005c74:	61a3      	str	r3, [r4, #24]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bf14      	ite	ne
 8005c7a:	2202      	movne	r2, #2
 8005c7c:	2201      	moveq	r2, #1
 8005c7e:	6122      	str	r2, [r4, #16]
 8005c80:	b1d5      	cbz	r5, 8005cb8 <__d2b+0x98>
 8005c82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c86:	4405      	add	r5, r0
 8005c88:	f8c9 5000 	str.w	r5, [r9]
 8005c8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c90:	f8c8 0000 	str.w	r0, [r8]
 8005c94:	4620      	mov	r0, r4
 8005c96:	b003      	add	sp, #12
 8005c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ca0:	e7d5      	b.n	8005c4e <__d2b+0x2e>
 8005ca2:	6161      	str	r1, [r4, #20]
 8005ca4:	e7e5      	b.n	8005c72 <__d2b+0x52>
 8005ca6:	a801      	add	r0, sp, #4
 8005ca8:	f7ff fd5a 	bl	8005760 <__lo0bits>
 8005cac:	9b01      	ldr	r3, [sp, #4]
 8005cae:	6163      	str	r3, [r4, #20]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	6122      	str	r2, [r4, #16]
 8005cb4:	3020      	adds	r0, #32
 8005cb6:	e7e3      	b.n	8005c80 <__d2b+0x60>
 8005cb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cc0:	f8c9 0000 	str.w	r0, [r9]
 8005cc4:	6918      	ldr	r0, [r3, #16]
 8005cc6:	f7ff fd2b 	bl	8005720 <__hi0bits>
 8005cca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005cce:	e7df      	b.n	8005c90 <__d2b+0x70>
 8005cd0:	08006e53 	.word	0x08006e53
 8005cd4:	08006e64 	.word	0x08006e64

08005cd8 <_calloc_r>:
 8005cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cda:	fba1 2402 	umull	r2, r4, r1, r2
 8005cde:	b94c      	cbnz	r4, 8005cf4 <_calloc_r+0x1c>
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	9201      	str	r2, [sp, #4]
 8005ce4:	f000 f87a 	bl	8005ddc <_malloc_r>
 8005ce8:	9a01      	ldr	r2, [sp, #4]
 8005cea:	4605      	mov	r5, r0
 8005cec:	b930      	cbnz	r0, 8005cfc <_calloc_r+0x24>
 8005cee:	4628      	mov	r0, r5
 8005cf0:	b003      	add	sp, #12
 8005cf2:	bd30      	pop	{r4, r5, pc}
 8005cf4:	220c      	movs	r2, #12
 8005cf6:	6002      	str	r2, [r0, #0]
 8005cf8:	2500      	movs	r5, #0
 8005cfa:	e7f8      	b.n	8005cee <_calloc_r+0x16>
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	f7fe f907 	bl	8003f10 <memset>
 8005d02:	e7f4      	b.n	8005cee <_calloc_r+0x16>

08005d04 <_free_r>:
 8005d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d06:	2900      	cmp	r1, #0
 8005d08:	d044      	beq.n	8005d94 <_free_r+0x90>
 8005d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d0e:	9001      	str	r0, [sp, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f1a1 0404 	sub.w	r4, r1, #4
 8005d16:	bfb8      	it	lt
 8005d18:	18e4      	addlt	r4, r4, r3
 8005d1a:	f000 fa9b 	bl	8006254 <__malloc_lock>
 8005d1e:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <_free_r+0x94>)
 8005d20:	9801      	ldr	r0, [sp, #4]
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	b933      	cbnz	r3, 8005d34 <_free_r+0x30>
 8005d26:	6063      	str	r3, [r4, #4]
 8005d28:	6014      	str	r4, [r2, #0]
 8005d2a:	b003      	add	sp, #12
 8005d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d30:	f000 ba96 	b.w	8006260 <__malloc_unlock>
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d908      	bls.n	8005d4a <_free_r+0x46>
 8005d38:	6825      	ldr	r5, [r4, #0]
 8005d3a:	1961      	adds	r1, r4, r5
 8005d3c:	428b      	cmp	r3, r1
 8005d3e:	bf01      	itttt	eq
 8005d40:	6819      	ldreq	r1, [r3, #0]
 8005d42:	685b      	ldreq	r3, [r3, #4]
 8005d44:	1949      	addeq	r1, r1, r5
 8005d46:	6021      	streq	r1, [r4, #0]
 8005d48:	e7ed      	b.n	8005d26 <_free_r+0x22>
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	b10b      	cbz	r3, 8005d54 <_free_r+0x50>
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d9fa      	bls.n	8005d4a <_free_r+0x46>
 8005d54:	6811      	ldr	r1, [r2, #0]
 8005d56:	1855      	adds	r5, r2, r1
 8005d58:	42a5      	cmp	r5, r4
 8005d5a:	d10b      	bne.n	8005d74 <_free_r+0x70>
 8005d5c:	6824      	ldr	r4, [r4, #0]
 8005d5e:	4421      	add	r1, r4
 8005d60:	1854      	adds	r4, r2, r1
 8005d62:	42a3      	cmp	r3, r4
 8005d64:	6011      	str	r1, [r2, #0]
 8005d66:	d1e0      	bne.n	8005d2a <_free_r+0x26>
 8005d68:	681c      	ldr	r4, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	6053      	str	r3, [r2, #4]
 8005d6e:	4421      	add	r1, r4
 8005d70:	6011      	str	r1, [r2, #0]
 8005d72:	e7da      	b.n	8005d2a <_free_r+0x26>
 8005d74:	d902      	bls.n	8005d7c <_free_r+0x78>
 8005d76:	230c      	movs	r3, #12
 8005d78:	6003      	str	r3, [r0, #0]
 8005d7a:	e7d6      	b.n	8005d2a <_free_r+0x26>
 8005d7c:	6825      	ldr	r5, [r4, #0]
 8005d7e:	1961      	adds	r1, r4, r5
 8005d80:	428b      	cmp	r3, r1
 8005d82:	bf04      	itt	eq
 8005d84:	6819      	ldreq	r1, [r3, #0]
 8005d86:	685b      	ldreq	r3, [r3, #4]
 8005d88:	6063      	str	r3, [r4, #4]
 8005d8a:	bf04      	itt	eq
 8005d8c:	1949      	addeq	r1, r1, r5
 8005d8e:	6021      	streq	r1, [r4, #0]
 8005d90:	6054      	str	r4, [r2, #4]
 8005d92:	e7ca      	b.n	8005d2a <_free_r+0x26>
 8005d94:	b003      	add	sp, #12
 8005d96:	bd30      	pop	{r4, r5, pc}
 8005d98:	20000498 	.word	0x20000498

08005d9c <sbrk_aligned>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4e0e      	ldr	r6, [pc, #56]	; (8005dd8 <sbrk_aligned+0x3c>)
 8005da0:	460c      	mov	r4, r1
 8005da2:	6831      	ldr	r1, [r6, #0]
 8005da4:	4605      	mov	r5, r0
 8005da6:	b911      	cbnz	r1, 8005dae <sbrk_aligned+0x12>
 8005da8:	f000 f9e8 	bl	800617c <_sbrk_r>
 8005dac:	6030      	str	r0, [r6, #0]
 8005dae:	4621      	mov	r1, r4
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 f9e3 	bl	800617c <_sbrk_r>
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	d00a      	beq.n	8005dd0 <sbrk_aligned+0x34>
 8005dba:	1cc4      	adds	r4, r0, #3
 8005dbc:	f024 0403 	bic.w	r4, r4, #3
 8005dc0:	42a0      	cmp	r0, r4
 8005dc2:	d007      	beq.n	8005dd4 <sbrk_aligned+0x38>
 8005dc4:	1a21      	subs	r1, r4, r0
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f000 f9d8 	bl	800617c <_sbrk_r>
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d101      	bne.n	8005dd4 <sbrk_aligned+0x38>
 8005dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	2000049c 	.word	0x2000049c

08005ddc <_malloc_r>:
 8005ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de0:	1ccd      	adds	r5, r1, #3
 8005de2:	f025 0503 	bic.w	r5, r5, #3
 8005de6:	3508      	adds	r5, #8
 8005de8:	2d0c      	cmp	r5, #12
 8005dea:	bf38      	it	cc
 8005dec:	250c      	movcc	r5, #12
 8005dee:	2d00      	cmp	r5, #0
 8005df0:	4607      	mov	r7, r0
 8005df2:	db01      	blt.n	8005df8 <_malloc_r+0x1c>
 8005df4:	42a9      	cmp	r1, r5
 8005df6:	d905      	bls.n	8005e04 <_malloc_r+0x28>
 8005df8:	230c      	movs	r3, #12
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	2600      	movs	r6, #0
 8005dfe:	4630      	mov	r0, r6
 8005e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e04:	4e2e      	ldr	r6, [pc, #184]	; (8005ec0 <_malloc_r+0xe4>)
 8005e06:	f000 fa25 	bl	8006254 <__malloc_lock>
 8005e0a:	6833      	ldr	r3, [r6, #0]
 8005e0c:	461c      	mov	r4, r3
 8005e0e:	bb34      	cbnz	r4, 8005e5e <_malloc_r+0x82>
 8005e10:	4629      	mov	r1, r5
 8005e12:	4638      	mov	r0, r7
 8005e14:	f7ff ffc2 	bl	8005d9c <sbrk_aligned>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	d14d      	bne.n	8005eba <_malloc_r+0xde>
 8005e1e:	6834      	ldr	r4, [r6, #0]
 8005e20:	4626      	mov	r6, r4
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	d140      	bne.n	8005ea8 <_malloc_r+0xcc>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	eb04 0803 	add.w	r8, r4, r3
 8005e30:	f000 f9a4 	bl	800617c <_sbrk_r>
 8005e34:	4580      	cmp	r8, r0
 8005e36:	d13a      	bne.n	8005eae <_malloc_r+0xd2>
 8005e38:	6821      	ldr	r1, [r4, #0]
 8005e3a:	3503      	adds	r5, #3
 8005e3c:	1a6d      	subs	r5, r5, r1
 8005e3e:	f025 0503 	bic.w	r5, r5, #3
 8005e42:	3508      	adds	r5, #8
 8005e44:	2d0c      	cmp	r5, #12
 8005e46:	bf38      	it	cc
 8005e48:	250c      	movcc	r5, #12
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	f7ff ffa5 	bl	8005d9c <sbrk_aligned>
 8005e52:	3001      	adds	r0, #1
 8005e54:	d02b      	beq.n	8005eae <_malloc_r+0xd2>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	442b      	add	r3, r5
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	e00e      	b.n	8005e7c <_malloc_r+0xa0>
 8005e5e:	6822      	ldr	r2, [r4, #0]
 8005e60:	1b52      	subs	r2, r2, r5
 8005e62:	d41e      	bmi.n	8005ea2 <_malloc_r+0xc6>
 8005e64:	2a0b      	cmp	r2, #11
 8005e66:	d916      	bls.n	8005e96 <_malloc_r+0xba>
 8005e68:	1961      	adds	r1, r4, r5
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	6025      	str	r5, [r4, #0]
 8005e6e:	bf18      	it	ne
 8005e70:	6059      	strne	r1, [r3, #4]
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	bf08      	it	eq
 8005e76:	6031      	streq	r1, [r6, #0]
 8005e78:	5162      	str	r2, [r4, r5]
 8005e7a:	604b      	str	r3, [r1, #4]
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	f104 060b 	add.w	r6, r4, #11
 8005e82:	f000 f9ed 	bl	8006260 <__malloc_unlock>
 8005e86:	f026 0607 	bic.w	r6, r6, #7
 8005e8a:	1d23      	adds	r3, r4, #4
 8005e8c:	1af2      	subs	r2, r6, r3
 8005e8e:	d0b6      	beq.n	8005dfe <_malloc_r+0x22>
 8005e90:	1b9b      	subs	r3, r3, r6
 8005e92:	50a3      	str	r3, [r4, r2]
 8005e94:	e7b3      	b.n	8005dfe <_malloc_r+0x22>
 8005e96:	6862      	ldr	r2, [r4, #4]
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	bf0c      	ite	eq
 8005e9c:	6032      	streq	r2, [r6, #0]
 8005e9e:	605a      	strne	r2, [r3, #4]
 8005ea0:	e7ec      	b.n	8005e7c <_malloc_r+0xa0>
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	6864      	ldr	r4, [r4, #4]
 8005ea6:	e7b2      	b.n	8005e0e <_malloc_r+0x32>
 8005ea8:	4634      	mov	r4, r6
 8005eaa:	6876      	ldr	r6, [r6, #4]
 8005eac:	e7b9      	b.n	8005e22 <_malloc_r+0x46>
 8005eae:	230c      	movs	r3, #12
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	f000 f9d4 	bl	8006260 <__malloc_unlock>
 8005eb8:	e7a1      	b.n	8005dfe <_malloc_r+0x22>
 8005eba:	6025      	str	r5, [r4, #0]
 8005ebc:	e7de      	b.n	8005e7c <_malloc_r+0xa0>
 8005ebe:	bf00      	nop
 8005ec0:	20000498 	.word	0x20000498

08005ec4 <__ssputs_r>:
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	688e      	ldr	r6, [r1, #8]
 8005eca:	429e      	cmp	r6, r3
 8005ecc:	4682      	mov	sl, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	4690      	mov	r8, r2
 8005ed2:	461f      	mov	r7, r3
 8005ed4:	d838      	bhi.n	8005f48 <__ssputs_r+0x84>
 8005ed6:	898a      	ldrh	r2, [r1, #12]
 8005ed8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005edc:	d032      	beq.n	8005f44 <__ssputs_r+0x80>
 8005ede:	6825      	ldr	r5, [r4, #0]
 8005ee0:	6909      	ldr	r1, [r1, #16]
 8005ee2:	eba5 0901 	sub.w	r9, r5, r1
 8005ee6:	6965      	ldr	r5, [r4, #20]
 8005ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	444b      	add	r3, r9
 8005ef4:	106d      	asrs	r5, r5, #1
 8005ef6:	429d      	cmp	r5, r3
 8005ef8:	bf38      	it	cc
 8005efa:	461d      	movcc	r5, r3
 8005efc:	0553      	lsls	r3, r2, #21
 8005efe:	d531      	bpl.n	8005f64 <__ssputs_r+0xa0>
 8005f00:	4629      	mov	r1, r5
 8005f02:	f7ff ff6b 	bl	8005ddc <_malloc_r>
 8005f06:	4606      	mov	r6, r0
 8005f08:	b950      	cbnz	r0, 8005f20 <__ssputs_r+0x5c>
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	f8ca 3000 	str.w	r3, [sl]
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f16:	81a3      	strh	r3, [r4, #12]
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f20:	6921      	ldr	r1, [r4, #16]
 8005f22:	464a      	mov	r2, r9
 8005f24:	f7ff fb46 	bl	80055b4 <memcpy>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	6126      	str	r6, [r4, #16]
 8005f36:	6165      	str	r5, [r4, #20]
 8005f38:	444e      	add	r6, r9
 8005f3a:	eba5 0509 	sub.w	r5, r5, r9
 8005f3e:	6026      	str	r6, [r4, #0]
 8005f40:	60a5      	str	r5, [r4, #8]
 8005f42:	463e      	mov	r6, r7
 8005f44:	42be      	cmp	r6, r7
 8005f46:	d900      	bls.n	8005f4a <__ssputs_r+0x86>
 8005f48:	463e      	mov	r6, r7
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4641      	mov	r1, r8
 8005f50:	f000 f966 	bl	8006220 <memmove>
 8005f54:	68a3      	ldr	r3, [r4, #8]
 8005f56:	1b9b      	subs	r3, r3, r6
 8005f58:	60a3      	str	r3, [r4, #8]
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	4433      	add	r3, r6
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	2000      	movs	r0, #0
 8005f62:	e7db      	b.n	8005f1c <__ssputs_r+0x58>
 8005f64:	462a      	mov	r2, r5
 8005f66:	f000 f981 	bl	800626c <_realloc_r>
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d1e1      	bne.n	8005f34 <__ssputs_r+0x70>
 8005f70:	6921      	ldr	r1, [r4, #16]
 8005f72:	4650      	mov	r0, sl
 8005f74:	f7ff fec6 	bl	8005d04 <_free_r>
 8005f78:	e7c7      	b.n	8005f0a <__ssputs_r+0x46>
	...

08005f7c <_svfiprintf_r>:
 8005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	4698      	mov	r8, r3
 8005f82:	898b      	ldrh	r3, [r1, #12]
 8005f84:	061b      	lsls	r3, r3, #24
 8005f86:	b09d      	sub	sp, #116	; 0x74
 8005f88:	4607      	mov	r7, r0
 8005f8a:	460d      	mov	r5, r1
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	d50e      	bpl.n	8005fae <_svfiprintf_r+0x32>
 8005f90:	690b      	ldr	r3, [r1, #16]
 8005f92:	b963      	cbnz	r3, 8005fae <_svfiprintf_r+0x32>
 8005f94:	2140      	movs	r1, #64	; 0x40
 8005f96:	f7ff ff21 	bl	8005ddc <_malloc_r>
 8005f9a:	6028      	str	r0, [r5, #0]
 8005f9c:	6128      	str	r0, [r5, #16]
 8005f9e:	b920      	cbnz	r0, 8005faa <_svfiprintf_r+0x2e>
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	e0d1      	b.n	800614e <_svfiprintf_r+0x1d2>
 8005faa:	2340      	movs	r3, #64	; 0x40
 8005fac:	616b      	str	r3, [r5, #20]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb2:	2320      	movs	r3, #32
 8005fb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fbc:	2330      	movs	r3, #48	; 0x30
 8005fbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006168 <_svfiprintf_r+0x1ec>
 8005fc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fc6:	f04f 0901 	mov.w	r9, #1
 8005fca:	4623      	mov	r3, r4
 8005fcc:	469a      	mov	sl, r3
 8005fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fd2:	b10a      	cbz	r2, 8005fd8 <_svfiprintf_r+0x5c>
 8005fd4:	2a25      	cmp	r2, #37	; 0x25
 8005fd6:	d1f9      	bne.n	8005fcc <_svfiprintf_r+0x50>
 8005fd8:	ebba 0b04 	subs.w	fp, sl, r4
 8005fdc:	d00b      	beq.n	8005ff6 <_svfiprintf_r+0x7a>
 8005fde:	465b      	mov	r3, fp
 8005fe0:	4622      	mov	r2, r4
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f7ff ff6d 	bl	8005ec4 <__ssputs_r>
 8005fea:	3001      	adds	r0, #1
 8005fec:	f000 80aa 	beq.w	8006144 <_svfiprintf_r+0x1c8>
 8005ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ff2:	445a      	add	r2, fp
 8005ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 80a2 	beq.w	8006144 <_svfiprintf_r+0x1c8>
 8006000:	2300      	movs	r3, #0
 8006002:	f04f 32ff 	mov.w	r2, #4294967295
 8006006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800600a:	f10a 0a01 	add.w	sl, sl, #1
 800600e:	9304      	str	r3, [sp, #16]
 8006010:	9307      	str	r3, [sp, #28]
 8006012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006016:	931a      	str	r3, [sp, #104]	; 0x68
 8006018:	4654      	mov	r4, sl
 800601a:	2205      	movs	r2, #5
 800601c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006020:	4851      	ldr	r0, [pc, #324]	; (8006168 <_svfiprintf_r+0x1ec>)
 8006022:	f7fa f8e5 	bl	80001f0 <memchr>
 8006026:	9a04      	ldr	r2, [sp, #16]
 8006028:	b9d8      	cbnz	r0, 8006062 <_svfiprintf_r+0xe6>
 800602a:	06d0      	lsls	r0, r2, #27
 800602c:	bf44      	itt	mi
 800602e:	2320      	movmi	r3, #32
 8006030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006034:	0711      	lsls	r1, r2, #28
 8006036:	bf44      	itt	mi
 8006038:	232b      	movmi	r3, #43	; 0x2b
 800603a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800603e:	f89a 3000 	ldrb.w	r3, [sl]
 8006042:	2b2a      	cmp	r3, #42	; 0x2a
 8006044:	d015      	beq.n	8006072 <_svfiprintf_r+0xf6>
 8006046:	9a07      	ldr	r2, [sp, #28]
 8006048:	4654      	mov	r4, sl
 800604a:	2000      	movs	r0, #0
 800604c:	f04f 0c0a 	mov.w	ip, #10
 8006050:	4621      	mov	r1, r4
 8006052:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006056:	3b30      	subs	r3, #48	; 0x30
 8006058:	2b09      	cmp	r3, #9
 800605a:	d94e      	bls.n	80060fa <_svfiprintf_r+0x17e>
 800605c:	b1b0      	cbz	r0, 800608c <_svfiprintf_r+0x110>
 800605e:	9207      	str	r2, [sp, #28]
 8006060:	e014      	b.n	800608c <_svfiprintf_r+0x110>
 8006062:	eba0 0308 	sub.w	r3, r0, r8
 8006066:	fa09 f303 	lsl.w	r3, r9, r3
 800606a:	4313      	orrs	r3, r2
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	46a2      	mov	sl, r4
 8006070:	e7d2      	b.n	8006018 <_svfiprintf_r+0x9c>
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	1d19      	adds	r1, r3, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	9103      	str	r1, [sp, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	bfbb      	ittet	lt
 800607e:	425b      	neglt	r3, r3
 8006080:	f042 0202 	orrlt.w	r2, r2, #2
 8006084:	9307      	strge	r3, [sp, #28]
 8006086:	9307      	strlt	r3, [sp, #28]
 8006088:	bfb8      	it	lt
 800608a:	9204      	strlt	r2, [sp, #16]
 800608c:	7823      	ldrb	r3, [r4, #0]
 800608e:	2b2e      	cmp	r3, #46	; 0x2e
 8006090:	d10c      	bne.n	80060ac <_svfiprintf_r+0x130>
 8006092:	7863      	ldrb	r3, [r4, #1]
 8006094:	2b2a      	cmp	r3, #42	; 0x2a
 8006096:	d135      	bne.n	8006104 <_svfiprintf_r+0x188>
 8006098:	9b03      	ldr	r3, [sp, #12]
 800609a:	1d1a      	adds	r2, r3, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	9203      	str	r2, [sp, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bfb8      	it	lt
 80060a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80060a8:	3402      	adds	r4, #2
 80060aa:	9305      	str	r3, [sp, #20]
 80060ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006178 <_svfiprintf_r+0x1fc>
 80060b0:	7821      	ldrb	r1, [r4, #0]
 80060b2:	2203      	movs	r2, #3
 80060b4:	4650      	mov	r0, sl
 80060b6:	f7fa f89b 	bl	80001f0 <memchr>
 80060ba:	b140      	cbz	r0, 80060ce <_svfiprintf_r+0x152>
 80060bc:	2340      	movs	r3, #64	; 0x40
 80060be:	eba0 000a 	sub.w	r0, r0, sl
 80060c2:	fa03 f000 	lsl.w	r0, r3, r0
 80060c6:	9b04      	ldr	r3, [sp, #16]
 80060c8:	4303      	orrs	r3, r0
 80060ca:	3401      	adds	r4, #1
 80060cc:	9304      	str	r3, [sp, #16]
 80060ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d2:	4826      	ldr	r0, [pc, #152]	; (800616c <_svfiprintf_r+0x1f0>)
 80060d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060d8:	2206      	movs	r2, #6
 80060da:	f7fa f889 	bl	80001f0 <memchr>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d038      	beq.n	8006154 <_svfiprintf_r+0x1d8>
 80060e2:	4b23      	ldr	r3, [pc, #140]	; (8006170 <_svfiprintf_r+0x1f4>)
 80060e4:	bb1b      	cbnz	r3, 800612e <_svfiprintf_r+0x1b2>
 80060e6:	9b03      	ldr	r3, [sp, #12]
 80060e8:	3307      	adds	r3, #7
 80060ea:	f023 0307 	bic.w	r3, r3, #7
 80060ee:	3308      	adds	r3, #8
 80060f0:	9303      	str	r3, [sp, #12]
 80060f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f4:	4433      	add	r3, r6
 80060f6:	9309      	str	r3, [sp, #36]	; 0x24
 80060f8:	e767      	b.n	8005fca <_svfiprintf_r+0x4e>
 80060fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80060fe:	460c      	mov	r4, r1
 8006100:	2001      	movs	r0, #1
 8006102:	e7a5      	b.n	8006050 <_svfiprintf_r+0xd4>
 8006104:	2300      	movs	r3, #0
 8006106:	3401      	adds	r4, #1
 8006108:	9305      	str	r3, [sp, #20]
 800610a:	4619      	mov	r1, r3
 800610c:	f04f 0c0a 	mov.w	ip, #10
 8006110:	4620      	mov	r0, r4
 8006112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006116:	3a30      	subs	r2, #48	; 0x30
 8006118:	2a09      	cmp	r2, #9
 800611a:	d903      	bls.n	8006124 <_svfiprintf_r+0x1a8>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0c5      	beq.n	80060ac <_svfiprintf_r+0x130>
 8006120:	9105      	str	r1, [sp, #20]
 8006122:	e7c3      	b.n	80060ac <_svfiprintf_r+0x130>
 8006124:	fb0c 2101 	mla	r1, ip, r1, r2
 8006128:	4604      	mov	r4, r0
 800612a:	2301      	movs	r3, #1
 800612c:	e7f0      	b.n	8006110 <_svfiprintf_r+0x194>
 800612e:	ab03      	add	r3, sp, #12
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	462a      	mov	r2, r5
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <_svfiprintf_r+0x1f8>)
 8006136:	a904      	add	r1, sp, #16
 8006138:	4638      	mov	r0, r7
 800613a:	f7fd ff91 	bl	8004060 <_printf_float>
 800613e:	1c42      	adds	r2, r0, #1
 8006140:	4606      	mov	r6, r0
 8006142:	d1d6      	bne.n	80060f2 <_svfiprintf_r+0x176>
 8006144:	89ab      	ldrh	r3, [r5, #12]
 8006146:	065b      	lsls	r3, r3, #25
 8006148:	f53f af2c 	bmi.w	8005fa4 <_svfiprintf_r+0x28>
 800614c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800614e:	b01d      	add	sp, #116	; 0x74
 8006150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006154:	ab03      	add	r3, sp, #12
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	462a      	mov	r2, r5
 800615a:	4b06      	ldr	r3, [pc, #24]	; (8006174 <_svfiprintf_r+0x1f8>)
 800615c:	a904      	add	r1, sp, #16
 800615e:	4638      	mov	r0, r7
 8006160:	f7fe fa22 	bl	80045a8 <_printf_i>
 8006164:	e7eb      	b.n	800613e <_svfiprintf_r+0x1c2>
 8006166:	bf00      	nop
 8006168:	08006fbc 	.word	0x08006fbc
 800616c:	08006fc6 	.word	0x08006fc6
 8006170:	08004061 	.word	0x08004061
 8006174:	08005ec5 	.word	0x08005ec5
 8006178:	08006fc2 	.word	0x08006fc2

0800617c <_sbrk_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4d06      	ldr	r5, [pc, #24]	; (8006198 <_sbrk_r+0x1c>)
 8006180:	2300      	movs	r3, #0
 8006182:	4604      	mov	r4, r0
 8006184:	4608      	mov	r0, r1
 8006186:	602b      	str	r3, [r5, #0]
 8006188:	f7fb fa18 	bl	80015bc <_sbrk>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_sbrk_r+0x1a>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_sbrk_r+0x1a>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	200004a0 	.word	0x200004a0

0800619c <__assert_func>:
 800619c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800619e:	4614      	mov	r4, r2
 80061a0:	461a      	mov	r2, r3
 80061a2:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <__assert_func+0x2c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4605      	mov	r5, r0
 80061a8:	68d8      	ldr	r0, [r3, #12]
 80061aa:	b14c      	cbz	r4, 80061c0 <__assert_func+0x24>
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <__assert_func+0x30>)
 80061ae:	9100      	str	r1, [sp, #0]
 80061b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061b4:	4906      	ldr	r1, [pc, #24]	; (80061d0 <__assert_func+0x34>)
 80061b6:	462b      	mov	r3, r5
 80061b8:	f000 f80e 	bl	80061d8 <fiprintf>
 80061bc:	f000 faac 	bl	8006718 <abort>
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <__assert_func+0x38>)
 80061c2:	461c      	mov	r4, r3
 80061c4:	e7f3      	b.n	80061ae <__assert_func+0x12>
 80061c6:	bf00      	nop
 80061c8:	2000004c 	.word	0x2000004c
 80061cc:	08006fcd 	.word	0x08006fcd
 80061d0:	08006fda 	.word	0x08006fda
 80061d4:	08007008 	.word	0x08007008

080061d8 <fiprintf>:
 80061d8:	b40e      	push	{r1, r2, r3}
 80061da:	b503      	push	{r0, r1, lr}
 80061dc:	4601      	mov	r1, r0
 80061de:	ab03      	add	r3, sp, #12
 80061e0:	4805      	ldr	r0, [pc, #20]	; (80061f8 <fiprintf+0x20>)
 80061e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061e6:	6800      	ldr	r0, [r0, #0]
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	f000 f897 	bl	800631c <_vfiprintf_r>
 80061ee:	b002      	add	sp, #8
 80061f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f4:	b003      	add	sp, #12
 80061f6:	4770      	bx	lr
 80061f8:	2000004c 	.word	0x2000004c

080061fc <__ascii_mbtowc>:
 80061fc:	b082      	sub	sp, #8
 80061fe:	b901      	cbnz	r1, 8006202 <__ascii_mbtowc+0x6>
 8006200:	a901      	add	r1, sp, #4
 8006202:	b142      	cbz	r2, 8006216 <__ascii_mbtowc+0x1a>
 8006204:	b14b      	cbz	r3, 800621a <__ascii_mbtowc+0x1e>
 8006206:	7813      	ldrb	r3, [r2, #0]
 8006208:	600b      	str	r3, [r1, #0]
 800620a:	7812      	ldrb	r2, [r2, #0]
 800620c:	1e10      	subs	r0, r2, #0
 800620e:	bf18      	it	ne
 8006210:	2001      	movne	r0, #1
 8006212:	b002      	add	sp, #8
 8006214:	4770      	bx	lr
 8006216:	4610      	mov	r0, r2
 8006218:	e7fb      	b.n	8006212 <__ascii_mbtowc+0x16>
 800621a:	f06f 0001 	mvn.w	r0, #1
 800621e:	e7f8      	b.n	8006212 <__ascii_mbtowc+0x16>

08006220 <memmove>:
 8006220:	4288      	cmp	r0, r1
 8006222:	b510      	push	{r4, lr}
 8006224:	eb01 0402 	add.w	r4, r1, r2
 8006228:	d902      	bls.n	8006230 <memmove+0x10>
 800622a:	4284      	cmp	r4, r0
 800622c:	4623      	mov	r3, r4
 800622e:	d807      	bhi.n	8006240 <memmove+0x20>
 8006230:	1e43      	subs	r3, r0, #1
 8006232:	42a1      	cmp	r1, r4
 8006234:	d008      	beq.n	8006248 <memmove+0x28>
 8006236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800623a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800623e:	e7f8      	b.n	8006232 <memmove+0x12>
 8006240:	4402      	add	r2, r0
 8006242:	4601      	mov	r1, r0
 8006244:	428a      	cmp	r2, r1
 8006246:	d100      	bne.n	800624a <memmove+0x2a>
 8006248:	bd10      	pop	{r4, pc}
 800624a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800624e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006252:	e7f7      	b.n	8006244 <memmove+0x24>

08006254 <__malloc_lock>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__malloc_lock+0x8>)
 8006256:	f000 bc1f 	b.w	8006a98 <__retarget_lock_acquire_recursive>
 800625a:	bf00      	nop
 800625c:	200004a4 	.word	0x200004a4

08006260 <__malloc_unlock>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__malloc_unlock+0x8>)
 8006262:	f000 bc1a 	b.w	8006a9a <__retarget_lock_release_recursive>
 8006266:	bf00      	nop
 8006268:	200004a4 	.word	0x200004a4

0800626c <_realloc_r>:
 800626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006270:	4680      	mov	r8, r0
 8006272:	4614      	mov	r4, r2
 8006274:	460e      	mov	r6, r1
 8006276:	b921      	cbnz	r1, 8006282 <_realloc_r+0x16>
 8006278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800627c:	4611      	mov	r1, r2
 800627e:	f7ff bdad 	b.w	8005ddc <_malloc_r>
 8006282:	b92a      	cbnz	r2, 8006290 <_realloc_r+0x24>
 8006284:	f7ff fd3e 	bl	8005d04 <_free_r>
 8006288:	4625      	mov	r5, r4
 800628a:	4628      	mov	r0, r5
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006290:	f000 fc6a 	bl	8006b68 <_malloc_usable_size_r>
 8006294:	4284      	cmp	r4, r0
 8006296:	4607      	mov	r7, r0
 8006298:	d802      	bhi.n	80062a0 <_realloc_r+0x34>
 800629a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800629e:	d812      	bhi.n	80062c6 <_realloc_r+0x5a>
 80062a0:	4621      	mov	r1, r4
 80062a2:	4640      	mov	r0, r8
 80062a4:	f7ff fd9a 	bl	8005ddc <_malloc_r>
 80062a8:	4605      	mov	r5, r0
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0ed      	beq.n	800628a <_realloc_r+0x1e>
 80062ae:	42bc      	cmp	r4, r7
 80062b0:	4622      	mov	r2, r4
 80062b2:	4631      	mov	r1, r6
 80062b4:	bf28      	it	cs
 80062b6:	463a      	movcs	r2, r7
 80062b8:	f7ff f97c 	bl	80055b4 <memcpy>
 80062bc:	4631      	mov	r1, r6
 80062be:	4640      	mov	r0, r8
 80062c0:	f7ff fd20 	bl	8005d04 <_free_r>
 80062c4:	e7e1      	b.n	800628a <_realloc_r+0x1e>
 80062c6:	4635      	mov	r5, r6
 80062c8:	e7df      	b.n	800628a <_realloc_r+0x1e>

080062ca <__sfputc_r>:
 80062ca:	6893      	ldr	r3, [r2, #8]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	b410      	push	{r4}
 80062d2:	6093      	str	r3, [r2, #8]
 80062d4:	da08      	bge.n	80062e8 <__sfputc_r+0x1e>
 80062d6:	6994      	ldr	r4, [r2, #24]
 80062d8:	42a3      	cmp	r3, r4
 80062da:	db01      	blt.n	80062e0 <__sfputc_r+0x16>
 80062dc:	290a      	cmp	r1, #10
 80062de:	d103      	bne.n	80062e8 <__sfputc_r+0x1e>
 80062e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062e4:	f000 b94a 	b.w	800657c <__swbuf_r>
 80062e8:	6813      	ldr	r3, [r2, #0]
 80062ea:	1c58      	adds	r0, r3, #1
 80062ec:	6010      	str	r0, [r2, #0]
 80062ee:	7019      	strb	r1, [r3, #0]
 80062f0:	4608      	mov	r0, r1
 80062f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <__sfputs_r>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	4606      	mov	r6, r0
 80062fc:	460f      	mov	r7, r1
 80062fe:	4614      	mov	r4, r2
 8006300:	18d5      	adds	r5, r2, r3
 8006302:	42ac      	cmp	r4, r5
 8006304:	d101      	bne.n	800630a <__sfputs_r+0x12>
 8006306:	2000      	movs	r0, #0
 8006308:	e007      	b.n	800631a <__sfputs_r+0x22>
 800630a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630e:	463a      	mov	r2, r7
 8006310:	4630      	mov	r0, r6
 8006312:	f7ff ffda 	bl	80062ca <__sfputc_r>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	d1f3      	bne.n	8006302 <__sfputs_r+0xa>
 800631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800631c <_vfiprintf_r>:
 800631c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006320:	460d      	mov	r5, r1
 8006322:	b09d      	sub	sp, #116	; 0x74
 8006324:	4614      	mov	r4, r2
 8006326:	4698      	mov	r8, r3
 8006328:	4606      	mov	r6, r0
 800632a:	b118      	cbz	r0, 8006334 <_vfiprintf_r+0x18>
 800632c:	6983      	ldr	r3, [r0, #24]
 800632e:	b90b      	cbnz	r3, 8006334 <_vfiprintf_r+0x18>
 8006330:	f000 fb14 	bl	800695c <__sinit>
 8006334:	4b89      	ldr	r3, [pc, #548]	; (800655c <_vfiprintf_r+0x240>)
 8006336:	429d      	cmp	r5, r3
 8006338:	d11b      	bne.n	8006372 <_vfiprintf_r+0x56>
 800633a:	6875      	ldr	r5, [r6, #4]
 800633c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800633e:	07d9      	lsls	r1, r3, #31
 8006340:	d405      	bmi.n	800634e <_vfiprintf_r+0x32>
 8006342:	89ab      	ldrh	r3, [r5, #12]
 8006344:	059a      	lsls	r2, r3, #22
 8006346:	d402      	bmi.n	800634e <_vfiprintf_r+0x32>
 8006348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800634a:	f000 fba5 	bl	8006a98 <__retarget_lock_acquire_recursive>
 800634e:	89ab      	ldrh	r3, [r5, #12]
 8006350:	071b      	lsls	r3, r3, #28
 8006352:	d501      	bpl.n	8006358 <_vfiprintf_r+0x3c>
 8006354:	692b      	ldr	r3, [r5, #16]
 8006356:	b9eb      	cbnz	r3, 8006394 <_vfiprintf_r+0x78>
 8006358:	4629      	mov	r1, r5
 800635a:	4630      	mov	r0, r6
 800635c:	f000 f96e 	bl	800663c <__swsetup_r>
 8006360:	b1c0      	cbz	r0, 8006394 <_vfiprintf_r+0x78>
 8006362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006364:	07dc      	lsls	r4, r3, #31
 8006366:	d50e      	bpl.n	8006386 <_vfiprintf_r+0x6a>
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	b01d      	add	sp, #116	; 0x74
 800636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006372:	4b7b      	ldr	r3, [pc, #492]	; (8006560 <_vfiprintf_r+0x244>)
 8006374:	429d      	cmp	r5, r3
 8006376:	d101      	bne.n	800637c <_vfiprintf_r+0x60>
 8006378:	68b5      	ldr	r5, [r6, #8]
 800637a:	e7df      	b.n	800633c <_vfiprintf_r+0x20>
 800637c:	4b79      	ldr	r3, [pc, #484]	; (8006564 <_vfiprintf_r+0x248>)
 800637e:	429d      	cmp	r5, r3
 8006380:	bf08      	it	eq
 8006382:	68f5      	ldreq	r5, [r6, #12]
 8006384:	e7da      	b.n	800633c <_vfiprintf_r+0x20>
 8006386:	89ab      	ldrh	r3, [r5, #12]
 8006388:	0598      	lsls	r0, r3, #22
 800638a:	d4ed      	bmi.n	8006368 <_vfiprintf_r+0x4c>
 800638c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800638e:	f000 fb84 	bl	8006a9a <__retarget_lock_release_recursive>
 8006392:	e7e9      	b.n	8006368 <_vfiprintf_r+0x4c>
 8006394:	2300      	movs	r3, #0
 8006396:	9309      	str	r3, [sp, #36]	; 0x24
 8006398:	2320      	movs	r3, #32
 800639a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800639e:	f8cd 800c 	str.w	r8, [sp, #12]
 80063a2:	2330      	movs	r3, #48	; 0x30
 80063a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006568 <_vfiprintf_r+0x24c>
 80063a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063ac:	f04f 0901 	mov.w	r9, #1
 80063b0:	4623      	mov	r3, r4
 80063b2:	469a      	mov	sl, r3
 80063b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063b8:	b10a      	cbz	r2, 80063be <_vfiprintf_r+0xa2>
 80063ba:	2a25      	cmp	r2, #37	; 0x25
 80063bc:	d1f9      	bne.n	80063b2 <_vfiprintf_r+0x96>
 80063be:	ebba 0b04 	subs.w	fp, sl, r4
 80063c2:	d00b      	beq.n	80063dc <_vfiprintf_r+0xc0>
 80063c4:	465b      	mov	r3, fp
 80063c6:	4622      	mov	r2, r4
 80063c8:	4629      	mov	r1, r5
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7ff ff94 	bl	80062f8 <__sfputs_r>
 80063d0:	3001      	adds	r0, #1
 80063d2:	f000 80aa 	beq.w	800652a <_vfiprintf_r+0x20e>
 80063d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d8:	445a      	add	r2, fp
 80063da:	9209      	str	r2, [sp, #36]	; 0x24
 80063dc:	f89a 3000 	ldrb.w	r3, [sl]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80a2 	beq.w	800652a <_vfiprintf_r+0x20e>
 80063e6:	2300      	movs	r3, #0
 80063e8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063f0:	f10a 0a01 	add.w	sl, sl, #1
 80063f4:	9304      	str	r3, [sp, #16]
 80063f6:	9307      	str	r3, [sp, #28]
 80063f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063fc:	931a      	str	r3, [sp, #104]	; 0x68
 80063fe:	4654      	mov	r4, sl
 8006400:	2205      	movs	r2, #5
 8006402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006406:	4858      	ldr	r0, [pc, #352]	; (8006568 <_vfiprintf_r+0x24c>)
 8006408:	f7f9 fef2 	bl	80001f0 <memchr>
 800640c:	9a04      	ldr	r2, [sp, #16]
 800640e:	b9d8      	cbnz	r0, 8006448 <_vfiprintf_r+0x12c>
 8006410:	06d1      	lsls	r1, r2, #27
 8006412:	bf44      	itt	mi
 8006414:	2320      	movmi	r3, #32
 8006416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800641a:	0713      	lsls	r3, r2, #28
 800641c:	bf44      	itt	mi
 800641e:	232b      	movmi	r3, #43	; 0x2b
 8006420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006424:	f89a 3000 	ldrb.w	r3, [sl]
 8006428:	2b2a      	cmp	r3, #42	; 0x2a
 800642a:	d015      	beq.n	8006458 <_vfiprintf_r+0x13c>
 800642c:	9a07      	ldr	r2, [sp, #28]
 800642e:	4654      	mov	r4, sl
 8006430:	2000      	movs	r0, #0
 8006432:	f04f 0c0a 	mov.w	ip, #10
 8006436:	4621      	mov	r1, r4
 8006438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800643c:	3b30      	subs	r3, #48	; 0x30
 800643e:	2b09      	cmp	r3, #9
 8006440:	d94e      	bls.n	80064e0 <_vfiprintf_r+0x1c4>
 8006442:	b1b0      	cbz	r0, 8006472 <_vfiprintf_r+0x156>
 8006444:	9207      	str	r2, [sp, #28]
 8006446:	e014      	b.n	8006472 <_vfiprintf_r+0x156>
 8006448:	eba0 0308 	sub.w	r3, r0, r8
 800644c:	fa09 f303 	lsl.w	r3, r9, r3
 8006450:	4313      	orrs	r3, r2
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	46a2      	mov	sl, r4
 8006456:	e7d2      	b.n	80063fe <_vfiprintf_r+0xe2>
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	1d19      	adds	r1, r3, #4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	9103      	str	r1, [sp, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	bfbb      	ittet	lt
 8006464:	425b      	neglt	r3, r3
 8006466:	f042 0202 	orrlt.w	r2, r2, #2
 800646a:	9307      	strge	r3, [sp, #28]
 800646c:	9307      	strlt	r3, [sp, #28]
 800646e:	bfb8      	it	lt
 8006470:	9204      	strlt	r2, [sp, #16]
 8006472:	7823      	ldrb	r3, [r4, #0]
 8006474:	2b2e      	cmp	r3, #46	; 0x2e
 8006476:	d10c      	bne.n	8006492 <_vfiprintf_r+0x176>
 8006478:	7863      	ldrb	r3, [r4, #1]
 800647a:	2b2a      	cmp	r3, #42	; 0x2a
 800647c:	d135      	bne.n	80064ea <_vfiprintf_r+0x1ce>
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	1d1a      	adds	r2, r3, #4
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	9203      	str	r2, [sp, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfb8      	it	lt
 800648a:	f04f 33ff 	movlt.w	r3, #4294967295
 800648e:	3402      	adds	r4, #2
 8006490:	9305      	str	r3, [sp, #20]
 8006492:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006578 <_vfiprintf_r+0x25c>
 8006496:	7821      	ldrb	r1, [r4, #0]
 8006498:	2203      	movs	r2, #3
 800649a:	4650      	mov	r0, sl
 800649c:	f7f9 fea8 	bl	80001f0 <memchr>
 80064a0:	b140      	cbz	r0, 80064b4 <_vfiprintf_r+0x198>
 80064a2:	2340      	movs	r3, #64	; 0x40
 80064a4:	eba0 000a 	sub.w	r0, r0, sl
 80064a8:	fa03 f000 	lsl.w	r0, r3, r0
 80064ac:	9b04      	ldr	r3, [sp, #16]
 80064ae:	4303      	orrs	r3, r0
 80064b0:	3401      	adds	r4, #1
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b8:	482c      	ldr	r0, [pc, #176]	; (800656c <_vfiprintf_r+0x250>)
 80064ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064be:	2206      	movs	r2, #6
 80064c0:	f7f9 fe96 	bl	80001f0 <memchr>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d03f      	beq.n	8006548 <_vfiprintf_r+0x22c>
 80064c8:	4b29      	ldr	r3, [pc, #164]	; (8006570 <_vfiprintf_r+0x254>)
 80064ca:	bb1b      	cbnz	r3, 8006514 <_vfiprintf_r+0x1f8>
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	3307      	adds	r3, #7
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	3308      	adds	r3, #8
 80064d6:	9303      	str	r3, [sp, #12]
 80064d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064da:	443b      	add	r3, r7
 80064dc:	9309      	str	r3, [sp, #36]	; 0x24
 80064de:	e767      	b.n	80063b0 <_vfiprintf_r+0x94>
 80064e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80064e4:	460c      	mov	r4, r1
 80064e6:	2001      	movs	r0, #1
 80064e8:	e7a5      	b.n	8006436 <_vfiprintf_r+0x11a>
 80064ea:	2300      	movs	r3, #0
 80064ec:	3401      	adds	r4, #1
 80064ee:	9305      	str	r3, [sp, #20]
 80064f0:	4619      	mov	r1, r3
 80064f2:	f04f 0c0a 	mov.w	ip, #10
 80064f6:	4620      	mov	r0, r4
 80064f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064fc:	3a30      	subs	r2, #48	; 0x30
 80064fe:	2a09      	cmp	r2, #9
 8006500:	d903      	bls.n	800650a <_vfiprintf_r+0x1ee>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0c5      	beq.n	8006492 <_vfiprintf_r+0x176>
 8006506:	9105      	str	r1, [sp, #20]
 8006508:	e7c3      	b.n	8006492 <_vfiprintf_r+0x176>
 800650a:	fb0c 2101 	mla	r1, ip, r1, r2
 800650e:	4604      	mov	r4, r0
 8006510:	2301      	movs	r3, #1
 8006512:	e7f0      	b.n	80064f6 <_vfiprintf_r+0x1da>
 8006514:	ab03      	add	r3, sp, #12
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	462a      	mov	r2, r5
 800651a:	4b16      	ldr	r3, [pc, #88]	; (8006574 <_vfiprintf_r+0x258>)
 800651c:	a904      	add	r1, sp, #16
 800651e:	4630      	mov	r0, r6
 8006520:	f7fd fd9e 	bl	8004060 <_printf_float>
 8006524:	4607      	mov	r7, r0
 8006526:	1c78      	adds	r0, r7, #1
 8006528:	d1d6      	bne.n	80064d8 <_vfiprintf_r+0x1bc>
 800652a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800652c:	07d9      	lsls	r1, r3, #31
 800652e:	d405      	bmi.n	800653c <_vfiprintf_r+0x220>
 8006530:	89ab      	ldrh	r3, [r5, #12]
 8006532:	059a      	lsls	r2, r3, #22
 8006534:	d402      	bmi.n	800653c <_vfiprintf_r+0x220>
 8006536:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006538:	f000 faaf 	bl	8006a9a <__retarget_lock_release_recursive>
 800653c:	89ab      	ldrh	r3, [r5, #12]
 800653e:	065b      	lsls	r3, r3, #25
 8006540:	f53f af12 	bmi.w	8006368 <_vfiprintf_r+0x4c>
 8006544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006546:	e711      	b.n	800636c <_vfiprintf_r+0x50>
 8006548:	ab03      	add	r3, sp, #12
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	462a      	mov	r2, r5
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <_vfiprintf_r+0x258>)
 8006550:	a904      	add	r1, sp, #16
 8006552:	4630      	mov	r0, r6
 8006554:	f7fe f828 	bl	80045a8 <_printf_i>
 8006558:	e7e4      	b.n	8006524 <_vfiprintf_r+0x208>
 800655a:	bf00      	nop
 800655c:	08007134 	.word	0x08007134
 8006560:	08007154 	.word	0x08007154
 8006564:	08007114 	.word	0x08007114
 8006568:	08006fbc 	.word	0x08006fbc
 800656c:	08006fc6 	.word	0x08006fc6
 8006570:	08004061 	.word	0x08004061
 8006574:	080062f9 	.word	0x080062f9
 8006578:	08006fc2 	.word	0x08006fc2

0800657c <__swbuf_r>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	460e      	mov	r6, r1
 8006580:	4614      	mov	r4, r2
 8006582:	4605      	mov	r5, r0
 8006584:	b118      	cbz	r0, 800658e <__swbuf_r+0x12>
 8006586:	6983      	ldr	r3, [r0, #24]
 8006588:	b90b      	cbnz	r3, 800658e <__swbuf_r+0x12>
 800658a:	f000 f9e7 	bl	800695c <__sinit>
 800658e:	4b21      	ldr	r3, [pc, #132]	; (8006614 <__swbuf_r+0x98>)
 8006590:	429c      	cmp	r4, r3
 8006592:	d12b      	bne.n	80065ec <__swbuf_r+0x70>
 8006594:	686c      	ldr	r4, [r5, #4]
 8006596:	69a3      	ldr	r3, [r4, #24]
 8006598:	60a3      	str	r3, [r4, #8]
 800659a:	89a3      	ldrh	r3, [r4, #12]
 800659c:	071a      	lsls	r2, r3, #28
 800659e:	d52f      	bpl.n	8006600 <__swbuf_r+0x84>
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	b36b      	cbz	r3, 8006600 <__swbuf_r+0x84>
 80065a4:	6923      	ldr	r3, [r4, #16]
 80065a6:	6820      	ldr	r0, [r4, #0]
 80065a8:	1ac0      	subs	r0, r0, r3
 80065aa:	6963      	ldr	r3, [r4, #20]
 80065ac:	b2f6      	uxtb	r6, r6
 80065ae:	4283      	cmp	r3, r0
 80065b0:	4637      	mov	r7, r6
 80065b2:	dc04      	bgt.n	80065be <__swbuf_r+0x42>
 80065b4:	4621      	mov	r1, r4
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 f93c 	bl	8006834 <_fflush_r>
 80065bc:	bb30      	cbnz	r0, 800660c <__swbuf_r+0x90>
 80065be:	68a3      	ldr	r3, [r4, #8]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	60a3      	str	r3, [r4, #8]
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	6022      	str	r2, [r4, #0]
 80065ca:	701e      	strb	r6, [r3, #0]
 80065cc:	6963      	ldr	r3, [r4, #20]
 80065ce:	3001      	adds	r0, #1
 80065d0:	4283      	cmp	r3, r0
 80065d2:	d004      	beq.n	80065de <__swbuf_r+0x62>
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	07db      	lsls	r3, r3, #31
 80065d8:	d506      	bpl.n	80065e8 <__swbuf_r+0x6c>
 80065da:	2e0a      	cmp	r6, #10
 80065dc:	d104      	bne.n	80065e8 <__swbuf_r+0x6c>
 80065de:	4621      	mov	r1, r4
 80065e0:	4628      	mov	r0, r5
 80065e2:	f000 f927 	bl	8006834 <_fflush_r>
 80065e6:	b988      	cbnz	r0, 800660c <__swbuf_r+0x90>
 80065e8:	4638      	mov	r0, r7
 80065ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <__swbuf_r+0x9c>)
 80065ee:	429c      	cmp	r4, r3
 80065f0:	d101      	bne.n	80065f6 <__swbuf_r+0x7a>
 80065f2:	68ac      	ldr	r4, [r5, #8]
 80065f4:	e7cf      	b.n	8006596 <__swbuf_r+0x1a>
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <__swbuf_r+0xa0>)
 80065f8:	429c      	cmp	r4, r3
 80065fa:	bf08      	it	eq
 80065fc:	68ec      	ldreq	r4, [r5, #12]
 80065fe:	e7ca      	b.n	8006596 <__swbuf_r+0x1a>
 8006600:	4621      	mov	r1, r4
 8006602:	4628      	mov	r0, r5
 8006604:	f000 f81a 	bl	800663c <__swsetup_r>
 8006608:	2800      	cmp	r0, #0
 800660a:	d0cb      	beq.n	80065a4 <__swbuf_r+0x28>
 800660c:	f04f 37ff 	mov.w	r7, #4294967295
 8006610:	e7ea      	b.n	80065e8 <__swbuf_r+0x6c>
 8006612:	bf00      	nop
 8006614:	08007134 	.word	0x08007134
 8006618:	08007154 	.word	0x08007154
 800661c:	08007114 	.word	0x08007114

08006620 <__ascii_wctomb>:
 8006620:	b149      	cbz	r1, 8006636 <__ascii_wctomb+0x16>
 8006622:	2aff      	cmp	r2, #255	; 0xff
 8006624:	bf85      	ittet	hi
 8006626:	238a      	movhi	r3, #138	; 0x8a
 8006628:	6003      	strhi	r3, [r0, #0]
 800662a:	700a      	strbls	r2, [r1, #0]
 800662c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006630:	bf98      	it	ls
 8006632:	2001      	movls	r0, #1
 8006634:	4770      	bx	lr
 8006636:	4608      	mov	r0, r1
 8006638:	4770      	bx	lr
	...

0800663c <__swsetup_r>:
 800663c:	4b32      	ldr	r3, [pc, #200]	; (8006708 <__swsetup_r+0xcc>)
 800663e:	b570      	push	{r4, r5, r6, lr}
 8006640:	681d      	ldr	r5, [r3, #0]
 8006642:	4606      	mov	r6, r0
 8006644:	460c      	mov	r4, r1
 8006646:	b125      	cbz	r5, 8006652 <__swsetup_r+0x16>
 8006648:	69ab      	ldr	r3, [r5, #24]
 800664a:	b913      	cbnz	r3, 8006652 <__swsetup_r+0x16>
 800664c:	4628      	mov	r0, r5
 800664e:	f000 f985 	bl	800695c <__sinit>
 8006652:	4b2e      	ldr	r3, [pc, #184]	; (800670c <__swsetup_r+0xd0>)
 8006654:	429c      	cmp	r4, r3
 8006656:	d10f      	bne.n	8006678 <__swsetup_r+0x3c>
 8006658:	686c      	ldr	r4, [r5, #4]
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006660:	0719      	lsls	r1, r3, #28
 8006662:	d42c      	bmi.n	80066be <__swsetup_r+0x82>
 8006664:	06dd      	lsls	r5, r3, #27
 8006666:	d411      	bmi.n	800668c <__swsetup_r+0x50>
 8006668:	2309      	movs	r3, #9
 800666a:	6033      	str	r3, [r6, #0]
 800666c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	f04f 30ff 	mov.w	r0, #4294967295
 8006676:	e03e      	b.n	80066f6 <__swsetup_r+0xba>
 8006678:	4b25      	ldr	r3, [pc, #148]	; (8006710 <__swsetup_r+0xd4>)
 800667a:	429c      	cmp	r4, r3
 800667c:	d101      	bne.n	8006682 <__swsetup_r+0x46>
 800667e:	68ac      	ldr	r4, [r5, #8]
 8006680:	e7eb      	b.n	800665a <__swsetup_r+0x1e>
 8006682:	4b24      	ldr	r3, [pc, #144]	; (8006714 <__swsetup_r+0xd8>)
 8006684:	429c      	cmp	r4, r3
 8006686:	bf08      	it	eq
 8006688:	68ec      	ldreq	r4, [r5, #12]
 800668a:	e7e6      	b.n	800665a <__swsetup_r+0x1e>
 800668c:	0758      	lsls	r0, r3, #29
 800668e:	d512      	bpl.n	80066b6 <__swsetup_r+0x7a>
 8006690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006692:	b141      	cbz	r1, 80066a6 <__swsetup_r+0x6a>
 8006694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006698:	4299      	cmp	r1, r3
 800669a:	d002      	beq.n	80066a2 <__swsetup_r+0x66>
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff fb31 	bl	8005d04 <_free_r>
 80066a2:	2300      	movs	r3, #0
 80066a4:	6363      	str	r3, [r4, #52]	; 0x34
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066ac:	81a3      	strh	r3, [r4, #12]
 80066ae:	2300      	movs	r3, #0
 80066b0:	6063      	str	r3, [r4, #4]
 80066b2:	6923      	ldr	r3, [r4, #16]
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f043 0308 	orr.w	r3, r3, #8
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	6923      	ldr	r3, [r4, #16]
 80066c0:	b94b      	cbnz	r3, 80066d6 <__swsetup_r+0x9a>
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066cc:	d003      	beq.n	80066d6 <__swsetup_r+0x9a>
 80066ce:	4621      	mov	r1, r4
 80066d0:	4630      	mov	r0, r6
 80066d2:	f000 fa09 	bl	8006ae8 <__smakebuf_r>
 80066d6:	89a0      	ldrh	r0, [r4, #12]
 80066d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066dc:	f010 0301 	ands.w	r3, r0, #1
 80066e0:	d00a      	beq.n	80066f8 <__swsetup_r+0xbc>
 80066e2:	2300      	movs	r3, #0
 80066e4:	60a3      	str	r3, [r4, #8]
 80066e6:	6963      	ldr	r3, [r4, #20]
 80066e8:	425b      	negs	r3, r3
 80066ea:	61a3      	str	r3, [r4, #24]
 80066ec:	6923      	ldr	r3, [r4, #16]
 80066ee:	b943      	cbnz	r3, 8006702 <__swsetup_r+0xc6>
 80066f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066f4:	d1ba      	bne.n	800666c <__swsetup_r+0x30>
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	0781      	lsls	r1, r0, #30
 80066fa:	bf58      	it	pl
 80066fc:	6963      	ldrpl	r3, [r4, #20]
 80066fe:	60a3      	str	r3, [r4, #8]
 8006700:	e7f4      	b.n	80066ec <__swsetup_r+0xb0>
 8006702:	2000      	movs	r0, #0
 8006704:	e7f7      	b.n	80066f6 <__swsetup_r+0xba>
 8006706:	bf00      	nop
 8006708:	2000004c 	.word	0x2000004c
 800670c:	08007134 	.word	0x08007134
 8006710:	08007154 	.word	0x08007154
 8006714:	08007114 	.word	0x08007114

08006718 <abort>:
 8006718:	b508      	push	{r3, lr}
 800671a:	2006      	movs	r0, #6
 800671c:	f000 fa54 	bl	8006bc8 <raise>
 8006720:	2001      	movs	r0, #1
 8006722:	f7fa fed3 	bl	80014cc <_exit>
	...

08006728 <__sflush_r>:
 8006728:	898a      	ldrh	r2, [r1, #12]
 800672a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800672e:	4605      	mov	r5, r0
 8006730:	0710      	lsls	r0, r2, #28
 8006732:	460c      	mov	r4, r1
 8006734:	d458      	bmi.n	80067e8 <__sflush_r+0xc0>
 8006736:	684b      	ldr	r3, [r1, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	dc05      	bgt.n	8006748 <__sflush_r+0x20>
 800673c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	dc02      	bgt.n	8006748 <__sflush_r+0x20>
 8006742:	2000      	movs	r0, #0
 8006744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800674a:	2e00      	cmp	r6, #0
 800674c:	d0f9      	beq.n	8006742 <__sflush_r+0x1a>
 800674e:	2300      	movs	r3, #0
 8006750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006754:	682f      	ldr	r7, [r5, #0]
 8006756:	602b      	str	r3, [r5, #0]
 8006758:	d032      	beq.n	80067c0 <__sflush_r+0x98>
 800675a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	075a      	lsls	r2, r3, #29
 8006760:	d505      	bpl.n	800676e <__sflush_r+0x46>
 8006762:	6863      	ldr	r3, [r4, #4]
 8006764:	1ac0      	subs	r0, r0, r3
 8006766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006768:	b10b      	cbz	r3, 800676e <__sflush_r+0x46>
 800676a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800676c:	1ac0      	subs	r0, r0, r3
 800676e:	2300      	movs	r3, #0
 8006770:	4602      	mov	r2, r0
 8006772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006774:	6a21      	ldr	r1, [r4, #32]
 8006776:	4628      	mov	r0, r5
 8006778:	47b0      	blx	r6
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	d106      	bne.n	800678e <__sflush_r+0x66>
 8006780:	6829      	ldr	r1, [r5, #0]
 8006782:	291d      	cmp	r1, #29
 8006784:	d82c      	bhi.n	80067e0 <__sflush_r+0xb8>
 8006786:	4a2a      	ldr	r2, [pc, #168]	; (8006830 <__sflush_r+0x108>)
 8006788:	40ca      	lsrs	r2, r1
 800678a:	07d6      	lsls	r6, r2, #31
 800678c:	d528      	bpl.n	80067e0 <__sflush_r+0xb8>
 800678e:	2200      	movs	r2, #0
 8006790:	6062      	str	r2, [r4, #4]
 8006792:	04d9      	lsls	r1, r3, #19
 8006794:	6922      	ldr	r2, [r4, #16]
 8006796:	6022      	str	r2, [r4, #0]
 8006798:	d504      	bpl.n	80067a4 <__sflush_r+0x7c>
 800679a:	1c42      	adds	r2, r0, #1
 800679c:	d101      	bne.n	80067a2 <__sflush_r+0x7a>
 800679e:	682b      	ldr	r3, [r5, #0]
 80067a0:	b903      	cbnz	r3, 80067a4 <__sflush_r+0x7c>
 80067a2:	6560      	str	r0, [r4, #84]	; 0x54
 80067a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067a6:	602f      	str	r7, [r5, #0]
 80067a8:	2900      	cmp	r1, #0
 80067aa:	d0ca      	beq.n	8006742 <__sflush_r+0x1a>
 80067ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067b0:	4299      	cmp	r1, r3
 80067b2:	d002      	beq.n	80067ba <__sflush_r+0x92>
 80067b4:	4628      	mov	r0, r5
 80067b6:	f7ff faa5 	bl	8005d04 <_free_r>
 80067ba:	2000      	movs	r0, #0
 80067bc:	6360      	str	r0, [r4, #52]	; 0x34
 80067be:	e7c1      	b.n	8006744 <__sflush_r+0x1c>
 80067c0:	6a21      	ldr	r1, [r4, #32]
 80067c2:	2301      	movs	r3, #1
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b0      	blx	r6
 80067c8:	1c41      	adds	r1, r0, #1
 80067ca:	d1c7      	bne.n	800675c <__sflush_r+0x34>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0c4      	beq.n	800675c <__sflush_r+0x34>
 80067d2:	2b1d      	cmp	r3, #29
 80067d4:	d001      	beq.n	80067da <__sflush_r+0xb2>
 80067d6:	2b16      	cmp	r3, #22
 80067d8:	d101      	bne.n	80067de <__sflush_r+0xb6>
 80067da:	602f      	str	r7, [r5, #0]
 80067dc:	e7b1      	b.n	8006742 <__sflush_r+0x1a>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	e7ad      	b.n	8006744 <__sflush_r+0x1c>
 80067e8:	690f      	ldr	r7, [r1, #16]
 80067ea:	2f00      	cmp	r7, #0
 80067ec:	d0a9      	beq.n	8006742 <__sflush_r+0x1a>
 80067ee:	0793      	lsls	r3, r2, #30
 80067f0:	680e      	ldr	r6, [r1, #0]
 80067f2:	bf08      	it	eq
 80067f4:	694b      	ldreq	r3, [r1, #20]
 80067f6:	600f      	str	r7, [r1, #0]
 80067f8:	bf18      	it	ne
 80067fa:	2300      	movne	r3, #0
 80067fc:	eba6 0807 	sub.w	r8, r6, r7
 8006800:	608b      	str	r3, [r1, #8]
 8006802:	f1b8 0f00 	cmp.w	r8, #0
 8006806:	dd9c      	ble.n	8006742 <__sflush_r+0x1a>
 8006808:	6a21      	ldr	r1, [r4, #32]
 800680a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800680c:	4643      	mov	r3, r8
 800680e:	463a      	mov	r2, r7
 8006810:	4628      	mov	r0, r5
 8006812:	47b0      	blx	r6
 8006814:	2800      	cmp	r0, #0
 8006816:	dc06      	bgt.n	8006826 <__sflush_r+0xfe>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800681e:	81a3      	strh	r3, [r4, #12]
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	e78e      	b.n	8006744 <__sflush_r+0x1c>
 8006826:	4407      	add	r7, r0
 8006828:	eba8 0800 	sub.w	r8, r8, r0
 800682c:	e7e9      	b.n	8006802 <__sflush_r+0xda>
 800682e:	bf00      	nop
 8006830:	20400001 	.word	0x20400001

08006834 <_fflush_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	690b      	ldr	r3, [r1, #16]
 8006838:	4605      	mov	r5, r0
 800683a:	460c      	mov	r4, r1
 800683c:	b913      	cbnz	r3, 8006844 <_fflush_r+0x10>
 800683e:	2500      	movs	r5, #0
 8006840:	4628      	mov	r0, r5
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	b118      	cbz	r0, 800684e <_fflush_r+0x1a>
 8006846:	6983      	ldr	r3, [r0, #24]
 8006848:	b90b      	cbnz	r3, 800684e <_fflush_r+0x1a>
 800684a:	f000 f887 	bl	800695c <__sinit>
 800684e:	4b14      	ldr	r3, [pc, #80]	; (80068a0 <_fflush_r+0x6c>)
 8006850:	429c      	cmp	r4, r3
 8006852:	d11b      	bne.n	800688c <_fflush_r+0x58>
 8006854:	686c      	ldr	r4, [r5, #4]
 8006856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0ef      	beq.n	800683e <_fflush_r+0xa>
 800685e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006860:	07d0      	lsls	r0, r2, #31
 8006862:	d404      	bmi.n	800686e <_fflush_r+0x3a>
 8006864:	0599      	lsls	r1, r3, #22
 8006866:	d402      	bmi.n	800686e <_fflush_r+0x3a>
 8006868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800686a:	f000 f915 	bl	8006a98 <__retarget_lock_acquire_recursive>
 800686e:	4628      	mov	r0, r5
 8006870:	4621      	mov	r1, r4
 8006872:	f7ff ff59 	bl	8006728 <__sflush_r>
 8006876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006878:	07da      	lsls	r2, r3, #31
 800687a:	4605      	mov	r5, r0
 800687c:	d4e0      	bmi.n	8006840 <_fflush_r+0xc>
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	059b      	lsls	r3, r3, #22
 8006882:	d4dd      	bmi.n	8006840 <_fflush_r+0xc>
 8006884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006886:	f000 f908 	bl	8006a9a <__retarget_lock_release_recursive>
 800688a:	e7d9      	b.n	8006840 <_fflush_r+0xc>
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <_fflush_r+0x70>)
 800688e:	429c      	cmp	r4, r3
 8006890:	d101      	bne.n	8006896 <_fflush_r+0x62>
 8006892:	68ac      	ldr	r4, [r5, #8]
 8006894:	e7df      	b.n	8006856 <_fflush_r+0x22>
 8006896:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <_fflush_r+0x74>)
 8006898:	429c      	cmp	r4, r3
 800689a:	bf08      	it	eq
 800689c:	68ec      	ldreq	r4, [r5, #12]
 800689e:	e7da      	b.n	8006856 <_fflush_r+0x22>
 80068a0:	08007134 	.word	0x08007134
 80068a4:	08007154 	.word	0x08007154
 80068a8:	08007114 	.word	0x08007114

080068ac <std>:
 80068ac:	2300      	movs	r3, #0
 80068ae:	b510      	push	{r4, lr}
 80068b0:	4604      	mov	r4, r0
 80068b2:	e9c0 3300 	strd	r3, r3, [r0]
 80068b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ba:	6083      	str	r3, [r0, #8]
 80068bc:	8181      	strh	r1, [r0, #12]
 80068be:	6643      	str	r3, [r0, #100]	; 0x64
 80068c0:	81c2      	strh	r2, [r0, #14]
 80068c2:	6183      	str	r3, [r0, #24]
 80068c4:	4619      	mov	r1, r3
 80068c6:	2208      	movs	r2, #8
 80068c8:	305c      	adds	r0, #92	; 0x5c
 80068ca:	f7fd fb21 	bl	8003f10 <memset>
 80068ce:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <std+0x38>)
 80068d0:	6263      	str	r3, [r4, #36]	; 0x24
 80068d2:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <std+0x3c>)
 80068d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <std+0x40>)
 80068d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068da:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <std+0x44>)
 80068dc:	6224      	str	r4, [r4, #32]
 80068de:	6323      	str	r3, [r4, #48]	; 0x30
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	bf00      	nop
 80068e4:	08006c01 	.word	0x08006c01
 80068e8:	08006c23 	.word	0x08006c23
 80068ec:	08006c5b 	.word	0x08006c5b
 80068f0:	08006c7f 	.word	0x08006c7f

080068f4 <_cleanup_r>:
 80068f4:	4901      	ldr	r1, [pc, #4]	; (80068fc <_cleanup_r+0x8>)
 80068f6:	f000 b8af 	b.w	8006a58 <_fwalk_reent>
 80068fa:	bf00      	nop
 80068fc:	08006835 	.word	0x08006835

08006900 <__sfmoreglue>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	2268      	movs	r2, #104	; 0x68
 8006904:	1e4d      	subs	r5, r1, #1
 8006906:	4355      	muls	r5, r2
 8006908:	460e      	mov	r6, r1
 800690a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800690e:	f7ff fa65 	bl	8005ddc <_malloc_r>
 8006912:	4604      	mov	r4, r0
 8006914:	b140      	cbz	r0, 8006928 <__sfmoreglue+0x28>
 8006916:	2100      	movs	r1, #0
 8006918:	e9c0 1600 	strd	r1, r6, [r0]
 800691c:	300c      	adds	r0, #12
 800691e:	60a0      	str	r0, [r4, #8]
 8006920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006924:	f7fd faf4 	bl	8003f10 <memset>
 8006928:	4620      	mov	r0, r4
 800692a:	bd70      	pop	{r4, r5, r6, pc}

0800692c <__sfp_lock_acquire>:
 800692c:	4801      	ldr	r0, [pc, #4]	; (8006934 <__sfp_lock_acquire+0x8>)
 800692e:	f000 b8b3 	b.w	8006a98 <__retarget_lock_acquire_recursive>
 8006932:	bf00      	nop
 8006934:	200004a5 	.word	0x200004a5

08006938 <__sfp_lock_release>:
 8006938:	4801      	ldr	r0, [pc, #4]	; (8006940 <__sfp_lock_release+0x8>)
 800693a:	f000 b8ae 	b.w	8006a9a <__retarget_lock_release_recursive>
 800693e:	bf00      	nop
 8006940:	200004a5 	.word	0x200004a5

08006944 <__sinit_lock_acquire>:
 8006944:	4801      	ldr	r0, [pc, #4]	; (800694c <__sinit_lock_acquire+0x8>)
 8006946:	f000 b8a7 	b.w	8006a98 <__retarget_lock_acquire_recursive>
 800694a:	bf00      	nop
 800694c:	200004a6 	.word	0x200004a6

08006950 <__sinit_lock_release>:
 8006950:	4801      	ldr	r0, [pc, #4]	; (8006958 <__sinit_lock_release+0x8>)
 8006952:	f000 b8a2 	b.w	8006a9a <__retarget_lock_release_recursive>
 8006956:	bf00      	nop
 8006958:	200004a6 	.word	0x200004a6

0800695c <__sinit>:
 800695c:	b510      	push	{r4, lr}
 800695e:	4604      	mov	r4, r0
 8006960:	f7ff fff0 	bl	8006944 <__sinit_lock_acquire>
 8006964:	69a3      	ldr	r3, [r4, #24]
 8006966:	b11b      	cbz	r3, 8006970 <__sinit+0x14>
 8006968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800696c:	f7ff bff0 	b.w	8006950 <__sinit_lock_release>
 8006970:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006974:	6523      	str	r3, [r4, #80]	; 0x50
 8006976:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <__sinit+0x68>)
 8006978:	4a13      	ldr	r2, [pc, #76]	; (80069c8 <__sinit+0x6c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	62a2      	str	r2, [r4, #40]	; 0x28
 800697e:	42a3      	cmp	r3, r4
 8006980:	bf04      	itt	eq
 8006982:	2301      	moveq	r3, #1
 8006984:	61a3      	streq	r3, [r4, #24]
 8006986:	4620      	mov	r0, r4
 8006988:	f000 f820 	bl	80069cc <__sfp>
 800698c:	6060      	str	r0, [r4, #4]
 800698e:	4620      	mov	r0, r4
 8006990:	f000 f81c 	bl	80069cc <__sfp>
 8006994:	60a0      	str	r0, [r4, #8]
 8006996:	4620      	mov	r0, r4
 8006998:	f000 f818 	bl	80069cc <__sfp>
 800699c:	2200      	movs	r2, #0
 800699e:	60e0      	str	r0, [r4, #12]
 80069a0:	2104      	movs	r1, #4
 80069a2:	6860      	ldr	r0, [r4, #4]
 80069a4:	f7ff ff82 	bl	80068ac <std>
 80069a8:	68a0      	ldr	r0, [r4, #8]
 80069aa:	2201      	movs	r2, #1
 80069ac:	2109      	movs	r1, #9
 80069ae:	f7ff ff7d 	bl	80068ac <std>
 80069b2:	68e0      	ldr	r0, [r4, #12]
 80069b4:	2202      	movs	r2, #2
 80069b6:	2112      	movs	r1, #18
 80069b8:	f7ff ff78 	bl	80068ac <std>
 80069bc:	2301      	movs	r3, #1
 80069be:	61a3      	str	r3, [r4, #24]
 80069c0:	e7d2      	b.n	8006968 <__sinit+0xc>
 80069c2:	bf00      	nop
 80069c4:	08006d9c 	.word	0x08006d9c
 80069c8:	080068f5 	.word	0x080068f5

080069cc <__sfp>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	4607      	mov	r7, r0
 80069d0:	f7ff ffac 	bl	800692c <__sfp_lock_acquire>
 80069d4:	4b1e      	ldr	r3, [pc, #120]	; (8006a50 <__sfp+0x84>)
 80069d6:	681e      	ldr	r6, [r3, #0]
 80069d8:	69b3      	ldr	r3, [r6, #24]
 80069da:	b913      	cbnz	r3, 80069e2 <__sfp+0x16>
 80069dc:	4630      	mov	r0, r6
 80069de:	f7ff ffbd 	bl	800695c <__sinit>
 80069e2:	3648      	adds	r6, #72	; 0x48
 80069e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	d503      	bpl.n	80069f4 <__sfp+0x28>
 80069ec:	6833      	ldr	r3, [r6, #0]
 80069ee:	b30b      	cbz	r3, 8006a34 <__sfp+0x68>
 80069f0:	6836      	ldr	r6, [r6, #0]
 80069f2:	e7f7      	b.n	80069e4 <__sfp+0x18>
 80069f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069f8:	b9d5      	cbnz	r5, 8006a30 <__sfp+0x64>
 80069fa:	4b16      	ldr	r3, [pc, #88]	; (8006a54 <__sfp+0x88>)
 80069fc:	60e3      	str	r3, [r4, #12]
 80069fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a02:	6665      	str	r5, [r4, #100]	; 0x64
 8006a04:	f000 f847 	bl	8006a96 <__retarget_lock_init_recursive>
 8006a08:	f7ff ff96 	bl	8006938 <__sfp_lock_release>
 8006a0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a14:	6025      	str	r5, [r4, #0]
 8006a16:	61a5      	str	r5, [r4, #24]
 8006a18:	2208      	movs	r2, #8
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a20:	f7fd fa76 	bl	8003f10 <memset>
 8006a24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a30:	3468      	adds	r4, #104	; 0x68
 8006a32:	e7d9      	b.n	80069e8 <__sfp+0x1c>
 8006a34:	2104      	movs	r1, #4
 8006a36:	4638      	mov	r0, r7
 8006a38:	f7ff ff62 	bl	8006900 <__sfmoreglue>
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	6030      	str	r0, [r6, #0]
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d1d5      	bne.n	80069f0 <__sfp+0x24>
 8006a44:	f7ff ff78 	bl	8006938 <__sfp_lock_release>
 8006a48:	230c      	movs	r3, #12
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	e7ee      	b.n	8006a2c <__sfp+0x60>
 8006a4e:	bf00      	nop
 8006a50:	08006d9c 	.word	0x08006d9c
 8006a54:	ffff0001 	.word	0xffff0001

08006a58 <_fwalk_reent>:
 8006a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	4688      	mov	r8, r1
 8006a60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a64:	2700      	movs	r7, #0
 8006a66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a6a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a6e:	d505      	bpl.n	8006a7c <_fwalk_reent+0x24>
 8006a70:	6824      	ldr	r4, [r4, #0]
 8006a72:	2c00      	cmp	r4, #0
 8006a74:	d1f7      	bne.n	8006a66 <_fwalk_reent+0xe>
 8006a76:	4638      	mov	r0, r7
 8006a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a7c:	89ab      	ldrh	r3, [r5, #12]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d907      	bls.n	8006a92 <_fwalk_reent+0x3a>
 8006a82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a86:	3301      	adds	r3, #1
 8006a88:	d003      	beq.n	8006a92 <_fwalk_reent+0x3a>
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	47c0      	blx	r8
 8006a90:	4307      	orrs	r7, r0
 8006a92:	3568      	adds	r5, #104	; 0x68
 8006a94:	e7e9      	b.n	8006a6a <_fwalk_reent+0x12>

08006a96 <__retarget_lock_init_recursive>:
 8006a96:	4770      	bx	lr

08006a98 <__retarget_lock_acquire_recursive>:
 8006a98:	4770      	bx	lr

08006a9a <__retarget_lock_release_recursive>:
 8006a9a:	4770      	bx	lr

08006a9c <__swhatbuf_r>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	460e      	mov	r6, r1
 8006aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	b096      	sub	sp, #88	; 0x58
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	461d      	mov	r5, r3
 8006aac:	da08      	bge.n	8006ac0 <__swhatbuf_r+0x24>
 8006aae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	602a      	str	r2, [r5, #0]
 8006ab6:	061a      	lsls	r2, r3, #24
 8006ab8:	d410      	bmi.n	8006adc <__swhatbuf_r+0x40>
 8006aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006abe:	e00e      	b.n	8006ade <__swhatbuf_r+0x42>
 8006ac0:	466a      	mov	r2, sp
 8006ac2:	f000 f903 	bl	8006ccc <_fstat_r>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	dbf1      	blt.n	8006aae <__swhatbuf_r+0x12>
 8006aca:	9a01      	ldr	r2, [sp, #4]
 8006acc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ad0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ad4:	425a      	negs	r2, r3
 8006ad6:	415a      	adcs	r2, r3
 8006ad8:	602a      	str	r2, [r5, #0]
 8006ada:	e7ee      	b.n	8006aba <__swhatbuf_r+0x1e>
 8006adc:	2340      	movs	r3, #64	; 0x40
 8006ade:	2000      	movs	r0, #0
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	b016      	add	sp, #88	; 0x58
 8006ae4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ae8 <__smakebuf_r>:
 8006ae8:	898b      	ldrh	r3, [r1, #12]
 8006aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006aec:	079d      	lsls	r5, r3, #30
 8006aee:	4606      	mov	r6, r0
 8006af0:	460c      	mov	r4, r1
 8006af2:	d507      	bpl.n	8006b04 <__smakebuf_r+0x1c>
 8006af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	6123      	str	r3, [r4, #16]
 8006afc:	2301      	movs	r3, #1
 8006afe:	6163      	str	r3, [r4, #20]
 8006b00:	b002      	add	sp, #8
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	ab01      	add	r3, sp, #4
 8006b06:	466a      	mov	r2, sp
 8006b08:	f7ff ffc8 	bl	8006a9c <__swhatbuf_r>
 8006b0c:	9900      	ldr	r1, [sp, #0]
 8006b0e:	4605      	mov	r5, r0
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7ff f963 	bl	8005ddc <_malloc_r>
 8006b16:	b948      	cbnz	r0, 8006b2c <__smakebuf_r+0x44>
 8006b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b1c:	059a      	lsls	r2, r3, #22
 8006b1e:	d4ef      	bmi.n	8006b00 <__smakebuf_r+0x18>
 8006b20:	f023 0303 	bic.w	r3, r3, #3
 8006b24:	f043 0302 	orr.w	r3, r3, #2
 8006b28:	81a3      	strh	r3, [r4, #12]
 8006b2a:	e7e3      	b.n	8006af4 <__smakebuf_r+0xc>
 8006b2c:	4b0d      	ldr	r3, [pc, #52]	; (8006b64 <__smakebuf_r+0x7c>)
 8006b2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	6020      	str	r0, [r4, #0]
 8006b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b38:	81a3      	strh	r3, [r4, #12]
 8006b3a:	9b00      	ldr	r3, [sp, #0]
 8006b3c:	6163      	str	r3, [r4, #20]
 8006b3e:	9b01      	ldr	r3, [sp, #4]
 8006b40:	6120      	str	r0, [r4, #16]
 8006b42:	b15b      	cbz	r3, 8006b5c <__smakebuf_r+0x74>
 8006b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f000 f8d1 	bl	8006cf0 <_isatty_r>
 8006b4e:	b128      	cbz	r0, 8006b5c <__smakebuf_r+0x74>
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	81a3      	strh	r3, [r4, #12]
 8006b5c:	89a0      	ldrh	r0, [r4, #12]
 8006b5e:	4305      	orrs	r5, r0
 8006b60:	81a5      	strh	r5, [r4, #12]
 8006b62:	e7cd      	b.n	8006b00 <__smakebuf_r+0x18>
 8006b64:	080068f5 	.word	0x080068f5

08006b68 <_malloc_usable_size_r>:
 8006b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6c:	1f18      	subs	r0, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bfbc      	itt	lt
 8006b72:	580b      	ldrlt	r3, [r1, r0]
 8006b74:	18c0      	addlt	r0, r0, r3
 8006b76:	4770      	bx	lr

08006b78 <_raise_r>:
 8006b78:	291f      	cmp	r1, #31
 8006b7a:	b538      	push	{r3, r4, r5, lr}
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	460d      	mov	r5, r1
 8006b80:	d904      	bls.n	8006b8c <_raise_r+0x14>
 8006b82:	2316      	movs	r3, #22
 8006b84:	6003      	str	r3, [r0, #0]
 8006b86:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
 8006b8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b8e:	b112      	cbz	r2, 8006b96 <_raise_r+0x1e>
 8006b90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b94:	b94b      	cbnz	r3, 8006baa <_raise_r+0x32>
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 f830 	bl	8006bfc <_getpid_r>
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ba6:	f000 b817 	b.w	8006bd8 <_kill_r>
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d00a      	beq.n	8006bc4 <_raise_r+0x4c>
 8006bae:	1c59      	adds	r1, r3, #1
 8006bb0:	d103      	bne.n	8006bba <_raise_r+0x42>
 8006bb2:	2316      	movs	r3, #22
 8006bb4:	6003      	str	r3, [r0, #0]
 8006bb6:	2001      	movs	r0, #1
 8006bb8:	e7e7      	b.n	8006b8a <_raise_r+0x12>
 8006bba:	2400      	movs	r4, #0
 8006bbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	4798      	blx	r3
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	e7e0      	b.n	8006b8a <_raise_r+0x12>

08006bc8 <raise>:
 8006bc8:	4b02      	ldr	r3, [pc, #8]	; (8006bd4 <raise+0xc>)
 8006bca:	4601      	mov	r1, r0
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	f7ff bfd3 	b.w	8006b78 <_raise_r>
 8006bd2:	bf00      	nop
 8006bd4:	2000004c 	.word	0x2000004c

08006bd8 <_kill_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4d07      	ldr	r5, [pc, #28]	; (8006bf8 <_kill_r+0x20>)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4604      	mov	r4, r0
 8006be0:	4608      	mov	r0, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	602b      	str	r3, [r5, #0]
 8006be6:	f7fa fc61 	bl	80014ac <_kill>
 8006bea:	1c43      	adds	r3, r0, #1
 8006bec:	d102      	bne.n	8006bf4 <_kill_r+0x1c>
 8006bee:	682b      	ldr	r3, [r5, #0]
 8006bf0:	b103      	cbz	r3, 8006bf4 <_kill_r+0x1c>
 8006bf2:	6023      	str	r3, [r4, #0]
 8006bf4:	bd38      	pop	{r3, r4, r5, pc}
 8006bf6:	bf00      	nop
 8006bf8:	200004a0 	.word	0x200004a0

08006bfc <_getpid_r>:
 8006bfc:	f7fa bc4e 	b.w	800149c <_getpid>

08006c00 <__sread>:
 8006c00:	b510      	push	{r4, lr}
 8006c02:	460c      	mov	r4, r1
 8006c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c08:	f000 f894 	bl	8006d34 <_read_r>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	bfab      	itete	ge
 8006c10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c12:	89a3      	ldrhlt	r3, [r4, #12]
 8006c14:	181b      	addge	r3, r3, r0
 8006c16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c1a:	bfac      	ite	ge
 8006c1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c1e:	81a3      	strhlt	r3, [r4, #12]
 8006c20:	bd10      	pop	{r4, pc}

08006c22 <__swrite>:
 8006c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c26:	461f      	mov	r7, r3
 8006c28:	898b      	ldrh	r3, [r1, #12]
 8006c2a:	05db      	lsls	r3, r3, #23
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	4616      	mov	r6, r2
 8006c32:	d505      	bpl.n	8006c40 <__swrite+0x1e>
 8006c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c38:	2302      	movs	r3, #2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f000 f868 	bl	8006d10 <_lseek_r>
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	4632      	mov	r2, r6
 8006c4e:	463b      	mov	r3, r7
 8006c50:	4628      	mov	r0, r5
 8006c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c56:	f000 b817 	b.w	8006c88 <_write_r>

08006c5a <__sseek>:
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c62:	f000 f855 	bl	8006d10 <_lseek_r>
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	bf15      	itete	ne
 8006c6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c76:	81a3      	strheq	r3, [r4, #12]
 8006c78:	bf18      	it	ne
 8006c7a:	81a3      	strhne	r3, [r4, #12]
 8006c7c:	bd10      	pop	{r4, pc}

08006c7e <__sclose>:
 8006c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c82:	f000 b813 	b.w	8006cac <_close_r>
	...

08006c88 <_write_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	; (8006ca8 <_write_r+0x20>)
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fa fc3f 	bl	800151a <_write>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_write_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_write_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	200004a0 	.word	0x200004a0

08006cac <_close_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_close_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7fa fc4b 	bl	8001552 <_close>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_close_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_close_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	200004a0 	.word	0x200004a0

08006ccc <_fstat_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d07      	ldr	r5, [pc, #28]	; (8006cec <_fstat_r+0x20>)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	602b      	str	r3, [r5, #0]
 8006cda:	f7fa fc46 	bl	800156a <_fstat>
 8006cde:	1c43      	adds	r3, r0, #1
 8006ce0:	d102      	bne.n	8006ce8 <_fstat_r+0x1c>
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	b103      	cbz	r3, 8006ce8 <_fstat_r+0x1c>
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	bd38      	pop	{r3, r4, r5, pc}
 8006cea:	bf00      	nop
 8006cec:	200004a0 	.word	0x200004a0

08006cf0 <_isatty_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d06      	ldr	r5, [pc, #24]	; (8006d0c <_isatty_r+0x1c>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7fa fc45 	bl	800158a <_isatty>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_isatty_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_isatty_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	200004a0 	.word	0x200004a0

08006d10 <_lseek_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d07      	ldr	r5, [pc, #28]	; (8006d30 <_lseek_r+0x20>)
 8006d14:	4604      	mov	r4, r0
 8006d16:	4608      	mov	r0, r1
 8006d18:	4611      	mov	r1, r2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f7fa fc3e 	bl	80015a0 <_lseek>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d102      	bne.n	8006d2e <_lseek_r+0x1e>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	b103      	cbz	r3, 8006d2e <_lseek_r+0x1e>
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	200004a0 	.word	0x200004a0

08006d34 <_read_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d07      	ldr	r5, [pc, #28]	; (8006d54 <_read_r+0x20>)
 8006d38:	4604      	mov	r4, r0
 8006d3a:	4608      	mov	r0, r1
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	2200      	movs	r2, #0
 8006d40:	602a      	str	r2, [r5, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	f7fa fbcc 	bl	80014e0 <_read>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_read_r+0x1e>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_read_r+0x1e>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	200004a0 	.word	0x200004a0

08006d58 <_init>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	bf00      	nop
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr

08006d64 <_fini>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr
