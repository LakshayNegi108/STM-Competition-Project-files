
WEB Server using f070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000856c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000afc  08008630  08008630  00018630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800912c  0800912c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800912c  0800912c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800912c  0800912c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009130  08009130  00019130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a84  200001ec  08009320  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c70  08009320  00020c70  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b08c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002151  00000000  00000000  0002b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002dc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001213e  00000000  00000000  0002e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1d4  00000000  00000000  000405ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063a38  00000000  00000000  0004c7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b01da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f20  00000000  00000000  000b022c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008614 	.word	0x08008614

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	08008614 	.word	0x08008614

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f000 ff0d 	bl	8001270 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fe5d 	bl	8001120 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 feff 	bl	8001270 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fef5 	bl	8001270 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe85 	bl	80011a4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fe7b 	bl	80011a4 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_dadd>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	464f      	mov	r7, r9
 80004c0:	4646      	mov	r6, r8
 80004c2:	46d6      	mov	lr, sl
 80004c4:	000d      	movs	r5, r1
 80004c6:	0004      	movs	r4, r0
 80004c8:	b5c0      	push	{r6, r7, lr}
 80004ca:	001f      	movs	r7, r3
 80004cc:	0011      	movs	r1, r2
 80004ce:	0328      	lsls	r0, r5, #12
 80004d0:	0f62      	lsrs	r2, r4, #29
 80004d2:	0a40      	lsrs	r0, r0, #9
 80004d4:	4310      	orrs	r0, r2
 80004d6:	007a      	lsls	r2, r7, #1
 80004d8:	0d52      	lsrs	r2, r2, #21
 80004da:	00e3      	lsls	r3, r4, #3
 80004dc:	033c      	lsls	r4, r7, #12
 80004de:	4691      	mov	r9, r2
 80004e0:	0a64      	lsrs	r4, r4, #9
 80004e2:	0ffa      	lsrs	r2, r7, #31
 80004e4:	0f4f      	lsrs	r7, r1, #29
 80004e6:	006e      	lsls	r6, r5, #1
 80004e8:	4327      	orrs	r7, r4
 80004ea:	4692      	mov	sl, r2
 80004ec:	46b8      	mov	r8, r7
 80004ee:	0d76      	lsrs	r6, r6, #21
 80004f0:	0fed      	lsrs	r5, r5, #31
 80004f2:	00c9      	lsls	r1, r1, #3
 80004f4:	4295      	cmp	r5, r2
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x3e>
 80004f8:	e099      	b.n	800062e <__aeabi_dadd+0x172>
 80004fa:	464c      	mov	r4, r9
 80004fc:	1b34      	subs	r4, r6, r4
 80004fe:	46a4      	mov	ip, r4
 8000500:	2c00      	cmp	r4, #0
 8000502:	dc00      	bgt.n	8000506 <__aeabi_dadd+0x4a>
 8000504:	e07c      	b.n	8000600 <__aeabi_dadd+0x144>
 8000506:	464a      	mov	r2, r9
 8000508:	2a00      	cmp	r2, #0
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x52>
 800050c:	e0b8      	b.n	8000680 <__aeabi_dadd+0x1c4>
 800050e:	4ac5      	ldr	r2, [pc, #788]	; (8000824 <__aeabi_dadd+0x368>)
 8000510:	4296      	cmp	r6, r2
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x5a>
 8000514:	e11c      	b.n	8000750 <__aeabi_dadd+0x294>
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	003c      	movs	r4, r7
 800051a:	0412      	lsls	r2, r2, #16
 800051c:	4314      	orrs	r4, r2
 800051e:	46a0      	mov	r8, r4
 8000520:	4662      	mov	r2, ip
 8000522:	2a38      	cmp	r2, #56	; 0x38
 8000524:	dd00      	ble.n	8000528 <__aeabi_dadd+0x6c>
 8000526:	e161      	b.n	80007ec <__aeabi_dadd+0x330>
 8000528:	2a1f      	cmp	r2, #31
 800052a:	dd00      	ble.n	800052e <__aeabi_dadd+0x72>
 800052c:	e1cc      	b.n	80008c8 <__aeabi_dadd+0x40c>
 800052e:	4664      	mov	r4, ip
 8000530:	2220      	movs	r2, #32
 8000532:	1b12      	subs	r2, r2, r4
 8000534:	4644      	mov	r4, r8
 8000536:	4094      	lsls	r4, r2
 8000538:	000f      	movs	r7, r1
 800053a:	46a1      	mov	r9, r4
 800053c:	4664      	mov	r4, ip
 800053e:	4091      	lsls	r1, r2
 8000540:	40e7      	lsrs	r7, r4
 8000542:	464c      	mov	r4, r9
 8000544:	1e4a      	subs	r2, r1, #1
 8000546:	4191      	sbcs	r1, r2
 8000548:	433c      	orrs	r4, r7
 800054a:	4642      	mov	r2, r8
 800054c:	4321      	orrs	r1, r4
 800054e:	4664      	mov	r4, ip
 8000550:	40e2      	lsrs	r2, r4
 8000552:	1a80      	subs	r0, r0, r2
 8000554:	1a5c      	subs	r4, r3, r1
 8000556:	42a3      	cmp	r3, r4
 8000558:	419b      	sbcs	r3, r3
 800055a:	425f      	negs	r7, r3
 800055c:	1bc7      	subs	r7, r0, r7
 800055e:	023b      	lsls	r3, r7, #8
 8000560:	d400      	bmi.n	8000564 <__aeabi_dadd+0xa8>
 8000562:	e0d0      	b.n	8000706 <__aeabi_dadd+0x24a>
 8000564:	027f      	lsls	r7, r7, #9
 8000566:	0a7f      	lsrs	r7, r7, #9
 8000568:	2f00      	cmp	r7, #0
 800056a:	d100      	bne.n	800056e <__aeabi_dadd+0xb2>
 800056c:	e0ff      	b.n	800076e <__aeabi_dadd+0x2b2>
 800056e:	0038      	movs	r0, r7
 8000570:	f001 fe5a 	bl	8002228 <__clzsi2>
 8000574:	0001      	movs	r1, r0
 8000576:	3908      	subs	r1, #8
 8000578:	2320      	movs	r3, #32
 800057a:	0022      	movs	r2, r4
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	408f      	lsls	r7, r1
 8000580:	40da      	lsrs	r2, r3
 8000582:	408c      	lsls	r4, r1
 8000584:	4317      	orrs	r7, r2
 8000586:	42b1      	cmp	r1, r6
 8000588:	da00      	bge.n	800058c <__aeabi_dadd+0xd0>
 800058a:	e0ff      	b.n	800078c <__aeabi_dadd+0x2d0>
 800058c:	1b89      	subs	r1, r1, r6
 800058e:	1c4b      	adds	r3, r1, #1
 8000590:	2b1f      	cmp	r3, #31
 8000592:	dd00      	ble.n	8000596 <__aeabi_dadd+0xda>
 8000594:	e0a8      	b.n	80006e8 <__aeabi_dadd+0x22c>
 8000596:	2220      	movs	r2, #32
 8000598:	0039      	movs	r1, r7
 800059a:	1ad2      	subs	r2, r2, r3
 800059c:	0020      	movs	r0, r4
 800059e:	4094      	lsls	r4, r2
 80005a0:	4091      	lsls	r1, r2
 80005a2:	40d8      	lsrs	r0, r3
 80005a4:	1e62      	subs	r2, r4, #1
 80005a6:	4194      	sbcs	r4, r2
 80005a8:	40df      	lsrs	r7, r3
 80005aa:	2600      	movs	r6, #0
 80005ac:	4301      	orrs	r1, r0
 80005ae:	430c      	orrs	r4, r1
 80005b0:	0763      	lsls	r3, r4, #29
 80005b2:	d009      	beq.n	80005c8 <__aeabi_dadd+0x10c>
 80005b4:	230f      	movs	r3, #15
 80005b6:	4023      	ands	r3, r4
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d005      	beq.n	80005c8 <__aeabi_dadd+0x10c>
 80005bc:	1d23      	adds	r3, r4, #4
 80005be:	42a3      	cmp	r3, r4
 80005c0:	41a4      	sbcs	r4, r4
 80005c2:	4264      	negs	r4, r4
 80005c4:	193f      	adds	r7, r7, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	023b      	lsls	r3, r7, #8
 80005ca:	d400      	bmi.n	80005ce <__aeabi_dadd+0x112>
 80005cc:	e09e      	b.n	800070c <__aeabi_dadd+0x250>
 80005ce:	4b95      	ldr	r3, [pc, #596]	; (8000824 <__aeabi_dadd+0x368>)
 80005d0:	3601      	adds	r6, #1
 80005d2:	429e      	cmp	r6, r3
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dadd+0x11c>
 80005d6:	e0b7      	b.n	8000748 <__aeabi_dadd+0x28c>
 80005d8:	4a93      	ldr	r2, [pc, #588]	; (8000828 <__aeabi_dadd+0x36c>)
 80005da:	08e4      	lsrs	r4, r4, #3
 80005dc:	4017      	ands	r7, r2
 80005de:	077b      	lsls	r3, r7, #29
 80005e0:	0571      	lsls	r1, r6, #21
 80005e2:	027f      	lsls	r7, r7, #9
 80005e4:	4323      	orrs	r3, r4
 80005e6:	0b3f      	lsrs	r7, r7, #12
 80005e8:	0d4a      	lsrs	r2, r1, #21
 80005ea:	0512      	lsls	r2, r2, #20
 80005ec:	433a      	orrs	r2, r7
 80005ee:	07ed      	lsls	r5, r5, #31
 80005f0:	432a      	orrs	r2, r5
 80005f2:	0018      	movs	r0, r3
 80005f4:	0011      	movs	r1, r2
 80005f6:	bce0      	pop	{r5, r6, r7}
 80005f8:	46ba      	mov	sl, r7
 80005fa:	46b1      	mov	r9, r6
 80005fc:	46a8      	mov	r8, r5
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	2c00      	cmp	r4, #0
 8000602:	d04b      	beq.n	800069c <__aeabi_dadd+0x1e0>
 8000604:	464c      	mov	r4, r9
 8000606:	1ba4      	subs	r4, r4, r6
 8000608:	46a4      	mov	ip, r4
 800060a:	2e00      	cmp	r6, #0
 800060c:	d000      	beq.n	8000610 <__aeabi_dadd+0x154>
 800060e:	e123      	b.n	8000858 <__aeabi_dadd+0x39c>
 8000610:	0004      	movs	r4, r0
 8000612:	431c      	orrs	r4, r3
 8000614:	d100      	bne.n	8000618 <__aeabi_dadd+0x15c>
 8000616:	e1af      	b.n	8000978 <__aeabi_dadd+0x4bc>
 8000618:	4662      	mov	r2, ip
 800061a:	1e54      	subs	r4, r2, #1
 800061c:	2a01      	cmp	r2, #1
 800061e:	d100      	bne.n	8000622 <__aeabi_dadd+0x166>
 8000620:	e215      	b.n	8000a4e <__aeabi_dadd+0x592>
 8000622:	4d80      	ldr	r5, [pc, #512]	; (8000824 <__aeabi_dadd+0x368>)
 8000624:	45ac      	cmp	ip, r5
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x16e>
 8000628:	e1c8      	b.n	80009bc <__aeabi_dadd+0x500>
 800062a:	46a4      	mov	ip, r4
 800062c:	e11b      	b.n	8000866 <__aeabi_dadd+0x3aa>
 800062e:	464a      	mov	r2, r9
 8000630:	1ab2      	subs	r2, r6, r2
 8000632:	4694      	mov	ip, r2
 8000634:	2a00      	cmp	r2, #0
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x17e>
 8000638:	e0ac      	b.n	8000794 <__aeabi_dadd+0x2d8>
 800063a:	464a      	mov	r2, r9
 800063c:	2a00      	cmp	r2, #0
 800063e:	d043      	beq.n	80006c8 <__aeabi_dadd+0x20c>
 8000640:	4a78      	ldr	r2, [pc, #480]	; (8000824 <__aeabi_dadd+0x368>)
 8000642:	4296      	cmp	r6, r2
 8000644:	d100      	bne.n	8000648 <__aeabi_dadd+0x18c>
 8000646:	e1af      	b.n	80009a8 <__aeabi_dadd+0x4ec>
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	003c      	movs	r4, r7
 800064c:	0412      	lsls	r2, r2, #16
 800064e:	4314      	orrs	r4, r2
 8000650:	46a0      	mov	r8, r4
 8000652:	4662      	mov	r2, ip
 8000654:	2a38      	cmp	r2, #56	; 0x38
 8000656:	dc67      	bgt.n	8000728 <__aeabi_dadd+0x26c>
 8000658:	2a1f      	cmp	r2, #31
 800065a:	dc00      	bgt.n	800065e <__aeabi_dadd+0x1a2>
 800065c:	e15f      	b.n	800091e <__aeabi_dadd+0x462>
 800065e:	4647      	mov	r7, r8
 8000660:	3a20      	subs	r2, #32
 8000662:	40d7      	lsrs	r7, r2
 8000664:	4662      	mov	r2, ip
 8000666:	2a20      	cmp	r2, #32
 8000668:	d005      	beq.n	8000676 <__aeabi_dadd+0x1ba>
 800066a:	4664      	mov	r4, ip
 800066c:	2240      	movs	r2, #64	; 0x40
 800066e:	1b12      	subs	r2, r2, r4
 8000670:	4644      	mov	r4, r8
 8000672:	4094      	lsls	r4, r2
 8000674:	4321      	orrs	r1, r4
 8000676:	1e4a      	subs	r2, r1, #1
 8000678:	4191      	sbcs	r1, r2
 800067a:	000c      	movs	r4, r1
 800067c:	433c      	orrs	r4, r7
 800067e:	e057      	b.n	8000730 <__aeabi_dadd+0x274>
 8000680:	003a      	movs	r2, r7
 8000682:	430a      	orrs	r2, r1
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x1cc>
 8000686:	e105      	b.n	8000894 <__aeabi_dadd+0x3d8>
 8000688:	0022      	movs	r2, r4
 800068a:	3a01      	subs	r2, #1
 800068c:	2c01      	cmp	r4, #1
 800068e:	d100      	bne.n	8000692 <__aeabi_dadd+0x1d6>
 8000690:	e182      	b.n	8000998 <__aeabi_dadd+0x4dc>
 8000692:	4c64      	ldr	r4, [pc, #400]	; (8000824 <__aeabi_dadd+0x368>)
 8000694:	45a4      	cmp	ip, r4
 8000696:	d05b      	beq.n	8000750 <__aeabi_dadd+0x294>
 8000698:	4694      	mov	ip, r2
 800069a:	e741      	b.n	8000520 <__aeabi_dadd+0x64>
 800069c:	4c63      	ldr	r4, [pc, #396]	; (800082c <__aeabi_dadd+0x370>)
 800069e:	1c77      	adds	r7, r6, #1
 80006a0:	4227      	tst	r7, r4
 80006a2:	d000      	beq.n	80006a6 <__aeabi_dadd+0x1ea>
 80006a4:	e0c4      	b.n	8000830 <__aeabi_dadd+0x374>
 80006a6:	0004      	movs	r4, r0
 80006a8:	431c      	orrs	r4, r3
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d000      	beq.n	80006b0 <__aeabi_dadd+0x1f4>
 80006ae:	e169      	b.n	8000984 <__aeabi_dadd+0x4c8>
 80006b0:	2c00      	cmp	r4, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x1fa>
 80006b4:	e1bf      	b.n	8000a36 <__aeabi_dadd+0x57a>
 80006b6:	4644      	mov	r4, r8
 80006b8:	430c      	orrs	r4, r1
 80006ba:	d000      	beq.n	80006be <__aeabi_dadd+0x202>
 80006bc:	e1d0      	b.n	8000a60 <__aeabi_dadd+0x5a4>
 80006be:	0742      	lsls	r2, r0, #29
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	08c0      	lsrs	r0, r0, #3
 80006c6:	e029      	b.n	800071c <__aeabi_dadd+0x260>
 80006c8:	003a      	movs	r2, r7
 80006ca:	430a      	orrs	r2, r1
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x214>
 80006ce:	e170      	b.n	80009b2 <__aeabi_dadd+0x4f6>
 80006d0:	4662      	mov	r2, ip
 80006d2:	4664      	mov	r4, ip
 80006d4:	3a01      	subs	r2, #1
 80006d6:	2c01      	cmp	r4, #1
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x220>
 80006da:	e0e0      	b.n	800089e <__aeabi_dadd+0x3e2>
 80006dc:	4c51      	ldr	r4, [pc, #324]	; (8000824 <__aeabi_dadd+0x368>)
 80006de:	45a4      	cmp	ip, r4
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x228>
 80006e2:	e161      	b.n	80009a8 <__aeabi_dadd+0x4ec>
 80006e4:	4694      	mov	ip, r2
 80006e6:	e7b4      	b.n	8000652 <__aeabi_dadd+0x196>
 80006e8:	003a      	movs	r2, r7
 80006ea:	391f      	subs	r1, #31
 80006ec:	40ca      	lsrs	r2, r1
 80006ee:	0011      	movs	r1, r2
 80006f0:	2b20      	cmp	r3, #32
 80006f2:	d003      	beq.n	80006fc <__aeabi_dadd+0x240>
 80006f4:	2240      	movs	r2, #64	; 0x40
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	409f      	lsls	r7, r3
 80006fa:	433c      	orrs	r4, r7
 80006fc:	1e63      	subs	r3, r4, #1
 80006fe:	419c      	sbcs	r4, r3
 8000700:	2700      	movs	r7, #0
 8000702:	2600      	movs	r6, #0
 8000704:	430c      	orrs	r4, r1
 8000706:	0763      	lsls	r3, r4, #29
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x250>
 800070a:	e753      	b.n	80005b4 <__aeabi_dadd+0xf8>
 800070c:	46b4      	mov	ip, r6
 800070e:	08e4      	lsrs	r4, r4, #3
 8000710:	077b      	lsls	r3, r7, #29
 8000712:	4323      	orrs	r3, r4
 8000714:	08f8      	lsrs	r0, r7, #3
 8000716:	4a43      	ldr	r2, [pc, #268]	; (8000824 <__aeabi_dadd+0x368>)
 8000718:	4594      	cmp	ip, r2
 800071a:	d01d      	beq.n	8000758 <__aeabi_dadd+0x29c>
 800071c:	4662      	mov	r2, ip
 800071e:	0307      	lsls	r7, r0, #12
 8000720:	0552      	lsls	r2, r2, #21
 8000722:	0b3f      	lsrs	r7, r7, #12
 8000724:	0d52      	lsrs	r2, r2, #21
 8000726:	e760      	b.n	80005ea <__aeabi_dadd+0x12e>
 8000728:	4644      	mov	r4, r8
 800072a:	430c      	orrs	r4, r1
 800072c:	1e62      	subs	r2, r4, #1
 800072e:	4194      	sbcs	r4, r2
 8000730:	18e4      	adds	r4, r4, r3
 8000732:	429c      	cmp	r4, r3
 8000734:	419b      	sbcs	r3, r3
 8000736:	425f      	negs	r7, r3
 8000738:	183f      	adds	r7, r7, r0
 800073a:	023b      	lsls	r3, r7, #8
 800073c:	d5e3      	bpl.n	8000706 <__aeabi_dadd+0x24a>
 800073e:	4b39      	ldr	r3, [pc, #228]	; (8000824 <__aeabi_dadd+0x368>)
 8000740:	3601      	adds	r6, #1
 8000742:	429e      	cmp	r6, r3
 8000744:	d000      	beq.n	8000748 <__aeabi_dadd+0x28c>
 8000746:	e0b5      	b.n	80008b4 <__aeabi_dadd+0x3f8>
 8000748:	0032      	movs	r2, r6
 800074a:	2700      	movs	r7, #0
 800074c:	2300      	movs	r3, #0
 800074e:	e74c      	b.n	80005ea <__aeabi_dadd+0x12e>
 8000750:	0742      	lsls	r2, r0, #29
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	4313      	orrs	r3, r2
 8000756:	08c0      	lsrs	r0, r0, #3
 8000758:	001a      	movs	r2, r3
 800075a:	4302      	orrs	r2, r0
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x2a4>
 800075e:	e1e1      	b.n	8000b24 <__aeabi_dadd+0x668>
 8000760:	2780      	movs	r7, #128	; 0x80
 8000762:	033f      	lsls	r7, r7, #12
 8000764:	4307      	orrs	r7, r0
 8000766:	033f      	lsls	r7, r7, #12
 8000768:	4a2e      	ldr	r2, [pc, #184]	; (8000824 <__aeabi_dadd+0x368>)
 800076a:	0b3f      	lsrs	r7, r7, #12
 800076c:	e73d      	b.n	80005ea <__aeabi_dadd+0x12e>
 800076e:	0020      	movs	r0, r4
 8000770:	f001 fd5a 	bl	8002228 <__clzsi2>
 8000774:	0001      	movs	r1, r0
 8000776:	3118      	adds	r1, #24
 8000778:	291f      	cmp	r1, #31
 800077a:	dc00      	bgt.n	800077e <__aeabi_dadd+0x2c2>
 800077c:	e6fc      	b.n	8000578 <__aeabi_dadd+0xbc>
 800077e:	3808      	subs	r0, #8
 8000780:	4084      	lsls	r4, r0
 8000782:	0027      	movs	r7, r4
 8000784:	2400      	movs	r4, #0
 8000786:	42b1      	cmp	r1, r6
 8000788:	db00      	blt.n	800078c <__aeabi_dadd+0x2d0>
 800078a:	e6ff      	b.n	800058c <__aeabi_dadd+0xd0>
 800078c:	4a26      	ldr	r2, [pc, #152]	; (8000828 <__aeabi_dadd+0x36c>)
 800078e:	1a76      	subs	r6, r6, r1
 8000790:	4017      	ands	r7, r2
 8000792:	e70d      	b.n	80005b0 <__aeabi_dadd+0xf4>
 8000794:	2a00      	cmp	r2, #0
 8000796:	d02f      	beq.n	80007f8 <__aeabi_dadd+0x33c>
 8000798:	464a      	mov	r2, r9
 800079a:	1b92      	subs	r2, r2, r6
 800079c:	4694      	mov	ip, r2
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x2e8>
 80007a2:	e0ad      	b.n	8000900 <__aeabi_dadd+0x444>
 80007a4:	4a1f      	ldr	r2, [pc, #124]	; (8000824 <__aeabi_dadd+0x368>)
 80007a6:	4591      	cmp	r9, r2
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x2f0>
 80007aa:	e10f      	b.n	80009cc <__aeabi_dadd+0x510>
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	0412      	lsls	r2, r2, #16
 80007b0:	4310      	orrs	r0, r2
 80007b2:	4662      	mov	r2, ip
 80007b4:	2a38      	cmp	r2, #56	; 0x38
 80007b6:	dd00      	ble.n	80007ba <__aeabi_dadd+0x2fe>
 80007b8:	e10f      	b.n	80009da <__aeabi_dadd+0x51e>
 80007ba:	2a1f      	cmp	r2, #31
 80007bc:	dd00      	ble.n	80007c0 <__aeabi_dadd+0x304>
 80007be:	e180      	b.n	8000ac2 <__aeabi_dadd+0x606>
 80007c0:	4664      	mov	r4, ip
 80007c2:	2220      	movs	r2, #32
 80007c4:	001e      	movs	r6, r3
 80007c6:	1b12      	subs	r2, r2, r4
 80007c8:	4667      	mov	r7, ip
 80007ca:	0004      	movs	r4, r0
 80007cc:	4093      	lsls	r3, r2
 80007ce:	4094      	lsls	r4, r2
 80007d0:	40fe      	lsrs	r6, r7
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	4193      	sbcs	r3, r2
 80007d6:	40f8      	lsrs	r0, r7
 80007d8:	4334      	orrs	r4, r6
 80007da:	431c      	orrs	r4, r3
 80007dc:	4480      	add	r8, r0
 80007de:	1864      	adds	r4, r4, r1
 80007e0:	428c      	cmp	r4, r1
 80007e2:	41bf      	sbcs	r7, r7
 80007e4:	427f      	negs	r7, r7
 80007e6:	464e      	mov	r6, r9
 80007e8:	4447      	add	r7, r8
 80007ea:	e7a6      	b.n	800073a <__aeabi_dadd+0x27e>
 80007ec:	4642      	mov	r2, r8
 80007ee:	430a      	orrs	r2, r1
 80007f0:	0011      	movs	r1, r2
 80007f2:	1e4a      	subs	r2, r1, #1
 80007f4:	4191      	sbcs	r1, r2
 80007f6:	e6ad      	b.n	8000554 <__aeabi_dadd+0x98>
 80007f8:	4c0c      	ldr	r4, [pc, #48]	; (800082c <__aeabi_dadd+0x370>)
 80007fa:	1c72      	adds	r2, r6, #1
 80007fc:	4222      	tst	r2, r4
 80007fe:	d000      	beq.n	8000802 <__aeabi_dadd+0x346>
 8000800:	e0a1      	b.n	8000946 <__aeabi_dadd+0x48a>
 8000802:	0002      	movs	r2, r0
 8000804:	431a      	orrs	r2, r3
 8000806:	2e00      	cmp	r6, #0
 8000808:	d000      	beq.n	800080c <__aeabi_dadd+0x350>
 800080a:	e0fa      	b.n	8000a02 <__aeabi_dadd+0x546>
 800080c:	2a00      	cmp	r2, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x356>
 8000810:	e145      	b.n	8000a9e <__aeabi_dadd+0x5e2>
 8000812:	003a      	movs	r2, r7
 8000814:	430a      	orrs	r2, r1
 8000816:	d000      	beq.n	800081a <__aeabi_dadd+0x35e>
 8000818:	e146      	b.n	8000aa8 <__aeabi_dadd+0x5ec>
 800081a:	0742      	lsls	r2, r0, #29
 800081c:	08db      	lsrs	r3, r3, #3
 800081e:	4313      	orrs	r3, r2
 8000820:	08c0      	lsrs	r0, r0, #3
 8000822:	e77b      	b.n	800071c <__aeabi_dadd+0x260>
 8000824:	000007ff 	.word	0x000007ff
 8000828:	ff7fffff 	.word	0xff7fffff
 800082c:	000007fe 	.word	0x000007fe
 8000830:	4647      	mov	r7, r8
 8000832:	1a5c      	subs	r4, r3, r1
 8000834:	1bc2      	subs	r2, r0, r7
 8000836:	42a3      	cmp	r3, r4
 8000838:	41bf      	sbcs	r7, r7
 800083a:	427f      	negs	r7, r7
 800083c:	46b9      	mov	r9, r7
 800083e:	0017      	movs	r7, r2
 8000840:	464a      	mov	r2, r9
 8000842:	1abf      	subs	r7, r7, r2
 8000844:	023a      	lsls	r2, r7, #8
 8000846:	d500      	bpl.n	800084a <__aeabi_dadd+0x38e>
 8000848:	e08d      	b.n	8000966 <__aeabi_dadd+0x4aa>
 800084a:	0023      	movs	r3, r4
 800084c:	433b      	orrs	r3, r7
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x396>
 8000850:	e68a      	b.n	8000568 <__aeabi_dadd+0xac>
 8000852:	2000      	movs	r0, #0
 8000854:	2500      	movs	r5, #0
 8000856:	e761      	b.n	800071c <__aeabi_dadd+0x260>
 8000858:	4cb4      	ldr	r4, [pc, #720]	; (8000b2c <__aeabi_dadd+0x670>)
 800085a:	45a1      	cmp	r9, r4
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x3a4>
 800085e:	e0ad      	b.n	80009bc <__aeabi_dadd+0x500>
 8000860:	2480      	movs	r4, #128	; 0x80
 8000862:	0424      	lsls	r4, r4, #16
 8000864:	4320      	orrs	r0, r4
 8000866:	4664      	mov	r4, ip
 8000868:	2c38      	cmp	r4, #56	; 0x38
 800086a:	dc3d      	bgt.n	80008e8 <__aeabi_dadd+0x42c>
 800086c:	4662      	mov	r2, ip
 800086e:	2c1f      	cmp	r4, #31
 8000870:	dd00      	ble.n	8000874 <__aeabi_dadd+0x3b8>
 8000872:	e0b7      	b.n	80009e4 <__aeabi_dadd+0x528>
 8000874:	2520      	movs	r5, #32
 8000876:	001e      	movs	r6, r3
 8000878:	1b2d      	subs	r5, r5, r4
 800087a:	0004      	movs	r4, r0
 800087c:	40ab      	lsls	r3, r5
 800087e:	40ac      	lsls	r4, r5
 8000880:	40d6      	lsrs	r6, r2
 8000882:	40d0      	lsrs	r0, r2
 8000884:	4642      	mov	r2, r8
 8000886:	1e5d      	subs	r5, r3, #1
 8000888:	41ab      	sbcs	r3, r5
 800088a:	4334      	orrs	r4, r6
 800088c:	1a12      	subs	r2, r2, r0
 800088e:	4690      	mov	r8, r2
 8000890:	4323      	orrs	r3, r4
 8000892:	e02c      	b.n	80008ee <__aeabi_dadd+0x432>
 8000894:	0742      	lsls	r2, r0, #29
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	4313      	orrs	r3, r2
 800089a:	08c0      	lsrs	r0, r0, #3
 800089c:	e73b      	b.n	8000716 <__aeabi_dadd+0x25a>
 800089e:	185c      	adds	r4, r3, r1
 80008a0:	429c      	cmp	r4, r3
 80008a2:	419b      	sbcs	r3, r3
 80008a4:	4440      	add	r0, r8
 80008a6:	425b      	negs	r3, r3
 80008a8:	18c7      	adds	r7, r0, r3
 80008aa:	2601      	movs	r6, #1
 80008ac:	023b      	lsls	r3, r7, #8
 80008ae:	d400      	bmi.n	80008b2 <__aeabi_dadd+0x3f6>
 80008b0:	e729      	b.n	8000706 <__aeabi_dadd+0x24a>
 80008b2:	2602      	movs	r6, #2
 80008b4:	4a9e      	ldr	r2, [pc, #632]	; (8000b30 <__aeabi_dadd+0x674>)
 80008b6:	0863      	lsrs	r3, r4, #1
 80008b8:	4017      	ands	r7, r2
 80008ba:	2201      	movs	r2, #1
 80008bc:	4014      	ands	r4, r2
 80008be:	431c      	orrs	r4, r3
 80008c0:	07fb      	lsls	r3, r7, #31
 80008c2:	431c      	orrs	r4, r3
 80008c4:	087f      	lsrs	r7, r7, #1
 80008c6:	e673      	b.n	80005b0 <__aeabi_dadd+0xf4>
 80008c8:	4644      	mov	r4, r8
 80008ca:	3a20      	subs	r2, #32
 80008cc:	40d4      	lsrs	r4, r2
 80008ce:	4662      	mov	r2, ip
 80008d0:	2a20      	cmp	r2, #32
 80008d2:	d005      	beq.n	80008e0 <__aeabi_dadd+0x424>
 80008d4:	4667      	mov	r7, ip
 80008d6:	2240      	movs	r2, #64	; 0x40
 80008d8:	1bd2      	subs	r2, r2, r7
 80008da:	4647      	mov	r7, r8
 80008dc:	4097      	lsls	r7, r2
 80008de:	4339      	orrs	r1, r7
 80008e0:	1e4a      	subs	r2, r1, #1
 80008e2:	4191      	sbcs	r1, r2
 80008e4:	4321      	orrs	r1, r4
 80008e6:	e635      	b.n	8000554 <__aeabi_dadd+0x98>
 80008e8:	4303      	orrs	r3, r0
 80008ea:	1e58      	subs	r0, r3, #1
 80008ec:	4183      	sbcs	r3, r0
 80008ee:	1acc      	subs	r4, r1, r3
 80008f0:	42a1      	cmp	r1, r4
 80008f2:	41bf      	sbcs	r7, r7
 80008f4:	4643      	mov	r3, r8
 80008f6:	427f      	negs	r7, r7
 80008f8:	4655      	mov	r5, sl
 80008fa:	464e      	mov	r6, r9
 80008fc:	1bdf      	subs	r7, r3, r7
 80008fe:	e62e      	b.n	800055e <__aeabi_dadd+0xa2>
 8000900:	0002      	movs	r2, r0
 8000902:	431a      	orrs	r2, r3
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x44c>
 8000906:	e0bd      	b.n	8000a84 <__aeabi_dadd+0x5c8>
 8000908:	4662      	mov	r2, ip
 800090a:	4664      	mov	r4, ip
 800090c:	3a01      	subs	r2, #1
 800090e:	2c01      	cmp	r4, #1
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x458>
 8000912:	e0e5      	b.n	8000ae0 <__aeabi_dadd+0x624>
 8000914:	4c85      	ldr	r4, [pc, #532]	; (8000b2c <__aeabi_dadd+0x670>)
 8000916:	45a4      	cmp	ip, r4
 8000918:	d058      	beq.n	80009cc <__aeabi_dadd+0x510>
 800091a:	4694      	mov	ip, r2
 800091c:	e749      	b.n	80007b2 <__aeabi_dadd+0x2f6>
 800091e:	4664      	mov	r4, ip
 8000920:	2220      	movs	r2, #32
 8000922:	1b12      	subs	r2, r2, r4
 8000924:	4644      	mov	r4, r8
 8000926:	4094      	lsls	r4, r2
 8000928:	000f      	movs	r7, r1
 800092a:	46a1      	mov	r9, r4
 800092c:	4664      	mov	r4, ip
 800092e:	4091      	lsls	r1, r2
 8000930:	40e7      	lsrs	r7, r4
 8000932:	464c      	mov	r4, r9
 8000934:	1e4a      	subs	r2, r1, #1
 8000936:	4191      	sbcs	r1, r2
 8000938:	433c      	orrs	r4, r7
 800093a:	4642      	mov	r2, r8
 800093c:	430c      	orrs	r4, r1
 800093e:	4661      	mov	r1, ip
 8000940:	40ca      	lsrs	r2, r1
 8000942:	1880      	adds	r0, r0, r2
 8000944:	e6f4      	b.n	8000730 <__aeabi_dadd+0x274>
 8000946:	4c79      	ldr	r4, [pc, #484]	; (8000b2c <__aeabi_dadd+0x670>)
 8000948:	42a2      	cmp	r2, r4
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x492>
 800094c:	e6fd      	b.n	800074a <__aeabi_dadd+0x28e>
 800094e:	1859      	adds	r1, r3, r1
 8000950:	4299      	cmp	r1, r3
 8000952:	419b      	sbcs	r3, r3
 8000954:	4440      	add	r0, r8
 8000956:	425f      	negs	r7, r3
 8000958:	19c7      	adds	r7, r0, r7
 800095a:	07fc      	lsls	r4, r7, #31
 800095c:	0849      	lsrs	r1, r1, #1
 800095e:	0016      	movs	r6, r2
 8000960:	430c      	orrs	r4, r1
 8000962:	087f      	lsrs	r7, r7, #1
 8000964:	e6cf      	b.n	8000706 <__aeabi_dadd+0x24a>
 8000966:	1acc      	subs	r4, r1, r3
 8000968:	42a1      	cmp	r1, r4
 800096a:	41bf      	sbcs	r7, r7
 800096c:	4643      	mov	r3, r8
 800096e:	427f      	negs	r7, r7
 8000970:	1a18      	subs	r0, r3, r0
 8000972:	4655      	mov	r5, sl
 8000974:	1bc7      	subs	r7, r0, r7
 8000976:	e5f7      	b.n	8000568 <__aeabi_dadd+0xac>
 8000978:	08c9      	lsrs	r1, r1, #3
 800097a:	077b      	lsls	r3, r7, #29
 800097c:	4655      	mov	r5, sl
 800097e:	430b      	orrs	r3, r1
 8000980:	08f8      	lsrs	r0, r7, #3
 8000982:	e6c8      	b.n	8000716 <__aeabi_dadd+0x25a>
 8000984:	2c00      	cmp	r4, #0
 8000986:	d000      	beq.n	800098a <__aeabi_dadd+0x4ce>
 8000988:	e081      	b.n	8000a8e <__aeabi_dadd+0x5d2>
 800098a:	4643      	mov	r3, r8
 800098c:	430b      	orrs	r3, r1
 800098e:	d115      	bne.n	80009bc <__aeabi_dadd+0x500>
 8000990:	2080      	movs	r0, #128	; 0x80
 8000992:	2500      	movs	r5, #0
 8000994:	0300      	lsls	r0, r0, #12
 8000996:	e6e3      	b.n	8000760 <__aeabi_dadd+0x2a4>
 8000998:	1a5c      	subs	r4, r3, r1
 800099a:	42a3      	cmp	r3, r4
 800099c:	419b      	sbcs	r3, r3
 800099e:	1bc7      	subs	r7, r0, r7
 80009a0:	425b      	negs	r3, r3
 80009a2:	2601      	movs	r6, #1
 80009a4:	1aff      	subs	r7, r7, r3
 80009a6:	e5da      	b.n	800055e <__aeabi_dadd+0xa2>
 80009a8:	0742      	lsls	r2, r0, #29
 80009aa:	08db      	lsrs	r3, r3, #3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	08c0      	lsrs	r0, r0, #3
 80009b0:	e6d2      	b.n	8000758 <__aeabi_dadd+0x29c>
 80009b2:	0742      	lsls	r2, r0, #29
 80009b4:	08db      	lsrs	r3, r3, #3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	08c0      	lsrs	r0, r0, #3
 80009ba:	e6ac      	b.n	8000716 <__aeabi_dadd+0x25a>
 80009bc:	4643      	mov	r3, r8
 80009be:	4642      	mov	r2, r8
 80009c0:	08c9      	lsrs	r1, r1, #3
 80009c2:	075b      	lsls	r3, r3, #29
 80009c4:	4655      	mov	r5, sl
 80009c6:	430b      	orrs	r3, r1
 80009c8:	08d0      	lsrs	r0, r2, #3
 80009ca:	e6c5      	b.n	8000758 <__aeabi_dadd+0x29c>
 80009cc:	4643      	mov	r3, r8
 80009ce:	4642      	mov	r2, r8
 80009d0:	075b      	lsls	r3, r3, #29
 80009d2:	08c9      	lsrs	r1, r1, #3
 80009d4:	430b      	orrs	r3, r1
 80009d6:	08d0      	lsrs	r0, r2, #3
 80009d8:	e6be      	b.n	8000758 <__aeabi_dadd+0x29c>
 80009da:	4303      	orrs	r3, r0
 80009dc:	001c      	movs	r4, r3
 80009de:	1e63      	subs	r3, r4, #1
 80009e0:	419c      	sbcs	r4, r3
 80009e2:	e6fc      	b.n	80007de <__aeabi_dadd+0x322>
 80009e4:	0002      	movs	r2, r0
 80009e6:	3c20      	subs	r4, #32
 80009e8:	40e2      	lsrs	r2, r4
 80009ea:	0014      	movs	r4, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	2a20      	cmp	r2, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x53e>
 80009f2:	2540      	movs	r5, #64	; 0x40
 80009f4:	1aad      	subs	r5, r5, r2
 80009f6:	40a8      	lsls	r0, r5
 80009f8:	4303      	orrs	r3, r0
 80009fa:	1e58      	subs	r0, r3, #1
 80009fc:	4183      	sbcs	r3, r0
 80009fe:	4323      	orrs	r3, r4
 8000a00:	e775      	b.n	80008ee <__aeabi_dadd+0x432>
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d0e2      	beq.n	80009cc <__aeabi_dadd+0x510>
 8000a06:	003a      	movs	r2, r7
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	d0cd      	beq.n	80009a8 <__aeabi_dadd+0x4ec>
 8000a0c:	0742      	lsls	r2, r0, #29
 8000a0e:	08db      	lsrs	r3, r3, #3
 8000a10:	4313      	orrs	r3, r2
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	08c0      	lsrs	r0, r0, #3
 8000a16:	0312      	lsls	r2, r2, #12
 8000a18:	4210      	tst	r0, r2
 8000a1a:	d006      	beq.n	8000a2a <__aeabi_dadd+0x56e>
 8000a1c:	08fc      	lsrs	r4, r7, #3
 8000a1e:	4214      	tst	r4, r2
 8000a20:	d103      	bne.n	8000a2a <__aeabi_dadd+0x56e>
 8000a22:	0020      	movs	r0, r4
 8000a24:	08cb      	lsrs	r3, r1, #3
 8000a26:	077a      	lsls	r2, r7, #29
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	0f5a      	lsrs	r2, r3, #29
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	0752      	lsls	r2, r2, #29
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	4313      	orrs	r3, r2
 8000a34:	e690      	b.n	8000758 <__aeabi_dadd+0x29c>
 8000a36:	4643      	mov	r3, r8
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dadd+0x582>
 8000a3c:	e709      	b.n	8000852 <__aeabi_dadd+0x396>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	4642      	mov	r2, r8
 8000a42:	08c9      	lsrs	r1, r1, #3
 8000a44:	075b      	lsls	r3, r3, #29
 8000a46:	4655      	mov	r5, sl
 8000a48:	430b      	orrs	r3, r1
 8000a4a:	08d0      	lsrs	r0, r2, #3
 8000a4c:	e666      	b.n	800071c <__aeabi_dadd+0x260>
 8000a4e:	1acc      	subs	r4, r1, r3
 8000a50:	42a1      	cmp	r1, r4
 8000a52:	4189      	sbcs	r1, r1
 8000a54:	1a3f      	subs	r7, r7, r0
 8000a56:	4249      	negs	r1, r1
 8000a58:	4655      	mov	r5, sl
 8000a5a:	2601      	movs	r6, #1
 8000a5c:	1a7f      	subs	r7, r7, r1
 8000a5e:	e57e      	b.n	800055e <__aeabi_dadd+0xa2>
 8000a60:	4642      	mov	r2, r8
 8000a62:	1a5c      	subs	r4, r3, r1
 8000a64:	1a87      	subs	r7, r0, r2
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	4192      	sbcs	r2, r2
 8000a6a:	4252      	negs	r2, r2
 8000a6c:	1abf      	subs	r7, r7, r2
 8000a6e:	023a      	lsls	r2, r7, #8
 8000a70:	d53d      	bpl.n	8000aee <__aeabi_dadd+0x632>
 8000a72:	1acc      	subs	r4, r1, r3
 8000a74:	42a1      	cmp	r1, r4
 8000a76:	4189      	sbcs	r1, r1
 8000a78:	4643      	mov	r3, r8
 8000a7a:	4249      	negs	r1, r1
 8000a7c:	1a1f      	subs	r7, r3, r0
 8000a7e:	4655      	mov	r5, sl
 8000a80:	1a7f      	subs	r7, r7, r1
 8000a82:	e595      	b.n	80005b0 <__aeabi_dadd+0xf4>
 8000a84:	077b      	lsls	r3, r7, #29
 8000a86:	08c9      	lsrs	r1, r1, #3
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	08f8      	lsrs	r0, r7, #3
 8000a8c:	e643      	b.n	8000716 <__aeabi_dadd+0x25a>
 8000a8e:	4644      	mov	r4, r8
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	430c      	orrs	r4, r1
 8000a94:	d130      	bne.n	8000af8 <__aeabi_dadd+0x63c>
 8000a96:	0742      	lsls	r2, r0, #29
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	08c0      	lsrs	r0, r0, #3
 8000a9c:	e65c      	b.n	8000758 <__aeabi_dadd+0x29c>
 8000a9e:	077b      	lsls	r3, r7, #29
 8000aa0:	08c9      	lsrs	r1, r1, #3
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	08f8      	lsrs	r0, r7, #3
 8000aa6:	e639      	b.n	800071c <__aeabi_dadd+0x260>
 8000aa8:	185c      	adds	r4, r3, r1
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	419b      	sbcs	r3, r3
 8000aae:	4440      	add	r0, r8
 8000ab0:	425b      	negs	r3, r3
 8000ab2:	18c7      	adds	r7, r0, r3
 8000ab4:	023b      	lsls	r3, r7, #8
 8000ab6:	d400      	bmi.n	8000aba <__aeabi_dadd+0x5fe>
 8000ab8:	e625      	b.n	8000706 <__aeabi_dadd+0x24a>
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <__aeabi_dadd+0x674>)
 8000abc:	2601      	movs	r6, #1
 8000abe:	401f      	ands	r7, r3
 8000ac0:	e621      	b.n	8000706 <__aeabi_dadd+0x24a>
 8000ac2:	0004      	movs	r4, r0
 8000ac4:	3a20      	subs	r2, #32
 8000ac6:	40d4      	lsrs	r4, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	2a20      	cmp	r2, #32
 8000acc:	d004      	beq.n	8000ad8 <__aeabi_dadd+0x61c>
 8000ace:	2240      	movs	r2, #64	; 0x40
 8000ad0:	4666      	mov	r6, ip
 8000ad2:	1b92      	subs	r2, r2, r6
 8000ad4:	4090      	lsls	r0, r2
 8000ad6:	4303      	orrs	r3, r0
 8000ad8:	1e5a      	subs	r2, r3, #1
 8000ada:	4193      	sbcs	r3, r2
 8000adc:	431c      	orrs	r4, r3
 8000ade:	e67e      	b.n	80007de <__aeabi_dadd+0x322>
 8000ae0:	185c      	adds	r4, r3, r1
 8000ae2:	428c      	cmp	r4, r1
 8000ae4:	4189      	sbcs	r1, r1
 8000ae6:	4440      	add	r0, r8
 8000ae8:	4249      	negs	r1, r1
 8000aea:	1847      	adds	r7, r0, r1
 8000aec:	e6dd      	b.n	80008aa <__aeabi_dadd+0x3ee>
 8000aee:	0023      	movs	r3, r4
 8000af0:	433b      	orrs	r3, r7
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dadd+0x63a>
 8000af4:	e6ad      	b.n	8000852 <__aeabi_dadd+0x396>
 8000af6:	e606      	b.n	8000706 <__aeabi_dadd+0x24a>
 8000af8:	0744      	lsls	r4, r0, #29
 8000afa:	4323      	orrs	r3, r4
 8000afc:	2480      	movs	r4, #128	; 0x80
 8000afe:	08c0      	lsrs	r0, r0, #3
 8000b00:	0324      	lsls	r4, r4, #12
 8000b02:	4220      	tst	r0, r4
 8000b04:	d008      	beq.n	8000b18 <__aeabi_dadd+0x65c>
 8000b06:	4642      	mov	r2, r8
 8000b08:	08d6      	lsrs	r6, r2, #3
 8000b0a:	4226      	tst	r6, r4
 8000b0c:	d104      	bne.n	8000b18 <__aeabi_dadd+0x65c>
 8000b0e:	4655      	mov	r5, sl
 8000b10:	0030      	movs	r0, r6
 8000b12:	08cb      	lsrs	r3, r1, #3
 8000b14:	0751      	lsls	r1, r2, #29
 8000b16:	430b      	orrs	r3, r1
 8000b18:	0f5a      	lsrs	r2, r3, #29
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	0752      	lsls	r2, r2, #29
 8000b20:	4313      	orrs	r3, r2
 8000b22:	e619      	b.n	8000758 <__aeabi_dadd+0x29c>
 8000b24:	2300      	movs	r3, #0
 8000b26:	4a01      	ldr	r2, [pc, #4]	; (8000b2c <__aeabi_dadd+0x670>)
 8000b28:	001f      	movs	r7, r3
 8000b2a:	e55e      	b.n	80005ea <__aeabi_dadd+0x12e>
 8000b2c:	000007ff 	.word	0x000007ff
 8000b30:	ff7fffff 	.word	0xff7fffff

08000b34 <__aeabi_ddiv>:
 8000b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b36:	4657      	mov	r7, sl
 8000b38:	464e      	mov	r6, r9
 8000b3a:	4645      	mov	r5, r8
 8000b3c:	46de      	mov	lr, fp
 8000b3e:	b5e0      	push	{r5, r6, r7, lr}
 8000b40:	4681      	mov	r9, r0
 8000b42:	0005      	movs	r5, r0
 8000b44:	030c      	lsls	r4, r1, #12
 8000b46:	0048      	lsls	r0, r1, #1
 8000b48:	4692      	mov	sl, r2
 8000b4a:	001f      	movs	r7, r3
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	0b24      	lsrs	r4, r4, #12
 8000b50:	0d40      	lsrs	r0, r0, #21
 8000b52:	0fce      	lsrs	r6, r1, #31
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d100      	bne.n	8000b5a <__aeabi_ddiv+0x26>
 8000b58:	e156      	b.n	8000e08 <__aeabi_ddiv+0x2d4>
 8000b5a:	4bd4      	ldr	r3, [pc, #848]	; (8000eac <__aeabi_ddiv+0x378>)
 8000b5c:	4298      	cmp	r0, r3
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_ddiv+0x2e>
 8000b60:	e172      	b.n	8000e48 <__aeabi_ddiv+0x314>
 8000b62:	0f6b      	lsrs	r3, r5, #29
 8000b64:	00e4      	lsls	r4, r4, #3
 8000b66:	431c      	orrs	r4, r3
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	041b      	lsls	r3, r3, #16
 8000b6c:	4323      	orrs	r3, r4
 8000b6e:	4698      	mov	r8, r3
 8000b70:	4bcf      	ldr	r3, [pc, #828]	; (8000eb0 <__aeabi_ddiv+0x37c>)
 8000b72:	00ed      	lsls	r5, r5, #3
 8000b74:	469b      	mov	fp, r3
 8000b76:	2300      	movs	r3, #0
 8000b78:	4699      	mov	r9, r3
 8000b7a:	4483      	add	fp, r0
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	033c      	lsls	r4, r7, #12
 8000b80:	007b      	lsls	r3, r7, #1
 8000b82:	4650      	mov	r0, sl
 8000b84:	0b24      	lsrs	r4, r4, #12
 8000b86:	0d5b      	lsrs	r3, r3, #21
 8000b88:	0fff      	lsrs	r7, r7, #31
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_ddiv+0x5c>
 8000b8e:	e11f      	b.n	8000dd0 <__aeabi_ddiv+0x29c>
 8000b90:	4ac6      	ldr	r2, [pc, #792]	; (8000eac <__aeabi_ddiv+0x378>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x64>
 8000b96:	e162      	b.n	8000e5e <__aeabi_ddiv+0x32a>
 8000b98:	49c5      	ldr	r1, [pc, #788]	; (8000eb0 <__aeabi_ddiv+0x37c>)
 8000b9a:	0f42      	lsrs	r2, r0, #29
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	00e4      	lsls	r4, r4, #3
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	4314      	orrs	r4, r2
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	4463      	add	r3, ip
 8000ba8:	0412      	lsls	r2, r2, #16
 8000baa:	1acb      	subs	r3, r1, r3
 8000bac:	4314      	orrs	r4, r2
 8000bae:	469b      	mov	fp, r3
 8000bb0:	00c2      	lsls	r2, r0, #3
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	0033      	movs	r3, r6
 8000bb6:	407b      	eors	r3, r7
 8000bb8:	469a      	mov	sl, r3
 8000bba:	464b      	mov	r3, r9
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d827      	bhi.n	8000c10 <__aeabi_ddiv+0xdc>
 8000bc0:	49bc      	ldr	r1, [pc, #752]	; (8000eb4 <__aeabi_ddiv+0x380>)
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	58cb      	ldr	r3, [r1, r3]
 8000bc6:	469f      	mov	pc, r3
 8000bc8:	46b2      	mov	sl, r6
 8000bca:	9b00      	ldr	r3, [sp, #0]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d016      	beq.n	8000bfe <__aeabi_ddiv+0xca>
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_ddiv+0xa2>
 8000bd4:	e28e      	b.n	80010f4 <__aeabi_ddiv+0x5c0>
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d000      	beq.n	8000bdc <__aeabi_ddiv+0xa8>
 8000bda:	e0d9      	b.n	8000d90 <__aeabi_ddiv+0x25c>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	2400      	movs	r4, #0
 8000be0:	2500      	movs	r5, #0
 8000be2:	4652      	mov	r2, sl
 8000be4:	051b      	lsls	r3, r3, #20
 8000be6:	4323      	orrs	r3, r4
 8000be8:	07d2      	lsls	r2, r2, #31
 8000bea:	4313      	orrs	r3, r2
 8000bec:	0028      	movs	r0, r5
 8000bee:	0019      	movs	r1, r3
 8000bf0:	b005      	add	sp, #20
 8000bf2:	bcf0      	pop	{r4, r5, r6, r7}
 8000bf4:	46bb      	mov	fp, r7
 8000bf6:	46b2      	mov	sl, r6
 8000bf8:	46a9      	mov	r9, r5
 8000bfa:	46a0      	mov	r8, r4
 8000bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bfe:	2400      	movs	r4, #0
 8000c00:	2500      	movs	r5, #0
 8000c02:	4baa      	ldr	r3, [pc, #680]	; (8000eac <__aeabi_ddiv+0x378>)
 8000c04:	e7ed      	b.n	8000be2 <__aeabi_ddiv+0xae>
 8000c06:	46ba      	mov	sl, r7
 8000c08:	46a0      	mov	r8, r4
 8000c0a:	0015      	movs	r5, r2
 8000c0c:	9000      	str	r0, [sp, #0]
 8000c0e:	e7dc      	b.n	8000bca <__aeabi_ddiv+0x96>
 8000c10:	4544      	cmp	r4, r8
 8000c12:	d200      	bcs.n	8000c16 <__aeabi_ddiv+0xe2>
 8000c14:	e1c7      	b.n	8000fa6 <__aeabi_ddiv+0x472>
 8000c16:	d100      	bne.n	8000c1a <__aeabi_ddiv+0xe6>
 8000c18:	e1c2      	b.n	8000fa0 <__aeabi_ddiv+0x46c>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	469c      	mov	ip, r3
 8000c20:	002e      	movs	r6, r5
 8000c22:	4640      	mov	r0, r8
 8000c24:	2500      	movs	r5, #0
 8000c26:	44e3      	add	fp, ip
 8000c28:	0223      	lsls	r3, r4, #8
 8000c2a:	0e14      	lsrs	r4, r2, #24
 8000c2c:	431c      	orrs	r4, r3
 8000c2e:	0c1b      	lsrs	r3, r3, #16
 8000c30:	4699      	mov	r9, r3
 8000c32:	0423      	lsls	r3, r4, #16
 8000c34:	0c1f      	lsrs	r7, r3, #16
 8000c36:	0212      	lsls	r2, r2, #8
 8000c38:	4649      	mov	r1, r9
 8000c3a:	9200      	str	r2, [sp, #0]
 8000c3c:	9701      	str	r7, [sp, #4]
 8000c3e:	f7ff fb0f 	bl	8000260 <__aeabi_uidivmod>
 8000c42:	0002      	movs	r2, r0
 8000c44:	437a      	muls	r2, r7
 8000c46:	040b      	lsls	r3, r1, #16
 8000c48:	0c31      	lsrs	r1, r6, #16
 8000c4a:	4680      	mov	r8, r0
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	428a      	cmp	r2, r1
 8000c50:	d907      	bls.n	8000c62 <__aeabi_ddiv+0x12e>
 8000c52:	2301      	movs	r3, #1
 8000c54:	425b      	negs	r3, r3
 8000c56:	469c      	mov	ip, r3
 8000c58:	1909      	adds	r1, r1, r4
 8000c5a:	44e0      	add	r8, ip
 8000c5c:	428c      	cmp	r4, r1
 8000c5e:	d800      	bhi.n	8000c62 <__aeabi_ddiv+0x12e>
 8000c60:	e207      	b.n	8001072 <__aeabi_ddiv+0x53e>
 8000c62:	1a88      	subs	r0, r1, r2
 8000c64:	4649      	mov	r1, r9
 8000c66:	f7ff fafb 	bl	8000260 <__aeabi_uidivmod>
 8000c6a:	0409      	lsls	r1, r1, #16
 8000c6c:	468c      	mov	ip, r1
 8000c6e:	0431      	lsls	r1, r6, #16
 8000c70:	4666      	mov	r6, ip
 8000c72:	9a01      	ldr	r2, [sp, #4]
 8000c74:	0c09      	lsrs	r1, r1, #16
 8000c76:	4342      	muls	r2, r0
 8000c78:	0003      	movs	r3, r0
 8000c7a:	4331      	orrs	r1, r6
 8000c7c:	428a      	cmp	r2, r1
 8000c7e:	d904      	bls.n	8000c8a <__aeabi_ddiv+0x156>
 8000c80:	1909      	adds	r1, r1, r4
 8000c82:	3b01      	subs	r3, #1
 8000c84:	428c      	cmp	r4, r1
 8000c86:	d800      	bhi.n	8000c8a <__aeabi_ddiv+0x156>
 8000c88:	e1ed      	b.n	8001066 <__aeabi_ddiv+0x532>
 8000c8a:	1a88      	subs	r0, r1, r2
 8000c8c:	4642      	mov	r2, r8
 8000c8e:	0412      	lsls	r2, r2, #16
 8000c90:	431a      	orrs	r2, r3
 8000c92:	4690      	mov	r8, r2
 8000c94:	4641      	mov	r1, r8
 8000c96:	9b00      	ldr	r3, [sp, #0]
 8000c98:	040e      	lsls	r6, r1, #16
 8000c9a:	0c1b      	lsrs	r3, r3, #16
 8000c9c:	001f      	movs	r7, r3
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	9b00      	ldr	r3, [sp, #0]
 8000ca2:	0c36      	lsrs	r6, r6, #16
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	0c19      	lsrs	r1, r3, #16
 8000ca8:	000b      	movs	r3, r1
 8000caa:	4373      	muls	r3, r6
 8000cac:	0c12      	lsrs	r2, r2, #16
 8000cae:	437e      	muls	r6, r7
 8000cb0:	9103      	str	r1, [sp, #12]
 8000cb2:	4351      	muls	r1, r2
 8000cb4:	437a      	muls	r2, r7
 8000cb6:	0c1f      	lsrs	r7, r3, #16
 8000cb8:	46bc      	mov	ip, r7
 8000cba:	1876      	adds	r6, r6, r1
 8000cbc:	4466      	add	r6, ip
 8000cbe:	42b1      	cmp	r1, r6
 8000cc0:	d903      	bls.n	8000cca <__aeabi_ddiv+0x196>
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	0249      	lsls	r1, r1, #9
 8000cc6:	468c      	mov	ip, r1
 8000cc8:	4462      	add	r2, ip
 8000cca:	0c31      	lsrs	r1, r6, #16
 8000ccc:	188a      	adds	r2, r1, r2
 8000cce:	0431      	lsls	r1, r6, #16
 8000cd0:	041e      	lsls	r6, r3, #16
 8000cd2:	0c36      	lsrs	r6, r6, #16
 8000cd4:	198e      	adds	r6, r1, r6
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d302      	bcc.n	8000ce0 <__aeabi_ddiv+0x1ac>
 8000cda:	d112      	bne.n	8000d02 <__aeabi_ddiv+0x1ce>
 8000cdc:	42b5      	cmp	r5, r6
 8000cde:	d210      	bcs.n	8000d02 <__aeabi_ddiv+0x1ce>
 8000ce0:	4643      	mov	r3, r8
 8000ce2:	1e59      	subs	r1, r3, #1
 8000ce4:	9b00      	ldr	r3, [sp, #0]
 8000ce6:	469c      	mov	ip, r3
 8000ce8:	4465      	add	r5, ip
 8000cea:	001f      	movs	r7, r3
 8000cec:	429d      	cmp	r5, r3
 8000cee:	419b      	sbcs	r3, r3
 8000cf0:	425b      	negs	r3, r3
 8000cf2:	191b      	adds	r3, r3, r4
 8000cf4:	18c0      	adds	r0, r0, r3
 8000cf6:	4284      	cmp	r4, r0
 8000cf8:	d200      	bcs.n	8000cfc <__aeabi_ddiv+0x1c8>
 8000cfa:	e1a0      	b.n	800103e <__aeabi_ddiv+0x50a>
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_ddiv+0x1cc>
 8000cfe:	e19b      	b.n	8001038 <__aeabi_ddiv+0x504>
 8000d00:	4688      	mov	r8, r1
 8000d02:	1bae      	subs	r6, r5, r6
 8000d04:	42b5      	cmp	r5, r6
 8000d06:	41ad      	sbcs	r5, r5
 8000d08:	1a80      	subs	r0, r0, r2
 8000d0a:	426d      	negs	r5, r5
 8000d0c:	1b40      	subs	r0, r0, r5
 8000d0e:	4284      	cmp	r4, r0
 8000d10:	d100      	bne.n	8000d14 <__aeabi_ddiv+0x1e0>
 8000d12:	e1d5      	b.n	80010c0 <__aeabi_ddiv+0x58c>
 8000d14:	4649      	mov	r1, r9
 8000d16:	f7ff faa3 	bl	8000260 <__aeabi_uidivmod>
 8000d1a:	9a01      	ldr	r2, [sp, #4]
 8000d1c:	040b      	lsls	r3, r1, #16
 8000d1e:	4342      	muls	r2, r0
 8000d20:	0c31      	lsrs	r1, r6, #16
 8000d22:	0005      	movs	r5, r0
 8000d24:	4319      	orrs	r1, r3
 8000d26:	428a      	cmp	r2, r1
 8000d28:	d900      	bls.n	8000d2c <__aeabi_ddiv+0x1f8>
 8000d2a:	e16c      	b.n	8001006 <__aeabi_ddiv+0x4d2>
 8000d2c:	1a88      	subs	r0, r1, r2
 8000d2e:	4649      	mov	r1, r9
 8000d30:	f7ff fa96 	bl	8000260 <__aeabi_uidivmod>
 8000d34:	9a01      	ldr	r2, [sp, #4]
 8000d36:	0436      	lsls	r6, r6, #16
 8000d38:	4342      	muls	r2, r0
 8000d3a:	0409      	lsls	r1, r1, #16
 8000d3c:	0c36      	lsrs	r6, r6, #16
 8000d3e:	0003      	movs	r3, r0
 8000d40:	430e      	orrs	r6, r1
 8000d42:	42b2      	cmp	r2, r6
 8000d44:	d900      	bls.n	8000d48 <__aeabi_ddiv+0x214>
 8000d46:	e153      	b.n	8000ff0 <__aeabi_ddiv+0x4bc>
 8000d48:	9803      	ldr	r0, [sp, #12]
 8000d4a:	1ab6      	subs	r6, r6, r2
 8000d4c:	0002      	movs	r2, r0
 8000d4e:	042d      	lsls	r5, r5, #16
 8000d50:	431d      	orrs	r5, r3
 8000d52:	9f02      	ldr	r7, [sp, #8]
 8000d54:	042b      	lsls	r3, r5, #16
 8000d56:	0c1b      	lsrs	r3, r3, #16
 8000d58:	435a      	muls	r2, r3
 8000d5a:	437b      	muls	r3, r7
 8000d5c:	469c      	mov	ip, r3
 8000d5e:	0c29      	lsrs	r1, r5, #16
 8000d60:	4348      	muls	r0, r1
 8000d62:	0c13      	lsrs	r3, r2, #16
 8000d64:	4484      	add	ip, r0
 8000d66:	4463      	add	r3, ip
 8000d68:	4379      	muls	r1, r7
 8000d6a:	4298      	cmp	r0, r3
 8000d6c:	d903      	bls.n	8000d76 <__aeabi_ddiv+0x242>
 8000d6e:	2080      	movs	r0, #128	; 0x80
 8000d70:	0240      	lsls	r0, r0, #9
 8000d72:	4684      	mov	ip, r0
 8000d74:	4461      	add	r1, ip
 8000d76:	0c18      	lsrs	r0, r3, #16
 8000d78:	0412      	lsls	r2, r2, #16
 8000d7a:	041b      	lsls	r3, r3, #16
 8000d7c:	0c12      	lsrs	r2, r2, #16
 8000d7e:	1841      	adds	r1, r0, r1
 8000d80:	189b      	adds	r3, r3, r2
 8000d82:	428e      	cmp	r6, r1
 8000d84:	d200      	bcs.n	8000d88 <__aeabi_ddiv+0x254>
 8000d86:	e0ff      	b.n	8000f88 <__aeabi_ddiv+0x454>
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x258>
 8000d8a:	e0fa      	b.n	8000f82 <__aeabi_ddiv+0x44e>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	431d      	orrs	r5, r3
 8000d90:	4a49      	ldr	r2, [pc, #292]	; (8000eb8 <__aeabi_ddiv+0x384>)
 8000d92:	445a      	add	r2, fp
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	dc00      	bgt.n	8000d9a <__aeabi_ddiv+0x266>
 8000d98:	e0aa      	b.n	8000ef0 <__aeabi_ddiv+0x3bc>
 8000d9a:	076b      	lsls	r3, r5, #29
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_ddiv+0x26c>
 8000d9e:	e13d      	b.n	800101c <__aeabi_ddiv+0x4e8>
 8000da0:	08ed      	lsrs	r5, r5, #3
 8000da2:	4643      	mov	r3, r8
 8000da4:	01db      	lsls	r3, r3, #7
 8000da6:	d506      	bpl.n	8000db6 <__aeabi_ddiv+0x282>
 8000da8:	4642      	mov	r2, r8
 8000daa:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <__aeabi_ddiv+0x388>)
 8000dac:	401a      	ands	r2, r3
 8000dae:	4690      	mov	r8, r2
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	00d2      	lsls	r2, r2, #3
 8000db4:	445a      	add	r2, fp
 8000db6:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <__aeabi_ddiv+0x38c>)
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dd00      	ble.n	8000dbe <__aeabi_ddiv+0x28a>
 8000dbc:	e71f      	b.n	8000bfe <__aeabi_ddiv+0xca>
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	075b      	lsls	r3, r3, #29
 8000dc2:	431d      	orrs	r5, r3
 8000dc4:	4643      	mov	r3, r8
 8000dc6:	0552      	lsls	r2, r2, #21
 8000dc8:	025c      	lsls	r4, r3, #9
 8000dca:	0b24      	lsrs	r4, r4, #12
 8000dcc:	0d53      	lsrs	r3, r2, #21
 8000dce:	e708      	b.n	8000be2 <__aeabi_ddiv+0xae>
 8000dd0:	4652      	mov	r2, sl
 8000dd2:	4322      	orrs	r2, r4
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_ddiv+0x2a4>
 8000dd6:	e07b      	b.n	8000ed0 <__aeabi_ddiv+0x39c>
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0x2aa>
 8000ddc:	e0fa      	b.n	8000fd4 <__aeabi_ddiv+0x4a0>
 8000dde:	0020      	movs	r0, r4
 8000de0:	f001 fa22 	bl	8002228 <__clzsi2>
 8000de4:	0002      	movs	r2, r0
 8000de6:	3a0b      	subs	r2, #11
 8000de8:	231d      	movs	r3, #29
 8000dea:	0001      	movs	r1, r0
 8000dec:	1a9b      	subs	r3, r3, r2
 8000dee:	4652      	mov	r2, sl
 8000df0:	3908      	subs	r1, #8
 8000df2:	40da      	lsrs	r2, r3
 8000df4:	408c      	lsls	r4, r1
 8000df6:	4314      	orrs	r4, r2
 8000df8:	4652      	mov	r2, sl
 8000dfa:	408a      	lsls	r2, r1
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <__aeabi_ddiv+0x390>)
 8000dfe:	4458      	add	r0, fp
 8000e00:	469b      	mov	fp, r3
 8000e02:	4483      	add	fp, r0
 8000e04:	2000      	movs	r0, #0
 8000e06:	e6d5      	b.n	8000bb4 <__aeabi_ddiv+0x80>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	4698      	mov	r8, r3
 8000e0e:	d044      	beq.n	8000e9a <__aeabi_ddiv+0x366>
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	d100      	bne.n	8000e16 <__aeabi_ddiv+0x2e2>
 8000e14:	e0ce      	b.n	8000fb4 <__aeabi_ddiv+0x480>
 8000e16:	0020      	movs	r0, r4
 8000e18:	f001 fa06 	bl	8002228 <__clzsi2>
 8000e1c:	0001      	movs	r1, r0
 8000e1e:	0002      	movs	r2, r0
 8000e20:	390b      	subs	r1, #11
 8000e22:	231d      	movs	r3, #29
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	4649      	mov	r1, r9
 8000e28:	0010      	movs	r0, r2
 8000e2a:	40d9      	lsrs	r1, r3
 8000e2c:	3808      	subs	r0, #8
 8000e2e:	4084      	lsls	r4, r0
 8000e30:	000b      	movs	r3, r1
 8000e32:	464d      	mov	r5, r9
 8000e34:	4323      	orrs	r3, r4
 8000e36:	4698      	mov	r8, r3
 8000e38:	4085      	lsls	r5, r0
 8000e3a:	4823      	ldr	r0, [pc, #140]	; (8000ec8 <__aeabi_ddiv+0x394>)
 8000e3c:	1a83      	subs	r3, r0, r2
 8000e3e:	469b      	mov	fp, r3
 8000e40:	2300      	movs	r3, #0
 8000e42:	4699      	mov	r9, r3
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	e69a      	b.n	8000b7e <__aeabi_ddiv+0x4a>
 8000e48:	464b      	mov	r3, r9
 8000e4a:	4323      	orrs	r3, r4
 8000e4c:	4698      	mov	r8, r3
 8000e4e:	d11d      	bne.n	8000e8c <__aeabi_ddiv+0x358>
 8000e50:	2308      	movs	r3, #8
 8000e52:	4699      	mov	r9, r3
 8000e54:	3b06      	subs	r3, #6
 8000e56:	2500      	movs	r5, #0
 8000e58:	4683      	mov	fp, r0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	e68f      	b.n	8000b7e <__aeabi_ddiv+0x4a>
 8000e5e:	4652      	mov	r2, sl
 8000e60:	4322      	orrs	r2, r4
 8000e62:	d109      	bne.n	8000e78 <__aeabi_ddiv+0x344>
 8000e64:	2302      	movs	r3, #2
 8000e66:	4649      	mov	r1, r9
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <__aeabi_ddiv+0x398>)
 8000e6c:	4689      	mov	r9, r1
 8000e6e:	469c      	mov	ip, r3
 8000e70:	2400      	movs	r4, #0
 8000e72:	2002      	movs	r0, #2
 8000e74:	44e3      	add	fp, ip
 8000e76:	e69d      	b.n	8000bb4 <__aeabi_ddiv+0x80>
 8000e78:	2303      	movs	r3, #3
 8000e7a:	464a      	mov	r2, r9
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <__aeabi_ddiv+0x398>)
 8000e80:	4691      	mov	r9, r2
 8000e82:	469c      	mov	ip, r3
 8000e84:	4652      	mov	r2, sl
 8000e86:	2003      	movs	r0, #3
 8000e88:	44e3      	add	fp, ip
 8000e8a:	e693      	b.n	8000bb4 <__aeabi_ddiv+0x80>
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	4699      	mov	r9, r3
 8000e90:	3b09      	subs	r3, #9
 8000e92:	46a0      	mov	r8, r4
 8000e94:	4683      	mov	fp, r0
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	e671      	b.n	8000b7e <__aeabi_ddiv+0x4a>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	469b      	mov	fp, r3
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	2500      	movs	r5, #0
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	e669      	b.n	8000b7e <__aeabi_ddiv+0x4a>
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	000007ff 	.word	0x000007ff
 8000eb0:	fffffc01 	.word	0xfffffc01
 8000eb4:	08008cb8 	.word	0x08008cb8
 8000eb8:	000003ff 	.word	0x000003ff
 8000ebc:	feffffff 	.word	0xfeffffff
 8000ec0:	000007fe 	.word	0x000007fe
 8000ec4:	000003f3 	.word	0x000003f3
 8000ec8:	fffffc0d 	.word	0xfffffc0d
 8000ecc:	fffff801 	.word	0xfffff801
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	4319      	orrs	r1, r3
 8000ed6:	4689      	mov	r9, r1
 8000ed8:	2400      	movs	r4, #0
 8000eda:	2001      	movs	r0, #1
 8000edc:	e66a      	b.n	8000bb4 <__aeabi_ddiv+0x80>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2480      	movs	r4, #128	; 0x80
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	2500      	movs	r5, #0
 8000ee6:	4b8a      	ldr	r3, [pc, #552]	; (8001110 <__aeabi_ddiv+0x5dc>)
 8000ee8:	0324      	lsls	r4, r4, #12
 8000eea:	e67a      	b.n	8000be2 <__aeabi_ddiv+0xae>
 8000eec:	2501      	movs	r5, #1
 8000eee:	426d      	negs	r5, r5
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	2b38      	cmp	r3, #56	; 0x38
 8000ef6:	dd00      	ble.n	8000efa <__aeabi_ddiv+0x3c6>
 8000ef8:	e670      	b.n	8000bdc <__aeabi_ddiv+0xa8>
 8000efa:	2b1f      	cmp	r3, #31
 8000efc:	dc00      	bgt.n	8000f00 <__aeabi_ddiv+0x3cc>
 8000efe:	e0bf      	b.n	8001080 <__aeabi_ddiv+0x54c>
 8000f00:	211f      	movs	r1, #31
 8000f02:	4249      	negs	r1, r1
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	4641      	mov	r1, r8
 8000f08:	40d1      	lsrs	r1, r2
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	2b20      	cmp	r3, #32
 8000f0e:	d004      	beq.n	8000f1a <__aeabi_ddiv+0x3e6>
 8000f10:	4641      	mov	r1, r8
 8000f12:	4b80      	ldr	r3, [pc, #512]	; (8001114 <__aeabi_ddiv+0x5e0>)
 8000f14:	445b      	add	r3, fp
 8000f16:	4099      	lsls	r1, r3
 8000f18:	430d      	orrs	r5, r1
 8000f1a:	1e6b      	subs	r3, r5, #1
 8000f1c:	419d      	sbcs	r5, r3
 8000f1e:	2307      	movs	r3, #7
 8000f20:	432a      	orrs	r2, r5
 8000f22:	001d      	movs	r5, r3
 8000f24:	2400      	movs	r4, #0
 8000f26:	4015      	ands	r5, r2
 8000f28:	4213      	tst	r3, r2
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_ddiv+0x3fa>
 8000f2c:	e0d4      	b.n	80010d8 <__aeabi_ddiv+0x5a4>
 8000f2e:	210f      	movs	r1, #15
 8000f30:	2300      	movs	r3, #0
 8000f32:	4011      	ands	r1, r2
 8000f34:	2904      	cmp	r1, #4
 8000f36:	d100      	bne.n	8000f3a <__aeabi_ddiv+0x406>
 8000f38:	e0cb      	b.n	80010d2 <__aeabi_ddiv+0x59e>
 8000f3a:	1d11      	adds	r1, r2, #4
 8000f3c:	4291      	cmp	r1, r2
 8000f3e:	4192      	sbcs	r2, r2
 8000f40:	4252      	negs	r2, r2
 8000f42:	189b      	adds	r3, r3, r2
 8000f44:	000a      	movs	r2, r1
 8000f46:	0219      	lsls	r1, r3, #8
 8000f48:	d400      	bmi.n	8000f4c <__aeabi_ddiv+0x418>
 8000f4a:	e0c2      	b.n	80010d2 <__aeabi_ddiv+0x59e>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2400      	movs	r4, #0
 8000f50:	2500      	movs	r5, #0
 8000f52:	e646      	b.n	8000be2 <__aeabi_ddiv+0xae>
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	4641      	mov	r1, r8
 8000f58:	031b      	lsls	r3, r3, #12
 8000f5a:	4219      	tst	r1, r3
 8000f5c:	d008      	beq.n	8000f70 <__aeabi_ddiv+0x43c>
 8000f5e:	421c      	tst	r4, r3
 8000f60:	d106      	bne.n	8000f70 <__aeabi_ddiv+0x43c>
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	46ba      	mov	sl, r7
 8000f68:	0015      	movs	r5, r2
 8000f6a:	4b69      	ldr	r3, [pc, #420]	; (8001110 <__aeabi_ddiv+0x5dc>)
 8000f6c:	0b24      	lsrs	r4, r4, #12
 8000f6e:	e638      	b.n	8000be2 <__aeabi_ddiv+0xae>
 8000f70:	2480      	movs	r4, #128	; 0x80
 8000f72:	4643      	mov	r3, r8
 8000f74:	0324      	lsls	r4, r4, #12
 8000f76:	431c      	orrs	r4, r3
 8000f78:	0324      	lsls	r4, r4, #12
 8000f7a:	46b2      	mov	sl, r6
 8000f7c:	4b64      	ldr	r3, [pc, #400]	; (8001110 <__aeabi_ddiv+0x5dc>)
 8000f7e:	0b24      	lsrs	r4, r4, #12
 8000f80:	e62f      	b.n	8000be2 <__aeabi_ddiv+0xae>
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x454>
 8000f86:	e703      	b.n	8000d90 <__aeabi_ddiv+0x25c>
 8000f88:	19a6      	adds	r6, r4, r6
 8000f8a:	1e68      	subs	r0, r5, #1
 8000f8c:	42a6      	cmp	r6, r4
 8000f8e:	d200      	bcs.n	8000f92 <__aeabi_ddiv+0x45e>
 8000f90:	e08d      	b.n	80010ae <__aeabi_ddiv+0x57a>
 8000f92:	428e      	cmp	r6, r1
 8000f94:	d200      	bcs.n	8000f98 <__aeabi_ddiv+0x464>
 8000f96:	e0a3      	b.n	80010e0 <__aeabi_ddiv+0x5ac>
 8000f98:	d100      	bne.n	8000f9c <__aeabi_ddiv+0x468>
 8000f9a:	e0b3      	b.n	8001104 <__aeabi_ddiv+0x5d0>
 8000f9c:	0005      	movs	r5, r0
 8000f9e:	e6f5      	b.n	8000d8c <__aeabi_ddiv+0x258>
 8000fa0:	42aa      	cmp	r2, r5
 8000fa2:	d900      	bls.n	8000fa6 <__aeabi_ddiv+0x472>
 8000fa4:	e639      	b.n	8000c1a <__aeabi_ddiv+0xe6>
 8000fa6:	4643      	mov	r3, r8
 8000fa8:	07de      	lsls	r6, r3, #31
 8000faa:	0858      	lsrs	r0, r3, #1
 8000fac:	086b      	lsrs	r3, r5, #1
 8000fae:	431e      	orrs	r6, r3
 8000fb0:	07ed      	lsls	r5, r5, #31
 8000fb2:	e639      	b.n	8000c28 <__aeabi_ddiv+0xf4>
 8000fb4:	4648      	mov	r0, r9
 8000fb6:	f001 f937 	bl	8002228 <__clzsi2>
 8000fba:	0001      	movs	r1, r0
 8000fbc:	0002      	movs	r2, r0
 8000fbe:	3115      	adds	r1, #21
 8000fc0:	3220      	adds	r2, #32
 8000fc2:	291c      	cmp	r1, #28
 8000fc4:	dc00      	bgt.n	8000fc8 <__aeabi_ddiv+0x494>
 8000fc6:	e72c      	b.n	8000e22 <__aeabi_ddiv+0x2ee>
 8000fc8:	464b      	mov	r3, r9
 8000fca:	3808      	subs	r0, #8
 8000fcc:	4083      	lsls	r3, r0
 8000fce:	2500      	movs	r5, #0
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	e732      	b.n	8000e3a <__aeabi_ddiv+0x306>
 8000fd4:	f001 f928 	bl	8002228 <__clzsi2>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	001a      	movs	r2, r3
 8000fdc:	3215      	adds	r2, #21
 8000fde:	3020      	adds	r0, #32
 8000fe0:	2a1c      	cmp	r2, #28
 8000fe2:	dc00      	bgt.n	8000fe6 <__aeabi_ddiv+0x4b2>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x2b4>
 8000fe6:	4654      	mov	r4, sl
 8000fe8:	3b08      	subs	r3, #8
 8000fea:	2200      	movs	r2, #0
 8000fec:	409c      	lsls	r4, r3
 8000fee:	e705      	b.n	8000dfc <__aeabi_ddiv+0x2c8>
 8000ff0:	1936      	adds	r6, r6, r4
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	42b4      	cmp	r4, r6
 8000ff6:	d900      	bls.n	8000ffa <__aeabi_ddiv+0x4c6>
 8000ff8:	e6a6      	b.n	8000d48 <__aeabi_ddiv+0x214>
 8000ffa:	42b2      	cmp	r2, r6
 8000ffc:	d800      	bhi.n	8001000 <__aeabi_ddiv+0x4cc>
 8000ffe:	e6a3      	b.n	8000d48 <__aeabi_ddiv+0x214>
 8001000:	1e83      	subs	r3, r0, #2
 8001002:	1936      	adds	r6, r6, r4
 8001004:	e6a0      	b.n	8000d48 <__aeabi_ddiv+0x214>
 8001006:	1909      	adds	r1, r1, r4
 8001008:	3d01      	subs	r5, #1
 800100a:	428c      	cmp	r4, r1
 800100c:	d900      	bls.n	8001010 <__aeabi_ddiv+0x4dc>
 800100e:	e68d      	b.n	8000d2c <__aeabi_ddiv+0x1f8>
 8001010:	428a      	cmp	r2, r1
 8001012:	d800      	bhi.n	8001016 <__aeabi_ddiv+0x4e2>
 8001014:	e68a      	b.n	8000d2c <__aeabi_ddiv+0x1f8>
 8001016:	1e85      	subs	r5, r0, #2
 8001018:	1909      	adds	r1, r1, r4
 800101a:	e687      	b.n	8000d2c <__aeabi_ddiv+0x1f8>
 800101c:	230f      	movs	r3, #15
 800101e:	402b      	ands	r3, r5
 8001020:	2b04      	cmp	r3, #4
 8001022:	d100      	bne.n	8001026 <__aeabi_ddiv+0x4f2>
 8001024:	e6bc      	b.n	8000da0 <__aeabi_ddiv+0x26c>
 8001026:	2305      	movs	r3, #5
 8001028:	425b      	negs	r3, r3
 800102a:	42ab      	cmp	r3, r5
 800102c:	419b      	sbcs	r3, r3
 800102e:	3504      	adds	r5, #4
 8001030:	425b      	negs	r3, r3
 8001032:	08ed      	lsrs	r5, r5, #3
 8001034:	4498      	add	r8, r3
 8001036:	e6b4      	b.n	8000da2 <__aeabi_ddiv+0x26e>
 8001038:	42af      	cmp	r7, r5
 800103a:	d900      	bls.n	800103e <__aeabi_ddiv+0x50a>
 800103c:	e660      	b.n	8000d00 <__aeabi_ddiv+0x1cc>
 800103e:	4282      	cmp	r2, r0
 8001040:	d804      	bhi.n	800104c <__aeabi_ddiv+0x518>
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x512>
 8001044:	e65c      	b.n	8000d00 <__aeabi_ddiv+0x1cc>
 8001046:	42ae      	cmp	r6, r5
 8001048:	d800      	bhi.n	800104c <__aeabi_ddiv+0x518>
 800104a:	e659      	b.n	8000d00 <__aeabi_ddiv+0x1cc>
 800104c:	2302      	movs	r3, #2
 800104e:	425b      	negs	r3, r3
 8001050:	469c      	mov	ip, r3
 8001052:	9b00      	ldr	r3, [sp, #0]
 8001054:	44e0      	add	r8, ip
 8001056:	469c      	mov	ip, r3
 8001058:	4465      	add	r5, ip
 800105a:	429d      	cmp	r5, r3
 800105c:	419b      	sbcs	r3, r3
 800105e:	425b      	negs	r3, r3
 8001060:	191b      	adds	r3, r3, r4
 8001062:	18c0      	adds	r0, r0, r3
 8001064:	e64d      	b.n	8000d02 <__aeabi_ddiv+0x1ce>
 8001066:	428a      	cmp	r2, r1
 8001068:	d800      	bhi.n	800106c <__aeabi_ddiv+0x538>
 800106a:	e60e      	b.n	8000c8a <__aeabi_ddiv+0x156>
 800106c:	1e83      	subs	r3, r0, #2
 800106e:	1909      	adds	r1, r1, r4
 8001070:	e60b      	b.n	8000c8a <__aeabi_ddiv+0x156>
 8001072:	428a      	cmp	r2, r1
 8001074:	d800      	bhi.n	8001078 <__aeabi_ddiv+0x544>
 8001076:	e5f4      	b.n	8000c62 <__aeabi_ddiv+0x12e>
 8001078:	1e83      	subs	r3, r0, #2
 800107a:	4698      	mov	r8, r3
 800107c:	1909      	adds	r1, r1, r4
 800107e:	e5f0      	b.n	8000c62 <__aeabi_ddiv+0x12e>
 8001080:	4925      	ldr	r1, [pc, #148]	; (8001118 <__aeabi_ddiv+0x5e4>)
 8001082:	0028      	movs	r0, r5
 8001084:	4459      	add	r1, fp
 8001086:	408d      	lsls	r5, r1
 8001088:	4642      	mov	r2, r8
 800108a:	408a      	lsls	r2, r1
 800108c:	1e69      	subs	r1, r5, #1
 800108e:	418d      	sbcs	r5, r1
 8001090:	4641      	mov	r1, r8
 8001092:	40d8      	lsrs	r0, r3
 8001094:	40d9      	lsrs	r1, r3
 8001096:	4302      	orrs	r2, r0
 8001098:	432a      	orrs	r2, r5
 800109a:	000b      	movs	r3, r1
 800109c:	0751      	lsls	r1, r2, #29
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x56e>
 80010a0:	e751      	b.n	8000f46 <__aeabi_ddiv+0x412>
 80010a2:	210f      	movs	r1, #15
 80010a4:	4011      	ands	r1, r2
 80010a6:	2904      	cmp	r1, #4
 80010a8:	d000      	beq.n	80010ac <__aeabi_ddiv+0x578>
 80010aa:	e746      	b.n	8000f3a <__aeabi_ddiv+0x406>
 80010ac:	e74b      	b.n	8000f46 <__aeabi_ddiv+0x412>
 80010ae:	0005      	movs	r5, r0
 80010b0:	428e      	cmp	r6, r1
 80010b2:	d000      	beq.n	80010b6 <__aeabi_ddiv+0x582>
 80010b4:	e66a      	b.n	8000d8c <__aeabi_ddiv+0x258>
 80010b6:	9a00      	ldr	r2, [sp, #0]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d000      	beq.n	80010be <__aeabi_ddiv+0x58a>
 80010bc:	e666      	b.n	8000d8c <__aeabi_ddiv+0x258>
 80010be:	e667      	b.n	8000d90 <__aeabi_ddiv+0x25c>
 80010c0:	4a16      	ldr	r2, [pc, #88]	; (800111c <__aeabi_ddiv+0x5e8>)
 80010c2:	445a      	add	r2, fp
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	dc00      	bgt.n	80010ca <__aeabi_ddiv+0x596>
 80010c8:	e710      	b.n	8000eec <__aeabi_ddiv+0x3b8>
 80010ca:	2301      	movs	r3, #1
 80010cc:	2500      	movs	r5, #0
 80010ce:	4498      	add	r8, r3
 80010d0:	e667      	b.n	8000da2 <__aeabi_ddiv+0x26e>
 80010d2:	075d      	lsls	r5, r3, #29
 80010d4:	025b      	lsls	r3, r3, #9
 80010d6:	0b1c      	lsrs	r4, r3, #12
 80010d8:	08d2      	lsrs	r2, r2, #3
 80010da:	2300      	movs	r3, #0
 80010dc:	4315      	orrs	r5, r2
 80010de:	e580      	b.n	8000be2 <__aeabi_ddiv+0xae>
 80010e0:	9800      	ldr	r0, [sp, #0]
 80010e2:	3d02      	subs	r5, #2
 80010e4:	0042      	lsls	r2, r0, #1
 80010e6:	4282      	cmp	r2, r0
 80010e8:	41bf      	sbcs	r7, r7
 80010ea:	427f      	negs	r7, r7
 80010ec:	193c      	adds	r4, r7, r4
 80010ee:	1936      	adds	r6, r6, r4
 80010f0:	9200      	str	r2, [sp, #0]
 80010f2:	e7dd      	b.n	80010b0 <__aeabi_ddiv+0x57c>
 80010f4:	2480      	movs	r4, #128	; 0x80
 80010f6:	4643      	mov	r3, r8
 80010f8:	0324      	lsls	r4, r4, #12
 80010fa:	431c      	orrs	r4, r3
 80010fc:	0324      	lsls	r4, r4, #12
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__aeabi_ddiv+0x5dc>)
 8001100:	0b24      	lsrs	r4, r4, #12
 8001102:	e56e      	b.n	8000be2 <__aeabi_ddiv+0xae>
 8001104:	9a00      	ldr	r2, [sp, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d3ea      	bcc.n	80010e0 <__aeabi_ddiv+0x5ac>
 800110a:	0005      	movs	r5, r0
 800110c:	e7d3      	b.n	80010b6 <__aeabi_ddiv+0x582>
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	000007ff 	.word	0x000007ff
 8001114:	0000043e 	.word	0x0000043e
 8001118:	0000041e 	.word	0x0000041e
 800111c:	000003ff 	.word	0x000003ff

08001120 <__eqdf2>:
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	464e      	mov	r6, r9
 8001124:	4645      	mov	r5, r8
 8001126:	46de      	mov	lr, fp
 8001128:	4657      	mov	r7, sl
 800112a:	4690      	mov	r8, r2
 800112c:	b5e0      	push	{r5, r6, r7, lr}
 800112e:	0017      	movs	r7, r2
 8001130:	031a      	lsls	r2, r3, #12
 8001132:	0b12      	lsrs	r2, r2, #12
 8001134:	0005      	movs	r5, r0
 8001136:	4684      	mov	ip, r0
 8001138:	4819      	ldr	r0, [pc, #100]	; (80011a0 <__eqdf2+0x80>)
 800113a:	030e      	lsls	r6, r1, #12
 800113c:	004c      	lsls	r4, r1, #1
 800113e:	4691      	mov	r9, r2
 8001140:	005a      	lsls	r2, r3, #1
 8001142:	0fdb      	lsrs	r3, r3, #31
 8001144:	469b      	mov	fp, r3
 8001146:	0b36      	lsrs	r6, r6, #12
 8001148:	0d64      	lsrs	r4, r4, #21
 800114a:	0fc9      	lsrs	r1, r1, #31
 800114c:	0d52      	lsrs	r2, r2, #21
 800114e:	4284      	cmp	r4, r0
 8001150:	d019      	beq.n	8001186 <__eqdf2+0x66>
 8001152:	4282      	cmp	r2, r0
 8001154:	d010      	beq.n	8001178 <__eqdf2+0x58>
 8001156:	2001      	movs	r0, #1
 8001158:	4294      	cmp	r4, r2
 800115a:	d10e      	bne.n	800117a <__eqdf2+0x5a>
 800115c:	454e      	cmp	r6, r9
 800115e:	d10c      	bne.n	800117a <__eqdf2+0x5a>
 8001160:	2001      	movs	r0, #1
 8001162:	45c4      	cmp	ip, r8
 8001164:	d109      	bne.n	800117a <__eqdf2+0x5a>
 8001166:	4559      	cmp	r1, fp
 8001168:	d017      	beq.n	800119a <__eqdf2+0x7a>
 800116a:	2c00      	cmp	r4, #0
 800116c:	d105      	bne.n	800117a <__eqdf2+0x5a>
 800116e:	0030      	movs	r0, r6
 8001170:	4328      	orrs	r0, r5
 8001172:	1e43      	subs	r3, r0, #1
 8001174:	4198      	sbcs	r0, r3
 8001176:	e000      	b.n	800117a <__eqdf2+0x5a>
 8001178:	2001      	movs	r0, #1
 800117a:	bcf0      	pop	{r4, r5, r6, r7}
 800117c:	46bb      	mov	fp, r7
 800117e:	46b2      	mov	sl, r6
 8001180:	46a9      	mov	r9, r5
 8001182:	46a0      	mov	r8, r4
 8001184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001186:	0033      	movs	r3, r6
 8001188:	2001      	movs	r0, #1
 800118a:	432b      	orrs	r3, r5
 800118c:	d1f5      	bne.n	800117a <__eqdf2+0x5a>
 800118e:	42a2      	cmp	r2, r4
 8001190:	d1f3      	bne.n	800117a <__eqdf2+0x5a>
 8001192:	464b      	mov	r3, r9
 8001194:	433b      	orrs	r3, r7
 8001196:	d1f0      	bne.n	800117a <__eqdf2+0x5a>
 8001198:	e7e2      	b.n	8001160 <__eqdf2+0x40>
 800119a:	2000      	movs	r0, #0
 800119c:	e7ed      	b.n	800117a <__eqdf2+0x5a>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	000007ff 	.word	0x000007ff

080011a4 <__gedf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4647      	mov	r7, r8
 80011a8:	46ce      	mov	lr, r9
 80011aa:	0004      	movs	r4, r0
 80011ac:	0018      	movs	r0, r3
 80011ae:	0016      	movs	r6, r2
 80011b0:	031b      	lsls	r3, r3, #12
 80011b2:	0b1b      	lsrs	r3, r3, #12
 80011b4:	4d2d      	ldr	r5, [pc, #180]	; (800126c <__gedf2+0xc8>)
 80011b6:	004a      	lsls	r2, r1, #1
 80011b8:	4699      	mov	r9, r3
 80011ba:	b580      	push	{r7, lr}
 80011bc:	0043      	lsls	r3, r0, #1
 80011be:	030f      	lsls	r7, r1, #12
 80011c0:	46a4      	mov	ip, r4
 80011c2:	46b0      	mov	r8, r6
 80011c4:	0b3f      	lsrs	r7, r7, #12
 80011c6:	0d52      	lsrs	r2, r2, #21
 80011c8:	0fc9      	lsrs	r1, r1, #31
 80011ca:	0d5b      	lsrs	r3, r3, #21
 80011cc:	0fc0      	lsrs	r0, r0, #31
 80011ce:	42aa      	cmp	r2, r5
 80011d0:	d021      	beq.n	8001216 <__gedf2+0x72>
 80011d2:	42ab      	cmp	r3, r5
 80011d4:	d013      	beq.n	80011fe <__gedf2+0x5a>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d122      	bne.n	8001220 <__gedf2+0x7c>
 80011da:	433c      	orrs	r4, r7
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <__gedf2+0x42>
 80011e0:	464d      	mov	r5, r9
 80011e2:	432e      	orrs	r6, r5
 80011e4:	d022      	beq.n	800122c <__gedf2+0x88>
 80011e6:	2c00      	cmp	r4, #0
 80011e8:	d010      	beq.n	800120c <__gedf2+0x68>
 80011ea:	4281      	cmp	r1, r0
 80011ec:	d022      	beq.n	8001234 <__gedf2+0x90>
 80011ee:	2002      	movs	r0, #2
 80011f0:	3901      	subs	r1, #1
 80011f2:	4008      	ands	r0, r1
 80011f4:	3801      	subs	r0, #1
 80011f6:	bcc0      	pop	{r6, r7}
 80011f8:	46b9      	mov	r9, r7
 80011fa:	46b0      	mov	r8, r6
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fe:	464d      	mov	r5, r9
 8001200:	432e      	orrs	r6, r5
 8001202:	d129      	bne.n	8001258 <__gedf2+0xb4>
 8001204:	2a00      	cmp	r2, #0
 8001206:	d1f0      	bne.n	80011ea <__gedf2+0x46>
 8001208:	433c      	orrs	r4, r7
 800120a:	d1ee      	bne.n	80011ea <__gedf2+0x46>
 800120c:	2800      	cmp	r0, #0
 800120e:	d1f2      	bne.n	80011f6 <__gedf2+0x52>
 8001210:	2001      	movs	r0, #1
 8001212:	4240      	negs	r0, r0
 8001214:	e7ef      	b.n	80011f6 <__gedf2+0x52>
 8001216:	003d      	movs	r5, r7
 8001218:	4325      	orrs	r5, r4
 800121a:	d11d      	bne.n	8001258 <__gedf2+0xb4>
 800121c:	4293      	cmp	r3, r2
 800121e:	d0ee      	beq.n	80011fe <__gedf2+0x5a>
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e2      	bne.n	80011ea <__gedf2+0x46>
 8001224:	464c      	mov	r4, r9
 8001226:	4326      	orrs	r6, r4
 8001228:	d1df      	bne.n	80011ea <__gedf2+0x46>
 800122a:	e7e0      	b.n	80011ee <__gedf2+0x4a>
 800122c:	2000      	movs	r0, #0
 800122e:	2c00      	cmp	r4, #0
 8001230:	d0e1      	beq.n	80011f6 <__gedf2+0x52>
 8001232:	e7dc      	b.n	80011ee <__gedf2+0x4a>
 8001234:	429a      	cmp	r2, r3
 8001236:	dc0a      	bgt.n	800124e <__gedf2+0xaa>
 8001238:	dbe8      	blt.n	800120c <__gedf2+0x68>
 800123a:	454f      	cmp	r7, r9
 800123c:	d8d7      	bhi.n	80011ee <__gedf2+0x4a>
 800123e:	d00e      	beq.n	800125e <__gedf2+0xba>
 8001240:	2000      	movs	r0, #0
 8001242:	454f      	cmp	r7, r9
 8001244:	d2d7      	bcs.n	80011f6 <__gedf2+0x52>
 8001246:	2900      	cmp	r1, #0
 8001248:	d0e2      	beq.n	8001210 <__gedf2+0x6c>
 800124a:	0008      	movs	r0, r1
 800124c:	e7d3      	b.n	80011f6 <__gedf2+0x52>
 800124e:	4243      	negs	r3, r0
 8001250:	4158      	adcs	r0, r3
 8001252:	0040      	lsls	r0, r0, #1
 8001254:	3801      	subs	r0, #1
 8001256:	e7ce      	b.n	80011f6 <__gedf2+0x52>
 8001258:	2002      	movs	r0, #2
 800125a:	4240      	negs	r0, r0
 800125c:	e7cb      	b.n	80011f6 <__gedf2+0x52>
 800125e:	45c4      	cmp	ip, r8
 8001260:	d8c5      	bhi.n	80011ee <__gedf2+0x4a>
 8001262:	2000      	movs	r0, #0
 8001264:	45c4      	cmp	ip, r8
 8001266:	d2c6      	bcs.n	80011f6 <__gedf2+0x52>
 8001268:	e7ed      	b.n	8001246 <__gedf2+0xa2>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff

08001270 <__ledf2>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	4647      	mov	r7, r8
 8001274:	46ce      	mov	lr, r9
 8001276:	0004      	movs	r4, r0
 8001278:	0018      	movs	r0, r3
 800127a:	0016      	movs	r6, r2
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	0b1b      	lsrs	r3, r3, #12
 8001280:	4d2c      	ldr	r5, [pc, #176]	; (8001334 <__ledf2+0xc4>)
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	b580      	push	{r7, lr}
 8001288:	0043      	lsls	r3, r0, #1
 800128a:	030f      	lsls	r7, r1, #12
 800128c:	46a4      	mov	ip, r4
 800128e:	46b0      	mov	r8, r6
 8001290:	0b3f      	lsrs	r7, r7, #12
 8001292:	0d52      	lsrs	r2, r2, #21
 8001294:	0fc9      	lsrs	r1, r1, #31
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	42aa      	cmp	r2, r5
 800129c:	d00d      	beq.n	80012ba <__ledf2+0x4a>
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d010      	beq.n	80012c4 <__ledf2+0x54>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d127      	bne.n	80012f6 <__ledf2+0x86>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d111      	bne.n	80012d0 <__ledf2+0x60>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d10e      	bne.n	80012d0 <__ledf2+0x60>
 80012b2:	2000      	movs	r0, #0
 80012b4:	2c00      	cmp	r4, #0
 80012b6:	d015      	beq.n	80012e4 <__ledf2+0x74>
 80012b8:	e00e      	b.n	80012d8 <__ledf2+0x68>
 80012ba:	003d      	movs	r5, r7
 80012bc:	4325      	orrs	r5, r4
 80012be:	d110      	bne.n	80012e2 <__ledf2+0x72>
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d118      	bne.n	80012f6 <__ledf2+0x86>
 80012c4:	464d      	mov	r5, r9
 80012c6:	432e      	orrs	r6, r5
 80012c8:	d10b      	bne.n	80012e2 <__ledf2+0x72>
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d102      	bne.n	80012d4 <__ledf2+0x64>
 80012ce:	433c      	orrs	r4, r7
 80012d0:	2c00      	cmp	r4, #0
 80012d2:	d00b      	beq.n	80012ec <__ledf2+0x7c>
 80012d4:	4281      	cmp	r1, r0
 80012d6:	d014      	beq.n	8001302 <__ledf2+0x92>
 80012d8:	2002      	movs	r0, #2
 80012da:	3901      	subs	r1, #1
 80012dc:	4008      	ands	r0, r1
 80012de:	3801      	subs	r0, #1
 80012e0:	e000      	b.n	80012e4 <__ledf2+0x74>
 80012e2:	2002      	movs	r0, #2
 80012e4:	bcc0      	pop	{r6, r7}
 80012e6:	46b9      	mov	r9, r7
 80012e8:	46b0      	mov	r8, r6
 80012ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ec:	2800      	cmp	r0, #0
 80012ee:	d1f9      	bne.n	80012e4 <__ledf2+0x74>
 80012f0:	2001      	movs	r0, #1
 80012f2:	4240      	negs	r0, r0
 80012f4:	e7f6      	b.n	80012e4 <__ledf2+0x74>
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1ec      	bne.n	80012d4 <__ledf2+0x64>
 80012fa:	464c      	mov	r4, r9
 80012fc:	4326      	orrs	r6, r4
 80012fe:	d1e9      	bne.n	80012d4 <__ledf2+0x64>
 8001300:	e7ea      	b.n	80012d8 <__ledf2+0x68>
 8001302:	429a      	cmp	r2, r3
 8001304:	dd04      	ble.n	8001310 <__ledf2+0xa0>
 8001306:	4243      	negs	r3, r0
 8001308:	4158      	adcs	r0, r3
 800130a:	0040      	lsls	r0, r0, #1
 800130c:	3801      	subs	r0, #1
 800130e:	e7e9      	b.n	80012e4 <__ledf2+0x74>
 8001310:	429a      	cmp	r2, r3
 8001312:	dbeb      	blt.n	80012ec <__ledf2+0x7c>
 8001314:	454f      	cmp	r7, r9
 8001316:	d8df      	bhi.n	80012d8 <__ledf2+0x68>
 8001318:	d006      	beq.n	8001328 <__ledf2+0xb8>
 800131a:	2000      	movs	r0, #0
 800131c:	454f      	cmp	r7, r9
 800131e:	d2e1      	bcs.n	80012e4 <__ledf2+0x74>
 8001320:	2900      	cmp	r1, #0
 8001322:	d0e5      	beq.n	80012f0 <__ledf2+0x80>
 8001324:	0008      	movs	r0, r1
 8001326:	e7dd      	b.n	80012e4 <__ledf2+0x74>
 8001328:	45c4      	cmp	ip, r8
 800132a:	d8d5      	bhi.n	80012d8 <__ledf2+0x68>
 800132c:	2000      	movs	r0, #0
 800132e:	45c4      	cmp	ip, r8
 8001330:	d2d8      	bcs.n	80012e4 <__ledf2+0x74>
 8001332:	e7f5      	b.n	8001320 <__ledf2+0xb0>
 8001334:	000007ff 	.word	0x000007ff

08001338 <__aeabi_dmul>:
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	4657      	mov	r7, sl
 800133c:	464e      	mov	r6, r9
 800133e:	4645      	mov	r5, r8
 8001340:	46de      	mov	lr, fp
 8001342:	b5e0      	push	{r5, r6, r7, lr}
 8001344:	4698      	mov	r8, r3
 8001346:	030c      	lsls	r4, r1, #12
 8001348:	004b      	lsls	r3, r1, #1
 800134a:	0006      	movs	r6, r0
 800134c:	4692      	mov	sl, r2
 800134e:	b087      	sub	sp, #28
 8001350:	0b24      	lsrs	r4, r4, #12
 8001352:	0d5b      	lsrs	r3, r3, #21
 8001354:	0fcf      	lsrs	r7, r1, #31
 8001356:	2b00      	cmp	r3, #0
 8001358:	d100      	bne.n	800135c <__aeabi_dmul+0x24>
 800135a:	e15c      	b.n	8001616 <__aeabi_dmul+0x2de>
 800135c:	4ad9      	ldr	r2, [pc, #868]	; (80016c4 <__aeabi_dmul+0x38c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d100      	bne.n	8001364 <__aeabi_dmul+0x2c>
 8001362:	e175      	b.n	8001650 <__aeabi_dmul+0x318>
 8001364:	0f42      	lsrs	r2, r0, #29
 8001366:	00e4      	lsls	r4, r4, #3
 8001368:	4314      	orrs	r4, r2
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	0412      	lsls	r2, r2, #16
 800136e:	4314      	orrs	r4, r2
 8001370:	4ad5      	ldr	r2, [pc, #852]	; (80016c8 <__aeabi_dmul+0x390>)
 8001372:	00c5      	lsls	r5, r0, #3
 8001374:	4694      	mov	ip, r2
 8001376:	4463      	add	r3, ip
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2300      	movs	r3, #0
 800137c:	4699      	mov	r9, r3
 800137e:	469b      	mov	fp, r3
 8001380:	4643      	mov	r3, r8
 8001382:	4642      	mov	r2, r8
 8001384:	031e      	lsls	r6, r3, #12
 8001386:	0fd2      	lsrs	r2, r2, #31
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4650      	mov	r0, sl
 800138c:	4690      	mov	r8, r2
 800138e:	0b36      	lsrs	r6, r6, #12
 8001390:	0d5b      	lsrs	r3, r3, #21
 8001392:	d100      	bne.n	8001396 <__aeabi_dmul+0x5e>
 8001394:	e120      	b.n	80015d8 <__aeabi_dmul+0x2a0>
 8001396:	4acb      	ldr	r2, [pc, #812]	; (80016c4 <__aeabi_dmul+0x38c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d100      	bne.n	800139e <__aeabi_dmul+0x66>
 800139c:	e162      	b.n	8001664 <__aeabi_dmul+0x32c>
 800139e:	49ca      	ldr	r1, [pc, #808]	; (80016c8 <__aeabi_dmul+0x390>)
 80013a0:	0f42      	lsrs	r2, r0, #29
 80013a2:	468c      	mov	ip, r1
 80013a4:	9900      	ldr	r1, [sp, #0]
 80013a6:	4463      	add	r3, ip
 80013a8:	00f6      	lsls	r6, r6, #3
 80013aa:	468c      	mov	ip, r1
 80013ac:	4316      	orrs	r6, r2
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	449c      	add	ip, r3
 80013b2:	0412      	lsls	r2, r2, #16
 80013b4:	4663      	mov	r3, ip
 80013b6:	4316      	orrs	r6, r2
 80013b8:	00c2      	lsls	r2, r0, #3
 80013ba:	2000      	movs	r0, #0
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	9900      	ldr	r1, [sp, #0]
 80013c0:	4643      	mov	r3, r8
 80013c2:	3101      	adds	r1, #1
 80013c4:	468c      	mov	ip, r1
 80013c6:	4649      	mov	r1, r9
 80013c8:	407b      	eors	r3, r7
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	290f      	cmp	r1, #15
 80013ce:	d826      	bhi.n	800141e <__aeabi_dmul+0xe6>
 80013d0:	4bbe      	ldr	r3, [pc, #760]	; (80016cc <__aeabi_dmul+0x394>)
 80013d2:	0089      	lsls	r1, r1, #2
 80013d4:	5859      	ldr	r1, [r3, r1]
 80013d6:	468f      	mov	pc, r1
 80013d8:	4643      	mov	r3, r8
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	0034      	movs	r4, r6
 80013de:	0015      	movs	r5, r2
 80013e0:	4683      	mov	fp, r0
 80013e2:	465b      	mov	r3, fp
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d016      	beq.n	8001416 <__aeabi_dmul+0xde>
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d100      	bne.n	80013ee <__aeabi_dmul+0xb6>
 80013ec:	e203      	b.n	80017f6 <__aeabi_dmul+0x4be>
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d000      	beq.n	80013f4 <__aeabi_dmul+0xbc>
 80013f2:	e0cd      	b.n	8001590 <__aeabi_dmul+0x258>
 80013f4:	2200      	movs	r2, #0
 80013f6:	2400      	movs	r4, #0
 80013f8:	2500      	movs	r5, #0
 80013fa:	9b01      	ldr	r3, [sp, #4]
 80013fc:	0512      	lsls	r2, r2, #20
 80013fe:	4322      	orrs	r2, r4
 8001400:	07db      	lsls	r3, r3, #31
 8001402:	431a      	orrs	r2, r3
 8001404:	0028      	movs	r0, r5
 8001406:	0011      	movs	r1, r2
 8001408:	b007      	add	sp, #28
 800140a:	bcf0      	pop	{r4, r5, r6, r7}
 800140c:	46bb      	mov	fp, r7
 800140e:	46b2      	mov	sl, r6
 8001410:	46a9      	mov	r9, r5
 8001412:	46a0      	mov	r8, r4
 8001414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001416:	2400      	movs	r4, #0
 8001418:	2500      	movs	r5, #0
 800141a:	4aaa      	ldr	r2, [pc, #680]	; (80016c4 <__aeabi_dmul+0x38c>)
 800141c:	e7ed      	b.n	80013fa <__aeabi_dmul+0xc2>
 800141e:	0c28      	lsrs	r0, r5, #16
 8001420:	042d      	lsls	r5, r5, #16
 8001422:	0c2d      	lsrs	r5, r5, #16
 8001424:	002b      	movs	r3, r5
 8001426:	0c11      	lsrs	r1, r2, #16
 8001428:	0412      	lsls	r2, r2, #16
 800142a:	0c12      	lsrs	r2, r2, #16
 800142c:	4353      	muls	r3, r2
 800142e:	4698      	mov	r8, r3
 8001430:	0013      	movs	r3, r2
 8001432:	002f      	movs	r7, r5
 8001434:	4343      	muls	r3, r0
 8001436:	4699      	mov	r9, r3
 8001438:	434f      	muls	r7, r1
 800143a:	444f      	add	r7, r9
 800143c:	46bb      	mov	fp, r7
 800143e:	4647      	mov	r7, r8
 8001440:	000b      	movs	r3, r1
 8001442:	0c3f      	lsrs	r7, r7, #16
 8001444:	46ba      	mov	sl, r7
 8001446:	4343      	muls	r3, r0
 8001448:	44da      	add	sl, fp
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	45d1      	cmp	r9, sl
 800144e:	d904      	bls.n	800145a <__aeabi_dmul+0x122>
 8001450:	2780      	movs	r7, #128	; 0x80
 8001452:	027f      	lsls	r7, r7, #9
 8001454:	46b9      	mov	r9, r7
 8001456:	444b      	add	r3, r9
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	4653      	mov	r3, sl
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	469b      	mov	fp, r3
 8001460:	4653      	mov	r3, sl
 8001462:	041f      	lsls	r7, r3, #16
 8001464:	4643      	mov	r3, r8
 8001466:	041b      	lsls	r3, r3, #16
 8001468:	0c1b      	lsrs	r3, r3, #16
 800146a:	4698      	mov	r8, r3
 800146c:	003b      	movs	r3, r7
 800146e:	4443      	add	r3, r8
 8001470:	9304      	str	r3, [sp, #16]
 8001472:	0c33      	lsrs	r3, r6, #16
 8001474:	0436      	lsls	r6, r6, #16
 8001476:	0c36      	lsrs	r6, r6, #16
 8001478:	4698      	mov	r8, r3
 800147a:	0033      	movs	r3, r6
 800147c:	4343      	muls	r3, r0
 800147e:	4699      	mov	r9, r3
 8001480:	4643      	mov	r3, r8
 8001482:	4343      	muls	r3, r0
 8001484:	002f      	movs	r7, r5
 8001486:	469a      	mov	sl, r3
 8001488:	4643      	mov	r3, r8
 800148a:	4377      	muls	r7, r6
 800148c:	435d      	muls	r5, r3
 800148e:	0c38      	lsrs	r0, r7, #16
 8001490:	444d      	add	r5, r9
 8001492:	1945      	adds	r5, r0, r5
 8001494:	45a9      	cmp	r9, r5
 8001496:	d903      	bls.n	80014a0 <__aeabi_dmul+0x168>
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	025b      	lsls	r3, r3, #9
 800149c:	4699      	mov	r9, r3
 800149e:	44ca      	add	sl, r9
 80014a0:	043f      	lsls	r7, r7, #16
 80014a2:	0c28      	lsrs	r0, r5, #16
 80014a4:	0c3f      	lsrs	r7, r7, #16
 80014a6:	042d      	lsls	r5, r5, #16
 80014a8:	19ed      	adds	r5, r5, r7
 80014aa:	0c27      	lsrs	r7, r4, #16
 80014ac:	0424      	lsls	r4, r4, #16
 80014ae:	0c24      	lsrs	r4, r4, #16
 80014b0:	0003      	movs	r3, r0
 80014b2:	0020      	movs	r0, r4
 80014b4:	4350      	muls	r0, r2
 80014b6:	437a      	muls	r2, r7
 80014b8:	4691      	mov	r9, r2
 80014ba:	003a      	movs	r2, r7
 80014bc:	4453      	add	r3, sl
 80014be:	9305      	str	r3, [sp, #20]
 80014c0:	0c03      	lsrs	r3, r0, #16
 80014c2:	469a      	mov	sl, r3
 80014c4:	434a      	muls	r2, r1
 80014c6:	4361      	muls	r1, r4
 80014c8:	4449      	add	r1, r9
 80014ca:	4451      	add	r1, sl
 80014cc:	44ab      	add	fp, r5
 80014ce:	4589      	cmp	r9, r1
 80014d0:	d903      	bls.n	80014da <__aeabi_dmul+0x1a2>
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	025b      	lsls	r3, r3, #9
 80014d6:	4699      	mov	r9, r3
 80014d8:	444a      	add	r2, r9
 80014da:	0400      	lsls	r0, r0, #16
 80014dc:	0c0b      	lsrs	r3, r1, #16
 80014de:	0c00      	lsrs	r0, r0, #16
 80014e0:	0409      	lsls	r1, r1, #16
 80014e2:	1809      	adds	r1, r1, r0
 80014e4:	0020      	movs	r0, r4
 80014e6:	4699      	mov	r9, r3
 80014e8:	4643      	mov	r3, r8
 80014ea:	4370      	muls	r0, r6
 80014ec:	435c      	muls	r4, r3
 80014ee:	437e      	muls	r6, r7
 80014f0:	435f      	muls	r7, r3
 80014f2:	0c03      	lsrs	r3, r0, #16
 80014f4:	4698      	mov	r8, r3
 80014f6:	19a4      	adds	r4, r4, r6
 80014f8:	4444      	add	r4, r8
 80014fa:	444a      	add	r2, r9
 80014fc:	9703      	str	r7, [sp, #12]
 80014fe:	42a6      	cmp	r6, r4
 8001500:	d904      	bls.n	800150c <__aeabi_dmul+0x1d4>
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	025b      	lsls	r3, r3, #9
 8001506:	4698      	mov	r8, r3
 8001508:	4447      	add	r7, r8
 800150a:	9703      	str	r7, [sp, #12]
 800150c:	0423      	lsls	r3, r4, #16
 800150e:	9e02      	ldr	r6, [sp, #8]
 8001510:	469a      	mov	sl, r3
 8001512:	9b05      	ldr	r3, [sp, #20]
 8001514:	445e      	add	r6, fp
 8001516:	4698      	mov	r8, r3
 8001518:	42ae      	cmp	r6, r5
 800151a:	41ad      	sbcs	r5, r5
 800151c:	1876      	adds	r6, r6, r1
 800151e:	428e      	cmp	r6, r1
 8001520:	4189      	sbcs	r1, r1
 8001522:	0400      	lsls	r0, r0, #16
 8001524:	0c00      	lsrs	r0, r0, #16
 8001526:	4450      	add	r0, sl
 8001528:	4440      	add	r0, r8
 800152a:	426d      	negs	r5, r5
 800152c:	1947      	adds	r7, r0, r5
 800152e:	46b8      	mov	r8, r7
 8001530:	4693      	mov	fp, r2
 8001532:	4249      	negs	r1, r1
 8001534:	4689      	mov	r9, r1
 8001536:	44c3      	add	fp, r8
 8001538:	44d9      	add	r9, fp
 800153a:	4298      	cmp	r0, r3
 800153c:	4180      	sbcs	r0, r0
 800153e:	45a8      	cmp	r8, r5
 8001540:	41ad      	sbcs	r5, r5
 8001542:	4593      	cmp	fp, r2
 8001544:	4192      	sbcs	r2, r2
 8001546:	4589      	cmp	r9, r1
 8001548:	4189      	sbcs	r1, r1
 800154a:	426d      	negs	r5, r5
 800154c:	4240      	negs	r0, r0
 800154e:	4328      	orrs	r0, r5
 8001550:	0c24      	lsrs	r4, r4, #16
 8001552:	4252      	negs	r2, r2
 8001554:	4249      	negs	r1, r1
 8001556:	430a      	orrs	r2, r1
 8001558:	9b03      	ldr	r3, [sp, #12]
 800155a:	1900      	adds	r0, r0, r4
 800155c:	1880      	adds	r0, r0, r2
 800155e:	18c7      	adds	r7, r0, r3
 8001560:	464b      	mov	r3, r9
 8001562:	0ddc      	lsrs	r4, r3, #23
 8001564:	9b04      	ldr	r3, [sp, #16]
 8001566:	0275      	lsls	r5, r6, #9
 8001568:	431d      	orrs	r5, r3
 800156a:	1e6a      	subs	r2, r5, #1
 800156c:	4195      	sbcs	r5, r2
 800156e:	464b      	mov	r3, r9
 8001570:	0df6      	lsrs	r6, r6, #23
 8001572:	027f      	lsls	r7, r7, #9
 8001574:	4335      	orrs	r5, r6
 8001576:	025a      	lsls	r2, r3, #9
 8001578:	433c      	orrs	r4, r7
 800157a:	4315      	orrs	r5, r2
 800157c:	01fb      	lsls	r3, r7, #7
 800157e:	d400      	bmi.n	8001582 <__aeabi_dmul+0x24a>
 8001580:	e11c      	b.n	80017bc <__aeabi_dmul+0x484>
 8001582:	2101      	movs	r1, #1
 8001584:	086a      	lsrs	r2, r5, #1
 8001586:	400d      	ands	r5, r1
 8001588:	4315      	orrs	r5, r2
 800158a:	07e2      	lsls	r2, r4, #31
 800158c:	4315      	orrs	r5, r2
 800158e:	0864      	lsrs	r4, r4, #1
 8001590:	494f      	ldr	r1, [pc, #316]	; (80016d0 <__aeabi_dmul+0x398>)
 8001592:	4461      	add	r1, ip
 8001594:	2900      	cmp	r1, #0
 8001596:	dc00      	bgt.n	800159a <__aeabi_dmul+0x262>
 8001598:	e0b0      	b.n	80016fc <__aeabi_dmul+0x3c4>
 800159a:	076b      	lsls	r3, r5, #29
 800159c:	d009      	beq.n	80015b2 <__aeabi_dmul+0x27a>
 800159e:	220f      	movs	r2, #15
 80015a0:	402a      	ands	r2, r5
 80015a2:	2a04      	cmp	r2, #4
 80015a4:	d005      	beq.n	80015b2 <__aeabi_dmul+0x27a>
 80015a6:	1d2a      	adds	r2, r5, #4
 80015a8:	42aa      	cmp	r2, r5
 80015aa:	41ad      	sbcs	r5, r5
 80015ac:	426d      	negs	r5, r5
 80015ae:	1964      	adds	r4, r4, r5
 80015b0:	0015      	movs	r5, r2
 80015b2:	01e3      	lsls	r3, r4, #7
 80015b4:	d504      	bpl.n	80015c0 <__aeabi_dmul+0x288>
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	4a46      	ldr	r2, [pc, #280]	; (80016d4 <__aeabi_dmul+0x39c>)
 80015ba:	00c9      	lsls	r1, r1, #3
 80015bc:	4014      	ands	r4, r2
 80015be:	4461      	add	r1, ip
 80015c0:	4a45      	ldr	r2, [pc, #276]	; (80016d8 <__aeabi_dmul+0x3a0>)
 80015c2:	4291      	cmp	r1, r2
 80015c4:	dd00      	ble.n	80015c8 <__aeabi_dmul+0x290>
 80015c6:	e726      	b.n	8001416 <__aeabi_dmul+0xde>
 80015c8:	0762      	lsls	r2, r4, #29
 80015ca:	08ed      	lsrs	r5, r5, #3
 80015cc:	0264      	lsls	r4, r4, #9
 80015ce:	0549      	lsls	r1, r1, #21
 80015d0:	4315      	orrs	r5, r2
 80015d2:	0b24      	lsrs	r4, r4, #12
 80015d4:	0d4a      	lsrs	r2, r1, #21
 80015d6:	e710      	b.n	80013fa <__aeabi_dmul+0xc2>
 80015d8:	4652      	mov	r2, sl
 80015da:	4332      	orrs	r2, r6
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dmul+0x2a8>
 80015de:	e07f      	b.n	80016e0 <__aeabi_dmul+0x3a8>
 80015e0:	2e00      	cmp	r6, #0
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0x2ae>
 80015e4:	e0dc      	b.n	80017a0 <__aeabi_dmul+0x468>
 80015e6:	0030      	movs	r0, r6
 80015e8:	f000 fe1e 	bl	8002228 <__clzsi2>
 80015ec:	0002      	movs	r2, r0
 80015ee:	3a0b      	subs	r2, #11
 80015f0:	231d      	movs	r3, #29
 80015f2:	0001      	movs	r1, r0
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	4652      	mov	r2, sl
 80015f8:	3908      	subs	r1, #8
 80015fa:	40da      	lsrs	r2, r3
 80015fc:	408e      	lsls	r6, r1
 80015fe:	4316      	orrs	r6, r2
 8001600:	4652      	mov	r2, sl
 8001602:	408a      	lsls	r2, r1
 8001604:	9b00      	ldr	r3, [sp, #0]
 8001606:	4935      	ldr	r1, [pc, #212]	; (80016dc <__aeabi_dmul+0x3a4>)
 8001608:	1a18      	subs	r0, r3, r0
 800160a:	0003      	movs	r3, r0
 800160c:	468c      	mov	ip, r1
 800160e:	4463      	add	r3, ip
 8001610:	2000      	movs	r0, #0
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	e6d3      	b.n	80013be <__aeabi_dmul+0x86>
 8001616:	0025      	movs	r5, r4
 8001618:	4305      	orrs	r5, r0
 800161a:	d04a      	beq.n	80016b2 <__aeabi_dmul+0x37a>
 800161c:	2c00      	cmp	r4, #0
 800161e:	d100      	bne.n	8001622 <__aeabi_dmul+0x2ea>
 8001620:	e0b0      	b.n	8001784 <__aeabi_dmul+0x44c>
 8001622:	0020      	movs	r0, r4
 8001624:	f000 fe00 	bl	8002228 <__clzsi2>
 8001628:	0001      	movs	r1, r0
 800162a:	0002      	movs	r2, r0
 800162c:	390b      	subs	r1, #11
 800162e:	231d      	movs	r3, #29
 8001630:	0010      	movs	r0, r2
 8001632:	1a5b      	subs	r3, r3, r1
 8001634:	0031      	movs	r1, r6
 8001636:	0035      	movs	r5, r6
 8001638:	3808      	subs	r0, #8
 800163a:	4084      	lsls	r4, r0
 800163c:	40d9      	lsrs	r1, r3
 800163e:	4085      	lsls	r5, r0
 8001640:	430c      	orrs	r4, r1
 8001642:	4826      	ldr	r0, [pc, #152]	; (80016dc <__aeabi_dmul+0x3a4>)
 8001644:	1a83      	subs	r3, r0, r2
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	4699      	mov	r9, r3
 800164c:	469b      	mov	fp, r3
 800164e:	e697      	b.n	8001380 <__aeabi_dmul+0x48>
 8001650:	0005      	movs	r5, r0
 8001652:	4325      	orrs	r5, r4
 8001654:	d126      	bne.n	80016a4 <__aeabi_dmul+0x36c>
 8001656:	2208      	movs	r2, #8
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2302      	movs	r3, #2
 800165c:	2400      	movs	r4, #0
 800165e:	4691      	mov	r9, r2
 8001660:	469b      	mov	fp, r3
 8001662:	e68d      	b.n	8001380 <__aeabi_dmul+0x48>
 8001664:	4652      	mov	r2, sl
 8001666:	9b00      	ldr	r3, [sp, #0]
 8001668:	4332      	orrs	r2, r6
 800166a:	d110      	bne.n	800168e <__aeabi_dmul+0x356>
 800166c:	4915      	ldr	r1, [pc, #84]	; (80016c4 <__aeabi_dmul+0x38c>)
 800166e:	2600      	movs	r6, #0
 8001670:	468c      	mov	ip, r1
 8001672:	4463      	add	r3, ip
 8001674:	4649      	mov	r1, r9
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2302      	movs	r3, #2
 800167a:	4319      	orrs	r1, r3
 800167c:	4689      	mov	r9, r1
 800167e:	2002      	movs	r0, #2
 8001680:	e69d      	b.n	80013be <__aeabi_dmul+0x86>
 8001682:	465b      	mov	r3, fp
 8001684:	9701      	str	r7, [sp, #4]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d000      	beq.n	800168c <__aeabi_dmul+0x354>
 800168a:	e6ad      	b.n	80013e8 <__aeabi_dmul+0xb0>
 800168c:	e6c3      	b.n	8001416 <__aeabi_dmul+0xde>
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <__aeabi_dmul+0x38c>)
 8001690:	2003      	movs	r0, #3
 8001692:	4694      	mov	ip, r2
 8001694:	4463      	add	r3, ip
 8001696:	464a      	mov	r2, r9
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2303      	movs	r3, #3
 800169c:	431a      	orrs	r2, r3
 800169e:	4691      	mov	r9, r2
 80016a0:	4652      	mov	r2, sl
 80016a2:	e68c      	b.n	80013be <__aeabi_dmul+0x86>
 80016a4:	220c      	movs	r2, #12
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2303      	movs	r3, #3
 80016aa:	0005      	movs	r5, r0
 80016ac:	4691      	mov	r9, r2
 80016ae:	469b      	mov	fp, r3
 80016b0:	e666      	b.n	8001380 <__aeabi_dmul+0x48>
 80016b2:	2304      	movs	r3, #4
 80016b4:	4699      	mov	r9, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	2400      	movs	r4, #0
 80016be:	469b      	mov	fp, r3
 80016c0:	e65e      	b.n	8001380 <__aeabi_dmul+0x48>
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	000007ff 	.word	0x000007ff
 80016c8:	fffffc01 	.word	0xfffffc01
 80016cc:	08008cf8 	.word	0x08008cf8
 80016d0:	000003ff 	.word	0x000003ff
 80016d4:	feffffff 	.word	0xfeffffff
 80016d8:	000007fe 	.word	0x000007fe
 80016dc:	fffffc0d 	.word	0xfffffc0d
 80016e0:	4649      	mov	r1, r9
 80016e2:	2301      	movs	r3, #1
 80016e4:	4319      	orrs	r1, r3
 80016e6:	4689      	mov	r9, r1
 80016e8:	2600      	movs	r6, #0
 80016ea:	2001      	movs	r0, #1
 80016ec:	e667      	b.n	80013be <__aeabi_dmul+0x86>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2480      	movs	r4, #128	; 0x80
 80016f2:	2500      	movs	r5, #0
 80016f4:	4a43      	ldr	r2, [pc, #268]	; (8001804 <__aeabi_dmul+0x4cc>)
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	0324      	lsls	r4, r4, #12
 80016fa:	e67e      	b.n	80013fa <__aeabi_dmul+0xc2>
 80016fc:	2001      	movs	r0, #1
 80016fe:	1a40      	subs	r0, r0, r1
 8001700:	2838      	cmp	r0, #56	; 0x38
 8001702:	dd00      	ble.n	8001706 <__aeabi_dmul+0x3ce>
 8001704:	e676      	b.n	80013f4 <__aeabi_dmul+0xbc>
 8001706:	281f      	cmp	r0, #31
 8001708:	dd5b      	ble.n	80017c2 <__aeabi_dmul+0x48a>
 800170a:	221f      	movs	r2, #31
 800170c:	0023      	movs	r3, r4
 800170e:	4252      	negs	r2, r2
 8001710:	1a51      	subs	r1, r2, r1
 8001712:	40cb      	lsrs	r3, r1
 8001714:	0019      	movs	r1, r3
 8001716:	2820      	cmp	r0, #32
 8001718:	d003      	beq.n	8001722 <__aeabi_dmul+0x3ea>
 800171a:	4a3b      	ldr	r2, [pc, #236]	; (8001808 <__aeabi_dmul+0x4d0>)
 800171c:	4462      	add	r2, ip
 800171e:	4094      	lsls	r4, r2
 8001720:	4325      	orrs	r5, r4
 8001722:	1e6a      	subs	r2, r5, #1
 8001724:	4195      	sbcs	r5, r2
 8001726:	002a      	movs	r2, r5
 8001728:	430a      	orrs	r2, r1
 800172a:	2107      	movs	r1, #7
 800172c:	000d      	movs	r5, r1
 800172e:	2400      	movs	r4, #0
 8001730:	4015      	ands	r5, r2
 8001732:	4211      	tst	r1, r2
 8001734:	d05b      	beq.n	80017ee <__aeabi_dmul+0x4b6>
 8001736:	210f      	movs	r1, #15
 8001738:	2400      	movs	r4, #0
 800173a:	4011      	ands	r1, r2
 800173c:	2904      	cmp	r1, #4
 800173e:	d053      	beq.n	80017e8 <__aeabi_dmul+0x4b0>
 8001740:	1d11      	adds	r1, r2, #4
 8001742:	4291      	cmp	r1, r2
 8001744:	4192      	sbcs	r2, r2
 8001746:	4252      	negs	r2, r2
 8001748:	18a4      	adds	r4, r4, r2
 800174a:	000a      	movs	r2, r1
 800174c:	0223      	lsls	r3, r4, #8
 800174e:	d54b      	bpl.n	80017e8 <__aeabi_dmul+0x4b0>
 8001750:	2201      	movs	r2, #1
 8001752:	2400      	movs	r4, #0
 8001754:	2500      	movs	r5, #0
 8001756:	e650      	b.n	80013fa <__aeabi_dmul+0xc2>
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	031b      	lsls	r3, r3, #12
 800175c:	421c      	tst	r4, r3
 800175e:	d009      	beq.n	8001774 <__aeabi_dmul+0x43c>
 8001760:	421e      	tst	r6, r3
 8001762:	d107      	bne.n	8001774 <__aeabi_dmul+0x43c>
 8001764:	4333      	orrs	r3, r6
 8001766:	031c      	lsls	r4, r3, #12
 8001768:	4643      	mov	r3, r8
 800176a:	0015      	movs	r5, r2
 800176c:	0b24      	lsrs	r4, r4, #12
 800176e:	4a25      	ldr	r2, [pc, #148]	; (8001804 <__aeabi_dmul+0x4cc>)
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	e642      	b.n	80013fa <__aeabi_dmul+0xc2>
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	0312      	lsls	r2, r2, #12
 8001778:	4314      	orrs	r4, r2
 800177a:	0324      	lsls	r4, r4, #12
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <__aeabi_dmul+0x4cc>)
 800177e:	0b24      	lsrs	r4, r4, #12
 8001780:	9701      	str	r7, [sp, #4]
 8001782:	e63a      	b.n	80013fa <__aeabi_dmul+0xc2>
 8001784:	f000 fd50 	bl	8002228 <__clzsi2>
 8001788:	0001      	movs	r1, r0
 800178a:	0002      	movs	r2, r0
 800178c:	3115      	adds	r1, #21
 800178e:	3220      	adds	r2, #32
 8001790:	291c      	cmp	r1, #28
 8001792:	dc00      	bgt.n	8001796 <__aeabi_dmul+0x45e>
 8001794:	e74b      	b.n	800162e <__aeabi_dmul+0x2f6>
 8001796:	0034      	movs	r4, r6
 8001798:	3808      	subs	r0, #8
 800179a:	2500      	movs	r5, #0
 800179c:	4084      	lsls	r4, r0
 800179e:	e750      	b.n	8001642 <__aeabi_dmul+0x30a>
 80017a0:	f000 fd42 	bl	8002228 <__clzsi2>
 80017a4:	0003      	movs	r3, r0
 80017a6:	001a      	movs	r2, r3
 80017a8:	3215      	adds	r2, #21
 80017aa:	3020      	adds	r0, #32
 80017ac:	2a1c      	cmp	r2, #28
 80017ae:	dc00      	bgt.n	80017b2 <__aeabi_dmul+0x47a>
 80017b0:	e71e      	b.n	80015f0 <__aeabi_dmul+0x2b8>
 80017b2:	4656      	mov	r6, sl
 80017b4:	3b08      	subs	r3, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	409e      	lsls	r6, r3
 80017ba:	e723      	b.n	8001604 <__aeabi_dmul+0x2cc>
 80017bc:	9b00      	ldr	r3, [sp, #0]
 80017be:	469c      	mov	ip, r3
 80017c0:	e6e6      	b.n	8001590 <__aeabi_dmul+0x258>
 80017c2:	4912      	ldr	r1, [pc, #72]	; (800180c <__aeabi_dmul+0x4d4>)
 80017c4:	0022      	movs	r2, r4
 80017c6:	4461      	add	r1, ip
 80017c8:	002e      	movs	r6, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	408a      	lsls	r2, r1
 80017ce:	40c6      	lsrs	r6, r0
 80017d0:	1e69      	subs	r1, r5, #1
 80017d2:	418d      	sbcs	r5, r1
 80017d4:	4332      	orrs	r2, r6
 80017d6:	432a      	orrs	r2, r5
 80017d8:	40c4      	lsrs	r4, r0
 80017da:	0753      	lsls	r3, r2, #29
 80017dc:	d0b6      	beq.n	800174c <__aeabi_dmul+0x414>
 80017de:	210f      	movs	r1, #15
 80017e0:	4011      	ands	r1, r2
 80017e2:	2904      	cmp	r1, #4
 80017e4:	d1ac      	bne.n	8001740 <__aeabi_dmul+0x408>
 80017e6:	e7b1      	b.n	800174c <__aeabi_dmul+0x414>
 80017e8:	0765      	lsls	r5, r4, #29
 80017ea:	0264      	lsls	r4, r4, #9
 80017ec:	0b24      	lsrs	r4, r4, #12
 80017ee:	08d2      	lsrs	r2, r2, #3
 80017f0:	4315      	orrs	r5, r2
 80017f2:	2200      	movs	r2, #0
 80017f4:	e601      	b.n	80013fa <__aeabi_dmul+0xc2>
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	0312      	lsls	r2, r2, #12
 80017fa:	4314      	orrs	r4, r2
 80017fc:	0324      	lsls	r4, r4, #12
 80017fe:	4a01      	ldr	r2, [pc, #4]	; (8001804 <__aeabi_dmul+0x4cc>)
 8001800:	0b24      	lsrs	r4, r4, #12
 8001802:	e5fa      	b.n	80013fa <__aeabi_dmul+0xc2>
 8001804:	000007ff 	.word	0x000007ff
 8001808:	0000043e 	.word	0x0000043e
 800180c:	0000041e 	.word	0x0000041e

08001810 <__aeabi_dsub>:
 8001810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001812:	4657      	mov	r7, sl
 8001814:	464e      	mov	r6, r9
 8001816:	4645      	mov	r5, r8
 8001818:	46de      	mov	lr, fp
 800181a:	b5e0      	push	{r5, r6, r7, lr}
 800181c:	001e      	movs	r6, r3
 800181e:	0017      	movs	r7, r2
 8001820:	004a      	lsls	r2, r1, #1
 8001822:	030b      	lsls	r3, r1, #12
 8001824:	0d52      	lsrs	r2, r2, #21
 8001826:	0a5b      	lsrs	r3, r3, #9
 8001828:	4690      	mov	r8, r2
 800182a:	0f42      	lsrs	r2, r0, #29
 800182c:	431a      	orrs	r2, r3
 800182e:	0fcd      	lsrs	r5, r1, #31
 8001830:	4ccd      	ldr	r4, [pc, #820]	; (8001b68 <__aeabi_dsub+0x358>)
 8001832:	0331      	lsls	r1, r6, #12
 8001834:	00c3      	lsls	r3, r0, #3
 8001836:	4694      	mov	ip, r2
 8001838:	0070      	lsls	r0, r6, #1
 800183a:	0f7a      	lsrs	r2, r7, #29
 800183c:	0a49      	lsrs	r1, r1, #9
 800183e:	00ff      	lsls	r7, r7, #3
 8001840:	469a      	mov	sl, r3
 8001842:	46b9      	mov	r9, r7
 8001844:	0d40      	lsrs	r0, r0, #21
 8001846:	0ff6      	lsrs	r6, r6, #31
 8001848:	4311      	orrs	r1, r2
 800184a:	42a0      	cmp	r0, r4
 800184c:	d100      	bne.n	8001850 <__aeabi_dsub+0x40>
 800184e:	e0b1      	b.n	80019b4 <__aeabi_dsub+0x1a4>
 8001850:	2201      	movs	r2, #1
 8001852:	4056      	eors	r6, r2
 8001854:	46b3      	mov	fp, r6
 8001856:	42b5      	cmp	r5, r6
 8001858:	d100      	bne.n	800185c <__aeabi_dsub+0x4c>
 800185a:	e088      	b.n	800196e <__aeabi_dsub+0x15e>
 800185c:	4642      	mov	r2, r8
 800185e:	1a12      	subs	r2, r2, r0
 8001860:	2a00      	cmp	r2, #0
 8001862:	dc00      	bgt.n	8001866 <__aeabi_dsub+0x56>
 8001864:	e0ae      	b.n	80019c4 <__aeabi_dsub+0x1b4>
 8001866:	2800      	cmp	r0, #0
 8001868:	d100      	bne.n	800186c <__aeabi_dsub+0x5c>
 800186a:	e0c1      	b.n	80019f0 <__aeabi_dsub+0x1e0>
 800186c:	48be      	ldr	r0, [pc, #760]	; (8001b68 <__aeabi_dsub+0x358>)
 800186e:	4580      	cmp	r8, r0
 8001870:	d100      	bne.n	8001874 <__aeabi_dsub+0x64>
 8001872:	e151      	b.n	8001b18 <__aeabi_dsub+0x308>
 8001874:	2080      	movs	r0, #128	; 0x80
 8001876:	0400      	lsls	r0, r0, #16
 8001878:	4301      	orrs	r1, r0
 800187a:	2a38      	cmp	r2, #56	; 0x38
 800187c:	dd00      	ble.n	8001880 <__aeabi_dsub+0x70>
 800187e:	e17b      	b.n	8001b78 <__aeabi_dsub+0x368>
 8001880:	2a1f      	cmp	r2, #31
 8001882:	dd00      	ble.n	8001886 <__aeabi_dsub+0x76>
 8001884:	e1ee      	b.n	8001c64 <__aeabi_dsub+0x454>
 8001886:	2020      	movs	r0, #32
 8001888:	003e      	movs	r6, r7
 800188a:	1a80      	subs	r0, r0, r2
 800188c:	000c      	movs	r4, r1
 800188e:	40d6      	lsrs	r6, r2
 8001890:	40d1      	lsrs	r1, r2
 8001892:	4087      	lsls	r7, r0
 8001894:	4662      	mov	r2, ip
 8001896:	4084      	lsls	r4, r0
 8001898:	1a52      	subs	r2, r2, r1
 800189a:	1e78      	subs	r0, r7, #1
 800189c:	4187      	sbcs	r7, r0
 800189e:	4694      	mov	ip, r2
 80018a0:	4334      	orrs	r4, r6
 80018a2:	4327      	orrs	r7, r4
 80018a4:	1bdc      	subs	r4, r3, r7
 80018a6:	42a3      	cmp	r3, r4
 80018a8:	419b      	sbcs	r3, r3
 80018aa:	4662      	mov	r2, ip
 80018ac:	425b      	negs	r3, r3
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4699      	mov	r9, r3
 80018b2:	464b      	mov	r3, r9
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	d400      	bmi.n	80018ba <__aeabi_dsub+0xaa>
 80018b8:	e118      	b.n	8001aec <__aeabi_dsub+0x2dc>
 80018ba:	464b      	mov	r3, r9
 80018bc:	0258      	lsls	r0, r3, #9
 80018be:	0a43      	lsrs	r3, r0, #9
 80018c0:	4699      	mov	r9, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d100      	bne.n	80018ca <__aeabi_dsub+0xba>
 80018c8:	e137      	b.n	8001b3a <__aeabi_dsub+0x32a>
 80018ca:	4648      	mov	r0, r9
 80018cc:	f000 fcac 	bl	8002228 <__clzsi2>
 80018d0:	0001      	movs	r1, r0
 80018d2:	3908      	subs	r1, #8
 80018d4:	2320      	movs	r3, #32
 80018d6:	0022      	movs	r2, r4
 80018d8:	4648      	mov	r0, r9
 80018da:	1a5b      	subs	r3, r3, r1
 80018dc:	40da      	lsrs	r2, r3
 80018de:	4088      	lsls	r0, r1
 80018e0:	408c      	lsls	r4, r1
 80018e2:	4643      	mov	r3, r8
 80018e4:	4310      	orrs	r0, r2
 80018e6:	4588      	cmp	r8, r1
 80018e8:	dd00      	ble.n	80018ec <__aeabi_dsub+0xdc>
 80018ea:	e136      	b.n	8001b5a <__aeabi_dsub+0x34a>
 80018ec:	1ac9      	subs	r1, r1, r3
 80018ee:	1c4b      	adds	r3, r1, #1
 80018f0:	2b1f      	cmp	r3, #31
 80018f2:	dd00      	ble.n	80018f6 <__aeabi_dsub+0xe6>
 80018f4:	e0ea      	b.n	8001acc <__aeabi_dsub+0x2bc>
 80018f6:	2220      	movs	r2, #32
 80018f8:	0026      	movs	r6, r4
 80018fa:	1ad2      	subs	r2, r2, r3
 80018fc:	0001      	movs	r1, r0
 80018fe:	4094      	lsls	r4, r2
 8001900:	40de      	lsrs	r6, r3
 8001902:	40d8      	lsrs	r0, r3
 8001904:	2300      	movs	r3, #0
 8001906:	4091      	lsls	r1, r2
 8001908:	1e62      	subs	r2, r4, #1
 800190a:	4194      	sbcs	r4, r2
 800190c:	4681      	mov	r9, r0
 800190e:	4698      	mov	r8, r3
 8001910:	4331      	orrs	r1, r6
 8001912:	430c      	orrs	r4, r1
 8001914:	0763      	lsls	r3, r4, #29
 8001916:	d009      	beq.n	800192c <__aeabi_dsub+0x11c>
 8001918:	230f      	movs	r3, #15
 800191a:	4023      	ands	r3, r4
 800191c:	2b04      	cmp	r3, #4
 800191e:	d005      	beq.n	800192c <__aeabi_dsub+0x11c>
 8001920:	1d23      	adds	r3, r4, #4
 8001922:	42a3      	cmp	r3, r4
 8001924:	41a4      	sbcs	r4, r4
 8001926:	4264      	negs	r4, r4
 8001928:	44a1      	add	r9, r4
 800192a:	001c      	movs	r4, r3
 800192c:	464b      	mov	r3, r9
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	d400      	bmi.n	8001934 <__aeabi_dsub+0x124>
 8001932:	e0de      	b.n	8001af2 <__aeabi_dsub+0x2e2>
 8001934:	4641      	mov	r1, r8
 8001936:	4b8c      	ldr	r3, [pc, #560]	; (8001b68 <__aeabi_dsub+0x358>)
 8001938:	3101      	adds	r1, #1
 800193a:	4299      	cmp	r1, r3
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x130>
 800193e:	e0e7      	b.n	8001b10 <__aeabi_dsub+0x300>
 8001940:	464b      	mov	r3, r9
 8001942:	488a      	ldr	r0, [pc, #552]	; (8001b6c <__aeabi_dsub+0x35c>)
 8001944:	08e4      	lsrs	r4, r4, #3
 8001946:	4003      	ands	r3, r0
 8001948:	0018      	movs	r0, r3
 800194a:	0549      	lsls	r1, r1, #21
 800194c:	075b      	lsls	r3, r3, #29
 800194e:	0240      	lsls	r0, r0, #9
 8001950:	4323      	orrs	r3, r4
 8001952:	0d4a      	lsrs	r2, r1, #21
 8001954:	0b04      	lsrs	r4, r0, #12
 8001956:	0512      	lsls	r2, r2, #20
 8001958:	07ed      	lsls	r5, r5, #31
 800195a:	4322      	orrs	r2, r4
 800195c:	432a      	orrs	r2, r5
 800195e:	0018      	movs	r0, r3
 8001960:	0011      	movs	r1, r2
 8001962:	bcf0      	pop	{r4, r5, r6, r7}
 8001964:	46bb      	mov	fp, r7
 8001966:	46b2      	mov	sl, r6
 8001968:	46a9      	mov	r9, r5
 800196a:	46a0      	mov	r8, r4
 800196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800196e:	4642      	mov	r2, r8
 8001970:	1a12      	subs	r2, r2, r0
 8001972:	2a00      	cmp	r2, #0
 8001974:	dd52      	ble.n	8001a1c <__aeabi_dsub+0x20c>
 8001976:	2800      	cmp	r0, #0
 8001978:	d100      	bne.n	800197c <__aeabi_dsub+0x16c>
 800197a:	e09c      	b.n	8001ab6 <__aeabi_dsub+0x2a6>
 800197c:	45a0      	cmp	r8, r4
 800197e:	d100      	bne.n	8001982 <__aeabi_dsub+0x172>
 8001980:	e0ca      	b.n	8001b18 <__aeabi_dsub+0x308>
 8001982:	2080      	movs	r0, #128	; 0x80
 8001984:	0400      	lsls	r0, r0, #16
 8001986:	4301      	orrs	r1, r0
 8001988:	2a38      	cmp	r2, #56	; 0x38
 800198a:	dd00      	ble.n	800198e <__aeabi_dsub+0x17e>
 800198c:	e149      	b.n	8001c22 <__aeabi_dsub+0x412>
 800198e:	2a1f      	cmp	r2, #31
 8001990:	dc00      	bgt.n	8001994 <__aeabi_dsub+0x184>
 8001992:	e197      	b.n	8001cc4 <__aeabi_dsub+0x4b4>
 8001994:	0010      	movs	r0, r2
 8001996:	000e      	movs	r6, r1
 8001998:	3820      	subs	r0, #32
 800199a:	40c6      	lsrs	r6, r0
 800199c:	2a20      	cmp	r2, #32
 800199e:	d004      	beq.n	80019aa <__aeabi_dsub+0x19a>
 80019a0:	2040      	movs	r0, #64	; 0x40
 80019a2:	1a82      	subs	r2, r0, r2
 80019a4:	4091      	lsls	r1, r2
 80019a6:	430f      	orrs	r7, r1
 80019a8:	46b9      	mov	r9, r7
 80019aa:	464c      	mov	r4, r9
 80019ac:	1e62      	subs	r2, r4, #1
 80019ae:	4194      	sbcs	r4, r2
 80019b0:	4334      	orrs	r4, r6
 80019b2:	e13a      	b.n	8001c2a <__aeabi_dsub+0x41a>
 80019b4:	000a      	movs	r2, r1
 80019b6:	433a      	orrs	r2, r7
 80019b8:	d028      	beq.n	8001a0c <__aeabi_dsub+0x1fc>
 80019ba:	46b3      	mov	fp, r6
 80019bc:	42b5      	cmp	r5, r6
 80019be:	d02b      	beq.n	8001a18 <__aeabi_dsub+0x208>
 80019c0:	4a6b      	ldr	r2, [pc, #428]	; (8001b70 <__aeabi_dsub+0x360>)
 80019c2:	4442      	add	r2, r8
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d05d      	beq.n	8001a84 <__aeabi_dsub+0x274>
 80019c8:	4642      	mov	r2, r8
 80019ca:	4644      	mov	r4, r8
 80019cc:	1a82      	subs	r2, r0, r2
 80019ce:	2c00      	cmp	r4, #0
 80019d0:	d000      	beq.n	80019d4 <__aeabi_dsub+0x1c4>
 80019d2:	e0f5      	b.n	8001bc0 <__aeabi_dsub+0x3b0>
 80019d4:	4665      	mov	r5, ip
 80019d6:	431d      	orrs	r5, r3
 80019d8:	d100      	bne.n	80019dc <__aeabi_dsub+0x1cc>
 80019da:	e19c      	b.n	8001d16 <__aeabi_dsub+0x506>
 80019dc:	1e55      	subs	r5, r2, #1
 80019de:	2a01      	cmp	r2, #1
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1d4>
 80019e2:	e1fb      	b.n	8001ddc <__aeabi_dsub+0x5cc>
 80019e4:	4c60      	ldr	r4, [pc, #384]	; (8001b68 <__aeabi_dsub+0x358>)
 80019e6:	42a2      	cmp	r2, r4
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x1dc>
 80019ea:	e1bd      	b.n	8001d68 <__aeabi_dsub+0x558>
 80019ec:	002a      	movs	r2, r5
 80019ee:	e0f0      	b.n	8001bd2 <__aeabi_dsub+0x3c2>
 80019f0:	0008      	movs	r0, r1
 80019f2:	4338      	orrs	r0, r7
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dsub+0x1e8>
 80019f6:	e0c3      	b.n	8001b80 <__aeabi_dsub+0x370>
 80019f8:	1e50      	subs	r0, r2, #1
 80019fa:	2a01      	cmp	r2, #1
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x1f0>
 80019fe:	e1a8      	b.n	8001d52 <__aeabi_dsub+0x542>
 8001a00:	4c59      	ldr	r4, [pc, #356]	; (8001b68 <__aeabi_dsub+0x358>)
 8001a02:	42a2      	cmp	r2, r4
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x1f8>
 8001a06:	e087      	b.n	8001b18 <__aeabi_dsub+0x308>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	e736      	b.n	800187a <__aeabi_dsub+0x6a>
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4056      	eors	r6, r2
 8001a10:	46b3      	mov	fp, r6
 8001a12:	42b5      	cmp	r5, r6
 8001a14:	d000      	beq.n	8001a18 <__aeabi_dsub+0x208>
 8001a16:	e721      	b.n	800185c <__aeabi_dsub+0x4c>
 8001a18:	4a55      	ldr	r2, [pc, #340]	; (8001b70 <__aeabi_dsub+0x360>)
 8001a1a:	4442      	add	r2, r8
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x212>
 8001a20:	e0b5      	b.n	8001b8e <__aeabi_dsub+0x37e>
 8001a22:	4642      	mov	r2, r8
 8001a24:	4644      	mov	r4, r8
 8001a26:	1a82      	subs	r2, r0, r2
 8001a28:	2c00      	cmp	r4, #0
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dsub+0x21e>
 8001a2c:	e138      	b.n	8001ca0 <__aeabi_dsub+0x490>
 8001a2e:	4e4e      	ldr	r6, [pc, #312]	; (8001b68 <__aeabi_dsub+0x358>)
 8001a30:	42b0      	cmp	r0, r6
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dsub+0x226>
 8001a34:	e1de      	b.n	8001df4 <__aeabi_dsub+0x5e4>
 8001a36:	2680      	movs	r6, #128	; 0x80
 8001a38:	4664      	mov	r4, ip
 8001a3a:	0436      	lsls	r6, r6, #16
 8001a3c:	4334      	orrs	r4, r6
 8001a3e:	46a4      	mov	ip, r4
 8001a40:	2a38      	cmp	r2, #56	; 0x38
 8001a42:	dd00      	ble.n	8001a46 <__aeabi_dsub+0x236>
 8001a44:	e196      	b.n	8001d74 <__aeabi_dsub+0x564>
 8001a46:	2a1f      	cmp	r2, #31
 8001a48:	dd00      	ble.n	8001a4c <__aeabi_dsub+0x23c>
 8001a4a:	e224      	b.n	8001e96 <__aeabi_dsub+0x686>
 8001a4c:	2620      	movs	r6, #32
 8001a4e:	1ab4      	subs	r4, r6, r2
 8001a50:	46a2      	mov	sl, r4
 8001a52:	4664      	mov	r4, ip
 8001a54:	4656      	mov	r6, sl
 8001a56:	40b4      	lsls	r4, r6
 8001a58:	46a1      	mov	r9, r4
 8001a5a:	001c      	movs	r4, r3
 8001a5c:	464e      	mov	r6, r9
 8001a5e:	40d4      	lsrs	r4, r2
 8001a60:	4326      	orrs	r6, r4
 8001a62:	0034      	movs	r4, r6
 8001a64:	4656      	mov	r6, sl
 8001a66:	40b3      	lsls	r3, r6
 8001a68:	1e5e      	subs	r6, r3, #1
 8001a6a:	41b3      	sbcs	r3, r6
 8001a6c:	431c      	orrs	r4, r3
 8001a6e:	4663      	mov	r3, ip
 8001a70:	40d3      	lsrs	r3, r2
 8001a72:	18c9      	adds	r1, r1, r3
 8001a74:	19e4      	adds	r4, r4, r7
 8001a76:	42bc      	cmp	r4, r7
 8001a78:	41bf      	sbcs	r7, r7
 8001a7a:	427f      	negs	r7, r7
 8001a7c:	46b9      	mov	r9, r7
 8001a7e:	4680      	mov	r8, r0
 8001a80:	4489      	add	r9, r1
 8001a82:	e0d8      	b.n	8001c36 <__aeabi_dsub+0x426>
 8001a84:	4640      	mov	r0, r8
 8001a86:	4c3b      	ldr	r4, [pc, #236]	; (8001b74 <__aeabi_dsub+0x364>)
 8001a88:	3001      	adds	r0, #1
 8001a8a:	4220      	tst	r0, r4
 8001a8c:	d000      	beq.n	8001a90 <__aeabi_dsub+0x280>
 8001a8e:	e0b4      	b.n	8001bfa <__aeabi_dsub+0x3ea>
 8001a90:	4640      	mov	r0, r8
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d000      	beq.n	8001a98 <__aeabi_dsub+0x288>
 8001a96:	e144      	b.n	8001d22 <__aeabi_dsub+0x512>
 8001a98:	4660      	mov	r0, ip
 8001a9a:	4318      	orrs	r0, r3
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dsub+0x290>
 8001a9e:	e190      	b.n	8001dc2 <__aeabi_dsub+0x5b2>
 8001aa0:	0008      	movs	r0, r1
 8001aa2:	4338      	orrs	r0, r7
 8001aa4:	d000      	beq.n	8001aa8 <__aeabi_dsub+0x298>
 8001aa6:	e1aa      	b.n	8001dfe <__aeabi_dsub+0x5ee>
 8001aa8:	4661      	mov	r1, ip
 8001aaa:	08db      	lsrs	r3, r3, #3
 8001aac:	0749      	lsls	r1, r1, #29
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	4661      	mov	r1, ip
 8001ab2:	08cc      	lsrs	r4, r1, #3
 8001ab4:	e027      	b.n	8001b06 <__aeabi_dsub+0x2f6>
 8001ab6:	0008      	movs	r0, r1
 8001ab8:	4338      	orrs	r0, r7
 8001aba:	d061      	beq.n	8001b80 <__aeabi_dsub+0x370>
 8001abc:	1e50      	subs	r0, r2, #1
 8001abe:	2a01      	cmp	r2, #1
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x2b4>
 8001ac2:	e139      	b.n	8001d38 <__aeabi_dsub+0x528>
 8001ac4:	42a2      	cmp	r2, r4
 8001ac6:	d027      	beq.n	8001b18 <__aeabi_dsub+0x308>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	e75d      	b.n	8001988 <__aeabi_dsub+0x178>
 8001acc:	0002      	movs	r2, r0
 8001ace:	391f      	subs	r1, #31
 8001ad0:	40ca      	lsrs	r2, r1
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d003      	beq.n	8001ae0 <__aeabi_dsub+0x2d0>
 8001ad8:	2240      	movs	r2, #64	; 0x40
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	4098      	lsls	r0, r3
 8001ade:	4304      	orrs	r4, r0
 8001ae0:	1e63      	subs	r3, r4, #1
 8001ae2:	419c      	sbcs	r4, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	4699      	mov	r9, r3
 8001ae8:	4698      	mov	r8, r3
 8001aea:	430c      	orrs	r4, r1
 8001aec:	0763      	lsls	r3, r4, #29
 8001aee:	d000      	beq.n	8001af2 <__aeabi_dsub+0x2e2>
 8001af0:	e712      	b.n	8001918 <__aeabi_dsub+0x108>
 8001af2:	464b      	mov	r3, r9
 8001af4:	464a      	mov	r2, r9
 8001af6:	08e4      	lsrs	r4, r4, #3
 8001af8:	075b      	lsls	r3, r3, #29
 8001afa:	4323      	orrs	r3, r4
 8001afc:	08d4      	lsrs	r4, r2, #3
 8001afe:	4642      	mov	r2, r8
 8001b00:	4919      	ldr	r1, [pc, #100]	; (8001b68 <__aeabi_dsub+0x358>)
 8001b02:	428a      	cmp	r2, r1
 8001b04:	d00e      	beq.n	8001b24 <__aeabi_dsub+0x314>
 8001b06:	0324      	lsls	r4, r4, #12
 8001b08:	0552      	lsls	r2, r2, #21
 8001b0a:	0b24      	lsrs	r4, r4, #12
 8001b0c:	0d52      	lsrs	r2, r2, #21
 8001b0e:	e722      	b.n	8001956 <__aeabi_dsub+0x146>
 8001b10:	000a      	movs	r2, r1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2300      	movs	r3, #0
 8001b16:	e71e      	b.n	8001956 <__aeabi_dsub+0x146>
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	4662      	mov	r2, ip
 8001b1c:	0752      	lsls	r2, r2, #29
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	4662      	mov	r2, ip
 8001b22:	08d4      	lsrs	r4, r2, #3
 8001b24:	001a      	movs	r2, r3
 8001b26:	4322      	orrs	r2, r4
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x31c>
 8001b2a:	e1fc      	b.n	8001f26 <__aeabi_dsub+0x716>
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	0312      	lsls	r2, r2, #12
 8001b30:	4314      	orrs	r4, r2
 8001b32:	0324      	lsls	r4, r4, #12
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <__aeabi_dsub+0x358>)
 8001b36:	0b24      	lsrs	r4, r4, #12
 8001b38:	e70d      	b.n	8001956 <__aeabi_dsub+0x146>
 8001b3a:	0020      	movs	r0, r4
 8001b3c:	f000 fb74 	bl	8002228 <__clzsi2>
 8001b40:	0001      	movs	r1, r0
 8001b42:	3118      	adds	r1, #24
 8001b44:	291f      	cmp	r1, #31
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_dsub+0x33a>
 8001b48:	e6c4      	b.n	80018d4 <__aeabi_dsub+0xc4>
 8001b4a:	3808      	subs	r0, #8
 8001b4c:	4084      	lsls	r4, r0
 8001b4e:	4643      	mov	r3, r8
 8001b50:	0020      	movs	r0, r4
 8001b52:	2400      	movs	r4, #0
 8001b54:	4588      	cmp	r8, r1
 8001b56:	dc00      	bgt.n	8001b5a <__aeabi_dsub+0x34a>
 8001b58:	e6c8      	b.n	80018ec <__aeabi_dsub+0xdc>
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__aeabi_dsub+0x35c>)
 8001b5c:	1a5b      	subs	r3, r3, r1
 8001b5e:	4010      	ands	r0, r2
 8001b60:	4698      	mov	r8, r3
 8001b62:	4681      	mov	r9, r0
 8001b64:	e6d6      	b.n	8001914 <__aeabi_dsub+0x104>
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	000007ff 	.word	0x000007ff
 8001b6c:	ff7fffff 	.word	0xff7fffff
 8001b70:	fffff801 	.word	0xfffff801
 8001b74:	000007fe 	.word	0x000007fe
 8001b78:	430f      	orrs	r7, r1
 8001b7a:	1e7a      	subs	r2, r7, #1
 8001b7c:	4197      	sbcs	r7, r2
 8001b7e:	e691      	b.n	80018a4 <__aeabi_dsub+0x94>
 8001b80:	4661      	mov	r1, ip
 8001b82:	08db      	lsrs	r3, r3, #3
 8001b84:	0749      	lsls	r1, r1, #29
 8001b86:	430b      	orrs	r3, r1
 8001b88:	4661      	mov	r1, ip
 8001b8a:	08cc      	lsrs	r4, r1, #3
 8001b8c:	e7b8      	b.n	8001b00 <__aeabi_dsub+0x2f0>
 8001b8e:	4640      	mov	r0, r8
 8001b90:	4cd3      	ldr	r4, [pc, #844]	; (8001ee0 <__aeabi_dsub+0x6d0>)
 8001b92:	3001      	adds	r0, #1
 8001b94:	4220      	tst	r0, r4
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dsub+0x38a>
 8001b98:	e0a2      	b.n	8001ce0 <__aeabi_dsub+0x4d0>
 8001b9a:	4640      	mov	r0, r8
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d000      	beq.n	8001ba2 <__aeabi_dsub+0x392>
 8001ba0:	e101      	b.n	8001da6 <__aeabi_dsub+0x596>
 8001ba2:	4660      	mov	r0, ip
 8001ba4:	4318      	orrs	r0, r3
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x39a>
 8001ba8:	e15e      	b.n	8001e68 <__aeabi_dsub+0x658>
 8001baa:	0008      	movs	r0, r1
 8001bac:	4338      	orrs	r0, r7
 8001bae:	d000      	beq.n	8001bb2 <__aeabi_dsub+0x3a2>
 8001bb0:	e15f      	b.n	8001e72 <__aeabi_dsub+0x662>
 8001bb2:	4661      	mov	r1, ip
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	0749      	lsls	r1, r1, #29
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	4661      	mov	r1, ip
 8001bbc:	08cc      	lsrs	r4, r1, #3
 8001bbe:	e7a2      	b.n	8001b06 <__aeabi_dsub+0x2f6>
 8001bc0:	4dc8      	ldr	r5, [pc, #800]	; (8001ee4 <__aeabi_dsub+0x6d4>)
 8001bc2:	42a8      	cmp	r0, r5
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x3b8>
 8001bc6:	e0cf      	b.n	8001d68 <__aeabi_dsub+0x558>
 8001bc8:	2580      	movs	r5, #128	; 0x80
 8001bca:	4664      	mov	r4, ip
 8001bcc:	042d      	lsls	r5, r5, #16
 8001bce:	432c      	orrs	r4, r5
 8001bd0:	46a4      	mov	ip, r4
 8001bd2:	2a38      	cmp	r2, #56	; 0x38
 8001bd4:	dc56      	bgt.n	8001c84 <__aeabi_dsub+0x474>
 8001bd6:	2a1f      	cmp	r2, #31
 8001bd8:	dd00      	ble.n	8001bdc <__aeabi_dsub+0x3cc>
 8001bda:	e0d1      	b.n	8001d80 <__aeabi_dsub+0x570>
 8001bdc:	2520      	movs	r5, #32
 8001bde:	001e      	movs	r6, r3
 8001be0:	1aad      	subs	r5, r5, r2
 8001be2:	4664      	mov	r4, ip
 8001be4:	40ab      	lsls	r3, r5
 8001be6:	40ac      	lsls	r4, r5
 8001be8:	40d6      	lsrs	r6, r2
 8001bea:	1e5d      	subs	r5, r3, #1
 8001bec:	41ab      	sbcs	r3, r5
 8001bee:	4334      	orrs	r4, r6
 8001bf0:	4323      	orrs	r3, r4
 8001bf2:	4664      	mov	r4, ip
 8001bf4:	40d4      	lsrs	r4, r2
 8001bf6:	1b09      	subs	r1, r1, r4
 8001bf8:	e049      	b.n	8001c8e <__aeabi_dsub+0x47e>
 8001bfa:	4660      	mov	r0, ip
 8001bfc:	1bdc      	subs	r4, r3, r7
 8001bfe:	1a46      	subs	r6, r0, r1
 8001c00:	42a3      	cmp	r3, r4
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4240      	negs	r0, r0
 8001c06:	4681      	mov	r9, r0
 8001c08:	0030      	movs	r0, r6
 8001c0a:	464e      	mov	r6, r9
 8001c0c:	1b80      	subs	r0, r0, r6
 8001c0e:	4681      	mov	r9, r0
 8001c10:	0200      	lsls	r0, r0, #8
 8001c12:	d476      	bmi.n	8001d02 <__aeabi_dsub+0x4f2>
 8001c14:	464b      	mov	r3, r9
 8001c16:	4323      	orrs	r3, r4
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dsub+0x40c>
 8001c1a:	e652      	b.n	80018c2 <__aeabi_dsub+0xb2>
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	2500      	movs	r5, #0
 8001c20:	e771      	b.n	8001b06 <__aeabi_dsub+0x2f6>
 8001c22:	4339      	orrs	r1, r7
 8001c24:	000c      	movs	r4, r1
 8001c26:	1e62      	subs	r2, r4, #1
 8001c28:	4194      	sbcs	r4, r2
 8001c2a:	18e4      	adds	r4, r4, r3
 8001c2c:	429c      	cmp	r4, r3
 8001c2e:	419b      	sbcs	r3, r3
 8001c30:	425b      	negs	r3, r3
 8001c32:	4463      	add	r3, ip
 8001c34:	4699      	mov	r9, r3
 8001c36:	464b      	mov	r3, r9
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	d400      	bmi.n	8001c3e <__aeabi_dsub+0x42e>
 8001c3c:	e756      	b.n	8001aec <__aeabi_dsub+0x2dc>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	469c      	mov	ip, r3
 8001c42:	4ba8      	ldr	r3, [pc, #672]	; (8001ee4 <__aeabi_dsub+0x6d4>)
 8001c44:	44e0      	add	r8, ip
 8001c46:	4598      	cmp	r8, r3
 8001c48:	d038      	beq.n	8001cbc <__aeabi_dsub+0x4ac>
 8001c4a:	464b      	mov	r3, r9
 8001c4c:	48a6      	ldr	r0, [pc, #664]	; (8001ee8 <__aeabi_dsub+0x6d8>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4003      	ands	r3, r0
 8001c52:	0018      	movs	r0, r3
 8001c54:	0863      	lsrs	r3, r4, #1
 8001c56:	4014      	ands	r4, r2
 8001c58:	431c      	orrs	r4, r3
 8001c5a:	07c3      	lsls	r3, r0, #31
 8001c5c:	431c      	orrs	r4, r3
 8001c5e:	0843      	lsrs	r3, r0, #1
 8001c60:	4699      	mov	r9, r3
 8001c62:	e657      	b.n	8001914 <__aeabi_dsub+0x104>
 8001c64:	0010      	movs	r0, r2
 8001c66:	000e      	movs	r6, r1
 8001c68:	3820      	subs	r0, #32
 8001c6a:	40c6      	lsrs	r6, r0
 8001c6c:	2a20      	cmp	r2, #32
 8001c6e:	d004      	beq.n	8001c7a <__aeabi_dsub+0x46a>
 8001c70:	2040      	movs	r0, #64	; 0x40
 8001c72:	1a82      	subs	r2, r0, r2
 8001c74:	4091      	lsls	r1, r2
 8001c76:	430f      	orrs	r7, r1
 8001c78:	46b9      	mov	r9, r7
 8001c7a:	464f      	mov	r7, r9
 8001c7c:	1e7a      	subs	r2, r7, #1
 8001c7e:	4197      	sbcs	r7, r2
 8001c80:	4337      	orrs	r7, r6
 8001c82:	e60f      	b.n	80018a4 <__aeabi_dsub+0x94>
 8001c84:	4662      	mov	r2, ip
 8001c86:	431a      	orrs	r2, r3
 8001c88:	0013      	movs	r3, r2
 8001c8a:	1e5a      	subs	r2, r3, #1
 8001c8c:	4193      	sbcs	r3, r2
 8001c8e:	1afc      	subs	r4, r7, r3
 8001c90:	42a7      	cmp	r7, r4
 8001c92:	41bf      	sbcs	r7, r7
 8001c94:	427f      	negs	r7, r7
 8001c96:	1bcb      	subs	r3, r1, r7
 8001c98:	4699      	mov	r9, r3
 8001c9a:	465d      	mov	r5, fp
 8001c9c:	4680      	mov	r8, r0
 8001c9e:	e608      	b.n	80018b2 <__aeabi_dsub+0xa2>
 8001ca0:	4666      	mov	r6, ip
 8001ca2:	431e      	orrs	r6, r3
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x498>
 8001ca6:	e0be      	b.n	8001e26 <__aeabi_dsub+0x616>
 8001ca8:	1e56      	subs	r6, r2, #1
 8001caa:	2a01      	cmp	r2, #1
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x4a0>
 8001cae:	e109      	b.n	8001ec4 <__aeabi_dsub+0x6b4>
 8001cb0:	4c8c      	ldr	r4, [pc, #560]	; (8001ee4 <__aeabi_dsub+0x6d4>)
 8001cb2:	42a2      	cmp	r2, r4
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x4a8>
 8001cb6:	e119      	b.n	8001eec <__aeabi_dsub+0x6dc>
 8001cb8:	0032      	movs	r2, r6
 8001cba:	e6c1      	b.n	8001a40 <__aeabi_dsub+0x230>
 8001cbc:	4642      	mov	r2, r8
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e648      	b.n	8001956 <__aeabi_dsub+0x146>
 8001cc4:	2020      	movs	r0, #32
 8001cc6:	000c      	movs	r4, r1
 8001cc8:	1a80      	subs	r0, r0, r2
 8001cca:	003e      	movs	r6, r7
 8001ccc:	4087      	lsls	r7, r0
 8001cce:	4084      	lsls	r4, r0
 8001cd0:	40d6      	lsrs	r6, r2
 8001cd2:	1e78      	subs	r0, r7, #1
 8001cd4:	4187      	sbcs	r7, r0
 8001cd6:	40d1      	lsrs	r1, r2
 8001cd8:	4334      	orrs	r4, r6
 8001cda:	433c      	orrs	r4, r7
 8001cdc:	448c      	add	ip, r1
 8001cde:	e7a4      	b.n	8001c2a <__aeabi_dsub+0x41a>
 8001ce0:	4a80      	ldr	r2, [pc, #512]	; (8001ee4 <__aeabi_dsub+0x6d4>)
 8001ce2:	4290      	cmp	r0, r2
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x4d8>
 8001ce6:	e0e9      	b.n	8001ebc <__aeabi_dsub+0x6ac>
 8001ce8:	19df      	adds	r7, r3, r7
 8001cea:	429f      	cmp	r7, r3
 8001cec:	419b      	sbcs	r3, r3
 8001cee:	4461      	add	r1, ip
 8001cf0:	425b      	negs	r3, r3
 8001cf2:	18c9      	adds	r1, r1, r3
 8001cf4:	07cc      	lsls	r4, r1, #31
 8001cf6:	087f      	lsrs	r7, r7, #1
 8001cf8:	084b      	lsrs	r3, r1, #1
 8001cfa:	4699      	mov	r9, r3
 8001cfc:	4680      	mov	r8, r0
 8001cfe:	433c      	orrs	r4, r7
 8001d00:	e6f4      	b.n	8001aec <__aeabi_dsub+0x2dc>
 8001d02:	1afc      	subs	r4, r7, r3
 8001d04:	42a7      	cmp	r7, r4
 8001d06:	41bf      	sbcs	r7, r7
 8001d08:	4663      	mov	r3, ip
 8001d0a:	427f      	negs	r7, r7
 8001d0c:	1ac9      	subs	r1, r1, r3
 8001d0e:	1bcb      	subs	r3, r1, r7
 8001d10:	4699      	mov	r9, r3
 8001d12:	465d      	mov	r5, fp
 8001d14:	e5d5      	b.n	80018c2 <__aeabi_dsub+0xb2>
 8001d16:	08ff      	lsrs	r7, r7, #3
 8001d18:	074b      	lsls	r3, r1, #29
 8001d1a:	465d      	mov	r5, fp
 8001d1c:	433b      	orrs	r3, r7
 8001d1e:	08cc      	lsrs	r4, r1, #3
 8001d20:	e6ee      	b.n	8001b00 <__aeabi_dsub+0x2f0>
 8001d22:	4662      	mov	r2, ip
 8001d24:	431a      	orrs	r2, r3
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x51a>
 8001d28:	e082      	b.n	8001e30 <__aeabi_dsub+0x620>
 8001d2a:	000b      	movs	r3, r1
 8001d2c:	433b      	orrs	r3, r7
 8001d2e:	d11b      	bne.n	8001d68 <__aeabi_dsub+0x558>
 8001d30:	2480      	movs	r4, #128	; 0x80
 8001d32:	2500      	movs	r5, #0
 8001d34:	0324      	lsls	r4, r4, #12
 8001d36:	e6f9      	b.n	8001b2c <__aeabi_dsub+0x31c>
 8001d38:	19dc      	adds	r4, r3, r7
 8001d3a:	429c      	cmp	r4, r3
 8001d3c:	419b      	sbcs	r3, r3
 8001d3e:	4461      	add	r1, ip
 8001d40:	4689      	mov	r9, r1
 8001d42:	425b      	negs	r3, r3
 8001d44:	4499      	add	r9, r3
 8001d46:	464b      	mov	r3, r9
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	d444      	bmi.n	8001dd6 <__aeabi_dsub+0x5c6>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	4698      	mov	r8, r3
 8001d50:	e6cc      	b.n	8001aec <__aeabi_dsub+0x2dc>
 8001d52:	1bdc      	subs	r4, r3, r7
 8001d54:	4662      	mov	r2, ip
 8001d56:	42a3      	cmp	r3, r4
 8001d58:	419b      	sbcs	r3, r3
 8001d5a:	1a51      	subs	r1, r2, r1
 8001d5c:	425b      	negs	r3, r3
 8001d5e:	1acb      	subs	r3, r1, r3
 8001d60:	4699      	mov	r9, r3
 8001d62:	2301      	movs	r3, #1
 8001d64:	4698      	mov	r8, r3
 8001d66:	e5a4      	b.n	80018b2 <__aeabi_dsub+0xa2>
 8001d68:	08ff      	lsrs	r7, r7, #3
 8001d6a:	074b      	lsls	r3, r1, #29
 8001d6c:	465d      	mov	r5, fp
 8001d6e:	433b      	orrs	r3, r7
 8001d70:	08cc      	lsrs	r4, r1, #3
 8001d72:	e6d7      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001d74:	4662      	mov	r2, ip
 8001d76:	431a      	orrs	r2, r3
 8001d78:	0014      	movs	r4, r2
 8001d7a:	1e63      	subs	r3, r4, #1
 8001d7c:	419c      	sbcs	r4, r3
 8001d7e:	e679      	b.n	8001a74 <__aeabi_dsub+0x264>
 8001d80:	0015      	movs	r5, r2
 8001d82:	4664      	mov	r4, ip
 8001d84:	3d20      	subs	r5, #32
 8001d86:	40ec      	lsrs	r4, r5
 8001d88:	46a0      	mov	r8, r4
 8001d8a:	2a20      	cmp	r2, #32
 8001d8c:	d005      	beq.n	8001d9a <__aeabi_dsub+0x58a>
 8001d8e:	2540      	movs	r5, #64	; 0x40
 8001d90:	4664      	mov	r4, ip
 8001d92:	1aaa      	subs	r2, r5, r2
 8001d94:	4094      	lsls	r4, r2
 8001d96:	4323      	orrs	r3, r4
 8001d98:	469a      	mov	sl, r3
 8001d9a:	4654      	mov	r4, sl
 8001d9c:	1e63      	subs	r3, r4, #1
 8001d9e:	419c      	sbcs	r4, r3
 8001da0:	4643      	mov	r3, r8
 8001da2:	4323      	orrs	r3, r4
 8001da4:	e773      	b.n	8001c8e <__aeabi_dsub+0x47e>
 8001da6:	4662      	mov	r2, ip
 8001da8:	431a      	orrs	r2, r3
 8001daa:	d023      	beq.n	8001df4 <__aeabi_dsub+0x5e4>
 8001dac:	000a      	movs	r2, r1
 8001dae:	433a      	orrs	r2, r7
 8001db0:	d000      	beq.n	8001db4 <__aeabi_dsub+0x5a4>
 8001db2:	e0a0      	b.n	8001ef6 <__aeabi_dsub+0x6e6>
 8001db4:	4662      	mov	r2, ip
 8001db6:	08db      	lsrs	r3, r3, #3
 8001db8:	0752      	lsls	r2, r2, #29
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	4662      	mov	r2, ip
 8001dbe:	08d4      	lsrs	r4, r2, #3
 8001dc0:	e6b0      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001dc2:	000b      	movs	r3, r1
 8001dc4:	433b      	orrs	r3, r7
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x5ba>
 8001dc8:	e728      	b.n	8001c1c <__aeabi_dsub+0x40c>
 8001dca:	08ff      	lsrs	r7, r7, #3
 8001dcc:	074b      	lsls	r3, r1, #29
 8001dce:	465d      	mov	r5, fp
 8001dd0:	433b      	orrs	r3, r7
 8001dd2:	08cc      	lsrs	r4, r1, #3
 8001dd4:	e697      	b.n	8001b06 <__aeabi_dsub+0x2f6>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	4698      	mov	r8, r3
 8001dda:	e736      	b.n	8001c4a <__aeabi_dsub+0x43a>
 8001ddc:	1afc      	subs	r4, r7, r3
 8001dde:	42a7      	cmp	r7, r4
 8001de0:	41bf      	sbcs	r7, r7
 8001de2:	4663      	mov	r3, ip
 8001de4:	427f      	negs	r7, r7
 8001de6:	1ac9      	subs	r1, r1, r3
 8001de8:	1bcb      	subs	r3, r1, r7
 8001dea:	4699      	mov	r9, r3
 8001dec:	2301      	movs	r3, #1
 8001dee:	465d      	mov	r5, fp
 8001df0:	4698      	mov	r8, r3
 8001df2:	e55e      	b.n	80018b2 <__aeabi_dsub+0xa2>
 8001df4:	074b      	lsls	r3, r1, #29
 8001df6:	08ff      	lsrs	r7, r7, #3
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	08cc      	lsrs	r4, r1, #3
 8001dfc:	e692      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001dfe:	1bdc      	subs	r4, r3, r7
 8001e00:	4660      	mov	r0, ip
 8001e02:	42a3      	cmp	r3, r4
 8001e04:	41b6      	sbcs	r6, r6
 8001e06:	1a40      	subs	r0, r0, r1
 8001e08:	4276      	negs	r6, r6
 8001e0a:	1b80      	subs	r0, r0, r6
 8001e0c:	4681      	mov	r9, r0
 8001e0e:	0200      	lsls	r0, r0, #8
 8001e10:	d560      	bpl.n	8001ed4 <__aeabi_dsub+0x6c4>
 8001e12:	1afc      	subs	r4, r7, r3
 8001e14:	42a7      	cmp	r7, r4
 8001e16:	41bf      	sbcs	r7, r7
 8001e18:	4663      	mov	r3, ip
 8001e1a:	427f      	negs	r7, r7
 8001e1c:	1ac9      	subs	r1, r1, r3
 8001e1e:	1bcb      	subs	r3, r1, r7
 8001e20:	4699      	mov	r9, r3
 8001e22:	465d      	mov	r5, fp
 8001e24:	e576      	b.n	8001914 <__aeabi_dsub+0x104>
 8001e26:	08ff      	lsrs	r7, r7, #3
 8001e28:	074b      	lsls	r3, r1, #29
 8001e2a:	433b      	orrs	r3, r7
 8001e2c:	08cc      	lsrs	r4, r1, #3
 8001e2e:	e667      	b.n	8001b00 <__aeabi_dsub+0x2f0>
 8001e30:	000a      	movs	r2, r1
 8001e32:	08db      	lsrs	r3, r3, #3
 8001e34:	433a      	orrs	r2, r7
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dsub+0x62a>
 8001e38:	e66f      	b.n	8001b1a <__aeabi_dsub+0x30a>
 8001e3a:	4662      	mov	r2, ip
 8001e3c:	0752      	lsls	r2, r2, #29
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	4662      	mov	r2, ip
 8001e42:	08d4      	lsrs	r4, r2, #3
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	0312      	lsls	r2, r2, #12
 8001e48:	4214      	tst	r4, r2
 8001e4a:	d007      	beq.n	8001e5c <__aeabi_dsub+0x64c>
 8001e4c:	08c8      	lsrs	r0, r1, #3
 8001e4e:	4210      	tst	r0, r2
 8001e50:	d104      	bne.n	8001e5c <__aeabi_dsub+0x64c>
 8001e52:	465d      	mov	r5, fp
 8001e54:	0004      	movs	r4, r0
 8001e56:	08fb      	lsrs	r3, r7, #3
 8001e58:	0749      	lsls	r1, r1, #29
 8001e5a:	430b      	orrs	r3, r1
 8001e5c:	0f5a      	lsrs	r2, r3, #29
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	0752      	lsls	r2, r2, #29
 8001e64:	4313      	orrs	r3, r2
 8001e66:	e65d      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001e68:	074b      	lsls	r3, r1, #29
 8001e6a:	08ff      	lsrs	r7, r7, #3
 8001e6c:	433b      	orrs	r3, r7
 8001e6e:	08cc      	lsrs	r4, r1, #3
 8001e70:	e649      	b.n	8001b06 <__aeabi_dsub+0x2f6>
 8001e72:	19dc      	adds	r4, r3, r7
 8001e74:	429c      	cmp	r4, r3
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	4461      	add	r1, ip
 8001e7a:	4689      	mov	r9, r1
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	4499      	add	r9, r3
 8001e80:	464b      	mov	r3, r9
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	d400      	bmi.n	8001e88 <__aeabi_dsub+0x678>
 8001e86:	e631      	b.n	8001aec <__aeabi_dsub+0x2dc>
 8001e88:	464a      	mov	r2, r9
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <__aeabi_dsub+0x6d8>)
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	2301      	movs	r3, #1
 8001e90:	4691      	mov	r9, r2
 8001e92:	4698      	mov	r8, r3
 8001e94:	e62a      	b.n	8001aec <__aeabi_dsub+0x2dc>
 8001e96:	0016      	movs	r6, r2
 8001e98:	4664      	mov	r4, ip
 8001e9a:	3e20      	subs	r6, #32
 8001e9c:	40f4      	lsrs	r4, r6
 8001e9e:	46a0      	mov	r8, r4
 8001ea0:	2a20      	cmp	r2, #32
 8001ea2:	d005      	beq.n	8001eb0 <__aeabi_dsub+0x6a0>
 8001ea4:	2640      	movs	r6, #64	; 0x40
 8001ea6:	4664      	mov	r4, ip
 8001ea8:	1ab2      	subs	r2, r6, r2
 8001eaa:	4094      	lsls	r4, r2
 8001eac:	4323      	orrs	r3, r4
 8001eae:	469a      	mov	sl, r3
 8001eb0:	4654      	mov	r4, sl
 8001eb2:	1e63      	subs	r3, r4, #1
 8001eb4:	419c      	sbcs	r4, r3
 8001eb6:	4643      	mov	r3, r8
 8001eb8:	431c      	orrs	r4, r3
 8001eba:	e5db      	b.n	8001a74 <__aeabi_dsub+0x264>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e548      	b.n	8001956 <__aeabi_dsub+0x146>
 8001ec4:	19dc      	adds	r4, r3, r7
 8001ec6:	42bc      	cmp	r4, r7
 8001ec8:	41bf      	sbcs	r7, r7
 8001eca:	4461      	add	r1, ip
 8001ecc:	4689      	mov	r9, r1
 8001ece:	427f      	negs	r7, r7
 8001ed0:	44b9      	add	r9, r7
 8001ed2:	e738      	b.n	8001d46 <__aeabi_dsub+0x536>
 8001ed4:	464b      	mov	r3, r9
 8001ed6:	4323      	orrs	r3, r4
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x6cc>
 8001eda:	e69f      	b.n	8001c1c <__aeabi_dsub+0x40c>
 8001edc:	e606      	b.n	8001aec <__aeabi_dsub+0x2dc>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000007fe 	.word	0x000007fe
 8001ee4:	000007ff 	.word	0x000007ff
 8001ee8:	ff7fffff 	.word	0xff7fffff
 8001eec:	08ff      	lsrs	r7, r7, #3
 8001eee:	074b      	lsls	r3, r1, #29
 8001ef0:	433b      	orrs	r3, r7
 8001ef2:	08cc      	lsrs	r4, r1, #3
 8001ef4:	e616      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001ef6:	4662      	mov	r2, ip
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	0752      	lsls	r2, r2, #29
 8001efc:	4313      	orrs	r3, r2
 8001efe:	4662      	mov	r2, ip
 8001f00:	08d4      	lsrs	r4, r2, #3
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	0312      	lsls	r2, r2, #12
 8001f06:	4214      	tst	r4, r2
 8001f08:	d007      	beq.n	8001f1a <__aeabi_dsub+0x70a>
 8001f0a:	08c8      	lsrs	r0, r1, #3
 8001f0c:	4210      	tst	r0, r2
 8001f0e:	d104      	bne.n	8001f1a <__aeabi_dsub+0x70a>
 8001f10:	465d      	mov	r5, fp
 8001f12:	0004      	movs	r4, r0
 8001f14:	08fb      	lsrs	r3, r7, #3
 8001f16:	0749      	lsls	r1, r1, #29
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	0f5a      	lsrs	r2, r3, #29
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	0752      	lsls	r2, r2, #29
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	e5fe      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001f26:	2300      	movs	r3, #0
 8001f28:	4a01      	ldr	r2, [pc, #4]	; (8001f30 <__aeabi_dsub+0x720>)
 8001f2a:	001c      	movs	r4, r3
 8001f2c:	e513      	b.n	8001956 <__aeabi_dsub+0x146>
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	000007ff 	.word	0x000007ff

08001f34 <__aeabi_dcmpun>:
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	0005      	movs	r5, r0
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <__aeabi_dcmpun+0x38>)
 8001f3a:	031c      	lsls	r4, r3, #12
 8001f3c:	0016      	movs	r6, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	030a      	lsls	r2, r1, #12
 8001f42:	0049      	lsls	r1, r1, #1
 8001f44:	0b12      	lsrs	r2, r2, #12
 8001f46:	0d49      	lsrs	r1, r1, #21
 8001f48:	0b24      	lsrs	r4, r4, #12
 8001f4a:	0d5b      	lsrs	r3, r3, #21
 8001f4c:	4281      	cmp	r1, r0
 8001f4e:	d008      	beq.n	8001f62 <__aeabi_dcmpun+0x2e>
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <__aeabi_dcmpun+0x38>)
 8001f52:	2000      	movs	r0, #0
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d103      	bne.n	8001f60 <__aeabi_dcmpun+0x2c>
 8001f58:	0020      	movs	r0, r4
 8001f5a:	4330      	orrs	r0, r6
 8001f5c:	1e43      	subs	r3, r0, #1
 8001f5e:	4198      	sbcs	r0, r3
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
 8001f62:	2001      	movs	r0, #1
 8001f64:	432a      	orrs	r2, r5
 8001f66:	d1fb      	bne.n	8001f60 <__aeabi_dcmpun+0x2c>
 8001f68:	e7f2      	b.n	8001f50 <__aeabi_dcmpun+0x1c>
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	000007ff 	.word	0x000007ff

08001f70 <__aeabi_d2iz>:
 8001f70:	000a      	movs	r2, r1
 8001f72:	b530      	push	{r4, r5, lr}
 8001f74:	4c13      	ldr	r4, [pc, #76]	; (8001fc4 <__aeabi_d2iz+0x54>)
 8001f76:	0053      	lsls	r3, r2, #1
 8001f78:	0309      	lsls	r1, r1, #12
 8001f7a:	0005      	movs	r5, r0
 8001f7c:	0b09      	lsrs	r1, r1, #12
 8001f7e:	2000      	movs	r0, #0
 8001f80:	0d5b      	lsrs	r3, r3, #21
 8001f82:	0fd2      	lsrs	r2, r2, #31
 8001f84:	42a3      	cmp	r3, r4
 8001f86:	dd04      	ble.n	8001f92 <__aeabi_d2iz+0x22>
 8001f88:	480f      	ldr	r0, [pc, #60]	; (8001fc8 <__aeabi_d2iz+0x58>)
 8001f8a:	4283      	cmp	r3, r0
 8001f8c:	dd02      	ble.n	8001f94 <__aeabi_d2iz+0x24>
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <__aeabi_d2iz+0x5c>)
 8001f90:	18d0      	adds	r0, r2, r3
 8001f92:	bd30      	pop	{r4, r5, pc}
 8001f94:	2080      	movs	r0, #128	; 0x80
 8001f96:	0340      	lsls	r0, r0, #13
 8001f98:	4301      	orrs	r1, r0
 8001f9a:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <__aeabi_d2iz+0x60>)
 8001f9c:	1ac0      	subs	r0, r0, r3
 8001f9e:	281f      	cmp	r0, #31
 8001fa0:	dd08      	ble.n	8001fb4 <__aeabi_d2iz+0x44>
 8001fa2:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <__aeabi_d2iz+0x64>)
 8001fa4:	1ac3      	subs	r3, r0, r3
 8001fa6:	40d9      	lsrs	r1, r3
 8001fa8:	000b      	movs	r3, r1
 8001faa:	4258      	negs	r0, r3
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	d1f0      	bne.n	8001f92 <__aeabi_d2iz+0x22>
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	e7ee      	b.n	8001f92 <__aeabi_d2iz+0x22>
 8001fb4:	4c08      	ldr	r4, [pc, #32]	; (8001fd8 <__aeabi_d2iz+0x68>)
 8001fb6:	40c5      	lsrs	r5, r0
 8001fb8:	46a4      	mov	ip, r4
 8001fba:	4463      	add	r3, ip
 8001fbc:	4099      	lsls	r1, r3
 8001fbe:	000b      	movs	r3, r1
 8001fc0:	432b      	orrs	r3, r5
 8001fc2:	e7f2      	b.n	8001faa <__aeabi_d2iz+0x3a>
 8001fc4:	000003fe 	.word	0x000003fe
 8001fc8:	0000041d 	.word	0x0000041d
 8001fcc:	7fffffff 	.word	0x7fffffff
 8001fd0:	00000433 	.word	0x00000433
 8001fd4:	00000413 	.word	0x00000413
 8001fd8:	fffffbed 	.word	0xfffffbed

08001fdc <__aeabi_i2d>:
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	d016      	beq.n	8002010 <__aeabi_i2d+0x34>
 8001fe2:	17c3      	asrs	r3, r0, #31
 8001fe4:	18c5      	adds	r5, r0, r3
 8001fe6:	405d      	eors	r5, r3
 8001fe8:	0fc4      	lsrs	r4, r0, #31
 8001fea:	0028      	movs	r0, r5
 8001fec:	f000 f91c 	bl	8002228 <__clzsi2>
 8001ff0:	4a11      	ldr	r2, [pc, #68]	; (8002038 <__aeabi_i2d+0x5c>)
 8001ff2:	1a12      	subs	r2, r2, r0
 8001ff4:	280a      	cmp	r0, #10
 8001ff6:	dc16      	bgt.n	8002026 <__aeabi_i2d+0x4a>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	002e      	movs	r6, r5
 8001ffc:	3315      	adds	r3, #21
 8001ffe:	409e      	lsls	r6, r3
 8002000:	230b      	movs	r3, #11
 8002002:	1a18      	subs	r0, r3, r0
 8002004:	40c5      	lsrs	r5, r0
 8002006:	0552      	lsls	r2, r2, #21
 8002008:	032d      	lsls	r5, r5, #12
 800200a:	0b2d      	lsrs	r5, r5, #12
 800200c:	0d53      	lsrs	r3, r2, #21
 800200e:	e003      	b.n	8002018 <__aeabi_i2d+0x3c>
 8002010:	2400      	movs	r4, #0
 8002012:	2300      	movs	r3, #0
 8002014:	2500      	movs	r5, #0
 8002016:	2600      	movs	r6, #0
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	432b      	orrs	r3, r5
 800201c:	07e4      	lsls	r4, r4, #31
 800201e:	4323      	orrs	r3, r4
 8002020:	0030      	movs	r0, r6
 8002022:	0019      	movs	r1, r3
 8002024:	bd70      	pop	{r4, r5, r6, pc}
 8002026:	380b      	subs	r0, #11
 8002028:	4085      	lsls	r5, r0
 800202a:	0552      	lsls	r2, r2, #21
 800202c:	032d      	lsls	r5, r5, #12
 800202e:	2600      	movs	r6, #0
 8002030:	0b2d      	lsrs	r5, r5, #12
 8002032:	0d53      	lsrs	r3, r2, #21
 8002034:	e7f0      	b.n	8002018 <__aeabi_i2d+0x3c>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	0000041e 	.word	0x0000041e

0800203c <__aeabi_ui2d>:
 800203c:	b510      	push	{r4, lr}
 800203e:	1e04      	subs	r4, r0, #0
 8002040:	d010      	beq.n	8002064 <__aeabi_ui2d+0x28>
 8002042:	f000 f8f1 	bl	8002228 <__clzsi2>
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <__aeabi_ui2d+0x48>)
 8002048:	1a1b      	subs	r3, r3, r0
 800204a:	280a      	cmp	r0, #10
 800204c:	dc11      	bgt.n	8002072 <__aeabi_ui2d+0x36>
 800204e:	220b      	movs	r2, #11
 8002050:	0021      	movs	r1, r4
 8002052:	1a12      	subs	r2, r2, r0
 8002054:	40d1      	lsrs	r1, r2
 8002056:	3015      	adds	r0, #21
 8002058:	030a      	lsls	r2, r1, #12
 800205a:	055b      	lsls	r3, r3, #21
 800205c:	4084      	lsls	r4, r0
 800205e:	0b12      	lsrs	r2, r2, #12
 8002060:	0d5b      	lsrs	r3, r3, #21
 8002062:	e001      	b.n	8002068 <__aeabi_ui2d+0x2c>
 8002064:	2300      	movs	r3, #0
 8002066:	2200      	movs	r2, #0
 8002068:	051b      	lsls	r3, r3, #20
 800206a:	4313      	orrs	r3, r2
 800206c:	0020      	movs	r0, r4
 800206e:	0019      	movs	r1, r3
 8002070:	bd10      	pop	{r4, pc}
 8002072:	0022      	movs	r2, r4
 8002074:	380b      	subs	r0, #11
 8002076:	4082      	lsls	r2, r0
 8002078:	055b      	lsls	r3, r3, #21
 800207a:	0312      	lsls	r2, r2, #12
 800207c:	2400      	movs	r4, #0
 800207e:	0b12      	lsrs	r2, r2, #12
 8002080:	0d5b      	lsrs	r3, r3, #21
 8002082:	e7f1      	b.n	8002068 <__aeabi_ui2d+0x2c>
 8002084:	0000041e 	.word	0x0000041e

08002088 <__aeabi_f2d>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	0043      	lsls	r3, r0, #1
 800208c:	0246      	lsls	r6, r0, #9
 800208e:	0fc4      	lsrs	r4, r0, #31
 8002090:	20fe      	movs	r0, #254	; 0xfe
 8002092:	0e1b      	lsrs	r3, r3, #24
 8002094:	1c59      	adds	r1, r3, #1
 8002096:	0a75      	lsrs	r5, r6, #9
 8002098:	4208      	tst	r0, r1
 800209a:	d00c      	beq.n	80020b6 <__aeabi_f2d+0x2e>
 800209c:	22e0      	movs	r2, #224	; 0xe0
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4694      	mov	ip, r2
 80020a2:	076d      	lsls	r5, r5, #29
 80020a4:	0b36      	lsrs	r6, r6, #12
 80020a6:	4463      	add	r3, ip
 80020a8:	051b      	lsls	r3, r3, #20
 80020aa:	4333      	orrs	r3, r6
 80020ac:	07e4      	lsls	r4, r4, #31
 80020ae:	4323      	orrs	r3, r4
 80020b0:	0028      	movs	r0, r5
 80020b2:	0019      	movs	r1, r3
 80020b4:	bd70      	pop	{r4, r5, r6, pc}
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d114      	bne.n	80020e4 <__aeabi_f2d+0x5c>
 80020ba:	2d00      	cmp	r5, #0
 80020bc:	d01b      	beq.n	80020f6 <__aeabi_f2d+0x6e>
 80020be:	0028      	movs	r0, r5
 80020c0:	f000 f8b2 	bl	8002228 <__clzsi2>
 80020c4:	280a      	cmp	r0, #10
 80020c6:	dc1c      	bgt.n	8002102 <__aeabi_f2d+0x7a>
 80020c8:	230b      	movs	r3, #11
 80020ca:	002e      	movs	r6, r5
 80020cc:	1a1b      	subs	r3, r3, r0
 80020ce:	40de      	lsrs	r6, r3
 80020d0:	0003      	movs	r3, r0
 80020d2:	3315      	adds	r3, #21
 80020d4:	409d      	lsls	r5, r3
 80020d6:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <__aeabi_f2d+0x88>)
 80020d8:	0336      	lsls	r6, r6, #12
 80020da:	1a12      	subs	r2, r2, r0
 80020dc:	0552      	lsls	r2, r2, #21
 80020de:	0b36      	lsrs	r6, r6, #12
 80020e0:	0d53      	lsrs	r3, r2, #21
 80020e2:	e7e1      	b.n	80020a8 <__aeabi_f2d+0x20>
 80020e4:	2d00      	cmp	r5, #0
 80020e6:	d009      	beq.n	80020fc <__aeabi_f2d+0x74>
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	0b36      	lsrs	r6, r6, #12
 80020ec:	0312      	lsls	r2, r2, #12
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <__aeabi_f2d+0x8c>)
 80020f0:	076d      	lsls	r5, r5, #29
 80020f2:	4316      	orrs	r6, r2
 80020f4:	e7d8      	b.n	80020a8 <__aeabi_f2d+0x20>
 80020f6:	2300      	movs	r3, #0
 80020f8:	2600      	movs	r6, #0
 80020fa:	e7d5      	b.n	80020a8 <__aeabi_f2d+0x20>
 80020fc:	2600      	movs	r6, #0
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <__aeabi_f2d+0x8c>)
 8002100:	e7d2      	b.n	80020a8 <__aeabi_f2d+0x20>
 8002102:	0003      	movs	r3, r0
 8002104:	3b0b      	subs	r3, #11
 8002106:	409d      	lsls	r5, r3
 8002108:	002e      	movs	r6, r5
 800210a:	2500      	movs	r5, #0
 800210c:	e7e3      	b.n	80020d6 <__aeabi_f2d+0x4e>
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	00000389 	.word	0x00000389
 8002114:	000007ff 	.word	0x000007ff

08002118 <__aeabi_d2f>:
 8002118:	0002      	movs	r2, r0
 800211a:	004b      	lsls	r3, r1, #1
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	0d5b      	lsrs	r3, r3, #21
 8002120:	030c      	lsls	r4, r1, #12
 8002122:	4e3d      	ldr	r6, [pc, #244]	; (8002218 <__aeabi_d2f+0x100>)
 8002124:	0a64      	lsrs	r4, r4, #9
 8002126:	0f40      	lsrs	r0, r0, #29
 8002128:	1c5f      	adds	r7, r3, #1
 800212a:	0fc9      	lsrs	r1, r1, #31
 800212c:	4304      	orrs	r4, r0
 800212e:	00d5      	lsls	r5, r2, #3
 8002130:	4237      	tst	r7, r6
 8002132:	d00a      	beq.n	800214a <__aeabi_d2f+0x32>
 8002134:	4839      	ldr	r0, [pc, #228]	; (800221c <__aeabi_d2f+0x104>)
 8002136:	181e      	adds	r6, r3, r0
 8002138:	2efe      	cmp	r6, #254	; 0xfe
 800213a:	dd16      	ble.n	800216a <__aeabi_d2f+0x52>
 800213c:	20ff      	movs	r0, #255	; 0xff
 800213e:	2400      	movs	r4, #0
 8002140:	05c0      	lsls	r0, r0, #23
 8002142:	4320      	orrs	r0, r4
 8002144:	07c9      	lsls	r1, r1, #31
 8002146:	4308      	orrs	r0, r1
 8002148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <__aeabi_d2f+0x44>
 800214e:	432c      	orrs	r4, r5
 8002150:	d026      	beq.n	80021a0 <__aeabi_d2f+0x88>
 8002152:	2205      	movs	r2, #5
 8002154:	0192      	lsls	r2, r2, #6
 8002156:	0a54      	lsrs	r4, r2, #9
 8002158:	b2d8      	uxtb	r0, r3
 800215a:	e7f1      	b.n	8002140 <__aeabi_d2f+0x28>
 800215c:	4325      	orrs	r5, r4
 800215e:	d0ed      	beq.n	800213c <__aeabi_d2f+0x24>
 8002160:	2080      	movs	r0, #128	; 0x80
 8002162:	03c0      	lsls	r0, r0, #15
 8002164:	4304      	orrs	r4, r0
 8002166:	20ff      	movs	r0, #255	; 0xff
 8002168:	e7ea      	b.n	8002140 <__aeabi_d2f+0x28>
 800216a:	2e00      	cmp	r6, #0
 800216c:	dd1b      	ble.n	80021a6 <__aeabi_d2f+0x8e>
 800216e:	0192      	lsls	r2, r2, #6
 8002170:	1e53      	subs	r3, r2, #1
 8002172:	419a      	sbcs	r2, r3
 8002174:	00e4      	lsls	r4, r4, #3
 8002176:	0f6d      	lsrs	r5, r5, #29
 8002178:	4322      	orrs	r2, r4
 800217a:	432a      	orrs	r2, r5
 800217c:	0753      	lsls	r3, r2, #29
 800217e:	d048      	beq.n	8002212 <__aeabi_d2f+0xfa>
 8002180:	230f      	movs	r3, #15
 8002182:	4013      	ands	r3, r2
 8002184:	2b04      	cmp	r3, #4
 8002186:	d000      	beq.n	800218a <__aeabi_d2f+0x72>
 8002188:	3204      	adds	r2, #4
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	04db      	lsls	r3, r3, #19
 800218e:	4013      	ands	r3, r2
 8002190:	d03f      	beq.n	8002212 <__aeabi_d2f+0xfa>
 8002192:	1c70      	adds	r0, r6, #1
 8002194:	2efe      	cmp	r6, #254	; 0xfe
 8002196:	d0d1      	beq.n	800213c <__aeabi_d2f+0x24>
 8002198:	0192      	lsls	r2, r2, #6
 800219a:	0a54      	lsrs	r4, r2, #9
 800219c:	b2c0      	uxtb	r0, r0
 800219e:	e7cf      	b.n	8002140 <__aeabi_d2f+0x28>
 80021a0:	2000      	movs	r0, #0
 80021a2:	2400      	movs	r4, #0
 80021a4:	e7cc      	b.n	8002140 <__aeabi_d2f+0x28>
 80021a6:	0032      	movs	r2, r6
 80021a8:	3217      	adds	r2, #23
 80021aa:	db22      	blt.n	80021f2 <__aeabi_d2f+0xda>
 80021ac:	2080      	movs	r0, #128	; 0x80
 80021ae:	0400      	lsls	r0, r0, #16
 80021b0:	4320      	orrs	r0, r4
 80021b2:	241e      	movs	r4, #30
 80021b4:	1ba4      	subs	r4, r4, r6
 80021b6:	2c1f      	cmp	r4, #31
 80021b8:	dd1d      	ble.n	80021f6 <__aeabi_d2f+0xde>
 80021ba:	2202      	movs	r2, #2
 80021bc:	4252      	negs	r2, r2
 80021be:	1b96      	subs	r6, r2, r6
 80021c0:	0002      	movs	r2, r0
 80021c2:	40f2      	lsrs	r2, r6
 80021c4:	0016      	movs	r6, r2
 80021c6:	2c20      	cmp	r4, #32
 80021c8:	d004      	beq.n	80021d4 <__aeabi_d2f+0xbc>
 80021ca:	4a15      	ldr	r2, [pc, #84]	; (8002220 <__aeabi_d2f+0x108>)
 80021cc:	4694      	mov	ip, r2
 80021ce:	4463      	add	r3, ip
 80021d0:	4098      	lsls	r0, r3
 80021d2:	4305      	orrs	r5, r0
 80021d4:	002a      	movs	r2, r5
 80021d6:	1e53      	subs	r3, r2, #1
 80021d8:	419a      	sbcs	r2, r3
 80021da:	4332      	orrs	r2, r6
 80021dc:	2600      	movs	r6, #0
 80021de:	0753      	lsls	r3, r2, #29
 80021e0:	d1ce      	bne.n	8002180 <__aeabi_d2f+0x68>
 80021e2:	2480      	movs	r4, #128	; 0x80
 80021e4:	0013      	movs	r3, r2
 80021e6:	04e4      	lsls	r4, r4, #19
 80021e8:	2001      	movs	r0, #1
 80021ea:	4023      	ands	r3, r4
 80021ec:	4222      	tst	r2, r4
 80021ee:	d1d3      	bne.n	8002198 <__aeabi_d2f+0x80>
 80021f0:	e7b0      	b.n	8002154 <__aeabi_d2f+0x3c>
 80021f2:	2300      	movs	r3, #0
 80021f4:	e7ad      	b.n	8002152 <__aeabi_d2f+0x3a>
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <__aeabi_d2f+0x10c>)
 80021f8:	4694      	mov	ip, r2
 80021fa:	002a      	movs	r2, r5
 80021fc:	40e2      	lsrs	r2, r4
 80021fe:	0014      	movs	r4, r2
 8002200:	002a      	movs	r2, r5
 8002202:	4463      	add	r3, ip
 8002204:	409a      	lsls	r2, r3
 8002206:	4098      	lsls	r0, r3
 8002208:	1e55      	subs	r5, r2, #1
 800220a:	41aa      	sbcs	r2, r5
 800220c:	4302      	orrs	r2, r0
 800220e:	4322      	orrs	r2, r4
 8002210:	e7e4      	b.n	80021dc <__aeabi_d2f+0xc4>
 8002212:	0033      	movs	r3, r6
 8002214:	e79e      	b.n	8002154 <__aeabi_d2f+0x3c>
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	000007fe 	.word	0x000007fe
 800221c:	fffffc80 	.word	0xfffffc80
 8002220:	fffffca2 	.word	0xfffffca2
 8002224:	fffffc82 	.word	0xfffffc82

08002228 <__clzsi2>:
 8002228:	211c      	movs	r1, #28
 800222a:	2301      	movs	r3, #1
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	4298      	cmp	r0, r3
 8002230:	d301      	bcc.n	8002236 <__clzsi2+0xe>
 8002232:	0c00      	lsrs	r0, r0, #16
 8002234:	3910      	subs	r1, #16
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	4298      	cmp	r0, r3
 800223a:	d301      	bcc.n	8002240 <__clzsi2+0x18>
 800223c:	0a00      	lsrs	r0, r0, #8
 800223e:	3908      	subs	r1, #8
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	4298      	cmp	r0, r3
 8002244:	d301      	bcc.n	800224a <__clzsi2+0x22>
 8002246:	0900      	lsrs	r0, r0, #4
 8002248:	3904      	subs	r1, #4
 800224a:	a202      	add	r2, pc, #8	; (adr r2, 8002254 <__clzsi2+0x2c>)
 800224c:	5c10      	ldrb	r0, [r2, r0]
 800224e:	1840      	adds	r0, r0, r1
 8002250:	4770      	bx	lr
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	02020304 	.word	0x02020304
 8002258:	01010101 	.word	0x01010101
	...

08002264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002268:	f000 fb1a 	bl	80028a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800226c:	f000 f81a 	bl	80022a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002270:	f000 f8c4 	bl	80023fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002274:	f000 f862 	bl	800233c <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 8002278:	f000 f890 	bl	800239c <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
	print("Working\n\r");
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <main+0x34>)
 800227e:	0018      	movs	r0, r3
 8002280:	f002 fa30 	bl	80046e4 <print>
	ESP_Init("realme GT Master Edition","9999161397");
 8002284:	4a05      	ldr	r2, [pc, #20]	; (800229c <main+0x38>)
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <main+0x3c>)
 8002288:	0011      	movs	r1, r2
 800228a:	0018      	movs	r0, r3
 800228c:	f002 fa52 	bl	8004734 <ESP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Server_Start();
 8002290:	f002 fcc6 	bl	8004c20 <Server_Start>
 8002294:	e7fc      	b.n	8002290 <main+0x2c>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	08008630 	.word	0x08008630
 800229c:	0800863c 	.word	0x0800863c
 80022a0:	08008648 	.word	0x08008648

080022a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b091      	sub	sp, #68	; 0x44
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	2410      	movs	r4, #16
 80022ac:	193b      	adds	r3, r7, r4
 80022ae:	0018      	movs	r0, r3
 80022b0:	2330      	movs	r3, #48	; 0x30
 80022b2:	001a      	movs	r2, r3
 80022b4:	2100      	movs	r1, #0
 80022b6:	f003 f9c7 	bl	8005648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ba:	003b      	movs	r3, r7
 80022bc:	0018      	movs	r0, r3
 80022be:	2310      	movs	r3, #16
 80022c0:	001a      	movs	r2, r3
 80022c2:	2100      	movs	r1, #0
 80022c4:	f003 f9c0 	bl	8005648 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c8:	0021      	movs	r1, r4
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d0:	187b      	adds	r3, r7, r1
 80022d2:	2201      	movs	r2, #1
 80022d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	2210      	movs	r2, #16
 80022da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	2202      	movs	r2, #2
 80022e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022e2:	187b      	adds	r3, r7, r1
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	0212      	lsls	r2, r2, #8
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80022ea:	187b      	adds	r3, r7, r1
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	0352      	lsls	r2, r2, #13
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80022f2:	187b      	adds	r3, r7, r1
 80022f4:	2200      	movs	r2, #0
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f8:	187b      	adds	r3, r7, r1
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 fe42 	bl	8002f84 <HAL_RCC_OscConfig>
 8002300:	1e03      	subs	r3, r0, #0
 8002302:	d001      	beq.n	8002308 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002304:	f000 f8e4 	bl	80024d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002308:	003b      	movs	r3, r7
 800230a:	2207      	movs	r2, #7
 800230c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800230e:	003b      	movs	r3, r7
 8002310:	2202      	movs	r2, #2
 8002312:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002314:	003b      	movs	r3, r7
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800231a:	003b      	movs	r3, r7
 800231c:	2200      	movs	r2, #0
 800231e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002320:	003b      	movs	r3, r7
 8002322:	2101      	movs	r1, #1
 8002324:	0018      	movs	r0, r3
 8002326:	f001 f94b 	bl	80035c0 <HAL_RCC_ClockConfig>
 800232a:	1e03      	subs	r3, r0, #0
 800232c:	d001      	beq.n	8002332 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800232e:	f000 f8cf 	bl	80024d0 <Error_Handler>
  }
}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b011      	add	sp, #68	; 0x44
 8002338:	bd90      	pop	{r4, r7, pc}
	...

0800233c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <MX_USART2_UART_Init+0x58>)
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <MX_USART2_UART_Init+0x5c>)
 8002344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <MX_USART2_UART_Init+0x58>)
 8002348:	22e1      	movs	r2, #225	; 0xe1
 800234a:	0252      	lsls	r2, r2, #9
 800234c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_USART2_UART_Init+0x58>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_USART2_UART_Init+0x58>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_USART2_UART_Init+0x58>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_USART2_UART_Init+0x58>)
 8002362:	220c      	movs	r2, #12
 8002364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <MX_USART2_UART_Init+0x58>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_USART2_UART_Init+0x58>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <MX_USART2_UART_Init+0x58>)
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_USART2_UART_Init+0x58>)
 800237a:	2200      	movs	r2, #0
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <MX_USART2_UART_Init+0x58>)
 8002380:	0018      	movs	r0, r3
 8002382:	f001 fa71 	bl	8003868 <HAL_UART_Init>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d001      	beq.n	800238e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800238a:	f000 f8a1 	bl	80024d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000208 	.word	0x20000208
 8002398:	40004400 	.word	0x40004400

0800239c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023a2:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <MX_USART4_UART_Init+0x5c>)
 80023a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023a8:	22e1      	movs	r2, #225	; 0xe1
 80023aa:	0252      	lsls	r2, r2, #9
 80023ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023c2:	220c      	movs	r2, #12
 80023c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023da:	2200      	movs	r2, #0
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <MX_USART4_UART_Init+0x58>)
 80023e0:	0018      	movs	r0, r3
 80023e2:	f001 fa41 	bl	8003868 <HAL_UART_Init>
 80023e6:	1e03      	subs	r3, r0, #0
 80023e8:	d001      	beq.n	80023ee <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80023ea:	f000 f871 	bl	80024d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	2000028c 	.word	0x2000028c
 80023f8:	40004c00 	.word	0x40004c00

080023fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002402:	240c      	movs	r4, #12
 8002404:	193b      	adds	r3, r7, r4
 8002406:	0018      	movs	r0, r3
 8002408:	2314      	movs	r3, #20
 800240a:	001a      	movs	r2, r3
 800240c:	2100      	movs	r1, #0
 800240e:	f003 f91b 	bl	8005648 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <MX_GPIO_Init+0xcc>)
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <MX_GPIO_Init+0xcc>)
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	0309      	lsls	r1, r1, #12
 800241c:	430a      	orrs	r2, r1
 800241e:	615a      	str	r2, [r3, #20]
 8002420:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <MX_GPIO_Init+0xcc>)
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	031b      	lsls	r3, r3, #12
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <MX_GPIO_Init+0xcc>)
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <MX_GPIO_Init+0xcc>)
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	03c9      	lsls	r1, r1, #15
 8002438:	430a      	orrs	r2, r1
 800243a:	615a      	str	r2, [r3, #20]
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <MX_GPIO_Init+0xcc>)
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	03db      	lsls	r3, r3, #15
 8002444:	4013      	ands	r3, r2
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <MX_GPIO_Init+0xcc>)
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <MX_GPIO_Init+0xcc>)
 8002450:	2180      	movs	r1, #128	; 0x80
 8002452:	0289      	lsls	r1, r1, #10
 8002454:	430a      	orrs	r2, r1
 8002456:	615a      	str	r2, [r3, #20]
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <MX_GPIO_Init+0xcc>)
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	029b      	lsls	r3, r3, #10
 8002460:	4013      	ands	r3, r2
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002466:	2390      	movs	r3, #144	; 0x90
 8002468:	05db      	lsls	r3, r3, #23
 800246a:	2200      	movs	r2, #0
 800246c:	2120      	movs	r1, #32
 800246e:	0018      	movs	r0, r3
 8002470:	f000 fd6a 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002474:	193b      	adds	r3, r7, r4
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	0192      	lsls	r2, r2, #6
 800247a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800247c:	193b      	adds	r3, r7, r4
 800247e:	2284      	movs	r2, #132	; 0x84
 8002480:	0392      	lsls	r2, r2, #14
 8002482:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	193b      	adds	r3, r7, r4
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248a:	193b      	adds	r3, r7, r4
 800248c:	4a0f      	ldr	r2, [pc, #60]	; (80024cc <MX_GPIO_Init+0xd0>)
 800248e:	0019      	movs	r1, r3
 8002490:	0010      	movs	r0, r2
 8002492:	f000 fbe9 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002496:	0021      	movs	r1, r4
 8002498:	187b      	adds	r3, r7, r1
 800249a:	2220      	movs	r2, #32
 800249c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	2201      	movs	r2, #1
 80024a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	2200      	movs	r2, #0
 80024ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b0:	187a      	adds	r2, r7, r1
 80024b2:	2390      	movs	r3, #144	; 0x90
 80024b4:	05db      	lsls	r3, r3, #23
 80024b6:	0011      	movs	r1, r2
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 fbd5 	bl	8002c68 <HAL_GPIO_Init>

}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b009      	add	sp, #36	; 0x24
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	40021000 	.word	0x40021000
 80024cc:	48000800 	.word	0x48000800

080024d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024d4:	b672      	cpsid	i
}
 80024d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <Error_Handler+0x8>
	...

080024dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_MspInit+0x44>)
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_MspInit+0x44>)
 80024e8:	2101      	movs	r1, #1
 80024ea:	430a      	orrs	r2, r1
 80024ec:	619a      	str	r2, [r3, #24]
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_MspInit+0x44>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_MspInit+0x44>)
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_MspInit+0x44>)
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	0549      	lsls	r1, r1, #21
 8002504:	430a      	orrs	r2, r1
 8002506:	61da      	str	r2, [r3, #28]
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_MspInit+0x44>)
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	055b      	lsls	r3, r3, #21
 8002510:	4013      	ands	r3, r2
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b002      	add	sp, #8
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b08d      	sub	sp, #52	; 0x34
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	241c      	movs	r4, #28
 800252e:	193b      	adds	r3, r7, r4
 8002530:	0018      	movs	r0, r3
 8002532:	2314      	movs	r3, #20
 8002534:	001a      	movs	r2, r3
 8002536:	2100      	movs	r1, #0
 8002538:	f003 f886 	bl	8005648 <memset>
  if(huart->Instance==USART2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a41      	ldr	r2, [pc, #260]	; (8002648 <HAL_UART_MspInit+0x124>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d13b      	bne.n	80025be <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_UART_MspInit+0x128>)
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	4b40      	ldr	r3, [pc, #256]	; (800264c <HAL_UART_MspInit+0x128>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0289      	lsls	r1, r1, #10
 8002550:	430a      	orrs	r2, r1
 8002552:	61da      	str	r2, [r3, #28]
 8002554:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_UART_MspInit+0x128>)
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	029b      	lsls	r3, r3, #10
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_UART_MspInit+0x128>)
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	4b39      	ldr	r3, [pc, #228]	; (800264c <HAL_UART_MspInit+0x128>)
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	0289      	lsls	r1, r1, #10
 800256c:	430a      	orrs	r2, r1
 800256e:	615a      	str	r2, [r3, #20]
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_UART_MspInit+0x128>)
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	029b      	lsls	r3, r3, #10
 8002578:	4013      	ands	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800257e:	0021      	movs	r1, r4
 8002580:	187b      	adds	r3, r7, r1
 8002582:	220c      	movs	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	187b      	adds	r3, r7, r1
 8002588:	2202      	movs	r2, #2
 800258a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	187b      	adds	r3, r7, r1
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002592:	187b      	adds	r3, r7, r1
 8002594:	2203      	movs	r2, #3
 8002596:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002598:	187b      	adds	r3, r7, r1
 800259a:	2201      	movs	r2, #1
 800259c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	187a      	adds	r2, r7, r1
 80025a0:	2390      	movs	r3, #144	; 0x90
 80025a2:	05db      	lsls	r3, r3, #23
 80025a4:	0011      	movs	r1, r2
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 fb5e 	bl	8002c68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2100      	movs	r1, #0
 80025b0:	201c      	movs	r0, #28
 80025b2:	f000 faa9 	bl	8002b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025b6:	201c      	movs	r0, #28
 80025b8:	f000 fabb 	bl	8002b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80025bc:	e03f      	b.n	800263e <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART4)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a23      	ldr	r2, [pc, #140]	; (8002650 <HAL_UART_MspInit+0x12c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d13a      	bne.n	800263e <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART4_CLK_ENABLE();
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_UART_MspInit+0x128>)
 80025ca:	69da      	ldr	r2, [r3, #28]
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <HAL_UART_MspInit+0x128>)
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	0309      	lsls	r1, r1, #12
 80025d2:	430a      	orrs	r2, r1
 80025d4:	61da      	str	r2, [r3, #28]
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_UART_MspInit+0x128>)
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	031b      	lsls	r3, r3, #12
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_UART_MspInit+0x128>)
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <HAL_UART_MspInit+0x128>)
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0289      	lsls	r1, r1, #10
 80025ee:	430a      	orrs	r2, r1
 80025f0:	615a      	str	r2, [r3, #20]
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_UART_MspInit+0x128>)
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	4013      	ands	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002600:	211c      	movs	r1, #28
 8002602:	187b      	adds	r3, r7, r1
 8002604:	2203      	movs	r2, #3
 8002606:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	187b      	adds	r3, r7, r1
 800260a:	2202      	movs	r2, #2
 800260c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2203      	movs	r2, #3
 8002618:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800261a:	187b      	adds	r3, r7, r1
 800261c:	2204      	movs	r2, #4
 800261e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	187a      	adds	r2, r7, r1
 8002622:	2390      	movs	r3, #144	; 0x90
 8002624:	05db      	lsls	r3, r3, #23
 8002626:	0011      	movs	r1, r2
 8002628:	0018      	movs	r0, r3
 800262a:	f000 fb1d 	bl	8002c68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	201d      	movs	r0, #29
 8002634:	f000 fa68 	bl	8002b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002638:	201d      	movs	r0, #29
 800263a:	f000 fa7a 	bl	8002b32 <HAL_NVIC_EnableIRQ>
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	b00d      	add	sp, #52	; 0x34
 8002644:	bd90      	pop	{r4, r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	40004400 	.word	0x40004400
 800264c:	40021000 	.word	0x40021000
 8002650:	40004c00 	.word	0x40004c00

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <NMI_Handler+0x4>

0800265a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <HardFault_Handler+0x4>

08002660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002678:	f000 f95a 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <USART2_IRQHandler+0x1c>)
 800268a:	0018      	movs	r0, r3
 800268c:	f002 feec 	bl	8005468 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <USART2_IRQHandler+0x1c>)
 8002692:	0018      	movs	r0, r3
 8002694:	f001 f93c 	bl	8003910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	20000208 	.word	0x20000208

080026a4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */
	Uart_isr(&huart4);
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <USART3_4_IRQHandler+0x1c>)
 80026aa:	0018      	movs	r0, r3
 80026ac:	f002 fedc 	bl	8005468 <Uart_isr>
  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <USART3_4_IRQHandler+0x1c>)
 80026b2:	0018      	movs	r0, r3
 80026b4:	f001 f92c 	bl	8003910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	2000028c 	.word	0x2000028c

080026c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_kill>:

int _kill(int pid, int sig)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026da:	f002 ff8b 	bl	80055f4 <__errno>
 80026de:	0003      	movs	r3, r0
 80026e0:	2216      	movs	r2, #22
 80026e2:	601a      	str	r2, [r3, #0]
	return -1;
 80026e4:	2301      	movs	r3, #1
 80026e6:	425b      	negs	r3, r3
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_exit>:

void _exit (int status)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026f8:	2301      	movs	r3, #1
 80026fa:	425a      	negs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	0011      	movs	r1, r2
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff ffe5 	bl	80026d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002706:	e7fe      	b.n	8002706 <_exit+0x16>

08002708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e00a      	b.n	8002730 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800271a:	e000      	b.n	800271e <_read+0x16>
 800271c:	bf00      	nop
 800271e:	0001      	movs	r1, r0
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	b2ca      	uxtb	r2, r1
 8002728:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	dbf0      	blt.n	800271a <_read+0x12>
	}

return len;
 8002738:	687b      	ldr	r3, [r7, #4]
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b006      	add	sp, #24
 8002740:	bd80      	pop	{r7, pc}

08002742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e009      	b.n	8002768 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	60ba      	str	r2, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	0018      	movs	r0, r3
 800275e:	e000      	b.n	8002762 <_write+0x20>
 8002760:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	dbf1      	blt.n	8002754 <_write+0x12>
	}
	return len;
 8002770:	687b      	ldr	r3, [r7, #4]
}
 8002772:	0018      	movs	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	b006      	add	sp, #24
 8002778:	bd80      	pop	{r7, pc}

0800277a <_close>:

int _close(int file)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
	return -1;
 8002782:	2301      	movs	r3, #1
 8002784:	425b      	negs	r3, r3
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b002      	add	sp, #8
 800278c:	bd80      	pop	{r7, pc}

0800278e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	0192      	lsls	r2, r2, #6
 800279e:	605a      	str	r2, [r3, #4]
	return 0;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b002      	add	sp, #8
 80027a8:	bd80      	pop	{r7, pc}

080027aa <_isatty>:

int _isatty(int file)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
	return 1;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b002      	add	sp, #8
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
	return 0;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b004      	add	sp, #16
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <_sbrk+0x5c>)
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <_sbrk+0x60>)
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <_sbrk+0x64>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <_sbrk+0x68>)
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	18d3      	adds	r3, r2, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	429a      	cmp	r2, r3
 8002802:	d207      	bcs.n	8002814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002804:	f002 fef6 	bl	80055f4 <__errno>
 8002808:	0003      	movs	r3, r0
 800280a:	220c      	movs	r2, #12
 800280c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800280e:	2301      	movs	r3, #1
 8002810:	425b      	negs	r3, r3
 8002812:	e009      	b.n	8002828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <_sbrk+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <_sbrk+0x64>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	18d2      	adds	r2, r2, r3
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <_sbrk+0x64>)
 8002824:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b006      	add	sp, #24
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20004000 	.word	0x20004000
 8002834:	00000400 	.word	0x00000400
 8002838:	20000310 	.word	0x20000310
 800283c:	20000c70 	.word	0x20000c70

08002840 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800284c:	480d      	ldr	r0, [pc, #52]	; (8002884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800284e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002850:	480d      	ldr	r0, [pc, #52]	; (8002888 <LoopForever+0x6>)
  ldr r1, =_edata
 8002852:	490e      	ldr	r1, [pc, #56]	; (800288c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <LoopForever+0xe>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800285c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002868:	4c0b      	ldr	r4, [pc, #44]	; (8002898 <LoopForever+0x16>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002876:	f7ff ffe3 	bl	8002840 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800287a:	f002 fec1 	bl	8005600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800287e:	f7ff fcf1 	bl	8002264 <main>

08002882 <LoopForever>:

LoopForever:
    b LoopForever
 8002882:	e7fe      	b.n	8002882 <LoopForever>
  ldr   r0, =_estack
 8002884:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800288c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002890:	08009134 	.word	0x08009134
  ldr r2, =_sbss
 8002894:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002898:	20000c70 	.word	0x20000c70

0800289c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800289c:	e7fe      	b.n	800289c <ADC1_IRQHandler>
	...

080028a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_Init+0x24>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_Init+0x24>)
 80028aa:	2110      	movs	r1, #16
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f000 f809 	bl	80028c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b6:	f7ff fe11 	bl	80024dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	40022000 	.word	0x40022000

080028c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d0:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_InitTick+0x5c>)
 80028d2:	681c      	ldr	r4, [r3, #0]
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_InitTick+0x60>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	0019      	movs	r1, r3
 80028da:	23fa      	movs	r3, #250	; 0xfa
 80028dc:	0098      	lsls	r0, r3, #2
 80028de:	f7fd fc39 	bl	8000154 <__udivsi3>
 80028e2:	0003      	movs	r3, r0
 80028e4:	0019      	movs	r1, r3
 80028e6:	0020      	movs	r0, r4
 80028e8:	f7fd fc34 	bl	8000154 <__udivsi3>
 80028ec:	0003      	movs	r3, r0
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 f92f 	bl	8002b52 <HAL_SYSTICK_Config>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e00f      	b.n	800291c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d80b      	bhi.n	800291a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	2301      	movs	r3, #1
 8002906:	425b      	negs	r3, r3
 8002908:	2200      	movs	r2, #0
 800290a:	0018      	movs	r0, r3
 800290c:	f000 f8fc 	bl	8002b08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_InitTick+0x64>)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b003      	add	sp, #12
 8002922:	bd90      	pop	{r4, r7, pc}
 8002924:	20000000 	.word	0x20000000
 8002928:	20000008 	.word	0x20000008
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_IncTick+0x1c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	001a      	movs	r2, r3
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_IncTick+0x20>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	18d2      	adds	r2, r2, r3
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_IncTick+0x20>)
 8002942:	601a      	str	r2, [r3, #0]
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	20000008 	.word	0x20000008
 8002950:	20000314 	.word	0x20000314

08002954 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  return uwTick;
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <HAL_GetTick+0x10>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	20000314 	.word	0x20000314

08002968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7ff fff0 	bl	8002954 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3301      	adds	r3, #1
 8002980:	d005      	beq.n	800298e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_Delay+0x44>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	001a      	movs	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	189b      	adds	r3, r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	f7ff ffe0 	bl	8002954 <HAL_GetTick>
 8002994:	0002      	movs	r2, r0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	429a      	cmp	r2, r3
 800299e:	d8f7      	bhi.n	8002990 <HAL_Delay+0x28>
  {
  }
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b004      	add	sp, #16
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	20000008 	.word	0x20000008

080029b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	0002      	movs	r2, r0
 80029b8:	1dfb      	adds	r3, r7, #7
 80029ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029bc:	1dfb      	adds	r3, r7, #7
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b7f      	cmp	r3, #127	; 0x7f
 80029c2:	d809      	bhi.n	80029d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c4:	1dfb      	adds	r3, r7, #7
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	001a      	movs	r2, r3
 80029ca:	231f      	movs	r3, #31
 80029cc:	401a      	ands	r2, r3
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_EnableIRQ+0x30>)
 80029d0:	2101      	movs	r1, #1
 80029d2:	4091      	lsls	r1, r2
 80029d4:	000a      	movs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
  }
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	e000e100 	.word	0xe000e100

080029e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	0002      	movs	r2, r0
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	1dfb      	adds	r3, r7, #7
 80029f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029f2:	1dfb      	adds	r3, r7, #7
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b7f      	cmp	r3, #127	; 0x7f
 80029f8:	d828      	bhi.n	8002a4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029fa:	4a2f      	ldr	r2, [pc, #188]	; (8002ab8 <__NVIC_SetPriority+0xd4>)
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	33c0      	adds	r3, #192	; 0xc0
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	589b      	ldr	r3, [r3, r2]
 8002a0a:	1dfa      	adds	r2, r7, #7
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	0011      	movs	r1, r2
 8002a10:	2203      	movs	r2, #3
 8002a12:	400a      	ands	r2, r1
 8002a14:	00d2      	lsls	r2, r2, #3
 8002a16:	21ff      	movs	r1, #255	; 0xff
 8002a18:	4091      	lsls	r1, r2
 8002a1a:	000a      	movs	r2, r1
 8002a1c:	43d2      	mvns	r2, r2
 8002a1e:	401a      	ands	r2, r3
 8002a20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	019b      	lsls	r3, r3, #6
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	401a      	ands	r2, r3
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	2303      	movs	r3, #3
 8002a32:	4003      	ands	r3, r0
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a38:	481f      	ldr	r0, [pc, #124]	; (8002ab8 <__NVIC_SetPriority+0xd4>)
 8002a3a:	1dfb      	adds	r3, r7, #7
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	430a      	orrs	r2, r1
 8002a44:	33c0      	adds	r3, #192	; 0xc0
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a4a:	e031      	b.n	8002ab0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <__NVIC_SetPriority+0xd8>)
 8002a4e:	1dfb      	adds	r3, r7, #7
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	0019      	movs	r1, r3
 8002a54:	230f      	movs	r3, #15
 8002a56:	400b      	ands	r3, r1
 8002a58:	3b08      	subs	r3, #8
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3306      	adds	r3, #6
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	18d3      	adds	r3, r2, r3
 8002a62:	3304      	adds	r3, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	1dfa      	adds	r2, r7, #7
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	400a      	ands	r2, r1
 8002a70:	00d2      	lsls	r2, r2, #3
 8002a72:	21ff      	movs	r1, #255	; 0xff
 8002a74:	4091      	lsls	r1, r2
 8002a76:	000a      	movs	r2, r1
 8002a78:	43d2      	mvns	r2, r2
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	22ff      	movs	r2, #255	; 0xff
 8002a84:	401a      	ands	r2, r3
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	4003      	ands	r3, r0
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a94:	4809      	ldr	r0, [pc, #36]	; (8002abc <__NVIC_SetPriority+0xd8>)
 8002a96:	1dfb      	adds	r3, r7, #7
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	001c      	movs	r4, r3
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	4023      	ands	r3, r4
 8002aa0:	3b08      	subs	r3, #8
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	3306      	adds	r3, #6
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	18c3      	adds	r3, r0, r3
 8002aac:	3304      	adds	r3, #4
 8002aae:	601a      	str	r2, [r3, #0]
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b003      	add	sp, #12
 8002ab6:	bd90      	pop	{r4, r7, pc}
 8002ab8:	e000e100 	.word	0xe000e100
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	1e5a      	subs	r2, r3, #1
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	045b      	lsls	r3, r3, #17
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d301      	bcc.n	8002ad8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e010      	b.n	8002afa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <SysTick_Config+0x44>)
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	3a01      	subs	r2, #1
 8002ade:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	425b      	negs	r3, r3
 8002ae4:	2103      	movs	r1, #3
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7ff ff7c 	bl	80029e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <SysTick_Config+0x44>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SysTick_Config+0x44>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	0018      	movs	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b002      	add	sp, #8
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	210f      	movs	r1, #15
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	1c02      	adds	r2, r0, #0
 8002b18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	0011      	movs	r1, r2
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff ff5d 	bl	80029e4 <__NVIC_SetPriority>
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	0002      	movs	r2, r0
 8002b3a:	1dfb      	adds	r3, r7, #7
 8002b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b3e:	1dfb      	adds	r3, r7, #7
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	b25b      	sxtb	r3, r3
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff ff33 	bl	80029b0 <__NVIC_EnableIRQ>
}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b002      	add	sp, #8
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f7ff ffaf 	bl	8002ac0 <SysTick_Config>
 8002b62:	0003      	movs	r3, r0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2221      	movs	r2, #33	; 0x21
 8002b78:	5c9b      	ldrb	r3, [r3, r2]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d008      	beq.n	8002b92 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2204      	movs	r2, #4
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e020      	b.n	8002bd4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	210e      	movs	r1, #14
 8002b9e:	438a      	bics	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2101      	movs	r1, #1
 8002bae:	438a      	bics	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4091      	lsls	r1, r2
 8002bbe:	000a      	movs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2221      	movs	r2, #33	; 0x21
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b002      	add	sp, #8
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be4:	210f      	movs	r1, #15
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2221      	movs	r2, #33	; 0x21
 8002bf0:	5c9b      	ldrb	r3, [r3, r2]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d006      	beq.n	8002c06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e028      	b.n	8002c58 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	210e      	movs	r1, #14
 8002c12:	438a      	bics	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	438a      	bics	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4091      	lsls	r1, r2
 8002c32:	000a      	movs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2221      	movs	r2, #33	; 0x21
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	0010      	movs	r0, r2
 8002c56:	4798      	blx	r3
    } 
  }
  return status;
 8002c58:	230f      	movs	r3, #15
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	781b      	ldrb	r3, [r3, #0]
}
 8002c5e:	0018      	movs	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b004      	add	sp, #16
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	e14f      	b.n	8002f18 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4091      	lsls	r1, r2
 8002c82:	000a      	movs	r2, r1
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d100      	bne.n	8002c90 <HAL_GPIO_Init+0x28>
 8002c8e:	e140      	b.n	8002f12 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2203      	movs	r2, #3
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d005      	beq.n	8002ca8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d130      	bne.n	8002d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	0013      	movs	r3, r2
 8002cb8:	43da      	mvns	r2, r3
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	0013      	movs	r3, r2
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	0013      	movs	r3, r2
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	0013      	movs	r3, r2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d017      	beq.n	8002d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2203      	movs	r2, #3
 8002d22:	409a      	lsls	r2, r3
 8002d24:	0013      	movs	r3, r2
 8002d26:	43da      	mvns	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	409a      	lsls	r2, r3
 8002d38:	0013      	movs	r3, r2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d123      	bne.n	8002d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	58d3      	ldr	r3, [r2, r3]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2207      	movs	r2, #7
 8002d64:	4013      	ands	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	0013      	movs	r3, r2
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2107      	movs	r1, #7
 8002d7e:	400b      	ands	r3, r1
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	409a      	lsls	r2, r3
 8002d84:	0013      	movs	r3, r2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	0092      	lsls	r2, r2, #2
 8002d96:	6939      	ldr	r1, [r7, #16]
 8002d98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	409a      	lsls	r2, r3
 8002da8:	0013      	movs	r3, r2
 8002daa:	43da      	mvns	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2203      	movs	r2, #3
 8002db8:	401a      	ands	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	0013      	movs	r3, r2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	23c0      	movs	r3, #192	; 0xc0
 8002dd4:	029b      	lsls	r3, r3, #10
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d100      	bne.n	8002ddc <HAL_GPIO_Init+0x174>
 8002dda:	e09a      	b.n	8002f12 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ddc:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_GPIO_Init+0x2c8>)
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <HAL_GPIO_Init+0x2c8>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	430a      	orrs	r2, r1
 8002de6:	619a      	str	r2, [r3, #24]
 8002de8:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_GPIO_Init+0x2c8>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2201      	movs	r2, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002df4:	4a4f      	ldr	r2, [pc, #316]	; (8002f34 <HAL_GPIO_Init+0x2cc>)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	589b      	ldr	r3, [r3, r2]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2203      	movs	r2, #3
 8002e06:	4013      	ands	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	0013      	movs	r3, r2
 8002e10:	43da      	mvns	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	2390      	movs	r3, #144	; 0x90
 8002e1c:	05db      	lsls	r3, r3, #23
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d013      	beq.n	8002e4a <HAL_GPIO_Init+0x1e2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a44      	ldr	r2, [pc, #272]	; (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00d      	beq.n	8002e46 <HAL_GPIO_Init+0x1de>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a43      	ldr	r2, [pc, #268]	; (8002f3c <HAL_GPIO_Init+0x2d4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <HAL_GPIO_Init+0x1da>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a42      	ldr	r2, [pc, #264]	; (8002f40 <HAL_GPIO_Init+0x2d8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_GPIO_Init+0x1d6>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e006      	b.n	8002e4c <HAL_GPIO_Init+0x1e4>
 8002e3e:	2305      	movs	r3, #5
 8002e40:	e004      	b.n	8002e4c <HAL_GPIO_Init+0x1e4>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e002      	b.n	8002e4c <HAL_GPIO_Init+0x1e4>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x1e4>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	2103      	movs	r1, #3
 8002e50:	400a      	ands	r2, r1
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	4093      	lsls	r3, r2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e5c:	4935      	ldr	r1, [pc, #212]	; (8002f34 <HAL_GPIO_Init+0x2cc>)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6a:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_GPIO_Init+0x2dc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	43da      	mvns	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	025b      	lsls	r3, r3, #9
 8002e82:	4013      	ands	r3, r2
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e8e:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_GPIO_Init+0x2dc>)
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_GPIO_Init+0x2dc>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	029b      	lsls	r3, r3, #10
 8002eac:	4013      	ands	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_GPIO_Init+0x2dc>)
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_GPIO_Init+0x2dc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	035b      	lsls	r3, r3, #13
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_GPIO_Init+0x2dc>)
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <HAL_GPIO_Init+0x2dc>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	039b      	lsls	r3, r3, #14
 8002f00:	4013      	ands	r3, r2
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_GPIO_Init+0x2dc>)
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	3301      	adds	r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	40da      	lsrs	r2, r3
 8002f20:	1e13      	subs	r3, r2, #0
 8002f22:	d000      	beq.n	8002f26 <HAL_GPIO_Init+0x2be>
 8002f24:	e6a8      	b.n	8002c78 <HAL_GPIO_Init+0x10>
  } 
}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b006      	add	sp, #24
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40010000 	.word	0x40010000
 8002f38:	48000400 	.word	0x48000400
 8002f3c:	48000800 	.word	0x48000800
 8002f40:	48000c00 	.word	0x48000c00
 8002f44:	40010400 	.word	0x40010400

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	0008      	movs	r0, r1
 8002f52:	0011      	movs	r1, r2
 8002f54:	1cbb      	adds	r3, r7, #2
 8002f56:	1c02      	adds	r2, r0, #0
 8002f58:	801a      	strh	r2, [r3, #0]
 8002f5a:	1c7b      	adds	r3, r7, #1
 8002f5c:	1c0a      	adds	r2, r1, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f60:	1c7b      	adds	r3, r7, #1
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f68:	1cbb      	adds	r3, r7, #2
 8002f6a:	881a      	ldrh	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f70:	e003      	b.n	8002f7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f72:	1cbb      	adds	r3, r7, #2
 8002f74:	881a      	ldrh	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e305      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d100      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x1e>
 8002fa0:	e08d      	b.n	80030be <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fa2:	4bc5      	ldr	r3, [pc, #788]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d00e      	beq.n	8002fcc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fae:	4bc2      	ldr	r3, [pc, #776]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d116      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x64>
 8002fba:	4bbf      	ldr	r3, [pc, #764]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	23c0      	movs	r3, #192	; 0xc0
 8002fc0:	025b      	lsls	r3, r3, #9
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	025b      	lsls	r3, r3, #9
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d10d      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	4bba      	ldr	r3, [pc, #744]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d100      	bne.n	8002fda <HAL_RCC_OscConfig+0x56>
 8002fd8:	e070      	b.n	80030bc <HAL_RCC_OscConfig+0x138>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d000      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x60>
 8002fe2:	e06b      	b.n	80030bc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e2dc      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x7c>
 8002ff0:	4bb1      	ldr	r3, [pc, #708]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4bb0      	ldr	r3, [pc, #704]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	0249      	lsls	r1, r1, #9
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e02f      	b.n	8003060 <HAL_RCC_OscConfig+0xdc>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10c      	bne.n	8003022 <HAL_RCC_OscConfig+0x9e>
 8003008:	4bab      	ldr	r3, [pc, #684]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4baa      	ldr	r3, [pc, #680]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800300e:	49ab      	ldr	r1, [pc, #684]	; (80032bc <HAL_RCC_OscConfig+0x338>)
 8003010:	400a      	ands	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	4ba8      	ldr	r3, [pc, #672]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4ba7      	ldr	r3, [pc, #668]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800301a:	49a9      	ldr	r1, [pc, #676]	; (80032c0 <HAL_RCC_OscConfig+0x33c>)
 800301c:	400a      	ands	r2, r1
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e01e      	b.n	8003060 <HAL_RCC_OscConfig+0xdc>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d10e      	bne.n	8003048 <HAL_RCC_OscConfig+0xc4>
 800302a:	4ba3      	ldr	r3, [pc, #652]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4ba2      	ldr	r3, [pc, #648]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	02c9      	lsls	r1, r1, #11
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	4b9f      	ldr	r3, [pc, #636]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b9e      	ldr	r3, [pc, #632]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	0249      	lsls	r1, r1, #9
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0xdc>
 8003048:	4b9b      	ldr	r3, [pc, #620]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b9a      	ldr	r3, [pc, #616]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800304e:	499b      	ldr	r1, [pc, #620]	; (80032bc <HAL_RCC_OscConfig+0x338>)
 8003050:	400a      	ands	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	4b98      	ldr	r3, [pc, #608]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b97      	ldr	r3, [pc, #604]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800305a:	4999      	ldr	r1, [pc, #612]	; (80032c0 <HAL_RCC_OscConfig+0x33c>)
 800305c:	400a      	ands	r2, r1
 800305e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d014      	beq.n	8003092 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7ff fc74 	bl	8002954 <HAL_GetTick>
 800306c:	0003      	movs	r3, r0
 800306e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003072:	f7ff fc6f 	bl	8002954 <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b64      	cmp	r3, #100	; 0x64
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e28e      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003084:	4b8c      	ldr	r3, [pc, #560]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	029b      	lsls	r3, r3, #10
 800308c:	4013      	ands	r3, r2
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0xee>
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003092:	f7ff fc5f 	bl	8002954 <HAL_GetTick>
 8003096:	0003      	movs	r3, r0
 8003098:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800309c:	f7ff fc5a 	bl	8002954 <HAL_GetTick>
 80030a0:	0002      	movs	r2, r0
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e279      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	4b82      	ldr	r3, [pc, #520]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	4013      	ands	r3, r2
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x118>
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2202      	movs	r2, #2
 80030c4:	4013      	ands	r3, r2
 80030c6:	d100      	bne.n	80030ca <HAL_RCC_OscConfig+0x146>
 80030c8:	e06c      	b.n	80031a4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030ca:	4b7b      	ldr	r3, [pc, #492]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	220c      	movs	r2, #12
 80030d0:	4013      	ands	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030d4:	4b78      	ldr	r3, [pc, #480]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	220c      	movs	r2, #12
 80030da:	4013      	ands	r3, r2
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d11f      	bne.n	8003120 <HAL_RCC_OscConfig+0x19c>
 80030e0:	4b75      	ldr	r3, [pc, #468]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	23c0      	movs	r3, #192	; 0xc0
 80030e6:	025b      	lsls	r3, r3, #9
 80030e8:	401a      	ands	r2, r3
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d116      	bne.n	8003120 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	4b71      	ldr	r3, [pc, #452]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2202      	movs	r2, #2
 80030f8:	4013      	ands	r3, r2
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_OscConfig+0x184>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e24c      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003108:	4b6b      	ldr	r3, [pc, #428]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	22f8      	movs	r2, #248	; 0xf8
 800310e:	4393      	bics	r3, r2
 8003110:	0019      	movs	r1, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00da      	lsls	r2, r3, #3
 8003118:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800311a:	430a      	orrs	r2, r1
 800311c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	e041      	b.n	80031a4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d024      	beq.n	8003172 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003128:	4b63      	ldr	r3, [pc, #396]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800312e:	2101      	movs	r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7ff fc0e 	bl	8002954 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313e:	f7ff fc09 	bl	8002954 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e228      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2202      	movs	r2, #2
 8003156:	4013      	ands	r3, r2
 8003158:	d0f1      	beq.n	800313e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	22f8      	movs	r2, #248	; 0xf8
 8003160:	4393      	bics	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	00da      	lsls	r2, r3, #3
 800316a:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e018      	b.n	80031a4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003172:	4b51      	ldr	r3, [pc, #324]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003178:	2101      	movs	r1, #1
 800317a:	438a      	bics	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7ff fbe9 	bl	8002954 <HAL_GetTick>
 8003182:	0003      	movs	r3, r0
 8003184:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003188:	f7ff fbe4 	bl	8002954 <HAL_GetTick>
 800318c:	0002      	movs	r2, r0
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e203      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	4b47      	ldr	r3, [pc, #284]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2202      	movs	r2, #2
 80031a0:	4013      	ands	r3, r2
 80031a2:	d1f1      	bne.n	8003188 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2208      	movs	r2, #8
 80031aa:	4013      	ands	r3, r2
 80031ac:	d036      	beq.n	800321c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d019      	beq.n	80031ea <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b6:	4b40      	ldr	r3, [pc, #256]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80031b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ba:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80031bc:	2101      	movs	r1, #1
 80031be:	430a      	orrs	r2, r1
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c2:	f7ff fbc7 	bl	8002954 <HAL_GetTick>
 80031c6:	0003      	movs	r3, r0
 80031c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031cc:	f7ff fbc2 	bl	8002954 <HAL_GetTick>
 80031d0:	0002      	movs	r2, r0
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1e1      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2202      	movs	r2, #2
 80031e4:	4013      	ands	r3, r2
 80031e6:	d0f1      	beq.n	80031cc <HAL_RCC_OscConfig+0x248>
 80031e8:	e018      	b.n	800321c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ea:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80031ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ee:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80031f0:	2101      	movs	r1, #1
 80031f2:	438a      	bics	r2, r1
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f6:	f7ff fbad 	bl	8002954 <HAL_GetTick>
 80031fa:	0003      	movs	r3, r0
 80031fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003200:	f7ff fba8 	bl	8002954 <HAL_GetTick>
 8003204:	0002      	movs	r2, r0
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e1c7      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003212:	4b29      	ldr	r3, [pc, #164]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	2202      	movs	r2, #2
 8003218:	4013      	ands	r3, r2
 800321a:	d1f1      	bne.n	8003200 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2204      	movs	r2, #4
 8003222:	4013      	ands	r3, r2
 8003224:	d100      	bne.n	8003228 <HAL_RCC_OscConfig+0x2a4>
 8003226:	e0b5      	b.n	8003394 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003228:	201f      	movs	r0, #31
 800322a:	183b      	adds	r3, r7, r0
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003230:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	055b      	lsls	r3, r3, #21
 8003238:	4013      	ands	r3, r2
 800323a:	d110      	bne.n	800325e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	0549      	lsls	r1, r1, #21
 8003246:	430a      	orrs	r2, r1
 8003248:	61da      	str	r2, [r3, #28]
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	055b      	lsls	r3, r3, #21
 8003252:	4013      	ands	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003258:	183b      	adds	r3, r7, r0
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_RCC_OscConfig+0x340>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4013      	ands	r3, r2
 8003268:	d11a      	bne.n	80032a0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_RCC_OscConfig+0x340>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_RCC_OscConfig+0x340>)
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	0049      	lsls	r1, r1, #1
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003278:	f7ff fb6c 	bl	8002954 <HAL_GetTick>
 800327c:	0003      	movs	r3, r0
 800327e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003282:	f7ff fb67 	bl	8002954 <HAL_GetTick>
 8003286:	0002      	movs	r2, r0
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b64      	cmp	r3, #100	; 0x64
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e186      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x340>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4013      	ands	r3, r2
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10f      	bne.n	80032c8 <HAL_RCC_OscConfig+0x344>
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	4b02      	ldr	r3, [pc, #8]	; (80032b8 <HAL_RCC_OscConfig+0x334>)
 80032ae:	2101      	movs	r1, #1
 80032b0:	430a      	orrs	r2, r1
 80032b2:	621a      	str	r2, [r3, #32]
 80032b4:	e036      	b.n	8003324 <HAL_RCC_OscConfig+0x3a0>
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	40021000 	.word	0x40021000
 80032bc:	fffeffff 	.word	0xfffeffff
 80032c0:	fffbffff 	.word	0xfffbffff
 80032c4:	40007000 	.word	0x40007000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10c      	bne.n	80032ea <HAL_RCC_OscConfig+0x366>
 80032d0:	4bb6      	ldr	r3, [pc, #728]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80032d2:	6a1a      	ldr	r2, [r3, #32]
 80032d4:	4bb5      	ldr	r3, [pc, #724]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80032d6:	2101      	movs	r1, #1
 80032d8:	438a      	bics	r2, r1
 80032da:	621a      	str	r2, [r3, #32]
 80032dc:	4bb3      	ldr	r3, [pc, #716]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	4bb2      	ldr	r3, [pc, #712]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80032e2:	2104      	movs	r1, #4
 80032e4:	438a      	bics	r2, r1
 80032e6:	621a      	str	r2, [r3, #32]
 80032e8:	e01c      	b.n	8003324 <HAL_RCC_OscConfig+0x3a0>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x388>
 80032f2:	4bae      	ldr	r3, [pc, #696]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80032f4:	6a1a      	ldr	r2, [r3, #32]
 80032f6:	4bad      	ldr	r3, [pc, #692]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80032f8:	2104      	movs	r1, #4
 80032fa:	430a      	orrs	r2, r1
 80032fc:	621a      	str	r2, [r3, #32]
 80032fe:	4bab      	ldr	r3, [pc, #684]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003300:	6a1a      	ldr	r2, [r3, #32]
 8003302:	4baa      	ldr	r3, [pc, #680]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	621a      	str	r2, [r3, #32]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0x3a0>
 800330c:	4ba7      	ldr	r3, [pc, #668]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800330e:	6a1a      	ldr	r2, [r3, #32]
 8003310:	4ba6      	ldr	r3, [pc, #664]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003312:	2101      	movs	r1, #1
 8003314:	438a      	bics	r2, r1
 8003316:	621a      	str	r2, [r3, #32]
 8003318:	4ba4      	ldr	r3, [pc, #656]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	4ba3      	ldr	r3, [pc, #652]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800331e:	2104      	movs	r1, #4
 8003320:	438a      	bics	r2, r1
 8003322:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d014      	beq.n	8003356 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7ff fb12 	bl	8002954 <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	e009      	b.n	800334a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7ff fb0d 	bl	8002954 <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	4a9b      	ldr	r2, [pc, #620]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e12b      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	4b98      	ldr	r3, [pc, #608]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x3b2>
 8003354:	e013      	b.n	800337e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003356:	f7ff fafd 	bl	8002954 <HAL_GetTick>
 800335a:	0003      	movs	r3, r0
 800335c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335e:	e009      	b.n	8003374 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003360:	f7ff faf8 	bl	8002954 <HAL_GetTick>
 8003364:	0002      	movs	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	4a91      	ldr	r2, [pc, #580]	; (80035b0 <HAL_RCC_OscConfig+0x62c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e116      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003374:	4b8d      	ldr	r3, [pc, #564]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	2202      	movs	r2, #2
 800337a:	4013      	ands	r3, r2
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800337e:	231f      	movs	r3, #31
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003388:	4b88      	ldr	r3, [pc, #544]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	4b87      	ldr	r3, [pc, #540]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800338e:	4989      	ldr	r1, [pc, #548]	; (80035b4 <HAL_RCC_OscConfig+0x630>)
 8003390:	400a      	ands	r2, r1
 8003392:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2210      	movs	r2, #16
 800339a:	4013      	ands	r3, r2
 800339c:	d063      	beq.n	8003466 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d12a      	bne.n	80033fc <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033a6:	4b81      	ldr	r3, [pc, #516]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80033a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033aa:	4b80      	ldr	r3, [pc, #512]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80033ac:	2104      	movs	r1, #4
 80033ae:	430a      	orrs	r2, r1
 80033b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80033b2:	4b7e      	ldr	r3, [pc, #504]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80033b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b6:	4b7d      	ldr	r3, [pc, #500]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80033b8:	2101      	movs	r1, #1
 80033ba:	430a      	orrs	r2, r1
 80033bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033be:	f7ff fac9 	bl	8002954 <HAL_GetTick>
 80033c2:	0003      	movs	r3, r0
 80033c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80033c8:	f7ff fac4 	bl	8002954 <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0e3      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80033da:	4b74      	ldr	r3, [pc, #464]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	2202      	movs	r2, #2
 80033e0:	4013      	ands	r3, r2
 80033e2:	d0f1      	beq.n	80033c8 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033e4:	4b71      	ldr	r3, [pc, #452]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	22f8      	movs	r2, #248	; 0xf8
 80033ea:	4393      	bics	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	00da      	lsls	r2, r3, #3
 80033f4:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	635a      	str	r2, [r3, #52]	; 0x34
 80033fa:	e034      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	3305      	adds	r3, #5
 8003402:	d111      	bne.n	8003428 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003404:	4b69      	ldr	r3, [pc, #420]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003408:	4b68      	ldr	r3, [pc, #416]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800340a:	2104      	movs	r1, #4
 800340c:	438a      	bics	r2, r1
 800340e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	22f8      	movs	r2, #248	; 0xf8
 8003416:	4393      	bics	r3, r2
 8003418:	0019      	movs	r1, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	00da      	lsls	r2, r3, #3
 8003420:	4b62      	ldr	r3, [pc, #392]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003422:	430a      	orrs	r2, r1
 8003424:	635a      	str	r2, [r3, #52]	; 0x34
 8003426:	e01e      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003428:	4b60      	ldr	r3, [pc, #384]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800342a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342c:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800342e:	2104      	movs	r1, #4
 8003430:	430a      	orrs	r2, r1
 8003432:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003434:	4b5d      	ldr	r3, [pc, #372]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003438:	4b5c      	ldr	r3, [pc, #368]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800343a:	2101      	movs	r1, #1
 800343c:	438a      	bics	r2, r1
 800343e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003440:	f7ff fa88 	bl	8002954 <HAL_GetTick>
 8003444:	0003      	movs	r3, r0
 8003446:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800344a:	f7ff fa83 	bl	8002954 <HAL_GetTick>
 800344e:	0002      	movs	r2, r0
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0a2      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	2202      	movs	r2, #2
 8003462:	4013      	ands	r3, r2
 8003464:	d1f1      	bne.n	800344a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d100      	bne.n	8003470 <HAL_RCC_OscConfig+0x4ec>
 800346e:	e097      	b.n	80035a0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003470:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	220c      	movs	r2, #12
 8003476:	4013      	ands	r3, r2
 8003478:	2b08      	cmp	r3, #8
 800347a:	d100      	bne.n	800347e <HAL_RCC_OscConfig+0x4fa>
 800347c:	e06b      	b.n	8003556 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d14c      	bne.n	8003520 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b49      	ldr	r3, [pc, #292]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b48      	ldr	r3, [pc, #288]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800348c:	494a      	ldr	r1, [pc, #296]	; (80035b8 <HAL_RCC_OscConfig+0x634>)
 800348e:	400a      	ands	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7ff fa5f 	bl	8002954 <HAL_GetTick>
 8003496:	0003      	movs	r3, r0
 8003498:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349c:	f7ff fa5a 	bl	8002954 <HAL_GetTick>
 80034a0:	0002      	movs	r2, r0
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e079      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ae:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	049b      	lsls	r3, r3, #18
 80034b6:	4013      	ands	r3, r2
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ba:	4b3c      	ldr	r3, [pc, #240]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	220f      	movs	r2, #15
 80034c0:	4393      	bics	r3, r2
 80034c2:	0019      	movs	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80034ca:	430a      	orrs	r2, r1
 80034cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <HAL_RCC_OscConfig+0x638>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	0019      	movs	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	431a      	orrs	r2, r3
 80034e2:	4b32      	ldr	r3, [pc, #200]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e8:	4b30      	ldr	r3, [pc, #192]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	0449      	lsls	r1, r1, #17
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7ff fa2d 	bl	8002954 <HAL_GetTick>
 80034fa:	0003      	movs	r3, r0
 80034fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7ff fa28 	bl	8002954 <HAL_GetTick>
 8003504:	0002      	movs	r2, r0
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e047      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	049b      	lsls	r3, r3, #18
 800351a:	4013      	ands	r3, r2
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x57c>
 800351e:	e03f      	b.n	80035a0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003520:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b21      	ldr	r3, [pc, #132]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003526:	4924      	ldr	r1, [pc, #144]	; (80035b8 <HAL_RCC_OscConfig+0x634>)
 8003528:	400a      	ands	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7ff fa12 	bl	8002954 <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7ff fa0d 	bl	8002954 <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e02c      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	049b      	lsls	r3, r3, #18
 8003550:	4013      	ands	r3, r2
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x5b2>
 8003554:	e024      	b.n	80035a0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e01f      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003568:	4b10      	ldr	r3, [pc, #64]	; (80035ac <HAL_RCC_OscConfig+0x628>)
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	23c0      	movs	r3, #192	; 0xc0
 8003572:	025b      	lsls	r3, r3, #9
 8003574:	401a      	ands	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	429a      	cmp	r2, r3
 800357c:	d10e      	bne.n	800359c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	220f      	movs	r2, #15
 8003582:	401a      	ands	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d107      	bne.n	800359c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	23f0      	movs	r3, #240	; 0xf0
 8003590:	039b      	lsls	r3, r3, #14
 8003592:	401a      	ands	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b008      	add	sp, #32
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	40021000 	.word	0x40021000
 80035b0:	00001388 	.word	0x00001388
 80035b4:	efffffff 	.word	0xefffffff
 80035b8:	feffffff 	.word	0xfeffffff
 80035bc:	ffc27fff 	.word	0xffc27fff

080035c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0b3      	b.n	800373c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b5b      	ldr	r3, [pc, #364]	; (8003744 <HAL_RCC_ClockConfig+0x184>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2201      	movs	r2, #1
 80035da:	4013      	ands	r3, r2
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d911      	bls.n	8003606 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b58      	ldr	r3, [pc, #352]	; (8003744 <HAL_RCC_ClockConfig+0x184>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2201      	movs	r2, #1
 80035e8:	4393      	bics	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	4b55      	ldr	r3, [pc, #340]	; (8003744 <HAL_RCC_ClockConfig+0x184>)
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <HAL_RCC_ClockConfig+0x184>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2201      	movs	r2, #1
 80035fa:	4013      	ands	r3, r2
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d001      	beq.n	8003606 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e09a      	b.n	800373c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2202      	movs	r2, #2
 800360c:	4013      	ands	r3, r2
 800360e:	d015      	beq.n	800363c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2204      	movs	r2, #4
 8003616:	4013      	ands	r3, r2
 8003618:	d006      	beq.n	8003628 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800361a:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 8003620:	21e0      	movs	r1, #224	; 0xe0
 8003622:	00c9      	lsls	r1, r1, #3
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003628:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	22f0      	movs	r2, #240	; 0xf0
 800362e:	4393      	bics	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	4b44      	ldr	r3, [pc, #272]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 8003638:	430a      	orrs	r2, r1
 800363a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2201      	movs	r2, #1
 8003642:	4013      	ands	r3, r2
 8003644:	d040      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	029b      	lsls	r3, r3, #10
 8003656:	4013      	ands	r3, r2
 8003658:	d114      	bne.n	8003684 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e06e      	b.n	800373c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b38      	ldr	r3, [pc, #224]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	049b      	lsls	r3, r3, #18
 800366e:	4013      	ands	r3, r2
 8003670:	d108      	bne.n	8003684 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e062      	b.n	800373c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	4b34      	ldr	r3, [pc, #208]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2202      	movs	r2, #2
 800367c:	4013      	ands	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e05b      	b.n	800373c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003684:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2203      	movs	r2, #3
 800368a:	4393      	bics	r3, r2
 800368c:	0019      	movs	r1, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003698:	f7ff f95c 	bl	8002954 <HAL_GetTick>
 800369c:	0003      	movs	r3, r0
 800369e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a0:	e009      	b.n	80036b6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a2:	f7ff f957 	bl	8002954 <HAL_GetTick>
 80036a6:	0002      	movs	r2, r0
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	4a27      	ldr	r2, [pc, #156]	; (800374c <HAL_RCC_ClockConfig+0x18c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e042      	b.n	800373c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	220c      	movs	r2, #12
 80036bc:	401a      	ands	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1ec      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <HAL_RCC_ClockConfig+0x184>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2201      	movs	r2, #1
 80036ce:	4013      	ands	r3, r2
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d211      	bcs.n	80036fa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_ClockConfig+0x184>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	4393      	bics	r3, r2
 80036de:	0019      	movs	r1, r3
 80036e0:	4b18      	ldr	r3, [pc, #96]	; (8003744 <HAL_RCC_ClockConfig+0x184>)
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e8:	4b16      	ldr	r3, [pc, #88]	; (8003744 <HAL_RCC_ClockConfig+0x184>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	4013      	ands	r3, r2
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e020      	b.n	800373c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2204      	movs	r2, #4
 8003700:	4013      	ands	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a11      	ldr	r2, [pc, #68]	; (8003750 <HAL_RCC_ClockConfig+0x190>)
 800370a:	4013      	ands	r3, r2
 800370c:	0019      	movs	r1, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003718:	f000 f820 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800371c:	0001      	movs	r1, r0
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x188>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	220f      	movs	r2, #15
 8003726:	4013      	ands	r3, r2
 8003728:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <HAL_RCC_ClockConfig+0x194>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	000a      	movs	r2, r1
 800372e:	40da      	lsrs	r2, r3
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x198>)
 8003732:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003734:	2000      	movs	r0, #0
 8003736:	f7ff f8c7 	bl	80028c8 <HAL_InitTick>
  
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b004      	add	sp, #16
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40022000 	.word	0x40022000
 8003748:	40021000 	.word	0x40021000
 800374c:	00001388 	.word	0x00001388
 8003750:	fffff8ff 	.word	0xfffff8ff
 8003754:	08008d38 	.word	0x08008d38
 8003758:	20000000 	.word	0x20000000

0800375c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b08f      	sub	sp, #60	; 0x3c
 8003760:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003762:	2314      	movs	r3, #20
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003768:	ca13      	ldmia	r2!, {r0, r1, r4}
 800376a:	c313      	stmia	r3!, {r0, r1, r4}
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003770:	1d3b      	adds	r3, r7, #4
 8003772:	4a2a      	ldr	r2, [pc, #168]	; (800381c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003774:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003776:	c313      	stmia	r3!, {r0, r1, r4}
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003780:	2300      	movs	r3, #0
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
 8003784:	2300      	movs	r3, #0
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003790:	4b23      	ldr	r3, [pc, #140]	; (8003820 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	220c      	movs	r2, #12
 800379a:	4013      	ands	r3, r2
 800379c:	2b04      	cmp	r3, #4
 800379e:	d002      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x4a>
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d003      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x50>
 80037a4:	e02f      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a6:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037aa:	e02f      	b.n	800380c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	0c9b      	lsrs	r3, r3, #18
 80037b0:	220f      	movs	r2, #15
 80037b2:	4013      	ands	r3, r2
 80037b4:	2214      	movs	r2, #20
 80037b6:	18ba      	adds	r2, r7, r2
 80037b8:	5cd3      	ldrb	r3, [r2, r3]
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80037bc:	4b18      	ldr	r3, [pc, #96]	; (8003820 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	220f      	movs	r2, #15
 80037c2:	4013      	ands	r3, r2
 80037c4:	1d3a      	adds	r2, r7, #4
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037cc:	23c0      	movs	r3, #192	; 0xc0
 80037ce:	025b      	lsls	r3, r3, #9
 80037d0:	401a      	ands	r2, r3
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	025b      	lsls	r3, r3, #9
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037dc:	4811      	ldr	r0, [pc, #68]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037de:	f7fc fcb9 	bl	8000154 <__udivsi3>
 80037e2:	0003      	movs	r3, r0
 80037e4:	001a      	movs	r2, r3
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	4353      	muls	r3, r2
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
 80037ec:	e008      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f0:	480c      	ldr	r0, [pc, #48]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037f2:	f7fc fcaf 	bl	8000154 <__udivsi3>
 80037f6:	0003      	movs	r3, r0
 80037f8:	001a      	movs	r2, r3
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	4353      	muls	r3, r2
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003804:	e002      	b.n	800380c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003808:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800380a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b00f      	add	sp, #60	; 0x3c
 8003814:	bd90      	pop	{r4, r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	08008664 	.word	0x08008664
 800381c:	08008674 	.word	0x08008674
 8003820:	40021000 	.word	0x40021000
 8003824:	007a1200 	.word	0x007a1200

08003828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800382c:	4b02      	ldr	r3, [pc, #8]	; (8003838 <HAL_RCC_GetHCLKFreq+0x10>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	20000000 	.word	0x20000000

0800383c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003840:	f7ff fff2 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003844:	0001      	movs	r1, r0
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	2207      	movs	r2, #7
 800384e:	4013      	ands	r3, r2
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003852:	5cd3      	ldrb	r3, [r2, r3]
 8003854:	40d9      	lsrs	r1, r3
 8003856:	000b      	movs	r3, r1
}    
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	40021000 	.word	0x40021000
 8003864:	08008d48 	.word	0x08008d48

08003868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e044      	b.n	8003904 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2274      	movs	r2, #116	; 0x74
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	0018      	movs	r0, r3
 800388e:	f7fe fe49 	bl	8002524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2224      	movs	r2, #36	; 0x24
 8003896:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2101      	movs	r1, #1
 80038a4:	438a      	bics	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 fb0c 	bl	8003ec8 <UART_SetConfig>
 80038b0:	0003      	movs	r3, r0
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e024      	b.n	8003904 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 fc57 	bl	8004178 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	490d      	ldr	r1, [pc, #52]	; (800390c <HAL_UART_Init+0xa4>)
 80038d6:	400a      	ands	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2108      	movs	r1, #8
 80038e6:	438a      	bics	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2101      	movs	r1, #1
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 fcef 	bl	80042e0 <UART_CheckIdleState>
 8003902:	0003      	movs	r3, r0
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	fffff7ff 	.word	0xfffff7ff

08003910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b0ab      	sub	sp, #172	; 0xac
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	22a4      	movs	r2, #164	; 0xa4
 8003920:	18b9      	adds	r1, r7, r2
 8003922:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	20a0      	movs	r0, #160	; 0xa0
 800392c:	1839      	adds	r1, r7, r0
 800392e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	219c      	movs	r1, #156	; 0x9c
 8003938:	1879      	adds	r1, r7, r1
 800393a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800393c:	0011      	movs	r1, r2
 800393e:	18bb      	adds	r3, r7, r2
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a99      	ldr	r2, [pc, #612]	; (8003ba8 <HAL_UART_IRQHandler+0x298>)
 8003944:	4013      	ands	r3, r2
 8003946:	2298      	movs	r2, #152	; 0x98
 8003948:	18bc      	adds	r4, r7, r2
 800394a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800394c:	18bb      	adds	r3, r7, r2
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d114      	bne.n	800397e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003954:	187b      	adds	r3, r7, r1
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2220      	movs	r2, #32
 800395a:	4013      	ands	r3, r2
 800395c:	d00f      	beq.n	800397e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800395e:	183b      	adds	r3, r7, r0
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2220      	movs	r2, #32
 8003964:	4013      	ands	r3, r2
 8003966:	d00a      	beq.n	800397e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396c:	2b00      	cmp	r3, #0
 800396e:	d100      	bne.n	8003972 <HAL_UART_IRQHandler+0x62>
 8003970:	e27e      	b.n	8003e70 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	0010      	movs	r0, r2
 800397a:	4798      	blx	r3
      }
      return;
 800397c:	e278      	b.n	8003e70 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800397e:	2398      	movs	r3, #152	; 0x98
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d100      	bne.n	800398a <HAL_UART_IRQHandler+0x7a>
 8003988:	e114      	b.n	8003bb4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800398a:	239c      	movs	r3, #156	; 0x9c
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2201      	movs	r2, #1
 8003992:	4013      	ands	r3, r2
 8003994:	d106      	bne.n	80039a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003996:	23a0      	movs	r3, #160	; 0xa0
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a83      	ldr	r2, [pc, #524]	; (8003bac <HAL_UART_IRQHandler+0x29c>)
 800399e:	4013      	ands	r3, r2
 80039a0:	d100      	bne.n	80039a4 <HAL_UART_IRQHandler+0x94>
 80039a2:	e107      	b.n	8003bb4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039a4:	23a4      	movs	r3, #164	; 0xa4
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2201      	movs	r2, #1
 80039ac:	4013      	ands	r3, r2
 80039ae:	d012      	beq.n	80039d6 <HAL_UART_IRQHandler+0xc6>
 80039b0:	23a0      	movs	r3, #160	; 0xa0
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4013      	ands	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2201      	movs	r2, #1
 80039c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	589b      	ldr	r3, [r3, r2]
 80039cc:	2201      	movs	r2, #1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039d6:	23a4      	movs	r3, #164	; 0xa4
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2202      	movs	r2, #2
 80039de:	4013      	ands	r3, r2
 80039e0:	d011      	beq.n	8003a06 <HAL_UART_IRQHandler+0xf6>
 80039e2:	239c      	movs	r3, #156	; 0x9c
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	4013      	ands	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2202      	movs	r2, #2
 80039f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2280      	movs	r2, #128	; 0x80
 80039fa:	589b      	ldr	r3, [r3, r2]
 80039fc:	2204      	movs	r2, #4
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2180      	movs	r1, #128	; 0x80
 8003a04:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a06:	23a4      	movs	r3, #164	; 0xa4
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d011      	beq.n	8003a36 <HAL_UART_IRQHandler+0x126>
 8003a12:	239c      	movs	r3, #156	; 0x9c
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2204      	movs	r2, #4
 8003a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	589b      	ldr	r3, [r3, r2]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2180      	movs	r1, #128	; 0x80
 8003a34:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a36:	23a4      	movs	r3, #164	; 0xa4
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d017      	beq.n	8003a72 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a42:	23a0      	movs	r3, #160	; 0xa0
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d105      	bne.n	8003a5a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a4e:	239c      	movs	r3, #156	; 0x9c
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2201      	movs	r2, #1
 8003a56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a58:	d00b      	beq.n	8003a72 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2208      	movs	r2, #8
 8003a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	589b      	ldr	r3, [r3, r2]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a72:	23a4      	movs	r3, #164	; 0xa4
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x198>
 8003a80:	23a0      	movs	r3, #160	; 0xa0
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	04db      	lsls	r3, r3, #19
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	0112      	lsls	r2, r2, #4
 8003a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2280      	movs	r2, #128	; 0x80
 8003a9c:	589b      	ldr	r3, [r3, r2]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	589b      	ldr	r3, [r3, r2]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d100      	bne.n	8003ab4 <HAL_UART_IRQHandler+0x1a4>
 8003ab2:	e1df      	b.n	8003e74 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ab4:	23a4      	movs	r3, #164	; 0xa4
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2220      	movs	r2, #32
 8003abc:	4013      	ands	r3, r2
 8003abe:	d00e      	beq.n	8003ade <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ac0:	23a0      	movs	r3, #160	; 0xa0
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d008      	beq.n	8003ade <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	0010      	movs	r0, r2
 8003adc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	589b      	ldr	r3, [r3, r2]
 8003ae4:	2194      	movs	r1, #148	; 0x94
 8003ae6:	187a      	adds	r2, r7, r1
 8003ae8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2240      	movs	r2, #64	; 0x40
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d004      	beq.n	8003b02 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2228      	movs	r2, #40	; 0x28
 8003afe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b00:	d047      	beq.n	8003b92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f000 fcf7 	bl	80044f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2240      	movs	r2, #64	; 0x40
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d137      	bne.n	8003b88 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b18:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b20:	2090      	movs	r0, #144	; 0x90
 8003b22:	183a      	adds	r2, r7, r0
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	2301      	movs	r3, #1
 8003b28:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b2c:	f383 8810 	msr	PRIMASK, r3
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2140      	movs	r1, #64	; 0x40
 8003b3e:	438a      	bics	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	183b      	adds	r3, r7, r0
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	4a14      	ldr	r2, [pc, #80]	; (8003bb0 <HAL_UART_IRQHandler+0x2a0>)
 8003b5e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	0018      	movs	r0, r3
 8003b66:	f7ff f839 	bl	8002bdc <HAL_DMA_Abort_IT>
 8003b6a:	1e03      	subs	r3, r0, #0
 8003b6c:	d01a      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	0018      	movs	r0, r3
 8003b7a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e012      	b.n	8003ba4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 f98d 	bl	8003ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b86:	e00d      	b.n	8003ba4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 f988 	bl	8003ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b90:	e008      	b.n	8003ba4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	0018      	movs	r0, r3
 8003b96:	f000 f983 	bl	8003ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003ba2:	e167      	b.n	8003e74 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	46c0      	nop			; (mov r8, r8)
    return;
 8003ba6:	e165      	b.n	8003e74 <HAL_UART_IRQHandler+0x564>
 8003ba8:	0000080f 	.word	0x0000080f
 8003bac:	04000120 	.word	0x04000120
 8003bb0:	080045bd 	.word	0x080045bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d000      	beq.n	8003bbe <HAL_UART_IRQHandler+0x2ae>
 8003bbc:	e131      	b.n	8003e22 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003bbe:	23a4      	movs	r3, #164	; 0xa4
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d100      	bne.n	8003bcc <HAL_UART_IRQHandler+0x2bc>
 8003bca:	e12a      	b.n	8003e22 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003bcc:	23a0      	movs	r3, #160	; 0xa0
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d100      	bne.n	8003bda <HAL_UART_IRQHandler+0x2ca>
 8003bd8:	e123      	b.n	8003e22 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2210      	movs	r2, #16
 8003be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2240      	movs	r2, #64	; 0x40
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d000      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x2e2>
 8003bf0:	e09b      	b.n	8003d2a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	217e      	movs	r1, #126	; 0x7e
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d100      	bne.n	8003c0a <HAL_UART_IRQHandler+0x2fa>
 8003c08:	e136      	b.n	8003e78 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2258      	movs	r2, #88	; 0x58
 8003c0e:	5a9b      	ldrh	r3, [r3, r2]
 8003c10:	187a      	adds	r2, r7, r1
 8003c12:	8812      	ldrh	r2, [r2, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d300      	bcc.n	8003c1a <HAL_UART_IRQHandler+0x30a>
 8003c18:	e12e      	b.n	8003e78 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	187a      	adds	r2, r7, r1
 8003c1e:	215a      	movs	r1, #90	; 0x5a
 8003c20:	8812      	ldrh	r2, [r2, #0]
 8003c22:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d06e      	beq.n	8003d0c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c36:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c38:	2301      	movs	r3, #1
 8003c3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	498e      	ldr	r1, [pc, #568]	; (8003e88 <HAL_UART_IRQHandler+0x578>)
 8003c50:	400a      	ands	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	f383 8810 	msr	PRIMASK, r3
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c60:	f3ef 8310 	mrs	r3, PRIMASK
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c68:	677b      	str	r3, [r7, #116]	; 0x74
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2101      	movs	r1, #1
 8003c82:	438a      	bics	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c88:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c92:	f3ef 8310 	mrs	r3, PRIMASK
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca2:	f383 8810 	msr	PRIMASK, r3
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2140      	movs	r1, #64	; 0x40
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cbe:	f383 8810 	msr	PRIMASK, r3
}
 8003cc2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cda:	2301      	movs	r3, #1
 8003cdc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ce0:	f383 8810 	msr	PRIMASK, r3
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2110      	movs	r1, #16
 8003cf2:	438a      	bics	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cfc:	f383 8810 	msr	PRIMASK, r3
}
 8003d00:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7fe ff30 	bl	8002b6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2258      	movs	r2, #88	; 0x58
 8003d10:	5a9a      	ldrh	r2, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	215a      	movs	r1, #90	; 0x5a
 8003d16:	5a5b      	ldrh	r3, [r3, r1]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0011      	movs	r1, r2
 8003d22:	0018      	movs	r0, r3
 8003d24:	f000 f8c4 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d28:	e0a6      	b.n	8003e78 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2258      	movs	r2, #88	; 0x58
 8003d2e:	5a99      	ldrh	r1, [r3, r2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	225a      	movs	r2, #90	; 0x5a
 8003d34:	5a9b      	ldrh	r3, [r3, r2]
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	208e      	movs	r0, #142	; 0x8e
 8003d3a:	183b      	adds	r3, r7, r0
 8003d3c:	1a8a      	subs	r2, r1, r2
 8003d3e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	225a      	movs	r2, #90	; 0x5a
 8003d44:	5a9b      	ldrh	r3, [r3, r2]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d100      	bne.n	8003d4e <HAL_UART_IRQHandler+0x43e>
 8003d4c:	e096      	b.n	8003e7c <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8003d4e:	183b      	adds	r3, r7, r0
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d100      	bne.n	8003d58 <HAL_UART_IRQHandler+0x448>
 8003d56:	e091      	b.n	8003e7c <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d58:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d60:	2488      	movs	r4, #136	; 0x88
 8003d62:	193a      	adds	r2, r7, r4
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	2301      	movs	r3, #1
 8003d68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f383 8810 	msr	PRIMASK, r3
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4943      	ldr	r1, [pc, #268]	; (8003e8c <HAL_UART_IRQHandler+0x57c>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f383 8810 	msr	PRIMASK, r3
}
 8003d8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d90:	f3ef 8310 	mrs	r3, PRIMASK
 8003d94:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d96:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d98:	2484      	movs	r4, #132	; 0x84
 8003d9a:	193a      	adds	r2, r7, r4
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f383 8810 	msr	PRIMASK, r3
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2101      	movs	r1, #1
 8003db6:	438a      	bics	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	193b      	adds	r3, r7, r4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	f383 8810 	msr	PRIMASK, r3
}
 8003dc6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dda:	f3ef 8310 	mrs	r3, PRIMASK
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de2:	2480      	movs	r4, #128	; 0x80
 8003de4:	193a      	adds	r2, r7, r4
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	2301      	movs	r3, #1
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	f383 8810 	msr	PRIMASK, r3
}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2110      	movs	r1, #16
 8003e00:	438a      	bics	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	193b      	adds	r3, r7, r4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	f383 8810 	msr	PRIMASK, r3
}
 8003e10:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e12:	183b      	adds	r3, r7, r0
 8003e14:	881a      	ldrh	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0011      	movs	r1, r2
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 f848 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e20:	e02c      	b.n	8003e7c <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e22:	23a4      	movs	r3, #164	; 0xa4
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2280      	movs	r2, #128	; 0x80
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d00f      	beq.n	8003e4e <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e2e:	23a0      	movs	r3, #160	; 0xa0
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	4013      	ands	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01e      	beq.n	8003e80 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	0010      	movs	r0, r2
 8003e4a:	4798      	blx	r3
    }
    return;
 8003e4c:	e018      	b.n	8003e80 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e4e:	23a4      	movs	r3, #164	; 0xa4
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2240      	movs	r2, #64	; 0x40
 8003e56:	4013      	ands	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_UART_IRQHandler+0x572>
 8003e5a:	23a0      	movs	r3, #160	; 0xa0
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2240      	movs	r2, #64	; 0x40
 8003e62:	4013      	ands	r3, r2
 8003e64:	d00d      	beq.n	8003e82 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f000 fbbe 	bl	80045ea <UART_EndTransmit_IT>
    return;
 8003e6e:	e008      	b.n	8003e82 <HAL_UART_IRQHandler+0x572>
      return;
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	e006      	b.n	8003e82 <HAL_UART_IRQHandler+0x572>
    return;
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	e004      	b.n	8003e82 <HAL_UART_IRQHandler+0x572>
      return;
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	e002      	b.n	8003e82 <HAL_UART_IRQHandler+0x572>
      return;
 8003e7c:	46c0      	nop			; (mov r8, r8)
 8003e7e:	e000      	b.n	8003e82 <HAL_UART_IRQHandler+0x572>
    return;
 8003e80:	46c0      	nop			; (mov r8, r8)
  }

}
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b02b      	add	sp, #172	; 0xac
 8003e86:	bd90      	pop	{r4, r7, pc}
 8003e88:	fffffeff 	.word	0xfffffeff
 8003e8c:	fffffedf 	.word	0xfffffedf

08003e90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b002      	add	sp, #8
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	000a      	movs	r2, r1
 8003eba:	1cbb      	adds	r3, r7, #2
 8003ebc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b002      	add	sp, #8
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ed0:	231e      	movs	r3, #30
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a97      	ldr	r2, [pc, #604]	; (8004154 <UART_SetConfig+0x28c>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	0019      	movs	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a92      	ldr	r2, [pc, #584]	; (8004158 <UART_SetConfig+0x290>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	0019      	movs	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a89      	ldr	r2, [pc, #548]	; (800415c <UART_SetConfig+0x294>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	0019      	movs	r1, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a85      	ldr	r2, [pc, #532]	; (8004160 <UART_SetConfig+0x298>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d127      	bne.n	8003f9e <UART_SetConfig+0xd6>
 8003f4e:	4b85      	ldr	r3, [pc, #532]	; (8004164 <UART_SetConfig+0x29c>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	2203      	movs	r2, #3
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d00d      	beq.n	8003f76 <UART_SetConfig+0xae>
 8003f5a:	d81b      	bhi.n	8003f94 <UART_SetConfig+0xcc>
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d014      	beq.n	8003f8a <UART_SetConfig+0xc2>
 8003f60:	d818      	bhi.n	8003f94 <UART_SetConfig+0xcc>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <UART_SetConfig+0xa4>
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d00a      	beq.n	8003f80 <UART_SetConfig+0xb8>
 8003f6a:	e013      	b.n	8003f94 <UART_SetConfig+0xcc>
 8003f6c:	231f      	movs	r3, #31
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	e035      	b.n	8003fe2 <UART_SetConfig+0x11a>
 8003f76:	231f      	movs	r3, #31
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e030      	b.n	8003fe2 <UART_SetConfig+0x11a>
 8003f80:	231f      	movs	r3, #31
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	2204      	movs	r2, #4
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	e02b      	b.n	8003fe2 <UART_SetConfig+0x11a>
 8003f8a:	231f      	movs	r3, #31
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	2208      	movs	r2, #8
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e026      	b.n	8003fe2 <UART_SetConfig+0x11a>
 8003f94:	231f      	movs	r3, #31
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	2210      	movs	r2, #16
 8003f9a:	701a      	strb	r2, [r3, #0]
 8003f9c:	e021      	b.n	8003fe2 <UART_SetConfig+0x11a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a71      	ldr	r2, [pc, #452]	; (8004168 <UART_SetConfig+0x2a0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d104      	bne.n	8003fb2 <UART_SetConfig+0xea>
 8003fa8:	231f      	movs	r3, #31
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e017      	b.n	8003fe2 <UART_SetConfig+0x11a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6d      	ldr	r2, [pc, #436]	; (800416c <UART_SetConfig+0x2a4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d104      	bne.n	8003fc6 <UART_SetConfig+0xfe>
 8003fbc:	231f      	movs	r3, #31
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	e00d      	b.n	8003fe2 <UART_SetConfig+0x11a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a69      	ldr	r2, [pc, #420]	; (8004170 <UART_SetConfig+0x2a8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d104      	bne.n	8003fda <UART_SetConfig+0x112>
 8003fd0:	231f      	movs	r3, #31
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	e003      	b.n	8003fe2 <UART_SetConfig+0x11a>
 8003fda:	231f      	movs	r3, #31
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	2210      	movs	r2, #16
 8003fe0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d15d      	bne.n	80040aa <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8003fee:	231f      	movs	r3, #31
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d015      	beq.n	8004024 <UART_SetConfig+0x15c>
 8003ff8:	dc18      	bgt.n	800402c <UART_SetConfig+0x164>
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d00d      	beq.n	800401a <UART_SetConfig+0x152>
 8003ffe:	dc15      	bgt.n	800402c <UART_SetConfig+0x164>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <UART_SetConfig+0x142>
 8004004:	2b02      	cmp	r3, #2
 8004006:	d005      	beq.n	8004014 <UART_SetConfig+0x14c>
 8004008:	e010      	b.n	800402c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800400a:	f7ff fc17 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 800400e:	0003      	movs	r3, r0
 8004010:	61bb      	str	r3, [r7, #24]
        break;
 8004012:	e012      	b.n	800403a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004014:	4b57      	ldr	r3, [pc, #348]	; (8004174 <UART_SetConfig+0x2ac>)
 8004016:	61bb      	str	r3, [r7, #24]
        break;
 8004018:	e00f      	b.n	800403a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401a:	f7ff fb9f 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800401e:	0003      	movs	r3, r0
 8004020:	61bb      	str	r3, [r7, #24]
        break;
 8004022:	e00a      	b.n	800403a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	61bb      	str	r3, [r7, #24]
        break;
 800402a:	e006      	b.n	800403a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004030:	231e      	movs	r3, #30
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	2201      	movs	r2, #1
 8004036:	701a      	strb	r2, [r3, #0]
        break;
 8004038:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d100      	bne.n	8004042 <UART_SetConfig+0x17a>
 8004040:	e07b      	b.n	800413a <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	005a      	lsls	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	18d2      	adds	r2, r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	0019      	movs	r1, r3
 8004054:	0010      	movs	r0, r2
 8004056:	f7fc f87d 	bl	8000154 <__udivsi3>
 800405a:	0003      	movs	r3, r0
 800405c:	b29b      	uxth	r3, r3
 800405e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	d91c      	bls.n	80040a0 <UART_SetConfig+0x1d8>
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	025b      	lsls	r3, r3, #9
 800406c:	429a      	cmp	r2, r3
 800406e:	d217      	bcs.n	80040a0 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	b29a      	uxth	r2, r3
 8004074:	200e      	movs	r0, #14
 8004076:	183b      	adds	r3, r7, r0
 8004078:	210f      	movs	r1, #15
 800407a:	438a      	bics	r2, r1
 800407c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	b29b      	uxth	r3, r3
 8004084:	2207      	movs	r2, #7
 8004086:	4013      	ands	r3, r2
 8004088:	b299      	uxth	r1, r3
 800408a:	183b      	adds	r3, r7, r0
 800408c:	183a      	adds	r2, r7, r0
 800408e:	8812      	ldrh	r2, [r2, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	183a      	adds	r2, r7, r0
 800409a:	8812      	ldrh	r2, [r2, #0]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	e04c      	b.n	800413a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80040a0:	231e      	movs	r3, #30
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	2201      	movs	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	e047      	b.n	800413a <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040aa:	231f      	movs	r3, #31
 80040ac:	18fb      	adds	r3, r7, r3
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d015      	beq.n	80040e0 <UART_SetConfig+0x218>
 80040b4:	dc18      	bgt.n	80040e8 <UART_SetConfig+0x220>
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d00d      	beq.n	80040d6 <UART_SetConfig+0x20e>
 80040ba:	dc15      	bgt.n	80040e8 <UART_SetConfig+0x220>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <UART_SetConfig+0x1fe>
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d005      	beq.n	80040d0 <UART_SetConfig+0x208>
 80040c4:	e010      	b.n	80040e8 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c6:	f7ff fbb9 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 80040ca:	0003      	movs	r3, r0
 80040cc:	61bb      	str	r3, [r7, #24]
        break;
 80040ce:	e012      	b.n	80040f6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d0:	4b28      	ldr	r3, [pc, #160]	; (8004174 <UART_SetConfig+0x2ac>)
 80040d2:	61bb      	str	r3, [r7, #24]
        break;
 80040d4:	e00f      	b.n	80040f6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d6:	f7ff fb41 	bl	800375c <HAL_RCC_GetSysClockFreq>
 80040da:	0003      	movs	r3, r0
 80040dc:	61bb      	str	r3, [r7, #24]
        break;
 80040de:	e00a      	b.n	80040f6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	61bb      	str	r3, [r7, #24]
        break;
 80040e6:	e006      	b.n	80040f6 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ec:	231e      	movs	r3, #30
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
        break;
 80040f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01e      	beq.n	800413a <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	085a      	lsrs	r2, r3, #1
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	18d2      	adds	r2, r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	0019      	movs	r1, r3
 800410c:	0010      	movs	r0, r2
 800410e:	f7fc f821 	bl	8000154 <__udivsi3>
 8004112:	0003      	movs	r3, r0
 8004114:	b29b      	uxth	r3, r3
 8004116:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b0f      	cmp	r3, #15
 800411c:	d909      	bls.n	8004132 <UART_SetConfig+0x26a>
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	025b      	lsls	r3, r3, #9
 8004124:	429a      	cmp	r2, r3
 8004126:	d204      	bcs.n	8004132 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	60da      	str	r2, [r3, #12]
 8004130:	e003      	b.n	800413a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8004132:	231e      	movs	r3, #30
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004146:	231e      	movs	r3, #30
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	781b      	ldrb	r3, [r3, #0]
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b008      	add	sp, #32
 8004152:	bd80      	pop	{r7, pc}
 8004154:	efff69f3 	.word	0xefff69f3
 8004158:	ffffcfff 	.word	0xffffcfff
 800415c:	fffff4ff 	.word	0xfffff4ff
 8004160:	40013800 	.word	0x40013800
 8004164:	40021000 	.word	0x40021000
 8004168:	40004400 	.word	0x40004400
 800416c:	40004800 	.word	0x40004800
 8004170:	40004c00 	.word	0x40004c00
 8004174:	007a1200 	.word	0x007a1200

08004178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	2201      	movs	r2, #1
 8004186:	4013      	ands	r3, r2
 8004188:	d00b      	beq.n	80041a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4a4a      	ldr	r2, [pc, #296]	; (80042bc <UART_AdvFeatureConfig+0x144>)
 8004192:	4013      	ands	r3, r2
 8004194:	0019      	movs	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2202      	movs	r2, #2
 80041a8:	4013      	ands	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4a43      	ldr	r2, [pc, #268]	; (80042c0 <UART_AdvFeatureConfig+0x148>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	0019      	movs	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	2204      	movs	r2, #4
 80041ca:	4013      	ands	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <UART_AdvFeatureConfig+0x14c>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	0019      	movs	r1, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2208      	movs	r2, #8
 80041ec:	4013      	ands	r3, r2
 80041ee:	d00b      	beq.n	8004208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4a34      	ldr	r2, [pc, #208]	; (80042c8 <UART_AdvFeatureConfig+0x150>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	0019      	movs	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	2210      	movs	r2, #16
 800420e:	4013      	ands	r3, r2
 8004210:	d00b      	beq.n	800422a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <UART_AdvFeatureConfig+0x154>)
 800421a:	4013      	ands	r3, r2
 800421c:	0019      	movs	r1, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	2220      	movs	r2, #32
 8004230:	4013      	ands	r3, r2
 8004232:	d00b      	beq.n	800424c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	4a25      	ldr	r2, [pc, #148]	; (80042d0 <UART_AdvFeatureConfig+0x158>)
 800423c:	4013      	ands	r3, r2
 800423e:	0019      	movs	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2240      	movs	r2, #64	; 0x40
 8004252:	4013      	ands	r3, r2
 8004254:	d01d      	beq.n	8004292 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <UART_AdvFeatureConfig+0x15c>)
 800425e:	4013      	ands	r3, r2
 8004260:	0019      	movs	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	035b      	lsls	r3, r3, #13
 8004276:	429a      	cmp	r2, r3
 8004278:	d10b      	bne.n	8004292 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <UART_AdvFeatureConfig+0x160>)
 8004282:	4013      	ands	r3, r2
 8004284:	0019      	movs	r1, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	2280      	movs	r2, #128	; 0x80
 8004298:	4013      	ands	r3, r2
 800429a:	d00b      	beq.n	80042b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <UART_AdvFeatureConfig+0x164>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	0019      	movs	r1, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
  }
}
 80042b4:	46c0      	nop			; (mov r8, r8)
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b002      	add	sp, #8
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	fffdffff 	.word	0xfffdffff
 80042c0:	fffeffff 	.word	0xfffeffff
 80042c4:	fffbffff 	.word	0xfffbffff
 80042c8:	ffff7fff 	.word	0xffff7fff
 80042cc:	ffffefff 	.word	0xffffefff
 80042d0:	ffffdfff 	.word	0xffffdfff
 80042d4:	ffefffff 	.word	0xffefffff
 80042d8:	ff9fffff 	.word	0xff9fffff
 80042dc:	fff7ffff 	.word	0xfff7ffff

080042e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2280      	movs	r2, #128	; 0x80
 80042ec:	2100      	movs	r1, #0
 80042ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042f0:	f7fe fb30 	bl	8002954 <HAL_GetTick>
 80042f4:	0003      	movs	r3, r0
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2208      	movs	r2, #8
 8004300:	4013      	ands	r3, r2
 8004302:	2b08      	cmp	r3, #8
 8004304:	d10c      	bne.n	8004320 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2280      	movs	r2, #128	; 0x80
 800430a:	0391      	lsls	r1, r2, #14
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4a17      	ldr	r2, [pc, #92]	; (800436c <UART_CheckIdleState+0x8c>)
 8004310:	9200      	str	r2, [sp, #0]
 8004312:	2200      	movs	r2, #0
 8004314:	f000 f82c 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8004318:	1e03      	subs	r3, r0, #0
 800431a:	d001      	beq.n	8004320 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e021      	b.n	8004364 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2204      	movs	r2, #4
 8004328:	4013      	ands	r3, r2
 800432a:	2b04      	cmp	r3, #4
 800432c:	d10c      	bne.n	8004348 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2280      	movs	r2, #128	; 0x80
 8004332:	03d1      	lsls	r1, r2, #15
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4a0d      	ldr	r2, [pc, #52]	; (800436c <UART_CheckIdleState+0x8c>)
 8004338:	9200      	str	r2, [sp, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	f000 f818 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e00d      	b.n	8004364 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2274      	movs	r2, #116	; 0x74
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b004      	add	sp, #16
 800436a:	bd80      	pop	{r7, pc}
 800436c:	01ffffff 	.word	0x01ffffff

08004370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b094      	sub	sp, #80	; 0x50
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	1dfb      	adds	r3, r7, #7
 800437e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	e0a3      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004384:	3301      	adds	r3, #1
 8004386:	d100      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004388:	e09f      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7fe fae3 	bl	8002954 <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800439a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800439c:	2b00      	cmp	r3, #0
 800439e:	d13d      	bne.n	800441c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a0:	f3ef 8310 	mrs	r3, PRIMASK
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043a8:	647b      	str	r3, [r7, #68]	; 0x44
 80043aa:	2301      	movs	r3, #1
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	f383 8810 	msr	PRIMASK, r3
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	494c      	ldr	r1, [pc, #304]	; (80044f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80043c2:	400a      	ands	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	f383 8810 	msr	PRIMASK, r3
}
 80043d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d2:	f3ef 8310 	mrs	r3, PRIMASK
 80043d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80043d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043da:	643b      	str	r3, [r7, #64]	; 0x40
 80043dc:	2301      	movs	r3, #1
 80043de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	f383 8810 	msr	PRIMASK, r3
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2101      	movs	r1, #1
 80043f4:	438a      	bics	r2, r1
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fe:	f383 8810 	msr	PRIMASK, r3
}
 8004402:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2274      	movs	r2, #116	; 0x74
 8004414:	2100      	movs	r1, #0
 8004416:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e067      	b.n	80044ec <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2204      	movs	r2, #4
 8004424:	4013      	ands	r3, r2
 8004426:	d050      	beq.n	80044ca <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	401a      	ands	r2, r3
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	429a      	cmp	r2, r3
 800443a:	d146      	bne.n	80044ca <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2280      	movs	r2, #128	; 0x80
 8004442:	0112      	lsls	r2, r2, #4
 8004444:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004446:	f3ef 8310 	mrs	r3, PRIMASK
 800444a:	613b      	str	r3, [r7, #16]
  return(result);
 800444c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800444e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004450:	2301      	movs	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f383 8810 	msr	PRIMASK, r3
}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4923      	ldr	r1, [pc, #140]	; (80044f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004468:	400a      	ands	r2, r1
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f383 8810 	msr	PRIMASK, r3
}
 8004476:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004478:	f3ef 8310 	mrs	r3, PRIMASK
 800447c:	61fb      	str	r3, [r7, #28]
  return(result);
 800447e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004480:	64bb      	str	r3, [r7, #72]	; 0x48
 8004482:	2301      	movs	r3, #1
 8004484:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f383 8810 	msr	PRIMASK, r3
}
 800448c:	46c0      	nop			; (mov r8, r8)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	438a      	bics	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
 800449e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	f383 8810 	msr	PRIMASK, r3
}
 80044a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2280      	movs	r2, #128	; 0x80
 80044ba:	2120      	movs	r1, #32
 80044bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2274      	movs	r2, #116	; 0x74
 80044c2:	2100      	movs	r1, #0
 80044c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e010      	b.n	80044ec <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	425a      	negs	r2, r3
 80044da:	4153      	adcs	r3, r2
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	001a      	movs	r2, r3
 80044e0:	1dfb      	adds	r3, r7, #7
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d100      	bne.n	80044ea <UART_WaitOnFlagUntilTimeout+0x17a>
 80044e8:	e74b      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b014      	add	sp, #80	; 0x50
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	fffffe5f 	.word	0xfffffe5f

080044f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08e      	sub	sp, #56	; 0x38
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004500:	f3ef 8310 	mrs	r3, PRIMASK
 8004504:	617b      	str	r3, [r7, #20]
  return(result);
 8004506:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
 800450a:	2301      	movs	r3, #1
 800450c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f383 8810 	msr	PRIMASK, r3
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4925      	ldr	r1, [pc, #148]	; (80045b8 <UART_EndRxTransfer+0xc0>)
 8004522:	400a      	ands	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f383 8810 	msr	PRIMASK, r3
}
 8004530:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004532:	f3ef 8310 	mrs	r3, PRIMASK
 8004536:	623b      	str	r3, [r7, #32]
  return(result);
 8004538:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
 800453c:	2301      	movs	r3, #1
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	438a      	bics	r2, r1
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	f383 8810 	msr	PRIMASK, r3
}
 8004562:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	2b01      	cmp	r3, #1
 800456a:	d118      	bne.n	800459e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456c:	f3ef 8310 	mrs	r3, PRIMASK
 8004570:	60bb      	str	r3, [r7, #8]
  return(result);
 8004572:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004576:	2301      	movs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f383 8810 	msr	PRIMASK, r3
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2110      	movs	r1, #16
 800458e:	438a      	bics	r2, r1
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f383 8810 	msr	PRIMASK, r3
}
 800459c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	665a      	str	r2, [r3, #100]	; 0x64
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b00e      	add	sp, #56	; 0x38
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	fffffedf 	.word	0xfffffedf

080045bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	225a      	movs	r2, #90	; 0x5a
 80045ce:	2100      	movs	r1, #0
 80045d0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2252      	movs	r2, #82	; 0x52
 80045d6:	2100      	movs	r1, #0
 80045d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	0018      	movs	r0, r3
 80045de:	f7ff fc5f 	bl	8003ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b004      	add	sp, #16
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b086      	sub	sp, #24
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80045f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	2301      	movs	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2140      	movs	r1, #64	; 0x40
 8004614:	438a      	bics	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f383 8810 	msr	PRIMASK, r3
}
 8004622:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	0018      	movs	r0, r3
 8004634:	f7ff fc2c 	bl	8003e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	b006      	add	sp, #24
 800463e:	bd80      	pop	{r7, pc}

08004640 <TIM6_IRQHandler>:
	return ticks;
}
void ticks_reset() {
	ticks = 0;
}
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
	ticks++;
 8004644:	4b07      	ldr	r3, [pc, #28]	; (8004664 <TIM6_IRQHandler+0x24>)
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <TIM6_IRQHandler+0x24>)
 800464e:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <TIM6_IRQHandler+0x28>)
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <TIM6_IRQHandler+0x28>)
 8004656:	2101      	movs	r1, #1
 8004658:	438a      	bics	r2, r1
 800465a:	611a      	str	r2, [r3, #16]
}
 800465c:	46c0      	nop			; (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	20000318 	.word	0x20000318
 8004668:	40001000 	.word	0x40001000

0800466c <USART_WRITE>:
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
	usart->BRR |= baud;
}

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	001a      	movs	r2, r3
 800467a:	1cbb      	adds	r3, r7, #2
 800467c:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 800467e:	2314      	movs	r3, #20
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	1cba      	adds	r2, r7, #2
 8004684:	8812      	ldrh	r2, [r2, #0]
 8004686:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8004688:	2317      	movs	r3, #23
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	e01c      	b.n	80046cc <USART_WRITE+0x60>
		if (len == 1) {
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d104      	bne.n	80046a2 <USART_WRITE+0x36>
			usart->TDR = ch;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
 80046a0:	e008      	b.n	80046b4 <USART_WRITE+0x48>
		} else {
			usart->TDR = ch[i];
 80046a2:	2317      	movs	r3, #23
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	18d3      	adds	r3, r2, r3
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		while (!(usart->ISR & USART_ISR_TXE)){
 80046b4:	46c0      	nop			; (mov r8, r8)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	2280      	movs	r2, #128	; 0x80
 80046bc:	4013      	ands	r3, r2
 80046be:	d0fa      	beq.n	80046b6 <USART_WRITE+0x4a>
	for (uint8_t i = 0; i < len; i++) {
 80046c0:	2117      	movs	r1, #23
 80046c2:	187b      	adds	r3, r7, r1
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	187b      	adds	r3, r7, r1
 80046c8:	3201      	adds	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	2317      	movs	r3, #23
 80046ce:	18fb      	adds	r3, r7, r3
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d8dc      	bhi.n	8004692 <USART_WRITE+0x26>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b006      	add	sp, #24
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 80046e4:	b40f      	push	{r0, r1, r2, r3}
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80046ec:	2314      	movs	r3, #20
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	2180      	movs	r1, #128	; 0x80
 80046f8:	0049      	lsls	r1, r1, #1
 80046fa:	480c      	ldr	r0, [pc, #48]	; (800472c <print+0x48>)
 80046fc:	f001 fc72 	bl	8005fe4 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <print+0x48>)
 8004702:	0018      	movs	r0, r3
 8004704:	f7fb fd0a 	bl	800011c <strlen>
 8004708:	0002      	movs	r2, r0
 800470a:	1dbb      	adds	r3, r7, #6
 800470c:	801a      	strh	r2, [r3, #0]
	USART_WRITE(UART_TYPE, buffer, len, 1000);
 800470e:	1dbb      	adds	r3, r7, #6
 8004710:	881a      	ldrh	r2, [r3, #0]
 8004712:	23fa      	movs	r3, #250	; 0xfa
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4905      	ldr	r1, [pc, #20]	; (800472c <print+0x48>)
 8004718:	4805      	ldr	r0, [pc, #20]	; (8004730 <print+0x4c>)
 800471a:	f7ff ffa7 	bl	800466c <USART_WRITE>

}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b002      	add	sp, #8
 8004724:	bc80      	pop	{r7}
 8004726:	bc08      	pop	{r3}
 8004728:	b004      	add	sp, #16
 800472a:	4718      	bx	r3
 800472c:	2000031c 	.word	0x2000031c
 8004730:	40004400 	.word	0x40004400

08004734 <ESP_Init>:
		"<p>LED1 Status: OFF</p><a class=\"button button-on\" href=\"/ledon\">ON</a>";
char *Terminate = "</body></html>";

/*****************************************************************************************************************************************/

void ESP_Init(char *SSID, char *PASSWD) {
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b099      	sub	sp, #100	; 0x64
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800473e:	f000 faf5 	bl	8004d2c <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 8004742:	4a7c      	ldr	r2, [pc, #496]	; (8004934 <ESP_Init+0x200>)
 8004744:	4b7c      	ldr	r3, [pc, #496]	; (8004938 <ESP_Init+0x204>)
 8004746:	0011      	movs	r1, r2
 8004748:	0018      	movs	r0, r3
 800474a:	f000 fd8d 	bl	8005268 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 800474e:	4a7b      	ldr	r2, [pc, #492]	; (800493c <ESP_Init+0x208>)
 8004750:	4b7b      	ldr	r3, [pc, #492]	; (8004940 <ESP_Init+0x20c>)
 8004752:	0011      	movs	r1, r2
 8004754:	0018      	movs	r0, r3
 8004756:	f000 fd87 	bl	8005268 <Uart_sendstring>
	for (int i = 0; i < 5; i++) {
 800475a:	2300      	movs	r3, #0
 800475c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800475e:	e00d      	b.n	800477c <ESP_Init+0x48>
		Uart_sendstring(".", pc_uart);
 8004760:	4a76      	ldr	r2, [pc, #472]	; (800493c <ESP_Init+0x208>)
 8004762:	4b78      	ldr	r3, [pc, #480]	; (8004944 <ESP_Init+0x210>)
 8004764:	0011      	movs	r1, r2
 8004766:	0018      	movs	r0, r3
 8004768:	f000 fd7e 	bl	8005268 <Uart_sendstring>
		HAL_Delay(1000);
 800476c:	23fa      	movs	r3, #250	; 0xfa
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	0018      	movs	r0, r3
 8004772:	f7fe f8f9 	bl	8002968 <HAL_Delay>
	for (int i = 0; i < 5; i++) {
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	3301      	adds	r3, #1
 800477a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800477c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477e:	2b04      	cmp	r3, #4
 8004780:	ddee      	ble.n	8004760 <ESP_Init+0x2c>
	}

	/********* AT **********/
	Uart_flush(wifi_uart);
 8004782:	4b6c      	ldr	r3, [pc, #432]	; (8004934 <ESP_Init+0x200>)
 8004784:	0018      	movs	r0, r3
 8004786:	f000 fb93 	bl	8004eb0 <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 800478a:	4a6a      	ldr	r2, [pc, #424]	; (8004934 <ESP_Init+0x200>)
 800478c:	4b6e      	ldr	r3, [pc, #440]	; (8004948 <ESP_Init+0x214>)
 800478e:	0011      	movs	r1, r2
 8004790:	0018      	movs	r0, r3
 8004792:	f000 fd69 	bl	8005268 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	4a66      	ldr	r2, [pc, #408]	; (8004934 <ESP_Init+0x200>)
 800479a:	4b6c      	ldr	r3, [pc, #432]	; (800494c <ESP_Init+0x218>)
 800479c:	0011      	movs	r1, r2
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 fe00 	bl	80053a4 <Wait_for>
 80047a4:	1e03      	subs	r3, r0, #0
 80047a6:	d0f7      	beq.n	8004798 <ESP_Init+0x64>
		;
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 80047a8:	4a64      	ldr	r2, [pc, #400]	; (800493c <ESP_Init+0x208>)
 80047aa:	4b69      	ldr	r3, [pc, #420]	; (8004950 <ESP_Init+0x21c>)
 80047ac:	0011      	movs	r1, r2
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 fd5a 	bl	8005268 <Uart_sendstring>

	/********* AT+CWMODE=1 **********/
	Uart_flush(wifi_uart);
 80047b4:	4b5f      	ldr	r3, [pc, #380]	; (8004934 <ESP_Init+0x200>)
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 fb7a 	bl	8004eb0 <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 80047bc:	4a5d      	ldr	r2, [pc, #372]	; (8004934 <ESP_Init+0x200>)
 80047be:	4b65      	ldr	r3, [pc, #404]	; (8004954 <ESP_Init+0x220>)
 80047c0:	0011      	movs	r1, r2
 80047c2:	0018      	movs	r0, r3
 80047c4:	f000 fd50 	bl	8005268 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80047c8:	46c0      	nop			; (mov r8, r8)
 80047ca:	4a5a      	ldr	r2, [pc, #360]	; (8004934 <ESP_Init+0x200>)
 80047cc:	4b5f      	ldr	r3, [pc, #380]	; (800494c <ESP_Init+0x218>)
 80047ce:	0011      	movs	r1, r2
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 fde7 	bl	80053a4 <Wait_for>
 80047d6:	1e03      	subs	r3, r0, #0
 80047d8:	d0f7      	beq.n	80047ca <ESP_Init+0x96>
		;
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 80047da:	4a58      	ldr	r2, [pc, #352]	; (800493c <ESP_Init+0x208>)
 80047dc:	4b5e      	ldr	r3, [pc, #376]	; (8004958 <ESP_Init+0x224>)
 80047de:	0011      	movs	r1, r2
 80047e0:	0018      	movs	r0, r3
 80047e2:	f000 fd41 	bl	8005268 <Uart_sendstring>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush(wifi_uart);
 80047e6:	4b53      	ldr	r3, [pc, #332]	; (8004934 <ESP_Init+0x200>)
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 fb61 	bl	8004eb0 <Uart_flush>
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 80047ee:	4a53      	ldr	r2, [pc, #332]	; (800493c <ESP_Init+0x208>)
 80047f0:	4b5a      	ldr	r3, [pc, #360]	; (800495c <ESP_Init+0x228>)
 80047f2:	0011      	movs	r1, r2
 80047f4:	0018      	movs	r0, r3
 80047f6:	f000 fd37 	bl	8005268 <Uart_sendstring>
	sprintf(data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	4958      	ldr	r1, [pc, #352]	; (8004960 <ESP_Init+0x22c>)
 8004800:	2408      	movs	r4, #8
 8004802:	1938      	adds	r0, r7, r4
 8004804:	f001 fb96 	bl	8005f34 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8004808:	4a4a      	ldr	r2, [pc, #296]	; (8004934 <ESP_Init+0x200>)
 800480a:	193b      	adds	r3, r7, r4
 800480c:	0011      	movs	r1, r2
 800480e:	0018      	movs	r0, r3
 8004810:	f000 fd2a 	bl	8005268 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	4a47      	ldr	r2, [pc, #284]	; (8004934 <ESP_Init+0x200>)
 8004818:	4b4c      	ldr	r3, [pc, #304]	; (800494c <ESP_Init+0x218>)
 800481a:	0011      	movs	r1, r2
 800481c:	0018      	movs	r0, r3
 800481e:	f000 fdc1 	bl	80053a4 <Wait_for>
 8004822:	1e03      	subs	r3, r0, #0
 8004824:	d0f7      	beq.n	8004816 <ESP_Init+0xe2>
		;
	sprintf(data, "Connected to,\"%s\"\n\n", SSID);
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	494e      	ldr	r1, [pc, #312]	; (8004964 <ESP_Init+0x230>)
 800482a:	2408      	movs	r4, #8
 800482c:	193b      	adds	r3, r7, r4
 800482e:	0018      	movs	r0, r3
 8004830:	f001 fb80 	bl	8005f34 <siprintf>
	Uart_sendstring(data, pc_uart);
 8004834:	4a41      	ldr	r2, [pc, #260]	; (800493c <ESP_Init+0x208>)
 8004836:	193b      	adds	r3, r7, r4
 8004838:	0011      	movs	r1, r2
 800483a:	0018      	movs	r0, r3
 800483c:	f000 fd14 	bl	8005268 <Uart_sendstring>

	/********* AT+CIFSR **********/
	Uart_flush(wifi_uart);
 8004840:	4b3c      	ldr	r3, [pc, #240]	; (8004934 <ESP_Init+0x200>)
 8004842:	0018      	movs	r0, r3
 8004844:	f000 fb34 	bl	8004eb0 <Uart_flush>
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 8004848:	4a3a      	ldr	r2, [pc, #232]	; (8004934 <ESP_Init+0x200>)
 800484a:	4b47      	ldr	r3, [pc, #284]	; (8004968 <ESP_Init+0x234>)
 800484c:	0011      	movs	r1, r2
 800484e:	0018      	movs	r0, r3
 8004850:	f000 fd0a 	bl	8005268 <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)))
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	4a37      	ldr	r2, [pc, #220]	; (8004934 <ESP_Init+0x200>)
 8004858:	4b44      	ldr	r3, [pc, #272]	; (800496c <ESP_Init+0x238>)
 800485a:	0011      	movs	r1, r2
 800485c:	0018      	movs	r0, r3
 800485e:	f000 fda1 	bl	80053a4 <Wait_for>
 8004862:	1e03      	subs	r3, r0, #0
 8004864:	d0f7      	beq.n	8004856 <ESP_Init+0x122>
		;
	while (!(Copy_upto("\"", buffer, wifi_uart)))
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	4a32      	ldr	r2, [pc, #200]	; (8004934 <ESP_Init+0x200>)
 800486a:	4941      	ldr	r1, [pc, #260]	; (8004970 <ESP_Init+0x23c>)
 800486c:	4b41      	ldr	r3, [pc, #260]	; (8004974 <ESP_Init+0x240>)
 800486e:	0018      	movs	r0, r3
 8004870:	f000 fd14 	bl	800529c <Copy_upto>
 8004874:	1e03      	subs	r3, r0, #0
 8004876:	d0f7      	beq.n	8004868 <ESP_Init+0x134>
		;
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	4a2e      	ldr	r2, [pc, #184]	; (8004934 <ESP_Init+0x200>)
 800487c:	4b33      	ldr	r3, [pc, #204]	; (800494c <ESP_Init+0x218>)
 800487e:	0011      	movs	r1, r2
 8004880:	0018      	movs	r0, r3
 8004882:	f000 fd8f 	bl	80053a4 <Wait_for>
 8004886:	1e03      	subs	r3, r0, #0
 8004888:	d0f7      	beq.n	800487a <ESP_Init+0x146>
		;
	int len = strlen(buffer);
 800488a:	4b39      	ldr	r3, [pc, #228]	; (8004970 <ESP_Init+0x23c>)
 800488c:	0018      	movs	r0, r3
 800488e:	f7fb fc45 	bl	800011c <strlen>
 8004892:	0003      	movs	r3, r0
 8004894:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len - 1] = '\0';
 8004896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004898:	3b01      	subs	r3, #1
 800489a:	4a35      	ldr	r2, [pc, #212]	; (8004970 <ESP_Init+0x23c>)
 800489c:	2100      	movs	r1, #0
 800489e:	54d1      	strb	r1, [r2, r3]
	sprintf(data, "IP ADDR: %s\n\n", buffer);
 80048a0:	4a33      	ldr	r2, [pc, #204]	; (8004970 <ESP_Init+0x23c>)
 80048a2:	4935      	ldr	r1, [pc, #212]	; (8004978 <ESP_Init+0x244>)
 80048a4:	2408      	movs	r4, #8
 80048a6:	193b      	adds	r3, r7, r4
 80048a8:	0018      	movs	r0, r3
 80048aa:	f001 fb43 	bl	8005f34 <siprintf>
	Uart_sendstring(data, pc_uart);
 80048ae:	4a23      	ldr	r2, [pc, #140]	; (800493c <ESP_Init+0x208>)
 80048b0:	193b      	adds	r3, r7, r4
 80048b2:	0011      	movs	r1, r2
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fcd7 	bl	8005268 <Uart_sendstring>

	/********* AT+CIPMUX **********/
	Uart_flush(wifi_uart);
 80048ba:	4b1e      	ldr	r3, [pc, #120]	; (8004934 <ESP_Init+0x200>)
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 faf7 	bl	8004eb0 <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80048c2:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <ESP_Init+0x200>)
 80048c4:	4b2d      	ldr	r3, [pc, #180]	; (800497c <ESP_Init+0x248>)
 80048c6:	0011      	movs	r1, r2
 80048c8:	0018      	movs	r0, r3
 80048ca:	f000 fccd 	bl	8005268 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	4a18      	ldr	r2, [pc, #96]	; (8004934 <ESP_Init+0x200>)
 80048d2:	4b1e      	ldr	r3, [pc, #120]	; (800494c <ESP_Init+0x218>)
 80048d4:	0011      	movs	r1, r2
 80048d6:	0018      	movs	r0, r3
 80048d8:	f000 fd64 	bl	80053a4 <Wait_for>
 80048dc:	1e03      	subs	r3, r0, #0
 80048de:	d0f7      	beq.n	80048d0 <ESP_Init+0x19c>
		;
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 80048e0:	4a16      	ldr	r2, [pc, #88]	; (800493c <ESP_Init+0x208>)
 80048e2:	4b27      	ldr	r3, [pc, #156]	; (8004980 <ESP_Init+0x24c>)
 80048e4:	0011      	movs	r1, r2
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 fcbe 	bl	8005268 <Uart_sendstring>

	/********* AT+CIPSERVER **********/
	Uart_flush(wifi_uart);
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <ESP_Init+0x200>)
 80048ee:	0018      	movs	r0, r3
 80048f0:	f000 fade 	bl	8004eb0 <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 80048f4:	4a0f      	ldr	r2, [pc, #60]	; (8004934 <ESP_Init+0x200>)
 80048f6:	4b23      	ldr	r3, [pc, #140]	; (8004984 <ESP_Init+0x250>)
 80048f8:	0011      	movs	r1, r2
 80048fa:	0018      	movs	r0, r3
 80048fc:	f000 fcb4 	bl	8005268 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	4a0c      	ldr	r2, [pc, #48]	; (8004934 <ESP_Init+0x200>)
 8004904:	4b11      	ldr	r3, [pc, #68]	; (800494c <ESP_Init+0x218>)
 8004906:	0011      	movs	r1, r2
 8004908:	0018      	movs	r0, r3
 800490a:	f000 fd4b 	bl	80053a4 <Wait_for>
 800490e:	1e03      	subs	r3, r0, #0
 8004910:	d0f7      	beq.n	8004902 <ESP_Init+0x1ce>
		;
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 8004912:	4a0a      	ldr	r2, [pc, #40]	; (800493c <ESP_Init+0x208>)
 8004914:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <ESP_Init+0x254>)
 8004916:	0011      	movs	r1, r2
 8004918:	0018      	movs	r0, r3
 800491a:	f000 fca5 	bl	8005268 <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 800491e:	4a07      	ldr	r2, [pc, #28]	; (800493c <ESP_Init+0x208>)
 8004920:	4b1a      	ldr	r3, [pc, #104]	; (800498c <ESP_Init+0x258>)
 8004922:	0011      	movs	r1, r2
 8004924:	0018      	movs	r0, r3
 8004926:	f000 fc9f 	bl	8005268 <Uart_sendstring>

}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	46bd      	mov	sp, r7
 800492e:	b019      	add	sp, #100	; 0x64
 8004930:	bd90      	pop	{r4, r7, pc}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	2000028c 	.word	0x2000028c
 8004938:	08008a90 	.word	0x08008a90
 800493c:	20000208 	.word	0x20000208
 8004940:	08008a9c 	.word	0x08008a9c
 8004944:	08008aa8 	.word	0x08008aa8
 8004948:	08008aac 	.word	0x08008aac
 800494c:	08008ab4 	.word	0x08008ab4
 8004950:	08008abc 	.word	0x08008abc
 8004954:	08008ac8 	.word	0x08008ac8
 8004958:	08008ad8 	.word	0x08008ad8
 800495c:	08008ae8 	.word	0x08008ae8
 8004960:	08008b0c 	.word	0x08008b0c
 8004964:	08008b24 	.word	0x08008b24
 8004968:	08008b38 	.word	0x08008b38
 800496c:	08008b44 	.word	0x08008b44
 8004970:	2000041c 	.word	0x2000041c
 8004974:	08008b54 	.word	0x08008b54
 8004978:	08008b58 	.word	0x08008b58
 800497c:	08008b68 	.word	0x08008b68
 8004980:	08008b78 	.word	0x08008b78
 8004984:	08008b88 	.word	0x08008b88
 8004988:	08008b9c 	.word	0x08008b9c
 800498c:	08008bb0 	.word	0x08008bb0

08004990 <Server_Send>:

int Server_Send(char *str, int Link_ID) {
 8004990:	b590      	push	{r4, r7, lr}
 8004992:	b099      	sub	sp, #100	; 0x64
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	int len = strlen(str);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	0018      	movs	r0, r3
 800499e:	f7fb fbbd 	bl	800011c <strlen>
 80049a2:	0003      	movs	r3, r0
 80049a4:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf(data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80049a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	491f      	ldr	r1, [pc, #124]	; (8004a28 <Server_Send+0x98>)
 80049ac:	240c      	movs	r4, #12
 80049ae:	1938      	adds	r0, r7, r4
 80049b0:	f001 fac0 	bl	8005f34 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80049b4:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <Server_Send+0x9c>)
 80049b6:	193b      	adds	r3, r7, r4
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 fc54 	bl	8005268 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)))
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	4a1a      	ldr	r2, [pc, #104]	; (8004a2c <Server_Send+0x9c>)
 80049c4:	4b1a      	ldr	r3, [pc, #104]	; (8004a30 <Server_Send+0xa0>)
 80049c6:	0011      	movs	r1, r2
 80049c8:	0018      	movs	r0, r3
 80049ca:	f000 fceb 	bl	80053a4 <Wait_for>
 80049ce:	1e03      	subs	r3, r0, #0
 80049d0:	d0f7      	beq.n	80049c2 <Server_Send+0x32>
		;
	Uart_sendstring(str, wifi_uart);
 80049d2:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <Server_Send+0x9c>)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	0011      	movs	r1, r2
 80049d8:	0018      	movs	r0, r3
 80049da:	f000 fc45 	bl	8005268 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)))
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <Server_Send+0x9c>)
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <Server_Send+0xa4>)
 80049e4:	0011      	movs	r1, r2
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 fcdc 	bl	80053a4 <Wait_for>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d0f7      	beq.n	80049e0 <Server_Send+0x50>
		;
	sprintf(data, "AT+CIPCLOSE=5\r\n");
 80049f0:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <Server_Send+0xa8>)
 80049f2:	240c      	movs	r4, #12
 80049f4:	193b      	adds	r3, r7, r4
 80049f6:	0011      	movs	r1, r2
 80049f8:	0018      	movs	r0, r3
 80049fa:	f001 fa9b 	bl	8005f34 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80049fe:	4a0b      	ldr	r2, [pc, #44]	; (8004a2c <Server_Send+0x9c>)
 8004a00:	193b      	adds	r3, r7, r4
 8004a02:	0011      	movs	r1, r2
 8004a04:	0018      	movs	r0, r3
 8004a06:	f000 fc2f 	bl	8005268 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	4a07      	ldr	r2, [pc, #28]	; (8004a2c <Server_Send+0x9c>)
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <Server_Send+0xac>)
 8004a10:	0011      	movs	r1, r2
 8004a12:	0018      	movs	r0, r3
 8004a14:	f000 fcc6 	bl	80053a4 <Wait_for>
 8004a18:	1e03      	subs	r3, r0, #0
 8004a1a:	d0f7      	beq.n	8004a0c <Server_Send+0x7c>
		;
	return 1;
 8004a1c:	2301      	movs	r3, #1
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b019      	add	sp, #100	; 0x64
 8004a24:	bd90      	pop	{r4, r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	08008bd0 	.word	0x08008bd0
 8004a2c:	2000028c 	.word	0x2000028c
 8004a30:	08008be4 	.word	0x08008be4
 8004a34:	08008be8 	.word	0x08008be8
 8004a38:	08008bf0 	.word	0x08008bf0
 8004a3c:	08008ab4 	.word	0x08008ab4

08004a40 <Server_Handle>:

void Server_Handle(char *str, int Link_ID) {
 8004a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a42:	4c66      	ldr	r4, [pc, #408]	; (8004bdc <Server_Handle+0x19c>)
 8004a44:	44a5      	add	sp, r4
 8004a46:	af04      	add	r7, sp, #16
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
	char datatosend[2000] = { 0 };
 8004a4c:	4b64      	ldr	r3, [pc, #400]	; (8004be0 <Server_Handle+0x1a0>)
 8004a4e:	228b      	movs	r2, #139	; 0x8b
 8004a50:	0112      	lsls	r2, r2, #4
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	19db      	adds	r3, r3, r7
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4a61      	ldr	r2, [pc, #388]	; (8004be4 <Server_Handle+0x1a4>)
 8004a5e:	2100      	movs	r1, #0
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 fdf1 	bl	8005648 <memset>

	float temp = 24.56;
 8004a66:	4b60      	ldr	r3, [pc, #384]	; (8004be8 <Server_Handle+0x1a8>)
 8004a68:	4d60      	ldr	r5, [pc, #384]	; (8004bec <Server_Handle+0x1ac>)
 8004a6a:	197a      	adds	r2, r7, r5
 8004a6c:	6013      	str	r3, [r2, #0]
	int hr = 71;
 8004a6e:	2347      	movs	r3, #71	; 0x47
 8004a70:	4e5f      	ldr	r6, [pc, #380]	; (8004bf0 <Server_Handle+0x1b0>)
 8004a72:	19ba      	adds	r2, r7, r6
 8004a74:	6013      	str	r3, [r2, #0]
	int spo2 = 98;
 8004a76:	2362      	movs	r3, #98	; 0x62
 8004a78:	4a5e      	ldr	r2, [pc, #376]	; (8004bf4 <Server_Handle+0x1b4>)
 8004a7a:	18b8      	adds	r0, r7, r2
 8004a7c:	6003      	str	r3, [r0, #0]
	int ecg = 77;
 8004a7e:	234d      	movs	r3, #77	; 0x4d
 8004a80:	208a      	movs	r0, #138	; 0x8a
 8004a82:	0100      	lsls	r0, r0, #4
 8004a84:	183c      	adds	r4, r7, r0
 8004a86:	6023      	str	r3, [r4, #0]
	char hms[200];

	sprintf(hms, "<p><h2> Temperature is: %0.2f'C</br>Heart Rate is: %d BPM<BR> SpO2 is: %d%<br>ECG Heart Rate is: %d </h2></p>", temp, hr, spo2, ecg);
 8004a88:	197b      	adds	r3, r7, r5
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	f7fd fafc 	bl	8002088 <__aeabi_f2d>
 8004a90:	0002      	movs	r2, r0
 8004a92:	000b      	movs	r3, r1
 8004a94:	4c58      	ldr	r4, [pc, #352]	; (8004bf8 <Server_Handle+0x1b8>)
 8004a96:	2008      	movs	r0, #8
 8004a98:	1838      	adds	r0, r7, r0
 8004a9a:	218a      	movs	r1, #138	; 0x8a
 8004a9c:	0109      	lsls	r1, r1, #4
 8004a9e:	1879      	adds	r1, r7, r1
 8004aa0:	6809      	ldr	r1, [r1, #0]
 8004aa2:	9102      	str	r1, [sp, #8]
 8004aa4:	4953      	ldr	r1, [pc, #332]	; (8004bf4 <Server_Handle+0x1b4>)
 8004aa6:	1879      	adds	r1, r7, r1
 8004aa8:	6809      	ldr	r1, [r1, #0]
 8004aaa:	9101      	str	r1, [sp, #4]
 8004aac:	19b9      	adds	r1, r7, r6
 8004aae:	6809      	ldr	r1, [r1, #0]
 8004ab0:	9100      	str	r1, [sp, #0]
 8004ab2:	0021      	movs	r1, r4
 8004ab4:	f001 fa3e 	bl	8005f34 <siprintf>
	temp += 0.4;
 8004ab8:	197b      	adds	r3, r7, r5
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	f7fd fae4 	bl	8002088 <__aeabi_f2d>
 8004ac0:	4a4e      	ldr	r2, [pc, #312]	; (8004bfc <Server_Handle+0x1bc>)
 8004ac2:	4b4f      	ldr	r3, [pc, #316]	; (8004c00 <Server_Handle+0x1c0>)
 8004ac4:	f7fb fcfa 	bl	80004bc <__aeabi_dadd>
 8004ac8:	0002      	movs	r2, r0
 8004aca:	000b      	movs	r3, r1
 8004acc:	0010      	movs	r0, r2
 8004ace:	0019      	movs	r1, r3
 8004ad0:	f7fd fb22 	bl	8002118 <__aeabi_d2f>
 8004ad4:	1c03      	adds	r3, r0, #0
 8004ad6:	197a      	adds	r2, r7, r5
 8004ad8:	6013      	str	r3, [r2, #0]
	if (!(strcmp(str, "/ledon"))) {
 8004ada:	4a4a      	ldr	r2, [pc, #296]	; (8004c04 <Server_Handle+0x1c4>)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	0011      	movs	r1, r2
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7fb fb11 	bl	8000108 <strcmp>
 8004ae6:	1e03      	subs	r3, r0, #0
 8004ae8:	d123      	bne.n	8004b32 <Server_Handle+0xf2>
		sprintf(datatosend, Basic_inclusion);
 8004aea:	4b47      	ldr	r3, [pc, #284]	; (8004c08 <Server_Handle+0x1c8>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	24d0      	movs	r4, #208	; 0xd0
 8004af0:	193b      	adds	r3, r7, r4
 8004af2:	0011      	movs	r1, r2
 8004af4:	0018      	movs	r0, r3
 8004af6:	f001 fa1d 	bl	8005f34 <siprintf>
		strcat(datatosend, hms);
 8004afa:	2008      	movs	r0, #8
 8004afc:	183a      	adds	r2, r7, r0
 8004afe:	193b      	adds	r3, r7, r4
 8004b00:	0011      	movs	r1, r2
 8004b02:	0018      	movs	r0, r3
 8004b04:	f001 fa36 	bl	8005f74 <strcat>
		strcat(datatosend, LED_ON);
 8004b08:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <Server_Handle+0x1cc>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	193b      	adds	r3, r7, r4
 8004b0e:	0011      	movs	r1, r2
 8004b10:	0018      	movs	r0, r3
 8004b12:	f001 fa2f 	bl	8005f74 <strcat>
		strcat(datatosend, Terminate);
 8004b16:	4b3e      	ldr	r3, [pc, #248]	; (8004c10 <Server_Handle+0x1d0>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	193b      	adds	r3, r7, r4
 8004b1c:	0011      	movs	r1, r2
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f001 fa28 	bl	8005f74 <strcat>
		Server_Send(datatosend, Link_ID);
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	193b      	adds	r3, r7, r4
 8004b28:	0011      	movs	r1, r2
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7ff ff30 	bl	8004990 <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 8004b30:	e04e      	b.n	8004bd0 <Server_Handle+0x190>
	else if (!(strcmp(str, "/ledoff"))) {
 8004b32:	4a38      	ldr	r2, [pc, #224]	; (8004c14 <Server_Handle+0x1d4>)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	0011      	movs	r1, r2
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7fb fae5 	bl	8000108 <strcmp>
 8004b3e:	1e03      	subs	r3, r0, #0
 8004b40:	d123      	bne.n	8004b8a <Server_Handle+0x14a>
		sprintf(datatosend, Basic_inclusion);
 8004b42:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <Server_Handle+0x1c8>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	24d0      	movs	r4, #208	; 0xd0
 8004b48:	193b      	adds	r3, r7, r4
 8004b4a:	0011      	movs	r1, r2
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f001 f9f1 	bl	8005f34 <siprintf>
		strcat(datatosend, hms);
 8004b52:	2308      	movs	r3, #8
 8004b54:	18fa      	adds	r2, r7, r3
 8004b56:	193b      	adds	r3, r7, r4
 8004b58:	0011      	movs	r1, r2
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f001 fa0a 	bl	8005f74 <strcat>
		strcat(datatosend, LED_OFF);
 8004b60:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <Server_Handle+0x1d8>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	193b      	adds	r3, r7, r4
 8004b66:	0011      	movs	r1, r2
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f001 fa03 	bl	8005f74 <strcat>
		strcat(datatosend, Terminate);
 8004b6e:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <Server_Handle+0x1d0>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	193b      	adds	r3, r7, r4
 8004b74:	0011      	movs	r1, r2
 8004b76:	0018      	movs	r0, r3
 8004b78:	f001 f9fc 	bl	8005f74 <strcat>
		Server_Send(datatosend, Link_ID);
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	193b      	adds	r3, r7, r4
 8004b80:	0011      	movs	r1, r2
 8004b82:	0018      	movs	r0, r3
 8004b84:	f7ff ff04 	bl	8004990 <Server_Send>
}
 8004b88:	e022      	b.n	8004bd0 <Server_Handle+0x190>
		sprintf(datatosend, Basic_inclusion);
 8004b8a:	4b1f      	ldr	r3, [pc, #124]	; (8004c08 <Server_Handle+0x1c8>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	24d0      	movs	r4, #208	; 0xd0
 8004b90:	193b      	adds	r3, r7, r4
 8004b92:	0011      	movs	r1, r2
 8004b94:	0018      	movs	r0, r3
 8004b96:	f001 f9cd 	bl	8005f34 <siprintf>
		strcat(datatosend, hms);
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	18fa      	adds	r2, r7, r3
 8004b9e:	193b      	adds	r3, r7, r4
 8004ba0:	0011      	movs	r1, r2
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f001 f9e6 	bl	8005f74 <strcat>
		strcat(datatosend, LED_OFF);
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <Server_Handle+0x1d8>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	193b      	adds	r3, r7, r4
 8004bae:	0011      	movs	r1, r2
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f001 f9df 	bl	8005f74 <strcat>
		strcat(datatosend, Terminate);
 8004bb6:	4b16      	ldr	r3, [pc, #88]	; (8004c10 <Server_Handle+0x1d0>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	193b      	adds	r3, r7, r4
 8004bbc:	0011      	movs	r1, r2
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f001 f9d8 	bl	8005f74 <strcat>
		Server_Send(datatosend, Link_ID);
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	193b      	adds	r3, r7, r4
 8004bc8:	0011      	movs	r1, r2
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f7ff fee0 	bl	8004990 <Server_Send>
}
 8004bd0:	46c0      	nop			; (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <Server_Handle+0x1dc>)
 8004bd6:	449d      	add	sp, r3
 8004bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	fffff73c 	.word	0xfffff73c
 8004be0:	fffff820 	.word	0xfffff820
 8004be4:	000007cc 	.word	0x000007cc
 8004be8:	41c47ae1 	.word	0x41c47ae1
 8004bec:	000008ac 	.word	0x000008ac
 8004bf0:	000008a8 	.word	0x000008a8
 8004bf4:	000008a4 	.word	0x000008a4
 8004bf8:	08008c00 	.word	0x08008c00
 8004bfc:	9999999a 	.word	0x9999999a
 8004c00:	3fd99999 	.word	0x3fd99999
 8004c04:	08008c70 	.word	0x08008c70
 8004c08:	2000000c 	.word	0x2000000c
 8004c0c:	20000010 	.word	0x20000010
 8004c10:	20000018 	.word	0x20000018
 8004c14:	08008c78 	.word	0x08008c78
 8004c18:	20000014 	.word	0x20000014
 8004c1c:	000008b4 	.word	0x000008b4

08004c20 <Server_Start>:

uint8_t Server_Start() {
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b093      	sub	sp, #76	; 0x4c
 8004c24:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = { 0 };
 8004c26:	2308      	movs	r3, #8
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	223c      	movs	r2, #60	; 0x3c
 8004c32:	2100      	movs	r1, #0
 8004c34:	0018      	movs	r0, r3
 8004c36:	f000 fd07 	bl	8005648 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)))
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	4b34      	ldr	r3, [pc, #208]	; (8004d10 <Server_Start+0xf0>)
 8004c3e:	1dfa      	adds	r2, r7, #7
 8004c40:	4834      	ldr	r0, [pc, #208]	; (8004d14 <Server_Start+0xf4>)
 8004c42:	2101      	movs	r1, #1
 8004c44:	f000 fada 	bl	80051fc <Get_after>
 8004c48:	1e03      	subs	r3, r0, #0
 8004c4a:	d0f7      	beq.n	8004c3c <Server_Start+0x1c>
		;
	Link_ID -= 48;
 8004c4c:	1dfb      	adds	r3, r7, #7
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	3b30      	subs	r3, #48	; 0x30
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	1dfb      	adds	r3, r7, #7
 8004c56:	701a      	strb	r2, [r3, #0]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)))
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <Server_Start+0xf0>)
 8004c5c:	2408      	movs	r4, #8
 8004c5e:	1939      	adds	r1, r7, r4
 8004c60:	4b2d      	ldr	r3, [pc, #180]	; (8004d18 <Server_Start+0xf8>)
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 fb1a 	bl	800529c <Copy_upto>
 8004c68:	1e03      	subs	r3, r0, #0
 8004c6a:	d0f6      	beq.n	8004c5a <Server_Start+0x3a>
		;
	if (Look_for("/ledon", buftocopyinto) == 1) {
 8004c6c:	193a      	adds	r2, r7, r4
 8004c6e:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <Server_Start+0xfc>)
 8004c70:	0011      	movs	r1, r2
 8004c72:	0018      	movs	r0, r3
 8004c74:	f000 f8c7 	bl	8004e06 <Look_for>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10f      	bne.n	8004c9e <Server_Start+0x7e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8004c7e:	2390      	movs	r3, #144	; 0x90
 8004c80:	05db      	lsls	r3, r3, #23
 8004c82:	2201      	movs	r2, #1
 8004c84:	2120      	movs	r1, #32
 8004c86:	0018      	movs	r0, r3
 8004c88:	f7fe f95e 	bl	8002f48 <HAL_GPIO_WritePin>
		Server_Handle("/ledon", Link_ID);
 8004c8c:	1dfb      	adds	r3, r7, #7
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	001a      	movs	r2, r3
 8004c92:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <Server_Start+0xfc>)
 8004c94:	0011      	movs	r1, r2
 8004c96:	0018      	movs	r0, r3
 8004c98:	f7ff fed2 	bl	8004a40 <Server_Handle>
 8004c9c:	e032      	b.n	8004d04 <Server_Start+0xe4>
	}

	else if (Look_for("/ledoff", buftocopyinto) == 1) {
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	18fa      	adds	r2, r7, r3
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <Server_Start+0x100>)
 8004ca4:	0011      	movs	r1, r2
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f000 f8ad 	bl	8004e06 <Look_for>
 8004cac:	0003      	movs	r3, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10f      	bne.n	8004cd2 <Server_Start+0xb2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8004cb2:	2390      	movs	r3, #144	; 0x90
 8004cb4:	05db      	lsls	r3, r3, #23
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2120      	movs	r1, #32
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7fe f944 	bl	8002f48 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff", Link_ID);
 8004cc0:	1dfb      	adds	r3, r7, #7
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <Server_Start+0x100>)
 8004cc8:	0011      	movs	r1, r2
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f7ff feb8 	bl	8004a40 <Server_Handle>
 8004cd0:	e018      	b.n	8004d04 <Server_Start+0xe4>
	}

	else if (Look_for("/favicon.ico", buftocopyinto) == 1)
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	18fa      	adds	r2, r7, r3
 8004cd6:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <Server_Start+0x104>)
 8004cd8:	0011      	movs	r1, r2
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 f893 	bl	8004e06 <Look_for>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d00e      	beq.n	8004d04 <Server_Start+0xe4>
		;

	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8004ce6:	2390      	movs	r3, #144	; 0x90
 8004ce8:	05db      	lsls	r3, r3, #23
 8004cea:	2200      	movs	r2, #0
 8004cec:	2120      	movs	r1, #32
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7fe f92a 	bl	8002f48 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 8004cf4:	1dfb      	adds	r3, r7, #7
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	001a      	movs	r2, r3
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <Server_Start+0x108>)
 8004cfc:	0011      	movs	r1, r2
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7ff fe9e 	bl	8004a40 <Server_Handle>
	}
	return 1;
 8004d04:	2301      	movs	r3, #1
}
 8004d06:	0018      	movs	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b013      	add	sp, #76	; 0x4c
 8004d0c:	bd90      	pop	{r4, r7, pc}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	2000028c 	.word	0x2000028c
 8004d14:	08008c80 	.word	0x08008c80
 8004d18:	08008c88 	.word	0x08008c88
 8004d1c:	08008c70 	.word	0x08008c70
 8004d20:	08008c78 	.word	0x08008c78
 8004d24:	08008c94 	.word	0x08008c94
 8004d28:	08008ca4 	.word	0x08008ca4

08004d2c <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8004d30:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <Ringbuf_init+0x64>)
 8004d32:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <Ringbuf_init+0x68>)
 8004d34:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8004d36:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <Ringbuf_init+0x6c>)
 8004d38:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <Ringbuf_init+0x70>)
 8004d3a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8004d3c:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <Ringbuf_init+0x74>)
 8004d3e:	4a19      	ldr	r2, [pc, #100]	; (8004da4 <Ringbuf_init+0x78>)
 8004d40:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8004d42:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <Ringbuf_init+0x7c>)
 8004d44:	4a19      	ldr	r2, [pc, #100]	; (8004dac <Ringbuf_init+0x80>)
 8004d46:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8004d48:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <Ringbuf_init+0x84>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	4b18      	ldr	r3, [pc, #96]	; (8004db0 <Ringbuf_init+0x84>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2101      	movs	r1, #1
 8004d54:	430a      	orrs	r2, r1
 8004d56:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8004d58:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <Ringbuf_init+0x88>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <Ringbuf_init+0x88>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2101      	movs	r1, #1
 8004d64:	430a      	orrs	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8004d68:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <Ringbuf_init+0x84>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <Ringbuf_init+0x84>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2120      	movs	r1, #32
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8004d78:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <Ringbuf_init+0x88>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <Ringbuf_init+0x88>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2120      	movs	r1, #32
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]
}
 8004d88:	46c0      	nop			; (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	20000c50 	.word	0x20000c50
 8004d94:	20000430 	.word	0x20000430
 8004d98:	20000c54 	.word	0x20000c54
 8004d9c:	20000638 	.word	0x20000638
 8004da0:	20000c58 	.word	0x20000c58
 8004da4:	20000840 	.word	0x20000840
 8004da8:	20000c5c 	.word	0x20000c5c
 8004dac:	20000a48 	.word	0x20000a48
 8004db0:	2000028c 	.word	0x2000028c
 8004db4:	20000208 	.word	0x20000208

08004db8 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	0002      	movs	r2, r0
 8004dc0:	6039      	str	r1, [r7, #0]
 8004dc2:	1dfb      	adds	r3, r7, #7
 8004dc4:	701a      	strb	r2, [r3, #0]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	58d3      	ldr	r3, [r2, r3]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	05db      	lsls	r3, r3, #23
 8004dd2:	0ddb      	lsrs	r3, r3, #23
 8004dd4:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	2381      	movs	r3, #129	; 0x81
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	58d2      	ldr	r2, [r2, r3]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d00c      	beq.n	8004dfe <store_char+0x46>
    buffer->buffer[buffer->head] = c;
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	58d3      	ldr	r3, [r2, r3]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	1df9      	adds	r1, r7, #7
 8004df0:	7809      	ldrb	r1, [r1, #0]
 8004df2:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	50d1      	str	r1, [r2, r3]
  }
}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b004      	add	sp, #16
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b086      	sub	sp, #24
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7fb f982 	bl	800011c <strlen>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f7fb f97c 	bl	800011c <strlen>
 8004e24:	0003      	movs	r3, r0
 8004e26:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8004e30:	e002      	b.n	8004e38 <Look_for+0x32>
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3301      	adds	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	18d3      	adds	r3, r2, r3
 8004e3e:	781a      	ldrb	r2, [r3, #0]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	18cb      	adds	r3, r1, r3
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d1f2      	bne.n	8004e32 <Look_for+0x2c>
	if (str[so_far] == buffertolookinto[indx]){
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	18d3      	adds	r3, r2, r3
 8004e52:	781a      	ldrb	r2, [r3, #0]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	18cb      	adds	r3, r1, r3
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d111      	bne.n	8004e84 <Look_for+0x7e>
	while (str[so_far] == buffertolookinto[indx])
 8004e60:	e005      	b.n	8004e6e <Look_for+0x68>
	{
		so_far++;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3301      	adds	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
		indx++;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	18d3      	adds	r3, r2, r3
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6839      	ldr	r1, [r7, #0]
 8004e7a:	18cb      	adds	r3, r1, r3
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d0ef      	beq.n	8004e62 <Look_for+0x5c>
 8004e82:	e008      	b.n	8004e96 <Look_for+0x90>
	}
	}

	else
		{
			so_far =0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	dbcf      	blt.n	8004e30 <Look_for+0x2a>
 8004e90:	2301      	movs	r3, #1
 8004e92:	425b      	negs	r3, r3
 8004e94:	e007      	b.n	8004ea6 <Look_for+0xa0>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d101      	bne.n	8004ea2 <Look_for+0x9c>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e001      	b.n	8004ea6 <Look_for+0xa0>
	else return -1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	425b      	negs	r3, r3
}
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b006      	add	sp, #24
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <Uart_flush>:
	}
}


void Uart_flush (UART_HandleTypeDef *uart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <Uart_flush+0x5c>)
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d10e      	bne.n	8004ede <Uart_flush+0x2e>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 8004ec0:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <Uart_flush+0x60>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	001a      	movs	r2, r3
 8004ecc:	2100      	movs	r1, #0
 8004ece:	f000 fbbb 	bl	8005648 <memset>
		_rx_buffer1->head = 0;
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <Uart_flush+0x60>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	2100      	movs	r1, #0
 8004edc:	50d1      	str	r1, [r2, r3]
	}
	if (uart == pc_uart)
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <Uart_flush+0x64>)
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d10e      	bne.n	8004f04 <Uart_flush+0x54>
	{
		memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <Uart_flush+0x68>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	0018      	movs	r0, r3
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	f000 fba8 	bl	8005648 <memset>
		_rx_buffer2->head = 0;
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <Uart_flush+0x68>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	2100      	movs	r1, #0
 8004f02:	50d1      	str	r1, [r2, r3]
	}
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	2000028c 	.word	0x2000028c
 8004f10:	20000c50 	.word	0x20000c50
 8004f14:	20000208 	.word	0x20000208
 8004f18:	20000c58 	.word	0x20000c58

08004f1c <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <Uart_peek+0x84>)
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d117      	bne.n	8004f5c <Uart_peek+0x40>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8004f2c:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <Uart_peek+0x88>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	58d2      	ldr	r2, [r2, r3]
 8004f36:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <Uart_peek+0x88>)
 8004f38:	6819      	ldr	r1, [r3, #0]
 8004f3a:	2381      	movs	r3, #129	; 0x81
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	58cb      	ldr	r3, [r1, r3]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d102      	bne.n	8004f4a <Uart_peek+0x2e>
		  {
		    return -1;
 8004f44:	2301      	movs	r3, #1
 8004f46:	425b      	negs	r3, r3
 8004f48:	e026      	b.n	8004f98 <Uart_peek+0x7c>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8004f4a:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <Uart_peek+0x88>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <Uart_peek+0x88>)
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	2381      	movs	r3, #129	; 0x81
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	58cb      	ldr	r3, [r1, r3]
 8004f58:	5cd3      	ldrb	r3, [r2, r3]
 8004f5a:	e01d      	b.n	8004f98 <Uart_peek+0x7c>
		  }
	}

	else if (uart == pc_uart)
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <Uart_peek+0x8c>)
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d117      	bne.n	8004f94 <Uart_peek+0x78>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <Uart_peek+0x90>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	58d2      	ldr	r2, [r2, r3]
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <Uart_peek+0x90>)
 8004f70:	6819      	ldr	r1, [r3, #0]
 8004f72:	2381      	movs	r3, #129	; 0x81
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	58cb      	ldr	r3, [r1, r3]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d102      	bne.n	8004f82 <Uart_peek+0x66>
		  {
		    return -1;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	425b      	negs	r3, r3
 8004f80:	e00a      	b.n	8004f98 <Uart_peek+0x7c>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <Uart_peek+0x90>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <Uart_peek+0x90>)
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	2381      	movs	r3, #129	; 0x81
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	58cb      	ldr	r3, [r1, r3]
 8004f90:	5cd3      	ldrb	r3, [r2, r3]
 8004f92:	e001      	b.n	8004f98 <Uart_peek+0x7c>
		  }
	}

	return -1;
 8004f94:	2301      	movs	r3, #1
 8004f96:	425b      	negs	r3, r3
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	2000028c 	.word	0x2000028c
 8004fa4:	20000c50 	.word	0x20000c50
 8004fa8:	20000208 	.word	0x20000208
 8004fac:	20000c58 	.word	0x20000c58

08004fb0 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4b30      	ldr	r3, [pc, #192]	; (800507c <Uart_read+0xcc>)
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d129      	bne.n	8005014 <Uart_read+0x64>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8004fc0:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <Uart_read+0xd0>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	58d2      	ldr	r2, [r2, r3]
 8004fca:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <Uart_read+0xd0>)
 8004fcc:	6819      	ldr	r1, [r3, #0]
 8004fce:	2381      	movs	r3, #129	; 0x81
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	58cb      	ldr	r3, [r1, r3]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d102      	bne.n	8004fde <Uart_read+0x2e>
		  {
		    return -1;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	425b      	negs	r3, r3
 8004fdc:	e04a      	b.n	8005074 <Uart_read+0xc4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8004fde:	4b28      	ldr	r3, [pc, #160]	; (8005080 <Uart_read+0xd0>)
 8004fe0:	6819      	ldr	r1, [r3, #0]
 8004fe2:	4b27      	ldr	r3, [pc, #156]	; (8005080 <Uart_read+0xd0>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	2381      	movs	r3, #129	; 0x81
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	58d2      	ldr	r2, [r2, r3]
 8004fec:	200e      	movs	r0, #14
 8004fee:	183b      	adds	r3, r7, r0
 8004ff0:	5c8a      	ldrb	r2, [r1, r2]
 8004ff2:	701a      	strb	r2, [r3, #0]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8004ff4:	4b22      	ldr	r3, [pc, #136]	; (8005080 <Uart_read+0xd0>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	2381      	movs	r3, #129	; 0x81
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	58d3      	ldr	r3, [r2, r3]
 8004ffe:	1c59      	adds	r1, r3, #1
 8005000:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <Uart_read+0xd0>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	05cb      	lsls	r3, r1, #23
 8005006:	0dd9      	lsrs	r1, r3, #23
 8005008:	2381      	movs	r3, #129	; 0x81
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	50d1      	str	r1, [r2, r3]
		    return c;
 800500e:	183b      	adds	r3, r7, r0
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	e02f      	b.n	8005074 <Uart_read+0xc4>
		  }
	}

	else if (uart == pc_uart)
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <Uart_read+0xd4>)
 8005018:	429a      	cmp	r2, r3
 800501a:	d129      	bne.n	8005070 <Uart_read+0xc0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <Uart_read+0xd8>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	58d2      	ldr	r2, [r2, r3]
 8005026:	4b18      	ldr	r3, [pc, #96]	; (8005088 <Uart_read+0xd8>)
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	2381      	movs	r3, #129	; 0x81
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	58cb      	ldr	r3, [r1, r3]
 8005030:	429a      	cmp	r2, r3
 8005032:	d102      	bne.n	800503a <Uart_read+0x8a>
		  {
		    return -1;
 8005034:	2301      	movs	r3, #1
 8005036:	425b      	negs	r3, r3
 8005038:	e01c      	b.n	8005074 <Uart_read+0xc4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 800503a:	4b13      	ldr	r3, [pc, #76]	; (8005088 <Uart_read+0xd8>)
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <Uart_read+0xd8>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	2381      	movs	r3, #129	; 0x81
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	58d2      	ldr	r2, [r2, r3]
 8005048:	200f      	movs	r0, #15
 800504a:	183b      	adds	r3, r7, r0
 800504c:	5c8a      	ldrb	r2, [r1, r2]
 800504e:	701a      	strb	r2, [r3, #0]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8005050:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <Uart_read+0xd8>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	2381      	movs	r3, #129	; 0x81
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	58d3      	ldr	r3, [r2, r3]
 800505a:	1c59      	adds	r1, r3, #1
 800505c:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <Uart_read+0xd8>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	05cb      	lsls	r3, r1, #23
 8005062:	0dd9      	lsrs	r1, r3, #23
 8005064:	2381      	movs	r3, #129	; 0x81
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	50d1      	str	r1, [r2, r3]
		    return c;
 800506a:	183b      	adds	r3, r7, r0
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	e001      	b.n	8005074 <Uart_read+0xc4>
		  }
	}

	else return -1;
 8005070:	2301      	movs	r3, #1
 8005072:	425b      	negs	r3, r3
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bd80      	pop	{r7, pc}
 800507c:	2000028c 	.word	0x2000028c
 8005080:	20000c50 	.word	0x20000c50
 8005084:	20000208 	.word	0x20000208
 8005088:	20000c58 	.word	0x20000c58

0800508c <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	db5c      	blt.n	8005156 <Uart_write+0xca>
	{
		if (uart == device_uart){
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	4b30      	ldr	r3, [pc, #192]	; (8005160 <Uart_write+0xd4>)
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d12a      	bne.n	80050fa <Uart_write+0x6e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80050a4:	4b2f      	ldr	r3, [pc, #188]	; (8005164 <Uart_write+0xd8>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	58d3      	ldr	r3, [r2, r3]
 80050ae:	3301      	adds	r3, #1
 80050b0:	05db      	lsls	r3, r3, #23
 80050b2:	0ddb      	lsrs	r3, r3, #23
 80050b4:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <Uart_write+0xd8>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	2381      	movs	r3, #129	; 0x81
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	58d2      	ldr	r2, [r2, r3]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d0f7      	beq.n	80050b8 <Uart_write+0x2c>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80050c8:	4b26      	ldr	r3, [pc, #152]	; (8005164 <Uart_write+0xd8>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4b25      	ldr	r3, [pc, #148]	; (8005164 <Uart_write+0xd8>)
 80050ce:	6819      	ldr	r1, [r3, #0]
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	58cb      	ldr	r3, [r1, r3]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	b2c9      	uxtb	r1, r1
 80050da:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 80050dc:	4b21      	ldr	r3, [pc, #132]	; (8005164 <Uart_write+0xd8>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	50d1      	str	r1, [r2, r3]

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <Uart_write+0xd4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <Uart_write+0xd4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2180      	movs	r1, #128	; 0x80
 80050f4:	430a      	orrs	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 80050f8:	e02d      	b.n	8005156 <Uart_write+0xca>
		else if (uart == pc_uart){
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <Uart_write+0xdc>)
 80050fe:	429a      	cmp	r2, r3
 8005100:	d129      	bne.n	8005156 <Uart_write+0xca>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8005102:	4b1a      	ldr	r3, [pc, #104]	; (800516c <Uart_write+0xe0>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	58d3      	ldr	r3, [r2, r3]
 800510c:	3301      	adds	r3, #1
 800510e:	05db      	lsls	r3, r3, #23
 8005110:	0ddb      	lsrs	r3, r3, #23
 8005112:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8005114:	46c0      	nop			; (mov r8, r8)
 8005116:	4b15      	ldr	r3, [pc, #84]	; (800516c <Uart_write+0xe0>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	2381      	movs	r3, #129	; 0x81
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	58d2      	ldr	r2, [r2, r3]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	429a      	cmp	r2, r3
 8005124:	d0f7      	beq.n	8005116 <Uart_write+0x8a>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <Uart_write+0xe0>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <Uart_write+0xe0>)
 800512c:	6819      	ldr	r1, [r3, #0]
 800512e:	2380      	movs	r3, #128	; 0x80
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	58cb      	ldr	r3, [r1, r3]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	b2c9      	uxtb	r1, r1
 8005138:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <Uart_write+0xe0>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68f9      	ldr	r1, [r7, #12]
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	50d1      	str	r1, [r2, r3]
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8005146:	4b08      	ldr	r3, [pc, #32]	; (8005168 <Uart_write+0xdc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <Uart_write+0xdc>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2180      	movs	r1, #128	; 0x80
 8005152:	430a      	orrs	r2, r1
 8005154:	601a      	str	r2, [r3, #0]
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	b004      	add	sp, #16
 800515c:	bd80      	pop	{r7, pc}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	2000028c 	.word	0x2000028c
 8005164:	20000c54 	.word	0x20000c54
 8005168:	20000208 	.word	0x20000208
 800516c:	20000c5c 	.word	0x20000c5c

08005170 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <IsDataAvailable+0x7c>)
 800517c:	429a      	cmp	r2, r3
 800517e:	d115      	bne.n	80051ac <IsDataAvailable+0x3c>
 8005180:	4b1b      	ldr	r3, [pc, #108]	; (80051f0 <IsDataAvailable+0x80>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	58d3      	ldr	r3, [r2, r3]
 800518a:	b29a      	uxth	r2, r3
 800518c:	4b18      	ldr	r3, [pc, #96]	; (80051f0 <IsDataAvailable+0x80>)
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	2381      	movs	r3, #129	; 0x81
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	58cb      	ldr	r3, [r1, r3]
 8005196:	b29b      	uxth	r3, r3
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	b29b      	uxth	r3, r3
 800519c:	2280      	movs	r2, #128	; 0x80
 800519e:	0092      	lsls	r2, r2, #2
 80051a0:	4694      	mov	ip, r2
 80051a2:	4463      	add	r3, ip
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	05db      	lsls	r3, r3, #23
 80051a8:	0ddb      	lsrs	r3, r3, #23
 80051aa:	e01b      	b.n	80051e4 <IsDataAvailable+0x74>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <IsDataAvailable+0x84>)
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d115      	bne.n	80051e0 <IsDataAvailable+0x70>
 80051b4:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <IsDataAvailable+0x88>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	58d3      	ldr	r3, [r2, r3]
 80051be:	b29a      	uxth	r2, r3
 80051c0:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <IsDataAvailable+0x88>)
 80051c2:	6819      	ldr	r1, [r3, #0]
 80051c4:	2381      	movs	r3, #129	; 0x81
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	58cb      	ldr	r3, [r1, r3]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2280      	movs	r2, #128	; 0x80
 80051d2:	0092      	lsls	r2, r2, #2
 80051d4:	4694      	mov	ip, r2
 80051d6:	4463      	add	r3, ip
 80051d8:	b29b      	uxth	r3, r3
 80051da:	05db      	lsls	r3, r3, #23
 80051dc:	0ddb      	lsrs	r3, r3, #23
 80051de:	e001      	b.n	80051e4 <IsDataAvailable+0x74>
	return -1;
 80051e0:	2301      	movs	r3, #1
 80051e2:	425b      	negs	r3, r3
}
 80051e4:	0018      	movs	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b002      	add	sp, #8
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	2000028c 	.word	0x2000028c
 80051f0:	20000c50 	.word	0x20000c50
 80051f4:	20000208 	.word	0x20000208
 80051f8:	20000c58 	.word	0x20000c58

080051fc <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	230b      	movs	r3, #11
 800520a:	18fb      	adds	r3, r7, r3
 800520c:	1c0a      	adds	r2, r1, #0
 800520e:	701a      	strb	r2, [r3, #0]

	while (Wait_for(string, uart) != 1);
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	0011      	movs	r1, r2
 8005218:	0018      	movs	r0, r3
 800521a:	f000 f8c3 	bl	80053a4 <Wait_for>
 800521e:	0003      	movs	r3, r0
 8005220:	2b01      	cmp	r3, #1
 8005222:	d1f6      	bne.n	8005212 <Get_after+0x16>
	for (int indx=0; indx<numberofchars; indx++)
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e013      	b.n	8005252 <Get_after+0x56>
	{
		while (!(IsDataAvailable(uart)));
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	0018      	movs	r0, r3
 8005230:	f7ff ff9e 	bl	8005170 <IsDataAvailable>
 8005234:	1e03      	subs	r3, r0, #0
 8005236:	d0f9      	beq.n	800522c <Get_after+0x30>
		buffertosave[indx] = Uart_read(uart);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	0018      	movs	r0, r3
 800523c:	f7ff feb8 	bl	8004fb0 <Uart_read>
 8005240:	0001      	movs	r1, r0
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	18d3      	adds	r3, r2, r3
 8005248:	b2ca      	uxtb	r2, r1
 800524a:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3301      	adds	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	230b      	movs	r3, #11
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	429a      	cmp	r2, r3
 800525c:	dbe5      	blt.n	800522a <Get_after+0x2e>
	}
	return 1;
 800525e:	2301      	movs	r3, #1
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	b006      	add	sp, #24
 8005266:	bd80      	pop	{r7, pc}

08005268 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8005272:	e009      	b.n	8005288 <Uart_sendstring+0x20>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	001a      	movs	r2, r3
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	0019      	movs	r1, r3
 8005282:	0010      	movs	r0, r2
 8005284:	f7ff ff02 	bl	800508c <Uart_write>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f1      	bne.n	8005274 <Uart_sendstring+0xc>
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b002      	add	sp, #8
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
	int so_far =0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	0018      	movs	r0, r3
 80052b0:	f7fa ff34 	bl	800011c <strlen>
 80052b4:	0003      	movs	r3, r0
 80052b6:	617b      	str	r3, [r7, #20]
	int indx = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7ff ff55 	bl	8005170 <IsDataAvailable>
 80052c6:	1e03      	subs	r3, r0, #0
 80052c8:	d0f9      	beq.n	80052be <Copy_upto+0x22>
	while (Uart_peek(uart) != string[so_far])
 80052ca:	e022      	b.n	8005312 <Copy_upto+0x76>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 80052cc:	4b34      	ldr	r3, [pc, #208]	; (80053a0 <Copy_upto+0x104>)
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	4b33      	ldr	r3, [pc, #204]	; (80053a0 <Copy_upto+0x104>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2381      	movs	r3, #129	; 0x81
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	58d2      	ldr	r2, [r2, r3]
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	68b8      	ldr	r0, [r7, #8]
 80052de:	18c3      	adds	r3, r0, r3
 80052e0:	5c8a      	ldrb	r2, [r1, r2]
 80052e2:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80052e4:	4b2e      	ldr	r3, [pc, #184]	; (80053a0 <Copy_upto+0x104>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	2381      	movs	r3, #129	; 0x81
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	58d3      	ldr	r3, [r2, r3]
 80052ee:	1c59      	adds	r1, r3, #1
 80052f0:	4b2b      	ldr	r3, [pc, #172]	; (80053a0 <Copy_upto+0x104>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	05cb      	lsls	r3, r1, #23
 80052f6:	0dd9      	lsrs	r1, r3, #23
 80052f8:	2381      	movs	r3, #129	; 0x81
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	50d1      	str	r1, [r2, r3]
			indx++;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	3301      	adds	r3, #1
 8005302:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8005304:	46c0      	nop			; (mov r8, r8)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	0018      	movs	r0, r3
 800530a:	f7ff ff31 	bl	8005170 <IsDataAvailable>
 800530e:	1e03      	subs	r3, r0, #0
 8005310:	d0f9      	beq.n	8005306 <Copy_upto+0x6a>
	while (Uart_peek(uart) != string[so_far])
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f7ff fe01 	bl	8004f1c <Uart_peek>
 800531a:	0001      	movs	r1, r0
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	18d3      	adds	r3, r2, r3
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	4299      	cmp	r1, r3
 8005326:	d1d1      	bne.n	80052cc <Copy_upto+0x30>

		}
	while (Uart_peek(uart) == string [so_far])
 8005328:	e01c      	b.n	8005364 <Copy_upto+0xc8>
	{
		so_far++;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3301      	adds	r3, #1
 800532e:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f7ff fe3c 	bl	8004fb0 <Uart_read>
 8005338:	0001      	movs	r1, r0
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	61ba      	str	r2, [r7, #24]
 8005340:	001a      	movs	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	189b      	adds	r3, r3, r2
 8005346:	b2ca      	uxtb	r2, r1
 8005348:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	429a      	cmp	r2, r3
 8005350:	d101      	bne.n	8005356 <Copy_upto+0xba>
 8005352:	2301      	movs	r3, #1
 8005354:	e020      	b.n	8005398 <Copy_upto+0xfc>
		while (!IsDataAvailable(uart));
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	0018      	movs	r0, r3
 800535c:	f7ff ff08 	bl	8005170 <IsDataAvailable>
 8005360:	1e03      	subs	r3, r0, #0
 8005362:	d0f9      	beq.n	8005358 <Copy_upto+0xbc>
	while (Uart_peek(uart) == string [so_far])
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	0018      	movs	r0, r3
 8005368:	f7ff fdd8 	bl	8004f1c <Uart_peek>
 800536c:	0001      	movs	r1, r0
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	18d3      	adds	r3, r2, r3
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	4299      	cmp	r1, r3
 8005378:	d0d7      	beq.n	800532a <Copy_upto+0x8e>
	}

	if (so_far != len)
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	429a      	cmp	r2, r3
 8005380:	d002      	beq.n	8005388 <Copy_upto+0xec>
	{
		so_far = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
		goto again;
 8005386:	e799      	b.n	80052bc <Copy_upto+0x20>
	}

	if (so_far == len) return 1;
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	429a      	cmp	r2, r3
 800538e:	d101      	bne.n	8005394 <Copy_upto+0xf8>
 8005390:	2301      	movs	r3, #1
 8005392:	e001      	b.n	8005398 <Copy_upto+0xfc>
	else return -1;
 8005394:	2301      	movs	r3, #1
 8005396:	425b      	negs	r3, r3

}
 8005398:	0018      	movs	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	b008      	add	sp, #32
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000c50 	.word	0x20000c50

080053a4 <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f7fa feb1 	bl	800011c <strlen>
 80053ba:	0003      	movs	r3, r0
 80053bc:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	0018      	movs	r0, r3
 80053c4:	f7ff fed4 	bl	8005170 <IsDataAvailable>
 80053c8:	1e03      	subs	r3, r0, #0
 80053ca:	d0f9      	beq.n	80053c0 <Wait_for+0x1c>
	if (Uart_peek(uart) != string[so_far])
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	0018      	movs	r0, r3
 80053d0:	f7ff fda4 	bl	8004f1c <Uart_peek>
 80053d4:	0001      	movs	r1, r0
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	18d3      	adds	r3, r2, r3
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	4299      	cmp	r1, r3
 80053e0:	d021      	beq.n	8005426 <Wait_for+0x82>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 80053e2:	4b20      	ldr	r3, [pc, #128]	; (8005464 <Wait_for+0xc0>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	2381      	movs	r3, #129	; 0x81
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	58d3      	ldr	r3, [r2, r3]
 80053ec:	1c59      	adds	r1, r3, #1
 80053ee:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <Wait_for+0xc0>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	05cb      	lsls	r3, r1, #23
 80053f4:	0dd9      	lsrs	r1, r3, #23
 80053f6:	2381      	movs	r3, #129	; 0x81
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	50d1      	str	r1, [r2, r3]
		goto again_device;
 80053fc:	e7df      	b.n	80053be <Wait_for+0x1a>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3301      	adds	r3, #1
 8005402:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	0018      	movs	r0, r3
 8005408:	f7ff fdd2 	bl	8004fb0 <Uart_read>
		if (so_far == len) return 1;
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	d101      	bne.n	8005418 <Wait_for+0x74>
 8005414:	2301      	movs	r3, #1
 8005416:	e020      	b.n	800545a <Wait_for+0xb6>
		while (!IsDataAvailable(uart));
 8005418:	46c0      	nop			; (mov r8, r8)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	0018      	movs	r0, r3
 800541e:	f7ff fea7 	bl	8005170 <IsDataAvailable>
 8005422:	1e03      	subs	r3, r0, #0
 8005424:	d0f9      	beq.n	800541a <Wait_for+0x76>
	while (Uart_peek(uart) == string [so_far])
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	0018      	movs	r0, r3
 800542a:	f7ff fd77 	bl	8004f1c <Uart_peek>
 800542e:	0001      	movs	r1, r0
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	18d3      	adds	r3, r2, r3
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	4299      	cmp	r1, r3
 800543a:	d0e0      	beq.n	80053fe <Wait_for+0x5a>
	}

	if (so_far != len)
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	429a      	cmp	r2, r3
 8005442:	d002      	beq.n	800544a <Wait_for+0xa6>
	{
		so_far = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8005448:	e7b9      	b.n	80053be <Wait_for+0x1a>
	}

	if (so_far == len) return 1;
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d101      	bne.n	8005456 <Wait_for+0xb2>
 8005452:	2301      	movs	r3, #1
 8005454:	e001      	b.n	800545a <Wait_for+0xb6>
	else return -1;
 8005456:	2301      	movs	r3, #1
 8005458:	425b      	negs	r3, r3
}
 800545a:	0018      	movs	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	b004      	add	sp, #16
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	20000c50 	.word	0x20000c50

08005468 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2220      	movs	r2, #32
 8005484:	4013      	ands	r3, r2
 8005486:	d02d      	beq.n	80054e4 <Uart_isr+0x7c>
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	2220      	movs	r2, #32
 800548c:	4013      	ands	r3, r2
 800548e:	d029      	beq.n	80054e4 <Uart_isr+0x7c>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800549c:	b29a      	uxth	r2, r3
 800549e:	210f      	movs	r1, #15
 80054a0:	187b      	adds	r3, r7, r1
 80054a2:	701a      	strb	r2, [r3, #0]
        if (huart == device_uart)
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4b4c      	ldr	r3, [pc, #304]	; (80055d8 <Uart_isr+0x170>)
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d108      	bne.n	80054be <Uart_isr+0x56>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 80054ac:	4b4b      	ldr	r3, [pc, #300]	; (80055dc <Uart_isr+0x174>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	0011      	movs	r1, r2
 80054b6:	0018      	movs	r0, r3
 80054b8:	f7ff fc7e 	bl	8004db8 <store_char>
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
           	print("In PC UART IT\n\r");
        }

        return;
 80054bc:	e085      	b.n	80055ca <Uart_isr+0x162>
        else if (huart == pc_uart)
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4b47      	ldr	r3, [pc, #284]	; (80055e0 <Uart_isr+0x178>)
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d000      	beq.n	80054c8 <Uart_isr+0x60>
 80054c6:	e080      	b.n	80055ca <Uart_isr+0x162>
           	store_char (c, _rx_buffer2);  // store data in buffer
 80054c8:	4b46      	ldr	r3, [pc, #280]	; (80055e4 <Uart_isr+0x17c>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	230f      	movs	r3, #15
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	0011      	movs	r1, r2
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7ff fc6f 	bl	8004db8 <store_char>
           	print("In PC UART IT\n\r");
 80054da:	4b43      	ldr	r3, [pc, #268]	; (80055e8 <Uart_isr+0x180>)
 80054dc:	0018      	movs	r0, r3
 80054de:	f7ff f901 	bl	80046e4 <print>
        return;
 80054e2:	e072      	b.n	80055ca <Uart_isr+0x162>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2280      	movs	r2, #128	; 0x80
 80054e8:	4013      	ands	r3, r2
 80054ea:	d100      	bne.n	80054ee <Uart_isr+0x86>
 80054ec:	e070      	b.n	80055d0 <Uart_isr+0x168>
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2280      	movs	r2, #128	; 0x80
 80054f2:	4013      	ands	r3, r2
 80054f4:	d06c      	beq.n	80055d0 <Uart_isr+0x168>
    {
    	if (huart == device_uart){
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4b37      	ldr	r3, [pc, #220]	; (80055d8 <Uart_isr+0x170>)
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d130      	bne.n	8005560 <Uart_isr+0xf8>
    	if(tx_buffer1.head == tx_buffer1.tail)
 80054fe:	4a3b      	ldr	r2, [pc, #236]	; (80055ec <Uart_isr+0x184>)
 8005500:	2380      	movs	r3, #128	; 0x80
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	58d2      	ldr	r2, [r2, r3]
 8005506:	4939      	ldr	r1, [pc, #228]	; (80055ec <Uart_isr+0x184>)
 8005508:	2381      	movs	r3, #129	; 0x81
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	58cb      	ldr	r3, [r1, r3]
 800550e:	429a      	cmp	r2, r3
 8005510:	d108      	bne.n	8005524 <Uart_isr+0xbc>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2180      	movs	r1, #128	; 0x80
 800551e:	438a      	bics	r2, r1
 8005520:	601a      	str	r2, [r3, #0]
        	      huart->Instance->ISR;
        	      huart->Instance->TDR = c;

        	    }
        	}
    	return;
 8005522:	e054      	b.n	80055ce <Uart_isr+0x166>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8005524:	4a31      	ldr	r2, [pc, #196]	; (80055ec <Uart_isr+0x184>)
 8005526:	2381      	movs	r3, #129	; 0x81
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	58d2      	ldr	r2, [r2, r3]
 800552c:	200d      	movs	r0, #13
 800552e:	183b      	adds	r3, r7, r0
 8005530:	492e      	ldr	r1, [pc, #184]	; (80055ec <Uart_isr+0x184>)
 8005532:	5c8a      	ldrb	r2, [r1, r2]
 8005534:	701a      	strb	r2, [r3, #0]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8005536:	4a2d      	ldr	r2, [pc, #180]	; (80055ec <Uart_isr+0x184>)
 8005538:	2381      	movs	r3, #129	; 0x81
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	58d3      	ldr	r3, [r2, r3]
 800553e:	3301      	adds	r3, #1
 8005540:	05db      	lsls	r3, r3, #23
 8005542:	0dd9      	lsrs	r1, r3, #23
 8005544:	4a29      	ldr	r2, [pc, #164]	; (80055ec <Uart_isr+0x184>)
 8005546:	2381      	movs	r3, #129	; 0x81
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	50d1      	str	r1, [r2, r3]
    	      huart->Instance->ISR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	183a      	adds	r2, r7, r0
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	b292      	uxth	r2, r2
 800555c:	851a      	strh	r2, [r3, #40]	; 0x28
    	return;
 800555e:	e036      	b.n	80055ce <Uart_isr+0x166>
    	else if (huart == pc_uart){
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	4b1f      	ldr	r3, [pc, #124]	; (80055e0 <Uart_isr+0x178>)
 8005564:	429a      	cmp	r2, r3
 8005566:	d132      	bne.n	80055ce <Uart_isr+0x166>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8005568:	4a21      	ldr	r2, [pc, #132]	; (80055f0 <Uart_isr+0x188>)
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	58d2      	ldr	r2, [r2, r3]
 8005570:	491f      	ldr	r1, [pc, #124]	; (80055f0 <Uart_isr+0x188>)
 8005572:	2381      	movs	r3, #129	; 0x81
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	58cb      	ldr	r3, [r1, r3]
 8005578:	429a      	cmp	r2, r3
 800557a:	d108      	bne.n	800558e <Uart_isr+0x126>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2180      	movs	r1, #128	; 0x80
 8005588:	438a      	bics	r2, r1
 800558a:	601a      	str	r2, [r3, #0]
    	return;
 800558c:	e01f      	b.n	80055ce <Uart_isr+0x166>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 800558e:	4a18      	ldr	r2, [pc, #96]	; (80055f0 <Uart_isr+0x188>)
 8005590:	2381      	movs	r3, #129	; 0x81
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	58d2      	ldr	r2, [r2, r3]
 8005596:	200e      	movs	r0, #14
 8005598:	183b      	adds	r3, r7, r0
 800559a:	4915      	ldr	r1, [pc, #84]	; (80055f0 <Uart_isr+0x188>)
 800559c:	5c8a      	ldrb	r2, [r1, r2]
 800559e:	701a      	strb	r2, [r3, #0]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80055a0:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <Uart_isr+0x188>)
 80055a2:	2381      	movs	r3, #129	; 0x81
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	58d3      	ldr	r3, [r2, r3]
 80055a8:	3301      	adds	r3, #1
 80055aa:	05db      	lsls	r3, r3, #23
 80055ac:	0dd9      	lsrs	r1, r3, #23
 80055ae:	4a10      	ldr	r2, [pc, #64]	; (80055f0 <Uart_isr+0x188>)
 80055b0:	2381      	movs	r3, #129	; 0x81
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	50d1      	str	r1, [r2, r3]
        	      huart->Instance->ISR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69db      	ldr	r3, [r3, #28]
        	      huart->Instance->TDR = c;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	183a      	adds	r2, r7, r0
 80055c2:	7812      	ldrb	r2, [r2, #0]
 80055c4:	b292      	uxth	r2, r2
 80055c6:	851a      	strh	r2, [r3, #40]	; 0x28
    	return;
 80055c8:	e001      	b.n	80055ce <Uart_isr+0x166>
        return;
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	e000      	b.n	80055d0 <Uart_isr+0x168>
    	return;
 80055ce:	46c0      	nop			; (mov r8, r8)
    }
}
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b006      	add	sp, #24
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	2000028c 	.word	0x2000028c
 80055dc:	20000c50 	.word	0x20000c50
 80055e0:	20000208 	.word	0x20000208
 80055e4:	20000c58 	.word	0x20000c58
 80055e8:	08008ca8 	.word	0x08008ca8
 80055ec:	20000638 	.word	0x20000638
 80055f0:	20000a48 	.word	0x20000a48

080055f4 <__errno>:
 80055f4:	4b01      	ldr	r3, [pc, #4]	; (80055fc <__errno+0x8>)
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	4770      	bx	lr
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	2000001c 	.word	0x2000001c

08005600 <__libc_init_array>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	2600      	movs	r6, #0
 8005604:	4d0c      	ldr	r5, [pc, #48]	; (8005638 <__libc_init_array+0x38>)
 8005606:	4c0d      	ldr	r4, [pc, #52]	; (800563c <__libc_init_array+0x3c>)
 8005608:	1b64      	subs	r4, r4, r5
 800560a:	10a4      	asrs	r4, r4, #2
 800560c:	42a6      	cmp	r6, r4
 800560e:	d109      	bne.n	8005624 <__libc_init_array+0x24>
 8005610:	2600      	movs	r6, #0
 8005612:	f002 ffff 	bl	8008614 <_init>
 8005616:	4d0a      	ldr	r5, [pc, #40]	; (8005640 <__libc_init_array+0x40>)
 8005618:	4c0a      	ldr	r4, [pc, #40]	; (8005644 <__libc_init_array+0x44>)
 800561a:	1b64      	subs	r4, r4, r5
 800561c:	10a4      	asrs	r4, r4, #2
 800561e:	42a6      	cmp	r6, r4
 8005620:	d105      	bne.n	800562e <__libc_init_array+0x2e>
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	00b3      	lsls	r3, r6, #2
 8005626:	58eb      	ldr	r3, [r5, r3]
 8005628:	4798      	blx	r3
 800562a:	3601      	adds	r6, #1
 800562c:	e7ee      	b.n	800560c <__libc_init_array+0xc>
 800562e:	00b3      	lsls	r3, r6, #2
 8005630:	58eb      	ldr	r3, [r5, r3]
 8005632:	4798      	blx	r3
 8005634:	3601      	adds	r6, #1
 8005636:	e7f2      	b.n	800561e <__libc_init_array+0x1e>
 8005638:	0800912c 	.word	0x0800912c
 800563c:	0800912c 	.word	0x0800912c
 8005640:	0800912c 	.word	0x0800912c
 8005644:	08009130 	.word	0x08009130

08005648 <memset>:
 8005648:	0003      	movs	r3, r0
 800564a:	1882      	adds	r2, r0, r2
 800564c:	4293      	cmp	r3, r2
 800564e:	d100      	bne.n	8005652 <memset+0xa>
 8005650:	4770      	bx	lr
 8005652:	7019      	strb	r1, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	e7f9      	b.n	800564c <memset+0x4>

08005658 <__cvt>:
 8005658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565a:	001e      	movs	r6, r3
 800565c:	2300      	movs	r3, #0
 800565e:	0014      	movs	r4, r2
 8005660:	b08b      	sub	sp, #44	; 0x2c
 8005662:	429e      	cmp	r6, r3
 8005664:	da04      	bge.n	8005670 <__cvt+0x18>
 8005666:	2180      	movs	r1, #128	; 0x80
 8005668:	0609      	lsls	r1, r1, #24
 800566a:	1873      	adds	r3, r6, r1
 800566c:	001e      	movs	r6, r3
 800566e:	232d      	movs	r3, #45	; 0x2d
 8005670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005672:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005674:	7013      	strb	r3, [r2, #0]
 8005676:	2320      	movs	r3, #32
 8005678:	2203      	movs	r2, #3
 800567a:	439f      	bics	r7, r3
 800567c:	2f46      	cmp	r7, #70	; 0x46
 800567e:	d007      	beq.n	8005690 <__cvt+0x38>
 8005680:	003b      	movs	r3, r7
 8005682:	3b45      	subs	r3, #69	; 0x45
 8005684:	4259      	negs	r1, r3
 8005686:	414b      	adcs	r3, r1
 8005688:	9910      	ldr	r1, [sp, #64]	; 0x40
 800568a:	3a01      	subs	r2, #1
 800568c:	18cb      	adds	r3, r1, r3
 800568e:	9310      	str	r3, [sp, #64]	; 0x40
 8005690:	ab09      	add	r3, sp, #36	; 0x24
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	ab08      	add	r3, sp, #32
 8005696:	9303      	str	r3, [sp, #12]
 8005698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800569a:	9200      	str	r2, [sp, #0]
 800569c:	9302      	str	r3, [sp, #8]
 800569e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056a0:	0022      	movs	r2, r4
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	0033      	movs	r3, r6
 80056a6:	f000 fd35 	bl	8006114 <_dtoa_r>
 80056aa:	0005      	movs	r5, r0
 80056ac:	2f47      	cmp	r7, #71	; 0x47
 80056ae:	d102      	bne.n	80056b6 <__cvt+0x5e>
 80056b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056b2:	07db      	lsls	r3, r3, #31
 80056b4:	d528      	bpl.n	8005708 <__cvt+0xb0>
 80056b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056b8:	18eb      	adds	r3, r5, r3
 80056ba:	9307      	str	r3, [sp, #28]
 80056bc:	2f46      	cmp	r7, #70	; 0x46
 80056be:	d114      	bne.n	80056ea <__cvt+0x92>
 80056c0:	782b      	ldrb	r3, [r5, #0]
 80056c2:	2b30      	cmp	r3, #48	; 0x30
 80056c4:	d10c      	bne.n	80056e0 <__cvt+0x88>
 80056c6:	2200      	movs	r2, #0
 80056c8:	2300      	movs	r3, #0
 80056ca:	0020      	movs	r0, r4
 80056cc:	0031      	movs	r1, r6
 80056ce:	f7fa fec7 	bl	8000460 <__aeabi_dcmpeq>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d104      	bne.n	80056e0 <__cvt+0x88>
 80056d6:	2301      	movs	r3, #1
 80056d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056e2:	9a07      	ldr	r2, [sp, #28]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	18d3      	adds	r3, r2, r3
 80056e8:	9307      	str	r3, [sp, #28]
 80056ea:	2200      	movs	r2, #0
 80056ec:	2300      	movs	r3, #0
 80056ee:	0020      	movs	r0, r4
 80056f0:	0031      	movs	r1, r6
 80056f2:	f7fa feb5 	bl	8000460 <__aeabi_dcmpeq>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d001      	beq.n	80056fe <__cvt+0xa6>
 80056fa:	9b07      	ldr	r3, [sp, #28]
 80056fc:	9309      	str	r3, [sp, #36]	; 0x24
 80056fe:	2230      	movs	r2, #48	; 0x30
 8005700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005702:	9907      	ldr	r1, [sp, #28]
 8005704:	428b      	cmp	r3, r1
 8005706:	d306      	bcc.n	8005716 <__cvt+0xbe>
 8005708:	0028      	movs	r0, r5
 800570a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800570c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800570e:	1b5b      	subs	r3, r3, r5
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	b00b      	add	sp, #44	; 0x2c
 8005714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	9109      	str	r1, [sp, #36]	; 0x24
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e7f0      	b.n	8005700 <__cvt+0xa8>

0800571e <__exponent>:
 800571e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005720:	1c83      	adds	r3, r0, #2
 8005722:	b087      	sub	sp, #28
 8005724:	9303      	str	r3, [sp, #12]
 8005726:	0005      	movs	r5, r0
 8005728:	000c      	movs	r4, r1
 800572a:	232b      	movs	r3, #43	; 0x2b
 800572c:	7002      	strb	r2, [r0, #0]
 800572e:	2900      	cmp	r1, #0
 8005730:	da01      	bge.n	8005736 <__exponent+0x18>
 8005732:	424c      	negs	r4, r1
 8005734:	3302      	adds	r3, #2
 8005736:	706b      	strb	r3, [r5, #1]
 8005738:	2c09      	cmp	r4, #9
 800573a:	dd31      	ble.n	80057a0 <__exponent+0x82>
 800573c:	270a      	movs	r7, #10
 800573e:	ab04      	add	r3, sp, #16
 8005740:	1dde      	adds	r6, r3, #7
 8005742:	0020      	movs	r0, r4
 8005744:	0039      	movs	r1, r7
 8005746:	9601      	str	r6, [sp, #4]
 8005748:	f7fa fe74 	bl	8000434 <__aeabi_idivmod>
 800574c:	3e01      	subs	r6, #1
 800574e:	3130      	adds	r1, #48	; 0x30
 8005750:	0020      	movs	r0, r4
 8005752:	7031      	strb	r1, [r6, #0]
 8005754:	0039      	movs	r1, r7
 8005756:	9402      	str	r4, [sp, #8]
 8005758:	f7fa fd86 	bl	8000268 <__divsi3>
 800575c:	9b02      	ldr	r3, [sp, #8]
 800575e:	0004      	movs	r4, r0
 8005760:	2b63      	cmp	r3, #99	; 0x63
 8005762:	dcee      	bgt.n	8005742 <__exponent+0x24>
 8005764:	9b01      	ldr	r3, [sp, #4]
 8005766:	3430      	adds	r4, #48	; 0x30
 8005768:	1e9a      	subs	r2, r3, #2
 800576a:	0013      	movs	r3, r2
 800576c:	9903      	ldr	r1, [sp, #12]
 800576e:	7014      	strb	r4, [r2, #0]
 8005770:	a804      	add	r0, sp, #16
 8005772:	3007      	adds	r0, #7
 8005774:	4298      	cmp	r0, r3
 8005776:	d80e      	bhi.n	8005796 <__exponent+0x78>
 8005778:	ab04      	add	r3, sp, #16
 800577a:	3307      	adds	r3, #7
 800577c:	2000      	movs	r0, #0
 800577e:	429a      	cmp	r2, r3
 8005780:	d804      	bhi.n	800578c <__exponent+0x6e>
 8005782:	ab04      	add	r3, sp, #16
 8005784:	3009      	adds	r0, #9
 8005786:	18c0      	adds	r0, r0, r3
 8005788:	9b01      	ldr	r3, [sp, #4]
 800578a:	1ac0      	subs	r0, r0, r3
 800578c:	9b03      	ldr	r3, [sp, #12]
 800578e:	1818      	adds	r0, r3, r0
 8005790:	1b40      	subs	r0, r0, r5
 8005792:	b007      	add	sp, #28
 8005794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005796:	7818      	ldrb	r0, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	7008      	strb	r0, [r1, #0]
 800579c:	3101      	adds	r1, #1
 800579e:	e7e7      	b.n	8005770 <__exponent+0x52>
 80057a0:	2330      	movs	r3, #48	; 0x30
 80057a2:	18e4      	adds	r4, r4, r3
 80057a4:	70ab      	strb	r3, [r5, #2]
 80057a6:	1d28      	adds	r0, r5, #4
 80057a8:	70ec      	strb	r4, [r5, #3]
 80057aa:	e7f1      	b.n	8005790 <__exponent+0x72>

080057ac <_printf_float>:
 80057ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ae:	b095      	sub	sp, #84	; 0x54
 80057b0:	000c      	movs	r4, r1
 80057b2:	9209      	str	r2, [sp, #36]	; 0x24
 80057b4:	001e      	movs	r6, r3
 80057b6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80057b8:	0007      	movs	r7, r0
 80057ba:	f001 fac5 	bl	8006d48 <_localeconv_r>
 80057be:	6803      	ldr	r3, [r0, #0]
 80057c0:	0018      	movs	r0, r3
 80057c2:	930c      	str	r3, [sp, #48]	; 0x30
 80057c4:	f7fa fcaa 	bl	800011c <strlen>
 80057c8:	2300      	movs	r3, #0
 80057ca:	9312      	str	r3, [sp, #72]	; 0x48
 80057cc:	7e23      	ldrb	r3, [r4, #24]
 80057ce:	2207      	movs	r2, #7
 80057d0:	930a      	str	r3, [sp, #40]	; 0x28
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	900e      	str	r0, [sp, #56]	; 0x38
 80057d6:	930d      	str	r3, [sp, #52]	; 0x34
 80057d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057da:	682b      	ldr	r3, [r5, #0]
 80057dc:	05c9      	lsls	r1, r1, #23
 80057de:	d547      	bpl.n	8005870 <_printf_float+0xc4>
 80057e0:	189b      	adds	r3, r3, r2
 80057e2:	4393      	bics	r3, r2
 80057e4:	001a      	movs	r2, r3
 80057e6:	3208      	adds	r2, #8
 80057e8:	602a      	str	r2, [r5, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	64a2      	str	r2, [r4, #72]	; 0x48
 80057f0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80057f2:	2201      	movs	r2, #1
 80057f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80057f6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80057f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80057fa:	006b      	lsls	r3, r5, #1
 80057fc:	085b      	lsrs	r3, r3, #1
 80057fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005800:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005802:	4ba7      	ldr	r3, [pc, #668]	; (8005aa0 <_printf_float+0x2f4>)
 8005804:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005806:	4252      	negs	r2, r2
 8005808:	f7fc fb94 	bl	8001f34 <__aeabi_dcmpun>
 800580c:	2800      	cmp	r0, #0
 800580e:	d131      	bne.n	8005874 <_printf_float+0xc8>
 8005810:	2201      	movs	r2, #1
 8005812:	4ba3      	ldr	r3, [pc, #652]	; (8005aa0 <_printf_float+0x2f4>)
 8005814:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005816:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005818:	4252      	negs	r2, r2
 800581a:	f7fa fe31 	bl	8000480 <__aeabi_dcmple>
 800581e:	2800      	cmp	r0, #0
 8005820:	d128      	bne.n	8005874 <_printf_float+0xc8>
 8005822:	2200      	movs	r2, #0
 8005824:	2300      	movs	r3, #0
 8005826:	0029      	movs	r1, r5
 8005828:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800582a:	f7fa fe1f 	bl	800046c <__aeabi_dcmplt>
 800582e:	2800      	cmp	r0, #0
 8005830:	d003      	beq.n	800583a <_printf_float+0x8e>
 8005832:	0023      	movs	r3, r4
 8005834:	222d      	movs	r2, #45	; 0x2d
 8005836:	3343      	adds	r3, #67	; 0x43
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800583c:	4d99      	ldr	r5, [pc, #612]	; (8005aa4 <_printf_float+0x2f8>)
 800583e:	2b47      	cmp	r3, #71	; 0x47
 8005840:	d900      	bls.n	8005844 <_printf_float+0x98>
 8005842:	4d99      	ldr	r5, [pc, #612]	; (8005aa8 <_printf_float+0x2fc>)
 8005844:	2303      	movs	r3, #3
 8005846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005848:	6123      	str	r3, [r4, #16]
 800584a:	3301      	adds	r3, #1
 800584c:	439a      	bics	r2, r3
 800584e:	2300      	movs	r3, #0
 8005850:	6022      	str	r2, [r4, #0]
 8005852:	930b      	str	r3, [sp, #44]	; 0x2c
 8005854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005856:	0021      	movs	r1, r4
 8005858:	0038      	movs	r0, r7
 800585a:	9600      	str	r6, [sp, #0]
 800585c:	aa13      	add	r2, sp, #76	; 0x4c
 800585e:	f000 f9e7 	bl	8005c30 <_printf_common>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d000      	beq.n	8005868 <_printf_float+0xbc>
 8005866:	e0a2      	b.n	80059ae <_printf_float+0x202>
 8005868:	2001      	movs	r0, #1
 800586a:	4240      	negs	r0, r0
 800586c:	b015      	add	sp, #84	; 0x54
 800586e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005870:	3307      	adds	r3, #7
 8005872:	e7b6      	b.n	80057e2 <_printf_float+0x36>
 8005874:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005876:	002b      	movs	r3, r5
 8005878:	0010      	movs	r0, r2
 800587a:	0029      	movs	r1, r5
 800587c:	f7fc fb5a 	bl	8001f34 <__aeabi_dcmpun>
 8005880:	2800      	cmp	r0, #0
 8005882:	d00b      	beq.n	800589c <_printf_float+0xf0>
 8005884:	2d00      	cmp	r5, #0
 8005886:	da03      	bge.n	8005890 <_printf_float+0xe4>
 8005888:	0023      	movs	r3, r4
 800588a:	222d      	movs	r2, #45	; 0x2d
 800588c:	3343      	adds	r3, #67	; 0x43
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005892:	4d86      	ldr	r5, [pc, #536]	; (8005aac <_printf_float+0x300>)
 8005894:	2b47      	cmp	r3, #71	; 0x47
 8005896:	d9d5      	bls.n	8005844 <_printf_float+0x98>
 8005898:	4d85      	ldr	r5, [pc, #532]	; (8005ab0 <_printf_float+0x304>)
 800589a:	e7d3      	b.n	8005844 <_printf_float+0x98>
 800589c:	2220      	movs	r2, #32
 800589e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	4391      	bics	r1, r2
 80058a4:	910f      	str	r1, [sp, #60]	; 0x3c
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	d149      	bne.n	800593e <_printf_float+0x192>
 80058aa:	3307      	adds	r3, #7
 80058ac:	6063      	str	r3, [r4, #4]
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	2200      	movs	r2, #0
 80058b8:	9206      	str	r2, [sp, #24]
 80058ba:	aa12      	add	r2, sp, #72	; 0x48
 80058bc:	9205      	str	r2, [sp, #20]
 80058be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058c0:	a908      	add	r1, sp, #32
 80058c2:	9204      	str	r2, [sp, #16]
 80058c4:	aa11      	add	r2, sp, #68	; 0x44
 80058c6:	9203      	str	r2, [sp, #12]
 80058c8:	2223      	movs	r2, #35	; 0x23
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	6863      	ldr	r3, [r4, #4]
 80058d0:	1852      	adds	r2, r2, r1
 80058d2:	9202      	str	r2, [sp, #8]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	0038      	movs	r0, r7
 80058d8:	002b      	movs	r3, r5
 80058da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058dc:	f7ff febc 	bl	8005658 <__cvt>
 80058e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058e2:	0005      	movs	r5, r0
 80058e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80058e6:	2b47      	cmp	r3, #71	; 0x47
 80058e8:	d108      	bne.n	80058fc <_printf_float+0x150>
 80058ea:	1ccb      	adds	r3, r1, #3
 80058ec:	db02      	blt.n	80058f4 <_printf_float+0x148>
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	4299      	cmp	r1, r3
 80058f2:	dd48      	ble.n	8005986 <_printf_float+0x1da>
 80058f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f6:	3b02      	subs	r3, #2
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	930a      	str	r3, [sp, #40]	; 0x28
 80058fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058fe:	2b65      	cmp	r3, #101	; 0x65
 8005900:	d824      	bhi.n	800594c <_printf_float+0x1a0>
 8005902:	0020      	movs	r0, r4
 8005904:	001a      	movs	r2, r3
 8005906:	3901      	subs	r1, #1
 8005908:	3050      	adds	r0, #80	; 0x50
 800590a:	9111      	str	r1, [sp, #68]	; 0x44
 800590c:	f7ff ff07 	bl	800571e <__exponent>
 8005910:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005912:	900b      	str	r0, [sp, #44]	; 0x2c
 8005914:	1813      	adds	r3, r2, r0
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	2a01      	cmp	r2, #1
 800591a:	dc02      	bgt.n	8005922 <_printf_float+0x176>
 800591c:	6822      	ldr	r2, [r4, #0]
 800591e:	07d2      	lsls	r2, r2, #31
 8005920:	d501      	bpl.n	8005926 <_printf_float+0x17a>
 8005922:	3301      	adds	r3, #1
 8005924:	6123      	str	r3, [r4, #16]
 8005926:	2323      	movs	r3, #35	; 0x23
 8005928:	aa08      	add	r2, sp, #32
 800592a:	189b      	adds	r3, r3, r2
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d100      	bne.n	8005934 <_printf_float+0x188>
 8005932:	e78f      	b.n	8005854 <_printf_float+0xa8>
 8005934:	0023      	movs	r3, r4
 8005936:	222d      	movs	r2, #45	; 0x2d
 8005938:	3343      	adds	r3, #67	; 0x43
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e78a      	b.n	8005854 <_printf_float+0xa8>
 800593e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005940:	2a47      	cmp	r2, #71	; 0x47
 8005942:	d1b4      	bne.n	80058ae <_printf_float+0x102>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1b2      	bne.n	80058ae <_printf_float+0x102>
 8005948:	3301      	adds	r3, #1
 800594a:	e7af      	b.n	80058ac <_printf_float+0x100>
 800594c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800594e:	2b66      	cmp	r3, #102	; 0x66
 8005950:	d11b      	bne.n	800598a <_printf_float+0x1de>
 8005952:	6863      	ldr	r3, [r4, #4]
 8005954:	2900      	cmp	r1, #0
 8005956:	dd0d      	ble.n	8005974 <_printf_float+0x1c8>
 8005958:	6121      	str	r1, [r4, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <_printf_float+0x1b8>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	07d2      	lsls	r2, r2, #31
 8005962:	d502      	bpl.n	800596a <_printf_float+0x1be>
 8005964:	3301      	adds	r3, #1
 8005966:	1859      	adds	r1, r3, r1
 8005968:	6121      	str	r1, [r4, #16]
 800596a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800596c:	65a3      	str	r3, [r4, #88]	; 0x58
 800596e:	2300      	movs	r3, #0
 8005970:	930b      	str	r3, [sp, #44]	; 0x2c
 8005972:	e7d8      	b.n	8005926 <_printf_float+0x17a>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d103      	bne.n	8005980 <_printf_float+0x1d4>
 8005978:	2201      	movs	r2, #1
 800597a:	6821      	ldr	r1, [r4, #0]
 800597c:	4211      	tst	r1, r2
 800597e:	d000      	beq.n	8005982 <_printf_float+0x1d6>
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	6122      	str	r2, [r4, #16]
 8005984:	e7f1      	b.n	800596a <_printf_float+0x1be>
 8005986:	2367      	movs	r3, #103	; 0x67
 8005988:	930a      	str	r3, [sp, #40]	; 0x28
 800598a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800598c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800598e:	4293      	cmp	r3, r2
 8005990:	db06      	blt.n	80059a0 <_printf_float+0x1f4>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	07d2      	lsls	r2, r2, #31
 8005998:	d5e7      	bpl.n	800596a <_printf_float+0x1be>
 800599a:	3301      	adds	r3, #1
 800599c:	6123      	str	r3, [r4, #16]
 800599e:	e7e4      	b.n	800596a <_printf_float+0x1be>
 80059a0:	2101      	movs	r1, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	dc01      	bgt.n	80059aa <_printf_float+0x1fe>
 80059a6:	1849      	adds	r1, r1, r1
 80059a8:	1ac9      	subs	r1, r1, r3
 80059aa:	1852      	adds	r2, r2, r1
 80059ac:	e7e9      	b.n	8005982 <_printf_float+0x1d6>
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	0553      	lsls	r3, r2, #21
 80059b2:	d407      	bmi.n	80059c4 <_printf_float+0x218>
 80059b4:	6923      	ldr	r3, [r4, #16]
 80059b6:	002a      	movs	r2, r5
 80059b8:	0038      	movs	r0, r7
 80059ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059bc:	47b0      	blx	r6
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	d128      	bne.n	8005a14 <_printf_float+0x268>
 80059c2:	e751      	b.n	8005868 <_printf_float+0xbc>
 80059c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c6:	2b65      	cmp	r3, #101	; 0x65
 80059c8:	d800      	bhi.n	80059cc <_printf_float+0x220>
 80059ca:	e0e1      	b.n	8005b90 <_printf_float+0x3e4>
 80059cc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80059ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80059d0:	2200      	movs	r2, #0
 80059d2:	2300      	movs	r3, #0
 80059d4:	f7fa fd44 	bl	8000460 <__aeabi_dcmpeq>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d031      	beq.n	8005a40 <_printf_float+0x294>
 80059dc:	2301      	movs	r3, #1
 80059de:	0038      	movs	r0, r7
 80059e0:	4a34      	ldr	r2, [pc, #208]	; (8005ab4 <_printf_float+0x308>)
 80059e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059e4:	47b0      	blx	r6
 80059e6:	1c43      	adds	r3, r0, #1
 80059e8:	d100      	bne.n	80059ec <_printf_float+0x240>
 80059ea:	e73d      	b.n	8005868 <_printf_float+0xbc>
 80059ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059f0:	4293      	cmp	r3, r2
 80059f2:	db02      	blt.n	80059fa <_printf_float+0x24e>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	07db      	lsls	r3, r3, #31
 80059f8:	d50c      	bpl.n	8005a14 <_printf_float+0x268>
 80059fa:	0038      	movs	r0, r7
 80059fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a02:	47b0      	blx	r6
 8005a04:	2500      	movs	r5, #0
 8005a06:	1c43      	adds	r3, r0, #1
 8005a08:	d100      	bne.n	8005a0c <_printf_float+0x260>
 8005a0a:	e72d      	b.n	8005868 <_printf_float+0xbc>
 8005a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	42ab      	cmp	r3, r5
 8005a12:	dc0a      	bgt.n	8005a2a <_printf_float+0x27e>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	079b      	lsls	r3, r3, #30
 8005a18:	d500      	bpl.n	8005a1c <_printf_float+0x270>
 8005a1a:	e106      	b.n	8005c2a <_printf_float+0x47e>
 8005a1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a1e:	68e0      	ldr	r0, [r4, #12]
 8005a20:	4298      	cmp	r0, r3
 8005a22:	db00      	blt.n	8005a26 <_printf_float+0x27a>
 8005a24:	e722      	b.n	800586c <_printf_float+0xc0>
 8005a26:	0018      	movs	r0, r3
 8005a28:	e720      	b.n	800586c <_printf_float+0xc0>
 8005a2a:	0022      	movs	r2, r4
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	0038      	movs	r0, r7
 8005a30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a32:	321a      	adds	r2, #26
 8005a34:	47b0      	blx	r6
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	d100      	bne.n	8005a3c <_printf_float+0x290>
 8005a3a:	e715      	b.n	8005868 <_printf_float+0xbc>
 8005a3c:	3501      	adds	r5, #1
 8005a3e:	e7e5      	b.n	8005a0c <_printf_float+0x260>
 8005a40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dc38      	bgt.n	8005ab8 <_printf_float+0x30c>
 8005a46:	2301      	movs	r3, #1
 8005a48:	0038      	movs	r0, r7
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <_printf_float+0x308>)
 8005a4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a4e:	47b0      	blx	r6
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d100      	bne.n	8005a56 <_printf_float+0x2aa>
 8005a54:	e708      	b.n	8005868 <_printf_float+0xbc>
 8005a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	d102      	bne.n	8005a64 <_printf_float+0x2b8>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	07db      	lsls	r3, r3, #31
 8005a62:	d5d7      	bpl.n	8005a14 <_printf_float+0x268>
 8005a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a66:	0038      	movs	r0, r7
 8005a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a6c:	47b0      	blx	r6
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d100      	bne.n	8005a74 <_printf_float+0x2c8>
 8005a72:	e6f9      	b.n	8005868 <_printf_float+0xbc>
 8005a74:	2300      	movs	r3, #0
 8005a76:	930a      	str	r3, [sp, #40]	; 0x28
 8005a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a7c:	425b      	negs	r3, r3
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	dc01      	bgt.n	8005a86 <_printf_float+0x2da>
 8005a82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a84:	e797      	b.n	80059b6 <_printf_float+0x20a>
 8005a86:	0022      	movs	r2, r4
 8005a88:	2301      	movs	r3, #1
 8005a8a:	0038      	movs	r0, r7
 8005a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a8e:	321a      	adds	r2, #26
 8005a90:	47b0      	blx	r6
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	d100      	bne.n	8005a98 <_printf_float+0x2ec>
 8005a96:	e6e7      	b.n	8005868 <_printf_float+0xbc>
 8005a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	e7eb      	b.n	8005a76 <_printf_float+0x2ca>
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	7fefffff 	.word	0x7fefffff
 8005aa4:	08008d54 	.word	0x08008d54
 8005aa8:	08008d58 	.word	0x08008d58
 8005aac:	08008d5c 	.word	0x08008d5c
 8005ab0:	08008d60 	.word	0x08008d60
 8005ab4:	08008d64 	.word	0x08008d64
 8005ab8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005aba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005abc:	920a      	str	r2, [sp, #40]	; 0x28
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	dd00      	ble.n	8005ac4 <_printf_float+0x318>
 8005ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	dc3c      	bgt.n	8005b44 <_printf_float+0x398>
 8005aca:	2300      	movs	r3, #0
 8005acc:	930d      	str	r3, [sp, #52]	; 0x34
 8005ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	17db      	asrs	r3, r3, #31
 8005ad4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8005adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ade:	4013      	ands	r3, r2
 8005ae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	dc34      	bgt.n	8005b54 <_printf_float+0x3a8>
 8005aea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005aec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005aee:	4293      	cmp	r3, r2
 8005af0:	db3d      	blt.n	8005b6e <_printf_float+0x3c2>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	07db      	lsls	r3, r3, #31
 8005af6:	d43a      	bmi.n	8005b6e <_printf_float+0x3c2>
 8005af8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005afc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	1a52      	subs	r2, r2, r1
 8005b02:	920a      	str	r2, [sp, #40]	; 0x28
 8005b04:	429a      	cmp	r2, r3
 8005b06:	dd00      	ble.n	8005b0a <_printf_float+0x35e>
 8005b08:	930a      	str	r3, [sp, #40]	; 0x28
 8005b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dc36      	bgt.n	8005b7e <_printf_float+0x3d2>
 8005b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b12:	2500      	movs	r5, #0
 8005b14:	43db      	mvns	r3, r3
 8005b16:	17db      	asrs	r3, r3, #31
 8005b18:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005b1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b24:	400a      	ands	r2, r1
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dc00      	bgt.n	8005b2e <_printf_float+0x382>
 8005b2c:	e772      	b.n	8005a14 <_printf_float+0x268>
 8005b2e:	0022      	movs	r2, r4
 8005b30:	2301      	movs	r3, #1
 8005b32:	0038      	movs	r0, r7
 8005b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b36:	321a      	adds	r2, #26
 8005b38:	47b0      	blx	r6
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d100      	bne.n	8005b40 <_printf_float+0x394>
 8005b3e:	e693      	b.n	8005868 <_printf_float+0xbc>
 8005b40:	3501      	adds	r5, #1
 8005b42:	e7ea      	b.n	8005b1a <_printf_float+0x36e>
 8005b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b46:	002a      	movs	r2, r5
 8005b48:	0038      	movs	r0, r7
 8005b4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b4c:	47b0      	blx	r6
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	d1bb      	bne.n	8005aca <_printf_float+0x31e>
 8005b52:	e689      	b.n	8005868 <_printf_float+0xbc>
 8005b54:	0022      	movs	r2, r4
 8005b56:	2301      	movs	r3, #1
 8005b58:	0038      	movs	r0, r7
 8005b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b5c:	321a      	adds	r2, #26
 8005b5e:	47b0      	blx	r6
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d100      	bne.n	8005b66 <_printf_float+0x3ba>
 8005b64:	e680      	b.n	8005868 <_printf_float+0xbc>
 8005b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b68:	3301      	adds	r3, #1
 8005b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8005b6c:	e7b3      	b.n	8005ad6 <_printf_float+0x32a>
 8005b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b70:	0038      	movs	r0, r7
 8005b72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b76:	47b0      	blx	r6
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d1bd      	bne.n	8005af8 <_printf_float+0x34c>
 8005b7c:	e674      	b.n	8005868 <_printf_float+0xbc>
 8005b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b80:	0038      	movs	r0, r7
 8005b82:	18ea      	adds	r2, r5, r3
 8005b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b88:	47b0      	blx	r6
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	d1c0      	bne.n	8005b10 <_printf_float+0x364>
 8005b8e:	e66b      	b.n	8005868 <_printf_float+0xbc>
 8005b90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	dc02      	bgt.n	8005b9c <_printf_float+0x3f0>
 8005b96:	2301      	movs	r3, #1
 8005b98:	421a      	tst	r2, r3
 8005b9a:	d034      	beq.n	8005c06 <_printf_float+0x45a>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	002a      	movs	r2, r5
 8005ba0:	0038      	movs	r0, r7
 8005ba2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ba4:	47b0      	blx	r6
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	d100      	bne.n	8005bac <_printf_float+0x400>
 8005baa:	e65d      	b.n	8005868 <_printf_float+0xbc>
 8005bac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bae:	0038      	movs	r0, r7
 8005bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bb4:	47b0      	blx	r6
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	d100      	bne.n	8005bbc <_printf_float+0x410>
 8005bba:	e655      	b.n	8005868 <_printf_float+0xbc>
 8005bbc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005bbe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f7fa fc4c 	bl	8000460 <__aeabi_dcmpeq>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d11a      	bne.n	8005c02 <_printf_float+0x456>
 8005bcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bce:	1c6a      	adds	r2, r5, #1
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	0038      	movs	r0, r7
 8005bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bd6:	47b0      	blx	r6
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d10e      	bne.n	8005bfa <_printf_float+0x44e>
 8005bdc:	e644      	b.n	8005868 <_printf_float+0xbc>
 8005bde:	0022      	movs	r2, r4
 8005be0:	2301      	movs	r3, #1
 8005be2:	0038      	movs	r0, r7
 8005be4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005be6:	321a      	adds	r2, #26
 8005be8:	47b0      	blx	r6
 8005bea:	1c43      	adds	r3, r0, #1
 8005bec:	d100      	bne.n	8005bf0 <_printf_float+0x444>
 8005bee:	e63b      	b.n	8005868 <_printf_float+0xbc>
 8005bf0:	3501      	adds	r5, #1
 8005bf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	42ab      	cmp	r3, r5
 8005bf8:	dcf1      	bgt.n	8005bde <_printf_float+0x432>
 8005bfa:	0022      	movs	r2, r4
 8005bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bfe:	3250      	adds	r2, #80	; 0x50
 8005c00:	e6da      	b.n	80059b8 <_printf_float+0x20c>
 8005c02:	2500      	movs	r5, #0
 8005c04:	e7f5      	b.n	8005bf2 <_printf_float+0x446>
 8005c06:	002a      	movs	r2, r5
 8005c08:	e7e3      	b.n	8005bd2 <_printf_float+0x426>
 8005c0a:	0022      	movs	r2, r4
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	0038      	movs	r0, r7
 8005c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c12:	3219      	adds	r2, #25
 8005c14:	47b0      	blx	r6
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	d100      	bne.n	8005c1c <_printf_float+0x470>
 8005c1a:	e625      	b.n	8005868 <_printf_float+0xbc>
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dcf0      	bgt.n	8005c0a <_printf_float+0x45e>
 8005c28:	e6f8      	b.n	8005a1c <_printf_float+0x270>
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	e7f7      	b.n	8005c1e <_printf_float+0x472>
 8005c2e:	46c0      	nop			; (mov r8, r8)

08005c30 <_printf_common>:
 8005c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c32:	0015      	movs	r5, r2
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	688a      	ldr	r2, [r1, #8]
 8005c38:	690b      	ldr	r3, [r1, #16]
 8005c3a:	000c      	movs	r4, r1
 8005c3c:	9000      	str	r0, [sp, #0]
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	da00      	bge.n	8005c44 <_printf_common+0x14>
 8005c42:	0013      	movs	r3, r2
 8005c44:	0022      	movs	r2, r4
 8005c46:	602b      	str	r3, [r5, #0]
 8005c48:	3243      	adds	r2, #67	; 0x43
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	d001      	beq.n	8005c54 <_printf_common+0x24>
 8005c50:	3301      	adds	r3, #1
 8005c52:	602b      	str	r3, [r5, #0]
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	069b      	lsls	r3, r3, #26
 8005c58:	d502      	bpl.n	8005c60 <_printf_common+0x30>
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	602b      	str	r3, [r5, #0]
 8005c60:	6822      	ldr	r2, [r4, #0]
 8005c62:	2306      	movs	r3, #6
 8005c64:	0017      	movs	r7, r2
 8005c66:	401f      	ands	r7, r3
 8005c68:	421a      	tst	r2, r3
 8005c6a:	d027      	beq.n	8005cbc <_printf_common+0x8c>
 8005c6c:	0023      	movs	r3, r4
 8005c6e:	3343      	adds	r3, #67	; 0x43
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	1e5a      	subs	r2, r3, #1
 8005c74:	4193      	sbcs	r3, r2
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	0692      	lsls	r2, r2, #26
 8005c7a:	d430      	bmi.n	8005cde <_printf_common+0xae>
 8005c7c:	0022      	movs	r2, r4
 8005c7e:	9901      	ldr	r1, [sp, #4]
 8005c80:	9800      	ldr	r0, [sp, #0]
 8005c82:	9e08      	ldr	r6, [sp, #32]
 8005c84:	3243      	adds	r2, #67	; 0x43
 8005c86:	47b0      	blx	r6
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d025      	beq.n	8005cd8 <_printf_common+0xa8>
 8005c8c:	2306      	movs	r3, #6
 8005c8e:	6820      	ldr	r0, [r4, #0]
 8005c90:	682a      	ldr	r2, [r5, #0]
 8005c92:	68e1      	ldr	r1, [r4, #12]
 8005c94:	2500      	movs	r5, #0
 8005c96:	4003      	ands	r3, r0
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d103      	bne.n	8005ca4 <_printf_common+0x74>
 8005c9c:	1a8d      	subs	r5, r1, r2
 8005c9e:	43eb      	mvns	r3, r5
 8005ca0:	17db      	asrs	r3, r3, #31
 8005ca2:	401d      	ands	r5, r3
 8005ca4:	68a3      	ldr	r3, [r4, #8]
 8005ca6:	6922      	ldr	r2, [r4, #16]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	dd01      	ble.n	8005cb0 <_printf_common+0x80>
 8005cac:	1a9b      	subs	r3, r3, r2
 8005cae:	18ed      	adds	r5, r5, r3
 8005cb0:	2700      	movs	r7, #0
 8005cb2:	42bd      	cmp	r5, r7
 8005cb4:	d120      	bne.n	8005cf8 <_printf_common+0xc8>
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	e010      	b.n	8005cdc <_printf_common+0xac>
 8005cba:	3701      	adds	r7, #1
 8005cbc:	68e3      	ldr	r3, [r4, #12]
 8005cbe:	682a      	ldr	r2, [r5, #0]
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	42bb      	cmp	r3, r7
 8005cc4:	ddd2      	ble.n	8005c6c <_printf_common+0x3c>
 8005cc6:	0022      	movs	r2, r4
 8005cc8:	2301      	movs	r3, #1
 8005cca:	9901      	ldr	r1, [sp, #4]
 8005ccc:	9800      	ldr	r0, [sp, #0]
 8005cce:	9e08      	ldr	r6, [sp, #32]
 8005cd0:	3219      	adds	r2, #25
 8005cd2:	47b0      	blx	r6
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d1f0      	bne.n	8005cba <_printf_common+0x8a>
 8005cd8:	2001      	movs	r0, #1
 8005cda:	4240      	negs	r0, r0
 8005cdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cde:	2030      	movs	r0, #48	; 0x30
 8005ce0:	18e1      	adds	r1, r4, r3
 8005ce2:	3143      	adds	r1, #67	; 0x43
 8005ce4:	7008      	strb	r0, [r1, #0]
 8005ce6:	0021      	movs	r1, r4
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	3145      	adds	r1, #69	; 0x45
 8005cec:	7809      	ldrb	r1, [r1, #0]
 8005cee:	18a2      	adds	r2, r4, r2
 8005cf0:	3243      	adds	r2, #67	; 0x43
 8005cf2:	3302      	adds	r3, #2
 8005cf4:	7011      	strb	r1, [r2, #0]
 8005cf6:	e7c1      	b.n	8005c7c <_printf_common+0x4c>
 8005cf8:	0022      	movs	r2, r4
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	9901      	ldr	r1, [sp, #4]
 8005cfe:	9800      	ldr	r0, [sp, #0]
 8005d00:	9e08      	ldr	r6, [sp, #32]
 8005d02:	321a      	adds	r2, #26
 8005d04:	47b0      	blx	r6
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	d0e6      	beq.n	8005cd8 <_printf_common+0xa8>
 8005d0a:	3701      	adds	r7, #1
 8005d0c:	e7d1      	b.n	8005cb2 <_printf_common+0x82>
	...

08005d10 <_printf_i>:
 8005d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d12:	b08b      	sub	sp, #44	; 0x2c
 8005d14:	9206      	str	r2, [sp, #24]
 8005d16:	000a      	movs	r2, r1
 8005d18:	3243      	adds	r2, #67	; 0x43
 8005d1a:	9307      	str	r3, [sp, #28]
 8005d1c:	9005      	str	r0, [sp, #20]
 8005d1e:	9204      	str	r2, [sp, #16]
 8005d20:	7e0a      	ldrb	r2, [r1, #24]
 8005d22:	000c      	movs	r4, r1
 8005d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d26:	2a78      	cmp	r2, #120	; 0x78
 8005d28:	d807      	bhi.n	8005d3a <_printf_i+0x2a>
 8005d2a:	2a62      	cmp	r2, #98	; 0x62
 8005d2c:	d809      	bhi.n	8005d42 <_printf_i+0x32>
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	d100      	bne.n	8005d34 <_printf_i+0x24>
 8005d32:	e0c1      	b.n	8005eb8 <_printf_i+0x1a8>
 8005d34:	2a58      	cmp	r2, #88	; 0x58
 8005d36:	d100      	bne.n	8005d3a <_printf_i+0x2a>
 8005d38:	e08c      	b.n	8005e54 <_printf_i+0x144>
 8005d3a:	0026      	movs	r6, r4
 8005d3c:	3642      	adds	r6, #66	; 0x42
 8005d3e:	7032      	strb	r2, [r6, #0]
 8005d40:	e022      	b.n	8005d88 <_printf_i+0x78>
 8005d42:	0010      	movs	r0, r2
 8005d44:	3863      	subs	r0, #99	; 0x63
 8005d46:	2815      	cmp	r0, #21
 8005d48:	d8f7      	bhi.n	8005d3a <_printf_i+0x2a>
 8005d4a:	f7fa f9f9 	bl	8000140 <__gnu_thumb1_case_shi>
 8005d4e:	0016      	.short	0x0016
 8005d50:	fff6001f 	.word	0xfff6001f
 8005d54:	fff6fff6 	.word	0xfff6fff6
 8005d58:	001ffff6 	.word	0x001ffff6
 8005d5c:	fff6fff6 	.word	0xfff6fff6
 8005d60:	fff6fff6 	.word	0xfff6fff6
 8005d64:	003600a8 	.word	0x003600a8
 8005d68:	fff6009a 	.word	0xfff6009a
 8005d6c:	00b9fff6 	.word	0x00b9fff6
 8005d70:	0036fff6 	.word	0x0036fff6
 8005d74:	fff6fff6 	.word	0xfff6fff6
 8005d78:	009e      	.short	0x009e
 8005d7a:	0026      	movs	r6, r4
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	3642      	adds	r6, #66	; 0x42
 8005d80:	1d11      	adds	r1, r2, #4
 8005d82:	6019      	str	r1, [r3, #0]
 8005d84:	6813      	ldr	r3, [r2, #0]
 8005d86:	7033      	strb	r3, [r6, #0]
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0a7      	b.n	8005edc <_printf_i+0x1cc>
 8005d8c:	6808      	ldr	r0, [r1, #0]
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	1d0a      	adds	r2, r1, #4
 8005d92:	0605      	lsls	r5, r0, #24
 8005d94:	d50b      	bpl.n	8005dae <_printf_i+0x9e>
 8005d96:	680d      	ldr	r5, [r1, #0]
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	2d00      	cmp	r5, #0
 8005d9c:	da03      	bge.n	8005da6 <_printf_i+0x96>
 8005d9e:	232d      	movs	r3, #45	; 0x2d
 8005da0:	9a04      	ldr	r2, [sp, #16]
 8005da2:	426d      	negs	r5, r5
 8005da4:	7013      	strb	r3, [r2, #0]
 8005da6:	4b61      	ldr	r3, [pc, #388]	; (8005f2c <_printf_i+0x21c>)
 8005da8:	270a      	movs	r7, #10
 8005daa:	9303      	str	r3, [sp, #12]
 8005dac:	e01b      	b.n	8005de6 <_printf_i+0xd6>
 8005dae:	680d      	ldr	r5, [r1, #0]
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	0641      	lsls	r1, r0, #25
 8005db4:	d5f1      	bpl.n	8005d9a <_printf_i+0x8a>
 8005db6:	b22d      	sxth	r5, r5
 8005db8:	e7ef      	b.n	8005d9a <_printf_i+0x8a>
 8005dba:	680d      	ldr	r5, [r1, #0]
 8005dbc:	6819      	ldr	r1, [r3, #0]
 8005dbe:	1d08      	adds	r0, r1, #4
 8005dc0:	6018      	str	r0, [r3, #0]
 8005dc2:	062e      	lsls	r6, r5, #24
 8005dc4:	d501      	bpl.n	8005dca <_printf_i+0xba>
 8005dc6:	680d      	ldr	r5, [r1, #0]
 8005dc8:	e003      	b.n	8005dd2 <_printf_i+0xc2>
 8005dca:	066d      	lsls	r5, r5, #25
 8005dcc:	d5fb      	bpl.n	8005dc6 <_printf_i+0xb6>
 8005dce:	680d      	ldr	r5, [r1, #0]
 8005dd0:	b2ad      	uxth	r5, r5
 8005dd2:	4b56      	ldr	r3, [pc, #344]	; (8005f2c <_printf_i+0x21c>)
 8005dd4:	2708      	movs	r7, #8
 8005dd6:	9303      	str	r3, [sp, #12]
 8005dd8:	2a6f      	cmp	r2, #111	; 0x6f
 8005dda:	d000      	beq.n	8005dde <_printf_i+0xce>
 8005ddc:	3702      	adds	r7, #2
 8005dde:	0023      	movs	r3, r4
 8005de0:	2200      	movs	r2, #0
 8005de2:	3343      	adds	r3, #67	; 0x43
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	6863      	ldr	r3, [r4, #4]
 8005de8:	60a3      	str	r3, [r4, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	db03      	blt.n	8005df6 <_printf_i+0xe6>
 8005dee:	2204      	movs	r2, #4
 8005df0:	6821      	ldr	r1, [r4, #0]
 8005df2:	4391      	bics	r1, r2
 8005df4:	6021      	str	r1, [r4, #0]
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	d102      	bne.n	8005e00 <_printf_i+0xf0>
 8005dfa:	9e04      	ldr	r6, [sp, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00c      	beq.n	8005e1a <_printf_i+0x10a>
 8005e00:	9e04      	ldr	r6, [sp, #16]
 8005e02:	0028      	movs	r0, r5
 8005e04:	0039      	movs	r1, r7
 8005e06:	f7fa fa2b 	bl	8000260 <__aeabi_uidivmod>
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	3e01      	subs	r6, #1
 8005e0e:	5c5b      	ldrb	r3, [r3, r1]
 8005e10:	7033      	strb	r3, [r6, #0]
 8005e12:	002b      	movs	r3, r5
 8005e14:	0005      	movs	r5, r0
 8005e16:	429f      	cmp	r7, r3
 8005e18:	d9f3      	bls.n	8005e02 <_printf_i+0xf2>
 8005e1a:	2f08      	cmp	r7, #8
 8005e1c:	d109      	bne.n	8005e32 <_printf_i+0x122>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	07db      	lsls	r3, r3, #31
 8005e22:	d506      	bpl.n	8005e32 <_printf_i+0x122>
 8005e24:	6863      	ldr	r3, [r4, #4]
 8005e26:	6922      	ldr	r2, [r4, #16]
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	dc02      	bgt.n	8005e32 <_printf_i+0x122>
 8005e2c:	2330      	movs	r3, #48	; 0x30
 8005e2e:	3e01      	subs	r6, #1
 8005e30:	7033      	strb	r3, [r6, #0]
 8005e32:	9b04      	ldr	r3, [sp, #16]
 8005e34:	1b9b      	subs	r3, r3, r6
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	9b07      	ldr	r3, [sp, #28]
 8005e3a:	0021      	movs	r1, r4
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	9805      	ldr	r0, [sp, #20]
 8005e40:	9b06      	ldr	r3, [sp, #24]
 8005e42:	aa09      	add	r2, sp, #36	; 0x24
 8005e44:	f7ff fef4 	bl	8005c30 <_printf_common>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d14c      	bne.n	8005ee6 <_printf_i+0x1d6>
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	4240      	negs	r0, r0
 8005e50:	b00b      	add	sp, #44	; 0x2c
 8005e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e54:	3145      	adds	r1, #69	; 0x45
 8005e56:	700a      	strb	r2, [r1, #0]
 8005e58:	4a34      	ldr	r2, [pc, #208]	; (8005f2c <_printf_i+0x21c>)
 8005e5a:	9203      	str	r2, [sp, #12]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	6821      	ldr	r1, [r4, #0]
 8005e60:	ca20      	ldmia	r2!, {r5}
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	0608      	lsls	r0, r1, #24
 8005e66:	d516      	bpl.n	8005e96 <_printf_i+0x186>
 8005e68:	07cb      	lsls	r3, r1, #31
 8005e6a:	d502      	bpl.n	8005e72 <_printf_i+0x162>
 8005e6c:	2320      	movs	r3, #32
 8005e6e:	4319      	orrs	r1, r3
 8005e70:	6021      	str	r1, [r4, #0]
 8005e72:	2710      	movs	r7, #16
 8005e74:	2d00      	cmp	r5, #0
 8005e76:	d1b2      	bne.n	8005dde <_printf_i+0xce>
 8005e78:	2320      	movs	r3, #32
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	439a      	bics	r2, r3
 8005e7e:	6022      	str	r2, [r4, #0]
 8005e80:	e7ad      	b.n	8005dde <_printf_i+0xce>
 8005e82:	2220      	movs	r2, #32
 8005e84:	6809      	ldr	r1, [r1, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	6022      	str	r2, [r4, #0]
 8005e8a:	0022      	movs	r2, r4
 8005e8c:	2178      	movs	r1, #120	; 0x78
 8005e8e:	3245      	adds	r2, #69	; 0x45
 8005e90:	7011      	strb	r1, [r2, #0]
 8005e92:	4a27      	ldr	r2, [pc, #156]	; (8005f30 <_printf_i+0x220>)
 8005e94:	e7e1      	b.n	8005e5a <_printf_i+0x14a>
 8005e96:	0648      	lsls	r0, r1, #25
 8005e98:	d5e6      	bpl.n	8005e68 <_printf_i+0x158>
 8005e9a:	b2ad      	uxth	r5, r5
 8005e9c:	e7e4      	b.n	8005e68 <_printf_i+0x158>
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	680d      	ldr	r5, [r1, #0]
 8005ea2:	1d10      	adds	r0, r2, #4
 8005ea4:	6949      	ldr	r1, [r1, #20]
 8005ea6:	6018      	str	r0, [r3, #0]
 8005ea8:	6813      	ldr	r3, [r2, #0]
 8005eaa:	062e      	lsls	r6, r5, #24
 8005eac:	d501      	bpl.n	8005eb2 <_printf_i+0x1a2>
 8005eae:	6019      	str	r1, [r3, #0]
 8005eb0:	e002      	b.n	8005eb8 <_printf_i+0x1a8>
 8005eb2:	066d      	lsls	r5, r5, #25
 8005eb4:	d5fb      	bpl.n	8005eae <_printf_i+0x19e>
 8005eb6:	8019      	strh	r1, [r3, #0]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	9e04      	ldr	r6, [sp, #16]
 8005ebc:	6123      	str	r3, [r4, #16]
 8005ebe:	e7bb      	b.n	8005e38 <_printf_i+0x128>
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	1d11      	adds	r1, r2, #4
 8005ec4:	6019      	str	r1, [r3, #0]
 8005ec6:	6816      	ldr	r6, [r2, #0]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	0030      	movs	r0, r6
 8005ecc:	6862      	ldr	r2, [r4, #4]
 8005ece:	f000 ff49 	bl	8006d64 <memchr>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d001      	beq.n	8005eda <_printf_i+0x1ca>
 8005ed6:	1b80      	subs	r0, r0, r6
 8005ed8:	6060      	str	r0, [r4, #4]
 8005eda:	6863      	ldr	r3, [r4, #4]
 8005edc:	6123      	str	r3, [r4, #16]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9a04      	ldr	r2, [sp, #16]
 8005ee2:	7013      	strb	r3, [r2, #0]
 8005ee4:	e7a8      	b.n	8005e38 <_printf_i+0x128>
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	0032      	movs	r2, r6
 8005eea:	9906      	ldr	r1, [sp, #24]
 8005eec:	9805      	ldr	r0, [sp, #20]
 8005eee:	9d07      	ldr	r5, [sp, #28]
 8005ef0:	47a8      	blx	r5
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	d0aa      	beq.n	8005e4c <_printf_i+0x13c>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	079b      	lsls	r3, r3, #30
 8005efa:	d415      	bmi.n	8005f28 <_printf_i+0x218>
 8005efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efe:	68e0      	ldr	r0, [r4, #12]
 8005f00:	4298      	cmp	r0, r3
 8005f02:	daa5      	bge.n	8005e50 <_printf_i+0x140>
 8005f04:	0018      	movs	r0, r3
 8005f06:	e7a3      	b.n	8005e50 <_printf_i+0x140>
 8005f08:	0022      	movs	r2, r4
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	9906      	ldr	r1, [sp, #24]
 8005f0e:	9805      	ldr	r0, [sp, #20]
 8005f10:	9e07      	ldr	r6, [sp, #28]
 8005f12:	3219      	adds	r2, #25
 8005f14:	47b0      	blx	r6
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d098      	beq.n	8005e4c <_printf_i+0x13c>
 8005f1a:	3501      	adds	r5, #1
 8005f1c:	68e3      	ldr	r3, [r4, #12]
 8005f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	42ab      	cmp	r3, r5
 8005f24:	dcf0      	bgt.n	8005f08 <_printf_i+0x1f8>
 8005f26:	e7e9      	b.n	8005efc <_printf_i+0x1ec>
 8005f28:	2500      	movs	r5, #0
 8005f2a:	e7f7      	b.n	8005f1c <_printf_i+0x20c>
 8005f2c:	08008d66 	.word	0x08008d66
 8005f30:	08008d77 	.word	0x08008d77

08005f34 <siprintf>:
 8005f34:	b40e      	push	{r1, r2, r3}
 8005f36:	b500      	push	{lr}
 8005f38:	490b      	ldr	r1, [pc, #44]	; (8005f68 <siprintf+0x34>)
 8005f3a:	b09c      	sub	sp, #112	; 0x70
 8005f3c:	ab1d      	add	r3, sp, #116	; 0x74
 8005f3e:	9002      	str	r0, [sp, #8]
 8005f40:	9006      	str	r0, [sp, #24]
 8005f42:	9107      	str	r1, [sp, #28]
 8005f44:	9104      	str	r1, [sp, #16]
 8005f46:	4809      	ldr	r0, [pc, #36]	; (8005f6c <siprintf+0x38>)
 8005f48:	4909      	ldr	r1, [pc, #36]	; (8005f70 <siprintf+0x3c>)
 8005f4a:	cb04      	ldmia	r3!, {r2}
 8005f4c:	9105      	str	r1, [sp, #20]
 8005f4e:	6800      	ldr	r0, [r0, #0]
 8005f50:	a902      	add	r1, sp, #8
 8005f52:	9301      	str	r3, [sp, #4]
 8005f54:	f001 fc26 	bl	80077a4 <_svfiprintf_r>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9a02      	ldr	r2, [sp, #8]
 8005f5c:	7013      	strb	r3, [r2, #0]
 8005f5e:	b01c      	add	sp, #112	; 0x70
 8005f60:	bc08      	pop	{r3}
 8005f62:	b003      	add	sp, #12
 8005f64:	4718      	bx	r3
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	7fffffff 	.word	0x7fffffff
 8005f6c:	2000001c 	.word	0x2000001c
 8005f70:	ffff0208 	.word	0xffff0208

08005f74 <strcat>:
 8005f74:	0002      	movs	r2, r0
 8005f76:	b510      	push	{r4, lr}
 8005f78:	7813      	ldrb	r3, [r2, #0]
 8005f7a:	0014      	movs	r4, r2
 8005f7c:	3201      	adds	r2, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1fa      	bne.n	8005f78 <strcat+0x4>
 8005f82:	5cca      	ldrb	r2, [r1, r3]
 8005f84:	54e2      	strb	r2, [r4, r3]
 8005f86:	3301      	adds	r3, #1
 8005f88:	2a00      	cmp	r2, #0
 8005f8a:	d1fa      	bne.n	8005f82 <strcat+0xe>
 8005f8c:	bd10      	pop	{r4, pc}

08005f8e <_vsniprintf_r>:
 8005f8e:	b530      	push	{r4, r5, lr}
 8005f90:	0014      	movs	r4, r2
 8005f92:	0005      	movs	r5, r0
 8005f94:	001a      	movs	r2, r3
 8005f96:	b09b      	sub	sp, #108	; 0x6c
 8005f98:	2c00      	cmp	r4, #0
 8005f9a:	da05      	bge.n	8005fa8 <_vsniprintf_r+0x1a>
 8005f9c:	238b      	movs	r3, #139	; 0x8b
 8005f9e:	6003      	str	r3, [r0, #0]
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	4240      	negs	r0, r0
 8005fa4:	b01b      	add	sp, #108	; 0x6c
 8005fa6:	bd30      	pop	{r4, r5, pc}
 8005fa8:	2382      	movs	r3, #130	; 0x82
 8005faa:	4668      	mov	r0, sp
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	8183      	strh	r3, [r0, #12]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9100      	str	r1, [sp, #0]
 8005fb4:	9104      	str	r1, [sp, #16]
 8005fb6:	429c      	cmp	r4, r3
 8005fb8:	d000      	beq.n	8005fbc <_vsniprintf_r+0x2e>
 8005fba:	1e63      	subs	r3, r4, #1
 8005fbc:	9302      	str	r3, [sp, #8]
 8005fbe:	9305      	str	r3, [sp, #20]
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	4669      	mov	r1, sp
 8005fc4:	425b      	negs	r3, r3
 8005fc6:	81cb      	strh	r3, [r1, #14]
 8005fc8:	0028      	movs	r0, r5
 8005fca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fcc:	f001 fbea 	bl	80077a4 <_svfiprintf_r>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	da01      	bge.n	8005fd8 <_vsniprintf_r+0x4a>
 8005fd4:	238b      	movs	r3, #139	; 0x8b
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	2c00      	cmp	r4, #0
 8005fda:	d0e3      	beq.n	8005fa4 <_vsniprintf_r+0x16>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9a00      	ldr	r2, [sp, #0]
 8005fe0:	7013      	strb	r3, [r2, #0]
 8005fe2:	e7df      	b.n	8005fa4 <_vsniprintf_r+0x16>

08005fe4 <vsniprintf>:
 8005fe4:	b507      	push	{r0, r1, r2, lr}
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	0013      	movs	r3, r2
 8005fea:	000a      	movs	r2, r1
 8005fec:	0001      	movs	r1, r0
 8005fee:	4802      	ldr	r0, [pc, #8]	; (8005ff8 <vsniprintf+0x14>)
 8005ff0:	6800      	ldr	r0, [r0, #0]
 8005ff2:	f7ff ffcc 	bl	8005f8e <_vsniprintf_r>
 8005ff6:	bd0e      	pop	{r1, r2, r3, pc}
 8005ff8:	2000001c 	.word	0x2000001c

08005ffc <quorem>:
 8005ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffe:	0006      	movs	r6, r0
 8006000:	690b      	ldr	r3, [r1, #16]
 8006002:	6932      	ldr	r2, [r6, #16]
 8006004:	b087      	sub	sp, #28
 8006006:	2000      	movs	r0, #0
 8006008:	9103      	str	r1, [sp, #12]
 800600a:	429a      	cmp	r2, r3
 800600c:	db65      	blt.n	80060da <quorem+0xde>
 800600e:	3b01      	subs	r3, #1
 8006010:	009c      	lsls	r4, r3, #2
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	000b      	movs	r3, r1
 8006016:	3314      	adds	r3, #20
 8006018:	9305      	str	r3, [sp, #20]
 800601a:	191b      	adds	r3, r3, r4
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	0033      	movs	r3, r6
 8006020:	3314      	adds	r3, #20
 8006022:	9302      	str	r3, [sp, #8]
 8006024:	191c      	adds	r4, r3, r4
 8006026:	9b04      	ldr	r3, [sp, #16]
 8006028:	6827      	ldr	r7, [r4, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	0038      	movs	r0, r7
 800602e:	1c5d      	adds	r5, r3, #1
 8006030:	0029      	movs	r1, r5
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	f7fa f88e 	bl	8000154 <__udivsi3>
 8006038:	9001      	str	r0, [sp, #4]
 800603a:	42af      	cmp	r7, r5
 800603c:	d324      	bcc.n	8006088 <quorem+0x8c>
 800603e:	2500      	movs	r5, #0
 8006040:	46ac      	mov	ip, r5
 8006042:	9802      	ldr	r0, [sp, #8]
 8006044:	9f05      	ldr	r7, [sp, #20]
 8006046:	cf08      	ldmia	r7!, {r3}
 8006048:	9a01      	ldr	r2, [sp, #4]
 800604a:	b299      	uxth	r1, r3
 800604c:	4351      	muls	r1, r2
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	4353      	muls	r3, r2
 8006052:	1949      	adds	r1, r1, r5
 8006054:	0c0a      	lsrs	r2, r1, #16
 8006056:	189b      	adds	r3, r3, r2
 8006058:	6802      	ldr	r2, [r0, #0]
 800605a:	b289      	uxth	r1, r1
 800605c:	b292      	uxth	r2, r2
 800605e:	4462      	add	r2, ip
 8006060:	1a52      	subs	r2, r2, r1
 8006062:	6801      	ldr	r1, [r0, #0]
 8006064:	0c1d      	lsrs	r5, r3, #16
 8006066:	0c09      	lsrs	r1, r1, #16
 8006068:	b29b      	uxth	r3, r3
 800606a:	1acb      	subs	r3, r1, r3
 800606c:	1411      	asrs	r1, r2, #16
 800606e:	185b      	adds	r3, r3, r1
 8006070:	1419      	asrs	r1, r3, #16
 8006072:	b292      	uxth	r2, r2
 8006074:	041b      	lsls	r3, r3, #16
 8006076:	431a      	orrs	r2, r3
 8006078:	9b04      	ldr	r3, [sp, #16]
 800607a:	468c      	mov	ip, r1
 800607c:	c004      	stmia	r0!, {r2}
 800607e:	42bb      	cmp	r3, r7
 8006080:	d2e1      	bcs.n	8006046 <quorem+0x4a>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d030      	beq.n	80060ea <quorem+0xee>
 8006088:	0030      	movs	r0, r6
 800608a:	9903      	ldr	r1, [sp, #12]
 800608c:	f001 f902 	bl	8007294 <__mcmp>
 8006090:	2800      	cmp	r0, #0
 8006092:	db21      	blt.n	80060d8 <quorem+0xdc>
 8006094:	0030      	movs	r0, r6
 8006096:	2400      	movs	r4, #0
 8006098:	9b01      	ldr	r3, [sp, #4]
 800609a:	9903      	ldr	r1, [sp, #12]
 800609c:	3301      	adds	r3, #1
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	3014      	adds	r0, #20
 80060a2:	3114      	adds	r1, #20
 80060a4:	6803      	ldr	r3, [r0, #0]
 80060a6:	c920      	ldmia	r1!, {r5}
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	1914      	adds	r4, r2, r4
 80060ac:	b2aa      	uxth	r2, r5
 80060ae:	1aa2      	subs	r2, r4, r2
 80060b0:	0c1b      	lsrs	r3, r3, #16
 80060b2:	0c2d      	lsrs	r5, r5, #16
 80060b4:	1414      	asrs	r4, r2, #16
 80060b6:	1b5b      	subs	r3, r3, r5
 80060b8:	191b      	adds	r3, r3, r4
 80060ba:	141c      	asrs	r4, r3, #16
 80060bc:	b292      	uxth	r2, r2
 80060be:	041b      	lsls	r3, r3, #16
 80060c0:	4313      	orrs	r3, r2
 80060c2:	c008      	stmia	r0!, {r3}
 80060c4:	9b04      	ldr	r3, [sp, #16]
 80060c6:	428b      	cmp	r3, r1
 80060c8:	d2ec      	bcs.n	80060a4 <quorem+0xa8>
 80060ca:	9b00      	ldr	r3, [sp, #0]
 80060cc:	9a02      	ldr	r2, [sp, #8]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	18d3      	adds	r3, r2, r3
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	2a00      	cmp	r2, #0
 80060d6:	d015      	beq.n	8006104 <quorem+0x108>
 80060d8:	9801      	ldr	r0, [sp, #4]
 80060da:	b007      	add	sp, #28
 80060dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <quorem+0xf6>
 80060e4:	9b00      	ldr	r3, [sp, #0]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	9b02      	ldr	r3, [sp, #8]
 80060ec:	3c04      	subs	r4, #4
 80060ee:	42a3      	cmp	r3, r4
 80060f0:	d3f5      	bcc.n	80060de <quorem+0xe2>
 80060f2:	9b00      	ldr	r3, [sp, #0]
 80060f4:	6133      	str	r3, [r6, #16]
 80060f6:	e7c7      	b.n	8006088 <quorem+0x8c>
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	d106      	bne.n	800610c <quorem+0x110>
 80060fe:	9a00      	ldr	r2, [sp, #0]
 8006100:	3a01      	subs	r2, #1
 8006102:	9200      	str	r2, [sp, #0]
 8006104:	9a02      	ldr	r2, [sp, #8]
 8006106:	3b04      	subs	r3, #4
 8006108:	429a      	cmp	r2, r3
 800610a:	d3f5      	bcc.n	80060f8 <quorem+0xfc>
 800610c:	9b00      	ldr	r3, [sp, #0]
 800610e:	6133      	str	r3, [r6, #16]
 8006110:	e7e2      	b.n	80060d8 <quorem+0xdc>
	...

08006114 <_dtoa_r>:
 8006114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006116:	b09d      	sub	sp, #116	; 0x74
 8006118:	9202      	str	r2, [sp, #8]
 800611a:	9303      	str	r3, [sp, #12]
 800611c:	9b02      	ldr	r3, [sp, #8]
 800611e:	9c03      	ldr	r4, [sp, #12]
 8006120:	9308      	str	r3, [sp, #32]
 8006122:	9409      	str	r4, [sp, #36]	; 0x24
 8006124:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006126:	0007      	movs	r7, r0
 8006128:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800612a:	2c00      	cmp	r4, #0
 800612c:	d10e      	bne.n	800614c <_dtoa_r+0x38>
 800612e:	2010      	movs	r0, #16
 8006130:	f000 fe0e 	bl	8006d50 <malloc>
 8006134:	1e02      	subs	r2, r0, #0
 8006136:	6278      	str	r0, [r7, #36]	; 0x24
 8006138:	d104      	bne.n	8006144 <_dtoa_r+0x30>
 800613a:	21ea      	movs	r1, #234	; 0xea
 800613c:	4bc7      	ldr	r3, [pc, #796]	; (800645c <_dtoa_r+0x348>)
 800613e:	48c8      	ldr	r0, [pc, #800]	; (8006460 <_dtoa_r+0x34c>)
 8006140:	f001 fc42 	bl	80079c8 <__assert_func>
 8006144:	6044      	str	r4, [r0, #4]
 8006146:	6084      	str	r4, [r0, #8]
 8006148:	6004      	str	r4, [r0, #0]
 800614a:	60c4      	str	r4, [r0, #12]
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	6819      	ldr	r1, [r3, #0]
 8006150:	2900      	cmp	r1, #0
 8006152:	d00a      	beq.n	800616a <_dtoa_r+0x56>
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	2301      	movs	r3, #1
 8006158:	4093      	lsls	r3, r2
 800615a:	604a      	str	r2, [r1, #4]
 800615c:	608b      	str	r3, [r1, #8]
 800615e:	0038      	movs	r0, r7
 8006160:	f000 fe58 	bl	8006e14 <_Bfree>
 8006164:	2200      	movs	r2, #0
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	9b03      	ldr	r3, [sp, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	da20      	bge.n	80061b2 <_dtoa_r+0x9e>
 8006170:	2301      	movs	r3, #1
 8006172:	602b      	str	r3, [r5, #0]
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	9309      	str	r3, [sp, #36]	; 0x24
 800617c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800617e:	4bb9      	ldr	r3, [pc, #740]	; (8006464 <_dtoa_r+0x350>)
 8006180:	4ab8      	ldr	r2, [pc, #736]	; (8006464 <_dtoa_r+0x350>)
 8006182:	402b      	ands	r3, r5
 8006184:	4293      	cmp	r3, r2
 8006186:	d117      	bne.n	80061b8 <_dtoa_r+0xa4>
 8006188:	4bb7      	ldr	r3, [pc, #732]	; (8006468 <_dtoa_r+0x354>)
 800618a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800618c:	0328      	lsls	r0, r5, #12
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	9b02      	ldr	r3, [sp, #8]
 8006192:	0b00      	lsrs	r0, r0, #12
 8006194:	4318      	orrs	r0, r3
 8006196:	d101      	bne.n	800619c <_dtoa_r+0x88>
 8006198:	f000 fdbf 	bl	8006d1a <_dtoa_r+0xc06>
 800619c:	48b3      	ldr	r0, [pc, #716]	; (800646c <_dtoa_r+0x358>)
 800619e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061a0:	9006      	str	r0, [sp, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <_dtoa_r+0x98>
 80061a6:	4bb2      	ldr	r3, [pc, #712]	; (8006470 <_dtoa_r+0x35c>)
 80061a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	9806      	ldr	r0, [sp, #24]
 80061ae:	b01d      	add	sp, #116	; 0x74
 80061b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b2:	2300      	movs	r3, #0
 80061b4:	602b      	str	r3, [r5, #0]
 80061b6:	e7e1      	b.n	800617c <_dtoa_r+0x68>
 80061b8:	9b08      	ldr	r3, [sp, #32]
 80061ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80061bc:	9312      	str	r3, [sp, #72]	; 0x48
 80061be:	9413      	str	r4, [sp, #76]	; 0x4c
 80061c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80061c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80061c4:	2200      	movs	r2, #0
 80061c6:	2300      	movs	r3, #0
 80061c8:	f7fa f94a 	bl	8000460 <__aeabi_dcmpeq>
 80061cc:	1e04      	subs	r4, r0, #0
 80061ce:	d009      	beq.n	80061e4 <_dtoa_r+0xd0>
 80061d0:	2301      	movs	r3, #1
 80061d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	4ba7      	ldr	r3, [pc, #668]	; (8006474 <_dtoa_r+0x360>)
 80061d8:	9306      	str	r3, [sp, #24]
 80061da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0e5      	beq.n	80061ac <_dtoa_r+0x98>
 80061e0:	4ba5      	ldr	r3, [pc, #660]	; (8006478 <_dtoa_r+0x364>)
 80061e2:	e7e1      	b.n	80061a8 <_dtoa_r+0x94>
 80061e4:	ab1a      	add	r3, sp, #104	; 0x68
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	ab1b      	add	r3, sp, #108	; 0x6c
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	0038      	movs	r0, r7
 80061ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061f2:	f001 f903 	bl	80073fc <__d2b>
 80061f6:	006e      	lsls	r6, r5, #1
 80061f8:	9005      	str	r0, [sp, #20]
 80061fa:	0d76      	lsrs	r6, r6, #21
 80061fc:	d100      	bne.n	8006200 <_dtoa_r+0xec>
 80061fe:	e07c      	b.n	80062fa <_dtoa_r+0x1e6>
 8006200:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006202:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006206:	4a9d      	ldr	r2, [pc, #628]	; (800647c <_dtoa_r+0x368>)
 8006208:	031b      	lsls	r3, r3, #12
 800620a:	0b1b      	lsrs	r3, r3, #12
 800620c:	431a      	orrs	r2, r3
 800620e:	0011      	movs	r1, r2
 8006210:	4b9b      	ldr	r3, [pc, #620]	; (8006480 <_dtoa_r+0x36c>)
 8006212:	9418      	str	r4, [sp, #96]	; 0x60
 8006214:	18f6      	adds	r6, r6, r3
 8006216:	2200      	movs	r2, #0
 8006218:	4b9a      	ldr	r3, [pc, #616]	; (8006484 <_dtoa_r+0x370>)
 800621a:	f7fb faf9 	bl	8001810 <__aeabi_dsub>
 800621e:	4a9a      	ldr	r2, [pc, #616]	; (8006488 <_dtoa_r+0x374>)
 8006220:	4b9a      	ldr	r3, [pc, #616]	; (800648c <_dtoa_r+0x378>)
 8006222:	f7fb f889 	bl	8001338 <__aeabi_dmul>
 8006226:	4a9a      	ldr	r2, [pc, #616]	; (8006490 <_dtoa_r+0x37c>)
 8006228:	4b9a      	ldr	r3, [pc, #616]	; (8006494 <_dtoa_r+0x380>)
 800622a:	f7fa f947 	bl	80004bc <__aeabi_dadd>
 800622e:	0004      	movs	r4, r0
 8006230:	0030      	movs	r0, r6
 8006232:	000d      	movs	r5, r1
 8006234:	f7fb fed2 	bl	8001fdc <__aeabi_i2d>
 8006238:	4a97      	ldr	r2, [pc, #604]	; (8006498 <_dtoa_r+0x384>)
 800623a:	4b98      	ldr	r3, [pc, #608]	; (800649c <_dtoa_r+0x388>)
 800623c:	f7fb f87c 	bl	8001338 <__aeabi_dmul>
 8006240:	0002      	movs	r2, r0
 8006242:	000b      	movs	r3, r1
 8006244:	0020      	movs	r0, r4
 8006246:	0029      	movs	r1, r5
 8006248:	f7fa f938 	bl	80004bc <__aeabi_dadd>
 800624c:	0004      	movs	r4, r0
 800624e:	000d      	movs	r5, r1
 8006250:	f7fb fe8e 	bl	8001f70 <__aeabi_d2iz>
 8006254:	2200      	movs	r2, #0
 8006256:	9002      	str	r0, [sp, #8]
 8006258:	2300      	movs	r3, #0
 800625a:	0020      	movs	r0, r4
 800625c:	0029      	movs	r1, r5
 800625e:	f7fa f905 	bl	800046c <__aeabi_dcmplt>
 8006262:	2800      	cmp	r0, #0
 8006264:	d00b      	beq.n	800627e <_dtoa_r+0x16a>
 8006266:	9802      	ldr	r0, [sp, #8]
 8006268:	f7fb feb8 	bl	8001fdc <__aeabi_i2d>
 800626c:	002b      	movs	r3, r5
 800626e:	0022      	movs	r2, r4
 8006270:	f7fa f8f6 	bl	8000460 <__aeabi_dcmpeq>
 8006274:	4243      	negs	r3, r0
 8006276:	4158      	adcs	r0, r3
 8006278:	9b02      	ldr	r3, [sp, #8]
 800627a:	1a1b      	subs	r3, r3, r0
 800627c:	9302      	str	r3, [sp, #8]
 800627e:	2301      	movs	r3, #1
 8006280:	9316      	str	r3, [sp, #88]	; 0x58
 8006282:	9b02      	ldr	r3, [sp, #8]
 8006284:	2b16      	cmp	r3, #22
 8006286:	d80f      	bhi.n	80062a8 <_dtoa_r+0x194>
 8006288:	9812      	ldr	r0, [sp, #72]	; 0x48
 800628a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800628c:	00da      	lsls	r2, r3, #3
 800628e:	4b84      	ldr	r3, [pc, #528]	; (80064a0 <_dtoa_r+0x38c>)
 8006290:	189b      	adds	r3, r3, r2
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f7fa f8e9 	bl	800046c <__aeabi_dcmplt>
 800629a:	2800      	cmp	r0, #0
 800629c:	d049      	beq.n	8006332 <_dtoa_r+0x21e>
 800629e:	9b02      	ldr	r3, [sp, #8]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	9302      	str	r3, [sp, #8]
 80062a4:	2300      	movs	r3, #0
 80062a6:	9316      	str	r3, [sp, #88]	; 0x58
 80062a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80062aa:	1b9e      	subs	r6, r3, r6
 80062ac:	2300      	movs	r3, #0
 80062ae:	930a      	str	r3, [sp, #40]	; 0x28
 80062b0:	0033      	movs	r3, r6
 80062b2:	3b01      	subs	r3, #1
 80062b4:	930d      	str	r3, [sp, #52]	; 0x34
 80062b6:	d504      	bpl.n	80062c2 <_dtoa_r+0x1ae>
 80062b8:	2301      	movs	r3, #1
 80062ba:	1b9b      	subs	r3, r3, r6
 80062bc:	930a      	str	r3, [sp, #40]	; 0x28
 80062be:	2300      	movs	r3, #0
 80062c0:	930d      	str	r3, [sp, #52]	; 0x34
 80062c2:	9b02      	ldr	r3, [sp, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	db36      	blt.n	8006336 <_dtoa_r+0x222>
 80062c8:	9a02      	ldr	r2, [sp, #8]
 80062ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062cc:	4694      	mov	ip, r2
 80062ce:	4463      	add	r3, ip
 80062d0:	930d      	str	r3, [sp, #52]	; 0x34
 80062d2:	2300      	movs	r3, #0
 80062d4:	9215      	str	r2, [sp, #84]	; 0x54
 80062d6:	930e      	str	r3, [sp, #56]	; 0x38
 80062d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062da:	2401      	movs	r4, #1
 80062dc:	2b09      	cmp	r3, #9
 80062de:	d864      	bhi.n	80063aa <_dtoa_r+0x296>
 80062e0:	2b05      	cmp	r3, #5
 80062e2:	dd02      	ble.n	80062ea <_dtoa_r+0x1d6>
 80062e4:	2400      	movs	r4, #0
 80062e6:	3b04      	subs	r3, #4
 80062e8:	9322      	str	r3, [sp, #136]	; 0x88
 80062ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ec:	1e98      	subs	r0, r3, #2
 80062ee:	2803      	cmp	r0, #3
 80062f0:	d864      	bhi.n	80063bc <_dtoa_r+0x2a8>
 80062f2:	f7f9 ff1b 	bl	800012c <__gnu_thumb1_case_uqi>
 80062f6:	3829      	.short	0x3829
 80062f8:	5836      	.short	0x5836
 80062fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80062fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80062fe:	189e      	adds	r6, r3, r2
 8006300:	4b68      	ldr	r3, [pc, #416]	; (80064a4 <_dtoa_r+0x390>)
 8006302:	18f2      	adds	r2, r6, r3
 8006304:	2a20      	cmp	r2, #32
 8006306:	dd0f      	ble.n	8006328 <_dtoa_r+0x214>
 8006308:	2340      	movs	r3, #64	; 0x40
 800630a:	1a9b      	subs	r3, r3, r2
 800630c:	409d      	lsls	r5, r3
 800630e:	4b66      	ldr	r3, [pc, #408]	; (80064a8 <_dtoa_r+0x394>)
 8006310:	9802      	ldr	r0, [sp, #8]
 8006312:	18f3      	adds	r3, r6, r3
 8006314:	40d8      	lsrs	r0, r3
 8006316:	4328      	orrs	r0, r5
 8006318:	f7fb fe90 	bl	800203c <__aeabi_ui2d>
 800631c:	2301      	movs	r3, #1
 800631e:	4c63      	ldr	r4, [pc, #396]	; (80064ac <_dtoa_r+0x398>)
 8006320:	3e01      	subs	r6, #1
 8006322:	1909      	adds	r1, r1, r4
 8006324:	9318      	str	r3, [sp, #96]	; 0x60
 8006326:	e776      	b.n	8006216 <_dtoa_r+0x102>
 8006328:	2320      	movs	r3, #32
 800632a:	9802      	ldr	r0, [sp, #8]
 800632c:	1a9b      	subs	r3, r3, r2
 800632e:	4098      	lsls	r0, r3
 8006330:	e7f2      	b.n	8006318 <_dtoa_r+0x204>
 8006332:	9016      	str	r0, [sp, #88]	; 0x58
 8006334:	e7b8      	b.n	80062a8 <_dtoa_r+0x194>
 8006336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006338:	9a02      	ldr	r2, [sp, #8]
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	930a      	str	r3, [sp, #40]	; 0x28
 800633e:	4253      	negs	r3, r2
 8006340:	930e      	str	r3, [sp, #56]	; 0x38
 8006342:	2300      	movs	r3, #0
 8006344:	9315      	str	r3, [sp, #84]	; 0x54
 8006346:	e7c7      	b.n	80062d8 <_dtoa_r+0x1c4>
 8006348:	2300      	movs	r3, #0
 800634a:	930f      	str	r3, [sp, #60]	; 0x3c
 800634c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800634e:	930c      	str	r3, [sp, #48]	; 0x30
 8006350:	9307      	str	r3, [sp, #28]
 8006352:	2b00      	cmp	r3, #0
 8006354:	dc13      	bgt.n	800637e <_dtoa_r+0x26a>
 8006356:	2301      	movs	r3, #1
 8006358:	001a      	movs	r2, r3
 800635a:	930c      	str	r3, [sp, #48]	; 0x30
 800635c:	9307      	str	r3, [sp, #28]
 800635e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006360:	e00d      	b.n	800637e <_dtoa_r+0x26a>
 8006362:	2301      	movs	r3, #1
 8006364:	e7f1      	b.n	800634a <_dtoa_r+0x236>
 8006366:	2300      	movs	r3, #0
 8006368:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800636a:	930f      	str	r3, [sp, #60]	; 0x3c
 800636c:	4694      	mov	ip, r2
 800636e:	9b02      	ldr	r3, [sp, #8]
 8006370:	4463      	add	r3, ip
 8006372:	930c      	str	r3, [sp, #48]	; 0x30
 8006374:	3301      	adds	r3, #1
 8006376:	9307      	str	r3, [sp, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	dc00      	bgt.n	800637e <_dtoa_r+0x26a>
 800637c:	2301      	movs	r3, #1
 800637e:	2200      	movs	r2, #0
 8006380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006382:	6042      	str	r2, [r0, #4]
 8006384:	3204      	adds	r2, #4
 8006386:	0015      	movs	r5, r2
 8006388:	3514      	adds	r5, #20
 800638a:	6841      	ldr	r1, [r0, #4]
 800638c:	429d      	cmp	r5, r3
 800638e:	d919      	bls.n	80063c4 <_dtoa_r+0x2b0>
 8006390:	0038      	movs	r0, r7
 8006392:	f000 fcfb 	bl	8006d8c <_Balloc>
 8006396:	9006      	str	r0, [sp, #24]
 8006398:	2800      	cmp	r0, #0
 800639a:	d117      	bne.n	80063cc <_dtoa_r+0x2b8>
 800639c:	21d5      	movs	r1, #213	; 0xd5
 800639e:	0002      	movs	r2, r0
 80063a0:	4b43      	ldr	r3, [pc, #268]	; (80064b0 <_dtoa_r+0x39c>)
 80063a2:	0049      	lsls	r1, r1, #1
 80063a4:	e6cb      	b.n	800613e <_dtoa_r+0x2a>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e7de      	b.n	8006368 <_dtoa_r+0x254>
 80063aa:	2300      	movs	r3, #0
 80063ac:	940f      	str	r4, [sp, #60]	; 0x3c
 80063ae:	9322      	str	r3, [sp, #136]	; 0x88
 80063b0:	3b01      	subs	r3, #1
 80063b2:	930c      	str	r3, [sp, #48]	; 0x30
 80063b4:	9307      	str	r3, [sp, #28]
 80063b6:	2200      	movs	r2, #0
 80063b8:	3313      	adds	r3, #19
 80063ba:	e7d0      	b.n	800635e <_dtoa_r+0x24a>
 80063bc:	2301      	movs	r3, #1
 80063be:	930f      	str	r3, [sp, #60]	; 0x3c
 80063c0:	3b02      	subs	r3, #2
 80063c2:	e7f6      	b.n	80063b2 <_dtoa_r+0x29e>
 80063c4:	3101      	adds	r1, #1
 80063c6:	6041      	str	r1, [r0, #4]
 80063c8:	0052      	lsls	r2, r2, #1
 80063ca:	e7dc      	b.n	8006386 <_dtoa_r+0x272>
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	9a06      	ldr	r2, [sp, #24]
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	9b07      	ldr	r3, [sp, #28]
 80063d4:	2b0e      	cmp	r3, #14
 80063d6:	d900      	bls.n	80063da <_dtoa_r+0x2c6>
 80063d8:	e0eb      	b.n	80065b2 <_dtoa_r+0x49e>
 80063da:	2c00      	cmp	r4, #0
 80063dc:	d100      	bne.n	80063e0 <_dtoa_r+0x2cc>
 80063de:	e0e8      	b.n	80065b2 <_dtoa_r+0x49e>
 80063e0:	9b02      	ldr	r3, [sp, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	dd68      	ble.n	80064b8 <_dtoa_r+0x3a4>
 80063e6:	001a      	movs	r2, r3
 80063e8:	210f      	movs	r1, #15
 80063ea:	4b2d      	ldr	r3, [pc, #180]	; (80064a0 <_dtoa_r+0x38c>)
 80063ec:	400a      	ands	r2, r1
 80063ee:	00d2      	lsls	r2, r2, #3
 80063f0:	189b      	adds	r3, r3, r2
 80063f2:	681d      	ldr	r5, [r3, #0]
 80063f4:	685e      	ldr	r6, [r3, #4]
 80063f6:	9b02      	ldr	r3, [sp, #8]
 80063f8:	111c      	asrs	r4, r3, #4
 80063fa:	2302      	movs	r3, #2
 80063fc:	9310      	str	r3, [sp, #64]	; 0x40
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	05db      	lsls	r3, r3, #23
 8006402:	d50b      	bpl.n	800641c <_dtoa_r+0x308>
 8006404:	4b2b      	ldr	r3, [pc, #172]	; (80064b4 <_dtoa_r+0x3a0>)
 8006406:	400c      	ands	r4, r1
 8006408:	6a1a      	ldr	r2, [r3, #32]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800640e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006410:	f7fa fb90 	bl	8000b34 <__aeabi_ddiv>
 8006414:	2303      	movs	r3, #3
 8006416:	9008      	str	r0, [sp, #32]
 8006418:	9109      	str	r1, [sp, #36]	; 0x24
 800641a:	9310      	str	r3, [sp, #64]	; 0x40
 800641c:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <_dtoa_r+0x3a0>)
 800641e:	9314      	str	r3, [sp, #80]	; 0x50
 8006420:	2c00      	cmp	r4, #0
 8006422:	d108      	bne.n	8006436 <_dtoa_r+0x322>
 8006424:	9808      	ldr	r0, [sp, #32]
 8006426:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006428:	002a      	movs	r2, r5
 800642a:	0033      	movs	r3, r6
 800642c:	f7fa fb82 	bl	8000b34 <__aeabi_ddiv>
 8006430:	9008      	str	r0, [sp, #32]
 8006432:	9109      	str	r1, [sp, #36]	; 0x24
 8006434:	e05c      	b.n	80064f0 <_dtoa_r+0x3dc>
 8006436:	2301      	movs	r3, #1
 8006438:	421c      	tst	r4, r3
 800643a:	d00b      	beq.n	8006454 <_dtoa_r+0x340>
 800643c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800643e:	0028      	movs	r0, r5
 8006440:	3301      	adds	r3, #1
 8006442:	9310      	str	r3, [sp, #64]	; 0x40
 8006444:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006446:	0031      	movs	r1, r6
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f7fa ff74 	bl	8001338 <__aeabi_dmul>
 8006450:	0005      	movs	r5, r0
 8006452:	000e      	movs	r6, r1
 8006454:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006456:	1064      	asrs	r4, r4, #1
 8006458:	3308      	adds	r3, #8
 800645a:	e7e0      	b.n	800641e <_dtoa_r+0x30a>
 800645c:	08008d95 	.word	0x08008d95
 8006460:	08008dac 	.word	0x08008dac
 8006464:	7ff00000 	.word	0x7ff00000
 8006468:	0000270f 	.word	0x0000270f
 800646c:	08008d91 	.word	0x08008d91
 8006470:	08008d94 	.word	0x08008d94
 8006474:	08008d64 	.word	0x08008d64
 8006478:	08008d65 	.word	0x08008d65
 800647c:	3ff00000 	.word	0x3ff00000
 8006480:	fffffc01 	.word	0xfffffc01
 8006484:	3ff80000 	.word	0x3ff80000
 8006488:	636f4361 	.word	0x636f4361
 800648c:	3fd287a7 	.word	0x3fd287a7
 8006490:	8b60c8b3 	.word	0x8b60c8b3
 8006494:	3fc68a28 	.word	0x3fc68a28
 8006498:	509f79fb 	.word	0x509f79fb
 800649c:	3fd34413 	.word	0x3fd34413
 80064a0:	08008ea0 	.word	0x08008ea0
 80064a4:	00000432 	.word	0x00000432
 80064a8:	00000412 	.word	0x00000412
 80064ac:	fe100000 	.word	0xfe100000
 80064b0:	08008e07 	.word	0x08008e07
 80064b4:	08008e78 	.word	0x08008e78
 80064b8:	2302      	movs	r3, #2
 80064ba:	9310      	str	r3, [sp, #64]	; 0x40
 80064bc:	9b02      	ldr	r3, [sp, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d016      	beq.n	80064f0 <_dtoa_r+0x3dc>
 80064c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80064c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80064c6:	425c      	negs	r4, r3
 80064c8:	230f      	movs	r3, #15
 80064ca:	4ab6      	ldr	r2, [pc, #728]	; (80067a4 <_dtoa_r+0x690>)
 80064cc:	4023      	ands	r3, r4
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	18d3      	adds	r3, r2, r3
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f7fa ff2f 	bl	8001338 <__aeabi_dmul>
 80064da:	2601      	movs	r6, #1
 80064dc:	2300      	movs	r3, #0
 80064de:	9008      	str	r0, [sp, #32]
 80064e0:	9109      	str	r1, [sp, #36]	; 0x24
 80064e2:	4db1      	ldr	r5, [pc, #708]	; (80067a8 <_dtoa_r+0x694>)
 80064e4:	1124      	asrs	r4, r4, #4
 80064e6:	2c00      	cmp	r4, #0
 80064e8:	d000      	beq.n	80064ec <_dtoa_r+0x3d8>
 80064ea:	e094      	b.n	8006616 <_dtoa_r+0x502>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d19f      	bne.n	8006430 <_dtoa_r+0x31c>
 80064f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d100      	bne.n	80064f8 <_dtoa_r+0x3e4>
 80064f6:	e09b      	b.n	8006630 <_dtoa_r+0x51c>
 80064f8:	9c08      	ldr	r4, [sp, #32]
 80064fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80064fc:	2200      	movs	r2, #0
 80064fe:	0020      	movs	r0, r4
 8006500:	0029      	movs	r1, r5
 8006502:	4baa      	ldr	r3, [pc, #680]	; (80067ac <_dtoa_r+0x698>)
 8006504:	f7f9 ffb2 	bl	800046c <__aeabi_dcmplt>
 8006508:	2800      	cmp	r0, #0
 800650a:	d100      	bne.n	800650e <_dtoa_r+0x3fa>
 800650c:	e090      	b.n	8006630 <_dtoa_r+0x51c>
 800650e:	9b07      	ldr	r3, [sp, #28]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d100      	bne.n	8006516 <_dtoa_r+0x402>
 8006514:	e08c      	b.n	8006630 <_dtoa_r+0x51c>
 8006516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006518:	2b00      	cmp	r3, #0
 800651a:	dd46      	ble.n	80065aa <_dtoa_r+0x496>
 800651c:	9b02      	ldr	r3, [sp, #8]
 800651e:	2200      	movs	r2, #0
 8006520:	0020      	movs	r0, r4
 8006522:	0029      	movs	r1, r5
 8006524:	1e5e      	subs	r6, r3, #1
 8006526:	4ba2      	ldr	r3, [pc, #648]	; (80067b0 <_dtoa_r+0x69c>)
 8006528:	f7fa ff06 	bl	8001338 <__aeabi_dmul>
 800652c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800652e:	9008      	str	r0, [sp, #32]
 8006530:	9109      	str	r1, [sp, #36]	; 0x24
 8006532:	3301      	adds	r3, #1
 8006534:	9310      	str	r3, [sp, #64]	; 0x40
 8006536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006538:	9810      	ldr	r0, [sp, #64]	; 0x40
 800653a:	9c08      	ldr	r4, [sp, #32]
 800653c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800653e:	9314      	str	r3, [sp, #80]	; 0x50
 8006540:	f7fb fd4c 	bl	8001fdc <__aeabi_i2d>
 8006544:	0022      	movs	r2, r4
 8006546:	002b      	movs	r3, r5
 8006548:	f7fa fef6 	bl	8001338 <__aeabi_dmul>
 800654c:	2200      	movs	r2, #0
 800654e:	4b99      	ldr	r3, [pc, #612]	; (80067b4 <_dtoa_r+0x6a0>)
 8006550:	f7f9 ffb4 	bl	80004bc <__aeabi_dadd>
 8006554:	9010      	str	r0, [sp, #64]	; 0x40
 8006556:	9111      	str	r1, [sp, #68]	; 0x44
 8006558:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800655a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800655c:	9208      	str	r2, [sp, #32]
 800655e:	9309      	str	r3, [sp, #36]	; 0x24
 8006560:	4a95      	ldr	r2, [pc, #596]	; (80067b8 <_dtoa_r+0x6a4>)
 8006562:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006564:	4694      	mov	ip, r2
 8006566:	4463      	add	r3, ip
 8006568:	9317      	str	r3, [sp, #92]	; 0x5c
 800656a:	9309      	str	r3, [sp, #36]	; 0x24
 800656c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800656e:	2b00      	cmp	r3, #0
 8006570:	d161      	bne.n	8006636 <_dtoa_r+0x522>
 8006572:	2200      	movs	r2, #0
 8006574:	0020      	movs	r0, r4
 8006576:	0029      	movs	r1, r5
 8006578:	4b90      	ldr	r3, [pc, #576]	; (80067bc <_dtoa_r+0x6a8>)
 800657a:	f7fb f949 	bl	8001810 <__aeabi_dsub>
 800657e:	9a08      	ldr	r2, [sp, #32]
 8006580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006582:	0004      	movs	r4, r0
 8006584:	000d      	movs	r5, r1
 8006586:	f7f9 ff85 	bl	8000494 <__aeabi_dcmpgt>
 800658a:	2800      	cmp	r0, #0
 800658c:	d000      	beq.n	8006590 <_dtoa_r+0x47c>
 800658e:	e2af      	b.n	8006af0 <_dtoa_r+0x9dc>
 8006590:	488b      	ldr	r0, [pc, #556]	; (80067c0 <_dtoa_r+0x6ac>)
 8006592:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006594:	4684      	mov	ip, r0
 8006596:	4461      	add	r1, ip
 8006598:	000b      	movs	r3, r1
 800659a:	0020      	movs	r0, r4
 800659c:	0029      	movs	r1, r5
 800659e:	9a08      	ldr	r2, [sp, #32]
 80065a0:	f7f9 ff64 	bl	800046c <__aeabi_dcmplt>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d000      	beq.n	80065aa <_dtoa_r+0x496>
 80065a8:	e29f      	b.n	8006aea <_dtoa_r+0x9d6>
 80065aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80065ae:	9308      	str	r3, [sp, #32]
 80065b0:	9409      	str	r4, [sp, #36]	; 0x24
 80065b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	da00      	bge.n	80065ba <_dtoa_r+0x4a6>
 80065b8:	e172      	b.n	80068a0 <_dtoa_r+0x78c>
 80065ba:	9a02      	ldr	r2, [sp, #8]
 80065bc:	2a0e      	cmp	r2, #14
 80065be:	dd00      	ble.n	80065c2 <_dtoa_r+0x4ae>
 80065c0:	e16e      	b.n	80068a0 <_dtoa_r+0x78c>
 80065c2:	4b78      	ldr	r3, [pc, #480]	; (80067a4 <_dtoa_r+0x690>)
 80065c4:	00d2      	lsls	r2, r2, #3
 80065c6:	189b      	adds	r3, r3, r2
 80065c8:	685c      	ldr	r4, [r3, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	930a      	str	r3, [sp, #40]	; 0x28
 80065ce:	940b      	str	r4, [sp, #44]	; 0x2c
 80065d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	db00      	blt.n	80065d8 <_dtoa_r+0x4c4>
 80065d6:	e0f7      	b.n	80067c8 <_dtoa_r+0x6b4>
 80065d8:	9b07      	ldr	r3, [sp, #28]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dd00      	ble.n	80065e0 <_dtoa_r+0x4cc>
 80065de:	e0f3      	b.n	80067c8 <_dtoa_r+0x6b4>
 80065e0:	d000      	beq.n	80065e4 <_dtoa_r+0x4d0>
 80065e2:	e282      	b.n	8006aea <_dtoa_r+0x9d6>
 80065e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80065e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065e8:	2200      	movs	r2, #0
 80065ea:	4b74      	ldr	r3, [pc, #464]	; (80067bc <_dtoa_r+0x6a8>)
 80065ec:	f7fa fea4 	bl	8001338 <__aeabi_dmul>
 80065f0:	9a08      	ldr	r2, [sp, #32]
 80065f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f4:	f7f9 ff58 	bl	80004a8 <__aeabi_dcmpge>
 80065f8:	9e07      	ldr	r6, [sp, #28]
 80065fa:	0035      	movs	r5, r6
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d000      	beq.n	8006602 <_dtoa_r+0x4ee>
 8006600:	e259      	b.n	8006ab6 <_dtoa_r+0x9a2>
 8006602:	9b06      	ldr	r3, [sp, #24]
 8006604:	9a06      	ldr	r2, [sp, #24]
 8006606:	3301      	adds	r3, #1
 8006608:	9308      	str	r3, [sp, #32]
 800660a:	2331      	movs	r3, #49	; 0x31
 800660c:	7013      	strb	r3, [r2, #0]
 800660e:	9b02      	ldr	r3, [sp, #8]
 8006610:	3301      	adds	r3, #1
 8006612:	9302      	str	r3, [sp, #8]
 8006614:	e254      	b.n	8006ac0 <_dtoa_r+0x9ac>
 8006616:	4234      	tst	r4, r6
 8006618:	d007      	beq.n	800662a <_dtoa_r+0x516>
 800661a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800661c:	3301      	adds	r3, #1
 800661e:	9310      	str	r3, [sp, #64]	; 0x40
 8006620:	682a      	ldr	r2, [r5, #0]
 8006622:	686b      	ldr	r3, [r5, #4]
 8006624:	f7fa fe88 	bl	8001338 <__aeabi_dmul>
 8006628:	0033      	movs	r3, r6
 800662a:	1064      	asrs	r4, r4, #1
 800662c:	3508      	adds	r5, #8
 800662e:	e75a      	b.n	80064e6 <_dtoa_r+0x3d2>
 8006630:	9e02      	ldr	r6, [sp, #8]
 8006632:	9b07      	ldr	r3, [sp, #28]
 8006634:	e780      	b.n	8006538 <_dtoa_r+0x424>
 8006636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006638:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800663a:	1e5a      	subs	r2, r3, #1
 800663c:	4b59      	ldr	r3, [pc, #356]	; (80067a4 <_dtoa_r+0x690>)
 800663e:	00d2      	lsls	r2, r2, #3
 8006640:	189b      	adds	r3, r3, r2
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2900      	cmp	r1, #0
 8006648:	d051      	beq.n	80066ee <_dtoa_r+0x5da>
 800664a:	2000      	movs	r0, #0
 800664c:	495d      	ldr	r1, [pc, #372]	; (80067c4 <_dtoa_r+0x6b0>)
 800664e:	f7fa fa71 	bl	8000b34 <__aeabi_ddiv>
 8006652:	9a08      	ldr	r2, [sp, #32]
 8006654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006656:	f7fb f8db 	bl	8001810 <__aeabi_dsub>
 800665a:	9a06      	ldr	r2, [sp, #24]
 800665c:	9b06      	ldr	r3, [sp, #24]
 800665e:	4694      	mov	ip, r2
 8006660:	9317      	str	r3, [sp, #92]	; 0x5c
 8006662:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006664:	9010      	str	r0, [sp, #64]	; 0x40
 8006666:	9111      	str	r1, [sp, #68]	; 0x44
 8006668:	4463      	add	r3, ip
 800666a:	9319      	str	r3, [sp, #100]	; 0x64
 800666c:	0029      	movs	r1, r5
 800666e:	0020      	movs	r0, r4
 8006670:	f7fb fc7e 	bl	8001f70 <__aeabi_d2iz>
 8006674:	9014      	str	r0, [sp, #80]	; 0x50
 8006676:	f7fb fcb1 	bl	8001fdc <__aeabi_i2d>
 800667a:	0002      	movs	r2, r0
 800667c:	000b      	movs	r3, r1
 800667e:	0020      	movs	r0, r4
 8006680:	0029      	movs	r1, r5
 8006682:	f7fb f8c5 	bl	8001810 <__aeabi_dsub>
 8006686:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006688:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800668a:	3301      	adds	r3, #1
 800668c:	9308      	str	r3, [sp, #32]
 800668e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006690:	0004      	movs	r4, r0
 8006692:	3330      	adds	r3, #48	; 0x30
 8006694:	7013      	strb	r3, [r2, #0]
 8006696:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800669a:	000d      	movs	r5, r1
 800669c:	f7f9 fee6 	bl	800046c <__aeabi_dcmplt>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d175      	bne.n	8006790 <_dtoa_r+0x67c>
 80066a4:	0022      	movs	r2, r4
 80066a6:	002b      	movs	r3, r5
 80066a8:	2000      	movs	r0, #0
 80066aa:	4940      	ldr	r1, [pc, #256]	; (80067ac <_dtoa_r+0x698>)
 80066ac:	f7fb f8b0 	bl	8001810 <__aeabi_dsub>
 80066b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b4:	f7f9 feda 	bl	800046c <__aeabi_dcmplt>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d000      	beq.n	80066be <_dtoa_r+0x5aa>
 80066bc:	e0d2      	b.n	8006864 <_dtoa_r+0x750>
 80066be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066c0:	9a08      	ldr	r2, [sp, #32]
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d100      	bne.n	80066c8 <_dtoa_r+0x5b4>
 80066c6:	e770      	b.n	80065aa <_dtoa_r+0x496>
 80066c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80066ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066cc:	2200      	movs	r2, #0
 80066ce:	4b38      	ldr	r3, [pc, #224]	; (80067b0 <_dtoa_r+0x69c>)
 80066d0:	f7fa fe32 	bl	8001338 <__aeabi_dmul>
 80066d4:	4b36      	ldr	r3, [pc, #216]	; (80067b0 <_dtoa_r+0x69c>)
 80066d6:	9010      	str	r0, [sp, #64]	; 0x40
 80066d8:	9111      	str	r1, [sp, #68]	; 0x44
 80066da:	2200      	movs	r2, #0
 80066dc:	0020      	movs	r0, r4
 80066de:	0029      	movs	r1, r5
 80066e0:	f7fa fe2a 	bl	8001338 <__aeabi_dmul>
 80066e4:	9b08      	ldr	r3, [sp, #32]
 80066e6:	0004      	movs	r4, r0
 80066e8:	000d      	movs	r5, r1
 80066ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80066ec:	e7be      	b.n	800666c <_dtoa_r+0x558>
 80066ee:	9808      	ldr	r0, [sp, #32]
 80066f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066f2:	f7fa fe21 	bl	8001338 <__aeabi_dmul>
 80066f6:	9a06      	ldr	r2, [sp, #24]
 80066f8:	9b06      	ldr	r3, [sp, #24]
 80066fa:	4694      	mov	ip, r2
 80066fc:	9308      	str	r3, [sp, #32]
 80066fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006700:	9010      	str	r0, [sp, #64]	; 0x40
 8006702:	9111      	str	r1, [sp, #68]	; 0x44
 8006704:	4463      	add	r3, ip
 8006706:	9319      	str	r3, [sp, #100]	; 0x64
 8006708:	0029      	movs	r1, r5
 800670a:	0020      	movs	r0, r4
 800670c:	f7fb fc30 	bl	8001f70 <__aeabi_d2iz>
 8006710:	9017      	str	r0, [sp, #92]	; 0x5c
 8006712:	f7fb fc63 	bl	8001fdc <__aeabi_i2d>
 8006716:	0002      	movs	r2, r0
 8006718:	000b      	movs	r3, r1
 800671a:	0020      	movs	r0, r4
 800671c:	0029      	movs	r1, r5
 800671e:	f7fb f877 	bl	8001810 <__aeabi_dsub>
 8006722:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006724:	9a08      	ldr	r2, [sp, #32]
 8006726:	3330      	adds	r3, #48	; 0x30
 8006728:	7013      	strb	r3, [r2, #0]
 800672a:	0013      	movs	r3, r2
 800672c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800672e:	3301      	adds	r3, #1
 8006730:	0004      	movs	r4, r0
 8006732:	000d      	movs	r5, r1
 8006734:	9308      	str	r3, [sp, #32]
 8006736:	4293      	cmp	r3, r2
 8006738:	d12c      	bne.n	8006794 <_dtoa_r+0x680>
 800673a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800673c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800673e:	9a06      	ldr	r2, [sp, #24]
 8006740:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006742:	4694      	mov	ip, r2
 8006744:	4463      	add	r3, ip
 8006746:	2200      	movs	r2, #0
 8006748:	9308      	str	r3, [sp, #32]
 800674a:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <_dtoa_r+0x6b0>)
 800674c:	f7f9 feb6 	bl	80004bc <__aeabi_dadd>
 8006750:	0002      	movs	r2, r0
 8006752:	000b      	movs	r3, r1
 8006754:	0020      	movs	r0, r4
 8006756:	0029      	movs	r1, r5
 8006758:	f7f9 fe9c 	bl	8000494 <__aeabi_dcmpgt>
 800675c:	2800      	cmp	r0, #0
 800675e:	d000      	beq.n	8006762 <_dtoa_r+0x64e>
 8006760:	e080      	b.n	8006864 <_dtoa_r+0x750>
 8006762:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006764:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006766:	2000      	movs	r0, #0
 8006768:	4916      	ldr	r1, [pc, #88]	; (80067c4 <_dtoa_r+0x6b0>)
 800676a:	f7fb f851 	bl	8001810 <__aeabi_dsub>
 800676e:	0002      	movs	r2, r0
 8006770:	000b      	movs	r3, r1
 8006772:	0020      	movs	r0, r4
 8006774:	0029      	movs	r1, r5
 8006776:	f7f9 fe79 	bl	800046c <__aeabi_dcmplt>
 800677a:	2800      	cmp	r0, #0
 800677c:	d100      	bne.n	8006780 <_dtoa_r+0x66c>
 800677e:	e714      	b.n	80065aa <_dtoa_r+0x496>
 8006780:	9b08      	ldr	r3, [sp, #32]
 8006782:	001a      	movs	r2, r3
 8006784:	3a01      	subs	r2, #1
 8006786:	9208      	str	r2, [sp, #32]
 8006788:	7812      	ldrb	r2, [r2, #0]
 800678a:	2a30      	cmp	r2, #48	; 0x30
 800678c:	d0f8      	beq.n	8006780 <_dtoa_r+0x66c>
 800678e:	9308      	str	r3, [sp, #32]
 8006790:	9602      	str	r6, [sp, #8]
 8006792:	e055      	b.n	8006840 <_dtoa_r+0x72c>
 8006794:	2200      	movs	r2, #0
 8006796:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <_dtoa_r+0x69c>)
 8006798:	f7fa fdce 	bl	8001338 <__aeabi_dmul>
 800679c:	0004      	movs	r4, r0
 800679e:	000d      	movs	r5, r1
 80067a0:	e7b2      	b.n	8006708 <_dtoa_r+0x5f4>
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	08008ea0 	.word	0x08008ea0
 80067a8:	08008e78 	.word	0x08008e78
 80067ac:	3ff00000 	.word	0x3ff00000
 80067b0:	40240000 	.word	0x40240000
 80067b4:	401c0000 	.word	0x401c0000
 80067b8:	fcc00000 	.word	0xfcc00000
 80067bc:	40140000 	.word	0x40140000
 80067c0:	7cc00000 	.word	0x7cc00000
 80067c4:	3fe00000 	.word	0x3fe00000
 80067c8:	9b07      	ldr	r3, [sp, #28]
 80067ca:	9e06      	ldr	r6, [sp, #24]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	199b      	adds	r3, r3, r6
 80067d0:	930c      	str	r3, [sp, #48]	; 0x30
 80067d2:	9c08      	ldr	r4, [sp, #32]
 80067d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80067d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067da:	0020      	movs	r0, r4
 80067dc:	0029      	movs	r1, r5
 80067de:	f7fa f9a9 	bl	8000b34 <__aeabi_ddiv>
 80067e2:	f7fb fbc5 	bl	8001f70 <__aeabi_d2iz>
 80067e6:	9007      	str	r0, [sp, #28]
 80067e8:	f7fb fbf8 	bl	8001fdc <__aeabi_i2d>
 80067ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067f0:	f7fa fda2 	bl	8001338 <__aeabi_dmul>
 80067f4:	0002      	movs	r2, r0
 80067f6:	000b      	movs	r3, r1
 80067f8:	0020      	movs	r0, r4
 80067fa:	0029      	movs	r1, r5
 80067fc:	f7fb f808 	bl	8001810 <__aeabi_dsub>
 8006800:	0033      	movs	r3, r6
 8006802:	9a07      	ldr	r2, [sp, #28]
 8006804:	3601      	adds	r6, #1
 8006806:	3230      	adds	r2, #48	; 0x30
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800680c:	9608      	str	r6, [sp, #32]
 800680e:	429a      	cmp	r2, r3
 8006810:	d139      	bne.n	8006886 <_dtoa_r+0x772>
 8006812:	0002      	movs	r2, r0
 8006814:	000b      	movs	r3, r1
 8006816:	f7f9 fe51 	bl	80004bc <__aeabi_dadd>
 800681a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800681c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800681e:	0004      	movs	r4, r0
 8006820:	000d      	movs	r5, r1
 8006822:	f7f9 fe37 	bl	8000494 <__aeabi_dcmpgt>
 8006826:	2800      	cmp	r0, #0
 8006828:	d11b      	bne.n	8006862 <_dtoa_r+0x74e>
 800682a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800682c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800682e:	0020      	movs	r0, r4
 8006830:	0029      	movs	r1, r5
 8006832:	f7f9 fe15 	bl	8000460 <__aeabi_dcmpeq>
 8006836:	2800      	cmp	r0, #0
 8006838:	d002      	beq.n	8006840 <_dtoa_r+0x72c>
 800683a:	9b07      	ldr	r3, [sp, #28]
 800683c:	07db      	lsls	r3, r3, #31
 800683e:	d410      	bmi.n	8006862 <_dtoa_r+0x74e>
 8006840:	0038      	movs	r0, r7
 8006842:	9905      	ldr	r1, [sp, #20]
 8006844:	f000 fae6 	bl	8006e14 <_Bfree>
 8006848:	2300      	movs	r3, #0
 800684a:	9a08      	ldr	r2, [sp, #32]
 800684c:	9802      	ldr	r0, [sp, #8]
 800684e:	7013      	strb	r3, [r2, #0]
 8006850:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006852:	3001      	adds	r0, #1
 8006854:	6018      	str	r0, [r3, #0]
 8006856:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006858:	2b00      	cmp	r3, #0
 800685a:	d100      	bne.n	800685e <_dtoa_r+0x74a>
 800685c:	e4a6      	b.n	80061ac <_dtoa_r+0x98>
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e4a4      	b.n	80061ac <_dtoa_r+0x98>
 8006862:	9e02      	ldr	r6, [sp, #8]
 8006864:	9b08      	ldr	r3, [sp, #32]
 8006866:	9308      	str	r3, [sp, #32]
 8006868:	3b01      	subs	r3, #1
 800686a:	781a      	ldrb	r2, [r3, #0]
 800686c:	2a39      	cmp	r2, #57	; 0x39
 800686e:	d106      	bne.n	800687e <_dtoa_r+0x76a>
 8006870:	9a06      	ldr	r2, [sp, #24]
 8006872:	429a      	cmp	r2, r3
 8006874:	d1f7      	bne.n	8006866 <_dtoa_r+0x752>
 8006876:	2230      	movs	r2, #48	; 0x30
 8006878:	9906      	ldr	r1, [sp, #24]
 800687a:	3601      	adds	r6, #1
 800687c:	700a      	strb	r2, [r1, #0]
 800687e:	781a      	ldrb	r2, [r3, #0]
 8006880:	3201      	adds	r2, #1
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	e784      	b.n	8006790 <_dtoa_r+0x67c>
 8006886:	2200      	movs	r2, #0
 8006888:	4baa      	ldr	r3, [pc, #680]	; (8006b34 <_dtoa_r+0xa20>)
 800688a:	f7fa fd55 	bl	8001338 <__aeabi_dmul>
 800688e:	2200      	movs	r2, #0
 8006890:	2300      	movs	r3, #0
 8006892:	0004      	movs	r4, r0
 8006894:	000d      	movs	r5, r1
 8006896:	f7f9 fde3 	bl	8000460 <__aeabi_dcmpeq>
 800689a:	2800      	cmp	r0, #0
 800689c:	d09b      	beq.n	80067d6 <_dtoa_r+0x6c2>
 800689e:	e7cf      	b.n	8006840 <_dtoa_r+0x72c>
 80068a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80068a2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80068a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	d012      	beq.n	80068d0 <_dtoa_r+0x7bc>
 80068aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80068ac:	2a01      	cmp	r2, #1
 80068ae:	dc66      	bgt.n	800697e <_dtoa_r+0x86a>
 80068b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	d05d      	beq.n	8006972 <_dtoa_r+0x85e>
 80068b6:	4aa0      	ldr	r2, [pc, #640]	; (8006b38 <_dtoa_r+0xa24>)
 80068b8:	189b      	adds	r3, r3, r2
 80068ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068bc:	2101      	movs	r1, #1
 80068be:	18d2      	adds	r2, r2, r3
 80068c0:	920a      	str	r2, [sp, #40]	; 0x28
 80068c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068c4:	0038      	movs	r0, r7
 80068c6:	18d3      	adds	r3, r2, r3
 80068c8:	930d      	str	r3, [sp, #52]	; 0x34
 80068ca:	f000 fb53 	bl	8006f74 <__i2b>
 80068ce:	0005      	movs	r5, r0
 80068d0:	2c00      	cmp	r4, #0
 80068d2:	dd0e      	ble.n	80068f2 <_dtoa_r+0x7de>
 80068d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dd0b      	ble.n	80068f2 <_dtoa_r+0x7de>
 80068da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068dc:	0023      	movs	r3, r4
 80068de:	4294      	cmp	r4, r2
 80068e0:	dd00      	ble.n	80068e4 <_dtoa_r+0x7d0>
 80068e2:	0013      	movs	r3, r2
 80068e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068e6:	1ae4      	subs	r4, r4, r3
 80068e8:	1ad2      	subs	r2, r2, r3
 80068ea:	920a      	str	r2, [sp, #40]	; 0x28
 80068ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	930d      	str	r3, [sp, #52]	; 0x34
 80068f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01f      	beq.n	8006938 <_dtoa_r+0x824>
 80068f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d054      	beq.n	80069a8 <_dtoa_r+0x894>
 80068fe:	2e00      	cmp	r6, #0
 8006900:	dd11      	ble.n	8006926 <_dtoa_r+0x812>
 8006902:	0029      	movs	r1, r5
 8006904:	0032      	movs	r2, r6
 8006906:	0038      	movs	r0, r7
 8006908:	f000 fbfa 	bl	8007100 <__pow5mult>
 800690c:	9a05      	ldr	r2, [sp, #20]
 800690e:	0001      	movs	r1, r0
 8006910:	0005      	movs	r5, r0
 8006912:	0038      	movs	r0, r7
 8006914:	f000 fb44 	bl	8006fa0 <__multiply>
 8006918:	9905      	ldr	r1, [sp, #20]
 800691a:	9014      	str	r0, [sp, #80]	; 0x50
 800691c:	0038      	movs	r0, r7
 800691e:	f000 fa79 	bl	8006e14 <_Bfree>
 8006922:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006924:	9305      	str	r3, [sp, #20]
 8006926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006928:	1b9a      	subs	r2, r3, r6
 800692a:	42b3      	cmp	r3, r6
 800692c:	d004      	beq.n	8006938 <_dtoa_r+0x824>
 800692e:	0038      	movs	r0, r7
 8006930:	9905      	ldr	r1, [sp, #20]
 8006932:	f000 fbe5 	bl	8007100 <__pow5mult>
 8006936:	9005      	str	r0, [sp, #20]
 8006938:	2101      	movs	r1, #1
 800693a:	0038      	movs	r0, r7
 800693c:	f000 fb1a 	bl	8006f74 <__i2b>
 8006940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006942:	0006      	movs	r6, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	dd31      	ble.n	80069ac <_dtoa_r+0x898>
 8006948:	001a      	movs	r2, r3
 800694a:	0001      	movs	r1, r0
 800694c:	0038      	movs	r0, r7
 800694e:	f000 fbd7 	bl	8007100 <__pow5mult>
 8006952:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006954:	0006      	movs	r6, r0
 8006956:	2b01      	cmp	r3, #1
 8006958:	dd2d      	ble.n	80069b6 <_dtoa_r+0x8a2>
 800695a:	2300      	movs	r3, #0
 800695c:	930e      	str	r3, [sp, #56]	; 0x38
 800695e:	6933      	ldr	r3, [r6, #16]
 8006960:	3303      	adds	r3, #3
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	18f3      	adds	r3, r6, r3
 8006966:	6858      	ldr	r0, [r3, #4]
 8006968:	f000 fabc 	bl	8006ee4 <__hi0bits>
 800696c:	2320      	movs	r3, #32
 800696e:	1a18      	subs	r0, r3, r0
 8006970:	e039      	b.n	80069e6 <_dtoa_r+0x8d2>
 8006972:	2336      	movs	r3, #54	; 0x36
 8006974:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006976:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006978:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	e79d      	b.n	80068ba <_dtoa_r+0x7a6>
 800697e:	9b07      	ldr	r3, [sp, #28]
 8006980:	1e5e      	subs	r6, r3, #1
 8006982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006984:	42b3      	cmp	r3, r6
 8006986:	db07      	blt.n	8006998 <_dtoa_r+0x884>
 8006988:	1b9e      	subs	r6, r3, r6
 800698a:	9b07      	ldr	r3, [sp, #28]
 800698c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800698e:	2b00      	cmp	r3, #0
 8006990:	da93      	bge.n	80068ba <_dtoa_r+0x7a6>
 8006992:	1ae4      	subs	r4, r4, r3
 8006994:	2300      	movs	r3, #0
 8006996:	e790      	b.n	80068ba <_dtoa_r+0x7a6>
 8006998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800699a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800699c:	1af3      	subs	r3, r6, r3
 800699e:	18d3      	adds	r3, r2, r3
 80069a0:	960e      	str	r6, [sp, #56]	; 0x38
 80069a2:	9315      	str	r3, [sp, #84]	; 0x54
 80069a4:	2600      	movs	r6, #0
 80069a6:	e7f0      	b.n	800698a <_dtoa_r+0x876>
 80069a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069aa:	e7c0      	b.n	800692e <_dtoa_r+0x81a>
 80069ac:	2300      	movs	r3, #0
 80069ae:	930e      	str	r3, [sp, #56]	; 0x38
 80069b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	dc13      	bgt.n	80069de <_dtoa_r+0x8ca>
 80069b6:	2300      	movs	r3, #0
 80069b8:	930e      	str	r3, [sp, #56]	; 0x38
 80069ba:	9b08      	ldr	r3, [sp, #32]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10e      	bne.n	80069de <_dtoa_r+0x8ca>
 80069c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c2:	031b      	lsls	r3, r3, #12
 80069c4:	d10b      	bne.n	80069de <_dtoa_r+0x8ca>
 80069c6:	4b5d      	ldr	r3, [pc, #372]	; (8006b3c <_dtoa_r+0xa28>)
 80069c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ca:	4213      	tst	r3, r2
 80069cc:	d007      	beq.n	80069de <_dtoa_r+0x8ca>
 80069ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d0:	3301      	adds	r3, #1
 80069d2:	930a      	str	r3, [sp, #40]	; 0x28
 80069d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069d6:	3301      	adds	r3, #1
 80069d8:	930d      	str	r3, [sp, #52]	; 0x34
 80069da:	2301      	movs	r3, #1
 80069dc:	930e      	str	r3, [sp, #56]	; 0x38
 80069de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069e0:	2001      	movs	r0, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1bb      	bne.n	800695e <_dtoa_r+0x84a>
 80069e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069e8:	221f      	movs	r2, #31
 80069ea:	1818      	adds	r0, r3, r0
 80069ec:	0003      	movs	r3, r0
 80069ee:	4013      	ands	r3, r2
 80069f0:	4210      	tst	r0, r2
 80069f2:	d046      	beq.n	8006a82 <_dtoa_r+0x96e>
 80069f4:	3201      	adds	r2, #1
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	2a04      	cmp	r2, #4
 80069fa:	dd3f      	ble.n	8006a7c <_dtoa_r+0x968>
 80069fc:	221c      	movs	r2, #28
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a02:	18e4      	adds	r4, r4, r3
 8006a04:	18d2      	adds	r2, r2, r3
 8006a06:	920a      	str	r2, [sp, #40]	; 0x28
 8006a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a0a:	18d3      	adds	r3, r2, r3
 8006a0c:	930d      	str	r3, [sp, #52]	; 0x34
 8006a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dd05      	ble.n	8006a20 <_dtoa_r+0x90c>
 8006a14:	001a      	movs	r2, r3
 8006a16:	0038      	movs	r0, r7
 8006a18:	9905      	ldr	r1, [sp, #20]
 8006a1a:	f000 fbcd 	bl	80071b8 <__lshift>
 8006a1e:	9005      	str	r0, [sp, #20]
 8006a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	dd05      	ble.n	8006a32 <_dtoa_r+0x91e>
 8006a26:	0031      	movs	r1, r6
 8006a28:	001a      	movs	r2, r3
 8006a2a:	0038      	movs	r0, r7
 8006a2c:	f000 fbc4 	bl	80071b8 <__lshift>
 8006a30:	0006      	movs	r6, r0
 8006a32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d026      	beq.n	8006a86 <_dtoa_r+0x972>
 8006a38:	0031      	movs	r1, r6
 8006a3a:	9805      	ldr	r0, [sp, #20]
 8006a3c:	f000 fc2a 	bl	8007294 <__mcmp>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	da20      	bge.n	8006a86 <_dtoa_r+0x972>
 8006a44:	9b02      	ldr	r3, [sp, #8]
 8006a46:	220a      	movs	r2, #10
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	9302      	str	r3, [sp, #8]
 8006a4c:	0038      	movs	r0, r7
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9905      	ldr	r1, [sp, #20]
 8006a52:	f000 fa03 	bl	8006e5c <__multadd>
 8006a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a58:	9005      	str	r0, [sp, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d100      	bne.n	8006a60 <_dtoa_r+0x94c>
 8006a5e:	e166      	b.n	8006d2e <_dtoa_r+0xc1a>
 8006a60:	2300      	movs	r3, #0
 8006a62:	0029      	movs	r1, r5
 8006a64:	220a      	movs	r2, #10
 8006a66:	0038      	movs	r0, r7
 8006a68:	f000 f9f8 	bl	8006e5c <__multadd>
 8006a6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a6e:	0005      	movs	r5, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	dc47      	bgt.n	8006b04 <_dtoa_r+0x9f0>
 8006a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	dc0d      	bgt.n	8006a96 <_dtoa_r+0x982>
 8006a7a:	e043      	b.n	8006b04 <_dtoa_r+0x9f0>
 8006a7c:	2a04      	cmp	r2, #4
 8006a7e:	d0c6      	beq.n	8006a0e <_dtoa_r+0x8fa>
 8006a80:	0013      	movs	r3, r2
 8006a82:	331c      	adds	r3, #28
 8006a84:	e7bc      	b.n	8006a00 <_dtoa_r+0x8ec>
 8006a86:	9b07      	ldr	r3, [sp, #28]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	dc35      	bgt.n	8006af8 <_dtoa_r+0x9e4>
 8006a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	dd32      	ble.n	8006af8 <_dtoa_r+0x9e4>
 8006a92:	9b07      	ldr	r3, [sp, #28]
 8006a94:	930c      	str	r3, [sp, #48]	; 0x30
 8006a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10c      	bne.n	8006ab6 <_dtoa_r+0x9a2>
 8006a9c:	0031      	movs	r1, r6
 8006a9e:	2205      	movs	r2, #5
 8006aa0:	0038      	movs	r0, r7
 8006aa2:	f000 f9db 	bl	8006e5c <__multadd>
 8006aa6:	0006      	movs	r6, r0
 8006aa8:	0001      	movs	r1, r0
 8006aaa:	9805      	ldr	r0, [sp, #20]
 8006aac:	f000 fbf2 	bl	8007294 <__mcmp>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	dd00      	ble.n	8006ab6 <_dtoa_r+0x9a2>
 8006ab4:	e5a5      	b.n	8006602 <_dtoa_r+0x4ee>
 8006ab6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	9302      	str	r3, [sp, #8]
 8006abc:	9b06      	ldr	r3, [sp, #24]
 8006abe:	9308      	str	r3, [sp, #32]
 8006ac0:	2400      	movs	r4, #0
 8006ac2:	0031      	movs	r1, r6
 8006ac4:	0038      	movs	r0, r7
 8006ac6:	f000 f9a5 	bl	8006e14 <_Bfree>
 8006aca:	2d00      	cmp	r5, #0
 8006acc:	d100      	bne.n	8006ad0 <_dtoa_r+0x9bc>
 8006ace:	e6b7      	b.n	8006840 <_dtoa_r+0x72c>
 8006ad0:	2c00      	cmp	r4, #0
 8006ad2:	d005      	beq.n	8006ae0 <_dtoa_r+0x9cc>
 8006ad4:	42ac      	cmp	r4, r5
 8006ad6:	d003      	beq.n	8006ae0 <_dtoa_r+0x9cc>
 8006ad8:	0021      	movs	r1, r4
 8006ada:	0038      	movs	r0, r7
 8006adc:	f000 f99a 	bl	8006e14 <_Bfree>
 8006ae0:	0029      	movs	r1, r5
 8006ae2:	0038      	movs	r0, r7
 8006ae4:	f000 f996 	bl	8006e14 <_Bfree>
 8006ae8:	e6aa      	b.n	8006840 <_dtoa_r+0x72c>
 8006aea:	2600      	movs	r6, #0
 8006aec:	0035      	movs	r5, r6
 8006aee:	e7e2      	b.n	8006ab6 <_dtoa_r+0x9a2>
 8006af0:	9602      	str	r6, [sp, #8]
 8006af2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006af4:	0035      	movs	r5, r6
 8006af6:	e584      	b.n	8006602 <_dtoa_r+0x4ee>
 8006af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d100      	bne.n	8006b00 <_dtoa_r+0x9ec>
 8006afe:	e0ce      	b.n	8006c9e <_dtoa_r+0xb8a>
 8006b00:	9b07      	ldr	r3, [sp, #28]
 8006b02:	930c      	str	r3, [sp, #48]	; 0x30
 8006b04:	2c00      	cmp	r4, #0
 8006b06:	dd05      	ble.n	8006b14 <_dtoa_r+0xa00>
 8006b08:	0029      	movs	r1, r5
 8006b0a:	0022      	movs	r2, r4
 8006b0c:	0038      	movs	r0, r7
 8006b0e:	f000 fb53 	bl	80071b8 <__lshift>
 8006b12:	0005      	movs	r5, r0
 8006b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b16:	0028      	movs	r0, r5
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d022      	beq.n	8006b62 <_dtoa_r+0xa4e>
 8006b1c:	0038      	movs	r0, r7
 8006b1e:	6869      	ldr	r1, [r5, #4]
 8006b20:	f000 f934 	bl	8006d8c <_Balloc>
 8006b24:	1e04      	subs	r4, r0, #0
 8006b26:	d10f      	bne.n	8006b48 <_dtoa_r+0xa34>
 8006b28:	0002      	movs	r2, r0
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <_dtoa_r+0xa2c>)
 8006b2c:	4905      	ldr	r1, [pc, #20]	; (8006b44 <_dtoa_r+0xa30>)
 8006b2e:	f7ff fb06 	bl	800613e <_dtoa_r+0x2a>
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	40240000 	.word	0x40240000
 8006b38:	00000433 	.word	0x00000433
 8006b3c:	7ff00000 	.word	0x7ff00000
 8006b40:	08008e07 	.word	0x08008e07
 8006b44:	000002ea 	.word	0x000002ea
 8006b48:	0029      	movs	r1, r5
 8006b4a:	692b      	ldr	r3, [r5, #16]
 8006b4c:	310c      	adds	r1, #12
 8006b4e:	1c9a      	adds	r2, r3, #2
 8006b50:	0092      	lsls	r2, r2, #2
 8006b52:	300c      	adds	r0, #12
 8006b54:	f000 f911 	bl	8006d7a <memcpy>
 8006b58:	2201      	movs	r2, #1
 8006b5a:	0021      	movs	r1, r4
 8006b5c:	0038      	movs	r0, r7
 8006b5e:	f000 fb2b 	bl	80071b8 <__lshift>
 8006b62:	9b06      	ldr	r3, [sp, #24]
 8006b64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b66:	930a      	str	r3, [sp, #40]	; 0x28
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	002c      	movs	r4, r5
 8006b70:	0005      	movs	r5, r0
 8006b72:	9314      	str	r3, [sp, #80]	; 0x50
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	4013      	ands	r3, r2
 8006b78:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b7a:	0031      	movs	r1, r6
 8006b7c:	9805      	ldr	r0, [sp, #20]
 8006b7e:	f7ff fa3d 	bl	8005ffc <quorem>
 8006b82:	0003      	movs	r3, r0
 8006b84:	0021      	movs	r1, r4
 8006b86:	3330      	adds	r3, #48	; 0x30
 8006b88:	900d      	str	r0, [sp, #52]	; 0x34
 8006b8a:	9805      	ldr	r0, [sp, #20]
 8006b8c:	9307      	str	r3, [sp, #28]
 8006b8e:	f000 fb81 	bl	8007294 <__mcmp>
 8006b92:	002a      	movs	r2, r5
 8006b94:	900e      	str	r0, [sp, #56]	; 0x38
 8006b96:	0031      	movs	r1, r6
 8006b98:	0038      	movs	r0, r7
 8006b9a:	f000 fb97 	bl	80072cc <__mdiff>
 8006b9e:	68c3      	ldr	r3, [r0, #12]
 8006ba0:	9008      	str	r0, [sp, #32]
 8006ba2:	9310      	str	r3, [sp, #64]	; 0x40
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ba8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <_dtoa_r+0xaa4>
 8006bae:	0001      	movs	r1, r0
 8006bb0:	9805      	ldr	r0, [sp, #20]
 8006bb2:	f000 fb6f 	bl	8007294 <__mcmp>
 8006bb6:	900c      	str	r0, [sp, #48]	; 0x30
 8006bb8:	0038      	movs	r0, r7
 8006bba:	9908      	ldr	r1, [sp, #32]
 8006bbc:	f000 f92a 	bl	8006e14 <_Bfree>
 8006bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	9308      	str	r3, [sp, #32]
 8006bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	d10c      	bne.n	8006bec <_dtoa_r+0xad8>
 8006bd2:	9b07      	ldr	r3, [sp, #28]
 8006bd4:	2b39      	cmp	r3, #57	; 0x39
 8006bd6:	d026      	beq.n	8006c26 <_dtoa_r+0xb12>
 8006bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dd02      	ble.n	8006be4 <_dtoa_r+0xad0>
 8006bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006be0:	3331      	adds	r3, #49	; 0x31
 8006be2:	9307      	str	r3, [sp, #28]
 8006be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be6:	9a07      	ldr	r2, [sp, #28]
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	e76a      	b.n	8006ac2 <_dtoa_r+0x9ae>
 8006bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	db04      	blt.n	8006bfc <_dtoa_r+0xae8>
 8006bf2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	d11f      	bne.n	8006c3c <_dtoa_r+0xb28>
 8006bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	ddf0      	ble.n	8006be4 <_dtoa_r+0xad0>
 8006c02:	9905      	ldr	r1, [sp, #20]
 8006c04:	2201      	movs	r2, #1
 8006c06:	0038      	movs	r0, r7
 8006c08:	f000 fad6 	bl	80071b8 <__lshift>
 8006c0c:	0031      	movs	r1, r6
 8006c0e:	9005      	str	r0, [sp, #20]
 8006c10:	f000 fb40 	bl	8007294 <__mcmp>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	dc03      	bgt.n	8006c20 <_dtoa_r+0xb0c>
 8006c18:	d1e4      	bne.n	8006be4 <_dtoa_r+0xad0>
 8006c1a:	9b07      	ldr	r3, [sp, #28]
 8006c1c:	07db      	lsls	r3, r3, #31
 8006c1e:	d5e1      	bpl.n	8006be4 <_dtoa_r+0xad0>
 8006c20:	9b07      	ldr	r3, [sp, #28]
 8006c22:	2b39      	cmp	r3, #57	; 0x39
 8006c24:	d1db      	bne.n	8006bde <_dtoa_r+0xaca>
 8006c26:	2339      	movs	r3, #57	; 0x39
 8006c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c2a:	7013      	strb	r3, [r2, #0]
 8006c2c:	9b08      	ldr	r3, [sp, #32]
 8006c2e:	9308      	str	r3, [sp, #32]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	2a39      	cmp	r2, #57	; 0x39
 8006c36:	d068      	beq.n	8006d0a <_dtoa_r+0xbf6>
 8006c38:	3201      	adds	r2, #1
 8006c3a:	e7d5      	b.n	8006be8 <_dtoa_r+0xad4>
 8006c3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	dd07      	ble.n	8006c52 <_dtoa_r+0xb3e>
 8006c42:	9b07      	ldr	r3, [sp, #28]
 8006c44:	2b39      	cmp	r3, #57	; 0x39
 8006c46:	d0ee      	beq.n	8006c26 <_dtoa_r+0xb12>
 8006c48:	9b07      	ldr	r3, [sp, #28]
 8006c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	7013      	strb	r3, [r2, #0]
 8006c50:	e737      	b.n	8006ac2 <_dtoa_r+0x9ae>
 8006c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c54:	9a07      	ldr	r2, [sp, #28]
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d03e      	beq.n	8006cde <_dtoa_r+0xbca>
 8006c60:	2300      	movs	r3, #0
 8006c62:	220a      	movs	r2, #10
 8006c64:	9905      	ldr	r1, [sp, #20]
 8006c66:	0038      	movs	r0, r7
 8006c68:	f000 f8f8 	bl	8006e5c <__multadd>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9005      	str	r0, [sp, #20]
 8006c70:	220a      	movs	r2, #10
 8006c72:	0021      	movs	r1, r4
 8006c74:	0038      	movs	r0, r7
 8006c76:	42ac      	cmp	r4, r5
 8006c78:	d106      	bne.n	8006c88 <_dtoa_r+0xb74>
 8006c7a:	f000 f8ef 	bl	8006e5c <__multadd>
 8006c7e:	0004      	movs	r4, r0
 8006c80:	0005      	movs	r5, r0
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	930a      	str	r3, [sp, #40]	; 0x28
 8006c86:	e778      	b.n	8006b7a <_dtoa_r+0xa66>
 8006c88:	f000 f8e8 	bl	8006e5c <__multadd>
 8006c8c:	0029      	movs	r1, r5
 8006c8e:	0004      	movs	r4, r0
 8006c90:	2300      	movs	r3, #0
 8006c92:	220a      	movs	r2, #10
 8006c94:	0038      	movs	r0, r7
 8006c96:	f000 f8e1 	bl	8006e5c <__multadd>
 8006c9a:	0005      	movs	r5, r0
 8006c9c:	e7f1      	b.n	8006c82 <_dtoa_r+0xb6e>
 8006c9e:	9b07      	ldr	r3, [sp, #28]
 8006ca0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ca2:	2400      	movs	r4, #0
 8006ca4:	0031      	movs	r1, r6
 8006ca6:	9805      	ldr	r0, [sp, #20]
 8006ca8:	f7ff f9a8 	bl	8005ffc <quorem>
 8006cac:	9b06      	ldr	r3, [sp, #24]
 8006cae:	3030      	adds	r0, #48	; 0x30
 8006cb0:	5518      	strb	r0, [r3, r4]
 8006cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cb4:	3401      	adds	r4, #1
 8006cb6:	9007      	str	r0, [sp, #28]
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	dd07      	ble.n	8006ccc <_dtoa_r+0xbb8>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	220a      	movs	r2, #10
 8006cc0:	0038      	movs	r0, r7
 8006cc2:	9905      	ldr	r1, [sp, #20]
 8006cc4:	f000 f8ca 	bl	8006e5c <__multadd>
 8006cc8:	9005      	str	r0, [sp, #20]
 8006cca:	e7eb      	b.n	8006ca4 <_dtoa_r+0xb90>
 8006ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cce:	2001      	movs	r0, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dd00      	ble.n	8006cd6 <_dtoa_r+0xbc2>
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	2400      	movs	r4, #0
 8006cd8:	9b06      	ldr	r3, [sp, #24]
 8006cda:	181b      	adds	r3, r3, r0
 8006cdc:	9308      	str	r3, [sp, #32]
 8006cde:	9905      	ldr	r1, [sp, #20]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	0038      	movs	r0, r7
 8006ce4:	f000 fa68 	bl	80071b8 <__lshift>
 8006ce8:	0031      	movs	r1, r6
 8006cea:	9005      	str	r0, [sp, #20]
 8006cec:	f000 fad2 	bl	8007294 <__mcmp>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	dc9b      	bgt.n	8006c2c <_dtoa_r+0xb18>
 8006cf4:	d102      	bne.n	8006cfc <_dtoa_r+0xbe8>
 8006cf6:	9b07      	ldr	r3, [sp, #28]
 8006cf8:	07db      	lsls	r3, r3, #31
 8006cfa:	d497      	bmi.n	8006c2c <_dtoa_r+0xb18>
 8006cfc:	9b08      	ldr	r3, [sp, #32]
 8006cfe:	9308      	str	r3, [sp, #32]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	2a30      	cmp	r2, #48	; 0x30
 8006d06:	d0fa      	beq.n	8006cfe <_dtoa_r+0xbea>
 8006d08:	e6db      	b.n	8006ac2 <_dtoa_r+0x9ae>
 8006d0a:	9a06      	ldr	r2, [sp, #24]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d18e      	bne.n	8006c2e <_dtoa_r+0xb1a>
 8006d10:	9b02      	ldr	r3, [sp, #8]
 8006d12:	3301      	adds	r3, #1
 8006d14:	9302      	str	r3, [sp, #8]
 8006d16:	2331      	movs	r3, #49	; 0x31
 8006d18:	e799      	b.n	8006c4e <_dtoa_r+0xb3a>
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <_dtoa_r+0xc2c>)
 8006d1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006d1e:	9306      	str	r3, [sp, #24]
 8006d20:	4b08      	ldr	r3, [pc, #32]	; (8006d44 <_dtoa_r+0xc30>)
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	d001      	beq.n	8006d2a <_dtoa_r+0xc16>
 8006d26:	f7ff fa3f 	bl	80061a8 <_dtoa_r+0x94>
 8006d2a:	f7ff fa3f 	bl	80061ac <_dtoa_r+0x98>
 8006d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	dcb6      	bgt.n	8006ca2 <_dtoa_r+0xb8e>
 8006d34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	dd00      	ble.n	8006d3c <_dtoa_r+0xc28>
 8006d3a:	e6ac      	b.n	8006a96 <_dtoa_r+0x982>
 8006d3c:	e7b1      	b.n	8006ca2 <_dtoa_r+0xb8e>
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	08008d88 	.word	0x08008d88
 8006d44:	08008d90 	.word	0x08008d90

08006d48 <_localeconv_r>:
 8006d48:	4800      	ldr	r0, [pc, #0]	; (8006d4c <_localeconv_r+0x4>)
 8006d4a:	4770      	bx	lr
 8006d4c:	20000170 	.word	0x20000170

08006d50 <malloc>:
 8006d50:	b510      	push	{r4, lr}
 8006d52:	4b03      	ldr	r3, [pc, #12]	; (8006d60 <malloc+0x10>)
 8006d54:	0001      	movs	r1, r0
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	f000 fc4c 	bl	80075f4 <_malloc_r>
 8006d5c:	bd10      	pop	{r4, pc}
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	2000001c 	.word	0x2000001c

08006d64 <memchr>:
 8006d64:	b2c9      	uxtb	r1, r1
 8006d66:	1882      	adds	r2, r0, r2
 8006d68:	4290      	cmp	r0, r2
 8006d6a:	d101      	bne.n	8006d70 <memchr+0xc>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	4770      	bx	lr
 8006d70:	7803      	ldrb	r3, [r0, #0]
 8006d72:	428b      	cmp	r3, r1
 8006d74:	d0fb      	beq.n	8006d6e <memchr+0xa>
 8006d76:	3001      	adds	r0, #1
 8006d78:	e7f6      	b.n	8006d68 <memchr+0x4>

08006d7a <memcpy>:
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	b510      	push	{r4, lr}
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d100      	bne.n	8006d84 <memcpy+0xa>
 8006d82:	bd10      	pop	{r4, pc}
 8006d84:	5ccc      	ldrb	r4, [r1, r3]
 8006d86:	54c4      	strb	r4, [r0, r3]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	e7f8      	b.n	8006d7e <memcpy+0x4>

08006d8c <_Balloc>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d90:	0006      	movs	r6, r0
 8006d92:	000c      	movs	r4, r1
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	d10e      	bne.n	8006db6 <_Balloc+0x2a>
 8006d98:	2010      	movs	r0, #16
 8006d9a:	f7ff ffd9 	bl	8006d50 <malloc>
 8006d9e:	1e02      	subs	r2, r0, #0
 8006da0:	6270      	str	r0, [r6, #36]	; 0x24
 8006da2:	d104      	bne.n	8006dae <_Balloc+0x22>
 8006da4:	2166      	movs	r1, #102	; 0x66
 8006da6:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <_Balloc+0x80>)
 8006da8:	4819      	ldr	r0, [pc, #100]	; (8006e10 <_Balloc+0x84>)
 8006daa:	f000 fe0d 	bl	80079c8 <__assert_func>
 8006dae:	6045      	str	r5, [r0, #4]
 8006db0:	6085      	str	r5, [r0, #8]
 8006db2:	6005      	str	r5, [r0, #0]
 8006db4:	60c5      	str	r5, [r0, #12]
 8006db6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006db8:	68eb      	ldr	r3, [r5, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d013      	beq.n	8006de6 <_Balloc+0x5a>
 8006dbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006dc0:	00a2      	lsls	r2, r4, #2
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	189b      	adds	r3, r3, r2
 8006dc6:	6818      	ldr	r0, [r3, #0]
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d118      	bne.n	8006dfe <_Balloc+0x72>
 8006dcc:	2101      	movs	r1, #1
 8006dce:	000d      	movs	r5, r1
 8006dd0:	40a5      	lsls	r5, r4
 8006dd2:	1d6a      	adds	r2, r5, #5
 8006dd4:	0030      	movs	r0, r6
 8006dd6:	0092      	lsls	r2, r2, #2
 8006dd8:	f000 fb74 	bl	80074c4 <_calloc_r>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d00c      	beq.n	8006dfa <_Balloc+0x6e>
 8006de0:	6044      	str	r4, [r0, #4]
 8006de2:	6085      	str	r5, [r0, #8]
 8006de4:	e00d      	b.n	8006e02 <_Balloc+0x76>
 8006de6:	2221      	movs	r2, #33	; 0x21
 8006de8:	2104      	movs	r1, #4
 8006dea:	0030      	movs	r0, r6
 8006dec:	f000 fb6a 	bl	80074c4 <_calloc_r>
 8006df0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006df2:	60e8      	str	r0, [r5, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e1      	bne.n	8006dbe <_Balloc+0x32>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	bd70      	pop	{r4, r5, r6, pc}
 8006dfe:	6802      	ldr	r2, [r0, #0]
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	6103      	str	r3, [r0, #16]
 8006e06:	60c3      	str	r3, [r0, #12]
 8006e08:	e7f8      	b.n	8006dfc <_Balloc+0x70>
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	08008d95 	.word	0x08008d95
 8006e10:	08008e18 	.word	0x08008e18

08006e14 <_Bfree>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e18:	0005      	movs	r5, r0
 8006e1a:	000c      	movs	r4, r1
 8006e1c:	2e00      	cmp	r6, #0
 8006e1e:	d10e      	bne.n	8006e3e <_Bfree+0x2a>
 8006e20:	2010      	movs	r0, #16
 8006e22:	f7ff ff95 	bl	8006d50 <malloc>
 8006e26:	1e02      	subs	r2, r0, #0
 8006e28:	6268      	str	r0, [r5, #36]	; 0x24
 8006e2a:	d104      	bne.n	8006e36 <_Bfree+0x22>
 8006e2c:	218a      	movs	r1, #138	; 0x8a
 8006e2e:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <_Bfree+0x40>)
 8006e30:	4809      	ldr	r0, [pc, #36]	; (8006e58 <_Bfree+0x44>)
 8006e32:	f000 fdc9 	bl	80079c8 <__assert_func>
 8006e36:	6046      	str	r6, [r0, #4]
 8006e38:	6086      	str	r6, [r0, #8]
 8006e3a:	6006      	str	r6, [r0, #0]
 8006e3c:	60c6      	str	r6, [r0, #12]
 8006e3e:	2c00      	cmp	r4, #0
 8006e40:	d007      	beq.n	8006e52 <_Bfree+0x3e>
 8006e42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e44:	6862      	ldr	r2, [r4, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	0092      	lsls	r2, r2, #2
 8006e4a:	189b      	adds	r3, r3, r2
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	6022      	str	r2, [r4, #0]
 8006e50:	601c      	str	r4, [r3, #0]
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	08008d95 	.word	0x08008d95
 8006e58:	08008e18 	.word	0x08008e18

08006e5c <__multadd>:
 8006e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e5e:	000e      	movs	r6, r1
 8006e60:	9001      	str	r0, [sp, #4]
 8006e62:	000c      	movs	r4, r1
 8006e64:	001d      	movs	r5, r3
 8006e66:	2000      	movs	r0, #0
 8006e68:	690f      	ldr	r7, [r1, #16]
 8006e6a:	3614      	adds	r6, #20
 8006e6c:	6833      	ldr	r3, [r6, #0]
 8006e6e:	3001      	adds	r0, #1
 8006e70:	b299      	uxth	r1, r3
 8006e72:	4351      	muls	r1, r2
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	4353      	muls	r3, r2
 8006e78:	1949      	adds	r1, r1, r5
 8006e7a:	0c0d      	lsrs	r5, r1, #16
 8006e7c:	195b      	adds	r3, r3, r5
 8006e7e:	0c1d      	lsrs	r5, r3, #16
 8006e80:	b289      	uxth	r1, r1
 8006e82:	041b      	lsls	r3, r3, #16
 8006e84:	185b      	adds	r3, r3, r1
 8006e86:	c608      	stmia	r6!, {r3}
 8006e88:	4287      	cmp	r7, r0
 8006e8a:	dcef      	bgt.n	8006e6c <__multadd+0x10>
 8006e8c:	2d00      	cmp	r5, #0
 8006e8e:	d022      	beq.n	8006ed6 <__multadd+0x7a>
 8006e90:	68a3      	ldr	r3, [r4, #8]
 8006e92:	42bb      	cmp	r3, r7
 8006e94:	dc19      	bgt.n	8006eca <__multadd+0x6e>
 8006e96:	6863      	ldr	r3, [r4, #4]
 8006e98:	9801      	ldr	r0, [sp, #4]
 8006e9a:	1c59      	adds	r1, r3, #1
 8006e9c:	f7ff ff76 	bl	8006d8c <_Balloc>
 8006ea0:	1e06      	subs	r6, r0, #0
 8006ea2:	d105      	bne.n	8006eb0 <__multadd+0x54>
 8006ea4:	0002      	movs	r2, r0
 8006ea6:	21b5      	movs	r1, #181	; 0xb5
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <__multadd+0x80>)
 8006eaa:	480d      	ldr	r0, [pc, #52]	; (8006ee0 <__multadd+0x84>)
 8006eac:	f000 fd8c 	bl	80079c8 <__assert_func>
 8006eb0:	0021      	movs	r1, r4
 8006eb2:	6923      	ldr	r3, [r4, #16]
 8006eb4:	310c      	adds	r1, #12
 8006eb6:	1c9a      	adds	r2, r3, #2
 8006eb8:	0092      	lsls	r2, r2, #2
 8006eba:	300c      	adds	r0, #12
 8006ebc:	f7ff ff5d 	bl	8006d7a <memcpy>
 8006ec0:	0021      	movs	r1, r4
 8006ec2:	9801      	ldr	r0, [sp, #4]
 8006ec4:	f7ff ffa6 	bl	8006e14 <_Bfree>
 8006ec8:	0034      	movs	r4, r6
 8006eca:	1d3b      	adds	r3, r7, #4
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	18e3      	adds	r3, r4, r3
 8006ed0:	605d      	str	r5, [r3, #4]
 8006ed2:	1c7b      	adds	r3, r7, #1
 8006ed4:	6123      	str	r3, [r4, #16]
 8006ed6:	0020      	movs	r0, r4
 8006ed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	08008e07 	.word	0x08008e07
 8006ee0:	08008e18 	.word	0x08008e18

08006ee4 <__hi0bits>:
 8006ee4:	0003      	movs	r3, r0
 8006ee6:	0c02      	lsrs	r2, r0, #16
 8006ee8:	2000      	movs	r0, #0
 8006eea:	4282      	cmp	r2, r0
 8006eec:	d101      	bne.n	8006ef2 <__hi0bits+0xe>
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	3010      	adds	r0, #16
 8006ef2:	0e1a      	lsrs	r2, r3, #24
 8006ef4:	d101      	bne.n	8006efa <__hi0bits+0x16>
 8006ef6:	3008      	adds	r0, #8
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	0f1a      	lsrs	r2, r3, #28
 8006efc:	d101      	bne.n	8006f02 <__hi0bits+0x1e>
 8006efe:	3004      	adds	r0, #4
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	0f9a      	lsrs	r2, r3, #30
 8006f04:	d101      	bne.n	8006f0a <__hi0bits+0x26>
 8006f06:	3002      	adds	r0, #2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	db03      	blt.n	8006f16 <__hi0bits+0x32>
 8006f0e:	3001      	adds	r0, #1
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	d400      	bmi.n	8006f16 <__hi0bits+0x32>
 8006f14:	2020      	movs	r0, #32
 8006f16:	4770      	bx	lr

08006f18 <__lo0bits>:
 8006f18:	6803      	ldr	r3, [r0, #0]
 8006f1a:	0002      	movs	r2, r0
 8006f1c:	2107      	movs	r1, #7
 8006f1e:	0018      	movs	r0, r3
 8006f20:	4008      	ands	r0, r1
 8006f22:	420b      	tst	r3, r1
 8006f24:	d00d      	beq.n	8006f42 <__lo0bits+0x2a>
 8006f26:	3906      	subs	r1, #6
 8006f28:	2000      	movs	r0, #0
 8006f2a:	420b      	tst	r3, r1
 8006f2c:	d105      	bne.n	8006f3a <__lo0bits+0x22>
 8006f2e:	3002      	adds	r0, #2
 8006f30:	4203      	tst	r3, r0
 8006f32:	d003      	beq.n	8006f3c <__lo0bits+0x24>
 8006f34:	40cb      	lsrs	r3, r1
 8006f36:	0008      	movs	r0, r1
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	4770      	bx	lr
 8006f3c:	089b      	lsrs	r3, r3, #2
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	e7fb      	b.n	8006f3a <__lo0bits+0x22>
 8006f42:	b299      	uxth	r1, r3
 8006f44:	2900      	cmp	r1, #0
 8006f46:	d101      	bne.n	8006f4c <__lo0bits+0x34>
 8006f48:	2010      	movs	r0, #16
 8006f4a:	0c1b      	lsrs	r3, r3, #16
 8006f4c:	b2d9      	uxtb	r1, r3
 8006f4e:	2900      	cmp	r1, #0
 8006f50:	d101      	bne.n	8006f56 <__lo0bits+0x3e>
 8006f52:	3008      	adds	r0, #8
 8006f54:	0a1b      	lsrs	r3, r3, #8
 8006f56:	0719      	lsls	r1, r3, #28
 8006f58:	d101      	bne.n	8006f5e <__lo0bits+0x46>
 8006f5a:	3004      	adds	r0, #4
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	0799      	lsls	r1, r3, #30
 8006f60:	d101      	bne.n	8006f66 <__lo0bits+0x4e>
 8006f62:	3002      	adds	r0, #2
 8006f64:	089b      	lsrs	r3, r3, #2
 8006f66:	07d9      	lsls	r1, r3, #31
 8006f68:	d4e9      	bmi.n	8006f3e <__lo0bits+0x26>
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	d1e6      	bne.n	8006f3e <__lo0bits+0x26>
 8006f70:	2020      	movs	r0, #32
 8006f72:	e7e2      	b.n	8006f3a <__lo0bits+0x22>

08006f74 <__i2b>:
 8006f74:	b510      	push	{r4, lr}
 8006f76:	000c      	movs	r4, r1
 8006f78:	2101      	movs	r1, #1
 8006f7a:	f7ff ff07 	bl	8006d8c <_Balloc>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d106      	bne.n	8006f90 <__i2b+0x1c>
 8006f82:	21a0      	movs	r1, #160	; 0xa0
 8006f84:	0002      	movs	r2, r0
 8006f86:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <__i2b+0x24>)
 8006f88:	4804      	ldr	r0, [pc, #16]	; (8006f9c <__i2b+0x28>)
 8006f8a:	0049      	lsls	r1, r1, #1
 8006f8c:	f000 fd1c 	bl	80079c8 <__assert_func>
 8006f90:	2301      	movs	r3, #1
 8006f92:	6144      	str	r4, [r0, #20]
 8006f94:	6103      	str	r3, [r0, #16]
 8006f96:	bd10      	pop	{r4, pc}
 8006f98:	08008e07 	.word	0x08008e07
 8006f9c:	08008e18 	.word	0x08008e18

08006fa0 <__multiply>:
 8006fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fa2:	690b      	ldr	r3, [r1, #16]
 8006fa4:	0014      	movs	r4, r2
 8006fa6:	6912      	ldr	r2, [r2, #16]
 8006fa8:	000d      	movs	r5, r1
 8006faa:	b089      	sub	sp, #36	; 0x24
 8006fac:	4293      	cmp	r3, r2
 8006fae:	da01      	bge.n	8006fb4 <__multiply+0x14>
 8006fb0:	0025      	movs	r5, r4
 8006fb2:	000c      	movs	r4, r1
 8006fb4:	692f      	ldr	r7, [r5, #16]
 8006fb6:	6926      	ldr	r6, [r4, #16]
 8006fb8:	6869      	ldr	r1, [r5, #4]
 8006fba:	19bb      	adds	r3, r7, r6
 8006fbc:	9302      	str	r3, [sp, #8]
 8006fbe:	68ab      	ldr	r3, [r5, #8]
 8006fc0:	19ba      	adds	r2, r7, r6
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	da00      	bge.n	8006fc8 <__multiply+0x28>
 8006fc6:	3101      	adds	r1, #1
 8006fc8:	f7ff fee0 	bl	8006d8c <_Balloc>
 8006fcc:	9001      	str	r0, [sp, #4]
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d106      	bne.n	8006fe0 <__multiply+0x40>
 8006fd2:	215e      	movs	r1, #94	; 0x5e
 8006fd4:	0002      	movs	r2, r0
 8006fd6:	4b48      	ldr	r3, [pc, #288]	; (80070f8 <__multiply+0x158>)
 8006fd8:	4848      	ldr	r0, [pc, #288]	; (80070fc <__multiply+0x15c>)
 8006fda:	31ff      	adds	r1, #255	; 0xff
 8006fdc:	f000 fcf4 	bl	80079c8 <__assert_func>
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	3314      	adds	r3, #20
 8006fe6:	469c      	mov	ip, r3
 8006fe8:	19bb      	adds	r3, r7, r6
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4463      	add	r3, ip
 8006fee:	9303      	str	r3, [sp, #12]
 8006ff0:	4663      	mov	r3, ip
 8006ff2:	9903      	ldr	r1, [sp, #12]
 8006ff4:	428b      	cmp	r3, r1
 8006ff6:	d32c      	bcc.n	8007052 <__multiply+0xb2>
 8006ff8:	002b      	movs	r3, r5
 8006ffa:	0022      	movs	r2, r4
 8006ffc:	3314      	adds	r3, #20
 8006ffe:	00bf      	lsls	r7, r7, #2
 8007000:	3214      	adds	r2, #20
 8007002:	9306      	str	r3, [sp, #24]
 8007004:	00b6      	lsls	r6, r6, #2
 8007006:	19db      	adds	r3, r3, r7
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	1993      	adds	r3, r2, r6
 800700c:	9307      	str	r3, [sp, #28]
 800700e:	2304      	movs	r3, #4
 8007010:	9305      	str	r3, [sp, #20]
 8007012:	002b      	movs	r3, r5
 8007014:	9904      	ldr	r1, [sp, #16]
 8007016:	3315      	adds	r3, #21
 8007018:	9200      	str	r2, [sp, #0]
 800701a:	4299      	cmp	r1, r3
 800701c:	d305      	bcc.n	800702a <__multiply+0x8a>
 800701e:	1b4b      	subs	r3, r1, r5
 8007020:	3b15      	subs	r3, #21
 8007022:	089b      	lsrs	r3, r3, #2
 8007024:	3301      	adds	r3, #1
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	9305      	str	r3, [sp, #20]
 800702a:	9b07      	ldr	r3, [sp, #28]
 800702c:	9a00      	ldr	r2, [sp, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d311      	bcc.n	8007056 <__multiply+0xb6>
 8007032:	9b02      	ldr	r3, [sp, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	dd06      	ble.n	8007046 <__multiply+0xa6>
 8007038:	9b03      	ldr	r3, [sp, #12]
 800703a:	3b04      	subs	r3, #4
 800703c:	9303      	str	r3, [sp, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d053      	beq.n	80070ee <__multiply+0x14e>
 8007046:	9b01      	ldr	r3, [sp, #4]
 8007048:	9a02      	ldr	r2, [sp, #8]
 800704a:	0018      	movs	r0, r3
 800704c:	611a      	str	r2, [r3, #16]
 800704e:	b009      	add	sp, #36	; 0x24
 8007050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007052:	c304      	stmia	r3!, {r2}
 8007054:	e7cd      	b.n	8006ff2 <__multiply+0x52>
 8007056:	9b00      	ldr	r3, [sp, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	b298      	uxth	r0, r3
 800705c:	2800      	cmp	r0, #0
 800705e:	d01b      	beq.n	8007098 <__multiply+0xf8>
 8007060:	4667      	mov	r7, ip
 8007062:	2400      	movs	r4, #0
 8007064:	9e06      	ldr	r6, [sp, #24]
 8007066:	ce02      	ldmia	r6!, {r1}
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	b28b      	uxth	r3, r1
 800706c:	4343      	muls	r3, r0
 800706e:	b292      	uxth	r2, r2
 8007070:	189b      	adds	r3, r3, r2
 8007072:	191b      	adds	r3, r3, r4
 8007074:	0c0c      	lsrs	r4, r1, #16
 8007076:	4344      	muls	r4, r0
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	0c11      	lsrs	r1, r2, #16
 800707c:	1861      	adds	r1, r4, r1
 800707e:	0c1c      	lsrs	r4, r3, #16
 8007080:	1909      	adds	r1, r1, r4
 8007082:	0c0c      	lsrs	r4, r1, #16
 8007084:	b29b      	uxth	r3, r3
 8007086:	0409      	lsls	r1, r1, #16
 8007088:	430b      	orrs	r3, r1
 800708a:	c708      	stmia	r7!, {r3}
 800708c:	9b04      	ldr	r3, [sp, #16]
 800708e:	42b3      	cmp	r3, r6
 8007090:	d8e9      	bhi.n	8007066 <__multiply+0xc6>
 8007092:	4663      	mov	r3, ip
 8007094:	9a05      	ldr	r2, [sp, #20]
 8007096:	509c      	str	r4, [r3, r2]
 8007098:	9b00      	ldr	r3, [sp, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	0c1e      	lsrs	r6, r3, #16
 800709e:	d020      	beq.n	80070e2 <__multiply+0x142>
 80070a0:	4663      	mov	r3, ip
 80070a2:	002c      	movs	r4, r5
 80070a4:	4660      	mov	r0, ip
 80070a6:	2700      	movs	r7, #0
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3414      	adds	r4, #20
 80070ac:	6822      	ldr	r2, [r4, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	b291      	uxth	r1, r2
 80070b2:	4371      	muls	r1, r6
 80070b4:	6802      	ldr	r2, [r0, #0]
 80070b6:	0c12      	lsrs	r2, r2, #16
 80070b8:	1889      	adds	r1, r1, r2
 80070ba:	19cf      	adds	r7, r1, r7
 80070bc:	0439      	lsls	r1, r7, #16
 80070be:	430b      	orrs	r3, r1
 80070c0:	6003      	str	r3, [r0, #0]
 80070c2:	cc02      	ldmia	r4!, {r1}
 80070c4:	6843      	ldr	r3, [r0, #4]
 80070c6:	0c09      	lsrs	r1, r1, #16
 80070c8:	4371      	muls	r1, r6
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	0c3f      	lsrs	r7, r7, #16
 80070ce:	18cb      	adds	r3, r1, r3
 80070d0:	9a04      	ldr	r2, [sp, #16]
 80070d2:	19db      	adds	r3, r3, r7
 80070d4:	0c1f      	lsrs	r7, r3, #16
 80070d6:	3004      	adds	r0, #4
 80070d8:	42a2      	cmp	r2, r4
 80070da:	d8e7      	bhi.n	80070ac <__multiply+0x10c>
 80070dc:	4662      	mov	r2, ip
 80070de:	9905      	ldr	r1, [sp, #20]
 80070e0:	5053      	str	r3, [r2, r1]
 80070e2:	9b00      	ldr	r3, [sp, #0]
 80070e4:	3304      	adds	r3, #4
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	2304      	movs	r3, #4
 80070ea:	449c      	add	ip, r3
 80070ec:	e79d      	b.n	800702a <__multiply+0x8a>
 80070ee:	9b02      	ldr	r3, [sp, #8]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	9302      	str	r3, [sp, #8]
 80070f4:	e79d      	b.n	8007032 <__multiply+0x92>
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	08008e07 	.word	0x08008e07
 80070fc:	08008e18 	.word	0x08008e18

08007100 <__pow5mult>:
 8007100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007102:	2303      	movs	r3, #3
 8007104:	0015      	movs	r5, r2
 8007106:	0007      	movs	r7, r0
 8007108:	000e      	movs	r6, r1
 800710a:	401a      	ands	r2, r3
 800710c:	421d      	tst	r5, r3
 800710e:	d008      	beq.n	8007122 <__pow5mult+0x22>
 8007110:	4925      	ldr	r1, [pc, #148]	; (80071a8 <__pow5mult+0xa8>)
 8007112:	3a01      	subs	r2, #1
 8007114:	0092      	lsls	r2, r2, #2
 8007116:	5852      	ldr	r2, [r2, r1]
 8007118:	2300      	movs	r3, #0
 800711a:	0031      	movs	r1, r6
 800711c:	f7ff fe9e 	bl	8006e5c <__multadd>
 8007120:	0006      	movs	r6, r0
 8007122:	10ad      	asrs	r5, r5, #2
 8007124:	d03d      	beq.n	80071a2 <__pow5mult+0xa2>
 8007126:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007128:	2c00      	cmp	r4, #0
 800712a:	d10f      	bne.n	800714c <__pow5mult+0x4c>
 800712c:	2010      	movs	r0, #16
 800712e:	f7ff fe0f 	bl	8006d50 <malloc>
 8007132:	1e02      	subs	r2, r0, #0
 8007134:	6278      	str	r0, [r7, #36]	; 0x24
 8007136:	d105      	bne.n	8007144 <__pow5mult+0x44>
 8007138:	21d7      	movs	r1, #215	; 0xd7
 800713a:	4b1c      	ldr	r3, [pc, #112]	; (80071ac <__pow5mult+0xac>)
 800713c:	481c      	ldr	r0, [pc, #112]	; (80071b0 <__pow5mult+0xb0>)
 800713e:	0049      	lsls	r1, r1, #1
 8007140:	f000 fc42 	bl	80079c8 <__assert_func>
 8007144:	6044      	str	r4, [r0, #4]
 8007146:	6084      	str	r4, [r0, #8]
 8007148:	6004      	str	r4, [r0, #0]
 800714a:	60c4      	str	r4, [r0, #12]
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	689c      	ldr	r4, [r3, #8]
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	2c00      	cmp	r4, #0
 8007154:	d108      	bne.n	8007168 <__pow5mult+0x68>
 8007156:	0038      	movs	r0, r7
 8007158:	4916      	ldr	r1, [pc, #88]	; (80071b4 <__pow5mult+0xb4>)
 800715a:	f7ff ff0b 	bl	8006f74 <__i2b>
 800715e:	9b01      	ldr	r3, [sp, #4]
 8007160:	0004      	movs	r4, r0
 8007162:	6098      	str	r0, [r3, #8]
 8007164:	2300      	movs	r3, #0
 8007166:	6003      	str	r3, [r0, #0]
 8007168:	2301      	movs	r3, #1
 800716a:	421d      	tst	r5, r3
 800716c:	d00a      	beq.n	8007184 <__pow5mult+0x84>
 800716e:	0031      	movs	r1, r6
 8007170:	0022      	movs	r2, r4
 8007172:	0038      	movs	r0, r7
 8007174:	f7ff ff14 	bl	8006fa0 <__multiply>
 8007178:	0031      	movs	r1, r6
 800717a:	9001      	str	r0, [sp, #4]
 800717c:	0038      	movs	r0, r7
 800717e:	f7ff fe49 	bl	8006e14 <_Bfree>
 8007182:	9e01      	ldr	r6, [sp, #4]
 8007184:	106d      	asrs	r5, r5, #1
 8007186:	d00c      	beq.n	80071a2 <__pow5mult+0xa2>
 8007188:	6820      	ldr	r0, [r4, #0]
 800718a:	2800      	cmp	r0, #0
 800718c:	d107      	bne.n	800719e <__pow5mult+0x9e>
 800718e:	0022      	movs	r2, r4
 8007190:	0021      	movs	r1, r4
 8007192:	0038      	movs	r0, r7
 8007194:	f7ff ff04 	bl	8006fa0 <__multiply>
 8007198:	2300      	movs	r3, #0
 800719a:	6020      	str	r0, [r4, #0]
 800719c:	6003      	str	r3, [r0, #0]
 800719e:	0004      	movs	r4, r0
 80071a0:	e7e2      	b.n	8007168 <__pow5mult+0x68>
 80071a2:	0030      	movs	r0, r6
 80071a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	08008f68 	.word	0x08008f68
 80071ac:	08008d95 	.word	0x08008d95
 80071b0:	08008e18 	.word	0x08008e18
 80071b4:	00000271 	.word	0x00000271

080071b8 <__lshift>:
 80071b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ba:	000c      	movs	r4, r1
 80071bc:	0017      	movs	r7, r2
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	1155      	asrs	r5, r2, #5
 80071c2:	b087      	sub	sp, #28
 80071c4:	18eb      	adds	r3, r5, r3
 80071c6:	9302      	str	r3, [sp, #8]
 80071c8:	3301      	adds	r3, #1
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	6849      	ldr	r1, [r1, #4]
 80071ce:	68a3      	ldr	r3, [r4, #8]
 80071d0:	9004      	str	r0, [sp, #16]
 80071d2:	9a01      	ldr	r2, [sp, #4]
 80071d4:	4293      	cmp	r3, r2
 80071d6:	db10      	blt.n	80071fa <__lshift+0x42>
 80071d8:	9804      	ldr	r0, [sp, #16]
 80071da:	f7ff fdd7 	bl	8006d8c <_Balloc>
 80071de:	2300      	movs	r3, #0
 80071e0:	0002      	movs	r2, r0
 80071e2:	0006      	movs	r6, r0
 80071e4:	0019      	movs	r1, r3
 80071e6:	3214      	adds	r2, #20
 80071e8:	4298      	cmp	r0, r3
 80071ea:	d10c      	bne.n	8007206 <__lshift+0x4e>
 80071ec:	21da      	movs	r1, #218	; 0xda
 80071ee:	0002      	movs	r2, r0
 80071f0:	4b26      	ldr	r3, [pc, #152]	; (800728c <__lshift+0xd4>)
 80071f2:	4827      	ldr	r0, [pc, #156]	; (8007290 <__lshift+0xd8>)
 80071f4:	31ff      	adds	r1, #255	; 0xff
 80071f6:	f000 fbe7 	bl	80079c8 <__assert_func>
 80071fa:	3101      	adds	r1, #1
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	e7e8      	b.n	80071d2 <__lshift+0x1a>
 8007200:	0098      	lsls	r0, r3, #2
 8007202:	5011      	str	r1, [r2, r0]
 8007204:	3301      	adds	r3, #1
 8007206:	42ab      	cmp	r3, r5
 8007208:	dbfa      	blt.n	8007200 <__lshift+0x48>
 800720a:	43eb      	mvns	r3, r5
 800720c:	17db      	asrs	r3, r3, #31
 800720e:	401d      	ands	r5, r3
 8007210:	211f      	movs	r1, #31
 8007212:	0023      	movs	r3, r4
 8007214:	0038      	movs	r0, r7
 8007216:	00ad      	lsls	r5, r5, #2
 8007218:	1955      	adds	r5, r2, r5
 800721a:	6922      	ldr	r2, [r4, #16]
 800721c:	3314      	adds	r3, #20
 800721e:	0092      	lsls	r2, r2, #2
 8007220:	4008      	ands	r0, r1
 8007222:	4684      	mov	ip, r0
 8007224:	189a      	adds	r2, r3, r2
 8007226:	420f      	tst	r7, r1
 8007228:	d02a      	beq.n	8007280 <__lshift+0xc8>
 800722a:	3101      	adds	r1, #1
 800722c:	1a09      	subs	r1, r1, r0
 800722e:	9105      	str	r1, [sp, #20]
 8007230:	2100      	movs	r1, #0
 8007232:	9503      	str	r5, [sp, #12]
 8007234:	4667      	mov	r7, ip
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	40b8      	lsls	r0, r7
 800723a:	4301      	orrs	r1, r0
 800723c:	9803      	ldr	r0, [sp, #12]
 800723e:	c002      	stmia	r0!, {r1}
 8007240:	cb02      	ldmia	r3!, {r1}
 8007242:	9003      	str	r0, [sp, #12]
 8007244:	9805      	ldr	r0, [sp, #20]
 8007246:	40c1      	lsrs	r1, r0
 8007248:	429a      	cmp	r2, r3
 800724a:	d8f3      	bhi.n	8007234 <__lshift+0x7c>
 800724c:	0020      	movs	r0, r4
 800724e:	3015      	adds	r0, #21
 8007250:	2304      	movs	r3, #4
 8007252:	4282      	cmp	r2, r0
 8007254:	d304      	bcc.n	8007260 <__lshift+0xa8>
 8007256:	1b13      	subs	r3, r2, r4
 8007258:	3b15      	subs	r3, #21
 800725a:	089b      	lsrs	r3, r3, #2
 800725c:	3301      	adds	r3, #1
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	50e9      	str	r1, [r5, r3]
 8007262:	2900      	cmp	r1, #0
 8007264:	d002      	beq.n	800726c <__lshift+0xb4>
 8007266:	9b02      	ldr	r3, [sp, #8]
 8007268:	3302      	adds	r3, #2
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	9b01      	ldr	r3, [sp, #4]
 800726e:	9804      	ldr	r0, [sp, #16]
 8007270:	3b01      	subs	r3, #1
 8007272:	0021      	movs	r1, r4
 8007274:	6133      	str	r3, [r6, #16]
 8007276:	f7ff fdcd 	bl	8006e14 <_Bfree>
 800727a:	0030      	movs	r0, r6
 800727c:	b007      	add	sp, #28
 800727e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007280:	cb02      	ldmia	r3!, {r1}
 8007282:	c502      	stmia	r5!, {r1}
 8007284:	429a      	cmp	r2, r3
 8007286:	d8fb      	bhi.n	8007280 <__lshift+0xc8>
 8007288:	e7f0      	b.n	800726c <__lshift+0xb4>
 800728a:	46c0      	nop			; (mov r8, r8)
 800728c:	08008e07 	.word	0x08008e07
 8007290:	08008e18 	.word	0x08008e18

08007294 <__mcmp>:
 8007294:	6902      	ldr	r2, [r0, #16]
 8007296:	690b      	ldr	r3, [r1, #16]
 8007298:	b530      	push	{r4, r5, lr}
 800729a:	0004      	movs	r4, r0
 800729c:	1ad0      	subs	r0, r2, r3
 800729e:	429a      	cmp	r2, r3
 80072a0:	d10d      	bne.n	80072be <__mcmp+0x2a>
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	3414      	adds	r4, #20
 80072a6:	3114      	adds	r1, #20
 80072a8:	18e2      	adds	r2, r4, r3
 80072aa:	18c9      	adds	r1, r1, r3
 80072ac:	3a04      	subs	r2, #4
 80072ae:	3904      	subs	r1, #4
 80072b0:	6815      	ldr	r5, [r2, #0]
 80072b2:	680b      	ldr	r3, [r1, #0]
 80072b4:	429d      	cmp	r5, r3
 80072b6:	d003      	beq.n	80072c0 <__mcmp+0x2c>
 80072b8:	2001      	movs	r0, #1
 80072ba:	429d      	cmp	r5, r3
 80072bc:	d303      	bcc.n	80072c6 <__mcmp+0x32>
 80072be:	bd30      	pop	{r4, r5, pc}
 80072c0:	4294      	cmp	r4, r2
 80072c2:	d3f3      	bcc.n	80072ac <__mcmp+0x18>
 80072c4:	e7fb      	b.n	80072be <__mcmp+0x2a>
 80072c6:	4240      	negs	r0, r0
 80072c8:	e7f9      	b.n	80072be <__mcmp+0x2a>
	...

080072cc <__mdiff>:
 80072cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ce:	000e      	movs	r6, r1
 80072d0:	0007      	movs	r7, r0
 80072d2:	0011      	movs	r1, r2
 80072d4:	0030      	movs	r0, r6
 80072d6:	b087      	sub	sp, #28
 80072d8:	0014      	movs	r4, r2
 80072da:	f7ff ffdb 	bl	8007294 <__mcmp>
 80072de:	1e05      	subs	r5, r0, #0
 80072e0:	d110      	bne.n	8007304 <__mdiff+0x38>
 80072e2:	0001      	movs	r1, r0
 80072e4:	0038      	movs	r0, r7
 80072e6:	f7ff fd51 	bl	8006d8c <_Balloc>
 80072ea:	1e02      	subs	r2, r0, #0
 80072ec:	d104      	bne.n	80072f8 <__mdiff+0x2c>
 80072ee:	4b40      	ldr	r3, [pc, #256]	; (80073f0 <__mdiff+0x124>)
 80072f0:	4940      	ldr	r1, [pc, #256]	; (80073f4 <__mdiff+0x128>)
 80072f2:	4841      	ldr	r0, [pc, #260]	; (80073f8 <__mdiff+0x12c>)
 80072f4:	f000 fb68 	bl	80079c8 <__assert_func>
 80072f8:	2301      	movs	r3, #1
 80072fa:	6145      	str	r5, [r0, #20]
 80072fc:	6103      	str	r3, [r0, #16]
 80072fe:	0010      	movs	r0, r2
 8007300:	b007      	add	sp, #28
 8007302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007304:	2301      	movs	r3, #1
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	2800      	cmp	r0, #0
 800730a:	db04      	blt.n	8007316 <__mdiff+0x4a>
 800730c:	0023      	movs	r3, r4
 800730e:	0034      	movs	r4, r6
 8007310:	001e      	movs	r6, r3
 8007312:	2300      	movs	r3, #0
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	0038      	movs	r0, r7
 8007318:	6861      	ldr	r1, [r4, #4]
 800731a:	f7ff fd37 	bl	8006d8c <_Balloc>
 800731e:	1e02      	subs	r2, r0, #0
 8007320:	d103      	bne.n	800732a <__mdiff+0x5e>
 8007322:	2190      	movs	r1, #144	; 0x90
 8007324:	4b32      	ldr	r3, [pc, #200]	; (80073f0 <__mdiff+0x124>)
 8007326:	0089      	lsls	r1, r1, #2
 8007328:	e7e3      	b.n	80072f2 <__mdiff+0x26>
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	2700      	movs	r7, #0
 800732e:	60c3      	str	r3, [r0, #12]
 8007330:	6920      	ldr	r0, [r4, #16]
 8007332:	3414      	adds	r4, #20
 8007334:	9401      	str	r4, [sp, #4]
 8007336:	9b01      	ldr	r3, [sp, #4]
 8007338:	0084      	lsls	r4, r0, #2
 800733a:	191b      	adds	r3, r3, r4
 800733c:	0034      	movs	r4, r6
 800733e:	9302      	str	r3, [sp, #8]
 8007340:	6933      	ldr	r3, [r6, #16]
 8007342:	3414      	adds	r4, #20
 8007344:	0099      	lsls	r1, r3, #2
 8007346:	1863      	adds	r3, r4, r1
 8007348:	9303      	str	r3, [sp, #12]
 800734a:	0013      	movs	r3, r2
 800734c:	3314      	adds	r3, #20
 800734e:	469c      	mov	ip, r3
 8007350:	9305      	str	r3, [sp, #20]
 8007352:	9b01      	ldr	r3, [sp, #4]
 8007354:	9304      	str	r3, [sp, #16]
 8007356:	9b04      	ldr	r3, [sp, #16]
 8007358:	cc02      	ldmia	r4!, {r1}
 800735a:	cb20      	ldmia	r3!, {r5}
 800735c:	9304      	str	r3, [sp, #16]
 800735e:	b2ab      	uxth	r3, r5
 8007360:	19df      	adds	r7, r3, r7
 8007362:	b28b      	uxth	r3, r1
 8007364:	1afb      	subs	r3, r7, r3
 8007366:	0c09      	lsrs	r1, r1, #16
 8007368:	0c2d      	lsrs	r5, r5, #16
 800736a:	1a6d      	subs	r5, r5, r1
 800736c:	1419      	asrs	r1, r3, #16
 800736e:	186d      	adds	r5, r5, r1
 8007370:	4661      	mov	r1, ip
 8007372:	142f      	asrs	r7, r5, #16
 8007374:	b29b      	uxth	r3, r3
 8007376:	042d      	lsls	r5, r5, #16
 8007378:	432b      	orrs	r3, r5
 800737a:	c108      	stmia	r1!, {r3}
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	468c      	mov	ip, r1
 8007380:	42a3      	cmp	r3, r4
 8007382:	d8e8      	bhi.n	8007356 <__mdiff+0x8a>
 8007384:	0031      	movs	r1, r6
 8007386:	9c03      	ldr	r4, [sp, #12]
 8007388:	3115      	adds	r1, #21
 800738a:	2304      	movs	r3, #4
 800738c:	428c      	cmp	r4, r1
 800738e:	d304      	bcc.n	800739a <__mdiff+0xce>
 8007390:	1ba3      	subs	r3, r4, r6
 8007392:	3b15      	subs	r3, #21
 8007394:	089b      	lsrs	r3, r3, #2
 8007396:	3301      	adds	r3, #1
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	9901      	ldr	r1, [sp, #4]
 800739c:	18cc      	adds	r4, r1, r3
 800739e:	9905      	ldr	r1, [sp, #20]
 80073a0:	0026      	movs	r6, r4
 80073a2:	18cb      	adds	r3, r1, r3
 80073a4:	469c      	mov	ip, r3
 80073a6:	9902      	ldr	r1, [sp, #8]
 80073a8:	428e      	cmp	r6, r1
 80073aa:	d310      	bcc.n	80073ce <__mdiff+0x102>
 80073ac:	9e02      	ldr	r6, [sp, #8]
 80073ae:	1ee1      	subs	r1, r4, #3
 80073b0:	2500      	movs	r5, #0
 80073b2:	428e      	cmp	r6, r1
 80073b4:	d304      	bcc.n	80073c0 <__mdiff+0xf4>
 80073b6:	0031      	movs	r1, r6
 80073b8:	3103      	adds	r1, #3
 80073ba:	1b0c      	subs	r4, r1, r4
 80073bc:	08a4      	lsrs	r4, r4, #2
 80073be:	00a5      	lsls	r5, r4, #2
 80073c0:	195b      	adds	r3, r3, r5
 80073c2:	3b04      	subs	r3, #4
 80073c4:	6819      	ldr	r1, [r3, #0]
 80073c6:	2900      	cmp	r1, #0
 80073c8:	d00f      	beq.n	80073ea <__mdiff+0x11e>
 80073ca:	6110      	str	r0, [r2, #16]
 80073cc:	e797      	b.n	80072fe <__mdiff+0x32>
 80073ce:	ce02      	ldmia	r6!, {r1}
 80073d0:	b28d      	uxth	r5, r1
 80073d2:	19ed      	adds	r5, r5, r7
 80073d4:	0c0f      	lsrs	r7, r1, #16
 80073d6:	1429      	asrs	r1, r5, #16
 80073d8:	1879      	adds	r1, r7, r1
 80073da:	140f      	asrs	r7, r1, #16
 80073dc:	b2ad      	uxth	r5, r5
 80073de:	0409      	lsls	r1, r1, #16
 80073e0:	430d      	orrs	r5, r1
 80073e2:	4661      	mov	r1, ip
 80073e4:	c120      	stmia	r1!, {r5}
 80073e6:	468c      	mov	ip, r1
 80073e8:	e7dd      	b.n	80073a6 <__mdiff+0xda>
 80073ea:	3801      	subs	r0, #1
 80073ec:	e7e9      	b.n	80073c2 <__mdiff+0xf6>
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	08008e07 	.word	0x08008e07
 80073f4:	00000232 	.word	0x00000232
 80073f8:	08008e18 	.word	0x08008e18

080073fc <__d2b>:
 80073fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073fe:	2101      	movs	r1, #1
 8007400:	0014      	movs	r4, r2
 8007402:	001e      	movs	r6, r3
 8007404:	9f08      	ldr	r7, [sp, #32]
 8007406:	f7ff fcc1 	bl	8006d8c <_Balloc>
 800740a:	1e05      	subs	r5, r0, #0
 800740c:	d105      	bne.n	800741a <__d2b+0x1e>
 800740e:	0002      	movs	r2, r0
 8007410:	4b26      	ldr	r3, [pc, #152]	; (80074ac <__d2b+0xb0>)
 8007412:	4927      	ldr	r1, [pc, #156]	; (80074b0 <__d2b+0xb4>)
 8007414:	4827      	ldr	r0, [pc, #156]	; (80074b4 <__d2b+0xb8>)
 8007416:	f000 fad7 	bl	80079c8 <__assert_func>
 800741a:	0333      	lsls	r3, r6, #12
 800741c:	0076      	lsls	r6, r6, #1
 800741e:	0b1b      	lsrs	r3, r3, #12
 8007420:	0d76      	lsrs	r6, r6, #21
 8007422:	d124      	bne.n	800746e <__d2b+0x72>
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	2c00      	cmp	r4, #0
 8007428:	d027      	beq.n	800747a <__d2b+0x7e>
 800742a:	4668      	mov	r0, sp
 800742c:	9400      	str	r4, [sp, #0]
 800742e:	f7ff fd73 	bl	8006f18 <__lo0bits>
 8007432:	9c00      	ldr	r4, [sp, #0]
 8007434:	2800      	cmp	r0, #0
 8007436:	d01e      	beq.n	8007476 <__d2b+0x7a>
 8007438:	9b01      	ldr	r3, [sp, #4]
 800743a:	2120      	movs	r1, #32
 800743c:	001a      	movs	r2, r3
 800743e:	1a09      	subs	r1, r1, r0
 8007440:	408a      	lsls	r2, r1
 8007442:	40c3      	lsrs	r3, r0
 8007444:	4322      	orrs	r2, r4
 8007446:	616a      	str	r2, [r5, #20]
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	9c01      	ldr	r4, [sp, #4]
 800744c:	61ac      	str	r4, [r5, #24]
 800744e:	1e63      	subs	r3, r4, #1
 8007450:	419c      	sbcs	r4, r3
 8007452:	3401      	adds	r4, #1
 8007454:	612c      	str	r4, [r5, #16]
 8007456:	2e00      	cmp	r6, #0
 8007458:	d018      	beq.n	800748c <__d2b+0x90>
 800745a:	4b17      	ldr	r3, [pc, #92]	; (80074b8 <__d2b+0xbc>)
 800745c:	18f6      	adds	r6, r6, r3
 800745e:	2335      	movs	r3, #53	; 0x35
 8007460:	1836      	adds	r6, r6, r0
 8007462:	1a18      	subs	r0, r3, r0
 8007464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007466:	603e      	str	r6, [r7, #0]
 8007468:	6018      	str	r0, [r3, #0]
 800746a:	0028      	movs	r0, r5
 800746c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800746e:	2280      	movs	r2, #128	; 0x80
 8007470:	0352      	lsls	r2, r2, #13
 8007472:	4313      	orrs	r3, r2
 8007474:	e7d6      	b.n	8007424 <__d2b+0x28>
 8007476:	616c      	str	r4, [r5, #20]
 8007478:	e7e7      	b.n	800744a <__d2b+0x4e>
 800747a:	a801      	add	r0, sp, #4
 800747c:	f7ff fd4c 	bl	8006f18 <__lo0bits>
 8007480:	2401      	movs	r4, #1
 8007482:	9b01      	ldr	r3, [sp, #4]
 8007484:	612c      	str	r4, [r5, #16]
 8007486:	616b      	str	r3, [r5, #20]
 8007488:	3020      	adds	r0, #32
 800748a:	e7e4      	b.n	8007456 <__d2b+0x5a>
 800748c:	4b0b      	ldr	r3, [pc, #44]	; (80074bc <__d2b+0xc0>)
 800748e:	18c0      	adds	r0, r0, r3
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <__d2b+0xc4>)
 8007492:	6038      	str	r0, [r7, #0]
 8007494:	18e3      	adds	r3, r4, r3
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	18eb      	adds	r3, r5, r3
 800749a:	6958      	ldr	r0, [r3, #20]
 800749c:	f7ff fd22 	bl	8006ee4 <__hi0bits>
 80074a0:	0164      	lsls	r4, r4, #5
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	1a24      	subs	r4, r4, r0
 80074a6:	601c      	str	r4, [r3, #0]
 80074a8:	e7df      	b.n	800746a <__d2b+0x6e>
 80074aa:	46c0      	nop			; (mov r8, r8)
 80074ac:	08008e07 	.word	0x08008e07
 80074b0:	0000030a 	.word	0x0000030a
 80074b4:	08008e18 	.word	0x08008e18
 80074b8:	fffffbcd 	.word	0xfffffbcd
 80074bc:	fffffbce 	.word	0xfffffbce
 80074c0:	3fffffff 	.word	0x3fffffff

080074c4 <_calloc_r>:
 80074c4:	b570      	push	{r4, r5, r6, lr}
 80074c6:	0c13      	lsrs	r3, r2, #16
 80074c8:	0c0d      	lsrs	r5, r1, #16
 80074ca:	d11e      	bne.n	800750a <_calloc_r+0x46>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10c      	bne.n	80074ea <_calloc_r+0x26>
 80074d0:	b289      	uxth	r1, r1
 80074d2:	b294      	uxth	r4, r2
 80074d4:	434c      	muls	r4, r1
 80074d6:	0021      	movs	r1, r4
 80074d8:	f000 f88c 	bl	80075f4 <_malloc_r>
 80074dc:	1e05      	subs	r5, r0, #0
 80074de:	d01b      	beq.n	8007518 <_calloc_r+0x54>
 80074e0:	0022      	movs	r2, r4
 80074e2:	2100      	movs	r1, #0
 80074e4:	f7fe f8b0 	bl	8005648 <memset>
 80074e8:	e016      	b.n	8007518 <_calloc_r+0x54>
 80074ea:	1c1d      	adds	r5, r3, #0
 80074ec:	1c0b      	adds	r3, r1, #0
 80074ee:	b292      	uxth	r2, r2
 80074f0:	b289      	uxth	r1, r1
 80074f2:	b29c      	uxth	r4, r3
 80074f4:	4351      	muls	r1, r2
 80074f6:	b2ab      	uxth	r3, r5
 80074f8:	4363      	muls	r3, r4
 80074fa:	0c0c      	lsrs	r4, r1, #16
 80074fc:	191c      	adds	r4, r3, r4
 80074fe:	0c22      	lsrs	r2, r4, #16
 8007500:	d107      	bne.n	8007512 <_calloc_r+0x4e>
 8007502:	0424      	lsls	r4, r4, #16
 8007504:	b289      	uxth	r1, r1
 8007506:	430c      	orrs	r4, r1
 8007508:	e7e5      	b.n	80074d6 <_calloc_r+0x12>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <_calloc_r+0x4e>
 800750e:	1c13      	adds	r3, r2, #0
 8007510:	e7ed      	b.n	80074ee <_calloc_r+0x2a>
 8007512:	230c      	movs	r3, #12
 8007514:	2500      	movs	r5, #0
 8007516:	6003      	str	r3, [r0, #0]
 8007518:	0028      	movs	r0, r5
 800751a:	bd70      	pop	{r4, r5, r6, pc}

0800751c <_free_r>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	0005      	movs	r5, r0
 8007520:	2900      	cmp	r1, #0
 8007522:	d010      	beq.n	8007546 <_free_r+0x2a>
 8007524:	1f0c      	subs	r4, r1, #4
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	da00      	bge.n	800752e <_free_r+0x12>
 800752c:	18e4      	adds	r4, r4, r3
 800752e:	0028      	movs	r0, r5
 8007530:	f000 fa9e 	bl	8007a70 <__malloc_lock>
 8007534:	4a1d      	ldr	r2, [pc, #116]	; (80075ac <_free_r+0x90>)
 8007536:	6813      	ldr	r3, [r2, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d105      	bne.n	8007548 <_free_r+0x2c>
 800753c:	6063      	str	r3, [r4, #4]
 800753e:	6014      	str	r4, [r2, #0]
 8007540:	0028      	movs	r0, r5
 8007542:	f000 fa9d 	bl	8007a80 <__malloc_unlock>
 8007546:	bd70      	pop	{r4, r5, r6, pc}
 8007548:	42a3      	cmp	r3, r4
 800754a:	d908      	bls.n	800755e <_free_r+0x42>
 800754c:	6821      	ldr	r1, [r4, #0]
 800754e:	1860      	adds	r0, r4, r1
 8007550:	4283      	cmp	r3, r0
 8007552:	d1f3      	bne.n	800753c <_free_r+0x20>
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	1841      	adds	r1, r0, r1
 800755a:	6021      	str	r1, [r4, #0]
 800755c:	e7ee      	b.n	800753c <_free_r+0x20>
 800755e:	001a      	movs	r2, r3
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <_free_r+0x4e>
 8007566:	42a3      	cmp	r3, r4
 8007568:	d9f9      	bls.n	800755e <_free_r+0x42>
 800756a:	6811      	ldr	r1, [r2, #0]
 800756c:	1850      	adds	r0, r2, r1
 800756e:	42a0      	cmp	r0, r4
 8007570:	d10b      	bne.n	800758a <_free_r+0x6e>
 8007572:	6820      	ldr	r0, [r4, #0]
 8007574:	1809      	adds	r1, r1, r0
 8007576:	1850      	adds	r0, r2, r1
 8007578:	6011      	str	r1, [r2, #0]
 800757a:	4283      	cmp	r3, r0
 800757c:	d1e0      	bne.n	8007540 <_free_r+0x24>
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	1841      	adds	r1, r0, r1
 8007584:	6011      	str	r1, [r2, #0]
 8007586:	6053      	str	r3, [r2, #4]
 8007588:	e7da      	b.n	8007540 <_free_r+0x24>
 800758a:	42a0      	cmp	r0, r4
 800758c:	d902      	bls.n	8007594 <_free_r+0x78>
 800758e:	230c      	movs	r3, #12
 8007590:	602b      	str	r3, [r5, #0]
 8007592:	e7d5      	b.n	8007540 <_free_r+0x24>
 8007594:	6821      	ldr	r1, [r4, #0]
 8007596:	1860      	adds	r0, r4, r1
 8007598:	4283      	cmp	r3, r0
 800759a:	d103      	bne.n	80075a4 <_free_r+0x88>
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	1841      	adds	r1, r0, r1
 80075a2:	6021      	str	r1, [r4, #0]
 80075a4:	6063      	str	r3, [r4, #4]
 80075a6:	6054      	str	r4, [r2, #4]
 80075a8:	e7ca      	b.n	8007540 <_free_r+0x24>
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	20000c60 	.word	0x20000c60

080075b0 <sbrk_aligned>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	4e0f      	ldr	r6, [pc, #60]	; (80075f0 <sbrk_aligned+0x40>)
 80075b4:	000d      	movs	r5, r1
 80075b6:	6831      	ldr	r1, [r6, #0]
 80075b8:	0004      	movs	r4, r0
 80075ba:	2900      	cmp	r1, #0
 80075bc:	d102      	bne.n	80075c4 <sbrk_aligned+0x14>
 80075be:	f000 f9f1 	bl	80079a4 <_sbrk_r>
 80075c2:	6030      	str	r0, [r6, #0]
 80075c4:	0029      	movs	r1, r5
 80075c6:	0020      	movs	r0, r4
 80075c8:	f000 f9ec 	bl	80079a4 <_sbrk_r>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d00a      	beq.n	80075e6 <sbrk_aligned+0x36>
 80075d0:	2303      	movs	r3, #3
 80075d2:	1cc5      	adds	r5, r0, #3
 80075d4:	439d      	bics	r5, r3
 80075d6:	42a8      	cmp	r0, r5
 80075d8:	d007      	beq.n	80075ea <sbrk_aligned+0x3a>
 80075da:	1a29      	subs	r1, r5, r0
 80075dc:	0020      	movs	r0, r4
 80075de:	f000 f9e1 	bl	80079a4 <_sbrk_r>
 80075e2:	1c43      	adds	r3, r0, #1
 80075e4:	d101      	bne.n	80075ea <sbrk_aligned+0x3a>
 80075e6:	2501      	movs	r5, #1
 80075e8:	426d      	negs	r5, r5
 80075ea:	0028      	movs	r0, r5
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	20000c64 	.word	0x20000c64

080075f4 <_malloc_r>:
 80075f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075f6:	2203      	movs	r2, #3
 80075f8:	1ccb      	adds	r3, r1, #3
 80075fa:	4393      	bics	r3, r2
 80075fc:	3308      	adds	r3, #8
 80075fe:	0006      	movs	r6, r0
 8007600:	001f      	movs	r7, r3
 8007602:	2b0c      	cmp	r3, #12
 8007604:	d232      	bcs.n	800766c <_malloc_r+0x78>
 8007606:	270c      	movs	r7, #12
 8007608:	42b9      	cmp	r1, r7
 800760a:	d831      	bhi.n	8007670 <_malloc_r+0x7c>
 800760c:	0030      	movs	r0, r6
 800760e:	f000 fa2f 	bl	8007a70 <__malloc_lock>
 8007612:	4d32      	ldr	r5, [pc, #200]	; (80076dc <_malloc_r+0xe8>)
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	001c      	movs	r4, r3
 8007618:	2c00      	cmp	r4, #0
 800761a:	d12e      	bne.n	800767a <_malloc_r+0x86>
 800761c:	0039      	movs	r1, r7
 800761e:	0030      	movs	r0, r6
 8007620:	f7ff ffc6 	bl	80075b0 <sbrk_aligned>
 8007624:	0004      	movs	r4, r0
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d11e      	bne.n	8007668 <_malloc_r+0x74>
 800762a:	682c      	ldr	r4, [r5, #0]
 800762c:	0025      	movs	r5, r4
 800762e:	2d00      	cmp	r5, #0
 8007630:	d14a      	bne.n	80076c8 <_malloc_r+0xd4>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	0029      	movs	r1, r5
 8007636:	18e3      	adds	r3, r4, r3
 8007638:	0030      	movs	r0, r6
 800763a:	9301      	str	r3, [sp, #4]
 800763c:	f000 f9b2 	bl	80079a4 <_sbrk_r>
 8007640:	9b01      	ldr	r3, [sp, #4]
 8007642:	4283      	cmp	r3, r0
 8007644:	d143      	bne.n	80076ce <_malloc_r+0xda>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	3703      	adds	r7, #3
 800764a:	1aff      	subs	r7, r7, r3
 800764c:	2303      	movs	r3, #3
 800764e:	439f      	bics	r7, r3
 8007650:	3708      	adds	r7, #8
 8007652:	2f0c      	cmp	r7, #12
 8007654:	d200      	bcs.n	8007658 <_malloc_r+0x64>
 8007656:	270c      	movs	r7, #12
 8007658:	0039      	movs	r1, r7
 800765a:	0030      	movs	r0, r6
 800765c:	f7ff ffa8 	bl	80075b0 <sbrk_aligned>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d034      	beq.n	80076ce <_malloc_r+0xda>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	19df      	adds	r7, r3, r7
 8007668:	6027      	str	r7, [r4, #0]
 800766a:	e013      	b.n	8007694 <_malloc_r+0xa0>
 800766c:	2b00      	cmp	r3, #0
 800766e:	dacb      	bge.n	8007608 <_malloc_r+0x14>
 8007670:	230c      	movs	r3, #12
 8007672:	2500      	movs	r5, #0
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	0028      	movs	r0, r5
 8007678:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800767a:	6822      	ldr	r2, [r4, #0]
 800767c:	1bd1      	subs	r1, r2, r7
 800767e:	d420      	bmi.n	80076c2 <_malloc_r+0xce>
 8007680:	290b      	cmp	r1, #11
 8007682:	d917      	bls.n	80076b4 <_malloc_r+0xc0>
 8007684:	19e2      	adds	r2, r4, r7
 8007686:	6027      	str	r7, [r4, #0]
 8007688:	42a3      	cmp	r3, r4
 800768a:	d111      	bne.n	80076b0 <_malloc_r+0xbc>
 800768c:	602a      	str	r2, [r5, #0]
 800768e:	6863      	ldr	r3, [r4, #4]
 8007690:	6011      	str	r1, [r2, #0]
 8007692:	6053      	str	r3, [r2, #4]
 8007694:	0030      	movs	r0, r6
 8007696:	0025      	movs	r5, r4
 8007698:	f000 f9f2 	bl	8007a80 <__malloc_unlock>
 800769c:	2207      	movs	r2, #7
 800769e:	350b      	adds	r5, #11
 80076a0:	1d23      	adds	r3, r4, #4
 80076a2:	4395      	bics	r5, r2
 80076a4:	1aea      	subs	r2, r5, r3
 80076a6:	429d      	cmp	r5, r3
 80076a8:	d0e5      	beq.n	8007676 <_malloc_r+0x82>
 80076aa:	1b5b      	subs	r3, r3, r5
 80076ac:	50a3      	str	r3, [r4, r2]
 80076ae:	e7e2      	b.n	8007676 <_malloc_r+0x82>
 80076b0:	605a      	str	r2, [r3, #4]
 80076b2:	e7ec      	b.n	800768e <_malloc_r+0x9a>
 80076b4:	6862      	ldr	r2, [r4, #4]
 80076b6:	42a3      	cmp	r3, r4
 80076b8:	d101      	bne.n	80076be <_malloc_r+0xca>
 80076ba:	602a      	str	r2, [r5, #0]
 80076bc:	e7ea      	b.n	8007694 <_malloc_r+0xa0>
 80076be:	605a      	str	r2, [r3, #4]
 80076c0:	e7e8      	b.n	8007694 <_malloc_r+0xa0>
 80076c2:	0023      	movs	r3, r4
 80076c4:	6864      	ldr	r4, [r4, #4]
 80076c6:	e7a7      	b.n	8007618 <_malloc_r+0x24>
 80076c8:	002c      	movs	r4, r5
 80076ca:	686d      	ldr	r5, [r5, #4]
 80076cc:	e7af      	b.n	800762e <_malloc_r+0x3a>
 80076ce:	230c      	movs	r3, #12
 80076d0:	0030      	movs	r0, r6
 80076d2:	6033      	str	r3, [r6, #0]
 80076d4:	f000 f9d4 	bl	8007a80 <__malloc_unlock>
 80076d8:	e7cd      	b.n	8007676 <_malloc_r+0x82>
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	20000c60 	.word	0x20000c60

080076e0 <__ssputs_r>:
 80076e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076e2:	688e      	ldr	r6, [r1, #8]
 80076e4:	b085      	sub	sp, #20
 80076e6:	0007      	movs	r7, r0
 80076e8:	000c      	movs	r4, r1
 80076ea:	9203      	str	r2, [sp, #12]
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	429e      	cmp	r6, r3
 80076f0:	d83c      	bhi.n	800776c <__ssputs_r+0x8c>
 80076f2:	2390      	movs	r3, #144	; 0x90
 80076f4:	898a      	ldrh	r2, [r1, #12]
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	421a      	tst	r2, r3
 80076fa:	d034      	beq.n	8007766 <__ssputs_r+0x86>
 80076fc:	6909      	ldr	r1, [r1, #16]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	6960      	ldr	r0, [r4, #20]
 8007702:	1a5b      	subs	r3, r3, r1
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	2303      	movs	r3, #3
 8007708:	4343      	muls	r3, r0
 800770a:	0fdd      	lsrs	r5, r3, #31
 800770c:	18ed      	adds	r5, r5, r3
 800770e:	9b01      	ldr	r3, [sp, #4]
 8007710:	9802      	ldr	r0, [sp, #8]
 8007712:	3301      	adds	r3, #1
 8007714:	181b      	adds	r3, r3, r0
 8007716:	106d      	asrs	r5, r5, #1
 8007718:	42ab      	cmp	r3, r5
 800771a:	d900      	bls.n	800771e <__ssputs_r+0x3e>
 800771c:	001d      	movs	r5, r3
 800771e:	0553      	lsls	r3, r2, #21
 8007720:	d532      	bpl.n	8007788 <__ssputs_r+0xa8>
 8007722:	0029      	movs	r1, r5
 8007724:	0038      	movs	r0, r7
 8007726:	f7ff ff65 	bl	80075f4 <_malloc_r>
 800772a:	1e06      	subs	r6, r0, #0
 800772c:	d109      	bne.n	8007742 <__ssputs_r+0x62>
 800772e:	230c      	movs	r3, #12
 8007730:	603b      	str	r3, [r7, #0]
 8007732:	2340      	movs	r3, #64	; 0x40
 8007734:	2001      	movs	r0, #1
 8007736:	89a2      	ldrh	r2, [r4, #12]
 8007738:	4240      	negs	r0, r0
 800773a:	4313      	orrs	r3, r2
 800773c:	81a3      	strh	r3, [r4, #12]
 800773e:	b005      	add	sp, #20
 8007740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007742:	9a02      	ldr	r2, [sp, #8]
 8007744:	6921      	ldr	r1, [r4, #16]
 8007746:	f7ff fb18 	bl	8006d7a <memcpy>
 800774a:	89a3      	ldrh	r3, [r4, #12]
 800774c:	4a14      	ldr	r2, [pc, #80]	; (80077a0 <__ssputs_r+0xc0>)
 800774e:	401a      	ands	r2, r3
 8007750:	2380      	movs	r3, #128	; 0x80
 8007752:	4313      	orrs	r3, r2
 8007754:	81a3      	strh	r3, [r4, #12]
 8007756:	9b02      	ldr	r3, [sp, #8]
 8007758:	6126      	str	r6, [r4, #16]
 800775a:	18f6      	adds	r6, r6, r3
 800775c:	6026      	str	r6, [r4, #0]
 800775e:	6165      	str	r5, [r4, #20]
 8007760:	9e01      	ldr	r6, [sp, #4]
 8007762:	1aed      	subs	r5, r5, r3
 8007764:	60a5      	str	r5, [r4, #8]
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	429e      	cmp	r6, r3
 800776a:	d900      	bls.n	800776e <__ssputs_r+0x8e>
 800776c:	9e01      	ldr	r6, [sp, #4]
 800776e:	0032      	movs	r2, r6
 8007770:	9903      	ldr	r1, [sp, #12]
 8007772:	6820      	ldr	r0, [r4, #0]
 8007774:	f000 f968 	bl	8007a48 <memmove>
 8007778:	68a3      	ldr	r3, [r4, #8]
 800777a:	2000      	movs	r0, #0
 800777c:	1b9b      	subs	r3, r3, r6
 800777e:	60a3      	str	r3, [r4, #8]
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	199e      	adds	r6, r3, r6
 8007784:	6026      	str	r6, [r4, #0]
 8007786:	e7da      	b.n	800773e <__ssputs_r+0x5e>
 8007788:	002a      	movs	r2, r5
 800778a:	0038      	movs	r0, r7
 800778c:	f000 f980 	bl	8007a90 <_realloc_r>
 8007790:	1e06      	subs	r6, r0, #0
 8007792:	d1e0      	bne.n	8007756 <__ssputs_r+0x76>
 8007794:	0038      	movs	r0, r7
 8007796:	6921      	ldr	r1, [r4, #16]
 8007798:	f7ff fec0 	bl	800751c <_free_r>
 800779c:	e7c7      	b.n	800772e <__ssputs_r+0x4e>
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	fffffb7f 	.word	0xfffffb7f

080077a4 <_svfiprintf_r>:
 80077a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077a6:	b0a1      	sub	sp, #132	; 0x84
 80077a8:	9003      	str	r0, [sp, #12]
 80077aa:	001d      	movs	r5, r3
 80077ac:	898b      	ldrh	r3, [r1, #12]
 80077ae:	000f      	movs	r7, r1
 80077b0:	0016      	movs	r6, r2
 80077b2:	061b      	lsls	r3, r3, #24
 80077b4:	d511      	bpl.n	80077da <_svfiprintf_r+0x36>
 80077b6:	690b      	ldr	r3, [r1, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10e      	bne.n	80077da <_svfiprintf_r+0x36>
 80077bc:	2140      	movs	r1, #64	; 0x40
 80077be:	f7ff ff19 	bl	80075f4 <_malloc_r>
 80077c2:	6038      	str	r0, [r7, #0]
 80077c4:	6138      	str	r0, [r7, #16]
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d105      	bne.n	80077d6 <_svfiprintf_r+0x32>
 80077ca:	230c      	movs	r3, #12
 80077cc:	9a03      	ldr	r2, [sp, #12]
 80077ce:	3801      	subs	r0, #1
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	b021      	add	sp, #132	; 0x84
 80077d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d6:	2340      	movs	r3, #64	; 0x40
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	2300      	movs	r3, #0
 80077dc:	ac08      	add	r4, sp, #32
 80077de:	6163      	str	r3, [r4, #20]
 80077e0:	3320      	adds	r3, #32
 80077e2:	7663      	strb	r3, [r4, #25]
 80077e4:	3310      	adds	r3, #16
 80077e6:	76a3      	strb	r3, [r4, #26]
 80077e8:	9507      	str	r5, [sp, #28]
 80077ea:	0035      	movs	r5, r6
 80077ec:	782b      	ldrb	r3, [r5, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <_svfiprintf_r+0x52>
 80077f2:	2b25      	cmp	r3, #37	; 0x25
 80077f4:	d147      	bne.n	8007886 <_svfiprintf_r+0xe2>
 80077f6:	1bab      	subs	r3, r5, r6
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	42b5      	cmp	r5, r6
 80077fc:	d00c      	beq.n	8007818 <_svfiprintf_r+0x74>
 80077fe:	0032      	movs	r2, r6
 8007800:	0039      	movs	r1, r7
 8007802:	9803      	ldr	r0, [sp, #12]
 8007804:	f7ff ff6c 	bl	80076e0 <__ssputs_r>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d100      	bne.n	800780e <_svfiprintf_r+0x6a>
 800780c:	e0ae      	b.n	800796c <_svfiprintf_r+0x1c8>
 800780e:	6962      	ldr	r2, [r4, #20]
 8007810:	9b05      	ldr	r3, [sp, #20]
 8007812:	4694      	mov	ip, r2
 8007814:	4463      	add	r3, ip
 8007816:	6163      	str	r3, [r4, #20]
 8007818:	782b      	ldrb	r3, [r5, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d100      	bne.n	8007820 <_svfiprintf_r+0x7c>
 800781e:	e0a5      	b.n	800796c <_svfiprintf_r+0x1c8>
 8007820:	2201      	movs	r2, #1
 8007822:	2300      	movs	r3, #0
 8007824:	4252      	negs	r2, r2
 8007826:	6062      	str	r2, [r4, #4]
 8007828:	a904      	add	r1, sp, #16
 800782a:	3254      	adds	r2, #84	; 0x54
 800782c:	1852      	adds	r2, r2, r1
 800782e:	1c6e      	adds	r6, r5, #1
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	60e3      	str	r3, [r4, #12]
 8007834:	60a3      	str	r3, [r4, #8]
 8007836:	7013      	strb	r3, [r2, #0]
 8007838:	65a3      	str	r3, [r4, #88]	; 0x58
 800783a:	2205      	movs	r2, #5
 800783c:	7831      	ldrb	r1, [r6, #0]
 800783e:	4854      	ldr	r0, [pc, #336]	; (8007990 <_svfiprintf_r+0x1ec>)
 8007840:	f7ff fa90 	bl	8006d64 <memchr>
 8007844:	1c75      	adds	r5, r6, #1
 8007846:	2800      	cmp	r0, #0
 8007848:	d11f      	bne.n	800788a <_svfiprintf_r+0xe6>
 800784a:	6822      	ldr	r2, [r4, #0]
 800784c:	06d3      	lsls	r3, r2, #27
 800784e:	d504      	bpl.n	800785a <_svfiprintf_r+0xb6>
 8007850:	2353      	movs	r3, #83	; 0x53
 8007852:	a904      	add	r1, sp, #16
 8007854:	185b      	adds	r3, r3, r1
 8007856:	2120      	movs	r1, #32
 8007858:	7019      	strb	r1, [r3, #0]
 800785a:	0713      	lsls	r3, r2, #28
 800785c:	d504      	bpl.n	8007868 <_svfiprintf_r+0xc4>
 800785e:	2353      	movs	r3, #83	; 0x53
 8007860:	a904      	add	r1, sp, #16
 8007862:	185b      	adds	r3, r3, r1
 8007864:	212b      	movs	r1, #43	; 0x2b
 8007866:	7019      	strb	r1, [r3, #0]
 8007868:	7833      	ldrb	r3, [r6, #0]
 800786a:	2b2a      	cmp	r3, #42	; 0x2a
 800786c:	d016      	beq.n	800789c <_svfiprintf_r+0xf8>
 800786e:	0035      	movs	r5, r6
 8007870:	2100      	movs	r1, #0
 8007872:	200a      	movs	r0, #10
 8007874:	68e3      	ldr	r3, [r4, #12]
 8007876:	782a      	ldrb	r2, [r5, #0]
 8007878:	1c6e      	adds	r6, r5, #1
 800787a:	3a30      	subs	r2, #48	; 0x30
 800787c:	2a09      	cmp	r2, #9
 800787e:	d94e      	bls.n	800791e <_svfiprintf_r+0x17a>
 8007880:	2900      	cmp	r1, #0
 8007882:	d111      	bne.n	80078a8 <_svfiprintf_r+0x104>
 8007884:	e017      	b.n	80078b6 <_svfiprintf_r+0x112>
 8007886:	3501      	adds	r5, #1
 8007888:	e7b0      	b.n	80077ec <_svfiprintf_r+0x48>
 800788a:	4b41      	ldr	r3, [pc, #260]	; (8007990 <_svfiprintf_r+0x1ec>)
 800788c:	6822      	ldr	r2, [r4, #0]
 800788e:	1ac0      	subs	r0, r0, r3
 8007890:	2301      	movs	r3, #1
 8007892:	4083      	lsls	r3, r0
 8007894:	4313      	orrs	r3, r2
 8007896:	002e      	movs	r6, r5
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	e7ce      	b.n	800783a <_svfiprintf_r+0x96>
 800789c:	9b07      	ldr	r3, [sp, #28]
 800789e:	1d19      	adds	r1, r3, #4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	9107      	str	r1, [sp, #28]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	db01      	blt.n	80078ac <_svfiprintf_r+0x108>
 80078a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80078aa:	e004      	b.n	80078b6 <_svfiprintf_r+0x112>
 80078ac:	425b      	negs	r3, r3
 80078ae:	60e3      	str	r3, [r4, #12]
 80078b0:	2302      	movs	r3, #2
 80078b2:	4313      	orrs	r3, r2
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	782b      	ldrb	r3, [r5, #0]
 80078b8:	2b2e      	cmp	r3, #46	; 0x2e
 80078ba:	d10a      	bne.n	80078d2 <_svfiprintf_r+0x12e>
 80078bc:	786b      	ldrb	r3, [r5, #1]
 80078be:	2b2a      	cmp	r3, #42	; 0x2a
 80078c0:	d135      	bne.n	800792e <_svfiprintf_r+0x18a>
 80078c2:	9b07      	ldr	r3, [sp, #28]
 80078c4:	3502      	adds	r5, #2
 80078c6:	1d1a      	adds	r2, r3, #4
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	9207      	str	r2, [sp, #28]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	db2b      	blt.n	8007928 <_svfiprintf_r+0x184>
 80078d0:	9309      	str	r3, [sp, #36]	; 0x24
 80078d2:	4e30      	ldr	r6, [pc, #192]	; (8007994 <_svfiprintf_r+0x1f0>)
 80078d4:	2203      	movs	r2, #3
 80078d6:	0030      	movs	r0, r6
 80078d8:	7829      	ldrb	r1, [r5, #0]
 80078da:	f7ff fa43 	bl	8006d64 <memchr>
 80078de:	2800      	cmp	r0, #0
 80078e0:	d006      	beq.n	80078f0 <_svfiprintf_r+0x14c>
 80078e2:	2340      	movs	r3, #64	; 0x40
 80078e4:	1b80      	subs	r0, r0, r6
 80078e6:	4083      	lsls	r3, r0
 80078e8:	6822      	ldr	r2, [r4, #0]
 80078ea:	3501      	adds	r5, #1
 80078ec:	4313      	orrs	r3, r2
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	7829      	ldrb	r1, [r5, #0]
 80078f2:	2206      	movs	r2, #6
 80078f4:	4828      	ldr	r0, [pc, #160]	; (8007998 <_svfiprintf_r+0x1f4>)
 80078f6:	1c6e      	adds	r6, r5, #1
 80078f8:	7621      	strb	r1, [r4, #24]
 80078fa:	f7ff fa33 	bl	8006d64 <memchr>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d03c      	beq.n	800797c <_svfiprintf_r+0x1d8>
 8007902:	4b26      	ldr	r3, [pc, #152]	; (800799c <_svfiprintf_r+0x1f8>)
 8007904:	2b00      	cmp	r3, #0
 8007906:	d125      	bne.n	8007954 <_svfiprintf_r+0x1b0>
 8007908:	2207      	movs	r2, #7
 800790a:	9b07      	ldr	r3, [sp, #28]
 800790c:	3307      	adds	r3, #7
 800790e:	4393      	bics	r3, r2
 8007910:	3308      	adds	r3, #8
 8007912:	9307      	str	r3, [sp, #28]
 8007914:	6963      	ldr	r3, [r4, #20]
 8007916:	9a04      	ldr	r2, [sp, #16]
 8007918:	189b      	adds	r3, r3, r2
 800791a:	6163      	str	r3, [r4, #20]
 800791c:	e765      	b.n	80077ea <_svfiprintf_r+0x46>
 800791e:	4343      	muls	r3, r0
 8007920:	0035      	movs	r5, r6
 8007922:	2101      	movs	r1, #1
 8007924:	189b      	adds	r3, r3, r2
 8007926:	e7a6      	b.n	8007876 <_svfiprintf_r+0xd2>
 8007928:	2301      	movs	r3, #1
 800792a:	425b      	negs	r3, r3
 800792c:	e7d0      	b.n	80078d0 <_svfiprintf_r+0x12c>
 800792e:	2300      	movs	r3, #0
 8007930:	200a      	movs	r0, #10
 8007932:	001a      	movs	r2, r3
 8007934:	3501      	adds	r5, #1
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	7829      	ldrb	r1, [r5, #0]
 800793a:	1c6e      	adds	r6, r5, #1
 800793c:	3930      	subs	r1, #48	; 0x30
 800793e:	2909      	cmp	r1, #9
 8007940:	d903      	bls.n	800794a <_svfiprintf_r+0x1a6>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0c5      	beq.n	80078d2 <_svfiprintf_r+0x12e>
 8007946:	9209      	str	r2, [sp, #36]	; 0x24
 8007948:	e7c3      	b.n	80078d2 <_svfiprintf_r+0x12e>
 800794a:	4342      	muls	r2, r0
 800794c:	0035      	movs	r5, r6
 800794e:	2301      	movs	r3, #1
 8007950:	1852      	adds	r2, r2, r1
 8007952:	e7f1      	b.n	8007938 <_svfiprintf_r+0x194>
 8007954:	ab07      	add	r3, sp, #28
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	003a      	movs	r2, r7
 800795a:	0021      	movs	r1, r4
 800795c:	4b10      	ldr	r3, [pc, #64]	; (80079a0 <_svfiprintf_r+0x1fc>)
 800795e:	9803      	ldr	r0, [sp, #12]
 8007960:	f7fd ff24 	bl	80057ac <_printf_float>
 8007964:	9004      	str	r0, [sp, #16]
 8007966:	9b04      	ldr	r3, [sp, #16]
 8007968:	3301      	adds	r3, #1
 800796a:	d1d3      	bne.n	8007914 <_svfiprintf_r+0x170>
 800796c:	89bb      	ldrh	r3, [r7, #12]
 800796e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007970:	065b      	lsls	r3, r3, #25
 8007972:	d400      	bmi.n	8007976 <_svfiprintf_r+0x1d2>
 8007974:	e72d      	b.n	80077d2 <_svfiprintf_r+0x2e>
 8007976:	2001      	movs	r0, #1
 8007978:	4240      	negs	r0, r0
 800797a:	e72a      	b.n	80077d2 <_svfiprintf_r+0x2e>
 800797c:	ab07      	add	r3, sp, #28
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	003a      	movs	r2, r7
 8007982:	0021      	movs	r1, r4
 8007984:	4b06      	ldr	r3, [pc, #24]	; (80079a0 <_svfiprintf_r+0x1fc>)
 8007986:	9803      	ldr	r0, [sp, #12]
 8007988:	f7fe f9c2 	bl	8005d10 <_printf_i>
 800798c:	e7ea      	b.n	8007964 <_svfiprintf_r+0x1c0>
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	08008f74 	.word	0x08008f74
 8007994:	08008f7a 	.word	0x08008f7a
 8007998:	08008f7e 	.word	0x08008f7e
 800799c:	080057ad 	.word	0x080057ad
 80079a0:	080076e1 	.word	0x080076e1

080079a4 <_sbrk_r>:
 80079a4:	2300      	movs	r3, #0
 80079a6:	b570      	push	{r4, r5, r6, lr}
 80079a8:	4d06      	ldr	r5, [pc, #24]	; (80079c4 <_sbrk_r+0x20>)
 80079aa:	0004      	movs	r4, r0
 80079ac:	0008      	movs	r0, r1
 80079ae:	602b      	str	r3, [r5, #0]
 80079b0:	f7fa ff10 	bl	80027d4 <_sbrk>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d103      	bne.n	80079c0 <_sbrk_r+0x1c>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d000      	beq.n	80079c0 <_sbrk_r+0x1c>
 80079be:	6023      	str	r3, [r4, #0]
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	20000c68 	.word	0x20000c68

080079c8 <__assert_func>:
 80079c8:	b530      	push	{r4, r5, lr}
 80079ca:	0014      	movs	r4, r2
 80079cc:	001a      	movs	r2, r3
 80079ce:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <__assert_func+0x2c>)
 80079d0:	0005      	movs	r5, r0
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	b085      	sub	sp, #20
 80079d6:	68d8      	ldr	r0, [r3, #12]
 80079d8:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <__assert_func+0x30>)
 80079da:	2c00      	cmp	r4, #0
 80079dc:	d101      	bne.n	80079e2 <__assert_func+0x1a>
 80079de:	4b07      	ldr	r3, [pc, #28]	; (80079fc <__assert_func+0x34>)
 80079e0:	001c      	movs	r4, r3
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	9100      	str	r1, [sp, #0]
 80079e6:	002b      	movs	r3, r5
 80079e8:	4905      	ldr	r1, [pc, #20]	; (8007a00 <__assert_func+0x38>)
 80079ea:	9402      	str	r4, [sp, #8]
 80079ec:	f000 f80a 	bl	8007a04 <fiprintf>
 80079f0:	f000 faba 	bl	8007f68 <abort>
 80079f4:	2000001c 	.word	0x2000001c
 80079f8:	08008f85 	.word	0x08008f85
 80079fc:	08008fc0 	.word	0x08008fc0
 8007a00:	08008f92 	.word	0x08008f92

08007a04 <fiprintf>:
 8007a04:	b40e      	push	{r1, r2, r3}
 8007a06:	b503      	push	{r0, r1, lr}
 8007a08:	0001      	movs	r1, r0
 8007a0a:	ab03      	add	r3, sp, #12
 8007a0c:	4804      	ldr	r0, [pc, #16]	; (8007a20 <fiprintf+0x1c>)
 8007a0e:	cb04      	ldmia	r3!, {r2}
 8007a10:	6800      	ldr	r0, [r0, #0]
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	f000 f892 	bl	8007b3c <_vfiprintf_r>
 8007a18:	b002      	add	sp, #8
 8007a1a:	bc08      	pop	{r3}
 8007a1c:	b003      	add	sp, #12
 8007a1e:	4718      	bx	r3
 8007a20:	2000001c 	.word	0x2000001c

08007a24 <__ascii_mbtowc>:
 8007a24:	b082      	sub	sp, #8
 8007a26:	2900      	cmp	r1, #0
 8007a28:	d100      	bne.n	8007a2c <__ascii_mbtowc+0x8>
 8007a2a:	a901      	add	r1, sp, #4
 8007a2c:	1e10      	subs	r0, r2, #0
 8007a2e:	d006      	beq.n	8007a3e <__ascii_mbtowc+0x1a>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d006      	beq.n	8007a42 <__ascii_mbtowc+0x1e>
 8007a34:	7813      	ldrb	r3, [r2, #0]
 8007a36:	600b      	str	r3, [r1, #0]
 8007a38:	7810      	ldrb	r0, [r2, #0]
 8007a3a:	1e43      	subs	r3, r0, #1
 8007a3c:	4198      	sbcs	r0, r3
 8007a3e:	b002      	add	sp, #8
 8007a40:	4770      	bx	lr
 8007a42:	2002      	movs	r0, #2
 8007a44:	4240      	negs	r0, r0
 8007a46:	e7fa      	b.n	8007a3e <__ascii_mbtowc+0x1a>

08007a48 <memmove>:
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	4288      	cmp	r0, r1
 8007a4c:	d902      	bls.n	8007a54 <memmove+0xc>
 8007a4e:	188b      	adds	r3, r1, r2
 8007a50:	4298      	cmp	r0, r3
 8007a52:	d303      	bcc.n	8007a5c <memmove+0x14>
 8007a54:	2300      	movs	r3, #0
 8007a56:	e007      	b.n	8007a68 <memmove+0x20>
 8007a58:	5c8b      	ldrb	r3, [r1, r2]
 8007a5a:	5483      	strb	r3, [r0, r2]
 8007a5c:	3a01      	subs	r2, #1
 8007a5e:	d2fb      	bcs.n	8007a58 <memmove+0x10>
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	5ccc      	ldrb	r4, [r1, r3]
 8007a64:	54c4      	strb	r4, [r0, r3]
 8007a66:	3301      	adds	r3, #1
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d1fa      	bne.n	8007a62 <memmove+0x1a>
 8007a6c:	e7f8      	b.n	8007a60 <memmove+0x18>
	...

08007a70 <__malloc_lock>:
 8007a70:	b510      	push	{r4, lr}
 8007a72:	4802      	ldr	r0, [pc, #8]	; (8007a7c <__malloc_lock+0xc>)
 8007a74:	f000 fc4f 	bl	8008316 <__retarget_lock_acquire_recursive>
 8007a78:	bd10      	pop	{r4, pc}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	20000c6c 	.word	0x20000c6c

08007a80 <__malloc_unlock>:
 8007a80:	b510      	push	{r4, lr}
 8007a82:	4802      	ldr	r0, [pc, #8]	; (8007a8c <__malloc_unlock+0xc>)
 8007a84:	f000 fc48 	bl	8008318 <__retarget_lock_release_recursive>
 8007a88:	bd10      	pop	{r4, pc}
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	20000c6c 	.word	0x20000c6c

08007a90 <_realloc_r>:
 8007a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a92:	0007      	movs	r7, r0
 8007a94:	000e      	movs	r6, r1
 8007a96:	0014      	movs	r4, r2
 8007a98:	2900      	cmp	r1, #0
 8007a9a:	d105      	bne.n	8007aa8 <_realloc_r+0x18>
 8007a9c:	0011      	movs	r1, r2
 8007a9e:	f7ff fda9 	bl	80075f4 <_malloc_r>
 8007aa2:	0005      	movs	r5, r0
 8007aa4:	0028      	movs	r0, r5
 8007aa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007aa8:	2a00      	cmp	r2, #0
 8007aaa:	d103      	bne.n	8007ab4 <_realloc_r+0x24>
 8007aac:	f7ff fd36 	bl	800751c <_free_r>
 8007ab0:	0025      	movs	r5, r4
 8007ab2:	e7f7      	b.n	8007aa4 <_realloc_r+0x14>
 8007ab4:	f000 fc9e 	bl	80083f4 <_malloc_usable_size_r>
 8007ab8:	9001      	str	r0, [sp, #4]
 8007aba:	4284      	cmp	r4, r0
 8007abc:	d803      	bhi.n	8007ac6 <_realloc_r+0x36>
 8007abe:	0035      	movs	r5, r6
 8007ac0:	0843      	lsrs	r3, r0, #1
 8007ac2:	42a3      	cmp	r3, r4
 8007ac4:	d3ee      	bcc.n	8007aa4 <_realloc_r+0x14>
 8007ac6:	0021      	movs	r1, r4
 8007ac8:	0038      	movs	r0, r7
 8007aca:	f7ff fd93 	bl	80075f4 <_malloc_r>
 8007ace:	1e05      	subs	r5, r0, #0
 8007ad0:	d0e8      	beq.n	8007aa4 <_realloc_r+0x14>
 8007ad2:	9b01      	ldr	r3, [sp, #4]
 8007ad4:	0022      	movs	r2, r4
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	d900      	bls.n	8007adc <_realloc_r+0x4c>
 8007ada:	001a      	movs	r2, r3
 8007adc:	0031      	movs	r1, r6
 8007ade:	0028      	movs	r0, r5
 8007ae0:	f7ff f94b 	bl	8006d7a <memcpy>
 8007ae4:	0031      	movs	r1, r6
 8007ae6:	0038      	movs	r0, r7
 8007ae8:	f7ff fd18 	bl	800751c <_free_r>
 8007aec:	e7da      	b.n	8007aa4 <_realloc_r+0x14>

08007aee <__sfputc_r>:
 8007aee:	6893      	ldr	r3, [r2, #8]
 8007af0:	b510      	push	{r4, lr}
 8007af2:	3b01      	subs	r3, #1
 8007af4:	6093      	str	r3, [r2, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da04      	bge.n	8007b04 <__sfputc_r+0x16>
 8007afa:	6994      	ldr	r4, [r2, #24]
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	db07      	blt.n	8007b10 <__sfputc_r+0x22>
 8007b00:	290a      	cmp	r1, #10
 8007b02:	d005      	beq.n	8007b10 <__sfputc_r+0x22>
 8007b04:	6813      	ldr	r3, [r2, #0]
 8007b06:	1c58      	adds	r0, r3, #1
 8007b08:	6010      	str	r0, [r2, #0]
 8007b0a:	7019      	strb	r1, [r3, #0]
 8007b0c:	0008      	movs	r0, r1
 8007b0e:	bd10      	pop	{r4, pc}
 8007b10:	f000 f94e 	bl	8007db0 <__swbuf_r>
 8007b14:	0001      	movs	r1, r0
 8007b16:	e7f9      	b.n	8007b0c <__sfputc_r+0x1e>

08007b18 <__sfputs_r>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	0006      	movs	r6, r0
 8007b1c:	000f      	movs	r7, r1
 8007b1e:	0014      	movs	r4, r2
 8007b20:	18d5      	adds	r5, r2, r3
 8007b22:	42ac      	cmp	r4, r5
 8007b24:	d101      	bne.n	8007b2a <__sfputs_r+0x12>
 8007b26:	2000      	movs	r0, #0
 8007b28:	e007      	b.n	8007b3a <__sfputs_r+0x22>
 8007b2a:	7821      	ldrb	r1, [r4, #0]
 8007b2c:	003a      	movs	r2, r7
 8007b2e:	0030      	movs	r0, r6
 8007b30:	f7ff ffdd 	bl	8007aee <__sfputc_r>
 8007b34:	3401      	adds	r4, #1
 8007b36:	1c43      	adds	r3, r0, #1
 8007b38:	d1f3      	bne.n	8007b22 <__sfputs_r+0xa>
 8007b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b3c <_vfiprintf_r>:
 8007b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b3e:	b0a1      	sub	sp, #132	; 0x84
 8007b40:	0006      	movs	r6, r0
 8007b42:	000c      	movs	r4, r1
 8007b44:	001f      	movs	r7, r3
 8007b46:	9203      	str	r2, [sp, #12]
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d004      	beq.n	8007b56 <_vfiprintf_r+0x1a>
 8007b4c:	6983      	ldr	r3, [r0, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <_vfiprintf_r+0x1a>
 8007b52:	f000 fb3f 	bl	80081d4 <__sinit>
 8007b56:	4b8e      	ldr	r3, [pc, #568]	; (8007d90 <_vfiprintf_r+0x254>)
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	d11c      	bne.n	8007b96 <_vfiprintf_r+0x5a>
 8007b5c:	6874      	ldr	r4, [r6, #4]
 8007b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b60:	07db      	lsls	r3, r3, #31
 8007b62:	d405      	bmi.n	8007b70 <_vfiprintf_r+0x34>
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	059b      	lsls	r3, r3, #22
 8007b68:	d402      	bmi.n	8007b70 <_vfiprintf_r+0x34>
 8007b6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b6c:	f000 fbd3 	bl	8008316 <__retarget_lock_acquire_recursive>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	071b      	lsls	r3, r3, #28
 8007b74:	d502      	bpl.n	8007b7c <_vfiprintf_r+0x40>
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d11d      	bne.n	8007bb8 <_vfiprintf_r+0x7c>
 8007b7c:	0021      	movs	r1, r4
 8007b7e:	0030      	movs	r0, r6
 8007b80:	f000 f97a 	bl	8007e78 <__swsetup_r>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d017      	beq.n	8007bb8 <_vfiprintf_r+0x7c>
 8007b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b8a:	07db      	lsls	r3, r3, #31
 8007b8c:	d50d      	bpl.n	8007baa <_vfiprintf_r+0x6e>
 8007b8e:	2001      	movs	r0, #1
 8007b90:	4240      	negs	r0, r0
 8007b92:	b021      	add	sp, #132	; 0x84
 8007b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b96:	4b7f      	ldr	r3, [pc, #508]	; (8007d94 <_vfiprintf_r+0x258>)
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	d101      	bne.n	8007ba0 <_vfiprintf_r+0x64>
 8007b9c:	68b4      	ldr	r4, [r6, #8]
 8007b9e:	e7de      	b.n	8007b5e <_vfiprintf_r+0x22>
 8007ba0:	4b7d      	ldr	r3, [pc, #500]	; (8007d98 <_vfiprintf_r+0x25c>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	d1db      	bne.n	8007b5e <_vfiprintf_r+0x22>
 8007ba6:	68f4      	ldr	r4, [r6, #12]
 8007ba8:	e7d9      	b.n	8007b5e <_vfiprintf_r+0x22>
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	059b      	lsls	r3, r3, #22
 8007bae:	d4ee      	bmi.n	8007b8e <_vfiprintf_r+0x52>
 8007bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bb2:	f000 fbb1 	bl	8008318 <__retarget_lock_release_recursive>
 8007bb6:	e7ea      	b.n	8007b8e <_vfiprintf_r+0x52>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	ad08      	add	r5, sp, #32
 8007bbc:	616b      	str	r3, [r5, #20]
 8007bbe:	3320      	adds	r3, #32
 8007bc0:	766b      	strb	r3, [r5, #25]
 8007bc2:	3310      	adds	r3, #16
 8007bc4:	76ab      	strb	r3, [r5, #26]
 8007bc6:	9707      	str	r7, [sp, #28]
 8007bc8:	9f03      	ldr	r7, [sp, #12]
 8007bca:	783b      	ldrb	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <_vfiprintf_r+0x98>
 8007bd0:	2b25      	cmp	r3, #37	; 0x25
 8007bd2:	d14e      	bne.n	8007c72 <_vfiprintf_r+0x136>
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	1afb      	subs	r3, r7, r3
 8007bd8:	9305      	str	r3, [sp, #20]
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	429f      	cmp	r7, r3
 8007bde:	d00d      	beq.n	8007bfc <_vfiprintf_r+0xc0>
 8007be0:	9b05      	ldr	r3, [sp, #20]
 8007be2:	0021      	movs	r1, r4
 8007be4:	0030      	movs	r0, r6
 8007be6:	9a03      	ldr	r2, [sp, #12]
 8007be8:	f7ff ff96 	bl	8007b18 <__sfputs_r>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d100      	bne.n	8007bf2 <_vfiprintf_r+0xb6>
 8007bf0:	e0b5      	b.n	8007d5e <_vfiprintf_r+0x222>
 8007bf2:	696a      	ldr	r2, [r5, #20]
 8007bf4:	9b05      	ldr	r3, [sp, #20]
 8007bf6:	4694      	mov	ip, r2
 8007bf8:	4463      	add	r3, ip
 8007bfa:	616b      	str	r3, [r5, #20]
 8007bfc:	783b      	ldrb	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d100      	bne.n	8007c04 <_vfiprintf_r+0xc8>
 8007c02:	e0ac      	b.n	8007d5e <_vfiprintf_r+0x222>
 8007c04:	2201      	movs	r2, #1
 8007c06:	1c7b      	adds	r3, r7, #1
 8007c08:	9303      	str	r3, [sp, #12]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4252      	negs	r2, r2
 8007c0e:	606a      	str	r2, [r5, #4]
 8007c10:	a904      	add	r1, sp, #16
 8007c12:	3254      	adds	r2, #84	; 0x54
 8007c14:	1852      	adds	r2, r2, r1
 8007c16:	602b      	str	r3, [r5, #0]
 8007c18:	60eb      	str	r3, [r5, #12]
 8007c1a:	60ab      	str	r3, [r5, #8]
 8007c1c:	7013      	strb	r3, [r2, #0]
 8007c1e:	65ab      	str	r3, [r5, #88]	; 0x58
 8007c20:	9b03      	ldr	r3, [sp, #12]
 8007c22:	2205      	movs	r2, #5
 8007c24:	7819      	ldrb	r1, [r3, #0]
 8007c26:	485d      	ldr	r0, [pc, #372]	; (8007d9c <_vfiprintf_r+0x260>)
 8007c28:	f7ff f89c 	bl	8006d64 <memchr>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	1c5f      	adds	r7, r3, #1
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d120      	bne.n	8007c76 <_vfiprintf_r+0x13a>
 8007c34:	682a      	ldr	r2, [r5, #0]
 8007c36:	06d3      	lsls	r3, r2, #27
 8007c38:	d504      	bpl.n	8007c44 <_vfiprintf_r+0x108>
 8007c3a:	2353      	movs	r3, #83	; 0x53
 8007c3c:	a904      	add	r1, sp, #16
 8007c3e:	185b      	adds	r3, r3, r1
 8007c40:	2120      	movs	r1, #32
 8007c42:	7019      	strb	r1, [r3, #0]
 8007c44:	0713      	lsls	r3, r2, #28
 8007c46:	d504      	bpl.n	8007c52 <_vfiprintf_r+0x116>
 8007c48:	2353      	movs	r3, #83	; 0x53
 8007c4a:	a904      	add	r1, sp, #16
 8007c4c:	185b      	adds	r3, r3, r1
 8007c4e:	212b      	movs	r1, #43	; 0x2b
 8007c50:	7019      	strb	r1, [r3, #0]
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b2a      	cmp	r3, #42	; 0x2a
 8007c58:	d016      	beq.n	8007c88 <_vfiprintf_r+0x14c>
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	68eb      	ldr	r3, [r5, #12]
 8007c5e:	9f03      	ldr	r7, [sp, #12]
 8007c60:	783a      	ldrb	r2, [r7, #0]
 8007c62:	1c78      	adds	r0, r7, #1
 8007c64:	3a30      	subs	r2, #48	; 0x30
 8007c66:	4684      	mov	ip, r0
 8007c68:	2a09      	cmp	r2, #9
 8007c6a:	d94f      	bls.n	8007d0c <_vfiprintf_r+0x1d0>
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	d111      	bne.n	8007c94 <_vfiprintf_r+0x158>
 8007c70:	e017      	b.n	8007ca2 <_vfiprintf_r+0x166>
 8007c72:	3701      	adds	r7, #1
 8007c74:	e7a9      	b.n	8007bca <_vfiprintf_r+0x8e>
 8007c76:	4b49      	ldr	r3, [pc, #292]	; (8007d9c <_vfiprintf_r+0x260>)
 8007c78:	682a      	ldr	r2, [r5, #0]
 8007c7a:	1ac0      	subs	r0, r0, r3
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	4083      	lsls	r3, r0
 8007c80:	4313      	orrs	r3, r2
 8007c82:	602b      	str	r3, [r5, #0]
 8007c84:	9703      	str	r7, [sp, #12]
 8007c86:	e7cb      	b.n	8007c20 <_vfiprintf_r+0xe4>
 8007c88:	9b07      	ldr	r3, [sp, #28]
 8007c8a:	1d19      	adds	r1, r3, #4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	9107      	str	r1, [sp, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	db01      	blt.n	8007c98 <_vfiprintf_r+0x15c>
 8007c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c96:	e004      	b.n	8007ca2 <_vfiprintf_r+0x166>
 8007c98:	425b      	negs	r3, r3
 8007c9a:	60eb      	str	r3, [r5, #12]
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	602b      	str	r3, [r5, #0]
 8007ca2:	783b      	ldrb	r3, [r7, #0]
 8007ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ca6:	d10a      	bne.n	8007cbe <_vfiprintf_r+0x182>
 8007ca8:	787b      	ldrb	r3, [r7, #1]
 8007caa:	2b2a      	cmp	r3, #42	; 0x2a
 8007cac:	d137      	bne.n	8007d1e <_vfiprintf_r+0x1e2>
 8007cae:	9b07      	ldr	r3, [sp, #28]
 8007cb0:	3702      	adds	r7, #2
 8007cb2:	1d1a      	adds	r2, r3, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	9207      	str	r2, [sp, #28]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	db2d      	blt.n	8007d18 <_vfiprintf_r+0x1dc>
 8007cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	7839      	ldrb	r1, [r7, #0]
 8007cc2:	4837      	ldr	r0, [pc, #220]	; (8007da0 <_vfiprintf_r+0x264>)
 8007cc4:	f7ff f84e 	bl	8006d64 <memchr>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d007      	beq.n	8007cdc <_vfiprintf_r+0x1a0>
 8007ccc:	4b34      	ldr	r3, [pc, #208]	; (8007da0 <_vfiprintf_r+0x264>)
 8007cce:	682a      	ldr	r2, [r5, #0]
 8007cd0:	1ac0      	subs	r0, r0, r3
 8007cd2:	2340      	movs	r3, #64	; 0x40
 8007cd4:	4083      	lsls	r3, r0
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	3701      	adds	r7, #1
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	7839      	ldrb	r1, [r7, #0]
 8007cde:	1c7b      	adds	r3, r7, #1
 8007ce0:	2206      	movs	r2, #6
 8007ce2:	4830      	ldr	r0, [pc, #192]	; (8007da4 <_vfiprintf_r+0x268>)
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	7629      	strb	r1, [r5, #24]
 8007ce8:	f7ff f83c 	bl	8006d64 <memchr>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d045      	beq.n	8007d7c <_vfiprintf_r+0x240>
 8007cf0:	4b2d      	ldr	r3, [pc, #180]	; (8007da8 <_vfiprintf_r+0x26c>)
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d127      	bne.n	8007d46 <_vfiprintf_r+0x20a>
 8007cf6:	2207      	movs	r2, #7
 8007cf8:	9b07      	ldr	r3, [sp, #28]
 8007cfa:	3307      	adds	r3, #7
 8007cfc:	4393      	bics	r3, r2
 8007cfe:	3308      	adds	r3, #8
 8007d00:	9307      	str	r3, [sp, #28]
 8007d02:	696b      	ldr	r3, [r5, #20]
 8007d04:	9a04      	ldr	r2, [sp, #16]
 8007d06:	189b      	adds	r3, r3, r2
 8007d08:	616b      	str	r3, [r5, #20]
 8007d0a:	e75d      	b.n	8007bc8 <_vfiprintf_r+0x8c>
 8007d0c:	210a      	movs	r1, #10
 8007d0e:	434b      	muls	r3, r1
 8007d10:	4667      	mov	r7, ip
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	3909      	subs	r1, #9
 8007d16:	e7a3      	b.n	8007c60 <_vfiprintf_r+0x124>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	425b      	negs	r3, r3
 8007d1c:	e7ce      	b.n	8007cbc <_vfiprintf_r+0x180>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	001a      	movs	r2, r3
 8007d22:	3701      	adds	r7, #1
 8007d24:	606b      	str	r3, [r5, #4]
 8007d26:	7839      	ldrb	r1, [r7, #0]
 8007d28:	1c78      	adds	r0, r7, #1
 8007d2a:	3930      	subs	r1, #48	; 0x30
 8007d2c:	4684      	mov	ip, r0
 8007d2e:	2909      	cmp	r1, #9
 8007d30:	d903      	bls.n	8007d3a <_vfiprintf_r+0x1fe>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0c3      	beq.n	8007cbe <_vfiprintf_r+0x182>
 8007d36:	9209      	str	r2, [sp, #36]	; 0x24
 8007d38:	e7c1      	b.n	8007cbe <_vfiprintf_r+0x182>
 8007d3a:	230a      	movs	r3, #10
 8007d3c:	435a      	muls	r2, r3
 8007d3e:	4667      	mov	r7, ip
 8007d40:	1852      	adds	r2, r2, r1
 8007d42:	3b09      	subs	r3, #9
 8007d44:	e7ef      	b.n	8007d26 <_vfiprintf_r+0x1ea>
 8007d46:	ab07      	add	r3, sp, #28
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	0022      	movs	r2, r4
 8007d4c:	0029      	movs	r1, r5
 8007d4e:	0030      	movs	r0, r6
 8007d50:	4b16      	ldr	r3, [pc, #88]	; (8007dac <_vfiprintf_r+0x270>)
 8007d52:	f7fd fd2b 	bl	80057ac <_printf_float>
 8007d56:	9004      	str	r0, [sp, #16]
 8007d58:	9b04      	ldr	r3, [sp, #16]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	d1d1      	bne.n	8007d02 <_vfiprintf_r+0x1c6>
 8007d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d60:	07db      	lsls	r3, r3, #31
 8007d62:	d405      	bmi.n	8007d70 <_vfiprintf_r+0x234>
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	059b      	lsls	r3, r3, #22
 8007d68:	d402      	bmi.n	8007d70 <_vfiprintf_r+0x234>
 8007d6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d6c:	f000 fad4 	bl	8008318 <__retarget_lock_release_recursive>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	065b      	lsls	r3, r3, #25
 8007d74:	d500      	bpl.n	8007d78 <_vfiprintf_r+0x23c>
 8007d76:	e70a      	b.n	8007b8e <_vfiprintf_r+0x52>
 8007d78:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d7a:	e70a      	b.n	8007b92 <_vfiprintf_r+0x56>
 8007d7c:	ab07      	add	r3, sp, #28
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	0022      	movs	r2, r4
 8007d82:	0029      	movs	r1, r5
 8007d84:	0030      	movs	r0, r6
 8007d86:	4b09      	ldr	r3, [pc, #36]	; (8007dac <_vfiprintf_r+0x270>)
 8007d88:	f7fd ffc2 	bl	8005d10 <_printf_i>
 8007d8c:	e7e3      	b.n	8007d56 <_vfiprintf_r+0x21a>
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	080090ec 	.word	0x080090ec
 8007d94:	0800910c 	.word	0x0800910c
 8007d98:	080090cc 	.word	0x080090cc
 8007d9c:	08008f74 	.word	0x08008f74
 8007da0:	08008f7a 	.word	0x08008f7a
 8007da4:	08008f7e 	.word	0x08008f7e
 8007da8:	080057ad 	.word	0x080057ad
 8007dac:	08007b19 	.word	0x08007b19

08007db0 <__swbuf_r>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	0005      	movs	r5, r0
 8007db4:	000e      	movs	r6, r1
 8007db6:	0014      	movs	r4, r2
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d004      	beq.n	8007dc6 <__swbuf_r+0x16>
 8007dbc:	6983      	ldr	r3, [r0, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <__swbuf_r+0x16>
 8007dc2:	f000 fa07 	bl	80081d4 <__sinit>
 8007dc6:	4b22      	ldr	r3, [pc, #136]	; (8007e50 <__swbuf_r+0xa0>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	d12e      	bne.n	8007e2a <__swbuf_r+0x7a>
 8007dcc:	686c      	ldr	r4, [r5, #4]
 8007dce:	69a3      	ldr	r3, [r4, #24]
 8007dd0:	60a3      	str	r3, [r4, #8]
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	071b      	lsls	r3, r3, #28
 8007dd6:	d532      	bpl.n	8007e3e <__swbuf_r+0x8e>
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d02f      	beq.n	8007e3e <__swbuf_r+0x8e>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	6922      	ldr	r2, [r4, #16]
 8007de2:	b2f7      	uxtb	r7, r6
 8007de4:	1a98      	subs	r0, r3, r2
 8007de6:	6963      	ldr	r3, [r4, #20]
 8007de8:	b2f6      	uxtb	r6, r6
 8007dea:	4283      	cmp	r3, r0
 8007dec:	dc05      	bgt.n	8007dfa <__swbuf_r+0x4a>
 8007dee:	0021      	movs	r1, r4
 8007df0:	0028      	movs	r0, r5
 8007df2:	f000 f94d 	bl	8008090 <_fflush_r>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d127      	bne.n	8007e4a <__swbuf_r+0x9a>
 8007dfa:	68a3      	ldr	r3, [r4, #8]
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	60a3      	str	r3, [r4, #8]
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	6022      	str	r2, [r4, #0]
 8007e08:	701f      	strb	r7, [r3, #0]
 8007e0a:	6963      	ldr	r3, [r4, #20]
 8007e0c:	4283      	cmp	r3, r0
 8007e0e:	d004      	beq.n	8007e1a <__swbuf_r+0x6a>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	07db      	lsls	r3, r3, #31
 8007e14:	d507      	bpl.n	8007e26 <__swbuf_r+0x76>
 8007e16:	2e0a      	cmp	r6, #10
 8007e18:	d105      	bne.n	8007e26 <__swbuf_r+0x76>
 8007e1a:	0021      	movs	r1, r4
 8007e1c:	0028      	movs	r0, r5
 8007e1e:	f000 f937 	bl	8008090 <_fflush_r>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d111      	bne.n	8007e4a <__swbuf_r+0x9a>
 8007e26:	0030      	movs	r0, r6
 8007e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e2a:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <__swbuf_r+0xa4>)
 8007e2c:	429c      	cmp	r4, r3
 8007e2e:	d101      	bne.n	8007e34 <__swbuf_r+0x84>
 8007e30:	68ac      	ldr	r4, [r5, #8]
 8007e32:	e7cc      	b.n	8007dce <__swbuf_r+0x1e>
 8007e34:	4b08      	ldr	r3, [pc, #32]	; (8007e58 <__swbuf_r+0xa8>)
 8007e36:	429c      	cmp	r4, r3
 8007e38:	d1c9      	bne.n	8007dce <__swbuf_r+0x1e>
 8007e3a:	68ec      	ldr	r4, [r5, #12]
 8007e3c:	e7c7      	b.n	8007dce <__swbuf_r+0x1e>
 8007e3e:	0021      	movs	r1, r4
 8007e40:	0028      	movs	r0, r5
 8007e42:	f000 f819 	bl	8007e78 <__swsetup_r>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d0c9      	beq.n	8007dde <__swbuf_r+0x2e>
 8007e4a:	2601      	movs	r6, #1
 8007e4c:	4276      	negs	r6, r6
 8007e4e:	e7ea      	b.n	8007e26 <__swbuf_r+0x76>
 8007e50:	080090ec 	.word	0x080090ec
 8007e54:	0800910c 	.word	0x0800910c
 8007e58:	080090cc 	.word	0x080090cc

08007e5c <__ascii_wctomb>:
 8007e5c:	0003      	movs	r3, r0
 8007e5e:	1e08      	subs	r0, r1, #0
 8007e60:	d005      	beq.n	8007e6e <__ascii_wctomb+0x12>
 8007e62:	2aff      	cmp	r2, #255	; 0xff
 8007e64:	d904      	bls.n	8007e70 <__ascii_wctomb+0x14>
 8007e66:	228a      	movs	r2, #138	; 0x8a
 8007e68:	2001      	movs	r0, #1
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	4240      	negs	r0, r0
 8007e6e:	4770      	bx	lr
 8007e70:	2001      	movs	r0, #1
 8007e72:	700a      	strb	r2, [r1, #0]
 8007e74:	e7fb      	b.n	8007e6e <__ascii_wctomb+0x12>
	...

08007e78 <__swsetup_r>:
 8007e78:	4b37      	ldr	r3, [pc, #220]	; (8007f58 <__swsetup_r+0xe0>)
 8007e7a:	b570      	push	{r4, r5, r6, lr}
 8007e7c:	681d      	ldr	r5, [r3, #0]
 8007e7e:	0006      	movs	r6, r0
 8007e80:	000c      	movs	r4, r1
 8007e82:	2d00      	cmp	r5, #0
 8007e84:	d005      	beq.n	8007e92 <__swsetup_r+0x1a>
 8007e86:	69ab      	ldr	r3, [r5, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <__swsetup_r+0x1a>
 8007e8c:	0028      	movs	r0, r5
 8007e8e:	f000 f9a1 	bl	80081d4 <__sinit>
 8007e92:	4b32      	ldr	r3, [pc, #200]	; (8007f5c <__swsetup_r+0xe4>)
 8007e94:	429c      	cmp	r4, r3
 8007e96:	d10f      	bne.n	8007eb8 <__swsetup_r+0x40>
 8007e98:	686c      	ldr	r4, [r5, #4]
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	5ee2      	ldrsh	r2, [r4, r3]
 8007e9e:	b293      	uxth	r3, r2
 8007ea0:	0711      	lsls	r1, r2, #28
 8007ea2:	d42d      	bmi.n	8007f00 <__swsetup_r+0x88>
 8007ea4:	06d9      	lsls	r1, r3, #27
 8007ea6:	d411      	bmi.n	8007ecc <__swsetup_r+0x54>
 8007ea8:	2309      	movs	r3, #9
 8007eaa:	2001      	movs	r0, #1
 8007eac:	6033      	str	r3, [r6, #0]
 8007eae:	3337      	adds	r3, #55	; 0x37
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	4240      	negs	r0, r0
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
 8007eb8:	4b29      	ldr	r3, [pc, #164]	; (8007f60 <__swsetup_r+0xe8>)
 8007eba:	429c      	cmp	r4, r3
 8007ebc:	d101      	bne.n	8007ec2 <__swsetup_r+0x4a>
 8007ebe:	68ac      	ldr	r4, [r5, #8]
 8007ec0:	e7eb      	b.n	8007e9a <__swsetup_r+0x22>
 8007ec2:	4b28      	ldr	r3, [pc, #160]	; (8007f64 <__swsetup_r+0xec>)
 8007ec4:	429c      	cmp	r4, r3
 8007ec6:	d1e8      	bne.n	8007e9a <__swsetup_r+0x22>
 8007ec8:	68ec      	ldr	r4, [r5, #12]
 8007eca:	e7e6      	b.n	8007e9a <__swsetup_r+0x22>
 8007ecc:	075b      	lsls	r3, r3, #29
 8007ece:	d513      	bpl.n	8007ef8 <__swsetup_r+0x80>
 8007ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	d008      	beq.n	8007ee8 <__swsetup_r+0x70>
 8007ed6:	0023      	movs	r3, r4
 8007ed8:	3344      	adds	r3, #68	; 0x44
 8007eda:	4299      	cmp	r1, r3
 8007edc:	d002      	beq.n	8007ee4 <__swsetup_r+0x6c>
 8007ede:	0030      	movs	r0, r6
 8007ee0:	f7ff fb1c 	bl	800751c <_free_r>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	6363      	str	r3, [r4, #52]	; 0x34
 8007ee8:	2224      	movs	r2, #36	; 0x24
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	4393      	bics	r3, r2
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	6063      	str	r3, [r4, #4]
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	2308      	movs	r3, #8
 8007efa:	89a2      	ldrh	r2, [r4, #12]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	81a3      	strh	r3, [r4, #12]
 8007f00:	6923      	ldr	r3, [r4, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10b      	bne.n	8007f1e <__swsetup_r+0xa6>
 8007f06:	21a0      	movs	r1, #160	; 0xa0
 8007f08:	2280      	movs	r2, #128	; 0x80
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	0089      	lsls	r1, r1, #2
 8007f0e:	0092      	lsls	r2, r2, #2
 8007f10:	400b      	ands	r3, r1
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d003      	beq.n	8007f1e <__swsetup_r+0xa6>
 8007f16:	0021      	movs	r1, r4
 8007f18:	0030      	movs	r0, r6
 8007f1a:	f000 fa27 	bl	800836c <__smakebuf_r>
 8007f1e:	220c      	movs	r2, #12
 8007f20:	5ea3      	ldrsh	r3, [r4, r2]
 8007f22:	2001      	movs	r0, #1
 8007f24:	001a      	movs	r2, r3
 8007f26:	b299      	uxth	r1, r3
 8007f28:	4002      	ands	r2, r0
 8007f2a:	4203      	tst	r3, r0
 8007f2c:	d00f      	beq.n	8007f4e <__swsetup_r+0xd6>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	60a2      	str	r2, [r4, #8]
 8007f32:	6962      	ldr	r2, [r4, #20]
 8007f34:	4252      	negs	r2, r2
 8007f36:	61a2      	str	r2, [r4, #24]
 8007f38:	2000      	movs	r0, #0
 8007f3a:	6922      	ldr	r2, [r4, #16]
 8007f3c:	4282      	cmp	r2, r0
 8007f3e:	d1ba      	bne.n	8007eb6 <__swsetup_r+0x3e>
 8007f40:	060a      	lsls	r2, r1, #24
 8007f42:	d5b8      	bpl.n	8007eb6 <__swsetup_r+0x3e>
 8007f44:	2240      	movs	r2, #64	; 0x40
 8007f46:	4313      	orrs	r3, r2
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	3801      	subs	r0, #1
 8007f4c:	e7b3      	b.n	8007eb6 <__swsetup_r+0x3e>
 8007f4e:	0788      	lsls	r0, r1, #30
 8007f50:	d400      	bmi.n	8007f54 <__swsetup_r+0xdc>
 8007f52:	6962      	ldr	r2, [r4, #20]
 8007f54:	60a2      	str	r2, [r4, #8]
 8007f56:	e7ef      	b.n	8007f38 <__swsetup_r+0xc0>
 8007f58:	2000001c 	.word	0x2000001c
 8007f5c:	080090ec 	.word	0x080090ec
 8007f60:	0800910c 	.word	0x0800910c
 8007f64:	080090cc 	.word	0x080090cc

08007f68 <abort>:
 8007f68:	2006      	movs	r0, #6
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	f000 fa74 	bl	8008458 <raise>
 8007f70:	2001      	movs	r0, #1
 8007f72:	f7fa fbbd 	bl	80026f0 <_exit>
	...

08007f78 <__sflush_r>:
 8007f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f7a:	898b      	ldrh	r3, [r1, #12]
 8007f7c:	0005      	movs	r5, r0
 8007f7e:	000c      	movs	r4, r1
 8007f80:	071a      	lsls	r2, r3, #28
 8007f82:	d45f      	bmi.n	8008044 <__sflush_r+0xcc>
 8007f84:	684a      	ldr	r2, [r1, #4]
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	dc04      	bgt.n	8007f94 <__sflush_r+0x1c>
 8007f8a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	dc01      	bgt.n	8007f94 <__sflush_r+0x1c>
 8007f90:	2000      	movs	r0, #0
 8007f92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007f96:	2f00      	cmp	r7, #0
 8007f98:	d0fa      	beq.n	8007f90 <__sflush_r+0x18>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2180      	movs	r1, #128	; 0x80
 8007f9e:	682e      	ldr	r6, [r5, #0]
 8007fa0:	602a      	str	r2, [r5, #0]
 8007fa2:	001a      	movs	r2, r3
 8007fa4:	0149      	lsls	r1, r1, #5
 8007fa6:	400a      	ands	r2, r1
 8007fa8:	420b      	tst	r3, r1
 8007faa:	d034      	beq.n	8008016 <__sflush_r+0x9e>
 8007fac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	075b      	lsls	r3, r3, #29
 8007fb2:	d506      	bpl.n	8007fc2 <__sflush_r+0x4a>
 8007fb4:	6863      	ldr	r3, [r4, #4]
 8007fb6:	1ac0      	subs	r0, r0, r3
 8007fb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <__sflush_r+0x4a>
 8007fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fc0:	1ac0      	subs	r0, r0, r3
 8007fc2:	0002      	movs	r2, r0
 8007fc4:	6a21      	ldr	r1, [r4, #32]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	0028      	movs	r0, r5
 8007fca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007fcc:	47b8      	blx	r7
 8007fce:	89a1      	ldrh	r1, [r4, #12]
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d106      	bne.n	8007fe2 <__sflush_r+0x6a>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	2b1d      	cmp	r3, #29
 8007fd8:	d831      	bhi.n	800803e <__sflush_r+0xc6>
 8007fda:	4a2c      	ldr	r2, [pc, #176]	; (800808c <__sflush_r+0x114>)
 8007fdc:	40da      	lsrs	r2, r3
 8007fde:	07d3      	lsls	r3, r2, #31
 8007fe0:	d52d      	bpl.n	800803e <__sflush_r+0xc6>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6063      	str	r3, [r4, #4]
 8007fe6:	6923      	ldr	r3, [r4, #16]
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	04cb      	lsls	r3, r1, #19
 8007fec:	d505      	bpl.n	8007ffa <__sflush_r+0x82>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	d102      	bne.n	8007ff8 <__sflush_r+0x80>
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d100      	bne.n	8007ffa <__sflush_r+0x82>
 8007ff8:	6560      	str	r0, [r4, #84]	; 0x54
 8007ffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ffc:	602e      	str	r6, [r5, #0]
 8007ffe:	2900      	cmp	r1, #0
 8008000:	d0c6      	beq.n	8007f90 <__sflush_r+0x18>
 8008002:	0023      	movs	r3, r4
 8008004:	3344      	adds	r3, #68	; 0x44
 8008006:	4299      	cmp	r1, r3
 8008008:	d002      	beq.n	8008010 <__sflush_r+0x98>
 800800a:	0028      	movs	r0, r5
 800800c:	f7ff fa86 	bl	800751c <_free_r>
 8008010:	2000      	movs	r0, #0
 8008012:	6360      	str	r0, [r4, #52]	; 0x34
 8008014:	e7bd      	b.n	8007f92 <__sflush_r+0x1a>
 8008016:	2301      	movs	r3, #1
 8008018:	0028      	movs	r0, r5
 800801a:	6a21      	ldr	r1, [r4, #32]
 800801c:	47b8      	blx	r7
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	d1c5      	bne.n	8007fae <__sflush_r+0x36>
 8008022:	682b      	ldr	r3, [r5, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0c2      	beq.n	8007fae <__sflush_r+0x36>
 8008028:	2b1d      	cmp	r3, #29
 800802a:	d001      	beq.n	8008030 <__sflush_r+0xb8>
 800802c:	2b16      	cmp	r3, #22
 800802e:	d101      	bne.n	8008034 <__sflush_r+0xbc>
 8008030:	602e      	str	r6, [r5, #0]
 8008032:	e7ad      	b.n	8007f90 <__sflush_r+0x18>
 8008034:	2340      	movs	r3, #64	; 0x40
 8008036:	89a2      	ldrh	r2, [r4, #12]
 8008038:	4313      	orrs	r3, r2
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	e7a9      	b.n	8007f92 <__sflush_r+0x1a>
 800803e:	2340      	movs	r3, #64	; 0x40
 8008040:	430b      	orrs	r3, r1
 8008042:	e7fa      	b.n	800803a <__sflush_r+0xc2>
 8008044:	690f      	ldr	r7, [r1, #16]
 8008046:	2f00      	cmp	r7, #0
 8008048:	d0a2      	beq.n	8007f90 <__sflush_r+0x18>
 800804a:	680a      	ldr	r2, [r1, #0]
 800804c:	600f      	str	r7, [r1, #0]
 800804e:	1bd2      	subs	r2, r2, r7
 8008050:	9201      	str	r2, [sp, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	079b      	lsls	r3, r3, #30
 8008056:	d100      	bne.n	800805a <__sflush_r+0xe2>
 8008058:	694a      	ldr	r2, [r1, #20]
 800805a:	60a2      	str	r2, [r4, #8]
 800805c:	9b01      	ldr	r3, [sp, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	dc00      	bgt.n	8008064 <__sflush_r+0xec>
 8008062:	e795      	b.n	8007f90 <__sflush_r+0x18>
 8008064:	003a      	movs	r2, r7
 8008066:	0028      	movs	r0, r5
 8008068:	9b01      	ldr	r3, [sp, #4]
 800806a:	6a21      	ldr	r1, [r4, #32]
 800806c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800806e:	47b0      	blx	r6
 8008070:	2800      	cmp	r0, #0
 8008072:	dc06      	bgt.n	8008082 <__sflush_r+0x10a>
 8008074:	2340      	movs	r3, #64	; 0x40
 8008076:	2001      	movs	r0, #1
 8008078:	89a2      	ldrh	r2, [r4, #12]
 800807a:	4240      	negs	r0, r0
 800807c:	4313      	orrs	r3, r2
 800807e:	81a3      	strh	r3, [r4, #12]
 8008080:	e787      	b.n	8007f92 <__sflush_r+0x1a>
 8008082:	9b01      	ldr	r3, [sp, #4]
 8008084:	183f      	adds	r7, r7, r0
 8008086:	1a1b      	subs	r3, r3, r0
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	e7e7      	b.n	800805c <__sflush_r+0xe4>
 800808c:	20400001 	.word	0x20400001

08008090 <_fflush_r>:
 8008090:	690b      	ldr	r3, [r1, #16]
 8008092:	b570      	push	{r4, r5, r6, lr}
 8008094:	0005      	movs	r5, r0
 8008096:	000c      	movs	r4, r1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d102      	bne.n	80080a2 <_fflush_r+0x12>
 800809c:	2500      	movs	r5, #0
 800809e:	0028      	movs	r0, r5
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d004      	beq.n	80080b0 <_fflush_r+0x20>
 80080a6:	6983      	ldr	r3, [r0, #24]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <_fflush_r+0x20>
 80080ac:	f000 f892 	bl	80081d4 <__sinit>
 80080b0:	4b14      	ldr	r3, [pc, #80]	; (8008104 <_fflush_r+0x74>)
 80080b2:	429c      	cmp	r4, r3
 80080b4:	d11b      	bne.n	80080ee <_fflush_r+0x5e>
 80080b6:	686c      	ldr	r4, [r5, #4]
 80080b8:	220c      	movs	r2, #12
 80080ba:	5ea3      	ldrsh	r3, [r4, r2]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0ed      	beq.n	800809c <_fflush_r+0xc>
 80080c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080c2:	07d2      	lsls	r2, r2, #31
 80080c4:	d404      	bmi.n	80080d0 <_fflush_r+0x40>
 80080c6:	059b      	lsls	r3, r3, #22
 80080c8:	d402      	bmi.n	80080d0 <_fflush_r+0x40>
 80080ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080cc:	f000 f923 	bl	8008316 <__retarget_lock_acquire_recursive>
 80080d0:	0028      	movs	r0, r5
 80080d2:	0021      	movs	r1, r4
 80080d4:	f7ff ff50 	bl	8007f78 <__sflush_r>
 80080d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080da:	0005      	movs	r5, r0
 80080dc:	07db      	lsls	r3, r3, #31
 80080de:	d4de      	bmi.n	800809e <_fflush_r+0xe>
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	059b      	lsls	r3, r3, #22
 80080e4:	d4db      	bmi.n	800809e <_fflush_r+0xe>
 80080e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080e8:	f000 f916 	bl	8008318 <__retarget_lock_release_recursive>
 80080ec:	e7d7      	b.n	800809e <_fflush_r+0xe>
 80080ee:	4b06      	ldr	r3, [pc, #24]	; (8008108 <_fflush_r+0x78>)
 80080f0:	429c      	cmp	r4, r3
 80080f2:	d101      	bne.n	80080f8 <_fflush_r+0x68>
 80080f4:	68ac      	ldr	r4, [r5, #8]
 80080f6:	e7df      	b.n	80080b8 <_fflush_r+0x28>
 80080f8:	4b04      	ldr	r3, [pc, #16]	; (800810c <_fflush_r+0x7c>)
 80080fa:	429c      	cmp	r4, r3
 80080fc:	d1dc      	bne.n	80080b8 <_fflush_r+0x28>
 80080fe:	68ec      	ldr	r4, [r5, #12]
 8008100:	e7da      	b.n	80080b8 <_fflush_r+0x28>
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	080090ec 	.word	0x080090ec
 8008108:	0800910c 	.word	0x0800910c
 800810c:	080090cc 	.word	0x080090cc

08008110 <std>:
 8008110:	2300      	movs	r3, #0
 8008112:	b510      	push	{r4, lr}
 8008114:	0004      	movs	r4, r0
 8008116:	6003      	str	r3, [r0, #0]
 8008118:	6043      	str	r3, [r0, #4]
 800811a:	6083      	str	r3, [r0, #8]
 800811c:	8181      	strh	r1, [r0, #12]
 800811e:	6643      	str	r3, [r0, #100]	; 0x64
 8008120:	0019      	movs	r1, r3
 8008122:	81c2      	strh	r2, [r0, #14]
 8008124:	6103      	str	r3, [r0, #16]
 8008126:	6143      	str	r3, [r0, #20]
 8008128:	6183      	str	r3, [r0, #24]
 800812a:	2208      	movs	r2, #8
 800812c:	305c      	adds	r0, #92	; 0x5c
 800812e:	f7fd fa8b 	bl	8005648 <memset>
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <std+0x38>)
 8008134:	6224      	str	r4, [r4, #32]
 8008136:	6263      	str	r3, [r4, #36]	; 0x24
 8008138:	4b04      	ldr	r3, [pc, #16]	; (800814c <std+0x3c>)
 800813a:	62a3      	str	r3, [r4, #40]	; 0x28
 800813c:	4b04      	ldr	r3, [pc, #16]	; (8008150 <std+0x40>)
 800813e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <std+0x44>)
 8008142:	6323      	str	r3, [r4, #48]	; 0x30
 8008144:	bd10      	pop	{r4, pc}
 8008146:	46c0      	nop			; (mov r8, r8)
 8008148:	08008499 	.word	0x08008499
 800814c:	080084c1 	.word	0x080084c1
 8008150:	080084f9 	.word	0x080084f9
 8008154:	08008525 	.word	0x08008525

08008158 <_cleanup_r>:
 8008158:	b510      	push	{r4, lr}
 800815a:	4902      	ldr	r1, [pc, #8]	; (8008164 <_cleanup_r+0xc>)
 800815c:	f000 f8ba 	bl	80082d4 <_fwalk_reent>
 8008160:	bd10      	pop	{r4, pc}
 8008162:	46c0      	nop			; (mov r8, r8)
 8008164:	08008091 	.word	0x08008091

08008168 <__sfmoreglue>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	2568      	movs	r5, #104	; 0x68
 800816c:	1e4a      	subs	r2, r1, #1
 800816e:	4355      	muls	r5, r2
 8008170:	000e      	movs	r6, r1
 8008172:	0029      	movs	r1, r5
 8008174:	3174      	adds	r1, #116	; 0x74
 8008176:	f7ff fa3d 	bl	80075f4 <_malloc_r>
 800817a:	1e04      	subs	r4, r0, #0
 800817c:	d008      	beq.n	8008190 <__sfmoreglue+0x28>
 800817e:	2100      	movs	r1, #0
 8008180:	002a      	movs	r2, r5
 8008182:	6001      	str	r1, [r0, #0]
 8008184:	6046      	str	r6, [r0, #4]
 8008186:	300c      	adds	r0, #12
 8008188:	60a0      	str	r0, [r4, #8]
 800818a:	3268      	adds	r2, #104	; 0x68
 800818c:	f7fd fa5c 	bl	8005648 <memset>
 8008190:	0020      	movs	r0, r4
 8008192:	bd70      	pop	{r4, r5, r6, pc}

08008194 <__sfp_lock_acquire>:
 8008194:	b510      	push	{r4, lr}
 8008196:	4802      	ldr	r0, [pc, #8]	; (80081a0 <__sfp_lock_acquire+0xc>)
 8008198:	f000 f8bd 	bl	8008316 <__retarget_lock_acquire_recursive>
 800819c:	bd10      	pop	{r4, pc}
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	20000c6d 	.word	0x20000c6d

080081a4 <__sfp_lock_release>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	4802      	ldr	r0, [pc, #8]	; (80081b0 <__sfp_lock_release+0xc>)
 80081a8:	f000 f8b6 	bl	8008318 <__retarget_lock_release_recursive>
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	46c0      	nop			; (mov r8, r8)
 80081b0:	20000c6d 	.word	0x20000c6d

080081b4 <__sinit_lock_acquire>:
 80081b4:	b510      	push	{r4, lr}
 80081b6:	4802      	ldr	r0, [pc, #8]	; (80081c0 <__sinit_lock_acquire+0xc>)
 80081b8:	f000 f8ad 	bl	8008316 <__retarget_lock_acquire_recursive>
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	46c0      	nop			; (mov r8, r8)
 80081c0:	20000c6e 	.word	0x20000c6e

080081c4 <__sinit_lock_release>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	4802      	ldr	r0, [pc, #8]	; (80081d0 <__sinit_lock_release+0xc>)
 80081c8:	f000 f8a6 	bl	8008318 <__retarget_lock_release_recursive>
 80081cc:	bd10      	pop	{r4, pc}
 80081ce:	46c0      	nop			; (mov r8, r8)
 80081d0:	20000c6e 	.word	0x20000c6e

080081d4 <__sinit>:
 80081d4:	b513      	push	{r0, r1, r4, lr}
 80081d6:	0004      	movs	r4, r0
 80081d8:	f7ff ffec 	bl	80081b4 <__sinit_lock_acquire>
 80081dc:	69a3      	ldr	r3, [r4, #24]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <__sinit+0x14>
 80081e2:	f7ff ffef 	bl	80081c4 <__sinit_lock_release>
 80081e6:	bd13      	pop	{r0, r1, r4, pc}
 80081e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80081ea:	64e3      	str	r3, [r4, #76]	; 0x4c
 80081ec:	6523      	str	r3, [r4, #80]	; 0x50
 80081ee:	4b13      	ldr	r3, [pc, #76]	; (800823c <__sinit+0x68>)
 80081f0:	4a13      	ldr	r2, [pc, #76]	; (8008240 <__sinit+0x6c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	42a3      	cmp	r3, r4
 80081fa:	d101      	bne.n	8008200 <__sinit+0x2c>
 80081fc:	2301      	movs	r3, #1
 80081fe:	61a3      	str	r3, [r4, #24]
 8008200:	0020      	movs	r0, r4
 8008202:	f000 f81f 	bl	8008244 <__sfp>
 8008206:	6060      	str	r0, [r4, #4]
 8008208:	0020      	movs	r0, r4
 800820a:	f000 f81b 	bl	8008244 <__sfp>
 800820e:	60a0      	str	r0, [r4, #8]
 8008210:	0020      	movs	r0, r4
 8008212:	f000 f817 	bl	8008244 <__sfp>
 8008216:	2200      	movs	r2, #0
 8008218:	2104      	movs	r1, #4
 800821a:	60e0      	str	r0, [r4, #12]
 800821c:	6860      	ldr	r0, [r4, #4]
 800821e:	f7ff ff77 	bl	8008110 <std>
 8008222:	2201      	movs	r2, #1
 8008224:	2109      	movs	r1, #9
 8008226:	68a0      	ldr	r0, [r4, #8]
 8008228:	f7ff ff72 	bl	8008110 <std>
 800822c:	2202      	movs	r2, #2
 800822e:	2112      	movs	r1, #18
 8008230:	68e0      	ldr	r0, [r4, #12]
 8008232:	f7ff ff6d 	bl	8008110 <std>
 8008236:	2301      	movs	r3, #1
 8008238:	61a3      	str	r3, [r4, #24]
 800823a:	e7d2      	b.n	80081e2 <__sinit+0xe>
 800823c:	08008d50 	.word	0x08008d50
 8008240:	08008159 	.word	0x08008159

08008244 <__sfp>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	0007      	movs	r7, r0
 8008248:	f7ff ffa4 	bl	8008194 <__sfp_lock_acquire>
 800824c:	4b1f      	ldr	r3, [pc, #124]	; (80082cc <__sfp+0x88>)
 800824e:	681e      	ldr	r6, [r3, #0]
 8008250:	69b3      	ldr	r3, [r6, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <__sfp+0x18>
 8008256:	0030      	movs	r0, r6
 8008258:	f7ff ffbc 	bl	80081d4 <__sinit>
 800825c:	3648      	adds	r6, #72	; 0x48
 800825e:	68b4      	ldr	r4, [r6, #8]
 8008260:	6873      	ldr	r3, [r6, #4]
 8008262:	3b01      	subs	r3, #1
 8008264:	d504      	bpl.n	8008270 <__sfp+0x2c>
 8008266:	6833      	ldr	r3, [r6, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d022      	beq.n	80082b2 <__sfp+0x6e>
 800826c:	6836      	ldr	r6, [r6, #0]
 800826e:	e7f6      	b.n	800825e <__sfp+0x1a>
 8008270:	220c      	movs	r2, #12
 8008272:	5ea5      	ldrsh	r5, [r4, r2]
 8008274:	2d00      	cmp	r5, #0
 8008276:	d11a      	bne.n	80082ae <__sfp+0x6a>
 8008278:	0020      	movs	r0, r4
 800827a:	4b15      	ldr	r3, [pc, #84]	; (80082d0 <__sfp+0x8c>)
 800827c:	3058      	adds	r0, #88	; 0x58
 800827e:	60e3      	str	r3, [r4, #12]
 8008280:	6665      	str	r5, [r4, #100]	; 0x64
 8008282:	f000 f847 	bl	8008314 <__retarget_lock_init_recursive>
 8008286:	f7ff ff8d 	bl	80081a4 <__sfp_lock_release>
 800828a:	0020      	movs	r0, r4
 800828c:	2208      	movs	r2, #8
 800828e:	0029      	movs	r1, r5
 8008290:	6025      	str	r5, [r4, #0]
 8008292:	60a5      	str	r5, [r4, #8]
 8008294:	6065      	str	r5, [r4, #4]
 8008296:	6125      	str	r5, [r4, #16]
 8008298:	6165      	str	r5, [r4, #20]
 800829a:	61a5      	str	r5, [r4, #24]
 800829c:	305c      	adds	r0, #92	; 0x5c
 800829e:	f7fd f9d3 	bl	8005648 <memset>
 80082a2:	6365      	str	r5, [r4, #52]	; 0x34
 80082a4:	63a5      	str	r5, [r4, #56]	; 0x38
 80082a6:	64a5      	str	r5, [r4, #72]	; 0x48
 80082a8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80082aa:	0020      	movs	r0, r4
 80082ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ae:	3468      	adds	r4, #104	; 0x68
 80082b0:	e7d7      	b.n	8008262 <__sfp+0x1e>
 80082b2:	2104      	movs	r1, #4
 80082b4:	0038      	movs	r0, r7
 80082b6:	f7ff ff57 	bl	8008168 <__sfmoreglue>
 80082ba:	1e04      	subs	r4, r0, #0
 80082bc:	6030      	str	r0, [r6, #0]
 80082be:	d1d5      	bne.n	800826c <__sfp+0x28>
 80082c0:	f7ff ff70 	bl	80081a4 <__sfp_lock_release>
 80082c4:	230c      	movs	r3, #12
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	e7ef      	b.n	80082aa <__sfp+0x66>
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	08008d50 	.word	0x08008d50
 80082d0:	ffff0001 	.word	0xffff0001

080082d4 <_fwalk_reent>:
 80082d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082d6:	0004      	movs	r4, r0
 80082d8:	0006      	movs	r6, r0
 80082da:	2700      	movs	r7, #0
 80082dc:	9101      	str	r1, [sp, #4]
 80082de:	3448      	adds	r4, #72	; 0x48
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	68a5      	ldr	r5, [r4, #8]
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	9b00      	ldr	r3, [sp, #0]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	d504      	bpl.n	80082f8 <_fwalk_reent+0x24>
 80082ee:	6824      	ldr	r4, [r4, #0]
 80082f0:	2c00      	cmp	r4, #0
 80082f2:	d1f5      	bne.n	80082e0 <_fwalk_reent+0xc>
 80082f4:	0038      	movs	r0, r7
 80082f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082f8:	89ab      	ldrh	r3, [r5, #12]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d908      	bls.n	8008310 <_fwalk_reent+0x3c>
 80082fe:	220e      	movs	r2, #14
 8008300:	5eab      	ldrsh	r3, [r5, r2]
 8008302:	3301      	adds	r3, #1
 8008304:	d004      	beq.n	8008310 <_fwalk_reent+0x3c>
 8008306:	0029      	movs	r1, r5
 8008308:	0030      	movs	r0, r6
 800830a:	9b01      	ldr	r3, [sp, #4]
 800830c:	4798      	blx	r3
 800830e:	4307      	orrs	r7, r0
 8008310:	3568      	adds	r5, #104	; 0x68
 8008312:	e7e8      	b.n	80082e6 <_fwalk_reent+0x12>

08008314 <__retarget_lock_init_recursive>:
 8008314:	4770      	bx	lr

08008316 <__retarget_lock_acquire_recursive>:
 8008316:	4770      	bx	lr

08008318 <__retarget_lock_release_recursive>:
 8008318:	4770      	bx	lr
	...

0800831c <__swhatbuf_r>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	000e      	movs	r6, r1
 8008320:	001d      	movs	r5, r3
 8008322:	230e      	movs	r3, #14
 8008324:	5ec9      	ldrsh	r1, [r1, r3]
 8008326:	0014      	movs	r4, r2
 8008328:	b096      	sub	sp, #88	; 0x58
 800832a:	2900      	cmp	r1, #0
 800832c:	da08      	bge.n	8008340 <__swhatbuf_r+0x24>
 800832e:	220c      	movs	r2, #12
 8008330:	5eb3      	ldrsh	r3, [r6, r2]
 8008332:	2200      	movs	r2, #0
 8008334:	602a      	str	r2, [r5, #0]
 8008336:	061b      	lsls	r3, r3, #24
 8008338:	d411      	bmi.n	800835e <__swhatbuf_r+0x42>
 800833a:	2380      	movs	r3, #128	; 0x80
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	e00f      	b.n	8008360 <__swhatbuf_r+0x44>
 8008340:	466a      	mov	r2, sp
 8008342:	f000 f91b 	bl	800857c <_fstat_r>
 8008346:	2800      	cmp	r0, #0
 8008348:	dbf1      	blt.n	800832e <__swhatbuf_r+0x12>
 800834a:	23f0      	movs	r3, #240	; 0xf0
 800834c:	9901      	ldr	r1, [sp, #4]
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	4019      	ands	r1, r3
 8008352:	4b05      	ldr	r3, [pc, #20]	; (8008368 <__swhatbuf_r+0x4c>)
 8008354:	18c9      	adds	r1, r1, r3
 8008356:	424b      	negs	r3, r1
 8008358:	4159      	adcs	r1, r3
 800835a:	6029      	str	r1, [r5, #0]
 800835c:	e7ed      	b.n	800833a <__swhatbuf_r+0x1e>
 800835e:	2340      	movs	r3, #64	; 0x40
 8008360:	2000      	movs	r0, #0
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	b016      	add	sp, #88	; 0x58
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	ffffe000 	.word	0xffffe000

0800836c <__smakebuf_r>:
 800836c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800836e:	2602      	movs	r6, #2
 8008370:	898b      	ldrh	r3, [r1, #12]
 8008372:	0005      	movs	r5, r0
 8008374:	000c      	movs	r4, r1
 8008376:	4233      	tst	r3, r6
 8008378:	d006      	beq.n	8008388 <__smakebuf_r+0x1c>
 800837a:	0023      	movs	r3, r4
 800837c:	3347      	adds	r3, #71	; 0x47
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	6123      	str	r3, [r4, #16]
 8008382:	2301      	movs	r3, #1
 8008384:	6163      	str	r3, [r4, #20]
 8008386:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008388:	466a      	mov	r2, sp
 800838a:	ab01      	add	r3, sp, #4
 800838c:	f7ff ffc6 	bl	800831c <__swhatbuf_r>
 8008390:	9900      	ldr	r1, [sp, #0]
 8008392:	0007      	movs	r7, r0
 8008394:	0028      	movs	r0, r5
 8008396:	f7ff f92d 	bl	80075f4 <_malloc_r>
 800839a:	2800      	cmp	r0, #0
 800839c:	d108      	bne.n	80083b0 <__smakebuf_r+0x44>
 800839e:	220c      	movs	r2, #12
 80083a0:	5ea3      	ldrsh	r3, [r4, r2]
 80083a2:	059a      	lsls	r2, r3, #22
 80083a4:	d4ef      	bmi.n	8008386 <__smakebuf_r+0x1a>
 80083a6:	2203      	movs	r2, #3
 80083a8:	4393      	bics	r3, r2
 80083aa:	431e      	orrs	r6, r3
 80083ac:	81a6      	strh	r6, [r4, #12]
 80083ae:	e7e4      	b.n	800837a <__smakebuf_r+0xe>
 80083b0:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <__smakebuf_r+0x84>)
 80083b2:	62ab      	str	r3, [r5, #40]	; 0x28
 80083b4:	2380      	movs	r3, #128	; 0x80
 80083b6:	89a2      	ldrh	r2, [r4, #12]
 80083b8:	6020      	str	r0, [r4, #0]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	81a3      	strh	r3, [r4, #12]
 80083be:	9b00      	ldr	r3, [sp, #0]
 80083c0:	6120      	str	r0, [r4, #16]
 80083c2:	6163      	str	r3, [r4, #20]
 80083c4:	9b01      	ldr	r3, [sp, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00d      	beq.n	80083e6 <__smakebuf_r+0x7a>
 80083ca:	0028      	movs	r0, r5
 80083cc:	230e      	movs	r3, #14
 80083ce:	5ee1      	ldrsh	r1, [r4, r3]
 80083d0:	f000 f8e6 	bl	80085a0 <_isatty_r>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d006      	beq.n	80083e6 <__smakebuf_r+0x7a>
 80083d8:	2203      	movs	r2, #3
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	4393      	bics	r3, r2
 80083de:	001a      	movs	r2, r3
 80083e0:	2301      	movs	r3, #1
 80083e2:	4313      	orrs	r3, r2
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	89a0      	ldrh	r0, [r4, #12]
 80083e8:	4307      	orrs	r7, r0
 80083ea:	81a7      	strh	r7, [r4, #12]
 80083ec:	e7cb      	b.n	8008386 <__smakebuf_r+0x1a>
 80083ee:	46c0      	nop			; (mov r8, r8)
 80083f0:	08008159 	.word	0x08008159

080083f4 <_malloc_usable_size_r>:
 80083f4:	1f0b      	subs	r3, r1, #4
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	1f18      	subs	r0, r3, #4
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	da01      	bge.n	8008402 <_malloc_usable_size_r+0xe>
 80083fe:	580b      	ldr	r3, [r1, r0]
 8008400:	18c0      	adds	r0, r0, r3
 8008402:	4770      	bx	lr

08008404 <_raise_r>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	0004      	movs	r4, r0
 8008408:	000d      	movs	r5, r1
 800840a:	291f      	cmp	r1, #31
 800840c:	d904      	bls.n	8008418 <_raise_r+0x14>
 800840e:	2316      	movs	r3, #22
 8008410:	6003      	str	r3, [r0, #0]
 8008412:	2001      	movs	r0, #1
 8008414:	4240      	negs	r0, r0
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <_raise_r+0x24>
 800841e:	008a      	lsls	r2, r1, #2
 8008420:	189b      	adds	r3, r3, r2
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	2a00      	cmp	r2, #0
 8008426:	d108      	bne.n	800843a <_raise_r+0x36>
 8008428:	0020      	movs	r0, r4
 800842a:	f000 f831 	bl	8008490 <_getpid_r>
 800842e:	002a      	movs	r2, r5
 8008430:	0001      	movs	r1, r0
 8008432:	0020      	movs	r0, r4
 8008434:	f000 f81a 	bl	800846c <_kill_r>
 8008438:	e7ed      	b.n	8008416 <_raise_r+0x12>
 800843a:	2000      	movs	r0, #0
 800843c:	2a01      	cmp	r2, #1
 800843e:	d0ea      	beq.n	8008416 <_raise_r+0x12>
 8008440:	1c51      	adds	r1, r2, #1
 8008442:	d103      	bne.n	800844c <_raise_r+0x48>
 8008444:	2316      	movs	r3, #22
 8008446:	3001      	adds	r0, #1
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	e7e4      	b.n	8008416 <_raise_r+0x12>
 800844c:	2400      	movs	r4, #0
 800844e:	0028      	movs	r0, r5
 8008450:	601c      	str	r4, [r3, #0]
 8008452:	4790      	blx	r2
 8008454:	0020      	movs	r0, r4
 8008456:	e7de      	b.n	8008416 <_raise_r+0x12>

08008458 <raise>:
 8008458:	b510      	push	{r4, lr}
 800845a:	4b03      	ldr	r3, [pc, #12]	; (8008468 <raise+0x10>)
 800845c:	0001      	movs	r1, r0
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	f7ff ffd0 	bl	8008404 <_raise_r>
 8008464:	bd10      	pop	{r4, pc}
 8008466:	46c0      	nop			; (mov r8, r8)
 8008468:	2000001c 	.word	0x2000001c

0800846c <_kill_r>:
 800846c:	2300      	movs	r3, #0
 800846e:	b570      	push	{r4, r5, r6, lr}
 8008470:	4d06      	ldr	r5, [pc, #24]	; (800848c <_kill_r+0x20>)
 8008472:	0004      	movs	r4, r0
 8008474:	0008      	movs	r0, r1
 8008476:	0011      	movs	r1, r2
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	f7fa f929 	bl	80026d0 <_kill>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	d103      	bne.n	800848a <_kill_r+0x1e>
 8008482:	682b      	ldr	r3, [r5, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d000      	beq.n	800848a <_kill_r+0x1e>
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	20000c68 	.word	0x20000c68

08008490 <_getpid_r>:
 8008490:	b510      	push	{r4, lr}
 8008492:	f7fa f917 	bl	80026c4 <_getpid>
 8008496:	bd10      	pop	{r4, pc}

08008498 <__sread>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	000c      	movs	r4, r1
 800849c:	250e      	movs	r5, #14
 800849e:	5f49      	ldrsh	r1, [r1, r5]
 80084a0:	f000 f8a4 	bl	80085ec <_read_r>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	db03      	blt.n	80084b0 <__sread+0x18>
 80084a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80084aa:	181b      	adds	r3, r3, r0
 80084ac:	6563      	str	r3, [r4, #84]	; 0x54
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	4a02      	ldr	r2, [pc, #8]	; (80084bc <__sread+0x24>)
 80084b4:	4013      	ands	r3, r2
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	e7f9      	b.n	80084ae <__sread+0x16>
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	ffffefff 	.word	0xffffefff

080084c0 <__swrite>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	001f      	movs	r7, r3
 80084c4:	898b      	ldrh	r3, [r1, #12]
 80084c6:	0005      	movs	r5, r0
 80084c8:	000c      	movs	r4, r1
 80084ca:	0016      	movs	r6, r2
 80084cc:	05db      	lsls	r3, r3, #23
 80084ce:	d505      	bpl.n	80084dc <__swrite+0x1c>
 80084d0:	230e      	movs	r3, #14
 80084d2:	5ec9      	ldrsh	r1, [r1, r3]
 80084d4:	2200      	movs	r2, #0
 80084d6:	2302      	movs	r3, #2
 80084d8:	f000 f874 	bl	80085c4 <_lseek_r>
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	4a05      	ldr	r2, [pc, #20]	; (80084f4 <__swrite+0x34>)
 80084e0:	0028      	movs	r0, r5
 80084e2:	4013      	ands	r3, r2
 80084e4:	81a3      	strh	r3, [r4, #12]
 80084e6:	0032      	movs	r2, r6
 80084e8:	230e      	movs	r3, #14
 80084ea:	5ee1      	ldrsh	r1, [r4, r3]
 80084ec:	003b      	movs	r3, r7
 80084ee:	f000 f81f 	bl	8008530 <_write_r>
 80084f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084f4:	ffffefff 	.word	0xffffefff

080084f8 <__sseek>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	000c      	movs	r4, r1
 80084fc:	250e      	movs	r5, #14
 80084fe:	5f49      	ldrsh	r1, [r1, r5]
 8008500:	f000 f860 	bl	80085c4 <_lseek_r>
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	1c42      	adds	r2, r0, #1
 8008508:	d103      	bne.n	8008512 <__sseek+0x1a>
 800850a:	4a05      	ldr	r2, [pc, #20]	; (8008520 <__sseek+0x28>)
 800850c:	4013      	ands	r3, r2
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	bd70      	pop	{r4, r5, r6, pc}
 8008512:	2280      	movs	r2, #128	; 0x80
 8008514:	0152      	lsls	r2, r2, #5
 8008516:	4313      	orrs	r3, r2
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	6560      	str	r0, [r4, #84]	; 0x54
 800851c:	e7f8      	b.n	8008510 <__sseek+0x18>
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	ffffefff 	.word	0xffffefff

08008524 <__sclose>:
 8008524:	b510      	push	{r4, lr}
 8008526:	230e      	movs	r3, #14
 8008528:	5ec9      	ldrsh	r1, [r1, r3]
 800852a:	f000 f815 	bl	8008558 <_close_r>
 800852e:	bd10      	pop	{r4, pc}

08008530 <_write_r>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	0004      	movs	r4, r0
 8008534:	0008      	movs	r0, r1
 8008536:	0011      	movs	r1, r2
 8008538:	001a      	movs	r2, r3
 800853a:	2300      	movs	r3, #0
 800853c:	4d05      	ldr	r5, [pc, #20]	; (8008554 <_write_r+0x24>)
 800853e:	602b      	str	r3, [r5, #0]
 8008540:	f7fa f8ff 	bl	8002742 <_write>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d103      	bne.n	8008550 <_write_r+0x20>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d000      	beq.n	8008550 <_write_r+0x20>
 800854e:	6023      	str	r3, [r4, #0]
 8008550:	bd70      	pop	{r4, r5, r6, pc}
 8008552:	46c0      	nop			; (mov r8, r8)
 8008554:	20000c68 	.word	0x20000c68

08008558 <_close_r>:
 8008558:	2300      	movs	r3, #0
 800855a:	b570      	push	{r4, r5, r6, lr}
 800855c:	4d06      	ldr	r5, [pc, #24]	; (8008578 <_close_r+0x20>)
 800855e:	0004      	movs	r4, r0
 8008560:	0008      	movs	r0, r1
 8008562:	602b      	str	r3, [r5, #0]
 8008564:	f7fa f909 	bl	800277a <_close>
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	d103      	bne.n	8008574 <_close_r+0x1c>
 800856c:	682b      	ldr	r3, [r5, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d000      	beq.n	8008574 <_close_r+0x1c>
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	bd70      	pop	{r4, r5, r6, pc}
 8008576:	46c0      	nop			; (mov r8, r8)
 8008578:	20000c68 	.word	0x20000c68

0800857c <_fstat_r>:
 800857c:	2300      	movs	r3, #0
 800857e:	b570      	push	{r4, r5, r6, lr}
 8008580:	4d06      	ldr	r5, [pc, #24]	; (800859c <_fstat_r+0x20>)
 8008582:	0004      	movs	r4, r0
 8008584:	0008      	movs	r0, r1
 8008586:	0011      	movs	r1, r2
 8008588:	602b      	str	r3, [r5, #0]
 800858a:	f7fa f900 	bl	800278e <_fstat>
 800858e:	1c43      	adds	r3, r0, #1
 8008590:	d103      	bne.n	800859a <_fstat_r+0x1e>
 8008592:	682b      	ldr	r3, [r5, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d000      	beq.n	800859a <_fstat_r+0x1e>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	20000c68 	.word	0x20000c68

080085a0 <_isatty_r>:
 80085a0:	2300      	movs	r3, #0
 80085a2:	b570      	push	{r4, r5, r6, lr}
 80085a4:	4d06      	ldr	r5, [pc, #24]	; (80085c0 <_isatty_r+0x20>)
 80085a6:	0004      	movs	r4, r0
 80085a8:	0008      	movs	r0, r1
 80085aa:	602b      	str	r3, [r5, #0]
 80085ac:	f7fa f8fd 	bl	80027aa <_isatty>
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	d103      	bne.n	80085bc <_isatty_r+0x1c>
 80085b4:	682b      	ldr	r3, [r5, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d000      	beq.n	80085bc <_isatty_r+0x1c>
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	46c0      	nop			; (mov r8, r8)
 80085c0:	20000c68 	.word	0x20000c68

080085c4 <_lseek_r>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	0004      	movs	r4, r0
 80085c8:	0008      	movs	r0, r1
 80085ca:	0011      	movs	r1, r2
 80085cc:	001a      	movs	r2, r3
 80085ce:	2300      	movs	r3, #0
 80085d0:	4d05      	ldr	r5, [pc, #20]	; (80085e8 <_lseek_r+0x24>)
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	f7fa f8f2 	bl	80027bc <_lseek>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d103      	bne.n	80085e4 <_lseek_r+0x20>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d000      	beq.n	80085e4 <_lseek_r+0x20>
 80085e2:	6023      	str	r3, [r4, #0]
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
 80085e6:	46c0      	nop			; (mov r8, r8)
 80085e8:	20000c68 	.word	0x20000c68

080085ec <_read_r>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	0004      	movs	r4, r0
 80085f0:	0008      	movs	r0, r1
 80085f2:	0011      	movs	r1, r2
 80085f4:	001a      	movs	r2, r3
 80085f6:	2300      	movs	r3, #0
 80085f8:	4d05      	ldr	r5, [pc, #20]	; (8008610 <_read_r+0x24>)
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	f7fa f884 	bl	8002708 <_read>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d103      	bne.n	800860c <_read_r+0x20>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d000      	beq.n	800860c <_read_r+0x20>
 800860a:	6023      	str	r3, [r4, #0]
 800860c:	bd70      	pop	{r4, r5, r6, pc}
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	20000c68 	.word	0x20000c68

08008614 <_init>:
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008616:	46c0      	nop			; (mov r8, r8)
 8008618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861a:	bc08      	pop	{r3}
 800861c:	469e      	mov	lr, r3
 800861e:	4770      	bx	lr

08008620 <_fini>:
 8008620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008622:	46c0      	nop			; (mov r8, r8)
 8008624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008626:	bc08      	pop	{r3}
 8008628:	469e      	mov	lr, r3
 800862a:	4770      	bx	lr
