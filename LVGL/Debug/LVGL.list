
LVGL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b784  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019dc  0800b928  0800b928  0001b928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d304  0800d304  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800d304  0800d304  0001d304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d30c  0800d30c  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d30c  0800d30c  0001d30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d310  0800d310  0001d310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800d314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002268  20000220  0800d534  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002488  0800d534  00022488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109e7  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002025  00000000  00000000  00030c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00032c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00033bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f53  00000000  00000000  00034ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b3a  00000000  00000000  0004caf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b770  00000000  00000000  0005d62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8d9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005504  00000000  00000000  000e8df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b90c 	.word	0x0800b90c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	0800b90c 	.word	0x0800b90c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f22:	f000 fb75 	bl	8001610 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f26:	f000 f86f 	bl	8001008 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f2a:	f000 f903 	bl	8001134 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f2e:	f000 f8d7 	bl	80010e0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	print("Working\r\n");
 8000f32:	482d      	ldr	r0, [pc, #180]	; (8000fe8 <main+0xcc>)
 8000f34:	f001 ff30 	bl	8002d98 <print>

  LCD_Begin();
 8000f38:	f007 f818 	bl	8007f6c <LCD_Begin>
//  LCD_SetRotation(1);
//  colorgradient(0, 0, TFTWIDTH, TFTHEIGHT, 50);
  LCD_FillScreen(BLACK);
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f007 f88b 	bl	8008058 <LCD_FillScreen>
//  int i = 0;

	lui_init(lameui_memory, sizeof(lameui_memory));
 8000f42:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000f46:	4829      	ldr	r0, [pc, #164]	; (8000fec <main+0xd0>)
 8000f48:	f001 ff4a 	bl	8002de0 <lui_init>

	//----------------------------------------------------------
	//[Mandatory] creating display driver object
	lui_dispdrv_t *my_display_driver = lui_dispdrv_create();
 8000f4c:	f005 fe60 	bl	8006c10 <lui_dispdrv_create>
 8000f50:	60f8      	str	r0, [r7, #12]
	lui_dispdrv_register(my_display_driver);
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f005 fe94 	bl	8006c80 <lui_dispdrv_register>
	lui_dispdrv_set_resolution(my_display_driver, TFTHEIGHT, TFTWIDTH);
 8000f58:	22f0      	movs	r2, #240	; 0xf0
 8000f5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f005 fea2 	bl	8006ca8 <lui_dispdrv_set_resolution>
	lui_dispdrv_set_disp_buff(my_display_driver, disp_buffer, DISP_BUFF_PX_CNT);
 8000f64:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000f68:	4921      	ldr	r1, [pc, #132]	; (8000ff0 <main+0xd4>)
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f005 fec6 	bl	8006cfc <lui_dispdrv_set_disp_buff>
	lui_dispdrv_set_draw_disp_buff_cb(my_display_driver, my_draw_disp_buff_cb);
 8000f70:	4920      	ldr	r1, [pc, #128]	; (8000ff4 <main+0xd8>)
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f005 feb0 	bl	8006cd8 <lui_dispdrv_set_draw_disp_buff_cb>

	lui_obj_t *scene_1 = lui_scene_create();
 8000f78:	f004 f920 	bl	80051bc <lui_scene_create>
 8000f7c:	60b8      	str	r0, [r7, #8]
	// [Mandatory] A scene must be set as active scene. Only the active scene
	// is rendered.
	lui_scene_set_active(scene_1);
 8000f7e:	68b8      	ldr	r0, [r7, #8]
 8000f80:	f004 f9e0 	bl	8005344 <lui_scene_set_active>

	// Create a label
	lui_obj_t *label_1 = lui_label_create();
 8000f84:	f002 f87e 	bl	8003084 <lui_label_create>
 8000f88:	6078      	str	r0, [r7, #4]
	// [Mandatory] An object must have a parent which is either a `scene` or a
	// descendent of `scene`.
	lui_object_add_to_parent(label_1, scene_1);
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f004 fa5f 	bl	8005450 <lui_object_add_to_parent>
	lui_object_set_position(label_1, 5, 50);
 8000f92:	2232      	movs	r2, #50	; 0x32
 8000f94:	2105      	movs	r1, #5
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f004 fae2 	bl	8005560 <lui_object_set_position>
	lui_label_set_text(label_1, "This is Label 1. Below is Button 1");
 8000f9c:	4916      	ldr	r1, [pc, #88]	; (8000ff8 <main+0xdc>)
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f002 f8d4 	bl	800314c <lui_label_set_text>

	// Create a button
	lui_obj_t *button_1 = lui_button_create();
 8000fa4:	f002 fd52 	bl	8003a4c <lui_button_create>
 8000fa8:	6038      	str	r0, [r7, #0]
	// [Mandatory] Add a parent
	lui_object_add_to_parent(button_1, scene_1);
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	6838      	ldr	r0, [r7, #0]
 8000fae:	f004 fa4f 	bl	8005450 <lui_object_add_to_parent>
	lui_object_set_area(button_1, 110, 40);
 8000fb2:	2228      	movs	r2, #40	; 0x28
 8000fb4:	216e      	movs	r1, #110	; 0x6e
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	f004 fc15 	bl	80057e6 <lui_object_set_area>
	lui_object_set_position(button_1, 65, 100);
 8000fbc:	2264      	movs	r2, #100	; 0x64
 8000fbe:	2141      	movs	r1, #65	; 0x41
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f004 facd 	bl	8005560 <lui_object_set_position>
	lui_button_set_label_text(button_1, "Button 1");
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <main+0xe0>)
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f002 fe1d 	bl	8003c08 <lui_button_set_label_text>
	lui_object_set_callback(button_1, button_1_cb);
 8000fce:	490c      	ldr	r1, [pc, #48]	; (8001000 <main+0xe4>)
 8000fd0:	6838      	ldr	r0, [r7, #0]
 8000fd2:	f004 fc54 	bl	800587e <lui_object_set_callback>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		print("Running\r\n");
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <main+0xe8>)
 8000fd8:	f001 fede 	bl	8002d98 <print>
//	  LCD_Printf("Count: %d", i++);
//	  Delay(1000);
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		lui_update();
 8000fdc:	f001 ff72 	bl	8002ec4 <lui_update>
		Delay(15);
 8000fe0:	200f      	movs	r0, #15
 8000fe2:	f000 fb87 	bl	80016f4 <HAL_Delay>
		print("Running\r\n");
 8000fe6:	e7f6      	b.n	8000fd6 <main+0xba>
 8000fe8:	0800b928 	.word	0x0800b928
 8000fec:	20001b80 	.word	0x20001b80
 8000ff0:	20000280 	.word	0x20000280
 8000ff4:	08001211 	.word	0x08001211
 8000ff8:	0800b934 	.word	0x0800b934
 8000ffc:	0800b958 	.word	0x0800b958
 8001000:	08001281 	.word	0x08001281
 8001004:	0800b964 	.word	0x0800b964

08001008 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2230      	movs	r2, #48	; 0x30
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f007 fbc6 	bl	80087a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <SystemClock_Config+0xd0>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <SystemClock_Config+0xd0>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <SystemClock_Config+0xd0>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <SystemClock_Config+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <SystemClock_Config+0xd4>)
 8001056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <SystemClock_Config+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2310      	movs	r3, #16
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001078:	2300      	movs	r3, #0
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800107c:	2310      	movs	r3, #16
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001080:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001084:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001086:	2304      	movs	r3, #4
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800108a:	2307      	movs	r3, #7
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fdd6 	bl	8001c44 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x9a>
		Error_Handler();
 800109e:	f000 f915 	bl	80012cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2302      	movs	r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2102      	movs	r1, #2
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 f838 	bl	8002134 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0xc6>
		Error_Handler();
 80010ca:	f000 f8ff 	bl	80012cc <Error_Handler>
	}
}
 80010ce:	bf00      	nop
 80010d0:	3750      	adds	r7, #80	; 0x50
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000

080010e0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <MX_USART2_UART_Init+0x50>)
 80010e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001118:	f001 fa2c 	bl	8002574 <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001122:	f000 f8d3 	bl	80012cc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000023c 	.word	0x2000023c
 8001130:	40004400 	.word	0x40004400

08001134 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a25      	ldr	r2, [pc, #148]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MX_GPIO_Init+0xd0>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2120      	movs	r1, #32
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0xd4>)
 80011c0:	f000 fd26 	bl	8001c10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0xd8>)
 80011dc:	f000 fb94 	bl	8001908 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80011e0:	2320      	movs	r3, #32
 80011e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_GPIO_Init+0xd4>)
 80011f8:	f000 fb86 	bl	8001908 <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020800 	.word	0x40020800

08001210 <my_draw_disp_buff_cb>:

/* USER CODE BEGIN 4 */
//----------- callback function definitions ------------
void my_draw_disp_buff_cb(uint16_t *disp_buff, lui_area_t *area) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	uint16_t x = area->x;	// start x
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	785b      	ldrb	r3, [r3, #1]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	4313      	orrs	r3, r2
 8001224:	81fb      	strh	r3, [r7, #14]
	uint16_t y = area->y;	// start y
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	789a      	ldrb	r2, [r3, #2]
 800122a:	78db      	ldrb	r3, [r3, #3]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	4313      	orrs	r3, r2
 8001230:	81bb      	strh	r3, [r7, #12]
	uint16_t w = area->w;	// width
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	791a      	ldrb	r2, [r3, #4]
 8001236:	795b      	ldrb	r3, [r3, #5]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	4313      	orrs	r3, r2
 800123c:	817b      	strh	r3, [r7, #10]
	uint16_t h = area->h;	// height
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	799a      	ldrb	r2, [r3, #6]
 8001242:	79db      	ldrb	r3, [r3, #7]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	4313      	orrs	r3, r2
 8001248:	813b      	strh	r3, [r7, #8]
//    display_draw_buffer(disp_buff, x, y, w, h);
	LCD_SetAddrWindow(x, y, w, h);
 800124a:	89f8      	ldrh	r0, [r7, #14]
 800124c:	89b9      	ldrh	r1, [r7, #12]
 800124e:	897a      	ldrh	r2, [r7, #10]
 8001250:	893b      	ldrh	r3, [r7, #8]
 8001252:	f007 f90b 	bl	800846c <LCD_SetAddrWindow>
	LCD_pushColors(disp_buff, (area->w * area->h), 1);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	b29b      	uxth	r3, r3
 800125c:	b2da      	uxtb	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	88db      	ldrh	r3, [r3, #6]
 8001262:	b29b      	uxth	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	fb12 f303 	smulbb	r3, r2, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f007 fa1b 	bl	80086ac <LCD_pushColors>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <button_1_cb>:

void button_1_cb(lui_obj_t *button_obj) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	// Get the event of callback
	int8_t event = lui_object_get_event(button_obj);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f004 fb0a 	bl	80058a2 <lui_object_get_event>
 800128e:	4603      	mov	r3, r0
 8001290:	73fb      	strb	r3, [r7, #15]
	if (event == -1)
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129a:	d00f      	beq.n	80012bc <button_1_cb+0x3c>
		return;

	if (event == LUI_EVENT_PRESSED) {
 800129c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d103      	bne.n	80012ac <button_1_cb+0x2c>
		// Button is pressed. Do something
		print("Button 1 is pressed\r\n");
 80012a4:	4807      	ldr	r0, [pc, #28]	; (80012c4 <button_1_cb+0x44>)
 80012a6:	f001 fd77 	bl	8002d98 <print>
 80012aa:	e008      	b.n	80012be <button_1_cb+0x3e>
	} else if (event == LUI_EVENT_RELEASED) {
 80012ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	d104      	bne.n	80012be <button_1_cb+0x3e>
		// Button is released. Do something
		print("Button 1 is released\r\n");
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <button_1_cb+0x48>)
 80012b6:	f001 fd6f 	bl	8002d98 <print>
 80012ba:	e000      	b.n	80012be <button_1_cb+0x3e>
		return;
 80012bc:	bf00      	nop
	}
}
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0800b970 	.word	0x0800b970
 80012c8:	0800b988 	.word	0x0800b988

080012cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012d4:	e7fe      	b.n	80012d4 <Error_Handler+0x8>
	...

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_MspInit+0x4c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_MspInit+0x4c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_MspInit+0x4c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_MspInit+0x4c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001316:	2007      	movs	r0, #7
 8001318:	f000 fac2 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_UART_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12b      	bne.n	80013a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001382:	230c      	movs	r3, #12
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001392:	2307      	movs	r3, #7
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_UART_MspInit+0x8c>)
 800139e:	f000 fab3 	bl	8001908 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f956 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	return 1;
 8001410:	2301      	movs	r3, #1
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_kill>:

int _kill(int pid, int sig)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001426:	f007 f987 	bl	8008738 <__errno>
 800142a:	4603      	mov	r3, r0
 800142c:	2216      	movs	r2, #22
 800142e:	601a      	str	r2, [r3, #0]
	return -1;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_exit>:

void _exit (int status)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ffe7 	bl	800141c <_kill>
	while (1) {}		/* Make sure we hang here */
 800144e:	e7fe      	b.n	800144e <_exit+0x12>

08001450 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e00a      	b.n	8001478 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001462:	f3af 8000 	nop.w
 8001466:	4601      	mov	r1, r0
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf0      	blt.n	8001462 <_read+0x12>
	}

return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e009      	b.n	80014b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf1      	blt.n	800149c <_write+0x12>
	}
	return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_close>:

int _close(int file)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
	return -1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ea:	605a      	str	r2, [r3, #4]
	return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_isatty>:

int _isatty(int file)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
	return 1;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
	return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f007 f8ec 	bl	8008738 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20018000 	.word	0x20018000
 800158c:	00000400 	.word	0x00000400
 8001590:	20002350 	.word	0x20002350
 8001594:	20002488 	.word	0x20002488

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d8:	4c0b      	ldr	r4, [pc, #44]	; (8001608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e6:	f7ff ffd7 	bl	8001598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f007 f8ab 	bl	8008744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7ff fc95 	bl	8000f1c <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001600:	0800d314 	.word	0x0800d314
  ldr r2, =_sbss
 8001604:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001608:	20002488 	.word	0x20002488

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_Init+0x40>)
 800161a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_Init+0x40>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x40>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f931 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	2000      	movs	r0, #0
 8001640:	f000 f808 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fe48 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f93b 	bl	80018ee <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f000 f911 	bl	80018b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000008 	.word	0x20000008
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20002354 	.word	0x20002354

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20002354 	.word	0x20002354

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff ffee 	bl	80016dc <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_Delay+0x44>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffde 	bl	80016dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f7ff ff8e 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff47 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c8:	f7ff ff5c 	bl	8001784 <__NVIC_GetPriorityGrouping>
 80018cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f7ff ff8e 	bl	80017f4 <NVIC_EncodePriority>
 80018d8:	4602      	mov	r2, r0
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff5d 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffb0 	bl	800185c <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e159      	b.n	8001bd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8148 	bne.w	8001bd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d005      	beq.n	800195a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001956:	2b02      	cmp	r3, #2
 8001958:	d130      	bne.n	80019bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001990:	2201      	movs	r2, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 0201 	and.w	r2, r3, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d017      	beq.n	80019f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d123      	bne.n	8001a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	69b9      	ldr	r1, [r7, #24]
 8001a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a2 	beq.w	8001bd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a56      	ldr	r2, [pc, #344]	; (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aaa:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_GPIO_Init+0x2ec>)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a49      	ldr	r2, [pc, #292]	; (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d019      	beq.n	8001b0a <HAL_GPIO_Init+0x202>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a48      	ldr	r2, [pc, #288]	; (8001bfc <HAL_GPIO_Init+0x2f4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <HAL_GPIO_Init+0x1fe>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a47      	ldr	r2, [pc, #284]	; (8001c00 <HAL_GPIO_Init+0x2f8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00d      	beq.n	8001b02 <HAL_GPIO_Init+0x1fa>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a46      	ldr	r2, [pc, #280]	; (8001c04 <HAL_GPIO_Init+0x2fc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x1f6>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a45      	ldr	r2, [pc, #276]	; (8001c08 <HAL_GPIO_Init+0x300>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_GPIO_Init+0x1f2>
 8001af6:	2304      	movs	r3, #4
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f002 0203 	and.w	r2, r2, #3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1c:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <HAL_GPIO_Init+0x2ec>)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4e:	4a2f      	ldr	r2, [pc, #188]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b78:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba2:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	f67f aea2 	bls.w	8001924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	619a      	str	r2, [r3, #24]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e267      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d075      	beq.n	8001d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c62:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d00c      	beq.n	8001c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6e:	4b85      	ldr	r3, [pc, #532]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d112      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7a:	4b82      	ldr	r3, [pc, #520]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c86:	d10b      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	4b7e      	ldr	r3, [pc, #504]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d05b      	beq.n	8001d4c <HAL_RCC_OscConfig+0x108>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d157      	bne.n	8001d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e242      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x74>
 8001caa:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a75      	ldr	r2, [pc, #468]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e01d      	b.n	8001cf4 <HAL_RCC_OscConfig+0xb0>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x98>
 8001cc2:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6f      	ldr	r2, [pc, #444]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6c      	ldr	r2, [pc, #432]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0xb0>
 8001cdc:	4b69      	ldr	r3, [pc, #420]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a68      	ldr	r2, [pc, #416]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a65      	ldr	r2, [pc, #404]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fcee 	bl	80016dc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fcea 	bl	80016dc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e207      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0xc0>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fcda 	bl	80016dc <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fcd6 	bl	80016dc <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1f3      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0xe8>
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d063      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5a:	4b4a      	ldr	r3, [pc, #296]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d66:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d11c      	bne.n	8001dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d72:	4b44      	ldr	r3, [pc, #272]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x152>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e1c7      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4937      	ldr	r1, [pc, #220]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	e03a      	b.n	8001e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_OscConfig+0x244>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff fc8f 	bl	80016dc <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fc8b 	bl	80016dc <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1a8      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4925      	ldr	r1, [pc, #148]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0x244>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fc6e 	bl	80016dc <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff fc6a 	bl	80016dc <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e187      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d036      	beq.n	8001e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d016      	beq.n	8001e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_RCC_OscConfig+0x248>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fc4e 	bl	80016dc <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fc4a 	bl	80016dc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e167      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_OscConfig+0x240>)
 8001e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x200>
 8001e62:	e01b      	b.n	8001e9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_OscConfig+0x248>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fc37 	bl	80016dc <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e70:	e00e      	b.n	8001e90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e72:	f7ff fc33 	bl	80016dc <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d907      	bls.n	8001e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e150      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
 8001e84:	40023800 	.word	0x40023800
 8001e88:	42470000 	.word	0x42470000
 8001e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b88      	ldr	r3, [pc, #544]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ea      	bne.n	8001e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8097 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eae:	4b81      	ldr	r3, [pc, #516]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10f      	bne.n	8001eda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b7d      	ldr	r3, [pc, #500]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a7c      	ldr	r2, [pc, #496]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b7a      	ldr	r3, [pc, #488]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b77      	ldr	r3, [pc, #476]	; (80020b8 <HAL_RCC_OscConfig+0x474>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	4b74      	ldr	r3, [pc, #464]	; (80020b8 <HAL_RCC_OscConfig+0x474>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a73      	ldr	r2, [pc, #460]	; (80020b8 <HAL_RCC_OscConfig+0x474>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fbf3 	bl	80016dc <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efa:	f7ff fbef 	bl	80016dc <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e10c      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_OscConfig+0x474>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x2ea>
 8001f20:	4b64      	ldr	r3, [pc, #400]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	4a63      	ldr	r2, [pc, #396]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2c:	e01c      	b.n	8001f68 <HAL_RCC_OscConfig+0x324>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x30c>
 8001f36:	4b5f      	ldr	r3, [pc, #380]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a5e      	ldr	r2, [pc, #376]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
 8001f42:	4b5c      	ldr	r3, [pc, #368]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4a5b      	ldr	r2, [pc, #364]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0x324>
 8001f50:	4b58      	ldr	r3, [pc, #352]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	4a57      	ldr	r2, [pc, #348]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5c:	4b55      	ldr	r3, [pc, #340]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f62:	f023 0304 	bic.w	r3, r3, #4
 8001f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d015      	beq.n	8001f9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff fbb4 	bl	80016dc <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7ff fbb0 	bl	80016dc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e0cb      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8e:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0ee      	beq.n	8001f78 <HAL_RCC_OscConfig+0x334>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fb9e 	bl	80016dc <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fb9a 	bl	80016dc <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e0b5      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fba:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1ee      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a38      	ldr	r2, [pc, #224]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80a1 	beq.w	8002124 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe2:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d05c      	beq.n	80020a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d141      	bne.n	800207a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCC_OscConfig+0x478>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fb6e 	bl	80016dc <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff fb6a 	bl	80016dc <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e087      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	019b      	lsls	r3, r3, #6
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	085b      	lsrs	r3, r3, #1
 800203a:	3b01      	subs	r3, #1
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	491b      	ldr	r1, [pc, #108]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_OscConfig+0x478>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff fb43 	bl	80016dc <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205a:	f7ff fb3f 	bl	80016dc <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e05c      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x416>
 8002078:	e054      	b.n	8002124 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_OscConfig+0x478>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fb2c 	bl	80016dc <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002088:	f7ff fb28 	bl	80016dc <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e045      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_OscConfig+0x470>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x444>
 80020a6:	e03d      	b.n	8002124 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e038      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40007000 	.word	0x40007000
 80020bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_RCC_OscConfig+0x4ec>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d028      	beq.n	8002120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d121      	bne.n	8002120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d11a      	bne.n	8002120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d111      	bne.n	8002120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	085b      	lsrs	r3, r3, #1
 8002108:	3b01      	subs	r3, #1
 800210a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d107      	bne.n	8002120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800

08002134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0cc      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b68      	ldr	r3, [pc, #416]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d90c      	bls.n	8002170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b63      	ldr	r3, [pc, #396]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b8      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002188:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	494d      	ldr	r1, [pc, #308]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d044      	beq.n	8002254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d119      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e06f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e067      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 0203 	bic.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4934      	ldr	r1, [pc, #208]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002224:	f7ff fa5a 	bl	80016dc <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	e00a      	b.n	8002242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7ff fa56 	bl	80016dc <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e04f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 020c 	and.w	r2, r3, #12
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	429a      	cmp	r2, r3
 8002252:	d1eb      	bne.n	800222c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d20c      	bcs.n	800227c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e032      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4916      	ldr	r1, [pc, #88]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 f821 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	490a      	ldr	r1, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	5ccb      	ldrb	r3, [r1, r3]
 80022ce:	fa22 f303 	lsr.w	r3, r2, r3
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff f9ba 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023c00 	.word	0x40023c00
 80022f0:	40023800 	.word	0x40023800
 80022f4:	0800bb5c 	.word	0x0800bb5c
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002304:	b094      	sub	sp, #80	; 0x50
 8002306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	647b      	str	r3, [r7, #68]	; 0x44
 800230c:	2300      	movs	r3, #0
 800230e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002310:	2300      	movs	r3, #0
 8002312:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002318:	4b79      	ldr	r3, [pc, #484]	; (8002500 <HAL_RCC_GetSysClockFreq+0x200>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b08      	cmp	r3, #8
 8002322:	d00d      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x40>
 8002324:	2b08      	cmp	r3, #8
 8002326:	f200 80e1 	bhi.w	80024ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x34>
 800232e:	2b04      	cmp	r3, #4
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x3a>
 8002332:	e0db      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4b73      	ldr	r3, [pc, #460]	; (8002504 <HAL_RCC_GetSysClockFreq+0x204>)
 8002336:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002338:	e0db      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233a:	4b73      	ldr	r3, [pc, #460]	; (8002508 <HAL_RCC_GetSysClockFreq+0x208>)
 800233c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800233e:	e0d8      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002340:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_GetSysClockFreq+0x200>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002348:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234a:	4b6d      	ldr	r3, [pc, #436]	; (8002500 <HAL_RCC_GetSysClockFreq+0x200>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d063      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCC_GetSysClockFreq+0x200>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	2200      	movs	r2, #0
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002360:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
 800236a:	2300      	movs	r3, #0
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
 800236e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002372:	4622      	mov	r2, r4
 8002374:	462b      	mov	r3, r5
 8002376:	f04f 0000 	mov.w	r0, #0
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	0159      	lsls	r1, r3, #5
 8002380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002384:	0150      	lsls	r0, r2, #5
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4621      	mov	r1, r4
 800238c:	1a51      	subs	r1, r2, r1
 800238e:	6139      	str	r1, [r7, #16]
 8002390:	4629      	mov	r1, r5
 8002392:	eb63 0301 	sbc.w	r3, r3, r1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023a4:	4659      	mov	r1, fp
 80023a6:	018b      	lsls	r3, r1, #6
 80023a8:	4651      	mov	r1, sl
 80023aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ae:	4651      	mov	r1, sl
 80023b0:	018a      	lsls	r2, r1, #6
 80023b2:	4651      	mov	r1, sl
 80023b4:	ebb2 0801 	subs.w	r8, r2, r1
 80023b8:	4659      	mov	r1, fp
 80023ba:	eb63 0901 	sbc.w	r9, r3, r1
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023d2:	4690      	mov	r8, r2
 80023d4:	4699      	mov	r9, r3
 80023d6:	4623      	mov	r3, r4
 80023d8:	eb18 0303 	adds.w	r3, r8, r3
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	462b      	mov	r3, r5
 80023e0:	eb49 0303 	adc.w	r3, r9, r3
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023f2:	4629      	mov	r1, r5
 80023f4:	024b      	lsls	r3, r1, #9
 80023f6:	4621      	mov	r1, r4
 80023f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023fc:	4621      	mov	r1, r4
 80023fe:	024a      	lsls	r2, r1, #9
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	2200      	movs	r2, #0
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
 800240a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800240c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002410:	f7fe fc02 	bl	8000c18 <__aeabi_uldivmod>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4613      	mov	r3, r2
 800241a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800241c:	e058      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_RCC_GetSysClockFreq+0x200>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	2200      	movs	r2, #0
 8002426:	4618      	mov	r0, r3
 8002428:	4611      	mov	r1, r2
 800242a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
 8002434:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002438:	4642      	mov	r2, r8
 800243a:	464b      	mov	r3, r9
 800243c:	f04f 0000 	mov.w	r0, #0
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	0159      	lsls	r1, r3, #5
 8002446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800244a:	0150      	lsls	r0, r2, #5
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4641      	mov	r1, r8
 8002452:	ebb2 0a01 	subs.w	sl, r2, r1
 8002456:	4649      	mov	r1, r9
 8002458:	eb63 0b01 	sbc.w	fp, r3, r1
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002468:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800246c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002470:	ebb2 040a 	subs.w	r4, r2, sl
 8002474:	eb63 050b 	sbc.w	r5, r3, fp
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	00eb      	lsls	r3, r5, #3
 8002482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002486:	00e2      	lsls	r2, r4, #3
 8002488:	4614      	mov	r4, r2
 800248a:	461d      	mov	r5, r3
 800248c:	4643      	mov	r3, r8
 800248e:	18e3      	adds	r3, r4, r3
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	464b      	mov	r3, r9
 8002494:	eb45 0303 	adc.w	r3, r5, r3
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024a6:	4629      	mov	r1, r5
 80024a8:	028b      	lsls	r3, r1, #10
 80024aa:	4621      	mov	r1, r4
 80024ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b0:	4621      	mov	r1, r4
 80024b2:	028a      	lsls	r2, r1, #10
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	2200      	movs	r2, #0
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	61fa      	str	r2, [r7, #28]
 80024c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c4:	f7fe fba8 	bl	8000c18 <__aeabi_uldivmod>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4613      	mov	r3, r2
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	3301      	adds	r3, #1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024ea:	e002      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3750      	adds	r7, #80	; 0x50
 80024f8:	46bd      	mov	sp, r7
 80024fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	00f42400 	.word	0x00f42400
 8002508:	007a1200 	.word	0x007a1200

0800250c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_RCC_GetHCLKFreq+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000

08002524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002528:	f7ff fff0 	bl	800250c <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0a9b      	lsrs	r3, r3, #10
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4903      	ldr	r1, [pc, #12]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	0800bb6c 	.word	0x0800bb6c

0800254c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002550:	f7ff ffdc 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	0b5b      	lsrs	r3, r3, #13
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4903      	ldr	r1, [pc, #12]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40023800 	.word	0x40023800
 8002570:	0800bb6c 	.word	0x0800bb6c

08002574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e03f      	b.n	8002606 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe fec4 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	; 0x24
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f829 	bl	8002610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002614:	b0c0      	sub	sp, #256	; 0x100
 8002616:	af00      	add	r7, sp, #0
 8002618:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262c:	68d9      	ldr	r1, [r3, #12]
 800262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	ea40 0301 	orr.w	r3, r0, r1
 8002638:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	431a      	orrs	r2, r3
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	431a      	orrs	r2, r3
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002668:	f021 010c 	bic.w	r1, r1, #12
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002676:	430b      	orrs	r3, r1
 8002678:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268a:	6999      	ldr	r1, [r3, #24]
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	ea40 0301 	orr.w	r3, r0, r1
 8002696:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4b8f      	ldr	r3, [pc, #572]	; (80028dc <UART_SetConfig+0x2cc>)
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d005      	beq.n	80026b0 <UART_SetConfig+0xa0>
 80026a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b8d      	ldr	r3, [pc, #564]	; (80028e0 <UART_SetConfig+0x2d0>)
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d104      	bne.n	80026ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026b0:	f7ff ff4c 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 80026b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026b8:	e003      	b.n	80026c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026ba:	f7ff ff33 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 80026be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026cc:	f040 810c 	bne.w	80028e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d4:	2200      	movs	r2, #0
 80026d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026e2:	4622      	mov	r2, r4
 80026e4:	462b      	mov	r3, r5
 80026e6:	1891      	adds	r1, r2, r2
 80026e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80026ea:	415b      	adcs	r3, r3
 80026ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026f2:	4621      	mov	r1, r4
 80026f4:	eb12 0801 	adds.w	r8, r2, r1
 80026f8:	4629      	mov	r1, r5
 80026fa:	eb43 0901 	adc.w	r9, r3, r1
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800270a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800270e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002712:	4690      	mov	r8, r2
 8002714:	4699      	mov	r9, r3
 8002716:	4623      	mov	r3, r4
 8002718:	eb18 0303 	adds.w	r3, r8, r3
 800271c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002720:	462b      	mov	r3, r5
 8002722:	eb49 0303 	adc.w	r3, r9, r3
 8002726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800272a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002736:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800273a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800273e:	460b      	mov	r3, r1
 8002740:	18db      	adds	r3, r3, r3
 8002742:	653b      	str	r3, [r7, #80]	; 0x50
 8002744:	4613      	mov	r3, r2
 8002746:	eb42 0303 	adc.w	r3, r2, r3
 800274a:	657b      	str	r3, [r7, #84]	; 0x54
 800274c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002750:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002754:	f7fe fa60 	bl	8000c18 <__aeabi_uldivmod>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4b61      	ldr	r3, [pc, #388]	; (80028e4 <UART_SetConfig+0x2d4>)
 800275e:	fba3 2302 	umull	r2, r3, r3, r2
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	011c      	lsls	r4, r3, #4
 8002766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800276a:	2200      	movs	r2, #0
 800276c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002770:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002774:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	1891      	adds	r1, r2, r2
 800277e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002780:	415b      	adcs	r3, r3
 8002782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002784:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002788:	4641      	mov	r1, r8
 800278a:	eb12 0a01 	adds.w	sl, r2, r1
 800278e:	4649      	mov	r1, r9
 8002790:	eb43 0b01 	adc.w	fp, r3, r1
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027a8:	4692      	mov	sl, r2
 80027aa:	469b      	mov	fp, r3
 80027ac:	4643      	mov	r3, r8
 80027ae:	eb1a 0303 	adds.w	r3, sl, r3
 80027b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027b6:	464b      	mov	r3, r9
 80027b8:	eb4b 0303 	adc.w	r3, fp, r3
 80027bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027d4:	460b      	mov	r3, r1
 80027d6:	18db      	adds	r3, r3, r3
 80027d8:	643b      	str	r3, [r7, #64]	; 0x40
 80027da:	4613      	mov	r3, r2
 80027dc:	eb42 0303 	adc.w	r3, r2, r3
 80027e0:	647b      	str	r3, [r7, #68]	; 0x44
 80027e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027ea:	f7fe fa15 	bl	8000c18 <__aeabi_uldivmod>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <UART_SetConfig+0x2d4>)
 80027f6:	fba3 2301 	umull	r2, r3, r3, r1
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	2264      	movs	r2, #100	; 0x64
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	1acb      	subs	r3, r1, r3
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <UART_SetConfig+0x2d4>)
 800280c:	fba3 2302 	umull	r2, r3, r3, r2
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002818:	441c      	add	r4, r3
 800281a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002824:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002828:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	1891      	adds	r1, r2, r2
 8002832:	63b9      	str	r1, [r7, #56]	; 0x38
 8002834:	415b      	adcs	r3, r3
 8002836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002838:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800283c:	4641      	mov	r1, r8
 800283e:	1851      	adds	r1, r2, r1
 8002840:	6339      	str	r1, [r7, #48]	; 0x30
 8002842:	4649      	mov	r1, r9
 8002844:	414b      	adcs	r3, r1
 8002846:	637b      	str	r3, [r7, #52]	; 0x34
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002854:	4659      	mov	r1, fp
 8002856:	00cb      	lsls	r3, r1, #3
 8002858:	4651      	mov	r1, sl
 800285a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800285e:	4651      	mov	r1, sl
 8002860:	00ca      	lsls	r2, r1, #3
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	4603      	mov	r3, r0
 8002868:	4642      	mov	r2, r8
 800286a:	189b      	adds	r3, r3, r2
 800286c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002870:	464b      	mov	r3, r9
 8002872:	460a      	mov	r2, r1
 8002874:	eb42 0303 	adc.w	r3, r2, r3
 8002878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002888:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800288c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002890:	460b      	mov	r3, r1
 8002892:	18db      	adds	r3, r3, r3
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
 8002896:	4613      	mov	r3, r2
 8002898:	eb42 0303 	adc.w	r3, r2, r3
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028a6:	f7fe f9b7 	bl	8000c18 <__aeabi_uldivmod>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <UART_SetConfig+0x2d4>)
 80028b0:	fba3 1302 	umull	r1, r3, r3, r2
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	2164      	movs	r1, #100	; 0x64
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	3332      	adds	r3, #50	; 0x32
 80028c2:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <UART_SetConfig+0x2d4>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	f003 0207 	and.w	r2, r3, #7
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4422      	add	r2, r4
 80028d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028d8:	e105      	b.n	8002ae6 <UART_SetConfig+0x4d6>
 80028da:	bf00      	nop
 80028dc:	40011000 	.word	0x40011000
 80028e0:	40011400 	.word	0x40011400
 80028e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ec:	2200      	movs	r2, #0
 80028ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028fa:	4642      	mov	r2, r8
 80028fc:	464b      	mov	r3, r9
 80028fe:	1891      	adds	r1, r2, r2
 8002900:	6239      	str	r1, [r7, #32]
 8002902:	415b      	adcs	r3, r3
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800290a:	4641      	mov	r1, r8
 800290c:	1854      	adds	r4, r2, r1
 800290e:	4649      	mov	r1, r9
 8002910:	eb43 0501 	adc.w	r5, r3, r1
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	00eb      	lsls	r3, r5, #3
 800291e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002922:	00e2      	lsls	r2, r4, #3
 8002924:	4614      	mov	r4, r2
 8002926:	461d      	mov	r5, r3
 8002928:	4643      	mov	r3, r8
 800292a:	18e3      	adds	r3, r4, r3
 800292c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002930:	464b      	mov	r3, r9
 8002932:	eb45 0303 	adc.w	r3, r5, r3
 8002936:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002946:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002956:	4629      	mov	r1, r5
 8002958:	008b      	lsls	r3, r1, #2
 800295a:	4621      	mov	r1, r4
 800295c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002960:	4621      	mov	r1, r4
 8002962:	008a      	lsls	r2, r1, #2
 8002964:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002968:	f7fe f956 	bl	8000c18 <__aeabi_uldivmod>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4b60      	ldr	r3, [pc, #384]	; (8002af4 <UART_SetConfig+0x4e4>)
 8002972:	fba3 2302 	umull	r2, r3, r3, r2
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	011c      	lsls	r4, r3, #4
 800297a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800297e:	2200      	movs	r2, #0
 8002980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002984:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002988:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800298c:	4642      	mov	r2, r8
 800298e:	464b      	mov	r3, r9
 8002990:	1891      	adds	r1, r2, r2
 8002992:	61b9      	str	r1, [r7, #24]
 8002994:	415b      	adcs	r3, r3
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800299c:	4641      	mov	r1, r8
 800299e:	1851      	adds	r1, r2, r1
 80029a0:	6139      	str	r1, [r7, #16]
 80029a2:	4649      	mov	r1, r9
 80029a4:	414b      	adcs	r3, r1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029b4:	4659      	mov	r1, fp
 80029b6:	00cb      	lsls	r3, r1, #3
 80029b8:	4651      	mov	r1, sl
 80029ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029be:	4651      	mov	r1, sl
 80029c0:	00ca      	lsls	r2, r1, #3
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	4642      	mov	r2, r8
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029d0:	464b      	mov	r3, r9
 80029d2:	460a      	mov	r2, r1
 80029d4:	eb42 0303 	adc.w	r3, r2, r3
 80029d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80029e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029f4:	4649      	mov	r1, r9
 80029f6:	008b      	lsls	r3, r1, #2
 80029f8:	4641      	mov	r1, r8
 80029fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029fe:	4641      	mov	r1, r8
 8002a00:	008a      	lsls	r2, r1, #2
 8002a02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a06:	f7fe f907 	bl	8000c18 <__aeabi_uldivmod>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <UART_SetConfig+0x4e4>)
 8002a10:	fba3 1302 	umull	r1, r3, r3, r2
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	2164      	movs	r1, #100	; 0x64
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	3332      	adds	r3, #50	; 0x32
 8002a22:	4a34      	ldr	r2, [pc, #208]	; (8002af4 <UART_SetConfig+0x4e4>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a2e:	441c      	add	r4, r3
 8002a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a34:	2200      	movs	r2, #0
 8002a36:	673b      	str	r3, [r7, #112]	; 0x70
 8002a38:	677a      	str	r2, [r7, #116]	; 0x74
 8002a3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a3e:	4642      	mov	r2, r8
 8002a40:	464b      	mov	r3, r9
 8002a42:	1891      	adds	r1, r2, r2
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	415b      	adcs	r3, r3
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a4e:	4641      	mov	r1, r8
 8002a50:	1851      	adds	r1, r2, r1
 8002a52:	6039      	str	r1, [r7, #0]
 8002a54:	4649      	mov	r1, r9
 8002a56:	414b      	adcs	r3, r1
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a66:	4659      	mov	r1, fp
 8002a68:	00cb      	lsls	r3, r1, #3
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a70:	4651      	mov	r1, sl
 8002a72:	00ca      	lsls	r2, r1, #3
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4642      	mov	r2, r8
 8002a7c:	189b      	adds	r3, r3, r2
 8002a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a80:	464b      	mov	r3, r9
 8002a82:	460a      	mov	r2, r1
 8002a84:	eb42 0303 	adc.w	r3, r2, r3
 8002a88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	663b      	str	r3, [r7, #96]	; 0x60
 8002a94:	667a      	str	r2, [r7, #100]	; 0x64
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	008b      	lsls	r3, r1, #2
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aac:	4641      	mov	r1, r8
 8002aae:	008a      	lsls	r2, r1, #2
 8002ab0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ab4:	f7fe f8b0 	bl	8000c18 <__aeabi_uldivmod>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <UART_SetConfig+0x4e4>)
 8002abe:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2164      	movs	r1, #100	; 0x64
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	3332      	adds	r3, #50	; 0x32
 8002ad0:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <UART_SetConfig+0x4e4>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	f003 020f 	and.w	r2, r3, #15
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4422      	add	r2, r4
 8002ae4:	609a      	str	r2, [r3, #8]
}
 8002ae6:	bf00      	nop
 8002ae8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002aec:	46bd      	mov	sp, r7
 8002aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002af2:	bf00      	nop
 8002af4:	51eb851f 	.word	0x51eb851f

08002af8 <gpio_clk_en>:
		uint16_t out_max) {
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
}

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <gpio_clk_en+0x78>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d106      	bne.n	8002b16 <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 8002b08:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <gpio_clk_en+0x7c>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <gpio_clk_en+0x7c>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 8002b14:	e026      	b.n	8002b64 <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <gpio_clk_en+0x80>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d106      	bne.n	8002b2c <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <gpio_clk_en+0x7c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <gpio_clk_en+0x7c>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002b2a:	e01b      	b.n	8002b64 <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <gpio_clk_en+0x84>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d106      	bne.n	8002b42 <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <gpio_clk_en+0x7c>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <gpio_clk_en+0x7c>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002b40:	e010      	b.n	8002b64 <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <gpio_clk_en+0x88>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d106      	bne.n	8002b58 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <gpio_clk_en+0x7c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <gpio_clk_en+0x7c>)
 8002b50:	f043 0308 	orr.w	r3, r3, #8
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002b56:	e005      	b.n	8002b64 <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <gpio_clk_en+0x7c>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <gpio_clk_en+0x7c>)
 8002b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40020000 	.word	0x40020000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00

08002b84 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d117      	bne.n	8002bc8 <gpio_config+0x44>
		gpio_clk_en(port);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7ff ffad 	bl	8002af8 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f846 	bl	8002c34 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f85b 	bl	8002c68 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f870 	bl	8002c9c <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f885 	bl	8002cd0 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 8002bc6:	e031      	b.n	8002c2c <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <gpio_config+0x66>
		gpio_clk_en(port);
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7ff ff92 	bl	8002af8 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f82b 	bl	8002c34 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f85a 	bl	8002c9c <gpio_PUPD>
}
 8002be8:	e020      	b.n	8002c2c <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d112      	bne.n	8002c16 <gpio_config+0x92>
		gpio_clk_en(port);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff ff81 	bl	8002af8 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f81a 	bl	8002c34 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f849 	bl	8002c9c <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f85e 	bl	8002cd0 <gpio_PHPL_OD>
}
 8002c14:	e00a      	b.n	8002c2c <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d107      	bne.n	8002c2c <gpio_config+0xa8>
		gpio_clk_en(port);
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff ff6b 	bl	8002af8 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f804 	bl	8002c34 <gpio_moder>
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4907      	ldr	r1, [pc, #28]	; (8002c64 <gpio_moder+0x30>)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	2000000c 	.word	0x2000000c

08002c68 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <gpio_speed+0x30>)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	2000000c 	.word	0x2000000c

08002c9c <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	4907      	ldr	r1, [pc, #28]	; (8002ccc <gpio_PUPD+0x30>)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	60da      	str	r2, [r3, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	2000000c 	.word	0x2000000c

08002cd0 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	605a      	str	r2, [r3, #4]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <gpio_write>:
}

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 8002cfa:	b480      	push	{r7}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	4613      	mov	r3, r2
 8002d06:	71fb      	strb	r3, [r7, #7]
	if (state) {
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <gpio_write+0x24>
		port->BSRR = (1 << pinNumber);
 8002d0e:	2201      	movs	r2, #1
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 8002d1c:	e007      	b.n	8002d2e <gpio_write+0x34>
		port->BSRR = (1 << (pinNumber + 16));
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3310      	adds	r3, #16
 8002d22:	2201      	movs	r2, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	619a      	str	r2, [r3, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <USART_WRITE>:
	}

}

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 8002d3a:	b480      	push	{r7}
 8002d3c:	b087      	sub	sp, #28
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	82bb      	strh	r3, [r7, #20]
	for (uint16_t i = 0; i < len; i++) {
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	82fb      	strh	r3, [r7, #22]
 8002d50:	e017      	b.n	8002d82 <USART_WRITE+0x48>
		if (len == 1) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d103      	bne.n	8002d60 <USART_WRITE+0x26>
			usart->DR = ch;
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	e006      	b.n	8002d6e <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 8002d60:	8afb      	ldrh	r3, [r7, #22]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 8002d6e:	bf00      	nop
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f9      	beq.n	8002d70 <USART_WRITE+0x36>
	for (uint16_t i = 0; i < len; i++) {
 8002d7c:	8afb      	ldrh	r3, [r7, #22]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	82fb      	strh	r3, [r7, #22]
 8002d82:	8afb      	ldrh	r3, [r7, #22]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d8e3      	bhi.n	8002d52 <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <print>:
//}


//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8002d98:	b40f      	push	{r0, r1, r2, r3}
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dae:	480a      	ldr	r0, [pc, #40]	; (8002dd8 <print+0x40>)
 8002db0:	f006 fb54 	bl	800945c <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8002db4:	4808      	ldr	r0, [pc, #32]	; (8002dd8 <print+0x40>)
 8002db6:	f7fd fa1d 	bl	80001f4 <strlen>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	2364      	movs	r3, #100	; 0x64
 8002dc2:	4905      	ldr	r1, [pc, #20]	; (8002dd8 <print+0x40>)
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <print+0x44>)
 8002dc6:	f7ff ffb8 	bl	8002d3a <USART_WRITE>

}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dd4:	b004      	add	sp, #16
 8002dd6:	4770      	bx	lr
 8002dd8:	20002358 	.word	0x20002358
 8002ddc:	40004400 	.word	0x40004400

08002de0 <lui_init>:
 * 				Main functions
 *-------------------------------------------------------------------------------
 */

int8_t lui_init(uint8_t mem_block[], uint16_t size)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
	_lui_mem_init(mem_block, size);
 8002dec:	887b      	ldrh	r3, [r7, #2]
 8002dee:	4619      	mov	r1, r3
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f004 ffcf 	bl	8007d94 <_lui_mem_init>
	g_lui_main = (_lui_main_t* )_lui_mem_alloc(sizeof(_lui_main_t));
 8002df6:	201d      	movs	r0, #29
 8002df8:	f004 ffe4 	bl	8007dc4 <_lui_mem_alloc>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <lui_init+0xdc>)
 8002e00:	6013      	str	r3, [r2, #0]
	if (g_lui_main == NULL)
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <lui_init+0xdc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <lui_init+0x30>
		return -1;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e050      	b.n	8002eb2 <lui_init+0xd2>

	// 	g_lui_main->scenes = {NULL};
	g_lui_main->default_font = &LUI_DEFAULT_FONT;
 8002e10:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <lui_init+0xdc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <lui_init+0xe0>)
 8002e16:	601a      	str	r2, [r3, #0]
	g_lui_main->disp_drv = NULL;
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <lui_init+0xdc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	731a      	strb	r2, [r3, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	735a      	strb	r2, [r3, #13]
 8002e24:	2200      	movs	r2, #0
 8002e26:	739a      	strb	r2, [r3, #14]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	73da      	strb	r2, [r3, #15]
	g_lui_main->touch_input_dev = NULL;
 8002e2c:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <lui_init+0xdc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2200      	movs	r2, #0
 8002e32:	741a      	strb	r2, [r3, #16]
 8002e34:	2200      	movs	r2, #0
 8002e36:	745a      	strb	r2, [r3, #17]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	749a      	strb	r2, [r3, #18]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	74da      	strb	r2, [r3, #19]
	g_lui_main->last_touch_data.x = -1;
 8002e40:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <lui_init+0xdc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f04f 32ff 	mov.w	r2, #4294967295
 8002e48:	755a      	strb	r2, [r3, #21]
 8002e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4e:	759a      	strb	r2, [r3, #22]
	g_lui_main->last_touch_data.y = -1;
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <lui_init+0xdc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	75da      	strb	r2, [r3, #23]
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	761a      	strb	r2, [r3, #24]
	g_lui_main->last_touch_data.is_pressed = 0;
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <lui_init+0xdc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2200      	movs	r2, #0
 8002e66:	751a      	strb	r2, [r3, #20]
	g_lui_main->input_event_clicked = 0;
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <lui_init+0xdc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	769a      	strb	r2, [r3, #26]
	g_lui_main->input_state_pressed = 0;
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <lui_init+0xdc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	765a      	strb	r2, [r3, #25]
	g_lui_main->total_scenes = 0;
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <lui_init+0xdc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	76da      	strb	r2, [r3, #27]
	g_lui_main->active_scene = NULL;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <lui_init+0xdc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2200      	movs	r2, #0
 8002e86:	711a      	strb	r2, [r3, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	715a      	strb	r2, [r3, #5]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	719a      	strb	r2, [r3, #6]
 8002e90:	2200      	movs	r2, #0
 8002e92:	71da      	strb	r2, [r3, #7]
	g_lui_main->active_obj = NULL;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <lui_init+0xdc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	721a      	strb	r2, [r3, #8]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	725a      	strb	r2, [r3, #9]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	729a      	strb	r2, [r3, #10]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	72da      	strb	r2, [r3, #11]
	g_lui_main->total_created_objects = 0;
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <lui_init+0xdc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]

	return 0;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20002464 	.word	0x20002464
 8002ec0:	0800ce14 	.word	0x0800ce14

08002ec4 <lui_update>:
	g_lui_main->default_font = font;
	return 0;
}

void lui_update()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
	if ( g_lui_main->active_scene == NULL)
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <lui_update+0x64>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d022      	beq.n	8002f1a <lui_update+0x56>
		return;

	// if no display driver is registered, return
	if (_lui_disp_drv_check() == 0)
 8002ed4:	f004 ff3e 	bl	8007d54 <_lui_disp_drv_check>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01f      	beq.n	8002f1e <lui_update+0x5a>
		return;


	lui_obj_t* obj_caused_cb = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
	// Reading input
	obj_caused_cb = _lui_process_input_of_act_scene();
 8002ee2:	f003 f83f 	bl	8005f64 <_lui_process_input_of_act_scene>
 8002ee6:	6078      	str	r0, [r7, #4]
	if (g_lui_needs_render)
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <lui_update+0x68>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <lui_update+0x38>
	{
		_lui_object_render_parent_with_children( g_lui_main->active_scene);
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <lui_update+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 fe18 	bl	8005b2c <_lui_object_render_parent_with_children>
	}

	//All rendering done, now we'll handle the callback
	// if the object that caused callback is not NULL and if the object has a callback func,
	if (obj_caused_cb != NULL && obj_caused_cb->obj_event_cb != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <lui_update+0x5c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <lui_update+0x5c>
	{
		// Call the user-supplied callback
		obj_caused_cb->obj_event_cb(obj_caused_cb);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	4798      	blx	r3
		//event callback handled, so reset it
		obj_caused_cb->event = LUI_EVENT_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	73da      	strb	r2, [r3, #15]
 8002f18:	e002      	b.n	8002f20 <lui_update+0x5c>
		return;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <lui_update+0x5c>
		return;
 8002f1e:	bf00      	nop
	}

}
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20002464 	.word	0x20002464
 8002f2c:	20002458 	.word	0x20002458

08002f30 <lui_label_draw>:
 * 				LUI_LABEL related functions
 *-------------------------------------------------------------------------------
 */

void lui_label_draw(lui_obj_t* obj)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b093      	sub	sp, #76	; 0x4c
 8002f34:	af06      	add	r7, sp, #24
 8002f36:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_LABEL) < 0)
 8002f38:	2101      	movs	r1, #1
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f004 feee 	bl	8007d1c <_lui_verify_obj>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f2c0 8095 	blt.w	8003072 <lui_label_draw+0x142>
		return;

	if (!(obj->visible))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	7e5b      	ldrb	r3, [r3, #25]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8092 	beq.w	8003076 <lui_label_draw+0x146>
		return;

	lui_label_t* lbl = (lui_label_t* )(obj->obj_main_data);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8002f58:	623b      	str	r3, [r7, #32]

	// if no display driver is registered, return
	if (_lui_disp_drv_check() == 0)
 8002f5a:	f004 fefb 	bl	8007d54 <_lui_disp_drv_check>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 808a 	beq.w	800307a <lui_label_draw+0x14a>
		return;

	lui_area_t lbl_area = {
		.x = obj->x,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
	lui_area_t lbl_area = {
 8002f6c:	82bb      	strh	r3, [r7, #20]
		.y = obj->y,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	885b      	ldrh	r3, [r3, #2]
 8002f72:	b29b      	uxth	r3, r3
	lui_area_t lbl_area = {
 8002f74:	82fb      	strh	r3, [r7, #22]
		.w = obj->common_style.width,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002f7c:	b29b      	uxth	r3, r3
	lui_area_t lbl_area = {
 8002f7e:	833b      	strh	r3, [r7, #24]
		.h = obj->common_style.height
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8002f86:	b29b      	uxth	r3, r3
	lui_area_t lbl_area = {
 8002f88:	837b      	strh	r3, [r7, #26]
	};
	uint16_t bg_color = obj->common_style.bg_color;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	795a      	ldrb	r2, [r3, #5]
 8002f8e:	799b      	ldrb	r3, [r3, #6]
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	4313      	orrs	r3, r2
 8002f94:	85fb      	strh	r3, [r7, #46]	; 0x2e
	const lui_bitmap_t* parent_bmp = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
	lui_bitmap_mono_pal_t* mono_palette = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
	lui_area_t bmp_crop;
	if (obj->parent && lbl->style.is_transparent_bg)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d031      	beq.n	800300a <lui_label_draw+0xda>
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	7a9b      	ldrb	r3, [r3, #10]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d02d      	beq.n	800300a <lui_label_draw+0xda>
	{
		bg_color = obj->parent->common_style.bg_color;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	795a      	ldrb	r2, [r3, #5]
 8002fb4:	799b      	ldrb	r3, [r3, #6]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	85fb      	strh	r3, [r7, #46]	; 0x2e
		/* NOTE: panel and scene both have same first items in the struct. So even if
		 * the parent is scene, we can use lui_panel_t for casting.
		 */
		lui_panel_t* panel = (lui_panel_t* )(obj->parent->obj_main_data);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8002fc4:	61fb      	str	r3, [r7, #28]
		if (panel->bg_image)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01d      	beq.n	800300a <lui_label_draw+0xda>
		{
			parent_bmp = panel->bg_image;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
			mono_palette = &panel->img_pal;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
			bmp_crop.x = obj->x - obj->parent->x;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	81bb      	strh	r3, [r7, #12]
			bmp_crop.y = obj->y - obj->parent->y;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	885b      	ldrh	r3, [r3, #2]
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	885b      	ldrh	r3, [r3, #2]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	81fb      	strh	r3, [r7, #14]
			bmp_crop.w = lbl_area.w;
 8003002:	8b3b      	ldrh	r3, [r7, #24]
 8003004:	823b      	strh	r3, [r7, #16]
			bmp_crop.h = lbl_area.h;
 8003006:	8b7b      	ldrh	r3, [r7, #26]
 8003008:	827b      	strh	r3, [r7, #18]
			// 	bmp_crop.y += panel->image_crop->y;
			// }
		}
	}
	lui_gfx_draw_string_advanced(
		lbl->text,
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	6818      	ldr	r0, [r3, #0]
	lui_gfx_draw_string_advanced(
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	891b      	ldrh	r3, [r3, #8]
 8003012:	b29a      	uxth	r2, r3
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 800301a:	f107 0114 	add.w	r1, r7, #20
 800301e:	9304      	str	r3, [sp, #16]
 8003020:	2301      	movs	r3, #1
 8003022:	9303      	str	r3, [sp, #12]
 8003024:	f107 030c 	add.w	r3, r7, #12
 8003028:	9302      	str	r3, [sp, #8]
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	4623      	mov	r3, r4
 8003034:	f003 fe82 	bl	8006d3c <lui_gfx_draw_string_advanced>
		&bmp_crop,
		1,
		lbl->font);

	// Draw the label border if needed
	if (obj->common_style.border_visible == 1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7b5b      	ldrb	r3, [r3, #13]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d11d      	bne.n	800307c <lui_label_draw+0x14c>
	{
		lui_gfx_draw_rect(obj->x, obj->y, obj->common_style.width, obj->common_style.height, 1, obj->common_style.border_color);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	b298      	uxth	r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	885b      	ldrh	r3, [r3, #2]
 800304a:	b299      	uxth	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8003052:	b29a      	uxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800305a:	b29c      	uxth	r4, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003062:	b29b      	uxth	r3, r3
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	2301      	movs	r3, #1
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4623      	mov	r3, r4
 800306c:	f004 f836 	bl	80070dc <lui_gfx_draw_rect>
 8003070:	e004      	b.n	800307c <lui_label_draw+0x14c>
		return;
 8003072:	bf00      	nop
 8003074:	e002      	b.n	800307c <lui_label_draw+0x14c>
		return;
 8003076:	bf00      	nop
 8003078:	e000      	b.n	800307c <lui_label_draw+0x14c>
		return;
 800307a:	bf00      	nop
	}

}
 800307c:	3734      	adds	r7, #52	; 0x34
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}
	...

08003084 <lui_label_create>:

lui_obj_t* lui_label_create(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
	// if total created objects become more than max allowed objects, don't create the object
	if ( g_lui_main->total_created_objects + 1 > LUI_MAX_OBJECTS)
 800308a:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <lui_label_create+0xc0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	7f1b      	ldrb	r3, [r3, #28]
 8003090:	2bc7      	cmp	r3, #199	; 0xc7
 8003092:	d901      	bls.n	8003098 <lui_label_create+0x14>
		return NULL;
 8003094:	2300      	movs	r3, #0
 8003096:	e051      	b.n	800313c <lui_label_create+0xb8>
	 g_lui_main->total_created_objects++;
 8003098:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <lui_label_create+0xc0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	7f1a      	ldrb	r2, [r3, #28]
 800309e:	3201      	adds	r2, #1
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	771a      	strb	r2, [r3, #28]

	lui_label_t* initial_label =  (lui_label_t* )_lui_mem_alloc(sizeof(*initial_label));
 80030a4:	200b      	movs	r0, #11
 80030a6:	f004 fe8d 	bl	8007dc4 <_lui_mem_alloc>
 80030aa:	6078      	str	r0, [r7, #4]
	if (initial_label == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <lui_label_create+0x32>
		return NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e042      	b.n	800313c <lui_label_create+0xb8>

	initial_label->text = "";
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a23      	ldr	r2, [pc, #140]	; (8003148 <lui_label_create+0xc4>)
 80030ba:	601a      	str	r2, [r3, #0]
	initial_label->font = g_lui_main->default_font;
 80030bc:	4b21      	ldr	r3, [pc, #132]	; (8003144 <lui_label_create+0xc0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	605a      	str	r2, [r3, #4]
	initial_label->style.text_color = LUI_STYLE_LABEL_TEXT_COLOR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 80030ce:	721a      	strb	r2, [r3, #8]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f062 0210 	orn	r2, r2, #16
 80030d6:	725a      	strb	r2, [r3, #9]
	initial_label->style.is_transparent_bg = 1;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	729a      	strb	r2, [r3, #10]

	lui_obj_t* obj = _lui_object_create();
 80030de:	f002 f94b 	bl	8005378 <_lui_object_create>
 80030e2:	6038      	str	r0, [r7, #0]
	if (obj == NULL)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <lui_label_create+0x6a>
		return NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e026      	b.n	800313c <lui_label_create+0xb8>
	// objeect type
	obj->obj_type = LUI_OBJ_LABEL;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2201      	movs	r2, #1
 80030f2:	76da      	strb	r2, [r3, #27]
	// object common style
	obj->common_style.bg_color = LUI_STYLE_LABEL_BG_COLOR;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f042 0205 	orr.w	r2, r2, #5
 80030fc:	715a      	strb	r2, [r3, #5]
 80030fe:	2200      	movs	r2, #0
 8003100:	f042 0211 	orr.w	r2, r2, #17
 8003104:	719a      	strb	r2, [r3, #6]
	obj->common_style.border_color = LUI_STYLE_LABEL_BORDER_COLOR;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2200      	movs	r2, #0
 800310a:	f042 0217 	orr.w	r2, r2, #23
 800310e:	71da      	strb	r2, [r3, #7]
 8003110:	2200      	movs	r2, #0
 8003112:	f042 024c 	orr.w	r2, r2, #76	; 0x4c
 8003116:	721a      	strb	r2, [r3, #8]
	obj->common_style.border_visible = LUI_STYLE_LABEL_BORDER_VISIBLE;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2200      	movs	r2, #0
 800311c:	735a      	strb	r2, [r3, #13]
	obj->common_style.width = LUI_STYLE_LABEL_WIDTH;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2200      	movs	r2, #0
 8003122:	725a      	strb	r2, [r3, #9]
 8003124:	2200      	movs	r2, #0
 8003126:	729a      	strb	r2, [r3, #10]
	obj->common_style.height = LUI_STYLE_LABEL_HEIGHT;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	72da      	strb	r2, [r3, #11]
 800312e:	2200      	movs	r2, #0
 8003130:	731a      	strb	r2, [r3, #12]

	obj->obj_main_data = (void* )initial_label;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	f8c3 2029 	str.w	r2, [r3, #41]	; 0x29

	return obj;
 800313a:	683b      	ldr	r3, [r7, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20002464 	.word	0x20002464
 8003148:	0800b9a0 	.word	0x0800b9a0

0800314c <lui_label_set_text>:
	lbl->font = font;
	_lui_object_set_need_refresh(obj->parent);
}

void lui_label_set_text(lui_obj_t* obj, const char* text)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
	if (_lui_verify_obj(obj, LUI_OBJ_LABEL) < 0)
 8003156:	2101      	movs	r1, #1
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f004 fddf 	bl	8007d1c <_lui_verify_obj>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	db0a      	blt.n	800317a <lui_label_set_text+0x2e>
		return;

	lui_label_t* lbl = (lui_label_t* )(obj->obj_main_data);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 800316a:	60fb      	str	r3, [r7, #12]
	lbl->text = (char*)text;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	601a      	str	r2, [r3, #0]

	_lui_object_set_need_refresh(obj);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f002 fe34 	bl	8005de0 <_lui_object_set_need_refresh>
 8003178:	e000      	b.n	800317c <lui_label_set_text+0x30>
		return;
 800317a:	bf00      	nop
}
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <lui_linechart_draw>:

/*
* Draw a line chart
*/
void lui_linechart_draw(lui_obj_t* obj)
{
 8003184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003188:	b0b5      	sub	sp, #212	; 0xd4
 800318a:	af02      	add	r7, sp, #8
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	466b      	mov	r3, sp
 8003190:	461e      	mov	r6, r3
	if (_lui_verify_obj(obj, LUI_OBJ_LINECHART) < 0)
 8003192:	2104      	movs	r1, #4
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f004 fdc1 	bl	8007d1c <_lui_verify_obj>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	f2c0 8287 	blt.w	80036b0 <lui_linechart_draw+0x52c>
		return;

	if (!(obj->visible))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7e5b      	ldrb	r3, [r3, #25]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8284 	beq.w	80036b4 <lui_linechart_draw+0x530>
		return;

	// if no display driver is registered, return
	if (_lui_disp_drv_check() == 0)
 80031ac:	f004 fdd2 	bl	8007d54 <_lui_disp_drv_check>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8280 	beq.w	80036b8 <lui_linechart_draw+0x534>
		return;

	lui_chart_t* chart = (lui_chart_t* )(obj->obj_main_data);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 80031be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	uint16_t temp_x = obj->x;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	785b      	ldrb	r3, [r3, #1]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t temp_y = obj->y;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	789a      	ldrb	r2, [r3, #2]
 80031d4:	78db      	ldrb	r3, [r3, #3]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t width = obj->common_style.width;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7a5a      	ldrb	r2, [r3, #9]
 80031e2:	7a9b      	ldrb	r3, [r3, #10]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t height = obj->common_style.height;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7ada      	ldrb	r2, [r3, #11]
 80031f0:	7b1b      	ldrb	r3, [r3, #12]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint16_t line_color = chart->style.line_color;
 80031fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031fe:	885b      	ldrh	r3, [r3, #2]
 8003200:	b29b      	uxth	r3, r3
 8003202:	82fb      	strh	r3, [r7, #22]
	uint16_t data_points = chart->data.points;
 8003204:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003208:	7ada      	ldrb	r2, [r3, #11]
 800320a:	7b1b      	ldrb	r3, [r3, #12]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	4313      	orrs	r3, r2
 8003210:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	lui_area_t disp_area = {
 8003214:	4ab8      	ldr	r2, [pc, #736]	; (80034f8 <lui_linechart_draw+0x374>)
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800321e:	e883 0003 	stmia.w	r3, {r0, r1}
		.y = 0,
		.w = 1,
		.h = 1,
	};

	double mapped_data[g_lui_main->disp_drv->display_hor_res * 2];
 8003222:	4bb6      	ldr	r3, [pc, #728]	; (80034fc <lui_linechart_draw+0x378>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	895b      	ldrh	r3, [r3, #10]
 800322a:	b29b      	uxth	r3, r3
 800322c:	0059      	lsls	r1, r3, #1
 800322e:	1e4b      	subs	r3, r1, #1
 8003230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003234:	460a      	mov	r2, r1
 8003236:	2300      	movs	r3, #0
 8003238:	4690      	mov	r8, r2
 800323a:	4699      	mov	r9, r3
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003248:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800324c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003250:	460a      	mov	r2, r1
 8003252:	2300      	movs	r3, #0
 8003254:	4614      	mov	r4, r2
 8003256:	461d      	mov	r5, r3
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	01ab      	lsls	r3, r5, #6
 8003262:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8003266:	01a2      	lsls	r2, r4, #6
 8003268:	460b      	mov	r3, r1
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	3307      	adds	r3, #7
 800326e:	08db      	lsrs	r3, r3, #3
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	ebad 0d03 	sub.w	sp, sp, r3
 8003276:	ab02      	add	r3, sp, #8
 8003278:	3307      	adds	r3, #7
 800327a:	08db      	lsrs	r3, r3, #3
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	67fb      	str	r3, [r7, #124]	; 0x7c

	double x_data_min_new = temp_x;
 8003280:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f955 	bl	8000534 <__aeabi_ui2d>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double x_data_max_new = temp_x + width - 1;
 8003292:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8003296:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800329a:	4413      	add	r3, r2
 800329c:	3b01      	subs	r3, #1
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f958 	bl	8000554 <__aeabi_i2d>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	//[0][0] element of 2D array is x_min
	// address of [0][0] = base address
	double x_data_min_old = *(chart->data.source);
 80032ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032b0:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	//[n][0] element of 2D array is x_max
	//address of [n][0] = base address + (n*2) - 2
	double x_data_max_old = *(chart->data.source + (data_points*2) - 2);
 80032bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032c0:	f8d3 2007 	ldr.w	r2, [r3, #7]
 80032c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032c8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80032cc:	3b01      	subs	r3, #1
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	4413      	add	r3, r2
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	double y_data_min_new = temp_y + height - 1;
 80032da:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80032de:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80032e2:	4413      	add	r3, r2
 80032e4:	3b01      	subs	r3, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd f934 	bl	8000554 <__aeabi_i2d>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double y_data_max_new = temp_y;
 80032f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd f91b 	bl	8000534 <__aeabi_ui2d>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double y_data_min_old;
	double y_data_max_old;

	// If data auto-scale is enabled, find out the Y max and min value
	if (chart->data.auto_scale == 1)
 8003306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800330a:	7b5b      	ldrb	r3, [r3, #13]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d14e      	bne.n	80033ae <lui_linechart_draw+0x22a>
	{
		// Initially, Max and Min both are set to the first Y value of the source array
		double y_max = *(chart->data.source + 1);
 8003310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003314:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8003318:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800331c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		double y_min = *(chart->data.source + 1);
 8003320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003324:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8003328:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800332c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

		// Now compare max and min with y values from source array to find the maximum and minimum
		for (uint16_t i = 1; i < data_points; i++)
 8003330:	2301      	movs	r3, #1
 8003332:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003336:	e02b      	b.n	8003390 <lui_linechart_draw+0x20c>
		{
			double y_val = *(chart->data.source + (i*2) + 1);
 8003338:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800333c:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8003340:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	3308      	adds	r3, #8
 8003348:	4413      	add	r3, r2
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			if (y_max <= y_val)
 8003352:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003356:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800335a:	f7fd fbe1 	bl	8000b20 <__aeabi_dcmple>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <lui_linechart_draw+0x1e8>
				y_max = y_val;
 8003364:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003368:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
			if (y_min >= y_val)
 800336c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003370:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003374:	f7fd fbde 	bl	8000b34 <__aeabi_dcmpge>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <lui_linechart_draw+0x202>
				y_min = y_val;
 800337e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003382:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
		for (uint16_t i = 1; i < data_points; i++)
 8003386:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800338a:	3301      	adds	r3, #1
 800338c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003390:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003394:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003398:	429a      	cmp	r2, r3
 800339a:	d3cd      	bcc.n	8003338 <lui_linechart_draw+0x1b4>
		}
		y_data_min_old = y_min;
 800339c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80033a0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		y_data_max_old = y_max;
 80033a4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80033a8:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 80033ac:	e00f      	b.n	80033ce <lui_linechart_draw+0x24a>
	}
	// If not enabled, use user-supplied max and min value
	else
	{
		y_data_min_old = chart->data.y_min_value;
 80033ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033b2:	f8d1 2016 	ldr.w	r2, [r1, #22]
 80033b6:	f8d1 301a 	ldr.w	r3, [r1, #26]
 80033ba:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		y_data_max_old = chart->data.y_max_value;
 80033be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033c2:	f8d1 200e 	ldr.w	r2, [r1, #14]
 80033c6:	f8d1 3012 	ldr.w	r3, [r1, #18]
 80033ca:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	}


	// Draw the chart background
	lui_gfx_draw_rect_fill(temp_x, temp_y, width, height, obj->common_style.bg_color);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 80033da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80033de:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 80033e2:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	4623      	mov	r3, r4
 80033ea:	f003 fec7 	bl	800717c <lui_gfx_draw_rect_fill>

	// Draw the scale numbers

	// Draw the chart grid if needed
	if (chart->style.grid_visible)
 80033ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033f2:	799b      	ldrb	r3, [r3, #6]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d07a      	beq.n	80034ee <lui_linechart_draw+0x36a>
	{
		uint16_t hor_grid_spacing = height / (chart->grid.hor_count + 1);
 80033f8:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80033fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	3301      	adds	r3, #1
 8003404:	fb92 f3f3 	sdiv	r3, r2, r3
 8003408:	87fb      	strh	r3, [r7, #62]	; 0x3e
		uint16_t vert_grid_spacing = width / (chart->grid.vert_count + 1);
 800340a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800340e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	3301      	adds	r3, #1
 8003416:	fb92 f3f3 	sdiv	r3, r2, r3
 800341a:	87bb      	strh	r3, [r7, #60]	; 0x3c

		// Draw the vertical grids from left to right
		for (int i = 1; i <= chart->grid.vert_count; i++)
 800341c:	2301      	movs	r3, #1
 800341e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003422:	e025      	b.n	8003470 <lui_linechart_draw+0x2ec>
		{
			uint16_t temp_x_new = temp_x + (i * vert_grid_spacing);
 8003424:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003428:	b29b      	uxth	r3, r3
 800342a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800342c:	fb12 f303 	smulbb	r3, r2, r3
 8003430:	b29a      	uxth	r2, r3
 8003432:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003436:	4413      	add	r3, r2
 8003438:	86fb      	strh	r3, [r7, #54]	; 0x36
			lui_gfx_draw_line(temp_x_new, temp_y, temp_x_new, temp_y + height - 1, 1, chart->style.grid_color);
 800343a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800343e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003442:	4413      	add	r3, r2
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29c      	uxth	r4, r3
 800344a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800344e:	889b      	ldrh	r3, [r3, #4]
 8003450:	b29b      	uxth	r3, r3
 8003452:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003454:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8003458:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	2301      	movs	r3, #1
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	4623      	mov	r3, r4
 8003462:	f003 fdab 	bl	8006fbc <lui_gfx_draw_line>
		for (int i = 1; i <= chart->grid.vert_count; i++)
 8003466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800346a:	3301      	adds	r3, #1
 800346c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	461a      	mov	r2, r3
 8003478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800347c:	4293      	cmp	r3, r2
 800347e:	ddd1      	ble.n	8003424 <lui_linechart_draw+0x2a0>
		}

		// Draw the horizontal grids from bottom to top
		uint16_t y_bottom = temp_y + height;
 8003480:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8003484:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003488:	4413      	add	r3, r2
 800348a:	877b      	strh	r3, [r7, #58]	; 0x3a
		for (int i = 1; i <= chart->grid.hor_count; i++)
 800348c:	2301      	movs	r3, #1
 800348e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003492:	e024      	b.n	80034de <lui_linechart_draw+0x35a>
		{
			uint16_t temp_y_new = y_bottom - (i * hor_grid_spacing);
 8003494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003498:	b29b      	uxth	r3, r3
 800349a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800349c:	fb12 f303 	smulbb	r3, r2, r3
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	873b      	strh	r3, [r7, #56]	; 0x38
			lui_gfx_draw_line(temp_x, temp_y_new, temp_x + width - 1, temp_y_new, 1, chart->style.grid_color);
 80034a8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80034ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80034b0:	4413      	add	r3, r2
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034bc:	889b      	ldrh	r3, [r3, #4]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	8f3c      	ldrh	r4, [r7, #56]	; 0x38
 80034c2:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80034c4:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 80034c8:	9301      	str	r3, [sp, #4]
 80034ca:	2301      	movs	r3, #1
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	4623      	mov	r3, r4
 80034d0:	f003 fd74 	bl	8006fbc <lui_gfx_draw_line>
		for (int i = 1; i <= chart->grid.hor_count; i++)
 80034d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034d8:	3301      	adds	r3, #1
 80034da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034ea:	4293      	cmp	r3, r2
 80034ec:	ddd2      	ble.n	8003494 <lui_linechart_draw+0x310>
		}
	}


	// Map all the point values to pixel co-ordinate values
	for (int i = 0; i < data_points; i++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034f4:	e053      	b.n	800359e <lui_linechart_draw+0x41a>
 80034f6:	bf00      	nop
 80034f8:	0800b9a4 	.word	0x0800b9a4
 80034fc:	20002464 	.word	0x20002464
	{
		double x_data_old = *(chart->data.source + (i*2));
 8003500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003504:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8003508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	4413      	add	r3, r2
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double y_data_old = *(chart->data.source + (i*2) + 1);
 8003518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800351c:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8003520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	3308      	adds	r3, #8
 8003528:	4413      	add	r3, r2
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		// Mapping range of x values
		mapped_data[i*2] =  _lui_map_range(x_data_old, x_data_max_old, x_data_min_old, x_data_max_new, x_data_min_new);
 8003532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003536:	005c      	lsls	r4, r3, #1
 8003538:	ed97 4b1c 	vldr	d4, [r7, #112]	; 0x70
 800353c:	ed97 3b1a 	vldr	d3, [r7, #104]	; 0x68
 8003540:	ed97 2b18 	vldr	d2, [r7, #96]	; 0x60
 8003544:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8003548:	ed97 0b08 	vldr	d0, [r7, #32]
 800354c:	f004 fb9e 	bl	8007c8c <_lui_map_range>
 8003550:	eeb0 7a40 	vmov.f32	s14, s0
 8003554:	eef0 7a60 	vmov.f32	s15, s1
 8003558:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800355a:	00e3      	lsls	r3, r4, #3
 800355c:	4413      	add	r3, r2
 800355e:	ed83 7b00 	vstr	d7, [r3]

		// Mapping range of y values
		mapped_data[i*2 + 1] =  _lui_map_range(y_data_old, y_data_max_old, y_data_min_old, y_data_max_new, y_data_min_new);
 8003562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	1c5c      	adds	r4, r3, #1
 800356a:	ed97 4b14 	vldr	d4, [r7, #80]	; 0x50
 800356e:	ed97 3b12 	vldr	d3, [r7, #72]	; 0x48
 8003572:	ed97 2b2a 	vldr	d2, [r7, #168]	; 0xa8
 8003576:	ed97 1b2c 	vldr	d1, [r7, #176]	; 0xb0
 800357a:	ed97 0b06 	vldr	d0, [r7, #24]
 800357e:	f004 fb85 	bl	8007c8c <_lui_map_range>
 8003582:	eeb0 7a40 	vmov.f32	s14, s0
 8003586:	eef0 7a60 	vmov.f32	s15, s1
 800358a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800358c:	00e3      	lsls	r3, r4, #3
 800358e:	4413      	add	r3, r2
 8003590:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < data_points; i++)
 8003594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003598:	3301      	adds	r3, #1
 800359a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800359e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80035a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80035a6:	429a      	cmp	r2, r3
 80035a8:	dbaa      	blt.n	8003500 <lui_linechart_draw+0x37c>
	}

	// Now draw the lines using the mapped points to make the graph
	for (int i = 0; i < data_points; i++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035b0:	e060      	b.n	8003674 <lui_linechart_draw+0x4f0>
	{
		uint16_t current_x = mapped_data[i*2];
 80035b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7fd fb07 	bl	8000bd8 <__aeabi_d2uiz>
 80035ca:	4603      	mov	r3, r0
 80035cc:	86bb      	strh	r3, [r7, #52]	; 0x34
		uint16_t current_y = mapped_data[i*2 + 1];
 80035ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	3301      	adds	r3, #1
 80035d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	f7fd faf8 	bl	8000bd8 <__aeabi_d2uiz>
 80035e8:	4603      	mov	r3, r0
 80035ea:	867b      	strh	r3, [r7, #50]	; 0x32

		// Reached the last point, we don't have any next point
		if (i == data_points - 1)
 80035ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80035f0:	3b01      	subs	r3, #1
 80035f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d10e      	bne.n	8003618 <lui_linechart_draw+0x494>
		{
			// Don't draw line here, just draw the point
			disp_area.x = current_x;
 80035fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035fc:	81bb      	strh	r3, [r7, #12]
			disp_area.y = current_y;
 80035fe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003600:	81fb      	strh	r3, [r7, #14]
			g_lui_main->disp_drv->draw_pixels_buff_cb(&line_color, &disp_area);
 8003602:	4b30      	ldr	r3, [pc, #192]	; (80036c4 <lui_linechart_draw+0x540>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f107 010c 	add.w	r1, r7, #12
 800360e:	f107 0216 	add.w	r2, r7, #22
 8003612:	4610      	mov	r0, r2
 8003614:	4798      	blx	r3
 8003616:	e028      	b.n	800366a <lui_linechart_draw+0x4e6>
		}

		// We have next points after thispoint
		else
		{
			uint16_t next_x = mapped_data [i*2 + 2];
 8003618:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800361c:	3301      	adds	r3, #1
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f7fd fad3 	bl	8000bd8 <__aeabi_d2uiz>
 8003632:	4603      	mov	r3, r0
 8003634:	863b      	strh	r3, [r7, #48]	; 0x30
			uint16_t next_y = mapped_data [i*2 + 3];
 8003636:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	3303      	adds	r3, #3
 800363e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	f7fd fac4 	bl	8000bd8 <__aeabi_d2uiz>
 8003650:	4603      	mov	r3, r0
 8003652:	85fb      	strh	r3, [r7, #46]	; 0x2e

			lui_gfx_draw_line(current_x, current_y, next_x, next_y, 1, line_color);
 8003654:	8afb      	ldrh	r3, [r7, #22]
 8003656:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8003658:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800365a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800365c:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	2301      	movs	r3, #1
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	4623      	mov	r3, r4
 8003666:	f003 fca9 	bl	8006fbc <lui_gfx_draw_line>
	for (int i = 0; i < data_points; i++)
 800366a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800366e:	3301      	adds	r3, #1
 8003670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003674:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003678:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800367c:	429a      	cmp	r2, r3
 800367e:	db98      	blt.n	80035b2 <lui_linechart_draw+0x42e>
		}
	}

	// Draw the chart border if needed
	if (obj->common_style.border_visible == 1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7b5b      	ldrb	r3, [r3, #13]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d111      	bne.n	80036ac <lui_linechart_draw+0x528>
	{
		lui_gfx_draw_rect(temp_x, temp_y, width, height, 1, obj->common_style.border_color);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800368e:	b29b      	uxth	r3, r3
 8003690:	f8b7 4088 	ldrh.w	r4, [r7, #136]	; 0x88
 8003694:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003698:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 800369c:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	2301      	movs	r3, #1
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	4623      	mov	r3, r4
 80036a8:	f003 fd18 	bl	80070dc <lui_gfx_draw_rect>
 80036ac:	46b5      	mov	sp, r6
 80036ae:	e005      	b.n	80036bc <lui_linechart_draw+0x538>
		return;
 80036b0:	bf00      	nop
 80036b2:	e002      	b.n	80036ba <lui_linechart_draw+0x536>
		return;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <lui_linechart_draw+0x536>
		return;
 80036b8:	bf00      	nop
 80036ba:	46b5      	mov	sp, r6
	}
}
 80036bc:	37cc      	adds	r7, #204	; 0xcc
 80036be:	46bd      	mov	sp, r7
 80036c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036c4:	20002464 	.word	0x20002464

080036c8 <lui_button_draw>:

/*
 * Draw a button
 */
void lui_button_draw(lui_obj_t* obj)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b099      	sub	sp, #100	; 0x64
 80036cc:	af06      	add	r7, sp, #24
 80036ce:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_BUTTON) < 0)
 80036d0:	2102      	movs	r1, #2
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f004 fb22 	bl	8007d1c <_lui_verify_obj>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f2c0 81ac 	blt.w	8003a38 <lui_button_draw+0x370>
		return;

	if (!(obj->visible))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	7e5b      	ldrb	r3, [r3, #25]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 81a9 	beq.w	8003a3c <lui_button_draw+0x374>
		return;

	// if no display driver is registered, return
	if (_lui_disp_drv_check() == 0)
 80036ea:	f004 fb33 	bl	8007d54 <_lui_disp_drv_check>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 81a5 	beq.w	8003a40 <lui_button_draw+0x378>
		return;

	lui_button_t* btn = (lui_button_t* )(obj->obj_main_data);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38

	uint8_t padding = 2;
 80036fe:	2302      	movs	r3, #2
 8003700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t temp_x = obj->x;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	785b      	ldrb	r3, [r3, #1]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	4313      	orrs	r3, r2
 800370e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t temp_y = obj->y;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	789a      	ldrb	r2, [r3, #2]
 8003716:	78db      	ldrb	r3, [r3, #3]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	4313      	orrs	r3, r2
 800371c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t btn_height = obj->common_style.height;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	7ada      	ldrb	r2, [r3, #11]
 8003722:	7b1b      	ldrb	r3, [r3, #12]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	4313      	orrs	r3, r2
 8003728:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t btn_width = obj->common_style.width;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7a5a      	ldrb	r2, [r3, #9]
 800372e:	7a9b      	ldrb	r3, [r3, #10]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	4313      	orrs	r3, r2
 8003734:	863b      	strh	r3, [r7, #48]	; 0x30

	uint16_t str_width_height[2];

	/* If button's background is transparent, draw parent's bg color or parent's bitmap as bg */
	if (obj->parent && btn->style.is_transparent_bg && obj->state != LUI_STATE_SELECTED)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d044      	beq.n	80037c8 <lui_button_draw+0x100>
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	7d5b      	ldrb	r3, [r3, #21]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d040      	beq.n	80037c8 <lui_button_draw+0x100>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7b9b      	ldrb	r3, [r3, #14]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d03c      	beq.n	80037c8 <lui_button_draw+0x100>
	{
		/* NOTE: panel and scene both have same first items in the struct. So even if
		* the parent is scene, we can use lui_panel_t for casting.
		*/
		lui_panel_t* panel = (lui_panel_t* )(obj->parent->obj_main_data);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (panel->bg_image)
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d024      	beq.n	80037aa <lui_button_draw+0xe2>
		{
			lui_area_t bmp_crop;
			const lui_bitmap_t* bg_bmp = panel->bg_image;
 8003760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
			bmp_crop.x = temp_x - obj->parent->x;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	b29b      	uxth	r3, r3
 8003776:	83bb      	strh	r3, [r7, #28]
			bmp_crop.y = temp_y - obj->parent->y;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	885b      	ldrh	r3, [r3, #2]
 800377e:	b29b      	uxth	r3, r3
 8003780:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	b29b      	uxth	r3, r3
 8003786:	83fb      	strh	r3, [r7, #30]
			bmp_crop.w = btn_width;
 8003788:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800378a:	843b      	strh	r3, [r7, #32]
			bmp_crop.h = btn_height;
 800378c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800378e:	847b      	strh	r3, [r7, #34]	; 0x22

			lui_gfx_draw_bitmap(bg_bmp, &panel->img_pal, temp_x, temp_y, &bmp_crop);
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	1d19      	adds	r1, r3, #4
 8003794:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 8003796:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800379a:	f107 031c 	add.w	r3, r7, #28
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4603      	mov	r3, r0
 80037a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037a4:	f003 feec 	bl	8007580 <lui_gfx_draw_bitmap>
	{
 80037a8:	e040      	b.n	800382c <lui_button_draw+0x164>
		}
		else
		{
			lui_gfx_draw_rect_fill(temp_x, temp_y, btn_width, btn_height, obj->parent->common_style.bg_color);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 80037b6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80037b8:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80037ba:	f8b7 0046 	ldrh.w	r0, [r7, #70]	; 0x46
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4623      	mov	r3, r4
 80037c2:	f003 fcdb 	bl	800717c <lui_gfx_draw_rect_fill>
	{
 80037c6:	e031      	b.n	800382c <lui_button_draw+0x164>
		}
	}
	/* Else draw the button's bg color depending on its current state */
	else
	{
		uint16_t btn_color = obj->common_style.bg_color;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	795a      	ldrb	r2, [r3, #5]
 80037cc:	799b      	ldrb	r3, [r3, #6]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		if (obj->state == LUI_STATE_SELECTED)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7b9b      	ldrb	r3, [r3, #14]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <lui_button_draw+0x126>
			btn_color = btn->style.selection_color;
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	7cda      	ldrb	r2, [r3, #19]
 80037e2:	7d1b      	ldrb	r3, [r3, #20]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037ec:	e013      	b.n	8003816 <lui_button_draw+0x14e>
		else if (obj->state == LUI_STATE_PRESSED || (btn->is_checkable && obj->value))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7b9b      	ldrb	r3, [r3, #14]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d008      	beq.n	8003808 <lui_button_draw+0x140>
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <lui_button_draw+0x14e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <lui_button_draw+0x14e>
			btn_color = btn->style.pressed_color;
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	7c5a      	ldrb	r2, [r3, #17]
 800380c:	7c9b      	ldrb	r3, [r3, #18]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	4313      	orrs	r3, r2
 8003812:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		// else if (btn->state == LUI_STATE_IDLE)
		// 	btn_color = btn->color;

		lui_gfx_draw_rect_fill(temp_x, temp_y, btn_width, btn_height, btn_color);
 8003816:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8003818:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800381a:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800381c:	f8b7 0046 	ldrh.w	r0, [r7, #70]	; 0x46
 8003820:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	4623      	mov	r3, r4
 8003828:	f003 fca8 	bl	800717c <lui_gfx_draw_rect_fill>
	}

	/* Draw background bitmap if not NULL */
	if (btn->img_idle || btn->img_pressed)
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <lui_button_draw+0x178>
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d047      	beq.n	80038d0 <lui_button_draw+0x208>
	{
		lui_area_t crop = {
 8003840:	2300      	movs	r3, #0
 8003842:	82bb      	strh	r3, [r7, #20]
 8003844:	2300      	movs	r3, #0
 8003846:	82fb      	strh	r3, [r7, #22]
			.x = 0,
			.y = 0,
			.w = obj->common_style.width,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800384e:	b29b      	uxth	r3, r3
		lui_area_t crop = {
 8003850:	833b      	strh	r3, [r7, #24]
			.h = obj->common_style.height
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8003858:	b29b      	uxth	r3, r3
		lui_area_t crop = {
 800385a:	837b      	strh	r3, [r7, #26]
		};
		if ((obj->state == LUI_STATE_PRESSED || (btn->is_checkable && obj->value)) &&
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7b9b      	ldrb	r3, [r3, #14]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d008      	beq.n	8003876 <lui_button_draw+0x1ae>
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d018      	beq.n	80038a0 <lui_button_draw+0x1d8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d014      	beq.n	80038a0 <lui_button_draw+0x1d8>
			btn->img_pressed)
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	f8d3 301a 	ldr.w	r3, [r3, #26]
		if ((obj->state == LUI_STATE_PRESSED || (btn->is_checkable && obj->value)) &&
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00f      	beq.n	80038a0 <lui_button_draw+0x1d8>
		{
			lui_gfx_draw_bitmap(
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	f103 0123 	add.w	r1, r3, #35	; 0x23
 800388c:	8ebc      	ldrh	r4, [r7, #52]	; 0x34
 800388e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003892:	f107 0314 	add.w	r3, r7, #20
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	4623      	mov	r3, r4
 800389a:	f003 fe71 	bl	8007580 <lui_gfx_draw_bitmap>
 800389e:	e017      	b.n	80038d0 <lui_button_draw+0x208>
				btn->img_pressed,
				&btn->img_press_pal,
				temp_x, temp_y,
				&crop);
		}
		else if (obj->state == LUI_STATE_IDLE && btn->img_idle)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7b9b      	ldrb	r3, [r3, #14]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d113      	bne.n	80038d0 <lui_button_draw+0x208>
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	f8d3 3016 	ldr.w	r3, [r3, #22]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00e      	beq.n	80038d0 <lui_button_draw+0x208>
		{
			lui_gfx_draw_bitmap(
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	f8d3 0016 	ldr.w	r0, [r3, #22]
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	f103 011e 	add.w	r1, r3, #30
 80038be:	8ebc      	ldrh	r4, [r7, #52]	; 0x34
 80038c0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80038c4:	f107 0314 	add.w	r3, r7, #20
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	4623      	mov	r3, r4
 80038cc:	f003 fe58 	bl	8007580 <lui_gfx_draw_bitmap>
		}
	}


	/* Draw the button label (text) if not NULL */
	if (btn->label.text && btn->label.text[0] != '\0')
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8098 	beq.w	8003a0a <lui_button_draw+0x342>
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8092 	beq.w	8003a0a <lui_button_draw+0x342>
	{
		uint16_t lbl_color = btn->style.label_color;
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	7b5a      	ldrb	r2, [r3, #13]
 80038ea:	7b9b      	ldrb	r3, [r3, #14]
 80038ec:	021b      	lsls	r3, r3, #8
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		const char* lbl_txt = btn->label.text;
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (obj->state == LUI_STATE_PRESSED || (btn->is_checkable && obj->value))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	7b9b      	ldrb	r3, [r3, #14]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d008      	beq.n	8003914 <lui_button_draw+0x24c>
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <lui_button_draw+0x272>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d012      	beq.n	800393a <lui_button_draw+0x272>
		{
			lbl_color = btn->style.label_pressed_color;
 8003914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003916:	7bda      	ldrb	r2, [r3, #15]
 8003918:	7c1b      	ldrb	r3, [r3, #16]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	4313      	orrs	r3, r2
 800391e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			lbl_txt = btn->label.text_pressed;
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (lbl_txt == NULL || lbl_txt[0] == '\0')
 8003928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 808a 	beq.w	8003a44 <lui_button_draw+0x37c>
 8003930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8085 	beq.w	8003a44 <lui_button_draw+0x37c>
				return;
		}

		lui_gfx_get_string_dimension(lbl_txt, btn->label.font, btn_width, str_width_height);
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	6819      	ldr	r1, [r3, #0]
 800393e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003942:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003944:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003946:	f003 fca5 	bl	8007294 <lui_gfx_get_string_dimension>

		str_width_height[0] = str_width_height[0] > btn_width ? btn_width : str_width_height[0];
 800394a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800394c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800394e:	4293      	cmp	r3, r2
 8003950:	bf28      	it	cs
 8003952:	4613      	movcs	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	84bb      	strh	r3, [r7, #36]	; 0x24
		str_width_height[1] = str_width_height[1] > btn_height ? btn_height : str_width_height[1];
 8003958:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800395a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800395c:	4293      	cmp	r3, r2
 800395e:	bf28      	it	cs
 8003960:	4613      	movcs	r3, r2
 8003962:	b29b      	uxth	r3, r3
 8003964:	84fb      	strh	r3, [r7, #38]	; 0x26

		temp_y = temp_y + (btn_height - str_width_height[1]) / 2;
 8003966:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003968:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	0fda      	lsrs	r2, r3, #31
 800396e:	4413      	add	r3, r2
 8003970:	105b      	asrs	r3, r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003976:	4413      	add	r3, r2
 8003978:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (btn->label.text_align == LUI_ALIGN_CENTER)
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	7b1b      	ldrb	r3, [r3, #12]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10c      	bne.n	800399c <lui_button_draw+0x2d4>
		{
			temp_x = temp_x + (btn_width - str_width_height[0]) / 2;
 8003982:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003984:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	0fda      	lsrs	r2, r3, #31
 800398a:	4413      	add	r3, r2
 800398c:	105b      	asrs	r3, r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003994:	4413      	add	r3, r2
 8003996:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800399a:	e01a      	b.n	80039d2 <lui_button_draw+0x30a>
		}
		else if (btn->label.text_align == LUI_ALIGN_RIGHT)
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	7b1b      	ldrb	r3, [r3, #12]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d10e      	bne.n	80039c2 <lui_button_draw+0x2fa>
		{
			temp_x = temp_x + (btn_width - str_width_height[0]) - padding;
 80039a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039a6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80039b0:	4413      	add	r3, r2
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80039c0:	e007      	b.n	80039d2 <lui_button_draw+0x30a>
		}
		else
		{
			temp_x = temp_x + padding;
 80039c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80039cc:	4413      	add	r3, r2
 80039ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		}

		lui_area_t btn_lbl_area = {
 80039d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80039d6:	81bb      	strh	r3, [r7, #12]
 80039d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80039da:	81fb      	strh	r3, [r7, #14]
			.x = temp_x,
			.y = temp_y,
			.w = str_width_height[0],
 80039dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
		lui_area_t btn_lbl_area = {
 80039de:	823b      	strh	r3, [r7, #16]
			.h = str_width_height[1]
 80039e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
		lui_area_t btn_lbl_area = {
 80039e2:	827b      	strh	r3, [r7, #18]
		};
		lui_gfx_draw_string_advanced(lbl_txt, &btn_lbl_area, lbl_color, 0, NULL, NULL, NULL, 0, btn->label.font);
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80039ec:	f107 010c 	add.w	r1, r7, #12
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	2300      	movs	r3, #0
 80039f4:	9303      	str	r3, [sp, #12]
 80039f6:	2300      	movs	r3, #0
 80039f8:	9302      	str	r3, [sp, #8]
 80039fa:	2300      	movs	r3, #0
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	2300      	movs	r3, #0
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	2300      	movs	r3, #0
 8003a04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003a06:	f003 f999 	bl	8006d3c <lui_gfx_draw_string_advanced>
	}

	/* Finally Draw the border if needed */
	if (obj->common_style.border_visible == 1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	7b5b      	ldrb	r3, [r3, #13]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d119      	bne.n	8003a46 <lui_button_draw+0x37e>
	{
		lui_gfx_draw_rect(obj->x, obj->y, btn_width, btn_height, 1, obj->common_style.border_color);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b298      	uxth	r0, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	885b      	ldrh	r3, [r3, #2]
 8003a1c:	b299      	uxth	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8003a28:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	4623      	mov	r3, r4
 8003a32:	f003 fb53 	bl	80070dc <lui_gfx_draw_rect>
 8003a36:	e006      	b.n	8003a46 <lui_button_draw+0x37e>
		return;
 8003a38:	bf00      	nop
 8003a3a:	e004      	b.n	8003a46 <lui_button_draw+0x37e>
		return;
 8003a3c:	bf00      	nop
 8003a3e:	e002      	b.n	8003a46 <lui_button_draw+0x37e>
		return;
 8003a40:	bf00      	nop
 8003a42:	e000      	b.n	8003a46 <lui_button_draw+0x37e>
				return;
 8003a44:	bf00      	nop
	}
}
 8003a46:	374c      	adds	r7, #76	; 0x4c
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd90      	pop	{r4, r7, pc}

08003a4c <lui_button_create>:

/*
 * Create a button with default variables
 */
lui_obj_t* lui_button_create()
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
	// if total created objects become more than max allowed objects, don't create the object
	if ( g_lui_main->total_created_objects + 1 > LUI_MAX_OBJECTS)
 8003a52:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <lui_button_create+0x1b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	7f1b      	ldrb	r3, [r3, #28]
 8003a58:	2bc7      	cmp	r3, #199	; 0xc7
 8003a5a:	d901      	bls.n	8003a60 <lui_button_create+0x14>
		return NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e0cd      	b.n	8003bfc <lui_button_create+0x1b0>
	 g_lui_main->total_created_objects++;
 8003a60:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <lui_button_create+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	7f1a      	ldrb	r2, [r3, #28]
 8003a66:	3201      	adds	r2, #1
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	771a      	strb	r2, [r3, #28]

	lui_button_t* initial_button =  (lui_button_t* )_lui_mem_alloc(sizeof(*initial_button));
 8003a6c:	2029      	movs	r0, #41	; 0x29
 8003a6e:	f004 f9a9 	bl	8007dc4 <_lui_mem_alloc>
 8003a72:	6078      	str	r0, [r7, #4]
	if (initial_button == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <lui_button_create+0x32>
		return NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e0be      	b.n	8003bfc <lui_button_create+0x1b0>

	initial_button->style.pressed_color = LUI_STYLE_BUTTON_PRESSED_COLOR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f042 021d 	orr.w	r2, r2, #29
 8003a86:	745a      	strb	r2, [r3, #17]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f042 025d 	orr.w	r2, r2, #93	; 0x5d
 8003a8e:	749a      	strb	r2, [r3, #18]
	initial_button->style.selection_color = LUI_STYLE_BUTTON_SELECTION_COLOR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f042 027a 	orr.w	r2, r2, #122	; 0x7a
 8003a98:	74da      	strb	r2, [r3, #19]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 8003aa0:	751a      	strb	r2, [r3, #20]
	initial_button->style.label_color = LUI_STYLE_BUTTON_LABEL_COLOR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8003aaa:	735a      	strb	r2, [r3, #13]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f062 0210 	orn	r2, r2, #16
 8003ab2:	739a      	strb	r2, [r3, #14]
	initial_button->style.label_pressed_color = LUI_STYLE_BUTTON_LABEL_COLOR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8003abc:	73da      	strb	r2, [r3, #15]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f062 0210 	orn	r2, r2, #16
 8003ac4:	741a      	strb	r2, [r3, #16]
	initial_button->style.is_transparent_bg = 0;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	755a      	strb	r2, [r3, #21]

	initial_button->img_idle = NULL;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	759a      	strb	r2, [r3, #22]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	75da      	strb	r2, [r3, #23]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	761a      	strb	r2, [r3, #24]
 8003ada:	2200      	movs	r2, #0
 8003adc:	765a      	strb	r2, [r3, #25]
	initial_button->img_pressed = NULL;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	769a      	strb	r2, [r3, #26]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	76da      	strb	r2, [r3, #27]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
 8003aec:	2200      	movs	r2, #0
 8003aee:	775a      	strb	r2, [r3, #29]
	initial_button->img_idle_pal.fore_color = LUI_STYLE_BUTTON_LABEL_COLOR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8003af8:	779a      	strb	r2, [r3, #30]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f062 0210 	orn	r2, r2, #16
 8003b00:	77da      	strb	r2, [r3, #31]
	initial_button->img_idle_pal.back_color = LUI_STYLE_BUTTON_BG_COLOR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f042 0217 	orr.w	r2, r2, #23
 8003b0a:	f883 2020 	strb.w	r2, [r3, #32]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f042 024c 	orr.w	r2, r2, #76	; 0x4c
 8003b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	initial_button->img_idle_pal.is_backgrnd = 1;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	initial_button->img_press_pal.fore_color = LUI_STYLE_BUTTON_LABEL_COLOR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8003b28:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f062 0210 	orn	r2, r2, #16
 8003b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	initial_button->img_press_pal.back_color = LUI_STYLE_BUTTON_BG_COLOR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f042 0217 	orr.w	r2, r2, #23
 8003b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8003b42:	2200      	movs	r2, #0
 8003b44:	f042 024c 	orr.w	r2, r2, #76	; 0x4c
 8003b48:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	initial_button->img_press_pal.is_backgrnd = 1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	initial_button->is_checkable = 0;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	initial_button->label.text = NULL;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	711a      	strb	r2, [r3, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	715a      	strb	r2, [r3, #5]
 8003b66:	2200      	movs	r2, #0
 8003b68:	719a      	strb	r2, [r3, #6]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	71da      	strb	r2, [r3, #7]
	initial_button->label.text_pressed = NULL;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	721a      	strb	r2, [r3, #8]
 8003b74:	2200      	movs	r2, #0
 8003b76:	725a      	strb	r2, [r3, #9]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	729a      	strb	r2, [r3, #10]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	72da      	strb	r2, [r3, #11]
	initial_button->label.font = g_lui_main->default_font;
 8003b80:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <lui_button_create+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
	initial_button->label.text_align = LUI_ALIGN_CENTER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	731a      	strb	r2, [r3, #12]

	lui_obj_t* obj = _lui_object_create();
 8003b90:	f001 fbf2 	bl	8005378 <_lui_object_create>
 8003b94:	6038      	str	r0, [r7, #0]
	if (obj == NULL)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <lui_button_create+0x154>
		return NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e02d      	b.n	8003bfc <lui_button_create+0x1b0>
	// object type
	obj->obj_type = LUI_OBJ_BUTTON;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	76da      	strb	r2, [r3, #27]
	obj->enabled = 1;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	769a      	strb	r2, [r3, #26]
	// object common style
	obj->common_style.bg_color = LUI_STYLE_BUTTON_BG_COLOR;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f042 0217 	orr.w	r2, r2, #23
 8003bb4:	715a      	strb	r2, [r3, #5]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f042 024c 	orr.w	r2, r2, #76	; 0x4c
 8003bbc:	719a      	strb	r2, [r3, #6]
	obj->common_style.border_color = LUI_STYLE_BUTTON_BORDER_COLOR;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f062 0274 	orn	r2, r2, #116	; 0x74
 8003bc6:	71da      	strb	r2, [r3, #7]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 8003bce:	721a      	strb	r2, [r3, #8]
	obj->common_style.border_visible = LUI_STYLE_BUTTON_BORDER_VISIBLE;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	735a      	strb	r2, [r3, #13]
	obj->common_style.width = LUI_STYLE_BUTTON_WIDTH;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8003bde:	725a      	strb	r2, [r3, #9]
 8003be0:	2200      	movs	r2, #0
 8003be2:	729a      	strb	r2, [r3, #10]
	obj->common_style.height = LUI_STYLE_BUTTON_HEIGHT;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f042 021e 	orr.w	r2, r2, #30
 8003bec:	72da      	strb	r2, [r3, #11]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	731a      	strb	r2, [r3, #12]

	obj->obj_main_data = (void* )initial_button;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	f8c3 2029 	str.w	r2, [r3, #41]	; 0x29

	return  obj;
 8003bfa:	683b      	ldr	r3, [r7, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20002464 	.word	0x20002464

08003c08 <lui_button_set_label_text>:
	lui_button_set_label_text(obj, idle_text);
	lui_button_set_label_text_pressed(obj, pressed_text);
}

void lui_button_set_label_text(lui_obj_t* obj, const char* text)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
	if (_lui_verify_obj(obj, LUI_OBJ_BUTTON) < 0)
 8003c12:	2102      	movs	r1, #2
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f004 f881 	bl	8007d1c <_lui_verify_obj>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	db0d      	blt.n	8003c3c <lui_button_set_label_text+0x34>
		return;

	lui_button_t* btn = (lui_button_t* )(obj->obj_main_data);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8003c26:	60fb      	str	r3, [r7, #12]
	btn->label.text = text;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
	btn->label.text_pressed = text;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	609a      	str	r2, [r3, #8]
	_lui_object_set_need_refresh(obj);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f002 f8d3 	bl	8005de0 <_lui_object_set_need_refresh>
 8003c3a:	e000      	b.n	8003c3e <lui_button_set_label_text+0x36>
		return;
 8003c3c:	bf00      	nop
}
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <lui_list_draw>:
 */

#if defined(LUI_USE_LIST)

void lui_list_draw(lui_obj_t* obj)
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b091      	sub	sp, #68	; 0x44
 8003c48:	af06      	add	r7, sp, #24
 8003c4a:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_LIST) < 0)
 8003c4c:	2108      	movs	r1, #8
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f004 f864 	bl	8007d1c <_lui_verify_obj>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f2c0 8143 	blt.w	8003ee2 <lui_list_draw+0x29e>
		return;

	if (!(obj->visible))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	7e5b      	ldrb	r3, [r3, #25]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8140 	beq.w	8003ee6 <lui_list_draw+0x2a2>
		return;

	lui_list_t* list = (lui_list_t* )(obj->obj_main_data);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8003c6c:	623b      	str	r3, [r7, #32]

	if (list->is_dropdown && !list->is_expanded)
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	7ddb      	ldrb	r3, [r3, #23]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <lui_list_draw+0x3c>
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	7e1b      	ldrb	r3, [r3, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8135 	beq.w	8003eea <lui_list_draw+0x2a6>
		return;

	/* Draw bg to clear old elements */
	lui_gfx_draw_rect_fill(
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b298      	uxth	r0, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	885b      	ldrh	r3, [r3, #2]
 8003c8a:	b299      	uxth	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8003c9a:	b29c      	uxth	r4, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	f003 fa68 	bl	800717c <lui_gfx_draw_rect_fill>
		obj->y,
		obj->common_style.width,
		obj->common_style.height,
		obj->common_style.bg_color);

	uint8_t lim = list->page_first_item_index + list->items_per_page;
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	7c9a      	ldrb	r2, [r3, #18]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	7c5b      	ldrb	r3, [r3, #17]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = list->page_first_item_index; i < lim; i++)
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	7c9b      	ldrb	r3, [r3, #18]
 8003cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cc0:	e0ea      	b.n	8003e98 <lui_list_draw+0x254>
	{
		if (i == list->items_cnt)
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	7d9b      	ldrb	r3, [r3, #22]
 8003cc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	f000 80eb 	beq.w	8003ea6 <lui_list_draw+0x262>
		// 	btn_color = btn->style.pressed_color;
		// else if (btn->state == LUI_STATE_IDLE)
		// 	btn_color = btn->color;

		/* Convert local coordinates of item to global coordinates */
		uint16_t x = obj->x + list->items[i]->area.x1;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	889b      	ldrh	r3, [r3, #4]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t y = obj->y + list->items[i]->area.y1;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	885b      	ldrh	r3, [r3, #2]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	88db      	ldrh	r3, [r3, #6]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	83bb      	strh	r3, [r7, #28]
		uint16_t w = list->items[i]->area.x2 - list->items[i]->area.x1 + 1;
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	891b      	ldrh	r3, [r3, #8]
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	889b      	ldrh	r3, [r3, #4]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	837b      	strh	r3, [r7, #26]
		uint16_t h = list->items[i]->area.y2 - list->items[i]->area.y1 + 1;
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	895b      	ldrh	r3, [r3, #10]
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	88db      	ldrh	r3, [r3, #6]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	833b      	strh	r3, [r7, #24]

		// TODO: Make pressed color changeable
		if (i == list->selected_item_index)
 8003d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d64:	6a3a      	ldr	r2, [r7, #32]
 8003d66:	f9b2 200d 	ldrsh.w	r2, [r2, #13]
 8003d6a:	b212      	sxth	r2, r2
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <lui_list_draw+0x13e>
			lui_gfx_draw_rect_fill(x, y, w, h, LUI_STYLE_LIST_ITEM_PRESSED_COLOR);
 8003d70:	8b3b      	ldrh	r3, [r7, #24]
 8003d72:	8b7a      	ldrh	r2, [r7, #26]
 8003d74:	8bb9      	ldrh	r1, [r7, #28]
 8003d76:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8003d78:	f646 34b0 	movw	r4, #27568	; 0x6bb0
 8003d7c:	9400      	str	r4, [sp, #0]
 8003d7e:	f003 f9fd 	bl	800717c <lui_gfx_draw_rect_fill>

		if (list->style.item_has_border == 1)
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	799b      	ldrb	r3, [r3, #6]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d10f      	bne.n	8003daa <lui_list_draw+0x166>
			lui_gfx_draw_rect(x, y, w, h+1, 1, list->style.item_border_color);
 8003d8a:	8b3b      	ldrh	r3, [r7, #24]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	b29c      	uxth	r4, r3
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	8b7a      	ldrh	r2, [r7, #26]
 8003d9a:	8bb9      	ldrh	r1, [r7, #28]
 8003d9c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	2301      	movs	r3, #1
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4623      	mov	r3, r4
 8003da6:	f003 f999 	bl	80070dc <lui_gfx_draw_rect>

		// Draw the text
		uint16_t dim[2];
		lui_gfx_get_string_dimension(list->items[i]->text, list->font, w, dim);
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f8d3 1009 	ldr.w	r1, [r3, #9]
 8003dc0:	f107 0310 	add.w	r3, r7, #16
 8003dc4:	8b7a      	ldrh	r2, [r7, #26]
 8003dc6:	f003 fa65 	bl	8007294 <lui_gfx_get_string_dimension>

		dim[0] = dim[0] > w ? w : dim[0];
 8003dca:	8a3b      	ldrh	r3, [r7, #16]
 8003dcc:	8b7a      	ldrh	r2, [r7, #26]
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	bf28      	it	cs
 8003dd2:	4613      	movcs	r3, r2
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	823b      	strh	r3, [r7, #16]
		dim[1] = dim[1] > h ? h : dim[1];
 8003dd8:	8a7b      	ldrh	r3, [r7, #18]
 8003dda:	8b3a      	ldrh	r2, [r7, #24]
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bf28      	it	cs
 8003de0:	4613      	movcs	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	827b      	strh	r3, [r7, #18]

		y = y + ((h - dim[1]) / 2);
 8003de6:	8b3b      	ldrh	r3, [r7, #24]
 8003de8:	8a7a      	ldrh	r2, [r7, #18]
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	0fda      	lsrs	r2, r3, #31
 8003dee:	4413      	add	r3, r2
 8003df0:	105b      	asrs	r3, r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	8bbb      	ldrh	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	83bb      	strh	r3, [r7, #28]
		uint8_t padding = 2;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	75fb      	strb	r3, [r7, #23]
		if (list->text_align == LUI_ALIGN_CENTER)
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	7d1b      	ldrb	r3, [r3, #20]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d10a      	bne.n	8003e1c <lui_list_draw+0x1d8>
			x = x + (w - dim[0]) / 2;
 8003e06:	8b7b      	ldrh	r3, [r7, #26]
 8003e08:	8a3a      	ldrh	r2, [r7, #16]
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	0fda      	lsrs	r2, r3, #31
 8003e0e:	4413      	add	r3, r2
 8003e10:	105b      	asrs	r3, r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e16:	4413      	add	r3, r2
 8003e18:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e1a:	e014      	b.n	8003e46 <lui_list_draw+0x202>
		else if (list->text_align == LUI_ALIGN_RIGHT)
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	7d1b      	ldrb	r3, [r3, #20]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d10b      	bne.n	8003e3c <lui_list_draw+0x1f8>
			x = x + (w - dim[0]) - padding;
 8003e24:	8a3b      	ldrh	r3, [r7, #16]
 8003e26:	8b7a      	ldrh	r2, [r7, #26]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e2e:	4413      	add	r3, r2
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e3a:	e004      	b.n	8003e46 <lui_list_draw+0x202>
		else
			x = x + padding;
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e42:	4413      	add	r3, r2
 8003e44:	84bb      	strh	r3, [r7, #36]	; 0x24

		lui_area_t lst_item_area = {
 8003e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e48:	813b      	strh	r3, [r7, #8]
 8003e4a:	8bbb      	ldrh	r3, [r7, #28]
 8003e4c:	817b      	strh	r3, [r7, #10]
			.x = x,
			.y = y,
			.w = dim[0],
 8003e4e:	8a3b      	ldrh	r3, [r7, #16]
		lui_area_t lst_item_area = {
 8003e50:	81bb      	strh	r3, [r7, #12]
			.h = dim[1]
 8003e52:	8a7b      	ldrh	r3, [r7, #18]
		lui_area_t lst_item_area = {
 8003e54:	81fb      	strh	r3, [r7, #14]
		};

		lui_gfx_draw_string_advanced(
			list->items[i]->text,
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	681b      	ldr	r3, [r3, #0]
		lui_gfx_draw_string_advanced(
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	889b      	ldrh	r3, [r3, #4]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8003e72:	f107 0108 	add.w	r1, r7, #8
 8003e76:	9304      	str	r3, [sp, #16]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9303      	str	r3, [sp, #12]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9302      	str	r3, [sp, #8]
 8003e80:	2300      	movs	r3, #0
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	2300      	movs	r3, #0
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f002 ff57 	bl	8006d3c <lui_gfx_draw_string_advanced>
	for (uint8_t i = list->page_first_item_index; i < lim; i++)
 8003e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e92:	3301      	adds	r3, #1
 8003e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e98:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e9c:	7ffb      	ldrb	r3, [r7, #31]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	f4ff af0f 	bcc.w	8003cc2 <lui_list_draw+0x7e>
 8003ea4:	e000      	b.n	8003ea8 <lui_list_draw+0x264>
			break;
 8003ea6:	bf00      	nop
			NULL,
			NULL,
			0,
			list->font);
	}
	if (obj->common_style.border_visible == 1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	7b5b      	ldrb	r3, [r3, #13]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d11d      	bne.n	8003eec <lui_list_draw+0x2a8>
		lui_gfx_draw_rect(obj->x, obj->y,  obj->common_style.width, obj->common_style.height, 1, obj->common_style.border_color);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b298      	uxth	r0, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	885b      	ldrh	r3, [r3, #2]
 8003eba:	b299      	uxth	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8003eca:	b29c      	uxth	r4, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	4623      	mov	r3, r4
 8003edc:	f003 f8fe 	bl	80070dc <lui_gfx_draw_rect>
 8003ee0:	e004      	b.n	8003eec <lui_list_draw+0x2a8>
		return;
 8003ee2:	bf00      	nop
 8003ee4:	e002      	b.n	8003eec <lui_list_draw+0x2a8>
		return;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <lui_list_draw+0x2a8>
		return;
 8003eea:	bf00      	nop

}
 8003eec:	372c      	adds	r7, #44	; 0x2c
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}
 8003ef2:	0000      	movs	r0, r0
 8003ef4:	0000      	movs	r0, r0
	...

08003ef8 <lui_switch_draw>:
 */

#if defined(LUI_USE_SWITCH)

void lui_switch_draw(lui_obj_t* obj)
{
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b089      	sub	sp, #36	; 0x24
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_SWITCH) < 0)
 8003f00:	2103      	movs	r1, #3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f003 ff0a 	bl	8007d1c <_lui_verify_obj>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f2c0 80c5 	blt.w	800409a <lui_switch_draw+0x1a2>
		return;

	if (!(obj->visible))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7e5b      	ldrb	r3, [r3, #25]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80c2 	beq.w	800409e <lui_switch_draw+0x1a6>
		return;

	lui_switch_t* swtch = (lui_switch_t* )(obj->obj_main_data);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8003f20:	613b      	str	r3, [r7, #16]
	// if no display driver is registered, return
	if (_lui_disp_drv_check() == 0)
 8003f22:	f003 ff17 	bl	8007d54 <_lui_disp_drv_check>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80ba 	beq.w	80040a2 <lui_switch_draw+0x1aa>
		return;

	uint16_t temp_x = obj->x;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	781a      	ldrb	r2, [r3, #0]
 8003f32:	785b      	ldrb	r3, [r3, #1]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	4313      	orrs	r3, r2
 8003f38:	82fb      	strh	r3, [r7, #22]
	uint16_t temp_y = obj->y;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	789a      	ldrb	r2, [r3, #2]
 8003f3e:	78db      	ldrb	r3, [r3, #3]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	4313      	orrs	r3, r2
 8003f44:	81fb      	strh	r3, [r7, #14]
	uint16_t temp_height = obj->common_style.height;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7ada      	ldrb	r2, [r3, #11]
 8003f4a:	7b1b      	ldrb	r3, [r3, #12]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	81bb      	strh	r3, [r7, #12]
	uint16_t temp_width = obj->common_style.width;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7a5a      	ldrb	r2, [r3, #9]
 8003f56:	7a9b      	ldrb	r3, [r3, #10]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	817b      	strh	r3, [r7, #10]

	uint16_t swtch_color;
	if (obj->value == 1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d106      	bne.n	8003f74 <lui_switch_draw+0x7c>
	{
		swtch_color = swtch->style.knob_on_color;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	82bb      	strh	r3, [r7, #20]
 8003f72:	e005      	b.n	8003f80 <lui_switch_draw+0x88>
	}
	else
	{
		swtch_color = swtch->style.knob_off_color;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	789a      	ldrb	r2, [r3, #2]
 8003f78:	78db      	ldrb	r3, [r3, #3]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	82bb      	strh	r3, [r7, #20]
	}
	if (obj->state == LUI_STATE_SELECTED || obj->state == LUI_STATE_PRESSED)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7b9b      	ldrb	r3, [r3, #14]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d003      	beq.n	8003f90 <lui_switch_draw+0x98>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	7b9b      	ldrb	r3, [r3, #14]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d105      	bne.n	8003f9c <lui_switch_draw+0xa4>
	{
		swtch_color = swtch->style.selection_color;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	791a      	ldrb	r2, [r3, #4]
 8003f94:	795b      	ldrb	r3, [r3, #5]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	82bb      	strh	r3, [r7, #20]
	}


	lui_gfx_draw_rect_fill(temp_x, temp_y, temp_width, temp_height, obj->common_style.bg_color);	// switch bg (color is constant regardless the state)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	89bc      	ldrh	r4, [r7, #12]
 8003fa6:	897a      	ldrh	r2, [r7, #10]
 8003fa8:	89f9      	ldrh	r1, [r7, #14]
 8003faa:	8af8      	ldrh	r0, [r7, #22]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	4623      	mov	r3, r4
 8003fb0:	f003 f8e4 	bl	800717c <lui_gfx_draw_rect_fill>
	if (obj->common_style.border_visible == 1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	7b5b      	ldrb	r3, [r3, #13]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10d      	bne.n	8003fd8 <lui_switch_draw+0xe0>
		lui_gfx_draw_rect(temp_x, temp_y, temp_width, temp_height, 1, obj->common_style.border_color);	// switch border
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	89bc      	ldrh	r4, [r7, #12]
 8003fc6:	897a      	ldrh	r2, [r7, #10]
 8003fc8:	89f9      	ldrh	r1, [r7, #14]
 8003fca:	8af8      	ldrh	r0, [r7, #22]
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	2301      	movs	r3, #1
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	f003 f882 	bl	80070dc <lui_gfx_draw_rect>

	temp_width = (float)temp_width * 0.3;
 8003fd8:	897b      	ldrh	r3, [r7, #10]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe2:	ee17 0a90 	vmov	r0, s15
 8003fe6:	f7fc fac7 	bl	8000578 <__aeabi_f2d>
 8003fea:	a331      	add	r3, pc, #196	; (adr r3, 80040b0 <lui_switch_draw+0x1b8>)
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f7fc fb1a 	bl	8000628 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7fc fdec 	bl	8000bd8 <__aeabi_d2uiz>
 8004000:	4603      	mov	r3, r0
 8004002:	817b      	strh	r3, [r7, #10]
	temp_height = (float)temp_height * 0.6;
 8004004:	89bb      	ldrh	r3, [r7, #12]
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	ee17 0a90 	vmov	r0, s15
 8004012:	f7fc fab1 	bl	8000578 <__aeabi_f2d>
 8004016:	a328      	add	r3, pc, #160	; (adr r3, 80040b8 <lui_switch_draw+0x1c0>)
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f7fc fb04 	bl	8000628 <__aeabi_dmul>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	f7fc fdd6 	bl	8000bd8 <__aeabi_d2uiz>
 800402c:	4603      	mov	r3, r0
 800402e:	81bb      	strh	r3, [r7, #12]
	temp_x = temp_x + ((obj->common_style.width / 2) - temp_width) / 2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004036:	b29b      	uxth	r3, r3
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	b29b      	uxth	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	0fda      	lsrs	r2, r3, #31
 8004044:	4413      	add	r3, r2
 8004046:	105b      	asrs	r3, r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	8afb      	ldrh	r3, [r7, #22]
 800404c:	4413      	add	r3, r2
 800404e:	82fb      	strh	r3, [r7, #22]
	if (obj->value == 1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d108      	bne.n	800406a <lui_switch_draw+0x172>
		temp_x += (obj->common_style.width / 2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800405e:	b29b      	uxth	r3, r3
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	8afb      	ldrh	r3, [r7, #22]
 8004066:	4413      	add	r3, r2
 8004068:	82fb      	strh	r3, [r7, #22]
	temp_y = temp_y + (obj->common_style.height - temp_height) / 2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8004070:	b29b      	uxth	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	89bb      	ldrh	r3, [r7, #12]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	0fda      	lsrs	r2, r3, #31
 800407a:	4413      	add	r3, r2
 800407c:	105b      	asrs	r3, r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	89fb      	ldrh	r3, [r7, #14]
 8004082:	4413      	add	r3, r2
 8004084:	81fb      	strh	r3, [r7, #14]

	lui_gfx_draw_rect_fill(temp_x, temp_y, temp_width, temp_height, swtch_color);// switch slider
 8004086:	89bc      	ldrh	r4, [r7, #12]
 8004088:	897a      	ldrh	r2, [r7, #10]
 800408a:	89f9      	ldrh	r1, [r7, #14]
 800408c:	8af8      	ldrh	r0, [r7, #22]
 800408e:	8abb      	ldrh	r3, [r7, #20]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	4623      	mov	r3, r4
 8004094:	f003 f872 	bl	800717c <lui_gfx_draw_rect_fill>
 8004098:	e004      	b.n	80040a4 <lui_switch_draw+0x1ac>
		return;
 800409a:	bf00      	nop
 800409c:	e002      	b.n	80040a4 <lui_switch_draw+0x1ac>
		return;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <lui_switch_draw+0x1ac>
		return;
 80040a2:	bf00      	nop
}
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd90      	pop	{r4, r7, pc}
 80040aa:	bf00      	nop
 80040ac:	f3af 8000 	nop.w
 80040b0:	33333333 	.word	0x33333333
 80040b4:	3fd33333 	.word	0x3fd33333
 80040b8:	33333333 	.word	0x33333333
 80040bc:	3fe33333 	.word	0x3fe33333

080040c0 <lui_checkbox_draw>:
 */

#if defined(LUI_USE_CHECKBOX)

void lui_checkbox_draw(lui_obj_t* obj)
{
 80040c0:	b5b0      	push	{r4, r5, r7, lr}
 80040c2:	b096      	sub	sp, #88	; 0x58
 80040c4:	af06      	add	r7, sp, #24
 80040c6:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_CHECKBOX) < 0)
 80040c8:	2109      	movs	r1, #9
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f003 fe26 	bl	8007d1c <_lui_verify_obj>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f2c0 81af 	blt.w	8004436 <lui_checkbox_draw+0x376>
		return;

	if (!(obj->visible))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7e5b      	ldrb	r3, [r3, #25]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 81ac 	beq.w	800443a <lui_checkbox_draw+0x37a>
		return;

	lui_checkbox_t* chkbox = (lui_checkbox_t* )obj->obj_main_data;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 80040e8:	633b      	str	r3, [r7, #48]	; 0x30
	// if no display driver is registered, return
	if (_lui_disp_drv_check() == 0)
 80040ea:	f003 fe33 	bl	8007d54 <_lui_disp_drv_check>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 81a4 	beq.w	800443e <lui_checkbox_draw+0x37e>
		return;

	uint16_t bg_color;
	if (obj->value == 1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d106      	bne.n	800410c <lui_checkbox_draw+0x4c>
	{
		bg_color = chkbox->style.bg_checked_color;
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	7b5a      	ldrb	r2, [r3, #13]
 8004102:	7b9b      	ldrb	r3, [r3, #14]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	4313      	orrs	r3, r2
 8004108:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800410a:	e005      	b.n	8004118 <lui_checkbox_draw+0x58>
	}
	else
	{
		bg_color = obj->common_style.bg_color;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	795a      	ldrb	r2, [r3, #5]
 8004110:	799b      	ldrb	r3, [r3, #6]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	4313      	orrs	r3, r2
 8004116:	87fb      	strh	r3, [r7, #62]	; 0x3e
	}
	if (obj->state == LUI_STATE_SELECTED || obj->state == LUI_STATE_PRESSED)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7b9b      	ldrb	r3, [r3, #14]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d003      	beq.n	8004128 <lui_checkbox_draw+0x68>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	7b9b      	ldrb	r3, [r3, #14]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d105      	bne.n	8004134 <lui_checkbox_draw+0x74>
	{
		bg_color = chkbox->style.selection_color;
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	7bda      	ldrb	r2, [r3, #15]
 800412c:	7c1b      	ldrb	r3, [r3, #16]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	4313      	orrs	r3, r2
 8004132:	87fb      	strh	r3, [r7, #62]	; 0x3e
	}
	uint16_t side = obj->common_style.height;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7ada      	ldrb	r2, [r3, #11]
 8004138:	7b1b      	ldrb	r3, [r3, #12]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	4313      	orrs	r3, r2
 800413e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	lui_gfx_draw_rect_fill(obj->x, obj->y, side, side, bg_color);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b298      	uxth	r0, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	885b      	ldrh	r3, [r3, #2]
 800414a:	b299      	uxth	r1, r3
 800414c:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 800414e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004150:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	4623      	mov	r3, r4
 8004156:	f003 f811 	bl	800717c <lui_gfx_draw_rect_fill>
	// draw the tick mark if needed
	if (obj->value == 1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b01      	cmp	r3, #1
 8004160:	f040 80d6 	bne.w	8004310 <lui_checkbox_draw+0x250>
	{
		uint16_t point_1_x = obj->x + (side * .2), point_1_y = obj->y + (side * .55);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc f9f2 	bl	8000554 <__aeabi_i2d>
 8004170:	4604      	mov	r4, r0
 8004172:	460d      	mov	r5, r1
 8004174:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc f9ec 	bl	8000554 <__aeabi_i2d>
 800417c:	a3b6      	add	r3, pc, #728	; (adr r3, 8004458 <lui_checkbox_draw+0x398>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f7fc fa51 	bl	8000628 <__aeabi_dmul>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4620      	mov	r0, r4
 800418c:	4629      	mov	r1, r5
 800418e:	f7fc f895 	bl	80002bc <__adddf3>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	f7fc fd1d 	bl	8000bd8 <__aeabi_d2uiz>
 800419e:	4603      	mov	r3, r0
 80041a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	885b      	ldrh	r3, [r3, #2]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fc f9d3 	bl	8000554 <__aeabi_i2d>
 80041ae:	4604      	mov	r4, r0
 80041b0:	460d      	mov	r5, r1
 80041b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fc f9cd 	bl	8000554 <__aeabi_i2d>
 80041ba:	a3a9      	add	r3, pc, #676	; (adr r3, 8004460 <lui_checkbox_draw+0x3a0>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc fa32 	bl	8000628 <__aeabi_dmul>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4620      	mov	r0, r4
 80041ca:	4629      	mov	r1, r5
 80041cc:	f7fc f876 	bl	80002bc <__adddf3>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	f7fc fcfe 	bl	8000bd8 <__aeabi_d2uiz>
 80041dc:	4603      	mov	r3, r0
 80041de:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t point_2_x = obj->x + (side* .4), point_2_y = obj->y + (side * .75);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc f9b4 	bl	8000554 <__aeabi_i2d>
 80041ec:	4604      	mov	r4, r0
 80041ee:	460d      	mov	r5, r1
 80041f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fc f9ae 	bl	8000554 <__aeabi_i2d>
 80041f8:	a39b      	add	r3, pc, #620	; (adr r3, 8004468 <lui_checkbox_draw+0x3a8>)
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f7fc fa13 	bl	8000628 <__aeabi_dmul>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4620      	mov	r0, r4
 8004208:	4629      	mov	r1, r5
 800420a:	f7fc f857 	bl	80002bc <__adddf3>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	f7fc fcdf 	bl	8000bd8 <__aeabi_d2uiz>
 800421a:	4603      	mov	r3, r0
 800421c:	853b      	strh	r3, [r7, #40]	; 0x28
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	885b      	ldrh	r3, [r3, #2]
 8004222:	b29b      	uxth	r3, r3
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc f995 	bl	8000554 <__aeabi_i2d>
 800422a:	4604      	mov	r4, r0
 800422c:	460d      	mov	r5, r1
 800422e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004230:	4618      	mov	r0, r3
 8004232:	f7fc f98f 	bl	8000554 <__aeabi_i2d>
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	4b85      	ldr	r3, [pc, #532]	; (8004450 <lui_checkbox_draw+0x390>)
 800423c:	f7fc f9f4 	bl	8000628 <__aeabi_dmul>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4620      	mov	r0, r4
 8004246:	4629      	mov	r1, r5
 8004248:	f7fc f838 	bl	80002bc <__adddf3>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	f7fc fcc0 	bl	8000bd8 <__aeabi_d2uiz>
 8004258:	4603      	mov	r3, r0
 800425a:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t point_3_x = obj->x + (side * .75), point_3_y = obj->y + (side * .3);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc f976 	bl	8000554 <__aeabi_i2d>
 8004268:	4604      	mov	r4, r0
 800426a:	460d      	mov	r5, r1
 800426c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800426e:	4618      	mov	r0, r3
 8004270:	f7fc f970 	bl	8000554 <__aeabi_i2d>
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	4b75      	ldr	r3, [pc, #468]	; (8004450 <lui_checkbox_draw+0x390>)
 800427a:	f7fc f9d5 	bl	8000628 <__aeabi_dmul>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4620      	mov	r0, r4
 8004284:	4629      	mov	r1, r5
 8004286:	f7fc f819 	bl	80002bc <__adddf3>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	f7fc fca1 	bl	8000bd8 <__aeabi_d2uiz>
 8004296:	4603      	mov	r3, r0
 8004298:	84bb      	strh	r3, [r7, #36]	; 0x24
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	885b      	ldrh	r3, [r3, #2]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc f957 	bl	8000554 <__aeabi_i2d>
 80042a6:	4604      	mov	r4, r0
 80042a8:	460d      	mov	r5, r1
 80042aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc f951 	bl	8000554 <__aeabi_i2d>
 80042b2:	a365      	add	r3, pc, #404	; (adr r3, 8004448 <lui_checkbox_draw+0x388>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fc f9b6 	bl	8000628 <__aeabi_dmul>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4620      	mov	r0, r4
 80042c2:	4629      	mov	r1, r5
 80042c4:	f7fb fffa 	bl	80002bc <__adddf3>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4610      	mov	r0, r2
 80042ce:	4619      	mov	r1, r3
 80042d0:	f7fc fc82 	bl	8000bd8 <__aeabi_d2uiz>
 80042d4:	4603      	mov	r3, r0
 80042d6:	847b      	strh	r3, [r7, #34]	; 0x22

		lui_gfx_draw_line(point_1_x, point_1_y, point_2_x, point_2_y, 2, chkbox->style.tick_color);
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80042e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80042e4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80042e6:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	2302      	movs	r3, #2
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	4623      	mov	r3, r4
 80042f0:	f002 fe64 	bl	8006fbc <lui_gfx_draw_line>
		lui_gfx_draw_line(point_2_x, point_2_y, point_3_x, point_3_y, 2, chkbox->style.tick_color);
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80042fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004300:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004302:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	2302      	movs	r3, #2
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	4623      	mov	r3, r4
 800430c:	f002 fe56 	bl	8006fbc <lui_gfx_draw_line>
	}

	// draw the border if needed
	if (obj->common_style.border_visible == 1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	7b5b      	ldrb	r3, [r3, #13]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d111      	bne.n	800433c <lui_checkbox_draw+0x27c>
	{
		lui_gfx_draw_rect(obj->x, obj->y, side, side, 1, obj->common_style.border_color);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	b298      	uxth	r0, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	885b      	ldrh	r3, [r3, #2]
 8004322:	b299      	uxth	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800432a:	b29b      	uxth	r3, r3
 800432c:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 800432e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	2301      	movs	r3, #1
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	4623      	mov	r3, r4
 8004338:	f002 fed0 	bl	80070dc <lui_gfx_draw_rect>
	}

	/* Draw label if any */
	if (chkbox->label.text)
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d07d      	beq.n	8004440 <lui_checkbox_draw+0x380>
	{
		uint16_t lbl_bg_color = ~(chkbox->label.style.text_color); // using inverted text color as bg
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	891b      	ldrh	r3, [r3, #8]
 8004348:	b29b      	uxth	r3, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	87bb      	strh	r3, [r7, #60]	; 0x3c
		uint16_t dim[2] = {0, 0};	// x, y
 800434e:	2300      	movs	r3, #0
 8004350:	833b      	strh	r3, [r7, #24]
 8004352:	2300      	movs	r3, #0
 8004354:	837b      	strh	r3, [r7, #26]
		lui_gfx_get_string_dimension(chkbox->label.text, chkbox->label.font, g_lui_main->disp_drv->display_hor_res - obj->x + side + 2, dim);
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <lui_checkbox_draw+0x394>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	895b      	ldrh	r3, [r3, #10]
 8004366:	b29a      	uxth	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	b29a      	uxth	r2, r3
 8004372:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004374:	4413      	add	r3, r2
 8004376:	b29b      	uxth	r3, r3
 8004378:	3302      	adds	r3, #2
 800437a:	b29a      	uxth	r2, r3
 800437c:	f107 0318 	add.w	r3, r7, #24
 8004380:	f002 ff88 	bl	8007294 <lui_gfx_get_string_dimension>
		lui_area_t chkbx_txt_area = {
			.x = obj->x + side + 2,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29a      	uxth	r2, r3
 800438a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800438c:	4413      	add	r3, r2
 800438e:	b29b      	uxth	r3, r3
 8004390:	3302      	adds	r3, #2
 8004392:	b29b      	uxth	r3, r3
		lui_area_t chkbx_txt_area = {
 8004394:	823b      	strh	r3, [r7, #16]
			.y = obj->y + 1,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	885b      	ldrh	r3, [r3, #2]
 800439a:	b29b      	uxth	r3, r3
 800439c:	3301      	adds	r3, #1
 800439e:	b29b      	uxth	r3, r3
		lui_area_t chkbx_txt_area = {
 80043a0:	827b      	strh	r3, [r7, #18]
			.w = dim[0],
 80043a2:	8b3b      	ldrh	r3, [r7, #24]
		lui_area_t chkbx_txt_area = {
 80043a4:	82bb      	strh	r3, [r7, #20]
			.h = dim[1]
 80043a6:	8b7b      	ldrh	r3, [r7, #26]
		lui_area_t chkbx_txt_area = {
 80043a8:	82fb      	strh	r3, [r7, #22]
		};

		lui_area_t bitmap_crop_area = {
			.x = chkbx_txt_area.x - obj->parent->x,
 80043aa:	8a3a      	ldrh	r2, [r7, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	b29b      	uxth	r3, r3
		lui_area_t bitmap_crop_area = {
 80043b8:	813b      	strh	r3, [r7, #8]
			.y = chkbx_txt_area.y - obj->parent->y,
 80043ba:	8a7a      	ldrh	r2, [r7, #18]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	885b      	ldrh	r3, [r3, #2]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	b29b      	uxth	r3, r3
		lui_area_t bitmap_crop_area = {
 80043c8:	817b      	strh	r3, [r7, #10]
			.w = chkbx_txt_area.w,
 80043ca:	8abb      	ldrh	r3, [r7, #20]
		lui_area_t bitmap_crop_area = {
 80043cc:	81bb      	strh	r3, [r7, #12]
			.h = chkbx_txt_area.h
 80043ce:	8afb      	ldrh	r3, [r7, #22]
		lui_area_t bitmap_crop_area = {
 80043d0:	81fb      	strh	r3, [r7, #14]
		};
		const lui_bitmap_t* bg_img = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	63bb      	str	r3, [r7, #56]	; 0x38
		lui_bitmap_mono_pal_t* mono_palette = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (obj->parent)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d011      	beq.n	8004406 <lui_checkbox_draw+0x346>
		{
			lbl_bg_color = obj->parent->common_style.bg_color;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	795a      	ldrb	r2, [r3, #5]
 80043e8:	799b      	ldrb	r3, [r3, #6]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	4313      	orrs	r3, r2
 80043ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
			/* As panel and scene both have same first elements in the struct,
			 * we can use panel even for scene
			 */
			lui_panel_t* panel = (lui_panel_t*)(obj->parent->obj_main_data);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 80043f8:	61fb      	str	r3, [r7, #28]
			bg_img = panel->bg_image;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	63bb      	str	r3, [r7, #56]	; 0x38
			mono_palette = &panel->img_pal;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	3304      	adds	r3, #4
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
		}
		lui_gfx_draw_string_advanced(
			chkbox->label.text,
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	6818      	ldr	r0, [r3, #0]
		lui_gfx_draw_string_advanced(
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	891b      	ldrh	r3, [r3, #8]
 800440e:	b29a      	uxth	r2, r3
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8004416:	f107 0110 	add.w	r1, r7, #16
 800441a:	9304      	str	r3, [sp, #16]
 800441c:	2301      	movs	r3, #1
 800441e:	9303      	str	r3, [sp, #12]
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	9302      	str	r3, [sp, #8]
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	4623      	mov	r3, r4
 8004430:	f002 fc84 	bl	8006d3c <lui_gfx_draw_string_advanced>
 8004434:	e004      	b.n	8004440 <lui_checkbox_draw+0x380>
		return;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <lui_checkbox_draw+0x380>
		return;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <lui_checkbox_draw+0x380>
		return;
 800443e:	bf00      	nop
			mono_palette,
			&bitmap_crop_area,
			1,
			chkbox->label.font);
	}
}
 8004440:	3740      	adds	r7, #64	; 0x40
 8004442:	46bd      	mov	sp, r7
 8004444:	bdb0      	pop	{r4, r5, r7, pc}
 8004446:	bf00      	nop
 8004448:	33333333 	.word	0x33333333
 800444c:	3fd33333 	.word	0x3fd33333
 8004450:	3fe80000 	.word	0x3fe80000
 8004454:	20002464 	.word	0x20002464
 8004458:	9999999a 	.word	0x9999999a
 800445c:	3fc99999 	.word	0x3fc99999
 8004460:	9999999a 	.word	0x9999999a
 8004464:	3fe19999 	.word	0x3fe19999
 8004468:	9999999a 	.word	0x9999999a
 800446c:	3fd99999 	.word	0x3fd99999

08004470 <lui_slider_draw>:
 */

#if defined(LUI_USE_SLIDER)

void lui_slider_draw(lui_obj_t* obj)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b0a1      	sub	sp, #132	; 0x84
 8004474:	af06      	add	r7, sp, #24
 8004476:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_SLIDER) < 0)
 8004478:	210a      	movs	r1, #10
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f003 fc4e 	bl	8007d1c <_lui_verify_obj>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	f2c0 81d8 	blt.w	8004838 <lui_slider_draw+0x3c8>
		return;

	if (!(obj->visible))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7e5b      	ldrb	r3, [r3, #25]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 81d5 	beq.w	800483c <lui_slider_draw+0x3cc>
		return;

	lui_slider_t* slider = (lui_slider_t* )obj->obj_main_data;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8004498:	65fb      	str	r3, [r7, #92]	; 0x5c
	// if no display driver is registered, return
	if (_lui_disp_drv_check() == 0)
 800449a:	f003 fc5b 	bl	8007d54 <_lui_disp_drv_check>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 81cd 	beq.w	8004840 <lui_slider_draw+0x3d0>
		return;

	uint16_t knob_color = slider->style.knob_color;
 80044a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	785b      	ldrb	r3, [r3, #1]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	if (obj->state == LUI_STATE_SELECTED || obj->state == LUI_STATE_PRESSED)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	7b9b      	ldrb	r3, [r3, #14]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d003      	beq.n	80044c4 <lui_slider_draw+0x54>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7b9b      	ldrb	r3, [r3, #14]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d106      	bne.n	80044d2 <lui_slider_draw+0x62>
	{
		knob_color = slider->style.selection_color;
 80044c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c6:	791a      	ldrb	r2, [r3, #4]
 80044c8:	795b      	ldrb	r3, [r3, #5]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	}

	uint8_t is_hor = obj->common_style.width >= obj->common_style.height;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	429a      	cmp	r2, r3
 80044e4:	bf2c      	ite	cs
 80044e6:	2301      	movcs	r3, #1
 80044e8:	2300      	movcc	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	/* For horizontal */
	if (is_hor)
 80044f0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d034      	beq.n	8004562 <lui_slider_draw+0xf2>
	{
		/* draw the filled region (left) first */
		lui_gfx_draw_rect_fill(obj->x, obj->y, slider->knob_center_rel_d, obj->common_style.height, slider->style.bg_filled_color);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b298      	uxth	r0, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	885b      	ldrh	r3, [r3, #2]
 8004502:	b299      	uxth	r1, r3
 8004504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004506:	899b      	ldrh	r3, [r3, #12]
 8004508:	b29a      	uxth	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8004510:	b29c      	uxth	r4, r3
 8004512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004514:	885b      	ldrh	r3, [r3, #2]
 8004516:	b29b      	uxth	r3, r3
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	4623      	mov	r3, r4
 800451c:	f002 fe2e 	bl	800717c <lui_gfx_draw_rect_fill>
		/* draw the remaining region (right)  */
		lui_gfx_draw_rect_fill(obj->x + slider->knob_center_rel_d, obj->y, obj->common_style.width - slider->knob_center_rel_d, obj->common_style.height, obj->common_style.bg_color);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29a      	uxth	r2, r3
 8004526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004528:	899b      	ldrh	r3, [r3, #12]
 800452a:	b29b      	uxth	r3, r3
 800452c:	4413      	add	r3, r2
 800452e:	b298      	uxth	r0, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	885b      	ldrh	r3, [r3, #2]
 8004534:	b299      	uxth	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800453c:	b29a      	uxth	r2, r3
 800453e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004540:	899b      	ldrh	r3, [r3, #12]
 8004542:	b29b      	uxth	r3, r3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800454e:	b29c      	uxth	r4, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004556:	b29b      	uxth	r3, r3
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	4623      	mov	r3, r4
 800455c:	f002 fe0e 	bl	800717c <lui_gfx_draw_rect_fill>
 8004560:	e034      	b.n	80045cc <lui_slider_draw+0x15c>
	}
	/* For vertical */
	else
	{
		/* draw the remaining region (top) first */
		lui_gfx_draw_rect_fill(obj->x, obj->y, obj->common_style.width, slider->knob_center_rel_d, obj->common_style.bg_color);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b298      	uxth	r0, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	885b      	ldrh	r3, [r3, #2]
 800456c:	b299      	uxth	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004574:	b29a      	uxth	r2, r3
 8004576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004578:	899b      	ldrh	r3, [r3, #12]
 800457a:	b29c      	uxth	r4, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004582:	b29b      	uxth	r3, r3
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	4623      	mov	r3, r4
 8004588:	f002 fdf8 	bl	800717c <lui_gfx_draw_rect_fill>
		/* draw the filled region (bottom) */
		lui_gfx_draw_rect_fill(obj->x, obj->y + slider->knob_center_rel_d, obj->common_style.width, obj->common_style.height - slider->knob_center_rel_d, slider->style.bg_filled_color);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b298      	uxth	r0, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	885b      	ldrh	r3, [r3, #2]
 8004596:	b29a      	uxth	r2, r3
 8004598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800459a:	899b      	ldrh	r3, [r3, #12]
 800459c:	b29b      	uxth	r3, r3
 800459e:	4413      	add	r3, r2
 80045a0:	b299      	uxth	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80045a8:	b29c      	uxth	r4, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b4:	899b      	ldrh	r3, [r3, #12]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045be:	885b      	ldrh	r3, [r3, #2]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	4622      	mov	r2, r4
 80045c8:	f002 fdd8 	bl	800717c <lui_gfx_draw_rect_fill>
	}

	// draw the knob
	if (slider->knob_type == LUI_SLIDER_KNOB_TYPE_DEFAULT)
 80045cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ce:	7adb      	ldrb	r3, [r3, #11]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d143      	bne.n	800465c <lui_slider_draw+0x1ec>
	{
		/* For horizontal */
		if (is_hor)
 80045d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01f      	beq.n	800461c <lui_slider_draw+0x1ac>
			lui_gfx_draw_rect_fill(obj->x + slider->knob_center_rel_d - (slider->style.knob_width / 2), obj->y, slider->style.knob_width, obj->common_style.height, knob_color);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e4:	899b      	ldrh	r3, [r3, #12]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ee:	799b      	ldrb	r3, [r3, #6]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	b298      	uxth	r0, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	885b      	ldrh	r3, [r3, #2]
 80045fe:	b299      	uxth	r1, r3
 8004600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004602:	799b      	ldrb	r3, [r3, #6]
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800460c:	b29c      	uxth	r4, r3
 800460e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	4623      	mov	r3, r4
 8004616:	f002 fdb1 	bl	800717c <lui_gfx_draw_rect_fill>
 800461a:	e0f0      	b.n	80047fe <lui_slider_draw+0x38e>
		/* For vertical */
		else
			lui_gfx_draw_rect_fill(obj->x, obj->y + slider->knob_center_rel_d - (slider->style.knob_width / 2), obj->common_style.width, slider->style.knob_width, knob_color);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b298      	uxth	r0, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	885b      	ldrh	r3, [r3, #2]
 8004626:	b29a      	uxth	r2, r3
 8004628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462a:	899b      	ldrh	r3, [r3, #12]
 800462c:	b29b      	uxth	r3, r3
 800462e:	4413      	add	r3, r2
 8004630:	b29a      	uxth	r2, r3
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	799b      	ldrb	r3, [r3, #6]
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	b29b      	uxth	r3, r3
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	b299      	uxth	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004646:	b29a      	uxth	r2, r3
 8004648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800464a:	799b      	ldrb	r3, [r3, #6]
 800464c:	b29c      	uxth	r4, r3
 800464e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	4623      	mov	r3, r4
 8004656:	f002 fd91 	bl	800717c <lui_gfx_draw_rect_fill>
 800465a:	e0d0      	b.n	80047fe <lui_slider_draw+0x38e>

	}
	else if (slider->knob_type == LUI_SLIDER_KNOB_TYPE_TEXT)
 800465c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800465e:	7adb      	ldrb	r3, [r3, #11]
 8004660:	2b02      	cmp	r3, #2
 8004662:	f040 80cc 	bne.w	80047fe <lui_slider_draw+0x38e>
	{
		if (slider->show_value || slider->custom_text)
 8004666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004668:	7c9b      	ldrb	r3, [r3, #18]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d105      	bne.n	800467a <lui_slider_draw+0x20a>
 800466e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004670:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80c2 	beq.w	80047fe <lui_slider_draw+0x38e>
		{
			char s[64];
			if (slider->custom_text && slider->show_value)
 800467a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800467c:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d011      	beq.n	80046a8 <lui_slider_draw+0x238>
 8004684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004686:	7c9b      	ldrb	r3, [r3, #18]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <lui_slider_draw+0x238>
				snprintf(s, 64, "%d %s", obj->value, slider->custom_text);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004692:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8004696:	f107 000c 	add.w	r0, r7, #12
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	4a6a      	ldr	r2, [pc, #424]	; (8004848 <lui_slider_draw+0x3d8>)
 80046a0:	2140      	movs	r1, #64	; 0x40
 80046a2:	f004 fe7b 	bl	800939c <sniprintf>
 80046a6:	e015      	b.n	80046d4 <lui_slider_draw+0x264>
			else if (slider->show_value)
 80046a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046aa:	7c9b      	ldrb	r3, [r3, #18]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <lui_slider_draw+0x252>
				snprintf(s, 64, "%d", obj->value);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f107 000c 	add.w	r0, r7, #12
 80046b8:	4a64      	ldr	r2, [pc, #400]	; (800484c <lui_slider_draw+0x3dc>)
 80046ba:	2140      	movs	r1, #64	; 0x40
 80046bc:	f004 fe6e 	bl	800939c <sniprintf>
 80046c0:	e008      	b.n	80046d4 <lui_slider_draw+0x264>
			else
				snprintf(s, 64, "%s", slider->custom_text);
 80046c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c4:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80046c8:	f107 000c 	add.w	r0, r7, #12
 80046cc:	4a60      	ldr	r2, [pc, #384]	; (8004850 <lui_slider_draw+0x3e0>)
 80046ce:	2140      	movs	r1, #64	; 0x40
 80046d0:	f004 fe64 	bl	800939c <sniprintf>
			uint16_t dim[2];
			lui_gfx_get_string_dimension(s, slider->font, obj->common_style.width, dim);
 80046d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d6:	f8d3 1013 	ldr.w	r1, [r3, #19]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046e6:	f107 000c 	add.w	r0, r7, #12
 80046ea:	f002 fdd3 	bl	8007294 <lui_gfx_get_string_dimension>
			uint16_t txt_x = 0, txt_y = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80046f4:	2300      	movs	r3, #0
 80046f6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			if (slider->is_progress_bar)
 80046fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046fc:	7ddb      	ldrb	r3, [r3, #23]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d024      	beq.n	800474c <lui_slider_draw+0x2dc>
			{
				txt_x = obj->x + (obj->common_style.width - dim[0])/2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800470e:	b29b      	uxth	r3, r3
 8004710:	4619      	mov	r1, r3
 8004712:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004716:	1acb      	subs	r3, r1, r3
 8004718:	0fd9      	lsrs	r1, r3, #31
 800471a:	440b      	add	r3, r1
 800471c:	105b      	asrs	r3, r3, #1
 800471e:	b29b      	uxth	r3, r3
 8004720:	4413      	add	r3, r2
 8004722:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				txt_y = obj->y + (obj->common_style.height - dim[1])/2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	885b      	ldrh	r3, [r3, #2]
 800472a:	b29a      	uxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8004732:	b29b      	uxth	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800473a:	1acb      	subs	r3, r1, r3
 800473c:	0fd9      	lsrs	r1, r3, #31
 800473e:	440b      	add	r3, r1
 8004740:	105b      	asrs	r3, r3, #1
 8004742:	b29b      	uxth	r3, r3
 8004744:	4413      	add	r3, r2
 8004746:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800474a:	e032      	b.n	80047b2 <lui_slider_draw+0x342>
			}
			else
			{
				if (is_hor)
 800474c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004750:	2b00      	cmp	r3, #0
 8004752:	d017      	beq.n	8004784 <lui_slider_draw+0x314>
				{
					txt_x = obj->x + slider->knob_center_rel_d;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29a      	uxth	r2, r3
 800475a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475c:	899b      	ldrh	r3, [r3, #12]
 800475e:	b29b      	uxth	r3, r3
 8004760:	4413      	add	r3, r2
 8004762:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
					if (dim[0] < slider->knob_center_rel_d)
 8004766:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800476a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800476c:	899b      	ldrh	r3, [r3, #12]
 800476e:	b29b      	uxth	r3, r3
 8004770:	429a      	cmp	r2, r3
 8004772:	d21e      	bcs.n	80047b2 <lui_slider_draw+0x342>
						txt_x = txt_x - dim[0];
 8004774:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004778:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004782:	e016      	b.n	80047b2 <lui_slider_draw+0x342>
				}
				else
				{
					txt_y = obj->y + slider->knob_center_rel_d;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	885b      	ldrh	r3, [r3, #2]
 8004788:	b29a      	uxth	r2, r3
 800478a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478c:	899b      	ldrh	r3, [r3, #12]
 800478e:	b29b      	uxth	r3, r3
 8004790:	4413      	add	r3, r2
 8004792:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
					if (dim[1] < slider->knob_center_rel_d)
 8004796:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800479a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479c:	899b      	ldrh	r3, [r3, #12]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d206      	bcs.n	80047b2 <lui_slider_draw+0x342>
						txt_y = txt_y + dim[1];
 80047a4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80047a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80047ac:	4413      	add	r3, r2
 80047ae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				}
			}

			lui_area_t txt_area = {
 80047b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047b6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80047ba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80047be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				.x = txt_x,
				.y = txt_y,
				.w = dim[0],
 80047c2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
			lui_area_t txt_area = {
 80047c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				.h = dim[1]
 80047ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
			lui_area_t txt_area = {
 80047ce:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
			};
			lui_gfx_draw_string_advanced(s, &txt_area, slider->style.knob_color, 0, NULL, NULL, NULL, 0, slider->font);
 80047d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047da:	f8d3 3013 	ldr.w	r3, [r3, #19]
 80047de:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80047e2:	f107 000c 	add.w	r0, r7, #12
 80047e6:	9304      	str	r3, [sp, #16]
 80047e8:	2300      	movs	r3, #0
 80047ea:	9303      	str	r3, [sp, #12]
 80047ec:	2300      	movs	r3, #0
 80047ee:	9302      	str	r3, [sp, #8]
 80047f0:	2300      	movs	r3, #0
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	2300      	movs	r3, #0
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2300      	movs	r3, #0
 80047fa:	f002 fa9f 	bl	8006d3c <lui_gfx_draw_string_advanced>
		}
	}


	// draw the border if needed
	if (obj->common_style.border_visible == 1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7b5b      	ldrb	r3, [r3, #13]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d11d      	bne.n	8004842 <lui_slider_draw+0x3d2>
	{
		lui_gfx_draw_rect(obj->x, obj->y,  obj->common_style.width,  obj->common_style.height, 1, obj->common_style.border_color);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b298      	uxth	r0, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	885b      	ldrh	r3, [r3, #2]
 8004810:	b299      	uxth	r1, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004818:	b29a      	uxth	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8004820:	b29c      	uxth	r4, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004828:	b29b      	uxth	r3, r3
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	2301      	movs	r3, #1
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4623      	mov	r3, r4
 8004832:	f002 fc53 	bl	80070dc <lui_gfx_draw_rect>
 8004836:	e004      	b.n	8004842 <lui_slider_draw+0x3d2>
		return;
 8004838:	bf00      	nop
 800483a:	e002      	b.n	8004842 <lui_slider_draw+0x3d2>
		return;
 800483c:	bf00      	nop
 800483e:	e000      	b.n	8004842 <lui_slider_draw+0x3d2>
		return;
 8004840:	bf00      	nop
	}
}
 8004842:	376c      	adds	r7, #108	; 0x6c
 8004844:	46bd      	mov	sp, r7
 8004846:	bd90      	pop	{r4, r7, pc}
 8004848:	0800b9bc 	.word	0x0800b9bc
 800484c:	0800b9c4 	.word	0x0800b9c4
 8004850:	0800b9c8 	.word	0x0800b9c8

08004854 <lui_btngrid_draw>:
 */

#if defined(LUI_USE_BUTTONGRID)

void lui_btngrid_draw(lui_obj_t* obj)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b091      	sub	sp, #68	; 0x44
 8004858:	af06      	add	r7, sp, #24
 800485a:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_BTNGRID) < 0)
 800485c:	210b      	movs	r1, #11
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f003 fa5c 	bl	8007d1c <_lui_verify_obj>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	f2c0 817a 	blt.w	8004b60 <lui_btngrid_draw+0x30c>
		return;

	if (!(obj->visible))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7e5b      	ldrb	r3, [r3, #25]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8177 	beq.w	8004b64 <lui_btngrid_draw+0x310>
		return;

	// if no display driver is registered, return
	if (_lui_disp_drv_check() == 0)
 8004876:	f003 fa6d 	bl	8007d54 <_lui_disp_drv_check>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8173 	beq.w	8004b68 <lui_btngrid_draw+0x314>
		return;

	lui_btngrid_t* btngrid = (lui_btngrid_t* )(obj->obj_main_data);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8004888:	61fb      	str	r3, [r7, #28]

	uint16_t btn_color = btngrid->style.btn_bg_color;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	7eda      	ldrb	r2, [r3, #27]
 800488e:	7f1b      	ldrb	r3, [r3, #28]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	4313      	orrs	r3, r2
 8004894:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t btn_width = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	837b      	strh	r3, [r7, #26]
	uint16_t btn_height = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	833b      	strh	r3, [r7, #24]


	/* If no event occured yet drawing function is called, that means first time rendering of a btngrid.
	 * So, draw the base first
	*/
	if (/* obj->event == LUI_EVENT_NONE && obj->needs_refresh */ btngrid->needs_full_render)
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	7d1b      	ldrb	r3, [r3, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d015      	beq.n	80048d2 <lui_btngrid_draw+0x7e>
	{
		lui_gfx_draw_rect_fill(obj->x, obj->y, obj->common_style.width,  obj->common_style.height, obj->common_style.bg_color);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b298      	uxth	r0, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	885b      	ldrh	r3, [r3, #2]
 80048b0:	b299      	uxth	r1, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80048c0:	b29c      	uxth	r4, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	4623      	mov	r3, r4
 80048ce:	f002 fc55 	bl	800717c <lui_gfx_draw_rect_fill>
	}

	uint16_t j = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (uint16_t i = 0; i < btngrid->btn_cnt; i++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	847b      	strh	r3, [r7, #34]	; 0x22
 80048da:	e130      	b.n	8004b3e <lui_btngrid_draw+0x2ea>
	{
		while (btngrid->texts[j][0] == '\n' || btngrid->texts[j][0] == '\0')
		{
			++j;
 80048dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048de:	3301      	adds	r3, #1
 80048e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		while (btngrid->texts[j][0] == '\n' || btngrid->texts[j][0] == '\0')
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b0a      	cmp	r3, #10
 80048f2:	d0f3      	beq.n	80048dc <lui_btngrid_draw+0x88>
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0ea      	beq.n	80048dc <lui_btngrid_draw+0x88>

		/**
		 * Draw a button only if the btngrid needs full render,
		 * or when a buttons index matches an active button's index
		 */
		if (btngrid->needs_full_render || (i == btngrid->active_btn_index || i == last_act_btn_index))
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	7d1b      	ldrb	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10d      	bne.n	800492a <lui_btngrid_draw+0xd6>
 800490e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8004916:	b212      	sxth	r2, r2
 8004918:	4293      	cmp	r3, r2
 800491a:	d006      	beq.n	800492a <lui_btngrid_draw+0xd6>
 800491c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800491e:	4a94      	ldr	r2, [pc, #592]	; (8004b70 <lui_btngrid_draw+0x31c>)
 8004920:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004924:	4293      	cmp	r3, r2
 8004926:	f040 8104 	bne.w	8004b32 <lui_btngrid_draw+0x2de>
		{
			if (!(btngrid->btn_properties[i] & LUI_BTNGRID_MASK_BTN_HIDDEN))
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004930:	4413      	add	r3, r2
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	f040 80fa 	bne.w	8004b32 <lui_btngrid_draw+0x2de>
			{
				btn_color = btngrid->style.btn_bg_color;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	7eda      	ldrb	r2, [r3, #27]
 8004942:	7f1b      	ldrb	r3, [r3, #28]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	4313      	orrs	r3, r2
 8004948:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (i == btngrid->active_btn_index)
 800494a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8004952:	b212      	sxth	r2, r2
 8004954:	4293      	cmp	r3, r2
 8004956:	d115      	bne.n	8004984 <lui_btngrid_draw+0x130>
				{
					if (obj->state == LUI_STATE_SELECTED)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	7b9b      	ldrb	r3, [r3, #14]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d106      	bne.n	800496e <lui_btngrid_draw+0x11a>
					{
						btn_color = btngrid->style.btn_pressed_color;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	7e5a      	ldrb	r2, [r3, #25]
 8004964:	7e9b      	ldrb	r3, [r3, #26]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	4313      	orrs	r3, r2
 800496a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800496c:	e02b      	b.n	80049c6 <lui_btngrid_draw+0x172>
					}
					else if (obj->state == LUI_STATE_PRESSED)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7b9b      	ldrb	r3, [r3, #14]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d127      	bne.n	80049c6 <lui_btngrid_draw+0x172>
					{
						btn_color = btngrid->style.btn_pressed_color;
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	7e5a      	ldrb	r2, [r3, #25]
 800497a:	7e9b      	ldrb	r3, [r3, #26]
 800497c:	021b      	lsls	r3, r3, #8
 800497e:	4313      	orrs	r3, r2
 8004980:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004982:	e020      	b.n	80049c6 <lui_btngrid_draw+0x172>

				/**
				 * This is to handle when a checkable button lost its focus but check state
				 * is changed to "Checked". Or, when manually the check state is set
				 */
				else if (i == last_act_btn_index || btngrid->needs_full_render)
 8004984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004986:	4a7a      	ldr	r2, [pc, #488]	; (8004b70 <lui_btngrid_draw+0x31c>)
 8004988:	f9b2 2000 	ldrsh.w	r2, [r2]
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <lui_btngrid_draw+0x144>
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	7d1b      	ldrb	r3, [r3, #20]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d016      	beq.n	80049c6 <lui_btngrid_draw+0x172>
				{
					if (btngrid->btn_properties[i] & LUI_BTNGRID_MASK_BTN_CHECKABLE)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800499e:	4413      	add	r3, r2
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00d      	beq.n	80049c6 <lui_btngrid_draw+0x172>
					{
						if (btngrid->btn_properties[i] & LUI_BTNGRID_MASK_BTN_CHECKED)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049b0:	4413      	add	r3, r2
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	b25b      	sxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	da05      	bge.n	80049c6 <lui_btngrid_draw+0x172>
						{
							btn_color = btngrid->style.btn_pressed_color;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	7e5a      	ldrb	r2, [r3, #25]
 80049be:	7e9b      	ldrb	r3, [r3, #26]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	4313      	orrs	r3, r2
 80049c4:	84fb      	strh	r3, [r7, #38]	; 0x26
						}
					}
				}

				btn_width = btngrid->btn_area[i].x2 - btngrid->btn_area[i].x1 + 1;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4413      	add	r3, r2
 80049d0:	889b      	ldrh	r3, [r3, #4]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	6899      	ldr	r1, [r3, #8]
 80049d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	440b      	add	r3, r1
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3301      	adds	r3, #1
 80049e8:	837b      	strh	r3, [r7, #26]
				btn_height = btngrid->btn_area[i].y2 - btngrid->btn_area[i].y1 + 1;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	4413      	add	r3, r2
 80049f4:	88db      	ldrh	r3, [r3, #6]
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	6899      	ldr	r1, [r3, #8]
 80049fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	440b      	add	r3, r1
 8004a02:	885b      	ldrh	r3, [r3, #2]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	833b      	strh	r3, [r7, #24]
				lui_gfx_draw_rect_fill(btngrid->btn_area[i].x1, btngrid->btn_area[i].y1, btn_width, btn_height, btn_color);
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b298      	uxth	r0, r3
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	4413      	add	r3, r2
 8004a26:	885b      	ldrh	r3, [r3, #2]
 8004a28:	b299      	uxth	r1, r3
 8004a2a:	8b3c      	ldrh	r4, [r7, #24]
 8004a2c:	8b7a      	ldrh	r2, [r7, #26]
 8004a2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4623      	mov	r3, r4
 8004a34:	f002 fba2 	bl	800717c <lui_gfx_draw_rect_fill>

				if (obj->common_style.border_visible)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	7b5b      	ldrb	r3, [r3, #13]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d019      	beq.n	8004a74 <lui_btngrid_draw+0x220>
				{
					lui_gfx_draw_rect(btngrid->btn_area[i].x1, btngrid->btn_area[i].y1, btn_width, btn_height, 1, obj->common_style.border_color);
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b298      	uxth	r0, r3
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4413      	add	r3, r2
 8004a58:	885b      	ldrh	r3, [r3, #2]
 8004a5a:	b299      	uxth	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8b3c      	ldrh	r4, [r7, #24]
 8004a66:	8b7a      	ldrh	r2, [r7, #26]
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	4623      	mov	r3, r4
 8004a70:	f002 fb34 	bl	80070dc <lui_gfx_draw_rect>
				}

				uint16_t str_width_height[2];
				lui_gfx_get_string_dimension(btngrid->texts[j], btngrid->font, btn_width, str_width_height);
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f8d3 100e 	ldr.w	r1, [r3, #14]
 8004a86:	f107 0310 	add.w	r3, r7, #16
 8004a8a:	8b7a      	ldrh	r2, [r7, #26]
 8004a8c:	f002 fc02 	bl	8007294 <lui_gfx_get_string_dimension>

				str_width_height[0] = str_width_height[0] > btn_width ? btn_width : str_width_height[0];
 8004a90:	8a3b      	ldrh	r3, [r7, #16]
 8004a92:	8b7a      	ldrh	r2, [r7, #26]
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bf28      	it	cs
 8004a98:	4613      	movcs	r3, r2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	823b      	strh	r3, [r7, #16]
				str_width_height[1] = str_width_height[1] > btn_height ? btn_height : str_width_height[1];
 8004a9e:	8a7b      	ldrh	r3, [r7, #18]
 8004aa0:	8b3a      	ldrh	r2, [r7, #24]
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bf28      	it	cs
 8004aa6:	4613      	movcs	r3, r2
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	827b      	strh	r3, [r7, #18]

				uint16_t temp_x = btngrid->btn_area[i].x1 + (btn_width - str_width_height[0]) / 2;
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	8b7b      	ldrh	r3, [r7, #26]
 8004abc:	8a39      	ldrh	r1, [r7, #16]
 8004abe:	1a5b      	subs	r3, r3, r1
 8004ac0:	0fd9      	lsrs	r1, r3, #31
 8004ac2:	440b      	add	r3, r1
 8004ac4:	105b      	asrs	r3, r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	82fb      	strh	r3, [r7, #22]
				uint16_t temp_y = btngrid->btn_area[i].y1 + (btn_height - str_width_height[1]) / 2;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	885b      	ldrh	r3, [r3, #2]
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	8b3b      	ldrh	r3, [r7, #24]
 8004adc:	8a79      	ldrh	r1, [r7, #18]
 8004ade:	1a5b      	subs	r3, r3, r1
 8004ae0:	0fd9      	lsrs	r1, r3, #31
 8004ae2:	440b      	add	r3, r1
 8004ae4:	105b      	asrs	r3, r3, #1
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	82bb      	strh	r3, [r7, #20]

				lui_area_t btngrd_btn_area = {
 8004aec:	8afb      	ldrh	r3, [r7, #22]
 8004aee:	813b      	strh	r3, [r7, #8]
 8004af0:	8abb      	ldrh	r3, [r7, #20]
 8004af2:	817b      	strh	r3, [r7, #10]
					.x = temp_x,
					.y = temp_y,
					.w = str_width_height[0],
 8004af4:	8a3b      	ldrh	r3, [r7, #16]
				lui_area_t btngrd_btn_area = {
 8004af6:	81bb      	strh	r3, [r7, #12]
					.h = str_width_height[1]
 8004af8:	8a7b      	ldrh	r3, [r7, #18]
				lui_area_t btngrd_btn_area = {
 8004afa:	81fb      	strh	r3, [r7, #14]
				};
				lui_gfx_draw_string_advanced(btngrid->texts[j], &btngrd_btn_area, btngrid->style.btn_label_color, 0, NULL, NULL, NULL, 0, btngrid->font);
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8004b16:	f107 0108 	add.w	r1, r7, #8
 8004b1a:	9304      	str	r3, [sp, #16]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9303      	str	r3, [sp, #12]
 8004b20:	2300      	movs	r3, #0
 8004b22:	9302      	str	r3, [sp, #8]
 8004b24:	2300      	movs	r3, #0
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f002 f905 	bl	8006d3c <lui_gfx_draw_string_advanced>
			}
		}

		++j;
 8004b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b34:	3301      	adds	r3, #1
 8004b36:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (uint16_t i = 0; i < btngrid->btn_cnt; i++)
 8004b38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	7b1b      	ldrb	r3, [r3, #12]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b46:	429a      	cmp	r2, r3
 8004b48:	f4ff aecb 	bcc.w	80048e2 <lui_btngrid_draw+0x8e>
	}
	last_act_btn_index = btngrid->active_btn_index;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004b52:	b21a      	sxth	r2, r3
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <lui_btngrid_draw+0x31c>)
 8004b56:	801a      	strh	r2, [r3, #0]
	btngrid->needs_full_render = 0;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	751a      	strb	r2, [r3, #20]
 8004b5e:	e004      	b.n	8004b6a <lui_btngrid_draw+0x316>
		return;
 8004b60:	bf00      	nop
 8004b62:	e002      	b.n	8004b6a <lui_btngrid_draw+0x316>
		return;
 8004b64:	bf00      	nop
 8004b66:	e000      	b.n	8004b6a <lui_btngrid_draw+0x316>
		return;
 8004b68:	bf00      	nop
}
 8004b6a:	372c      	adds	r7, #44	; 0x2c
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd90      	pop	{r4, r7, pc}
 8004b70:	2000004c 	.word	0x2000004c

08004b74 <_lui_btngrid_calc_btn_area>:
	_lui_object_set_need_refresh(obj);
	btngrid->needs_full_render = 1;
}

void _lui_btngrid_calc_btn_area(lui_obj_t* obj)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08c      	sub	sp, #48	; 0x30
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_BTNGRID) < 0)
 8004b7c:	210b      	movs	r1, #11
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f003 f8cc 	bl	8007d1c <_lui_verify_obj>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f2c0 810c 	blt.w	8004da4 <_lui_btngrid_calc_btn_area+0x230>
		return;

	lui_btngrid_t* btngrid = (lui_btngrid_t* )(obj->obj_main_data);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8004b92:	61fb      	str	r3, [r7, #28]
	uint8_t units_in_row = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t btns_in_row = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t btn_index = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t unit_index = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint16_t raw_height = obj->common_style.height / btngrid->row_cnt;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	7b5b      	ldrb	r3, [r3, #13]
 8004bba:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bbe:	837b      	strh	r3, [r7, #26]


	float w = 0;
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t h = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	84fb      	strh	r3, [r7, #38]	; 0x26

	for (uint16_t i = 0; i < btngrid->btn_cnt + btngrid->row_cnt; i++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004bce:	e0d6      	b.n	8004d7e <_lui_btngrid_calc_btn_area+0x20a>
	{
		while (strcmp(btngrid->texts[i], "\n") != 0 && strcmp(btngrid->texts[i], "\0") != 0)
		{
			units_in_row += (btngrid->btn_properties[unit_index++] & LUI_BTNGRID_MASK_BTN_WIDTH_UNIT);
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004bd8:	1c59      	adds	r1, r3, #1
 8004bda:	f887 102c 	strb.w	r1, [r7, #44]	; 0x2c
 8004bde:	4413      	add	r3, r2
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bec:	4413      	add	r3, r2
 8004bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			++btns_in_row;
 8004bf2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			++i;
 8004bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bfe:	3301      	adds	r3, #1
 8004c00:	84bb      	strh	r3, [r7, #36]	; 0x24
		while (strcmp(btngrid->texts[i], "\n") != 0 && strcmp(btngrid->texts[i], "\0") != 0)
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4967      	ldr	r1, [pc, #412]	; (8004dac <_lui_btngrid_calc_btn_area+0x238>)
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fb fae5 	bl	80001e0 <strcmp>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <_lui_btngrid_calc_btn_area+0xba>
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1d0      	bne.n	8004bd0 <_lui_btngrid_calc_btn_area+0x5c>
		}

		float raw_width = (float)(obj->common_style.width) / (float)units_in_row;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c4e:	edc7 7a05 	vstr	s15, [r7, #20]

		w = 0.0;
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
		h += raw_height;
 8004c58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c5a:	8b7b      	ldrh	r3, [r7, #26]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (int j = 0; j < btns_in_row; j++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	623b      	str	r3, [r7, #32]
 8004c64:	e07c      	b.n	8004d60 <_lui_btngrid_calc_btn_area+0x1ec>
		{
			_lui_area_priv_t area;
			float this_btn_w = raw_width * (float)(btngrid->btn_properties[btn_index] & LUI_BTNGRID_MASK_BTN_WIDTH_UNIT);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c6e:	4413      	add	r3, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c86:	edc7 7a04 	vstr	s15, [r7, #16]
			w += this_btn_w;
 8004c8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c96:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

			area.x1 = obj->x + w - this_btn_w + btngrid->style.btn_margin_hor;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	ee07 3a90 	vmov	s15, r3
 8004ca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ca8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	7d5b      	ldrb	r3, [r3, #21]
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ccc:	ee17 3a90 	vmov	r3, s15
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	813b      	strh	r3, [r7, #8]
			area.x2 = obj->x + w - btngrid->style.btn_margin_hor;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ce2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	7d5b      	ldrb	r3, [r3, #21]
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cfe:	ee17 3a90 	vmov	r3, s15
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	81bb      	strh	r3, [r7, #12]
			area.y1 = obj->y + h - raw_height + btngrid->style.btn_margin_vert;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	885b      	ldrh	r3, [r3, #2]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d0e:	4413      	add	r3, r2
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	8b7b      	ldrh	r3, [r7, #26]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	7d9b      	ldrb	r3, [r3, #22]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	817b      	strh	r3, [r7, #10]
			area.y2 = obj->y + h - btngrid->style.btn_margin_vert;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	885b      	ldrh	r3, [r3, #2]
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d2c:	4413      	add	r3, r2
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	7d9b      	ldrb	r3, [r3, #22]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	81fb      	strh	r3, [r7, #14]

			btngrid->btn_area[btn_index++] = area;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d44:	1c59      	adds	r1, r3, #1
 8004d46:	f887 102d 	strb.w	r1, [r7, #45]	; 0x2d
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f107 0308 	add.w	r3, r7, #8
 8004d54:	cb03      	ldmia	r3!, {r0, r1}
 8004d56:	6010      	str	r0, [r2, #0]
 8004d58:	6051      	str	r1, [r2, #4]
		for (int j = 0; j < btns_in_row; j++)
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	623b      	str	r3, [r7, #32]
 8004d60:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d64:	6a3a      	ldr	r2, [r7, #32]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	f6ff af7d 	blt.w	8004c66 <_lui_btngrid_calc_btn_area+0xf2>

		}

		btns_in_row = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		units_in_row = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (uint16_t i = 0; i < btngrid->btn_cnt + btngrid->row_cnt; i++)
 8004d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	7b1b      	ldrb	r3, [r3, #12]
 8004d84:	4619      	mov	r1, r3
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	7b5b      	ldrb	r3, [r3, #13]
 8004d8a:	440b      	add	r3, r1
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	f6ff af38 	blt.w	8004c02 <_lui_btngrid_calc_btn_area+0x8e>
	}

	_lui_object_set_need_refresh(obj);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 f824 	bl	8005de0 <_lui_object_set_need_refresh>
	((lui_btngrid_t*)(obj->obj_main_data))->needs_full_render = 1;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8004d9e:	2201      	movs	r2, #1
 8004da0:	751a      	strb	r2, [r3, #20]
 8004da2:	e000      	b.n	8004da6 <_lui_btngrid_calc_btn_area+0x232>
		return;
 8004da4:	bf00      	nop
}
 8004da6:	3730      	adds	r7, #48	; 0x30
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	0800b9cc 	.word	0x0800b9cc

08004db0 <lui_textbox_draw>:
 */

#if defined(LUI_USE_TEXTBOX)

void lui_textbox_draw(lui_obj_t* obj)
{
 8004db0:	b590      	push	{r4, r7, lr}
 8004db2:	b091      	sub	sp, #68	; 0x44
 8004db4:	af06      	add	r7, sp, #24
 8004db6:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_TEXTBOX) < 0)
 8004db8:	210c      	movs	r1, #12
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f002 ffae 	bl	8007d1c <_lui_verify_obj>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f2c0 817e 	blt.w	80050c4 <lui_textbox_draw+0x314>
		return;

	if (!(obj->visible))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7e5b      	ldrb	r3, [r3, #25]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 817b 	beq.w	80050c8 <lui_textbox_draw+0x318>
		return;

	// if no display driver is registered, return
	if (_lui_disp_drv_check() == 0)
 8004dd2:	f002 ffbf 	bl	8007d54 <_lui_disp_drv_check>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 8177 	beq.w	80050cc <lui_textbox_draw+0x31c>
		return;


	lui_textbox_t* txtbox = (lui_textbox_t* )(obj->obj_main_data);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8004de4:	61fb      	str	r3, [r7, #28]

	if (txtbox->needs_full_render == 1)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	7b9b      	ldrb	r3, [r3, #14]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d134      	bne.n	8004e58 <lui_textbox_draw+0xa8>
	{
		lui_gfx_draw_rect_fill(obj->x, obj->y, obj->common_style.width, obj->common_style.height, obj->common_style.bg_color);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b298      	uxth	r0, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	885b      	ldrh	r3, [r3, #2]
 8004df8:	b299      	uxth	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8004e08:	b29c      	uxth	r4, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	4623      	mov	r3, r4
 8004e16:	f002 f9b1 	bl	800717c <lui_gfx_draw_rect_fill>
		if (obj->common_style.border_visible)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	7b5b      	ldrb	r3, [r3, #13]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d017      	beq.n	8004e52 <lui_textbox_draw+0xa2>
		{

			lui_gfx_draw_rect(obj->x, obj->y, obj->common_style.width, obj->common_style.height, 1, obj->common_style.border_color);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b298      	uxth	r0, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	885b      	ldrh	r3, [r3, #2]
 8004e2c:	b299      	uxth	r1, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8004e3c:	b29c      	uxth	r4, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	2301      	movs	r3, #1
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	f002 f945 	bl	80070dc <lui_gfx_draw_rect>
		}
		txtbox->needs_full_render = 0;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2200      	movs	r2, #0
 8004e56:	739a      	strb	r2, [r3, #14]
	}

	if (txtbox->text_buffer == NULL)
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8137 	beq.w	80050d0 <lui_textbox_draw+0x320>
		return;

	uint8_t pad = 10;
 8004e62:	230a      	movs	r3, #10
 8004e64:	76fb      	strb	r3, [r7, #27]
	uint16_t caret_x = obj->x + pad;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	7efb      	ldrb	r3, [r7, #27]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	4413      	add	r3, r2
 8004e72:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t caret_y = obj->y + pad;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	885b      	ldrh	r3, [r3, #2]
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	7efb      	ldrb	r3, [r7, #27]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t caret_h = txtbox->font->bitmap->size_y;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	88db      	ldrh	r3, [r3, #6]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	76bb      	strb	r3, [r7, #26]
	uint8_t caret_w = 4;
 8004e8e:	2304      	movs	r3, #4
 8004e90:	767b      	strb	r3, [r7, #25]
	uint8_t glyph_w = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t glyph_h = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	763b      	strb	r3, [r7, #24]

	lui_area_t txtbx_area = {
		.x = obj->x + pad,
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	7efb      	ldrb	r3, [r7, #27]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	b29b      	uxth	r3, r3
	lui_area_t txtbx_area = {
 8004eaa:	81bb      	strh	r3, [r7, #12]
		.y = obj->y + pad,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	885b      	ldrh	r3, [r3, #2]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	7efb      	ldrb	r3, [r7, #27]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	b29b      	uxth	r3, r3
	lui_area_t txtbx_area = {
 8004eba:	81fb      	strh	r3, [r7, #14]
		.w = obj->common_style.width - 2*pad,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	7efb      	ldrb	r3, [r7, #27]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	b29b      	uxth	r3, r3
	lui_area_t txtbx_area = {
 8004ed0:	823b      	strh	r3, [r7, #16]
		.h = obj->common_style.height - 2*pad
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	7efb      	ldrb	r3, [r7, #27]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	b29b      	uxth	r3, r3
	lui_area_t txtbx_area = {
 8004ee6:	827b      	strh	r3, [r7, #18]
	};
	lui_gfx_draw_string_advanced(
		txtbox->text_buffer,
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	6818      	ldr	r0, [r3, #0]
	lui_gfx_draw_string_advanced(
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004efa:	b29c      	uxth	r4, r3
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f107 010c 	add.w	r1, r7, #12
 8004f04:	9304      	str	r3, [sp, #16]
 8004f06:	2301      	movs	r3, #1
 8004f08:	9303      	str	r3, [sp, #12]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	9302      	str	r3, [sp, #8]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	2300      	movs	r3, #0
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	4623      	mov	r3, r4
 8004f18:	f001 ff10 	bl	8006d3c <lui_gfx_draw_string_advanced>
		1,
		txtbox->font);


	/* No need to draw caret when textbox is in Idle state */
	if (obj->state == LUI_STATE_IDLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7b9b      	ldrb	r3, [r3, #14]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80d7 	beq.w	80050d4 <lui_textbox_draw+0x324>
		return;
	/* Calculate caret coordinates */
	for (uint16_t i = 0; i < txtbox->caret_index; i++)
 8004f26:	2300      	movs	r3, #0
 8004f28:	843b      	strh	r3, [r7, #32]
 8004f2a:	e07d      	b.n	8005028 <lui_textbox_draw+0x278>
	{
		if (txtbox->text_buffer[i] == '\n')
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	8c3b      	ldrh	r3, [r7, #32]
 8004f32:	4413      	add	r3, r2
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b0a      	cmp	r3, #10
 8004f38:	d10f      	bne.n	8004f5a <lui_textbox_draw+0x1aa>
		{
			caret_x = obj->x + pad;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	7efb      	ldrb	r3, [r7, #27]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	4413      	add	r3, r2
 8004f46:	84fb      	strh	r3, [r7, #38]	; 0x26
			caret_y += (txtbox->font->bitmap->size_y);	//go to next row (row height = height of space)
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	88db      	ldrh	r3, [r3, #6]
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f54:	4413      	add	r3, r2
 8004f56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f58:	e063      	b.n	8005022 <lui_textbox_draw+0x272>
		}
		else
		{
			// Find the glyph for the char from the font
			const _lui_glyph_t* glyph = _lui_gfx_get_glyph_from_char(txtbox->text_buffer[i], txtbox->font);
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	8c3b      	ldrh	r3, [r7, #32]
 8004f60:	4413      	add	r3, r2
 8004f62:	781a      	ldrb	r2, [r3, #0]
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f002 fa17 	bl	800739e <_lui_gfx_get_glyph_from_char>
 8004f70:	6178      	str	r0, [r7, #20]
			glyph_h = txtbox->font->bitmap->size_y;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	88db      	ldrh	r3, [r3, #6]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	763b      	strb	r3, [r7, #24]

			if (glyph == NULL)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <lui_textbox_draw+0x1e8>
				glyph_w = txtbox->font->bitmap->size_y / 2;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	88db      	ldrh	r3, [r3, #6]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f96:	e011      	b.n	8004fbc <lui_textbox_draw+0x20c>
			/* Width of space is not available in font map, so we calc w based on h */
			else if (glyph->character == ' ')
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d109      	bne.n	8004fb4 <lui_textbox_draw+0x204>
				glyph_w = txtbox->font->bitmap->size_y / 4;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	88db      	ldrh	r3, [r3, #6]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb2:	e003      	b.n	8004fbc <lui_textbox_draw+0x20c>
			else
				glyph_w = glyph->width;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	785b      	ldrb	r3, [r3, #1]
 8004fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


			// check if not enough space available at the right side
			if (caret_x + glyph_w > obj->x + obj->common_style.width - pad)
 8004fbc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fc2:	441a      	add	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	4619      	mov	r1, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4419      	add	r1, r3
 8004fd6:	7efb      	ldrb	r3, [r7, #27]
 8004fd8:	1acb      	subs	r3, r1, r3
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	dd0b      	ble.n	8004ff6 <lui_textbox_draw+0x246>
			{
				caret_x = obj->x + pad;			//go to first col
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	7efb      	ldrb	r3, [r7, #27]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	4413      	add	r3, r2
 8004fea:	84fb      	strh	r3, [r7, #38]	; 0x26
				caret_y += glyph_h;					//go to next row
 8004fec:	7e3b      	ldrb	r3, [r7, #24]
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ff2:	4413      	add	r3, r2
 8004ff4:	84bb      	strh	r3, [r7, #36]	; 0x24
			}
			// check if not enough space available at the bottom
			if(caret_y + glyph_h > obj->y + obj->common_style.height - pad)
 8004ff6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ff8:	7e3b      	ldrb	r3, [r7, #24]
 8004ffa:	441a      	add	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	885b      	ldrh	r3, [r3, #2]
 8005000:	b29b      	uxth	r3, r3
 8005002:	4619      	mov	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800500a:	b29b      	uxth	r3, r3
 800500c:	4419      	add	r1, r3
 800500e:	7efb      	ldrb	r3, [r7, #27]
 8005010:	1acb      	subs	r3, r1, r3
 8005012:	429a      	cmp	r2, r3
 8005014:	dc10      	bgt.n	8005038 <lui_textbox_draw+0x288>
			{
				break;
			}
			caret_x += glyph_w;		//next char position
 8005016:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800501a:	b29a      	uxth	r2, r3
 800501c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800501e:	4413      	add	r3, r2
 8005020:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (uint16_t i = 0; i < txtbox->caret_index; i++)
 8005022:	8c3b      	ldrh	r3, [r7, #32]
 8005024:	3301      	adds	r3, #1
 8005026:	843b      	strh	r3, [r7, #32]
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	895b      	ldrh	r3, [r3, #10]
 800502c:	b29b      	uxth	r3, r3
 800502e:	8c3a      	ldrh	r2, [r7, #32]
 8005030:	429a      	cmp	r2, r3
 8005032:	f4ff af7b 	bcc.w	8004f2c <lui_textbox_draw+0x17c>
 8005036:	e000      	b.n	800503a <lui_textbox_draw+0x28a>
				break;
 8005038:	bf00      	nop
		}
	}


	if (caret_x > obj->x)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005042:	429a      	cmp	r2, r3
 8005044:	d902      	bls.n	800504c <lui_textbox_draw+0x29c>
		--caret_x;
 8005046:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005048:	3b01      	subs	r3, #1
 800504a:	84fb      	strh	r3, [r7, #38]	; 0x26
	/* Draw the caret now, only if the caret does not go out of the boundary */
	if ((caret_x + caret_w < obj->x + obj->common_style.width - pad) &&
 800504c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800504e:	7e7b      	ldrb	r3, [r7, #25]
 8005050:	441a      	add	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	4619      	mov	r1, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005060:	b29b      	uxth	r3, r3
 8005062:	4419      	add	r1, r3
 8005064:	7efb      	ldrb	r3, [r7, #27]
 8005066:	1acb      	subs	r3, r1, r3
 8005068:	429a      	cmp	r2, r3
 800506a:	da34      	bge.n	80050d6 <lui_textbox_draw+0x326>
		(caret_y + caret_h - 1 < obj->y + obj->common_style.height))
 800506c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800506e:	7ebb      	ldrb	r3, [r7, #26]
 8005070:	441a      	add	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	885b      	ldrh	r3, [r3, #2]
 8005076:	b29b      	uxth	r3, r3
 8005078:	4619      	mov	r1, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005080:	b29b      	uxth	r3, r3
 8005082:	440b      	add	r3, r1
	if ((caret_x + caret_w < obj->x + obj->common_style.width - pad) &&
 8005084:	429a      	cmp	r2, r3
 8005086:	dc26      	bgt.n	80050d6 <lui_textbox_draw+0x326>
	{
		lui_gfx_draw_line(caret_x + 2, caret_y + 1, caret_x + 2, caret_y + caret_h - 1, caret_w, ~(obj->common_style.bg_color));
 8005088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800508a:	3302      	adds	r3, #2
 800508c:	b298      	uxth	r0, r3
 800508e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005090:	3301      	adds	r3, #1
 8005092:	b299      	uxth	r1, r3
 8005094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005096:	3302      	adds	r3, #2
 8005098:	b29c      	uxth	r4, r3
 800509a:	7ebb      	ldrb	r3, [r7, #26]
 800509c:	b29a      	uxth	r2, r3
 800509e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050a0:	4413      	add	r3, r2
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	7e7b      	ldrb	r3, [r7, #25]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	4613      	mov	r3, r2
 80050bc:	4622      	mov	r2, r4
 80050be:	f001 ff7d 	bl	8006fbc <lui_gfx_draw_line>
 80050c2:	e008      	b.n	80050d6 <lui_textbox_draw+0x326>
		return;
 80050c4:	bf00      	nop
 80050c6:	e006      	b.n	80050d6 <lui_textbox_draw+0x326>
		return;
 80050c8:	bf00      	nop
 80050ca:	e004      	b.n	80050d6 <lui_textbox_draw+0x326>
		return;
 80050cc:	bf00      	nop
 80050ce:	e002      	b.n	80050d6 <lui_textbox_draw+0x326>
		return;
 80050d0:	bf00      	nop
 80050d2:	e000      	b.n	80050d6 <lui_textbox_draw+0x326>
		return;
 80050d4:	bf00      	nop
		//lui_gfx_draw_char(txtbox->text_buffer[txtbox->caret_index], caret_x, caret_y, obj->common_style.bg_color, txtbox->style.text_color, 1, txtbox->font);
	}
}
 80050d6:	372c      	adds	r7, #44	; 0x2c
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd90      	pop	{r4, r7, pc}

080050dc <lui_panel_draw>:

	return obj;
}

void lui_panel_draw(lui_obj_t* obj)
{
 80050dc:	b590      	push	{r4, r7, lr}
 80050de:	b089      	sub	sp, #36	; 0x24
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_PANEL) < 0)
 80050e4:	2105      	movs	r1, #5
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f002 fe18 	bl	8007d1c <_lui_verify_obj>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	db5d      	blt.n	80051ae <lui_panel_draw+0xd2>
		return;

	if (!(obj->visible))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	7e5b      	ldrb	r3, [r3, #25]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d05b      	beq.n	80051b2 <lui_panel_draw+0xd6>
		return;

	lui_panel_t* panel = (lui_panel_t* )(obj->obj_main_data);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8005100:	617b      	str	r3, [r7, #20]
	if (panel->bg_image)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01e      	beq.n	8005148 <lui_panel_draw+0x6c>
	{
		lui_area_t crop = {
 800510a:	2300      	movs	r3, #0
 800510c:	81bb      	strh	r3, [r7, #12]
 800510e:	2300      	movs	r3, #0
 8005110:	81fb      	strh	r3, [r7, #14]
			.x = 0,
			.y = 0,
			.w = obj->common_style.width,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005118:	b29b      	uxth	r3, r3
		lui_area_t crop = {
 800511a:	823b      	strh	r3, [r7, #16]
			.h = obj->common_style.height
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005122:	b29b      	uxth	r3, r3
		lui_area_t crop = {
 8005124:	827b      	strh	r3, [r7, #18]
		};
		lui_gfx_draw_bitmap(
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	1d19      	adds	r1, r3, #4
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29a      	uxth	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	885b      	ldrh	r3, [r3, #2]
 8005138:	b29c      	uxth	r4, r3
 800513a:	f107 030c 	add.w	r3, r7, #12
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	4623      	mov	r3, r4
 8005142:	f002 fa1d 	bl	8007580 <lui_gfx_draw_bitmap>
 8005146:	e015      	b.n	8005174 <lui_panel_draw+0x98>
			&crop);
	}
	else
	{
		/* Else, just draw background color */
		lui_gfx_draw_rect_fill(obj->x, obj->y, obj->common_style.width,  obj->common_style.height, obj->common_style.bg_color);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b298      	uxth	r0, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	885b      	ldrh	r3, [r3, #2]
 8005152:	b299      	uxth	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800515a:	b29a      	uxth	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005162:	b29c      	uxth	r4, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800516a:	b29b      	uxth	r3, r3
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	4623      	mov	r3, r4
 8005170:	f002 f804 	bl	800717c <lui_gfx_draw_rect_fill>
	}

	/* Draw optional border */
	if (obj->common_style.border_visible == 1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7b5b      	ldrb	r3, [r3, #13]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d11b      	bne.n	80051b4 <lui_panel_draw+0xd8>
		lui_gfx_draw_rect(obj->x, obj->y, obj->common_style.width, obj->common_style.height, 1, obj->common_style.border_color);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b298      	uxth	r0, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	885b      	ldrh	r3, [r3, #2]
 8005186:	b299      	uxth	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005196:	b29c      	uxth	r4, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	2301      	movs	r3, #1
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	4623      	mov	r3, r4
 80051a8:	f001 ff98 	bl	80070dc <lui_gfx_draw_rect>
 80051ac:	e002      	b.n	80051b4 <lui_panel_draw+0xd8>
		return;
 80051ae:	bf00      	nop
 80051b0:	e000      	b.n	80051b4 <lui_panel_draw+0xd8>
		return;
 80051b2:	bf00      	nop
}
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd90      	pop	{r4, r7, pc}
	...

080051bc <lui_scene_create>:

/*
 * Create a empty scene with default values and return the scene variable
 */
lui_obj_t* lui_scene_create()
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
	// if total created objects become more than max allowed objects, don't create the object
	if ( g_lui_main->total_created_objects + 1 > LUI_MAX_OBJECTS)
 80051c2:	4b35      	ldr	r3, [pc, #212]	; (8005298 <lui_scene_create+0xdc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	7f1b      	ldrb	r3, [r3, #28]
 80051c8:	2bc7      	cmp	r3, #199	; 0xc7
 80051ca:	d901      	bls.n	80051d0 <lui_scene_create+0x14>
		return NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e05f      	b.n	8005290 <lui_scene_create+0xd4>
	 g_lui_main->total_created_objects++;
 80051d0:	4b31      	ldr	r3, [pc, #196]	; (8005298 <lui_scene_create+0xdc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	7f1a      	ldrb	r2, [r3, #28]
 80051d6:	3201      	adds	r2, #1
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	771a      	strb	r2, [r3, #28]

	lui_scene_t* initial_scene =  (lui_scene_t* )_lui_mem_alloc(sizeof(*initial_scene));
 80051dc:	200d      	movs	r0, #13
 80051de:	f002 fdf1 	bl	8007dc4 <_lui_mem_alloc>
 80051e2:	6078      	str	r0, [r7, #4]
	if (initial_scene == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <lui_scene_create+0x32>
		return NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e050      	b.n	8005290 <lui_scene_create+0xd4>

	initial_scene->font = g_lui_main->default_font;
 80051ee:	4b2a      	ldr	r3, [pc, #168]	; (8005298 <lui_scene_create+0xdc>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8c3 2009 	str.w	r2, [r3, #9]
	initial_scene->bg_image = NULL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	705a      	strb	r2, [r3, #1]
 8005204:	2200      	movs	r2, #0
 8005206:	709a      	strb	r2, [r3, #2]
 8005208:	2200      	movs	r2, #0
 800520a:	70da      	strb	r2, [r3, #3]
	/* Color palette for mono 1-bpp bitmap image */
	initial_scene->img_pal.fore_color = LUI_RGB(255, 2555, 255);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f062 0220 	orn	r2, r2, #32
 8005214:	711a      	strb	r2, [r3, #4]
 8005216:	f04f 32ff 	mov.w	r2, #4294967295
 800521a:	715a      	strb	r2, [r3, #5]
	initial_scene->img_pal.back_color = 0;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	719a      	strb	r2, [r3, #6]
 8005222:	2200      	movs	r2, #0
 8005224:	71da      	strb	r2, [r3, #7]
	initial_scene->img_pal.is_backgrnd = 1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	721a      	strb	r2, [r3, #8]
	lui_obj_t* obj = _lui_object_create();
 800522c:	f000 f8a4 	bl	8005378 <_lui_object_create>
 8005230:	6038      	str	r0, [r7, #0]
	if (obj == NULL)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <lui_scene_create+0x80>
		return NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	e029      	b.n	8005290 <lui_scene_create+0xd4>
	// object type
	obj->obj_type = LUI_OBJ_SCENE;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2206      	movs	r2, #6
 8005240:	76da      	strb	r2, [r3, #27]
	// object common style
	obj->common_style.width =  g_lui_main->disp_drv->display_hor_res;
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <lui_scene_create+0xdc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	895b      	ldrh	r3, [r3, #10]
 800524a:	b29a      	uxth	r2, r3
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f8a3 2009 	strh.w	r2, [r3, #9]
	obj->common_style.height =  g_lui_main->disp_drv->display_vert_res;
 8005252:	4b11      	ldr	r3, [pc, #68]	; (8005298 <lui_scene_create+0xdc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	899b      	ldrh	r3, [r3, #12]
 800525a:	b29a      	uxth	r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	f8a3 200b 	strh.w	r2, [r3, #11]
	obj->common_style.bg_color = LUI_STYLE_SCENE_BG_COLOR;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2200      	movs	r2, #0
 8005266:	f042 0205 	orr.w	r2, r2, #5
 800526a:	715a      	strb	r2, [r3, #5]
 800526c:	2200      	movs	r2, #0
 800526e:	f042 0211 	orr.w	r2, r2, #17
 8005272:	719a      	strb	r2, [r3, #6]


	//obj->index =  g_lui_main->total_scenes;
	obj->obj_main_data = (void* )initial_scene;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	f8c3 2029 	str.w	r2, [r3, #41]	; 0x29

	_lui_object_set_need_refresh(obj);
 800527c:	6838      	ldr	r0, [r7, #0]
 800527e:	f000 fdaf 	bl	8005de0 <_lui_object_set_need_refresh>
	 //g_lui_main->scenes[obj->index] = obj;
	 g_lui_main->total_scenes++;
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <lui_scene_create+0xdc>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	7eda      	ldrb	r2, [r3, #27]
 8005288:	3201      	adds	r2, #1
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	76da      	strb	r2, [r3, #27]

	return obj;
 800528e:	683b      	ldr	r3, [r7, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20002464 	.word	0x20002464

0800529c <lui_scene_draw>:

void lui_scene_draw(lui_obj_t* obj)
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b089      	sub	sp, #36	; 0x24
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_SCENE) < 0)
 80052a4:	2106      	movs	r1, #6
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f002 fd38 	bl	8007d1c <_lui_verify_obj>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	db41      	blt.n	8005336 <lui_scene_draw+0x9a>
		return;

	if (!(obj->visible))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	7e5b      	ldrb	r3, [r3, #25]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d03f      	beq.n	800533a <lui_scene_draw+0x9e>
		return;

	lui_scene_t* scene = (lui_scene_t* )(obj->obj_main_data);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 80052c0:	617b      	str	r3, [r7, #20]
	if (scene->bg_image)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01e      	beq.n	8005308 <lui_scene_draw+0x6c>
	{
		lui_area_t crop = {
 80052ca:	2300      	movs	r3, #0
 80052cc:	81bb      	strh	r3, [r7, #12]
 80052ce:	2300      	movs	r3, #0
 80052d0:	81fb      	strh	r3, [r7, #14]
			.x = 0,
			.y = 0,
			.w = obj->common_style.width,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80052d8:	b29b      	uxth	r3, r3
		lui_area_t crop = {
 80052da:	823b      	strh	r3, [r7, #16]
			.h = obj->common_style.height
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80052e2:	b29b      	uxth	r3, r3
		lui_area_t crop = {
 80052e4:	827b      	strh	r3, [r7, #18]
		};
		lui_gfx_draw_bitmap(
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	1d19      	adds	r1, r3, #4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	885b      	ldrh	r3, [r3, #2]
 80052f8:	b29c      	uxth	r4, r3
 80052fa:	f107 030c 	add.w	r3, r7, #12
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	4623      	mov	r3, r4
 8005302:	f002 f93d 	bl	8007580 <lui_gfx_draw_bitmap>
 8005306:	e019      	b.n	800533c <lui_scene_draw+0xa0>
			&scene->img_pal,
			obj->x, obj->y,
			&crop);
	}
	else
		lui_gfx_draw_rect_fill(obj->x, obj->y, obj->common_style.width, obj->common_style.height, obj->common_style.bg_color);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b298      	uxth	r0, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	885b      	ldrh	r3, [r3, #2]
 8005312:	b299      	uxth	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800531a:	b29a      	uxth	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005322:	b29c      	uxth	r4, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800532a:	b29b      	uxth	r3, r3
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	4623      	mov	r3, r4
 8005330:	f001 ff24 	bl	800717c <lui_gfx_draw_rect_fill>
 8005334:	e002      	b.n	800533c <lui_scene_draw+0xa0>
		return;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <lui_scene_draw+0xa0>
		return;
 800533a:	bf00      	nop
}
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	bd90      	pop	{r4, r7, pc}
	...

08005344 <lui_scene_set_active>:

// 	_lui_object_set_need_refresh(obj_scene);
// }

void lui_scene_set_active(lui_obj_t* obj)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	if (_lui_verify_obj(obj, LUI_OBJ_SCENE) < 0)
 800534c:	2106      	movs	r1, #6
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f002 fce4 	bl	8007d1c <_lui_verify_obj>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	db07      	blt.n	800536a <lui_scene_set_active+0x26>
		return;

	 g_lui_main->active_scene = obj;
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <lui_scene_set_active+0x30>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	605a      	str	r2, [r3, #4]
	_lui_object_set_need_refresh(obj);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fd3c 	bl	8005de0 <_lui_object_set_need_refresh>
 8005368:	e000      	b.n	800536c <lui_scene_set_active+0x28>
		return;
 800536a:	bf00      	nop
}
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20002464 	.word	0x20002464

08005378 <_lui_object_create>:
 * 				LUI_OBJECT (generic) functions
 *-------------------------------------------------------------------------------
 */

lui_obj_t* _lui_object_create(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
	lui_obj_t* obj =  (lui_obj_t* )_lui_mem_alloc(sizeof(*obj));
 800537e:	202d      	movs	r0, #45	; 0x2d
 8005380:	f002 fd20 	bl	8007dc4 <_lui_mem_alloc>
 8005384:	6078      	str	r0, [r7, #4]
	if (obj == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <_lui_object_create+0x18>
		return NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	e058      	b.n	8005442 <_lui_object_create+0xca>

	obj->x = 0;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	705a      	strb	r2, [r3, #1]
	obj->y = 0;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	709a      	strb	r2, [r3, #2]
 80053a0:	2200      	movs	r2, #0
 80053a2:	70da      	strb	r2, [r3, #3]
	obj->layer = 0;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	711a      	strb	r2, [r3, #4]
	obj->state = LUI_STATE_IDLE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	739a      	strb	r2, [r3, #14]
	obj->event = LUI_EVENT_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	73da      	strb	r2, [r3, #15]
	obj->value = 0;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	741a      	strb	r2, [r3, #16]
 80053bc:	2200      	movs	r2, #0
 80053be:	745a      	strb	r2, [r3, #17]
 80053c0:	2200      	movs	r2, #0
 80053c2:	749a      	strb	r2, [r3, #18]
 80053c4:	2200      	movs	r2, #0
 80053c6:	74da      	strb	r2, [r3, #19]
	obj->obj_event_cb = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	751a      	strb	r2, [r3, #20]
 80053ce:	2200      	movs	r2, #0
 80053d0:	755a      	strb	r2, [r3, #21]
 80053d2:	2200      	movs	r2, #0
 80053d4:	759a      	strb	r2, [r3, #22]
 80053d6:	2200      	movs	r2, #0
 80053d8:	75da      	strb	r2, [r3, #23]
	obj->needs_refresh = 1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	761a      	strb	r2, [r3, #24]
	obj->visible = 1;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	765a      	strb	r2, [r3, #25]
	obj->enabled = 0;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	769a      	strb	r2, [r3, #26]
	obj->parent = NULL;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	771a      	strb	r2, [r3, #28]
 80053f2:	2200      	movs	r2, #0
 80053f4:	775a      	strb	r2, [r3, #29]
 80053f6:	2200      	movs	r2, #0
 80053f8:	779a      	strb	r2, [r3, #30]
 80053fa:	2200      	movs	r2, #0
 80053fc:	77da      	strb	r2, [r3, #31]
	obj->first_child = NULL;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	obj->next_sibling = NULL;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	obj->children_count = 0;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2020 	strb.w	r2, [r3, #32]
	g_lui_needs_render = 1;
 800543a:	4b04      	ldr	r3, [pc, #16]	; (800544c <_lui_object_create+0xd4>)
 800543c:	2201      	movs	r2, #1
 800543e:	701a      	strb	r2, [r3, #0]
	return obj;
 8005440:	687b      	ldr	r3, [r7, #4]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20002458 	.word	0x20002458

08005450 <lui_object_add_to_parent>:

void lui_object_add_to_parent(lui_obj_t* obj_child, lui_obj_t* obj_parent)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
	if (obj_child == NULL || obj_parent == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d043      	beq.n	80054e8 <lui_object_add_to_parent+0x98>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d040      	beq.n	80054e8 <lui_object_add_to_parent+0x98>
		return;
	// scene cannot be added to any parent, so return
	if (obj_child->obj_type == LUI_OBJ_SCENE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	7edb      	ldrb	r3, [r3, #27]
 800546a:	2b06      	cmp	r3, #6
 800546c:	d03e      	beq.n	80054ec <lui_object_add_to_parent+0x9c>
		return;
	// only panel and scene can be parent, otherwise return
	if (obj_parent->obj_type != LUI_OBJ_PANEL && obj_parent->obj_type != LUI_OBJ_SCENE)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	7edb      	ldrb	r3, [r3, #27]
 8005472:	2b05      	cmp	r3, #5
 8005474:	d003      	beq.n	800547e <lui_object_add_to_parent+0x2e>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	7edb      	ldrb	r3, [r3, #27]
 800547a:	2b06      	cmp	r3, #6
 800547c:	d138      	bne.n	80054f0 <lui_object_add_to_parent+0xa0>
		return;

	//add the ui element with a new index to scene only if no parent already exists
	if (obj_child->parent != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d136      	bne.n	80054f4 <lui_object_add_to_parent+0xa4>
		return;


	if (obj_parent->first_child == NULL)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <lui_object_add_to_parent+0x4a>
	{
		obj_parent->first_child = obj_child;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	f8c3 2021 	str.w	r2, [r3, #33]	; 0x21
 8005498:	e011      	b.n	80054be <lui_object_add_to_parent+0x6e>
	}
	else
	{
		lui_obj_t* next_child = obj_parent->first_child;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 80054a0:	60fb      	str	r3, [r7, #12]

		while (next_child->next_sibling != NULL)
 80054a2:	e003      	b.n	80054ac <lui_object_add_to_parent+0x5c>
		{
			next_child = next_child->next_sibling;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 80054aa:	60fb      	str	r3, [r7, #12]
		while (next_child->next_sibling != NULL)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f6      	bne.n	80054a4 <lui_object_add_to_parent+0x54>
		}

		next_child->next_sibling = obj_child;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	f8c3 2025 	str.w	r2, [r3, #37]	; 0x25
	}
	obj_child->parent = obj_parent;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	61da      	str	r2, [r3, #28]
	lui_object_set_layer(obj_child,obj_child->layer);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	791b      	ldrb	r3, [r3, #4]
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9fc 	bl	80058c8 <lui_object_set_layer>
	obj_parent->children_count++;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054d6:	3301      	adds	r3, #1
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f883 2020 	strb.w	r2, [r3, #32]
	_lui_object_set_need_refresh(obj_child);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fc7d 	bl	8005de0 <_lui_object_set_need_refresh>
 80054e6:	e006      	b.n	80054f6 <lui_object_add_to_parent+0xa6>
		return;
 80054e8:	bf00      	nop
 80054ea:	e004      	b.n	80054f6 <lui_object_add_to_parent+0xa6>
		return;
 80054ec:	bf00      	nop
 80054ee:	e002      	b.n	80054f6 <lui_object_add_to_parent+0xa6>
		return;
 80054f0:	bf00      	nop
 80054f2:	e000      	b.n	80054f6 <lui_object_add_to_parent+0xa6>
		return;
 80054f4:	bf00      	nop
}
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <lui_object_get_child>:
	_lui_object_set_need_refresh(obj->parent);
	obj->parent = NULL;
}

lui_obj_t* lui_object_get_child(lui_obj_t* obj_parent, uint16_t child_index)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	807b      	strh	r3, [r7, #2]
	if (obj_parent == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <lui_object_get_child+0x16>
		return NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	e020      	b.n	8005554 <lui_object_get_child+0x58>
	if (obj_parent->children_count == 0 || child_index >= obj_parent->children_count)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d006      	beq.n	800552a <lui_object_get_child+0x2e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005522:	b29b      	uxth	r3, r3
 8005524:	887a      	ldrh	r2, [r7, #2]
 8005526:	429a      	cmp	r2, r3
 8005528:	d301      	bcc.n	800552e <lui_object_get_child+0x32>
		return NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	e012      	b.n	8005554 <lui_object_get_child+0x58>

	lui_obj_t* child = obj_parent->first_child;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 8005534:	60fb      	str	r3, [r7, #12]

	for (uint16_t i = 0; i < child_index; i++)
 8005536:	2300      	movs	r3, #0
 8005538:	817b      	strh	r3, [r7, #10]
 800553a:	e006      	b.n	800554a <lui_object_get_child+0x4e>
	{
		child = child->next_sibling;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 8005542:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < child_index; i++)
 8005544:	897b      	ldrh	r3, [r7, #10]
 8005546:	3301      	adds	r3, #1
 8005548:	817b      	strh	r3, [r7, #10]
 800554a:	897a      	ldrh	r2, [r7, #10]
 800554c:	887b      	ldrh	r3, [r7, #2]
 800554e:	429a      	cmp	r2, r3
 8005550:	d3f4      	bcc.n	800553c <lui_object_get_child+0x40>
	}

	return child;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <lui_object_set_position>:

void lui_object_set_position(lui_obj_t* obj, uint16_t x, uint16_t y)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 8005566:	af00      	add	r7, sp, #0
 8005568:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800556c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005570:	6018      	str	r0, [r3, #0]
 8005572:	4608      	mov	r0, r1
 8005574:	4611      	mov	r1, r2
 8005576:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800557a:	f2a3 3336 	subw	r3, r3, #822	; 0x336
 800557e:	4602      	mov	r2, r0
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005586:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800558a:	460a      	mov	r2, r1
 800558c:	801a      	strh	r2, [r3, #0]
	if (obj == NULL)
 800558e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005592:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 811b 	beq.w	80057d4 <lui_object_set_position+0x274>
		return;
	if (obj->obj_type == LUI_OBJ_SCENE)
 800559e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80055a2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	7edb      	ldrb	r3, [r3, #27]
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	f000 8114 	beq.w	80057d8 <lui_object_set_position+0x278>
		return;
	if (obj->x == x && obj->y == y)
 80055b0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80055b4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80055c2:	f2a2 3236 	subw	r2, r2, #822	; 0x336
 80055c6:	8812      	ldrh	r2, [r2, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d10e      	bne.n	80055ea <lui_object_set_position+0x8a>
 80055cc:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80055d0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	885b      	ldrh	r3, [r3, #2]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80055de:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 80055e2:	8812      	ldrh	r2, [r2, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	f000 80f9 	beq.w	80057dc <lui_object_set_position+0x27c>
		return;

	uint16_t obj_old_x = obj->x;
 80055ea:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80055ee:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	781a      	ldrb	r2, [r3, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8a7 332a 	strh.w	r3, [r7, #810]	; 0x32a
	uint16_t obj_old_y = obj->y;
 8005600:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005604:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	789a      	ldrb	r2, [r3, #2]
 800560c:	78db      	ldrb	r3, [r3, #3]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	4313      	orrs	r3, r2
 8005612:	f8a7 3328 	strh.w	r3, [r7, #808]	; 0x328

	if (obj->parent != NULL)
 8005616:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800561a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d02a      	beq.n	800567c <lui_object_set_position+0x11c>
	{
		obj->x = obj->parent->x + x;
 8005626:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800562a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29a      	uxth	r2, r3
 8005636:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800563a:	f2a3 3336 	subw	r3, r3, #822	; 0x336
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	4413      	add	r3, r2
 8005642:	b29a      	uxth	r2, r3
 8005644:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005648:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	801a      	strh	r2, [r3, #0]
		obj->y = obj->parent->y + y;
 8005650:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005654:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	885b      	ldrh	r3, [r3, #2]
 800565e:	b29a      	uxth	r2, r3
 8005660:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005664:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	4413      	add	r3, r2
 800566c:	b29a      	uxth	r2, r3
 800566e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005672:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	805a      	strh	r2, [r3, #2]
 800567a:	e015      	b.n	80056a8 <lui_object_set_position+0x148>
	}
	else
	{
		obj->x = x;
 800567c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005680:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f507 724e 	add.w	r2, r7, #824	; 0x338
 800568a:	f2a2 3236 	subw	r2, r2, #822	; 0x336
 800568e:	8812      	ldrh	r2, [r2, #0]
 8005690:	801a      	strh	r2, [r3, #0]
		obj->y = y;
 8005692:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005696:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80056a0:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 80056a4:	8812      	ldrh	r2, [r2, #0]
 80056a6:	805a      	strh	r2, [r3, #2]
	}

	lui_obj_t* child_of_root = obj->first_child;
 80056a8:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80056ac:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 80056b6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	while (child_of_root != NULL)
 80056ba:	e07c      	b.n	80057b6 <lui_object_set_position+0x256>
	{
		lui_obj_t* obj_stack[LUI_MAX_OBJECTS] = {NULL};
 80056bc:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80056c0:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80056c4:	4618      	mov	r0, r3
 80056c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80056ca:	461a      	mov	r2, r3
 80056cc:	2100      	movs	r1, #0
 80056ce:	f003 f86b 	bl	80087a8 <memset>
		uint8_t stack_counter = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
		obj_stack[stack_counter++] = child_of_root;
 80056d8:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	f887 2333 	strb.w	r2, [r7, #819]	; 0x333
 80056e2:	4619      	mov	r1, r3
 80056e4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80056e8:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80056ec:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80056f0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		child_of_root = child_of_root->next_sibling;
 80056f4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80056f8:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 80056fc:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

		// loop until stack is empty. in this way all children (and their children too) will be traversed
		while (stack_counter > 0)
 8005700:	e055      	b.n	80057ae <lui_object_set_position+0x24e>
		{
			// pop from stack
			lui_obj_t* child = obj_stack[--stack_counter];
 8005702:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8005706:	3b01      	subs	r3, #1
 8005708:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
 800570c:	f897 2333 	ldrb.w	r2, [r7, #819]	; 0x333
 8005710:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005714:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8005718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

			child->x = child->x + (obj->x - obj_old_x); // offset the child (current obj) based on parent
 8005720:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b29a      	uxth	r2, r3
 8005728:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800572c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b299      	uxth	r1, r3
 8005736:	f8b7 332a 	ldrh.w	r3, [r7, #810]	; 0x32a
 800573a:	1acb      	subs	r3, r1, r3
 800573c:	b29b      	uxth	r3, r3
 800573e:	4413      	add	r3, r2
 8005740:	b29a      	uxth	r2, r3
 8005742:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005746:	801a      	strh	r2, [r3, #0]
			child->y = child->y + (obj->y - obj_old_y);
 8005748:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800574c:	885b      	ldrh	r3, [r3, #2]
 800574e:	b29a      	uxth	r2, r3
 8005750:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005754:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	885b      	ldrh	r3, [r3, #2]
 800575c:	b299      	uxth	r1, r3
 800575e:	f8b7 3328 	ldrh.w	r3, [r7, #808]	; 0x328
 8005762:	1acb      	subs	r3, r1, r3
 8005764:	b29b      	uxth	r3, r3
 8005766:	4413      	add	r3, r2
 8005768:	b29a      	uxth	r2, r3
 800576a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800576e:	805a      	strh	r2, [r3, #2]

			// get the child of current object
			child = child->first_child;
 8005770:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005774:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 8005778:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
			// push all children of current object into stack too
			while (child != NULL)
 800577c:	e013      	b.n	80057a6 <lui_object_set_position+0x246>
			{
				// push child to stack
				obj_stack[stack_counter++] = child;
 800577e:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	f887 2333 	strb.w	r2, [r7, #819]	; 0x333
 8005788:	4619      	mov	r1, r3
 800578a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800578e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8005792:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8005796:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				// get sibling of the child
				child = child->next_sibling;
 800579a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800579e:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 80057a2:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
			while (child != NULL)
 80057a6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e7      	bne.n	800577e <lui_object_set_position+0x21e>
		while (stack_counter > 0)
 80057ae:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1a5      	bne.n	8005702 <lui_object_set_position+0x1a2>
	while (child_of_root != NULL)
 80057b6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f47f af7e 	bne.w	80056bc <lui_object_set_position+0x15c>

		}
	}

	// object's position is changed, so parent must be redrawn
	_lui_object_set_need_refresh(obj->parent);
 80057c0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80057c4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fb07 	bl	8005de0 <_lui_object_set_need_refresh>
 80057d2:	e004      	b.n	80057de <lui_object_set_position+0x27e>
		return;
 80057d4:	bf00      	nop
 80057d6:	e002      	b.n	80057de <lui_object_set_position+0x27e>
		return;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <lui_object_set_position+0x27e>
		return;
 80057dc:	bf00      	nop
}
 80057de:	f507 774e 	add.w	r7, r7, #824	; 0x338
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <lui_object_set_area>:
		return;
	lui_object_set_position(obj, obj->x, y);
}

void lui_object_set_area(lui_obj_t* obj, uint16_t width, uint16_t height)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	807b      	strh	r3, [r7, #2]
 80057f2:	4613      	mov	r3, r2
 80057f4:	803b      	strh	r3, [r7, #0]
	if (obj == NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d03a      	beq.n	8005872 <lui_object_set_area+0x8c>
		return;

	if (obj->common_style.width == width && obj->common_style.height == height)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005802:	b29b      	uxth	r3, r3
 8005804:	887a      	ldrh	r2, [r7, #2]
 8005806:	429a      	cmp	r2, r3
 8005808:	d106      	bne.n	8005818 <lui_object_set_area+0x32>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005810:	b29b      	uxth	r3, r3
 8005812:	883a      	ldrh	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d02e      	beq.n	8005876 <lui_object_set_area+0x90>
		return;

	if (obj->common_style.width < width && obj->common_style.height < height)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800581e:	b29b      	uxth	r3, r3
 8005820:	887a      	ldrh	r2, [r7, #2]
 8005822:	429a      	cmp	r2, r3
 8005824:	d90a      	bls.n	800583c <lui_object_set_area+0x56>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800582c:	b29b      	uxth	r3, r3
 800582e:	883a      	ldrh	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d903      	bls.n	800583c <lui_object_set_area+0x56>
		_lui_object_set_need_refresh(obj);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fad3 	bl	8005de0 <_lui_object_set_need_refresh>
 800583a:	e004      	b.n	8005846 <lui_object_set_area+0x60>
	else
		_lui_object_set_need_refresh(obj->parent);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	4618      	mov	r0, r3
 8005842:	f000 facd 	bl	8005de0 <_lui_object_set_need_refresh>


	obj->common_style.width = width;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	887a      	ldrh	r2, [r7, #2]
 800584a:	f8a3 2009 	strh.w	r2, [r3, #9]
	obj->common_style.height = height;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	883a      	ldrh	r2, [r7, #0]
 8005852:	f8a3 200b 	strh.w	r2, [r3, #11]

	#if defined(LUI_USE_BUTTONGRID)
	/* If object is an button grid, we need to recalculate the layout when area is changed
	 * But, we must check if text map is not null.
	 */
	if (obj->obj_type == LUI_OBJ_BTNGRID && ((lui_btngrid_t* )(obj->obj_main_data))->texts != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	7edb      	ldrb	r3, [r3, #27]
 800585a:	2b0b      	cmp	r3, #11
 800585c:	d10c      	bne.n	8005878 <lui_object_set_area+0x92>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <lui_object_set_area+0x92>
	{
		_lui_btngrid_calc_btn_area(obj);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff f982 	bl	8004b74 <_lui_btngrid_calc_btn_area>
 8005870:	e002      	b.n	8005878 <lui_object_set_area+0x92>
		return;
 8005872:	bf00      	nop
 8005874:	e000      	b.n	8005878 <lui_object_set_area+0x92>
		return;
 8005876:	bf00      	nop
	}
	#endif

}
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <lui_object_set_callback>:
	obj->common_style.bg_color = bg_color;
	_lui_object_set_need_refresh(obj);
}

void lui_object_set_callback(lui_obj_t* obj, void (*obj_event_cb)(lui_obj_t* ))
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
	if (obj == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <lui_object_set_callback+0x18>
		return;
	obj->obj_event_cb = obj_event_cb;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	615a      	str	r2, [r3, #20]
 8005894:	e000      	b.n	8005898 <lui_object_set_callback+0x1a>
		return;
 8005896:	bf00      	nop
}
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <lui_object_get_event>:
		return -1;
	return obj->state;
}

int8_t lui_object_get_event(lui_obj_t* obj)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
	if (obj == NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <lui_object_get_event+0x14>
		return -1;
 80058b0:	f04f 33ff 	mov.w	r3, #4294967295
 80058b4:	e002      	b.n	80058bc <lui_object_get_event+0x1a>
	return obj->event;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	7bdb      	ldrb	r3, [r3, #15]
 80058ba:	b25b      	sxtb	r3, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <lui_object_set_layer>:
	}
	return obj->enabled;
}

void lui_object_set_layer(lui_obj_t* obj, uint8_t layer_index)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80058d4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80058d8:	6018      	str	r0, [r3, #0]
 80058da:	460a      	mov	r2, r1
 80058dc:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80058e0:	f2a3 3335 	subw	r3, r3, #821	; 0x335
 80058e4:	701a      	strb	r2, [r3, #0]
	if (obj == NULL)
 80058e6:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80058ea:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80d6 	beq.w	8005aa2 <lui_object_set_layer+0x1da>
		return;
	if (obj->obj_type == LUI_OBJ_SCENE)
 80058f6:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80058fa:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	7edb      	ldrb	r3, [r3, #27]
 8005902:	2b06      	cmp	r3, #6
 8005904:	f000 80cf 	beq.w	8005aa6 <lui_object_set_layer+0x1de>
		return;

	int16_t layer_diff = layer_index - obj->layer;
 8005908:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800590c:	f2a3 3335 	subw	r3, r3, #821	; 0x335
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	b29a      	uxth	r2, r3
 8005914:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005918:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	791b      	ldrb	r3, [r3, #4]
 8005920:	b29b      	uxth	r3, r3
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	b29b      	uxth	r3, r3
 8005926:	f8a7 332a 	strh.w	r3, [r7, #810]	; 0x32a
	if (obj->parent != NULL)
 800592a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800592e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d030      	beq.n	800599c <lui_object_set_layer+0xd4>
	{
		obj->layer = obj->parent->layer + layer_index;
 800593a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800593e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	791a      	ldrb	r2, [r3, #4]
 8005948:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800594c:	f2a3 3335 	subw	r3, r3, #821	; 0x335
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	4413      	add	r3, r2
 8005954:	b2da      	uxtb	r2, r3
 8005956:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800595a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	711a      	strb	r2, [r3, #4]
		if (obj->layer < obj->parent->layer)
 8005962:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005966:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	791a      	ldrb	r2, [r3, #4]
 800596e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005972:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	791b      	ldrb	r3, [r3, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d218      	bcs.n	80059b2 <lui_object_set_layer+0xea>
			obj->layer = obj->parent->layer;
 8005980:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005984:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	791a      	ldrb	r2, [r3, #4]
 800598e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005992:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	711a      	strb	r2, [r3, #4]
 800599a:	e00a      	b.n	80059b2 <lui_object_set_layer+0xea>
	}
	else
	{
		obj->layer = layer_index;
 800599c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80059a0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80059aa:	f2a2 3235 	subw	r2, r2, #821	; 0x335
 80059ae:	7812      	ldrb	r2, [r2, #0]
 80059b0:	711a      	strb	r2, [r3, #4]
	}

	lui_obj_t* child_of_root = obj->first_child;
 80059b2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80059b6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 80059c0:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	while (child_of_root != NULL)
 80059c4:	e05f      	b.n	8005a86 <lui_object_set_layer+0x1be>
	{
		lui_obj_t* obj_stack[LUI_MAX_OBJECTS] = {NULL};
 80059c6:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80059ca:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80059ce:	4618      	mov	r0, r3
 80059d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80059d4:	461a      	mov	r2, r3
 80059d6:	2100      	movs	r1, #0
 80059d8:	f002 fee6 	bl	80087a8 <memset>
		uint8_t stack_counter = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
		obj_stack[stack_counter++] = child_of_root;
 80059e2:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	f887 2333 	strb.w	r2, [r7, #819]	; 0x333
 80059ec:	4619      	mov	r1, r3
 80059ee:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80059f2:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80059f6:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80059fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		child_of_root = child_of_root->next_sibling;
 80059fe:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005a02:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 8005a06:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

		// loop until stack is empty. in this way all children (and their children too) will be traversed
		while (stack_counter > 0)
 8005a0a:	e038      	b.n	8005a7e <lui_object_set_layer+0x1b6>
		{
			// pop from stack
			lui_obj_t* child = obj_stack[--stack_counter];
 8005a0c:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8005a10:	3b01      	subs	r3, #1
 8005a12:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
 8005a16:	f897 2333 	ldrb.w	r2, [r7, #819]	; 0x333
 8005a1a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005a1e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

			child->layer = child->layer + layer_diff;
 8005a2a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005a2e:	791a      	ldrb	r2, [r3, #4]
 8005a30:	f8b7 332a 	ldrh.w	r3, [r7, #810]	; 0x32a
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	4413      	add	r3, r2
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005a3e:	711a      	strb	r2, [r3, #4]

			// get the child of current object
			child = child->first_child;
 8005a40:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005a44:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 8005a48:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
			// push all children of current object into stack too
			while (child != NULL)
 8005a4c:	e013      	b.n	8005a76 <lui_object_set_layer+0x1ae>
			{
				// push child to stack
				obj_stack[stack_counter++] = child;
 8005a4e:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	f887 2333 	strb.w	r2, [r7, #819]	; 0x333
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005a5e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8005a62:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8005a66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				// get sibling of the child
				child = child->next_sibling;
 8005a6a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005a6e:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 8005a72:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
			while (child != NULL)
 8005a76:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e7      	bne.n	8005a4e <lui_object_set_layer+0x186>
		while (stack_counter > 0)
 8005a7e:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1c2      	bne.n	8005a0c <lui_object_set_layer+0x144>
	while (child_of_root != NULL)
 8005a86:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d19b      	bne.n	80059c6 <lui_object_set_layer+0xfe>

		}
	}

	// object's layer is changed, so parent must be redrawn
	_lui_object_set_need_refresh(obj->parent);
 8005a8e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005a92:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f9a0 	bl	8005de0 <_lui_object_set_need_refresh>
 8005aa0:	e002      	b.n	8005aa8 <lui_object_set_layer+0x1e0>
		return;
 8005aa2:	bf00      	nop
 8005aa4:	e000      	b.n	8005aa8 <lui_object_set_layer+0x1e0>
		return;
 8005aa6:	bf00      	nop
}
 8005aa8:	f507 774e 	add.w	r7, r7, #824	; 0x338
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <_lui_obj_layer_cmprtr>:

	return obj->layer;
}

int _lui_obj_layer_cmprtr(const void* p1, const void* p2)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
	uint8_t l1 = (*((lui_obj_t** )p1))->layer;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	791b      	ldrb	r3, [r3, #4]
 8005ac0:	737b      	strb	r3, [r7, #13]
	uint8_t l2 = (*((lui_obj_t** )p2))->layer;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	791b      	ldrb	r3, [r3, #4]
 8005ac8:	733b      	strb	r3, [r7, #12]
	uint8_t t1 = (*((lui_obj_t** )p1))->obj_type;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	7edb      	ldrb	r3, [r3, #27]
 8005ad0:	72fb      	strb	r3, [r7, #11]
	uint8_t t2 = (*((lui_obj_t** )p2))->obj_type;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	7edb      	ldrb	r3, [r3, #27]
 8005ad8:	72bb      	strb	r3, [r7, #10]
	int16_t ret = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	81fb      	strh	r3, [r7, #14]
	if (l1 == l2)
 8005ade:	7b7a      	ldrb	r2, [r7, #13]
 8005ae0:	7b3b      	ldrb	r3, [r7, #12]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d112      	bne.n	8005b0c <_lui_obj_layer_cmprtr+0x5c>
	{
		if (t1 == LUI_OBJ_PANEL && t2 != LUI_OBJ_PANEL)
 8005ae6:	7afb      	ldrb	r3, [r7, #11]
 8005ae8:	2b05      	cmp	r3, #5
 8005aea:	d106      	bne.n	8005afa <_lui_obj_layer_cmprtr+0x4a>
 8005aec:	7abb      	ldrb	r3, [r7, #10]
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	d003      	beq.n	8005afa <_lui_obj_layer_cmprtr+0x4a>
			ret = -1;
 8005af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005af6:	81fb      	strh	r3, [r7, #14]
 8005af8:	e00f      	b.n	8005b1a <_lui_obj_layer_cmprtr+0x6a>
		else if (t2 == LUI_OBJ_PANEL && t1 != LUI_OBJ_PANEL)
 8005afa:	7abb      	ldrb	r3, [r7, #10]
 8005afc:	2b05      	cmp	r3, #5
 8005afe:	d10c      	bne.n	8005b1a <_lui_obj_layer_cmprtr+0x6a>
 8005b00:	7afb      	ldrb	r3, [r7, #11]
 8005b02:	2b05      	cmp	r3, #5
 8005b04:	d009      	beq.n	8005b1a <_lui_obj_layer_cmprtr+0x6a>
			ret = 1;
 8005b06:	2301      	movs	r3, #1
 8005b08:	81fb      	strh	r3, [r7, #14]
 8005b0a:	e006      	b.n	8005b1a <_lui_obj_layer_cmprtr+0x6a>
	}
	else
		ret = (l1 - l2);
 8005b0c:	7b7b      	ldrb	r3, [r7, #13]
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	7b3b      	ldrb	r3, [r7, #12]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	81fb      	strh	r3, [r7, #14]

	return ret;
 8005b1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
	...

08005b2c <_lui_object_render_parent_with_children>:



void _lui_object_render_parent_with_children(lui_obj_t* obj_parent)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	f5ad 6dcc 	sub.w	sp, sp, #1632	; 0x660
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005b38:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8005b3c:	6018      	str	r0, [r3, #0]
	if (obj_parent == NULL)
 8005b3e:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005b42:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80dc 	beq.w	8005d06 <_lui_object_render_parent_with_children+0x1da>
		return;
	if (!obj_parent->visible)
 8005b4e:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005b52:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	7e5b      	ldrb	r3, [r3, #25]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 80d5 	beq.w	8005d0a <_lui_object_render_parent_with_children+0x1de>
		return;


	lui_obj_t* obj_arr[LUI_MAX_OBJECTS];
	int16_t arr_counter = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	f8a7 365e 	strh.w	r3, [r7, #1630]	; 0x65e

	/* first render the parent, then render all its children in a loop */
	if (obj_parent->layer > 0)
 8005b66:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005b6a:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	791b      	ldrb	r3, [r3, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d013      	beq.n	8005b9e <_lui_object_render_parent_with_children+0x72>
		obj_arr[arr_counter++] = obj_parent;
 8005b76:	f9b7 265e 	ldrsh.w	r2, [r7, #1630]	; 0x65e
 8005b7a:	b293      	uxth	r3, r2
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f8a7 365e 	strh.w	r3, [r7, #1630]	; 0x65e
 8005b84:	4611      	mov	r1, r2
 8005b86:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005b8a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005b8e:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8005b92:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8005b9c:	e006      	b.n	8005bac <_lui_object_render_parent_with_children+0x80>
	else
		_lui_object_render(obj_parent);
 8005b9e:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005ba2:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	f000 f8b8 	bl	8005d1c <_lui_object_render>
	 * NOTE: objects are added to render stack only if they're visible.
	 * That means, if a parent is not visible, its children also won't be
	 * added to the render stack, even if those children are visible.
	 */

	lui_obj_t* child_of_root = obj_parent->first_child;
 8005bac:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005bb0:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 8005bba:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
	while (child_of_root != NULL)
 8005bbe:	e078      	b.n	8005cb2 <_lui_object_render_parent_with_children+0x186>
	{
		lui_obj_t* obj_stack[LUI_MAX_OBJECTS] = {NULL};
 8005bc0:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005bc4:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	f002 fde9 	bl	80087a8 <memset>
		uint8_t stack_counter = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
		/* Push child in stack, but only if it's visible */
		if (child_of_root->visible)
 8005bdc:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8005be0:	7e5b      	ldrb	r3, [r3, #25]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <_lui_object_render_parent_with_children+0xd6>
		{
			obj_stack[stack_counter++] = child_of_root;
 8005be6:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005bf6:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005bfa:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8005bfe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		}
		child_of_root = child_of_root->next_sibling;
 8005c02:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8005c06:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 8005c0a:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658

		while (stack_counter > 0)
 8005c0e:	e04c      	b.n	8005caa <_lui_object_render_parent_with_children+0x17e>
		{
			/* pop from stack */
			lui_obj_t* child = obj_stack[--stack_counter];
 8005c10:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005c14:	3b01      	subs	r3, #1
 8005c16:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
 8005c1a:	f897 2657 	ldrb.w	r2, [r7, #1623]	; 0x657
 8005c1e:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005c22:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2a:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650

			if (child->layer > 0)
 8005c2e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8005c32:	791b      	ldrb	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d010      	beq.n	8005c5a <_lui_object_render_parent_with_children+0x12e>
				obj_arr[arr_counter++] = child;
 8005c38:	f9b7 265e 	ldrsh.w	r2, [r7, #1630]	; 0x65e
 8005c3c:	b293      	uxth	r3, r2
 8005c3e:	3301      	adds	r3, #1
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f8a7 365e 	strh.w	r3, [r7, #1630]	; 0x65e
 8005c46:	4611      	mov	r1, r2
 8005c48:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005c4c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005c50:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 8005c54:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8005c58:	e003      	b.n	8005c62 <_lui_object_render_parent_with_children+0x136>
			else
				_lui_object_render(child);
 8005c5a:	f8d7 0650 	ldr.w	r0, [r7, #1616]	; 0x650
 8005c5e:	f000 f85d 	bl	8005d1c <_lui_object_render>

			/* get the child of current object */
			child = child->first_child;
 8005c62:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8005c66:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 8005c6a:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
			/* push all children of current object into stack too */
			while (child != NULL)
 8005c6e:	e018      	b.n	8005ca2 <_lui_object_render_parent_with_children+0x176>
			{
				/* push child to stack, but only if it is visible */
				if (child->visible)
 8005c70:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8005c74:	7e5b      	ldrb	r3, [r3, #25]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <_lui_object_render_parent_with_children+0x16a>
				{
					obj_stack[stack_counter++] = child;
 8005c7a:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	f887 2657 	strb.w	r2, [r7, #1623]	; 0x657
 8005c84:	4619      	mov	r1, r3
 8005c86:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005c8a:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005c8e:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 8005c92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				}
				/* get sibling of the child */
				child = child->next_sibling;
 8005c96:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8005c9a:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 8005c9e:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
			while (child != NULL)
 8005ca2:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e2      	bne.n	8005c70 <_lui_object_render_parent_with_children+0x144>
		while (stack_counter > 0)
 8005caa:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1ae      	bne.n	8005c10 <_lui_object_render_parent_with_children+0xe4>
	while (child_of_root != NULL)
 8005cb2:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d182      	bne.n	8005bc0 <_lui_object_render_parent_with_children+0x94>
			}
		}
	}
	/* Sort the objects based on their layers. bottom -> top */
	qsort((void* )obj_arr, arr_counter, sizeof(obj_arr[0]), _lui_obj_layer_cmprtr);
 8005cba:	f9b7 165e 	ldrsh.w	r1, [r7, #1630]	; 0x65e
 8005cbe:	f507 704b 	add.w	r0, r7, #812	; 0x32c
 8005cc2:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <_lui_object_render_parent_with_children+0x1e8>)
 8005cc4:	2204      	movs	r2, #4
 8005cc6:	f003 fa19 	bl	80090fc <qsort>

	for (uint8_t i = 0; i < arr_counter; i++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
 8005cd0:	e00f      	b.n	8005cf2 <_lui_object_render_parent_with_children+0x1c6>
	{
		_lui_object_render(obj_arr[i]);
 8005cd2:	f897 264f 	ldrb.w	r2, [r7, #1615]	; 0x64f
 8005cd6:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005cda:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 f81a 	bl	8005d1c <_lui_object_render>
	for (uint8_t i = 0; i < arr_counter; i++)
 8005ce8:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8005cec:	3301      	adds	r3, #1
 8005cee:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
 8005cf2:	f897 264f 	ldrb.w	r2, [r7, #1615]	; 0x64f
 8005cf6:	f9b7 365e 	ldrsh.w	r3, [r7, #1630]	; 0x65e
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	dbe9      	blt.n	8005cd2 <_lui_object_render_parent_with_children+0x1a6>
	}

	g_lui_needs_render = 0;
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <_lui_object_render_parent_with_children+0x1ec>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e002      	b.n	8005d0c <_lui_object_render_parent_with_children+0x1e0>
		return;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <_lui_object_render_parent_with_children+0x1e0>
		return;
 8005d0a:	bf00      	nop
}
 8005d0c:	f507 67cc 	add.w	r7, r7, #1632	; 0x660
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	08005ab1 	.word	0x08005ab1
 8005d18:	20002458 	.word	0x20002458

08005d1c <_lui_object_render>:

void _lui_object_render(lui_obj_t* obj)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	if (obj == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d055      	beq.n	8005dd6 <_lui_object_render+0xba>
		return;

	// draw it only if it needs refresh
	if (obj->needs_refresh == 1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	7e1b      	ldrb	r3, [r3, #24]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d152      	bne.n	8005dd8 <_lui_object_render+0xbc>
	{
		switch (obj->obj_type)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	7edb      	ldrb	r3, [r3, #27]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	2b0b      	cmp	r3, #11
 8005d3a:	d847      	bhi.n	8005dcc <_lui_object_render+0xb0>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <_lui_object_render+0x28>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005da5 	.word	0x08005da5
 8005d48:	08005d85 	.word	0x08005d85
 8005d4c:	08005d8d 	.word	0x08005d8d
 8005d50:	08005dad 	.word	0x08005dad
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	08005d75 	.word	0x08005d75
 8005d5c:	08005dcd 	.word	0x08005dcd
 8005d60:	08005db5 	.word	0x08005db5
 8005d64:	08005d95 	.word	0x08005d95
 8005d68:	08005d9d 	.word	0x08005d9d
 8005d6c:	08005dbd 	.word	0x08005dbd
 8005d70:	08005dc5 	.word	0x08005dc5
		{
			case LUI_OBJ_SCENE:
				lui_scene_draw(obj);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff fa91 	bl	800529c <lui_scene_draw>
				break;
 8005d7a:	e028      	b.n	8005dce <_lui_object_render+0xb2>
			case LUI_OBJ_PANEL:
				#ifdef LUI_USE_PANEL
				lui_panel_draw(obj);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff f9ad 	bl	80050dc <lui_panel_draw>
				#endif
				break;
 8005d82:	e024      	b.n	8005dce <_lui_object_render+0xb2>
			case LUI_OBJ_BUTTON:
				lui_button_draw(obj);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fd fc9f 	bl	80036c8 <lui_button_draw>
				break;
 8005d8a:	e020      	b.n	8005dce <_lui_object_render+0xb2>
			case LUI_OBJ_SWITCH:
				#ifdef LUI_USE_SWITCH
				lui_switch_draw(obj);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fe f8b3 	bl	8003ef8 <lui_switch_draw>
				#endif
				break;
 8005d92:	e01c      	b.n	8005dce <_lui_object_render+0xb2>
			case LUI_OBJ_CHECKBOX:
				#ifdef LUI_USE_CHECKBOX
				lui_checkbox_draw(obj);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7fe f993 	bl	80040c0 <lui_checkbox_draw>
				#endif
				break;
 8005d9a:	e018      	b.n	8005dce <_lui_object_render+0xb2>
			case LUI_OBJ_SLIDER:
				#ifdef LUI_USE_SLIDER
				lui_slider_draw(obj);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7fe fb67 	bl	8004470 <lui_slider_draw>
				#endif
				break;
 8005da2:	e014      	b.n	8005dce <_lui_object_render+0xb2>
			case LUI_OBJ_LABEL:
				lui_label_draw(obj);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fd f8c3 	bl	8002f30 <lui_label_draw>
				break;
 8005daa:	e010      	b.n	8005dce <_lui_object_render+0xb2>
			case LUI_OBJ_LINECHART:
				#ifdef LUI_USE_LINECHART
				lui_linechart_draw(obj);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fd f9e9 	bl	8003184 <lui_linechart_draw>
				#endif
				break;
 8005db2:	e00c      	b.n	8005dce <_lui_object_render+0xb2>
			case LUI_OBJ_LIST:
				#ifdef LUI_USE_LIST
				lui_list_draw(obj);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7fd ff45 	bl	8003c44 <lui_list_draw>
				#endif
				break;
 8005dba:	e008      	b.n	8005dce <_lui_object_render+0xb2>
			case LUI_OBJ_BTNGRID:
				#ifdef LUI_USE_BUTTONGRID
				lui_btngrid_draw(obj);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7fe fd49 	bl	8004854 <lui_btngrid_draw>
				#endif
				break;
 8005dc2:	e004      	b.n	8005dce <_lui_object_render+0xb2>
			case LUI_OBJ_TEXTBOX:
				#ifdef LUI_USE_TEXTBOX
				lui_textbox_draw(obj);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7fe fff3 	bl	8004db0 <lui_textbox_draw>
				#endif
				break;
 8005dca:	e000      	b.n	8005dce <_lui_object_render+0xb2>
			default:
				break;
 8005dcc:	bf00      	nop
		}

		obj->needs_refresh = 0;	// drawing is done, so set need_refresh back to 0
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	761a      	strb	r2, [r3, #24]
 8005dd4:	e000      	b.n	8005dd8 <_lui_object_render+0xbc>
		return;
 8005dd6:	bf00      	nop
	}
}
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop

08005de0 <_lui_object_set_need_refresh>:

void _lui_object_set_need_refresh(lui_obj_t* obj)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005dec:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005df0:	6018      	str	r0, [r3, #0]
	if (obj == NULL)
 8005df2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005df6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80a5 	beq.w	8005f4c <_lui_object_set_need_refresh+0x16c>
		return;
	/* Object's visibility is 0, return */
	if (!obj->visible)
 8005e02:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005e06:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	7e5b      	ldrb	r3, [r3, #25]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 809e 	beq.w	8005f50 <_lui_object_set_need_refresh+0x170>
		return;

	g_lui_needs_render = 1;
 8005e14:	4b52      	ldr	r3, [pc, #328]	; (8005f60 <_lui_object_set_need_refresh+0x180>)
 8005e16:	2201      	movs	r2, #1
 8005e18:	701a      	strb	r2, [r3, #0]
	/* already flag is 1, no need to waste time in loop. Return. */
	if (obj->needs_refresh == 1)
 8005e1a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005e1e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	7e1b      	ldrb	r3, [r3, #24]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	f000 8094 	beq.w	8005f54 <_lui_object_set_need_refresh+0x174>
		return;

	obj->needs_refresh = 1;
 8005e2c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005e30:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	761a      	strb	r2, [r3, #24]
	/*
	 * NOTE: needs_refresh_bit is set to 1 only when object is visible.
	 * If a parent is invisible, its children's needs_refresh bit won't be changed too.
	 */

	lui_obj_t* child_of_root = obj->first_child;
 8005e3a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005e3e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 8005e48:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	while (child_of_root != NULL)
 8005e4c:	e079      	b.n	8005f42 <_lui_object_set_need_refresh+0x162>
	{
		lui_obj_t* obj_stack[LUI_MAX_OBJECTS] = {NULL};
 8005e4e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005e52:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8005e56:	4618      	mov	r0, r3
 8005e58:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2100      	movs	r1, #0
 8005e60:	f002 fca2 	bl	80087a8 <memset>
		uint8_t stack_counter = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
		// push child to stack, but only if it's visible
		if (child_of_root->visible)
 8005e6a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005e6e:	7e5b      	ldrb	r3, [r3, #25]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00d      	beq.n	8005e90 <_lui_object_set_need_refresh+0xb0>
		{
			obj_stack[stack_counter++] = child_of_root;
 8005e74:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	f887 2333 	strb.w	r2, [r7, #819]	; 0x333
 8005e7e:	4619      	mov	r1, r3
 8005e80:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005e84:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8005e88:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005e8c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		}
		child_of_root = child_of_root->next_sibling;
 8005e90:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005e94:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 8005e98:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

		while (stack_counter > 0)
 8005e9c:	e04d      	b.n	8005f3a <_lui_object_set_need_refresh+0x15a>
		{
			// pop from stack
			lui_obj_t* child = obj_stack[--stack_counter];
 8005e9e:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
 8005ea8:	f897 2333 	ldrb.w	r2, [r7, #819]	; 0x333
 8005eac:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005eb0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8005eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb8:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
			child->needs_refresh = 1;
 8005ebc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	761a      	strb	r2, [r3, #24]

			/* When child is either btngrid or textbox, set needs_full_render bit to 1 */
			if (child->obj_type == LUI_OBJ_BTNGRID)
 8005ec4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005ec8:	7edb      	ldrb	r3, [r3, #27]
 8005eca:	2b0b      	cmp	r3, #11
 8005ecc:	d106      	bne.n	8005edc <_lui_object_set_need_refresh+0xfc>
			{
				#if defined(LUI_USE_BUTTONGRID)
				((lui_btngrid_t* )(child->obj_main_data))->needs_full_render = 1;
 8005ece:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005ed2:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	751a      	strb	r2, [r3, #20]
 8005eda:	e00a      	b.n	8005ef2 <_lui_object_set_need_refresh+0x112>
				#endif
			}
			else if (child->obj_type == LUI_OBJ_TEXTBOX)
 8005edc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005ee0:	7edb      	ldrb	r3, [r3, #27]
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d105      	bne.n	8005ef2 <_lui_object_set_need_refresh+0x112>
			{
				#if defined(LUI_USE_TEXTBOX)
				((lui_textbox_t* )(child->obj_main_data))->needs_full_render = 1;
 8005ee6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005eea:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8005eee:	2201      	movs	r2, #1
 8005ef0:	739a      	strb	r2, [r3, #14]
				#endif
			}

			// get the child of current object
			child = child->first_child;
 8005ef2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005ef6:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 8005efa:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
			// push all children of current object into stack too
			while (child != NULL)
 8005efe:	e018      	b.n	8005f32 <_lui_object_set_need_refresh+0x152>
			{
				/* push child to stack, but only if it's visible */
				if (child->visible)
 8005f00:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005f04:	7e5b      	ldrb	r3, [r3, #25]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00d      	beq.n	8005f26 <_lui_object_set_need_refresh+0x146>
				{
					obj_stack[stack_counter++] = child;
 8005f0a:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	f887 2333 	strb.w	r2, [r7, #819]	; 0x333
 8005f14:	4619      	mov	r1, r3
 8005f16:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8005f1a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8005f1e:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8005f22:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				}
				// get sibling of the child
				child = child->next_sibling;
 8005f26:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005f2a:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 8005f2e:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
			while (child != NULL)
 8005f32:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e2      	bne.n	8005f00 <_lui_object_set_need_refresh+0x120>
		while (stack_counter > 0)
 8005f3a:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1ad      	bne.n	8005e9e <_lui_object_set_need_refresh+0xbe>
	while (child_of_root != NULL)
 8005f42:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d181      	bne.n	8005e4e <_lui_object_set_need_refresh+0x6e>
 8005f4a:	e004      	b.n	8005f56 <_lui_object_set_need_refresh+0x176>
		return;
 8005f4c:	bf00      	nop
 8005f4e:	e002      	b.n	8005f56 <_lui_object_set_need_refresh+0x176>
		return;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <_lui_object_set_need_refresh+0x176>
		return;
 8005f54:	bf00      	nop
			}
		}
	}

}
 8005f56:	f507 774e 	add.w	r7, r7, #824	; 0x338
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20002458 	.word	0x20002458

08005f64 <_lui_process_input_of_act_scene>:
 * 			INPUT processing functions
 *------------------------------------------------------------------------------
 */

lui_obj_t* _lui_process_input_of_act_scene()
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
	uint8_t input_dev_type = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73bb      	strb	r3, [r7, #14]

	if ( g_lui_main->touch_input_dev != NULL)
 8005f6e:	4b4c      	ldr	r3, [pc, #304]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00f      	beq.n	8005f98 <_lui_process_input_of_act_scene+0x34>
	{
		/* Why??!! */
		input_dev_type = LUI_INPUT_TYPE_TOUCH;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73bb      	strb	r3, [r7, #14]
	else
	{
		return NULL;
	}

	uint8_t scan_all_objs_flag = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	75fb      	strb	r3, [r7, #23]
	lui_obj_t* obj_caused_cb = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	613b      	str	r3, [r7, #16]
	lui_obj_t* last_active_obj =  g_lui_main->active_obj;
 8005f84:	4b46      	ldr	r3, [pc, #280]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	60bb      	str	r3, [r7, #8]
	// lui_scene_t* scene_main_data = (lui_scene_t* )( g_lui_main->active_scene->obj_main_data);
	lui_touch_input_data_t input_touch_data;
	uint8_t input_is_pressed = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]


	if (input_dev_type == LUI_INPUT_TYPE_TOUCH)
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d139      	bne.n	800600a <_lui_process_input_of_act_scene+0xa6>
 8005f96:	e001      	b.n	8005f9c <_lui_process_input_of_act_scene+0x38>
		return NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e07d      	b.n	8006098 <_lui_process_input_of_act_scene+0x134>
	{
		g_lui_main->touch_input_dev->read_touch_input_cb(&input_touch_data);
 8005f9c:	4b40      	ldr	r3, [pc, #256]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	463a      	mov	r2, r7
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4798      	blx	r3
		input_is_pressed = input_touch_data.is_pressed;
 8005faa:	783b      	ldrb	r3, [r7, #0]
 8005fac:	73fb      	strb	r3, [r7, #15]

		if (g_lui_main->last_touch_data.x == input_touch_data.x &&
 8005fae:	4b3c      	ldr	r3, [pc, #240]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f9b3 3015 	ldrsh.w	r3, [r3, #21]
 8005fb6:	b21a      	sxth	r2, r3
 8005fb8:	f9b7 3001 	ldrsh.w	r3, [r7, #1]
 8005fbc:	b21b      	sxth	r3, r3
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d111      	bne.n	8005fe6 <_lui_process_input_of_act_scene+0x82>
			g_lui_main->last_touch_data.y == input_touch_data.y &&
 8005fc2:	4b37      	ldr	r3, [pc, #220]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f9b3 3017 	ldrsh.w	r3, [r3, #23]
 8005fca:	b21a      	sxth	r2, r3
 8005fcc:	f9b7 3003 	ldrsh.w	r3, [r7, #3]
 8005fd0:	b21b      	sxth	r3, r3
		if (g_lui_main->last_touch_data.x == input_touch_data.x &&
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d107      	bne.n	8005fe6 <_lui_process_input_of_act_scene+0x82>
			g_lui_main->last_touch_data.is_pressed == input_touch_data.is_pressed)
 8005fd6:	4b32      	ldr	r3, [pc, #200]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	7d1a      	ldrb	r2, [r3, #20]
 8005fdc:	783b      	ldrb	r3, [r7, #0]
			g_lui_main->last_touch_data.y == input_touch_data.y &&
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d101      	bne.n	8005fe6 <_lui_process_input_of_act_scene+0x82>
		{
			return NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e058      	b.n	8006098 <_lui_process_input_of_act_scene+0x134>
		}
		g_lui_main->last_touch_data.x = input_touch_data.x;
 8005fe6:	4b2e      	ldr	r3, [pc, #184]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f9b7 2001 	ldrsh.w	r2, [r7, #1]
 8005fee:	b212      	sxth	r2, r2
 8005ff0:	f8a3 2015 	strh.w	r2, [r3, #21]
		g_lui_main->last_touch_data.y = input_touch_data.y;
 8005ff4:	4b2a      	ldr	r3, [pc, #168]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f9b7 2003 	ldrsh.w	r2, [r7, #3]
 8005ffc:	b212      	sxth	r2, r2
 8005ffe:	f8a3 2017 	strh.w	r2, [r3, #23]
		g_lui_main->last_touch_data.is_pressed = input_touch_data.is_pressed;
 8006002:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	783a      	ldrb	r2, [r7, #0]
 8006008:	751a      	strb	r2, [r3, #20]
	}


	/* If previous "pressed" value is 1 and now it's 0, that means a "click" happened */
	if (g_lui_main->input_state_pressed && !input_is_pressed)
 800600a:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	7e5b      	ldrb	r3, [r3, #25]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <_lui_process_input_of_act_scene+0xc0>
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <_lui_process_input_of_act_scene+0xc0>
	{
		g_lui_main->input_event_clicked = 1;
 800601a:	4b21      	ldr	r3, [pc, #132]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2201      	movs	r2, #1
 8006020:	769a      	strb	r2, [r3, #26]
 8006022:	e003      	b.n	800602c <_lui_process_input_of_act_scene+0xc8>
	}
	else
	{
		g_lui_main->input_event_clicked = 0;
 8006024:	4b1e      	ldr	r3, [pc, #120]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2200      	movs	r2, #0
 800602a:	769a      	strb	r2, [r3, #26]
	}
	g_lui_main->input_state_pressed = input_is_pressed;
 800602c:	4b1c      	ldr	r3, [pc, #112]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	7bfa      	ldrb	r2, [r7, #15]
 8006032:	765a      	strb	r2, [r3, #25]


	if (last_active_obj == NULL)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <_lui_process_input_of_act_scene+0xdc>
	{
		scan_all_objs_flag = 1;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]
 800603e:	e019      	b.n	8006074 <_lui_process_input_of_act_scene+0x110>
	}

	else
	{
		// sets object parameters based on input. also may modify  g_lui_main->active_obj
		if ( input_dev_type == LUI_INPUT_TYPE_TOUCH)
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d104      	bne.n	8006050 <_lui_process_input_of_act_scene+0xec>
		{
			_lui_set_obj_props_on_touch_input(&input_touch_data, last_active_obj);
 8006046:	463b      	mov	r3, r7
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fae6 	bl	800661c <_lui_set_obj_props_on_touch_input>
		}

		if (last_active_obj->event != LUI_EVENT_NONE)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	7bdb      	ldrb	r3, [r3, #15]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <_lui_process_input_of_act_scene+0x10c>
		{
			if ( g_lui_main->active_obj != last_active_obj /* *state == LUI_STATE_IDLE*/)
 8006058:	4b11      	ldr	r3, [pc, #68]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	429a      	cmp	r2, r3
 8006062:	d002      	beq.n	800606a <_lui_process_input_of_act_scene+0x106>
			{
				scan_all_objs_flag = 1;
 8006064:	2301      	movs	r3, #1
 8006066:	75fb      	strb	r3, [r7, #23]
 8006068:	e004      	b.n	8006074 <_lui_process_input_of_act_scene+0x110>
			}
			else
			{
				obj_caused_cb = last_active_obj;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	e001      	b.n	8006074 <_lui_process_input_of_act_scene+0x110>
			}

		}
		else
		{
			obj_caused_cb = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
		}

	}

	if (scan_all_objs_flag)
 8006074:	7dfb      	ldrb	r3, [r7, #23]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00d      	beq.n	8006096 <_lui_process_input_of_act_scene+0x132>
	{
		obj_caused_cb = _lui_scan_all_obj_for_input(&input_touch_data, g_lui_main->active_scene, last_active_obj);
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <_lui_process_input_of_act_scene+0x13c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6859      	ldr	r1, [r3, #4]
 8006080:	463b      	mov	r3, r7
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f80d 	bl	80060a4 <_lui_scan_all_obj_for_input>
 800608a:	6138      	str	r0, [r7, #16]

		if (obj_caused_cb == NULL)
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <_lui_process_input_of_act_scene+0x132>
		{
			obj_caused_cb = last_active_obj;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	613b      	str	r3, [r7, #16]
		}
	}

	return obj_caused_cb;
 8006096:	693b      	ldr	r3, [r7, #16]

}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20002464 	.word	0x20002464

080060a4 <_lui_scan_all_obj_for_input>:

lui_obj_t* _lui_scan_all_obj_for_input(lui_touch_input_data_t* touch_input_data, lui_obj_t* obj_root, lui_obj_t* obj_excluded)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80060b0:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80060b4:	6018      	str	r0, [r3, #0]
 80060b6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80060ba:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80060be:	6019      	str	r1, [r3, #0]
 80060c0:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80060c4:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80060c8:	601a      	str	r2, [r3, #0]
	// Note: This function is made by converting a tail-recursive function to iterative function
	// The simple way is to use a stack.
	// see the answer: https://codereview.stackexchange.com/a/163621

	if (obj_root->obj_type != LUI_OBJ_SCENE)
 80060ca:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80060ce:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	7edb      	ldrb	r3, [r3, #27]
 80060d6:	2b06      	cmp	r3, #6
 80060d8:	d01d      	beq.n	8006116 <_lui_scan_all_obj_for_input+0x72>
	{
		if (obj_root == obj_excluded || !(obj_root->enabled) || !(obj_root->visible))
 80060da:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80060de:	f5a3 62cc 	sub.w	r2, r3, #1632	; 0x660
 80060e2:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80060e6:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80060ea:	6812      	ldr	r2, [r2, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d00f      	beq.n	8006112 <_lui_scan_all_obj_for_input+0x6e>
 80060f2:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80060f6:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	7e9b      	ldrb	r3, [r3, #26]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <_lui_scan_all_obj_for_input+0x6e>
 8006102:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8006106:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	7e5b      	ldrb	r3, [r3, #25]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <_lui_scan_all_obj_for_input+0x72>
			return NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	e0e8      	b.n	80062e8 <_lui_scan_all_obj_for_input+0x244>
	}

	lui_obj_t* obj_caused_cb = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
	uint8_t popup_layer_exists = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3663 	strb.w	r3, [r7, #1635]	; 0x663
	lui_obj_t* obj_arr[LUI_MAX_OBJECTS];
	int16_t arr_counter = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	f8a7 3660 	strh.w	r3, [r7, #1632]	; 0x660

	/* obj_arr[arr_counter++] = obj_root;
	if (obj_root->layer == 255)
		popup_layer_exists = 1; */

	lui_obj_t* child_of_root = obj_root->first_child;
 8006128:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800612c:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 8006136:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
	while (child_of_root != NULL)
 800613a:	e092      	b.n	8006262 <_lui_scan_all_obj_for_input+0x1be>
	{
		lui_obj_t* obj_stack[LUI_MAX_OBJECTS] = {NULL};
 800613c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8006140:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8006144:	4618      	mov	r0, r3
 8006146:	f44f 7348 	mov.w	r3, #800	; 0x320
 800614a:	461a      	mov	r2, r3
 800614c:	2100      	movs	r1, #0
 800614e:	f002 fb2b 	bl	80087a8 <memset>
		uint8_t stack_counter = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	f887 365b 	strb.w	r3, [r7, #1627]	; 0x65b
		if ((child_of_root != obj_excluded) && child_of_root->enabled && child_of_root->visible)
 8006158:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800615c:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8006160:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d017      	beq.n	800619a <_lui_scan_all_obj_for_input+0xf6>
 800616a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800616e:	7e9b      	ldrb	r3, [r3, #26]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d012      	beq.n	800619a <_lui_scan_all_obj_for_input+0xf6>
 8006174:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8006178:	7e5b      	ldrb	r3, [r3, #25]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00d      	beq.n	800619a <_lui_scan_all_obj_for_input+0xf6>
		{
			obj_stack[stack_counter++] = child_of_root;
 800617e:	f897 365b 	ldrb.w	r3, [r7, #1627]	; 0x65b
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	f887 265b 	strb.w	r2, [r7, #1627]	; 0x65b
 8006188:	4619      	mov	r1, r3
 800618a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800618e:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8006192:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006196:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		}
		child_of_root = child_of_root->next_sibling;
 800619a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800619e:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 80061a2:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c

		// loop until stack is empty. in this way all children (and their children too) will be traversed
		while (stack_counter > 0)
 80061a6:	e058      	b.n	800625a <_lui_scan_all_obj_for_input+0x1b6>
		{
			// pop from stack
			lui_obj_t* child = obj_stack[--stack_counter];
 80061a8:	f897 365b 	ldrb.w	r3, [r7, #1627]	; 0x65b
 80061ac:	3b01      	subs	r3, #1
 80061ae:	f887 365b 	strb.w	r3, [r7, #1627]	; 0x65b
 80061b2:	f897 265b 	ldrb.w	r2, [r7, #1627]	; 0x65b
 80061b6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80061ba:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 80061be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c2:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
			obj_arr[arr_counter++] = child;
 80061c6:	f9b7 2660 	ldrsh.w	r2, [r7, #1632]	; 0x660
 80061ca:	b293      	uxth	r3, r2
 80061cc:	3301      	adds	r3, #1
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f8a7 3660 	strh.w	r3, [r7, #1632]	; 0x660
 80061d4:	4611      	mov	r1, r2
 80061d6:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80061da:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80061de:	f8d7 2654 	ldr.w	r2, [r7, #1620]	; 0x654
 80061e2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			if (child->layer == LUI_LAYER_POPUP)
 80061e6:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80061ea:	791b      	ldrb	r3, [r3, #4]
 80061ec:	2bff      	cmp	r3, #255	; 0xff
 80061ee:	d102      	bne.n	80061f6 <_lui_scan_all_obj_for_input+0x152>
				popup_layer_exists = 1;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 3663 	strb.w	r3, [r7, #1635]	; 0x663

			// get the child of current object
			child = child->first_child;
 80061f6:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80061fa:	f8d3 3021 	ldr.w	r3, [r3, #33]	; 0x21
 80061fe:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
			// push all children of current object into stack too
			while (child != NULL)
 8006202:	e026      	b.n	8006252 <_lui_scan_all_obj_for_input+0x1ae>
			{
				// push child to stack, only if it's not excluded
				if ((child != obj_excluded) && child->enabled && child->visible)
 8006204:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8006208:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 800620c:	f8d7 2654 	ldr.w	r2, [r7, #1620]	; 0x654
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d017      	beq.n	8006246 <_lui_scan_all_obj_for_input+0x1a2>
 8006216:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800621a:	7e9b      	ldrb	r3, [r3, #26]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d012      	beq.n	8006246 <_lui_scan_all_obj_for_input+0x1a2>
 8006220:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8006224:	7e5b      	ldrb	r3, [r3, #25]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00d      	beq.n	8006246 <_lui_scan_all_obj_for_input+0x1a2>
				{
					obj_stack[stack_counter++] = child;
 800622a:	f897 365b 	ldrb.w	r3, [r7, #1627]	; 0x65b
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	f887 265b 	strb.w	r2, [r7, #1627]	; 0x65b
 8006234:	4619      	mov	r1, r3
 8006236:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800623a:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 800623e:	f8d7 2654 	ldr.w	r2, [r7, #1620]	; 0x654
 8006242:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				}
				// get sibling of the child
				child = child->next_sibling;
 8006246:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800624a:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 800624e:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
			while (child != NULL)
 8006252:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1d4      	bne.n	8006204 <_lui_scan_all_obj_for_input+0x160>
		while (stack_counter > 0)
 800625a:	f897 365b 	ldrb.w	r3, [r7, #1627]	; 0x65b
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1a2      	bne.n	80061a8 <_lui_scan_all_obj_for_input+0x104>
	while (child_of_root != NULL)
 8006262:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8006266:	2b00      	cmp	r3, #0
 8006268:	f47f af68 	bne.w	800613c <_lui_scan_all_obj_for_input+0x98>
			}
		}
	}

	/* Sort the objects based on their layers. bottom -> top */
	qsort((void* )obj_arr, arr_counter, sizeof(obj_arr[0]), _lui_obj_layer_cmprtr);
 800626c:	f9b7 1660 	ldrsh.w	r1, [r7, #1632]	; 0x660
 8006270:	f507 704d 	add.w	r0, r7, #820	; 0x334
 8006274:	4b1f      	ldr	r3, [pc, #124]	; (80062f4 <_lui_scan_all_obj_for_input+0x250>)
 8006276:	2204      	movs	r2, #4
 8006278:	f002 ff40 	bl	80090fc <qsort>

	/* Scan for inputs from top layer to bottom layer */
	while(arr_counter--)
 800627c:	e029      	b.n	80062d2 <_lui_scan_all_obj_for_input+0x22e>
	{
		if (popup_layer_exists && obj_arr[arr_counter]->layer < LUI_LAYER_POPUP)
 800627e:	f897 3663 	ldrb.w	r3, [r7, #1635]	; 0x663
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <_lui_scan_all_obj_for_input+0x1fc>
 8006286:	f9b7 2660 	ldrsh.w	r2, [r7, #1632]	; 0x660
 800628a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800628e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8006292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006296:	791b      	ldrb	r3, [r3, #4]
 8006298:	2bff      	cmp	r3, #255	; 0xff
 800629a:	d001      	beq.n	80062a0 <_lui_scan_all_obj_for_input+0x1fc>
			return NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	e023      	b.n	80062e8 <_lui_scan_all_obj_for_input+0x244>
		obj_caused_cb = _lui_scan_individual_object_for_input(touch_input_data, obj_arr[arr_counter]);
 80062a0:	f9b7 2660 	ldrsh.w	r2, [r7, #1632]	; 0x660
 80062a4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80062a8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80062ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062b0:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80062b4:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80062b8:	4611      	mov	r1, r2
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	f000 f81c 	bl	80062f8 <_lui_scan_individual_object_for_input>
 80062c0:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
		if (obj_caused_cb != NULL)
 80062c4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <_lui_scan_all_obj_for_input+0x22e>
			return obj_caused_cb;
 80062cc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80062d0:	e00a      	b.n	80062e8 <_lui_scan_all_obj_for_input+0x244>
	while(arr_counter--)
 80062d2:	f9b7 3660 	ldrsh.w	r3, [r7, #1632]	; 0x660
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	3a01      	subs	r2, #1
 80062da:	b292      	uxth	r2, r2
 80062dc:	f8a7 2660 	strh.w	r2, [r7, #1632]	; 0x660
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1cc      	bne.n	800627e <_lui_scan_all_obj_for_input+0x1da>
	}

	return obj_caused_cb;
 80062e4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	f507 67cd 	add.w	r7, r7, #1640	; 0x668
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	08005ab1 	.word	0x08005ab1

080062f8 <_lui_scan_individual_object_for_input>:

lui_obj_t* _lui_scan_individual_object_for_input(lui_touch_input_data_t* touch_input_data, lui_obj_t* obj)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
	lui_obj_t* obj_caused_cb = NULL;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
	/* if (!(obj->enabled) || !(obj->visible))
	{
		return NULL;
	} */

	if (touch_input_data != NULL) // Touch input
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <_lui_scan_individual_object_for_input+0x1c>
	{
		// sets object parameters based on input. also, may modify  g_lui_main->active_obj
		_lui_set_obj_props_on_touch_input(touch_input_data, obj);
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f984 	bl	800661c <_lui_set_obj_props_on_touch_input>
	}

	if (obj->event != LUI_EVENT_NONE)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	7bdb      	ldrb	r3, [r3, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <_lui_scan_individual_object_for_input+0x2a>
	{
		obj_caused_cb = obj;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	e001      	b.n	8006326 <_lui_scan_individual_object_for_input+0x2e>
	}
	else
	{
		obj_caused_cb = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]
	}


	return obj_caused_cb;
 8006326:	68fb      	ldr	r3, [r7, #12]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <_lui_check_if_active_obj_touch_input>:

uint8_t _lui_check_if_active_obj_touch_input(lui_touch_input_data_t* input, lui_obj_t* obj)
{
 8006330:	b480      	push	{r7}
 8006332:	b08b      	sub	sp, #44	; 0x2c
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	uint8_t is_active = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (input->x >= obj->x &&
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8006346:	b21b      	sxth	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	429a      	cmp	r2, r3
 8006352:	f2c0 8138 	blt.w	80065c6 <_lui_check_if_active_obj_touch_input+0x296>
		input->x < obj->x + obj->common_style.width &&
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800635c:	b21b      	sxth	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29b      	uxth	r3, r3
 8006366:	4619      	mov	r1, r3
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800636e:	b29b      	uxth	r3, r3
 8006370:	440b      	add	r3, r1
	if (input->x >= obj->x &&
 8006372:	429a      	cmp	r2, r3
 8006374:	f280 8127 	bge.w	80065c6 <_lui_check_if_active_obj_touch_input+0x296>
		input->y >= obj->y &&
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800637e:	b21b      	sxth	r3, r3
 8006380:	461a      	mov	r2, r3
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	885b      	ldrh	r3, [r3, #2]
 8006386:	b29b      	uxth	r3, r3
		input->x < obj->x + obj->common_style.width &&
 8006388:	429a      	cmp	r2, r3
 800638a:	f2c0 811c 	blt.w	80065c6 <_lui_check_if_active_obj_touch_input+0x296>
		input->y < obj->y + obj->common_style.height)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8006394:	b21b      	sxth	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	885b      	ldrh	r3, [r3, #2]
 800639c:	b29b      	uxth	r3, r3
 800639e:	4619      	mov	r1, r3
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	440b      	add	r3, r1
		input->y >= obj->y &&
 80063aa:	429a      	cmp	r2, r3
 80063ac:	f280 810b 	bge.w	80065c6 <_lui_check_if_active_obj_touch_input+0x296>
	{
		#if defined(LUI_USE_BUTTONGRID)
		if (obj->obj_type == LUI_OBJ_BTNGRID)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	7edb      	ldrb	r3, [r3, #27]
 80063b4:	2b0b      	cmp	r3, #11
 80063b6:	d168      	bne.n	800648a <_lui_check_if_active_obj_touch_input+0x15a>
		{
			lui_btngrid_t* btngrid = (lui_btngrid_t* )(obj->obj_main_data);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 80063be:	60fb      	str	r3, [r7, #12]
			for (uint16_t i = 0; i < btngrid->btn_cnt; i++)
 80063c0:	2300      	movs	r3, #0
 80063c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063c4:	e05a      	b.n	800647c <_lui_check_if_active_obj_touch_input+0x14c>
			{
				if (input->x >= btngrid->btn_area[i].x1 &&
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80063cc:	b21b      	sxth	r3, r3
 80063ce:	4619      	mov	r1, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	4299      	cmp	r1, r3
 80063e0:	db49      	blt.n	8006476 <_lui_check_if_active_obj_touch_input+0x146>
					input->x <  btngrid->btn_area[i].x2 &&
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80063e8:	b21b      	sxth	r3, r3
 80063ea:	4619      	mov	r1, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	4413      	add	r3, r2
 80063f6:	889b      	ldrh	r3, [r3, #4]
 80063f8:	b29b      	uxth	r3, r3
				if (input->x >= btngrid->btn_area[i].x1 &&
 80063fa:	4299      	cmp	r1, r3
 80063fc:	da3b      	bge.n	8006476 <_lui_check_if_active_obj_touch_input+0x146>
					input->y >= btngrid->btn_area[i].y1 &&
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8006404:	b21b      	sxth	r3, r3
 8006406:	4619      	mov	r1, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	4413      	add	r3, r2
 8006412:	885b      	ldrh	r3, [r3, #2]
 8006414:	b29b      	uxth	r3, r3
					input->x <  btngrid->btn_area[i].x2 &&
 8006416:	4299      	cmp	r1, r3
 8006418:	db2d      	blt.n	8006476 <_lui_check_if_active_obj_touch_input+0x146>
					input->y <  btngrid->btn_area[i].y2)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8006420:	b21b      	sxth	r3, r3
 8006422:	4619      	mov	r1, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	4413      	add	r3, r2
 800642e:	88db      	ldrh	r3, [r3, #6]
 8006430:	b29b      	uxth	r3, r3
					input->y >= btngrid->btn_area[i].y1 &&
 8006432:	4299      	cmp	r1, r3
 8006434:	da1f      	bge.n	8006476 <_lui_check_if_active_obj_touch_input+0x146>
				{
					if (!(btngrid->btn_properties[i] & LUI_BTNGRID_MASK_BTN_DISABLED) &&
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800643c:	4413      	add	r3, r2
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	f040 80bb 	bne.w	80065c0 <_lui_check_if_active_obj_touch_input+0x290>
						!(btngrid->btn_properties[i] & LUI_BTNGRID_MASK_BTN_HIDDEN))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006450:	4413      	add	r3, r2
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f003 0320 	and.w	r3, r3, #32
					if (!(btngrid->btn_properties[i] & LUI_BTNGRID_MASK_BTN_DISABLED) &&
 8006458:	2b00      	cmp	r3, #0
 800645a:	f040 80b1 	bne.w	80065c0 <_lui_check_if_active_obj_touch_input+0x290>
					{
						btngrid->active_btn_index = i;
 800645e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	825a      	strh	r2, [r3, #18]
						g_lui_main->active_obj = obj;
 8006466:	4b6c      	ldr	r3, [pc, #432]	; (8006618 <_lui_check_if_active_obj_touch_input+0x2e8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	609a      	str	r2, [r3, #8]
						is_active = 1;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
					break;
 8006474:	e0a4      	b.n	80065c0 <_lui_check_if_active_obj_touch_input+0x290>
			for (uint16_t i = 0; i < btngrid->btn_cnt; i++)
 8006476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006478:	3301      	adds	r3, #1
 800647a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	7b1b      	ldrb	r3, [r3, #12]
 8006480:	b29b      	uxth	r3, r3
 8006482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006484:	429a      	cmp	r2, r3
 8006486:	d39e      	bcc.n	80063c6 <_lui_check_if_active_obj_touch_input+0x96>
 8006488:	e09d      	b.n	80065c6 <_lui_check_if_active_obj_touch_input+0x296>
		}
		else
		#endif
		{
			#if defined(LUI_USE_LIST)
			if (obj->obj_type == LUI_OBJ_LIST)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	7edb      	ldrb	r3, [r3, #27]
 800648e:	2b08      	cmp	r3, #8
 8006490:	f040 808e 	bne.w	80065b0 <_lui_check_if_active_obj_touch_input+0x280>
			{
				lui_list_t* list = (lui_list_t* )(obj->obj_main_data);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 800649a:	61fb      	str	r3, [r7, #28]
				if (list->is_expanded)
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	7e1b      	ldrb	r3, [r3, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8090 	beq.w	80065c6 <_lui_check_if_active_obj_touch_input+0x296>
				{
					is_active = 1;
 80064a6:	2301      	movs	r3, #1
 80064a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					uint8_t lim = list->page_first_item_index + list->items_per_page;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	7c9a      	ldrb	r2, [r3, #18]
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	7c5b      	ldrb	r3, [r3, #17]
 80064b4:	4413      	add	r3, r2
 80064b6:	76fb      	strb	r3, [r7, #27]

					for (uint8_t i = list->page_first_item_index; i < lim; i++)
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	7c9b      	ldrb	r3, [r3, #18]
 80064bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c0:	e070      	b.n	80065a4 <_lui_check_if_active_obj_touch_input+0x274>
					{
						if (i == list->items_cnt)
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	7d9b      	ldrb	r3, [r3, #22]
 80064c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d07a      	beq.n	80065c4 <_lui_check_if_active_obj_touch_input+0x294>
							break;
						/* Convert items' local coordinates to global */
						uint16_t x1, y1, x2, y2;
						x1 = list->items[i]->area.x1 + obj->x;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	889b      	ldrh	r3, [r3, #4]
 80064de:	b29a      	uxth	r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	4413      	add	r3, r2
 80064e8:	833b      	strh	r3, [r7, #24]
						x2 = list->items[i]->area.x2 + obj->x;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	891b      	ldrh	r3, [r3, #8]
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	4413      	add	r3, r2
 8006504:	82fb      	strh	r3, [r7, #22]
						y1 = list->items[i]->area.y1 + obj->y;
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	88db      	ldrh	r3, [r3, #6]
 8006516:	b29a      	uxth	r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	885b      	ldrh	r3, [r3, #2]
 800651c:	b29b      	uxth	r3, r3
 800651e:	4413      	add	r3, r2
 8006520:	82bb      	strh	r3, [r7, #20]
						y2 = list->items[i]->area.y2 + obj->y;
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	895b      	ldrh	r3, [r3, #10]
 8006532:	b29a      	uxth	r2, r3
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	885b      	ldrh	r3, [r3, #2]
 8006538:	b29b      	uxth	r3, r3
 800653a:	4413      	add	r3, r2
 800653c:	827b      	strh	r3, [r7, #18]

						if (input->x >= x1 &&
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8006544:	b21b      	sxth	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	8b3b      	ldrh	r3, [r7, #24]
 800654a:	429a      	cmp	r2, r3
 800654c:	db25      	blt.n	800659a <_lui_check_if_active_obj_touch_input+0x26a>
							input->x <  x2 &&
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8006554:	b21b      	sxth	r3, r3
 8006556:	461a      	mov	r2, r3
 8006558:	8afb      	ldrh	r3, [r7, #22]
						if (input->x >= x1 &&
 800655a:	429a      	cmp	r2, r3
 800655c:	da1d      	bge.n	800659a <_lui_check_if_active_obj_touch_input+0x26a>
							input->y >= y1 &&
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8006564:	b21b      	sxth	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	8abb      	ldrh	r3, [r7, #20]
							input->x <  x2 &&
 800656a:	429a      	cmp	r2, r3
 800656c:	db15      	blt.n	800659a <_lui_check_if_active_obj_touch_input+0x26a>
							input->y <  y2)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8006574:	b21b      	sxth	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	8a7b      	ldrh	r3, [r7, #18]
							input->y >= y1 &&
 800657a:	429a      	cmp	r2, r3
 800657c:	da0d      	bge.n	800659a <_lui_check_if_active_obj_touch_input+0x26a>
						{
							list->selected_item_index = i;
 800657e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006582:	b21a      	sxth	r2, r3
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f8a3 200d 	strh.w	r2, [r3, #13]
							g_lui_main->active_obj = obj;
 800658a:	4b23      	ldr	r3, [pc, #140]	; (8006618 <_lui_check_if_active_obj_touch_input+0x2e8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	609a      	str	r2, [r3, #8]
							is_active = 1;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
 8006598:	e015      	b.n	80065c6 <_lui_check_if_active_obj_touch_input+0x296>
					for (uint8_t i = list->page_first_item_index; i < lim; i++)
 800659a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800659e:	3301      	adds	r3, #1
 80065a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80065a8:	7efb      	ldrb	r3, [r7, #27]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d389      	bcc.n	80064c2 <_lui_check_if_active_obj_touch_input+0x192>
 80065ae:	e00a      	b.n	80065c6 <_lui_check_if_active_obj_touch_input+0x296>
				}
			}
			else
			#endif
			{
				g_lui_main->active_obj = obj;
 80065b0:	4b19      	ldr	r3, [pc, #100]	; (8006618 <_lui_check_if_active_obj_touch_input+0x2e8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	609a      	str	r2, [r3, #8]
				is_active = 1;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065be:	e002      	b.n	80065c6 <_lui_check_if_active_obj_touch_input+0x296>
					break;
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <_lui_check_if_active_obj_touch_input+0x296>
							break;
 80065c4:	bf00      	nop
		}


	}

	if (is_active == 0)
 80065c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d11c      	bne.n	8006608 <_lui_check_if_active_obj_touch_input+0x2d8>
	{
		// in case input is not on "obj" and previous "active_obj" is same as "obj",
		// set "input_on_obj" to NULL.
		if (g_lui_main->active_obj == obj)
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <_lui_check_if_active_obj_touch_input+0x2e8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d116      	bne.n	8006608 <_lui_check_if_active_obj_touch_input+0x2d8>
		{
			g_lui_main->active_obj = NULL;
 80065da:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <_lui_check_if_active_obj_touch_input+0x2e8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2200      	movs	r2, #0
 80065e0:	721a      	strb	r2, [r3, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	725a      	strb	r2, [r3, #9]
 80065e6:	2200      	movs	r2, #0
 80065e8:	729a      	strb	r2, [r3, #10]
 80065ea:	2200      	movs	r2, #0
 80065ec:	72da      	strb	r2, [r3, #11]
			#if defined(LUI_USE_BUTTONGRID)
			if (obj->obj_type == LUI_OBJ_BTNGRID)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	7edb      	ldrb	r3, [r3, #27]
 80065f2:	2b0b      	cmp	r3, #11
 80065f4:	d108      	bne.n	8006608 <_lui_check_if_active_obj_touch_input+0x2d8>
			{
				((lui_btngrid_t* )(obj->obj_main_data))->active_btn_index = -1;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 80065fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006600:	749a      	strb	r2, [r3, #18]
 8006602:	f04f 32ff 	mov.w	r2, #4294967295
 8006606:	74da      	strb	r2, [r3, #19]
			}
			#endif
		}
	}

	return is_active;
 8006608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800660c:	4618      	mov	r0, r3
 800660e:	372c      	adds	r7, #44	; 0x2c
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	20002464 	.word	0x20002464

0800661c <_lui_set_obj_props_on_touch_input>:

void _lui_set_obj_props_on_touch_input(lui_touch_input_data_t* input, lui_obj_t* obj)
{
 800661c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006620:	ed2d 8b02 	vpush	{d8}
 8006624:	b08e      	sub	sp, #56	; 0x38
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	6039      	str	r1, [r7, #0]
	uint8_t is_obj_active = _lui_check_if_active_obj_touch_input(input, obj);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fe7e 	bl	8006330 <_lui_check_if_active_obj_touch_input>
 8006634:	4603      	mov	r3, r0
 8006636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t new_state = LUI_STATE_IDLE;
 800663a:	2300      	movs	r3, #0
 800663c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t old_state = obj->state;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	7b9b      	ldrb	r3, [r3, #14]
 8006644:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (is_obj_active == 1)
 8006648:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800664c:	2b01      	cmp	r3, #1
 800664e:	d10b      	bne.n	8006668 <_lui_set_obj_props_on_touch_input+0x4c>
	{
		/* if pressed, then....well, then state = PRESSED */
		if (input->is_pressed == 1)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d103      	bne.n	8006660 <_lui_set_obj_props_on_touch_input+0x44>
		{
			new_state = LUI_STATE_PRESSED;
 8006658:	2302      	movs	r3, #2
 800665a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800665e:	e006      	b.n	800666e <_lui_set_obj_props_on_touch_input+0x52>
		}
		/* else not pressed, state = SELECTED */
		else
		{
			new_state = LUI_STATE_SELECTED;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006666:	e002      	b.n	800666e <_lui_set_obj_props_on_touch_input+0x52>
		}
	}
	else
	{
		new_state = LUI_STATE_IDLE;
 8006668:	2300      	movs	r3, #0
 800666a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	if (obj->obj_type == LUI_OBJ_TEXTBOX && obj->state == LUI_STATE_ENTERED)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	7edb      	ldrb	r3, [r3, #27]
 8006672:	2b0c      	cmp	r3, #12
 8006674:	d106      	bne.n	8006684 <_lui_set_obj_props_on_touch_input+0x68>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	7b9b      	ldrb	r3, [r3, #14]
 800667a:	2b03      	cmp	r3, #3
 800667c:	d102      	bne.n	8006684 <_lui_set_obj_props_on_touch_input+0x68>
	{
		new_state = LUI_STATE_ENTERED;
 800667e:	2303      	movs	r3, #3
 8006680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	obj->event = _lui_get_event_against_state(new_state, old_state);
 8006684:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8006688:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800668c:	4611      	mov	r1, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fa80 	bl	8007b94 <_lui_get_event_against_state>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	73da      	strb	r2, [r3, #15]
	/* when input is touch input and not mouse pointer, `SELECTION_LOST` event should become `RELEASED`  */
	if ((input->x == -1 || input->y == -1) && obj->event == LUI_EVENT_SELECTION_LOST)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80066a2:	b21b      	sxth	r3, r3
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d006      	beq.n	80066b8 <_lui_set_obj_props_on_touch_input+0x9c>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80066b0:	b21b      	sxth	r3, r3
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d106      	bne.n	80066c6 <_lui_set_obj_props_on_touch_input+0xaa>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	7bdb      	ldrb	r3, [r3, #15]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d102      	bne.n	80066c6 <_lui_set_obj_props_on_touch_input+0xaa>
		obj->event = LUI_EVENT_RELEASED;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2204      	movs	r2, #4
 80066c4:	73da      	strb	r2, [r3, #15]


	if (obj->event != LUI_EVENT_NONE)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	7bdb      	ldrb	r3, [r3, #15]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d04a      	beq.n	8006764 <_lui_set_obj_props_on_touch_input+0x148>
	{
		obj->state = new_state;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80066d4:	739a      	strb	r2, [r3, #14]
		#if defined(LUI_USE_BUTTONGRID)
		if (obj->obj_type == LUI_OBJ_BTNGRID)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	7edb      	ldrb	r3, [r3, #27]
 80066da:	2b0b      	cmp	r3, #11
 80066dc:	d11c      	bne.n	8006718 <_lui_set_obj_props_on_touch_input+0xfc>
		{
			lui_btngrid_t* btngrid = (lui_btngrid_t* )(obj->obj_main_data);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			btngrid->btn_properties[btngrid->active_btn_index] |= (new_state & LUI_BTNGRID_MASK_BTN_CHECKED);
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ec:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80066f0:	b212      	sxth	r2, r2
 80066f2:	4413      	add	r3, r2
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	b25a      	sxtb	r2, r3
 80066f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80066fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006700:	b25b      	sxtb	r3, r3
 8006702:	4313      	orrs	r3, r2
 8006704:	b259      	sxtb	r1, r3
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8006710:	b212      	sxth	r2, r2
 8006712:	4413      	add	r3, r2
 8006714:	b2ca      	uxtb	r2, r1
 8006716:	701a      	strb	r2, [r3, #0]
		}
		#endif

		#if defined(LUI_USE_LIST)
		if (obj->obj_type == LUI_OBJ_LIST)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	7edb      	ldrb	r3, [r3, #27]
 800671c:	2b08      	cmp	r3, #8
 800671e:	d11a      	bne.n	8006756 <_lui_set_obj_props_on_touch_input+0x13a>
		{
			lui_list_t* list = (lui_list_t* )(obj->obj_main_data);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
			if (list->is_dropdown)
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	7ddb      	ldrb	r3, [r3, #23]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d012      	beq.n	8006756 <_lui_set_obj_props_on_touch_input+0x13a>
			{
				lui_obj_t* nav_btn_text = lui_object_get_child(obj, 3);
 8006730:	2103      	movs	r1, #3
 8006732:	6838      	ldr	r0, [r7, #0]
 8006734:	f7fe fee2 	bl	80054fc <lui_object_get_child>
 8006738:	6278      	str	r0, [r7, #36]	; 0x24
				lui_button_set_label_text(nav_btn_text, list->items[list->selected_item_index]->text);
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
 8006744:	b21b      	sxth	r3, r3
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006752:	f7fd fa59 	bl	8003c08 <lui_button_set_label_text>
			}
		}
		#endif

		#if defined(LUI_USE_PANEL)
		if (obj->obj_type != LUI_OBJ_PANEL)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	7edb      	ldrb	r3, [r3, #27]
 800675a:	2b05      	cmp	r3, #5
 800675c:	d002      	beq.n	8006764 <_lui_set_obj_props_on_touch_input+0x148>
			_lui_object_set_need_refresh(obj);
 800675e:	6838      	ldr	r0, [r7, #0]
 8006760:	f7ff fb3e 	bl	8005de0 <_lui_object_set_need_refresh>

	}

	/* Special case for TextBox. When clicked on a textbox, the state becomes ENTERED
	To EXIT the state, the close or ok button from keyboard must be pressed */
	if (obj->obj_type == LUI_OBJ_TEXTBOX)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	7edb      	ldrb	r3, [r3, #27]
 8006768:	2b0c      	cmp	r3, #12
 800676a:	d112      	bne.n	8006792 <_lui_set_obj_props_on_touch_input+0x176>
	{
		#if defined(LUI_USE_TEXTBOX)
		if (obj->event == LUI_EVENT_PRESSED)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	7bdb      	ldrb	r3, [r3, #15]
 8006770:	2b03      	cmp	r3, #3
 8006772:	d106      	bne.n	8006782 <_lui_set_obj_props_on_touch_input+0x166>
		{
			obj->state = LUI_STATE_ENTERED;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2203      	movs	r2, #3
 8006778:	739a      	strb	r2, [r3, #14]
			obj->event = LUI_EVENT_ENTERED;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2205      	movs	r2, #5
 800677e:	73da      	strb	r2, [r3, #15]
			g_lui_needs_render = 1;
		}
		last_active_btn = btngrid->active_btn_index;
		#endif
	}
}
 8006780:	e23a      	b.n	8006bf8 <_lui_set_obj_props_on_touch_input+0x5dc>
			obj->state = old_state;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8006788:	739a      	strb	r2, [r3, #14]
			obj->event = LUI_EVENT_NONE;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2200      	movs	r2, #0
 800678e:	73da      	strb	r2, [r3, #15]
}
 8006790:	e232      	b.n	8006bf8 <_lui_set_obj_props_on_touch_input+0x5dc>
	else if (obj->obj_type == LUI_OBJ_SWITCH ||
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	7edb      	ldrb	r3, [r3, #27]
 8006796:	2b03      	cmp	r3, #3
 8006798:	d00e      	beq.n	80067b8 <_lui_set_obj_props_on_touch_input+0x19c>
		obj->obj_type == LUI_OBJ_CHECKBOX ||
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	7edb      	ldrb	r3, [r3, #27]
	else if (obj->obj_type == LUI_OBJ_SWITCH ||
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d00a      	beq.n	80067b8 <_lui_set_obj_props_on_touch_input+0x19c>
		(obj->obj_type == LUI_OBJ_BUTTON && ((lui_button_t*)(obj->obj_main_data))->is_checkable))
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	7edb      	ldrb	r3, [r3, #27]
		obj->obj_type == LUI_OBJ_CHECKBOX ||
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d123      	bne.n	80067f2 <_lui_set_obj_props_on_touch_input+0x1d6>
		(obj->obj_type == LUI_OBJ_BUTTON && ((lui_button_t*)(obj->obj_main_data))->is_checkable))
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 80067b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01c      	beq.n	80067f2 <_lui_set_obj_props_on_touch_input+0x1d6>
		if (obj->event == LUI_EVENT_RELEASED || obj->event == LUI_EVENT_SELECTION_LOST)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	7bdb      	ldrb	r3, [r3, #15]
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d004      	beq.n	80067ca <_lui_set_obj_props_on_touch_input+0x1ae>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	7bdb      	ldrb	r3, [r3, #15]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	f040 8216 	bne.w	8006bf6 <_lui_set_obj_props_on_touch_input+0x5da>
			obj->event = LUI_EVENT_VALUE_CHANGED;	// for checkable items, being pressed means being toggled, thus value changed
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2207      	movs	r2, #7
 80067ce:	73da      	strb	r2, [r3, #15]
			obj->value = obj->value ? 0 : 1;	// toggle the value (1->0 or 0->1)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bf0c      	ite	eq
 80067d8:	2301      	moveq	r3, #1
 80067da:	2300      	movne	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	611a      	str	r2, [r3, #16]
			obj->needs_refresh = 1;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2201      	movs	r2, #1
 80067e8:	761a      	strb	r2, [r3, #24]
			g_lui_needs_render = 1;
 80067ea:	4b91      	ldr	r3, [pc, #580]	; (8006a30 <_lui_set_obj_props_on_touch_input+0x414>)
 80067ec:	2201      	movs	r2, #1
 80067ee:	701a      	strb	r2, [r3, #0]
		if (obj->event == LUI_EVENT_RELEASED || obj->event == LUI_EVENT_SELECTION_LOST)
 80067f0:	e201      	b.n	8006bf6 <_lui_set_obj_props_on_touch_input+0x5da>
	else if (obj->obj_type == LUI_OBJ_SLIDER)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	7edb      	ldrb	r3, [r3, #27]
 80067f6:	2b0a      	cmp	r3, #10
 80067f8:	f040 817b 	bne.w	8006af2 <_lui_set_obj_props_on_touch_input+0x4d6>
		lui_slider_t* slider = (lui_slider_t* )(obj->obj_main_data);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8006802:	61bb      	str	r3, [r7, #24]
		uint8_t is_hor = obj->common_style.width >= obj->common_style.height;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800680a:	b29a      	uxth	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8006812:	b29b      	uxth	r3, r3
 8006814:	429a      	cmp	r2, r3
 8006816:	bf2c      	ite	cs
 8006818:	2301      	movcs	r3, #1
 800681a:	2300      	movcc	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	75fb      	strb	r3, [r7, #23]
		uint8_t is_pos_changed = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (is_hor)
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d014      	beq.n	8006856 <_lui_set_obj_props_on_touch_input+0x23a>
			is_pos_changed = input->x != (obj->x + slider->knob_center_rel_d);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8006832:	b21b      	sxth	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	4619      	mov	r1, r3
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	899b      	ldrh	r3, [r3, #12]
 8006842:	b29b      	uxth	r3, r3
 8006844:	440b      	add	r3, r1
 8006846:	429a      	cmp	r2, r3
 8006848:	bf14      	ite	ne
 800684a:	2301      	movne	r3, #1
 800684c:	2300      	moveq	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8006854:	e013      	b.n	800687e <_lui_set_obj_props_on_touch_input+0x262>
			is_pos_changed = input->y != (obj->y + slider->knob_center_rel_d);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800685c:	b21b      	sxth	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	885b      	ldrh	r3, [r3, #2]
 8006864:	b29b      	uxth	r3, r3
 8006866:	4619      	mov	r1, r3
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	899b      	ldrh	r3, [r3, #12]
 800686c:	b29b      	uxth	r3, r3
 800686e:	440b      	add	r3, r1
 8006870:	429a      	cmp	r2, r3
 8006872:	bf14      	ite	ne
 8006874:	2301      	movne	r3, #1
 8006876:	2300      	moveq	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (obj->state == LUI_STATE_PRESSED && is_pos_changed)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	7b9b      	ldrb	r3, [r3, #14]
 8006882:	2b02      	cmp	r3, #2
 8006884:	f040 81b8 	bne.w	8006bf8 <_lui_set_obj_props_on_touch_input+0x5dc>
 8006888:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 81b3 	beq.w	8006bf8 <_lui_set_obj_props_on_touch_input+0x5dc>
			uint16_t knob_w_by_2 = slider->knob_type == LUI_SLIDER_KNOB_TYPE_DEFAULT ? slider->style.knob_width / 2 : 0;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	7adb      	ldrb	r3, [r3, #11]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d105      	bne.n	80068a6 <_lui_set_obj_props_on_touch_input+0x28a>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	799b      	ldrb	r3, [r3, #6]
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	e000      	b.n	80068a8 <_lui_set_obj_props_on_touch_input+0x28c>
 80068a6:	2300      	movs	r3, #0
 80068a8:	82bb      	strh	r3, [r7, #20]
			if (is_hor)
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 808a 	beq.w	80069c6 <_lui_set_obj_props_on_touch_input+0x3aa>
				uint16_t max_knob_center_actual_x = obj->x + obj->common_style.width - knob_w_by_2;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	4413      	add	r3, r2
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	8abb      	ldrh	r3, [r7, #20]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	81fb      	strh	r3, [r7, #14]
				uint16_t min_knob_center_actual_x = obj->x + knob_w_by_2;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	8abb      	ldrh	r3, [r7, #20]
 80068d2:	4413      	add	r3, r2
 80068d4:	81bb      	strh	r3, [r7, #12]
				if (input->x > max_knob_center_actual_x)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80068dc:	b21b      	sxth	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	89fb      	ldrh	r3, [r7, #14]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	dd08      	ble.n	80068f8 <_lui_set_obj_props_on_touch_input+0x2dc>
					slider->knob_center_rel_d = max_knob_center_actual_x - obj->x;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	89fa      	ldrh	r2, [r7, #14]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	819a      	strh	r2, [r3, #12]
 80068f6:	e01c      	b.n	8006932 <_lui_set_obj_props_on_touch_input+0x316>
				else if (input->x < min_knob_center_actual_x)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80068fe:	b21b      	sxth	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	89bb      	ldrh	r3, [r7, #12]
 8006904:	429a      	cmp	r2, r3
 8006906:	da08      	bge.n	800691a <_lui_set_obj_props_on_touch_input+0x2fe>
					slider->knob_center_rel_d = min_knob_center_actual_x - obj->x;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29b      	uxth	r3, r3
 800690e:	89ba      	ldrh	r2, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	b29a      	uxth	r2, r3
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	819a      	strh	r2, [r3, #12]
 8006918:	e00b      	b.n	8006932 <_lui_set_obj_props_on_touch_input+0x316>
					slider->knob_center_rel_d = input->x - obj->x;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8006920:	b21b      	sxth	r3, r3
 8006922:	b29a      	uxth	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	b29a      	uxth	r2, r3
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	819a      	strh	r2, [r3, #12]
				obj->value = _lui_map_range(slider->knob_center_rel_d, obj->common_style.width - (slider->style.knob_width / 2), (slider->style.knob_width / 2), slider->range_max, slider->range_min);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	899b      	ldrh	r3, [r3, #12]
 8006936:	b29b      	uxth	r3, r3
 8006938:	4618      	mov	r0, r3
 800693a:	f7f9 fdfb 	bl	8000534 <__aeabi_ui2d>
 800693e:	4604      	mov	r4, r0
 8006940:	460d      	mov	r5, r1
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006948:	b29b      	uxth	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	799b      	ldrb	r3, [r3, #6]
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	b2db      	uxtb	r3, r3
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	4618      	mov	r0, r3
 8006958:	f7f9 fdfc 	bl	8000554 <__aeabi_i2d>
 800695c:	4680      	mov	r8, r0
 800695e:	4689      	mov	r9, r1
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	799b      	ldrb	r3, [r3, #6]
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	4618      	mov	r0, r3
 800696a:	f7f9 fdf3 	bl	8000554 <__aeabi_i2d>
 800696e:	4682      	mov	sl, r0
 8006970:	468b      	mov	fp, r1
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
 8006978:	b21b      	sxth	r3, r3
 800697a:	4618      	mov	r0, r3
 800697c:	f7f9 fdea 	bl	8000554 <__aeabi_i2d>
 8006980:	ec41 0b18 	vmov	d8, r0, r1
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 800698a:	b21b      	sxth	r3, r3
 800698c:	4618      	mov	r0, r3
 800698e:	f7f9 fde1 	bl	8000554 <__aeabi_i2d>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	ec43 2b14 	vmov	d4, r2, r3
 800699a:	eeb0 3a48 	vmov.f32	s6, s16
 800699e:	eef0 3a68 	vmov.f32	s7, s17
 80069a2:	ec4b ab12 	vmov	d2, sl, fp
 80069a6:	ec49 8b11 	vmov	d1, r8, r9
 80069aa:	ec45 4b10 	vmov	d0, r4, r5
 80069ae:	f001 f96d 	bl	8007c8c <_lui_map_range>
 80069b2:	ec53 2b10 	vmov	r2, r3, d0
 80069b6:	4610      	mov	r0, r2
 80069b8:	4619      	mov	r1, r3
 80069ba:	f7fa f8e5 	bl	8000b88 <__aeabi_d2iz>
 80069be:	4602      	mov	r2, r0
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	611a      	str	r2, [r3, #16]
 80069c4:	e08b      	b.n	8006ade <_lui_set_obj_props_on_touch_input+0x4c2>
				uint16_t max_knob_center_actual_y = obj->y + obj->common_style.height - knob_w_by_2;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	885b      	ldrh	r3, [r3, #2]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	8abb      	ldrh	r3, [r7, #20]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	827b      	strh	r3, [r7, #18]
				uint16_t min_knob_center_actual_y = obj->y + knob_w_by_2;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	885b      	ldrh	r3, [r3, #2]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	8abb      	ldrh	r3, [r7, #20]
 80069e6:	4413      	add	r3, r2
 80069e8:	823b      	strh	r3, [r7, #16]
				if (input->y > max_knob_center_actual_y)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80069f0:	b21b      	sxth	r3, r3
 80069f2:	461a      	mov	r2, r3
 80069f4:	8a7b      	ldrh	r3, [r7, #18]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	dd08      	ble.n	8006a0c <_lui_set_obj_props_on_touch_input+0x3f0>
					slider->knob_center_rel_d = max_knob_center_actual_y - obj->y;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	885b      	ldrh	r3, [r3, #2]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8a7a      	ldrh	r2, [r7, #18]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	819a      	strh	r2, [r3, #12]
 8006a0a:	e01f      	b.n	8006a4c <_lui_set_obj_props_on_touch_input+0x430>
				else if (input->y < min_knob_center_actual_y)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8006a12:	b21b      	sxth	r3, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	8a3b      	ldrh	r3, [r7, #16]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	da0b      	bge.n	8006a34 <_lui_set_obj_props_on_touch_input+0x418>
					slider->knob_center_rel_d = min_knob_center_actual_y - obj->y;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	885b      	ldrh	r3, [r3, #2]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	8a3a      	ldrh	r2, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	819a      	strh	r2, [r3, #12]
 8006a2c:	e00e      	b.n	8006a4c <_lui_set_obj_props_on_touch_input+0x430>
 8006a2e:	bf00      	nop
 8006a30:	20002458 	.word	0x20002458
					slider->knob_center_rel_d = input->y - obj->y;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8006a3a:	b21b      	sxth	r3, r3
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	885b      	ldrh	r3, [r3, #2]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	819a      	strh	r2, [r3, #12]
				obj->value = _lui_map_range(slider->knob_center_rel_d, obj->common_style.height - (slider->style.knob_width / 2), (slider->style.knob_width / 2), slider->range_min, slider->range_max);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	899b      	ldrh	r3, [r3, #12]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7f9 fd6e 	bl	8000534 <__aeabi_ui2d>
 8006a58:	4604      	mov	r4, r0
 8006a5a:	460d      	mov	r5, r1
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	799b      	ldrb	r3, [r3, #6]
 8006a6a:	085b      	lsrs	r3, r3, #1
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7f9 fd6f 	bl	8000554 <__aeabi_i2d>
 8006a76:	4680      	mov	r8, r0
 8006a78:	4689      	mov	r9, r1
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	799b      	ldrb	r3, [r3, #6]
 8006a7e:	085b      	lsrs	r3, r3, #1
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7f9 fd66 	bl	8000554 <__aeabi_i2d>
 8006a88:	4682      	mov	sl, r0
 8006a8a:	468b      	mov	fp, r1
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 8006a92:	b21b      	sxth	r3, r3
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7f9 fd5d 	bl	8000554 <__aeabi_i2d>
 8006a9a:	ec41 0b18 	vmov	d8, r0, r1
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
 8006aa4:	b21b      	sxth	r3, r3
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7f9 fd54 	bl	8000554 <__aeabi_i2d>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	ec43 2b14 	vmov	d4, r2, r3
 8006ab4:	eeb0 3a48 	vmov.f32	s6, s16
 8006ab8:	eef0 3a68 	vmov.f32	s7, s17
 8006abc:	ec4b ab12 	vmov	d2, sl, fp
 8006ac0:	ec49 8b11 	vmov	d1, r8, r9
 8006ac4:	ec45 4b10 	vmov	d0, r4, r5
 8006ac8:	f001 f8e0 	bl	8007c8c <_lui_map_range>
 8006acc:	ec53 2b10 	vmov	r2, r3, d0
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	f7fa f858 	bl	8000b88 <__aeabi_d2iz>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	611a      	str	r2, [r3, #16]
			obj->event = LUI_EVENT_VALUE_CHANGED;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	73da      	strb	r2, [r3, #15]
			obj->needs_refresh = 1;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	761a      	strb	r2, [r3, #24]
			g_lui_needs_render = 1;
 8006aea:	4b47      	ldr	r3, [pc, #284]	; (8006c08 <_lui_set_obj_props_on_touch_input+0x5ec>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	701a      	strb	r2, [r3, #0]
}
 8006af0:	e082      	b.n	8006bf8 <_lui_set_obj_props_on_touch_input+0x5dc>
	else if (obj->obj_type == LUI_OBJ_BTNGRID)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	7edb      	ldrb	r3, [r3, #27]
 8006af6:	2b0b      	cmp	r3, #11
 8006af8:	d17e      	bne.n	8006bf8 <_lui_set_obj_props_on_touch_input+0x5dc>
		lui_btngrid_t* btngrid = (lui_btngrid_t* )(obj->obj_main_data);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
 8006b00:	623b      	str	r3, [r7, #32]
		if (btngrid->active_btn_index != last_active_btn)
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006b08:	b21a      	sxth	r2, r3
 8006b0a:	4b40      	ldr	r3, [pc, #256]	; (8006c0c <_lui_set_obj_props_on_touch_input+0x5f0>)
 8006b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d036      	beq.n	8006b82 <_lui_set_obj_props_on_touch_input+0x566>
			if (btngrid->active_btn_index == -1)
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006b1a:	b21b      	sxth	r3, r3
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d107      	bne.n	8006b32 <_lui_set_obj_props_on_touch_input+0x516>
				tmp_new_state = LUI_STATE_IDLE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				tmp_old_state = old_state;
 8006b28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006b2c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8006b30:	e006      	b.n	8006b40 <_lui_set_obj_props_on_touch_input+0x524>
				tmp_new_state = new_state;
 8006b32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				tmp_old_state = LUI_STATE_IDLE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			obj->event = _lui_get_event_against_state(tmp_new_state, tmp_old_state);
 8006b40:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8006b44:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f001 f822 	bl	8007b94 <_lui_get_event_against_state>
 8006b50:	4603      	mov	r3, r0
 8006b52:	461a      	mov	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	73da      	strb	r2, [r3, #15]
			if ((input->x == -1 || input->y == -1) && obj->event == LUI_EVENT_SELECTION_LOST)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8006b5e:	b21b      	sxth	r3, r3
 8006b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b64:	d006      	beq.n	8006b74 <_lui_set_obj_props_on_touch_input+0x558>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8006b6c:	b21b      	sxth	r3, r3
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d106      	bne.n	8006b82 <_lui_set_obj_props_on_touch_input+0x566>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	7bdb      	ldrb	r3, [r3, #15]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d102      	bne.n	8006b82 <_lui_set_obj_props_on_touch_input+0x566>
				obj->event = LUI_EVENT_RELEASED;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2204      	movs	r2, #4
 8006b80:	73da      	strb	r2, [r3, #15]
		if (obj->event == LUI_EVENT_PRESSED)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	7bdb      	ldrb	r3, [r3, #15]
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d124      	bne.n	8006bd4 <_lui_set_obj_props_on_touch_input+0x5b8>
			uint8_t is_checkable = btngrid->btn_properties[btngrid->active_btn_index] & LUI_BTNGRID_MASK_BTN_CHECKABLE;
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	6a3a      	ldr	r2, [r7, #32]
 8006b90:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8006b94:	b212      	sxth	r2, r2
 8006b96:	4413      	add	r3, r2
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f003 0310 	and.w	r3, r3, #16
 8006b9e:	77fb      	strb	r3, [r7, #31]
			if (is_checkable)
 8006ba0:	7ffb      	ldrb	r3, [r7, #31]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d016      	beq.n	8006bd4 <_lui_set_obj_props_on_touch_input+0x5b8>
				obj->event = LUI_EVENT_CHECK_CHANGED;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2207      	movs	r2, #7
 8006baa:	73da      	strb	r2, [r3, #15]
				btngrid->btn_properties[btngrid->active_btn_index] ^= LUI_BTNGRID_MASK_BTN_CHECKED;	// toggle check state of the active button
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	6a3a      	ldr	r2, [r7, #32]
 8006bb2:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8006bb6:	b212      	sxth	r2, r2
 8006bb8:	4413      	add	r3, r2
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	6a3a      	ldr	r2, [r7, #32]
 8006bbe:	6852      	ldr	r2, [r2, #4]
 8006bc0:	6a39      	ldr	r1, [r7, #32]
 8006bc2:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 8006bc6:	b209      	sxth	r1, r1
 8006bc8:	440a      	add	r2, r1
 8006bca:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8006bce:	43db      	mvns	r3, r3
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	7013      	strb	r3, [r2, #0]
		if (obj->event != LUI_EVENT_NONE)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	7bdb      	ldrb	r3, [r3, #15]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <_lui_set_obj_props_on_touch_input+0x5cc>
			obj->needs_refresh = 1;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2201      	movs	r2, #1
 8006be0:	761a      	strb	r2, [r3, #24]
			g_lui_needs_render = 1;
 8006be2:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <_lui_set_obj_props_on_touch_input+0x5ec>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
		last_active_btn = btngrid->active_btn_index;
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006bee:	b21a      	sxth	r2, r3
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <_lui_set_obj_props_on_touch_input+0x5f0>)
 8006bf2:	801a      	strh	r2, [r3, #0]
}
 8006bf4:	e000      	b.n	8006bf8 <_lui_set_obj_props_on_touch_input+0x5dc>
		if (obj->event == LUI_EVENT_RELEASED || obj->event == LUI_EVENT_SELECTION_LOST)
 8006bf6:	bf00      	nop
}
 8006bf8:	bf00      	nop
 8006bfa:	3738      	adds	r7, #56	; 0x38
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	ecbd 8b02 	vpop	{d8}
 8006c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c06:	bf00      	nop
 8006c08:	20002458 	.word	0x20002458
 8006c0c:	2000004e 	.word	0x2000004e

08006c10 <lui_dispdrv_create>:
 * 			DISPLAY DRIVER Callback Functions and Display Properties
 *------------------------------------------------------------------------------
 */

lui_dispdrv_t* lui_dispdrv_create()
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
	lui_dispdrv_t* initial_disp_drv =  (lui_dispdrv_t* )_lui_mem_alloc(sizeof(*initial_disp_drv));
 8006c16:	200e      	movs	r0, #14
 8006c18:	f001 f8d4 	bl	8007dc4 <_lui_mem_alloc>
 8006c1c:	6078      	str	r0, [r7, #4]
	if (initial_disp_drv == NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <lui_dispdrv_create+0x18>
		return NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e027      	b.n	8006c78 <lui_dispdrv_create+0x68>

	initial_disp_drv->draw_pixels_buff_cb = NULL;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	705a      	strb	r2, [r3, #1]
 8006c32:	2200      	movs	r2, #0
 8006c34:	709a      	strb	r2, [r3, #2]
 8006c36:	2200      	movs	r2, #0
 8006c38:	70da      	strb	r2, [r3, #3]
	initial_disp_drv->disp_buff = NULL;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	711a      	strb	r2, [r3, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	715a      	strb	r2, [r3, #5]
 8006c44:	2200      	movs	r2, #0
 8006c46:	719a      	strb	r2, [r3, #6]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	71da      	strb	r2, [r3, #7]
	initial_disp_drv->disp_buff_sz_px = 0;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	721a      	strb	r2, [r3, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	725a      	strb	r2, [r3, #9]
	initial_disp_drv->display_hor_res = 320;		//horizontal 320px default
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c5e:	729a      	strb	r2, [r3, #10]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	72da      	strb	r2, [r3, #11]
	initial_disp_drv->display_vert_res = 240;	//vertical 240px default
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f062 020f 	orn	r2, r2, #15
 8006c70:	731a      	strb	r2, [r3, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	735a      	strb	r2, [r3, #13]

	return initial_disp_drv;
 8006c76:	687b      	ldr	r3, [r7, #4]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <lui_dispdrv_register>:

void lui_dispdrv_register(lui_dispdrv_t* dispdrv)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	if (dispdrv == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d004      	beq.n	8006c98 <lui_dispdrv_register+0x18>
		return;
	 g_lui_main->disp_drv = dispdrv;
 8006c8e:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <lui_dispdrv_register+0x24>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	60da      	str	r2, [r3, #12]
 8006c96:	e000      	b.n	8006c9a <lui_dispdrv_register+0x1a>
		return;
 8006c98:	bf00      	nop
}
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	20002464 	.word	0x20002464

08006ca8 <lui_dispdrv_set_resolution>:

void lui_dispdrv_set_resolution(lui_dispdrv_t* dispdrv, uint16_t hor_res, uint16_t vert_res)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	807b      	strh	r3, [r7, #2]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	803b      	strh	r3, [r7, #0]
	if (dispdrv == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d006      	beq.n	8006ccc <lui_dispdrv_set_resolution+0x24>
		return;
	dispdrv->display_hor_res = hor_res;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	887a      	ldrh	r2, [r7, #2]
 8006cc2:	815a      	strh	r2, [r3, #10]
	dispdrv->display_vert_res = vert_res;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	883a      	ldrh	r2, [r7, #0]
 8006cc8:	819a      	strh	r2, [r3, #12]
 8006cca:	e000      	b.n	8006cce <lui_dispdrv_set_resolution+0x26>
		return;
 8006ccc:	bf00      	nop
}
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <lui_dispdrv_set_draw_disp_buff_cb>:

void lui_dispdrv_set_draw_disp_buff_cb(lui_dispdrv_t* dispdrv, void (*draw_pixels_buff_cb)(uint16_t* disp_buff, lui_area_t* area))
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
	if (dispdrv == NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <lui_dispdrv_set_draw_disp_buff_cb+0x18>
		return;
	dispdrv->draw_pixels_buff_cb = draw_pixels_buff_cb;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e000      	b.n	8006cf2 <lui_dispdrv_set_draw_disp_buff_cb+0x1a>
		return;
 8006cf0:	bf00      	nop
}
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <lui_dispdrv_set_disp_buff>:

int8_t lui_dispdrv_set_disp_buff(lui_dispdrv_t* dispdrv, uint16_t* disp_buff, uint16_t size_in_px)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
	if (dispdrv == NULL)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d102      	bne.n	8006d16 <lui_dispdrv_set_disp_buff+0x1a>
		return -1;
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	e00c      	b.n	8006d30 <lui_dispdrv_set_disp_buff+0x34>
	if (disp_buff == NULL)
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <lui_dispdrv_set_disp_buff+0x26>
		return -1;
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d20:	e006      	b.n	8006d30 <lui_dispdrv_set_disp_buff+0x34>
	dispdrv->disp_buff = disp_buff;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	605a      	str	r2, [r3, #4]
	dispdrv->disp_buff_sz_px = size_in_px;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	88fa      	ldrh	r2, [r7, #6]
 8006d2c:	811a      	strh	r2, [r3, #8]
	return 0;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <lui_gfx_draw_string_advanced>:
 * 			Graphics Functions
 *------------------------------------------------------------------------------
 */

void lui_gfx_draw_string_advanced(const char* str, lui_area_t* area, uint16_t fore_color, uint16_t bg_color, const lui_bitmap_t* bg_bitmap, lui_bitmap_mono_pal_t* palette, lui_area_t* bitmap_crop, uint8_t is_bg, const lui_font_t* font)
{
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b08f      	sub	sp, #60	; 0x3c
 8006d40:	af04      	add	r7, sp, #16
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4611      	mov	r1, r2
 8006d48:	461a      	mov	r2, r3
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	80fb      	strh	r3, [r7, #6]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80bb      	strh	r3, [r7, #4]
	if (str == NULL || area == NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8129 	beq.w	8006fac <lui_gfx_draw_string_advanced+0x270>
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8125 	beq.w	8006fac <lui_gfx_draw_string_advanced+0x270>
		return;

	uint16_t x_temp = area->x;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	781a      	ldrb	r2, [r3, #0]
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t y_temp = area->y;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	789a      	ldrb	r2, [r3, #2]
 8006d72:	78db      	ldrb	r3, [r3, #3]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	4313      	orrs	r3, r2
 8006d78:	84bb      	strh	r3, [r7, #36]	; 0x24
    const _lui_glyph_t* glyph;
	if (area->w == 0 || area->h == 0)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	889b      	ldrh	r3, [r3, #4]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <lui_gfx_draw_string_advanced+0x52>
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	88db      	ldrh	r3, [r3, #6]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d151      	bne.n	8006e32 <lui_gfx_draw_string_advanced+0xf6>
	{
		uint16_t max_w = area->w == 0 ? g_lui_main->disp_drv->display_hor_res - area->x : area->w;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	889b      	ldrh	r3, [r3, #4]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <lui_gfx_draw_string_advanced+0x72>
 8006d98:	4b87      	ldr	r3, [pc, #540]	; (8006fb8 <lui_gfx_draw_string_advanced+0x27c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	895b      	ldrh	r3, [r3, #10]
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	e002      	b.n	8006db4 <lui_gfx_draw_string_advanced+0x78>
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	889b      	ldrh	r3, [r3, #4]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	843b      	strh	r3, [r7, #32]
		uint16_t max_h = area->h == 0 ? g_lui_main->disp_drv->display_vert_res - area->y : area->h;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	88db      	ldrh	r3, [r3, #6]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <lui_gfx_draw_string_advanced+0x9a>
 8006dc0:	4b7d      	ldr	r3, [pc, #500]	; (8006fb8 <lui_gfx_draw_string_advanced+0x27c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	899b      	ldrh	r3, [r3, #12]
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	e002      	b.n	8006ddc <lui_gfx_draw_string_advanced+0xa0>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	88db      	ldrh	r3, [r3, #6]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	83fb      	strh	r3, [r7, #30]
		uint16_t dim[2] = {0, 0};	// x, y
 8006dde:	2300      	movs	r3, #0
 8006de0:	82bb      	strh	r3, [r7, #20]
 8006de2:	2300      	movs	r3, #0
 8006de4:	82fb      	strh	r3, [r7, #22]

		lui_gfx_get_string_dimension(str, font, max_w, dim);
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	8c3a      	ldrh	r2, [r7, #32]
 8006dec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fa50 	bl	8007294 <lui_gfx_get_string_dimension>
		dim[1] = dim[1] > max_h ? max_h : dim[1];
 8006df4:	8afb      	ldrh	r3, [r7, #22]
 8006df6:	8bfa      	ldrh	r2, [r7, #30]
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	bf28      	it	cs
 8006dfc:	4613      	movcs	r3, r2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	82fb      	strh	r3, [r7, #22]

		area->w = area->w == 0 ? dim[0] : area->w;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	889b      	ldrh	r3, [r3, #4]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <lui_gfx_draw_string_advanced+0xd4>
 8006e0c:	8abb      	ldrh	r3, [r7, #20]
 8006e0e:	e002      	b.n	8006e16 <lui_gfx_draw_string_advanced+0xda>
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	889b      	ldrh	r3, [r3, #4]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	8093      	strh	r3, [r2, #4]
		area->h = area->h == 0 ? dim[1] : area->h;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	88db      	ldrh	r3, [r3, #6]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <lui_gfx_draw_string_advanced+0xec>
 8006e24:	8afb      	ldrh	r3, [r7, #22]
 8006e26:	e002      	b.n	8006e2e <lui_gfx_draw_string_advanced+0xf2>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	88db      	ldrh	r3, [r3, #6]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	80d3      	strh	r3, [r2, #6]
	}
	/* If the calling function didn't know crop area and set it to 0,
	   here we set them to objects's w and h. Don't worry if the actual
	   bitmap is smaller than the set crop size, `lui_gfx_draw_bitmap()`
	   takes care of it.*/
	if (bitmap_crop)
 8006e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d013      	beq.n	8006e60 <lui_gfx_draw_string_advanced+0x124>
	{
		if (!bitmap_crop->w )	bitmap_crop->w = area->w;
 8006e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3a:	889b      	ldrh	r3, [r3, #4]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d104      	bne.n	8006e4c <lui_gfx_draw_string_advanced+0x110>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	889b      	ldrh	r3, [r3, #4]
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4a:	809a      	strh	r2, [r3, #4]
		if (!bitmap_crop->h )	bitmap_crop->h = area->h;
 8006e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4e:	88db      	ldrh	r3, [r3, #6]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d104      	bne.n	8006e60 <lui_gfx_draw_string_advanced+0x124>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	88db      	ldrh	r3, [r3, #6]
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5e:	80da      	strh	r2, [r3, #6]
	}
	if (is_bg)
 8006e60:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 809c 	beq.w	8006fa2 <lui_gfx_draw_string_advanced+0x266>
	{
		if (bg_bitmap)
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00d      	beq.n	8006e8c <lui_gfx_draw_string_advanced+0x150>
			lui_gfx_draw_bitmap(bg_bitmap, palette, area->x, area->y, bitmap_crop);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	885b      	ldrh	r3, [r3, #2]
 8006e7a:	b299      	uxth	r1, r3
 8006e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	460b      	mov	r3, r1
 8006e82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e86:	f000 fb7b 	bl	8007580 <lui_gfx_draw_bitmap>
 8006e8a:	e08a      	b.n	8006fa2 <lui_gfx_draw_string_advanced+0x266>
		else
			lui_gfx_draw_rect_fill(area->x, area->y, area->w, area->h, bg_color);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b298      	uxth	r0, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	885b      	ldrh	r3, [r3, #2]
 8006e96:	b299      	uxth	r1, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	889b      	ldrh	r3, [r3, #4]
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	88db      	ldrh	r3, [r3, #6]
 8006ea2:	b29c      	uxth	r4, r3
 8006ea4:	88bb      	ldrh	r3, [r7, #4]
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	4623      	mov	r3, r4
 8006eaa:	f000 f967 	bl	800717c <lui_gfx_draw_rect_fill>
	}

	// Scan chars one by one from the string
	//char
	while (*str != '\0')
 8006eae:	e078      	b.n	8006fa2 <lui_gfx_draw_string_advanced+0x266>
	{
		if (*str == '\n')
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b0a      	cmp	r3, #10
 8006eb6:	d10d      	bne.n	8006ed4 <lui_gfx_draw_string_advanced+0x198>
		{
			x_temp = area->x;					//go to first col
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	84fb      	strh	r3, [r7, #38]	; 0x26
			y_temp += (font->bitmap->size_y);	//go to next row (row height = height of space)
 8006ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	88db      	ldrh	r3, [r3, #6]
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ece:	4413      	add	r3, r2
 8006ed0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ed2:	e063      	b.n	8006f9c <lui_gfx_draw_string_advanced+0x260>
		}
		else
		{
			uint8_t glyph_width = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            glyph = _lui_gfx_get_glyph_from_char(*str, font);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 fa5c 	bl	800739e <_lui_gfx_get_glyph_from_char>
 8006ee6:	61b8      	str	r0, [r7, #24]

			if (glyph == NULL)
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d108      	bne.n	8006f00 <lui_gfx_draw_string_advanced+0x1c4>
				glyph_width = font->bitmap->size_y / 2;
 8006eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	88db      	ldrh	r3, [r3, #6]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006efe:	e010      	b.n	8006f22 <lui_gfx_draw_string_advanced+0x1e6>
			/* Width of space is not available in font map, so we calc w based on h */
			else if (glyph->character == ' ')
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d108      	bne.n	8006f1a <lui_gfx_draw_string_advanced+0x1de>
				glyph_width = font->bitmap->size_y / 4;
 8006f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	88db      	ldrh	r3, [r3, #6]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	089b      	lsrs	r3, r3, #2
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f18:	e003      	b.n	8006f22 <lui_gfx_draw_string_advanced+0x1e6>
			else
				glyph_width = glyph->width;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			// check if not enough space available at the right side
			if (x_temp + glyph_width > area->x + area->w)
 8006f22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f28:	441a      	add	r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4619      	mov	r1, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	889b      	ldrh	r3, [r3, #4]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	440b      	add	r3, r1
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	dd0c      	ble.n	8006f58 <lui_gfx_draw_string_advanced+0x21c>
			{
				x_temp = area->x;					//go to first col
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	781a      	ldrb	r2, [r3, #0]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	4313      	orrs	r3, r2
 8006f48:	84fb      	strh	r3, [r7, #38]	; 0x26
				y_temp += font->bitmap->size_y;	//go to next row
 8006f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	88db      	ldrh	r3, [r3, #6]
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f54:	4413      	add	r3, r2
 8006f56:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* check if not enough space available at the bottom */
			if(y_temp + font->bitmap->size_y > area->y + area->h)
 8006f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	88d2      	ldrh	r2, [r2, #6]
 8006f60:	b292      	uxth	r2, r2
 8006f62:	441a      	add	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	885b      	ldrh	r3, [r3, #2]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	88db      	ldrh	r3, [r3, #6]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	440b      	add	r3, r1
 8006f74:	429a      	cmp	r2, r3
 8006f76:	dc1b      	bgt.n	8006fb0 <lui_gfx_draw_string_advanced+0x274>
				return;

			_lui_gfx_render_char_glyph(x_temp, y_temp, fore_color, 0, 0, glyph, font);
 8006f78:	88fa      	ldrh	r2, [r7, #6]
 8006f7a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8006f7c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8006f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f80:	9302      	str	r3, [sp, #8]
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	2300      	movs	r3, #0
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f000 fa34 	bl	80073f8 <_lui_gfx_render_char_glyph>

			x_temp += glyph_width;		//next char position
 8006f90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f98:	4413      	add	r3, r2
 8006f9a:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

        str++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
	while (*str != '\0')
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d182      	bne.n	8006eb0 <lui_gfx_draw_string_advanced+0x174>
 8006faa:	e002      	b.n	8006fb2 <lui_gfx_draw_string_advanced+0x276>
		return;
 8006fac:	bf00      	nop
 8006fae:	e000      	b.n	8006fb2 <lui_gfx_draw_string_advanced+0x276>
				return;
 8006fb0:	bf00      	nop
	}
}
 8006fb2:	372c      	adds	r7, #44	; 0x2c
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd90      	pop	{r4, r7, pc}
 8006fb8:	20002464 	.word	0x20002464

08006fbc <lui_gfx_draw_line>:
 * Brehensen's algorithm is used.
 * Draw line between ANY two points.
 * Not necessarily start points has to be less than end points.
 */
void lui_gfx_draw_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t line_width, uint16_t color)
{
 8006fbc:	b590      	push	{r4, r7, lr}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4623      	mov	r3, r4
 8006fcc:	80fb      	strh	r3, [r7, #6]
 8006fce:	4603      	mov	r3, r0
 8006fd0:	80bb      	strh	r3, [r7, #4]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	807b      	strh	r3, [r7, #2]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	803b      	strh	r3, [r7, #0]
	/*
	* Brehensen's algorithm is used.
	* Not necessarily start points has to be less than end points.
	*/

	if (x0 == x1)	//vertical line
 8006fda:	88fa      	ldrh	r2, [r7, #6]
 8006fdc:	887b      	ldrh	r3, [r7, #2]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d117      	bne.n	8007012 <lui_gfx_draw_line+0x56>
	{
		lui_gfx_draw_rect_fill(x0, (y0 < y1 ? y0 : y1), (uint16_t)line_width, (uint16_t)abs(y1 - y0 + 1), color);
 8006fe2:	883a      	ldrh	r2, [r7, #0]
 8006fe4:	88bb      	ldrh	r3, [r7, #4]
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	bf28      	it	cs
 8006fea:	4613      	movcs	r3, r2
 8006fec:	b299      	uxth	r1, r3
 8006fee:	7e3b      	ldrb	r3, [r7, #24]
 8006ff0:	b29c      	uxth	r4, r3
 8006ff2:	883a      	ldrh	r2, [r7, #0]
 8006ff4:	88bb      	ldrh	r3, [r7, #4]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bfb8      	it	lt
 8006ffe:	425b      	neglt	r3, r3
 8007000:	b29a      	uxth	r2, r3
 8007002:	88f8      	ldrh	r0, [r7, #6]
 8007004:	8bbb      	ldrh	r3, [r7, #28]
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	4613      	mov	r3, r2
 800700a:	4622      	mov	r2, r4
 800700c:	f000 f8b6 	bl	800717c <lui_gfx_draw_rect_fill>
			else
				_lui_gfx_plot_line_high(x0, y0, x1, y1, line_width, color) ;
		}
	}

}
 8007010:	e060      	b.n	80070d4 <lui_gfx_draw_line+0x118>
	else if (y0 == y1)		//horizontal line
 8007012:	88ba      	ldrh	r2, [r7, #4]
 8007014:	883b      	ldrh	r3, [r7, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d116      	bne.n	8007048 <lui_gfx_draw_line+0x8c>
		lui_gfx_draw_rect_fill((x0 < x1 ? x0 : x1), y0, (uint16_t)abs(x1 - x0 + 1), (uint16_t)line_width, color);
 800701a:	887a      	ldrh	r2, [r7, #2]
 800701c:	88fb      	ldrh	r3, [r7, #6]
 800701e:	4293      	cmp	r3, r2
 8007020:	bf28      	it	cs
 8007022:	4613      	movcs	r3, r2
 8007024:	b298      	uxth	r0, r3
 8007026:	887a      	ldrh	r2, [r7, #2]
 8007028:	88fb      	ldrh	r3, [r7, #6]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	3301      	adds	r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	bfb8      	it	lt
 8007032:	425b      	neglt	r3, r3
 8007034:	b29a      	uxth	r2, r3
 8007036:	7e3b      	ldrb	r3, [r7, #24]
 8007038:	b29c      	uxth	r4, r3
 800703a:	88b9      	ldrh	r1, [r7, #4]
 800703c:	8bbb      	ldrh	r3, [r7, #28]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	4623      	mov	r3, r4
 8007042:	f000 f89b 	bl	800717c <lui_gfx_draw_rect_fill>
}
 8007046:	e045      	b.n	80070d4 <lui_gfx_draw_line+0x118>
		if (abs(y1 - y0) < abs(x1 - x0))
 8007048:	883a      	ldrh	r2, [r7, #0]
 800704a:	88bb      	ldrh	r3, [r7, #4]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8007052:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8007056:	8879      	ldrh	r1, [r7, #2]
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	1acb      	subs	r3, r1, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	bfb8      	it	lt
 8007060:	425b      	neglt	r3, r3
 8007062:	429a      	cmp	r2, r3
 8007064:	da1b      	bge.n	800709e <lui_gfx_draw_line+0xe2>
			if (x0 > x1)
 8007066:	88fa      	ldrh	r2, [r7, #6]
 8007068:	887b      	ldrh	r3, [r7, #2]
 800706a:	429a      	cmp	r2, r3
 800706c:	d90b      	bls.n	8007086 <lui_gfx_draw_line+0xca>
				_lui_gfx_plot_line_low(x1, y1, x0, y0, line_width, color);
 800706e:	88bc      	ldrh	r4, [r7, #4]
 8007070:	88fa      	ldrh	r2, [r7, #6]
 8007072:	8839      	ldrh	r1, [r7, #0]
 8007074:	8878      	ldrh	r0, [r7, #2]
 8007076:	8bbb      	ldrh	r3, [r7, #28]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	7e3b      	ldrb	r3, [r7, #24]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	4623      	mov	r3, r4
 8007080:	f000 fca4 	bl	80079cc <_lui_gfx_plot_line_low>
}
 8007084:	e026      	b.n	80070d4 <lui_gfx_draw_line+0x118>
				_lui_gfx_plot_line_low(x0, y0, x1, y1, line_width, color);
 8007086:	883c      	ldrh	r4, [r7, #0]
 8007088:	887a      	ldrh	r2, [r7, #2]
 800708a:	88b9      	ldrh	r1, [r7, #4]
 800708c:	88f8      	ldrh	r0, [r7, #6]
 800708e:	8bbb      	ldrh	r3, [r7, #28]
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	7e3b      	ldrb	r3, [r7, #24]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	4623      	mov	r3, r4
 8007098:	f000 fc98 	bl	80079cc <_lui_gfx_plot_line_low>
}
 800709c:	e01a      	b.n	80070d4 <lui_gfx_draw_line+0x118>
			if (y0 > y1)
 800709e:	88ba      	ldrh	r2, [r7, #4]
 80070a0:	883b      	ldrh	r3, [r7, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d90b      	bls.n	80070be <lui_gfx_draw_line+0x102>
				_lui_gfx_plot_line_high(x1, y1, x0, y0, line_width, color);
 80070a6:	88bc      	ldrh	r4, [r7, #4]
 80070a8:	88fa      	ldrh	r2, [r7, #6]
 80070aa:	8839      	ldrh	r1, [r7, #0]
 80070ac:	8878      	ldrh	r0, [r7, #2]
 80070ae:	8bbb      	ldrh	r3, [r7, #28]
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	7e3b      	ldrb	r3, [r7, #24]
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	4623      	mov	r3, r4
 80070b8:	f000 fcfa 	bl	8007ab0 <_lui_gfx_plot_line_high>
}
 80070bc:	e00a      	b.n	80070d4 <lui_gfx_draw_line+0x118>
				_lui_gfx_plot_line_high(x0, y0, x1, y1, line_width, color) ;
 80070be:	883c      	ldrh	r4, [r7, #0]
 80070c0:	887a      	ldrh	r2, [r7, #2]
 80070c2:	88b9      	ldrh	r1, [r7, #4]
 80070c4:	88f8      	ldrh	r0, [r7, #6]
 80070c6:	8bbb      	ldrh	r3, [r7, #28]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	7e3b      	ldrb	r3, [r7, #24]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4623      	mov	r3, r4
 80070d0:	f000 fcee 	bl	8007ab0 <_lui_gfx_plot_line_high>
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd90      	pop	{r4, r7, pc}

080070dc <lui_gfx_draw_rect>:

/*
 * Draw a rectangle with a given color and line width
 */
void lui_gfx_draw_rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t line_width, uint16_t color)
{
 80070dc:	b590      	push	{r4, r7, lr}
 80070de:	b087      	sub	sp, #28
 80070e0:	af02      	add	r7, sp, #8
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	461a      	mov	r2, r3
 80070ea:	4623      	mov	r3, r4
 80070ec:	80fb      	strh	r3, [r7, #6]
 80070ee:	4603      	mov	r3, r0
 80070f0:	80bb      	strh	r3, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	807b      	strh	r3, [r7, #2]
 80070f6:	4613      	mov	r3, r2
 80070f8:	803b      	strh	r3, [r7, #0]
	uint16_t x_new = x+w-1;
 80070fa:	88fa      	ldrh	r2, [r7, #6]
 80070fc:	887b      	ldrh	r3, [r7, #2]
 80070fe:	4413      	add	r3, r2
 8007100:	b29b      	uxth	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	81fb      	strh	r3, [r7, #14]
	uint16_t y_new = y+h-1;
 8007106:	88ba      	ldrh	r2, [r7, #4]
 8007108:	883b      	ldrh	r3, [r7, #0]
 800710a:	4413      	add	r3, r2
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	81bb      	strh	r3, [r7, #12]
	lui_gfx_draw_line(x, y, x_new, y, line_width, color);
 8007112:	88bc      	ldrh	r4, [r7, #4]
 8007114:	89fa      	ldrh	r2, [r7, #14]
 8007116:	88b9      	ldrh	r1, [r7, #4]
 8007118:	88f8      	ldrh	r0, [r7, #6]
 800711a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	4623      	mov	r3, r4
 8007126:	f7ff ff49 	bl	8006fbc <lui_gfx_draw_line>
	lui_gfx_draw_line(x_new, y, x_new, y_new, line_width, color);
 800712a:	89bc      	ldrh	r4, [r7, #12]
 800712c:	89fa      	ldrh	r2, [r7, #14]
 800712e:	88b9      	ldrh	r1, [r7, #4]
 8007130:	89f8      	ldrh	r0, [r7, #14]
 8007132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	4623      	mov	r3, r4
 800713e:	f7ff ff3d 	bl	8006fbc <lui_gfx_draw_line>
	lui_gfx_draw_line(x, y_new, x_new, y_new, line_width, color);
 8007142:	89bc      	ldrh	r4, [r7, #12]
 8007144:	89fa      	ldrh	r2, [r7, #14]
 8007146:	89b9      	ldrh	r1, [r7, #12]
 8007148:	88f8      	ldrh	r0, [r7, #6]
 800714a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	4623      	mov	r3, r4
 8007156:	f7ff ff31 	bl	8006fbc <lui_gfx_draw_line>
	lui_gfx_draw_line(x, y, x, y_new, line_width, color);
 800715a:	89bc      	ldrh	r4, [r7, #12]
 800715c:	88fa      	ldrh	r2, [r7, #6]
 800715e:	88b9      	ldrh	r1, [r7, #4]
 8007160:	88f8      	ldrh	r0, [r7, #6]
 8007162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	f897 3020 	ldrb.w	r3, [r7, #32]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	4623      	mov	r3, r4
 800716e:	f7ff ff25 	bl	8006fbc <lui_gfx_draw_line>
}
 8007172:	bf00      	nop
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	bd90      	pop	{r4, r7, pc}
	...

0800717c <lui_gfx_draw_rect_fill>:

/*
 * Fill a rectangular area with a color
 */
void lui_gfx_draw_rect_fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800717c:	b590      	push	{r4, r7, lr}
 800717e:	b08b      	sub	sp, #44	; 0x2c
 8007180:	af00      	add	r7, sp, #0
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	4611      	mov	r1, r2
 8007188:	461a      	mov	r2, r3
 800718a:	4623      	mov	r3, r4
 800718c:	80fb      	strh	r3, [r7, #6]
 800718e:	4603      	mov	r3, r0
 8007190:	80bb      	strh	r3, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	807b      	strh	r3, [r7, #2]
 8007196:	4613      	mov	r3, r2
 8007198:	803b      	strh	r3, [r7, #0]
	uint16_t buff_index = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t buff_h = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t px_cnt = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t tmp_x = 0, tmp_y = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	843b      	strh	r3, [r7, #32]
 80071aa:	2300      	movs	r3, #0
 80071ac:	83fb      	strh	r3, [r7, #30]
	for (tmp_y = y; tmp_y < y + h; ++tmp_y)
 80071ae:	88bb      	ldrh	r3, [r7, #4]
 80071b0:	83fb      	strh	r3, [r7, #30]
 80071b2:	e049      	b.n	8007248 <lui_gfx_draw_rect_fill+0xcc>
	{
		for (tmp_x = x; tmp_x < x + w; ++tmp_x)
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	843b      	strh	r3, [r7, #32]
 80071b8:	e00d      	b.n	80071d6 <lui_gfx_draw_rect_fill+0x5a>
		{
			g_lui_main->disp_drv->disp_buff[buff_index++] = color;
 80071ba:	4b35      	ldr	r3, [pc, #212]	; (8007290 <lui_gfx_draw_rect_fill+0x114>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071c4:	1c59      	adds	r1, r3, #1
 80071c6:	84f9      	strh	r1, [r7, #38]	; 0x26
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4413      	add	r3, r2
 80071cc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80071ce:	801a      	strh	r2, [r3, #0]
		for (tmp_x = x; tmp_x < x + w; ++tmp_x)
 80071d0:	8c3b      	ldrh	r3, [r7, #32]
 80071d2:	3301      	adds	r3, #1
 80071d4:	843b      	strh	r3, [r7, #32]
 80071d6:	8c3a      	ldrh	r2, [r7, #32]
 80071d8:	88f9      	ldrh	r1, [r7, #6]
 80071da:	887b      	ldrh	r3, [r7, #2]
 80071dc:	440b      	add	r3, r1
 80071de:	429a      	cmp	r2, r3
 80071e0:	dbeb      	blt.n	80071ba <lui_gfx_draw_rect_fill+0x3e>
		}
		++buff_h;
 80071e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e4:	3301      	adds	r3, #1
 80071e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		px_cnt += w;
 80071e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80071ea:	887b      	ldrh	r3, [r7, #2]
 80071ec:	4413      	add	r3, r2
 80071ee:	847b      	strh	r3, [r7, #34]	; 0x22
		if (px_cnt + w >= g_lui_main->disp_drv->disp_buff_sz_px)
 80071f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80071f2:	887b      	ldrh	r3, [r7, #2]
 80071f4:	4413      	add	r3, r2
 80071f6:	4a26      	ldr	r2, [pc, #152]	; (8007290 <lui_gfx_draw_rect_fill+0x114>)
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	68d2      	ldr	r2, [r2, #12]
 80071fc:	8912      	ldrh	r2, [r2, #8]
 80071fe:	b292      	uxth	r2, r2
 8007200:	4293      	cmp	r3, r2
 8007202:	db1e      	blt.n	8007242 <lui_gfx_draw_rect_fill+0xc6>
		{
			lui_area_t area = {
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	82bb      	strh	r3, [r7, #20]
				.x = x,
				.y = (tmp_y + 1) - buff_h,
 8007208:	8bfa      	ldrh	r2, [r7, #30]
 800720a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	b29b      	uxth	r3, r3
 8007210:	3301      	adds	r3, #1
 8007212:	b29b      	uxth	r3, r3
			lui_area_t area = {
 8007214:	82fb      	strh	r3, [r7, #22]
 8007216:	887b      	ldrh	r3, [r7, #2]
 8007218:	833b      	strh	r3, [r7, #24]
 800721a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800721c:	837b      	strh	r3, [r7, #26]
				.w = w,
				.h = buff_h,
			};
			g_lui_main->disp_drv->draw_pixels_buff_cb(g_lui_main->disp_drv->disp_buff, &area);
 800721e:	4b1c      	ldr	r3, [pc, #112]	; (8007290 <lui_gfx_draw_rect_fill+0x114>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1a      	ldr	r2, [pc, #104]	; (8007290 <lui_gfx_draw_rect_fill+0x114>)
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	68d2      	ldr	r2, [r2, #12]
 800722c:	6852      	ldr	r2, [r2, #4]
 800722e:	f107 0114 	add.w	r1, r7, #20
 8007232:	4610      	mov	r0, r2
 8007234:	4798      	blx	r3
			buff_h = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	84bb      	strh	r3, [r7, #36]	; 0x24
			px_cnt = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	847b      	strh	r3, [r7, #34]	; 0x22
			buff_index = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (tmp_y = y; tmp_y < y + h; ++tmp_y)
 8007242:	8bfb      	ldrh	r3, [r7, #30]
 8007244:	3301      	adds	r3, #1
 8007246:	83fb      	strh	r3, [r7, #30]
 8007248:	8bfa      	ldrh	r2, [r7, #30]
 800724a:	88b9      	ldrh	r1, [r7, #4]
 800724c:	883b      	ldrh	r3, [r7, #0]
 800724e:	440b      	add	r3, r1
 8007250:	429a      	cmp	r2, r3
 8007252:	dbaf      	blt.n	80071b4 <lui_gfx_draw_rect_fill+0x38>
		}
	}
	if (px_cnt)
 8007254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007256:	2b00      	cmp	r3, #0
 8007258:	d016      	beq.n	8007288 <lui_gfx_draw_rect_fill+0x10c>
	{
		lui_area_t area = {
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	81bb      	strh	r3, [r7, #12]
			.x = x,
			.y = tmp_y - buff_h,
 800725e:	8bfa      	ldrh	r2, [r7, #30]
 8007260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	b29b      	uxth	r3, r3
		lui_area_t area = {
 8007266:	81fb      	strh	r3, [r7, #14]
 8007268:	887b      	ldrh	r3, [r7, #2]
 800726a:	823b      	strh	r3, [r7, #16]
 800726c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800726e:	827b      	strh	r3, [r7, #18]
			.w = w,
			.h = buff_h,
		};
		g_lui_main->disp_drv->draw_pixels_buff_cb(g_lui_main->disp_drv->disp_buff, &area);
 8007270:	4b07      	ldr	r3, [pc, #28]	; (8007290 <lui_gfx_draw_rect_fill+0x114>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a05      	ldr	r2, [pc, #20]	; (8007290 <lui_gfx_draw_rect_fill+0x114>)
 800727a:	6812      	ldr	r2, [r2, #0]
 800727c:	68d2      	ldr	r2, [r2, #12]
 800727e:	6852      	ldr	r2, [r2, #4]
 8007280:	f107 010c 	add.w	r1, r7, #12
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
	}
}
 8007288:	bf00      	nop
 800728a:	372c      	adds	r7, #44	; 0x2c
 800728c:	46bd      	mov	sp, r7
 800728e:	bd90      	pop	{r4, r7, pc}
 8007290:	20002464 	.word	0x20002464

08007294 <lui_gfx_get_string_dimension>:
 * Get the width and height of a string (in pixels).
 * Width: by adding up the width of each glyph (representing a character)
 * Height: Height of any glyph (representing a character)
 */
void lui_gfx_get_string_dimension(const char* str, const lui_font_t* font, uint16_t max_w, uint16_t str_dim[2])
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	4613      	mov	r3, r2
 80072a2:	80fb      	strh	r3, [r7, #6]
	str_dim[0] = 0;	// -> width
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2200      	movs	r2, #0
 80072a8:	801a      	strh	r2, [r3, #0]
	str_dim[1] = 0;	// -> height
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	3302      	adds	r3, #2
 80072ae:	2200      	movs	r2, #0
 80072b0:	801a      	strh	r2, [r3, #0]

	if (str == NULL)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d06e      	beq.n	8007396 <lui_gfx_get_string_dimension+0x102>
		return;

	uint8_t needs_wrap = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	77fb      	strb	r3, [r7, #31]
	uint16_t temp_w = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	83bb      	strh	r3, [r7, #28]
	uint16_t temp_w_highest = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	837b      	strh	r3, [r7, #26]
	// height is the height of space
	uint16_t temp_h = font->bitmap->size_y;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	799a      	ldrb	r2, [r3, #6]
 80072ca:	79db      	ldrb	r3, [r3, #7]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	4313      	orrs	r3, r2
 80072d0:	833b      	strh	r3, [r7, #24]

	// Scan chars one by one from the string
	while (*str != '\0')
 80072d2:	e04f      	b.n	8007374 <lui_gfx_get_string_dimension+0xe0>
	{
		if (*str == '\n')
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b0a      	cmp	r3, #10
 80072da:	d109      	bne.n	80072f0 <lui_gfx_get_string_dimension+0x5c>
		{
			temp_h += font->bitmap->size_y;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	88db      	ldrh	r3, [r3, #6]
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	8b3b      	ldrh	r3, [r7, #24]
 80072e6:	4413      	add	r3, r2
 80072e8:	833b      	strh	r3, [r7, #24]
			temp_w = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	83bb      	strh	r3, [r7, #28]
 80072ee:	e03e      	b.n	800736e <lui_gfx_get_string_dimension+0xda>
		}
		else
		{
            uint8_t glyph_width = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	75fb      	strb	r3, [r7, #23]
            const _lui_glyph_t* glyph = _lui_gfx_get_glyph_from_char(*str, font);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 f84f 	bl	800739e <_lui_gfx_get_glyph_from_char>
 8007300:	6138      	str	r0, [r7, #16]

			if (glyph == NULL)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d107      	bne.n	8007318 <lui_gfx_get_string_dimension+0x84>
				glyph_width = font->bitmap->size_y / 2;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	88db      	ldrh	r3, [r3, #6]
 800730e:	b29b      	uxth	r3, r3
 8007310:	085b      	lsrs	r3, r3, #1
 8007312:	b29b      	uxth	r3, r3
 8007314:	75fb      	strb	r3, [r7, #23]
 8007316:	e00e      	b.n	8007336 <lui_gfx_get_string_dimension+0xa2>
			/* Width of space is not available in font map, so we calc w based on h */
			else if (glyph->character == ' ')
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b20      	cmp	r3, #32
 800731e:	d107      	bne.n	8007330 <lui_gfx_get_string_dimension+0x9c>
				glyph_width = font->bitmap->size_y / 4;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	88db      	ldrh	r3, [r3, #6]
 8007326:	b29b      	uxth	r3, r3
 8007328:	089b      	lsrs	r3, r3, #2
 800732a:	b29b      	uxth	r3, r3
 800732c:	75fb      	strb	r3, [r7, #23]
 800732e:	e002      	b.n	8007336 <lui_gfx_get_string_dimension+0xa2>
			else
				glyph_width = glyph->width;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	75fb      	strb	r3, [r7, #23]

            // Add width of glyphs
            if (temp_w + glyph_width > max_w)
 8007336:	8bba      	ldrh	r2, [r7, #28]
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	441a      	add	r2, r3
 800733c:	88fb      	ldrh	r3, [r7, #6]
 800733e:	429a      	cmp	r2, r3
 8007340:	dd0a      	ble.n	8007358 <lui_gfx_get_string_dimension+0xc4>
            {
                temp_h += font->bitmap->size_y;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	88db      	ldrh	r3, [r3, #6]
 8007348:	b29a      	uxth	r2, r3
 800734a:	8b3b      	ldrh	r3, [r7, #24]
 800734c:	4413      	add	r3, r2
 800734e:	833b      	strh	r3, [r7, #24]
                temp_w = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	83bb      	strh	r3, [r7, #28]
                needs_wrap = 1;
 8007354:	2301      	movs	r3, #1
 8007356:	77fb      	strb	r3, [r7, #31]
            }

            temp_w += glyph_width;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	b29a      	uxth	r2, r3
 800735c:	8bbb      	ldrh	r3, [r7, #28]
 800735e:	4413      	add	r3, r2
 8007360:	83bb      	strh	r3, [r7, #28]
            temp_w_highest = temp_w_highest < temp_w ? temp_w : temp_w_highest;
 8007362:	8b7a      	ldrh	r2, [r7, #26]
 8007364:	8bbb      	ldrh	r3, [r7, #28]
 8007366:	4293      	cmp	r3, r2
 8007368:	bf38      	it	cc
 800736a:	4613      	movcc	r3, r2
 800736c:	837b      	strh	r3, [r7, #26]
		}

        str++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
	while (*str != '\0')
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1ab      	bne.n	80072d4 <lui_gfx_get_string_dimension+0x40>
	}
	str_dim[0] = needs_wrap ? max_w : temp_w_highest;
 800737c:	7ffb      	ldrb	r3, [r7, #31]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <lui_gfx_get_string_dimension+0xf2>
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	e000      	b.n	8007388 <lui_gfx_get_string_dimension+0xf4>
 8007386:	8b7b      	ldrh	r3, [r7, #26]
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	8013      	strh	r3, [r2, #0]
	str_dim[1] = temp_h;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	3302      	adds	r3, #2
 8007390:	8b3a      	ldrh	r2, [r7, #24]
 8007392:	801a      	strh	r2, [r3, #0]
 8007394:	e000      	b.n	8007398 <lui_gfx_get_string_dimension+0x104>
		return;
 8007396:	bf00      	nop
}
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <_lui_gfx_get_glyph_from_char>:
{
	return LUI_RGB(red, green, blue);
}

const _lui_glyph_t* _lui_gfx_get_glyph_from_char(char c, const lui_font_t* font)
{
 800739e:	b480      	push	{r7}
 80073a0:	b085      	sub	sp, #20
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	4603      	mov	r3, r0
 80073a6:	6039      	str	r1, [r7, #0]
 80073a8:	71fb      	strb	r3, [r7, #7]
	const _lui_glyph_t* glyph = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	72fb      	strb	r3, [r7, #11]
	while (i < font->glyph_count)
 80073b2:	e014      	b.n	80073de <_lui_gfx_get_glyph_from_char+0x40>
	{
		if (font->glyphs[i].character == c)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80073ba:	7afb      	ldrb	r3, [r7, #11]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	79fa      	ldrb	r2, [r7, #7]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d107      	bne.n	80073d8 <_lui_gfx_get_glyph_from_char+0x3a>
		{
			glyph = &(font->glyphs[i]);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80073ce:	7afb      	ldrb	r3, [r7, #11]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]
			break;
 80073d6:	e007      	b.n	80073e8 <_lui_gfx_get_glyph_from_char+0x4a>
		}

		++i;
 80073d8:	7afb      	ldrb	r3, [r7, #11]
 80073da:	3301      	adds	r3, #1
 80073dc:	72fb      	strb	r3, [r7, #11]
	while (i < font->glyph_count)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	791b      	ldrb	r3, [r3, #4]
 80073e2:	7afa      	ldrb	r2, [r7, #11]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d3e5      	bcc.n	80073b4 <_lui_gfx_get_glyph_from_char+0x16>
	}
	return glyph;
 80073e8:	68fb      	ldr	r3, [r7, #12]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <_lui_gfx_render_char_glyph>:
 * Font must be generated by scanning from left to right
 *
 * Returns the last written pixel's X position
 */
void _lui_gfx_render_char_glyph(uint16_t x, uint16_t y, uint16_t fore_color, uint16_t bg_color, uint8_t is_bg, const _lui_glyph_t* glyph, const lui_font_t* font)
{
 80073f8:	b590      	push	{r4, r7, lr}
 80073fa:	b08b      	sub	sp, #44	; 0x2c
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	4604      	mov	r4, r0
 8007400:	4608      	mov	r0, r1
 8007402:	4611      	mov	r1, r2
 8007404:	461a      	mov	r2, r3
 8007406:	4623      	mov	r3, r4
 8007408:	80fb      	strh	r3, [r7, #6]
 800740a:	4603      	mov	r3, r0
 800740c:	80bb      	strh	r3, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	807b      	strh	r3, [r7, #2]
 8007412:	4613      	mov	r3, r2
 8007414:	803b      	strh	r3, [r7, #0]
	if (font == NULL)
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 80a9 	beq.w	8007570 <_lui_gfx_render_char_glyph+0x178>
		return;

	if (glyph == NULL)
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	2b00      	cmp	r3, #0
 8007422:	d111      	bne.n	8007448 <_lui_gfx_render_char_glyph+0x50>
	{
		lui_gfx_draw_rect_fill(x, y, font->bitmap->size_y / 2, font->bitmap->size_y, fore_color);
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	88db      	ldrh	r3, [r3, #6]
 800742a:	b29b      	uxth	r3, r3
 800742c:	085b      	lsrs	r3, r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	88db      	ldrh	r3, [r3, #6]
 8007436:	b29c      	uxth	r4, r3
 8007438:	887b      	ldrh	r3, [r7, #2]
 800743a:	88b9      	ldrh	r1, [r7, #4]
 800743c:	88f8      	ldrh	r0, [r7, #6]
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	4623      	mov	r3, r4
 8007442:	f7ff fe9b 	bl	800717c <lui_gfx_draw_rect_fill>
		return;
 8007446:	e094      	b.n	8007572 <_lui_gfx_render_char_glyph+0x17a>
	}

	uint16_t temp_x = x;
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	83fb      	strh	r3, [r7, #30]
	uint16_t temp_y = y;
 800744c:	88bb      	ldrh	r3, [r7, #4]
 800744e:	83bb      	strh	r3, [r7, #28]

	uint16_t width = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	837b      	strh	r3, [r7, #26]
	uint16_t index_offset = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	833b      	strh	r3, [r7, #24]
	lui_area_t disp_area = {
 8007458:	4a47      	ldr	r2, [pc, #284]	; (8007578 <_lui_gfx_render_char_glyph+0x180>)
 800745a:	f107 0308 	add.w	r3, r7, #8
 800745e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007462:	e883 0003 	stmia.w	r3, {r0, r1}
		.y = 0,
		.w = 1,
		.h = 1,
	};

	if (glyph == NULL)
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <_lui_gfx_render_char_glyph+0x80>
		width = font->bitmap->size_y / 2;
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	88db      	ldrh	r3, [r3, #6]
 8007472:	b29b      	uxth	r3, r3
 8007474:	085b      	lsrs	r3, r3, #1
 8007476:	837b      	strh	r3, [r7, #26]
	/* Width of space is not available in font map, so we calc w based on h */
	if (glyph->character == ' ')
 8007478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b20      	cmp	r3, #32
 800747e:	d106      	bne.n	800748e <_lui_gfx_render_char_glyph+0x96>
		width = font->bitmap->size_y / 4;
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	88db      	ldrh	r3, [r3, #6]
 8007486:	b29b      	uxth	r3, r3
 8007488:	089b      	lsrs	r3, r3, #2
 800748a:	837b      	strh	r3, [r7, #26]
 800748c:	e002      	b.n	8007494 <_lui_gfx_render_char_glyph+0x9c>
	else
		width = glyph->width;
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	837b      	strh	r3, [r7, #26]
	index_offset = glyph->payload_index;//((height / 8) + (height % 8 ? 1 : 0)) * x_offset;
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	789a      	ldrb	r2, [r3, #2]
 8007498:	78db      	ldrb	r3, [r3, #3]
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	4313      	orrs	r3, r2
 800749e:	833b      	strh	r3, [r7, #24]


    uint8_t mask = 0x80;
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	753b      	strb	r3, [r7, #20]
    uint8_t bit_counter = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	75fb      	strb	r3, [r7, #23]
    for (uint8_t w = 0; w < width; w++)
 80074a8:	2300      	movs	r3, #0
 80074aa:	75bb      	strb	r3, [r7, #22]
 80074ac:	e05a      	b.n	8007564 <_lui_gfx_render_char_glyph+0x16c>
    {
        bit_counter = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75fb      	strb	r3, [r7, #23]
        for (uint8_t h = 0; h < font->bitmap->size_y; h++)
 80074b2:	2300      	movs	r3, #0
 80074b4:	757b      	strb	r3, [r7, #21]
 80074b6:	e042      	b.n	800753e <_lui_gfx_render_char_glyph+0x146>
        {
            if (bit_counter >= 8)
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	2b07      	cmp	r3, #7
 80074bc:	d904      	bls.n	80074c8 <_lui_gfx_render_char_glyph+0xd0>
            {
                ++index_offset;
 80074be:	8b3b      	ldrh	r3, [r7, #24]
 80074c0:	3301      	adds	r3, #1
 80074c2:	833b      	strh	r3, [r7, #24]
                bit_counter = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	75fb      	strb	r3, [r7, #23]
            }
            uint8_t bit = mask & (font->bitmap->payload[index_offset] << bit_counter);
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	8b3b      	ldrh	r3, [r7, #24]
 80074d0:	4413      	add	r3, r2
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	b25a      	sxtb	r2, r3
 80074de:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80074e2:	4013      	ands	r3, r2
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	74fb      	strb	r3, [r7, #19]
			disp_area.x = temp_x;
 80074e8:	8bfb      	ldrh	r3, [r7, #30]
 80074ea:	813b      	strh	r3, [r7, #8]
			disp_area.y = temp_y;
 80074ec:	8bbb      	ldrh	r3, [r7, #28]
 80074ee:	817b      	strh	r3, [r7, #10]
			/**
			 * Nasty hack. Since width of space is calculated from height,
			 * we can't render space from bitmap buffer. Hence, we just skip
			 * rendering forecolor for space.
			 */
            if (bit && glyph->character != ' ')
 80074f0:	7cfb      	ldrb	r3, [r7, #19]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <_lui_gfx_render_char_glyph+0x11a>
 80074f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d009      	beq.n	8007512 <_lui_gfx_render_char_glyph+0x11a>
            {
				g_lui_main->disp_drv->draw_pixels_buff_cb(&fore_color, &disp_area);
 80074fe:	4b1f      	ldr	r3, [pc, #124]	; (800757c <_lui_gfx_render_char_glyph+0x184>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f107 0108 	add.w	r1, r7, #8
 800750a:	1cba      	adds	r2, r7, #2
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
 8007510:	e00c      	b.n	800752c <_lui_gfx_render_char_glyph+0x134>
            }
            else
            {
                if (is_bg)
 8007512:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007516:	2b00      	cmp	r3, #0
 8007518:	d008      	beq.n	800752c <_lui_gfx_render_char_glyph+0x134>
                    g_lui_main->disp_drv->draw_pixels_buff_cb(&bg_color, &disp_area);
 800751a:	4b18      	ldr	r3, [pc, #96]	; (800757c <_lui_gfx_render_char_glyph+0x184>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f107 0108 	add.w	r1, r7, #8
 8007526:	463a      	mov	r2, r7
 8007528:	4610      	mov	r0, r2
 800752a:	4798      	blx	r3
            }
            ++bit_counter;
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	3301      	adds	r3, #1
 8007530:	75fb      	strb	r3, [r7, #23]
            ++temp_y;
 8007532:	8bbb      	ldrh	r3, [r7, #28]
 8007534:	3301      	adds	r3, #1
 8007536:	83bb      	strh	r3, [r7, #28]
        for (uint8_t h = 0; h < font->bitmap->size_y; h++)
 8007538:	7d7b      	ldrb	r3, [r7, #21]
 800753a:	3301      	adds	r3, #1
 800753c:	757b      	strb	r3, [r7, #21]
 800753e:	7d7b      	ldrb	r3, [r7, #21]
 8007540:	b29a      	uxth	r2, r3
 8007542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	88db      	ldrh	r3, [r3, #6]
 8007548:	b29b      	uxth	r3, r3
 800754a:	429a      	cmp	r2, r3
 800754c:	d3b4      	bcc.n	80074b8 <_lui_gfx_render_char_glyph+0xc0>
        }
        ++index_offset;
 800754e:	8b3b      	ldrh	r3, [r7, #24]
 8007550:	3301      	adds	r3, #1
 8007552:	833b      	strh	r3, [r7, #24]
        ++temp_x;
 8007554:	8bfb      	ldrh	r3, [r7, #30]
 8007556:	3301      	adds	r3, #1
 8007558:	83fb      	strh	r3, [r7, #30]
        temp_y = y;
 800755a:	88bb      	ldrh	r3, [r7, #4]
 800755c:	83bb      	strh	r3, [r7, #28]
    for (uint8_t w = 0; w < width; w++)
 800755e:	7dbb      	ldrb	r3, [r7, #22]
 8007560:	3301      	adds	r3, #1
 8007562:	75bb      	strb	r3, [r7, #22]
 8007564:	7dbb      	ldrb	r3, [r7, #22]
 8007566:	b29b      	uxth	r3, r3
 8007568:	8b7a      	ldrh	r2, [r7, #26]
 800756a:	429a      	cmp	r2, r3
 800756c:	d89f      	bhi.n	80074ae <_lui_gfx_render_char_glyph+0xb6>
 800756e:	e000      	b.n	8007572 <_lui_gfx_render_char_glyph+0x17a>
		return;
 8007570:	bf00      	nop
    }
}
 8007572:	3724      	adds	r7, #36	; 0x24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd90      	pop	{r4, r7, pc}
 8007578:	0800b9a4 	.word	0x0800b9a4
 800757c:	20002464 	.word	0x20002464

08007580 <lui_gfx_draw_bitmap>:

void lui_gfx_draw_bitmap(const lui_bitmap_t* bitmap, lui_bitmap_mono_pal_t* palette, uint16_t x, uint16_t y, lui_area_t* crop_area)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b094      	sub	sp, #80	; 0x50
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	4611      	mov	r1, r2
 800758c:	461a      	mov	r2, r3
 800758e:	460b      	mov	r3, r1
 8007590:	80fb      	strh	r3, [r7, #6]
 8007592:	4613      	mov	r3, r2
 8007594:	80bb      	strh	r3, [r7, #4]
	if (bitmap == NULL)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 820a 	beq.w	80079b2 <lui_gfx_draw_bitmap+0x432>
		return;
	if (bitmap->bpp != 1 && bitmap->bpp != 8 && bitmap->bpp != 16)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	7a1b      	ldrb	r3, [r3, #8]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d008      	beq.n	80075b8 <lui_gfx_draw_bitmap+0x38>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	7a1b      	ldrb	r3, [r3, #8]
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d004      	beq.n	80075b8 <lui_gfx_draw_bitmap+0x38>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	7a1b      	ldrb	r3, [r3, #8]
 80075b2:	2b10      	cmp	r3, #16
 80075b4:	f040 81ff 	bne.w	80079b6 <lui_gfx_draw_bitmap+0x436>
		return;

	uint16_t color = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	83fb      	strh	r3, [r7, #30]
	uint16_t tmp_x = x;
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t tmp_y = y;
 80075c2:	88bb      	ldrh	r3, [r7, #4]
 80075c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint8_t mask = 0x80;
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    uint8_t bit_counter = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint32_t byte_offset = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	647b      	str	r3, [r7, #68]	; 0x44
	uint16_t width = bitmap->size_x;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	791a      	ldrb	r2, [r3, #4]
 80075dc:	795b      	ldrb	r3, [r3, #5]
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	4313      	orrs	r3, r2
 80075e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint16_t height = bitmap->size_y;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	799a      	ldrb	r2, [r3, #6]
 80075ea:	79db      	ldrb	r3, [r3, #7]
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint32_t stride = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* NOTE: Cropping supports only 8bpp and 16bpp bitmaps. NOT for 1-bpp mono */
	if (crop_area && bitmap->bpp != 1)
 80075f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 8095 	beq.w	800772a <lui_gfx_draw_bitmap+0x1aa>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	7a1b      	ldrb	r3, [r3, #8]
 8007604:	2b01      	cmp	r3, #1
 8007606:	f000 8090 	beq.w	800772a <lui_gfx_draw_bitmap+0x1aa>
	{
		/* Crop area start pos can't be higher than bitmap dimension itself */
		if (crop_area->x > bitmap->size_x || crop_area->y > bitmap->size_y)
 800760a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	889b      	ldrh	r3, [r3, #4]
 8007614:	b29b      	uxth	r3, r3
 8007616:	429a      	cmp	r2, r3
 8007618:	f200 81cf 	bhi.w	80079ba <lui_gfx_draw_bitmap+0x43a>
 800761c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800761e:	885b      	ldrh	r3, [r3, #2]
 8007620:	b29a      	uxth	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	88db      	ldrh	r3, [r3, #6]
 8007626:	b29b      	uxth	r3, r3
 8007628:	429a      	cmp	r2, r3
 800762a:	f200 81c6 	bhi.w	80079ba <lui_gfx_draw_bitmap+0x43a>
			return;
		crop_area->w = _LUI_BOUNDS(crop_area->w, 1, bitmap->size_x - crop_area->x);
 800762e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007630:	889b      	ldrh	r3, [r3, #4]
 8007632:	b29b      	uxth	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	889b      	ldrh	r3, [r3, #4]
 800763a:	b29b      	uxth	r3, r3
 800763c:	4619      	mov	r1, r3
 800763e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	1acb      	subs	r3, r1, r3
 8007646:	429a      	cmp	r2, r3
 8007648:	dd08      	ble.n	800765c <lui_gfx_draw_bitmap+0xdc>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	889b      	ldrh	r3, [r3, #4]
 800764e:	b29a      	uxth	r2, r3
 8007650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	b29b      	uxth	r3, r3
 800765a:	e009      	b.n	8007670 <lui_gfx_draw_bitmap+0xf0>
 800765c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800765e:	889b      	ldrh	r3, [r3, #4]
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <lui_gfx_draw_bitmap+0xee>
 8007666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007668:	889b      	ldrh	r3, [r3, #4]
 800766a:	b29b      	uxth	r3, r3
 800766c:	e000      	b.n	8007670 <lui_gfx_draw_bitmap+0xf0>
 800766e:	2301      	movs	r3, #1
 8007670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007672:	8093      	strh	r3, [r2, #4]
		crop_area->h = _LUI_BOUNDS(crop_area->h, 1, bitmap->size_y - crop_area->y);
 8007674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007676:	88db      	ldrh	r3, [r3, #6]
 8007678:	b29b      	uxth	r3, r3
 800767a:	461a      	mov	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	88db      	ldrh	r3, [r3, #6]
 8007680:	b29b      	uxth	r3, r3
 8007682:	4619      	mov	r1, r3
 8007684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007686:	885b      	ldrh	r3, [r3, #2]
 8007688:	b29b      	uxth	r3, r3
 800768a:	1acb      	subs	r3, r1, r3
 800768c:	429a      	cmp	r2, r3
 800768e:	dd08      	ble.n	80076a2 <lui_gfx_draw_bitmap+0x122>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	88db      	ldrh	r3, [r3, #6]
 8007694:	b29a      	uxth	r2, r3
 8007696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007698:	885b      	ldrh	r3, [r3, #2]
 800769a:	b29b      	uxth	r3, r3
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	b29b      	uxth	r3, r3
 80076a0:	e009      	b.n	80076b6 <lui_gfx_draw_bitmap+0x136>
 80076a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076a4:	88db      	ldrh	r3, [r3, #6]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <lui_gfx_draw_bitmap+0x134>
 80076ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076ae:	88db      	ldrh	r3, [r3, #6]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	e000      	b.n	80076b6 <lui_gfx_draw_bitmap+0x136>
 80076b4:	2301      	movs	r3, #1
 80076b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076b8:	80d3      	strh	r3, [r2, #6]

		width = crop_area->w;
 80076ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076bc:	791a      	ldrb	r2, [r3, #4]
 80076be:	795b      	ldrb	r3, [r3, #5]
 80076c0:	021b      	lsls	r3, r3, #8
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		height = crop_area->h;
 80076c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076ca:	799a      	ldrb	r2, [r3, #6]
 80076cc:	79db      	ldrb	r3, [r3, #7]
 80076ce:	021b      	lsls	r3, r3, #8
 80076d0:	4313      	orrs	r3, r2
 80076d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		uint32_t px_offset = bitmap->size_x * crop_area->y + crop_area->x; // Initial pixel offsets for cropping
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	889b      	ldrh	r3, [r3, #4]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076e0:	885b      	ldrh	r3, [r3, #2]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	fb02 f303 	mul.w	r3, r2, r3
 80076e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076ea:	8812      	ldrh	r2, [r2, #0]
 80076ec:	b292      	uxth	r2, r2
 80076ee:	4413      	add	r3, r2
 80076f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		byte_offset = px_offset * (bitmap->bpp / 8);	// Initial bytes offset
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	7a1b      	ldrb	r3, [r3, #8]
 80076f6:	08db      	lsrs	r3, r3, #3
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fe:	fb02 f303 	mul.w	r3, r2, r3
 8007702:	647b      	str	r3, [r7, #68]	; 0x44
		uint32_t px_skip = bitmap->size_x - crop_area->w;	// pixels to skip for cropping, in a loop
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	889b      	ldrh	r3, [r3, #4]
 8007708:	b29b      	uxth	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800770e:	889b      	ldrh	r3, [r3, #4]
 8007710:	b29b      	uxth	r3, r3
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	62bb      	str	r3, [r7, #40]	; 0x28
		stride = px_skip * (bitmap->bpp / 8);	// Bytes to skip, in a loop
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	7a1b      	ldrb	r3, [r3, #8]
 800771a:	08db      	lsrs	r3, r3, #3
 800771c:	b2db      	uxtb	r3, r3
 800771e:	461a      	mov	r2, r3
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	fb02 f303 	mul.w	r3, r2, r3
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
	{
 8007728:	e005      	b.n	8007736 <lui_gfx_draw_bitmap+0x1b6>
	}
	/* For 1-bpp, we must go to next byte when 1 column is finished. */
	else if (bitmap->bpp == 1)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	7a1b      	ldrb	r3, [r3, #8]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d101      	bne.n	8007736 <lui_gfx_draw_bitmap+0x1b6>
	{
		stride = 1;
 8007732:	2301      	movs	r3, #1
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	lui_area_t disp_area = {
 8007736:	4aa3      	ldr	r2, [pc, #652]	; (80079c4 <lui_gfx_draw_bitmap+0x444>)
 8007738:	f107 0314 	add.w	r3, r7, #20
 800773c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007740:	e883 0003 	stmia.w	r3, {r0, r1}
		.x = 0,
		.y = 0,
		.w = 1,
		.h = 1,
	};
	uint16_t buff_index = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t buff_h = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t px_cnt = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t mono_fcol = palette ? palette->fore_color : 0xFFFF;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <lui_gfx_draw_bitmap+0x1de>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	e001      	b.n	8007762 <lui_gfx_draw_bitmap+0x1e2>
 800775e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007762:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t mono_bcol = palette ? palette->back_color : 0;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <lui_gfx_draw_bitmap+0x1f2>
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	885b      	ldrh	r3, [r3, #2]
 800776e:	b29b      	uxth	r3, r3
 8007770:	e000      	b.n	8007774 <lui_gfx_draw_bitmap+0x1f4>
 8007772:	2300      	movs	r3, #0
 8007774:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t mono_transparent = bitmap->bpp == 1 ? (palette ? !palette->is_backgrnd : 0) : 0; // code fart
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	7a1b      	ldrb	r3, [r3, #8]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d108      	bne.n	8007790 <lui_gfx_draw_bitmap+0x210>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <lui_gfx_draw_bitmap+0x210>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	791b      	ldrb	r3, [r3, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <lui_gfx_draw_bitmap+0x210>
 800778c:	2301      	movs	r3, #1
 800778e:	e000      	b.n	8007792 <lui_gfx_draw_bitmap+0x212>
 8007790:	2300      	movs	r3, #0
 8007792:	847b      	strh	r3, [r7, #34]	; 0x22
	for (uint16_t h = 0; h < height; h++)
 8007794:	2300      	movs	r3, #0
 8007796:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007798:	e0e8      	b.n	800796c <lui_gfx_draw_bitmap+0x3ec>
	{
		bit_counter = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		for (uint16_t w = 0; w < width; w++)
 80077a0:	2300      	movs	r3, #0
 80077a2:	867b      	strh	r3, [r7, #50]	; 0x32
 80077a4:	e098      	b.n	80078d8 <lui_gfx_draw_bitmap+0x358>
		{

			if (bitmap->bpp == 1)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	7a1b      	ldrb	r3, [r3, #8]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d128      	bne.n	8007800 <lui_gfx_draw_bitmap+0x280>
			{
				if (bit_counter >= 8)
 80077ae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80077b2:	2b07      	cmp	r3, #7
 80077b4:	d905      	bls.n	80077c2 <lui_gfx_draw_bitmap+0x242>
				{
					++byte_offset;
 80077b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077b8:	3301      	adds	r3, #1
 80077ba:	647b      	str	r3, [r7, #68]	; 0x44
					bit_counter = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				}
				uint8_t bit = mask & (bitmap->payload[byte_offset] << bit_counter);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077c8:	4413      	add	r3, r2
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80077d2:	fa02 f303 	lsl.w	r3, r2, r3
 80077d6:	b25a      	sxtb	r2, r3
 80077d8:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80077dc:	4013      	ands	r3, r2
 80077de:	b25b      	sxtb	r3, r3
 80077e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				color = bit ? mono_fcol : mono_bcol;
 80077e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <lui_gfx_draw_bitmap+0x270>
 80077ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077ee:	e000      	b.n	80077f2 <lui_gfx_draw_bitmap+0x272>
 80077f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077f2:	83fb      	strh	r3, [r7, #30]
				++bit_counter;
 80077f4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80077f8:	3301      	adds	r3, #1
 80077fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80077fe:	e040      	b.n	8007882 <lui_gfx_draw_bitmap+0x302>
			}
			else if (bitmap->bpp == 8)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	7a1b      	ldrb	r3, [r3, #8]
 8007804:	2b08      	cmp	r3, #8
 8007806:	d123      	bne.n	8007850 <lui_gfx_draw_bitmap+0x2d0>
			{
				color = LUI_RGB(bitmap->payload[byte_offset], bitmap->payload[byte_offset], bitmap->payload[byte_offset]);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800780e:	4413      	add	r3, r2
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	08db      	lsrs	r3, r3, #3
 8007814:	b2db      	uxtb	r3, r3
 8007816:	02db      	lsls	r3, r3, #11
 8007818:	b21a      	sxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6819      	ldr	r1, [r3, #0]
 800781e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007820:	440b      	add	r3, r1
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	089b      	lsrs	r3, r3, #2
 8007826:	b2db      	uxtb	r3, r3
 8007828:	015b      	lsls	r3, r3, #5
 800782a:	b21b      	sxth	r3, r3
 800782c:	4313      	orrs	r3, r2
 800782e:	b21a      	sxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6819      	ldr	r1, [r3, #0]
 8007834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007836:	440b      	add	r3, r1
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	08db      	lsrs	r3, r3, #3
 800783c:	b2db      	uxtb	r3, r3
 800783e:	b21b      	sxth	r3, r3
 8007840:	4313      	orrs	r3, r2
 8007842:	b21b      	sxth	r3, r3
 8007844:	b29b      	uxth	r3, r3
 8007846:	83fb      	strh	r3, [r7, #30]
				byte_offset += 1;
 8007848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784a:	3301      	adds	r3, #1
 800784c:	647b      	str	r3, [r7, #68]	; 0x44
 800784e:	e018      	b.n	8007882 <lui_gfx_draw_bitmap+0x302>
			}
			else if (bitmap->bpp == 16)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	7a1b      	ldrb	r3, [r3, #8]
 8007854:	2b10      	cmp	r3, #16
 8007856:	d114      	bne.n	8007882 <lui_gfx_draw_bitmap+0x302>
			{
				color = (uint16_t)(bitmap->payload[byte_offset]) << 8 | (uint16_t)(bitmap->payload[byte_offset+1]);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785e:	4413      	add	r3, r2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	b21a      	sxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6819      	ldr	r1, [r3, #0]
 800786a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800786c:	3301      	adds	r3, #1
 800786e:	440b      	add	r3, r1
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	b21b      	sxth	r3, r3
 8007874:	4313      	orrs	r3, r2
 8007876:	b21b      	sxth	r3, r3
 8007878:	b29b      	uxth	r3, r3
 800787a:	83fb      	strh	r3, [r7, #30]
				byte_offset += 2;
 800787c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800787e:	3302      	adds	r3, #2
 8007880:	647b      	str	r3, [r7, #68]	; 0x44
				/* 32bpp not supported yet. Only 16-bit colors are supported now */
				// offset += 3;
			}

			/* If image is mono and it has no bg, we won't buffer it. We'll draw it px by px */
			if (mono_transparent)
 8007882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007884:	2b00      	cmp	r3, #0
 8007886:	d014      	beq.n	80078b2 <lui_gfx_draw_bitmap+0x332>
			{
				if (color == mono_fcol)
 8007888:	8bfb      	ldrh	r3, [r7, #30]
 800788a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800788c:	429a      	cmp	r2, r3
 800788e:	d11b      	bne.n	80078c8 <lui_gfx_draw_bitmap+0x348>
				{
					disp_area.x = tmp_x;
 8007890:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007894:	82bb      	strh	r3, [r7, #20]
					disp_area.y = tmp_y;
 8007896:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800789a:	82fb      	strh	r3, [r7, #22]
					g_lui_main->disp_drv->draw_pixels_buff_cb(&color, &disp_area);
 800789c:	4b4a      	ldr	r3, [pc, #296]	; (80079c8 <lui_gfx_draw_bitmap+0x448>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f107 0114 	add.w	r1, r7, #20
 80078a8:	f107 021e 	add.w	r2, r7, #30
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	e00a      	b.n	80078c8 <lui_gfx_draw_bitmap+0x348>
				}
			}
			else
			{
				g_lui_main->disp_drv->disp_buff[buff_index++] = color;
 80078b2:	4b45      	ldr	r3, [pc, #276]	; (80079c8 <lui_gfx_draw_bitmap+0x448>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80078bc:	1c59      	adds	r1, r3, #1
 80078be:	8779      	strh	r1, [r7, #58]	; 0x3a
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	4413      	add	r3, r2
 80078c4:	8bfa      	ldrh	r2, [r7, #30]
 80078c6:	801a      	strh	r2, [r3, #0]
			}
            ++tmp_x;
 80078c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078cc:	3301      	adds	r3, #1
 80078ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		for (uint16_t w = 0; w < width; w++)
 80078d2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80078d4:	3301      	adds	r3, #1
 80078d6:	867b      	strh	r3, [r7, #50]	; 0x32
 80078d8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80078da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80078de:	429a      	cmp	r2, r3
 80078e0:	f4ff af61 	bcc.w	80077a6 <lui_gfx_draw_bitmap+0x226>
		}
		byte_offset += stride;	// Skip bytes in case of cropping
 80078e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e8:	4413      	add	r3, r2
 80078ea:	647b      	str	r3, [r7, #68]	; 0x44
        tmp_x = x;
 80078ec:	88fb      	ldrh	r3, [r7, #6]
 80078ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		++tmp_y;
 80078f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078f6:	3301      	adds	r3, #1
 80078f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

		/* Below section is only for 8-bpp, 16-bpp, and non-transparent 1-bpp */
		if (!mono_transparent)
 80078fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d131      	bne.n	8007966 <lui_gfx_draw_bitmap+0x3e6>
		{
			++buff_h;
 8007902:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007904:	3301      	adds	r3, #1
 8007906:	873b      	strh	r3, [r7, #56]	; 0x38
			px_cnt += width;
 8007908:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800790a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800790e:	4413      	add	r3, r2
 8007910:	86fb      	strh	r3, [r7, #54]	; 0x36
			if (px_cnt + width > g_lui_main->disp_drv->disp_buff_sz_px)
 8007912:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007914:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007918:	4413      	add	r3, r2
 800791a:	4a2b      	ldr	r2, [pc, #172]	; (80079c8 <lui_gfx_draw_bitmap+0x448>)
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	68d2      	ldr	r2, [r2, #12]
 8007920:	8912      	ldrh	r2, [r2, #8]
 8007922:	b292      	uxth	r2, r2
 8007924:	4293      	cmp	r3, r2
 8007926:	dd1e      	ble.n	8007966 <lui_gfx_draw_bitmap+0x3e6>
			{
				disp_area.x = x;
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	82bb      	strh	r3, [r7, #20]
				disp_area.y = tmp_y - buff_h;
 800792c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007930:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	b29b      	uxth	r3, r3
 8007936:	82fb      	strh	r3, [r7, #22]
				disp_area.w = width;
 8007938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800793c:	833b      	strh	r3, [r7, #24]
				disp_area.h = buff_h;
 800793e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007940:	837b      	strh	r3, [r7, #26]
				g_lui_main->disp_drv->draw_pixels_buff_cb(g_lui_main->disp_drv->disp_buff, &disp_area);
 8007942:	4b21      	ldr	r3, [pc, #132]	; (80079c8 <lui_gfx_draw_bitmap+0x448>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1f      	ldr	r2, [pc, #124]	; (80079c8 <lui_gfx_draw_bitmap+0x448>)
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	68d2      	ldr	r2, [r2, #12]
 8007950:	6852      	ldr	r2, [r2, #4]
 8007952:	f107 0114 	add.w	r1, r7, #20
 8007956:	4610      	mov	r0, r2
 8007958:	4798      	blx	r3
				buff_h = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	873b      	strh	r3, [r7, #56]	; 0x38
				px_cnt = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	86fb      	strh	r3, [r7, #54]	; 0x36
				buff_index = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	877b      	strh	r3, [r7, #58]	; 0x3a
	for (uint16_t h = 0; h < height; h++)
 8007966:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007968:	3301      	adds	r3, #1
 800796a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800796c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800796e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007972:	429a      	cmp	r2, r3
 8007974:	f4ff af11 	bcc.w	800779a <lui_gfx_draw_bitmap+0x21a>
			}
		}
	}

	if (px_cnt)
 8007978:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800797a:	2b00      	cmp	r3, #0
 800797c:	d01e      	beq.n	80079bc <lui_gfx_draw_bitmap+0x43c>
	{
		disp_area.x = x;
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	82bb      	strh	r3, [r7, #20]
		disp_area.y = tmp_y - buff_h;
 8007982:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007986:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	b29b      	uxth	r3, r3
 800798c:	82fb      	strh	r3, [r7, #22]
		disp_area.w = width;
 800798e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007992:	833b      	strh	r3, [r7, #24]
		disp_area.h = buff_h;
 8007994:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007996:	837b      	strh	r3, [r7, #26]
		g_lui_main->disp_drv->draw_pixels_buff_cb(g_lui_main->disp_drv->disp_buff, &disp_area);
 8007998:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <lui_gfx_draw_bitmap+0x448>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <lui_gfx_draw_bitmap+0x448>)
 80079a2:	6812      	ldr	r2, [r2, #0]
 80079a4:	68d2      	ldr	r2, [r2, #12]
 80079a6:	6852      	ldr	r2, [r2, #4]
 80079a8:	f107 0114 	add.w	r1, r7, #20
 80079ac:	4610      	mov	r0, r2
 80079ae:	4798      	blx	r3
 80079b0:	e004      	b.n	80079bc <lui_gfx_draw_bitmap+0x43c>
		return;
 80079b2:	bf00      	nop
 80079b4:	e002      	b.n	80079bc <lui_gfx_draw_bitmap+0x43c>
		return;
 80079b6:	bf00      	nop
 80079b8:	e000      	b.n	80079bc <lui_gfx_draw_bitmap+0x43c>
			return;
 80079ba:	bf00      	nop
	}
}
 80079bc:	3750      	adds	r7, #80	; 0x50
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	0800b9a4 	.word	0x0800b9a4
 80079c8:	20002464 	.word	0x20002464

080079cc <_lui_gfx_plot_line_low>:
/*
 * When dy < 0
 * It's called only by line_draw function. Not for user
 */
void _lui_gfx_plot_line_low(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t line_width, uint16_t color)
{
 80079cc:	b590      	push	{r4, r7, lr}
 80079ce:	b089      	sub	sp, #36	; 0x24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	461a      	mov	r2, r3
 80079da:	4623      	mov	r3, r4
 80079dc:	80fb      	strh	r3, [r7, #6]
 80079de:	4603      	mov	r3, r0
 80079e0:	80bb      	strh	r3, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	807b      	strh	r3, [r7, #2]
 80079e6:	4613      	mov	r3, r2
 80079e8:	803b      	strh	r3, [r7, #0]
	int16_t dx = x1 - x0;
 80079ea:	887a      	ldrh	r2, [r7, #2]
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	82bb      	strh	r3, [r7, #20]
	int16_t dy = y1 - y0;
 80079f4:	883a      	ldrh	r2, [r7, #0]
 80079f6:	88bb      	ldrh	r3, [r7, #4]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	83fb      	strh	r3, [r7, #30]
	int8_t yi = 1;
 80079fe:	2301      	movs	r3, #1
 8007a00:	777b      	strb	r3, [r7, #29]
	if (dy < 0)
 8007a02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da05      	bge.n	8007a16 <_lui_gfx_plot_line_low+0x4a>
	{
		yi = -1;
 8007a0a:	23ff      	movs	r3, #255	; 0xff
 8007a0c:	777b      	strb	r3, [r7, #29]
		dy = -dy;
 8007a0e:	8bfb      	ldrh	r3, [r7, #30]
 8007a10:	425b      	negs	r3, r3
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	83fb      	strh	r3, [r7, #30]
	}

	int16_t D = 2*dy - dx;
 8007a16:	8bfb      	ldrh	r3, [r7, #30]
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	8abb      	ldrh	r3, [r7, #20]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	837b      	strh	r3, [r7, #26]
	uint16_t y = y0;
 8007a24:	88bb      	ldrh	r3, [r7, #4]
 8007a26:	833b      	strh	r3, [r7, #24]
	uint16_t x = x0;
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	82fb      	strh	r3, [r7, #22]
	lui_area_t disp_area = {
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	81bb      	strh	r3, [r7, #12]
 8007a30:	2300      	movs	r3, #0
 8007a32:	81fb      	strh	r3, [r7, #14]
 8007a34:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	823b      	strh	r3, [r7, #16]
 8007a3c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	827b      	strh	r3, [r7, #18]
		.x = 0,
		.y = 0,
		.w = line_width,
		.h = line_width,
	};
	while (x <= x1)
 8007a44:	e028      	b.n	8007a98 <_lui_gfx_plot_line_low+0xcc>
	{
		disp_area.x = x;
 8007a46:	8afb      	ldrh	r3, [r7, #22]
 8007a48:	81bb      	strh	r3, [r7, #12]
		disp_area.y = y;
 8007a4a:	8b3b      	ldrh	r3, [r7, #24]
 8007a4c:	81fb      	strh	r3, [r7, #14]
		g_lui_main->disp_drv->draw_pixels_buff_cb(&color, &disp_area);
 8007a4e:	4b17      	ldr	r3, [pc, #92]	; (8007aac <_lui_gfx_plot_line_low+0xe0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f107 010c 	add.w	r1, r7, #12
 8007a5a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007a5e:	4610      	mov	r0, r2
 8007a60:	4798      	blx	r3

		if (D > 0)
 8007a62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dd0c      	ble.n	8007a84 <_lui_gfx_plot_line_low+0xb8>
		{
			y = y + yi;
 8007a6a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	8b3b      	ldrh	r3, [r7, #24]
 8007a72:	4413      	add	r3, r2
 8007a74:	833b      	strh	r3, [r7, #24]
			D = D - 2*dx;
 8007a76:	8b7a      	ldrh	r2, [r7, #26]
 8007a78:	8abb      	ldrh	r3, [r7, #20]
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	837b      	strh	r3, [r7, #26]
		}
		D = D + 2*dy;
 8007a84:	8bfb      	ldrh	r3, [r7, #30]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	8b7b      	ldrh	r3, [r7, #26]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	837b      	strh	r3, [r7, #26]
		x++;
 8007a92:	8afb      	ldrh	r3, [r7, #22]
 8007a94:	3301      	adds	r3, #1
 8007a96:	82fb      	strh	r3, [r7, #22]
	while (x <= x1)
 8007a98:	8afa      	ldrh	r2, [r7, #22]
 8007a9a:	887b      	ldrh	r3, [r7, #2]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d9d2      	bls.n	8007a46 <_lui_gfx_plot_line_low+0x7a>
	}
}
 8007aa0:	bf00      	nop
 8007aa2:	bf00      	nop
 8007aa4:	3724      	adds	r7, #36	; 0x24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd90      	pop	{r4, r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20002464 	.word	0x20002464

08007ab0 <_lui_gfx_plot_line_high>:
/*
 * When dx < 0
 * It's called only by line_draw function. Not for user
 */
void _lui_gfx_plot_line_high(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t line_width, uint16_t color)
{
 8007ab0:	b590      	push	{r4, r7, lr}
 8007ab2:	b089      	sub	sp, #36	; 0x24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	4608      	mov	r0, r1
 8007aba:	4611      	mov	r1, r2
 8007abc:	461a      	mov	r2, r3
 8007abe:	4623      	mov	r3, r4
 8007ac0:	80fb      	strh	r3, [r7, #6]
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	80bb      	strh	r3, [r7, #4]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	807b      	strh	r3, [r7, #2]
 8007aca:	4613      	mov	r3, r2
 8007acc:	803b      	strh	r3, [r7, #0]
	int16_t dx = x1 - x0;
 8007ace:	887a      	ldrh	r2, [r7, #2]
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	83fb      	strh	r3, [r7, #30]
	int16_t dy = y1 - y0;
 8007ad8:	883a      	ldrh	r2, [r7, #0]
 8007ada:	88bb      	ldrh	r3, [r7, #4]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	82bb      	strh	r3, [r7, #20]
	int8_t xi = 1;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	777b      	strb	r3, [r7, #29]
	if (dx < 0)
 8007ae6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	da05      	bge.n	8007afa <_lui_gfx_plot_line_high+0x4a>
	{
		xi = -1;
 8007aee:	23ff      	movs	r3, #255	; 0xff
 8007af0:	777b      	strb	r3, [r7, #29]
		dx = -dx;
 8007af2:	8bfb      	ldrh	r3, [r7, #30]
 8007af4:	425b      	negs	r3, r3
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	83fb      	strh	r3, [r7, #30]
	}

	int16_t D = 2*dx - dy;
 8007afa:	8bfb      	ldrh	r3, [r7, #30]
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	8abb      	ldrh	r3, [r7, #20]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	837b      	strh	r3, [r7, #26]
	uint16_t y = y0;
 8007b08:	88bb      	ldrh	r3, [r7, #4]
 8007b0a:	833b      	strh	r3, [r7, #24]
	uint16_t x = x0;
 8007b0c:	88fb      	ldrh	r3, [r7, #6]
 8007b0e:	82fb      	strh	r3, [r7, #22]
	lui_area_t disp_area = {
 8007b10:	2300      	movs	r3, #0
 8007b12:	81bb      	strh	r3, [r7, #12]
 8007b14:	2300      	movs	r3, #0
 8007b16:	81fb      	strh	r3, [r7, #14]
 8007b18:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	823b      	strh	r3, [r7, #16]
 8007b20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	827b      	strh	r3, [r7, #18]
		.x = 0,
		.y = 0,
		.w = line_width,
		.h = line_width,
	};
	while (y <= y1)
 8007b28:	e028      	b.n	8007b7c <_lui_gfx_plot_line_high+0xcc>
	{
		disp_area.x = x;
 8007b2a:	8afb      	ldrh	r3, [r7, #22]
 8007b2c:	81bb      	strh	r3, [r7, #12]
		disp_area.y = y;
 8007b2e:	8b3b      	ldrh	r3, [r7, #24]
 8007b30:	81fb      	strh	r3, [r7, #14]
		g_lui_main->disp_drv->draw_pixels_buff_cb(&color, &disp_area);
 8007b32:	4b17      	ldr	r3, [pc, #92]	; (8007b90 <_lui_gfx_plot_line_high+0xe0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f107 010c 	add.w	r1, r7, #12
 8007b3e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007b42:	4610      	mov	r0, r2
 8007b44:	4798      	blx	r3

		if (D > 0)
 8007b46:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dd0c      	ble.n	8007b68 <_lui_gfx_plot_line_high+0xb8>
		{
			x = x + xi;
 8007b4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	8afb      	ldrh	r3, [r7, #22]
 8007b56:	4413      	add	r3, r2
 8007b58:	82fb      	strh	r3, [r7, #22]
			D = D - 2*dy;
 8007b5a:	8b7a      	ldrh	r2, [r7, #26]
 8007b5c:	8abb      	ldrh	r3, [r7, #20]
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	837b      	strh	r3, [r7, #26]
		}
		D = D + 2*dx;
 8007b68:	8bfb      	ldrh	r3, [r7, #30]
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	8b7b      	ldrh	r3, [r7, #26]
 8007b70:	4413      	add	r3, r2
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	837b      	strh	r3, [r7, #26]
		y++;
 8007b76:	8b3b      	ldrh	r3, [r7, #24]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	833b      	strh	r3, [r7, #24]
	while (y <= y1)
 8007b7c:	8b3a      	ldrh	r2, [r7, #24]
 8007b7e:	883b      	ldrh	r3, [r7, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d9d2      	bls.n	8007b2a <_lui_gfx_plot_line_high+0x7a>
	}
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	3724      	adds	r7, #36	; 0x24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd90      	pop	{r4, r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20002464 	.word	0x20002464

08007b94 <_lui_get_event_against_state>:
// 	lui_scene_t* act_scene = (lui_scene_t* )( g_lui_main->active_scene->obj_main_data);
// 	return (act_scene->font);
// }

uint8_t _lui_get_event_against_state(uint8_t new_state, uint8_t old_state)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	460a      	mov	r2, r1
 8007b9e:	71fb      	strb	r3, [r7, #7]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	71bb      	strb	r3, [r7, #6]
	uint8_t event = LUI_EVENT_NONE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]

	if (new_state == old_state)
 8007ba8:	79fa      	ldrb	r2, [r7, #7]
 8007baa:	79bb      	ldrb	r3, [r7, #6]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d102      	bne.n	8007bb6 <_lui_get_event_against_state+0x22>
	{
		event = LUI_EVENT_NONE;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]
 8007bb4:	e063      	b.n	8007c7e <_lui_get_event_against_state+0xea>
	}
	else
	{
		switch (old_state)
 8007bb6:	79bb      	ldrb	r3, [r7, #6]
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d85f      	bhi.n	8007c7c <_lui_get_event_against_state+0xe8>
 8007bbc:	a201      	add	r2, pc, #4	; (adr r2, 8007bc4 <_lui_get_event_against_state+0x30>)
 8007bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc2:	bf00      	nop
 8007bc4:	08007bd5 	.word	0x08007bd5
 8007bc8:	08007bff 	.word	0x08007bff
 8007bcc:	08007c29 	.word	0x08007c29
 8007bd0:	08007c53 	.word	0x08007c53
		{
		case LUI_STATE_IDLE:			//old
			switch (new_state)
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d00c      	beq.n	8007bf4 <_lui_get_event_against_state+0x60>
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	dc0d      	bgt.n	8007bfa <_lui_get_event_against_state+0x66>
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d002      	beq.n	8007be8 <_lui_get_event_against_state+0x54>
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d003      	beq.n	8007bee <_lui_get_event_against_state+0x5a>
				break;
			case LUI_STATE_ENTERED:		//new
				event = LUI_EVENT_ENTERED;
				break;
			default:
				break;
 8007be6:	e008      	b.n	8007bfa <_lui_get_event_against_state+0x66>
				event = LUI_EVENT_SELECTED;
 8007be8:	2301      	movs	r3, #1
 8007bea:	73fb      	strb	r3, [r7, #15]
				break;
 8007bec:	e006      	b.n	8007bfc <_lui_get_event_against_state+0x68>
				event = LUI_EVENT_PRESSED;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	73fb      	strb	r3, [r7, #15]
				break;
 8007bf2:	e003      	b.n	8007bfc <_lui_get_event_against_state+0x68>
				event = LUI_EVENT_ENTERED;
 8007bf4:	2305      	movs	r3, #5
 8007bf6:	73fb      	strb	r3, [r7, #15]
				break;
 8007bf8:	e000      	b.n	8007bfc <_lui_get_event_against_state+0x68>
				break;
 8007bfa:	bf00      	nop
			}
			break;
 8007bfc:	e03f      	b.n	8007c7e <_lui_get_event_against_state+0xea>

		case LUI_STATE_SELECTED:		//old
			switch (new_state)
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d00c      	beq.n	8007c1e <_lui_get_event_against_state+0x8a>
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	dc0d      	bgt.n	8007c24 <_lui_get_event_against_state+0x90>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <_lui_get_event_against_state+0x7e>
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d003      	beq.n	8007c18 <_lui_get_event_against_state+0x84>
				break;
			case LUI_STATE_ENTERED:		//new
				event = LUI_EVENT_ENTERED;
				break;
			default:
				break;
 8007c10:	e008      	b.n	8007c24 <_lui_get_event_against_state+0x90>
				event = LUI_EVENT_SELECTION_LOST;
 8007c12:	2302      	movs	r3, #2
 8007c14:	73fb      	strb	r3, [r7, #15]
				break;
 8007c16:	e006      	b.n	8007c26 <_lui_get_event_against_state+0x92>
				event = LUI_EVENT_PRESSED;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	73fb      	strb	r3, [r7, #15]
				break;
 8007c1c:	e003      	b.n	8007c26 <_lui_get_event_against_state+0x92>
				event = LUI_EVENT_ENTERED;
 8007c1e:	2305      	movs	r3, #5
 8007c20:	73fb      	strb	r3, [r7, #15]
				break;
 8007c22:	e000      	b.n	8007c26 <_lui_get_event_against_state+0x92>
				break;
 8007c24:	bf00      	nop
			}
			break;
 8007c26:	e02a      	b.n	8007c7e <_lui_get_event_against_state+0xea>

		// PRESSED is only applicable for button
		case LUI_STATE_PRESSED:			//old
			switch (new_state)
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d00c      	beq.n	8007c48 <_lui_get_event_against_state+0xb4>
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	dc0d      	bgt.n	8007c4e <_lui_get_event_against_state+0xba>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <_lui_get_event_against_state+0xa8>
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d003      	beq.n	8007c42 <_lui_get_event_against_state+0xae>
			// for button, ENTERED will never happen
			case LUI_STATE_ENTERED:		//new
				event = LUI_EVENT_NONE;
				break;
			default:
				break;
 8007c3a:	e008      	b.n	8007c4e <_lui_get_event_against_state+0xba>
				event = LUI_EVENT_SELECTION_LOST;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	73fb      	strb	r3, [r7, #15]
				break;
 8007c40:	e006      	b.n	8007c50 <_lui_get_event_against_state+0xbc>
				event = LUI_EVENT_RELEASED;
 8007c42:	2304      	movs	r3, #4
 8007c44:	73fb      	strb	r3, [r7, #15]
				break;
 8007c46:	e003      	b.n	8007c50 <_lui_get_event_against_state+0xbc>
				event = LUI_EVENT_NONE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
				break;
 8007c4c:	e000      	b.n	8007c50 <_lui_get_event_against_state+0xbc>
				break;
 8007c4e:	bf00      	nop
			}
			break;
 8007c50:	e015      	b.n	8007c7e <_lui_get_event_against_state+0xea>

		// ENTERED is only applicable for slider
		case LUI_STATE_ENTERED:			//old
			switch (new_state)
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d00c      	beq.n	8007c72 <_lui_get_event_against_state+0xde>
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	dc0d      	bgt.n	8007c78 <_lui_get_event_against_state+0xe4>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <_lui_get_event_against_state+0xd2>
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d003      	beq.n	8007c6c <_lui_get_event_against_state+0xd8>
			// for slider, PRESSED will never happen
			case LUI_STATE_PRESSED:		//new
				event = LUI_EVENT_NONE;
				break;
			default:
				break;
 8007c64:	e008      	b.n	8007c78 <_lui_get_event_against_state+0xe4>
				event = LUI_EVENT_EXITED;
 8007c66:	2306      	movs	r3, #6
 8007c68:	73fb      	strb	r3, [r7, #15]
				break;
 8007c6a:	e006      	b.n	8007c7a <_lui_get_event_against_state+0xe6>
				event = LUI_EVENT_EXITED;
 8007c6c:	2306      	movs	r3, #6
 8007c6e:	73fb      	strb	r3, [r7, #15]
				break;
 8007c70:	e003      	b.n	8007c7a <_lui_get_event_against_state+0xe6>
				event = LUI_EVENT_NONE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
				break;
 8007c76:	e000      	b.n	8007c7a <_lui_get_event_against_state+0xe6>
				break;
 8007c78:	bf00      	nop
			}
			break;
 8007c7a:	e000      	b.n	8007c7e <_lui_get_event_against_state+0xea>

		default:
			break;
 8007c7c:	bf00      	nop
		}
	}

	return event;
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <_lui_map_range>:

/*
 * Map a range of data to a new range of data
 */
double _lui_map_range(double old_val, double old_max, double old_min, double new_max, double new_min)
{
 8007c8c:	b5b0      	push	{r4, r5, r7, lr}
 8007c8e:	b08c      	sub	sp, #48	; 0x30
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	ed87 0b08 	vstr	d0, [r7, #32]
 8007c96:	ed87 1b06 	vstr	d1, [r7, #24]
 8007c9a:	ed87 2b04 	vstr	d2, [r7, #16]
 8007c9e:	ed87 3b02 	vstr	d3, [r7, #8]
 8007ca2:	ed87 4b00 	vstr	d4, [r7]
	double new_val = ((((old_val - old_min) * (new_max - new_min)) / (old_max - old_min)) + new_min);
 8007ca6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007caa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007cae:	f7f8 fb03 	bl	80002b8 <__aeabi_dsub>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4614      	mov	r4, r2
 8007cb8:	461d      	mov	r5, r3
 8007cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cc2:	f7f8 faf9 	bl	80002b8 <__aeabi_dsub>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f7f8 fcab 	bl	8000628 <__aeabi_dmul>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4614      	mov	r4, r2
 8007cd8:	461d      	mov	r5, r3
 8007cda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007cde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ce2:	f7f8 fae9 	bl	80002b8 <__aeabi_dsub>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4620      	mov	r0, r4
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7f8 fdc5 	bl	800087c <__aeabi_ddiv>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cfa:	f7f8 fadf 	bl	80002bc <__adddf3>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	return new_val;
 8007d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d0a:	ec43 2b17 	vmov	d7, r2, r3
}
 8007d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8007d12:	eef0 0a67 	vmov.f32	s1, s15
 8007d16:	3730      	adds	r7, #48	; 0x30
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bdb0      	pop	{r4, r5, r7, pc}

08007d1c <_lui_verify_obj>:

int8_t _lui_verify_obj(lui_obj_t* obj, uint8_t obj_type)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
	if (obj == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d102      	bne.n	8007d34 <_lui_verify_obj+0x18>
		return -1;
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d32:	e008      	b.n	8007d46 <_lui_verify_obj+0x2a>
	if (obj->obj_type != obj_type)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	7edb      	ldrb	r3, [r3, #27]
 8007d38:	78fa      	ldrb	r2, [r7, #3]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d002      	beq.n	8007d44 <_lui_verify_obj+0x28>
		return -1;
 8007d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d42:	e000      	b.n	8007d46 <_lui_verify_obj+0x2a>

	return 0;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
	...

08007d54 <_lui_disp_drv_check>:
/*
 * Check if display driver is
 * registered by the stupid user
 */
uint8_t _lui_disp_drv_check()
{
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
	// if no display driver is registered, return
	if ( g_lui_main->disp_drv == NULL)
 8007d58:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <_lui_disp_drv_check+0x3c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <_lui_disp_drv_check+0x12>
		return 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e00e      	b.n	8007d84 <_lui_disp_drv_check+0x30>

	// If no buffer or no callback function (for drawing) is provided by user, return
	else if (g_lui_main->disp_drv->draw_pixels_buff_cb == NULL || g_lui_main->disp_drv->disp_buff == NULL)
 8007d66:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <_lui_disp_drv_check+0x3c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d005      	beq.n	8007d7e <_lui_disp_drv_check+0x2a>
 8007d72:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <_lui_disp_drv_check+0x3c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <_lui_disp_drv_check+0x2e>
		return 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e000      	b.n	8007d84 <_lui_disp_drv_check+0x30>
	else
		return 1;
 8007d82:	2301      	movs	r3, #1
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20002464 	.word	0x20002464

08007d94 <_lui_mem_init>:

void _lui_mem_init(uint8_t mem_block[], uint16_t size)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	807b      	strh	r3, [r7, #2]
	g_lui_mem_block.mem_block = mem_block;
 8007da0:	4a07      	ldr	r2, [pc, #28]	; (8007dc0 <_lui_mem_init+0x2c>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6013      	str	r3, [r2, #0]
	g_lui_mem_block.block_max_sz = size;
 8007da6:	4a06      	ldr	r2, [pc, #24]	; (8007dc0 <_lui_mem_init+0x2c>)
 8007da8:	887b      	ldrh	r3, [r7, #2]
 8007daa:	8093      	strh	r3, [r2, #4]
	g_lui_mem_block.mem_allocated = 0;
 8007dac:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <_lui_mem_init+0x2c>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	80da      	strh	r2, [r3, #6]
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	2000245c 	.word	0x2000245c

08007dc4 <_lui_mem_alloc>:

void* _lui_mem_alloc(uint16_t element_size)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	80fb      	strh	r3, [r7, #6]
	if (g_lui_mem_block.mem_allocated + element_size > g_lui_mem_block.block_max_sz)
 8007dce:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <_lui_mem_alloc+0x48>)
 8007dd0:	88db      	ldrh	r3, [r3, #6]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	88fb      	ldrh	r3, [r7, #6]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	4a0c      	ldr	r2, [pc, #48]	; (8007e0c <_lui_mem_alloc+0x48>)
 8007dda:	8892      	ldrh	r2, [r2, #4]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	dd01      	ble.n	8007de4 <_lui_mem_alloc+0x20>
		return NULL;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e00d      	b.n	8007e00 <_lui_mem_alloc+0x3c>
	uint8_t* nxt_addr = g_lui_mem_block.mem_block + g_lui_mem_block.mem_allocated;
 8007de4:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <_lui_mem_alloc+0x48>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a08      	ldr	r2, [pc, #32]	; (8007e0c <_lui_mem_alloc+0x48>)
 8007dea:	88d2      	ldrh	r2, [r2, #6]
 8007dec:	4413      	add	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
	g_lui_mem_block.mem_allocated += element_size;
 8007df0:	4b06      	ldr	r3, [pc, #24]	; (8007e0c <_lui_mem_alloc+0x48>)
 8007df2:	88da      	ldrh	r2, [r3, #6]
 8007df4:	88fb      	ldrh	r3, [r7, #6]
 8007df6:	4413      	add	r3, r2
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	4b04      	ldr	r3, [pc, #16]	; (8007e0c <_lui_mem_alloc+0x48>)
 8007dfc:	80da      	strh	r2, [r3, #6]
	return nxt_addr;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	2000245c 	.word	0x2000245c

08007e10 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	t *= 20;
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	607b      	str	r3, [r7, #4]
	for (; t > 0; t--) {
 8007e24:	e003      	b.n	8007e2e <delay+0x1e>
		__asm("nop");
 8007e26:	bf00      	nop
	for (; t > 0; t--) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	607b      	str	r3, [r7, #4]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f8      	bne.n	8007e26 <delay+0x16>
	}
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <GPIO_Init>:
 * 
 * \param 
 * 
 * \return void
 */
static void GPIO_Init(void) {
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af02      	add	r7, sp, #8

	gpio_clk_en(PORTB);
 8007e4a:	4845      	ldr	r0, [pc, #276]	; (8007f60 <GPIO_Init+0x11c>)
 8007e4c:	f7fa fe54 	bl	8002af8 <gpio_clk_en>
	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007e50:	2300      	movs	r3, #0
 8007e52:	9301      	str	r3, [sp, #4]
 8007e54:	2300      	movs	r3, #0
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	4841      	ldr	r0, [pc, #260]	; (8007f64 <GPIO_Init+0x120>)
 8007e60:	f7fa fe90 	bl	8002b84 <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007e64:	2300      	movs	r3, #0
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2201      	movs	r2, #1
 8007e70:	2107      	movs	r1, #7
 8007e72:	483c      	ldr	r0, [pc, #240]	; (8007f64 <GPIO_Init+0x120>)
 8007e74:	f7fa fe86 	bl	8002b84 <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	2300      	movs	r3, #0
 8007e82:	2201      	movs	r2, #1
 8007e84:	2100      	movs	r1, #0
 8007e86:	4838      	ldr	r0, [pc, #224]	; (8007f68 <GPIO_Init+0x124>)
 8007e88:	f7fa fe7c 	bl	8002b84 <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	2300      	movs	r3, #0
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	2300      	movs	r3, #0
 8007e96:	2201      	movs	r2, #1
 8007e98:	2101      	movs	r1, #1
 8007e9a:	4833      	ldr	r0, [pc, #204]	; (8007f68 <GPIO_Init+0x124>)
 8007e9c:	f7fa fe72 	bl	8002b84 <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	2201      	movs	r2, #1
 8007eac:	2104      	movs	r1, #4
 8007eae:	482e      	ldr	r0, [pc, #184]	; (8007f68 <GPIO_Init+0x124>)
 8007eb0:	f7fa fe68 	bl	8002b84 <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	2108      	movs	r1, #8
 8007ec2:	4829      	ldr	r0, [pc, #164]	; (8007f68 <GPIO_Init+0x124>)
 8007ec4:	f7fa fe5e 	bl	8002b84 <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	2109      	movs	r1, #9
 8007ed6:	4824      	ldr	r0, [pc, #144]	; (8007f68 <GPIO_Init+0x124>)
 8007ed8:	f7fa fe54 	bl	8002b84 <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007edc:	2300      	movs	r3, #0
 8007ede:	9301      	str	r3, [sp, #4]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	210a      	movs	r1, #10
 8007eea:	481f      	ldr	r0, [pc, #124]	; (8007f68 <GPIO_Init+0x124>)
 8007eec:	f7fa fe4a 	bl	8002b84 <gpio_config>

	/*Configure GPIO pins : PB0 PB3 PB4 PB5 PB10 */
	PORTB->MODER = INPUT_MODE;
 8007ef0:	4b1b      	ldr	r3, [pc, #108]	; (8007f60 <GPIO_Init+0x11c>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
	gpio_config(PORTB, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	2300      	movs	r3, #0
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	2300      	movs	r3, #0
 8007f00:	2201      	movs	r2, #1
 8007f02:	2100      	movs	r1, #0
 8007f04:	4816      	ldr	r0, [pc, #88]	; (8007f60 <GPIO_Init+0x11c>)
 8007f06:	f7fa fe3d 	bl	8002b84 <gpio_config>
	gpio_config(PORTB, 3, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	2300      	movs	r3, #0
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	2300      	movs	r3, #0
 8007f14:	2201      	movs	r2, #1
 8007f16:	2103      	movs	r1, #3
 8007f18:	4811      	ldr	r0, [pc, #68]	; (8007f60 <GPIO_Init+0x11c>)
 8007f1a:	f7fa fe33 	bl	8002b84 <gpio_config>
	gpio_config(PORTB, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	2300      	movs	r3, #0
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	2300      	movs	r3, #0
 8007f28:	2201      	movs	r2, #1
 8007f2a:	2104      	movs	r1, #4
 8007f2c:	480c      	ldr	r0, [pc, #48]	; (8007f60 <GPIO_Init+0x11c>)
 8007f2e:	f7fa fe29 	bl	8002b84 <gpio_config>
	gpio_config(PORTB, 5, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007f32:	2300      	movs	r3, #0
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	2300      	movs	r3, #0
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	2105      	movs	r1, #5
 8007f40:	4807      	ldr	r0, [pc, #28]	; (8007f60 <GPIO_Init+0x11c>)
 8007f42:	f7fa fe1f 	bl	8002b84 <gpio_config>
	gpio_config(PORTB, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8007f46:	2300      	movs	r3, #0
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2201      	movs	r2, #1
 8007f52:	210a      	movs	r1, #10
 8007f54:	4802      	ldr	r0, [pc, #8]	; (8007f60 <GPIO_Init+0x11c>)
 8007f56:	f7fa fe15 	bl	8002b84 <gpio_config>
	//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8007f5a:	bf00      	nop
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	40020400 	.word	0x40020400
 8007f64:	40020800 	.word	0x40020800
 8007f68:	40020000 	.word	0x40020000

08007f6c <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8007f72:	4b2e      	ldr	r3, [pc, #184]	; (800802c <LCD_Begin+0xc0>)
 8007f74:	22f0      	movs	r2, #240	; 0xf0
 8007f76:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8007f78:	4b2d      	ldr	r3, [pc, #180]	; (8008030 <LCD_Begin+0xc4>)
 8007f7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007f7e:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8007f80:	4b2c      	ldr	r3, [pc, #176]	; (8008034 <LCD_Begin+0xc8>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8007f86:	4b2c      	ldr	r3, [pc, #176]	; (8008038 <LCD_Begin+0xcc>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	801a      	strh	r2, [r3, #0]
 8007f8c:	4b2a      	ldr	r3, [pc, #168]	; (8008038 <LCD_Begin+0xcc>)
 8007f8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007f92:	4b2a      	ldr	r3, [pc, #168]	; (800803c <LCD_Begin+0xd0>)
 8007f94:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8007f96:	4b2a      	ldr	r3, [pc, #168]	; (8008040 <LCD_Begin+0xd4>)
 8007f98:	2204      	movs	r2, #4
 8007f9a:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8007f9c:	4b29      	ldr	r3, [pc, #164]	; (8008044 <LCD_Begin+0xd8>)
 8007f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fa2:	801a      	strh	r2, [r3, #0]
 8007fa4:	4b27      	ldr	r3, [pc, #156]	; (8008044 <LCD_Begin+0xd8>)
 8007fa6:	881a      	ldrh	r2, [r3, #0]
 8007fa8:	4b27      	ldr	r3, [pc, #156]	; (8008048 <LCD_Begin+0xdc>)
 8007faa:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8007fac:	4b27      	ldr	r3, [pc, #156]	; (800804c <LCD_Begin+0xe0>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;

	GPIO_Init();
 8007fb6:	f7ff ff45 	bl	8007e44 <GPIO_Init>

	LCD_Reset();
 8007fba:	f000 f9cd 	bl	8008358 <LCD_Reset>

	LCD_CS_LOW();
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4823      	ldr	r0, [pc, #140]	; (8008050 <LCD_Begin+0xe4>)
 8007fc4:	f7fa fe99 	bl	8002cfa <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8007fc8:	e01d      	b.n	8008006 <LCD_Begin+0x9a>
		a = ST7781_regValues[i++];
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	1c5a      	adds	r2, r3, #1
 8007fce:	71fa      	strb	r2, [r7, #7]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	4b20      	ldr	r3, [pc, #128]	; (8008054 <LCD_Begin+0xe8>)
 8007fd4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007fd8:	80bb      	strh	r3, [r7, #4]
		d = ST7781_regValues[i++];
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	71fa      	strb	r2, [r7, #7]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <LCD_Begin+0xe8>)
 8007fe4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007fe8:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8007fea:	88bb      	ldrh	r3, [r7, #4]
 8007fec:	2bff      	cmp	r3, #255	; 0xff
 8007fee:	d104      	bne.n	8007ffa <LCD_Begin+0x8e>
			delay(d);
 8007ff0:	887b      	ldrh	r3, [r7, #2]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff ff0c 	bl	8007e10 <delay>
 8007ff8:	e005      	b.n	8008006 <LCD_Begin+0x9a>
		} else {
			LCD_WriteRegister16(a, d);
 8007ffa:	887a      	ldrh	r2, [r7, #2]
 8007ffc:	88bb      	ldrh	r3, [r7, #4]
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fb1f 	bl	8008644 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	2b83      	cmp	r3, #131	; 0x83
 800800a:	d9de      	bls.n	8007fca <LCD_Begin+0x5e>
		}
	}

	LCD_SetRotation(m_rotation);
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <LCD_Begin+0xc8>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f9f5 	bl	8008400 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8008016:	f240 133f 	movw	r3, #319	; 0x13f
 800801a:	22ef      	movs	r2, #239	; 0xef
 800801c:	2100      	movs	r1, #0
 800801e:	2000      	movs	r0, #0
 8008020:	f000 fa24 	bl	800846c <LCD_SetAddrWindow>
}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20002468 	.word	0x20002468
 8008030:	2000246a 	.word	0x2000246a
 8008034:	20002475 	.word	0x20002475
 8008038:	2000246c 	.word	0x2000246c
 800803c:	2000246e 	.word	0x2000246e
 8008040:	20002474 	.word	0x20002474
 8008044:	20002472 	.word	0x20002472
 8008048:	20002470 	.word	0x20002470
 800804c:	20002476 	.word	0x20002476
 8008050:	40020400 	.word	0x40020400
 8008054:	0800ce20 	.word	0x0800ce20

08008058 <LCD_FillScreen>:
 * 
 * \param color	Color
 * 
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	80fb      	strh	r3, [r7, #6]
	// state, just need to set the address pointer to the top-left corner.
	// Although we could fill in any direction, the code uses the current
	// screen rotation because some users find it disconcerting when a
	// fill does not occur top-to-bottom.
	uint16_t x, y;
	switch (m_rotation) {
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <LCD_FillScreen+0x7c>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b03      	cmp	r3, #3
 8008068:	d015      	beq.n	8008096 <LCD_FillScreen+0x3e>
 800806a:	2b03      	cmp	r3, #3
 800806c:	dc03      	bgt.n	8008076 <LCD_FillScreen+0x1e>
 800806e:	2b01      	cmp	r3, #1
 8008070:	d006      	beq.n	8008080 <LCD_FillScreen+0x28>
 8008072:	2b02      	cmp	r3, #2
 8008074:	d009      	beq.n	800808a <LCD_FillScreen+0x32>
	default:
		x = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	81fb      	strh	r3, [r7, #14]
		y = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	81bb      	strh	r3, [r7, #12]
		break;
 800807e:	e010      	b.n	80080a2 <LCD_FillScreen+0x4a>
	case 1:
		x = TFTWIDTH - 1;
 8008080:	23ef      	movs	r3, #239	; 0xef
 8008082:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	81bb      	strh	r3, [r7, #12]
		break;
 8008088:	e00b      	b.n	80080a2 <LCD_FillScreen+0x4a>
	case 2:
		x = TFTWIDTH - 1;
 800808a:	23ef      	movs	r3, #239	; 0xef
 800808c:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 800808e:	f240 133f 	movw	r3, #319	; 0x13f
 8008092:	81bb      	strh	r3, [r7, #12]
		break;
 8008094:	e005      	b.n	80080a2 <LCD_FillScreen+0x4a>
	case 3:
		x = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 800809a:	f240 133f 	movw	r3, #319	; 0x13f
 800809e:	81bb      	strh	r3, [r7, #12]
		break;
 80080a0:	bf00      	nop
	}
	LCD_CS_LOW();
 80080a2:	2200      	movs	r2, #0
 80080a4:	2100      	movs	r1, #0
 80080a6:	480c      	ldr	r0, [pc, #48]	; (80080d8 <LCD_FillScreen+0x80>)
 80080a8:	f7fa fe27 	bl	8002cfa <gpio_write>
	LCD_WriteRegister16(0x0020, x);
 80080ac:	89fb      	ldrh	r3, [r7, #14]
 80080ae:	4619      	mov	r1, r3
 80080b0:	2020      	movs	r0, #32
 80080b2:	f000 fac7 	bl	8008644 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 80080b6:	89bb      	ldrh	r3, [r7, #12]
 80080b8:	4619      	mov	r1, r3
 80080ba:	2021      	movs	r0, #33	; 0x21
 80080bc:	f000 fac2 	bl	8008644 <LCD_WriteRegister16>

	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 80080c0:	88fb      	ldrh	r3, [r7, #6]
 80080c2:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 f808 	bl	80080dc <LCD_Flood>
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20002475 	.word	0x20002475
 80080d8:	40020400 	.word	0x40020400

080080dc <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	6039      	str	r1, [r7, #0]
 80080e6:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	0a1b      	lsrs	r3, r3, #8
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	733b      	strb	r3, [r7, #12]
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	72fb      	strb	r3, [r7, #11]

	LCD_CS_LOW();
 80080f4:	2200      	movs	r2, #0
 80080f6:	2100      	movs	r1, #0
 80080f8:	4895      	ldr	r0, [pc, #596]	; (8008350 <LCD_Flood+0x274>)
 80080fa:	f7fa fdfe 	bl	8002cfa <gpio_write>
	LCD_CD_LOW();
 80080fe:	2200      	movs	r2, #0
 8008100:	2104      	movs	r1, #4
 8008102:	4894      	ldr	r0, [pc, #592]	; (8008354 <LCD_Flood+0x278>)
 8008104:	f7fa fdf9 	bl	8002cfa <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 8008108:	2000      	movs	r0, #0
 800810a:	f000 fa3f 	bl	800858c <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 800810e:	2022      	movs	r0, #34	; 0x22
 8008110:	f000 fa3c 	bl	800858c <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 8008114:	2201      	movs	r2, #1
 8008116:	2104      	movs	r1, #4
 8008118:	488e      	ldr	r0, [pc, #568]	; (8008354 <LCD_Flood+0x278>)
 800811a:	f7fa fdee 	bl	8002cfa <gpio_write>
	LCD_Write8(hi);
 800811e:	7b3b      	ldrb	r3, [r7, #12]
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fa33 	bl	800858c <LCD_Write8>
	LCD_Write8(lo);
 8008126:	7afb      	ldrb	r3, [r7, #11]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fa2f 	bl	800858c <LCD_Write8>
	len--;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	3b01      	subs	r3, #1
 8008132:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	099b      	lsrs	r3, r3, #6
 8008138:	81fb      	strh	r3, [r7, #14]
	if (hi == lo) {
 800813a:	7b3a      	ldrb	r2, [r7, #12]
 800813c:	7afb      	ldrb	r3, [r7, #11]
 800813e:	429a      	cmp	r2, r3
 8008140:	f040 80e4 	bne.w	800830c <LCD_Flood+0x230>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8008144:	e088      	b.n	8008258 <LCD_Flood+0x17c>
			i = 16; // 64 pixels/block / 4 pixels/pass
 8008146:	2310      	movs	r3, #16
 8008148:	737b      	strb	r3, [r7, #13]
			do {
				LCD_WR_STROBE();
 800814a:	2200      	movs	r2, #0
 800814c:	2101      	movs	r1, #1
 800814e:	4881      	ldr	r0, [pc, #516]	; (8008354 <LCD_Flood+0x278>)
 8008150:	f7fa fdd3 	bl	8002cfa <gpio_write>
 8008154:	2001      	movs	r0, #1
 8008156:	f7ff fe5b 	bl	8007e10 <delay>
 800815a:	2201      	movs	r2, #1
 800815c:	2101      	movs	r1, #1
 800815e:	487d      	ldr	r0, [pc, #500]	; (8008354 <LCD_Flood+0x278>)
 8008160:	f7fa fdcb 	bl	8002cfa <gpio_write>
 8008164:	2001      	movs	r0, #1
 8008166:	f7ff fe53 	bl	8007e10 <delay>
				LCD_WR_STROBE();
 800816a:	2200      	movs	r2, #0
 800816c:	2101      	movs	r1, #1
 800816e:	4879      	ldr	r0, [pc, #484]	; (8008354 <LCD_Flood+0x278>)
 8008170:	f7fa fdc3 	bl	8002cfa <gpio_write>
 8008174:	2001      	movs	r0, #1
 8008176:	f7ff fe4b 	bl	8007e10 <delay>
 800817a:	2201      	movs	r2, #1
 800817c:	2101      	movs	r1, #1
 800817e:	4875      	ldr	r0, [pc, #468]	; (8008354 <LCD_Flood+0x278>)
 8008180:	f7fa fdbb 	bl	8002cfa <gpio_write>
 8008184:	2001      	movs	r0, #1
 8008186:	f7ff fe43 	bl	8007e10 <delay>
				LCD_WR_STROBE();
 800818a:	2200      	movs	r2, #0
 800818c:	2101      	movs	r1, #1
 800818e:	4871      	ldr	r0, [pc, #452]	; (8008354 <LCD_Flood+0x278>)
 8008190:	f7fa fdb3 	bl	8002cfa <gpio_write>
 8008194:	2001      	movs	r0, #1
 8008196:	f7ff fe3b 	bl	8007e10 <delay>
 800819a:	2201      	movs	r2, #1
 800819c:	2101      	movs	r1, #1
 800819e:	486d      	ldr	r0, [pc, #436]	; (8008354 <LCD_Flood+0x278>)
 80081a0:	f7fa fdab 	bl	8002cfa <gpio_write>
 80081a4:	2001      	movs	r0, #1
 80081a6:	f7ff fe33 	bl	8007e10 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 80081aa:	2200      	movs	r2, #0
 80081ac:	2101      	movs	r1, #1
 80081ae:	4869      	ldr	r0, [pc, #420]	; (8008354 <LCD_Flood+0x278>)
 80081b0:	f7fa fda3 	bl	8002cfa <gpio_write>
 80081b4:	2001      	movs	r0, #1
 80081b6:	f7ff fe2b 	bl	8007e10 <delay>
 80081ba:	2201      	movs	r2, #1
 80081bc:	2101      	movs	r1, #1
 80081be:	4865      	ldr	r0, [pc, #404]	; (8008354 <LCD_Flood+0x278>)
 80081c0:	f7fa fd9b 	bl	8002cfa <gpio_write>
 80081c4:	2001      	movs	r0, #1
 80081c6:	f7ff fe23 	bl	8007e10 <delay>
				LCD_WR_STROBE();
 80081ca:	2200      	movs	r2, #0
 80081cc:	2101      	movs	r1, #1
 80081ce:	4861      	ldr	r0, [pc, #388]	; (8008354 <LCD_Flood+0x278>)
 80081d0:	f7fa fd93 	bl	8002cfa <gpio_write>
 80081d4:	2001      	movs	r0, #1
 80081d6:	f7ff fe1b 	bl	8007e10 <delay>
 80081da:	2201      	movs	r2, #1
 80081dc:	2101      	movs	r1, #1
 80081de:	485d      	ldr	r0, [pc, #372]	; (8008354 <LCD_Flood+0x278>)
 80081e0:	f7fa fd8b 	bl	8002cfa <gpio_write>
 80081e4:	2001      	movs	r0, #1
 80081e6:	f7ff fe13 	bl	8007e10 <delay>
				LCD_WR_STROBE();
 80081ea:	2200      	movs	r2, #0
 80081ec:	2101      	movs	r1, #1
 80081ee:	4859      	ldr	r0, [pc, #356]	; (8008354 <LCD_Flood+0x278>)
 80081f0:	f7fa fd83 	bl	8002cfa <gpio_write>
 80081f4:	2001      	movs	r0, #1
 80081f6:	f7ff fe0b 	bl	8007e10 <delay>
 80081fa:	2201      	movs	r2, #1
 80081fc:	2101      	movs	r1, #1
 80081fe:	4855      	ldr	r0, [pc, #340]	; (8008354 <LCD_Flood+0x278>)
 8008200:	f7fa fd7b 	bl	8002cfa <gpio_write>
 8008204:	2001      	movs	r0, #1
 8008206:	f7ff fe03 	bl	8007e10 <delay>
				LCD_WR_STROBE();
 800820a:	2200      	movs	r2, #0
 800820c:	2101      	movs	r1, #1
 800820e:	4851      	ldr	r0, [pc, #324]	; (8008354 <LCD_Flood+0x278>)
 8008210:	f7fa fd73 	bl	8002cfa <gpio_write>
 8008214:	2001      	movs	r0, #1
 8008216:	f7ff fdfb 	bl	8007e10 <delay>
 800821a:	2201      	movs	r2, #1
 800821c:	2101      	movs	r1, #1
 800821e:	484d      	ldr	r0, [pc, #308]	; (8008354 <LCD_Flood+0x278>)
 8008220:	f7fa fd6b 	bl	8002cfa <gpio_write>
 8008224:	2001      	movs	r0, #1
 8008226:	f7ff fdf3 	bl	8007e10 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 800822a:	2200      	movs	r2, #0
 800822c:	2101      	movs	r1, #1
 800822e:	4849      	ldr	r0, [pc, #292]	; (8008354 <LCD_Flood+0x278>)
 8008230:	f7fa fd63 	bl	8002cfa <gpio_write>
 8008234:	2001      	movs	r0, #1
 8008236:	f7ff fdeb 	bl	8007e10 <delay>
 800823a:	2201      	movs	r2, #1
 800823c:	2101      	movs	r1, #1
 800823e:	4845      	ldr	r0, [pc, #276]	; (8008354 <LCD_Flood+0x278>)
 8008240:	f7fa fd5b 	bl	8002cfa <gpio_write>
 8008244:	2001      	movs	r0, #1
 8008246:	f7ff fde3 	bl	8007e10 <delay>
			} while (--i);
 800824a:	7b7b      	ldrb	r3, [r7, #13]
 800824c:	3b01      	subs	r3, #1
 800824e:	737b      	strb	r3, [r7, #13]
 8008250:	7b7b      	ldrb	r3, [r7, #13]
 8008252:	2b00      	cmp	r3, #0
 8008254:	f47f af79 	bne.w	800814a <LCD_Flood+0x6e>
		while (blocks--) {
 8008258:	89fb      	ldrh	r3, [r7, #14]
 800825a:	1e5a      	subs	r2, r3, #1
 800825c:	81fa      	strh	r2, [r7, #14]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f47f af71 	bne.w	8008146 <LCD_Flood+0x6a>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800826c:	737b      	strb	r3, [r7, #13]
 800826e:	e01f      	b.n	80082b0 <LCD_Flood+0x1d4>
			LCD_WR_STROBE();
 8008270:	2200      	movs	r2, #0
 8008272:	2101      	movs	r1, #1
 8008274:	4837      	ldr	r0, [pc, #220]	; (8008354 <LCD_Flood+0x278>)
 8008276:	f7fa fd40 	bl	8002cfa <gpio_write>
 800827a:	2001      	movs	r0, #1
 800827c:	f7ff fdc8 	bl	8007e10 <delay>
 8008280:	2201      	movs	r2, #1
 8008282:	2101      	movs	r1, #1
 8008284:	4833      	ldr	r0, [pc, #204]	; (8008354 <LCD_Flood+0x278>)
 8008286:	f7fa fd38 	bl	8002cfa <gpio_write>
 800828a:	2001      	movs	r0, #1
 800828c:	f7ff fdc0 	bl	8007e10 <delay>
			LCD_WR_STROBE();
 8008290:	2200      	movs	r2, #0
 8008292:	2101      	movs	r1, #1
 8008294:	482f      	ldr	r0, [pc, #188]	; (8008354 <LCD_Flood+0x278>)
 8008296:	f7fa fd30 	bl	8002cfa <gpio_write>
 800829a:	2001      	movs	r0, #1
 800829c:	f7ff fdb8 	bl	8007e10 <delay>
 80082a0:	2201      	movs	r2, #1
 80082a2:	2101      	movs	r1, #1
 80082a4:	482b      	ldr	r0, [pc, #172]	; (8008354 <LCD_Flood+0x278>)
 80082a6:	f7fa fd28 	bl	8002cfa <gpio_write>
 80082aa:	2001      	movs	r0, #1
 80082ac:	f7ff fdb0 	bl	8007e10 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 80082b0:	7b7b      	ldrb	r3, [r7, #13]
 80082b2:	1e5a      	subs	r2, r3, #1
 80082b4:	737a      	strb	r2, [r7, #13]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1da      	bne.n	8008270 <LCD_Flood+0x194>
 80082ba:	e03f      	b.n	800833c <LCD_Flood+0x260>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 80082bc:	2310      	movs	r3, #16
 80082be:	737b      	strb	r3, [r7, #13]
			do {
				LCD_Write8(hi);
 80082c0:	7b3b      	ldrb	r3, [r7, #12]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 f962 	bl	800858c <LCD_Write8>
				LCD_Write8(lo);
 80082c8:	7afb      	ldrb	r3, [r7, #11]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f95e 	bl	800858c <LCD_Write8>
				LCD_Write8(hi);
 80082d0:	7b3b      	ldrb	r3, [r7, #12]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f95a 	bl	800858c <LCD_Write8>
				LCD_Write8(lo);
 80082d8:	7afb      	ldrb	r3, [r7, #11]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 f956 	bl	800858c <LCD_Write8>
				LCD_Write8(hi);
 80082e0:	7b3b      	ldrb	r3, [r7, #12]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 f952 	bl	800858c <LCD_Write8>
				LCD_Write8(lo);
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 f94e 	bl	800858c <LCD_Write8>
				LCD_Write8(hi);
 80082f0:	7b3b      	ldrb	r3, [r7, #12]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f94a 	bl	800858c <LCD_Write8>
				LCD_Write8(lo);
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f946 	bl	800858c <LCD_Write8>
			} while (--i);
 8008300:	7b7b      	ldrb	r3, [r7, #13]
 8008302:	3b01      	subs	r3, #1
 8008304:	737b      	strb	r3, [r7, #13]
 8008306:	7b7b      	ldrb	r3, [r7, #13]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1d9      	bne.n	80082c0 <LCD_Flood+0x1e4>
		while (blocks--) {
 800830c:	89fb      	ldrh	r3, [r7, #14]
 800830e:	1e5a      	subs	r2, r3, #1
 8008310:	81fa      	strh	r2, [r7, #14]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1d2      	bne.n	80082bc <LCD_Flood+0x1e0>
		}
		for (i = (uint8_t) len & 63; i--;) {
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800831e:	737b      	strb	r3, [r7, #13]
 8008320:	e007      	b.n	8008332 <LCD_Flood+0x256>
			LCD_Write8(hi);
 8008322:	7b3b      	ldrb	r3, [r7, #12]
 8008324:	4618      	mov	r0, r3
 8008326:	f000 f931 	bl	800858c <LCD_Write8>
			LCD_Write8(lo);
 800832a:	7afb      	ldrb	r3, [r7, #11]
 800832c:	4618      	mov	r0, r3
 800832e:	f000 f92d 	bl	800858c <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 8008332:	7b7b      	ldrb	r3, [r7, #13]
 8008334:	1e5a      	subs	r2, r3, #1
 8008336:	737a      	strb	r2, [r7, #13]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1f2      	bne.n	8008322 <LCD_Flood+0x246>
		}
	}
	LCD_CS_HIGH();
 800833c:	2201      	movs	r2, #1
 800833e:	2100      	movs	r1, #0
 8008340:	4803      	ldr	r0, [pc, #12]	; (8008350 <LCD_Flood+0x274>)
 8008342:	f7fa fcda 	bl	8002cfa <gpio_write>
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40020400 	.word	0x40020400
 8008354:	40020000 	.word	0x40020000

08008358 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 800835e:	2201      	movs	r2, #1
 8008360:	2100      	movs	r1, #0
 8008362:	4824      	ldr	r0, [pc, #144]	; (80083f4 <LCD_Reset+0x9c>)
 8008364:	f7fa fcc9 	bl	8002cfa <gpio_write>
	LCD_WR_HIGH();
 8008368:	2201      	movs	r2, #1
 800836a:	2101      	movs	r1, #1
 800836c:	4822      	ldr	r0, [pc, #136]	; (80083f8 <LCD_Reset+0xa0>)
 800836e:	f7fa fcc4 	bl	8002cfa <gpio_write>
	LCD_RD_HIGH();
 8008372:	2201      	movs	r2, #1
 8008374:	2100      	movs	r1, #0
 8008376:	4820      	ldr	r0, [pc, #128]	; (80083f8 <LCD_Reset+0xa0>)
 8008378:	f7fa fcbf 	bl	8002cfa <gpio_write>

	LCD_RST_LOW();
 800837c:	2200      	movs	r2, #0
 800837e:	2101      	movs	r1, #1
 8008380:	481e      	ldr	r0, [pc, #120]	; (80083fc <LCD_Reset+0xa4>)
 8008382:	f7fa fcba 	bl	8002cfa <gpio_write>
	delay(100);
 8008386:	2064      	movs	r0, #100	; 0x64
 8008388:	f7ff fd42 	bl	8007e10 <delay>
	LCD_RST_HIGH();
 800838c:	2201      	movs	r2, #1
 800838e:	2101      	movs	r1, #1
 8008390:	481a      	ldr	r0, [pc, #104]	; (80083fc <LCD_Reset+0xa4>)
 8008392:	f7fa fcb2 	bl	8002cfa <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 8008396:	2200      	movs	r2, #0
 8008398:	2100      	movs	r1, #0
 800839a:	4816      	ldr	r0, [pc, #88]	; (80083f4 <LCD_Reset+0x9c>)
 800839c:	f7fa fcad 	bl	8002cfa <gpio_write>

	LCD_CD_LOW();
 80083a0:	2200      	movs	r2, #0
 80083a2:	2104      	movs	r1, #4
 80083a4:	4814      	ldr	r0, [pc, #80]	; (80083f8 <LCD_Reset+0xa0>)
 80083a6:	f7fa fca8 	bl	8002cfa <gpio_write>
	LCD_Write8(0x00);
 80083aa:	2000      	movs	r0, #0
 80083ac:	f000 f8ee 	bl	800858c <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 80083b0:	2300      	movs	r3, #0
 80083b2:	71fb      	strb	r3, [r7, #7]
 80083b4:	e012      	b.n	80083dc <LCD_Reset+0x84>
		LCD_WR_STROBE(); // Three extra 0x00s
 80083b6:	2200      	movs	r2, #0
 80083b8:	2101      	movs	r1, #1
 80083ba:	480f      	ldr	r0, [pc, #60]	; (80083f8 <LCD_Reset+0xa0>)
 80083bc:	f7fa fc9d 	bl	8002cfa <gpio_write>
 80083c0:	2001      	movs	r0, #1
 80083c2:	f7ff fd25 	bl	8007e10 <delay>
 80083c6:	2201      	movs	r2, #1
 80083c8:	2101      	movs	r1, #1
 80083ca:	480b      	ldr	r0, [pc, #44]	; (80083f8 <LCD_Reset+0xa0>)
 80083cc:	f7fa fc95 	bl	8002cfa <gpio_write>
 80083d0:	2001      	movs	r0, #1
 80083d2:	f7ff fd1d 	bl	8007e10 <delay>
	for (uint8_t i = 0; i < 3; i++)
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	3301      	adds	r3, #1
 80083da:	71fb      	strb	r3, [r7, #7]
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d9e9      	bls.n	80083b6 <LCD_Reset+0x5e>
	LCD_CS_HIGH();
 80083e2:	2201      	movs	r2, #1
 80083e4:	2100      	movs	r1, #0
 80083e6:	4803      	ldr	r0, [pc, #12]	; (80083f4 <LCD_Reset+0x9c>)
 80083e8:	f7fa fc87 	bl	8002cfa <gpio_write>
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	40020400 	.word	0x40020400
 80083f8:	40020000 	.word	0x40020000
 80083fc:	40020800 	.word	0x40020800

08008400 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 800840a:	79fb      	ldrb	r3, [r7, #7]
 800840c:	f003 0303 	and.w	r3, r3, #3
 8008410:	b2da      	uxtb	r2, r3
 8008412:	4b13      	ldr	r3, [pc, #76]	; (8008460 <LCD_SetRotation+0x60>)
 8008414:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <LCD_SetRotation+0x60>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b03      	cmp	r3, #3
 800841c:	d81a      	bhi.n	8008454 <LCD_SetRotation+0x54>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <LCD_SetRotation+0x24>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008435 	.word	0x08008435
 8008428:	08008445 	.word	0x08008445
 800842c:	08008435 	.word	0x08008435
 8008430:	08008445 	.word	0x08008445
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <LCD_SetRotation+0x64>)
 8008436:	22f0      	movs	r2, #240	; 0xf0
 8008438:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 800843a:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <LCD_SetRotation+0x68>)
 800843c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008440:	801a      	strh	r2, [r3, #0]
		break;
 8008442:	e007      	b.n	8008454 <LCD_SetRotation+0x54>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8008444:	4b07      	ldr	r3, [pc, #28]	; (8008464 <LCD_SetRotation+0x64>)
 8008446:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800844a:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 800844c:	4b06      	ldr	r3, [pc, #24]	; (8008468 <LCD_SetRotation+0x68>)
 800844e:	22f0      	movs	r2, #240	; 0xf0
 8008450:	801a      	strh	r2, [r3, #0]
		break;
 8008452:	bf00      	nop
	}
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	20002475 	.word	0x20002475
 8008464:	20002468 	.word	0x20002468
 8008468:	2000246a 	.word	0x2000246a

0800846c <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	4841      	ldr	r0, [pc, #260]	; (8008584 <LCD_SetAddrWindow+0x118>)
 8008480:	f7fa fc3b 	bl	8002cfa <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 8008484:	4b40      	ldr	r3, [pc, #256]	; (8008588 <LCD_SetAddrWindow+0x11c>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b03      	cmp	r3, #3
 800848a:	d038      	beq.n	80084fe <LCD_SetAddrWindow+0x92>
 800848c:	2b03      	cmp	r3, #3
 800848e:	dc03      	bgt.n	8008498 <LCD_SetAddrWindow+0x2c>
 8008490:	2b01      	cmp	r3, #1
 8008492:	d006      	beq.n	80084a2 <LCD_SetAddrWindow+0x36>
 8008494:	2b02      	cmp	r3, #2
 8008496:	d017      	beq.n	80084c8 <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	61fb      	str	r3, [r7, #28]
		y = y1;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	61bb      	str	r3, [r7, #24]
		break;
 80084a0:	e042      	b.n	8008528 <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	617b      	str	r3, [r7, #20]
		y1 = x1;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80084b0:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80084bc:	607b      	str	r3, [r7, #4]
		x = x2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	61fb      	str	r3, [r7, #28]
		y = y1;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	61bb      	str	r3, [r7, #24]
		break;
 80084c6:	e02f      	b.n	8008528 <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80084d2:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80084da:	607b      	str	r3, [r7, #4]
		t = y1;
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80084e6:	3301      	adds	r3, #1
 80084e8:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80084f0:	3301      	adds	r3, #1
 80084f2:	603b      	str	r3, [r7, #0]
		x = x2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	61fb      	str	r3, [r7, #28]
		y = y2;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	61bb      	str	r3, [r7, #24]
		break;
 80084fc:	e014      	b.n	8008528 <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	617b      	str	r3, [r7, #20]
		x1 = y1;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800850c:	3301      	adds	r3, #1
 800850e:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800851a:	3301      	adds	r3, #1
 800851c:	603b      	str	r3, [r7, #0]
		x = x1;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	61fb      	str	r3, [r7, #28]
		y = y2;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	61bb      	str	r3, [r7, #24]
		break;
 8008526:	bf00      	nop
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	b29b      	uxth	r3, r3
 800852c:	4619      	mov	r1, r3
 800852e:	2050      	movs	r0, #80	; 0x50
 8008530:	f000 f888 	bl	8008644 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	b29b      	uxth	r3, r3
 8008538:	4619      	mov	r1, r3
 800853a:	2051      	movs	r0, #81	; 0x51
 800853c:	f000 f882 	bl	8008644 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	b29b      	uxth	r3, r3
 8008544:	4619      	mov	r1, r3
 8008546:	2052      	movs	r0, #82	; 0x52
 8008548:	f000 f87c 	bl	8008644 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	4619      	mov	r1, r3
 8008552:	2053      	movs	r0, #83	; 0x53
 8008554:	f000 f876 	bl	8008644 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	b29b      	uxth	r3, r3
 800855c:	4619      	mov	r1, r3
 800855e:	2020      	movs	r0, #32
 8008560:	f000 f870 	bl	8008644 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	b29b      	uxth	r3, r3
 8008568:	4619      	mov	r1, r3
 800856a:	2021      	movs	r0, #33	; 0x21
 800856c:	f000 f86a 	bl	8008644 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8008570:	2201      	movs	r2, #1
 8008572:	2100      	movs	r1, #0
 8008574:	4803      	ldr	r0, [pc, #12]	; (8008584 <LCD_SetAddrWindow+0x118>)
 8008576:	f7fa fbc0 	bl	8002cfa <gpio_write>
}
 800857a:	bf00      	nop
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	40020400 	.word	0x40020400
 8008588:	20002475 	.word	0x20002475

0800858c <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8008596:	4b28      	ldr	r3, [pc, #160]	; (8008638 <LCD_Write8+0xac>)
 8008598:	695a      	ldr	r2, [r3, #20]
 800859a:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800859e:	4013      	ands	r3, r2
 80085a0:	79fa      	ldrb	r2, [r7, #7]
 80085a2:	0252      	lsls	r2, r2, #9
 80085a4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80085a8:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 80085aa:	79fb      	ldrb	r3, [r7, #7]
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b2:	431a      	orrs	r2, r3
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 80085bc:	491e      	ldr	r1, [pc, #120]	; (8008638 <LCD_Write8+0xac>)
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 80085be:	4313      	orrs	r3, r2
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 80085c0:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80085c2:	4b1e      	ldr	r3, [pc, #120]	; (800863c <LCD_Write8+0xb0>)
 80085c4:	695a      	ldr	r2, [r3, #20]
 80085c6:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 80085ca:	4013      	ands	r3, r2
 80085cc:	79fa      	ldrb	r2, [r7, #7]
 80085ce:	f002 0208 	and.w	r2, r2, #8
 80085d2:	431a      	orrs	r2, r3
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	f003 0320 	and.w	r3, r3, #32
 80085dc:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	105b      	asrs	r3, r3, #1
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	431a      	orrs	r2, r3
 80085e8:	79fb      	ldrb	r3, [r7, #7]
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80085f0:	4912      	ldr	r1, [pc, #72]	; (800863c <LCD_Write8+0xb0>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80085f2:	4313      	orrs	r3, r2
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80085f4:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 80085f6:	4b12      	ldr	r3, [pc, #72]	; (8008640 <LCD_Write8+0xb4>)
 80085f8:	695a      	ldr	r2, [r3, #20]
 80085fa:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80085fe:	4013      	ands	r3, r2
 8008600:	79fa      	ldrb	r2, [r7, #7]
 8008602:	0192      	lsls	r2, r2, #6
 8008604:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008608:	490d      	ldr	r1, [pc, #52]	; (8008640 <LCD_Write8+0xb4>)
 800860a:	4313      	orrs	r3, r2
 800860c:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 800860e:	2200      	movs	r2, #0
 8008610:	2101      	movs	r1, #1
 8008612:	4809      	ldr	r0, [pc, #36]	; (8008638 <LCD_Write8+0xac>)
 8008614:	f7fa fb71 	bl	8002cfa <gpio_write>
 8008618:	2001      	movs	r0, #1
 800861a:	f7ff fbf9 	bl	8007e10 <delay>
 800861e:	2201      	movs	r2, #1
 8008620:	2101      	movs	r1, #1
 8008622:	4805      	ldr	r0, [pc, #20]	; (8008638 <LCD_Write8+0xac>)
 8008624:	f7fa fb69 	bl	8002cfa <gpio_write>
 8008628:	2001      	movs	r0, #1
 800862a:	f7ff fbf1 	bl	8007e10 <delay>
}
 800862e:	bf00      	nop
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	40020000 	.word	0x40020000
 800863c:	40020400 	.word	0x40020400
 8008640:	40020800 	.word	0x40020800

08008644 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	460a      	mov	r2, r1
 800864e:	80fb      	strh	r3, [r7, #6]
 8008650:	4613      	mov	r3, r2
 8008652:	80bb      	strh	r3, [r7, #4]
	uint8_t hi, lo;
	hi = (a) >> 8;
 8008654:	88fb      	ldrh	r3, [r7, #6]
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	b29b      	uxth	r3, r3
 800865a:	73fb      	strb	r3, [r7, #15]
	lo = (a);
 800865c:	88fb      	ldrh	r3, [r7, #6]
 800865e:	73bb      	strb	r3, [r7, #14]
	LCD_CD_LOW();
 8008660:	2200      	movs	r2, #0
 8008662:	2104      	movs	r1, #4
 8008664:	4810      	ldr	r0, [pc, #64]	; (80086a8 <LCD_WriteRegister16+0x64>)
 8008666:	f7fa fb48 	bl	8002cfa <gpio_write>
	LCD_Write8(hi);
 800866a:	7bfb      	ldrb	r3, [r7, #15]
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff ff8d 	bl	800858c <LCD_Write8>
	LCD_Write8(lo);
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff ff89 	bl	800858c <LCD_Write8>
	hi = (d) >> 8;
 800867a:	88bb      	ldrh	r3, [r7, #4]
 800867c:	0a1b      	lsrs	r3, r3, #8
 800867e:	b29b      	uxth	r3, r3
 8008680:	73fb      	strb	r3, [r7, #15]
	lo = (d);
 8008682:	88bb      	ldrh	r3, [r7, #4]
 8008684:	73bb      	strb	r3, [r7, #14]
	LCD_CD_HIGH();
 8008686:	2201      	movs	r2, #1
 8008688:	2104      	movs	r1, #4
 800868a:	4807      	ldr	r0, [pc, #28]	; (80086a8 <LCD_WriteRegister16+0x64>)
 800868c:	f7fa fb35 	bl	8002cfa <gpio_write>
	LCD_Write8(hi);
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	4618      	mov	r0, r3
 8008694:	f7ff ff7a 	bl	800858c <LCD_Write8>
	LCD_Write8(lo);
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff ff76 	bl	800858c <LCD_Write8>
}
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	40020000 	.word	0x40020000

080086ac <LCD_pushColors>:

void LCD_pushColors(uint16_t *data, uint8_t len, bool first) {
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
 80086b8:	4613      	mov	r3, r2
 80086ba:	70bb      	strb	r3, [r7, #2]
	uint16_t color;
	uint8_t hi, lo;
	LCD_CS_LOW();
 80086bc:	2200      	movs	r2, #0
 80086be:	2100      	movs	r1, #0
 80086c0:	481b      	ldr	r0, [pc, #108]	; (8008730 <LCD_pushColors+0x84>)
 80086c2:	f7fa fb1a 	bl	8002cfa <gpio_write>

	if (first == true) {
 80086c6:	78bb      	ldrb	r3, [r7, #2]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00a      	beq.n	80086e2 <LCD_pushColors+0x36>
	LCD_CD_LOW();
 80086cc:	2200      	movs	r2, #0
 80086ce:	2104      	movs	r1, #4
 80086d0:	4818      	ldr	r0, [pc, #96]	; (8008734 <LCD_pushColors+0x88>)
 80086d2:	f7fa fb12 	bl	8002cfa <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 80086d6:	2000      	movs	r0, #0
 80086d8:	f7ff ff58 	bl	800858c <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 80086dc:	2022      	movs	r0, #34	; 0x22
 80086de:	f7ff ff55 	bl	800858c <LCD_Write8>
	}

	LCD_CD_HIGH();
 80086e2:	2201      	movs	r2, #1
 80086e4:	2104      	movs	r1, #4
 80086e6:	4813      	ldr	r0, [pc, #76]	; (8008734 <LCD_pushColors+0x88>)
 80086e8:	f7fa fb07 	bl	8002cfa <gpio_write>
	while (len--) {
 80086ec:	e012      	b.n	8008714 <LCD_pushColors+0x68>
		color = *data++;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	1c9a      	adds	r2, r3, #2
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	81fb      	strh	r3, [r7, #14]
		hi = color >> 8; // Don't simplify or merge these
 80086f8:	89fb      	ldrh	r3, [r7, #14]
 80086fa:	0a1b      	lsrs	r3, r3, #8
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	737b      	strb	r3, [r7, #13]
		lo = color;      // lines, there's macro shenanigans
 8008700:	89fb      	ldrh	r3, [r7, #14]
 8008702:	733b      	strb	r3, [r7, #12]
		LCD_Write8(hi);		//going on
 8008704:	7b7b      	ldrb	r3, [r7, #13]
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff ff40 	bl	800858c <LCD_Write8>
		LCD_Write8(lo);
 800870c:	7b3b      	ldrb	r3, [r7, #12]
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff ff3c 	bl	800858c <LCD_Write8>
	while (len--) {
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	1e5a      	subs	r2, r3, #1
 8008718:	70fa      	strb	r2, [r7, #3]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e7      	bne.n	80086ee <LCD_pushColors+0x42>
	}
	LCD_CS_HIGH();
 800871e:	2201      	movs	r2, #1
 8008720:	2100      	movs	r1, #0
 8008722:	4803      	ldr	r0, [pc, #12]	; (8008730 <LCD_pushColors+0x84>)
 8008724:	f7fa fae9 	bl	8002cfa <gpio_write>
}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40020400 	.word	0x40020400
 8008734:	40020000 	.word	0x40020000

08008738 <__errno>:
 8008738:	4b01      	ldr	r3, [pc, #4]	; (8008740 <__errno+0x8>)
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	20000050 	.word	0x20000050

08008744 <__libc_init_array>:
 8008744:	b570      	push	{r4, r5, r6, lr}
 8008746:	4d0d      	ldr	r5, [pc, #52]	; (800877c <__libc_init_array+0x38>)
 8008748:	4c0d      	ldr	r4, [pc, #52]	; (8008780 <__libc_init_array+0x3c>)
 800874a:	1b64      	subs	r4, r4, r5
 800874c:	10a4      	asrs	r4, r4, #2
 800874e:	2600      	movs	r6, #0
 8008750:	42a6      	cmp	r6, r4
 8008752:	d109      	bne.n	8008768 <__libc_init_array+0x24>
 8008754:	4d0b      	ldr	r5, [pc, #44]	; (8008784 <__libc_init_array+0x40>)
 8008756:	4c0c      	ldr	r4, [pc, #48]	; (8008788 <__libc_init_array+0x44>)
 8008758:	f003 f8d8 	bl	800b90c <_init>
 800875c:	1b64      	subs	r4, r4, r5
 800875e:	10a4      	asrs	r4, r4, #2
 8008760:	2600      	movs	r6, #0
 8008762:	42a6      	cmp	r6, r4
 8008764:	d105      	bne.n	8008772 <__libc_init_array+0x2e>
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	f855 3b04 	ldr.w	r3, [r5], #4
 800876c:	4798      	blx	r3
 800876e:	3601      	adds	r6, #1
 8008770:	e7ee      	b.n	8008750 <__libc_init_array+0xc>
 8008772:	f855 3b04 	ldr.w	r3, [r5], #4
 8008776:	4798      	blx	r3
 8008778:	3601      	adds	r6, #1
 800877a:	e7f2      	b.n	8008762 <__libc_init_array+0x1e>
 800877c:	0800d30c 	.word	0x0800d30c
 8008780:	0800d30c 	.word	0x0800d30c
 8008784:	0800d30c 	.word	0x0800d30c
 8008788:	0800d310 	.word	0x0800d310

0800878c <memcpy>:
 800878c:	440a      	add	r2, r1
 800878e:	4291      	cmp	r1, r2
 8008790:	f100 33ff 	add.w	r3, r0, #4294967295
 8008794:	d100      	bne.n	8008798 <memcpy+0xc>
 8008796:	4770      	bx	lr
 8008798:	b510      	push	{r4, lr}
 800879a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800879e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087a2:	4291      	cmp	r1, r2
 80087a4:	d1f9      	bne.n	800879a <memcpy+0xe>
 80087a6:	bd10      	pop	{r4, pc}

080087a8 <memset>:
 80087a8:	4402      	add	r2, r0
 80087aa:	4603      	mov	r3, r0
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d100      	bne.n	80087b2 <memset+0xa>
 80087b0:	4770      	bx	lr
 80087b2:	f803 1b01 	strb.w	r1, [r3], #1
 80087b6:	e7f9      	b.n	80087ac <memset+0x4>

080087b8 <__cvt>:
 80087b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087bc:	ec55 4b10 	vmov	r4, r5, d0
 80087c0:	2d00      	cmp	r5, #0
 80087c2:	460e      	mov	r6, r1
 80087c4:	4619      	mov	r1, r3
 80087c6:	462b      	mov	r3, r5
 80087c8:	bfbb      	ittet	lt
 80087ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087ce:	461d      	movlt	r5, r3
 80087d0:	2300      	movge	r3, #0
 80087d2:	232d      	movlt	r3, #45	; 0x2d
 80087d4:	700b      	strb	r3, [r1, #0]
 80087d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087dc:	4691      	mov	r9, r2
 80087de:	f023 0820 	bic.w	r8, r3, #32
 80087e2:	bfbc      	itt	lt
 80087e4:	4622      	movlt	r2, r4
 80087e6:	4614      	movlt	r4, r2
 80087e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087ec:	d005      	beq.n	80087fa <__cvt+0x42>
 80087ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087f2:	d100      	bne.n	80087f6 <__cvt+0x3e>
 80087f4:	3601      	adds	r6, #1
 80087f6:	2102      	movs	r1, #2
 80087f8:	e000      	b.n	80087fc <__cvt+0x44>
 80087fa:	2103      	movs	r1, #3
 80087fc:	ab03      	add	r3, sp, #12
 80087fe:	9301      	str	r3, [sp, #4]
 8008800:	ab02      	add	r3, sp, #8
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	ec45 4b10 	vmov	d0, r4, r5
 8008808:	4653      	mov	r3, sl
 800880a:	4632      	mov	r2, r6
 800880c:	f000 fec0 	bl	8009590 <_dtoa_r>
 8008810:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008814:	4607      	mov	r7, r0
 8008816:	d102      	bne.n	800881e <__cvt+0x66>
 8008818:	f019 0f01 	tst.w	r9, #1
 800881c:	d022      	beq.n	8008864 <__cvt+0xac>
 800881e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008822:	eb07 0906 	add.w	r9, r7, r6
 8008826:	d110      	bne.n	800884a <__cvt+0x92>
 8008828:	783b      	ldrb	r3, [r7, #0]
 800882a:	2b30      	cmp	r3, #48	; 0x30
 800882c:	d10a      	bne.n	8008844 <__cvt+0x8c>
 800882e:	2200      	movs	r2, #0
 8008830:	2300      	movs	r3, #0
 8008832:	4620      	mov	r0, r4
 8008834:	4629      	mov	r1, r5
 8008836:	f7f8 f95f 	bl	8000af8 <__aeabi_dcmpeq>
 800883a:	b918      	cbnz	r0, 8008844 <__cvt+0x8c>
 800883c:	f1c6 0601 	rsb	r6, r6, #1
 8008840:	f8ca 6000 	str.w	r6, [sl]
 8008844:	f8da 3000 	ldr.w	r3, [sl]
 8008848:	4499      	add	r9, r3
 800884a:	2200      	movs	r2, #0
 800884c:	2300      	movs	r3, #0
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f7f8 f951 	bl	8000af8 <__aeabi_dcmpeq>
 8008856:	b108      	cbz	r0, 800885c <__cvt+0xa4>
 8008858:	f8cd 900c 	str.w	r9, [sp, #12]
 800885c:	2230      	movs	r2, #48	; 0x30
 800885e:	9b03      	ldr	r3, [sp, #12]
 8008860:	454b      	cmp	r3, r9
 8008862:	d307      	bcc.n	8008874 <__cvt+0xbc>
 8008864:	9b03      	ldr	r3, [sp, #12]
 8008866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008868:	1bdb      	subs	r3, r3, r7
 800886a:	4638      	mov	r0, r7
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	b004      	add	sp, #16
 8008870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008874:	1c59      	adds	r1, r3, #1
 8008876:	9103      	str	r1, [sp, #12]
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	e7f0      	b.n	800885e <__cvt+0xa6>

0800887c <__exponent>:
 800887c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800887e:	4603      	mov	r3, r0
 8008880:	2900      	cmp	r1, #0
 8008882:	bfb8      	it	lt
 8008884:	4249      	neglt	r1, r1
 8008886:	f803 2b02 	strb.w	r2, [r3], #2
 800888a:	bfb4      	ite	lt
 800888c:	222d      	movlt	r2, #45	; 0x2d
 800888e:	222b      	movge	r2, #43	; 0x2b
 8008890:	2909      	cmp	r1, #9
 8008892:	7042      	strb	r2, [r0, #1]
 8008894:	dd2a      	ble.n	80088ec <__exponent+0x70>
 8008896:	f10d 0407 	add.w	r4, sp, #7
 800889a:	46a4      	mov	ip, r4
 800889c:	270a      	movs	r7, #10
 800889e:	46a6      	mov	lr, r4
 80088a0:	460a      	mov	r2, r1
 80088a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80088a6:	fb07 1516 	mls	r5, r7, r6, r1
 80088aa:	3530      	adds	r5, #48	; 0x30
 80088ac:	2a63      	cmp	r2, #99	; 0x63
 80088ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80088b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80088b6:	4631      	mov	r1, r6
 80088b8:	dcf1      	bgt.n	800889e <__exponent+0x22>
 80088ba:	3130      	adds	r1, #48	; 0x30
 80088bc:	f1ae 0502 	sub.w	r5, lr, #2
 80088c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80088c4:	1c44      	adds	r4, r0, #1
 80088c6:	4629      	mov	r1, r5
 80088c8:	4561      	cmp	r1, ip
 80088ca:	d30a      	bcc.n	80088e2 <__exponent+0x66>
 80088cc:	f10d 0209 	add.w	r2, sp, #9
 80088d0:	eba2 020e 	sub.w	r2, r2, lr
 80088d4:	4565      	cmp	r5, ip
 80088d6:	bf88      	it	hi
 80088d8:	2200      	movhi	r2, #0
 80088da:	4413      	add	r3, r2
 80088dc:	1a18      	subs	r0, r3, r0
 80088de:	b003      	add	sp, #12
 80088e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80088ea:	e7ed      	b.n	80088c8 <__exponent+0x4c>
 80088ec:	2330      	movs	r3, #48	; 0x30
 80088ee:	3130      	adds	r1, #48	; 0x30
 80088f0:	7083      	strb	r3, [r0, #2]
 80088f2:	70c1      	strb	r1, [r0, #3]
 80088f4:	1d03      	adds	r3, r0, #4
 80088f6:	e7f1      	b.n	80088dc <__exponent+0x60>

080088f8 <_printf_float>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	ed2d 8b02 	vpush	{d8}
 8008900:	b08d      	sub	sp, #52	; 0x34
 8008902:	460c      	mov	r4, r1
 8008904:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008908:	4616      	mov	r6, r2
 800890a:	461f      	mov	r7, r3
 800890c:	4605      	mov	r5, r0
 800890e:	f001 fc2d 	bl	800a16c <_localeconv_r>
 8008912:	f8d0 a000 	ldr.w	sl, [r0]
 8008916:	4650      	mov	r0, sl
 8008918:	f7f7 fc6c 	bl	80001f4 <strlen>
 800891c:	2300      	movs	r3, #0
 800891e:	930a      	str	r3, [sp, #40]	; 0x28
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	9305      	str	r3, [sp, #20]
 8008924:	f8d8 3000 	ldr.w	r3, [r8]
 8008928:	f894 b018 	ldrb.w	fp, [r4, #24]
 800892c:	3307      	adds	r3, #7
 800892e:	f023 0307 	bic.w	r3, r3, #7
 8008932:	f103 0208 	add.w	r2, r3, #8
 8008936:	f8c8 2000 	str.w	r2, [r8]
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008942:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008946:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800894a:	9307      	str	r3, [sp, #28]
 800894c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008950:	ee08 0a10 	vmov	s16, r0
 8008954:	4b9f      	ldr	r3, [pc, #636]	; (8008bd4 <_printf_float+0x2dc>)
 8008956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800895a:	f04f 32ff 	mov.w	r2, #4294967295
 800895e:	f7f8 f8fd 	bl	8000b5c <__aeabi_dcmpun>
 8008962:	bb88      	cbnz	r0, 80089c8 <_printf_float+0xd0>
 8008964:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008968:	4b9a      	ldr	r3, [pc, #616]	; (8008bd4 <_printf_float+0x2dc>)
 800896a:	f04f 32ff 	mov.w	r2, #4294967295
 800896e:	f7f8 f8d7 	bl	8000b20 <__aeabi_dcmple>
 8008972:	bb48      	cbnz	r0, 80089c8 <_printf_float+0xd0>
 8008974:	2200      	movs	r2, #0
 8008976:	2300      	movs	r3, #0
 8008978:	4640      	mov	r0, r8
 800897a:	4649      	mov	r1, r9
 800897c:	f7f8 f8c6 	bl	8000b0c <__aeabi_dcmplt>
 8008980:	b110      	cbz	r0, 8008988 <_printf_float+0x90>
 8008982:	232d      	movs	r3, #45	; 0x2d
 8008984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008988:	4b93      	ldr	r3, [pc, #588]	; (8008bd8 <_printf_float+0x2e0>)
 800898a:	4894      	ldr	r0, [pc, #592]	; (8008bdc <_printf_float+0x2e4>)
 800898c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008990:	bf94      	ite	ls
 8008992:	4698      	movls	r8, r3
 8008994:	4680      	movhi	r8, r0
 8008996:	2303      	movs	r3, #3
 8008998:	6123      	str	r3, [r4, #16]
 800899a:	9b05      	ldr	r3, [sp, #20]
 800899c:	f023 0204 	bic.w	r2, r3, #4
 80089a0:	6022      	str	r2, [r4, #0]
 80089a2:	f04f 0900 	mov.w	r9, #0
 80089a6:	9700      	str	r7, [sp, #0]
 80089a8:	4633      	mov	r3, r6
 80089aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80089ac:	4621      	mov	r1, r4
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 f9d8 	bl	8008d64 <_printf_common>
 80089b4:	3001      	adds	r0, #1
 80089b6:	f040 8090 	bne.w	8008ada <_printf_float+0x1e2>
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295
 80089be:	b00d      	add	sp, #52	; 0x34
 80089c0:	ecbd 8b02 	vpop	{d8}
 80089c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c8:	4642      	mov	r2, r8
 80089ca:	464b      	mov	r3, r9
 80089cc:	4640      	mov	r0, r8
 80089ce:	4649      	mov	r1, r9
 80089d0:	f7f8 f8c4 	bl	8000b5c <__aeabi_dcmpun>
 80089d4:	b140      	cbz	r0, 80089e8 <_printf_float+0xf0>
 80089d6:	464b      	mov	r3, r9
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bfbc      	itt	lt
 80089dc:	232d      	movlt	r3, #45	; 0x2d
 80089de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089e2:	487f      	ldr	r0, [pc, #508]	; (8008be0 <_printf_float+0x2e8>)
 80089e4:	4b7f      	ldr	r3, [pc, #508]	; (8008be4 <_printf_float+0x2ec>)
 80089e6:	e7d1      	b.n	800898c <_printf_float+0x94>
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80089ee:	9206      	str	r2, [sp, #24]
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	d13f      	bne.n	8008a74 <_printf_float+0x17c>
 80089f4:	2306      	movs	r3, #6
 80089f6:	6063      	str	r3, [r4, #4]
 80089f8:	9b05      	ldr	r3, [sp, #20]
 80089fa:	6861      	ldr	r1, [r4, #4]
 80089fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a00:	2300      	movs	r3, #0
 8008a02:	9303      	str	r3, [sp, #12]
 8008a04:	ab0a      	add	r3, sp, #40	; 0x28
 8008a06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a0a:	ab09      	add	r3, sp, #36	; 0x24
 8008a0c:	ec49 8b10 	vmov	d0, r8, r9
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	6022      	str	r2, [r4, #0]
 8008a14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f7ff fecd 	bl	80087b8 <__cvt>
 8008a1e:	9b06      	ldr	r3, [sp, #24]
 8008a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a22:	2b47      	cmp	r3, #71	; 0x47
 8008a24:	4680      	mov	r8, r0
 8008a26:	d108      	bne.n	8008a3a <_printf_float+0x142>
 8008a28:	1cc8      	adds	r0, r1, #3
 8008a2a:	db02      	blt.n	8008a32 <_printf_float+0x13a>
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	4299      	cmp	r1, r3
 8008a30:	dd41      	ble.n	8008ab6 <_printf_float+0x1be>
 8008a32:	f1ab 0b02 	sub.w	fp, fp, #2
 8008a36:	fa5f fb8b 	uxtb.w	fp, fp
 8008a3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a3e:	d820      	bhi.n	8008a82 <_printf_float+0x18a>
 8008a40:	3901      	subs	r1, #1
 8008a42:	465a      	mov	r2, fp
 8008a44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a48:	9109      	str	r1, [sp, #36]	; 0x24
 8008a4a:	f7ff ff17 	bl	800887c <__exponent>
 8008a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a50:	1813      	adds	r3, r2, r0
 8008a52:	2a01      	cmp	r2, #1
 8008a54:	4681      	mov	r9, r0
 8008a56:	6123      	str	r3, [r4, #16]
 8008a58:	dc02      	bgt.n	8008a60 <_printf_float+0x168>
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	07d2      	lsls	r2, r2, #31
 8008a5e:	d501      	bpl.n	8008a64 <_printf_float+0x16c>
 8008a60:	3301      	adds	r3, #1
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d09c      	beq.n	80089a6 <_printf_float+0xae>
 8008a6c:	232d      	movs	r3, #45	; 0x2d
 8008a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a72:	e798      	b.n	80089a6 <_printf_float+0xae>
 8008a74:	9a06      	ldr	r2, [sp, #24]
 8008a76:	2a47      	cmp	r2, #71	; 0x47
 8008a78:	d1be      	bne.n	80089f8 <_printf_float+0x100>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1bc      	bne.n	80089f8 <_printf_float+0x100>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e7b9      	b.n	80089f6 <_printf_float+0xfe>
 8008a82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a86:	d118      	bne.n	8008aba <_printf_float+0x1c2>
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	6863      	ldr	r3, [r4, #4]
 8008a8c:	dd0b      	ble.n	8008aa6 <_printf_float+0x1ae>
 8008a8e:	6121      	str	r1, [r4, #16]
 8008a90:	b913      	cbnz	r3, 8008a98 <_printf_float+0x1a0>
 8008a92:	6822      	ldr	r2, [r4, #0]
 8008a94:	07d0      	lsls	r0, r2, #31
 8008a96:	d502      	bpl.n	8008a9e <_printf_float+0x1a6>
 8008a98:	3301      	adds	r3, #1
 8008a9a:	440b      	add	r3, r1
 8008a9c:	6123      	str	r3, [r4, #16]
 8008a9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008aa0:	f04f 0900 	mov.w	r9, #0
 8008aa4:	e7de      	b.n	8008a64 <_printf_float+0x16c>
 8008aa6:	b913      	cbnz	r3, 8008aae <_printf_float+0x1b6>
 8008aa8:	6822      	ldr	r2, [r4, #0]
 8008aaa:	07d2      	lsls	r2, r2, #31
 8008aac:	d501      	bpl.n	8008ab2 <_printf_float+0x1ba>
 8008aae:	3302      	adds	r3, #2
 8008ab0:	e7f4      	b.n	8008a9c <_printf_float+0x1a4>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e7f2      	b.n	8008a9c <_printf_float+0x1a4>
 8008ab6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abc:	4299      	cmp	r1, r3
 8008abe:	db05      	blt.n	8008acc <_printf_float+0x1d4>
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	6121      	str	r1, [r4, #16]
 8008ac4:	07d8      	lsls	r0, r3, #31
 8008ac6:	d5ea      	bpl.n	8008a9e <_printf_float+0x1a6>
 8008ac8:	1c4b      	adds	r3, r1, #1
 8008aca:	e7e7      	b.n	8008a9c <_printf_float+0x1a4>
 8008acc:	2900      	cmp	r1, #0
 8008ace:	bfd4      	ite	le
 8008ad0:	f1c1 0202 	rsble	r2, r1, #2
 8008ad4:	2201      	movgt	r2, #1
 8008ad6:	4413      	add	r3, r2
 8008ad8:	e7e0      	b.n	8008a9c <_printf_float+0x1a4>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	055a      	lsls	r2, r3, #21
 8008ade:	d407      	bmi.n	8008af0 <_printf_float+0x1f8>
 8008ae0:	6923      	ldr	r3, [r4, #16]
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	d12c      	bne.n	8008b48 <_printf_float+0x250>
 8008aee:	e764      	b.n	80089ba <_printf_float+0xc2>
 8008af0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008af4:	f240 80e0 	bls.w	8008cb8 <_printf_float+0x3c0>
 8008af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008afc:	2200      	movs	r2, #0
 8008afe:	2300      	movs	r3, #0
 8008b00:	f7f7 fffa 	bl	8000af8 <__aeabi_dcmpeq>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d034      	beq.n	8008b72 <_printf_float+0x27a>
 8008b08:	4a37      	ldr	r2, [pc, #220]	; (8008be8 <_printf_float+0x2f0>)
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4628      	mov	r0, r5
 8008b10:	47b8      	blx	r7
 8008b12:	3001      	adds	r0, #1
 8008b14:	f43f af51 	beq.w	80089ba <_printf_float+0xc2>
 8008b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	db02      	blt.n	8008b26 <_printf_float+0x22e>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	07d8      	lsls	r0, r3, #31
 8008b24:	d510      	bpl.n	8008b48 <_printf_float+0x250>
 8008b26:	ee18 3a10 	vmov	r3, s16
 8008b2a:	4652      	mov	r2, sl
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b8      	blx	r7
 8008b32:	3001      	adds	r0, #1
 8008b34:	f43f af41 	beq.w	80089ba <_printf_float+0xc2>
 8008b38:	f04f 0800 	mov.w	r8, #0
 8008b3c:	f104 091a 	add.w	r9, r4, #26
 8008b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b42:	3b01      	subs	r3, #1
 8008b44:	4543      	cmp	r3, r8
 8008b46:	dc09      	bgt.n	8008b5c <_printf_float+0x264>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	079b      	lsls	r3, r3, #30
 8008b4c:	f100 8105 	bmi.w	8008d5a <_printf_float+0x462>
 8008b50:	68e0      	ldr	r0, [r4, #12]
 8008b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b54:	4298      	cmp	r0, r3
 8008b56:	bfb8      	it	lt
 8008b58:	4618      	movlt	r0, r3
 8008b5a:	e730      	b.n	80089be <_printf_float+0xc6>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	464a      	mov	r2, r9
 8008b60:	4631      	mov	r1, r6
 8008b62:	4628      	mov	r0, r5
 8008b64:	47b8      	blx	r7
 8008b66:	3001      	adds	r0, #1
 8008b68:	f43f af27 	beq.w	80089ba <_printf_float+0xc2>
 8008b6c:	f108 0801 	add.w	r8, r8, #1
 8008b70:	e7e6      	b.n	8008b40 <_printf_float+0x248>
 8008b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dc39      	bgt.n	8008bec <_printf_float+0x2f4>
 8008b78:	4a1b      	ldr	r2, [pc, #108]	; (8008be8 <_printf_float+0x2f0>)
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b8      	blx	r7
 8008b82:	3001      	adds	r0, #1
 8008b84:	f43f af19 	beq.w	80089ba <_printf_float+0xc2>
 8008b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	d102      	bne.n	8008b96 <_printf_float+0x29e>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	07d9      	lsls	r1, r3, #31
 8008b94:	d5d8      	bpl.n	8008b48 <_printf_float+0x250>
 8008b96:	ee18 3a10 	vmov	r3, s16
 8008b9a:	4652      	mov	r2, sl
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	f43f af09 	beq.w	80089ba <_printf_float+0xc2>
 8008ba8:	f04f 0900 	mov.w	r9, #0
 8008bac:	f104 0a1a 	add.w	sl, r4, #26
 8008bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb2:	425b      	negs	r3, r3
 8008bb4:	454b      	cmp	r3, r9
 8008bb6:	dc01      	bgt.n	8008bbc <_printf_float+0x2c4>
 8008bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bba:	e792      	b.n	8008ae2 <_printf_float+0x1ea>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4652      	mov	r2, sl
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	47b8      	blx	r7
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	f43f aef7 	beq.w	80089ba <_printf_float+0xc2>
 8008bcc:	f109 0901 	add.w	r9, r9, #1
 8008bd0:	e7ee      	b.n	8008bb0 <_printf_float+0x2b8>
 8008bd2:	bf00      	nop
 8008bd4:	7fefffff 	.word	0x7fefffff
 8008bd8:	0800cf2c 	.word	0x0800cf2c
 8008bdc:	0800cf30 	.word	0x0800cf30
 8008be0:	0800cf38 	.word	0x0800cf38
 8008be4:	0800cf34 	.word	0x0800cf34
 8008be8:	0800cf3c 	.word	0x0800cf3c
 8008bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	bfa8      	it	ge
 8008bf4:	461a      	movge	r2, r3
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	4691      	mov	r9, r2
 8008bfa:	dc37      	bgt.n	8008c6c <_printf_float+0x374>
 8008bfc:	f04f 0b00 	mov.w	fp, #0
 8008c00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c04:	f104 021a 	add.w	r2, r4, #26
 8008c08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c0a:	9305      	str	r3, [sp, #20]
 8008c0c:	eba3 0309 	sub.w	r3, r3, r9
 8008c10:	455b      	cmp	r3, fp
 8008c12:	dc33      	bgt.n	8008c7c <_printf_float+0x384>
 8008c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	db3b      	blt.n	8008c94 <_printf_float+0x39c>
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	07da      	lsls	r2, r3, #31
 8008c20:	d438      	bmi.n	8008c94 <_printf_float+0x39c>
 8008c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c24:	9a05      	ldr	r2, [sp, #20]
 8008c26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c28:	1a9a      	subs	r2, r3, r2
 8008c2a:	eba3 0901 	sub.w	r9, r3, r1
 8008c2e:	4591      	cmp	r9, r2
 8008c30:	bfa8      	it	ge
 8008c32:	4691      	movge	r9, r2
 8008c34:	f1b9 0f00 	cmp.w	r9, #0
 8008c38:	dc35      	bgt.n	8008ca6 <_printf_float+0x3ae>
 8008c3a:	f04f 0800 	mov.w	r8, #0
 8008c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c42:	f104 0a1a 	add.w	sl, r4, #26
 8008c46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c4a:	1a9b      	subs	r3, r3, r2
 8008c4c:	eba3 0309 	sub.w	r3, r3, r9
 8008c50:	4543      	cmp	r3, r8
 8008c52:	f77f af79 	ble.w	8008b48 <_printf_float+0x250>
 8008c56:	2301      	movs	r3, #1
 8008c58:	4652      	mov	r2, sl
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b8      	blx	r7
 8008c60:	3001      	adds	r0, #1
 8008c62:	f43f aeaa 	beq.w	80089ba <_printf_float+0xc2>
 8008c66:	f108 0801 	add.w	r8, r8, #1
 8008c6a:	e7ec      	b.n	8008c46 <_printf_float+0x34e>
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4642      	mov	r2, r8
 8008c72:	4628      	mov	r0, r5
 8008c74:	47b8      	blx	r7
 8008c76:	3001      	adds	r0, #1
 8008c78:	d1c0      	bne.n	8008bfc <_printf_float+0x304>
 8008c7a:	e69e      	b.n	80089ba <_printf_float+0xc2>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4628      	mov	r0, r5
 8008c82:	9205      	str	r2, [sp, #20]
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	f43f ae97 	beq.w	80089ba <_printf_float+0xc2>
 8008c8c:	9a05      	ldr	r2, [sp, #20]
 8008c8e:	f10b 0b01 	add.w	fp, fp, #1
 8008c92:	e7b9      	b.n	8008c08 <_printf_float+0x310>
 8008c94:	ee18 3a10 	vmov	r3, s16
 8008c98:	4652      	mov	r2, sl
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d1be      	bne.n	8008c22 <_printf_float+0x32a>
 8008ca4:	e689      	b.n	80089ba <_printf_float+0xc2>
 8008ca6:	9a05      	ldr	r2, [sp, #20]
 8008ca8:	464b      	mov	r3, r9
 8008caa:	4442      	add	r2, r8
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d1c1      	bne.n	8008c3a <_printf_float+0x342>
 8008cb6:	e680      	b.n	80089ba <_printf_float+0xc2>
 8008cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cba:	2a01      	cmp	r2, #1
 8008cbc:	dc01      	bgt.n	8008cc2 <_printf_float+0x3ca>
 8008cbe:	07db      	lsls	r3, r3, #31
 8008cc0:	d538      	bpl.n	8008d34 <_printf_float+0x43c>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b8      	blx	r7
 8008ccc:	3001      	adds	r0, #1
 8008cce:	f43f ae74 	beq.w	80089ba <_printf_float+0xc2>
 8008cd2:	ee18 3a10 	vmov	r3, s16
 8008cd6:	4652      	mov	r2, sl
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	f43f ae6b 	beq.w	80089ba <_printf_float+0xc2>
 8008ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2300      	movs	r3, #0
 8008cec:	f7f7 ff04 	bl	8000af8 <__aeabi_dcmpeq>
 8008cf0:	b9d8      	cbnz	r0, 8008d2a <_printf_float+0x432>
 8008cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf4:	f108 0201 	add.w	r2, r8, #1
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	4631      	mov	r1, r6
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	47b8      	blx	r7
 8008d00:	3001      	adds	r0, #1
 8008d02:	d10e      	bne.n	8008d22 <_printf_float+0x42a>
 8008d04:	e659      	b.n	80089ba <_printf_float+0xc2>
 8008d06:	2301      	movs	r3, #1
 8008d08:	4652      	mov	r2, sl
 8008d0a:	4631      	mov	r1, r6
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	47b8      	blx	r7
 8008d10:	3001      	adds	r0, #1
 8008d12:	f43f ae52 	beq.w	80089ba <_printf_float+0xc2>
 8008d16:	f108 0801 	add.w	r8, r8, #1
 8008d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	4543      	cmp	r3, r8
 8008d20:	dcf1      	bgt.n	8008d06 <_printf_float+0x40e>
 8008d22:	464b      	mov	r3, r9
 8008d24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d28:	e6dc      	b.n	8008ae4 <_printf_float+0x1ec>
 8008d2a:	f04f 0800 	mov.w	r8, #0
 8008d2e:	f104 0a1a 	add.w	sl, r4, #26
 8008d32:	e7f2      	b.n	8008d1a <_printf_float+0x422>
 8008d34:	2301      	movs	r3, #1
 8008d36:	4642      	mov	r2, r8
 8008d38:	e7df      	b.n	8008cfa <_printf_float+0x402>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	464a      	mov	r2, r9
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	f43f ae38 	beq.w	80089ba <_printf_float+0xc2>
 8008d4a:	f108 0801 	add.w	r8, r8, #1
 8008d4e:	68e3      	ldr	r3, [r4, #12]
 8008d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d52:	1a5b      	subs	r3, r3, r1
 8008d54:	4543      	cmp	r3, r8
 8008d56:	dcf0      	bgt.n	8008d3a <_printf_float+0x442>
 8008d58:	e6fa      	b.n	8008b50 <_printf_float+0x258>
 8008d5a:	f04f 0800 	mov.w	r8, #0
 8008d5e:	f104 0919 	add.w	r9, r4, #25
 8008d62:	e7f4      	b.n	8008d4e <_printf_float+0x456>

08008d64 <_printf_common>:
 8008d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d68:	4616      	mov	r6, r2
 8008d6a:	4699      	mov	r9, r3
 8008d6c:	688a      	ldr	r2, [r1, #8]
 8008d6e:	690b      	ldr	r3, [r1, #16]
 8008d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d74:	4293      	cmp	r3, r2
 8008d76:	bfb8      	it	lt
 8008d78:	4613      	movlt	r3, r2
 8008d7a:	6033      	str	r3, [r6, #0]
 8008d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d80:	4607      	mov	r7, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	b10a      	cbz	r2, 8008d8a <_printf_common+0x26>
 8008d86:	3301      	adds	r3, #1
 8008d88:	6033      	str	r3, [r6, #0]
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	0699      	lsls	r1, r3, #26
 8008d8e:	bf42      	ittt	mi
 8008d90:	6833      	ldrmi	r3, [r6, #0]
 8008d92:	3302      	addmi	r3, #2
 8008d94:	6033      	strmi	r3, [r6, #0]
 8008d96:	6825      	ldr	r5, [r4, #0]
 8008d98:	f015 0506 	ands.w	r5, r5, #6
 8008d9c:	d106      	bne.n	8008dac <_printf_common+0x48>
 8008d9e:	f104 0a19 	add.w	sl, r4, #25
 8008da2:	68e3      	ldr	r3, [r4, #12]
 8008da4:	6832      	ldr	r2, [r6, #0]
 8008da6:	1a9b      	subs	r3, r3, r2
 8008da8:	42ab      	cmp	r3, r5
 8008daa:	dc26      	bgt.n	8008dfa <_printf_common+0x96>
 8008dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008db0:	1e13      	subs	r3, r2, #0
 8008db2:	6822      	ldr	r2, [r4, #0]
 8008db4:	bf18      	it	ne
 8008db6:	2301      	movne	r3, #1
 8008db8:	0692      	lsls	r2, r2, #26
 8008dba:	d42b      	bmi.n	8008e14 <_printf_common+0xb0>
 8008dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	47c0      	blx	r8
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d01e      	beq.n	8008e08 <_printf_common+0xa4>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	68e5      	ldr	r5, [r4, #12]
 8008dce:	6832      	ldr	r2, [r6, #0]
 8008dd0:	f003 0306 	and.w	r3, r3, #6
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	bf08      	it	eq
 8008dd8:	1aad      	subeq	r5, r5, r2
 8008dda:	68a3      	ldr	r3, [r4, #8]
 8008ddc:	6922      	ldr	r2, [r4, #16]
 8008dde:	bf0c      	ite	eq
 8008de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008de4:	2500      	movne	r5, #0
 8008de6:	4293      	cmp	r3, r2
 8008de8:	bfc4      	itt	gt
 8008dea:	1a9b      	subgt	r3, r3, r2
 8008dec:	18ed      	addgt	r5, r5, r3
 8008dee:	2600      	movs	r6, #0
 8008df0:	341a      	adds	r4, #26
 8008df2:	42b5      	cmp	r5, r6
 8008df4:	d11a      	bne.n	8008e2c <_printf_common+0xc8>
 8008df6:	2000      	movs	r0, #0
 8008df8:	e008      	b.n	8008e0c <_printf_common+0xa8>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4652      	mov	r2, sl
 8008dfe:	4649      	mov	r1, r9
 8008e00:	4638      	mov	r0, r7
 8008e02:	47c0      	blx	r8
 8008e04:	3001      	adds	r0, #1
 8008e06:	d103      	bne.n	8008e10 <_printf_common+0xac>
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e10:	3501      	adds	r5, #1
 8008e12:	e7c6      	b.n	8008da2 <_printf_common+0x3e>
 8008e14:	18e1      	adds	r1, r4, r3
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	2030      	movs	r0, #48	; 0x30
 8008e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e1e:	4422      	add	r2, r4
 8008e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e28:	3302      	adds	r3, #2
 8008e2a:	e7c7      	b.n	8008dbc <_printf_common+0x58>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	4622      	mov	r2, r4
 8008e30:	4649      	mov	r1, r9
 8008e32:	4638      	mov	r0, r7
 8008e34:	47c0      	blx	r8
 8008e36:	3001      	adds	r0, #1
 8008e38:	d0e6      	beq.n	8008e08 <_printf_common+0xa4>
 8008e3a:	3601      	adds	r6, #1
 8008e3c:	e7d9      	b.n	8008df2 <_printf_common+0x8e>
	...

08008e40 <_printf_i>:
 8008e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e44:	7e0f      	ldrb	r7, [r1, #24]
 8008e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e48:	2f78      	cmp	r7, #120	; 0x78
 8008e4a:	4691      	mov	r9, r2
 8008e4c:	4680      	mov	r8, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	469a      	mov	sl, r3
 8008e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e56:	d807      	bhi.n	8008e68 <_printf_i+0x28>
 8008e58:	2f62      	cmp	r7, #98	; 0x62
 8008e5a:	d80a      	bhi.n	8008e72 <_printf_i+0x32>
 8008e5c:	2f00      	cmp	r7, #0
 8008e5e:	f000 80d8 	beq.w	8009012 <_printf_i+0x1d2>
 8008e62:	2f58      	cmp	r7, #88	; 0x58
 8008e64:	f000 80a3 	beq.w	8008fae <_printf_i+0x16e>
 8008e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e70:	e03a      	b.n	8008ee8 <_printf_i+0xa8>
 8008e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e76:	2b15      	cmp	r3, #21
 8008e78:	d8f6      	bhi.n	8008e68 <_printf_i+0x28>
 8008e7a:	a101      	add	r1, pc, #4	; (adr r1, 8008e80 <_printf_i+0x40>)
 8008e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e80:	08008ed9 	.word	0x08008ed9
 8008e84:	08008eed 	.word	0x08008eed
 8008e88:	08008e69 	.word	0x08008e69
 8008e8c:	08008e69 	.word	0x08008e69
 8008e90:	08008e69 	.word	0x08008e69
 8008e94:	08008e69 	.word	0x08008e69
 8008e98:	08008eed 	.word	0x08008eed
 8008e9c:	08008e69 	.word	0x08008e69
 8008ea0:	08008e69 	.word	0x08008e69
 8008ea4:	08008e69 	.word	0x08008e69
 8008ea8:	08008e69 	.word	0x08008e69
 8008eac:	08008ff9 	.word	0x08008ff9
 8008eb0:	08008f1d 	.word	0x08008f1d
 8008eb4:	08008fdb 	.word	0x08008fdb
 8008eb8:	08008e69 	.word	0x08008e69
 8008ebc:	08008e69 	.word	0x08008e69
 8008ec0:	0800901b 	.word	0x0800901b
 8008ec4:	08008e69 	.word	0x08008e69
 8008ec8:	08008f1d 	.word	0x08008f1d
 8008ecc:	08008e69 	.word	0x08008e69
 8008ed0:	08008e69 	.word	0x08008e69
 8008ed4:	08008fe3 	.word	0x08008fe3
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	1d1a      	adds	r2, r3, #4
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	602a      	str	r2, [r5, #0]
 8008ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e0a3      	b.n	8009034 <_printf_i+0x1f4>
 8008eec:	6820      	ldr	r0, [r4, #0]
 8008eee:	6829      	ldr	r1, [r5, #0]
 8008ef0:	0606      	lsls	r6, r0, #24
 8008ef2:	f101 0304 	add.w	r3, r1, #4
 8008ef6:	d50a      	bpl.n	8008f0e <_printf_i+0xce>
 8008ef8:	680e      	ldr	r6, [r1, #0]
 8008efa:	602b      	str	r3, [r5, #0]
 8008efc:	2e00      	cmp	r6, #0
 8008efe:	da03      	bge.n	8008f08 <_printf_i+0xc8>
 8008f00:	232d      	movs	r3, #45	; 0x2d
 8008f02:	4276      	negs	r6, r6
 8008f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f08:	485e      	ldr	r0, [pc, #376]	; (8009084 <_printf_i+0x244>)
 8008f0a:	230a      	movs	r3, #10
 8008f0c:	e019      	b.n	8008f42 <_printf_i+0x102>
 8008f0e:	680e      	ldr	r6, [r1, #0]
 8008f10:	602b      	str	r3, [r5, #0]
 8008f12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f16:	bf18      	it	ne
 8008f18:	b236      	sxthne	r6, r6
 8008f1a:	e7ef      	b.n	8008efc <_printf_i+0xbc>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	6820      	ldr	r0, [r4, #0]
 8008f20:	1d19      	adds	r1, r3, #4
 8008f22:	6029      	str	r1, [r5, #0]
 8008f24:	0601      	lsls	r1, r0, #24
 8008f26:	d501      	bpl.n	8008f2c <_printf_i+0xec>
 8008f28:	681e      	ldr	r6, [r3, #0]
 8008f2a:	e002      	b.n	8008f32 <_printf_i+0xf2>
 8008f2c:	0646      	lsls	r6, r0, #25
 8008f2e:	d5fb      	bpl.n	8008f28 <_printf_i+0xe8>
 8008f30:	881e      	ldrh	r6, [r3, #0]
 8008f32:	4854      	ldr	r0, [pc, #336]	; (8009084 <_printf_i+0x244>)
 8008f34:	2f6f      	cmp	r7, #111	; 0x6f
 8008f36:	bf0c      	ite	eq
 8008f38:	2308      	moveq	r3, #8
 8008f3a:	230a      	movne	r3, #10
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f42:	6865      	ldr	r5, [r4, #4]
 8008f44:	60a5      	str	r5, [r4, #8]
 8008f46:	2d00      	cmp	r5, #0
 8008f48:	bfa2      	ittt	ge
 8008f4a:	6821      	ldrge	r1, [r4, #0]
 8008f4c:	f021 0104 	bicge.w	r1, r1, #4
 8008f50:	6021      	strge	r1, [r4, #0]
 8008f52:	b90e      	cbnz	r6, 8008f58 <_printf_i+0x118>
 8008f54:	2d00      	cmp	r5, #0
 8008f56:	d04d      	beq.n	8008ff4 <_printf_i+0x1b4>
 8008f58:	4615      	mov	r5, r2
 8008f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8008f62:	5dc7      	ldrb	r7, [r0, r7]
 8008f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f68:	4637      	mov	r7, r6
 8008f6a:	42bb      	cmp	r3, r7
 8008f6c:	460e      	mov	r6, r1
 8008f6e:	d9f4      	bls.n	8008f5a <_printf_i+0x11a>
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d10b      	bne.n	8008f8c <_printf_i+0x14c>
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	07de      	lsls	r6, r3, #31
 8008f78:	d508      	bpl.n	8008f8c <_printf_i+0x14c>
 8008f7a:	6923      	ldr	r3, [r4, #16]
 8008f7c:	6861      	ldr	r1, [r4, #4]
 8008f7e:	4299      	cmp	r1, r3
 8008f80:	bfde      	ittt	le
 8008f82:	2330      	movle	r3, #48	; 0x30
 8008f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f8c:	1b52      	subs	r2, r2, r5
 8008f8e:	6122      	str	r2, [r4, #16]
 8008f90:	f8cd a000 	str.w	sl, [sp]
 8008f94:	464b      	mov	r3, r9
 8008f96:	aa03      	add	r2, sp, #12
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4640      	mov	r0, r8
 8008f9c:	f7ff fee2 	bl	8008d64 <_printf_common>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d14c      	bne.n	800903e <_printf_i+0x1fe>
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	b004      	add	sp, #16
 8008faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fae:	4835      	ldr	r0, [pc, #212]	; (8009084 <_printf_i+0x244>)
 8008fb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fb4:	6829      	ldr	r1, [r5, #0]
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fbc:	6029      	str	r1, [r5, #0]
 8008fbe:	061d      	lsls	r5, r3, #24
 8008fc0:	d514      	bpl.n	8008fec <_printf_i+0x1ac>
 8008fc2:	07df      	lsls	r7, r3, #31
 8008fc4:	bf44      	itt	mi
 8008fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8008fca:	6023      	strmi	r3, [r4, #0]
 8008fcc:	b91e      	cbnz	r6, 8008fd6 <_printf_i+0x196>
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	f023 0320 	bic.w	r3, r3, #32
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	2310      	movs	r3, #16
 8008fd8:	e7b0      	b.n	8008f3c <_printf_i+0xfc>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	f043 0320 	orr.w	r3, r3, #32
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	2378      	movs	r3, #120	; 0x78
 8008fe4:	4828      	ldr	r0, [pc, #160]	; (8009088 <_printf_i+0x248>)
 8008fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fea:	e7e3      	b.n	8008fb4 <_printf_i+0x174>
 8008fec:	0659      	lsls	r1, r3, #25
 8008fee:	bf48      	it	mi
 8008ff0:	b2b6      	uxthmi	r6, r6
 8008ff2:	e7e6      	b.n	8008fc2 <_printf_i+0x182>
 8008ff4:	4615      	mov	r5, r2
 8008ff6:	e7bb      	b.n	8008f70 <_printf_i+0x130>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	6826      	ldr	r6, [r4, #0]
 8008ffc:	6961      	ldr	r1, [r4, #20]
 8008ffe:	1d18      	adds	r0, r3, #4
 8009000:	6028      	str	r0, [r5, #0]
 8009002:	0635      	lsls	r5, r6, #24
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	d501      	bpl.n	800900c <_printf_i+0x1cc>
 8009008:	6019      	str	r1, [r3, #0]
 800900a:	e002      	b.n	8009012 <_printf_i+0x1d2>
 800900c:	0670      	lsls	r0, r6, #25
 800900e:	d5fb      	bpl.n	8009008 <_printf_i+0x1c8>
 8009010:	8019      	strh	r1, [r3, #0]
 8009012:	2300      	movs	r3, #0
 8009014:	6123      	str	r3, [r4, #16]
 8009016:	4615      	mov	r5, r2
 8009018:	e7ba      	b.n	8008f90 <_printf_i+0x150>
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	1d1a      	adds	r2, r3, #4
 800901e:	602a      	str	r2, [r5, #0]
 8009020:	681d      	ldr	r5, [r3, #0]
 8009022:	6862      	ldr	r2, [r4, #4]
 8009024:	2100      	movs	r1, #0
 8009026:	4628      	mov	r0, r5
 8009028:	f7f7 f8f2 	bl	8000210 <memchr>
 800902c:	b108      	cbz	r0, 8009032 <_printf_i+0x1f2>
 800902e:	1b40      	subs	r0, r0, r5
 8009030:	6060      	str	r0, [r4, #4]
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	6123      	str	r3, [r4, #16]
 8009036:	2300      	movs	r3, #0
 8009038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800903c:	e7a8      	b.n	8008f90 <_printf_i+0x150>
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	462a      	mov	r2, r5
 8009042:	4649      	mov	r1, r9
 8009044:	4640      	mov	r0, r8
 8009046:	47d0      	blx	sl
 8009048:	3001      	adds	r0, #1
 800904a:	d0ab      	beq.n	8008fa4 <_printf_i+0x164>
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	079b      	lsls	r3, r3, #30
 8009050:	d413      	bmi.n	800907a <_printf_i+0x23a>
 8009052:	68e0      	ldr	r0, [r4, #12]
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	4298      	cmp	r0, r3
 8009058:	bfb8      	it	lt
 800905a:	4618      	movlt	r0, r3
 800905c:	e7a4      	b.n	8008fa8 <_printf_i+0x168>
 800905e:	2301      	movs	r3, #1
 8009060:	4632      	mov	r2, r6
 8009062:	4649      	mov	r1, r9
 8009064:	4640      	mov	r0, r8
 8009066:	47d0      	blx	sl
 8009068:	3001      	adds	r0, #1
 800906a:	d09b      	beq.n	8008fa4 <_printf_i+0x164>
 800906c:	3501      	adds	r5, #1
 800906e:	68e3      	ldr	r3, [r4, #12]
 8009070:	9903      	ldr	r1, [sp, #12]
 8009072:	1a5b      	subs	r3, r3, r1
 8009074:	42ab      	cmp	r3, r5
 8009076:	dcf2      	bgt.n	800905e <_printf_i+0x21e>
 8009078:	e7eb      	b.n	8009052 <_printf_i+0x212>
 800907a:	2500      	movs	r5, #0
 800907c:	f104 0619 	add.w	r6, r4, #25
 8009080:	e7f5      	b.n	800906e <_printf_i+0x22e>
 8009082:	bf00      	nop
 8009084:	0800cf3e 	.word	0x0800cf3e
 8009088:	0800cf4f 	.word	0x0800cf4f

0800908c <swapfunc>:
 800908c:	2b02      	cmp	r3, #2
 800908e:	b510      	push	{r4, lr}
 8009090:	d00a      	beq.n	80090a8 <swapfunc+0x1c>
 8009092:	0892      	lsrs	r2, r2, #2
 8009094:	3a01      	subs	r2, #1
 8009096:	6803      	ldr	r3, [r0, #0]
 8009098:	680c      	ldr	r4, [r1, #0]
 800909a:	f840 4b04 	str.w	r4, [r0], #4
 800909e:	2a00      	cmp	r2, #0
 80090a0:	f841 3b04 	str.w	r3, [r1], #4
 80090a4:	dcf6      	bgt.n	8009094 <swapfunc+0x8>
 80090a6:	bd10      	pop	{r4, pc}
 80090a8:	4402      	add	r2, r0
 80090aa:	780c      	ldrb	r4, [r1, #0]
 80090ac:	7803      	ldrb	r3, [r0, #0]
 80090ae:	f800 4b01 	strb.w	r4, [r0], #1
 80090b2:	f801 3b01 	strb.w	r3, [r1], #1
 80090b6:	1a13      	subs	r3, r2, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dcf6      	bgt.n	80090aa <swapfunc+0x1e>
 80090bc:	e7f3      	b.n	80090a6 <swapfunc+0x1a>

080090be <med3.constprop.0>:
 80090be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c0:	460c      	mov	r4, r1
 80090c2:	4615      	mov	r5, r2
 80090c4:	4607      	mov	r7, r0
 80090c6:	461e      	mov	r6, r3
 80090c8:	4798      	blx	r3
 80090ca:	2800      	cmp	r0, #0
 80090cc:	4629      	mov	r1, r5
 80090ce:	4620      	mov	r0, r4
 80090d0:	da0a      	bge.n	80090e8 <med3.constprop.0+0x2a>
 80090d2:	47b0      	blx	r6
 80090d4:	2800      	cmp	r0, #0
 80090d6:	db05      	blt.n	80090e4 <med3.constprop.0+0x26>
 80090d8:	4629      	mov	r1, r5
 80090da:	4638      	mov	r0, r7
 80090dc:	47b0      	blx	r6
 80090de:	2800      	cmp	r0, #0
 80090e0:	db0a      	blt.n	80090f8 <med3.constprop.0+0x3a>
 80090e2:	463c      	mov	r4, r7
 80090e4:	4620      	mov	r0, r4
 80090e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090e8:	47b0      	blx	r6
 80090ea:	2800      	cmp	r0, #0
 80090ec:	dcfa      	bgt.n	80090e4 <med3.constprop.0+0x26>
 80090ee:	4629      	mov	r1, r5
 80090f0:	4638      	mov	r0, r7
 80090f2:	47b0      	blx	r6
 80090f4:	2800      	cmp	r0, #0
 80090f6:	dbf4      	blt.n	80090e2 <med3.constprop.0+0x24>
 80090f8:	462c      	mov	r4, r5
 80090fa:	e7f3      	b.n	80090e4 <med3.constprop.0+0x26>

080090fc <qsort>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	469a      	mov	sl, r3
 8009102:	ea40 0302 	orr.w	r3, r0, r2
 8009106:	079b      	lsls	r3, r3, #30
 8009108:	b097      	sub	sp, #92	; 0x5c
 800910a:	4606      	mov	r6, r0
 800910c:	4614      	mov	r4, r2
 800910e:	d11a      	bne.n	8009146 <qsort+0x4a>
 8009110:	f1b2 0804 	subs.w	r8, r2, #4
 8009114:	bf18      	it	ne
 8009116:	f04f 0801 	movne.w	r8, #1
 800911a:	2300      	movs	r3, #0
 800911c:	9302      	str	r3, [sp, #8]
 800911e:	1933      	adds	r3, r6, r4
 8009120:	fb04 f701 	mul.w	r7, r4, r1
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	2906      	cmp	r1, #6
 8009128:	eb06 0307 	add.w	r3, r6, r7
 800912c:	9303      	str	r3, [sp, #12]
 800912e:	d82a      	bhi.n	8009186 <qsort+0x8a>
 8009130:	9b01      	ldr	r3, [sp, #4]
 8009132:	9a03      	ldr	r2, [sp, #12]
 8009134:	4293      	cmp	r3, r2
 8009136:	d310      	bcc.n	800915a <qsort+0x5e>
 8009138:	9b02      	ldr	r3, [sp, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f040 811e 	bne.w	800937c <qsort+0x280>
 8009140:	b017      	add	sp, #92	; 0x5c
 8009142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009146:	f04f 0802 	mov.w	r8, #2
 800914a:	e7e6      	b.n	800911a <qsort+0x1e>
 800914c:	4643      	mov	r3, r8
 800914e:	4622      	mov	r2, r4
 8009150:	4639      	mov	r1, r7
 8009152:	4628      	mov	r0, r5
 8009154:	f7ff ff9a 	bl	800908c <swapfunc>
 8009158:	e00e      	b.n	8009178 <qsort+0x7c>
 800915a:	9d01      	ldr	r5, [sp, #4]
 800915c:	e00d      	b.n	800917a <qsort+0x7e>
 800915e:	1b2f      	subs	r7, r5, r4
 8009160:	4629      	mov	r1, r5
 8009162:	4638      	mov	r0, r7
 8009164:	47d0      	blx	sl
 8009166:	2800      	cmp	r0, #0
 8009168:	dd09      	ble.n	800917e <qsort+0x82>
 800916a:	f1b8 0f00 	cmp.w	r8, #0
 800916e:	d1ed      	bne.n	800914c <qsort+0x50>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	602a      	str	r2, [r5, #0]
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	463d      	mov	r5, r7
 800917a:	42ae      	cmp	r6, r5
 800917c:	d3ef      	bcc.n	800915e <qsort+0x62>
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	4423      	add	r3, r4
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	e7d4      	b.n	8009130 <qsort+0x34>
 8009186:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800918a:	1b3f      	subs	r7, r7, r4
 800918c:	2907      	cmp	r1, #7
 800918e:	fb04 6909 	mla	r9, r4, r9, r6
 8009192:	4437      	add	r7, r6
 8009194:	d022      	beq.n	80091dc <qsort+0xe0>
 8009196:	2928      	cmp	r1, #40	; 0x28
 8009198:	d945      	bls.n	8009226 <qsort+0x12a>
 800919a:	08c9      	lsrs	r1, r1, #3
 800919c:	fb04 f501 	mul.w	r5, r4, r1
 80091a0:	4653      	mov	r3, sl
 80091a2:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80091a6:	1971      	adds	r1, r6, r5
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7ff ff88 	bl	80090be <med3.constprop.0>
 80091ae:	4649      	mov	r1, r9
 80091b0:	eb09 0205 	add.w	r2, r9, r5
 80091b4:	4653      	mov	r3, sl
 80091b6:	4683      	mov	fp, r0
 80091b8:	1b48      	subs	r0, r1, r5
 80091ba:	f7ff ff80 	bl	80090be <med3.constprop.0>
 80091be:	463a      	mov	r2, r7
 80091c0:	4681      	mov	r9, r0
 80091c2:	4653      	mov	r3, sl
 80091c4:	1b79      	subs	r1, r7, r5
 80091c6:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 80091ca:	f7ff ff78 	bl	80090be <med3.constprop.0>
 80091ce:	4602      	mov	r2, r0
 80091d0:	4649      	mov	r1, r9
 80091d2:	4653      	mov	r3, sl
 80091d4:	4658      	mov	r0, fp
 80091d6:	f7ff ff72 	bl	80090be <med3.constprop.0>
 80091da:	4681      	mov	r9, r0
 80091dc:	f1b8 0f00 	cmp.w	r8, #0
 80091e0:	d124      	bne.n	800922c <qsort+0x130>
 80091e2:	6833      	ldr	r3, [r6, #0]
 80091e4:	f8d9 2000 	ldr.w	r2, [r9]
 80091e8:	6032      	str	r2, [r6, #0]
 80091ea:	f8c9 3000 	str.w	r3, [r9]
 80091ee:	eb06 0b04 	add.w	fp, r6, r4
 80091f2:	46b9      	mov	r9, r7
 80091f4:	465d      	mov	r5, fp
 80091f6:	2300      	movs	r3, #0
 80091f8:	45bb      	cmp	fp, r7
 80091fa:	d835      	bhi.n	8009268 <qsort+0x16c>
 80091fc:	4631      	mov	r1, r6
 80091fe:	4658      	mov	r0, fp
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	47d0      	blx	sl
 8009204:	2800      	cmp	r0, #0
 8009206:	9b04      	ldr	r3, [sp, #16]
 8009208:	dc3e      	bgt.n	8009288 <qsort+0x18c>
 800920a:	d10a      	bne.n	8009222 <qsort+0x126>
 800920c:	f1b8 0f00 	cmp.w	r8, #0
 8009210:	d113      	bne.n	800923a <qsort+0x13e>
 8009212:	682b      	ldr	r3, [r5, #0]
 8009214:	f8db 2000 	ldr.w	r2, [fp]
 8009218:	602a      	str	r2, [r5, #0]
 800921a:	f8cb 3000 	str.w	r3, [fp]
 800921e:	4425      	add	r5, r4
 8009220:	2301      	movs	r3, #1
 8009222:	44a3      	add	fp, r4
 8009224:	e7e8      	b.n	80091f8 <qsort+0xfc>
 8009226:	463a      	mov	r2, r7
 8009228:	46b3      	mov	fp, r6
 800922a:	e7d1      	b.n	80091d0 <qsort+0xd4>
 800922c:	4643      	mov	r3, r8
 800922e:	4622      	mov	r2, r4
 8009230:	4649      	mov	r1, r9
 8009232:	4630      	mov	r0, r6
 8009234:	f7ff ff2a 	bl	800908c <swapfunc>
 8009238:	e7d9      	b.n	80091ee <qsort+0xf2>
 800923a:	4643      	mov	r3, r8
 800923c:	4622      	mov	r2, r4
 800923e:	4659      	mov	r1, fp
 8009240:	4628      	mov	r0, r5
 8009242:	f7ff ff23 	bl	800908c <swapfunc>
 8009246:	e7ea      	b.n	800921e <qsort+0x122>
 8009248:	d10b      	bne.n	8009262 <qsort+0x166>
 800924a:	f1b8 0f00 	cmp.w	r8, #0
 800924e:	d114      	bne.n	800927a <qsort+0x17e>
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	f8d9 2000 	ldr.w	r2, [r9]
 8009256:	603a      	str	r2, [r7, #0]
 8009258:	f8c9 3000 	str.w	r3, [r9]
 800925c:	eba9 0904 	sub.w	r9, r9, r4
 8009260:	2301      	movs	r3, #1
 8009262:	9f04      	ldr	r7, [sp, #16]
 8009264:	45bb      	cmp	fp, r7
 8009266:	d90f      	bls.n	8009288 <qsort+0x18c>
 8009268:	2b00      	cmp	r3, #0
 800926a:	d143      	bne.n	80092f4 <qsort+0x1f8>
 800926c:	9b01      	ldr	r3, [sp, #4]
 800926e:	9a03      	ldr	r2, [sp, #12]
 8009270:	4293      	cmp	r3, r2
 8009272:	f4bf af61 	bcs.w	8009138 <qsort+0x3c>
 8009276:	9d01      	ldr	r5, [sp, #4]
 8009278:	e036      	b.n	80092e8 <qsort+0x1ec>
 800927a:	4643      	mov	r3, r8
 800927c:	4622      	mov	r2, r4
 800927e:	4649      	mov	r1, r9
 8009280:	4638      	mov	r0, r7
 8009282:	f7ff ff03 	bl	800908c <swapfunc>
 8009286:	e7e9      	b.n	800925c <qsort+0x160>
 8009288:	4631      	mov	r1, r6
 800928a:	4638      	mov	r0, r7
 800928c:	9305      	str	r3, [sp, #20]
 800928e:	47d0      	blx	sl
 8009290:	1b3b      	subs	r3, r7, r4
 8009292:	2800      	cmp	r0, #0
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	9b05      	ldr	r3, [sp, #20]
 8009298:	dad6      	bge.n	8009248 <qsort+0x14c>
 800929a:	f1b8 0f00 	cmp.w	r8, #0
 800929e:	d006      	beq.n	80092ae <qsort+0x1b2>
 80092a0:	4643      	mov	r3, r8
 80092a2:	4622      	mov	r2, r4
 80092a4:	4639      	mov	r1, r7
 80092a6:	4658      	mov	r0, fp
 80092a8:	f7ff fef0 	bl	800908c <swapfunc>
 80092ac:	e005      	b.n	80092ba <qsort+0x1be>
 80092ae:	f8db 3000 	ldr.w	r3, [fp]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	f8cb 2000 	str.w	r2, [fp]
 80092b8:	603b      	str	r3, [r7, #0]
 80092ba:	9f04      	ldr	r7, [sp, #16]
 80092bc:	e7b0      	b.n	8009220 <qsort+0x124>
 80092be:	4643      	mov	r3, r8
 80092c0:	4622      	mov	r2, r4
 80092c2:	4639      	mov	r1, r7
 80092c4:	4628      	mov	r0, r5
 80092c6:	f7ff fee1 	bl	800908c <swapfunc>
 80092ca:	e00c      	b.n	80092e6 <qsort+0x1ea>
 80092cc:	1b2f      	subs	r7, r5, r4
 80092ce:	4629      	mov	r1, r5
 80092d0:	4638      	mov	r0, r7
 80092d2:	47d0      	blx	sl
 80092d4:	2800      	cmp	r0, #0
 80092d6:	dd09      	ble.n	80092ec <qsort+0x1f0>
 80092d8:	f1b8 0f00 	cmp.w	r8, #0
 80092dc:	d1ef      	bne.n	80092be <qsort+0x1c2>
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	602a      	str	r2, [r5, #0]
 80092e4:	603b      	str	r3, [r7, #0]
 80092e6:	463d      	mov	r5, r7
 80092e8:	42ae      	cmp	r6, r5
 80092ea:	d3ef      	bcc.n	80092cc <qsort+0x1d0>
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	4423      	add	r3, r4
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	e7bb      	b.n	800926c <qsort+0x170>
 80092f4:	ebab 0305 	sub.w	r3, fp, r5
 80092f8:	1baa      	subs	r2, r5, r6
 80092fa:	429a      	cmp	r2, r3
 80092fc:	bfa8      	it	ge
 80092fe:	461a      	movge	r2, r3
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	b12a      	cbz	r2, 8009310 <qsort+0x214>
 8009304:	4643      	mov	r3, r8
 8009306:	ebab 0102 	sub.w	r1, fp, r2
 800930a:	4630      	mov	r0, r6
 800930c:	f7ff febe 	bl	800908c <swapfunc>
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	eba3 0209 	sub.w	r2, r3, r9
 8009316:	eba9 0707 	sub.w	r7, r9, r7
 800931a:	1b12      	subs	r2, r2, r4
 800931c:	42ba      	cmp	r2, r7
 800931e:	bf28      	it	cs
 8009320:	463a      	movcs	r2, r7
 8009322:	b12a      	cbz	r2, 8009330 <qsort+0x234>
 8009324:	9903      	ldr	r1, [sp, #12]
 8009326:	4643      	mov	r3, r8
 8009328:	1a89      	subs	r1, r1, r2
 800932a:	4658      	mov	r0, fp
 800932c:	f7ff feae 	bl	800908c <swapfunc>
 8009330:	9d01      	ldr	r5, [sp, #4]
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	42af      	cmp	r7, r5
 8009336:	eba3 0007 	sub.w	r0, r3, r7
 800933a:	d904      	bls.n	8009346 <qsort+0x24a>
 800933c:	4633      	mov	r3, r6
 800933e:	463d      	mov	r5, r7
 8009340:	9f01      	ldr	r7, [sp, #4]
 8009342:	4606      	mov	r6, r0
 8009344:	4618      	mov	r0, r3
 8009346:	42a7      	cmp	r7, r4
 8009348:	d921      	bls.n	800938e <qsort+0x292>
 800934a:	fbb7 f1f4 	udiv	r1, r7, r4
 800934e:	9b02      	ldr	r3, [sp, #8]
 8009350:	2b07      	cmp	r3, #7
 8009352:	d80d      	bhi.n	8009370 <qsort+0x274>
 8009354:	fbb5 f5f4 	udiv	r5, r5, r4
 8009358:	aa16      	add	r2, sp, #88	; 0x58
 800935a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800935e:	f843 6c40 	str.w	r6, [r3, #-64]
 8009362:	f843 5c3c 	str.w	r5, [r3, #-60]
 8009366:	9b02      	ldr	r3, [sp, #8]
 8009368:	3301      	adds	r3, #1
 800936a:	9302      	str	r3, [sp, #8]
 800936c:	4606      	mov	r6, r0
 800936e:	e6d6      	b.n	800911e <qsort+0x22>
 8009370:	4653      	mov	r3, sl
 8009372:	4622      	mov	r2, r4
 8009374:	f7ff fec2 	bl	80090fc <qsort>
 8009378:	42a5      	cmp	r5, r4
 800937a:	d80b      	bhi.n	8009394 <qsort+0x298>
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	aa16      	add	r2, sp, #88	; 0x58
 8009380:	3b01      	subs	r3, #1
 8009382:	9302      	str	r3, [sp, #8]
 8009384:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009388:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800938c:	e7ee      	b.n	800936c <qsort+0x270>
 800938e:	42a5      	cmp	r5, r4
 8009390:	f67f aed2 	bls.w	8009138 <qsort+0x3c>
 8009394:	fbb5 f1f4 	udiv	r1, r5, r4
 8009398:	4630      	mov	r0, r6
 800939a:	e7e7      	b.n	800936c <qsort+0x270>

0800939c <sniprintf>:
 800939c:	b40c      	push	{r2, r3}
 800939e:	b530      	push	{r4, r5, lr}
 80093a0:	4b17      	ldr	r3, [pc, #92]	; (8009400 <sniprintf+0x64>)
 80093a2:	1e0c      	subs	r4, r1, #0
 80093a4:	681d      	ldr	r5, [r3, #0]
 80093a6:	b09d      	sub	sp, #116	; 0x74
 80093a8:	da08      	bge.n	80093bc <sniprintf+0x20>
 80093aa:	238b      	movs	r3, #139	; 0x8b
 80093ac:	602b      	str	r3, [r5, #0]
 80093ae:	f04f 30ff 	mov.w	r0, #4294967295
 80093b2:	b01d      	add	sp, #116	; 0x74
 80093b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093b8:	b002      	add	sp, #8
 80093ba:	4770      	bx	lr
 80093bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80093c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80093c4:	bf14      	ite	ne
 80093c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80093ca:	4623      	moveq	r3, r4
 80093cc:	9304      	str	r3, [sp, #16]
 80093ce:	9307      	str	r3, [sp, #28]
 80093d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093d4:	9002      	str	r0, [sp, #8]
 80093d6:	9006      	str	r0, [sp, #24]
 80093d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093de:	ab21      	add	r3, sp, #132	; 0x84
 80093e0:	a902      	add	r1, sp, #8
 80093e2:	4628      	mov	r0, r5
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	f001 fba3 	bl	800ab30 <_svfiprintf_r>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	bfbc      	itt	lt
 80093ee:	238b      	movlt	r3, #139	; 0x8b
 80093f0:	602b      	strlt	r3, [r5, #0]
 80093f2:	2c00      	cmp	r4, #0
 80093f4:	d0dd      	beq.n	80093b2 <sniprintf+0x16>
 80093f6:	9b02      	ldr	r3, [sp, #8]
 80093f8:	2200      	movs	r2, #0
 80093fa:	701a      	strb	r2, [r3, #0]
 80093fc:	e7d9      	b.n	80093b2 <sniprintf+0x16>
 80093fe:	bf00      	nop
 8009400:	20000050 	.word	0x20000050

08009404 <_vsniprintf_r>:
 8009404:	b530      	push	{r4, r5, lr}
 8009406:	4614      	mov	r4, r2
 8009408:	2c00      	cmp	r4, #0
 800940a:	b09b      	sub	sp, #108	; 0x6c
 800940c:	4605      	mov	r5, r0
 800940e:	461a      	mov	r2, r3
 8009410:	da05      	bge.n	800941e <_vsniprintf_r+0x1a>
 8009412:	238b      	movs	r3, #139	; 0x8b
 8009414:	6003      	str	r3, [r0, #0]
 8009416:	f04f 30ff 	mov.w	r0, #4294967295
 800941a:	b01b      	add	sp, #108	; 0x6c
 800941c:	bd30      	pop	{r4, r5, pc}
 800941e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009422:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009426:	bf14      	ite	ne
 8009428:	f104 33ff 	addne.w	r3, r4, #4294967295
 800942c:	4623      	moveq	r3, r4
 800942e:	9302      	str	r3, [sp, #8]
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009436:	9100      	str	r1, [sp, #0]
 8009438:	9104      	str	r1, [sp, #16]
 800943a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800943e:	4669      	mov	r1, sp
 8009440:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009442:	f001 fb75 	bl	800ab30 <_svfiprintf_r>
 8009446:	1c43      	adds	r3, r0, #1
 8009448:	bfbc      	itt	lt
 800944a:	238b      	movlt	r3, #139	; 0x8b
 800944c:	602b      	strlt	r3, [r5, #0]
 800944e:	2c00      	cmp	r4, #0
 8009450:	d0e3      	beq.n	800941a <_vsniprintf_r+0x16>
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	2200      	movs	r2, #0
 8009456:	701a      	strb	r2, [r3, #0]
 8009458:	e7df      	b.n	800941a <_vsniprintf_r+0x16>
	...

0800945c <vsniprintf>:
 800945c:	b507      	push	{r0, r1, r2, lr}
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	4613      	mov	r3, r2
 8009462:	460a      	mov	r2, r1
 8009464:	4601      	mov	r1, r0
 8009466:	4803      	ldr	r0, [pc, #12]	; (8009474 <vsniprintf+0x18>)
 8009468:	6800      	ldr	r0, [r0, #0]
 800946a:	f7ff ffcb 	bl	8009404 <_vsniprintf_r>
 800946e:	b003      	add	sp, #12
 8009470:	f85d fb04 	ldr.w	pc, [sp], #4
 8009474:	20000050 	.word	0x20000050

08009478 <quorem>:
 8009478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	6903      	ldr	r3, [r0, #16]
 800947e:	690c      	ldr	r4, [r1, #16]
 8009480:	42a3      	cmp	r3, r4
 8009482:	4607      	mov	r7, r0
 8009484:	f2c0 8081 	blt.w	800958a <quorem+0x112>
 8009488:	3c01      	subs	r4, #1
 800948a:	f101 0814 	add.w	r8, r1, #20
 800948e:	f100 0514 	add.w	r5, r0, #20
 8009492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800949c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094a0:	3301      	adds	r3, #1
 80094a2:	429a      	cmp	r2, r3
 80094a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80094b0:	d331      	bcc.n	8009516 <quorem+0x9e>
 80094b2:	f04f 0e00 	mov.w	lr, #0
 80094b6:	4640      	mov	r0, r8
 80094b8:	46ac      	mov	ip, r5
 80094ba:	46f2      	mov	sl, lr
 80094bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80094c0:	b293      	uxth	r3, r2
 80094c2:	fb06 e303 	mla	r3, r6, r3, lr
 80094c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	ebaa 0303 	sub.w	r3, sl, r3
 80094d0:	f8dc a000 	ldr.w	sl, [ip]
 80094d4:	0c12      	lsrs	r2, r2, #16
 80094d6:	fa13 f38a 	uxtah	r3, r3, sl
 80094da:	fb06 e202 	mla	r2, r6, r2, lr
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	9b00      	ldr	r3, [sp, #0]
 80094e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094e6:	b292      	uxth	r2, r2
 80094e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80094ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80094f4:	4581      	cmp	r9, r0
 80094f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094fa:	f84c 3b04 	str.w	r3, [ip], #4
 80094fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009502:	d2db      	bcs.n	80094bc <quorem+0x44>
 8009504:	f855 300b 	ldr.w	r3, [r5, fp]
 8009508:	b92b      	cbnz	r3, 8009516 <quorem+0x9e>
 800950a:	9b01      	ldr	r3, [sp, #4]
 800950c:	3b04      	subs	r3, #4
 800950e:	429d      	cmp	r5, r3
 8009510:	461a      	mov	r2, r3
 8009512:	d32e      	bcc.n	8009572 <quorem+0xfa>
 8009514:	613c      	str	r4, [r7, #16]
 8009516:	4638      	mov	r0, r7
 8009518:	f001 f8b6 	bl	800a688 <__mcmp>
 800951c:	2800      	cmp	r0, #0
 800951e:	db24      	blt.n	800956a <quorem+0xf2>
 8009520:	3601      	adds	r6, #1
 8009522:	4628      	mov	r0, r5
 8009524:	f04f 0c00 	mov.w	ip, #0
 8009528:	f858 2b04 	ldr.w	r2, [r8], #4
 800952c:	f8d0 e000 	ldr.w	lr, [r0]
 8009530:	b293      	uxth	r3, r2
 8009532:	ebac 0303 	sub.w	r3, ip, r3
 8009536:	0c12      	lsrs	r2, r2, #16
 8009538:	fa13 f38e 	uxtah	r3, r3, lr
 800953c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009544:	b29b      	uxth	r3, r3
 8009546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800954a:	45c1      	cmp	r9, r8
 800954c:	f840 3b04 	str.w	r3, [r0], #4
 8009550:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009554:	d2e8      	bcs.n	8009528 <quorem+0xb0>
 8009556:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800955a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800955e:	b922      	cbnz	r2, 800956a <quorem+0xf2>
 8009560:	3b04      	subs	r3, #4
 8009562:	429d      	cmp	r5, r3
 8009564:	461a      	mov	r2, r3
 8009566:	d30a      	bcc.n	800957e <quorem+0x106>
 8009568:	613c      	str	r4, [r7, #16]
 800956a:	4630      	mov	r0, r6
 800956c:	b003      	add	sp, #12
 800956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009572:	6812      	ldr	r2, [r2, #0]
 8009574:	3b04      	subs	r3, #4
 8009576:	2a00      	cmp	r2, #0
 8009578:	d1cc      	bne.n	8009514 <quorem+0x9c>
 800957a:	3c01      	subs	r4, #1
 800957c:	e7c7      	b.n	800950e <quorem+0x96>
 800957e:	6812      	ldr	r2, [r2, #0]
 8009580:	3b04      	subs	r3, #4
 8009582:	2a00      	cmp	r2, #0
 8009584:	d1f0      	bne.n	8009568 <quorem+0xf0>
 8009586:	3c01      	subs	r4, #1
 8009588:	e7eb      	b.n	8009562 <quorem+0xea>
 800958a:	2000      	movs	r0, #0
 800958c:	e7ee      	b.n	800956c <quorem+0xf4>
	...

08009590 <_dtoa_r>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	ed2d 8b04 	vpush	{d8-d9}
 8009598:	ec57 6b10 	vmov	r6, r7, d0
 800959c:	b093      	sub	sp, #76	; 0x4c
 800959e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095a4:	9106      	str	r1, [sp, #24]
 80095a6:	ee10 aa10 	vmov	sl, s0
 80095aa:	4604      	mov	r4, r0
 80095ac:	9209      	str	r2, [sp, #36]	; 0x24
 80095ae:	930c      	str	r3, [sp, #48]	; 0x30
 80095b0:	46bb      	mov	fp, r7
 80095b2:	b975      	cbnz	r5, 80095d2 <_dtoa_r+0x42>
 80095b4:	2010      	movs	r0, #16
 80095b6:	f000 fddd 	bl	800a174 <malloc>
 80095ba:	4602      	mov	r2, r0
 80095bc:	6260      	str	r0, [r4, #36]	; 0x24
 80095be:	b920      	cbnz	r0, 80095ca <_dtoa_r+0x3a>
 80095c0:	4ba7      	ldr	r3, [pc, #668]	; (8009860 <_dtoa_r+0x2d0>)
 80095c2:	21ea      	movs	r1, #234	; 0xea
 80095c4:	48a7      	ldr	r0, [pc, #668]	; (8009864 <_dtoa_r+0x2d4>)
 80095c6:	f001 fbc3 	bl	800ad50 <__assert_func>
 80095ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095ce:	6005      	str	r5, [r0, #0]
 80095d0:	60c5      	str	r5, [r0, #12]
 80095d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095d4:	6819      	ldr	r1, [r3, #0]
 80095d6:	b151      	cbz	r1, 80095ee <_dtoa_r+0x5e>
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	604a      	str	r2, [r1, #4]
 80095dc:	2301      	movs	r3, #1
 80095de:	4093      	lsls	r3, r2
 80095e0:	608b      	str	r3, [r1, #8]
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 fe0e 	bl	800a204 <_Bfree>
 80095e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	1e3b      	subs	r3, r7, #0
 80095f0:	bfaa      	itet	ge
 80095f2:	2300      	movge	r3, #0
 80095f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80095f8:	f8c8 3000 	strge.w	r3, [r8]
 80095fc:	4b9a      	ldr	r3, [pc, #616]	; (8009868 <_dtoa_r+0x2d8>)
 80095fe:	bfbc      	itt	lt
 8009600:	2201      	movlt	r2, #1
 8009602:	f8c8 2000 	strlt.w	r2, [r8]
 8009606:	ea33 030b 	bics.w	r3, r3, fp
 800960a:	d11b      	bne.n	8009644 <_dtoa_r+0xb4>
 800960c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800960e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009618:	4333      	orrs	r3, r6
 800961a:	f000 8592 	beq.w	800a142 <_dtoa_r+0xbb2>
 800961e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009620:	b963      	cbnz	r3, 800963c <_dtoa_r+0xac>
 8009622:	4b92      	ldr	r3, [pc, #584]	; (800986c <_dtoa_r+0x2dc>)
 8009624:	e022      	b.n	800966c <_dtoa_r+0xdc>
 8009626:	4b92      	ldr	r3, [pc, #584]	; (8009870 <_dtoa_r+0x2e0>)
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	3308      	adds	r3, #8
 800962c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	9801      	ldr	r0, [sp, #4]
 8009632:	b013      	add	sp, #76	; 0x4c
 8009634:	ecbd 8b04 	vpop	{d8-d9}
 8009638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963c:	4b8b      	ldr	r3, [pc, #556]	; (800986c <_dtoa_r+0x2dc>)
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	3303      	adds	r3, #3
 8009642:	e7f3      	b.n	800962c <_dtoa_r+0x9c>
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	4650      	mov	r0, sl
 800964a:	4659      	mov	r1, fp
 800964c:	f7f7 fa54 	bl	8000af8 <__aeabi_dcmpeq>
 8009650:	ec4b ab19 	vmov	d9, sl, fp
 8009654:	4680      	mov	r8, r0
 8009656:	b158      	cbz	r0, 8009670 <_dtoa_r+0xe0>
 8009658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800965a:	2301      	movs	r3, #1
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 856b 	beq.w	800a13c <_dtoa_r+0xbac>
 8009666:	4883      	ldr	r0, [pc, #524]	; (8009874 <_dtoa_r+0x2e4>)
 8009668:	6018      	str	r0, [r3, #0]
 800966a:	1e43      	subs	r3, r0, #1
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	e7df      	b.n	8009630 <_dtoa_r+0xa0>
 8009670:	ec4b ab10 	vmov	d0, sl, fp
 8009674:	aa10      	add	r2, sp, #64	; 0x40
 8009676:	a911      	add	r1, sp, #68	; 0x44
 8009678:	4620      	mov	r0, r4
 800967a:	f001 f8ab 	bl	800a7d4 <__d2b>
 800967e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009682:	ee08 0a10 	vmov	s16, r0
 8009686:	2d00      	cmp	r5, #0
 8009688:	f000 8084 	beq.w	8009794 <_dtoa_r+0x204>
 800968c:	ee19 3a90 	vmov	r3, s19
 8009690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009694:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009698:	4656      	mov	r6, sl
 800969a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800969e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80096a6:	4b74      	ldr	r3, [pc, #464]	; (8009878 <_dtoa_r+0x2e8>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	4630      	mov	r0, r6
 80096ac:	4639      	mov	r1, r7
 80096ae:	f7f6 fe03 	bl	80002b8 <__aeabi_dsub>
 80096b2:	a365      	add	r3, pc, #404	; (adr r3, 8009848 <_dtoa_r+0x2b8>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	f7f6 ffb6 	bl	8000628 <__aeabi_dmul>
 80096bc:	a364      	add	r3, pc, #400	; (adr r3, 8009850 <_dtoa_r+0x2c0>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	f7f6 fdfb 	bl	80002bc <__adddf3>
 80096c6:	4606      	mov	r6, r0
 80096c8:	4628      	mov	r0, r5
 80096ca:	460f      	mov	r7, r1
 80096cc:	f7f6 ff42 	bl	8000554 <__aeabi_i2d>
 80096d0:	a361      	add	r3, pc, #388	; (adr r3, 8009858 <_dtoa_r+0x2c8>)
 80096d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d6:	f7f6 ffa7 	bl	8000628 <__aeabi_dmul>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4630      	mov	r0, r6
 80096e0:	4639      	mov	r1, r7
 80096e2:	f7f6 fdeb 	bl	80002bc <__adddf3>
 80096e6:	4606      	mov	r6, r0
 80096e8:	460f      	mov	r7, r1
 80096ea:	f7f7 fa4d 	bl	8000b88 <__aeabi_d2iz>
 80096ee:	2200      	movs	r2, #0
 80096f0:	9000      	str	r0, [sp, #0]
 80096f2:	2300      	movs	r3, #0
 80096f4:	4630      	mov	r0, r6
 80096f6:	4639      	mov	r1, r7
 80096f8:	f7f7 fa08 	bl	8000b0c <__aeabi_dcmplt>
 80096fc:	b150      	cbz	r0, 8009714 <_dtoa_r+0x184>
 80096fe:	9800      	ldr	r0, [sp, #0]
 8009700:	f7f6 ff28 	bl	8000554 <__aeabi_i2d>
 8009704:	4632      	mov	r2, r6
 8009706:	463b      	mov	r3, r7
 8009708:	f7f7 f9f6 	bl	8000af8 <__aeabi_dcmpeq>
 800970c:	b910      	cbnz	r0, 8009714 <_dtoa_r+0x184>
 800970e:	9b00      	ldr	r3, [sp, #0]
 8009710:	3b01      	subs	r3, #1
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	9b00      	ldr	r3, [sp, #0]
 8009716:	2b16      	cmp	r3, #22
 8009718:	d85a      	bhi.n	80097d0 <_dtoa_r+0x240>
 800971a:	9a00      	ldr	r2, [sp, #0]
 800971c:	4b57      	ldr	r3, [pc, #348]	; (800987c <_dtoa_r+0x2ec>)
 800971e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009726:	ec51 0b19 	vmov	r0, r1, d9
 800972a:	f7f7 f9ef 	bl	8000b0c <__aeabi_dcmplt>
 800972e:	2800      	cmp	r0, #0
 8009730:	d050      	beq.n	80097d4 <_dtoa_r+0x244>
 8009732:	9b00      	ldr	r3, [sp, #0]
 8009734:	3b01      	subs	r3, #1
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	2300      	movs	r3, #0
 800973a:	930b      	str	r3, [sp, #44]	; 0x2c
 800973c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800973e:	1b5d      	subs	r5, r3, r5
 8009740:	1e6b      	subs	r3, r5, #1
 8009742:	9305      	str	r3, [sp, #20]
 8009744:	bf45      	ittet	mi
 8009746:	f1c5 0301 	rsbmi	r3, r5, #1
 800974a:	9304      	strmi	r3, [sp, #16]
 800974c:	2300      	movpl	r3, #0
 800974e:	2300      	movmi	r3, #0
 8009750:	bf4c      	ite	mi
 8009752:	9305      	strmi	r3, [sp, #20]
 8009754:	9304      	strpl	r3, [sp, #16]
 8009756:	9b00      	ldr	r3, [sp, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	db3d      	blt.n	80097d8 <_dtoa_r+0x248>
 800975c:	9b05      	ldr	r3, [sp, #20]
 800975e:	9a00      	ldr	r2, [sp, #0]
 8009760:	920a      	str	r2, [sp, #40]	; 0x28
 8009762:	4413      	add	r3, r2
 8009764:	9305      	str	r3, [sp, #20]
 8009766:	2300      	movs	r3, #0
 8009768:	9307      	str	r3, [sp, #28]
 800976a:	9b06      	ldr	r3, [sp, #24]
 800976c:	2b09      	cmp	r3, #9
 800976e:	f200 8089 	bhi.w	8009884 <_dtoa_r+0x2f4>
 8009772:	2b05      	cmp	r3, #5
 8009774:	bfc4      	itt	gt
 8009776:	3b04      	subgt	r3, #4
 8009778:	9306      	strgt	r3, [sp, #24]
 800977a:	9b06      	ldr	r3, [sp, #24]
 800977c:	f1a3 0302 	sub.w	r3, r3, #2
 8009780:	bfcc      	ite	gt
 8009782:	2500      	movgt	r5, #0
 8009784:	2501      	movle	r5, #1
 8009786:	2b03      	cmp	r3, #3
 8009788:	f200 8087 	bhi.w	800989a <_dtoa_r+0x30a>
 800978c:	e8df f003 	tbb	[pc, r3]
 8009790:	59383a2d 	.word	0x59383a2d
 8009794:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009798:	441d      	add	r5, r3
 800979a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800979e:	2b20      	cmp	r3, #32
 80097a0:	bfc1      	itttt	gt
 80097a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80097aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80097ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80097b2:	bfda      	itte	le
 80097b4:	f1c3 0320 	rsble	r3, r3, #32
 80097b8:	fa06 f003 	lslle.w	r0, r6, r3
 80097bc:	4318      	orrgt	r0, r3
 80097be:	f7f6 feb9 	bl	8000534 <__aeabi_ui2d>
 80097c2:	2301      	movs	r3, #1
 80097c4:	4606      	mov	r6, r0
 80097c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80097ca:	3d01      	subs	r5, #1
 80097cc:	930e      	str	r3, [sp, #56]	; 0x38
 80097ce:	e76a      	b.n	80096a6 <_dtoa_r+0x116>
 80097d0:	2301      	movs	r3, #1
 80097d2:	e7b2      	b.n	800973a <_dtoa_r+0x1aa>
 80097d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80097d6:	e7b1      	b.n	800973c <_dtoa_r+0x1ac>
 80097d8:	9b04      	ldr	r3, [sp, #16]
 80097da:	9a00      	ldr	r2, [sp, #0]
 80097dc:	1a9b      	subs	r3, r3, r2
 80097de:	9304      	str	r3, [sp, #16]
 80097e0:	4253      	negs	r3, r2
 80097e2:	9307      	str	r3, [sp, #28]
 80097e4:	2300      	movs	r3, #0
 80097e6:	930a      	str	r3, [sp, #40]	; 0x28
 80097e8:	e7bf      	b.n	800976a <_dtoa_r+0x1da>
 80097ea:	2300      	movs	r3, #0
 80097ec:	9308      	str	r3, [sp, #32]
 80097ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dc55      	bgt.n	80098a0 <_dtoa_r+0x310>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097fa:	461a      	mov	r2, r3
 80097fc:	9209      	str	r2, [sp, #36]	; 0x24
 80097fe:	e00c      	b.n	800981a <_dtoa_r+0x28a>
 8009800:	2301      	movs	r3, #1
 8009802:	e7f3      	b.n	80097ec <_dtoa_r+0x25c>
 8009804:	2300      	movs	r3, #0
 8009806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009808:	9308      	str	r3, [sp, #32]
 800980a:	9b00      	ldr	r3, [sp, #0]
 800980c:	4413      	add	r3, r2
 800980e:	9302      	str	r3, [sp, #8]
 8009810:	3301      	adds	r3, #1
 8009812:	2b01      	cmp	r3, #1
 8009814:	9303      	str	r3, [sp, #12]
 8009816:	bfb8      	it	lt
 8009818:	2301      	movlt	r3, #1
 800981a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800981c:	2200      	movs	r2, #0
 800981e:	6042      	str	r2, [r0, #4]
 8009820:	2204      	movs	r2, #4
 8009822:	f102 0614 	add.w	r6, r2, #20
 8009826:	429e      	cmp	r6, r3
 8009828:	6841      	ldr	r1, [r0, #4]
 800982a:	d93d      	bls.n	80098a8 <_dtoa_r+0x318>
 800982c:	4620      	mov	r0, r4
 800982e:	f000 fca9 	bl	800a184 <_Balloc>
 8009832:	9001      	str	r0, [sp, #4]
 8009834:	2800      	cmp	r0, #0
 8009836:	d13b      	bne.n	80098b0 <_dtoa_r+0x320>
 8009838:	4b11      	ldr	r3, [pc, #68]	; (8009880 <_dtoa_r+0x2f0>)
 800983a:	4602      	mov	r2, r0
 800983c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009840:	e6c0      	b.n	80095c4 <_dtoa_r+0x34>
 8009842:	2301      	movs	r3, #1
 8009844:	e7df      	b.n	8009806 <_dtoa_r+0x276>
 8009846:	bf00      	nop
 8009848:	636f4361 	.word	0x636f4361
 800984c:	3fd287a7 	.word	0x3fd287a7
 8009850:	8b60c8b3 	.word	0x8b60c8b3
 8009854:	3fc68a28 	.word	0x3fc68a28
 8009858:	509f79fb 	.word	0x509f79fb
 800985c:	3fd34413 	.word	0x3fd34413
 8009860:	0800cf6d 	.word	0x0800cf6d
 8009864:	0800cf84 	.word	0x0800cf84
 8009868:	7ff00000 	.word	0x7ff00000
 800986c:	0800cf69 	.word	0x0800cf69
 8009870:	0800cf60 	.word	0x0800cf60
 8009874:	0800cf3d 	.word	0x0800cf3d
 8009878:	3ff80000 	.word	0x3ff80000
 800987c:	0800d078 	.word	0x0800d078
 8009880:	0800cfdf 	.word	0x0800cfdf
 8009884:	2501      	movs	r5, #1
 8009886:	2300      	movs	r3, #0
 8009888:	9306      	str	r3, [sp, #24]
 800988a:	9508      	str	r5, [sp, #32]
 800988c:	f04f 33ff 	mov.w	r3, #4294967295
 8009890:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009894:	2200      	movs	r2, #0
 8009896:	2312      	movs	r3, #18
 8009898:	e7b0      	b.n	80097fc <_dtoa_r+0x26c>
 800989a:	2301      	movs	r3, #1
 800989c:	9308      	str	r3, [sp, #32]
 800989e:	e7f5      	b.n	800988c <_dtoa_r+0x2fc>
 80098a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098a6:	e7b8      	b.n	800981a <_dtoa_r+0x28a>
 80098a8:	3101      	adds	r1, #1
 80098aa:	6041      	str	r1, [r0, #4]
 80098ac:	0052      	lsls	r2, r2, #1
 80098ae:	e7b8      	b.n	8009822 <_dtoa_r+0x292>
 80098b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b2:	9a01      	ldr	r2, [sp, #4]
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	2b0e      	cmp	r3, #14
 80098ba:	f200 809d 	bhi.w	80099f8 <_dtoa_r+0x468>
 80098be:	2d00      	cmp	r5, #0
 80098c0:	f000 809a 	beq.w	80099f8 <_dtoa_r+0x468>
 80098c4:	9b00      	ldr	r3, [sp, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	dd32      	ble.n	8009930 <_dtoa_r+0x3a0>
 80098ca:	4ab7      	ldr	r2, [pc, #732]	; (8009ba8 <_dtoa_r+0x618>)
 80098cc:	f003 030f 	and.w	r3, r3, #15
 80098d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098d8:	9b00      	ldr	r3, [sp, #0]
 80098da:	05d8      	lsls	r0, r3, #23
 80098dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80098e0:	d516      	bpl.n	8009910 <_dtoa_r+0x380>
 80098e2:	4bb2      	ldr	r3, [pc, #712]	; (8009bac <_dtoa_r+0x61c>)
 80098e4:	ec51 0b19 	vmov	r0, r1, d9
 80098e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098ec:	f7f6 ffc6 	bl	800087c <__aeabi_ddiv>
 80098f0:	f007 070f 	and.w	r7, r7, #15
 80098f4:	4682      	mov	sl, r0
 80098f6:	468b      	mov	fp, r1
 80098f8:	2503      	movs	r5, #3
 80098fa:	4eac      	ldr	r6, [pc, #688]	; (8009bac <_dtoa_r+0x61c>)
 80098fc:	b957      	cbnz	r7, 8009914 <_dtoa_r+0x384>
 80098fe:	4642      	mov	r2, r8
 8009900:	464b      	mov	r3, r9
 8009902:	4650      	mov	r0, sl
 8009904:	4659      	mov	r1, fp
 8009906:	f7f6 ffb9 	bl	800087c <__aeabi_ddiv>
 800990a:	4682      	mov	sl, r0
 800990c:	468b      	mov	fp, r1
 800990e:	e028      	b.n	8009962 <_dtoa_r+0x3d2>
 8009910:	2502      	movs	r5, #2
 8009912:	e7f2      	b.n	80098fa <_dtoa_r+0x36a>
 8009914:	07f9      	lsls	r1, r7, #31
 8009916:	d508      	bpl.n	800992a <_dtoa_r+0x39a>
 8009918:	4640      	mov	r0, r8
 800991a:	4649      	mov	r1, r9
 800991c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009920:	f7f6 fe82 	bl	8000628 <__aeabi_dmul>
 8009924:	3501      	adds	r5, #1
 8009926:	4680      	mov	r8, r0
 8009928:	4689      	mov	r9, r1
 800992a:	107f      	asrs	r7, r7, #1
 800992c:	3608      	adds	r6, #8
 800992e:	e7e5      	b.n	80098fc <_dtoa_r+0x36c>
 8009930:	f000 809b 	beq.w	8009a6a <_dtoa_r+0x4da>
 8009934:	9b00      	ldr	r3, [sp, #0]
 8009936:	4f9d      	ldr	r7, [pc, #628]	; (8009bac <_dtoa_r+0x61c>)
 8009938:	425e      	negs	r6, r3
 800993a:	4b9b      	ldr	r3, [pc, #620]	; (8009ba8 <_dtoa_r+0x618>)
 800993c:	f006 020f 	and.w	r2, r6, #15
 8009940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	ec51 0b19 	vmov	r0, r1, d9
 800994c:	f7f6 fe6c 	bl	8000628 <__aeabi_dmul>
 8009950:	1136      	asrs	r6, r6, #4
 8009952:	4682      	mov	sl, r0
 8009954:	468b      	mov	fp, r1
 8009956:	2300      	movs	r3, #0
 8009958:	2502      	movs	r5, #2
 800995a:	2e00      	cmp	r6, #0
 800995c:	d17a      	bne.n	8009a54 <_dtoa_r+0x4c4>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1d3      	bne.n	800990a <_dtoa_r+0x37a>
 8009962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 8082 	beq.w	8009a6e <_dtoa_r+0x4de>
 800996a:	4b91      	ldr	r3, [pc, #580]	; (8009bb0 <_dtoa_r+0x620>)
 800996c:	2200      	movs	r2, #0
 800996e:	4650      	mov	r0, sl
 8009970:	4659      	mov	r1, fp
 8009972:	f7f7 f8cb 	bl	8000b0c <__aeabi_dcmplt>
 8009976:	2800      	cmp	r0, #0
 8009978:	d079      	beq.n	8009a6e <_dtoa_r+0x4de>
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d076      	beq.n	8009a6e <_dtoa_r+0x4de>
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	dd36      	ble.n	80099f4 <_dtoa_r+0x464>
 8009986:	9b00      	ldr	r3, [sp, #0]
 8009988:	4650      	mov	r0, sl
 800998a:	4659      	mov	r1, fp
 800998c:	1e5f      	subs	r7, r3, #1
 800998e:	2200      	movs	r2, #0
 8009990:	4b88      	ldr	r3, [pc, #544]	; (8009bb4 <_dtoa_r+0x624>)
 8009992:	f7f6 fe49 	bl	8000628 <__aeabi_dmul>
 8009996:	9e02      	ldr	r6, [sp, #8]
 8009998:	4682      	mov	sl, r0
 800999a:	468b      	mov	fp, r1
 800999c:	3501      	adds	r5, #1
 800999e:	4628      	mov	r0, r5
 80099a0:	f7f6 fdd8 	bl	8000554 <__aeabi_i2d>
 80099a4:	4652      	mov	r2, sl
 80099a6:	465b      	mov	r3, fp
 80099a8:	f7f6 fe3e 	bl	8000628 <__aeabi_dmul>
 80099ac:	4b82      	ldr	r3, [pc, #520]	; (8009bb8 <_dtoa_r+0x628>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	f7f6 fc84 	bl	80002bc <__adddf3>
 80099b4:	46d0      	mov	r8, sl
 80099b6:	46d9      	mov	r9, fp
 80099b8:	4682      	mov	sl, r0
 80099ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80099be:	2e00      	cmp	r6, #0
 80099c0:	d158      	bne.n	8009a74 <_dtoa_r+0x4e4>
 80099c2:	4b7e      	ldr	r3, [pc, #504]	; (8009bbc <_dtoa_r+0x62c>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	4640      	mov	r0, r8
 80099c8:	4649      	mov	r1, r9
 80099ca:	f7f6 fc75 	bl	80002b8 <__aeabi_dsub>
 80099ce:	4652      	mov	r2, sl
 80099d0:	465b      	mov	r3, fp
 80099d2:	4680      	mov	r8, r0
 80099d4:	4689      	mov	r9, r1
 80099d6:	f7f7 f8b7 	bl	8000b48 <__aeabi_dcmpgt>
 80099da:	2800      	cmp	r0, #0
 80099dc:	f040 8295 	bne.w	8009f0a <_dtoa_r+0x97a>
 80099e0:	4652      	mov	r2, sl
 80099e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80099e6:	4640      	mov	r0, r8
 80099e8:	4649      	mov	r1, r9
 80099ea:	f7f7 f88f 	bl	8000b0c <__aeabi_dcmplt>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f040 8289 	bne.w	8009f06 <_dtoa_r+0x976>
 80099f4:	ec5b ab19 	vmov	sl, fp, d9
 80099f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f2c0 8148 	blt.w	8009c90 <_dtoa_r+0x700>
 8009a00:	9a00      	ldr	r2, [sp, #0]
 8009a02:	2a0e      	cmp	r2, #14
 8009a04:	f300 8144 	bgt.w	8009c90 <_dtoa_r+0x700>
 8009a08:	4b67      	ldr	r3, [pc, #412]	; (8009ba8 <_dtoa_r+0x618>)
 8009a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f280 80d5 	bge.w	8009bc4 <_dtoa_r+0x634>
 8009a1a:	9b03      	ldr	r3, [sp, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f300 80d1 	bgt.w	8009bc4 <_dtoa_r+0x634>
 8009a22:	f040 826f 	bne.w	8009f04 <_dtoa_r+0x974>
 8009a26:	4b65      	ldr	r3, [pc, #404]	; (8009bbc <_dtoa_r+0x62c>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	f7f6 fdfb 	bl	8000628 <__aeabi_dmul>
 8009a32:	4652      	mov	r2, sl
 8009a34:	465b      	mov	r3, fp
 8009a36:	f7f7 f87d 	bl	8000b34 <__aeabi_dcmpge>
 8009a3a:	9e03      	ldr	r6, [sp, #12]
 8009a3c:	4637      	mov	r7, r6
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f040 8245 	bne.w	8009ece <_dtoa_r+0x93e>
 8009a44:	9d01      	ldr	r5, [sp, #4]
 8009a46:	2331      	movs	r3, #49	; 0x31
 8009a48:	f805 3b01 	strb.w	r3, [r5], #1
 8009a4c:	9b00      	ldr	r3, [sp, #0]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	e240      	b.n	8009ed6 <_dtoa_r+0x946>
 8009a54:	07f2      	lsls	r2, r6, #31
 8009a56:	d505      	bpl.n	8009a64 <_dtoa_r+0x4d4>
 8009a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a5c:	f7f6 fde4 	bl	8000628 <__aeabi_dmul>
 8009a60:	3501      	adds	r5, #1
 8009a62:	2301      	movs	r3, #1
 8009a64:	1076      	asrs	r6, r6, #1
 8009a66:	3708      	adds	r7, #8
 8009a68:	e777      	b.n	800995a <_dtoa_r+0x3ca>
 8009a6a:	2502      	movs	r5, #2
 8009a6c:	e779      	b.n	8009962 <_dtoa_r+0x3d2>
 8009a6e:	9f00      	ldr	r7, [sp, #0]
 8009a70:	9e03      	ldr	r6, [sp, #12]
 8009a72:	e794      	b.n	800999e <_dtoa_r+0x40e>
 8009a74:	9901      	ldr	r1, [sp, #4]
 8009a76:	4b4c      	ldr	r3, [pc, #304]	; (8009ba8 <_dtoa_r+0x618>)
 8009a78:	4431      	add	r1, r6
 8009a7a:	910d      	str	r1, [sp, #52]	; 0x34
 8009a7c:	9908      	ldr	r1, [sp, #32]
 8009a7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a86:	2900      	cmp	r1, #0
 8009a88:	d043      	beq.n	8009b12 <_dtoa_r+0x582>
 8009a8a:	494d      	ldr	r1, [pc, #308]	; (8009bc0 <_dtoa_r+0x630>)
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f7f6 fef5 	bl	800087c <__aeabi_ddiv>
 8009a92:	4652      	mov	r2, sl
 8009a94:	465b      	mov	r3, fp
 8009a96:	f7f6 fc0f 	bl	80002b8 <__aeabi_dsub>
 8009a9a:	9d01      	ldr	r5, [sp, #4]
 8009a9c:	4682      	mov	sl, r0
 8009a9e:	468b      	mov	fp, r1
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	f7f7 f870 	bl	8000b88 <__aeabi_d2iz>
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	f7f6 fd53 	bl	8000554 <__aeabi_i2d>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	f7f6 fbff 	bl	80002b8 <__aeabi_dsub>
 8009aba:	3630      	adds	r6, #48	; 0x30
 8009abc:	f805 6b01 	strb.w	r6, [r5], #1
 8009ac0:	4652      	mov	r2, sl
 8009ac2:	465b      	mov	r3, fp
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	4689      	mov	r9, r1
 8009ac8:	f7f7 f820 	bl	8000b0c <__aeabi_dcmplt>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d163      	bne.n	8009b98 <_dtoa_r+0x608>
 8009ad0:	4642      	mov	r2, r8
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	4936      	ldr	r1, [pc, #216]	; (8009bb0 <_dtoa_r+0x620>)
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	f7f6 fbee 	bl	80002b8 <__aeabi_dsub>
 8009adc:	4652      	mov	r2, sl
 8009ade:	465b      	mov	r3, fp
 8009ae0:	f7f7 f814 	bl	8000b0c <__aeabi_dcmplt>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	f040 80b5 	bne.w	8009c54 <_dtoa_r+0x6c4>
 8009aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009aec:	429d      	cmp	r5, r3
 8009aee:	d081      	beq.n	80099f4 <_dtoa_r+0x464>
 8009af0:	4b30      	ldr	r3, [pc, #192]	; (8009bb4 <_dtoa_r+0x624>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	4650      	mov	r0, sl
 8009af6:	4659      	mov	r1, fp
 8009af8:	f7f6 fd96 	bl	8000628 <__aeabi_dmul>
 8009afc:	4b2d      	ldr	r3, [pc, #180]	; (8009bb4 <_dtoa_r+0x624>)
 8009afe:	4682      	mov	sl, r0
 8009b00:	468b      	mov	fp, r1
 8009b02:	4640      	mov	r0, r8
 8009b04:	4649      	mov	r1, r9
 8009b06:	2200      	movs	r2, #0
 8009b08:	f7f6 fd8e 	bl	8000628 <__aeabi_dmul>
 8009b0c:	4680      	mov	r8, r0
 8009b0e:	4689      	mov	r9, r1
 8009b10:	e7c6      	b.n	8009aa0 <_dtoa_r+0x510>
 8009b12:	4650      	mov	r0, sl
 8009b14:	4659      	mov	r1, fp
 8009b16:	f7f6 fd87 	bl	8000628 <__aeabi_dmul>
 8009b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b1c:	9d01      	ldr	r5, [sp, #4]
 8009b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b20:	4682      	mov	sl, r0
 8009b22:	468b      	mov	fp, r1
 8009b24:	4649      	mov	r1, r9
 8009b26:	4640      	mov	r0, r8
 8009b28:	f7f7 f82e 	bl	8000b88 <__aeabi_d2iz>
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	f7f6 fd11 	bl	8000554 <__aeabi_i2d>
 8009b32:	3630      	adds	r6, #48	; 0x30
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4640      	mov	r0, r8
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	f7f6 fbbc 	bl	80002b8 <__aeabi_dsub>
 8009b40:	f805 6b01 	strb.w	r6, [r5], #1
 8009b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b46:	429d      	cmp	r5, r3
 8009b48:	4680      	mov	r8, r0
 8009b4a:	4689      	mov	r9, r1
 8009b4c:	f04f 0200 	mov.w	r2, #0
 8009b50:	d124      	bne.n	8009b9c <_dtoa_r+0x60c>
 8009b52:	4b1b      	ldr	r3, [pc, #108]	; (8009bc0 <_dtoa_r+0x630>)
 8009b54:	4650      	mov	r0, sl
 8009b56:	4659      	mov	r1, fp
 8009b58:	f7f6 fbb0 	bl	80002bc <__adddf3>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4640      	mov	r0, r8
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7f6 fff0 	bl	8000b48 <__aeabi_dcmpgt>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d173      	bne.n	8009c54 <_dtoa_r+0x6c4>
 8009b6c:	4652      	mov	r2, sl
 8009b6e:	465b      	mov	r3, fp
 8009b70:	4913      	ldr	r1, [pc, #76]	; (8009bc0 <_dtoa_r+0x630>)
 8009b72:	2000      	movs	r0, #0
 8009b74:	f7f6 fba0 	bl	80002b8 <__aeabi_dsub>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	4649      	mov	r1, r9
 8009b80:	f7f6 ffc4 	bl	8000b0c <__aeabi_dcmplt>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	f43f af35 	beq.w	80099f4 <_dtoa_r+0x464>
 8009b8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b8c:	1e6b      	subs	r3, r5, #1
 8009b8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b94:	2b30      	cmp	r3, #48	; 0x30
 8009b96:	d0f8      	beq.n	8009b8a <_dtoa_r+0x5fa>
 8009b98:	9700      	str	r7, [sp, #0]
 8009b9a:	e049      	b.n	8009c30 <_dtoa_r+0x6a0>
 8009b9c:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <_dtoa_r+0x624>)
 8009b9e:	f7f6 fd43 	bl	8000628 <__aeabi_dmul>
 8009ba2:	4680      	mov	r8, r0
 8009ba4:	4689      	mov	r9, r1
 8009ba6:	e7bd      	b.n	8009b24 <_dtoa_r+0x594>
 8009ba8:	0800d078 	.word	0x0800d078
 8009bac:	0800d050 	.word	0x0800d050
 8009bb0:	3ff00000 	.word	0x3ff00000
 8009bb4:	40240000 	.word	0x40240000
 8009bb8:	401c0000 	.word	0x401c0000
 8009bbc:	40140000 	.word	0x40140000
 8009bc0:	3fe00000 	.word	0x3fe00000
 8009bc4:	9d01      	ldr	r5, [sp, #4]
 8009bc6:	4656      	mov	r6, sl
 8009bc8:	465f      	mov	r7, fp
 8009bca:	4642      	mov	r2, r8
 8009bcc:	464b      	mov	r3, r9
 8009bce:	4630      	mov	r0, r6
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	f7f6 fe53 	bl	800087c <__aeabi_ddiv>
 8009bd6:	f7f6 ffd7 	bl	8000b88 <__aeabi_d2iz>
 8009bda:	4682      	mov	sl, r0
 8009bdc:	f7f6 fcba 	bl	8000554 <__aeabi_i2d>
 8009be0:	4642      	mov	r2, r8
 8009be2:	464b      	mov	r3, r9
 8009be4:	f7f6 fd20 	bl	8000628 <__aeabi_dmul>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4630      	mov	r0, r6
 8009bee:	4639      	mov	r1, r7
 8009bf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009bf4:	f7f6 fb60 	bl	80002b8 <__aeabi_dsub>
 8009bf8:	f805 6b01 	strb.w	r6, [r5], #1
 8009bfc:	9e01      	ldr	r6, [sp, #4]
 8009bfe:	9f03      	ldr	r7, [sp, #12]
 8009c00:	1bae      	subs	r6, r5, r6
 8009c02:	42b7      	cmp	r7, r6
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	d135      	bne.n	8009c76 <_dtoa_r+0x6e6>
 8009c0a:	f7f6 fb57 	bl	80002bc <__adddf3>
 8009c0e:	4642      	mov	r2, r8
 8009c10:	464b      	mov	r3, r9
 8009c12:	4606      	mov	r6, r0
 8009c14:	460f      	mov	r7, r1
 8009c16:	f7f6 ff97 	bl	8000b48 <__aeabi_dcmpgt>
 8009c1a:	b9d0      	cbnz	r0, 8009c52 <_dtoa_r+0x6c2>
 8009c1c:	4642      	mov	r2, r8
 8009c1e:	464b      	mov	r3, r9
 8009c20:	4630      	mov	r0, r6
 8009c22:	4639      	mov	r1, r7
 8009c24:	f7f6 ff68 	bl	8000af8 <__aeabi_dcmpeq>
 8009c28:	b110      	cbz	r0, 8009c30 <_dtoa_r+0x6a0>
 8009c2a:	f01a 0f01 	tst.w	sl, #1
 8009c2e:	d110      	bne.n	8009c52 <_dtoa_r+0x6c2>
 8009c30:	4620      	mov	r0, r4
 8009c32:	ee18 1a10 	vmov	r1, s16
 8009c36:	f000 fae5 	bl	800a204 <_Bfree>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	9800      	ldr	r0, [sp, #0]
 8009c3e:	702b      	strb	r3, [r5, #0]
 8009c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c42:	3001      	adds	r0, #1
 8009c44:	6018      	str	r0, [r3, #0]
 8009c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f43f acf1 	beq.w	8009630 <_dtoa_r+0xa0>
 8009c4e:	601d      	str	r5, [r3, #0]
 8009c50:	e4ee      	b.n	8009630 <_dtoa_r+0xa0>
 8009c52:	9f00      	ldr	r7, [sp, #0]
 8009c54:	462b      	mov	r3, r5
 8009c56:	461d      	mov	r5, r3
 8009c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c5c:	2a39      	cmp	r2, #57	; 0x39
 8009c5e:	d106      	bne.n	8009c6e <_dtoa_r+0x6de>
 8009c60:	9a01      	ldr	r2, [sp, #4]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d1f7      	bne.n	8009c56 <_dtoa_r+0x6c6>
 8009c66:	9901      	ldr	r1, [sp, #4]
 8009c68:	2230      	movs	r2, #48	; 0x30
 8009c6a:	3701      	adds	r7, #1
 8009c6c:	700a      	strb	r2, [r1, #0]
 8009c6e:	781a      	ldrb	r2, [r3, #0]
 8009c70:	3201      	adds	r2, #1
 8009c72:	701a      	strb	r2, [r3, #0]
 8009c74:	e790      	b.n	8009b98 <_dtoa_r+0x608>
 8009c76:	4ba6      	ldr	r3, [pc, #664]	; (8009f10 <_dtoa_r+0x980>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f7f6 fcd5 	bl	8000628 <__aeabi_dmul>
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2300      	movs	r3, #0
 8009c82:	4606      	mov	r6, r0
 8009c84:	460f      	mov	r7, r1
 8009c86:	f7f6 ff37 	bl	8000af8 <__aeabi_dcmpeq>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d09d      	beq.n	8009bca <_dtoa_r+0x63a>
 8009c8e:	e7cf      	b.n	8009c30 <_dtoa_r+0x6a0>
 8009c90:	9a08      	ldr	r2, [sp, #32]
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	f000 80d7 	beq.w	8009e46 <_dtoa_r+0x8b6>
 8009c98:	9a06      	ldr	r2, [sp, #24]
 8009c9a:	2a01      	cmp	r2, #1
 8009c9c:	f300 80ba 	bgt.w	8009e14 <_dtoa_r+0x884>
 8009ca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	f000 80b2 	beq.w	8009e0c <_dtoa_r+0x87c>
 8009ca8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cac:	9e07      	ldr	r6, [sp, #28]
 8009cae:	9d04      	ldr	r5, [sp, #16]
 8009cb0:	9a04      	ldr	r2, [sp, #16]
 8009cb2:	441a      	add	r2, r3
 8009cb4:	9204      	str	r2, [sp, #16]
 8009cb6:	9a05      	ldr	r2, [sp, #20]
 8009cb8:	2101      	movs	r1, #1
 8009cba:	441a      	add	r2, r3
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	9205      	str	r2, [sp, #20]
 8009cc0:	f000 fb58 	bl	800a374 <__i2b>
 8009cc4:	4607      	mov	r7, r0
 8009cc6:	2d00      	cmp	r5, #0
 8009cc8:	dd0c      	ble.n	8009ce4 <_dtoa_r+0x754>
 8009cca:	9b05      	ldr	r3, [sp, #20]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	dd09      	ble.n	8009ce4 <_dtoa_r+0x754>
 8009cd0:	42ab      	cmp	r3, r5
 8009cd2:	9a04      	ldr	r2, [sp, #16]
 8009cd4:	bfa8      	it	ge
 8009cd6:	462b      	movge	r3, r5
 8009cd8:	1ad2      	subs	r2, r2, r3
 8009cda:	9204      	str	r2, [sp, #16]
 8009cdc:	9a05      	ldr	r2, [sp, #20]
 8009cde:	1aed      	subs	r5, r5, r3
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	9305      	str	r3, [sp, #20]
 8009ce4:	9b07      	ldr	r3, [sp, #28]
 8009ce6:	b31b      	cbz	r3, 8009d30 <_dtoa_r+0x7a0>
 8009ce8:	9b08      	ldr	r3, [sp, #32]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 80af 	beq.w	8009e4e <_dtoa_r+0x8be>
 8009cf0:	2e00      	cmp	r6, #0
 8009cf2:	dd13      	ble.n	8009d1c <_dtoa_r+0x78c>
 8009cf4:	4639      	mov	r1, r7
 8009cf6:	4632      	mov	r2, r6
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 fbfb 	bl	800a4f4 <__pow5mult>
 8009cfe:	ee18 2a10 	vmov	r2, s16
 8009d02:	4601      	mov	r1, r0
 8009d04:	4607      	mov	r7, r0
 8009d06:	4620      	mov	r0, r4
 8009d08:	f000 fb4a 	bl	800a3a0 <__multiply>
 8009d0c:	ee18 1a10 	vmov	r1, s16
 8009d10:	4680      	mov	r8, r0
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 fa76 	bl	800a204 <_Bfree>
 8009d18:	ee08 8a10 	vmov	s16, r8
 8009d1c:	9b07      	ldr	r3, [sp, #28]
 8009d1e:	1b9a      	subs	r2, r3, r6
 8009d20:	d006      	beq.n	8009d30 <_dtoa_r+0x7a0>
 8009d22:	ee18 1a10 	vmov	r1, s16
 8009d26:	4620      	mov	r0, r4
 8009d28:	f000 fbe4 	bl	800a4f4 <__pow5mult>
 8009d2c:	ee08 0a10 	vmov	s16, r0
 8009d30:	2101      	movs	r1, #1
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 fb1e 	bl	800a374 <__i2b>
 8009d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	f340 8088 	ble.w	8009e52 <_dtoa_r+0x8c2>
 8009d42:	461a      	mov	r2, r3
 8009d44:	4601      	mov	r1, r0
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 fbd4 	bl	800a4f4 <__pow5mult>
 8009d4c:	9b06      	ldr	r3, [sp, #24]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	4606      	mov	r6, r0
 8009d52:	f340 8081 	ble.w	8009e58 <_dtoa_r+0x8c8>
 8009d56:	f04f 0800 	mov.w	r8, #0
 8009d5a:	6933      	ldr	r3, [r6, #16]
 8009d5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d60:	6918      	ldr	r0, [r3, #16]
 8009d62:	f000 fab7 	bl	800a2d4 <__hi0bits>
 8009d66:	f1c0 0020 	rsb	r0, r0, #32
 8009d6a:	9b05      	ldr	r3, [sp, #20]
 8009d6c:	4418      	add	r0, r3
 8009d6e:	f010 001f 	ands.w	r0, r0, #31
 8009d72:	f000 8092 	beq.w	8009e9a <_dtoa_r+0x90a>
 8009d76:	f1c0 0320 	rsb	r3, r0, #32
 8009d7a:	2b04      	cmp	r3, #4
 8009d7c:	f340 808a 	ble.w	8009e94 <_dtoa_r+0x904>
 8009d80:	f1c0 001c 	rsb	r0, r0, #28
 8009d84:	9b04      	ldr	r3, [sp, #16]
 8009d86:	4403      	add	r3, r0
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	9b05      	ldr	r3, [sp, #20]
 8009d8c:	4403      	add	r3, r0
 8009d8e:	4405      	add	r5, r0
 8009d90:	9305      	str	r3, [sp, #20]
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	dd07      	ble.n	8009da8 <_dtoa_r+0x818>
 8009d98:	ee18 1a10 	vmov	r1, s16
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f000 fc02 	bl	800a5a8 <__lshift>
 8009da4:	ee08 0a10 	vmov	s16, r0
 8009da8:	9b05      	ldr	r3, [sp, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	dd05      	ble.n	8009dba <_dtoa_r+0x82a>
 8009dae:	4631      	mov	r1, r6
 8009db0:	461a      	mov	r2, r3
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 fbf8 	bl	800a5a8 <__lshift>
 8009db8:	4606      	mov	r6, r0
 8009dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d06e      	beq.n	8009e9e <_dtoa_r+0x90e>
 8009dc0:	ee18 0a10 	vmov	r0, s16
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	f000 fc5f 	bl	800a688 <__mcmp>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	da67      	bge.n	8009e9e <_dtoa_r+0x90e>
 8009dce:	9b00      	ldr	r3, [sp, #0]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	ee18 1a10 	vmov	r1, s16
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	220a      	movs	r2, #10
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f000 fa33 	bl	800a248 <__multadd>
 8009de2:	9b08      	ldr	r3, [sp, #32]
 8009de4:	ee08 0a10 	vmov	s16, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 81b1 	beq.w	800a150 <_dtoa_r+0xbc0>
 8009dee:	2300      	movs	r3, #0
 8009df0:	4639      	mov	r1, r7
 8009df2:	220a      	movs	r2, #10
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fa27 	bl	800a248 <__multadd>
 8009dfa:	9b02      	ldr	r3, [sp, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	4607      	mov	r7, r0
 8009e00:	f300 808e 	bgt.w	8009f20 <_dtoa_r+0x990>
 8009e04:	9b06      	ldr	r3, [sp, #24]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	dc51      	bgt.n	8009eae <_dtoa_r+0x91e>
 8009e0a:	e089      	b.n	8009f20 <_dtoa_r+0x990>
 8009e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e12:	e74b      	b.n	8009cac <_dtoa_r+0x71c>
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	1e5e      	subs	r6, r3, #1
 8009e18:	9b07      	ldr	r3, [sp, #28]
 8009e1a:	42b3      	cmp	r3, r6
 8009e1c:	bfbf      	itttt	lt
 8009e1e:	9b07      	ldrlt	r3, [sp, #28]
 8009e20:	9607      	strlt	r6, [sp, #28]
 8009e22:	1af2      	sublt	r2, r6, r3
 8009e24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e26:	bfb6      	itet	lt
 8009e28:	189b      	addlt	r3, r3, r2
 8009e2a:	1b9e      	subge	r6, r3, r6
 8009e2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e2e:	9b03      	ldr	r3, [sp, #12]
 8009e30:	bfb8      	it	lt
 8009e32:	2600      	movlt	r6, #0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	bfb7      	itett	lt
 8009e38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009e3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009e40:	1a9d      	sublt	r5, r3, r2
 8009e42:	2300      	movlt	r3, #0
 8009e44:	e734      	b.n	8009cb0 <_dtoa_r+0x720>
 8009e46:	9e07      	ldr	r6, [sp, #28]
 8009e48:	9d04      	ldr	r5, [sp, #16]
 8009e4a:	9f08      	ldr	r7, [sp, #32]
 8009e4c:	e73b      	b.n	8009cc6 <_dtoa_r+0x736>
 8009e4e:	9a07      	ldr	r2, [sp, #28]
 8009e50:	e767      	b.n	8009d22 <_dtoa_r+0x792>
 8009e52:	9b06      	ldr	r3, [sp, #24]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	dc18      	bgt.n	8009e8a <_dtoa_r+0x8fa>
 8009e58:	f1ba 0f00 	cmp.w	sl, #0
 8009e5c:	d115      	bne.n	8009e8a <_dtoa_r+0x8fa>
 8009e5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e62:	b993      	cbnz	r3, 8009e8a <_dtoa_r+0x8fa>
 8009e64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e68:	0d1b      	lsrs	r3, r3, #20
 8009e6a:	051b      	lsls	r3, r3, #20
 8009e6c:	b183      	cbz	r3, 8009e90 <_dtoa_r+0x900>
 8009e6e:	9b04      	ldr	r3, [sp, #16]
 8009e70:	3301      	adds	r3, #1
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	9b05      	ldr	r3, [sp, #20]
 8009e76:	3301      	adds	r3, #1
 8009e78:	9305      	str	r3, [sp, #20]
 8009e7a:	f04f 0801 	mov.w	r8, #1
 8009e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f47f af6a 	bne.w	8009d5a <_dtoa_r+0x7ca>
 8009e86:	2001      	movs	r0, #1
 8009e88:	e76f      	b.n	8009d6a <_dtoa_r+0x7da>
 8009e8a:	f04f 0800 	mov.w	r8, #0
 8009e8e:	e7f6      	b.n	8009e7e <_dtoa_r+0x8ee>
 8009e90:	4698      	mov	r8, r3
 8009e92:	e7f4      	b.n	8009e7e <_dtoa_r+0x8ee>
 8009e94:	f43f af7d 	beq.w	8009d92 <_dtoa_r+0x802>
 8009e98:	4618      	mov	r0, r3
 8009e9a:	301c      	adds	r0, #28
 8009e9c:	e772      	b.n	8009d84 <_dtoa_r+0x7f4>
 8009e9e:	9b03      	ldr	r3, [sp, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	dc37      	bgt.n	8009f14 <_dtoa_r+0x984>
 8009ea4:	9b06      	ldr	r3, [sp, #24]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	dd34      	ble.n	8009f14 <_dtoa_r+0x984>
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	9302      	str	r3, [sp, #8]
 8009eae:	9b02      	ldr	r3, [sp, #8]
 8009eb0:	b96b      	cbnz	r3, 8009ece <_dtoa_r+0x93e>
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	2205      	movs	r2, #5
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f000 f9c6 	bl	800a248 <__multadd>
 8009ebc:	4601      	mov	r1, r0
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	ee18 0a10 	vmov	r0, s16
 8009ec4:	f000 fbe0 	bl	800a688 <__mcmp>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	f73f adbb 	bgt.w	8009a44 <_dtoa_r+0x4b4>
 8009ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed0:	9d01      	ldr	r5, [sp, #4]
 8009ed2:	43db      	mvns	r3, r3
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	f04f 0800 	mov.w	r8, #0
 8009eda:	4631      	mov	r1, r6
 8009edc:	4620      	mov	r0, r4
 8009ede:	f000 f991 	bl	800a204 <_Bfree>
 8009ee2:	2f00      	cmp	r7, #0
 8009ee4:	f43f aea4 	beq.w	8009c30 <_dtoa_r+0x6a0>
 8009ee8:	f1b8 0f00 	cmp.w	r8, #0
 8009eec:	d005      	beq.n	8009efa <_dtoa_r+0x96a>
 8009eee:	45b8      	cmp	r8, r7
 8009ef0:	d003      	beq.n	8009efa <_dtoa_r+0x96a>
 8009ef2:	4641      	mov	r1, r8
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 f985 	bl	800a204 <_Bfree>
 8009efa:	4639      	mov	r1, r7
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 f981 	bl	800a204 <_Bfree>
 8009f02:	e695      	b.n	8009c30 <_dtoa_r+0x6a0>
 8009f04:	2600      	movs	r6, #0
 8009f06:	4637      	mov	r7, r6
 8009f08:	e7e1      	b.n	8009ece <_dtoa_r+0x93e>
 8009f0a:	9700      	str	r7, [sp, #0]
 8009f0c:	4637      	mov	r7, r6
 8009f0e:	e599      	b.n	8009a44 <_dtoa_r+0x4b4>
 8009f10:	40240000 	.word	0x40240000
 8009f14:	9b08      	ldr	r3, [sp, #32]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 80ca 	beq.w	800a0b0 <_dtoa_r+0xb20>
 8009f1c:	9b03      	ldr	r3, [sp, #12]
 8009f1e:	9302      	str	r3, [sp, #8]
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	dd05      	ble.n	8009f30 <_dtoa_r+0x9a0>
 8009f24:	4639      	mov	r1, r7
 8009f26:	462a      	mov	r2, r5
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 fb3d 	bl	800a5a8 <__lshift>
 8009f2e:	4607      	mov	r7, r0
 8009f30:	f1b8 0f00 	cmp.w	r8, #0
 8009f34:	d05b      	beq.n	8009fee <_dtoa_r+0xa5e>
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f000 f923 	bl	800a184 <_Balloc>
 8009f3e:	4605      	mov	r5, r0
 8009f40:	b928      	cbnz	r0, 8009f4e <_dtoa_r+0x9be>
 8009f42:	4b87      	ldr	r3, [pc, #540]	; (800a160 <_dtoa_r+0xbd0>)
 8009f44:	4602      	mov	r2, r0
 8009f46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f4a:	f7ff bb3b 	b.w	80095c4 <_dtoa_r+0x34>
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	3202      	adds	r2, #2
 8009f52:	0092      	lsls	r2, r2, #2
 8009f54:	f107 010c 	add.w	r1, r7, #12
 8009f58:	300c      	adds	r0, #12
 8009f5a:	f7fe fc17 	bl	800878c <memcpy>
 8009f5e:	2201      	movs	r2, #1
 8009f60:	4629      	mov	r1, r5
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 fb20 	bl	800a5a8 <__lshift>
 8009f68:	9b01      	ldr	r3, [sp, #4]
 8009f6a:	f103 0901 	add.w	r9, r3, #1
 8009f6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009f72:	4413      	add	r3, r2
 8009f74:	9305      	str	r3, [sp, #20]
 8009f76:	f00a 0301 	and.w	r3, sl, #1
 8009f7a:	46b8      	mov	r8, r7
 8009f7c:	9304      	str	r3, [sp, #16]
 8009f7e:	4607      	mov	r7, r0
 8009f80:	4631      	mov	r1, r6
 8009f82:	ee18 0a10 	vmov	r0, s16
 8009f86:	f7ff fa77 	bl	8009478 <quorem>
 8009f8a:	4641      	mov	r1, r8
 8009f8c:	9002      	str	r0, [sp, #8]
 8009f8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f92:	ee18 0a10 	vmov	r0, s16
 8009f96:	f000 fb77 	bl	800a688 <__mcmp>
 8009f9a:	463a      	mov	r2, r7
 8009f9c:	9003      	str	r0, [sp, #12]
 8009f9e:	4631      	mov	r1, r6
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 fb8d 	bl	800a6c0 <__mdiff>
 8009fa6:	68c2      	ldr	r2, [r0, #12]
 8009fa8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009fac:	4605      	mov	r5, r0
 8009fae:	bb02      	cbnz	r2, 8009ff2 <_dtoa_r+0xa62>
 8009fb0:	4601      	mov	r1, r0
 8009fb2:	ee18 0a10 	vmov	r0, s16
 8009fb6:	f000 fb67 	bl	800a688 <__mcmp>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	9207      	str	r2, [sp, #28]
 8009fc2:	f000 f91f 	bl	800a204 <_Bfree>
 8009fc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009fca:	ea43 0102 	orr.w	r1, r3, r2
 8009fce:	9b04      	ldr	r3, [sp, #16]
 8009fd0:	430b      	orrs	r3, r1
 8009fd2:	464d      	mov	r5, r9
 8009fd4:	d10f      	bne.n	8009ff6 <_dtoa_r+0xa66>
 8009fd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009fda:	d02a      	beq.n	800a032 <_dtoa_r+0xaa2>
 8009fdc:	9b03      	ldr	r3, [sp, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	dd02      	ble.n	8009fe8 <_dtoa_r+0xa58>
 8009fe2:	9b02      	ldr	r3, [sp, #8]
 8009fe4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009fe8:	f88b a000 	strb.w	sl, [fp]
 8009fec:	e775      	b.n	8009eda <_dtoa_r+0x94a>
 8009fee:	4638      	mov	r0, r7
 8009ff0:	e7ba      	b.n	8009f68 <_dtoa_r+0x9d8>
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	e7e2      	b.n	8009fbc <_dtoa_r+0xa2c>
 8009ff6:	9b03      	ldr	r3, [sp, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	db04      	blt.n	800a006 <_dtoa_r+0xa76>
 8009ffc:	9906      	ldr	r1, [sp, #24]
 8009ffe:	430b      	orrs	r3, r1
 800a000:	9904      	ldr	r1, [sp, #16]
 800a002:	430b      	orrs	r3, r1
 800a004:	d122      	bne.n	800a04c <_dtoa_r+0xabc>
 800a006:	2a00      	cmp	r2, #0
 800a008:	ddee      	ble.n	8009fe8 <_dtoa_r+0xa58>
 800a00a:	ee18 1a10 	vmov	r1, s16
 800a00e:	2201      	movs	r2, #1
 800a010:	4620      	mov	r0, r4
 800a012:	f000 fac9 	bl	800a5a8 <__lshift>
 800a016:	4631      	mov	r1, r6
 800a018:	ee08 0a10 	vmov	s16, r0
 800a01c:	f000 fb34 	bl	800a688 <__mcmp>
 800a020:	2800      	cmp	r0, #0
 800a022:	dc03      	bgt.n	800a02c <_dtoa_r+0xa9c>
 800a024:	d1e0      	bne.n	8009fe8 <_dtoa_r+0xa58>
 800a026:	f01a 0f01 	tst.w	sl, #1
 800a02a:	d0dd      	beq.n	8009fe8 <_dtoa_r+0xa58>
 800a02c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a030:	d1d7      	bne.n	8009fe2 <_dtoa_r+0xa52>
 800a032:	2339      	movs	r3, #57	; 0x39
 800a034:	f88b 3000 	strb.w	r3, [fp]
 800a038:	462b      	mov	r3, r5
 800a03a:	461d      	mov	r5, r3
 800a03c:	3b01      	subs	r3, #1
 800a03e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a042:	2a39      	cmp	r2, #57	; 0x39
 800a044:	d071      	beq.n	800a12a <_dtoa_r+0xb9a>
 800a046:	3201      	adds	r2, #1
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	e746      	b.n	8009eda <_dtoa_r+0x94a>
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	dd07      	ble.n	800a060 <_dtoa_r+0xad0>
 800a050:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a054:	d0ed      	beq.n	800a032 <_dtoa_r+0xaa2>
 800a056:	f10a 0301 	add.w	r3, sl, #1
 800a05a:	f88b 3000 	strb.w	r3, [fp]
 800a05e:	e73c      	b.n	8009eda <_dtoa_r+0x94a>
 800a060:	9b05      	ldr	r3, [sp, #20]
 800a062:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a066:	4599      	cmp	r9, r3
 800a068:	d047      	beq.n	800a0fa <_dtoa_r+0xb6a>
 800a06a:	ee18 1a10 	vmov	r1, s16
 800a06e:	2300      	movs	r3, #0
 800a070:	220a      	movs	r2, #10
 800a072:	4620      	mov	r0, r4
 800a074:	f000 f8e8 	bl	800a248 <__multadd>
 800a078:	45b8      	cmp	r8, r7
 800a07a:	ee08 0a10 	vmov	s16, r0
 800a07e:	f04f 0300 	mov.w	r3, #0
 800a082:	f04f 020a 	mov.w	r2, #10
 800a086:	4641      	mov	r1, r8
 800a088:	4620      	mov	r0, r4
 800a08a:	d106      	bne.n	800a09a <_dtoa_r+0xb0a>
 800a08c:	f000 f8dc 	bl	800a248 <__multadd>
 800a090:	4680      	mov	r8, r0
 800a092:	4607      	mov	r7, r0
 800a094:	f109 0901 	add.w	r9, r9, #1
 800a098:	e772      	b.n	8009f80 <_dtoa_r+0x9f0>
 800a09a:	f000 f8d5 	bl	800a248 <__multadd>
 800a09e:	4639      	mov	r1, r7
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	220a      	movs	r2, #10
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 f8ce 	bl	800a248 <__multadd>
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	e7f1      	b.n	800a094 <_dtoa_r+0xb04>
 800a0b0:	9b03      	ldr	r3, [sp, #12]
 800a0b2:	9302      	str	r3, [sp, #8]
 800a0b4:	9d01      	ldr	r5, [sp, #4]
 800a0b6:	ee18 0a10 	vmov	r0, s16
 800a0ba:	4631      	mov	r1, r6
 800a0bc:	f7ff f9dc 	bl	8009478 <quorem>
 800a0c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	f805 ab01 	strb.w	sl, [r5], #1
 800a0ca:	1aea      	subs	r2, r5, r3
 800a0cc:	9b02      	ldr	r3, [sp, #8]
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	dd09      	ble.n	800a0e6 <_dtoa_r+0xb56>
 800a0d2:	ee18 1a10 	vmov	r1, s16
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	220a      	movs	r2, #10
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 f8b4 	bl	800a248 <__multadd>
 800a0e0:	ee08 0a10 	vmov	s16, r0
 800a0e4:	e7e7      	b.n	800a0b6 <_dtoa_r+0xb26>
 800a0e6:	9b02      	ldr	r3, [sp, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	bfc8      	it	gt
 800a0ec:	461d      	movgt	r5, r3
 800a0ee:	9b01      	ldr	r3, [sp, #4]
 800a0f0:	bfd8      	it	le
 800a0f2:	2501      	movle	r5, #1
 800a0f4:	441d      	add	r5, r3
 800a0f6:	f04f 0800 	mov.w	r8, #0
 800a0fa:	ee18 1a10 	vmov	r1, s16
 800a0fe:	2201      	movs	r2, #1
 800a100:	4620      	mov	r0, r4
 800a102:	f000 fa51 	bl	800a5a8 <__lshift>
 800a106:	4631      	mov	r1, r6
 800a108:	ee08 0a10 	vmov	s16, r0
 800a10c:	f000 fabc 	bl	800a688 <__mcmp>
 800a110:	2800      	cmp	r0, #0
 800a112:	dc91      	bgt.n	800a038 <_dtoa_r+0xaa8>
 800a114:	d102      	bne.n	800a11c <_dtoa_r+0xb8c>
 800a116:	f01a 0f01 	tst.w	sl, #1
 800a11a:	d18d      	bne.n	800a038 <_dtoa_r+0xaa8>
 800a11c:	462b      	mov	r3, r5
 800a11e:	461d      	mov	r5, r3
 800a120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a124:	2a30      	cmp	r2, #48	; 0x30
 800a126:	d0fa      	beq.n	800a11e <_dtoa_r+0xb8e>
 800a128:	e6d7      	b.n	8009eda <_dtoa_r+0x94a>
 800a12a:	9a01      	ldr	r2, [sp, #4]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d184      	bne.n	800a03a <_dtoa_r+0xaaa>
 800a130:	9b00      	ldr	r3, [sp, #0]
 800a132:	3301      	adds	r3, #1
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	2331      	movs	r3, #49	; 0x31
 800a138:	7013      	strb	r3, [r2, #0]
 800a13a:	e6ce      	b.n	8009eda <_dtoa_r+0x94a>
 800a13c:	4b09      	ldr	r3, [pc, #36]	; (800a164 <_dtoa_r+0xbd4>)
 800a13e:	f7ff ba95 	b.w	800966c <_dtoa_r+0xdc>
 800a142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a144:	2b00      	cmp	r3, #0
 800a146:	f47f aa6e 	bne.w	8009626 <_dtoa_r+0x96>
 800a14a:	4b07      	ldr	r3, [pc, #28]	; (800a168 <_dtoa_r+0xbd8>)
 800a14c:	f7ff ba8e 	b.w	800966c <_dtoa_r+0xdc>
 800a150:	9b02      	ldr	r3, [sp, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	dcae      	bgt.n	800a0b4 <_dtoa_r+0xb24>
 800a156:	9b06      	ldr	r3, [sp, #24]
 800a158:	2b02      	cmp	r3, #2
 800a15a:	f73f aea8 	bgt.w	8009eae <_dtoa_r+0x91e>
 800a15e:	e7a9      	b.n	800a0b4 <_dtoa_r+0xb24>
 800a160:	0800cfdf 	.word	0x0800cfdf
 800a164:	0800cf3c 	.word	0x0800cf3c
 800a168:	0800cf60 	.word	0x0800cf60

0800a16c <_localeconv_r>:
 800a16c:	4800      	ldr	r0, [pc, #0]	; (800a170 <_localeconv_r+0x4>)
 800a16e:	4770      	bx	lr
 800a170:	200001a4 	.word	0x200001a4

0800a174 <malloc>:
 800a174:	4b02      	ldr	r3, [pc, #8]	; (800a180 <malloc+0xc>)
 800a176:	4601      	mov	r1, r0
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f000 bc09 	b.w	800a990 <_malloc_r>
 800a17e:	bf00      	nop
 800a180:	20000050 	.word	0x20000050

0800a184 <_Balloc>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a188:	4604      	mov	r4, r0
 800a18a:	460d      	mov	r5, r1
 800a18c:	b976      	cbnz	r6, 800a1ac <_Balloc+0x28>
 800a18e:	2010      	movs	r0, #16
 800a190:	f7ff fff0 	bl	800a174 <malloc>
 800a194:	4602      	mov	r2, r0
 800a196:	6260      	str	r0, [r4, #36]	; 0x24
 800a198:	b920      	cbnz	r0, 800a1a4 <_Balloc+0x20>
 800a19a:	4b18      	ldr	r3, [pc, #96]	; (800a1fc <_Balloc+0x78>)
 800a19c:	4818      	ldr	r0, [pc, #96]	; (800a200 <_Balloc+0x7c>)
 800a19e:	2166      	movs	r1, #102	; 0x66
 800a1a0:	f000 fdd6 	bl	800ad50 <__assert_func>
 800a1a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1a8:	6006      	str	r6, [r0, #0]
 800a1aa:	60c6      	str	r6, [r0, #12]
 800a1ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1ae:	68f3      	ldr	r3, [r6, #12]
 800a1b0:	b183      	cbz	r3, 800a1d4 <_Balloc+0x50>
 800a1b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ba:	b9b8      	cbnz	r0, 800a1ec <_Balloc+0x68>
 800a1bc:	2101      	movs	r1, #1
 800a1be:	fa01 f605 	lsl.w	r6, r1, r5
 800a1c2:	1d72      	adds	r2, r6, #5
 800a1c4:	0092      	lsls	r2, r2, #2
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f000 fb60 	bl	800a88c <_calloc_r>
 800a1cc:	b160      	cbz	r0, 800a1e8 <_Balloc+0x64>
 800a1ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1d2:	e00e      	b.n	800a1f2 <_Balloc+0x6e>
 800a1d4:	2221      	movs	r2, #33	; 0x21
 800a1d6:	2104      	movs	r1, #4
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f000 fb57 	bl	800a88c <_calloc_r>
 800a1de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e0:	60f0      	str	r0, [r6, #12]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e4      	bne.n	800a1b2 <_Balloc+0x2e>
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	6802      	ldr	r2, [r0, #0]
 800a1ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1f8:	e7f7      	b.n	800a1ea <_Balloc+0x66>
 800a1fa:	bf00      	nop
 800a1fc:	0800cf6d 	.word	0x0800cf6d
 800a200:	0800cff0 	.word	0x0800cff0

0800a204 <_Bfree>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a208:	4605      	mov	r5, r0
 800a20a:	460c      	mov	r4, r1
 800a20c:	b976      	cbnz	r6, 800a22c <_Bfree+0x28>
 800a20e:	2010      	movs	r0, #16
 800a210:	f7ff ffb0 	bl	800a174 <malloc>
 800a214:	4602      	mov	r2, r0
 800a216:	6268      	str	r0, [r5, #36]	; 0x24
 800a218:	b920      	cbnz	r0, 800a224 <_Bfree+0x20>
 800a21a:	4b09      	ldr	r3, [pc, #36]	; (800a240 <_Bfree+0x3c>)
 800a21c:	4809      	ldr	r0, [pc, #36]	; (800a244 <_Bfree+0x40>)
 800a21e:	218a      	movs	r1, #138	; 0x8a
 800a220:	f000 fd96 	bl	800ad50 <__assert_func>
 800a224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a228:	6006      	str	r6, [r0, #0]
 800a22a:	60c6      	str	r6, [r0, #12]
 800a22c:	b13c      	cbz	r4, 800a23e <_Bfree+0x3a>
 800a22e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a230:	6862      	ldr	r2, [r4, #4]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a238:	6021      	str	r1, [r4, #0]
 800a23a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a23e:	bd70      	pop	{r4, r5, r6, pc}
 800a240:	0800cf6d 	.word	0x0800cf6d
 800a244:	0800cff0 	.word	0x0800cff0

0800a248 <__multadd>:
 800a248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24c:	690d      	ldr	r5, [r1, #16]
 800a24e:	4607      	mov	r7, r0
 800a250:	460c      	mov	r4, r1
 800a252:	461e      	mov	r6, r3
 800a254:	f101 0c14 	add.w	ip, r1, #20
 800a258:	2000      	movs	r0, #0
 800a25a:	f8dc 3000 	ldr.w	r3, [ip]
 800a25e:	b299      	uxth	r1, r3
 800a260:	fb02 6101 	mla	r1, r2, r1, r6
 800a264:	0c1e      	lsrs	r6, r3, #16
 800a266:	0c0b      	lsrs	r3, r1, #16
 800a268:	fb02 3306 	mla	r3, r2, r6, r3
 800a26c:	b289      	uxth	r1, r1
 800a26e:	3001      	adds	r0, #1
 800a270:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a274:	4285      	cmp	r5, r0
 800a276:	f84c 1b04 	str.w	r1, [ip], #4
 800a27a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a27e:	dcec      	bgt.n	800a25a <__multadd+0x12>
 800a280:	b30e      	cbz	r6, 800a2c6 <__multadd+0x7e>
 800a282:	68a3      	ldr	r3, [r4, #8]
 800a284:	42ab      	cmp	r3, r5
 800a286:	dc19      	bgt.n	800a2bc <__multadd+0x74>
 800a288:	6861      	ldr	r1, [r4, #4]
 800a28a:	4638      	mov	r0, r7
 800a28c:	3101      	adds	r1, #1
 800a28e:	f7ff ff79 	bl	800a184 <_Balloc>
 800a292:	4680      	mov	r8, r0
 800a294:	b928      	cbnz	r0, 800a2a2 <__multadd+0x5a>
 800a296:	4602      	mov	r2, r0
 800a298:	4b0c      	ldr	r3, [pc, #48]	; (800a2cc <__multadd+0x84>)
 800a29a:	480d      	ldr	r0, [pc, #52]	; (800a2d0 <__multadd+0x88>)
 800a29c:	21b5      	movs	r1, #181	; 0xb5
 800a29e:	f000 fd57 	bl	800ad50 <__assert_func>
 800a2a2:	6922      	ldr	r2, [r4, #16]
 800a2a4:	3202      	adds	r2, #2
 800a2a6:	f104 010c 	add.w	r1, r4, #12
 800a2aa:	0092      	lsls	r2, r2, #2
 800a2ac:	300c      	adds	r0, #12
 800a2ae:	f7fe fa6d 	bl	800878c <memcpy>
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4638      	mov	r0, r7
 800a2b6:	f7ff ffa5 	bl	800a204 <_Bfree>
 800a2ba:	4644      	mov	r4, r8
 800a2bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2c0:	3501      	adds	r5, #1
 800a2c2:	615e      	str	r6, [r3, #20]
 800a2c4:	6125      	str	r5, [r4, #16]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2cc:	0800cfdf 	.word	0x0800cfdf
 800a2d0:	0800cff0 	.word	0x0800cff0

0800a2d4 <__hi0bits>:
 800a2d4:	0c03      	lsrs	r3, r0, #16
 800a2d6:	041b      	lsls	r3, r3, #16
 800a2d8:	b9d3      	cbnz	r3, 800a310 <__hi0bits+0x3c>
 800a2da:	0400      	lsls	r0, r0, #16
 800a2dc:	2310      	movs	r3, #16
 800a2de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2e2:	bf04      	itt	eq
 800a2e4:	0200      	lsleq	r0, r0, #8
 800a2e6:	3308      	addeq	r3, #8
 800a2e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2ec:	bf04      	itt	eq
 800a2ee:	0100      	lsleq	r0, r0, #4
 800a2f0:	3304      	addeq	r3, #4
 800a2f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2f6:	bf04      	itt	eq
 800a2f8:	0080      	lsleq	r0, r0, #2
 800a2fa:	3302      	addeq	r3, #2
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	db05      	blt.n	800a30c <__hi0bits+0x38>
 800a300:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a304:	f103 0301 	add.w	r3, r3, #1
 800a308:	bf08      	it	eq
 800a30a:	2320      	moveq	r3, #32
 800a30c:	4618      	mov	r0, r3
 800a30e:	4770      	bx	lr
 800a310:	2300      	movs	r3, #0
 800a312:	e7e4      	b.n	800a2de <__hi0bits+0xa>

0800a314 <__lo0bits>:
 800a314:	6803      	ldr	r3, [r0, #0]
 800a316:	f013 0207 	ands.w	r2, r3, #7
 800a31a:	4601      	mov	r1, r0
 800a31c:	d00b      	beq.n	800a336 <__lo0bits+0x22>
 800a31e:	07da      	lsls	r2, r3, #31
 800a320:	d423      	bmi.n	800a36a <__lo0bits+0x56>
 800a322:	0798      	lsls	r0, r3, #30
 800a324:	bf49      	itett	mi
 800a326:	085b      	lsrmi	r3, r3, #1
 800a328:	089b      	lsrpl	r3, r3, #2
 800a32a:	2001      	movmi	r0, #1
 800a32c:	600b      	strmi	r3, [r1, #0]
 800a32e:	bf5c      	itt	pl
 800a330:	600b      	strpl	r3, [r1, #0]
 800a332:	2002      	movpl	r0, #2
 800a334:	4770      	bx	lr
 800a336:	b298      	uxth	r0, r3
 800a338:	b9a8      	cbnz	r0, 800a366 <__lo0bits+0x52>
 800a33a:	0c1b      	lsrs	r3, r3, #16
 800a33c:	2010      	movs	r0, #16
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	b90a      	cbnz	r2, 800a346 <__lo0bits+0x32>
 800a342:	3008      	adds	r0, #8
 800a344:	0a1b      	lsrs	r3, r3, #8
 800a346:	071a      	lsls	r2, r3, #28
 800a348:	bf04      	itt	eq
 800a34a:	091b      	lsreq	r3, r3, #4
 800a34c:	3004      	addeq	r0, #4
 800a34e:	079a      	lsls	r2, r3, #30
 800a350:	bf04      	itt	eq
 800a352:	089b      	lsreq	r3, r3, #2
 800a354:	3002      	addeq	r0, #2
 800a356:	07da      	lsls	r2, r3, #31
 800a358:	d403      	bmi.n	800a362 <__lo0bits+0x4e>
 800a35a:	085b      	lsrs	r3, r3, #1
 800a35c:	f100 0001 	add.w	r0, r0, #1
 800a360:	d005      	beq.n	800a36e <__lo0bits+0x5a>
 800a362:	600b      	str	r3, [r1, #0]
 800a364:	4770      	bx	lr
 800a366:	4610      	mov	r0, r2
 800a368:	e7e9      	b.n	800a33e <__lo0bits+0x2a>
 800a36a:	2000      	movs	r0, #0
 800a36c:	4770      	bx	lr
 800a36e:	2020      	movs	r0, #32
 800a370:	4770      	bx	lr
	...

0800a374 <__i2b>:
 800a374:	b510      	push	{r4, lr}
 800a376:	460c      	mov	r4, r1
 800a378:	2101      	movs	r1, #1
 800a37a:	f7ff ff03 	bl	800a184 <_Balloc>
 800a37e:	4602      	mov	r2, r0
 800a380:	b928      	cbnz	r0, 800a38e <__i2b+0x1a>
 800a382:	4b05      	ldr	r3, [pc, #20]	; (800a398 <__i2b+0x24>)
 800a384:	4805      	ldr	r0, [pc, #20]	; (800a39c <__i2b+0x28>)
 800a386:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a38a:	f000 fce1 	bl	800ad50 <__assert_func>
 800a38e:	2301      	movs	r3, #1
 800a390:	6144      	str	r4, [r0, #20]
 800a392:	6103      	str	r3, [r0, #16]
 800a394:	bd10      	pop	{r4, pc}
 800a396:	bf00      	nop
 800a398:	0800cfdf 	.word	0x0800cfdf
 800a39c:	0800cff0 	.word	0x0800cff0

0800a3a0 <__multiply>:
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	4691      	mov	r9, r2
 800a3a6:	690a      	ldr	r2, [r1, #16]
 800a3a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	bfb8      	it	lt
 800a3b0:	460b      	movlt	r3, r1
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	bfbc      	itt	lt
 800a3b6:	464c      	movlt	r4, r9
 800a3b8:	4699      	movlt	r9, r3
 800a3ba:	6927      	ldr	r7, [r4, #16]
 800a3bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3c0:	68a3      	ldr	r3, [r4, #8]
 800a3c2:	6861      	ldr	r1, [r4, #4]
 800a3c4:	eb07 060a 	add.w	r6, r7, sl
 800a3c8:	42b3      	cmp	r3, r6
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	bfb8      	it	lt
 800a3ce:	3101      	addlt	r1, #1
 800a3d0:	f7ff fed8 	bl	800a184 <_Balloc>
 800a3d4:	b930      	cbnz	r0, 800a3e4 <__multiply+0x44>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	4b44      	ldr	r3, [pc, #272]	; (800a4ec <__multiply+0x14c>)
 800a3da:	4845      	ldr	r0, [pc, #276]	; (800a4f0 <__multiply+0x150>)
 800a3dc:	f240 115d 	movw	r1, #349	; 0x15d
 800a3e0:	f000 fcb6 	bl	800ad50 <__assert_func>
 800a3e4:	f100 0514 	add.w	r5, r0, #20
 800a3e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	4543      	cmp	r3, r8
 800a3f2:	d321      	bcc.n	800a438 <__multiply+0x98>
 800a3f4:	f104 0314 	add.w	r3, r4, #20
 800a3f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a3fc:	f109 0314 	add.w	r3, r9, #20
 800a400:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a404:	9202      	str	r2, [sp, #8]
 800a406:	1b3a      	subs	r2, r7, r4
 800a408:	3a15      	subs	r2, #21
 800a40a:	f022 0203 	bic.w	r2, r2, #3
 800a40e:	3204      	adds	r2, #4
 800a410:	f104 0115 	add.w	r1, r4, #21
 800a414:	428f      	cmp	r7, r1
 800a416:	bf38      	it	cc
 800a418:	2204      	movcc	r2, #4
 800a41a:	9201      	str	r2, [sp, #4]
 800a41c:	9a02      	ldr	r2, [sp, #8]
 800a41e:	9303      	str	r3, [sp, #12]
 800a420:	429a      	cmp	r2, r3
 800a422:	d80c      	bhi.n	800a43e <__multiply+0x9e>
 800a424:	2e00      	cmp	r6, #0
 800a426:	dd03      	ble.n	800a430 <__multiply+0x90>
 800a428:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d05a      	beq.n	800a4e6 <__multiply+0x146>
 800a430:	6106      	str	r6, [r0, #16]
 800a432:	b005      	add	sp, #20
 800a434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a438:	f843 2b04 	str.w	r2, [r3], #4
 800a43c:	e7d8      	b.n	800a3f0 <__multiply+0x50>
 800a43e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a442:	f1ba 0f00 	cmp.w	sl, #0
 800a446:	d024      	beq.n	800a492 <__multiply+0xf2>
 800a448:	f104 0e14 	add.w	lr, r4, #20
 800a44c:	46a9      	mov	r9, r5
 800a44e:	f04f 0c00 	mov.w	ip, #0
 800a452:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a456:	f8d9 1000 	ldr.w	r1, [r9]
 800a45a:	fa1f fb82 	uxth.w	fp, r2
 800a45e:	b289      	uxth	r1, r1
 800a460:	fb0a 110b 	mla	r1, sl, fp, r1
 800a464:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a468:	f8d9 2000 	ldr.w	r2, [r9]
 800a46c:	4461      	add	r1, ip
 800a46e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a472:	fb0a c20b 	mla	r2, sl, fp, ip
 800a476:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a47a:	b289      	uxth	r1, r1
 800a47c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a480:	4577      	cmp	r7, lr
 800a482:	f849 1b04 	str.w	r1, [r9], #4
 800a486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a48a:	d8e2      	bhi.n	800a452 <__multiply+0xb2>
 800a48c:	9a01      	ldr	r2, [sp, #4]
 800a48e:	f845 c002 	str.w	ip, [r5, r2]
 800a492:	9a03      	ldr	r2, [sp, #12]
 800a494:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a498:	3304      	adds	r3, #4
 800a49a:	f1b9 0f00 	cmp.w	r9, #0
 800a49e:	d020      	beq.n	800a4e2 <__multiply+0x142>
 800a4a0:	6829      	ldr	r1, [r5, #0]
 800a4a2:	f104 0c14 	add.w	ip, r4, #20
 800a4a6:	46ae      	mov	lr, r5
 800a4a8:	f04f 0a00 	mov.w	sl, #0
 800a4ac:	f8bc b000 	ldrh.w	fp, [ip]
 800a4b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4b4:	fb09 220b 	mla	r2, r9, fp, r2
 800a4b8:	4492      	add	sl, r2
 800a4ba:	b289      	uxth	r1, r1
 800a4bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4c0:	f84e 1b04 	str.w	r1, [lr], #4
 800a4c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4c8:	f8be 1000 	ldrh.w	r1, [lr]
 800a4cc:	0c12      	lsrs	r2, r2, #16
 800a4ce:	fb09 1102 	mla	r1, r9, r2, r1
 800a4d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4d6:	4567      	cmp	r7, ip
 800a4d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4dc:	d8e6      	bhi.n	800a4ac <__multiply+0x10c>
 800a4de:	9a01      	ldr	r2, [sp, #4]
 800a4e0:	50a9      	str	r1, [r5, r2]
 800a4e2:	3504      	adds	r5, #4
 800a4e4:	e79a      	b.n	800a41c <__multiply+0x7c>
 800a4e6:	3e01      	subs	r6, #1
 800a4e8:	e79c      	b.n	800a424 <__multiply+0x84>
 800a4ea:	bf00      	nop
 800a4ec:	0800cfdf 	.word	0x0800cfdf
 800a4f0:	0800cff0 	.word	0x0800cff0

0800a4f4 <__pow5mult>:
 800a4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f8:	4615      	mov	r5, r2
 800a4fa:	f012 0203 	ands.w	r2, r2, #3
 800a4fe:	4606      	mov	r6, r0
 800a500:	460f      	mov	r7, r1
 800a502:	d007      	beq.n	800a514 <__pow5mult+0x20>
 800a504:	4c25      	ldr	r4, [pc, #148]	; (800a59c <__pow5mult+0xa8>)
 800a506:	3a01      	subs	r2, #1
 800a508:	2300      	movs	r3, #0
 800a50a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a50e:	f7ff fe9b 	bl	800a248 <__multadd>
 800a512:	4607      	mov	r7, r0
 800a514:	10ad      	asrs	r5, r5, #2
 800a516:	d03d      	beq.n	800a594 <__pow5mult+0xa0>
 800a518:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a51a:	b97c      	cbnz	r4, 800a53c <__pow5mult+0x48>
 800a51c:	2010      	movs	r0, #16
 800a51e:	f7ff fe29 	bl	800a174 <malloc>
 800a522:	4602      	mov	r2, r0
 800a524:	6270      	str	r0, [r6, #36]	; 0x24
 800a526:	b928      	cbnz	r0, 800a534 <__pow5mult+0x40>
 800a528:	4b1d      	ldr	r3, [pc, #116]	; (800a5a0 <__pow5mult+0xac>)
 800a52a:	481e      	ldr	r0, [pc, #120]	; (800a5a4 <__pow5mult+0xb0>)
 800a52c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a530:	f000 fc0e 	bl	800ad50 <__assert_func>
 800a534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a538:	6004      	str	r4, [r0, #0]
 800a53a:	60c4      	str	r4, [r0, #12]
 800a53c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a544:	b94c      	cbnz	r4, 800a55a <__pow5mult+0x66>
 800a546:	f240 2171 	movw	r1, #625	; 0x271
 800a54a:	4630      	mov	r0, r6
 800a54c:	f7ff ff12 	bl	800a374 <__i2b>
 800a550:	2300      	movs	r3, #0
 800a552:	f8c8 0008 	str.w	r0, [r8, #8]
 800a556:	4604      	mov	r4, r0
 800a558:	6003      	str	r3, [r0, #0]
 800a55a:	f04f 0900 	mov.w	r9, #0
 800a55e:	07eb      	lsls	r3, r5, #31
 800a560:	d50a      	bpl.n	800a578 <__pow5mult+0x84>
 800a562:	4639      	mov	r1, r7
 800a564:	4622      	mov	r2, r4
 800a566:	4630      	mov	r0, r6
 800a568:	f7ff ff1a 	bl	800a3a0 <__multiply>
 800a56c:	4639      	mov	r1, r7
 800a56e:	4680      	mov	r8, r0
 800a570:	4630      	mov	r0, r6
 800a572:	f7ff fe47 	bl	800a204 <_Bfree>
 800a576:	4647      	mov	r7, r8
 800a578:	106d      	asrs	r5, r5, #1
 800a57a:	d00b      	beq.n	800a594 <__pow5mult+0xa0>
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	b938      	cbnz	r0, 800a590 <__pow5mult+0x9c>
 800a580:	4622      	mov	r2, r4
 800a582:	4621      	mov	r1, r4
 800a584:	4630      	mov	r0, r6
 800a586:	f7ff ff0b 	bl	800a3a0 <__multiply>
 800a58a:	6020      	str	r0, [r4, #0]
 800a58c:	f8c0 9000 	str.w	r9, [r0]
 800a590:	4604      	mov	r4, r0
 800a592:	e7e4      	b.n	800a55e <__pow5mult+0x6a>
 800a594:	4638      	mov	r0, r7
 800a596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59a:	bf00      	nop
 800a59c:	0800d140 	.word	0x0800d140
 800a5a0:	0800cf6d 	.word	0x0800cf6d
 800a5a4:	0800cff0 	.word	0x0800cff0

0800a5a8 <__lshift>:
 800a5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	6849      	ldr	r1, [r1, #4]
 800a5b0:	6923      	ldr	r3, [r4, #16]
 800a5b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5b6:	68a3      	ldr	r3, [r4, #8]
 800a5b8:	4607      	mov	r7, r0
 800a5ba:	4691      	mov	r9, r2
 800a5bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5c0:	f108 0601 	add.w	r6, r8, #1
 800a5c4:	42b3      	cmp	r3, r6
 800a5c6:	db0b      	blt.n	800a5e0 <__lshift+0x38>
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	f7ff fddb 	bl	800a184 <_Balloc>
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	b948      	cbnz	r0, 800a5e6 <__lshift+0x3e>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b2a      	ldr	r3, [pc, #168]	; (800a680 <__lshift+0xd8>)
 800a5d6:	482b      	ldr	r0, [pc, #172]	; (800a684 <__lshift+0xdc>)
 800a5d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5dc:	f000 fbb8 	bl	800ad50 <__assert_func>
 800a5e0:	3101      	adds	r1, #1
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	e7ee      	b.n	800a5c4 <__lshift+0x1c>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f100 0114 	add.w	r1, r0, #20
 800a5ec:	f100 0210 	add.w	r2, r0, #16
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	4553      	cmp	r3, sl
 800a5f4:	db37      	blt.n	800a666 <__lshift+0xbe>
 800a5f6:	6920      	ldr	r0, [r4, #16]
 800a5f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5fc:	f104 0314 	add.w	r3, r4, #20
 800a600:	f019 091f 	ands.w	r9, r9, #31
 800a604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a608:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a60c:	d02f      	beq.n	800a66e <__lshift+0xc6>
 800a60e:	f1c9 0e20 	rsb	lr, r9, #32
 800a612:	468a      	mov	sl, r1
 800a614:	f04f 0c00 	mov.w	ip, #0
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	fa02 f209 	lsl.w	r2, r2, r9
 800a61e:	ea42 020c 	orr.w	r2, r2, ip
 800a622:	f84a 2b04 	str.w	r2, [sl], #4
 800a626:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62a:	4298      	cmp	r0, r3
 800a62c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a630:	d8f2      	bhi.n	800a618 <__lshift+0x70>
 800a632:	1b03      	subs	r3, r0, r4
 800a634:	3b15      	subs	r3, #21
 800a636:	f023 0303 	bic.w	r3, r3, #3
 800a63a:	3304      	adds	r3, #4
 800a63c:	f104 0215 	add.w	r2, r4, #21
 800a640:	4290      	cmp	r0, r2
 800a642:	bf38      	it	cc
 800a644:	2304      	movcc	r3, #4
 800a646:	f841 c003 	str.w	ip, [r1, r3]
 800a64a:	f1bc 0f00 	cmp.w	ip, #0
 800a64e:	d001      	beq.n	800a654 <__lshift+0xac>
 800a650:	f108 0602 	add.w	r6, r8, #2
 800a654:	3e01      	subs	r6, #1
 800a656:	4638      	mov	r0, r7
 800a658:	612e      	str	r6, [r5, #16]
 800a65a:	4621      	mov	r1, r4
 800a65c:	f7ff fdd2 	bl	800a204 <_Bfree>
 800a660:	4628      	mov	r0, r5
 800a662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a666:	f842 0f04 	str.w	r0, [r2, #4]!
 800a66a:	3301      	adds	r3, #1
 800a66c:	e7c1      	b.n	800a5f2 <__lshift+0x4a>
 800a66e:	3904      	subs	r1, #4
 800a670:	f853 2b04 	ldr.w	r2, [r3], #4
 800a674:	f841 2f04 	str.w	r2, [r1, #4]!
 800a678:	4298      	cmp	r0, r3
 800a67a:	d8f9      	bhi.n	800a670 <__lshift+0xc8>
 800a67c:	e7ea      	b.n	800a654 <__lshift+0xac>
 800a67e:	bf00      	nop
 800a680:	0800cfdf 	.word	0x0800cfdf
 800a684:	0800cff0 	.word	0x0800cff0

0800a688 <__mcmp>:
 800a688:	b530      	push	{r4, r5, lr}
 800a68a:	6902      	ldr	r2, [r0, #16]
 800a68c:	690c      	ldr	r4, [r1, #16]
 800a68e:	1b12      	subs	r2, r2, r4
 800a690:	d10e      	bne.n	800a6b0 <__mcmp+0x28>
 800a692:	f100 0314 	add.w	r3, r0, #20
 800a696:	3114      	adds	r1, #20
 800a698:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a69c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6a8:	42a5      	cmp	r5, r4
 800a6aa:	d003      	beq.n	800a6b4 <__mcmp+0x2c>
 800a6ac:	d305      	bcc.n	800a6ba <__mcmp+0x32>
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	bd30      	pop	{r4, r5, pc}
 800a6b4:	4283      	cmp	r3, r0
 800a6b6:	d3f3      	bcc.n	800a6a0 <__mcmp+0x18>
 800a6b8:	e7fa      	b.n	800a6b0 <__mcmp+0x28>
 800a6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a6be:	e7f7      	b.n	800a6b0 <__mcmp+0x28>

0800a6c0 <__mdiff>:
 800a6c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	4606      	mov	r6, r0
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	4690      	mov	r8, r2
 800a6ce:	f7ff ffdb 	bl	800a688 <__mcmp>
 800a6d2:	1e05      	subs	r5, r0, #0
 800a6d4:	d110      	bne.n	800a6f8 <__mdiff+0x38>
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f7ff fd53 	bl	800a184 <_Balloc>
 800a6de:	b930      	cbnz	r0, 800a6ee <__mdiff+0x2e>
 800a6e0:	4b3a      	ldr	r3, [pc, #232]	; (800a7cc <__mdiff+0x10c>)
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	f240 2132 	movw	r1, #562	; 0x232
 800a6e8:	4839      	ldr	r0, [pc, #228]	; (800a7d0 <__mdiff+0x110>)
 800a6ea:	f000 fb31 	bl	800ad50 <__assert_func>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f8:	bfa4      	itt	ge
 800a6fa:	4643      	movge	r3, r8
 800a6fc:	46a0      	movge	r8, r4
 800a6fe:	4630      	mov	r0, r6
 800a700:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a704:	bfa6      	itte	ge
 800a706:	461c      	movge	r4, r3
 800a708:	2500      	movge	r5, #0
 800a70a:	2501      	movlt	r5, #1
 800a70c:	f7ff fd3a 	bl	800a184 <_Balloc>
 800a710:	b920      	cbnz	r0, 800a71c <__mdiff+0x5c>
 800a712:	4b2e      	ldr	r3, [pc, #184]	; (800a7cc <__mdiff+0x10c>)
 800a714:	4602      	mov	r2, r0
 800a716:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a71a:	e7e5      	b.n	800a6e8 <__mdiff+0x28>
 800a71c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a720:	6926      	ldr	r6, [r4, #16]
 800a722:	60c5      	str	r5, [r0, #12]
 800a724:	f104 0914 	add.w	r9, r4, #20
 800a728:	f108 0514 	add.w	r5, r8, #20
 800a72c:	f100 0e14 	add.w	lr, r0, #20
 800a730:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a734:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a738:	f108 0210 	add.w	r2, r8, #16
 800a73c:	46f2      	mov	sl, lr
 800a73e:	2100      	movs	r1, #0
 800a740:	f859 3b04 	ldr.w	r3, [r9], #4
 800a744:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a748:	fa1f f883 	uxth.w	r8, r3
 800a74c:	fa11 f18b 	uxtah	r1, r1, fp
 800a750:	0c1b      	lsrs	r3, r3, #16
 800a752:	eba1 0808 	sub.w	r8, r1, r8
 800a756:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a75a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a75e:	fa1f f888 	uxth.w	r8, r8
 800a762:	1419      	asrs	r1, r3, #16
 800a764:	454e      	cmp	r6, r9
 800a766:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a76a:	f84a 3b04 	str.w	r3, [sl], #4
 800a76e:	d8e7      	bhi.n	800a740 <__mdiff+0x80>
 800a770:	1b33      	subs	r3, r6, r4
 800a772:	3b15      	subs	r3, #21
 800a774:	f023 0303 	bic.w	r3, r3, #3
 800a778:	3304      	adds	r3, #4
 800a77a:	3415      	adds	r4, #21
 800a77c:	42a6      	cmp	r6, r4
 800a77e:	bf38      	it	cc
 800a780:	2304      	movcc	r3, #4
 800a782:	441d      	add	r5, r3
 800a784:	4473      	add	r3, lr
 800a786:	469e      	mov	lr, r3
 800a788:	462e      	mov	r6, r5
 800a78a:	4566      	cmp	r6, ip
 800a78c:	d30e      	bcc.n	800a7ac <__mdiff+0xec>
 800a78e:	f10c 0203 	add.w	r2, ip, #3
 800a792:	1b52      	subs	r2, r2, r5
 800a794:	f022 0203 	bic.w	r2, r2, #3
 800a798:	3d03      	subs	r5, #3
 800a79a:	45ac      	cmp	ip, r5
 800a79c:	bf38      	it	cc
 800a79e:	2200      	movcc	r2, #0
 800a7a0:	441a      	add	r2, r3
 800a7a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7a6:	b17b      	cbz	r3, 800a7c8 <__mdiff+0x108>
 800a7a8:	6107      	str	r7, [r0, #16]
 800a7aa:	e7a3      	b.n	800a6f4 <__mdiff+0x34>
 800a7ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7b0:	fa11 f288 	uxtah	r2, r1, r8
 800a7b4:	1414      	asrs	r4, r2, #16
 800a7b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7ba:	b292      	uxth	r2, r2
 800a7bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7c0:	f84e 2b04 	str.w	r2, [lr], #4
 800a7c4:	1421      	asrs	r1, r4, #16
 800a7c6:	e7e0      	b.n	800a78a <__mdiff+0xca>
 800a7c8:	3f01      	subs	r7, #1
 800a7ca:	e7ea      	b.n	800a7a2 <__mdiff+0xe2>
 800a7cc:	0800cfdf 	.word	0x0800cfdf
 800a7d0:	0800cff0 	.word	0x0800cff0

0800a7d4 <__d2b>:
 800a7d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7d8:	4689      	mov	r9, r1
 800a7da:	2101      	movs	r1, #1
 800a7dc:	ec57 6b10 	vmov	r6, r7, d0
 800a7e0:	4690      	mov	r8, r2
 800a7e2:	f7ff fccf 	bl	800a184 <_Balloc>
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	b930      	cbnz	r0, 800a7f8 <__d2b+0x24>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	4b25      	ldr	r3, [pc, #148]	; (800a884 <__d2b+0xb0>)
 800a7ee:	4826      	ldr	r0, [pc, #152]	; (800a888 <__d2b+0xb4>)
 800a7f0:	f240 310a 	movw	r1, #778	; 0x30a
 800a7f4:	f000 faac 	bl	800ad50 <__assert_func>
 800a7f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a7fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a800:	bb35      	cbnz	r5, 800a850 <__d2b+0x7c>
 800a802:	2e00      	cmp	r6, #0
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	d028      	beq.n	800a85a <__d2b+0x86>
 800a808:	4668      	mov	r0, sp
 800a80a:	9600      	str	r6, [sp, #0]
 800a80c:	f7ff fd82 	bl	800a314 <__lo0bits>
 800a810:	9900      	ldr	r1, [sp, #0]
 800a812:	b300      	cbz	r0, 800a856 <__d2b+0x82>
 800a814:	9a01      	ldr	r2, [sp, #4]
 800a816:	f1c0 0320 	rsb	r3, r0, #32
 800a81a:	fa02 f303 	lsl.w	r3, r2, r3
 800a81e:	430b      	orrs	r3, r1
 800a820:	40c2      	lsrs	r2, r0
 800a822:	6163      	str	r3, [r4, #20]
 800a824:	9201      	str	r2, [sp, #4]
 800a826:	9b01      	ldr	r3, [sp, #4]
 800a828:	61a3      	str	r3, [r4, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	bf14      	ite	ne
 800a82e:	2202      	movne	r2, #2
 800a830:	2201      	moveq	r2, #1
 800a832:	6122      	str	r2, [r4, #16]
 800a834:	b1d5      	cbz	r5, 800a86c <__d2b+0x98>
 800a836:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a83a:	4405      	add	r5, r0
 800a83c:	f8c9 5000 	str.w	r5, [r9]
 800a840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a844:	f8c8 0000 	str.w	r0, [r8]
 800a848:	4620      	mov	r0, r4
 800a84a:	b003      	add	sp, #12
 800a84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a854:	e7d5      	b.n	800a802 <__d2b+0x2e>
 800a856:	6161      	str	r1, [r4, #20]
 800a858:	e7e5      	b.n	800a826 <__d2b+0x52>
 800a85a:	a801      	add	r0, sp, #4
 800a85c:	f7ff fd5a 	bl	800a314 <__lo0bits>
 800a860:	9b01      	ldr	r3, [sp, #4]
 800a862:	6163      	str	r3, [r4, #20]
 800a864:	2201      	movs	r2, #1
 800a866:	6122      	str	r2, [r4, #16]
 800a868:	3020      	adds	r0, #32
 800a86a:	e7e3      	b.n	800a834 <__d2b+0x60>
 800a86c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a870:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a874:	f8c9 0000 	str.w	r0, [r9]
 800a878:	6918      	ldr	r0, [r3, #16]
 800a87a:	f7ff fd2b 	bl	800a2d4 <__hi0bits>
 800a87e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a882:	e7df      	b.n	800a844 <__d2b+0x70>
 800a884:	0800cfdf 	.word	0x0800cfdf
 800a888:	0800cff0 	.word	0x0800cff0

0800a88c <_calloc_r>:
 800a88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a88e:	fba1 2402 	umull	r2, r4, r1, r2
 800a892:	b94c      	cbnz	r4, 800a8a8 <_calloc_r+0x1c>
 800a894:	4611      	mov	r1, r2
 800a896:	9201      	str	r2, [sp, #4]
 800a898:	f000 f87a 	bl	800a990 <_malloc_r>
 800a89c:	9a01      	ldr	r2, [sp, #4]
 800a89e:	4605      	mov	r5, r0
 800a8a0:	b930      	cbnz	r0, 800a8b0 <_calloc_r+0x24>
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	b003      	add	sp, #12
 800a8a6:	bd30      	pop	{r4, r5, pc}
 800a8a8:	220c      	movs	r2, #12
 800a8aa:	6002      	str	r2, [r0, #0]
 800a8ac:	2500      	movs	r5, #0
 800a8ae:	e7f8      	b.n	800a8a2 <_calloc_r+0x16>
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	f7fd ff79 	bl	80087a8 <memset>
 800a8b6:	e7f4      	b.n	800a8a2 <_calloc_r+0x16>

0800a8b8 <_free_r>:
 800a8b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ba:	2900      	cmp	r1, #0
 800a8bc:	d044      	beq.n	800a948 <_free_r+0x90>
 800a8be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8c2:	9001      	str	r0, [sp, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ca:	bfb8      	it	lt
 800a8cc:	18e4      	addlt	r4, r4, r3
 800a8ce:	f000 fa9b 	bl	800ae08 <__malloc_lock>
 800a8d2:	4a1e      	ldr	r2, [pc, #120]	; (800a94c <_free_r+0x94>)
 800a8d4:	9801      	ldr	r0, [sp, #4]
 800a8d6:	6813      	ldr	r3, [r2, #0]
 800a8d8:	b933      	cbnz	r3, 800a8e8 <_free_r+0x30>
 800a8da:	6063      	str	r3, [r4, #4]
 800a8dc:	6014      	str	r4, [r2, #0]
 800a8de:	b003      	add	sp, #12
 800a8e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8e4:	f000 ba96 	b.w	800ae14 <__malloc_unlock>
 800a8e8:	42a3      	cmp	r3, r4
 800a8ea:	d908      	bls.n	800a8fe <_free_r+0x46>
 800a8ec:	6825      	ldr	r5, [r4, #0]
 800a8ee:	1961      	adds	r1, r4, r5
 800a8f0:	428b      	cmp	r3, r1
 800a8f2:	bf01      	itttt	eq
 800a8f4:	6819      	ldreq	r1, [r3, #0]
 800a8f6:	685b      	ldreq	r3, [r3, #4]
 800a8f8:	1949      	addeq	r1, r1, r5
 800a8fa:	6021      	streq	r1, [r4, #0]
 800a8fc:	e7ed      	b.n	800a8da <_free_r+0x22>
 800a8fe:	461a      	mov	r2, r3
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	b10b      	cbz	r3, 800a908 <_free_r+0x50>
 800a904:	42a3      	cmp	r3, r4
 800a906:	d9fa      	bls.n	800a8fe <_free_r+0x46>
 800a908:	6811      	ldr	r1, [r2, #0]
 800a90a:	1855      	adds	r5, r2, r1
 800a90c:	42a5      	cmp	r5, r4
 800a90e:	d10b      	bne.n	800a928 <_free_r+0x70>
 800a910:	6824      	ldr	r4, [r4, #0]
 800a912:	4421      	add	r1, r4
 800a914:	1854      	adds	r4, r2, r1
 800a916:	42a3      	cmp	r3, r4
 800a918:	6011      	str	r1, [r2, #0]
 800a91a:	d1e0      	bne.n	800a8de <_free_r+0x26>
 800a91c:	681c      	ldr	r4, [r3, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	6053      	str	r3, [r2, #4]
 800a922:	4421      	add	r1, r4
 800a924:	6011      	str	r1, [r2, #0]
 800a926:	e7da      	b.n	800a8de <_free_r+0x26>
 800a928:	d902      	bls.n	800a930 <_free_r+0x78>
 800a92a:	230c      	movs	r3, #12
 800a92c:	6003      	str	r3, [r0, #0]
 800a92e:	e7d6      	b.n	800a8de <_free_r+0x26>
 800a930:	6825      	ldr	r5, [r4, #0]
 800a932:	1961      	adds	r1, r4, r5
 800a934:	428b      	cmp	r3, r1
 800a936:	bf04      	itt	eq
 800a938:	6819      	ldreq	r1, [r3, #0]
 800a93a:	685b      	ldreq	r3, [r3, #4]
 800a93c:	6063      	str	r3, [r4, #4]
 800a93e:	bf04      	itt	eq
 800a940:	1949      	addeq	r1, r1, r5
 800a942:	6021      	streq	r1, [r4, #0]
 800a944:	6054      	str	r4, [r2, #4]
 800a946:	e7ca      	b.n	800a8de <_free_r+0x26>
 800a948:	b003      	add	sp, #12
 800a94a:	bd30      	pop	{r4, r5, pc}
 800a94c:	20002478 	.word	0x20002478

0800a950 <sbrk_aligned>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	4e0e      	ldr	r6, [pc, #56]	; (800a98c <sbrk_aligned+0x3c>)
 800a954:	460c      	mov	r4, r1
 800a956:	6831      	ldr	r1, [r6, #0]
 800a958:	4605      	mov	r5, r0
 800a95a:	b911      	cbnz	r1, 800a962 <sbrk_aligned+0x12>
 800a95c:	f000 f9e8 	bl	800ad30 <_sbrk_r>
 800a960:	6030      	str	r0, [r6, #0]
 800a962:	4621      	mov	r1, r4
 800a964:	4628      	mov	r0, r5
 800a966:	f000 f9e3 	bl	800ad30 <_sbrk_r>
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	d00a      	beq.n	800a984 <sbrk_aligned+0x34>
 800a96e:	1cc4      	adds	r4, r0, #3
 800a970:	f024 0403 	bic.w	r4, r4, #3
 800a974:	42a0      	cmp	r0, r4
 800a976:	d007      	beq.n	800a988 <sbrk_aligned+0x38>
 800a978:	1a21      	subs	r1, r4, r0
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 f9d8 	bl	800ad30 <_sbrk_r>
 800a980:	3001      	adds	r0, #1
 800a982:	d101      	bne.n	800a988 <sbrk_aligned+0x38>
 800a984:	f04f 34ff 	mov.w	r4, #4294967295
 800a988:	4620      	mov	r0, r4
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	2000247c 	.word	0x2000247c

0800a990 <_malloc_r>:
 800a990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a994:	1ccd      	adds	r5, r1, #3
 800a996:	f025 0503 	bic.w	r5, r5, #3
 800a99a:	3508      	adds	r5, #8
 800a99c:	2d0c      	cmp	r5, #12
 800a99e:	bf38      	it	cc
 800a9a0:	250c      	movcc	r5, #12
 800a9a2:	2d00      	cmp	r5, #0
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	db01      	blt.n	800a9ac <_malloc_r+0x1c>
 800a9a8:	42a9      	cmp	r1, r5
 800a9aa:	d905      	bls.n	800a9b8 <_malloc_r+0x28>
 800a9ac:	230c      	movs	r3, #12
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	2600      	movs	r6, #0
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b8:	4e2e      	ldr	r6, [pc, #184]	; (800aa74 <_malloc_r+0xe4>)
 800a9ba:	f000 fa25 	bl	800ae08 <__malloc_lock>
 800a9be:	6833      	ldr	r3, [r6, #0]
 800a9c0:	461c      	mov	r4, r3
 800a9c2:	bb34      	cbnz	r4, 800aa12 <_malloc_r+0x82>
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	f7ff ffc2 	bl	800a950 <sbrk_aligned>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	d14d      	bne.n	800aa6e <_malloc_r+0xde>
 800a9d2:	6834      	ldr	r4, [r6, #0]
 800a9d4:	4626      	mov	r6, r4
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	d140      	bne.n	800aa5c <_malloc_r+0xcc>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4638      	mov	r0, r7
 800a9e0:	eb04 0803 	add.w	r8, r4, r3
 800a9e4:	f000 f9a4 	bl	800ad30 <_sbrk_r>
 800a9e8:	4580      	cmp	r8, r0
 800a9ea:	d13a      	bne.n	800aa62 <_malloc_r+0xd2>
 800a9ec:	6821      	ldr	r1, [r4, #0]
 800a9ee:	3503      	adds	r5, #3
 800a9f0:	1a6d      	subs	r5, r5, r1
 800a9f2:	f025 0503 	bic.w	r5, r5, #3
 800a9f6:	3508      	adds	r5, #8
 800a9f8:	2d0c      	cmp	r5, #12
 800a9fa:	bf38      	it	cc
 800a9fc:	250c      	movcc	r5, #12
 800a9fe:	4629      	mov	r1, r5
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7ff ffa5 	bl	800a950 <sbrk_aligned>
 800aa06:	3001      	adds	r0, #1
 800aa08:	d02b      	beq.n	800aa62 <_malloc_r+0xd2>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	442b      	add	r3, r5
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	e00e      	b.n	800aa30 <_malloc_r+0xa0>
 800aa12:	6822      	ldr	r2, [r4, #0]
 800aa14:	1b52      	subs	r2, r2, r5
 800aa16:	d41e      	bmi.n	800aa56 <_malloc_r+0xc6>
 800aa18:	2a0b      	cmp	r2, #11
 800aa1a:	d916      	bls.n	800aa4a <_malloc_r+0xba>
 800aa1c:	1961      	adds	r1, r4, r5
 800aa1e:	42a3      	cmp	r3, r4
 800aa20:	6025      	str	r5, [r4, #0]
 800aa22:	bf18      	it	ne
 800aa24:	6059      	strne	r1, [r3, #4]
 800aa26:	6863      	ldr	r3, [r4, #4]
 800aa28:	bf08      	it	eq
 800aa2a:	6031      	streq	r1, [r6, #0]
 800aa2c:	5162      	str	r2, [r4, r5]
 800aa2e:	604b      	str	r3, [r1, #4]
 800aa30:	4638      	mov	r0, r7
 800aa32:	f104 060b 	add.w	r6, r4, #11
 800aa36:	f000 f9ed 	bl	800ae14 <__malloc_unlock>
 800aa3a:	f026 0607 	bic.w	r6, r6, #7
 800aa3e:	1d23      	adds	r3, r4, #4
 800aa40:	1af2      	subs	r2, r6, r3
 800aa42:	d0b6      	beq.n	800a9b2 <_malloc_r+0x22>
 800aa44:	1b9b      	subs	r3, r3, r6
 800aa46:	50a3      	str	r3, [r4, r2]
 800aa48:	e7b3      	b.n	800a9b2 <_malloc_r+0x22>
 800aa4a:	6862      	ldr	r2, [r4, #4]
 800aa4c:	42a3      	cmp	r3, r4
 800aa4e:	bf0c      	ite	eq
 800aa50:	6032      	streq	r2, [r6, #0]
 800aa52:	605a      	strne	r2, [r3, #4]
 800aa54:	e7ec      	b.n	800aa30 <_malloc_r+0xa0>
 800aa56:	4623      	mov	r3, r4
 800aa58:	6864      	ldr	r4, [r4, #4]
 800aa5a:	e7b2      	b.n	800a9c2 <_malloc_r+0x32>
 800aa5c:	4634      	mov	r4, r6
 800aa5e:	6876      	ldr	r6, [r6, #4]
 800aa60:	e7b9      	b.n	800a9d6 <_malloc_r+0x46>
 800aa62:	230c      	movs	r3, #12
 800aa64:	603b      	str	r3, [r7, #0]
 800aa66:	4638      	mov	r0, r7
 800aa68:	f000 f9d4 	bl	800ae14 <__malloc_unlock>
 800aa6c:	e7a1      	b.n	800a9b2 <_malloc_r+0x22>
 800aa6e:	6025      	str	r5, [r4, #0]
 800aa70:	e7de      	b.n	800aa30 <_malloc_r+0xa0>
 800aa72:	bf00      	nop
 800aa74:	20002478 	.word	0x20002478

0800aa78 <__ssputs_r>:
 800aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7c:	688e      	ldr	r6, [r1, #8]
 800aa7e:	429e      	cmp	r6, r3
 800aa80:	4682      	mov	sl, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	4690      	mov	r8, r2
 800aa86:	461f      	mov	r7, r3
 800aa88:	d838      	bhi.n	800aafc <__ssputs_r+0x84>
 800aa8a:	898a      	ldrh	r2, [r1, #12]
 800aa8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa90:	d032      	beq.n	800aaf8 <__ssputs_r+0x80>
 800aa92:	6825      	ldr	r5, [r4, #0]
 800aa94:	6909      	ldr	r1, [r1, #16]
 800aa96:	eba5 0901 	sub.w	r9, r5, r1
 800aa9a:	6965      	ldr	r5, [r4, #20]
 800aa9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	444b      	add	r3, r9
 800aaa8:	106d      	asrs	r5, r5, #1
 800aaaa:	429d      	cmp	r5, r3
 800aaac:	bf38      	it	cc
 800aaae:	461d      	movcc	r5, r3
 800aab0:	0553      	lsls	r3, r2, #21
 800aab2:	d531      	bpl.n	800ab18 <__ssputs_r+0xa0>
 800aab4:	4629      	mov	r1, r5
 800aab6:	f7ff ff6b 	bl	800a990 <_malloc_r>
 800aaba:	4606      	mov	r6, r0
 800aabc:	b950      	cbnz	r0, 800aad4 <__ssputs_r+0x5c>
 800aabe:	230c      	movs	r3, #12
 800aac0:	f8ca 3000 	str.w	r3, [sl]
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaca:	81a3      	strh	r3, [r4, #12]
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295
 800aad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad4:	6921      	ldr	r1, [r4, #16]
 800aad6:	464a      	mov	r2, r9
 800aad8:	f7fd fe58 	bl	800878c <memcpy>
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae6:	81a3      	strh	r3, [r4, #12]
 800aae8:	6126      	str	r6, [r4, #16]
 800aaea:	6165      	str	r5, [r4, #20]
 800aaec:	444e      	add	r6, r9
 800aaee:	eba5 0509 	sub.w	r5, r5, r9
 800aaf2:	6026      	str	r6, [r4, #0]
 800aaf4:	60a5      	str	r5, [r4, #8]
 800aaf6:	463e      	mov	r6, r7
 800aaf8:	42be      	cmp	r6, r7
 800aafa:	d900      	bls.n	800aafe <__ssputs_r+0x86>
 800aafc:	463e      	mov	r6, r7
 800aafe:	6820      	ldr	r0, [r4, #0]
 800ab00:	4632      	mov	r2, r6
 800ab02:	4641      	mov	r1, r8
 800ab04:	f000 f966 	bl	800add4 <memmove>
 800ab08:	68a3      	ldr	r3, [r4, #8]
 800ab0a:	1b9b      	subs	r3, r3, r6
 800ab0c:	60a3      	str	r3, [r4, #8]
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	4433      	add	r3, r6
 800ab12:	6023      	str	r3, [r4, #0]
 800ab14:	2000      	movs	r0, #0
 800ab16:	e7db      	b.n	800aad0 <__ssputs_r+0x58>
 800ab18:	462a      	mov	r2, r5
 800ab1a:	f000 f981 	bl	800ae20 <_realloc_r>
 800ab1e:	4606      	mov	r6, r0
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d1e1      	bne.n	800aae8 <__ssputs_r+0x70>
 800ab24:	6921      	ldr	r1, [r4, #16]
 800ab26:	4650      	mov	r0, sl
 800ab28:	f7ff fec6 	bl	800a8b8 <_free_r>
 800ab2c:	e7c7      	b.n	800aabe <__ssputs_r+0x46>
	...

0800ab30 <_svfiprintf_r>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	4698      	mov	r8, r3
 800ab36:	898b      	ldrh	r3, [r1, #12]
 800ab38:	061b      	lsls	r3, r3, #24
 800ab3a:	b09d      	sub	sp, #116	; 0x74
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	460d      	mov	r5, r1
 800ab40:	4614      	mov	r4, r2
 800ab42:	d50e      	bpl.n	800ab62 <_svfiprintf_r+0x32>
 800ab44:	690b      	ldr	r3, [r1, #16]
 800ab46:	b963      	cbnz	r3, 800ab62 <_svfiprintf_r+0x32>
 800ab48:	2140      	movs	r1, #64	; 0x40
 800ab4a:	f7ff ff21 	bl	800a990 <_malloc_r>
 800ab4e:	6028      	str	r0, [r5, #0]
 800ab50:	6128      	str	r0, [r5, #16]
 800ab52:	b920      	cbnz	r0, 800ab5e <_svfiprintf_r+0x2e>
 800ab54:	230c      	movs	r3, #12
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5c:	e0d1      	b.n	800ad02 <_svfiprintf_r+0x1d2>
 800ab5e:	2340      	movs	r3, #64	; 0x40
 800ab60:	616b      	str	r3, [r5, #20]
 800ab62:	2300      	movs	r3, #0
 800ab64:	9309      	str	r3, [sp, #36]	; 0x24
 800ab66:	2320      	movs	r3, #32
 800ab68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab70:	2330      	movs	r3, #48	; 0x30
 800ab72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad1c <_svfiprintf_r+0x1ec>
 800ab76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab7a:	f04f 0901 	mov.w	r9, #1
 800ab7e:	4623      	mov	r3, r4
 800ab80:	469a      	mov	sl, r3
 800ab82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab86:	b10a      	cbz	r2, 800ab8c <_svfiprintf_r+0x5c>
 800ab88:	2a25      	cmp	r2, #37	; 0x25
 800ab8a:	d1f9      	bne.n	800ab80 <_svfiprintf_r+0x50>
 800ab8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab90:	d00b      	beq.n	800abaa <_svfiprintf_r+0x7a>
 800ab92:	465b      	mov	r3, fp
 800ab94:	4622      	mov	r2, r4
 800ab96:	4629      	mov	r1, r5
 800ab98:	4638      	mov	r0, r7
 800ab9a:	f7ff ff6d 	bl	800aa78 <__ssputs_r>
 800ab9e:	3001      	adds	r0, #1
 800aba0:	f000 80aa 	beq.w	800acf8 <_svfiprintf_r+0x1c8>
 800aba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba6:	445a      	add	r2, fp
 800aba8:	9209      	str	r2, [sp, #36]	; 0x24
 800abaa:	f89a 3000 	ldrb.w	r3, [sl]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 80a2 	beq.w	800acf8 <_svfiprintf_r+0x1c8>
 800abb4:	2300      	movs	r3, #0
 800abb6:	f04f 32ff 	mov.w	r2, #4294967295
 800abba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abbe:	f10a 0a01 	add.w	sl, sl, #1
 800abc2:	9304      	str	r3, [sp, #16]
 800abc4:	9307      	str	r3, [sp, #28]
 800abc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abca:	931a      	str	r3, [sp, #104]	; 0x68
 800abcc:	4654      	mov	r4, sl
 800abce:	2205      	movs	r2, #5
 800abd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd4:	4851      	ldr	r0, [pc, #324]	; (800ad1c <_svfiprintf_r+0x1ec>)
 800abd6:	f7f5 fb1b 	bl	8000210 <memchr>
 800abda:	9a04      	ldr	r2, [sp, #16]
 800abdc:	b9d8      	cbnz	r0, 800ac16 <_svfiprintf_r+0xe6>
 800abde:	06d0      	lsls	r0, r2, #27
 800abe0:	bf44      	itt	mi
 800abe2:	2320      	movmi	r3, #32
 800abe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abe8:	0711      	lsls	r1, r2, #28
 800abea:	bf44      	itt	mi
 800abec:	232b      	movmi	r3, #43	; 0x2b
 800abee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abf2:	f89a 3000 	ldrb.w	r3, [sl]
 800abf6:	2b2a      	cmp	r3, #42	; 0x2a
 800abf8:	d015      	beq.n	800ac26 <_svfiprintf_r+0xf6>
 800abfa:	9a07      	ldr	r2, [sp, #28]
 800abfc:	4654      	mov	r4, sl
 800abfe:	2000      	movs	r0, #0
 800ac00:	f04f 0c0a 	mov.w	ip, #10
 800ac04:	4621      	mov	r1, r4
 800ac06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac0a:	3b30      	subs	r3, #48	; 0x30
 800ac0c:	2b09      	cmp	r3, #9
 800ac0e:	d94e      	bls.n	800acae <_svfiprintf_r+0x17e>
 800ac10:	b1b0      	cbz	r0, 800ac40 <_svfiprintf_r+0x110>
 800ac12:	9207      	str	r2, [sp, #28]
 800ac14:	e014      	b.n	800ac40 <_svfiprintf_r+0x110>
 800ac16:	eba0 0308 	sub.w	r3, r0, r8
 800ac1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	9304      	str	r3, [sp, #16]
 800ac22:	46a2      	mov	sl, r4
 800ac24:	e7d2      	b.n	800abcc <_svfiprintf_r+0x9c>
 800ac26:	9b03      	ldr	r3, [sp, #12]
 800ac28:	1d19      	adds	r1, r3, #4
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	9103      	str	r1, [sp, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	bfbb      	ittet	lt
 800ac32:	425b      	neglt	r3, r3
 800ac34:	f042 0202 	orrlt.w	r2, r2, #2
 800ac38:	9307      	strge	r3, [sp, #28]
 800ac3a:	9307      	strlt	r3, [sp, #28]
 800ac3c:	bfb8      	it	lt
 800ac3e:	9204      	strlt	r2, [sp, #16]
 800ac40:	7823      	ldrb	r3, [r4, #0]
 800ac42:	2b2e      	cmp	r3, #46	; 0x2e
 800ac44:	d10c      	bne.n	800ac60 <_svfiprintf_r+0x130>
 800ac46:	7863      	ldrb	r3, [r4, #1]
 800ac48:	2b2a      	cmp	r3, #42	; 0x2a
 800ac4a:	d135      	bne.n	800acb8 <_svfiprintf_r+0x188>
 800ac4c:	9b03      	ldr	r3, [sp, #12]
 800ac4e:	1d1a      	adds	r2, r3, #4
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	9203      	str	r2, [sp, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	bfb8      	it	lt
 800ac58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac5c:	3402      	adds	r4, #2
 800ac5e:	9305      	str	r3, [sp, #20]
 800ac60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad2c <_svfiprintf_r+0x1fc>
 800ac64:	7821      	ldrb	r1, [r4, #0]
 800ac66:	2203      	movs	r2, #3
 800ac68:	4650      	mov	r0, sl
 800ac6a:	f7f5 fad1 	bl	8000210 <memchr>
 800ac6e:	b140      	cbz	r0, 800ac82 <_svfiprintf_r+0x152>
 800ac70:	2340      	movs	r3, #64	; 0x40
 800ac72:	eba0 000a 	sub.w	r0, r0, sl
 800ac76:	fa03 f000 	lsl.w	r0, r3, r0
 800ac7a:	9b04      	ldr	r3, [sp, #16]
 800ac7c:	4303      	orrs	r3, r0
 800ac7e:	3401      	adds	r4, #1
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac86:	4826      	ldr	r0, [pc, #152]	; (800ad20 <_svfiprintf_r+0x1f0>)
 800ac88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac8c:	2206      	movs	r2, #6
 800ac8e:	f7f5 fabf 	bl	8000210 <memchr>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d038      	beq.n	800ad08 <_svfiprintf_r+0x1d8>
 800ac96:	4b23      	ldr	r3, [pc, #140]	; (800ad24 <_svfiprintf_r+0x1f4>)
 800ac98:	bb1b      	cbnz	r3, 800ace2 <_svfiprintf_r+0x1b2>
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	3307      	adds	r3, #7
 800ac9e:	f023 0307 	bic.w	r3, r3, #7
 800aca2:	3308      	adds	r3, #8
 800aca4:	9303      	str	r3, [sp, #12]
 800aca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca8:	4433      	add	r3, r6
 800acaa:	9309      	str	r3, [sp, #36]	; 0x24
 800acac:	e767      	b.n	800ab7e <_svfiprintf_r+0x4e>
 800acae:	fb0c 3202 	mla	r2, ip, r2, r3
 800acb2:	460c      	mov	r4, r1
 800acb4:	2001      	movs	r0, #1
 800acb6:	e7a5      	b.n	800ac04 <_svfiprintf_r+0xd4>
 800acb8:	2300      	movs	r3, #0
 800acba:	3401      	adds	r4, #1
 800acbc:	9305      	str	r3, [sp, #20]
 800acbe:	4619      	mov	r1, r3
 800acc0:	f04f 0c0a 	mov.w	ip, #10
 800acc4:	4620      	mov	r0, r4
 800acc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acca:	3a30      	subs	r2, #48	; 0x30
 800accc:	2a09      	cmp	r2, #9
 800acce:	d903      	bls.n	800acd8 <_svfiprintf_r+0x1a8>
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0c5      	beq.n	800ac60 <_svfiprintf_r+0x130>
 800acd4:	9105      	str	r1, [sp, #20]
 800acd6:	e7c3      	b.n	800ac60 <_svfiprintf_r+0x130>
 800acd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800acdc:	4604      	mov	r4, r0
 800acde:	2301      	movs	r3, #1
 800ace0:	e7f0      	b.n	800acc4 <_svfiprintf_r+0x194>
 800ace2:	ab03      	add	r3, sp, #12
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	462a      	mov	r2, r5
 800ace8:	4b0f      	ldr	r3, [pc, #60]	; (800ad28 <_svfiprintf_r+0x1f8>)
 800acea:	a904      	add	r1, sp, #16
 800acec:	4638      	mov	r0, r7
 800acee:	f7fd fe03 	bl	80088f8 <_printf_float>
 800acf2:	1c42      	adds	r2, r0, #1
 800acf4:	4606      	mov	r6, r0
 800acf6:	d1d6      	bne.n	800aca6 <_svfiprintf_r+0x176>
 800acf8:	89ab      	ldrh	r3, [r5, #12]
 800acfa:	065b      	lsls	r3, r3, #25
 800acfc:	f53f af2c 	bmi.w	800ab58 <_svfiprintf_r+0x28>
 800ad00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad02:	b01d      	add	sp, #116	; 0x74
 800ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad08:	ab03      	add	r3, sp, #12
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	462a      	mov	r2, r5
 800ad0e:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <_svfiprintf_r+0x1f8>)
 800ad10:	a904      	add	r1, sp, #16
 800ad12:	4638      	mov	r0, r7
 800ad14:	f7fe f894 	bl	8008e40 <_printf_i>
 800ad18:	e7eb      	b.n	800acf2 <_svfiprintf_r+0x1c2>
 800ad1a:	bf00      	nop
 800ad1c:	0800d14c 	.word	0x0800d14c
 800ad20:	0800d156 	.word	0x0800d156
 800ad24:	080088f9 	.word	0x080088f9
 800ad28:	0800aa79 	.word	0x0800aa79
 800ad2c:	0800d152 	.word	0x0800d152

0800ad30 <_sbrk_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d06      	ldr	r5, [pc, #24]	; (800ad4c <_sbrk_r+0x1c>)
 800ad34:	2300      	movs	r3, #0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	f7f6 fbf6 	bl	800152c <_sbrk>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d102      	bne.n	800ad4a <_sbrk_r+0x1a>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	b103      	cbz	r3, 800ad4a <_sbrk_r+0x1a>
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	20002480 	.word	0x20002480

0800ad50 <__assert_func>:
 800ad50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad52:	4614      	mov	r4, r2
 800ad54:	461a      	mov	r2, r3
 800ad56:	4b09      	ldr	r3, [pc, #36]	; (800ad7c <__assert_func+0x2c>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	68d8      	ldr	r0, [r3, #12]
 800ad5e:	b14c      	cbz	r4, 800ad74 <__assert_func+0x24>
 800ad60:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <__assert_func+0x30>)
 800ad62:	9100      	str	r1, [sp, #0]
 800ad64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad68:	4906      	ldr	r1, [pc, #24]	; (800ad84 <__assert_func+0x34>)
 800ad6a:	462b      	mov	r3, r5
 800ad6c:	f000 f80e 	bl	800ad8c <fiprintf>
 800ad70:	f000 faac 	bl	800b2cc <abort>
 800ad74:	4b04      	ldr	r3, [pc, #16]	; (800ad88 <__assert_func+0x38>)
 800ad76:	461c      	mov	r4, r3
 800ad78:	e7f3      	b.n	800ad62 <__assert_func+0x12>
 800ad7a:	bf00      	nop
 800ad7c:	20000050 	.word	0x20000050
 800ad80:	0800d15d 	.word	0x0800d15d
 800ad84:	0800d16a 	.word	0x0800d16a
 800ad88:	0800d198 	.word	0x0800d198

0800ad8c <fiprintf>:
 800ad8c:	b40e      	push	{r1, r2, r3}
 800ad8e:	b503      	push	{r0, r1, lr}
 800ad90:	4601      	mov	r1, r0
 800ad92:	ab03      	add	r3, sp, #12
 800ad94:	4805      	ldr	r0, [pc, #20]	; (800adac <fiprintf+0x20>)
 800ad96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad9a:	6800      	ldr	r0, [r0, #0]
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	f000 f897 	bl	800aed0 <_vfiprintf_r>
 800ada2:	b002      	add	sp, #8
 800ada4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada8:	b003      	add	sp, #12
 800adaa:	4770      	bx	lr
 800adac:	20000050 	.word	0x20000050

0800adb0 <__ascii_mbtowc>:
 800adb0:	b082      	sub	sp, #8
 800adb2:	b901      	cbnz	r1, 800adb6 <__ascii_mbtowc+0x6>
 800adb4:	a901      	add	r1, sp, #4
 800adb6:	b142      	cbz	r2, 800adca <__ascii_mbtowc+0x1a>
 800adb8:	b14b      	cbz	r3, 800adce <__ascii_mbtowc+0x1e>
 800adba:	7813      	ldrb	r3, [r2, #0]
 800adbc:	600b      	str	r3, [r1, #0]
 800adbe:	7812      	ldrb	r2, [r2, #0]
 800adc0:	1e10      	subs	r0, r2, #0
 800adc2:	bf18      	it	ne
 800adc4:	2001      	movne	r0, #1
 800adc6:	b002      	add	sp, #8
 800adc8:	4770      	bx	lr
 800adca:	4610      	mov	r0, r2
 800adcc:	e7fb      	b.n	800adc6 <__ascii_mbtowc+0x16>
 800adce:	f06f 0001 	mvn.w	r0, #1
 800add2:	e7f8      	b.n	800adc6 <__ascii_mbtowc+0x16>

0800add4 <memmove>:
 800add4:	4288      	cmp	r0, r1
 800add6:	b510      	push	{r4, lr}
 800add8:	eb01 0402 	add.w	r4, r1, r2
 800addc:	d902      	bls.n	800ade4 <memmove+0x10>
 800adde:	4284      	cmp	r4, r0
 800ade0:	4623      	mov	r3, r4
 800ade2:	d807      	bhi.n	800adf4 <memmove+0x20>
 800ade4:	1e43      	subs	r3, r0, #1
 800ade6:	42a1      	cmp	r1, r4
 800ade8:	d008      	beq.n	800adfc <memmove+0x28>
 800adea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adf2:	e7f8      	b.n	800ade6 <memmove+0x12>
 800adf4:	4402      	add	r2, r0
 800adf6:	4601      	mov	r1, r0
 800adf8:	428a      	cmp	r2, r1
 800adfa:	d100      	bne.n	800adfe <memmove+0x2a>
 800adfc:	bd10      	pop	{r4, pc}
 800adfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae06:	e7f7      	b.n	800adf8 <memmove+0x24>

0800ae08 <__malloc_lock>:
 800ae08:	4801      	ldr	r0, [pc, #4]	; (800ae10 <__malloc_lock+0x8>)
 800ae0a:	f000 bc1f 	b.w	800b64c <__retarget_lock_acquire_recursive>
 800ae0e:	bf00      	nop
 800ae10:	20002484 	.word	0x20002484

0800ae14 <__malloc_unlock>:
 800ae14:	4801      	ldr	r0, [pc, #4]	; (800ae1c <__malloc_unlock+0x8>)
 800ae16:	f000 bc1a 	b.w	800b64e <__retarget_lock_release_recursive>
 800ae1a:	bf00      	nop
 800ae1c:	20002484 	.word	0x20002484

0800ae20 <_realloc_r>:
 800ae20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae24:	4680      	mov	r8, r0
 800ae26:	4614      	mov	r4, r2
 800ae28:	460e      	mov	r6, r1
 800ae2a:	b921      	cbnz	r1, 800ae36 <_realloc_r+0x16>
 800ae2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae30:	4611      	mov	r1, r2
 800ae32:	f7ff bdad 	b.w	800a990 <_malloc_r>
 800ae36:	b92a      	cbnz	r2, 800ae44 <_realloc_r+0x24>
 800ae38:	f7ff fd3e 	bl	800a8b8 <_free_r>
 800ae3c:	4625      	mov	r5, r4
 800ae3e:	4628      	mov	r0, r5
 800ae40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae44:	f000 fc6a 	bl	800b71c <_malloc_usable_size_r>
 800ae48:	4284      	cmp	r4, r0
 800ae4a:	4607      	mov	r7, r0
 800ae4c:	d802      	bhi.n	800ae54 <_realloc_r+0x34>
 800ae4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae52:	d812      	bhi.n	800ae7a <_realloc_r+0x5a>
 800ae54:	4621      	mov	r1, r4
 800ae56:	4640      	mov	r0, r8
 800ae58:	f7ff fd9a 	bl	800a990 <_malloc_r>
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d0ed      	beq.n	800ae3e <_realloc_r+0x1e>
 800ae62:	42bc      	cmp	r4, r7
 800ae64:	4622      	mov	r2, r4
 800ae66:	4631      	mov	r1, r6
 800ae68:	bf28      	it	cs
 800ae6a:	463a      	movcs	r2, r7
 800ae6c:	f7fd fc8e 	bl	800878c <memcpy>
 800ae70:	4631      	mov	r1, r6
 800ae72:	4640      	mov	r0, r8
 800ae74:	f7ff fd20 	bl	800a8b8 <_free_r>
 800ae78:	e7e1      	b.n	800ae3e <_realloc_r+0x1e>
 800ae7a:	4635      	mov	r5, r6
 800ae7c:	e7df      	b.n	800ae3e <_realloc_r+0x1e>

0800ae7e <__sfputc_r>:
 800ae7e:	6893      	ldr	r3, [r2, #8]
 800ae80:	3b01      	subs	r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	b410      	push	{r4}
 800ae86:	6093      	str	r3, [r2, #8]
 800ae88:	da08      	bge.n	800ae9c <__sfputc_r+0x1e>
 800ae8a:	6994      	ldr	r4, [r2, #24]
 800ae8c:	42a3      	cmp	r3, r4
 800ae8e:	db01      	blt.n	800ae94 <__sfputc_r+0x16>
 800ae90:	290a      	cmp	r1, #10
 800ae92:	d103      	bne.n	800ae9c <__sfputc_r+0x1e>
 800ae94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae98:	f000 b94a 	b.w	800b130 <__swbuf_r>
 800ae9c:	6813      	ldr	r3, [r2, #0]
 800ae9e:	1c58      	adds	r0, r3, #1
 800aea0:	6010      	str	r0, [r2, #0]
 800aea2:	7019      	strb	r1, [r3, #0]
 800aea4:	4608      	mov	r0, r1
 800aea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <__sfputs_r>:
 800aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeae:	4606      	mov	r6, r0
 800aeb0:	460f      	mov	r7, r1
 800aeb2:	4614      	mov	r4, r2
 800aeb4:	18d5      	adds	r5, r2, r3
 800aeb6:	42ac      	cmp	r4, r5
 800aeb8:	d101      	bne.n	800aebe <__sfputs_r+0x12>
 800aeba:	2000      	movs	r0, #0
 800aebc:	e007      	b.n	800aece <__sfputs_r+0x22>
 800aebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec2:	463a      	mov	r2, r7
 800aec4:	4630      	mov	r0, r6
 800aec6:	f7ff ffda 	bl	800ae7e <__sfputc_r>
 800aeca:	1c43      	adds	r3, r0, #1
 800aecc:	d1f3      	bne.n	800aeb6 <__sfputs_r+0xa>
 800aece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aed0 <_vfiprintf_r>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	460d      	mov	r5, r1
 800aed6:	b09d      	sub	sp, #116	; 0x74
 800aed8:	4614      	mov	r4, r2
 800aeda:	4698      	mov	r8, r3
 800aedc:	4606      	mov	r6, r0
 800aede:	b118      	cbz	r0, 800aee8 <_vfiprintf_r+0x18>
 800aee0:	6983      	ldr	r3, [r0, #24]
 800aee2:	b90b      	cbnz	r3, 800aee8 <_vfiprintf_r+0x18>
 800aee4:	f000 fb14 	bl	800b510 <__sinit>
 800aee8:	4b89      	ldr	r3, [pc, #548]	; (800b110 <_vfiprintf_r+0x240>)
 800aeea:	429d      	cmp	r5, r3
 800aeec:	d11b      	bne.n	800af26 <_vfiprintf_r+0x56>
 800aeee:	6875      	ldr	r5, [r6, #4]
 800aef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aef2:	07d9      	lsls	r1, r3, #31
 800aef4:	d405      	bmi.n	800af02 <_vfiprintf_r+0x32>
 800aef6:	89ab      	ldrh	r3, [r5, #12]
 800aef8:	059a      	lsls	r2, r3, #22
 800aefa:	d402      	bmi.n	800af02 <_vfiprintf_r+0x32>
 800aefc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aefe:	f000 fba5 	bl	800b64c <__retarget_lock_acquire_recursive>
 800af02:	89ab      	ldrh	r3, [r5, #12]
 800af04:	071b      	lsls	r3, r3, #28
 800af06:	d501      	bpl.n	800af0c <_vfiprintf_r+0x3c>
 800af08:	692b      	ldr	r3, [r5, #16]
 800af0a:	b9eb      	cbnz	r3, 800af48 <_vfiprintf_r+0x78>
 800af0c:	4629      	mov	r1, r5
 800af0e:	4630      	mov	r0, r6
 800af10:	f000 f96e 	bl	800b1f0 <__swsetup_r>
 800af14:	b1c0      	cbz	r0, 800af48 <_vfiprintf_r+0x78>
 800af16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af18:	07dc      	lsls	r4, r3, #31
 800af1a:	d50e      	bpl.n	800af3a <_vfiprintf_r+0x6a>
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	b01d      	add	sp, #116	; 0x74
 800af22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af26:	4b7b      	ldr	r3, [pc, #492]	; (800b114 <_vfiprintf_r+0x244>)
 800af28:	429d      	cmp	r5, r3
 800af2a:	d101      	bne.n	800af30 <_vfiprintf_r+0x60>
 800af2c:	68b5      	ldr	r5, [r6, #8]
 800af2e:	e7df      	b.n	800aef0 <_vfiprintf_r+0x20>
 800af30:	4b79      	ldr	r3, [pc, #484]	; (800b118 <_vfiprintf_r+0x248>)
 800af32:	429d      	cmp	r5, r3
 800af34:	bf08      	it	eq
 800af36:	68f5      	ldreq	r5, [r6, #12]
 800af38:	e7da      	b.n	800aef0 <_vfiprintf_r+0x20>
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	0598      	lsls	r0, r3, #22
 800af3e:	d4ed      	bmi.n	800af1c <_vfiprintf_r+0x4c>
 800af40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af42:	f000 fb84 	bl	800b64e <__retarget_lock_release_recursive>
 800af46:	e7e9      	b.n	800af1c <_vfiprintf_r+0x4c>
 800af48:	2300      	movs	r3, #0
 800af4a:	9309      	str	r3, [sp, #36]	; 0x24
 800af4c:	2320      	movs	r3, #32
 800af4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af52:	f8cd 800c 	str.w	r8, [sp, #12]
 800af56:	2330      	movs	r3, #48	; 0x30
 800af58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b11c <_vfiprintf_r+0x24c>
 800af5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af60:	f04f 0901 	mov.w	r9, #1
 800af64:	4623      	mov	r3, r4
 800af66:	469a      	mov	sl, r3
 800af68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af6c:	b10a      	cbz	r2, 800af72 <_vfiprintf_r+0xa2>
 800af6e:	2a25      	cmp	r2, #37	; 0x25
 800af70:	d1f9      	bne.n	800af66 <_vfiprintf_r+0x96>
 800af72:	ebba 0b04 	subs.w	fp, sl, r4
 800af76:	d00b      	beq.n	800af90 <_vfiprintf_r+0xc0>
 800af78:	465b      	mov	r3, fp
 800af7a:	4622      	mov	r2, r4
 800af7c:	4629      	mov	r1, r5
 800af7e:	4630      	mov	r0, r6
 800af80:	f7ff ff94 	bl	800aeac <__sfputs_r>
 800af84:	3001      	adds	r0, #1
 800af86:	f000 80aa 	beq.w	800b0de <_vfiprintf_r+0x20e>
 800af8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af8c:	445a      	add	r2, fp
 800af8e:	9209      	str	r2, [sp, #36]	; 0x24
 800af90:	f89a 3000 	ldrb.w	r3, [sl]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 80a2 	beq.w	800b0de <_vfiprintf_r+0x20e>
 800af9a:	2300      	movs	r3, #0
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afa4:	f10a 0a01 	add.w	sl, sl, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	9307      	str	r3, [sp, #28]
 800afac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afb0:	931a      	str	r3, [sp, #104]	; 0x68
 800afb2:	4654      	mov	r4, sl
 800afb4:	2205      	movs	r2, #5
 800afb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afba:	4858      	ldr	r0, [pc, #352]	; (800b11c <_vfiprintf_r+0x24c>)
 800afbc:	f7f5 f928 	bl	8000210 <memchr>
 800afc0:	9a04      	ldr	r2, [sp, #16]
 800afc2:	b9d8      	cbnz	r0, 800affc <_vfiprintf_r+0x12c>
 800afc4:	06d1      	lsls	r1, r2, #27
 800afc6:	bf44      	itt	mi
 800afc8:	2320      	movmi	r3, #32
 800afca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afce:	0713      	lsls	r3, r2, #28
 800afd0:	bf44      	itt	mi
 800afd2:	232b      	movmi	r3, #43	; 0x2b
 800afd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afd8:	f89a 3000 	ldrb.w	r3, [sl]
 800afdc:	2b2a      	cmp	r3, #42	; 0x2a
 800afde:	d015      	beq.n	800b00c <_vfiprintf_r+0x13c>
 800afe0:	9a07      	ldr	r2, [sp, #28]
 800afe2:	4654      	mov	r4, sl
 800afe4:	2000      	movs	r0, #0
 800afe6:	f04f 0c0a 	mov.w	ip, #10
 800afea:	4621      	mov	r1, r4
 800afec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aff0:	3b30      	subs	r3, #48	; 0x30
 800aff2:	2b09      	cmp	r3, #9
 800aff4:	d94e      	bls.n	800b094 <_vfiprintf_r+0x1c4>
 800aff6:	b1b0      	cbz	r0, 800b026 <_vfiprintf_r+0x156>
 800aff8:	9207      	str	r2, [sp, #28]
 800affa:	e014      	b.n	800b026 <_vfiprintf_r+0x156>
 800affc:	eba0 0308 	sub.w	r3, r0, r8
 800b000:	fa09 f303 	lsl.w	r3, r9, r3
 800b004:	4313      	orrs	r3, r2
 800b006:	9304      	str	r3, [sp, #16]
 800b008:	46a2      	mov	sl, r4
 800b00a:	e7d2      	b.n	800afb2 <_vfiprintf_r+0xe2>
 800b00c:	9b03      	ldr	r3, [sp, #12]
 800b00e:	1d19      	adds	r1, r3, #4
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	9103      	str	r1, [sp, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	bfbb      	ittet	lt
 800b018:	425b      	neglt	r3, r3
 800b01a:	f042 0202 	orrlt.w	r2, r2, #2
 800b01e:	9307      	strge	r3, [sp, #28]
 800b020:	9307      	strlt	r3, [sp, #28]
 800b022:	bfb8      	it	lt
 800b024:	9204      	strlt	r2, [sp, #16]
 800b026:	7823      	ldrb	r3, [r4, #0]
 800b028:	2b2e      	cmp	r3, #46	; 0x2e
 800b02a:	d10c      	bne.n	800b046 <_vfiprintf_r+0x176>
 800b02c:	7863      	ldrb	r3, [r4, #1]
 800b02e:	2b2a      	cmp	r3, #42	; 0x2a
 800b030:	d135      	bne.n	800b09e <_vfiprintf_r+0x1ce>
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	1d1a      	adds	r2, r3, #4
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	9203      	str	r2, [sp, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bfb8      	it	lt
 800b03e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b042:	3402      	adds	r4, #2
 800b044:	9305      	str	r3, [sp, #20]
 800b046:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b12c <_vfiprintf_r+0x25c>
 800b04a:	7821      	ldrb	r1, [r4, #0]
 800b04c:	2203      	movs	r2, #3
 800b04e:	4650      	mov	r0, sl
 800b050:	f7f5 f8de 	bl	8000210 <memchr>
 800b054:	b140      	cbz	r0, 800b068 <_vfiprintf_r+0x198>
 800b056:	2340      	movs	r3, #64	; 0x40
 800b058:	eba0 000a 	sub.w	r0, r0, sl
 800b05c:	fa03 f000 	lsl.w	r0, r3, r0
 800b060:	9b04      	ldr	r3, [sp, #16]
 800b062:	4303      	orrs	r3, r0
 800b064:	3401      	adds	r4, #1
 800b066:	9304      	str	r3, [sp, #16]
 800b068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b06c:	482c      	ldr	r0, [pc, #176]	; (800b120 <_vfiprintf_r+0x250>)
 800b06e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b072:	2206      	movs	r2, #6
 800b074:	f7f5 f8cc 	bl	8000210 <memchr>
 800b078:	2800      	cmp	r0, #0
 800b07a:	d03f      	beq.n	800b0fc <_vfiprintf_r+0x22c>
 800b07c:	4b29      	ldr	r3, [pc, #164]	; (800b124 <_vfiprintf_r+0x254>)
 800b07e:	bb1b      	cbnz	r3, 800b0c8 <_vfiprintf_r+0x1f8>
 800b080:	9b03      	ldr	r3, [sp, #12]
 800b082:	3307      	adds	r3, #7
 800b084:	f023 0307 	bic.w	r3, r3, #7
 800b088:	3308      	adds	r3, #8
 800b08a:	9303      	str	r3, [sp, #12]
 800b08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08e:	443b      	add	r3, r7
 800b090:	9309      	str	r3, [sp, #36]	; 0x24
 800b092:	e767      	b.n	800af64 <_vfiprintf_r+0x94>
 800b094:	fb0c 3202 	mla	r2, ip, r2, r3
 800b098:	460c      	mov	r4, r1
 800b09a:	2001      	movs	r0, #1
 800b09c:	e7a5      	b.n	800afea <_vfiprintf_r+0x11a>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	3401      	adds	r4, #1
 800b0a2:	9305      	str	r3, [sp, #20]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	f04f 0c0a 	mov.w	ip, #10
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0b0:	3a30      	subs	r2, #48	; 0x30
 800b0b2:	2a09      	cmp	r2, #9
 800b0b4:	d903      	bls.n	800b0be <_vfiprintf_r+0x1ee>
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d0c5      	beq.n	800b046 <_vfiprintf_r+0x176>
 800b0ba:	9105      	str	r1, [sp, #20]
 800b0bc:	e7c3      	b.n	800b046 <_vfiprintf_r+0x176>
 800b0be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e7f0      	b.n	800b0aa <_vfiprintf_r+0x1da>
 800b0c8:	ab03      	add	r3, sp, #12
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	462a      	mov	r2, r5
 800b0ce:	4b16      	ldr	r3, [pc, #88]	; (800b128 <_vfiprintf_r+0x258>)
 800b0d0:	a904      	add	r1, sp, #16
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f7fd fc10 	bl	80088f8 <_printf_float>
 800b0d8:	4607      	mov	r7, r0
 800b0da:	1c78      	adds	r0, r7, #1
 800b0dc:	d1d6      	bne.n	800b08c <_vfiprintf_r+0x1bc>
 800b0de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0e0:	07d9      	lsls	r1, r3, #31
 800b0e2:	d405      	bmi.n	800b0f0 <_vfiprintf_r+0x220>
 800b0e4:	89ab      	ldrh	r3, [r5, #12]
 800b0e6:	059a      	lsls	r2, r3, #22
 800b0e8:	d402      	bmi.n	800b0f0 <_vfiprintf_r+0x220>
 800b0ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ec:	f000 faaf 	bl	800b64e <__retarget_lock_release_recursive>
 800b0f0:	89ab      	ldrh	r3, [r5, #12]
 800b0f2:	065b      	lsls	r3, r3, #25
 800b0f4:	f53f af12 	bmi.w	800af1c <_vfiprintf_r+0x4c>
 800b0f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0fa:	e711      	b.n	800af20 <_vfiprintf_r+0x50>
 800b0fc:	ab03      	add	r3, sp, #12
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	462a      	mov	r2, r5
 800b102:	4b09      	ldr	r3, [pc, #36]	; (800b128 <_vfiprintf_r+0x258>)
 800b104:	a904      	add	r1, sp, #16
 800b106:	4630      	mov	r0, r6
 800b108:	f7fd fe9a 	bl	8008e40 <_printf_i>
 800b10c:	e7e4      	b.n	800b0d8 <_vfiprintf_r+0x208>
 800b10e:	bf00      	nop
 800b110:	0800d2c4 	.word	0x0800d2c4
 800b114:	0800d2e4 	.word	0x0800d2e4
 800b118:	0800d2a4 	.word	0x0800d2a4
 800b11c:	0800d14c 	.word	0x0800d14c
 800b120:	0800d156 	.word	0x0800d156
 800b124:	080088f9 	.word	0x080088f9
 800b128:	0800aead 	.word	0x0800aead
 800b12c:	0800d152 	.word	0x0800d152

0800b130 <__swbuf_r>:
 800b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b132:	460e      	mov	r6, r1
 800b134:	4614      	mov	r4, r2
 800b136:	4605      	mov	r5, r0
 800b138:	b118      	cbz	r0, 800b142 <__swbuf_r+0x12>
 800b13a:	6983      	ldr	r3, [r0, #24]
 800b13c:	b90b      	cbnz	r3, 800b142 <__swbuf_r+0x12>
 800b13e:	f000 f9e7 	bl	800b510 <__sinit>
 800b142:	4b21      	ldr	r3, [pc, #132]	; (800b1c8 <__swbuf_r+0x98>)
 800b144:	429c      	cmp	r4, r3
 800b146:	d12b      	bne.n	800b1a0 <__swbuf_r+0x70>
 800b148:	686c      	ldr	r4, [r5, #4]
 800b14a:	69a3      	ldr	r3, [r4, #24]
 800b14c:	60a3      	str	r3, [r4, #8]
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	071a      	lsls	r2, r3, #28
 800b152:	d52f      	bpl.n	800b1b4 <__swbuf_r+0x84>
 800b154:	6923      	ldr	r3, [r4, #16]
 800b156:	b36b      	cbz	r3, 800b1b4 <__swbuf_r+0x84>
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	6820      	ldr	r0, [r4, #0]
 800b15c:	1ac0      	subs	r0, r0, r3
 800b15e:	6963      	ldr	r3, [r4, #20]
 800b160:	b2f6      	uxtb	r6, r6
 800b162:	4283      	cmp	r3, r0
 800b164:	4637      	mov	r7, r6
 800b166:	dc04      	bgt.n	800b172 <__swbuf_r+0x42>
 800b168:	4621      	mov	r1, r4
 800b16a:	4628      	mov	r0, r5
 800b16c:	f000 f93c 	bl	800b3e8 <_fflush_r>
 800b170:	bb30      	cbnz	r0, 800b1c0 <__swbuf_r+0x90>
 800b172:	68a3      	ldr	r3, [r4, #8]
 800b174:	3b01      	subs	r3, #1
 800b176:	60a3      	str	r3, [r4, #8]
 800b178:	6823      	ldr	r3, [r4, #0]
 800b17a:	1c5a      	adds	r2, r3, #1
 800b17c:	6022      	str	r2, [r4, #0]
 800b17e:	701e      	strb	r6, [r3, #0]
 800b180:	6963      	ldr	r3, [r4, #20]
 800b182:	3001      	adds	r0, #1
 800b184:	4283      	cmp	r3, r0
 800b186:	d004      	beq.n	800b192 <__swbuf_r+0x62>
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	07db      	lsls	r3, r3, #31
 800b18c:	d506      	bpl.n	800b19c <__swbuf_r+0x6c>
 800b18e:	2e0a      	cmp	r6, #10
 800b190:	d104      	bne.n	800b19c <__swbuf_r+0x6c>
 800b192:	4621      	mov	r1, r4
 800b194:	4628      	mov	r0, r5
 800b196:	f000 f927 	bl	800b3e8 <_fflush_r>
 800b19a:	b988      	cbnz	r0, 800b1c0 <__swbuf_r+0x90>
 800b19c:	4638      	mov	r0, r7
 800b19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a0:	4b0a      	ldr	r3, [pc, #40]	; (800b1cc <__swbuf_r+0x9c>)
 800b1a2:	429c      	cmp	r4, r3
 800b1a4:	d101      	bne.n	800b1aa <__swbuf_r+0x7a>
 800b1a6:	68ac      	ldr	r4, [r5, #8]
 800b1a8:	e7cf      	b.n	800b14a <__swbuf_r+0x1a>
 800b1aa:	4b09      	ldr	r3, [pc, #36]	; (800b1d0 <__swbuf_r+0xa0>)
 800b1ac:	429c      	cmp	r4, r3
 800b1ae:	bf08      	it	eq
 800b1b0:	68ec      	ldreq	r4, [r5, #12]
 800b1b2:	e7ca      	b.n	800b14a <__swbuf_r+0x1a>
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f000 f81a 	bl	800b1f0 <__swsetup_r>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d0cb      	beq.n	800b158 <__swbuf_r+0x28>
 800b1c0:	f04f 37ff 	mov.w	r7, #4294967295
 800b1c4:	e7ea      	b.n	800b19c <__swbuf_r+0x6c>
 800b1c6:	bf00      	nop
 800b1c8:	0800d2c4 	.word	0x0800d2c4
 800b1cc:	0800d2e4 	.word	0x0800d2e4
 800b1d0:	0800d2a4 	.word	0x0800d2a4

0800b1d4 <__ascii_wctomb>:
 800b1d4:	b149      	cbz	r1, 800b1ea <__ascii_wctomb+0x16>
 800b1d6:	2aff      	cmp	r2, #255	; 0xff
 800b1d8:	bf85      	ittet	hi
 800b1da:	238a      	movhi	r3, #138	; 0x8a
 800b1dc:	6003      	strhi	r3, [r0, #0]
 800b1de:	700a      	strbls	r2, [r1, #0]
 800b1e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1e4:	bf98      	it	ls
 800b1e6:	2001      	movls	r0, #1
 800b1e8:	4770      	bx	lr
 800b1ea:	4608      	mov	r0, r1
 800b1ec:	4770      	bx	lr
	...

0800b1f0 <__swsetup_r>:
 800b1f0:	4b32      	ldr	r3, [pc, #200]	; (800b2bc <__swsetup_r+0xcc>)
 800b1f2:	b570      	push	{r4, r5, r6, lr}
 800b1f4:	681d      	ldr	r5, [r3, #0]
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	b125      	cbz	r5, 800b206 <__swsetup_r+0x16>
 800b1fc:	69ab      	ldr	r3, [r5, #24]
 800b1fe:	b913      	cbnz	r3, 800b206 <__swsetup_r+0x16>
 800b200:	4628      	mov	r0, r5
 800b202:	f000 f985 	bl	800b510 <__sinit>
 800b206:	4b2e      	ldr	r3, [pc, #184]	; (800b2c0 <__swsetup_r+0xd0>)
 800b208:	429c      	cmp	r4, r3
 800b20a:	d10f      	bne.n	800b22c <__swsetup_r+0x3c>
 800b20c:	686c      	ldr	r4, [r5, #4]
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b214:	0719      	lsls	r1, r3, #28
 800b216:	d42c      	bmi.n	800b272 <__swsetup_r+0x82>
 800b218:	06dd      	lsls	r5, r3, #27
 800b21a:	d411      	bmi.n	800b240 <__swsetup_r+0x50>
 800b21c:	2309      	movs	r3, #9
 800b21e:	6033      	str	r3, [r6, #0]
 800b220:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b224:	81a3      	strh	r3, [r4, #12]
 800b226:	f04f 30ff 	mov.w	r0, #4294967295
 800b22a:	e03e      	b.n	800b2aa <__swsetup_r+0xba>
 800b22c:	4b25      	ldr	r3, [pc, #148]	; (800b2c4 <__swsetup_r+0xd4>)
 800b22e:	429c      	cmp	r4, r3
 800b230:	d101      	bne.n	800b236 <__swsetup_r+0x46>
 800b232:	68ac      	ldr	r4, [r5, #8]
 800b234:	e7eb      	b.n	800b20e <__swsetup_r+0x1e>
 800b236:	4b24      	ldr	r3, [pc, #144]	; (800b2c8 <__swsetup_r+0xd8>)
 800b238:	429c      	cmp	r4, r3
 800b23a:	bf08      	it	eq
 800b23c:	68ec      	ldreq	r4, [r5, #12]
 800b23e:	e7e6      	b.n	800b20e <__swsetup_r+0x1e>
 800b240:	0758      	lsls	r0, r3, #29
 800b242:	d512      	bpl.n	800b26a <__swsetup_r+0x7a>
 800b244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b246:	b141      	cbz	r1, 800b25a <__swsetup_r+0x6a>
 800b248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b24c:	4299      	cmp	r1, r3
 800b24e:	d002      	beq.n	800b256 <__swsetup_r+0x66>
 800b250:	4630      	mov	r0, r6
 800b252:	f7ff fb31 	bl	800a8b8 <_free_r>
 800b256:	2300      	movs	r3, #0
 800b258:	6363      	str	r3, [r4, #52]	; 0x34
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b260:	81a3      	strh	r3, [r4, #12]
 800b262:	2300      	movs	r3, #0
 800b264:	6063      	str	r3, [r4, #4]
 800b266:	6923      	ldr	r3, [r4, #16]
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	f043 0308 	orr.w	r3, r3, #8
 800b270:	81a3      	strh	r3, [r4, #12]
 800b272:	6923      	ldr	r3, [r4, #16]
 800b274:	b94b      	cbnz	r3, 800b28a <__swsetup_r+0x9a>
 800b276:	89a3      	ldrh	r3, [r4, #12]
 800b278:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b27c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b280:	d003      	beq.n	800b28a <__swsetup_r+0x9a>
 800b282:	4621      	mov	r1, r4
 800b284:	4630      	mov	r0, r6
 800b286:	f000 fa09 	bl	800b69c <__smakebuf_r>
 800b28a:	89a0      	ldrh	r0, [r4, #12]
 800b28c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b290:	f010 0301 	ands.w	r3, r0, #1
 800b294:	d00a      	beq.n	800b2ac <__swsetup_r+0xbc>
 800b296:	2300      	movs	r3, #0
 800b298:	60a3      	str	r3, [r4, #8]
 800b29a:	6963      	ldr	r3, [r4, #20]
 800b29c:	425b      	negs	r3, r3
 800b29e:	61a3      	str	r3, [r4, #24]
 800b2a0:	6923      	ldr	r3, [r4, #16]
 800b2a2:	b943      	cbnz	r3, 800b2b6 <__swsetup_r+0xc6>
 800b2a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2a8:	d1ba      	bne.n	800b220 <__swsetup_r+0x30>
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	0781      	lsls	r1, r0, #30
 800b2ae:	bf58      	it	pl
 800b2b0:	6963      	ldrpl	r3, [r4, #20]
 800b2b2:	60a3      	str	r3, [r4, #8]
 800b2b4:	e7f4      	b.n	800b2a0 <__swsetup_r+0xb0>
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e7f7      	b.n	800b2aa <__swsetup_r+0xba>
 800b2ba:	bf00      	nop
 800b2bc:	20000050 	.word	0x20000050
 800b2c0:	0800d2c4 	.word	0x0800d2c4
 800b2c4:	0800d2e4 	.word	0x0800d2e4
 800b2c8:	0800d2a4 	.word	0x0800d2a4

0800b2cc <abort>:
 800b2cc:	b508      	push	{r3, lr}
 800b2ce:	2006      	movs	r0, #6
 800b2d0:	f000 fa54 	bl	800b77c <raise>
 800b2d4:	2001      	movs	r0, #1
 800b2d6:	f7f6 f8b1 	bl	800143c <_exit>
	...

0800b2dc <__sflush_r>:
 800b2dc:	898a      	ldrh	r2, [r1, #12]
 800b2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	0710      	lsls	r0, r2, #28
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	d458      	bmi.n	800b39c <__sflush_r+0xc0>
 800b2ea:	684b      	ldr	r3, [r1, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dc05      	bgt.n	800b2fc <__sflush_r+0x20>
 800b2f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	dc02      	bgt.n	800b2fc <__sflush_r+0x20>
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2fe:	2e00      	cmp	r6, #0
 800b300:	d0f9      	beq.n	800b2f6 <__sflush_r+0x1a>
 800b302:	2300      	movs	r3, #0
 800b304:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b308:	682f      	ldr	r7, [r5, #0]
 800b30a:	602b      	str	r3, [r5, #0]
 800b30c:	d032      	beq.n	800b374 <__sflush_r+0x98>
 800b30e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b310:	89a3      	ldrh	r3, [r4, #12]
 800b312:	075a      	lsls	r2, r3, #29
 800b314:	d505      	bpl.n	800b322 <__sflush_r+0x46>
 800b316:	6863      	ldr	r3, [r4, #4]
 800b318:	1ac0      	subs	r0, r0, r3
 800b31a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b31c:	b10b      	cbz	r3, 800b322 <__sflush_r+0x46>
 800b31e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b320:	1ac0      	subs	r0, r0, r3
 800b322:	2300      	movs	r3, #0
 800b324:	4602      	mov	r2, r0
 800b326:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b328:	6a21      	ldr	r1, [r4, #32]
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b0      	blx	r6
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	d106      	bne.n	800b342 <__sflush_r+0x66>
 800b334:	6829      	ldr	r1, [r5, #0]
 800b336:	291d      	cmp	r1, #29
 800b338:	d82c      	bhi.n	800b394 <__sflush_r+0xb8>
 800b33a:	4a2a      	ldr	r2, [pc, #168]	; (800b3e4 <__sflush_r+0x108>)
 800b33c:	40ca      	lsrs	r2, r1
 800b33e:	07d6      	lsls	r6, r2, #31
 800b340:	d528      	bpl.n	800b394 <__sflush_r+0xb8>
 800b342:	2200      	movs	r2, #0
 800b344:	6062      	str	r2, [r4, #4]
 800b346:	04d9      	lsls	r1, r3, #19
 800b348:	6922      	ldr	r2, [r4, #16]
 800b34a:	6022      	str	r2, [r4, #0]
 800b34c:	d504      	bpl.n	800b358 <__sflush_r+0x7c>
 800b34e:	1c42      	adds	r2, r0, #1
 800b350:	d101      	bne.n	800b356 <__sflush_r+0x7a>
 800b352:	682b      	ldr	r3, [r5, #0]
 800b354:	b903      	cbnz	r3, 800b358 <__sflush_r+0x7c>
 800b356:	6560      	str	r0, [r4, #84]	; 0x54
 800b358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b35a:	602f      	str	r7, [r5, #0]
 800b35c:	2900      	cmp	r1, #0
 800b35e:	d0ca      	beq.n	800b2f6 <__sflush_r+0x1a>
 800b360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b364:	4299      	cmp	r1, r3
 800b366:	d002      	beq.n	800b36e <__sflush_r+0x92>
 800b368:	4628      	mov	r0, r5
 800b36a:	f7ff faa5 	bl	800a8b8 <_free_r>
 800b36e:	2000      	movs	r0, #0
 800b370:	6360      	str	r0, [r4, #52]	; 0x34
 800b372:	e7c1      	b.n	800b2f8 <__sflush_r+0x1c>
 800b374:	6a21      	ldr	r1, [r4, #32]
 800b376:	2301      	movs	r3, #1
 800b378:	4628      	mov	r0, r5
 800b37a:	47b0      	blx	r6
 800b37c:	1c41      	adds	r1, r0, #1
 800b37e:	d1c7      	bne.n	800b310 <__sflush_r+0x34>
 800b380:	682b      	ldr	r3, [r5, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0c4      	beq.n	800b310 <__sflush_r+0x34>
 800b386:	2b1d      	cmp	r3, #29
 800b388:	d001      	beq.n	800b38e <__sflush_r+0xb2>
 800b38a:	2b16      	cmp	r3, #22
 800b38c:	d101      	bne.n	800b392 <__sflush_r+0xb6>
 800b38e:	602f      	str	r7, [r5, #0]
 800b390:	e7b1      	b.n	800b2f6 <__sflush_r+0x1a>
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	e7ad      	b.n	800b2f8 <__sflush_r+0x1c>
 800b39c:	690f      	ldr	r7, [r1, #16]
 800b39e:	2f00      	cmp	r7, #0
 800b3a0:	d0a9      	beq.n	800b2f6 <__sflush_r+0x1a>
 800b3a2:	0793      	lsls	r3, r2, #30
 800b3a4:	680e      	ldr	r6, [r1, #0]
 800b3a6:	bf08      	it	eq
 800b3a8:	694b      	ldreq	r3, [r1, #20]
 800b3aa:	600f      	str	r7, [r1, #0]
 800b3ac:	bf18      	it	ne
 800b3ae:	2300      	movne	r3, #0
 800b3b0:	eba6 0807 	sub.w	r8, r6, r7
 800b3b4:	608b      	str	r3, [r1, #8]
 800b3b6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ba:	dd9c      	ble.n	800b2f6 <__sflush_r+0x1a>
 800b3bc:	6a21      	ldr	r1, [r4, #32]
 800b3be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3c0:	4643      	mov	r3, r8
 800b3c2:	463a      	mov	r2, r7
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b0      	blx	r6
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	dc06      	bgt.n	800b3da <__sflush_r+0xfe>
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d2:	81a3      	strh	r3, [r4, #12]
 800b3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d8:	e78e      	b.n	800b2f8 <__sflush_r+0x1c>
 800b3da:	4407      	add	r7, r0
 800b3dc:	eba8 0800 	sub.w	r8, r8, r0
 800b3e0:	e7e9      	b.n	800b3b6 <__sflush_r+0xda>
 800b3e2:	bf00      	nop
 800b3e4:	20400001 	.word	0x20400001

0800b3e8 <_fflush_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	690b      	ldr	r3, [r1, #16]
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	b913      	cbnz	r3, 800b3f8 <_fflush_r+0x10>
 800b3f2:	2500      	movs	r5, #0
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	b118      	cbz	r0, 800b402 <_fflush_r+0x1a>
 800b3fa:	6983      	ldr	r3, [r0, #24]
 800b3fc:	b90b      	cbnz	r3, 800b402 <_fflush_r+0x1a>
 800b3fe:	f000 f887 	bl	800b510 <__sinit>
 800b402:	4b14      	ldr	r3, [pc, #80]	; (800b454 <_fflush_r+0x6c>)
 800b404:	429c      	cmp	r4, r3
 800b406:	d11b      	bne.n	800b440 <_fflush_r+0x58>
 800b408:	686c      	ldr	r4, [r5, #4]
 800b40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d0ef      	beq.n	800b3f2 <_fflush_r+0xa>
 800b412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b414:	07d0      	lsls	r0, r2, #31
 800b416:	d404      	bmi.n	800b422 <_fflush_r+0x3a>
 800b418:	0599      	lsls	r1, r3, #22
 800b41a:	d402      	bmi.n	800b422 <_fflush_r+0x3a>
 800b41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b41e:	f000 f915 	bl	800b64c <__retarget_lock_acquire_recursive>
 800b422:	4628      	mov	r0, r5
 800b424:	4621      	mov	r1, r4
 800b426:	f7ff ff59 	bl	800b2dc <__sflush_r>
 800b42a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b42c:	07da      	lsls	r2, r3, #31
 800b42e:	4605      	mov	r5, r0
 800b430:	d4e0      	bmi.n	800b3f4 <_fflush_r+0xc>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	059b      	lsls	r3, r3, #22
 800b436:	d4dd      	bmi.n	800b3f4 <_fflush_r+0xc>
 800b438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b43a:	f000 f908 	bl	800b64e <__retarget_lock_release_recursive>
 800b43e:	e7d9      	b.n	800b3f4 <_fflush_r+0xc>
 800b440:	4b05      	ldr	r3, [pc, #20]	; (800b458 <_fflush_r+0x70>)
 800b442:	429c      	cmp	r4, r3
 800b444:	d101      	bne.n	800b44a <_fflush_r+0x62>
 800b446:	68ac      	ldr	r4, [r5, #8]
 800b448:	e7df      	b.n	800b40a <_fflush_r+0x22>
 800b44a:	4b04      	ldr	r3, [pc, #16]	; (800b45c <_fflush_r+0x74>)
 800b44c:	429c      	cmp	r4, r3
 800b44e:	bf08      	it	eq
 800b450:	68ec      	ldreq	r4, [r5, #12]
 800b452:	e7da      	b.n	800b40a <_fflush_r+0x22>
 800b454:	0800d2c4 	.word	0x0800d2c4
 800b458:	0800d2e4 	.word	0x0800d2e4
 800b45c:	0800d2a4 	.word	0x0800d2a4

0800b460 <std>:
 800b460:	2300      	movs	r3, #0
 800b462:	b510      	push	{r4, lr}
 800b464:	4604      	mov	r4, r0
 800b466:	e9c0 3300 	strd	r3, r3, [r0]
 800b46a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b46e:	6083      	str	r3, [r0, #8]
 800b470:	8181      	strh	r1, [r0, #12]
 800b472:	6643      	str	r3, [r0, #100]	; 0x64
 800b474:	81c2      	strh	r2, [r0, #14]
 800b476:	6183      	str	r3, [r0, #24]
 800b478:	4619      	mov	r1, r3
 800b47a:	2208      	movs	r2, #8
 800b47c:	305c      	adds	r0, #92	; 0x5c
 800b47e:	f7fd f993 	bl	80087a8 <memset>
 800b482:	4b05      	ldr	r3, [pc, #20]	; (800b498 <std+0x38>)
 800b484:	6263      	str	r3, [r4, #36]	; 0x24
 800b486:	4b05      	ldr	r3, [pc, #20]	; (800b49c <std+0x3c>)
 800b488:	62a3      	str	r3, [r4, #40]	; 0x28
 800b48a:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <std+0x40>)
 800b48c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b48e:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <std+0x44>)
 800b490:	6224      	str	r4, [r4, #32]
 800b492:	6323      	str	r3, [r4, #48]	; 0x30
 800b494:	bd10      	pop	{r4, pc}
 800b496:	bf00      	nop
 800b498:	0800b7b5 	.word	0x0800b7b5
 800b49c:	0800b7d7 	.word	0x0800b7d7
 800b4a0:	0800b80f 	.word	0x0800b80f
 800b4a4:	0800b833 	.word	0x0800b833

0800b4a8 <_cleanup_r>:
 800b4a8:	4901      	ldr	r1, [pc, #4]	; (800b4b0 <_cleanup_r+0x8>)
 800b4aa:	f000 b8af 	b.w	800b60c <_fwalk_reent>
 800b4ae:	bf00      	nop
 800b4b0:	0800b3e9 	.word	0x0800b3e9

0800b4b4 <__sfmoreglue>:
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	2268      	movs	r2, #104	; 0x68
 800b4b8:	1e4d      	subs	r5, r1, #1
 800b4ba:	4355      	muls	r5, r2
 800b4bc:	460e      	mov	r6, r1
 800b4be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4c2:	f7ff fa65 	bl	800a990 <_malloc_r>
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	b140      	cbz	r0, 800b4dc <__sfmoreglue+0x28>
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	e9c0 1600 	strd	r1, r6, [r0]
 800b4d0:	300c      	adds	r0, #12
 800b4d2:	60a0      	str	r0, [r4, #8]
 800b4d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4d8:	f7fd f966 	bl	80087a8 <memset>
 800b4dc:	4620      	mov	r0, r4
 800b4de:	bd70      	pop	{r4, r5, r6, pc}

0800b4e0 <__sfp_lock_acquire>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	; (800b4e8 <__sfp_lock_acquire+0x8>)
 800b4e2:	f000 b8b3 	b.w	800b64c <__retarget_lock_acquire_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	20002485 	.word	0x20002485

0800b4ec <__sfp_lock_release>:
 800b4ec:	4801      	ldr	r0, [pc, #4]	; (800b4f4 <__sfp_lock_release+0x8>)
 800b4ee:	f000 b8ae 	b.w	800b64e <__retarget_lock_release_recursive>
 800b4f2:	bf00      	nop
 800b4f4:	20002485 	.word	0x20002485

0800b4f8 <__sinit_lock_acquire>:
 800b4f8:	4801      	ldr	r0, [pc, #4]	; (800b500 <__sinit_lock_acquire+0x8>)
 800b4fa:	f000 b8a7 	b.w	800b64c <__retarget_lock_acquire_recursive>
 800b4fe:	bf00      	nop
 800b500:	20002486 	.word	0x20002486

0800b504 <__sinit_lock_release>:
 800b504:	4801      	ldr	r0, [pc, #4]	; (800b50c <__sinit_lock_release+0x8>)
 800b506:	f000 b8a2 	b.w	800b64e <__retarget_lock_release_recursive>
 800b50a:	bf00      	nop
 800b50c:	20002486 	.word	0x20002486

0800b510 <__sinit>:
 800b510:	b510      	push	{r4, lr}
 800b512:	4604      	mov	r4, r0
 800b514:	f7ff fff0 	bl	800b4f8 <__sinit_lock_acquire>
 800b518:	69a3      	ldr	r3, [r4, #24]
 800b51a:	b11b      	cbz	r3, 800b524 <__sinit+0x14>
 800b51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b520:	f7ff bff0 	b.w	800b504 <__sinit_lock_release>
 800b524:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b528:	6523      	str	r3, [r4, #80]	; 0x50
 800b52a:	4b13      	ldr	r3, [pc, #76]	; (800b578 <__sinit+0x68>)
 800b52c:	4a13      	ldr	r2, [pc, #76]	; (800b57c <__sinit+0x6c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	62a2      	str	r2, [r4, #40]	; 0x28
 800b532:	42a3      	cmp	r3, r4
 800b534:	bf04      	itt	eq
 800b536:	2301      	moveq	r3, #1
 800b538:	61a3      	streq	r3, [r4, #24]
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 f820 	bl	800b580 <__sfp>
 800b540:	6060      	str	r0, [r4, #4]
 800b542:	4620      	mov	r0, r4
 800b544:	f000 f81c 	bl	800b580 <__sfp>
 800b548:	60a0      	str	r0, [r4, #8]
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 f818 	bl	800b580 <__sfp>
 800b550:	2200      	movs	r2, #0
 800b552:	60e0      	str	r0, [r4, #12]
 800b554:	2104      	movs	r1, #4
 800b556:	6860      	ldr	r0, [r4, #4]
 800b558:	f7ff ff82 	bl	800b460 <std>
 800b55c:	68a0      	ldr	r0, [r4, #8]
 800b55e:	2201      	movs	r2, #1
 800b560:	2109      	movs	r1, #9
 800b562:	f7ff ff7d 	bl	800b460 <std>
 800b566:	68e0      	ldr	r0, [r4, #12]
 800b568:	2202      	movs	r2, #2
 800b56a:	2112      	movs	r1, #18
 800b56c:	f7ff ff78 	bl	800b460 <std>
 800b570:	2301      	movs	r3, #1
 800b572:	61a3      	str	r3, [r4, #24]
 800b574:	e7d2      	b.n	800b51c <__sinit+0xc>
 800b576:	bf00      	nop
 800b578:	0800cf28 	.word	0x0800cf28
 800b57c:	0800b4a9 	.word	0x0800b4a9

0800b580 <__sfp>:
 800b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b582:	4607      	mov	r7, r0
 800b584:	f7ff ffac 	bl	800b4e0 <__sfp_lock_acquire>
 800b588:	4b1e      	ldr	r3, [pc, #120]	; (800b604 <__sfp+0x84>)
 800b58a:	681e      	ldr	r6, [r3, #0]
 800b58c:	69b3      	ldr	r3, [r6, #24]
 800b58e:	b913      	cbnz	r3, 800b596 <__sfp+0x16>
 800b590:	4630      	mov	r0, r6
 800b592:	f7ff ffbd 	bl	800b510 <__sinit>
 800b596:	3648      	adds	r6, #72	; 0x48
 800b598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	d503      	bpl.n	800b5a8 <__sfp+0x28>
 800b5a0:	6833      	ldr	r3, [r6, #0]
 800b5a2:	b30b      	cbz	r3, 800b5e8 <__sfp+0x68>
 800b5a4:	6836      	ldr	r6, [r6, #0]
 800b5a6:	e7f7      	b.n	800b598 <__sfp+0x18>
 800b5a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5ac:	b9d5      	cbnz	r5, 800b5e4 <__sfp+0x64>
 800b5ae:	4b16      	ldr	r3, [pc, #88]	; (800b608 <__sfp+0x88>)
 800b5b0:	60e3      	str	r3, [r4, #12]
 800b5b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5b6:	6665      	str	r5, [r4, #100]	; 0x64
 800b5b8:	f000 f847 	bl	800b64a <__retarget_lock_init_recursive>
 800b5bc:	f7ff ff96 	bl	800b4ec <__sfp_lock_release>
 800b5c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5c8:	6025      	str	r5, [r4, #0]
 800b5ca:	61a5      	str	r5, [r4, #24]
 800b5cc:	2208      	movs	r2, #8
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5d4:	f7fd f8e8 	bl	80087a8 <memset>
 800b5d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e4:	3468      	adds	r4, #104	; 0x68
 800b5e6:	e7d9      	b.n	800b59c <__sfp+0x1c>
 800b5e8:	2104      	movs	r1, #4
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	f7ff ff62 	bl	800b4b4 <__sfmoreglue>
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	6030      	str	r0, [r6, #0]
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d1d5      	bne.n	800b5a4 <__sfp+0x24>
 800b5f8:	f7ff ff78 	bl	800b4ec <__sfp_lock_release>
 800b5fc:	230c      	movs	r3, #12
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	e7ee      	b.n	800b5e0 <__sfp+0x60>
 800b602:	bf00      	nop
 800b604:	0800cf28 	.word	0x0800cf28
 800b608:	ffff0001 	.word	0xffff0001

0800b60c <_fwalk_reent>:
 800b60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b610:	4606      	mov	r6, r0
 800b612:	4688      	mov	r8, r1
 800b614:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b618:	2700      	movs	r7, #0
 800b61a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b61e:	f1b9 0901 	subs.w	r9, r9, #1
 800b622:	d505      	bpl.n	800b630 <_fwalk_reent+0x24>
 800b624:	6824      	ldr	r4, [r4, #0]
 800b626:	2c00      	cmp	r4, #0
 800b628:	d1f7      	bne.n	800b61a <_fwalk_reent+0xe>
 800b62a:	4638      	mov	r0, r7
 800b62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b630:	89ab      	ldrh	r3, [r5, #12]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d907      	bls.n	800b646 <_fwalk_reent+0x3a>
 800b636:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b63a:	3301      	adds	r3, #1
 800b63c:	d003      	beq.n	800b646 <_fwalk_reent+0x3a>
 800b63e:	4629      	mov	r1, r5
 800b640:	4630      	mov	r0, r6
 800b642:	47c0      	blx	r8
 800b644:	4307      	orrs	r7, r0
 800b646:	3568      	adds	r5, #104	; 0x68
 800b648:	e7e9      	b.n	800b61e <_fwalk_reent+0x12>

0800b64a <__retarget_lock_init_recursive>:
 800b64a:	4770      	bx	lr

0800b64c <__retarget_lock_acquire_recursive>:
 800b64c:	4770      	bx	lr

0800b64e <__retarget_lock_release_recursive>:
 800b64e:	4770      	bx	lr

0800b650 <__swhatbuf_r>:
 800b650:	b570      	push	{r4, r5, r6, lr}
 800b652:	460e      	mov	r6, r1
 800b654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b658:	2900      	cmp	r1, #0
 800b65a:	b096      	sub	sp, #88	; 0x58
 800b65c:	4614      	mov	r4, r2
 800b65e:	461d      	mov	r5, r3
 800b660:	da08      	bge.n	800b674 <__swhatbuf_r+0x24>
 800b662:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	602a      	str	r2, [r5, #0]
 800b66a:	061a      	lsls	r2, r3, #24
 800b66c:	d410      	bmi.n	800b690 <__swhatbuf_r+0x40>
 800b66e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b672:	e00e      	b.n	800b692 <__swhatbuf_r+0x42>
 800b674:	466a      	mov	r2, sp
 800b676:	f000 f903 	bl	800b880 <_fstat_r>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	dbf1      	blt.n	800b662 <__swhatbuf_r+0x12>
 800b67e:	9a01      	ldr	r2, [sp, #4]
 800b680:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b684:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b688:	425a      	negs	r2, r3
 800b68a:	415a      	adcs	r2, r3
 800b68c:	602a      	str	r2, [r5, #0]
 800b68e:	e7ee      	b.n	800b66e <__swhatbuf_r+0x1e>
 800b690:	2340      	movs	r3, #64	; 0x40
 800b692:	2000      	movs	r0, #0
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	b016      	add	sp, #88	; 0x58
 800b698:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b69c <__smakebuf_r>:
 800b69c:	898b      	ldrh	r3, [r1, #12]
 800b69e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6a0:	079d      	lsls	r5, r3, #30
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	d507      	bpl.n	800b6b8 <__smakebuf_r+0x1c>
 800b6a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	6123      	str	r3, [r4, #16]
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	6163      	str	r3, [r4, #20]
 800b6b4:	b002      	add	sp, #8
 800b6b6:	bd70      	pop	{r4, r5, r6, pc}
 800b6b8:	ab01      	add	r3, sp, #4
 800b6ba:	466a      	mov	r2, sp
 800b6bc:	f7ff ffc8 	bl	800b650 <__swhatbuf_r>
 800b6c0:	9900      	ldr	r1, [sp, #0]
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f7ff f963 	bl	800a990 <_malloc_r>
 800b6ca:	b948      	cbnz	r0, 800b6e0 <__smakebuf_r+0x44>
 800b6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6d0:	059a      	lsls	r2, r3, #22
 800b6d2:	d4ef      	bmi.n	800b6b4 <__smakebuf_r+0x18>
 800b6d4:	f023 0303 	bic.w	r3, r3, #3
 800b6d8:	f043 0302 	orr.w	r3, r3, #2
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	e7e3      	b.n	800b6a8 <__smakebuf_r+0xc>
 800b6e0:	4b0d      	ldr	r3, [pc, #52]	; (800b718 <__smakebuf_r+0x7c>)
 800b6e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	6020      	str	r0, [r4, #0]
 800b6e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ec:	81a3      	strh	r3, [r4, #12]
 800b6ee:	9b00      	ldr	r3, [sp, #0]
 800b6f0:	6163      	str	r3, [r4, #20]
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	6120      	str	r0, [r4, #16]
 800b6f6:	b15b      	cbz	r3, 800b710 <__smakebuf_r+0x74>
 800b6f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f000 f8d1 	bl	800b8a4 <_isatty_r>
 800b702:	b128      	cbz	r0, 800b710 <__smakebuf_r+0x74>
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	f023 0303 	bic.w	r3, r3, #3
 800b70a:	f043 0301 	orr.w	r3, r3, #1
 800b70e:	81a3      	strh	r3, [r4, #12]
 800b710:	89a0      	ldrh	r0, [r4, #12]
 800b712:	4305      	orrs	r5, r0
 800b714:	81a5      	strh	r5, [r4, #12]
 800b716:	e7cd      	b.n	800b6b4 <__smakebuf_r+0x18>
 800b718:	0800b4a9 	.word	0x0800b4a9

0800b71c <_malloc_usable_size_r>:
 800b71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b720:	1f18      	subs	r0, r3, #4
 800b722:	2b00      	cmp	r3, #0
 800b724:	bfbc      	itt	lt
 800b726:	580b      	ldrlt	r3, [r1, r0]
 800b728:	18c0      	addlt	r0, r0, r3
 800b72a:	4770      	bx	lr

0800b72c <_raise_r>:
 800b72c:	291f      	cmp	r1, #31
 800b72e:	b538      	push	{r3, r4, r5, lr}
 800b730:	4604      	mov	r4, r0
 800b732:	460d      	mov	r5, r1
 800b734:	d904      	bls.n	800b740 <_raise_r+0x14>
 800b736:	2316      	movs	r3, #22
 800b738:	6003      	str	r3, [r0, #0]
 800b73a:	f04f 30ff 	mov.w	r0, #4294967295
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b742:	b112      	cbz	r2, 800b74a <_raise_r+0x1e>
 800b744:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b748:	b94b      	cbnz	r3, 800b75e <_raise_r+0x32>
 800b74a:	4620      	mov	r0, r4
 800b74c:	f000 f830 	bl	800b7b0 <_getpid_r>
 800b750:	462a      	mov	r2, r5
 800b752:	4601      	mov	r1, r0
 800b754:	4620      	mov	r0, r4
 800b756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b75a:	f000 b817 	b.w	800b78c <_kill_r>
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d00a      	beq.n	800b778 <_raise_r+0x4c>
 800b762:	1c59      	adds	r1, r3, #1
 800b764:	d103      	bne.n	800b76e <_raise_r+0x42>
 800b766:	2316      	movs	r3, #22
 800b768:	6003      	str	r3, [r0, #0]
 800b76a:	2001      	movs	r0, #1
 800b76c:	e7e7      	b.n	800b73e <_raise_r+0x12>
 800b76e:	2400      	movs	r4, #0
 800b770:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b774:	4628      	mov	r0, r5
 800b776:	4798      	blx	r3
 800b778:	2000      	movs	r0, #0
 800b77a:	e7e0      	b.n	800b73e <_raise_r+0x12>

0800b77c <raise>:
 800b77c:	4b02      	ldr	r3, [pc, #8]	; (800b788 <raise+0xc>)
 800b77e:	4601      	mov	r1, r0
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	f7ff bfd3 	b.w	800b72c <_raise_r>
 800b786:	bf00      	nop
 800b788:	20000050 	.word	0x20000050

0800b78c <_kill_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	4d07      	ldr	r5, [pc, #28]	; (800b7ac <_kill_r+0x20>)
 800b790:	2300      	movs	r3, #0
 800b792:	4604      	mov	r4, r0
 800b794:	4608      	mov	r0, r1
 800b796:	4611      	mov	r1, r2
 800b798:	602b      	str	r3, [r5, #0]
 800b79a:	f7f5 fe3f 	bl	800141c <_kill>
 800b79e:	1c43      	adds	r3, r0, #1
 800b7a0:	d102      	bne.n	800b7a8 <_kill_r+0x1c>
 800b7a2:	682b      	ldr	r3, [r5, #0]
 800b7a4:	b103      	cbz	r3, 800b7a8 <_kill_r+0x1c>
 800b7a6:	6023      	str	r3, [r4, #0]
 800b7a8:	bd38      	pop	{r3, r4, r5, pc}
 800b7aa:	bf00      	nop
 800b7ac:	20002480 	.word	0x20002480

0800b7b0 <_getpid_r>:
 800b7b0:	f7f5 be2c 	b.w	800140c <_getpid>

0800b7b4 <__sread>:
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7bc:	f000 f894 	bl	800b8e8 <_read_r>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	bfab      	itete	ge
 800b7c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b7c8:	181b      	addge	r3, r3, r0
 800b7ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7ce:	bfac      	ite	ge
 800b7d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7d2:	81a3      	strhlt	r3, [r4, #12]
 800b7d4:	bd10      	pop	{r4, pc}

0800b7d6 <__swrite>:
 800b7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7da:	461f      	mov	r7, r3
 800b7dc:	898b      	ldrh	r3, [r1, #12]
 800b7de:	05db      	lsls	r3, r3, #23
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	460c      	mov	r4, r1
 800b7e4:	4616      	mov	r6, r2
 800b7e6:	d505      	bpl.n	800b7f4 <__swrite+0x1e>
 800b7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f000 f868 	bl	800b8c4 <_lseek_r>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7fe:	81a3      	strh	r3, [r4, #12]
 800b800:	4632      	mov	r2, r6
 800b802:	463b      	mov	r3, r7
 800b804:	4628      	mov	r0, r5
 800b806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b80a:	f000 b817 	b.w	800b83c <_write_r>

0800b80e <__sseek>:
 800b80e:	b510      	push	{r4, lr}
 800b810:	460c      	mov	r4, r1
 800b812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b816:	f000 f855 	bl	800b8c4 <_lseek_r>
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	bf15      	itete	ne
 800b820:	6560      	strne	r0, [r4, #84]	; 0x54
 800b822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b82a:	81a3      	strheq	r3, [r4, #12]
 800b82c:	bf18      	it	ne
 800b82e:	81a3      	strhne	r3, [r4, #12]
 800b830:	bd10      	pop	{r4, pc}

0800b832 <__sclose>:
 800b832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b836:	f000 b813 	b.w	800b860 <_close_r>
	...

0800b83c <_write_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4d07      	ldr	r5, [pc, #28]	; (800b85c <_write_r+0x20>)
 800b840:	4604      	mov	r4, r0
 800b842:	4608      	mov	r0, r1
 800b844:	4611      	mov	r1, r2
 800b846:	2200      	movs	r2, #0
 800b848:	602a      	str	r2, [r5, #0]
 800b84a:	461a      	mov	r2, r3
 800b84c:	f7f5 fe1d 	bl	800148a <_write>
 800b850:	1c43      	adds	r3, r0, #1
 800b852:	d102      	bne.n	800b85a <_write_r+0x1e>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	b103      	cbz	r3, 800b85a <_write_r+0x1e>
 800b858:	6023      	str	r3, [r4, #0]
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	20002480 	.word	0x20002480

0800b860 <_close_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4d06      	ldr	r5, [pc, #24]	; (800b87c <_close_r+0x1c>)
 800b864:	2300      	movs	r3, #0
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	f7f5 fe29 	bl	80014c2 <_close>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_close_r+0x1a>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_close_r+0x1a>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	20002480 	.word	0x20002480

0800b880 <_fstat_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d07      	ldr	r5, [pc, #28]	; (800b8a0 <_fstat_r+0x20>)
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	4611      	mov	r1, r2
 800b88c:	602b      	str	r3, [r5, #0]
 800b88e:	f7f5 fe24 	bl	80014da <_fstat>
 800b892:	1c43      	adds	r3, r0, #1
 800b894:	d102      	bne.n	800b89c <_fstat_r+0x1c>
 800b896:	682b      	ldr	r3, [r5, #0]
 800b898:	b103      	cbz	r3, 800b89c <_fstat_r+0x1c>
 800b89a:	6023      	str	r3, [r4, #0]
 800b89c:	bd38      	pop	{r3, r4, r5, pc}
 800b89e:	bf00      	nop
 800b8a0:	20002480 	.word	0x20002480

0800b8a4 <_isatty_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d06      	ldr	r5, [pc, #24]	; (800b8c0 <_isatty_r+0x1c>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	f7f5 fe23 	bl	80014fa <_isatty>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_isatty_r+0x1a>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_isatty_r+0x1a>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	20002480 	.word	0x20002480

0800b8c4 <_lseek_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d07      	ldr	r5, [pc, #28]	; (800b8e4 <_lseek_r+0x20>)
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	4608      	mov	r0, r1
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	602a      	str	r2, [r5, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f7f5 fe1c 	bl	8001510 <_lseek>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_lseek_r+0x1e>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_lseek_r+0x1e>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	20002480 	.word	0x20002480

0800b8e8 <_read_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4d07      	ldr	r5, [pc, #28]	; (800b908 <_read_r+0x20>)
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	4608      	mov	r0, r1
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	602a      	str	r2, [r5, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f7f5 fdaa 	bl	8001450 <_read>
 800b8fc:	1c43      	adds	r3, r0, #1
 800b8fe:	d102      	bne.n	800b906 <_read_r+0x1e>
 800b900:	682b      	ldr	r3, [r5, #0]
 800b902:	b103      	cbz	r3, 800b906 <_read_r+0x1e>
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	bd38      	pop	{r3, r4, r5, pc}
 800b908:	20002480 	.word	0x20002480

0800b90c <_init>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	bf00      	nop
 800b910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b912:	bc08      	pop	{r3}
 800b914:	469e      	mov	lr, r3
 800b916:	4770      	bx	lr

0800b918 <_fini>:
 800b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91a:	bf00      	nop
 800b91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b91e:	bc08      	pop	{r3}
 800b920:	469e      	mov	lr, r3
 800b922:	4770      	bx	lr
