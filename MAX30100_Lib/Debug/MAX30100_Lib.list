
MAX30100_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  080080a8  080080a8  000180a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f4  080085f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080085f4  080085f4  000185f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085fc  080085fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085fc  080085fc  000185fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001dc  080087e0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080087e0  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1ac  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cde  00000000  00000000  0002d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002f098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175f7  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcba  00000000  00000000  00047b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae6f  00000000  00000000  00055849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e06b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe0  00000000  00000000  000e0708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008090 	.word	0x08008090

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008090 	.word	0x08008090

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f62:	f000 fbbd 	bl	80016e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f66:	f000 f89f 	bl	80010a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f6a:	f000 f961 	bl	8001230 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f6e:	f000 f935 	bl	80011dc <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000f72:	f000 f905 	bl	8001180 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	print("Running\n");
 8000f76:	4843      	ldr	r0, [pc, #268]	; (8001084 <main+0x128>)
 8000f78:	f002 ff34 	bl	8003de4 <print>
//	}
//	else{
//		print("Device found\n");
//	}

	max30100_init(&max30100, &hi2c1, MAX30100_DEFAULT_OPERATING_MODE,
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9306      	str	r3, [sp, #24]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9305      	str	r3, [sp, #20]
 8000f84:	2332      	movs	r3, #50	; 0x32
 8000f86:	9304      	str	r3, [sp, #16]
 8000f88:	230f      	movs	r3, #15
 8000f8a:	9303      	str	r3, [sp, #12]
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2308      	movs	r3, #8
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	2303      	movs	r3, #3
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	493a      	ldr	r1, [pc, #232]	; (8001088 <main+0x12c>)
 8000f9e:	483b      	ldr	r0, [pc, #236]	; (800108c <main+0x130>)
 8000fa0:	f002 ff44 	bl	8003e2c <max30100_init>
	MAX30100_DEFAULT_MEAN_FILTER_SIZE,
	MAX30100_DEFAULT_PULSE_BPM_SAMPLE_SIZE,
	true,
	false);

	print("MAX30100 Test\n");
 8000fa4:	483a      	ldr	r0, [pc, #232]	; (8001090 <main+0x134>)
 8000fa6:	f002 ff1d 	bl	8003de4 <print>
	max30100_data_t result = { };
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2224      	movs	r2, #36	; 0x24
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fe8f 	bl	8004cd4 <memset>

	uint32_t startTime = HAL_GetTick(), lapsedTime = 500;
 8000fb6:	f000 fbf9 	bl	80017ac <HAL_GetTick>
 8000fba:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000fbc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (max30100_update(&max30100, &result) != HAL_OK) {
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4831      	ldr	r0, [pc, #196]	; (800108c <main+0x130>)
 8000fc8:	f003 f846 	bl	8004058 <max30100_update>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d01d      	beq.n	800100e <main+0xb2>
			print("Error Reading...Retrying\n");
 8000fd2:	4830      	ldr	r0, [pc, #192]	; (8001094 <main+0x138>)
 8000fd4:	f002 ff06 	bl	8003de4 <print>
			MX_I2C1_Init();
 8000fd8:	f000 f8d2 	bl	8001180 <MX_I2C1_Init>
			max30100_init(&max30100, &hi2c1, MAX30100_DEFAULT_OPERATING_MODE,
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9306      	str	r3, [sp, #24]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9305      	str	r3, [sp, #20]
 8000fe4:	2332      	movs	r3, #50	; 0x32
 8000fe6:	9304      	str	r3, [sp, #16]
 8000fe8:	230f      	movs	r3, #15
 8000fea:	9303      	str	r3, [sp, #12]
 8000fec:	2303      	movs	r3, #3
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	4922      	ldr	r1, [pc, #136]	; (8001088 <main+0x12c>)
 8000ffe:	4823      	ldr	r0, [pc, #140]	; (800108c <main+0x130>)
 8001000:	f002 ff14 	bl	8003e2c <max30100_init>
			MAX30100_DEFAULT_START_RED_LED_CURRENT,
			MAX30100_DEFAULT_MEAN_FILTER_SIZE,
			MAX30100_DEFAULT_PULSE_BPM_SAMPLE_SIZE,
			true,
			false);
			Delay(1000);
 8001004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001008:	f000 fbdc 	bl	80017c4 <HAL_Delay>
 800100c:	e7d9      	b.n	8000fc2 <main+0x66>
		} else {

			if (result.pulse_detected) {
 800100e:	793b      	ldrb	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <main+0xbe>
				print("BEAT\n");
 8001014:	4820      	ldr	r0, [pc, #128]	; (8001098 <main+0x13c>)
 8001016:	f002 fee5 	bl	8003de4 <print>
			}
			if (HAL_GetTick() - startTime > lapsedTime) {
 800101a:	f000 fbc7 	bl	80017ac <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001026:	429a      	cmp	r2, r3
 8001028:	d2cb      	bcs.n	8000fc2 <main+0x66>
				if (result.ir_dc_value < 10000.00) {
 800102a:	edd7 7a04 	vldr	s15, [r7, #16]
 800102e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800109c <main+0x140>
 8001032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103a:	d50b      	bpl.n	8001054 <main+0xf8>
					print("No finger Detected\n");
 800103c:	4818      	ldr	r0, [pc, #96]	; (80010a0 <main+0x144>)
 800103e:	f002 fed1 	bl	8003de4 <print>
					max30100.current_bpm = 0.0;
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <main+0x130>)
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
					max30100.current_spO2 = 0.0;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <main+0x130>)
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	679a      	str	r2, [r3, #120]	; 0x78
 8001052:	e012      	b.n	800107a <main+0x11e>
				} else {
					print("BPM: %0.2f | SpO2: %0.2f%%\n", result.heart_bpm,
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa7e 	bl	8000558 <__aeabi_f2d>
 800105c:	4604      	mov	r4, r0
 800105e:	460d      	mov	r5, r1
							result.spO2);
 8001060:	69bb      	ldr	r3, [r7, #24]
					print("BPM: %0.2f | SpO2: %0.2f%%\n", result.heart_bpm,
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa78 	bl	8000558 <__aeabi_f2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	e9cd 2300 	strd	r2, r3, [sp]
 8001070:	4622      	mov	r2, r4
 8001072:	462b      	mov	r3, r5
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <main+0x148>)
 8001076:	f002 feb5 	bl	8003de4 <print>
				}

				startTime = HAL_GetTick();
 800107a:	f000 fb97 	bl	80017ac <HAL_GetTick>
 800107e:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (max30100_update(&max30100, &result) != HAL_OK) {
 8001080:	e79f      	b.n	8000fc2 <main+0x66>
 8001082:	bf00      	nop
 8001084:	080080a8 	.word	0x080080a8
 8001088:	200001f8 	.word	0x200001f8
 800108c:	20000290 	.word	0x20000290
 8001090:	080080b4 	.word	0x080080b4
 8001094:	080080c4 	.word	0x080080c4
 8001098:	080080e0 	.word	0x080080e0
 800109c:	461c4000 	.word	0x461c4000
 80010a0:	080080e8 	.word	0x080080e8
 80010a4:	080080fc 	.word	0x080080fc

080010a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	; 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fe0c 	bl	8004cd4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <SystemClock_Config+0xd0>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a28      	ldr	r2, [pc, #160]	; (8001178 <SystemClock_Config+0xd0>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <SystemClock_Config+0xd0>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <SystemClock_Config+0xd4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <SystemClock_Config+0xd4>)
 80010f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <SystemClock_Config+0xd4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110c:	2301      	movs	r3, #1
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001110:	2310      	movs	r3, #16
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001114:	2302      	movs	r3, #2
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001118:	2300      	movs	r3, #0
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800111c:	2310      	movs	r3, #16
 800111e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001120:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001124:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001126:	2304      	movs	r3, #4
 8001128:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800112a:	2307      	movs	r3, #7
 800112c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fecc 	bl	8002ed0 <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x9a>
		Error_Handler();
 800113e:	f000 f8e5 	bl	800130c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2302      	movs	r3, #2
 8001148:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2102      	movs	r1, #2
 800115e:	4618      	mov	r0, r3
 8001160:	f002 f92e 	bl	80033c0 <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0xc6>
		Error_Handler();
 800116a:	f000 f8cf 	bl	800130c <Error_Handler>
	}
}
 800116e:	bf00      	nop
 8001170:	3750      	adds	r7, #80	; 0x50
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_I2C1_Init+0x50>)
 8001186:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <MX_I2C1_Init+0x54>)
 8001188:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_I2C1_Init+0x50>)
 800118c:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <MX_I2C1_Init+0x58>)
 800118e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_I2C1_Init+0x50>)
 800119e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_I2C1_Init+0x50>)
 80011be:	f000 fda9 	bl	8001d14 <HAL_I2C_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011c8:	f000 f8a0 	bl	800130c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200001f8 	.word	0x200001f8
 80011d4:	40005400 	.word	0x40005400
 80011d8:	000186a0 	.word	0x000186a0

080011dc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_USART2_UART_Init+0x50>)
 80011e4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011ec:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001214:	f002 faf4 	bl	8003800 <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800121e:	f000 f875 	bl	800130c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000024c 	.word	0x2000024c
 800122c:	40004400 	.word	0x40004400

08001230 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <MX_GPIO_Init+0xd0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a2c      	ldr	r2, [pc, #176]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a25      	ldr	r2, [pc, #148]	; (8001300 <MX_GPIO_Init+0xd0>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_GPIO_Init+0xd0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_GPIO_Init+0xd0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <MX_GPIO_Init+0xd0>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2120      	movs	r1, #32
 80012ba:	4812      	ldr	r0, [pc, #72]	; (8001304 <MX_GPIO_Init+0xd4>)
 80012bc:	f000 fd10 	bl	8001ce0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_GPIO_Init+0xd8>)
 80012d8:	f000 fb7e 	bl	80019d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80012dc:	2320      	movs	r3, #32
 80012de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_GPIO_Init+0xd4>)
 80012f4:	f000 fb70 	bl	80019d8 <HAL_GPIO_Init>

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020800 	.word	0x40020800

0800130c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001314:	e7fe      	b.n	8001314 <Error_Handler+0x8>
	...

08001318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <HAL_MspInit+0x4c>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_MspInit+0x4c>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001356:	2007      	movs	r0, #7
 8001358:	f000 fb0a 	bl	8001970 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_I2C_MspInit+0x84>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d12c      	bne.n	80013e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ac:	2312      	movs	r3, #18
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b8:	2304      	movs	r3, #4
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <HAL_I2C_MspInit+0x8c>)
 80013c4:	f000 fb08 	bl	80019d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 80013d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	; 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40005400 	.word	0x40005400
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020400 	.word	0x40020400

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_UART_MspInit+0x84>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12b      	bne.n	8001472 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_UART_MspInit+0x88>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_UART_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_UART_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001452:	230c      	movs	r3, #12
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001462:	2307      	movs	r3, #7
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_UART_MspInit+0x8c>)
 800146e:	f000 fab3 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40004400 	.word	0x40004400
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler+0x4>

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d4:	f000 f956 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	return 1;
 80014e0:	2301      	movs	r3, #1
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_kill>:

int _kill(int pid, int sig)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014f6:	f003 fbbb 	bl	8004c70 <__errno>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2216      	movs	r2, #22
 80014fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_exit>:

void _exit (int status)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffe7 	bl	80014ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800151e:	e7fe      	b.n	800151e <_exit+0x12>

08001520 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e00a      	b.n	8001548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001532:	f3af 8000 	nop.w
 8001536:	4601      	mov	r1, r0
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	60ba      	str	r2, [r7, #8]
 800153e:	b2ca      	uxtb	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf0      	blt.n	8001532 <_read+0x12>
	}

return len;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e009      	b.n	8001580 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	60ba      	str	r2, [r7, #8]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf1      	blt.n	800156c <_write+0x12>
	}
	return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_close>:

int _close(int file)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
	return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ba:	605a      	str	r2, [r3, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_isatty>:

int _isatty(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	return 1;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
	return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <_sbrk+0x5c>)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <_sbrk+0x60>)
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <_sbrk+0x64>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <_sbrk+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d207      	bcs.n	800163c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800162c:	f003 fb20 	bl	8004c70 <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	e009      	b.n	8001650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20018000 	.word	0x20018000
 800165c:	00000400 	.word	0x00000400
 8001660:	20000310 	.word	0x20000310
 8001664:	20000438 	.word	0x20000438

08001668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SystemInit+0x20>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <SystemInit+0x20>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001692:	490e      	ldr	r1, [pc, #56]	; (80016cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001694:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a8:	4c0b      	ldr	r4, [pc, #44]	; (80016d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016b6:	f7ff ffd7 	bl	8001668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ba:	f003 fadf 	bl	8004c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016be:	f7ff fc4d 	bl	8000f5c <main>
  bx  lr    
 80016c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016d0:	08008604 	.word	0x08008604
  ldr r2, =_sbss
 80016d4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80016d8:	20000438 	.word	0x20000438

080016dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f931 	bl	8001970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fe00 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f93b 	bl	80019be <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 f911 	bl	8001986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	20000008 	.word	0x20000008
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000314 	.word	0x20000314

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000314 	.word	0x20000314

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
         );
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800193c:	d301      	bcc.n	8001942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193e:	2301      	movs	r3, #1
 8001940:	e00f      	b.n	8001962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <SysTick_Config+0x40>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194a:	210f      	movs	r1, #15
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f7ff ff8e 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <SysTick_Config+0x40>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <SysTick_Config+0x40>)
 800195c:	2207      	movs	r2, #7
 800195e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	e000e010 	.word	0xe000e010

08001970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff47 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001998:	f7ff ff5c 	bl	8001854 <__NVIC_GetPriorityGrouping>
 800199c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7ff ff8e 	bl	80018c4 <NVIC_EncodePriority>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff5d 	bl	8001870 <__NVIC_SetPriority>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffb0 	bl	800192c <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e159      	b.n	8001ca8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8148 	bne.w	8001ca2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d017      	beq.n	8001ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d123      	bne.n	8001b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a2 	beq.w	8001ca2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b57      	ldr	r3, [pc, #348]	; (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a56      	ldr	r2, [pc, #344]	; (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b54      	ldr	r3, [pc, #336]	; (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7a:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_GPIO_Init+0x2ec>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a49      	ldr	r2, [pc, #292]	; (8001cc8 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0x202>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a48      	ldr	r2, [pc, #288]	; (8001ccc <HAL_GPIO_Init+0x2f4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x1fe>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_GPIO_Init+0x2f8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x1fa>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a46      	ldr	r2, [pc, #280]	; (8001cd4 <HAL_GPIO_Init+0x2fc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x1f6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a45      	ldr	r2, [pc, #276]	; (8001cd8 <HAL_GPIO_Init+0x300>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x1f2>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bca:	2307      	movs	r3, #7
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4935      	ldr	r1, [pc, #212]	; (8001cc4 <HAL_GPIO_Init+0x2ec>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c24:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c48:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c72:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f aea2 	bls.w	80019f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e12b      	b.n	8001f7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fb14 	bl	8001368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2224      	movs	r2, #36	; 0x24
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d78:	f001 fd1a 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8001d7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a81      	ldr	r2, [pc, #516]	; (8001f88 <HAL_I2C_Init+0x274>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d807      	bhi.n	8001d98 <HAL_I2C_Init+0x84>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a80      	ldr	r2, [pc, #512]	; (8001f8c <HAL_I2C_Init+0x278>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	bf94      	ite	ls
 8001d90:	2301      	movls	r3, #1
 8001d92:	2300      	movhi	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	e006      	b.n	8001da6 <HAL_I2C_Init+0x92>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a7d      	ldr	r2, [pc, #500]	; (8001f90 <HAL_I2C_Init+0x27c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	bf94      	ite	ls
 8001da0:	2301      	movls	r3, #1
 8001da2:	2300      	movhi	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0e7      	b.n	8001f7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a78      	ldr	r2, [pc, #480]	; (8001f94 <HAL_I2C_Init+0x280>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0c9b      	lsrs	r3, r3, #18
 8001db8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a6a      	ldr	r2, [pc, #424]	; (8001f88 <HAL_I2C_Init+0x274>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d802      	bhi.n	8001de8 <HAL_I2C_Init+0xd4>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3301      	adds	r3, #1
 8001de6:	e009      	b.n	8001dfc <HAL_I2C_Init+0xe8>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	4a69      	ldr	r2, [pc, #420]	; (8001f98 <HAL_I2C_Init+0x284>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	495c      	ldr	r1, [pc, #368]	; (8001f88 <HAL_I2C_Init+0x274>)
 8001e18:	428b      	cmp	r3, r1
 8001e1a:	d819      	bhi.n	8001e50 <HAL_I2C_Init+0x13c>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1e59      	subs	r1, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e2a:	1c59      	adds	r1, r3, #1
 8001e2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e30:	400b      	ands	r3, r1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_I2C_Init+0x138>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1e59      	subs	r1, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4a:	e051      	b.n	8001ef0 <HAL_I2C_Init+0x1dc>
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	e04f      	b.n	8001ef0 <HAL_I2C_Init+0x1dc>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d111      	bne.n	8001e7c <HAL_I2C_Init+0x168>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e58      	subs	r0, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	440b      	add	r3, r1
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	e012      	b.n	8001ea2 <HAL_I2C_Init+0x18e>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	0099      	lsls	r1, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Init+0x196>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e022      	b.n	8001ef0 <HAL_I2C_Init+0x1dc>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_I2C_Init+0x1bc>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1e58      	subs	r0, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6859      	ldr	r1, [r3, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	440b      	add	r3, r1
 8001ec0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ece:	e00f      	b.n	8001ef0 <HAL_I2C_Init+0x1dc>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1e58      	subs	r0, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	0099      	lsls	r1, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	6809      	ldr	r1, [r1, #0]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6911      	ldr	r1, [r2, #16]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68d2      	ldr	r2, [r2, #12]
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	000186a0 	.word	0x000186a0
 8001f8c:	001e847f 	.word	0x001e847f
 8001f90:	003d08ff 	.word	0x003d08ff
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	10624dd3 	.word	0x10624dd3

08001f9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	460b      	mov	r3, r1
 8001faa:	817b      	strh	r3, [r7, #10]
 8001fac:	4613      	mov	r3, r2
 8001fae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff fbfc 	bl	80017ac <HAL_GetTick>
 8001fb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	f040 80e0 	bne.w	8002184 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2319      	movs	r3, #25
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4970      	ldr	r1, [pc, #448]	; (8002190 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fda0 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0d3      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_I2C_Master_Transmit+0x50>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e0cc      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d007      	beq.n	8002012 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002020:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2221      	movs	r2, #33	; 0x21
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2210      	movs	r2, #16
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	893a      	ldrh	r2, [r7, #8]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4a50      	ldr	r2, [pc, #320]	; (8002194 <HAL_I2C_Master_Transmit+0x1f8>)
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002054:	8979      	ldrh	r1, [r7, #10]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	6a3a      	ldr	r2, [r7, #32]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 fbf0 	bl	8002840 <I2C_MasterRequestWrite>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e08d      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002080:	e066      	b.n	8002150 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	6a39      	ldr	r1, [r7, #32]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fe1a 	bl	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00d      	beq.n	80020ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b04      	cmp	r3, #4
 8002098:	d107      	bne.n	80020aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06b      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d11b      	bne.n	8002124 <HAL_I2C_Master_Transmit+0x188>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d017      	beq.n	8002124 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	6a39      	ldr	r1, [r7, #32]
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fe0a 	bl	8002d42 <I2C_WaitOnBTFFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00d      	beq.n	8002150 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	2b04      	cmp	r3, #4
 800213a:	d107      	bne.n	800214c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e01a      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	2b00      	cmp	r3, #0
 8002156:	d194      	bne.n	8002082 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	e000      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002184:	2302      	movs	r3, #2
  }
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	00100002 	.word	0x00100002
 8002194:	ffff0000 	.word	0xffff0000

08002198 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	817b      	strh	r3, [r7, #10]
 80021aa:	460b      	mov	r3, r1
 80021ac:	813b      	strh	r3, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b2:	f7ff fafb 	bl	80017ac <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	f040 8208 	bne.w	80025d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2319      	movs	r3, #25
 80021cc:	2201      	movs	r2, #1
 80021ce:	497b      	ldr	r1, [pc, #492]	; (80023bc <HAL_I2C_Mem_Read+0x224>)
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fc9f 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	e1fb      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Mem_Read+0x56>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e1f4      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d007      	beq.n	8002214 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2222      	movs	r2, #34	; 0x22
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2240      	movs	r2, #64	; 0x40
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800223e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <HAL_I2C_Mem_Read+0x228>)
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002256:	88f8      	ldrh	r0, [r7, #6]
 8002258:	893a      	ldrh	r2, [r7, #8]
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	4603      	mov	r3, r0
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fb6c 	bl	8002944 <I2C_RequestMemoryRead>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e1b0      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	2b00      	cmp	r3, #0
 800227c:	d113      	bne.n	80022a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	623b      	str	r3, [r7, #32]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e184      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d11b      	bne.n	80022e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e164      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d11b      	bne.n	8002326 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800230c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	e144      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800233c:	e138      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	2b03      	cmp	r3, #3
 8002344:	f200 80f1 	bhi.w	800252a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	2b01      	cmp	r3, #1
 800234e:	d123      	bne.n	8002398 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002352:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fd35 	bl	8002dc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e139      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002396:	e10b      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b02      	cmp	r3, #2
 800239e:	d14e      	bne.n	800243e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a6:	2200      	movs	r2, #0
 80023a8:	4906      	ldr	r1, [pc, #24]	; (80023c4 <HAL_I2C_Mem_Read+0x22c>)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fbb2 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e10e      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
 80023ba:	bf00      	nop
 80023bc:	00100002 	.word	0x00100002
 80023c0:	ffff0000 	.word	0xffff0000
 80023c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800243c:	e0b8      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	2200      	movs	r2, #0
 8002446:	4966      	ldr	r1, [pc, #408]	; (80025e0 <HAL_I2C_Mem_Read+0x448>)
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fb63 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0bf      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	2200      	movs	r2, #0
 80024a2:	494f      	ldr	r1, [pc, #316]	; (80025e0 <HAL_I2C_Mem_Read+0x448>)
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fb35 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e091      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002528:	e042      	b.n	80025b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fc48 	bl	8002dc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e04c      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b04      	cmp	r3, #4
 800257c:	d118      	bne.n	80025b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f aec2 	bne.w	800233e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	00010004 	.word	0x00010004

080025e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	460b      	mov	r3, r1
 80025f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff f8da 	bl	80017ac <HAL_GetTick>
 80025f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b20      	cmp	r3, #32
 8002608:	f040 8111 	bne.w	800282e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2319      	movs	r3, #25
 8002612:	2201      	movs	r2, #1
 8002614:	4988      	ldr	r1, [pc, #544]	; (8002838 <HAL_I2C_IsDeviceReady+0x254>)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fa7c 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	e104      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_I2C_IsDeviceReady+0x50>
 8002630:	2302      	movs	r3, #2
 8002632:	e0fd      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d007      	beq.n	800265a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002668:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2224      	movs	r2, #36	; 0x24
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a70      	ldr	r2, [pc, #448]	; (800283c <HAL_I2C_IsDeviceReady+0x258>)
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fa3a 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00d      	beq.n	80026c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b4:	d103      	bne.n	80026be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0b6      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c2:	897b      	ldrh	r3, [r7, #10]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026d2:	f7ff f86b 	bl	80017ac <HAL_GetTick>
 80026d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002706:	e025      	b.n	8002754 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002708:	f7ff f850 	bl	80017ac <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d302      	bcc.n	800271e <HAL_I2C_IsDeviceReady+0x13a>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	22a0      	movs	r2, #160	; 0xa0
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2ba0      	cmp	r3, #160	; 0xa0
 800275e:	d005      	beq.n	800276c <HAL_I2C_IsDeviceReady+0x188>
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_I2C_IsDeviceReady+0x188>
 8002766:	7dbb      	ldrb	r3, [r7, #22]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0cd      	beq.n	8002708 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d129      	bne.n	80027d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002790:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	4921      	ldr	r1, [pc, #132]	; (8002838 <HAL_I2C_IsDeviceReady+0x254>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f9ae 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e036      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e02c      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2319      	movs	r3, #25
 80027f6:	2201      	movs	r2, #1
 80027f8:	490f      	ldr	r1, [pc, #60]	; (8002838 <HAL_I2C_IsDeviceReady+0x254>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f98a 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e012      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3301      	adds	r3, #1
 800280e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	f4ff af32 	bcc.w	800267e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	00100002 	.word	0x00100002
 800283c:	ffff0000 	.word	0xffff0000

08002840 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	460b      	mov	r3, r1
 800284e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d006      	beq.n	800286a <I2C_MasterRequestWrite+0x2a>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d003      	beq.n	800286a <I2C_MasterRequestWrite+0x2a>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002868:	d108      	bne.n	800287c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e00b      	b.n	8002894 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	2b12      	cmp	r3, #18
 8002882:	d107      	bne.n	8002894 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002892:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f937 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00d      	beq.n	80028c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ba:	d103      	bne.n	80028c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e035      	b.n	8002934 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028d0:	d108      	bne.n	80028e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028e0:	611a      	str	r2, [r3, #16]
 80028e2:	e01b      	b.n	800291c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028e4:	897b      	ldrh	r3, [r7, #10]
 80028e6:	11db      	asrs	r3, r3, #7
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0306 	and.w	r3, r3, #6
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f063 030f 	orn	r3, r3, #15
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <I2C_MasterRequestWrite+0xfc>)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f95d 	bl	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e010      	b.n	8002934 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <I2C_MasterRequestWrite+0x100>)
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f94d 	bl	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	00010008 	.word	0x00010008
 8002940:	00010002 	.word	0x00010002

08002944 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	4608      	mov	r0, r1
 800294e:	4611      	mov	r1, r2
 8002950:	461a      	mov	r2, r3
 8002952:	4603      	mov	r3, r0
 8002954:	817b      	strh	r3, [r7, #10]
 8002956:	460b      	mov	r3, r1
 8002958:	813b      	strh	r3, [r7, #8]
 800295a:	4613      	mov	r3, r2
 800295c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800296c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2200      	movs	r2, #0
 8002986:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f8c2 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a4:	d103      	bne.n	80029ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0aa      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029b2:	897b      	ldrh	r3, [r7, #10]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	4952      	ldr	r1, [pc, #328]	; (8002b10 <I2C_RequestMemoryRead+0x1cc>)
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f8fa 	bl	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e097      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	6a39      	ldr	r1, [r7, #32]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f964 	bl	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d107      	bne.n	8002a16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e076      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a20:	893b      	ldrh	r3, [r7, #8]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	611a      	str	r2, [r3, #16]
 8002a2a:	e021      	b.n	8002a70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f93e 	bl	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d107      	bne.n	8002a62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e050      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a66:	893b      	ldrh	r3, [r7, #8]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a72:	6a39      	ldr	r1, [r7, #32]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f923 	bl	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00d      	beq.n	8002a9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d107      	bne.n	8002a98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e035      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f82b 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad2:	d103      	bne.n	8002adc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e013      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ae0:	897b      	ldrh	r3, [r7, #10]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	6a3a      	ldr	r2, [r7, #32]
 8002af4:	4906      	ldr	r1, [pc, #24]	; (8002b10 <I2C_RequestMemoryRead+0x1cc>)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f863 	bl	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	00010002 	.word	0x00010002

08002b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b24:	e025      	b.n	8002b72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d021      	beq.n	8002b72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2e:	f7fe fe3d 	bl	80017ac <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d302      	bcc.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d116      	bne.n	8002b72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0220 	orr.w	r2, r3, #32
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e023      	b.n	8002bba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d10d      	bne.n	8002b98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4013      	ands	r3, r2
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf0c      	ite	eq
 8002b8e:	2301      	moveq	r3, #1
 8002b90:	2300      	movne	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	e00c      	b.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d0b6      	beq.n	8002b26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bd0:	e051      	b.n	8002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d123      	bne.n	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f043 0204 	orr.w	r2, r3, #4
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e046      	b.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d021      	beq.n	8002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c32:	f7fe fdbb 	bl	80017ac <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d116      	bne.n	8002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e020      	b.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10c      	bne.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	e00b      	b.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d18d      	bne.n	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ccc:	e02d      	b.n	8002d2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f8ce 	bl	8002e70 <I2C_IsAcknowledgeFailed>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e02d      	b.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d021      	beq.n	8002d2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fe fd61 	bl	80017ac <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e007      	b.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d1ca      	bne.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d4e:	e02d      	b.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f88d 	bl	8002e70 <I2C_IsAcknowledgeFailed>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e02d      	b.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d66:	d021      	beq.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d68:	f7fe fd20 	bl	80017ac <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d302      	bcc.n	8002d7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e007      	b.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d1ca      	bne.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dd0:	e042      	b.n	8002e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d119      	bne.n	8002e14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0210 	mvn.w	r2, #16
 8002de8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e029      	b.n	8002e68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e14:	f7fe fcca 	bl	80017ac <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d302      	bcc.n	8002e2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e007      	b.n	8002e68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b40      	cmp	r3, #64	; 0x40
 8002e64:	d1b5      	bne.n	8002dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e86:	d11b      	bne.n	8002ec0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f043 0204 	orr.w	r2, r3, #4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e267      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d075      	beq.n	8002fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eee:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d00c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efa:	4b85      	ldr	r3, [pc, #532]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d112      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f06:	4b82      	ldr	r3, [pc, #520]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f12:	d10b      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	4b7e      	ldr	r3, [pc, #504]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d05b      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x108>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d157      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e242      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x74>
 8002f36:	4b76      	ldr	r3, [pc, #472]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a75      	ldr	r2, [pc, #468]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xb0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x98>
 8002f4e:	4b70      	ldr	r3, [pc, #448]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6f      	ldr	r2, [pc, #444]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6c      	ldr	r2, [pc, #432]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xb0>
 8002f68:	4b69      	ldr	r3, [pc, #420]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a68      	ldr	r2, [pc, #416]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b66      	ldr	r3, [pc, #408]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a65      	ldr	r2, [pc, #404]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fc10 	bl	80017ac <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fc0c 	bl	80017ac <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e207      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b5b      	ldr	r3, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xc0>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fbfc 	bl	80017ac <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fbf8 	bl	80017ac <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e1f3      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	4b51      	ldr	r3, [pc, #324]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xe8>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b47      	ldr	r3, [pc, #284]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b44      	ldr	r3, [pc, #272]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	4b41      	ldr	r3, [pc, #260]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x152>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e1c7      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4937      	ldr	r1, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	e03a      	b.n	80030ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_RCC_OscConfig+0x244>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fe fbb1 	bl	80017ac <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304e:	f7fe fbad 	bl	80017ac <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1a8      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4925      	ldr	r1, [pc, #148]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_OscConfig+0x244>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fb90 	bl	80017ac <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003090:	f7fe fb8c 	bl	80017ac <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e187      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d036      	beq.n	8003128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_RCC_OscConfig+0x248>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe fb70 	bl	80017ac <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe fb6c 	bl	80017ac <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e167      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 80030e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x200>
 80030ee:	e01b      	b.n	8003128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_OscConfig+0x248>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fe fb59 	bl	80017ac <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	e00e      	b.n	800311c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fe fb55 	bl	80017ac <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d907      	bls.n	800311c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e150      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
 8003110:	40023800 	.word	0x40023800
 8003114:	42470000 	.word	0x42470000
 8003118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	4b88      	ldr	r3, [pc, #544]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ea      	bne.n	80030fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8097 	beq.w	8003264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4b81      	ldr	r3, [pc, #516]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	4b7d      	ldr	r3, [pc, #500]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a7c      	ldr	r2, [pc, #496]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b7a      	ldr	r3, [pc, #488]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b77      	ldr	r3, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b74      	ldr	r3, [pc, #464]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a73      	ldr	r2, [pc, #460]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe fb15 	bl	80017ac <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe fb11 	bl	80017ac <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e10c      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x2ea>
 80031ac:	4b64      	ldr	r3, [pc, #400]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a63      	ldr	r2, [pc, #396]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	e01c      	b.n	80031f4 <HAL_RCC_OscConfig+0x324>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x30c>
 80031c2:	4b5f      	ldr	r3, [pc, #380]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	4b5c      	ldr	r3, [pc, #368]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a5b      	ldr	r2, [pc, #364]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0x324>
 80031dc:	4b58      	ldr	r3, [pc, #352]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a57      	ldr	r2, [pc, #348]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	4b55      	ldr	r3, [pc, #340]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a54      	ldr	r2, [pc, #336]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ee:	f023 0304 	bic.w	r3, r3, #4
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fe fad6 	bl	80017ac <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fe fad2 	bl	80017ac <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0cb      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321a:	4b49      	ldr	r3, [pc, #292]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ee      	beq.n	8003204 <HAL_RCC_OscConfig+0x334>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7fe fac0 	bl	80017ac <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe fabc 	bl	80017ac <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0b5      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003246:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1ee      	bne.n	8003230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003258:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	4a38      	ldr	r2, [pc, #224]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800325e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a1 	beq.w	80033b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800326e:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b08      	cmp	r3, #8
 8003278:	d05c      	beq.n	8003334 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d141      	bne.n	8003306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fa90 	bl	80017ac <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe fa8c 	bl	80017ac <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e087      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	041b      	lsls	r3, r3, #16
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	491b      	ldr	r1, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fe fa65 	bl	80017ac <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fe fa61 	bl	80017ac <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e05c      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x416>
 8003304:	e054      	b.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe fa4e 	bl	80017ac <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe fa4a 	bl	80017ac <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e045      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x444>
 8003332:	e03d      	b.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e038      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
 8003340:	40023800 	.word	0x40023800
 8003344:	40007000 	.word	0x40007000
 8003348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d028      	beq.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d121      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d11a      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	4293      	cmp	r3, r2
 8003386:	d111      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	3b01      	subs	r3, #1
 8003396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d107      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0cc      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d90c      	bls.n	80033fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b8      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d044      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d119      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d003      	beq.n	800347e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	2b03      	cmp	r3, #3
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e067      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 0203 	bic.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4934      	ldr	r1, [pc, #208]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b0:	f7fe f97c 	bl	80017ac <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7fe f978 	bl	80017ac <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e04f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 020c 	and.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1eb      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d20c      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e032      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f821 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800354a:	4602      	mov	r2, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	5ccb      	ldrb	r3, [r1, r3]
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe f8dc 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023c00 	.word	0x40023c00
 800357c:	40023800 	.word	0x40023800
 8003580:	08008204 	.word	0x08008204
 8003584:	20000000 	.word	0x20000000
 8003588:	20000004 	.word	0x20000004

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003590:	b094      	sub	sp, #80	; 0x50
 8003592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	647b      	str	r3, [r7, #68]	; 0x44
 8003598:	2300      	movs	r3, #0
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800359c:	2300      	movs	r3, #0
 800359e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a4:	4b79      	ldr	r3, [pc, #484]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d00d      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x40>
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	f200 80e1 	bhi.w	8003778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035be:	e0db      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c0:	4b73      	ldr	r3, [pc, #460]	; (8003790 <HAL_RCC_GetSysClockFreq+0x204>)
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035c4:	e0db      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c6:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_GetSysClockFreq+0x208>)
 80035c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ca:	e0d8      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d6:	4b6d      	ldr	r3, [pc, #436]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d063      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e2:	4b6a      	ldr	r3, [pc, #424]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	099b      	lsrs	r3, r3, #6
 80035e8:	2200      	movs	r2, #0
 80035ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
 80035fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035fe:	4622      	mov	r2, r4
 8003600:	462b      	mov	r3, r5
 8003602:	f04f 0000 	mov.w	r0, #0
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	0159      	lsls	r1, r3, #5
 800360c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003610:	0150      	lsls	r0, r2, #5
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4621      	mov	r1, r4
 8003618:	1a51      	subs	r1, r2, r1
 800361a:	6139      	str	r1, [r7, #16]
 800361c:	4629      	mov	r1, r5
 800361e:	eb63 0301 	sbc.w	r3, r3, r1
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003630:	4659      	mov	r1, fp
 8003632:	018b      	lsls	r3, r1, #6
 8003634:	4651      	mov	r1, sl
 8003636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800363a:	4651      	mov	r1, sl
 800363c:	018a      	lsls	r2, r1, #6
 800363e:	4651      	mov	r1, sl
 8003640:	ebb2 0801 	subs.w	r8, r2, r1
 8003644:	4659      	mov	r1, fp
 8003646:	eb63 0901 	sbc.w	r9, r3, r1
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800365a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800365e:	4690      	mov	r8, r2
 8003660:	4699      	mov	r9, r3
 8003662:	4623      	mov	r3, r4
 8003664:	eb18 0303 	adds.w	r3, r8, r3
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	462b      	mov	r3, r5
 800366c:	eb49 0303 	adc.w	r3, r9, r3
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800367e:	4629      	mov	r1, r5
 8003680:	024b      	lsls	r3, r1, #9
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003688:	4621      	mov	r1, r4
 800368a:	024a      	lsls	r2, r1, #9
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	2200      	movs	r2, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
 8003696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800369c:	f7fd fadc 	bl	8000c58 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4613      	mov	r3, r2
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a8:	e058      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036aa:	4b38      	ldr	r3, [pc, #224]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	2200      	movs	r2, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	4611      	mov	r1, r2
 80036b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ba:	623b      	str	r3, [r7, #32]
 80036bc:	2300      	movs	r3, #0
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
 80036c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036c4:	4642      	mov	r2, r8
 80036c6:	464b      	mov	r3, r9
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	0159      	lsls	r1, r3, #5
 80036d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d6:	0150      	lsls	r0, r2, #5
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4641      	mov	r1, r8
 80036de:	ebb2 0a01 	subs.w	sl, r2, r1
 80036e2:	4649      	mov	r1, r9
 80036e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003700:	eb63 050b 	sbc.w	r5, r3, fp
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	00eb      	lsls	r3, r5, #3
 800370e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003712:	00e2      	lsls	r2, r4, #3
 8003714:	4614      	mov	r4, r2
 8003716:	461d      	mov	r5, r3
 8003718:	4643      	mov	r3, r8
 800371a:	18e3      	adds	r3, r4, r3
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	464b      	mov	r3, r9
 8003720:	eb45 0303 	adc.w	r3, r5, r3
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003732:	4629      	mov	r1, r5
 8003734:	028b      	lsls	r3, r1, #10
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800373c:	4621      	mov	r1, r4
 800373e:	028a      	lsls	r2, r1, #10
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003746:	2200      	movs	r2, #0
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	61fa      	str	r2, [r7, #28]
 800374c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003750:	f7fd fa82 	bl	8000c58 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	3301      	adds	r3, #1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800376c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800376e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003776:	e002      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetSysClockFreq+0x204>)
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800377c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003780:	4618      	mov	r0, r3
 8003782:	3750      	adds	r7, #80	; 0x50
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	00f42400 	.word	0x00f42400
 8003794:	007a1200 	.word	0x007a1200

08003798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_RCC_GetHCLKFreq+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000000 	.word	0x20000000

080037b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037b4:	f7ff fff0 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0a9b      	lsrs	r3, r3, #10
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4903      	ldr	r1, [pc, #12]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800
 80037d4:	08008214 	.word	0x08008214

080037d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037dc:	f7ff ffdc 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	0b5b      	lsrs	r3, r3, #13
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4903      	ldr	r1, [pc, #12]	; (80037fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	08008214 	.word	0x08008214

08003800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e03f      	b.n	8003892 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fde6 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	; 0x24
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f829 	bl	800389c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800389c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a0:	b0c0      	sub	sp, #256	; 0x100
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	68d9      	ldr	r1, [r3, #12]
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	ea40 0301 	orr.w	r3, r0, r1
 80038c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	431a      	orrs	r2, r3
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038f4:	f021 010c 	bic.w	r1, r1, #12
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003902:	430b      	orrs	r3, r1
 8003904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	6999      	ldr	r1, [r3, #24]
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	ea40 0301 	orr.w	r3, r0, r1
 8003922:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4b8f      	ldr	r3, [pc, #572]	; (8003b68 <UART_SetConfig+0x2cc>)
 800392c:	429a      	cmp	r2, r3
 800392e:	d005      	beq.n	800393c <UART_SetConfig+0xa0>
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b8d      	ldr	r3, [pc, #564]	; (8003b6c <UART_SetConfig+0x2d0>)
 8003938:	429a      	cmp	r2, r3
 800393a:	d104      	bne.n	8003946 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800393c:	f7ff ff4c 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8003940:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003944:	e003      	b.n	800394e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003946:	f7ff ff33 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 800394a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003958:	f040 810c 	bne.w	8003b74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800395c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003966:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800396a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800396e:	4622      	mov	r2, r4
 8003970:	462b      	mov	r3, r5
 8003972:	1891      	adds	r1, r2, r2
 8003974:	65b9      	str	r1, [r7, #88]	; 0x58
 8003976:	415b      	adcs	r3, r3
 8003978:	65fb      	str	r3, [r7, #92]	; 0x5c
 800397a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800397e:	4621      	mov	r1, r4
 8003980:	eb12 0801 	adds.w	r8, r2, r1
 8003984:	4629      	mov	r1, r5
 8003986:	eb43 0901 	adc.w	r9, r3, r1
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800399a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800399e:	4690      	mov	r8, r2
 80039a0:	4699      	mov	r9, r3
 80039a2:	4623      	mov	r3, r4
 80039a4:	eb18 0303 	adds.w	r3, r8, r3
 80039a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039ac:	462b      	mov	r3, r5
 80039ae:	eb49 0303 	adc.w	r3, r9, r3
 80039b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039ca:	460b      	mov	r3, r1
 80039cc:	18db      	adds	r3, r3, r3
 80039ce:	653b      	str	r3, [r7, #80]	; 0x50
 80039d0:	4613      	mov	r3, r2
 80039d2:	eb42 0303 	adc.w	r3, r2, r3
 80039d6:	657b      	str	r3, [r7, #84]	; 0x54
 80039d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039e0:	f7fd f93a 	bl	8000c58 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <UART_SetConfig+0x2d4>)
 80039ea:	fba3 2302 	umull	r2, r3, r3, r2
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	011c      	lsls	r4, r3, #4
 80039f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a04:	4642      	mov	r2, r8
 8003a06:	464b      	mov	r3, r9
 8003a08:	1891      	adds	r1, r2, r2
 8003a0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a0c:	415b      	adcs	r3, r3
 8003a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a14:	4641      	mov	r1, r8
 8003a16:	eb12 0a01 	adds.w	sl, r2, r1
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a34:	4692      	mov	sl, r2
 8003a36:	469b      	mov	fp, r3
 8003a38:	4643      	mov	r3, r8
 8003a3a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a42:	464b      	mov	r3, r9
 8003a44:	eb4b 0303 	adc.w	r3, fp, r3
 8003a48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a60:	460b      	mov	r3, r1
 8003a62:	18db      	adds	r3, r3, r3
 8003a64:	643b      	str	r3, [r7, #64]	; 0x40
 8003a66:	4613      	mov	r3, r2
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a76:	f7fd f8ef 	bl	8000c58 <__aeabi_uldivmod>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4b3b      	ldr	r3, [pc, #236]	; (8003b70 <UART_SetConfig+0x2d4>)
 8003a82:	fba3 2301 	umull	r2, r3, r3, r1
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	2264      	movs	r2, #100	; 0x64
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	1acb      	subs	r3, r1, r3
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <UART_SetConfig+0x2d4>)
 8003a98:	fba3 2302 	umull	r2, r3, r3, r2
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003aa4:	441c      	add	r4, r3
 8003aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ab0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ab4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ab8:	4642      	mov	r2, r8
 8003aba:	464b      	mov	r3, r9
 8003abc:	1891      	adds	r1, r2, r2
 8003abe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ac0:	415b      	adcs	r3, r3
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ac8:	4641      	mov	r1, r8
 8003aca:	1851      	adds	r1, r2, r1
 8003acc:	6339      	str	r1, [r7, #48]	; 0x30
 8003ace:	4649      	mov	r1, r9
 8003ad0:	414b      	adcs	r3, r1
 8003ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ae0:	4659      	mov	r1, fp
 8003ae2:	00cb      	lsls	r3, r1, #3
 8003ae4:	4651      	mov	r1, sl
 8003ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aea:	4651      	mov	r1, sl
 8003aec:	00ca      	lsls	r2, r1, #3
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	4642      	mov	r2, r8
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003afc:	464b      	mov	r3, r9
 8003afe:	460a      	mov	r2, r1
 8003b00:	eb42 0303 	adc.w	r3, r2, r3
 8003b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	18db      	adds	r3, r3, r3
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b22:	4613      	mov	r3, r2
 8003b24:	eb42 0303 	adc.w	r3, r2, r3
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b32:	f7fd f891 	bl	8000c58 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <UART_SetConfig+0x2d4>)
 8003b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	3332      	adds	r3, #50	; 0x32
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <UART_SetConfig+0x2d4>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	f003 0207 	and.w	r2, r3, #7
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4422      	add	r2, r4
 8003b62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b64:	e105      	b.n	8003d72 <UART_SetConfig+0x4d6>
 8003b66:	bf00      	nop
 8003b68:	40011000 	.word	0x40011000
 8003b6c:	40011400 	.word	0x40011400
 8003b70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b86:	4642      	mov	r2, r8
 8003b88:	464b      	mov	r3, r9
 8003b8a:	1891      	adds	r1, r2, r2
 8003b8c:	6239      	str	r1, [r7, #32]
 8003b8e:	415b      	adcs	r3, r3
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
 8003b92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b96:	4641      	mov	r1, r8
 8003b98:	1854      	adds	r4, r2, r1
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	eb43 0501 	adc.w	r5, r3, r1
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	00eb      	lsls	r3, r5, #3
 8003baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bae:	00e2      	lsls	r2, r4, #3
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	461d      	mov	r5, r3
 8003bb4:	4643      	mov	r3, r8
 8003bb6:	18e3      	adds	r3, r4, r3
 8003bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	eb45 0303 	adc.w	r3, r5, r3
 8003bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003be2:	4629      	mov	r1, r5
 8003be4:	008b      	lsls	r3, r1, #2
 8003be6:	4621      	mov	r1, r4
 8003be8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bec:	4621      	mov	r1, r4
 8003bee:	008a      	lsls	r2, r1, #2
 8003bf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bf4:	f7fd f830 	bl	8000c58 <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4b60      	ldr	r3, [pc, #384]	; (8003d80 <UART_SetConfig+0x4e4>)
 8003bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	011c      	lsls	r4, r3, #4
 8003c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c18:	4642      	mov	r2, r8
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	1891      	adds	r1, r2, r2
 8003c1e:	61b9      	str	r1, [r7, #24]
 8003c20:	415b      	adcs	r3, r3
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c28:	4641      	mov	r1, r8
 8003c2a:	1851      	adds	r1, r2, r1
 8003c2c:	6139      	str	r1, [r7, #16]
 8003c2e:	4649      	mov	r1, r9
 8003c30:	414b      	adcs	r3, r1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c40:	4659      	mov	r1, fp
 8003c42:	00cb      	lsls	r3, r1, #3
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	00ca      	lsls	r2, r1, #3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	4642      	mov	r2, r8
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	460a      	mov	r2, r1
 8003c60:	eb42 0303 	adc.w	r3, r2, r3
 8003c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c80:	4649      	mov	r1, r9
 8003c82:	008b      	lsls	r3, r1, #2
 8003c84:	4641      	mov	r1, r8
 8003c86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c8a:	4641      	mov	r1, r8
 8003c8c:	008a      	lsls	r2, r1, #2
 8003c8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c92:	f7fc ffe1 	bl	8000c58 <__aeabi_uldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <UART_SetConfig+0x4e4>)
 8003c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	2164      	movs	r1, #100	; 0x64
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	3332      	adds	r3, #50	; 0x32
 8003cae:	4a34      	ldr	r2, [pc, #208]	; (8003d80 <UART_SetConfig+0x4e4>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cba:	441c      	add	r4, r3
 8003cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	673b      	str	r3, [r7, #112]	; 0x70
 8003cc4:	677a      	str	r2, [r7, #116]	; 0x74
 8003cc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cca:	4642      	mov	r2, r8
 8003ccc:	464b      	mov	r3, r9
 8003cce:	1891      	adds	r1, r2, r2
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cda:	4641      	mov	r1, r8
 8003cdc:	1851      	adds	r1, r2, r1
 8003cde:	6039      	str	r1, [r7, #0]
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	414b      	adcs	r3, r1
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cf2:	4659      	mov	r1, fp
 8003cf4:	00cb      	lsls	r3, r1, #3
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cfc:	4651      	mov	r1, sl
 8003cfe:	00ca      	lsls	r2, r1, #3
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	4603      	mov	r3, r0
 8003d06:	4642      	mov	r2, r8
 8003d08:	189b      	adds	r3, r3, r2
 8003d0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	460a      	mov	r2, r1
 8003d10:	eb42 0303 	adc.w	r3, r2, r3
 8003d14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d20:	667a      	str	r2, [r7, #100]	; 0x64
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d2e:	4649      	mov	r1, r9
 8003d30:	008b      	lsls	r3, r1, #2
 8003d32:	4641      	mov	r1, r8
 8003d34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d38:	4641      	mov	r1, r8
 8003d3a:	008a      	lsls	r2, r1, #2
 8003d3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d40:	f7fc ff8a 	bl	8000c58 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <UART_SetConfig+0x4e4>)
 8003d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2164      	movs	r1, #100	; 0x64
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	3332      	adds	r3, #50	; 0x32
 8003d5c:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <UART_SetConfig+0x4e4>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4422      	add	r2, r4
 8003d70:	609a      	str	r2, [r3, #8]
}
 8003d72:	bf00      	nop
 8003d74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d7e:	bf00      	nop
 8003d80:	51eb851f 	.word	0x51eb851f

08003d84 <USART_WRITE>:
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
	usart->BRR |= baud / 2;
}

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]
 8003d9a:	e017      	b.n	8003dcc <USART_WRITE+0x48>
		if (len == 1) {
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d103      	bne.n	8003daa <USART_WRITE+0x26>
			usart->DR = ch;
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	605a      	str	r2, [r3, #4]
 8003da8:	e006      	b.n	8003db8 <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	4413      	add	r3, r2
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 8003db8:	bf00      	nop
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f9      	beq.n	8003dba <USART_WRITE+0x36>
	for (uint8_t i = 0; i < len; i++) {
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d8e3      	bhi.n	8003d9c <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8003de4:	b40f      	push	{r0, r1, r2, r3}
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dfa:	480a      	ldr	r0, [pc, #40]	; (8003e24 <print+0x40>)
 8003dfc:	f001 fcf8 	bl	80057f0 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8003e00:	4808      	ldr	r0, [pc, #32]	; (8003e24 <print+0x40>)
 8003e02:	f7fc f9ed 	bl	80001e0 <strlen>
 8003e06:	4603      	mov	r3, r0
 8003e08:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	2364      	movs	r3, #100	; 0x64
 8003e0e:	4905      	ldr	r1, [pc, #20]	; (8003e24 <print+0x40>)
 8003e10:	4805      	ldr	r0, [pc, #20]	; (8003e28 <print+0x44>)
 8003e12:	f7ff ffb7 	bl	8003d84 <USART_WRITE>

}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e20:	b004      	add	sp, #16
 8003e22:	4770      	bx	lr
 8003e24:	20000318 	.word	0x20000318
 8003e28:	40004400 	.word	0x40004400

08003e2c <max30100_init>:
		max30100_mode_t mode, max30100_sampling_rate_t sampling_rate,
		max30100_pulse_width_t pulse_width, max30100_current_t ir_current,
		max30100_current_t start_red_current, uint8_t mean_filter_size,
		uint8_t pulse_bpm_sample_size,
		bool high_res_mode,
		bool debug) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	4611      	mov	r1, r2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	71fb      	strb	r3, [r7, #7]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	71bb      	strb	r3, [r7, #6]
	this->_ui2c = hi2c;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	601a      	str	r2, [r3, #0]
	if (HAL_I2C_IsDeviceReady(this->_ui2c, MAX30100_DEVICE, 2, 100) != HAL_OK) {
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	2364      	movs	r3, #100	; 0x64
 8003e4e:	2202      	movs	r2, #2
 8003e50:	21ae      	movs	r1, #174	; 0xae
 8003e52:	f7fe fbc7 	bl	80025e4 <HAL_I2C_IsDeviceReady>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <max30100_init+0x34>
			return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0f2      	b.n	8004046 <max30100_init+0x21a>
		}

	this->acceptable_intense_diff = MAX30100_DEFAULT_ACCEPTABLE_INTENSITY_DIFF;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a7b      	ldr	r2, [pc, #492]	; (8004050 <max30100_init+0x224>)
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24
	this->red_current_adj_ms = MAX30100_DEFAULT_RED_LED_CURRENT_ADJUSTMENT_MS;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e6c:	629a      	str	r2, [r3, #40]	; 0x28
	this->reset_spo2_pulse_n = MAX30100_DEFAULT_RESET_SPO2_EVERY_N_PULSES;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2204      	movs	r2, #4
 8003e72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	this->dc_alpha = MAX30100_DEFAULT_ALPHA;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4a76      	ldr	r2, [pc, #472]	; (8004054 <max30100_init+0x228>)
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
	this->pulse_min_threshold = MAX30100_DEFAULT_PULSE_MIN_THRESHOLD;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2264      	movs	r2, #100	; 0x64
 8003e80:	869a      	strh	r2, [r3, #52]	; 0x34
	this->pulse_max_threshold = MAX30100_DEFAULT_PULSE_MAX_THRESHOLD;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e88:	86da      	strh	r2, [r3, #54]	; 0x36

	this->mean_filter_size = mean_filter_size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	this->pulse_bpm_sample_size = pulse_bpm_sample_size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003e9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	this->debug = debug;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ea4:	711a      	strb	r2, [r3, #4]
	this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	731a      	strb	r2, [r3, #12]

	this->mean_diff_ir.values = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	65da      	str	r2, [r3, #92]	; 0x5c
	this->values_bpm = NULL;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
	this->mean_diff_ir.values = malloc(sizeof(float) * mean_filter_size);
 8003eb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 ff00 	bl	8004cc4 <malloc>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	65da      	str	r2, [r3, #92]	; 0x5c
	this->values_bpm = malloc(sizeof(float) * pulse_bpm_sample_size);
 8003ecc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fef6 	bl	8004cc4 <malloc>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	615a      	str	r2, [r3, #20]

	if (!(this->values_bpm) || !(this->mean_diff_ir.values))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <max30100_init+0xc4>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <max30100_init+0xc8>
		return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0a8      	b.n	8004046 <max30100_init+0x21a>

	HAL_StatusTypeDef ret = max30100_set_mode(this, mode);
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fcd5 	bl	80048a8 <max30100_set_mode>
 8003efe:	4603      	mov	r3, r0
 8003f00:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <max30100_init+0xe0>
		return ret;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	e09c      	b.n	8004046 <max30100_init+0x21a>

	ret = max30100_set_sampling_rate(this, sampling_rate);
 8003f0c:	79bb      	ldrb	r3, [r7, #6]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fd21 	bl	8004958 <max30100_set_sampling_rate>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <max30100_init+0xf8>
		return ret;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	e090      	b.n	8004046 <max30100_init+0x21a>
	ret = max30100_set_pulse_width(this, pulse_width);
 8003f24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fd3d 	bl	80049aa <max30100_set_pulse_width>
 8003f30:	4603      	mov	r3, r0
 8003f32:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <max30100_init+0x112>
		return ret;
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	e083      	b.n	8004046 <max30100_init+0x21a>

	this->red_current = (uint8_t) start_red_current;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003f44:	715a      	strb	r2, [r3, #5]
	this->last_red_current_check = 0;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]

	this->ir_current = ir_current;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	ret = max30100_set_led_current(this, this->red_current, ir_current);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	795b      	ldrb	r3, [r3, #5]
 8003f5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f5e:	4619      	mov	r1, r3
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fd4a 	bl	80049fa <max30100_set_led_current>
 8003f66:	4603      	mov	r3, r0
 8003f68:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <max30100_init+0x148>
		return ret;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	e068      	b.n	8004046 <max30100_init+0x21a>
	ret = max30100_set_high_res(this, high_res_mode);
 8003f74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f78:	4619      	mov	r1, r3
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fcbc 	bl	80048f8 <max30100_set_high_res>
 8003f80:	4603      	mov	r3, r0
 8003f82:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <max30100_init+0x162>
		return ret;
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	e05b      	b.n	8004046 <max30100_init+0x21a>

	this->dc_filter_ir.w = 0;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
	this->dc_filter_ir.result = 0;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44

	this->dc_filter_red.w = 0;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	649a      	str	r2, [r3, #72]	; 0x48
	this->dc_filter_red.result = 0;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	64da      	str	r2, [r3, #76]	; 0x4c

	this->lpb_filter_ir.v[0] = 0;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	651a      	str	r2, [r3, #80]	; 0x50
	this->lpb_filter_ir.v[1] = 0;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
	this->lpb_filter_ir.result = 0;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	659a      	str	r2, [r3, #88]	; 0x58

	memset(this->mean_diff_ir.values, 0, sizeof(float) * mean_filter_size);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8003fca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f000 fe7e 	bl	8004cd4 <memset>
	this->mean_diff_ir.index = 0;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	this->mean_diff_ir.sum = 0;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	665a      	str	r2, [r3, #100]	; 0x64
	this->mean_diff_ir.count = 0;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	memset(this->values_bpm, 0, sizeof(float) * pulse_bpm_sample_size);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6958      	ldr	r0, [r3, #20]
 8003ff4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	f000 fe69 	bl	8004cd4 <memset>
	this->values_bpm_sum = 0;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	619a      	str	r2, [r3, #24]
	this->values_bpm_count = 0;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
	this->bpm_index = 0;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	775a      	strb	r2, [r3, #29]

	this->ir_ac_sq_sum = 0;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	66da      	str	r2, [r3, #108]	; 0x6c
	this->red_ac_sq_sum = 0;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	671a      	str	r2, [r3, #112]	; 0x70
	this->samples_recorded = 0;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	this->pulses_detected = 0;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	this->current_spO2 = 0;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	679a      	str	r2, [r3, #120]	; 0x78

	this->last_beat_threshold = 0;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	621a      	str	r2, [r3, #32]
	return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	00017318 	.word	0x00017318
 8004054:	3f733333 	.word	0x3f733333

08004058 <max30100_update>:

HAL_StatusTypeDef max30100_update(max30100_config_t *this,
		max30100_data_t *data) {
 8004058:	b5b0      	push	{r4, r5, r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
	data->pulse_detected = false;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
	data->heart_bpm = 0.0;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	605a      	str	r2, [r3, #4]
	data->ir_cardiogram = 0.0;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	609a      	str	r2, [r3, #8]
	data->ir_dc_value = 0.0;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	60da      	str	r2, [r3, #12]
	data->red_dc_value = 0.0;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	611a      	str	r2, [r3, #16]
	data->spO2 = this->current_spO2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	615a      	str	r2, [r3, #20]
	data->last_beat_threshold = 0;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	619a      	str	r2, [r3, #24]
	data->dc_filtered_ir = 0.0;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	621a      	str	r2, [r3, #32]
	data->dc_filtered_red = 0.0;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	61da      	str	r2, [r3, #28]

	max30100_fifo_t raw_data;
	HAL_StatusTypeDef ret = max30100_read_fifo(this, &raw_data);
 80040a6:	f107 0308 	add.w	r3, r7, #8
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fcbe 	bl	8004a2e <max30100_read_fifo>
 80040b2:	4603      	mov	r3, r0
 80040b4:	75fb      	strb	r3, [r7, #23]
//=================================================
//	print("IR: %d, Red: %d\n", raw_data.raw_ir, raw_data.raw_red);
//=================================================
	if (ret != HAL_OK)
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <max30100_update+0x68>
		return ret;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	e14f      	b.n	8004360 <max30100_update+0x308>

	this->dc_filter_ir = max30100_dc_removal((float) raw_data.raw_ir,
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80040d6:	687c      	ldr	r4, [r7, #4]
 80040d8:	eeb0 1a66 	vmov.f32	s2, s13
 80040dc:	eef0 0a47 	vmov.f32	s1, s14
 80040e0:	eeb0 0a67 	vmov.f32	s0, s15
 80040e4:	f000 fccf 	bl	8004a86 <max30100_dc_removal>
 80040e8:	eeb0 7a40 	vmov.f32	s14, s0
 80040ec:	eef0 7a60 	vmov.f32	s15, s1
 80040f0:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 80040f4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
			this->dc_filter_ir.w, this->dc_alpha);
	this->dc_filter_red = max30100_dc_removal((float) raw_data.raw_red,
 80040f8:	897b      	ldrh	r3, [r7, #10]
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800410e:	687c      	ldr	r4, [r7, #4]
 8004110:	eeb0 1a66 	vmov.f32	s2, s13
 8004114:	eef0 0a47 	vmov.f32	s1, s14
 8004118:	eeb0 0a67 	vmov.f32	s0, s15
 800411c:	f000 fcb3 	bl	8004a86 <max30100_dc_removal>
 8004120:	eeb0 7a40 	vmov.f32	s14, s0
 8004124:	eef0 7a60 	vmov.f32	s15, s1
 8004128:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800412c:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
			this->dc_filter_red.w, this->dc_alpha);

	float mean_diff_res_ir = max30100_mean_diff(this,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004136:	eeb0 0a67 	vmov.f32	s0, s15
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fd24 	bl	8004b88 <max30100_mean_diff>
 8004140:	ed87 0a04 	vstr	s0, [r7, #16]
			this->dc_filter_ir.result);
	//=================================================
//	print("IR mean difference: %f\n", mean_diff_res_ir);
	//=================================================

	max30100_lpb_filter(this, mean_diff_res_ir/*-dcFilterIR.result*/);
 8004144:	ed97 0a04 	vldr	s0, [r7, #16]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fcd5 	bl	8004af8 <max30100_lpb_filter>

	//=================================================
//	print("lpb_filter_ir: %f\n", this->lpb_filter_ir.result);
	//=================================================

	this->ir_ac_sq_sum += this->dc_filter_ir.result * this->dc_filter_ir.result;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	this->red_ac_sq_sum += this->dc_filter_red.result * this->dc_filter_red.result;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	this->samples_recorded++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8004194:	3301      	adds	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	if (max30100_detect_pulse(this, this->lpb_filter_ir.result) && this->samples_recorded) {
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80041a4:	eeb0 0a67 	vmov.f32	s0, s15
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f8e3 	bl	8004374 <max30100_detect_pulse>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a4 	beq.w	80042fe <max30100_update+0x2a6>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 809e 	beq.w	80042fe <max30100_update+0x2a6>
		data->pulse_detected = true;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
		this->pulses_detected++;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80041ce:	3301      	adds	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

		float ratio_rms = log(sqrt(this->red_ac_sq_sum / (float) this->samples_recorded))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80041e4:	ee07 3a90 	vmov	s15, r3
 80041e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80041f0:	ee16 0a90 	vmov	r0, s13
 80041f4:	f7fc f9b0 	bl	8000558 <__aeabi_f2d>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	ec43 2b10 	vmov	d0, r2, r3
 8004200:	f003 fca4 	bl	8007b4c <sqrt>
 8004204:	eeb0 7a40 	vmov.f32	s14, s0
 8004208:	eef0 7a60 	vmov.f32	s15, s1
 800420c:	eeb0 0a47 	vmov.f32	s0, s14
 8004210:	eef0 0a67 	vmov.f32	s1, s15
 8004214:	f003 fc5c 	bl	8007ad0 <log>
 8004218:	ec55 4b10 	vmov	r4, r5, d0
				/ log(sqrt(this->ir_ac_sq_sum / (float) this->samples_recorded));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004230:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004234:	ee16 0a90 	vmov	r0, s13
 8004238:	f7fc f98e 	bl	8000558 <__aeabi_f2d>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	ec43 2b10 	vmov	d0, r2, r3
 8004244:	f003 fc82 	bl	8007b4c <sqrt>
 8004248:	eeb0 7a40 	vmov.f32	s14, s0
 800424c:	eef0 7a60 	vmov.f32	s15, s1
 8004250:	eeb0 0a47 	vmov.f32	s0, s14
 8004254:	eef0 0a67 	vmov.f32	s1, s15
 8004258:	f003 fc3a 	bl	8007ad0 <log>
 800425c:	ec53 2b10 	vmov	r2, r3, d0
 8004260:	4620      	mov	r0, r4
 8004262:	4629      	mov	r1, r5
 8004264:	f7fc fafa 	bl	800085c <__aeabi_ddiv>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
		float ratio_rms = log(sqrt(this->red_ac_sq_sum / (float) this->samples_recorded))
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	f7fc fca2 	bl	8000bb8 <__aeabi_d2f>
 8004274:	4603      	mov	r3, r0
 8004276:	60fb      	str	r3, [r7, #12]

		if (this->debug)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	791b      	ldrb	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <max30100_update+0x23c>
			print("RMS Ratio: %f\n", ratio_rms);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7fc f969 	bl	8000558 <__aeabi_f2d>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	ec43 2b10 	vmov	d0, r2, r3
 800428e:	4836      	ldr	r0, [pc, #216]	; (8004368 <max30100_update+0x310>)
 8004290:	f7ff fda8 	bl	8003de4 <print>

		//This is my adjusted standard model, so it shows 0.89 as 94% saturation.
		//It is probably far from correct, requires proper empircal calibration.
		this->current_spO2 = 110.0 - 16.0 * ratio_rms;
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7fc f95f 	bl	8000558 <__aeabi_f2d>
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	4b33      	ldr	r3, [pc, #204]	; (800436c <max30100_update+0x314>)
 80042a0:	f7fc f9b2 	bl	8000608 <__aeabi_dmul>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	f04f 0000 	mov.w	r0, #0
 80042ac:	4930      	ldr	r1, [pc, #192]	; (8004370 <max30100_update+0x318>)
 80042ae:	f7fb fff3 	bl	8000298 <__aeabi_dsub>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	f7fc fc7d 	bl	8000bb8 <__aeabi_d2f>
 80042be:	4602      	mov	r2, r0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	679a      	str	r2, [r3, #120]	; 0x78
		data->spO2 = this->current_spO2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	615a      	str	r2, [r3, #20]

		if (!(this->pulses_detected % this->reset_spo2_pulse_n)) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80042d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80042dc:	fb01 f202 	mul.w	r2, r1, r2
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <max30100_update+0x2a6>
			this->ir_ac_sq_sum = 0;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	66da      	str	r2, [r3, #108]	; 0x6c
			this->red_ac_sq_sum = 0;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	671a      	str	r2, [r3, #112]	; 0x70
			this->samples_recorded = 0;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		}
	}

	ret = max30100_balance_intensities(this, this->dc_filter_red.w,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800430a:	eef0 0a47 	vmov.f32	s1, s14
 800430e:	eeb0 0a67 	vmov.f32	s0, s15
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f9e8 	bl	80046e8 <max30100_balance_intensities>
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]
			this->dc_filter_ir.w);
	if (ret != HAL_OK)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <max30100_update+0x2ce>
		return ret;
 8004322:	7dfb      	ldrb	r3, [r7, #23]
 8004324:	e01c      	b.n	8004360 <max30100_update+0x308>

	data->heart_bpm = this->current_bpm;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]
	data->ir_cardiogram = this->lpb_filter_ir.result;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	609a      	str	r2, [r3, #8]
	data->ir_dc_value = this->dc_filter_ir.w;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	60da      	str	r2, [r3, #12]
	data->red_dc_value = this->dc_filter_red.w;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	611a      	str	r2, [r3, #16]
	data->last_beat_threshold = this->last_beat_threshold;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1a      	ldr	r2, [r3, #32]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	619a      	str	r2, [r3, #24]
	data->dc_filtered_ir = this->dc_filter_ir.result;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	621a      	str	r2, [r3, #32]
	data->dc_filtered_red = this->dc_filter_red.result;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bdb0      	pop	{r4, r5, r7, pc}
 8004368:	08008118 	.word	0x08008118
 800436c:	40300000 	.word	0x40300000
 8004370:	405b8000 	.word	0x405b8000

08004374 <max30100_detect_pulse>:

bool max30100_detect_pulse(max30100_config_t *this, float sensor_value) {
 8004374:	b5b0      	push	{r4, r5, r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	ed87 0a00 	vstr	s0, [r7]
	static float prev_sensor_value = 0;
	static uint8_t values_went_down = 0;
	static uint32_t current_beat = 0;
	static uint32_t last_beat = 0;

	if (sensor_value > this->pulse_max_threshold) {
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004384:	ee07 3a90 	vmov	s15, r3
 8004388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800438c:	ed97 7a00 	vldr	s14, [r7]
 8004390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004398:	dd14      	ble.n	80043c4 <max30100_detect_pulse+0x50>
		this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	731a      	strb	r2, [r3, #12]
		prev_sensor_value = 0;
 80043a0:	4baa      	ldr	r3, [pc, #680]	; (800464c <max30100_detect_pulse+0x2d8>)
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
		last_beat = 0;
 80043a8:	4ba9      	ldr	r3, [pc, #676]	; (8004650 <max30100_detect_pulse+0x2dc>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
		current_beat = 0;
 80043ae:	4ba9      	ldr	r3, [pc, #676]	; (8004654 <max30100_detect_pulse+0x2e0>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
		values_went_down = 0;
 80043b4:	4ba8      	ldr	r3, [pc, #672]	; (8004658 <max30100_detect_pulse+0x2e4>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
		this->last_beat_threshold = 0;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	621a      	str	r2, [r3, #32]
		return false;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e189      	b.n	80046d8 <max30100_detect_pulse+0x364>
	}

	switch (this->current_pulse_detector_state) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	7b1b      	ldrb	r3, [r3, #12]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	f000 815f 	beq.w	800468c <max30100_detect_pulse+0x318>
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	f300 817e 	bgt.w	80046d0 <max30100_detect_pulse+0x35c>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <max30100_detect_pulse+0x6a>
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d015      	beq.n	8004408 <max30100_detect_pulse+0x94>
 80043dc:	e178      	b.n	80046d0 <max30100_detect_pulse+0x35c>
	case MAX30100_PULSE_IDLE:
		if (sensor_value >= this->pulse_min_threshold) {
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ea:	ed97 7a00 	vldr	s14, [r7]
 80043ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f6:	da00      	bge.n	80043fa <max30100_detect_pulse+0x86>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_UP;
			values_went_down = 0;
		}
		break;
 80043f8:	e16a      	b.n	80046d0 <max30100_detect_pulse+0x35c>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_UP;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	731a      	strb	r2, [r3, #12]
			values_went_down = 0;
 8004400:	4b95      	ldr	r3, [pc, #596]	; (8004658 <max30100_detect_pulse+0x2e4>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
		break;
 8004406:	e163      	b.n	80046d0 <max30100_detect_pulse+0x35c>
	case MAX30100_PULSE_TRACE_UP:
		if (sensor_value > prev_sensor_value) {
 8004408:	4b90      	ldr	r3, [pc, #576]	; (800464c <max30100_detect_pulse+0x2d8>)
 800440a:	edd3 7a00 	vldr	s15, [r3]
 800440e:	ed97 7a00 	vldr	s14, [r7]
 8004412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441a:	dd0d      	ble.n	8004438 <max30100_detect_pulse+0xc4>
			current_beat = HAL_GetTick();
 800441c:	f7fd f9c6 	bl	80017ac <HAL_GetTick>
 8004420:	4603      	mov	r3, r0
 8004422:	4a8c      	ldr	r2, [pc, #560]	; (8004654 <max30100_detect_pulse+0x2e0>)
 8004424:	6013      	str	r3, [r2, #0]
			this->last_beat_threshold = sensor_value;
 8004426:	edd7 7a00 	vldr	s15, [r7]
 800442a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442e:	ee17 2a90 	vmov	r2, s15
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	621a      	str	r2, [r3, #32]
				print("AVg. BPM: %f\n", this->current_bpm);
			}

			return true;
		}
		break;
 8004436:	e14b      	b.n	80046d0 <max30100_detect_pulse+0x35c>
			if (this->debug) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	791b      	ldrb	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d012      	beq.n	8004466 <max30100_detect_pulse+0xf2>
				print("Peak reached: %f %f\n", sensor_value, prev_sensor_value);
 8004440:	6838      	ldr	r0, [r7, #0]
 8004442:	f7fc f889 	bl	8000558 <__aeabi_f2d>
 8004446:	4604      	mov	r4, r0
 8004448:	460d      	mov	r5, r1
 800444a:	4b80      	ldr	r3, [pc, #512]	; (800464c <max30100_detect_pulse+0x2d8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fc f882 	bl	8000558 <__aeabi_f2d>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	ec43 2b11 	vmov	d1, r2, r3
 800445c:	ec45 4b10 	vmov	d0, r4, r5
 8004460:	487e      	ldr	r0, [pc, #504]	; (800465c <max30100_detect_pulse+0x2e8>)
 8004462:	f7ff fcbf 	bl	8003de4 <print>
			uint32_t beat_duration = current_beat - last_beat;
 8004466:	4b7b      	ldr	r3, [pc, #492]	; (8004654 <max30100_detect_pulse+0x2e0>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b79      	ldr	r3, [pc, #484]	; (8004650 <max30100_detect_pulse+0x2dc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	60fb      	str	r3, [r7, #12]
			last_beat = current_beat;
 8004472:	4b78      	ldr	r3, [pc, #480]	; (8004654 <max30100_detect_pulse+0x2e0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a76      	ldr	r2, [pc, #472]	; (8004650 <max30100_detect_pulse+0x2dc>)
 8004478:	6013      	str	r3, [r2, #0]
			float raw_bpm = 0;
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
			if (beat_duration)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <max30100_detect_pulse+0x128>
				raw_bpm = 60000.0 / (float) beat_duration;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	ee07 3a90 	vmov	s15, r3
 800448c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004490:	eddf 6a73 	vldr	s13, [pc, #460]	; 8004660 <max30100_detect_pulse+0x2ec>
 8004494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004498:	edc7 7a05 	vstr	s15, [r7, #20]
			if (this->debug) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	791b      	ldrb	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <max30100_detect_pulse+0x14c>
				print("Beat duration: %u\n", beat_duration);
 80044a4:	68f9      	ldr	r1, [r7, #12]
 80044a6:	486f      	ldr	r0, [pc, #444]	; (8004664 <max30100_detect_pulse+0x2f0>)
 80044a8:	f7ff fc9c 	bl	8003de4 <print>
				print("Raw BPM: %f\n", raw_bpm);
 80044ac:	6978      	ldr	r0, [r7, #20]
 80044ae:	f7fc f853 	bl	8000558 <__aeabi_f2d>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	ec43 2b10 	vmov	d0, r2, r3
 80044ba:	486b      	ldr	r0, [pc, #428]	; (8004668 <max30100_detect_pulse+0x2f4>)
 80044bc:	f7ff fc92 	bl	8003de4 <print>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_DOWN;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	731a      	strb	r2, [r3, #12]
			if (beat_duration > 2500) { // 2.5 seconds
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d91a      	bls.n	8004506 <max30100_detect_pulse+0x192>
				memset(this->values_bpm, 0,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6958      	ldr	r0, [r3, #20]
						sizeof(float) * this->pulse_bpm_sample_size);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				memset(this->values_bpm, 0,
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	461a      	mov	r2, r3
 80044de:	2100      	movs	r1, #0
 80044e0:	f000 fbf8 	bl	8004cd4 <memset>
				this->values_bpm_sum = 0;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	619a      	str	r2, [r3, #24]
				this->values_bpm_count = 0;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	771a      	strb	r2, [r3, #28]
				this->bpm_index = 0;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	775a      	strb	r2, [r3, #29]
				if (this->debug)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	791b      	ldrb	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <max30100_detect_pulse+0x192>
					print("Moving avg. reseted\n");
 8004500:	485a      	ldr	r0, [pc, #360]	; (800466c <max30100_detect_pulse+0x2f8>)
 8004502:	f7ff fc6f 	bl	8003de4 <print>
			if (raw_bpm < 50 || raw_bpm > 220) {
 8004506:	edd7 7a05 	vldr	s15, [r7, #20]
 800450a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004670 <max30100_detect_pulse+0x2fc>
 800450e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004516:	d408      	bmi.n	800452a <max30100_detect_pulse+0x1b6>
 8004518:	edd7 7a05 	vldr	s15, [r7, #20]
 800451c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004674 <max30100_detect_pulse+0x300>
 8004520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004528:	dd08      	ble.n	800453c <max30100_detect_pulse+0x1c8>
				if (this->debug)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	791b      	ldrb	r3, [r3, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <max30100_detect_pulse+0x1c4>
					print("BPM out of bounds. Not adding to Moving Avg.\n");
 8004532:	4851      	ldr	r0, [pc, #324]	; (8004678 <max30100_detect_pulse+0x304>)
 8004534:	f7ff fc56 	bl	8003de4 <print>
				return false;
 8004538:	2300      	movs	r3, #0
 800453a:	e0cd      	b.n	80046d8 <max30100_detect_pulse+0x364>
			this->values_bpm_sum -= this->values_bpm[this->bpm_index];
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	7f5b      	ldrb	r3, [r3, #29]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	edd3 7a00 	vldr	s15, [r3]
 8004552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	edc3 7a06 	vstr	s15, [r3, #24]
			this->values_bpm[this->bpm_index] = raw_bpm;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7f5b      	ldrb	r3, [r3, #29]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	601a      	str	r2, [r3, #0]
			this->values_bpm_sum += this->values_bpm[this->bpm_index++];
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7f5b      	ldrb	r3, [r3, #29]
 8004574:	1c59      	adds	r1, r3, #1
 8004576:	b2c8      	uxtb	r0, r1
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	7748      	strb	r0, [r1, #29]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	ed93 7a00 	vldr	s14, [r3]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	edd3 7a06 	vldr	s15, [r3, #24]
 800458a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	edc3 7a06 	vstr	s15, [r3, #24]
			this->bpm_index %= this->pulse_bpm_sample_size;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7f5b      	ldrb	r3, [r3, #29]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800459e:	fbb3 f1f2 	udiv	r1, r3, r2
 80045a2:	fb01 f202 	mul.w	r2, r1, r2
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	775a      	strb	r2, [r3, #29]
			if (this->values_bpm_count < this->pulse_bpm_sample_size)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	7f1a      	ldrb	r2, [r3, #28]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d205      	bcs.n	80045c8 <max30100_detect_pulse+0x254>
				this->values_bpm_count++;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	7f1b      	ldrb	r3, [r3, #28]
 80045c0:	3301      	adds	r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	771a      	strb	r2, [r3, #28]
			this->current_bpm = this->values_bpm_sum / this->values_bpm_count;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	edd3 6a06 	vldr	s13, [r3, #24]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	7f1b      	ldrb	r3, [r3, #28]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	edc3 7a04 	vstr	s15, [r3, #16]
			if (this->debug) {
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	791b      	ldrb	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d02d      	beq.n	8004648 <max30100_detect_pulse+0x2d4>
				print("CurrentMoving Avg: ");
 80045ec:	4823      	ldr	r0, [pc, #140]	; (800467c <max30100_detect_pulse+0x308>)
 80045ee:	f7ff fbf9 	bl	8003de4 <print>
				for (int i = 0; i < this->values_bpm_count; i++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	e012      	b.n	800461e <max30100_detect_pulse+0x2aa>
					print("%f ", this->values_bpm[i]);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fb ffa7 	bl	8000558 <__aeabi_f2d>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	ec43 2b10 	vmov	d0, r2, r3
 8004612:	481b      	ldr	r0, [pc, #108]	; (8004680 <max30100_detect_pulse+0x30c>)
 8004614:	f7ff fbe6 	bl	8003de4 <print>
				for (int i = 0; i < this->values_bpm_count; i++)
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	3301      	adds	r3, #1
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7f1b      	ldrb	r3, [r3, #28]
 8004622:	461a      	mov	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4293      	cmp	r3, r2
 8004628:	dbe6      	blt.n	80045f8 <max30100_detect_pulse+0x284>
				print(" \n");
 800462a:	4816      	ldr	r0, [pc, #88]	; (8004684 <max30100_detect_pulse+0x310>)
 800462c:	f7ff fbda 	bl	8003de4 <print>
				print("AVg. BPM: %f\n", this->current_bpm);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	4618      	mov	r0, r3
 8004636:	f7fb ff8f 	bl	8000558 <__aeabi_f2d>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	ec43 2b10 	vmov	d0, r2, r3
 8004642:	4811      	ldr	r0, [pc, #68]	; (8004688 <max30100_detect_pulse+0x314>)
 8004644:	f7ff fbce 	bl	8003de4 <print>
			return true;
 8004648:	2301      	movs	r3, #1
 800464a:	e045      	b.n	80046d8 <max30100_detect_pulse+0x364>
 800464c:	20000418 	.word	0x20000418
 8004650:	2000041c 	.word	0x2000041c
 8004654:	20000420 	.word	0x20000420
 8004658:	20000424 	.word	0x20000424
 800465c:	08008128 	.word	0x08008128
 8004660:	476a6000 	.word	0x476a6000
 8004664:	08008140 	.word	0x08008140
 8004668:	08008154 	.word	0x08008154
 800466c:	08008164 	.word	0x08008164
 8004670:	42480000 	.word	0x42480000
 8004674:	435c0000 	.word	0x435c0000
 8004678:	0800817c 	.word	0x0800817c
 800467c:	080081ac 	.word	0x080081ac
 8004680:	080081c0 	.word	0x080081c0
 8004684:	080081c4 	.word	0x080081c4
 8004688:	080081c8 	.word	0x080081c8
	case MAX30100_PULSE_TRACE_DOWN:
		if (sensor_value < prev_sensor_value)
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <max30100_detect_pulse+0x36c>)
 800468e:	edd3 7a00 	vldr	s15, [r3]
 8004692:	ed97 7a00 	vldr	s14, [r7]
 8004696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469e:	d505      	bpl.n	80046ac <max30100_detect_pulse+0x338>
			values_went_down++;
 80046a0:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <max30100_detect_pulse+0x370>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <max30100_detect_pulse+0x370>)
 80046aa:	701a      	strb	r2, [r3, #0]

		if (sensor_value < this->pulse_min_threshold)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b8:	ed97 7a00 	vldr	s14, [r7]
 80046bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c4:	d400      	bmi.n	80046c8 <max30100_detect_pulse+0x354>
			this->current_pulse_detector_state = MAX30100_PULSE_IDLE;

		break;
 80046c6:	e002      	b.n	80046ce <max30100_detect_pulse+0x35a>
			this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	731a      	strb	r2, [r3, #12]
		break;
 80046ce:	bf00      	nop
	}

	prev_sensor_value = sensor_value;
 80046d0:	4a03      	ldr	r2, [pc, #12]	; (80046e0 <max30100_detect_pulse+0x36c>)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6013      	str	r3, [r2, #0]
	return false;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bdb0      	pop	{r4, r5, r7, pc}
 80046e0:	20000418 	.word	0x20000418
 80046e4:	20000424 	.word	0x20000424

080046e8 <max30100_balance_intensities>:

HAL_StatusTypeDef max30100_balance_intensities(max30100_config_t *this,
		float red_dc, float ir_dc) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80046f4:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((uint32_t) (HAL_GetTick()) - this->last_red_current_check
 80046f8:	f7fd f858 	bl	80017ac <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	1ad2      	subs	r2, r2, r3
			>= this->red_current_adj_ms) {
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((uint32_t) (HAL_GetTick()) - this->last_red_current_check
 8004708:	429a      	cmp	r2, r3
 800470a:	d36b      	bcc.n	80047e4 <max30100_balance_intensities+0xfc>
		//print("%f\n", red_dc - ir_dc);
		if (ir_dc - red_dc > this->acceptable_intense_diff
 800470c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004710:	edd7 7a02 	vldr	s15, [r7, #8]
 8004714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004724:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472c:	dd21      	ble.n	8004772 <max30100_balance_intensities+0x8a>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	795b      	ldrb	r3, [r3, #5]
 8004732:	2b0e      	cmp	r3, #14
 8004734:	d81d      	bhi.n	8004772 <max30100_balance_intensities+0x8a>
			this->red_current++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	795b      	ldrb	r3, [r3, #5]
 800473a:	3301      	adds	r3, #1
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	715a      	strb	r2, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
					this->red_current, this->ir_current);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	7959      	ldrb	r1, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800474c:	461a      	mov	r2, r3
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f953 	bl	80049fa <max30100_set_led_current>
 8004754:	4603      	mov	r3, r0
 8004756:	75fb      	strb	r3, [r7, #23]
			if (ret != HAL_OK)
 8004758:	7dfb      	ldrb	r3, [r7, #23]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <max30100_balance_intensities+0x7a>
				return ret;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
 8004760:	e041      	b.n	80047e6 <max30100_balance_intensities+0xfe>
			if (this->debug)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	791b      	ldrb	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d036      	beq.n	80047d8 <max30100_balance_intensities+0xf0>
				print("RED LED Current +\n");
 800476a:	4821      	ldr	r0, [pc, #132]	; (80047f0 <max30100_balance_intensities+0x108>)
 800476c:	f7ff fb3a 	bl	8003de4 <print>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 8004770:	e032      	b.n	80047d8 <max30100_balance_intensities+0xf0>

		} else if (red_dc - ir_dc > this->acceptable_intense_diff
 8004772:	ed97 7a02 	vldr	s14, [r7, #8]
 8004776:	edd7 7a01 	vldr	s15, [r7, #4]
 800477a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	dd22      	ble.n	80047da <max30100_balance_intensities+0xf2>
				&& this->red_current > 0) {
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	795b      	ldrb	r3, [r3, #5]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01e      	beq.n	80047da <max30100_balance_intensities+0xf2>
			this->red_current--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	795b      	ldrb	r3, [r3, #5]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	715a      	strb	r2, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
					this->red_current, this->ir_current);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	7959      	ldrb	r1, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80047b2:	461a      	mov	r2, r3
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f920 	bl	80049fa <max30100_set_led_current>
 80047ba:	4603      	mov	r3, r0
 80047bc:	75bb      	strb	r3, [r7, #22]
			if (ret != HAL_OK)
 80047be:	7dbb      	ldrb	r3, [r7, #22]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <max30100_balance_intensities+0xe0>
				return ret;
 80047c4:	7dbb      	ldrb	r3, [r7, #22]
 80047c6:	e00e      	b.n	80047e6 <max30100_balance_intensities+0xfe>
			if (this->debug)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	791b      	ldrb	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d004      	beq.n	80047da <max30100_balance_intensities+0xf2>
				print("RED LED Current -\n");
 80047d0:	4808      	ldr	r0, [pc, #32]	; (80047f4 <max30100_balance_intensities+0x10c>)
 80047d2:	f7ff fb07 	bl	8003de4 <print>
 80047d6:	e000      	b.n	80047da <max30100_balance_intensities+0xf2>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 80047d8:	bf00      	nop
		}

		this->last_red_current_check = (uint32_t) (HAL_GetTick());
 80047da:	f7fc ffe7 	bl	80017ac <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	609a      	str	r2, [r3, #8]

	}
	return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	080081d8 	.word	0x080081d8
 80047f4:	080081ec 	.word	0x080081ec

080047f8 <max30100_write_register>:

// Writes val to address register on device
HAL_StatusTypeDef max30100_write_register(max30100_config_t *this,
		uint8_t address, uint8_t val) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
 8004804:	4613      	mov	r3, r2
 8004806:	70bb      	strb	r3, [r7, #2]
	// start transmission to device
//	uint8_t *pVal = &val;
//	return HAL_I2C_Mem_Write(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, pVal, 1, 10);

	uint8_t pVal[2] = {address, val};
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	733b      	strb	r3, [r7, #12]
 800480c:	78bb      	ldrb	r3, [r7, #2]
 800480e:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(this->_ui2c, MAX30100_DEVICE, pVal, 2, 100);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	f107 020c 	add.w	r2, r7, #12
 8004818:	2364      	movs	r3, #100	; 0x64
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	2302      	movs	r3, #2
 800481e:	21ae      	movs	r1, #174	; 0xae
 8004820:	f7fd fbbc 	bl	8001f9c <HAL_I2C_Master_Transmit>
 8004824:	4603      	mov	r3, r0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <max30100_read_register>:

HAL_StatusTypeDef max30100_read_register(max30100_config_t *this,
		uint8_t address, uint8_t *reg) {
 800482e:	b580      	push	{r7, lr}
 8004830:	b088      	sub	sp, #32
 8004832:	af04      	add	r7, sp, #16
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	460b      	mov	r3, r1
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	72fb      	strb	r3, [r7, #11]
//	return I2C_MasterByteRead(this->_ui2c, MAX30100_DEVICE, address, reg,
//			100);
	return HAL_I2C_Mem_Read(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, reg, 1, 100);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	7afb      	ldrb	r3, [r7, #11]
 8004842:	b29a      	uxth	r2, r3
 8004844:	2364      	movs	r3, #100	; 0x64
 8004846:	9302      	str	r3, [sp, #8]
 8004848:	2301      	movs	r3, #1
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2301      	movs	r3, #1
 8004852:	21ae      	movs	r1, #174	; 0xae
 8004854:	f7fd fca0 	bl	8002198 <HAL_I2C_Mem_Read>
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <max30100_read_from>:

// Reads num bytes starting from address register on device in to _buff array
HAL_StatusTypeDef max30100_read_from(max30100_config_t *this, uint8_t address,
		uint8_t *reg, uint8_t size) {
 8004862:	b580      	push	{r7, lr}
 8004864:	b088      	sub	sp, #32
 8004866:	af04      	add	r7, sp, #16
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	461a      	mov	r2, r3
 800486e:	460b      	mov	r3, r1
 8004870:	72fb      	strb	r3, [r7, #11]
 8004872:	4613      	mov	r3, r2
 8004874:	72bb      	strb	r3, [r7, #10]
	if (!size)
 8004876:	7abb      	ldrb	r3, [r7, #10]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <max30100_read_from+0x1e>
		return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e00f      	b.n	80048a0 <max30100_read_from+0x3e>

//	return I2C_MasterMultiRead(this->_ui2c, MAX30100_DEVICE, address, size,
//			reg, 100);
	return HAL_I2C_Mem_Read(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, reg, size, 100);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	7afb      	ldrb	r3, [r7, #11]
 8004886:	b29a      	uxth	r2, r3
 8004888:	7abb      	ldrb	r3, [r7, #10]
 800488a:	b29b      	uxth	r3, r3
 800488c:	2164      	movs	r1, #100	; 0x64
 800488e:	9102      	str	r1, [sp, #8]
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	2301      	movs	r3, #1
 8004898:	21ae      	movs	r1, #174	; 0xae
 800489a:	f7fd fc7d 	bl	8002198 <HAL_I2C_Mem_Read>
 800489e:	4603      	mov	r3, r0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <max30100_set_mode>:

HAL_StatusTypeDef max30100_set_mode(max30100_config_t *this,
		max30100_mode_t mode) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
	uint8_t current_mode_reg;
	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_MODE_CONF,
 80048b4:	f107 030e 	add.w	r3, r7, #14
 80048b8:	461a      	mov	r2, r3
 80048ba:	2106      	movs	r1, #6
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff ffb6 	bl	800482e <max30100_read_register>
 80048c2:	4603      	mov	r3, r0
 80048c4:	73fb      	strb	r3, [r7, #15]
			&current_mode_reg);
	if (ret != HAL_OK)
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <max30100_set_mode+0x28>
		return ret;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	e00f      	b.n	80048f0 <max30100_set_mode+0x48>
	return max30100_write_register(this, MAX30100_MODE_CONF,
			(current_mode_reg & 0xF8) | mode);
 80048d0:	7bbb      	ldrb	r3, [r7, #14]
 80048d2:	b25b      	sxtb	r3, r3
 80048d4:	f023 0307 	bic.w	r3, r3, #7
 80048d8:	b25a      	sxtb	r2, r3
 80048da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048de:	4313      	orrs	r3, r2
 80048e0:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_MODE_CONF,
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	2106      	movs	r1, #6
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff ff85 	bl	80047f8 <max30100_write_register>
 80048ee:	4603      	mov	r3, r0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <max30100_set_high_res>:

HAL_StatusTypeDef max30100_set_high_res(max30100_config_t *this, bool enabled) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
	uint8_t previous;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 8004904:	f107 030e 	add.w	r3, r7, #14
 8004908:	461a      	mov	r2, r3
 800490a:	2107      	movs	r1, #7
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff8e 	bl	800482e <max30100_read_register>
 8004912:	4603      	mov	r3, r0
 8004914:	73fb      	strb	r3, [r7, #15]
			&previous);
	if (ret != HAL_OK)
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <max30100_set_high_res+0x28>
		return ret;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	e017      	b.n	8004950 <max30100_set_high_res+0x58>
	if (enabled) {
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <max30100_set_high_res+0x44>
		return max30100_write_register(this, MAX30100_SPO2_CONF,
 8004926:	7bbb      	ldrb	r3, [r7, #14]
 8004928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	2107      	movs	r1, #7
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ff60 	bl	80047f8 <max30100_write_register>
 8004938:	4603      	mov	r3, r0
 800493a:	e009      	b.n	8004950 <max30100_set_high_res+0x58>
				previous | MAX30100_SPO2_HI_RES_EN);
	} else {
		return max30100_write_register(this, MAX30100_SPO2_CONF,
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	2107      	movs	r1, #7
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff ff55 	bl	80047f8 <max30100_write_register>
 800494e:	4603      	mov	r3, r0
				previous & ~MAX30100_SPO2_HI_RES_EN);
	}
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <max30100_set_sampling_rate>:

HAL_StatusTypeDef max30100_set_sampling_rate(max30100_config_t *this,
		max30100_sampling_rate_t rate) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
	uint8_t current_spO2_reg;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 8004964:	f107 030e 	add.w	r3, r7, #14
 8004968:	461a      	mov	r2, r3
 800496a:	2107      	movs	r1, #7
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff5e 	bl	800482e <max30100_read_register>
 8004972:	4603      	mov	r3, r0
 8004974:	73fb      	strb	r3, [r7, #15]
			&current_spO2_reg);
	if (ret != HAL_OK)
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <max30100_set_sampling_rate+0x28>
		return ret;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	e010      	b.n	80049a2 <max30100_set_sampling_rate+0x4a>
	return max30100_write_register(this, MAX30100_SPO2_CONF,
			(current_spO2_reg & 0xE3) | (rate << 2));
 8004980:	7bbb      	ldrb	r3, [r7, #14]
 8004982:	b25b      	sxtb	r3, r3
 8004984:	f023 031c 	bic.w	r3, r3, #28
 8004988:	b25a      	sxtb	r2, r3
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	b25b      	sxtb	r3, r3
 8004990:	4313      	orrs	r3, r2
 8004992:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_SPO2_CONF,
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	2107      	movs	r1, #7
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff ff2c 	bl	80047f8 <max30100_write_register>
 80049a0:	4603      	mov	r3, r0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <max30100_set_pulse_width>:

HAL_StatusTypeDef max30100_set_pulse_width(max30100_config_t *this,
		max30100_pulse_width_t pw) {
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	70fb      	strb	r3, [r7, #3]
	uint8_t current_spO2_reg;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 80049b6:	f107 030e 	add.w	r3, r7, #14
 80049ba:	461a      	mov	r2, r3
 80049bc:	2107      	movs	r1, #7
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ff35 	bl	800482e <max30100_read_register>
 80049c4:	4603      	mov	r3, r0
 80049c6:	73fb      	strb	r3, [r7, #15]
			&current_spO2_reg);
	if (ret != HAL_OK)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <max30100_set_pulse_width+0x28>
		return ret;
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	e00f      	b.n	80049f2 <max30100_set_pulse_width+0x48>
	return max30100_write_register(this, MAX30100_SPO2_CONF,
			(current_spO2_reg & 0xFC) | pw);
 80049d2:	7bbb      	ldrb	r3, [r7, #14]
 80049d4:	b25b      	sxtb	r3, r3
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	b25a      	sxtb	r2, r3
 80049dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_SPO2_CONF,
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	2107      	movs	r1, #7
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff ff04 	bl	80047f8 <max30100_write_register>
 80049f0:	4603      	mov	r3, r0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <max30100_set_led_current>:

HAL_StatusTypeDef max30100_set_led_current(max30100_config_t *this,
		max30100_current_t red_current, max30100_current_t ir_current) {
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	70fb      	strb	r3, [r7, #3]
 8004a06:	4613      	mov	r3, r2
 8004a08:	70bb      	strb	r3, [r7, #2]
	//Tratar erros
	return max30100_write_register(this, MAX30100_LED_CONF,
			(red_current << 4) | ir_current);
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	b25a      	sxtb	r2, r3
 8004a10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_LED_CONF,
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2109      	movs	r1, #9
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff feea 	bl	80047f8 <max30100_write_register>
 8004a24:	4603      	mov	r3, r0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <max30100_read_fifo>:
	*temperature = (float) temp + temp_fraction;
	return HAL_OK;
}

HAL_StatusTypeDef max30100_read_fifo(max30100_config_t *this,
		max30100_fifo_t *fifo) {
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
	uint8_t buffer[4];
	//Testar erros
	HAL_StatusTypeDef ret = max30100_read_from(this, MAX30100_FIFO_DATA, buffer,
 8004a38:	f107 0208 	add.w	r2, r7, #8
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	2105      	movs	r1, #5
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff ff0e 	bl	8004862 <max30100_read_from>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73fb      	strb	r3, [r7, #15]
			4);
	if (ret != HAL_OK)
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <max30100_read_fifo+0x26>
		return ret;
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	e014      	b.n	8004a7e <max30100_read_fifo+0x50>
	fifo->raw_ir = ((uint16_t) buffer[0] << 8) | buffer[1];
 8004a54:	7a3b      	ldrb	r3, [r7, #8]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	b21a      	sxth	r2, r3
 8004a5a:	7a7b      	ldrb	r3, [r7, #9]
 8004a5c:	b21b      	sxth	r3, r3
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	b21b      	sxth	r3, r3
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	801a      	strh	r2, [r3, #0]
	fifo->raw_red = ((uint16_t) buffer[2] << 8) | buffer[3];
 8004a68:	7abb      	ldrb	r3, [r7, #10]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	b21a      	sxth	r2, r3
 8004a6e:	7afb      	ldrb	r3, [r7, #11]
 8004a70:	b21b      	sxth	r3, r3
 8004a72:	4313      	orrs	r3, r2
 8004a74:	b21b      	sxth	r3, r3
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	805a      	strh	r2, [r3, #2]

	return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <max30100_dc_removal>:

max30100_dc_filter_t max30100_dc_removal(float x, float prev_w, float alpha) {
 8004a86:	b480      	push	{r7}
 8004a88:	b08b      	sub	sp, #44	; 0x2c
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	ed87 0a05 	vstr	s0, [r7, #20]
 8004a90:	edc7 0a04 	vstr	s1, [r7, #16]
 8004a94:	ed87 1a03 	vstr	s2, [r7, #12]
	max30100_dc_filter_t filtered = { };
 8004a98:	f107 0318 	add.w	r3, r7, #24
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
	filtered.w = x + alpha * prev_w;
 8004aa2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004aa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004aae:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ab6:	edc7 7a06 	vstr	s15, [r7, #24]
	filtered.result = filtered.w - prev_w;
 8004aba:	ed97 7a06 	vldr	s14, [r7, #24]
 8004abe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ac6:	edc7 7a07 	vstr	s15, [r7, #28]

	return filtered;
 8004aca:	f107 0320 	add.w	r3, r7, #32
 8004ace:	f107 0218 	add.w	r2, r7, #24
 8004ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ad6:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ada:	6a3a      	ldr	r2, [r7, #32]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	ee07 2a10 	vmov	s14, r2
 8004ae2:	ee07 3a90 	vmov	s15, r3
}
 8004ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aea:	eef0 0a67 	vmov.f32	s1, s15
 8004aee:	372c      	adds	r7, #44	; 0x2c
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <max30100_lpb_filter>:

void max30100_lpb_filter(max30100_config_t *this, float x) {
 8004af8:	b5b0      	push	{r4, r5, r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	ed87 0a00 	vstr	s0, [r7]
	this->lpb_filter_ir.v[0] = this->lpb_filter_ir.v[1];
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	651a      	str	r2, [r3, #80]	; 0x50

	//Fs = 100Hz and Fc = 10Hz
	this->lpb_filter_ir.v[1] = (2.452372752527856026e-1 * x)
 8004b0c:	6838      	ldr	r0, [r7, #0]
 8004b0e:	f7fb fd23 	bl	8000558 <__aeabi_f2d>
 8004b12:	a319      	add	r3, pc, #100	; (adr r3, 8004b78 <max30100_lpb_filter+0x80>)
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	f7fb fd76 	bl	8000608 <__aeabi_dmul>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4614      	mov	r4, r2
 8004b22:	461d      	mov	r5, r3
			+ (0.50952544949442879485 * this->lpb_filter_ir.v[0]);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fb fd15 	bl	8000558 <__aeabi_f2d>
 8004b2e:	a314      	add	r3, pc, #80	; (adr r3, 8004b80 <max30100_lpb_filter+0x88>)
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	f7fb fd68 	bl	8000608 <__aeabi_dmul>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	4629      	mov	r1, r5
 8004b40:	f7fb fbac 	bl	800029c <__adddf3>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	f7fc f834 	bl	8000bb8 <__aeabi_d2f>
 8004b50:	4602      	mov	r2, r0
	this->lpb_filter_ir.v[1] = (2.452372752527856026e-1 * x)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54
	//Fs = 100Hz and Fc = 4Hz
	//this->lpb_filter_ir.v[1] = (1.367287359973195227e-1 * x)
	//                   + (0.72654252800536101020 * this->lpb_filter_ir.v[0]);
	//Very precise butterworth filter

	this->lpb_filter_ir.result = this->lpb_filter_ir.v[0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
			+ this->lpb_filter_ir.v[1];
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004b62:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->lpb_filter_ir.result = this->lpb_filter_ir.v[0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bdb0      	pop	{r4, r5, r7, pc}
 8004b74:	f3af 8000 	nop.w
 8004b78:	5e7c4548 	.word	0x5e7c4548
 8004b7c:	3fcf63ef 	.word	0x3fcf63ef
 8004b80:	50c1dd5c 	.word	0x50c1dd5c
 8004b84:	3fe04e08 	.word	0x3fe04e08

08004b88 <max30100_mean_diff>:

float max30100_mean_diff(max30100_config_t *this, float M) {
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	ed87 0a00 	vstr	s0, [r7]
	float avg = 0;
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]

	this->mean_diff_ir.sum -=
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
			this->mean_diff_ir.values[this->mean_diff_ir.index];
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	edd3 7a00 	vldr	s15, [r3]
	this->mean_diff_ir.sum -=
 8004bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	this->mean_diff_ir.values[this->mean_diff_ir.index] = M;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	601a      	str	r2, [r3, #0]
	this->mean_diff_ir.sum +=
			this->mean_diff_ir.values[this->mean_diff_ir.index++];
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004bd8:	1c59      	adds	r1, r3, #1
 8004bda:	b2c8      	uxtb	r0, r1
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	ed93 7a00 	vldr	s14, [r3]
	this->mean_diff_ir.sum +=
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	this->mean_diff_ir.index = this->mean_diff_ir.index
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
			% this->mean_filter_size;
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
	this->mean_diff_ir.index = this->mean_diff_ir.index
 8004c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c0a:	fb01 f202 	mul.w	r2, r1, r2
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	if (this->mean_diff_ir.count < this->mean_filter_size)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d207      	bcs.n	8004c38 <max30100_mean_diff+0xb0>
		this->mean_diff_ir.count++;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004c2e:	3301      	adds	r3, #1
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	avg = this->mean_diff_ir.sum / this->mean_diff_ir.count;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004c44:	ee07 3a90 	vmov	s15, r3
 8004c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c50:	edc7 7a03 	vstr	s15, [r7, #12]
	return avg - M;
 8004c54:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c58:	edd7 7a00 	vldr	s15, [r7]
 8004c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8004c60:	eeb0 0a67 	vmov.f32	s0, s15
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <__errno>:
 8004c70:	4b01      	ldr	r3, [pc, #4]	; (8004c78 <__errno+0x8>)
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	2000000c 	.word	0x2000000c

08004c7c <__libc_init_array>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	4d0d      	ldr	r5, [pc, #52]	; (8004cb4 <__libc_init_array+0x38>)
 8004c80:	4c0d      	ldr	r4, [pc, #52]	; (8004cb8 <__libc_init_array+0x3c>)
 8004c82:	1b64      	subs	r4, r4, r5
 8004c84:	10a4      	asrs	r4, r4, #2
 8004c86:	2600      	movs	r6, #0
 8004c88:	42a6      	cmp	r6, r4
 8004c8a:	d109      	bne.n	8004ca0 <__libc_init_array+0x24>
 8004c8c:	4d0b      	ldr	r5, [pc, #44]	; (8004cbc <__libc_init_array+0x40>)
 8004c8e:	4c0c      	ldr	r4, [pc, #48]	; (8004cc0 <__libc_init_array+0x44>)
 8004c90:	f003 f9fe 	bl	8008090 <_init>
 8004c94:	1b64      	subs	r4, r4, r5
 8004c96:	10a4      	asrs	r4, r4, #2
 8004c98:	2600      	movs	r6, #0
 8004c9a:	42a6      	cmp	r6, r4
 8004c9c:	d105      	bne.n	8004caa <__libc_init_array+0x2e>
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca4:	4798      	blx	r3
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7ee      	b.n	8004c88 <__libc_init_array+0xc>
 8004caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cae:	4798      	blx	r3
 8004cb0:	3601      	adds	r6, #1
 8004cb2:	e7f2      	b.n	8004c9a <__libc_init_array+0x1e>
 8004cb4:	080085fc 	.word	0x080085fc
 8004cb8:	080085fc 	.word	0x080085fc
 8004cbc:	080085fc 	.word	0x080085fc
 8004cc0:	08008600 	.word	0x08008600

08004cc4 <malloc>:
 8004cc4:	4b02      	ldr	r3, [pc, #8]	; (8004cd0 <malloc+0xc>)
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f000 b877 	b.w	8004dbc <_malloc_r>
 8004cce:	bf00      	nop
 8004cd0:	2000000c 	.word	0x2000000c

08004cd4 <memset>:
 8004cd4:	4402      	add	r2, r0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d100      	bne.n	8004cde <memset+0xa>
 8004cdc:	4770      	bx	lr
 8004cde:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce2:	e7f9      	b.n	8004cd8 <memset+0x4>

08004ce4 <_free_r>:
 8004ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ce6:	2900      	cmp	r1, #0
 8004ce8:	d044      	beq.n	8004d74 <_free_r+0x90>
 8004cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cee:	9001      	str	r0, [sp, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8004cf6:	bfb8      	it	lt
 8004cf8:	18e4      	addlt	r4, r4, r3
 8004cfa:	f001 fc15 	bl	8006528 <__malloc_lock>
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <_free_r+0x94>)
 8004d00:	9801      	ldr	r0, [sp, #4]
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	b933      	cbnz	r3, 8004d14 <_free_r+0x30>
 8004d06:	6063      	str	r3, [r4, #4]
 8004d08:	6014      	str	r4, [r2, #0]
 8004d0a:	b003      	add	sp, #12
 8004d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d10:	f001 bc10 	b.w	8006534 <__malloc_unlock>
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d908      	bls.n	8004d2a <_free_r+0x46>
 8004d18:	6825      	ldr	r5, [r4, #0]
 8004d1a:	1961      	adds	r1, r4, r5
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf01      	itttt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	1949      	addeq	r1, r1, r5
 8004d26:	6021      	streq	r1, [r4, #0]
 8004d28:	e7ed      	b.n	8004d06 <_free_r+0x22>
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	b10b      	cbz	r3, 8004d34 <_free_r+0x50>
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d9fa      	bls.n	8004d2a <_free_r+0x46>
 8004d34:	6811      	ldr	r1, [r2, #0]
 8004d36:	1855      	adds	r5, r2, r1
 8004d38:	42a5      	cmp	r5, r4
 8004d3a:	d10b      	bne.n	8004d54 <_free_r+0x70>
 8004d3c:	6824      	ldr	r4, [r4, #0]
 8004d3e:	4421      	add	r1, r4
 8004d40:	1854      	adds	r4, r2, r1
 8004d42:	42a3      	cmp	r3, r4
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	d1e0      	bne.n	8004d0a <_free_r+0x26>
 8004d48:	681c      	ldr	r4, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	6053      	str	r3, [r2, #4]
 8004d4e:	4421      	add	r1, r4
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	e7da      	b.n	8004d0a <_free_r+0x26>
 8004d54:	d902      	bls.n	8004d5c <_free_r+0x78>
 8004d56:	230c      	movs	r3, #12
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	e7d6      	b.n	8004d0a <_free_r+0x26>
 8004d5c:	6825      	ldr	r5, [r4, #0]
 8004d5e:	1961      	adds	r1, r4, r5
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf04      	itt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	bf04      	itt	eq
 8004d6c:	1949      	addeq	r1, r1, r5
 8004d6e:	6021      	streq	r1, [r4, #0]
 8004d70:	6054      	str	r4, [r2, #4]
 8004d72:	e7ca      	b.n	8004d0a <_free_r+0x26>
 8004d74:	b003      	add	sp, #12
 8004d76:	bd30      	pop	{r4, r5, pc}
 8004d78:	20000428 	.word	0x20000428

08004d7c <sbrk_aligned>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4e0e      	ldr	r6, [pc, #56]	; (8004db8 <sbrk_aligned+0x3c>)
 8004d80:	460c      	mov	r4, r1
 8004d82:	6831      	ldr	r1, [r6, #0]
 8004d84:	4605      	mov	r5, r0
 8004d86:	b911      	cbnz	r1, 8004d8e <sbrk_aligned+0x12>
 8004d88:	f000 fcf6 	bl	8005778 <_sbrk_r>
 8004d8c:	6030      	str	r0, [r6, #0]
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4628      	mov	r0, r5
 8004d92:	f000 fcf1 	bl	8005778 <_sbrk_r>
 8004d96:	1c43      	adds	r3, r0, #1
 8004d98:	d00a      	beq.n	8004db0 <sbrk_aligned+0x34>
 8004d9a:	1cc4      	adds	r4, r0, #3
 8004d9c:	f024 0403 	bic.w	r4, r4, #3
 8004da0:	42a0      	cmp	r0, r4
 8004da2:	d007      	beq.n	8004db4 <sbrk_aligned+0x38>
 8004da4:	1a21      	subs	r1, r4, r0
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 fce6 	bl	8005778 <_sbrk_r>
 8004dac:	3001      	adds	r0, #1
 8004dae:	d101      	bne.n	8004db4 <sbrk_aligned+0x38>
 8004db0:	f04f 34ff 	mov.w	r4, #4294967295
 8004db4:	4620      	mov	r0, r4
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	2000042c 	.word	0x2000042c

08004dbc <_malloc_r>:
 8004dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc0:	1ccd      	adds	r5, r1, #3
 8004dc2:	f025 0503 	bic.w	r5, r5, #3
 8004dc6:	3508      	adds	r5, #8
 8004dc8:	2d0c      	cmp	r5, #12
 8004dca:	bf38      	it	cc
 8004dcc:	250c      	movcc	r5, #12
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	db01      	blt.n	8004dd8 <_malloc_r+0x1c>
 8004dd4:	42a9      	cmp	r1, r5
 8004dd6:	d905      	bls.n	8004de4 <_malloc_r+0x28>
 8004dd8:	230c      	movs	r3, #12
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	2600      	movs	r6, #0
 8004dde:	4630      	mov	r0, r6
 8004de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de4:	4e2e      	ldr	r6, [pc, #184]	; (8004ea0 <_malloc_r+0xe4>)
 8004de6:	f001 fb9f 	bl	8006528 <__malloc_lock>
 8004dea:	6833      	ldr	r3, [r6, #0]
 8004dec:	461c      	mov	r4, r3
 8004dee:	bb34      	cbnz	r4, 8004e3e <_malloc_r+0x82>
 8004df0:	4629      	mov	r1, r5
 8004df2:	4638      	mov	r0, r7
 8004df4:	f7ff ffc2 	bl	8004d7c <sbrk_aligned>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	d14d      	bne.n	8004e9a <_malloc_r+0xde>
 8004dfe:	6834      	ldr	r4, [r6, #0]
 8004e00:	4626      	mov	r6, r4
 8004e02:	2e00      	cmp	r6, #0
 8004e04:	d140      	bne.n	8004e88 <_malloc_r+0xcc>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	eb04 0803 	add.w	r8, r4, r3
 8004e10:	f000 fcb2 	bl	8005778 <_sbrk_r>
 8004e14:	4580      	cmp	r8, r0
 8004e16:	d13a      	bne.n	8004e8e <_malloc_r+0xd2>
 8004e18:	6821      	ldr	r1, [r4, #0]
 8004e1a:	3503      	adds	r5, #3
 8004e1c:	1a6d      	subs	r5, r5, r1
 8004e1e:	f025 0503 	bic.w	r5, r5, #3
 8004e22:	3508      	adds	r5, #8
 8004e24:	2d0c      	cmp	r5, #12
 8004e26:	bf38      	it	cc
 8004e28:	250c      	movcc	r5, #12
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff ffa5 	bl	8004d7c <sbrk_aligned>
 8004e32:	3001      	adds	r0, #1
 8004e34:	d02b      	beq.n	8004e8e <_malloc_r+0xd2>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	442b      	add	r3, r5
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	e00e      	b.n	8004e5c <_malloc_r+0xa0>
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	1b52      	subs	r2, r2, r5
 8004e42:	d41e      	bmi.n	8004e82 <_malloc_r+0xc6>
 8004e44:	2a0b      	cmp	r2, #11
 8004e46:	d916      	bls.n	8004e76 <_malloc_r+0xba>
 8004e48:	1961      	adds	r1, r4, r5
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	6025      	str	r5, [r4, #0]
 8004e4e:	bf18      	it	ne
 8004e50:	6059      	strne	r1, [r3, #4]
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	bf08      	it	eq
 8004e56:	6031      	streq	r1, [r6, #0]
 8004e58:	5162      	str	r2, [r4, r5]
 8004e5a:	604b      	str	r3, [r1, #4]
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f104 060b 	add.w	r6, r4, #11
 8004e62:	f001 fb67 	bl	8006534 <__malloc_unlock>
 8004e66:	f026 0607 	bic.w	r6, r6, #7
 8004e6a:	1d23      	adds	r3, r4, #4
 8004e6c:	1af2      	subs	r2, r6, r3
 8004e6e:	d0b6      	beq.n	8004dde <_malloc_r+0x22>
 8004e70:	1b9b      	subs	r3, r3, r6
 8004e72:	50a3      	str	r3, [r4, r2]
 8004e74:	e7b3      	b.n	8004dde <_malloc_r+0x22>
 8004e76:	6862      	ldr	r2, [r4, #4]
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	bf0c      	ite	eq
 8004e7c:	6032      	streq	r2, [r6, #0]
 8004e7e:	605a      	strne	r2, [r3, #4]
 8004e80:	e7ec      	b.n	8004e5c <_malloc_r+0xa0>
 8004e82:	4623      	mov	r3, r4
 8004e84:	6864      	ldr	r4, [r4, #4]
 8004e86:	e7b2      	b.n	8004dee <_malloc_r+0x32>
 8004e88:	4634      	mov	r4, r6
 8004e8a:	6876      	ldr	r6, [r6, #4]
 8004e8c:	e7b9      	b.n	8004e02 <_malloc_r+0x46>
 8004e8e:	230c      	movs	r3, #12
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4638      	mov	r0, r7
 8004e94:	f001 fb4e 	bl	8006534 <__malloc_unlock>
 8004e98:	e7a1      	b.n	8004dde <_malloc_r+0x22>
 8004e9a:	6025      	str	r5, [r4, #0]
 8004e9c:	e7de      	b.n	8004e5c <_malloc_r+0xa0>
 8004e9e:	bf00      	nop
 8004ea0:	20000428 	.word	0x20000428

08004ea4 <__cvt>:
 8004ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea8:	ec55 4b10 	vmov	r4, r5, d0
 8004eac:	2d00      	cmp	r5, #0
 8004eae:	460e      	mov	r6, r1
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	bfbb      	ittet	lt
 8004eb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004eba:	461d      	movlt	r5, r3
 8004ebc:	2300      	movge	r3, #0
 8004ebe:	232d      	movlt	r3, #45	; 0x2d
 8004ec0:	700b      	strb	r3, [r1, #0]
 8004ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ec8:	4691      	mov	r9, r2
 8004eca:	f023 0820 	bic.w	r8, r3, #32
 8004ece:	bfbc      	itt	lt
 8004ed0:	4622      	movlt	r2, r4
 8004ed2:	4614      	movlt	r4, r2
 8004ed4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ed8:	d005      	beq.n	8004ee6 <__cvt+0x42>
 8004eda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ede:	d100      	bne.n	8004ee2 <__cvt+0x3e>
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	2102      	movs	r1, #2
 8004ee4:	e000      	b.n	8004ee8 <__cvt+0x44>
 8004ee6:	2103      	movs	r1, #3
 8004ee8:	ab03      	add	r3, sp, #12
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	ab02      	add	r3, sp, #8
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	ec45 4b10 	vmov	d0, r4, r5
 8004ef4:	4653      	mov	r3, sl
 8004ef6:	4632      	mov	r2, r6
 8004ef8:	f000 fd16 	bl	8005928 <_dtoa_r>
 8004efc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f00:	4607      	mov	r7, r0
 8004f02:	d102      	bne.n	8004f0a <__cvt+0x66>
 8004f04:	f019 0f01 	tst.w	r9, #1
 8004f08:	d022      	beq.n	8004f50 <__cvt+0xac>
 8004f0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f0e:	eb07 0906 	add.w	r9, r7, r6
 8004f12:	d110      	bne.n	8004f36 <__cvt+0x92>
 8004f14:	783b      	ldrb	r3, [r7, #0]
 8004f16:	2b30      	cmp	r3, #48	; 0x30
 8004f18:	d10a      	bne.n	8004f30 <__cvt+0x8c>
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4620      	mov	r0, r4
 8004f20:	4629      	mov	r1, r5
 8004f22:	f7fb fdd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f26:	b918      	cbnz	r0, 8004f30 <__cvt+0x8c>
 8004f28:	f1c6 0601 	rsb	r6, r6, #1
 8004f2c:	f8ca 6000 	str.w	r6, [sl]
 8004f30:	f8da 3000 	ldr.w	r3, [sl]
 8004f34:	4499      	add	r9, r3
 8004f36:	2200      	movs	r2, #0
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	f7fb fdcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f42:	b108      	cbz	r0, 8004f48 <__cvt+0xa4>
 8004f44:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f48:	2230      	movs	r2, #48	; 0x30
 8004f4a:	9b03      	ldr	r3, [sp, #12]
 8004f4c:	454b      	cmp	r3, r9
 8004f4e:	d307      	bcc.n	8004f60 <__cvt+0xbc>
 8004f50:	9b03      	ldr	r3, [sp, #12]
 8004f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f54:	1bdb      	subs	r3, r3, r7
 8004f56:	4638      	mov	r0, r7
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	b004      	add	sp, #16
 8004f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f60:	1c59      	adds	r1, r3, #1
 8004f62:	9103      	str	r1, [sp, #12]
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	e7f0      	b.n	8004f4a <__cvt+0xa6>

08004f68 <__exponent>:
 8004f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	bfb8      	it	lt
 8004f70:	4249      	neglt	r1, r1
 8004f72:	f803 2b02 	strb.w	r2, [r3], #2
 8004f76:	bfb4      	ite	lt
 8004f78:	222d      	movlt	r2, #45	; 0x2d
 8004f7a:	222b      	movge	r2, #43	; 0x2b
 8004f7c:	2909      	cmp	r1, #9
 8004f7e:	7042      	strb	r2, [r0, #1]
 8004f80:	dd2a      	ble.n	8004fd8 <__exponent+0x70>
 8004f82:	f10d 0407 	add.w	r4, sp, #7
 8004f86:	46a4      	mov	ip, r4
 8004f88:	270a      	movs	r7, #10
 8004f8a:	46a6      	mov	lr, r4
 8004f8c:	460a      	mov	r2, r1
 8004f8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f92:	fb07 1516 	mls	r5, r7, r6, r1
 8004f96:	3530      	adds	r5, #48	; 0x30
 8004f98:	2a63      	cmp	r2, #99	; 0x63
 8004f9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	dcf1      	bgt.n	8004f8a <__exponent+0x22>
 8004fa6:	3130      	adds	r1, #48	; 0x30
 8004fa8:	f1ae 0502 	sub.w	r5, lr, #2
 8004fac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004fb0:	1c44      	adds	r4, r0, #1
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4561      	cmp	r1, ip
 8004fb6:	d30a      	bcc.n	8004fce <__exponent+0x66>
 8004fb8:	f10d 0209 	add.w	r2, sp, #9
 8004fbc:	eba2 020e 	sub.w	r2, r2, lr
 8004fc0:	4565      	cmp	r5, ip
 8004fc2:	bf88      	it	hi
 8004fc4:	2200      	movhi	r2, #0
 8004fc6:	4413      	add	r3, r2
 8004fc8:	1a18      	subs	r0, r3, r0
 8004fca:	b003      	add	sp, #12
 8004fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004fd6:	e7ed      	b.n	8004fb4 <__exponent+0x4c>
 8004fd8:	2330      	movs	r3, #48	; 0x30
 8004fda:	3130      	adds	r1, #48	; 0x30
 8004fdc:	7083      	strb	r3, [r0, #2]
 8004fde:	70c1      	strb	r1, [r0, #3]
 8004fe0:	1d03      	adds	r3, r0, #4
 8004fe2:	e7f1      	b.n	8004fc8 <__exponent+0x60>

08004fe4 <_printf_float>:
 8004fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe8:	ed2d 8b02 	vpush	{d8}
 8004fec:	b08d      	sub	sp, #52	; 0x34
 8004fee:	460c      	mov	r4, r1
 8004ff0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	461f      	mov	r7, r3
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	f001 fa83 	bl	8006504 <_localeconv_r>
 8004ffe:	f8d0 a000 	ldr.w	sl, [r0]
 8005002:	4650      	mov	r0, sl
 8005004:	f7fb f8ec 	bl	80001e0 <strlen>
 8005008:	2300      	movs	r3, #0
 800500a:	930a      	str	r3, [sp, #40]	; 0x28
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	9305      	str	r3, [sp, #20]
 8005010:	f8d8 3000 	ldr.w	r3, [r8]
 8005014:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005018:	3307      	adds	r3, #7
 800501a:	f023 0307 	bic.w	r3, r3, #7
 800501e:	f103 0208 	add.w	r2, r3, #8
 8005022:	f8c8 2000 	str.w	r2, [r8]
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800502e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005032:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005036:	9307      	str	r3, [sp, #28]
 8005038:	f8cd 8018 	str.w	r8, [sp, #24]
 800503c:	ee08 0a10 	vmov	s16, r0
 8005040:	4b9f      	ldr	r3, [pc, #636]	; (80052c0 <_printf_float+0x2dc>)
 8005042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005046:	f04f 32ff 	mov.w	r2, #4294967295
 800504a:	f7fb fd77 	bl	8000b3c <__aeabi_dcmpun>
 800504e:	bb88      	cbnz	r0, 80050b4 <_printf_float+0xd0>
 8005050:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005054:	4b9a      	ldr	r3, [pc, #616]	; (80052c0 <_printf_float+0x2dc>)
 8005056:	f04f 32ff 	mov.w	r2, #4294967295
 800505a:	f7fb fd51 	bl	8000b00 <__aeabi_dcmple>
 800505e:	bb48      	cbnz	r0, 80050b4 <_printf_float+0xd0>
 8005060:	2200      	movs	r2, #0
 8005062:	2300      	movs	r3, #0
 8005064:	4640      	mov	r0, r8
 8005066:	4649      	mov	r1, r9
 8005068:	f7fb fd40 	bl	8000aec <__aeabi_dcmplt>
 800506c:	b110      	cbz	r0, 8005074 <_printf_float+0x90>
 800506e:	232d      	movs	r3, #45	; 0x2d
 8005070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005074:	4b93      	ldr	r3, [pc, #588]	; (80052c4 <_printf_float+0x2e0>)
 8005076:	4894      	ldr	r0, [pc, #592]	; (80052c8 <_printf_float+0x2e4>)
 8005078:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800507c:	bf94      	ite	ls
 800507e:	4698      	movls	r8, r3
 8005080:	4680      	movhi	r8, r0
 8005082:	2303      	movs	r3, #3
 8005084:	6123      	str	r3, [r4, #16]
 8005086:	9b05      	ldr	r3, [sp, #20]
 8005088:	f023 0204 	bic.w	r2, r3, #4
 800508c:	6022      	str	r2, [r4, #0]
 800508e:	f04f 0900 	mov.w	r9, #0
 8005092:	9700      	str	r7, [sp, #0]
 8005094:	4633      	mov	r3, r6
 8005096:	aa0b      	add	r2, sp, #44	; 0x2c
 8005098:	4621      	mov	r1, r4
 800509a:	4628      	mov	r0, r5
 800509c:	f000 f9d8 	bl	8005450 <_printf_common>
 80050a0:	3001      	adds	r0, #1
 80050a2:	f040 8090 	bne.w	80051c6 <_printf_float+0x1e2>
 80050a6:	f04f 30ff 	mov.w	r0, #4294967295
 80050aa:	b00d      	add	sp, #52	; 0x34
 80050ac:	ecbd 8b02 	vpop	{d8}
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	4642      	mov	r2, r8
 80050b6:	464b      	mov	r3, r9
 80050b8:	4640      	mov	r0, r8
 80050ba:	4649      	mov	r1, r9
 80050bc:	f7fb fd3e 	bl	8000b3c <__aeabi_dcmpun>
 80050c0:	b140      	cbz	r0, 80050d4 <_printf_float+0xf0>
 80050c2:	464b      	mov	r3, r9
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bfbc      	itt	lt
 80050c8:	232d      	movlt	r3, #45	; 0x2d
 80050ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050ce:	487f      	ldr	r0, [pc, #508]	; (80052cc <_printf_float+0x2e8>)
 80050d0:	4b7f      	ldr	r3, [pc, #508]	; (80052d0 <_printf_float+0x2ec>)
 80050d2:	e7d1      	b.n	8005078 <_printf_float+0x94>
 80050d4:	6863      	ldr	r3, [r4, #4]
 80050d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050da:	9206      	str	r2, [sp, #24]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	d13f      	bne.n	8005160 <_printf_float+0x17c>
 80050e0:	2306      	movs	r3, #6
 80050e2:	6063      	str	r3, [r4, #4]
 80050e4:	9b05      	ldr	r3, [sp, #20]
 80050e6:	6861      	ldr	r1, [r4, #4]
 80050e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80050ec:	2300      	movs	r3, #0
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	ab0a      	add	r3, sp, #40	; 0x28
 80050f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050f6:	ab09      	add	r3, sp, #36	; 0x24
 80050f8:	ec49 8b10 	vmov	d0, r8, r9
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	6022      	str	r2, [r4, #0]
 8005100:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005104:	4628      	mov	r0, r5
 8005106:	f7ff fecd 	bl	8004ea4 <__cvt>
 800510a:	9b06      	ldr	r3, [sp, #24]
 800510c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800510e:	2b47      	cmp	r3, #71	; 0x47
 8005110:	4680      	mov	r8, r0
 8005112:	d108      	bne.n	8005126 <_printf_float+0x142>
 8005114:	1cc8      	adds	r0, r1, #3
 8005116:	db02      	blt.n	800511e <_printf_float+0x13a>
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	4299      	cmp	r1, r3
 800511c:	dd41      	ble.n	80051a2 <_printf_float+0x1be>
 800511e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005122:	fa5f fb8b 	uxtb.w	fp, fp
 8005126:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800512a:	d820      	bhi.n	800516e <_printf_float+0x18a>
 800512c:	3901      	subs	r1, #1
 800512e:	465a      	mov	r2, fp
 8005130:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005134:	9109      	str	r1, [sp, #36]	; 0x24
 8005136:	f7ff ff17 	bl	8004f68 <__exponent>
 800513a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800513c:	1813      	adds	r3, r2, r0
 800513e:	2a01      	cmp	r2, #1
 8005140:	4681      	mov	r9, r0
 8005142:	6123      	str	r3, [r4, #16]
 8005144:	dc02      	bgt.n	800514c <_printf_float+0x168>
 8005146:	6822      	ldr	r2, [r4, #0]
 8005148:	07d2      	lsls	r2, r2, #31
 800514a:	d501      	bpl.n	8005150 <_printf_float+0x16c>
 800514c:	3301      	adds	r3, #1
 800514e:	6123      	str	r3, [r4, #16]
 8005150:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005154:	2b00      	cmp	r3, #0
 8005156:	d09c      	beq.n	8005092 <_printf_float+0xae>
 8005158:	232d      	movs	r3, #45	; 0x2d
 800515a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515e:	e798      	b.n	8005092 <_printf_float+0xae>
 8005160:	9a06      	ldr	r2, [sp, #24]
 8005162:	2a47      	cmp	r2, #71	; 0x47
 8005164:	d1be      	bne.n	80050e4 <_printf_float+0x100>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1bc      	bne.n	80050e4 <_printf_float+0x100>
 800516a:	2301      	movs	r3, #1
 800516c:	e7b9      	b.n	80050e2 <_printf_float+0xfe>
 800516e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005172:	d118      	bne.n	80051a6 <_printf_float+0x1c2>
 8005174:	2900      	cmp	r1, #0
 8005176:	6863      	ldr	r3, [r4, #4]
 8005178:	dd0b      	ble.n	8005192 <_printf_float+0x1ae>
 800517a:	6121      	str	r1, [r4, #16]
 800517c:	b913      	cbnz	r3, 8005184 <_printf_float+0x1a0>
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	07d0      	lsls	r0, r2, #31
 8005182:	d502      	bpl.n	800518a <_printf_float+0x1a6>
 8005184:	3301      	adds	r3, #1
 8005186:	440b      	add	r3, r1
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	65a1      	str	r1, [r4, #88]	; 0x58
 800518c:	f04f 0900 	mov.w	r9, #0
 8005190:	e7de      	b.n	8005150 <_printf_float+0x16c>
 8005192:	b913      	cbnz	r3, 800519a <_printf_float+0x1b6>
 8005194:	6822      	ldr	r2, [r4, #0]
 8005196:	07d2      	lsls	r2, r2, #31
 8005198:	d501      	bpl.n	800519e <_printf_float+0x1ba>
 800519a:	3302      	adds	r3, #2
 800519c:	e7f4      	b.n	8005188 <_printf_float+0x1a4>
 800519e:	2301      	movs	r3, #1
 80051a0:	e7f2      	b.n	8005188 <_printf_float+0x1a4>
 80051a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a8:	4299      	cmp	r1, r3
 80051aa:	db05      	blt.n	80051b8 <_printf_float+0x1d4>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	6121      	str	r1, [r4, #16]
 80051b0:	07d8      	lsls	r0, r3, #31
 80051b2:	d5ea      	bpl.n	800518a <_printf_float+0x1a6>
 80051b4:	1c4b      	adds	r3, r1, #1
 80051b6:	e7e7      	b.n	8005188 <_printf_float+0x1a4>
 80051b8:	2900      	cmp	r1, #0
 80051ba:	bfd4      	ite	le
 80051bc:	f1c1 0202 	rsble	r2, r1, #2
 80051c0:	2201      	movgt	r2, #1
 80051c2:	4413      	add	r3, r2
 80051c4:	e7e0      	b.n	8005188 <_printf_float+0x1a4>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	055a      	lsls	r2, r3, #21
 80051ca:	d407      	bmi.n	80051dc <_printf_float+0x1f8>
 80051cc:	6923      	ldr	r3, [r4, #16]
 80051ce:	4642      	mov	r2, r8
 80051d0:	4631      	mov	r1, r6
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b8      	blx	r7
 80051d6:	3001      	adds	r0, #1
 80051d8:	d12c      	bne.n	8005234 <_printf_float+0x250>
 80051da:	e764      	b.n	80050a6 <_printf_float+0xc2>
 80051dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051e0:	f240 80e0 	bls.w	80053a4 <_printf_float+0x3c0>
 80051e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051e8:	2200      	movs	r2, #0
 80051ea:	2300      	movs	r3, #0
 80051ec:	f7fb fc74 	bl	8000ad8 <__aeabi_dcmpeq>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d034      	beq.n	800525e <_printf_float+0x27a>
 80051f4:	4a37      	ldr	r2, [pc, #220]	; (80052d4 <_printf_float+0x2f0>)
 80051f6:	2301      	movs	r3, #1
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	f43f af51 	beq.w	80050a6 <_printf_float+0xc2>
 8005204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005208:	429a      	cmp	r2, r3
 800520a:	db02      	blt.n	8005212 <_printf_float+0x22e>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	07d8      	lsls	r0, r3, #31
 8005210:	d510      	bpl.n	8005234 <_printf_float+0x250>
 8005212:	ee18 3a10 	vmov	r3, s16
 8005216:	4652      	mov	r2, sl
 8005218:	4631      	mov	r1, r6
 800521a:	4628      	mov	r0, r5
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	f43f af41 	beq.w	80050a6 <_printf_float+0xc2>
 8005224:	f04f 0800 	mov.w	r8, #0
 8005228:	f104 091a 	add.w	r9, r4, #26
 800522c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800522e:	3b01      	subs	r3, #1
 8005230:	4543      	cmp	r3, r8
 8005232:	dc09      	bgt.n	8005248 <_printf_float+0x264>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	079b      	lsls	r3, r3, #30
 8005238:	f100 8105 	bmi.w	8005446 <_printf_float+0x462>
 800523c:	68e0      	ldr	r0, [r4, #12]
 800523e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005240:	4298      	cmp	r0, r3
 8005242:	bfb8      	it	lt
 8005244:	4618      	movlt	r0, r3
 8005246:	e730      	b.n	80050aa <_printf_float+0xc6>
 8005248:	2301      	movs	r3, #1
 800524a:	464a      	mov	r2, r9
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f af27 	beq.w	80050a6 <_printf_float+0xc2>
 8005258:	f108 0801 	add.w	r8, r8, #1
 800525c:	e7e6      	b.n	800522c <_printf_float+0x248>
 800525e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005260:	2b00      	cmp	r3, #0
 8005262:	dc39      	bgt.n	80052d8 <_printf_float+0x2f4>
 8005264:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <_printf_float+0x2f0>)
 8005266:	2301      	movs	r3, #1
 8005268:	4631      	mov	r1, r6
 800526a:	4628      	mov	r0, r5
 800526c:	47b8      	blx	r7
 800526e:	3001      	adds	r0, #1
 8005270:	f43f af19 	beq.w	80050a6 <_printf_float+0xc2>
 8005274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005278:	4313      	orrs	r3, r2
 800527a:	d102      	bne.n	8005282 <_printf_float+0x29e>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	07d9      	lsls	r1, r3, #31
 8005280:	d5d8      	bpl.n	8005234 <_printf_float+0x250>
 8005282:	ee18 3a10 	vmov	r3, s16
 8005286:	4652      	mov	r2, sl
 8005288:	4631      	mov	r1, r6
 800528a:	4628      	mov	r0, r5
 800528c:	47b8      	blx	r7
 800528e:	3001      	adds	r0, #1
 8005290:	f43f af09 	beq.w	80050a6 <_printf_float+0xc2>
 8005294:	f04f 0900 	mov.w	r9, #0
 8005298:	f104 0a1a 	add.w	sl, r4, #26
 800529c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529e:	425b      	negs	r3, r3
 80052a0:	454b      	cmp	r3, r9
 80052a2:	dc01      	bgt.n	80052a8 <_printf_float+0x2c4>
 80052a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a6:	e792      	b.n	80051ce <_printf_float+0x1ea>
 80052a8:	2301      	movs	r3, #1
 80052aa:	4652      	mov	r2, sl
 80052ac:	4631      	mov	r1, r6
 80052ae:	4628      	mov	r0, r5
 80052b0:	47b8      	blx	r7
 80052b2:	3001      	adds	r0, #1
 80052b4:	f43f aef7 	beq.w	80050a6 <_printf_float+0xc2>
 80052b8:	f109 0901 	add.w	r9, r9, #1
 80052bc:	e7ee      	b.n	800529c <_printf_float+0x2b8>
 80052be:	bf00      	nop
 80052c0:	7fefffff 	.word	0x7fefffff
 80052c4:	08008220 	.word	0x08008220
 80052c8:	08008224 	.word	0x08008224
 80052cc:	0800822c 	.word	0x0800822c
 80052d0:	08008228 	.word	0x08008228
 80052d4:	08008230 	.word	0x08008230
 80052d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052dc:	429a      	cmp	r2, r3
 80052de:	bfa8      	it	ge
 80052e0:	461a      	movge	r2, r3
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	4691      	mov	r9, r2
 80052e6:	dc37      	bgt.n	8005358 <_printf_float+0x374>
 80052e8:	f04f 0b00 	mov.w	fp, #0
 80052ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052f0:	f104 021a 	add.w	r2, r4, #26
 80052f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052f6:	9305      	str	r3, [sp, #20]
 80052f8:	eba3 0309 	sub.w	r3, r3, r9
 80052fc:	455b      	cmp	r3, fp
 80052fe:	dc33      	bgt.n	8005368 <_printf_float+0x384>
 8005300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005304:	429a      	cmp	r2, r3
 8005306:	db3b      	blt.n	8005380 <_printf_float+0x39c>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	07da      	lsls	r2, r3, #31
 800530c:	d438      	bmi.n	8005380 <_printf_float+0x39c>
 800530e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005310:	9a05      	ldr	r2, [sp, #20]
 8005312:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005314:	1a9a      	subs	r2, r3, r2
 8005316:	eba3 0901 	sub.w	r9, r3, r1
 800531a:	4591      	cmp	r9, r2
 800531c:	bfa8      	it	ge
 800531e:	4691      	movge	r9, r2
 8005320:	f1b9 0f00 	cmp.w	r9, #0
 8005324:	dc35      	bgt.n	8005392 <_printf_float+0x3ae>
 8005326:	f04f 0800 	mov.w	r8, #0
 800532a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800532e:	f104 0a1a 	add.w	sl, r4, #26
 8005332:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	eba3 0309 	sub.w	r3, r3, r9
 800533c:	4543      	cmp	r3, r8
 800533e:	f77f af79 	ble.w	8005234 <_printf_float+0x250>
 8005342:	2301      	movs	r3, #1
 8005344:	4652      	mov	r2, sl
 8005346:	4631      	mov	r1, r6
 8005348:	4628      	mov	r0, r5
 800534a:	47b8      	blx	r7
 800534c:	3001      	adds	r0, #1
 800534e:	f43f aeaa 	beq.w	80050a6 <_printf_float+0xc2>
 8005352:	f108 0801 	add.w	r8, r8, #1
 8005356:	e7ec      	b.n	8005332 <_printf_float+0x34e>
 8005358:	4613      	mov	r3, r2
 800535a:	4631      	mov	r1, r6
 800535c:	4642      	mov	r2, r8
 800535e:	4628      	mov	r0, r5
 8005360:	47b8      	blx	r7
 8005362:	3001      	adds	r0, #1
 8005364:	d1c0      	bne.n	80052e8 <_printf_float+0x304>
 8005366:	e69e      	b.n	80050a6 <_printf_float+0xc2>
 8005368:	2301      	movs	r3, #1
 800536a:	4631      	mov	r1, r6
 800536c:	4628      	mov	r0, r5
 800536e:	9205      	str	r2, [sp, #20]
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f ae97 	beq.w	80050a6 <_printf_float+0xc2>
 8005378:	9a05      	ldr	r2, [sp, #20]
 800537a:	f10b 0b01 	add.w	fp, fp, #1
 800537e:	e7b9      	b.n	80052f4 <_printf_float+0x310>
 8005380:	ee18 3a10 	vmov	r3, s16
 8005384:	4652      	mov	r2, sl
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	d1be      	bne.n	800530e <_printf_float+0x32a>
 8005390:	e689      	b.n	80050a6 <_printf_float+0xc2>
 8005392:	9a05      	ldr	r2, [sp, #20]
 8005394:	464b      	mov	r3, r9
 8005396:	4442      	add	r2, r8
 8005398:	4631      	mov	r1, r6
 800539a:	4628      	mov	r0, r5
 800539c:	47b8      	blx	r7
 800539e:	3001      	adds	r0, #1
 80053a0:	d1c1      	bne.n	8005326 <_printf_float+0x342>
 80053a2:	e680      	b.n	80050a6 <_printf_float+0xc2>
 80053a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053a6:	2a01      	cmp	r2, #1
 80053a8:	dc01      	bgt.n	80053ae <_printf_float+0x3ca>
 80053aa:	07db      	lsls	r3, r3, #31
 80053ac:	d538      	bpl.n	8005420 <_printf_float+0x43c>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4642      	mov	r2, r8
 80053b2:	4631      	mov	r1, r6
 80053b4:	4628      	mov	r0, r5
 80053b6:	47b8      	blx	r7
 80053b8:	3001      	adds	r0, #1
 80053ba:	f43f ae74 	beq.w	80050a6 <_printf_float+0xc2>
 80053be:	ee18 3a10 	vmov	r3, s16
 80053c2:	4652      	mov	r2, sl
 80053c4:	4631      	mov	r1, r6
 80053c6:	4628      	mov	r0, r5
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f ae6b 	beq.w	80050a6 <_printf_float+0xc2>
 80053d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053d4:	2200      	movs	r2, #0
 80053d6:	2300      	movs	r3, #0
 80053d8:	f7fb fb7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80053dc:	b9d8      	cbnz	r0, 8005416 <_printf_float+0x432>
 80053de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e0:	f108 0201 	add.w	r2, r8, #1
 80053e4:	3b01      	subs	r3, #1
 80053e6:	4631      	mov	r1, r6
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b8      	blx	r7
 80053ec:	3001      	adds	r0, #1
 80053ee:	d10e      	bne.n	800540e <_printf_float+0x42a>
 80053f0:	e659      	b.n	80050a6 <_printf_float+0xc2>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4652      	mov	r2, sl
 80053f6:	4631      	mov	r1, r6
 80053f8:	4628      	mov	r0, r5
 80053fa:	47b8      	blx	r7
 80053fc:	3001      	adds	r0, #1
 80053fe:	f43f ae52 	beq.w	80050a6 <_printf_float+0xc2>
 8005402:	f108 0801 	add.w	r8, r8, #1
 8005406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005408:	3b01      	subs	r3, #1
 800540a:	4543      	cmp	r3, r8
 800540c:	dcf1      	bgt.n	80053f2 <_printf_float+0x40e>
 800540e:	464b      	mov	r3, r9
 8005410:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005414:	e6dc      	b.n	80051d0 <_printf_float+0x1ec>
 8005416:	f04f 0800 	mov.w	r8, #0
 800541a:	f104 0a1a 	add.w	sl, r4, #26
 800541e:	e7f2      	b.n	8005406 <_printf_float+0x422>
 8005420:	2301      	movs	r3, #1
 8005422:	4642      	mov	r2, r8
 8005424:	e7df      	b.n	80053e6 <_printf_float+0x402>
 8005426:	2301      	movs	r3, #1
 8005428:	464a      	mov	r2, r9
 800542a:	4631      	mov	r1, r6
 800542c:	4628      	mov	r0, r5
 800542e:	47b8      	blx	r7
 8005430:	3001      	adds	r0, #1
 8005432:	f43f ae38 	beq.w	80050a6 <_printf_float+0xc2>
 8005436:	f108 0801 	add.w	r8, r8, #1
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800543e:	1a5b      	subs	r3, r3, r1
 8005440:	4543      	cmp	r3, r8
 8005442:	dcf0      	bgt.n	8005426 <_printf_float+0x442>
 8005444:	e6fa      	b.n	800523c <_printf_float+0x258>
 8005446:	f04f 0800 	mov.w	r8, #0
 800544a:	f104 0919 	add.w	r9, r4, #25
 800544e:	e7f4      	b.n	800543a <_printf_float+0x456>

08005450 <_printf_common>:
 8005450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005454:	4616      	mov	r6, r2
 8005456:	4699      	mov	r9, r3
 8005458:	688a      	ldr	r2, [r1, #8]
 800545a:	690b      	ldr	r3, [r1, #16]
 800545c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005460:	4293      	cmp	r3, r2
 8005462:	bfb8      	it	lt
 8005464:	4613      	movlt	r3, r2
 8005466:	6033      	str	r3, [r6, #0]
 8005468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800546c:	4607      	mov	r7, r0
 800546e:	460c      	mov	r4, r1
 8005470:	b10a      	cbz	r2, 8005476 <_printf_common+0x26>
 8005472:	3301      	adds	r3, #1
 8005474:	6033      	str	r3, [r6, #0]
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	0699      	lsls	r1, r3, #26
 800547a:	bf42      	ittt	mi
 800547c:	6833      	ldrmi	r3, [r6, #0]
 800547e:	3302      	addmi	r3, #2
 8005480:	6033      	strmi	r3, [r6, #0]
 8005482:	6825      	ldr	r5, [r4, #0]
 8005484:	f015 0506 	ands.w	r5, r5, #6
 8005488:	d106      	bne.n	8005498 <_printf_common+0x48>
 800548a:	f104 0a19 	add.w	sl, r4, #25
 800548e:	68e3      	ldr	r3, [r4, #12]
 8005490:	6832      	ldr	r2, [r6, #0]
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	42ab      	cmp	r3, r5
 8005496:	dc26      	bgt.n	80054e6 <_printf_common+0x96>
 8005498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800549c:	1e13      	subs	r3, r2, #0
 800549e:	6822      	ldr	r2, [r4, #0]
 80054a0:	bf18      	it	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	0692      	lsls	r2, r2, #26
 80054a6:	d42b      	bmi.n	8005500 <_printf_common+0xb0>
 80054a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054ac:	4649      	mov	r1, r9
 80054ae:	4638      	mov	r0, r7
 80054b0:	47c0      	blx	r8
 80054b2:	3001      	adds	r0, #1
 80054b4:	d01e      	beq.n	80054f4 <_printf_common+0xa4>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	68e5      	ldr	r5, [r4, #12]
 80054ba:	6832      	ldr	r2, [r6, #0]
 80054bc:	f003 0306 	and.w	r3, r3, #6
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	bf08      	it	eq
 80054c4:	1aad      	subeq	r5, r5, r2
 80054c6:	68a3      	ldr	r3, [r4, #8]
 80054c8:	6922      	ldr	r2, [r4, #16]
 80054ca:	bf0c      	ite	eq
 80054cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d0:	2500      	movne	r5, #0
 80054d2:	4293      	cmp	r3, r2
 80054d4:	bfc4      	itt	gt
 80054d6:	1a9b      	subgt	r3, r3, r2
 80054d8:	18ed      	addgt	r5, r5, r3
 80054da:	2600      	movs	r6, #0
 80054dc:	341a      	adds	r4, #26
 80054de:	42b5      	cmp	r5, r6
 80054e0:	d11a      	bne.n	8005518 <_printf_common+0xc8>
 80054e2:	2000      	movs	r0, #0
 80054e4:	e008      	b.n	80054f8 <_printf_common+0xa8>
 80054e6:	2301      	movs	r3, #1
 80054e8:	4652      	mov	r2, sl
 80054ea:	4649      	mov	r1, r9
 80054ec:	4638      	mov	r0, r7
 80054ee:	47c0      	blx	r8
 80054f0:	3001      	adds	r0, #1
 80054f2:	d103      	bne.n	80054fc <_printf_common+0xac>
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fc:	3501      	adds	r5, #1
 80054fe:	e7c6      	b.n	800548e <_printf_common+0x3e>
 8005500:	18e1      	adds	r1, r4, r3
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	2030      	movs	r0, #48	; 0x30
 8005506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800550a:	4422      	add	r2, r4
 800550c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005514:	3302      	adds	r3, #2
 8005516:	e7c7      	b.n	80054a8 <_printf_common+0x58>
 8005518:	2301      	movs	r3, #1
 800551a:	4622      	mov	r2, r4
 800551c:	4649      	mov	r1, r9
 800551e:	4638      	mov	r0, r7
 8005520:	47c0      	blx	r8
 8005522:	3001      	adds	r0, #1
 8005524:	d0e6      	beq.n	80054f4 <_printf_common+0xa4>
 8005526:	3601      	adds	r6, #1
 8005528:	e7d9      	b.n	80054de <_printf_common+0x8e>
	...

0800552c <_printf_i>:
 800552c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	7e0f      	ldrb	r7, [r1, #24]
 8005532:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005534:	2f78      	cmp	r7, #120	; 0x78
 8005536:	4691      	mov	r9, r2
 8005538:	4680      	mov	r8, r0
 800553a:	460c      	mov	r4, r1
 800553c:	469a      	mov	sl, r3
 800553e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005542:	d807      	bhi.n	8005554 <_printf_i+0x28>
 8005544:	2f62      	cmp	r7, #98	; 0x62
 8005546:	d80a      	bhi.n	800555e <_printf_i+0x32>
 8005548:	2f00      	cmp	r7, #0
 800554a:	f000 80d8 	beq.w	80056fe <_printf_i+0x1d2>
 800554e:	2f58      	cmp	r7, #88	; 0x58
 8005550:	f000 80a3 	beq.w	800569a <_printf_i+0x16e>
 8005554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800555c:	e03a      	b.n	80055d4 <_printf_i+0xa8>
 800555e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005562:	2b15      	cmp	r3, #21
 8005564:	d8f6      	bhi.n	8005554 <_printf_i+0x28>
 8005566:	a101      	add	r1, pc, #4	; (adr r1, 800556c <_printf_i+0x40>)
 8005568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800556c:	080055c5 	.word	0x080055c5
 8005570:	080055d9 	.word	0x080055d9
 8005574:	08005555 	.word	0x08005555
 8005578:	08005555 	.word	0x08005555
 800557c:	08005555 	.word	0x08005555
 8005580:	08005555 	.word	0x08005555
 8005584:	080055d9 	.word	0x080055d9
 8005588:	08005555 	.word	0x08005555
 800558c:	08005555 	.word	0x08005555
 8005590:	08005555 	.word	0x08005555
 8005594:	08005555 	.word	0x08005555
 8005598:	080056e5 	.word	0x080056e5
 800559c:	08005609 	.word	0x08005609
 80055a0:	080056c7 	.word	0x080056c7
 80055a4:	08005555 	.word	0x08005555
 80055a8:	08005555 	.word	0x08005555
 80055ac:	08005707 	.word	0x08005707
 80055b0:	08005555 	.word	0x08005555
 80055b4:	08005609 	.word	0x08005609
 80055b8:	08005555 	.word	0x08005555
 80055bc:	08005555 	.word	0x08005555
 80055c0:	080056cf 	.word	0x080056cf
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	1d1a      	adds	r2, r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	602a      	str	r2, [r5, #0]
 80055cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0a3      	b.n	8005720 <_printf_i+0x1f4>
 80055d8:	6820      	ldr	r0, [r4, #0]
 80055da:	6829      	ldr	r1, [r5, #0]
 80055dc:	0606      	lsls	r6, r0, #24
 80055de:	f101 0304 	add.w	r3, r1, #4
 80055e2:	d50a      	bpl.n	80055fa <_printf_i+0xce>
 80055e4:	680e      	ldr	r6, [r1, #0]
 80055e6:	602b      	str	r3, [r5, #0]
 80055e8:	2e00      	cmp	r6, #0
 80055ea:	da03      	bge.n	80055f4 <_printf_i+0xc8>
 80055ec:	232d      	movs	r3, #45	; 0x2d
 80055ee:	4276      	negs	r6, r6
 80055f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f4:	485e      	ldr	r0, [pc, #376]	; (8005770 <_printf_i+0x244>)
 80055f6:	230a      	movs	r3, #10
 80055f8:	e019      	b.n	800562e <_printf_i+0x102>
 80055fa:	680e      	ldr	r6, [r1, #0]
 80055fc:	602b      	str	r3, [r5, #0]
 80055fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005602:	bf18      	it	ne
 8005604:	b236      	sxthne	r6, r6
 8005606:	e7ef      	b.n	80055e8 <_printf_i+0xbc>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	1d19      	adds	r1, r3, #4
 800560e:	6029      	str	r1, [r5, #0]
 8005610:	0601      	lsls	r1, r0, #24
 8005612:	d501      	bpl.n	8005618 <_printf_i+0xec>
 8005614:	681e      	ldr	r6, [r3, #0]
 8005616:	e002      	b.n	800561e <_printf_i+0xf2>
 8005618:	0646      	lsls	r6, r0, #25
 800561a:	d5fb      	bpl.n	8005614 <_printf_i+0xe8>
 800561c:	881e      	ldrh	r6, [r3, #0]
 800561e:	4854      	ldr	r0, [pc, #336]	; (8005770 <_printf_i+0x244>)
 8005620:	2f6f      	cmp	r7, #111	; 0x6f
 8005622:	bf0c      	ite	eq
 8005624:	2308      	moveq	r3, #8
 8005626:	230a      	movne	r3, #10
 8005628:	2100      	movs	r1, #0
 800562a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800562e:	6865      	ldr	r5, [r4, #4]
 8005630:	60a5      	str	r5, [r4, #8]
 8005632:	2d00      	cmp	r5, #0
 8005634:	bfa2      	ittt	ge
 8005636:	6821      	ldrge	r1, [r4, #0]
 8005638:	f021 0104 	bicge.w	r1, r1, #4
 800563c:	6021      	strge	r1, [r4, #0]
 800563e:	b90e      	cbnz	r6, 8005644 <_printf_i+0x118>
 8005640:	2d00      	cmp	r5, #0
 8005642:	d04d      	beq.n	80056e0 <_printf_i+0x1b4>
 8005644:	4615      	mov	r5, r2
 8005646:	fbb6 f1f3 	udiv	r1, r6, r3
 800564a:	fb03 6711 	mls	r7, r3, r1, r6
 800564e:	5dc7      	ldrb	r7, [r0, r7]
 8005650:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005654:	4637      	mov	r7, r6
 8005656:	42bb      	cmp	r3, r7
 8005658:	460e      	mov	r6, r1
 800565a:	d9f4      	bls.n	8005646 <_printf_i+0x11a>
 800565c:	2b08      	cmp	r3, #8
 800565e:	d10b      	bne.n	8005678 <_printf_i+0x14c>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	07de      	lsls	r6, r3, #31
 8005664:	d508      	bpl.n	8005678 <_printf_i+0x14c>
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	6861      	ldr	r1, [r4, #4]
 800566a:	4299      	cmp	r1, r3
 800566c:	bfde      	ittt	le
 800566e:	2330      	movle	r3, #48	; 0x30
 8005670:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005674:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005678:	1b52      	subs	r2, r2, r5
 800567a:	6122      	str	r2, [r4, #16]
 800567c:	f8cd a000 	str.w	sl, [sp]
 8005680:	464b      	mov	r3, r9
 8005682:	aa03      	add	r2, sp, #12
 8005684:	4621      	mov	r1, r4
 8005686:	4640      	mov	r0, r8
 8005688:	f7ff fee2 	bl	8005450 <_printf_common>
 800568c:	3001      	adds	r0, #1
 800568e:	d14c      	bne.n	800572a <_printf_i+0x1fe>
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	b004      	add	sp, #16
 8005696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569a:	4835      	ldr	r0, [pc, #212]	; (8005770 <_printf_i+0x244>)
 800569c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056a0:	6829      	ldr	r1, [r5, #0]
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80056a8:	6029      	str	r1, [r5, #0]
 80056aa:	061d      	lsls	r5, r3, #24
 80056ac:	d514      	bpl.n	80056d8 <_printf_i+0x1ac>
 80056ae:	07df      	lsls	r7, r3, #31
 80056b0:	bf44      	itt	mi
 80056b2:	f043 0320 	orrmi.w	r3, r3, #32
 80056b6:	6023      	strmi	r3, [r4, #0]
 80056b8:	b91e      	cbnz	r6, 80056c2 <_printf_i+0x196>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	f023 0320 	bic.w	r3, r3, #32
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	2310      	movs	r3, #16
 80056c4:	e7b0      	b.n	8005628 <_printf_i+0xfc>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	f043 0320 	orr.w	r3, r3, #32
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	2378      	movs	r3, #120	; 0x78
 80056d0:	4828      	ldr	r0, [pc, #160]	; (8005774 <_printf_i+0x248>)
 80056d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056d6:	e7e3      	b.n	80056a0 <_printf_i+0x174>
 80056d8:	0659      	lsls	r1, r3, #25
 80056da:	bf48      	it	mi
 80056dc:	b2b6      	uxthmi	r6, r6
 80056de:	e7e6      	b.n	80056ae <_printf_i+0x182>
 80056e0:	4615      	mov	r5, r2
 80056e2:	e7bb      	b.n	800565c <_printf_i+0x130>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	6826      	ldr	r6, [r4, #0]
 80056e8:	6961      	ldr	r1, [r4, #20]
 80056ea:	1d18      	adds	r0, r3, #4
 80056ec:	6028      	str	r0, [r5, #0]
 80056ee:	0635      	lsls	r5, r6, #24
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	d501      	bpl.n	80056f8 <_printf_i+0x1cc>
 80056f4:	6019      	str	r1, [r3, #0]
 80056f6:	e002      	b.n	80056fe <_printf_i+0x1d2>
 80056f8:	0670      	lsls	r0, r6, #25
 80056fa:	d5fb      	bpl.n	80056f4 <_printf_i+0x1c8>
 80056fc:	8019      	strh	r1, [r3, #0]
 80056fe:	2300      	movs	r3, #0
 8005700:	6123      	str	r3, [r4, #16]
 8005702:	4615      	mov	r5, r2
 8005704:	e7ba      	b.n	800567c <_printf_i+0x150>
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	1d1a      	adds	r2, r3, #4
 800570a:	602a      	str	r2, [r5, #0]
 800570c:	681d      	ldr	r5, [r3, #0]
 800570e:	6862      	ldr	r2, [r4, #4]
 8005710:	2100      	movs	r1, #0
 8005712:	4628      	mov	r0, r5
 8005714:	f7fa fd6c 	bl	80001f0 <memchr>
 8005718:	b108      	cbz	r0, 800571e <_printf_i+0x1f2>
 800571a:	1b40      	subs	r0, r0, r5
 800571c:	6060      	str	r0, [r4, #4]
 800571e:	6863      	ldr	r3, [r4, #4]
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	2300      	movs	r3, #0
 8005724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005728:	e7a8      	b.n	800567c <_printf_i+0x150>
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	462a      	mov	r2, r5
 800572e:	4649      	mov	r1, r9
 8005730:	4640      	mov	r0, r8
 8005732:	47d0      	blx	sl
 8005734:	3001      	adds	r0, #1
 8005736:	d0ab      	beq.n	8005690 <_printf_i+0x164>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	079b      	lsls	r3, r3, #30
 800573c:	d413      	bmi.n	8005766 <_printf_i+0x23a>
 800573e:	68e0      	ldr	r0, [r4, #12]
 8005740:	9b03      	ldr	r3, [sp, #12]
 8005742:	4298      	cmp	r0, r3
 8005744:	bfb8      	it	lt
 8005746:	4618      	movlt	r0, r3
 8005748:	e7a4      	b.n	8005694 <_printf_i+0x168>
 800574a:	2301      	movs	r3, #1
 800574c:	4632      	mov	r2, r6
 800574e:	4649      	mov	r1, r9
 8005750:	4640      	mov	r0, r8
 8005752:	47d0      	blx	sl
 8005754:	3001      	adds	r0, #1
 8005756:	d09b      	beq.n	8005690 <_printf_i+0x164>
 8005758:	3501      	adds	r5, #1
 800575a:	68e3      	ldr	r3, [r4, #12]
 800575c:	9903      	ldr	r1, [sp, #12]
 800575e:	1a5b      	subs	r3, r3, r1
 8005760:	42ab      	cmp	r3, r5
 8005762:	dcf2      	bgt.n	800574a <_printf_i+0x21e>
 8005764:	e7eb      	b.n	800573e <_printf_i+0x212>
 8005766:	2500      	movs	r5, #0
 8005768:	f104 0619 	add.w	r6, r4, #25
 800576c:	e7f5      	b.n	800575a <_printf_i+0x22e>
 800576e:	bf00      	nop
 8005770:	08008232 	.word	0x08008232
 8005774:	08008243 	.word	0x08008243

08005778 <_sbrk_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4d06      	ldr	r5, [pc, #24]	; (8005794 <_sbrk_r+0x1c>)
 800577c:	2300      	movs	r3, #0
 800577e:	4604      	mov	r4, r0
 8005780:	4608      	mov	r0, r1
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	f7fb ff3a 	bl	80015fc <_sbrk>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_sbrk_r+0x1a>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	b103      	cbz	r3, 8005792 <_sbrk_r+0x1a>
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	20000430 	.word	0x20000430

08005798 <_vsniprintf_r>:
 8005798:	b530      	push	{r4, r5, lr}
 800579a:	4614      	mov	r4, r2
 800579c:	2c00      	cmp	r4, #0
 800579e:	b09b      	sub	sp, #108	; 0x6c
 80057a0:	4605      	mov	r5, r0
 80057a2:	461a      	mov	r2, r3
 80057a4:	da05      	bge.n	80057b2 <_vsniprintf_r+0x1a>
 80057a6:	238b      	movs	r3, #139	; 0x8b
 80057a8:	6003      	str	r3, [r0, #0]
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	b01b      	add	sp, #108	; 0x6c
 80057b0:	bd30      	pop	{r4, r5, pc}
 80057b2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80057b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80057ba:	bf14      	ite	ne
 80057bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80057c0:	4623      	moveq	r3, r4
 80057c2:	9302      	str	r3, [sp, #8]
 80057c4:	9305      	str	r3, [sp, #20]
 80057c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057ca:	9100      	str	r1, [sp, #0]
 80057cc:	9104      	str	r1, [sp, #16]
 80057ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80057d2:	4669      	mov	r1, sp
 80057d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057d6:	f001 faa9 	bl	8006d2c <_svfiprintf_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	bfbc      	itt	lt
 80057de:	238b      	movlt	r3, #139	; 0x8b
 80057e0:	602b      	strlt	r3, [r5, #0]
 80057e2:	2c00      	cmp	r4, #0
 80057e4:	d0e3      	beq.n	80057ae <_vsniprintf_r+0x16>
 80057e6:	9b00      	ldr	r3, [sp, #0]
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	e7df      	b.n	80057ae <_vsniprintf_r+0x16>
	...

080057f0 <vsniprintf>:
 80057f0:	b507      	push	{r0, r1, r2, lr}
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	460a      	mov	r2, r1
 80057f8:	4601      	mov	r1, r0
 80057fa:	4803      	ldr	r0, [pc, #12]	; (8005808 <vsniprintf+0x18>)
 80057fc:	6800      	ldr	r0, [r0, #0]
 80057fe:	f7ff ffcb 	bl	8005798 <_vsniprintf_r>
 8005802:	b003      	add	sp, #12
 8005804:	f85d fb04 	ldr.w	pc, [sp], #4
 8005808:	2000000c 	.word	0x2000000c

0800580c <quorem>:
 800580c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	6903      	ldr	r3, [r0, #16]
 8005812:	690c      	ldr	r4, [r1, #16]
 8005814:	42a3      	cmp	r3, r4
 8005816:	4607      	mov	r7, r0
 8005818:	f2c0 8081 	blt.w	800591e <quorem+0x112>
 800581c:	3c01      	subs	r4, #1
 800581e:	f101 0814 	add.w	r8, r1, #20
 8005822:	f100 0514 	add.w	r5, r0, #20
 8005826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005834:	3301      	adds	r3, #1
 8005836:	429a      	cmp	r2, r3
 8005838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800583c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005840:	fbb2 f6f3 	udiv	r6, r2, r3
 8005844:	d331      	bcc.n	80058aa <quorem+0x9e>
 8005846:	f04f 0e00 	mov.w	lr, #0
 800584a:	4640      	mov	r0, r8
 800584c:	46ac      	mov	ip, r5
 800584e:	46f2      	mov	sl, lr
 8005850:	f850 2b04 	ldr.w	r2, [r0], #4
 8005854:	b293      	uxth	r3, r2
 8005856:	fb06 e303 	mla	r3, r6, r3, lr
 800585a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800585e:	b29b      	uxth	r3, r3
 8005860:	ebaa 0303 	sub.w	r3, sl, r3
 8005864:	f8dc a000 	ldr.w	sl, [ip]
 8005868:	0c12      	lsrs	r2, r2, #16
 800586a:	fa13 f38a 	uxtah	r3, r3, sl
 800586e:	fb06 e202 	mla	r2, r6, r2, lr
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	9b00      	ldr	r3, [sp, #0]
 8005876:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800587a:	b292      	uxth	r2, r2
 800587c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005884:	f8bd 3000 	ldrh.w	r3, [sp]
 8005888:	4581      	cmp	r9, r0
 800588a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800588e:	f84c 3b04 	str.w	r3, [ip], #4
 8005892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005896:	d2db      	bcs.n	8005850 <quorem+0x44>
 8005898:	f855 300b 	ldr.w	r3, [r5, fp]
 800589c:	b92b      	cbnz	r3, 80058aa <quorem+0x9e>
 800589e:	9b01      	ldr	r3, [sp, #4]
 80058a0:	3b04      	subs	r3, #4
 80058a2:	429d      	cmp	r5, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	d32e      	bcc.n	8005906 <quorem+0xfa>
 80058a8:	613c      	str	r4, [r7, #16]
 80058aa:	4638      	mov	r0, r7
 80058ac:	f001 f8ca 	bl	8006a44 <__mcmp>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	db24      	blt.n	80058fe <quorem+0xf2>
 80058b4:	3601      	adds	r6, #1
 80058b6:	4628      	mov	r0, r5
 80058b8:	f04f 0c00 	mov.w	ip, #0
 80058bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80058c0:	f8d0 e000 	ldr.w	lr, [r0]
 80058c4:	b293      	uxth	r3, r2
 80058c6:	ebac 0303 	sub.w	r3, ip, r3
 80058ca:	0c12      	lsrs	r2, r2, #16
 80058cc:	fa13 f38e 	uxtah	r3, r3, lr
 80058d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058de:	45c1      	cmp	r9, r8
 80058e0:	f840 3b04 	str.w	r3, [r0], #4
 80058e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058e8:	d2e8      	bcs.n	80058bc <quorem+0xb0>
 80058ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058f2:	b922      	cbnz	r2, 80058fe <quorem+0xf2>
 80058f4:	3b04      	subs	r3, #4
 80058f6:	429d      	cmp	r5, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	d30a      	bcc.n	8005912 <quorem+0x106>
 80058fc:	613c      	str	r4, [r7, #16]
 80058fe:	4630      	mov	r0, r6
 8005900:	b003      	add	sp, #12
 8005902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	3b04      	subs	r3, #4
 800590a:	2a00      	cmp	r2, #0
 800590c:	d1cc      	bne.n	80058a8 <quorem+0x9c>
 800590e:	3c01      	subs	r4, #1
 8005910:	e7c7      	b.n	80058a2 <quorem+0x96>
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	3b04      	subs	r3, #4
 8005916:	2a00      	cmp	r2, #0
 8005918:	d1f0      	bne.n	80058fc <quorem+0xf0>
 800591a:	3c01      	subs	r4, #1
 800591c:	e7eb      	b.n	80058f6 <quorem+0xea>
 800591e:	2000      	movs	r0, #0
 8005920:	e7ee      	b.n	8005900 <quorem+0xf4>
 8005922:	0000      	movs	r0, r0
 8005924:	0000      	movs	r0, r0
	...

08005928 <_dtoa_r>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	ed2d 8b04 	vpush	{d8-d9}
 8005930:	ec57 6b10 	vmov	r6, r7, d0
 8005934:	b093      	sub	sp, #76	; 0x4c
 8005936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800593c:	9106      	str	r1, [sp, #24]
 800593e:	ee10 aa10 	vmov	sl, s0
 8005942:	4604      	mov	r4, r0
 8005944:	9209      	str	r2, [sp, #36]	; 0x24
 8005946:	930c      	str	r3, [sp, #48]	; 0x30
 8005948:	46bb      	mov	fp, r7
 800594a:	b975      	cbnz	r5, 800596a <_dtoa_r+0x42>
 800594c:	2010      	movs	r0, #16
 800594e:	f7ff f9b9 	bl	8004cc4 <malloc>
 8005952:	4602      	mov	r2, r0
 8005954:	6260      	str	r0, [r4, #36]	; 0x24
 8005956:	b920      	cbnz	r0, 8005962 <_dtoa_r+0x3a>
 8005958:	4ba7      	ldr	r3, [pc, #668]	; (8005bf8 <_dtoa_r+0x2d0>)
 800595a:	21ea      	movs	r1, #234	; 0xea
 800595c:	48a7      	ldr	r0, [pc, #668]	; (8005bfc <_dtoa_r+0x2d4>)
 800595e:	f001 fae5 	bl	8006f2c <__assert_func>
 8005962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005966:	6005      	str	r5, [r0, #0]
 8005968:	60c5      	str	r5, [r0, #12]
 800596a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	b151      	cbz	r1, 8005986 <_dtoa_r+0x5e>
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	604a      	str	r2, [r1, #4]
 8005974:	2301      	movs	r3, #1
 8005976:	4093      	lsls	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
 800597a:	4620      	mov	r0, r4
 800597c:	f000 fe20 	bl	80065c0 <_Bfree>
 8005980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	1e3b      	subs	r3, r7, #0
 8005988:	bfaa      	itet	ge
 800598a:	2300      	movge	r3, #0
 800598c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005990:	f8c8 3000 	strge.w	r3, [r8]
 8005994:	4b9a      	ldr	r3, [pc, #616]	; (8005c00 <_dtoa_r+0x2d8>)
 8005996:	bfbc      	itt	lt
 8005998:	2201      	movlt	r2, #1
 800599a:	f8c8 2000 	strlt.w	r2, [r8]
 800599e:	ea33 030b 	bics.w	r3, r3, fp
 80059a2:	d11b      	bne.n	80059dc <_dtoa_r+0xb4>
 80059a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059b0:	4333      	orrs	r3, r6
 80059b2:	f000 8592 	beq.w	80064da <_dtoa_r+0xbb2>
 80059b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059b8:	b963      	cbnz	r3, 80059d4 <_dtoa_r+0xac>
 80059ba:	4b92      	ldr	r3, [pc, #584]	; (8005c04 <_dtoa_r+0x2dc>)
 80059bc:	e022      	b.n	8005a04 <_dtoa_r+0xdc>
 80059be:	4b92      	ldr	r3, [pc, #584]	; (8005c08 <_dtoa_r+0x2e0>)
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	3308      	adds	r3, #8
 80059c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	9801      	ldr	r0, [sp, #4]
 80059ca:	b013      	add	sp, #76	; 0x4c
 80059cc:	ecbd 8b04 	vpop	{d8-d9}
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	4b8b      	ldr	r3, [pc, #556]	; (8005c04 <_dtoa_r+0x2dc>)
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	3303      	adds	r3, #3
 80059da:	e7f3      	b.n	80059c4 <_dtoa_r+0x9c>
 80059dc:	2200      	movs	r2, #0
 80059de:	2300      	movs	r3, #0
 80059e0:	4650      	mov	r0, sl
 80059e2:	4659      	mov	r1, fp
 80059e4:	f7fb f878 	bl	8000ad8 <__aeabi_dcmpeq>
 80059e8:	ec4b ab19 	vmov	d9, sl, fp
 80059ec:	4680      	mov	r8, r0
 80059ee:	b158      	cbz	r0, 8005a08 <_dtoa_r+0xe0>
 80059f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059f2:	2301      	movs	r3, #1
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 856b 	beq.w	80064d4 <_dtoa_r+0xbac>
 80059fe:	4883      	ldr	r0, [pc, #524]	; (8005c0c <_dtoa_r+0x2e4>)
 8005a00:	6018      	str	r0, [r3, #0]
 8005a02:	1e43      	subs	r3, r0, #1
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	e7df      	b.n	80059c8 <_dtoa_r+0xa0>
 8005a08:	ec4b ab10 	vmov	d0, sl, fp
 8005a0c:	aa10      	add	r2, sp, #64	; 0x40
 8005a0e:	a911      	add	r1, sp, #68	; 0x44
 8005a10:	4620      	mov	r0, r4
 8005a12:	f001 f8bd 	bl	8006b90 <__d2b>
 8005a16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005a1a:	ee08 0a10 	vmov	s16, r0
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	f000 8084 	beq.w	8005b2c <_dtoa_r+0x204>
 8005a24:	ee19 3a90 	vmov	r3, s19
 8005a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a30:	4656      	mov	r6, sl
 8005a32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005a3e:	4b74      	ldr	r3, [pc, #464]	; (8005c10 <_dtoa_r+0x2e8>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	4630      	mov	r0, r6
 8005a44:	4639      	mov	r1, r7
 8005a46:	f7fa fc27 	bl	8000298 <__aeabi_dsub>
 8005a4a:	a365      	add	r3, pc, #404	; (adr r3, 8005be0 <_dtoa_r+0x2b8>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fdda 	bl	8000608 <__aeabi_dmul>
 8005a54:	a364      	add	r3, pc, #400	; (adr r3, 8005be8 <_dtoa_r+0x2c0>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	f7fa fc1f 	bl	800029c <__adddf3>
 8005a5e:	4606      	mov	r6, r0
 8005a60:	4628      	mov	r0, r5
 8005a62:	460f      	mov	r7, r1
 8005a64:	f7fa fd66 	bl	8000534 <__aeabi_i2d>
 8005a68:	a361      	add	r3, pc, #388	; (adr r3, 8005bf0 <_dtoa_r+0x2c8>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fa fdcb 	bl	8000608 <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4630      	mov	r0, r6
 8005a78:	4639      	mov	r1, r7
 8005a7a:	f7fa fc0f 	bl	800029c <__adddf3>
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460f      	mov	r7, r1
 8005a82:	f7fb f871 	bl	8000b68 <__aeabi_d2iz>
 8005a86:	2200      	movs	r2, #0
 8005a88:	9000      	str	r0, [sp, #0]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7fb f82c 	bl	8000aec <__aeabi_dcmplt>
 8005a94:	b150      	cbz	r0, 8005aac <_dtoa_r+0x184>
 8005a96:	9800      	ldr	r0, [sp, #0]
 8005a98:	f7fa fd4c 	bl	8000534 <__aeabi_i2d>
 8005a9c:	4632      	mov	r2, r6
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	f7fb f81a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005aa4:	b910      	cbnz	r0, 8005aac <_dtoa_r+0x184>
 8005aa6:	9b00      	ldr	r3, [sp, #0]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	9b00      	ldr	r3, [sp, #0]
 8005aae:	2b16      	cmp	r3, #22
 8005ab0:	d85a      	bhi.n	8005b68 <_dtoa_r+0x240>
 8005ab2:	9a00      	ldr	r2, [sp, #0]
 8005ab4:	4b57      	ldr	r3, [pc, #348]	; (8005c14 <_dtoa_r+0x2ec>)
 8005ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	ec51 0b19 	vmov	r0, r1, d9
 8005ac2:	f7fb f813 	bl	8000aec <__aeabi_dcmplt>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d050      	beq.n	8005b6c <_dtoa_r+0x244>
 8005aca:	9b00      	ldr	r3, [sp, #0]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ad6:	1b5d      	subs	r5, r3, r5
 8005ad8:	1e6b      	subs	r3, r5, #1
 8005ada:	9305      	str	r3, [sp, #20]
 8005adc:	bf45      	ittet	mi
 8005ade:	f1c5 0301 	rsbmi	r3, r5, #1
 8005ae2:	9304      	strmi	r3, [sp, #16]
 8005ae4:	2300      	movpl	r3, #0
 8005ae6:	2300      	movmi	r3, #0
 8005ae8:	bf4c      	ite	mi
 8005aea:	9305      	strmi	r3, [sp, #20]
 8005aec:	9304      	strpl	r3, [sp, #16]
 8005aee:	9b00      	ldr	r3, [sp, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db3d      	blt.n	8005b70 <_dtoa_r+0x248>
 8005af4:	9b05      	ldr	r3, [sp, #20]
 8005af6:	9a00      	ldr	r2, [sp, #0]
 8005af8:	920a      	str	r2, [sp, #40]	; 0x28
 8005afa:	4413      	add	r3, r2
 8005afc:	9305      	str	r3, [sp, #20]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9307      	str	r3, [sp, #28]
 8005b02:	9b06      	ldr	r3, [sp, #24]
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	f200 8089 	bhi.w	8005c1c <_dtoa_r+0x2f4>
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	bfc4      	itt	gt
 8005b0e:	3b04      	subgt	r3, #4
 8005b10:	9306      	strgt	r3, [sp, #24]
 8005b12:	9b06      	ldr	r3, [sp, #24]
 8005b14:	f1a3 0302 	sub.w	r3, r3, #2
 8005b18:	bfcc      	ite	gt
 8005b1a:	2500      	movgt	r5, #0
 8005b1c:	2501      	movle	r5, #1
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	f200 8087 	bhi.w	8005c32 <_dtoa_r+0x30a>
 8005b24:	e8df f003 	tbb	[pc, r3]
 8005b28:	59383a2d 	.word	0x59383a2d
 8005b2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b30:	441d      	add	r5, r3
 8005b32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	bfc1      	itttt	gt
 8005b3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b42:	fa0b f303 	lslgt.w	r3, fp, r3
 8005b46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b4a:	bfda      	itte	le
 8005b4c:	f1c3 0320 	rsble	r3, r3, #32
 8005b50:	fa06 f003 	lslle.w	r0, r6, r3
 8005b54:	4318      	orrgt	r0, r3
 8005b56:	f7fa fcdd 	bl	8000514 <__aeabi_ui2d>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b62:	3d01      	subs	r5, #1
 8005b64:	930e      	str	r3, [sp, #56]	; 0x38
 8005b66:	e76a      	b.n	8005a3e <_dtoa_r+0x116>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e7b2      	b.n	8005ad2 <_dtoa_r+0x1aa>
 8005b6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b6e:	e7b1      	b.n	8005ad4 <_dtoa_r+0x1ac>
 8005b70:	9b04      	ldr	r3, [sp, #16]
 8005b72:	9a00      	ldr	r2, [sp, #0]
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	9304      	str	r3, [sp, #16]
 8005b78:	4253      	negs	r3, r2
 8005b7a:	9307      	str	r3, [sp, #28]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b80:	e7bf      	b.n	8005b02 <_dtoa_r+0x1da>
 8005b82:	2300      	movs	r3, #0
 8005b84:	9308      	str	r3, [sp, #32]
 8005b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dc55      	bgt.n	8005c38 <_dtoa_r+0x310>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b92:	461a      	mov	r2, r3
 8005b94:	9209      	str	r2, [sp, #36]	; 0x24
 8005b96:	e00c      	b.n	8005bb2 <_dtoa_r+0x28a>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e7f3      	b.n	8005b84 <_dtoa_r+0x25c>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba0:	9308      	str	r3, [sp, #32]
 8005ba2:	9b00      	ldr	r3, [sp, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	9302      	str	r3, [sp, #8]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	9303      	str	r3, [sp, #12]
 8005bae:	bfb8      	it	lt
 8005bb0:	2301      	movlt	r3, #1
 8005bb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	6042      	str	r2, [r0, #4]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	f102 0614 	add.w	r6, r2, #20
 8005bbe:	429e      	cmp	r6, r3
 8005bc0:	6841      	ldr	r1, [r0, #4]
 8005bc2:	d93d      	bls.n	8005c40 <_dtoa_r+0x318>
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fcbb 	bl	8006540 <_Balloc>
 8005bca:	9001      	str	r0, [sp, #4]
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d13b      	bne.n	8005c48 <_dtoa_r+0x320>
 8005bd0:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <_dtoa_r+0x2f0>)
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005bd8:	e6c0      	b.n	800595c <_dtoa_r+0x34>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e7df      	b.n	8005b9e <_dtoa_r+0x276>
 8005bde:	bf00      	nop
 8005be0:	636f4361 	.word	0x636f4361
 8005be4:	3fd287a7 	.word	0x3fd287a7
 8005be8:	8b60c8b3 	.word	0x8b60c8b3
 8005bec:	3fc68a28 	.word	0x3fc68a28
 8005bf0:	509f79fb 	.word	0x509f79fb
 8005bf4:	3fd34413 	.word	0x3fd34413
 8005bf8:	08008261 	.word	0x08008261
 8005bfc:	08008278 	.word	0x08008278
 8005c00:	7ff00000 	.word	0x7ff00000
 8005c04:	0800825d 	.word	0x0800825d
 8005c08:	08008254 	.word	0x08008254
 8005c0c:	08008231 	.word	0x08008231
 8005c10:	3ff80000 	.word	0x3ff80000
 8005c14:	08008368 	.word	0x08008368
 8005c18:	080082d3 	.word	0x080082d3
 8005c1c:	2501      	movs	r5, #1
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9306      	str	r3, [sp, #24]
 8005c22:	9508      	str	r5, [sp, #32]
 8005c24:	f04f 33ff 	mov.w	r3, #4294967295
 8005c28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2312      	movs	r3, #18
 8005c30:	e7b0      	b.n	8005b94 <_dtoa_r+0x26c>
 8005c32:	2301      	movs	r3, #1
 8005c34:	9308      	str	r3, [sp, #32]
 8005c36:	e7f5      	b.n	8005c24 <_dtoa_r+0x2fc>
 8005c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c3e:	e7b8      	b.n	8005bb2 <_dtoa_r+0x28a>
 8005c40:	3101      	adds	r1, #1
 8005c42:	6041      	str	r1, [r0, #4]
 8005c44:	0052      	lsls	r2, r2, #1
 8005c46:	e7b8      	b.n	8005bba <_dtoa_r+0x292>
 8005c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c4a:	9a01      	ldr	r2, [sp, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	2b0e      	cmp	r3, #14
 8005c52:	f200 809d 	bhi.w	8005d90 <_dtoa_r+0x468>
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	f000 809a 	beq.w	8005d90 <_dtoa_r+0x468>
 8005c5c:	9b00      	ldr	r3, [sp, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	dd32      	ble.n	8005cc8 <_dtoa_r+0x3a0>
 8005c62:	4ab7      	ldr	r2, [pc, #732]	; (8005f40 <_dtoa_r+0x618>)
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c70:	9b00      	ldr	r3, [sp, #0]
 8005c72:	05d8      	lsls	r0, r3, #23
 8005c74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005c78:	d516      	bpl.n	8005ca8 <_dtoa_r+0x380>
 8005c7a:	4bb2      	ldr	r3, [pc, #712]	; (8005f44 <_dtoa_r+0x61c>)
 8005c7c:	ec51 0b19 	vmov	r0, r1, d9
 8005c80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c84:	f7fa fdea 	bl	800085c <__aeabi_ddiv>
 8005c88:	f007 070f 	and.w	r7, r7, #15
 8005c8c:	4682      	mov	sl, r0
 8005c8e:	468b      	mov	fp, r1
 8005c90:	2503      	movs	r5, #3
 8005c92:	4eac      	ldr	r6, [pc, #688]	; (8005f44 <_dtoa_r+0x61c>)
 8005c94:	b957      	cbnz	r7, 8005cac <_dtoa_r+0x384>
 8005c96:	4642      	mov	r2, r8
 8005c98:	464b      	mov	r3, r9
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	f7fa fddd 	bl	800085c <__aeabi_ddiv>
 8005ca2:	4682      	mov	sl, r0
 8005ca4:	468b      	mov	fp, r1
 8005ca6:	e028      	b.n	8005cfa <_dtoa_r+0x3d2>
 8005ca8:	2502      	movs	r5, #2
 8005caa:	e7f2      	b.n	8005c92 <_dtoa_r+0x36a>
 8005cac:	07f9      	lsls	r1, r7, #31
 8005cae:	d508      	bpl.n	8005cc2 <_dtoa_r+0x39a>
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cb8:	f7fa fca6 	bl	8000608 <__aeabi_dmul>
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	4689      	mov	r9, r1
 8005cc2:	107f      	asrs	r7, r7, #1
 8005cc4:	3608      	adds	r6, #8
 8005cc6:	e7e5      	b.n	8005c94 <_dtoa_r+0x36c>
 8005cc8:	f000 809b 	beq.w	8005e02 <_dtoa_r+0x4da>
 8005ccc:	9b00      	ldr	r3, [sp, #0]
 8005cce:	4f9d      	ldr	r7, [pc, #628]	; (8005f44 <_dtoa_r+0x61c>)
 8005cd0:	425e      	negs	r6, r3
 8005cd2:	4b9b      	ldr	r3, [pc, #620]	; (8005f40 <_dtoa_r+0x618>)
 8005cd4:	f006 020f 	and.w	r2, r6, #15
 8005cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	ec51 0b19 	vmov	r0, r1, d9
 8005ce4:	f7fa fc90 	bl	8000608 <__aeabi_dmul>
 8005ce8:	1136      	asrs	r6, r6, #4
 8005cea:	4682      	mov	sl, r0
 8005cec:	468b      	mov	fp, r1
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2502      	movs	r5, #2
 8005cf2:	2e00      	cmp	r6, #0
 8005cf4:	d17a      	bne.n	8005dec <_dtoa_r+0x4c4>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1d3      	bne.n	8005ca2 <_dtoa_r+0x37a>
 8005cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8082 	beq.w	8005e06 <_dtoa_r+0x4de>
 8005d02:	4b91      	ldr	r3, [pc, #580]	; (8005f48 <_dtoa_r+0x620>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	4650      	mov	r0, sl
 8005d08:	4659      	mov	r1, fp
 8005d0a:	f7fa feef 	bl	8000aec <__aeabi_dcmplt>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d079      	beq.n	8005e06 <_dtoa_r+0x4de>
 8005d12:	9b03      	ldr	r3, [sp, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d076      	beq.n	8005e06 <_dtoa_r+0x4de>
 8005d18:	9b02      	ldr	r3, [sp, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	dd36      	ble.n	8005d8c <_dtoa_r+0x464>
 8005d1e:	9b00      	ldr	r3, [sp, #0]
 8005d20:	4650      	mov	r0, sl
 8005d22:	4659      	mov	r1, fp
 8005d24:	1e5f      	subs	r7, r3, #1
 8005d26:	2200      	movs	r2, #0
 8005d28:	4b88      	ldr	r3, [pc, #544]	; (8005f4c <_dtoa_r+0x624>)
 8005d2a:	f7fa fc6d 	bl	8000608 <__aeabi_dmul>
 8005d2e:	9e02      	ldr	r6, [sp, #8]
 8005d30:	4682      	mov	sl, r0
 8005d32:	468b      	mov	fp, r1
 8005d34:	3501      	adds	r5, #1
 8005d36:	4628      	mov	r0, r5
 8005d38:	f7fa fbfc 	bl	8000534 <__aeabi_i2d>
 8005d3c:	4652      	mov	r2, sl
 8005d3e:	465b      	mov	r3, fp
 8005d40:	f7fa fc62 	bl	8000608 <__aeabi_dmul>
 8005d44:	4b82      	ldr	r3, [pc, #520]	; (8005f50 <_dtoa_r+0x628>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	f7fa faa8 	bl	800029c <__adddf3>
 8005d4c:	46d0      	mov	r8, sl
 8005d4e:	46d9      	mov	r9, fp
 8005d50:	4682      	mov	sl, r0
 8005d52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	d158      	bne.n	8005e0c <_dtoa_r+0x4e4>
 8005d5a:	4b7e      	ldr	r3, [pc, #504]	; (8005f54 <_dtoa_r+0x62c>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	4640      	mov	r0, r8
 8005d60:	4649      	mov	r1, r9
 8005d62:	f7fa fa99 	bl	8000298 <__aeabi_dsub>
 8005d66:	4652      	mov	r2, sl
 8005d68:	465b      	mov	r3, fp
 8005d6a:	4680      	mov	r8, r0
 8005d6c:	4689      	mov	r9, r1
 8005d6e:	f7fa fedb 	bl	8000b28 <__aeabi_dcmpgt>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	f040 8295 	bne.w	80062a2 <_dtoa_r+0x97a>
 8005d78:	4652      	mov	r2, sl
 8005d7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d7e:	4640      	mov	r0, r8
 8005d80:	4649      	mov	r1, r9
 8005d82:	f7fa feb3 	bl	8000aec <__aeabi_dcmplt>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f040 8289 	bne.w	800629e <_dtoa_r+0x976>
 8005d8c:	ec5b ab19 	vmov	sl, fp, d9
 8005d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f2c0 8148 	blt.w	8006028 <_dtoa_r+0x700>
 8005d98:	9a00      	ldr	r2, [sp, #0]
 8005d9a:	2a0e      	cmp	r2, #14
 8005d9c:	f300 8144 	bgt.w	8006028 <_dtoa_r+0x700>
 8005da0:	4b67      	ldr	r3, [pc, #412]	; (8005f40 <_dtoa_r+0x618>)
 8005da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005da6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f280 80d5 	bge.w	8005f5c <_dtoa_r+0x634>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f300 80d1 	bgt.w	8005f5c <_dtoa_r+0x634>
 8005dba:	f040 826f 	bne.w	800629c <_dtoa_r+0x974>
 8005dbe:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <_dtoa_r+0x62c>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	f7fa fc1f 	bl	8000608 <__aeabi_dmul>
 8005dca:	4652      	mov	r2, sl
 8005dcc:	465b      	mov	r3, fp
 8005dce:	f7fa fea1 	bl	8000b14 <__aeabi_dcmpge>
 8005dd2:	9e03      	ldr	r6, [sp, #12]
 8005dd4:	4637      	mov	r7, r6
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f040 8245 	bne.w	8006266 <_dtoa_r+0x93e>
 8005ddc:	9d01      	ldr	r5, [sp, #4]
 8005dde:	2331      	movs	r3, #49	; 0x31
 8005de0:	f805 3b01 	strb.w	r3, [r5], #1
 8005de4:	9b00      	ldr	r3, [sp, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	e240      	b.n	800626e <_dtoa_r+0x946>
 8005dec:	07f2      	lsls	r2, r6, #31
 8005dee:	d505      	bpl.n	8005dfc <_dtoa_r+0x4d4>
 8005df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df4:	f7fa fc08 	bl	8000608 <__aeabi_dmul>
 8005df8:	3501      	adds	r5, #1
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	1076      	asrs	r6, r6, #1
 8005dfe:	3708      	adds	r7, #8
 8005e00:	e777      	b.n	8005cf2 <_dtoa_r+0x3ca>
 8005e02:	2502      	movs	r5, #2
 8005e04:	e779      	b.n	8005cfa <_dtoa_r+0x3d2>
 8005e06:	9f00      	ldr	r7, [sp, #0]
 8005e08:	9e03      	ldr	r6, [sp, #12]
 8005e0a:	e794      	b.n	8005d36 <_dtoa_r+0x40e>
 8005e0c:	9901      	ldr	r1, [sp, #4]
 8005e0e:	4b4c      	ldr	r3, [pc, #304]	; (8005f40 <_dtoa_r+0x618>)
 8005e10:	4431      	add	r1, r6
 8005e12:	910d      	str	r1, [sp, #52]	; 0x34
 8005e14:	9908      	ldr	r1, [sp, #32]
 8005e16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	d043      	beq.n	8005eaa <_dtoa_r+0x582>
 8005e22:	494d      	ldr	r1, [pc, #308]	; (8005f58 <_dtoa_r+0x630>)
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7fa fd19 	bl	800085c <__aeabi_ddiv>
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	465b      	mov	r3, fp
 8005e2e:	f7fa fa33 	bl	8000298 <__aeabi_dsub>
 8005e32:	9d01      	ldr	r5, [sp, #4]
 8005e34:	4682      	mov	sl, r0
 8005e36:	468b      	mov	fp, r1
 8005e38:	4649      	mov	r1, r9
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	f7fa fe94 	bl	8000b68 <__aeabi_d2iz>
 8005e40:	4606      	mov	r6, r0
 8005e42:	f7fa fb77 	bl	8000534 <__aeabi_i2d>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	f7fa fa23 	bl	8000298 <__aeabi_dsub>
 8005e52:	3630      	adds	r6, #48	; 0x30
 8005e54:	f805 6b01 	strb.w	r6, [r5], #1
 8005e58:	4652      	mov	r2, sl
 8005e5a:	465b      	mov	r3, fp
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	4689      	mov	r9, r1
 8005e60:	f7fa fe44 	bl	8000aec <__aeabi_dcmplt>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d163      	bne.n	8005f30 <_dtoa_r+0x608>
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	4936      	ldr	r1, [pc, #216]	; (8005f48 <_dtoa_r+0x620>)
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f7fa fa12 	bl	8000298 <__aeabi_dsub>
 8005e74:	4652      	mov	r2, sl
 8005e76:	465b      	mov	r3, fp
 8005e78:	f7fa fe38 	bl	8000aec <__aeabi_dcmplt>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	f040 80b5 	bne.w	8005fec <_dtoa_r+0x6c4>
 8005e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e84:	429d      	cmp	r5, r3
 8005e86:	d081      	beq.n	8005d8c <_dtoa_r+0x464>
 8005e88:	4b30      	ldr	r3, [pc, #192]	; (8005f4c <_dtoa_r+0x624>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	4650      	mov	r0, sl
 8005e8e:	4659      	mov	r1, fp
 8005e90:	f7fa fbba 	bl	8000608 <__aeabi_dmul>
 8005e94:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <_dtoa_r+0x624>)
 8005e96:	4682      	mov	sl, r0
 8005e98:	468b      	mov	fp, r1
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f7fa fbb2 	bl	8000608 <__aeabi_dmul>
 8005ea4:	4680      	mov	r8, r0
 8005ea6:	4689      	mov	r9, r1
 8005ea8:	e7c6      	b.n	8005e38 <_dtoa_r+0x510>
 8005eaa:	4650      	mov	r0, sl
 8005eac:	4659      	mov	r1, fp
 8005eae:	f7fa fbab 	bl	8000608 <__aeabi_dmul>
 8005eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb4:	9d01      	ldr	r5, [sp, #4]
 8005eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005eb8:	4682      	mov	sl, r0
 8005eba:	468b      	mov	fp, r1
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7fa fe52 	bl	8000b68 <__aeabi_d2iz>
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	f7fa fb35 	bl	8000534 <__aeabi_i2d>
 8005eca:	3630      	adds	r6, #48	; 0x30
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	f7fa f9e0 	bl	8000298 <__aeabi_dsub>
 8005ed8:	f805 6b01 	strb.w	r6, [r5], #1
 8005edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ede:	429d      	cmp	r5, r3
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	4689      	mov	r9, r1
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	d124      	bne.n	8005f34 <_dtoa_r+0x60c>
 8005eea:	4b1b      	ldr	r3, [pc, #108]	; (8005f58 <_dtoa_r+0x630>)
 8005eec:	4650      	mov	r0, sl
 8005eee:	4659      	mov	r1, fp
 8005ef0:	f7fa f9d4 	bl	800029c <__adddf3>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4640      	mov	r0, r8
 8005efa:	4649      	mov	r1, r9
 8005efc:	f7fa fe14 	bl	8000b28 <__aeabi_dcmpgt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d173      	bne.n	8005fec <_dtoa_r+0x6c4>
 8005f04:	4652      	mov	r2, sl
 8005f06:	465b      	mov	r3, fp
 8005f08:	4913      	ldr	r1, [pc, #76]	; (8005f58 <_dtoa_r+0x630>)
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	f7fa f9c4 	bl	8000298 <__aeabi_dsub>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4640      	mov	r0, r8
 8005f16:	4649      	mov	r1, r9
 8005f18:	f7fa fde8 	bl	8000aec <__aeabi_dcmplt>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f43f af35 	beq.w	8005d8c <_dtoa_r+0x464>
 8005f22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f24:	1e6b      	subs	r3, r5, #1
 8005f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f2c:	2b30      	cmp	r3, #48	; 0x30
 8005f2e:	d0f8      	beq.n	8005f22 <_dtoa_r+0x5fa>
 8005f30:	9700      	str	r7, [sp, #0]
 8005f32:	e049      	b.n	8005fc8 <_dtoa_r+0x6a0>
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <_dtoa_r+0x624>)
 8005f36:	f7fa fb67 	bl	8000608 <__aeabi_dmul>
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	4689      	mov	r9, r1
 8005f3e:	e7bd      	b.n	8005ebc <_dtoa_r+0x594>
 8005f40:	08008368 	.word	0x08008368
 8005f44:	08008340 	.word	0x08008340
 8005f48:	3ff00000 	.word	0x3ff00000
 8005f4c:	40240000 	.word	0x40240000
 8005f50:	401c0000 	.word	0x401c0000
 8005f54:	40140000 	.word	0x40140000
 8005f58:	3fe00000 	.word	0x3fe00000
 8005f5c:	9d01      	ldr	r5, [sp, #4]
 8005f5e:	4656      	mov	r6, sl
 8005f60:	465f      	mov	r7, fp
 8005f62:	4642      	mov	r2, r8
 8005f64:	464b      	mov	r3, r9
 8005f66:	4630      	mov	r0, r6
 8005f68:	4639      	mov	r1, r7
 8005f6a:	f7fa fc77 	bl	800085c <__aeabi_ddiv>
 8005f6e:	f7fa fdfb 	bl	8000b68 <__aeabi_d2iz>
 8005f72:	4682      	mov	sl, r0
 8005f74:	f7fa fade 	bl	8000534 <__aeabi_i2d>
 8005f78:	4642      	mov	r2, r8
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	f7fa fb44 	bl	8000608 <__aeabi_dmul>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4630      	mov	r0, r6
 8005f86:	4639      	mov	r1, r7
 8005f88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f8c:	f7fa f984 	bl	8000298 <__aeabi_dsub>
 8005f90:	f805 6b01 	strb.w	r6, [r5], #1
 8005f94:	9e01      	ldr	r6, [sp, #4]
 8005f96:	9f03      	ldr	r7, [sp, #12]
 8005f98:	1bae      	subs	r6, r5, r6
 8005f9a:	42b7      	cmp	r7, r6
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	d135      	bne.n	800600e <_dtoa_r+0x6e6>
 8005fa2:	f7fa f97b 	bl	800029c <__adddf3>
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	464b      	mov	r3, r9
 8005faa:	4606      	mov	r6, r0
 8005fac:	460f      	mov	r7, r1
 8005fae:	f7fa fdbb 	bl	8000b28 <__aeabi_dcmpgt>
 8005fb2:	b9d0      	cbnz	r0, 8005fea <_dtoa_r+0x6c2>
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	4630      	mov	r0, r6
 8005fba:	4639      	mov	r1, r7
 8005fbc:	f7fa fd8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fc0:	b110      	cbz	r0, 8005fc8 <_dtoa_r+0x6a0>
 8005fc2:	f01a 0f01 	tst.w	sl, #1
 8005fc6:	d110      	bne.n	8005fea <_dtoa_r+0x6c2>
 8005fc8:	4620      	mov	r0, r4
 8005fca:	ee18 1a10 	vmov	r1, s16
 8005fce:	f000 faf7 	bl	80065c0 <_Bfree>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	9800      	ldr	r0, [sp, #0]
 8005fd6:	702b      	strb	r3, [r5, #0]
 8005fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fda:	3001      	adds	r0, #1
 8005fdc:	6018      	str	r0, [r3, #0]
 8005fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f43f acf1 	beq.w	80059c8 <_dtoa_r+0xa0>
 8005fe6:	601d      	str	r5, [r3, #0]
 8005fe8:	e4ee      	b.n	80059c8 <_dtoa_r+0xa0>
 8005fea:	9f00      	ldr	r7, [sp, #0]
 8005fec:	462b      	mov	r3, r5
 8005fee:	461d      	mov	r5, r3
 8005ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ff4:	2a39      	cmp	r2, #57	; 0x39
 8005ff6:	d106      	bne.n	8006006 <_dtoa_r+0x6de>
 8005ff8:	9a01      	ldr	r2, [sp, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d1f7      	bne.n	8005fee <_dtoa_r+0x6c6>
 8005ffe:	9901      	ldr	r1, [sp, #4]
 8006000:	2230      	movs	r2, #48	; 0x30
 8006002:	3701      	adds	r7, #1
 8006004:	700a      	strb	r2, [r1, #0]
 8006006:	781a      	ldrb	r2, [r3, #0]
 8006008:	3201      	adds	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e790      	b.n	8005f30 <_dtoa_r+0x608>
 800600e:	4ba6      	ldr	r3, [pc, #664]	; (80062a8 <_dtoa_r+0x980>)
 8006010:	2200      	movs	r2, #0
 8006012:	f7fa faf9 	bl	8000608 <__aeabi_dmul>
 8006016:	2200      	movs	r2, #0
 8006018:	2300      	movs	r3, #0
 800601a:	4606      	mov	r6, r0
 800601c:	460f      	mov	r7, r1
 800601e:	f7fa fd5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006022:	2800      	cmp	r0, #0
 8006024:	d09d      	beq.n	8005f62 <_dtoa_r+0x63a>
 8006026:	e7cf      	b.n	8005fc8 <_dtoa_r+0x6a0>
 8006028:	9a08      	ldr	r2, [sp, #32]
 800602a:	2a00      	cmp	r2, #0
 800602c:	f000 80d7 	beq.w	80061de <_dtoa_r+0x8b6>
 8006030:	9a06      	ldr	r2, [sp, #24]
 8006032:	2a01      	cmp	r2, #1
 8006034:	f300 80ba 	bgt.w	80061ac <_dtoa_r+0x884>
 8006038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800603a:	2a00      	cmp	r2, #0
 800603c:	f000 80b2 	beq.w	80061a4 <_dtoa_r+0x87c>
 8006040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006044:	9e07      	ldr	r6, [sp, #28]
 8006046:	9d04      	ldr	r5, [sp, #16]
 8006048:	9a04      	ldr	r2, [sp, #16]
 800604a:	441a      	add	r2, r3
 800604c:	9204      	str	r2, [sp, #16]
 800604e:	9a05      	ldr	r2, [sp, #20]
 8006050:	2101      	movs	r1, #1
 8006052:	441a      	add	r2, r3
 8006054:	4620      	mov	r0, r4
 8006056:	9205      	str	r2, [sp, #20]
 8006058:	f000 fb6a 	bl	8006730 <__i2b>
 800605c:	4607      	mov	r7, r0
 800605e:	2d00      	cmp	r5, #0
 8006060:	dd0c      	ble.n	800607c <_dtoa_r+0x754>
 8006062:	9b05      	ldr	r3, [sp, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	dd09      	ble.n	800607c <_dtoa_r+0x754>
 8006068:	42ab      	cmp	r3, r5
 800606a:	9a04      	ldr	r2, [sp, #16]
 800606c:	bfa8      	it	ge
 800606e:	462b      	movge	r3, r5
 8006070:	1ad2      	subs	r2, r2, r3
 8006072:	9204      	str	r2, [sp, #16]
 8006074:	9a05      	ldr	r2, [sp, #20]
 8006076:	1aed      	subs	r5, r5, r3
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	9305      	str	r3, [sp, #20]
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	b31b      	cbz	r3, 80060c8 <_dtoa_r+0x7a0>
 8006080:	9b08      	ldr	r3, [sp, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 80af 	beq.w	80061e6 <_dtoa_r+0x8be>
 8006088:	2e00      	cmp	r6, #0
 800608a:	dd13      	ble.n	80060b4 <_dtoa_r+0x78c>
 800608c:	4639      	mov	r1, r7
 800608e:	4632      	mov	r2, r6
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fc0d 	bl	80068b0 <__pow5mult>
 8006096:	ee18 2a10 	vmov	r2, s16
 800609a:	4601      	mov	r1, r0
 800609c:	4607      	mov	r7, r0
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 fb5c 	bl	800675c <__multiply>
 80060a4:	ee18 1a10 	vmov	r1, s16
 80060a8:	4680      	mov	r8, r0
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 fa88 	bl	80065c0 <_Bfree>
 80060b0:	ee08 8a10 	vmov	s16, r8
 80060b4:	9b07      	ldr	r3, [sp, #28]
 80060b6:	1b9a      	subs	r2, r3, r6
 80060b8:	d006      	beq.n	80060c8 <_dtoa_r+0x7a0>
 80060ba:	ee18 1a10 	vmov	r1, s16
 80060be:	4620      	mov	r0, r4
 80060c0:	f000 fbf6 	bl	80068b0 <__pow5mult>
 80060c4:	ee08 0a10 	vmov	s16, r0
 80060c8:	2101      	movs	r1, #1
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 fb30 	bl	8006730 <__i2b>
 80060d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	4606      	mov	r6, r0
 80060d6:	f340 8088 	ble.w	80061ea <_dtoa_r+0x8c2>
 80060da:	461a      	mov	r2, r3
 80060dc:	4601      	mov	r1, r0
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 fbe6 	bl	80068b0 <__pow5mult>
 80060e4:	9b06      	ldr	r3, [sp, #24]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	4606      	mov	r6, r0
 80060ea:	f340 8081 	ble.w	80061f0 <_dtoa_r+0x8c8>
 80060ee:	f04f 0800 	mov.w	r8, #0
 80060f2:	6933      	ldr	r3, [r6, #16]
 80060f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80060f8:	6918      	ldr	r0, [r3, #16]
 80060fa:	f000 fac9 	bl	8006690 <__hi0bits>
 80060fe:	f1c0 0020 	rsb	r0, r0, #32
 8006102:	9b05      	ldr	r3, [sp, #20]
 8006104:	4418      	add	r0, r3
 8006106:	f010 001f 	ands.w	r0, r0, #31
 800610a:	f000 8092 	beq.w	8006232 <_dtoa_r+0x90a>
 800610e:	f1c0 0320 	rsb	r3, r0, #32
 8006112:	2b04      	cmp	r3, #4
 8006114:	f340 808a 	ble.w	800622c <_dtoa_r+0x904>
 8006118:	f1c0 001c 	rsb	r0, r0, #28
 800611c:	9b04      	ldr	r3, [sp, #16]
 800611e:	4403      	add	r3, r0
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	9b05      	ldr	r3, [sp, #20]
 8006124:	4403      	add	r3, r0
 8006126:	4405      	add	r5, r0
 8006128:	9305      	str	r3, [sp, #20]
 800612a:	9b04      	ldr	r3, [sp, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	dd07      	ble.n	8006140 <_dtoa_r+0x818>
 8006130:	ee18 1a10 	vmov	r1, s16
 8006134:	461a      	mov	r2, r3
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fc14 	bl	8006964 <__lshift>
 800613c:	ee08 0a10 	vmov	s16, r0
 8006140:	9b05      	ldr	r3, [sp, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	dd05      	ble.n	8006152 <_dtoa_r+0x82a>
 8006146:	4631      	mov	r1, r6
 8006148:	461a      	mov	r2, r3
 800614a:	4620      	mov	r0, r4
 800614c:	f000 fc0a 	bl	8006964 <__lshift>
 8006150:	4606      	mov	r6, r0
 8006152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d06e      	beq.n	8006236 <_dtoa_r+0x90e>
 8006158:	ee18 0a10 	vmov	r0, s16
 800615c:	4631      	mov	r1, r6
 800615e:	f000 fc71 	bl	8006a44 <__mcmp>
 8006162:	2800      	cmp	r0, #0
 8006164:	da67      	bge.n	8006236 <_dtoa_r+0x90e>
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	3b01      	subs	r3, #1
 800616a:	ee18 1a10 	vmov	r1, s16
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	220a      	movs	r2, #10
 8006172:	2300      	movs	r3, #0
 8006174:	4620      	mov	r0, r4
 8006176:	f000 fa45 	bl	8006604 <__multadd>
 800617a:	9b08      	ldr	r3, [sp, #32]
 800617c:	ee08 0a10 	vmov	s16, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 81b1 	beq.w	80064e8 <_dtoa_r+0xbc0>
 8006186:	2300      	movs	r3, #0
 8006188:	4639      	mov	r1, r7
 800618a:	220a      	movs	r2, #10
 800618c:	4620      	mov	r0, r4
 800618e:	f000 fa39 	bl	8006604 <__multadd>
 8006192:	9b02      	ldr	r3, [sp, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	4607      	mov	r7, r0
 8006198:	f300 808e 	bgt.w	80062b8 <_dtoa_r+0x990>
 800619c:	9b06      	ldr	r3, [sp, #24]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	dc51      	bgt.n	8006246 <_dtoa_r+0x91e>
 80061a2:	e089      	b.n	80062b8 <_dtoa_r+0x990>
 80061a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061aa:	e74b      	b.n	8006044 <_dtoa_r+0x71c>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	1e5e      	subs	r6, r3, #1
 80061b0:	9b07      	ldr	r3, [sp, #28]
 80061b2:	42b3      	cmp	r3, r6
 80061b4:	bfbf      	itttt	lt
 80061b6:	9b07      	ldrlt	r3, [sp, #28]
 80061b8:	9607      	strlt	r6, [sp, #28]
 80061ba:	1af2      	sublt	r2, r6, r3
 80061bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061be:	bfb6      	itet	lt
 80061c0:	189b      	addlt	r3, r3, r2
 80061c2:	1b9e      	subge	r6, r3, r6
 80061c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	bfb8      	it	lt
 80061ca:	2600      	movlt	r6, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bfb7      	itett	lt
 80061d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80061d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80061d8:	1a9d      	sublt	r5, r3, r2
 80061da:	2300      	movlt	r3, #0
 80061dc:	e734      	b.n	8006048 <_dtoa_r+0x720>
 80061de:	9e07      	ldr	r6, [sp, #28]
 80061e0:	9d04      	ldr	r5, [sp, #16]
 80061e2:	9f08      	ldr	r7, [sp, #32]
 80061e4:	e73b      	b.n	800605e <_dtoa_r+0x736>
 80061e6:	9a07      	ldr	r2, [sp, #28]
 80061e8:	e767      	b.n	80060ba <_dtoa_r+0x792>
 80061ea:	9b06      	ldr	r3, [sp, #24]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	dc18      	bgt.n	8006222 <_dtoa_r+0x8fa>
 80061f0:	f1ba 0f00 	cmp.w	sl, #0
 80061f4:	d115      	bne.n	8006222 <_dtoa_r+0x8fa>
 80061f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061fa:	b993      	cbnz	r3, 8006222 <_dtoa_r+0x8fa>
 80061fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006200:	0d1b      	lsrs	r3, r3, #20
 8006202:	051b      	lsls	r3, r3, #20
 8006204:	b183      	cbz	r3, 8006228 <_dtoa_r+0x900>
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	3301      	adds	r3, #1
 800620a:	9304      	str	r3, [sp, #16]
 800620c:	9b05      	ldr	r3, [sp, #20]
 800620e:	3301      	adds	r3, #1
 8006210:	9305      	str	r3, [sp, #20]
 8006212:	f04f 0801 	mov.w	r8, #1
 8006216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006218:	2b00      	cmp	r3, #0
 800621a:	f47f af6a 	bne.w	80060f2 <_dtoa_r+0x7ca>
 800621e:	2001      	movs	r0, #1
 8006220:	e76f      	b.n	8006102 <_dtoa_r+0x7da>
 8006222:	f04f 0800 	mov.w	r8, #0
 8006226:	e7f6      	b.n	8006216 <_dtoa_r+0x8ee>
 8006228:	4698      	mov	r8, r3
 800622a:	e7f4      	b.n	8006216 <_dtoa_r+0x8ee>
 800622c:	f43f af7d 	beq.w	800612a <_dtoa_r+0x802>
 8006230:	4618      	mov	r0, r3
 8006232:	301c      	adds	r0, #28
 8006234:	e772      	b.n	800611c <_dtoa_r+0x7f4>
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	dc37      	bgt.n	80062ac <_dtoa_r+0x984>
 800623c:	9b06      	ldr	r3, [sp, #24]
 800623e:	2b02      	cmp	r3, #2
 8006240:	dd34      	ble.n	80062ac <_dtoa_r+0x984>
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	9302      	str	r3, [sp, #8]
 8006246:	9b02      	ldr	r3, [sp, #8]
 8006248:	b96b      	cbnz	r3, 8006266 <_dtoa_r+0x93e>
 800624a:	4631      	mov	r1, r6
 800624c:	2205      	movs	r2, #5
 800624e:	4620      	mov	r0, r4
 8006250:	f000 f9d8 	bl	8006604 <__multadd>
 8006254:	4601      	mov	r1, r0
 8006256:	4606      	mov	r6, r0
 8006258:	ee18 0a10 	vmov	r0, s16
 800625c:	f000 fbf2 	bl	8006a44 <__mcmp>
 8006260:	2800      	cmp	r0, #0
 8006262:	f73f adbb 	bgt.w	8005ddc <_dtoa_r+0x4b4>
 8006266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006268:	9d01      	ldr	r5, [sp, #4]
 800626a:	43db      	mvns	r3, r3
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	f04f 0800 	mov.w	r8, #0
 8006272:	4631      	mov	r1, r6
 8006274:	4620      	mov	r0, r4
 8006276:	f000 f9a3 	bl	80065c0 <_Bfree>
 800627a:	2f00      	cmp	r7, #0
 800627c:	f43f aea4 	beq.w	8005fc8 <_dtoa_r+0x6a0>
 8006280:	f1b8 0f00 	cmp.w	r8, #0
 8006284:	d005      	beq.n	8006292 <_dtoa_r+0x96a>
 8006286:	45b8      	cmp	r8, r7
 8006288:	d003      	beq.n	8006292 <_dtoa_r+0x96a>
 800628a:	4641      	mov	r1, r8
 800628c:	4620      	mov	r0, r4
 800628e:	f000 f997 	bl	80065c0 <_Bfree>
 8006292:	4639      	mov	r1, r7
 8006294:	4620      	mov	r0, r4
 8006296:	f000 f993 	bl	80065c0 <_Bfree>
 800629a:	e695      	b.n	8005fc8 <_dtoa_r+0x6a0>
 800629c:	2600      	movs	r6, #0
 800629e:	4637      	mov	r7, r6
 80062a0:	e7e1      	b.n	8006266 <_dtoa_r+0x93e>
 80062a2:	9700      	str	r7, [sp, #0]
 80062a4:	4637      	mov	r7, r6
 80062a6:	e599      	b.n	8005ddc <_dtoa_r+0x4b4>
 80062a8:	40240000 	.word	0x40240000
 80062ac:	9b08      	ldr	r3, [sp, #32]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 80ca 	beq.w	8006448 <_dtoa_r+0xb20>
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	9302      	str	r3, [sp, #8]
 80062b8:	2d00      	cmp	r5, #0
 80062ba:	dd05      	ble.n	80062c8 <_dtoa_r+0x9a0>
 80062bc:	4639      	mov	r1, r7
 80062be:	462a      	mov	r2, r5
 80062c0:	4620      	mov	r0, r4
 80062c2:	f000 fb4f 	bl	8006964 <__lshift>
 80062c6:	4607      	mov	r7, r0
 80062c8:	f1b8 0f00 	cmp.w	r8, #0
 80062cc:	d05b      	beq.n	8006386 <_dtoa_r+0xa5e>
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 f935 	bl	8006540 <_Balloc>
 80062d6:	4605      	mov	r5, r0
 80062d8:	b928      	cbnz	r0, 80062e6 <_dtoa_r+0x9be>
 80062da:	4b87      	ldr	r3, [pc, #540]	; (80064f8 <_dtoa_r+0xbd0>)
 80062dc:	4602      	mov	r2, r0
 80062de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062e2:	f7ff bb3b 	b.w	800595c <_dtoa_r+0x34>
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	3202      	adds	r2, #2
 80062ea:	0092      	lsls	r2, r2, #2
 80062ec:	f107 010c 	add.w	r1, r7, #12
 80062f0:	300c      	adds	r0, #12
 80062f2:	f000 f90b 	bl	800650c <memcpy>
 80062f6:	2201      	movs	r2, #1
 80062f8:	4629      	mov	r1, r5
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 fb32 	bl	8006964 <__lshift>
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	f103 0901 	add.w	r9, r3, #1
 8006306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800630a:	4413      	add	r3, r2
 800630c:	9305      	str	r3, [sp, #20]
 800630e:	f00a 0301 	and.w	r3, sl, #1
 8006312:	46b8      	mov	r8, r7
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	4607      	mov	r7, r0
 8006318:	4631      	mov	r1, r6
 800631a:	ee18 0a10 	vmov	r0, s16
 800631e:	f7ff fa75 	bl	800580c <quorem>
 8006322:	4641      	mov	r1, r8
 8006324:	9002      	str	r0, [sp, #8]
 8006326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800632a:	ee18 0a10 	vmov	r0, s16
 800632e:	f000 fb89 	bl	8006a44 <__mcmp>
 8006332:	463a      	mov	r2, r7
 8006334:	9003      	str	r0, [sp, #12]
 8006336:	4631      	mov	r1, r6
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fb9f 	bl	8006a7c <__mdiff>
 800633e:	68c2      	ldr	r2, [r0, #12]
 8006340:	f109 3bff 	add.w	fp, r9, #4294967295
 8006344:	4605      	mov	r5, r0
 8006346:	bb02      	cbnz	r2, 800638a <_dtoa_r+0xa62>
 8006348:	4601      	mov	r1, r0
 800634a:	ee18 0a10 	vmov	r0, s16
 800634e:	f000 fb79 	bl	8006a44 <__mcmp>
 8006352:	4602      	mov	r2, r0
 8006354:	4629      	mov	r1, r5
 8006356:	4620      	mov	r0, r4
 8006358:	9207      	str	r2, [sp, #28]
 800635a:	f000 f931 	bl	80065c0 <_Bfree>
 800635e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006362:	ea43 0102 	orr.w	r1, r3, r2
 8006366:	9b04      	ldr	r3, [sp, #16]
 8006368:	430b      	orrs	r3, r1
 800636a:	464d      	mov	r5, r9
 800636c:	d10f      	bne.n	800638e <_dtoa_r+0xa66>
 800636e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006372:	d02a      	beq.n	80063ca <_dtoa_r+0xaa2>
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	dd02      	ble.n	8006380 <_dtoa_r+0xa58>
 800637a:	9b02      	ldr	r3, [sp, #8]
 800637c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006380:	f88b a000 	strb.w	sl, [fp]
 8006384:	e775      	b.n	8006272 <_dtoa_r+0x94a>
 8006386:	4638      	mov	r0, r7
 8006388:	e7ba      	b.n	8006300 <_dtoa_r+0x9d8>
 800638a:	2201      	movs	r2, #1
 800638c:	e7e2      	b.n	8006354 <_dtoa_r+0xa2c>
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	db04      	blt.n	800639e <_dtoa_r+0xa76>
 8006394:	9906      	ldr	r1, [sp, #24]
 8006396:	430b      	orrs	r3, r1
 8006398:	9904      	ldr	r1, [sp, #16]
 800639a:	430b      	orrs	r3, r1
 800639c:	d122      	bne.n	80063e4 <_dtoa_r+0xabc>
 800639e:	2a00      	cmp	r2, #0
 80063a0:	ddee      	ble.n	8006380 <_dtoa_r+0xa58>
 80063a2:	ee18 1a10 	vmov	r1, s16
 80063a6:	2201      	movs	r2, #1
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 fadb 	bl	8006964 <__lshift>
 80063ae:	4631      	mov	r1, r6
 80063b0:	ee08 0a10 	vmov	s16, r0
 80063b4:	f000 fb46 	bl	8006a44 <__mcmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	dc03      	bgt.n	80063c4 <_dtoa_r+0xa9c>
 80063bc:	d1e0      	bne.n	8006380 <_dtoa_r+0xa58>
 80063be:	f01a 0f01 	tst.w	sl, #1
 80063c2:	d0dd      	beq.n	8006380 <_dtoa_r+0xa58>
 80063c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063c8:	d1d7      	bne.n	800637a <_dtoa_r+0xa52>
 80063ca:	2339      	movs	r3, #57	; 0x39
 80063cc:	f88b 3000 	strb.w	r3, [fp]
 80063d0:	462b      	mov	r3, r5
 80063d2:	461d      	mov	r5, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063da:	2a39      	cmp	r2, #57	; 0x39
 80063dc:	d071      	beq.n	80064c2 <_dtoa_r+0xb9a>
 80063de:	3201      	adds	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e746      	b.n	8006272 <_dtoa_r+0x94a>
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	dd07      	ble.n	80063f8 <_dtoa_r+0xad0>
 80063e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063ec:	d0ed      	beq.n	80063ca <_dtoa_r+0xaa2>
 80063ee:	f10a 0301 	add.w	r3, sl, #1
 80063f2:	f88b 3000 	strb.w	r3, [fp]
 80063f6:	e73c      	b.n	8006272 <_dtoa_r+0x94a>
 80063f8:	9b05      	ldr	r3, [sp, #20]
 80063fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80063fe:	4599      	cmp	r9, r3
 8006400:	d047      	beq.n	8006492 <_dtoa_r+0xb6a>
 8006402:	ee18 1a10 	vmov	r1, s16
 8006406:	2300      	movs	r3, #0
 8006408:	220a      	movs	r2, #10
 800640a:	4620      	mov	r0, r4
 800640c:	f000 f8fa 	bl	8006604 <__multadd>
 8006410:	45b8      	cmp	r8, r7
 8006412:	ee08 0a10 	vmov	s16, r0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	f04f 020a 	mov.w	r2, #10
 800641e:	4641      	mov	r1, r8
 8006420:	4620      	mov	r0, r4
 8006422:	d106      	bne.n	8006432 <_dtoa_r+0xb0a>
 8006424:	f000 f8ee 	bl	8006604 <__multadd>
 8006428:	4680      	mov	r8, r0
 800642a:	4607      	mov	r7, r0
 800642c:	f109 0901 	add.w	r9, r9, #1
 8006430:	e772      	b.n	8006318 <_dtoa_r+0x9f0>
 8006432:	f000 f8e7 	bl	8006604 <__multadd>
 8006436:	4639      	mov	r1, r7
 8006438:	4680      	mov	r8, r0
 800643a:	2300      	movs	r3, #0
 800643c:	220a      	movs	r2, #10
 800643e:	4620      	mov	r0, r4
 8006440:	f000 f8e0 	bl	8006604 <__multadd>
 8006444:	4607      	mov	r7, r0
 8006446:	e7f1      	b.n	800642c <_dtoa_r+0xb04>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	9302      	str	r3, [sp, #8]
 800644c:	9d01      	ldr	r5, [sp, #4]
 800644e:	ee18 0a10 	vmov	r0, s16
 8006452:	4631      	mov	r1, r6
 8006454:	f7ff f9da 	bl	800580c <quorem>
 8006458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	f805 ab01 	strb.w	sl, [r5], #1
 8006462:	1aea      	subs	r2, r5, r3
 8006464:	9b02      	ldr	r3, [sp, #8]
 8006466:	4293      	cmp	r3, r2
 8006468:	dd09      	ble.n	800647e <_dtoa_r+0xb56>
 800646a:	ee18 1a10 	vmov	r1, s16
 800646e:	2300      	movs	r3, #0
 8006470:	220a      	movs	r2, #10
 8006472:	4620      	mov	r0, r4
 8006474:	f000 f8c6 	bl	8006604 <__multadd>
 8006478:	ee08 0a10 	vmov	s16, r0
 800647c:	e7e7      	b.n	800644e <_dtoa_r+0xb26>
 800647e:	9b02      	ldr	r3, [sp, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	bfc8      	it	gt
 8006484:	461d      	movgt	r5, r3
 8006486:	9b01      	ldr	r3, [sp, #4]
 8006488:	bfd8      	it	le
 800648a:	2501      	movle	r5, #1
 800648c:	441d      	add	r5, r3
 800648e:	f04f 0800 	mov.w	r8, #0
 8006492:	ee18 1a10 	vmov	r1, s16
 8006496:	2201      	movs	r2, #1
 8006498:	4620      	mov	r0, r4
 800649a:	f000 fa63 	bl	8006964 <__lshift>
 800649e:	4631      	mov	r1, r6
 80064a0:	ee08 0a10 	vmov	s16, r0
 80064a4:	f000 face 	bl	8006a44 <__mcmp>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	dc91      	bgt.n	80063d0 <_dtoa_r+0xaa8>
 80064ac:	d102      	bne.n	80064b4 <_dtoa_r+0xb8c>
 80064ae:	f01a 0f01 	tst.w	sl, #1
 80064b2:	d18d      	bne.n	80063d0 <_dtoa_r+0xaa8>
 80064b4:	462b      	mov	r3, r5
 80064b6:	461d      	mov	r5, r3
 80064b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064bc:	2a30      	cmp	r2, #48	; 0x30
 80064be:	d0fa      	beq.n	80064b6 <_dtoa_r+0xb8e>
 80064c0:	e6d7      	b.n	8006272 <_dtoa_r+0x94a>
 80064c2:	9a01      	ldr	r2, [sp, #4]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d184      	bne.n	80063d2 <_dtoa_r+0xaaa>
 80064c8:	9b00      	ldr	r3, [sp, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	2331      	movs	r3, #49	; 0x31
 80064d0:	7013      	strb	r3, [r2, #0]
 80064d2:	e6ce      	b.n	8006272 <_dtoa_r+0x94a>
 80064d4:	4b09      	ldr	r3, [pc, #36]	; (80064fc <_dtoa_r+0xbd4>)
 80064d6:	f7ff ba95 	b.w	8005a04 <_dtoa_r+0xdc>
 80064da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f47f aa6e 	bne.w	80059be <_dtoa_r+0x96>
 80064e2:	4b07      	ldr	r3, [pc, #28]	; (8006500 <_dtoa_r+0xbd8>)
 80064e4:	f7ff ba8e 	b.w	8005a04 <_dtoa_r+0xdc>
 80064e8:	9b02      	ldr	r3, [sp, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	dcae      	bgt.n	800644c <_dtoa_r+0xb24>
 80064ee:	9b06      	ldr	r3, [sp, #24]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	f73f aea8 	bgt.w	8006246 <_dtoa_r+0x91e>
 80064f6:	e7a9      	b.n	800644c <_dtoa_r+0xb24>
 80064f8:	080082d3 	.word	0x080082d3
 80064fc:	08008230 	.word	0x08008230
 8006500:	08008254 	.word	0x08008254

08006504 <_localeconv_r>:
 8006504:	4800      	ldr	r0, [pc, #0]	; (8006508 <_localeconv_r+0x4>)
 8006506:	4770      	bx	lr
 8006508:	20000160 	.word	0x20000160

0800650c <memcpy>:
 800650c:	440a      	add	r2, r1
 800650e:	4291      	cmp	r1, r2
 8006510:	f100 33ff 	add.w	r3, r0, #4294967295
 8006514:	d100      	bne.n	8006518 <memcpy+0xc>
 8006516:	4770      	bx	lr
 8006518:	b510      	push	{r4, lr}
 800651a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800651e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006522:	4291      	cmp	r1, r2
 8006524:	d1f9      	bne.n	800651a <memcpy+0xe>
 8006526:	bd10      	pop	{r4, pc}

08006528 <__malloc_lock>:
 8006528:	4801      	ldr	r0, [pc, #4]	; (8006530 <__malloc_lock+0x8>)
 800652a:	f000 bd30 	b.w	8006f8e <__retarget_lock_acquire_recursive>
 800652e:	bf00      	nop
 8006530:	20000434 	.word	0x20000434

08006534 <__malloc_unlock>:
 8006534:	4801      	ldr	r0, [pc, #4]	; (800653c <__malloc_unlock+0x8>)
 8006536:	f000 bd2b 	b.w	8006f90 <__retarget_lock_release_recursive>
 800653a:	bf00      	nop
 800653c:	20000434 	.word	0x20000434

08006540 <_Balloc>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006544:	4604      	mov	r4, r0
 8006546:	460d      	mov	r5, r1
 8006548:	b976      	cbnz	r6, 8006568 <_Balloc+0x28>
 800654a:	2010      	movs	r0, #16
 800654c:	f7fe fbba 	bl	8004cc4 <malloc>
 8006550:	4602      	mov	r2, r0
 8006552:	6260      	str	r0, [r4, #36]	; 0x24
 8006554:	b920      	cbnz	r0, 8006560 <_Balloc+0x20>
 8006556:	4b18      	ldr	r3, [pc, #96]	; (80065b8 <_Balloc+0x78>)
 8006558:	4818      	ldr	r0, [pc, #96]	; (80065bc <_Balloc+0x7c>)
 800655a:	2166      	movs	r1, #102	; 0x66
 800655c:	f000 fce6 	bl	8006f2c <__assert_func>
 8006560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006564:	6006      	str	r6, [r0, #0]
 8006566:	60c6      	str	r6, [r0, #12]
 8006568:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800656a:	68f3      	ldr	r3, [r6, #12]
 800656c:	b183      	cbz	r3, 8006590 <_Balloc+0x50>
 800656e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006576:	b9b8      	cbnz	r0, 80065a8 <_Balloc+0x68>
 8006578:	2101      	movs	r1, #1
 800657a:	fa01 f605 	lsl.w	r6, r1, r5
 800657e:	1d72      	adds	r2, r6, #5
 8006580:	0092      	lsls	r2, r2, #2
 8006582:	4620      	mov	r0, r4
 8006584:	f000 fb60 	bl	8006c48 <_calloc_r>
 8006588:	b160      	cbz	r0, 80065a4 <_Balloc+0x64>
 800658a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800658e:	e00e      	b.n	80065ae <_Balloc+0x6e>
 8006590:	2221      	movs	r2, #33	; 0x21
 8006592:	2104      	movs	r1, #4
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fb57 	bl	8006c48 <_calloc_r>
 800659a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800659c:	60f0      	str	r0, [r6, #12]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e4      	bne.n	800656e <_Balloc+0x2e>
 80065a4:	2000      	movs	r0, #0
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	6802      	ldr	r2, [r0, #0]
 80065aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065ae:	2300      	movs	r3, #0
 80065b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065b4:	e7f7      	b.n	80065a6 <_Balloc+0x66>
 80065b6:	bf00      	nop
 80065b8:	08008261 	.word	0x08008261
 80065bc:	080082e4 	.word	0x080082e4

080065c0 <_Bfree>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065c4:	4605      	mov	r5, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	b976      	cbnz	r6, 80065e8 <_Bfree+0x28>
 80065ca:	2010      	movs	r0, #16
 80065cc:	f7fe fb7a 	bl	8004cc4 <malloc>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6268      	str	r0, [r5, #36]	; 0x24
 80065d4:	b920      	cbnz	r0, 80065e0 <_Bfree+0x20>
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <_Bfree+0x3c>)
 80065d8:	4809      	ldr	r0, [pc, #36]	; (8006600 <_Bfree+0x40>)
 80065da:	218a      	movs	r1, #138	; 0x8a
 80065dc:	f000 fca6 	bl	8006f2c <__assert_func>
 80065e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065e4:	6006      	str	r6, [r0, #0]
 80065e6:	60c6      	str	r6, [r0, #12]
 80065e8:	b13c      	cbz	r4, 80065fa <_Bfree+0x3a>
 80065ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065ec:	6862      	ldr	r2, [r4, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065f4:	6021      	str	r1, [r4, #0]
 80065f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	08008261 	.word	0x08008261
 8006600:	080082e4 	.word	0x080082e4

08006604 <__multadd>:
 8006604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006608:	690d      	ldr	r5, [r1, #16]
 800660a:	4607      	mov	r7, r0
 800660c:	460c      	mov	r4, r1
 800660e:	461e      	mov	r6, r3
 8006610:	f101 0c14 	add.w	ip, r1, #20
 8006614:	2000      	movs	r0, #0
 8006616:	f8dc 3000 	ldr.w	r3, [ip]
 800661a:	b299      	uxth	r1, r3
 800661c:	fb02 6101 	mla	r1, r2, r1, r6
 8006620:	0c1e      	lsrs	r6, r3, #16
 8006622:	0c0b      	lsrs	r3, r1, #16
 8006624:	fb02 3306 	mla	r3, r2, r6, r3
 8006628:	b289      	uxth	r1, r1
 800662a:	3001      	adds	r0, #1
 800662c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006630:	4285      	cmp	r5, r0
 8006632:	f84c 1b04 	str.w	r1, [ip], #4
 8006636:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800663a:	dcec      	bgt.n	8006616 <__multadd+0x12>
 800663c:	b30e      	cbz	r6, 8006682 <__multadd+0x7e>
 800663e:	68a3      	ldr	r3, [r4, #8]
 8006640:	42ab      	cmp	r3, r5
 8006642:	dc19      	bgt.n	8006678 <__multadd+0x74>
 8006644:	6861      	ldr	r1, [r4, #4]
 8006646:	4638      	mov	r0, r7
 8006648:	3101      	adds	r1, #1
 800664a:	f7ff ff79 	bl	8006540 <_Balloc>
 800664e:	4680      	mov	r8, r0
 8006650:	b928      	cbnz	r0, 800665e <__multadd+0x5a>
 8006652:	4602      	mov	r2, r0
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <__multadd+0x84>)
 8006656:	480d      	ldr	r0, [pc, #52]	; (800668c <__multadd+0x88>)
 8006658:	21b5      	movs	r1, #181	; 0xb5
 800665a:	f000 fc67 	bl	8006f2c <__assert_func>
 800665e:	6922      	ldr	r2, [r4, #16]
 8006660:	3202      	adds	r2, #2
 8006662:	f104 010c 	add.w	r1, r4, #12
 8006666:	0092      	lsls	r2, r2, #2
 8006668:	300c      	adds	r0, #12
 800666a:	f7ff ff4f 	bl	800650c <memcpy>
 800666e:	4621      	mov	r1, r4
 8006670:	4638      	mov	r0, r7
 8006672:	f7ff ffa5 	bl	80065c0 <_Bfree>
 8006676:	4644      	mov	r4, r8
 8006678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800667c:	3501      	adds	r5, #1
 800667e:	615e      	str	r6, [r3, #20]
 8006680:	6125      	str	r5, [r4, #16]
 8006682:	4620      	mov	r0, r4
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006688:	080082d3 	.word	0x080082d3
 800668c:	080082e4 	.word	0x080082e4

08006690 <__hi0bits>:
 8006690:	0c03      	lsrs	r3, r0, #16
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	b9d3      	cbnz	r3, 80066cc <__hi0bits+0x3c>
 8006696:	0400      	lsls	r0, r0, #16
 8006698:	2310      	movs	r3, #16
 800669a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800669e:	bf04      	itt	eq
 80066a0:	0200      	lsleq	r0, r0, #8
 80066a2:	3308      	addeq	r3, #8
 80066a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80066a8:	bf04      	itt	eq
 80066aa:	0100      	lsleq	r0, r0, #4
 80066ac:	3304      	addeq	r3, #4
 80066ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80066b2:	bf04      	itt	eq
 80066b4:	0080      	lsleq	r0, r0, #2
 80066b6:	3302      	addeq	r3, #2
 80066b8:	2800      	cmp	r0, #0
 80066ba:	db05      	blt.n	80066c8 <__hi0bits+0x38>
 80066bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80066c0:	f103 0301 	add.w	r3, r3, #1
 80066c4:	bf08      	it	eq
 80066c6:	2320      	moveq	r3, #32
 80066c8:	4618      	mov	r0, r3
 80066ca:	4770      	bx	lr
 80066cc:	2300      	movs	r3, #0
 80066ce:	e7e4      	b.n	800669a <__hi0bits+0xa>

080066d0 <__lo0bits>:
 80066d0:	6803      	ldr	r3, [r0, #0]
 80066d2:	f013 0207 	ands.w	r2, r3, #7
 80066d6:	4601      	mov	r1, r0
 80066d8:	d00b      	beq.n	80066f2 <__lo0bits+0x22>
 80066da:	07da      	lsls	r2, r3, #31
 80066dc:	d423      	bmi.n	8006726 <__lo0bits+0x56>
 80066de:	0798      	lsls	r0, r3, #30
 80066e0:	bf49      	itett	mi
 80066e2:	085b      	lsrmi	r3, r3, #1
 80066e4:	089b      	lsrpl	r3, r3, #2
 80066e6:	2001      	movmi	r0, #1
 80066e8:	600b      	strmi	r3, [r1, #0]
 80066ea:	bf5c      	itt	pl
 80066ec:	600b      	strpl	r3, [r1, #0]
 80066ee:	2002      	movpl	r0, #2
 80066f0:	4770      	bx	lr
 80066f2:	b298      	uxth	r0, r3
 80066f4:	b9a8      	cbnz	r0, 8006722 <__lo0bits+0x52>
 80066f6:	0c1b      	lsrs	r3, r3, #16
 80066f8:	2010      	movs	r0, #16
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	b90a      	cbnz	r2, 8006702 <__lo0bits+0x32>
 80066fe:	3008      	adds	r0, #8
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	071a      	lsls	r2, r3, #28
 8006704:	bf04      	itt	eq
 8006706:	091b      	lsreq	r3, r3, #4
 8006708:	3004      	addeq	r0, #4
 800670a:	079a      	lsls	r2, r3, #30
 800670c:	bf04      	itt	eq
 800670e:	089b      	lsreq	r3, r3, #2
 8006710:	3002      	addeq	r0, #2
 8006712:	07da      	lsls	r2, r3, #31
 8006714:	d403      	bmi.n	800671e <__lo0bits+0x4e>
 8006716:	085b      	lsrs	r3, r3, #1
 8006718:	f100 0001 	add.w	r0, r0, #1
 800671c:	d005      	beq.n	800672a <__lo0bits+0x5a>
 800671e:	600b      	str	r3, [r1, #0]
 8006720:	4770      	bx	lr
 8006722:	4610      	mov	r0, r2
 8006724:	e7e9      	b.n	80066fa <__lo0bits+0x2a>
 8006726:	2000      	movs	r0, #0
 8006728:	4770      	bx	lr
 800672a:	2020      	movs	r0, #32
 800672c:	4770      	bx	lr
	...

08006730 <__i2b>:
 8006730:	b510      	push	{r4, lr}
 8006732:	460c      	mov	r4, r1
 8006734:	2101      	movs	r1, #1
 8006736:	f7ff ff03 	bl	8006540 <_Balloc>
 800673a:	4602      	mov	r2, r0
 800673c:	b928      	cbnz	r0, 800674a <__i2b+0x1a>
 800673e:	4b05      	ldr	r3, [pc, #20]	; (8006754 <__i2b+0x24>)
 8006740:	4805      	ldr	r0, [pc, #20]	; (8006758 <__i2b+0x28>)
 8006742:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006746:	f000 fbf1 	bl	8006f2c <__assert_func>
 800674a:	2301      	movs	r3, #1
 800674c:	6144      	str	r4, [r0, #20]
 800674e:	6103      	str	r3, [r0, #16]
 8006750:	bd10      	pop	{r4, pc}
 8006752:	bf00      	nop
 8006754:	080082d3 	.word	0x080082d3
 8006758:	080082e4 	.word	0x080082e4

0800675c <__multiply>:
 800675c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006760:	4691      	mov	r9, r2
 8006762:	690a      	ldr	r2, [r1, #16]
 8006764:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006768:	429a      	cmp	r2, r3
 800676a:	bfb8      	it	lt
 800676c:	460b      	movlt	r3, r1
 800676e:	460c      	mov	r4, r1
 8006770:	bfbc      	itt	lt
 8006772:	464c      	movlt	r4, r9
 8006774:	4699      	movlt	r9, r3
 8006776:	6927      	ldr	r7, [r4, #16]
 8006778:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800677c:	68a3      	ldr	r3, [r4, #8]
 800677e:	6861      	ldr	r1, [r4, #4]
 8006780:	eb07 060a 	add.w	r6, r7, sl
 8006784:	42b3      	cmp	r3, r6
 8006786:	b085      	sub	sp, #20
 8006788:	bfb8      	it	lt
 800678a:	3101      	addlt	r1, #1
 800678c:	f7ff fed8 	bl	8006540 <_Balloc>
 8006790:	b930      	cbnz	r0, 80067a0 <__multiply+0x44>
 8006792:	4602      	mov	r2, r0
 8006794:	4b44      	ldr	r3, [pc, #272]	; (80068a8 <__multiply+0x14c>)
 8006796:	4845      	ldr	r0, [pc, #276]	; (80068ac <__multiply+0x150>)
 8006798:	f240 115d 	movw	r1, #349	; 0x15d
 800679c:	f000 fbc6 	bl	8006f2c <__assert_func>
 80067a0:	f100 0514 	add.w	r5, r0, #20
 80067a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067a8:	462b      	mov	r3, r5
 80067aa:	2200      	movs	r2, #0
 80067ac:	4543      	cmp	r3, r8
 80067ae:	d321      	bcc.n	80067f4 <__multiply+0x98>
 80067b0:	f104 0314 	add.w	r3, r4, #20
 80067b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80067b8:	f109 0314 	add.w	r3, r9, #20
 80067bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80067c0:	9202      	str	r2, [sp, #8]
 80067c2:	1b3a      	subs	r2, r7, r4
 80067c4:	3a15      	subs	r2, #21
 80067c6:	f022 0203 	bic.w	r2, r2, #3
 80067ca:	3204      	adds	r2, #4
 80067cc:	f104 0115 	add.w	r1, r4, #21
 80067d0:	428f      	cmp	r7, r1
 80067d2:	bf38      	it	cc
 80067d4:	2204      	movcc	r2, #4
 80067d6:	9201      	str	r2, [sp, #4]
 80067d8:	9a02      	ldr	r2, [sp, #8]
 80067da:	9303      	str	r3, [sp, #12]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d80c      	bhi.n	80067fa <__multiply+0x9e>
 80067e0:	2e00      	cmp	r6, #0
 80067e2:	dd03      	ble.n	80067ec <__multiply+0x90>
 80067e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d05a      	beq.n	80068a2 <__multiply+0x146>
 80067ec:	6106      	str	r6, [r0, #16]
 80067ee:	b005      	add	sp, #20
 80067f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f4:	f843 2b04 	str.w	r2, [r3], #4
 80067f8:	e7d8      	b.n	80067ac <__multiply+0x50>
 80067fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80067fe:	f1ba 0f00 	cmp.w	sl, #0
 8006802:	d024      	beq.n	800684e <__multiply+0xf2>
 8006804:	f104 0e14 	add.w	lr, r4, #20
 8006808:	46a9      	mov	r9, r5
 800680a:	f04f 0c00 	mov.w	ip, #0
 800680e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006812:	f8d9 1000 	ldr.w	r1, [r9]
 8006816:	fa1f fb82 	uxth.w	fp, r2
 800681a:	b289      	uxth	r1, r1
 800681c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006820:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006824:	f8d9 2000 	ldr.w	r2, [r9]
 8006828:	4461      	add	r1, ip
 800682a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800682e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006836:	b289      	uxth	r1, r1
 8006838:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800683c:	4577      	cmp	r7, lr
 800683e:	f849 1b04 	str.w	r1, [r9], #4
 8006842:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006846:	d8e2      	bhi.n	800680e <__multiply+0xb2>
 8006848:	9a01      	ldr	r2, [sp, #4]
 800684a:	f845 c002 	str.w	ip, [r5, r2]
 800684e:	9a03      	ldr	r2, [sp, #12]
 8006850:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006854:	3304      	adds	r3, #4
 8006856:	f1b9 0f00 	cmp.w	r9, #0
 800685a:	d020      	beq.n	800689e <__multiply+0x142>
 800685c:	6829      	ldr	r1, [r5, #0]
 800685e:	f104 0c14 	add.w	ip, r4, #20
 8006862:	46ae      	mov	lr, r5
 8006864:	f04f 0a00 	mov.w	sl, #0
 8006868:	f8bc b000 	ldrh.w	fp, [ip]
 800686c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006870:	fb09 220b 	mla	r2, r9, fp, r2
 8006874:	4492      	add	sl, r2
 8006876:	b289      	uxth	r1, r1
 8006878:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800687c:	f84e 1b04 	str.w	r1, [lr], #4
 8006880:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006884:	f8be 1000 	ldrh.w	r1, [lr]
 8006888:	0c12      	lsrs	r2, r2, #16
 800688a:	fb09 1102 	mla	r1, r9, r2, r1
 800688e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006892:	4567      	cmp	r7, ip
 8006894:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006898:	d8e6      	bhi.n	8006868 <__multiply+0x10c>
 800689a:	9a01      	ldr	r2, [sp, #4]
 800689c:	50a9      	str	r1, [r5, r2]
 800689e:	3504      	adds	r5, #4
 80068a0:	e79a      	b.n	80067d8 <__multiply+0x7c>
 80068a2:	3e01      	subs	r6, #1
 80068a4:	e79c      	b.n	80067e0 <__multiply+0x84>
 80068a6:	bf00      	nop
 80068a8:	080082d3 	.word	0x080082d3
 80068ac:	080082e4 	.word	0x080082e4

080068b0 <__pow5mult>:
 80068b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b4:	4615      	mov	r5, r2
 80068b6:	f012 0203 	ands.w	r2, r2, #3
 80068ba:	4606      	mov	r6, r0
 80068bc:	460f      	mov	r7, r1
 80068be:	d007      	beq.n	80068d0 <__pow5mult+0x20>
 80068c0:	4c25      	ldr	r4, [pc, #148]	; (8006958 <__pow5mult+0xa8>)
 80068c2:	3a01      	subs	r2, #1
 80068c4:	2300      	movs	r3, #0
 80068c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068ca:	f7ff fe9b 	bl	8006604 <__multadd>
 80068ce:	4607      	mov	r7, r0
 80068d0:	10ad      	asrs	r5, r5, #2
 80068d2:	d03d      	beq.n	8006950 <__pow5mult+0xa0>
 80068d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068d6:	b97c      	cbnz	r4, 80068f8 <__pow5mult+0x48>
 80068d8:	2010      	movs	r0, #16
 80068da:	f7fe f9f3 	bl	8004cc4 <malloc>
 80068de:	4602      	mov	r2, r0
 80068e0:	6270      	str	r0, [r6, #36]	; 0x24
 80068e2:	b928      	cbnz	r0, 80068f0 <__pow5mult+0x40>
 80068e4:	4b1d      	ldr	r3, [pc, #116]	; (800695c <__pow5mult+0xac>)
 80068e6:	481e      	ldr	r0, [pc, #120]	; (8006960 <__pow5mult+0xb0>)
 80068e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068ec:	f000 fb1e 	bl	8006f2c <__assert_func>
 80068f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068f4:	6004      	str	r4, [r0, #0]
 80068f6:	60c4      	str	r4, [r0, #12]
 80068f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006900:	b94c      	cbnz	r4, 8006916 <__pow5mult+0x66>
 8006902:	f240 2171 	movw	r1, #625	; 0x271
 8006906:	4630      	mov	r0, r6
 8006908:	f7ff ff12 	bl	8006730 <__i2b>
 800690c:	2300      	movs	r3, #0
 800690e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006912:	4604      	mov	r4, r0
 8006914:	6003      	str	r3, [r0, #0]
 8006916:	f04f 0900 	mov.w	r9, #0
 800691a:	07eb      	lsls	r3, r5, #31
 800691c:	d50a      	bpl.n	8006934 <__pow5mult+0x84>
 800691e:	4639      	mov	r1, r7
 8006920:	4622      	mov	r2, r4
 8006922:	4630      	mov	r0, r6
 8006924:	f7ff ff1a 	bl	800675c <__multiply>
 8006928:	4639      	mov	r1, r7
 800692a:	4680      	mov	r8, r0
 800692c:	4630      	mov	r0, r6
 800692e:	f7ff fe47 	bl	80065c0 <_Bfree>
 8006932:	4647      	mov	r7, r8
 8006934:	106d      	asrs	r5, r5, #1
 8006936:	d00b      	beq.n	8006950 <__pow5mult+0xa0>
 8006938:	6820      	ldr	r0, [r4, #0]
 800693a:	b938      	cbnz	r0, 800694c <__pow5mult+0x9c>
 800693c:	4622      	mov	r2, r4
 800693e:	4621      	mov	r1, r4
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff ff0b 	bl	800675c <__multiply>
 8006946:	6020      	str	r0, [r4, #0]
 8006948:	f8c0 9000 	str.w	r9, [r0]
 800694c:	4604      	mov	r4, r0
 800694e:	e7e4      	b.n	800691a <__pow5mult+0x6a>
 8006950:	4638      	mov	r0, r7
 8006952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006956:	bf00      	nop
 8006958:	08008430 	.word	0x08008430
 800695c:	08008261 	.word	0x08008261
 8006960:	080082e4 	.word	0x080082e4

08006964 <__lshift>:
 8006964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	460c      	mov	r4, r1
 800696a:	6849      	ldr	r1, [r1, #4]
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006972:	68a3      	ldr	r3, [r4, #8]
 8006974:	4607      	mov	r7, r0
 8006976:	4691      	mov	r9, r2
 8006978:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800697c:	f108 0601 	add.w	r6, r8, #1
 8006980:	42b3      	cmp	r3, r6
 8006982:	db0b      	blt.n	800699c <__lshift+0x38>
 8006984:	4638      	mov	r0, r7
 8006986:	f7ff fddb 	bl	8006540 <_Balloc>
 800698a:	4605      	mov	r5, r0
 800698c:	b948      	cbnz	r0, 80069a2 <__lshift+0x3e>
 800698e:	4602      	mov	r2, r0
 8006990:	4b2a      	ldr	r3, [pc, #168]	; (8006a3c <__lshift+0xd8>)
 8006992:	482b      	ldr	r0, [pc, #172]	; (8006a40 <__lshift+0xdc>)
 8006994:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006998:	f000 fac8 	bl	8006f2c <__assert_func>
 800699c:	3101      	adds	r1, #1
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	e7ee      	b.n	8006980 <__lshift+0x1c>
 80069a2:	2300      	movs	r3, #0
 80069a4:	f100 0114 	add.w	r1, r0, #20
 80069a8:	f100 0210 	add.w	r2, r0, #16
 80069ac:	4618      	mov	r0, r3
 80069ae:	4553      	cmp	r3, sl
 80069b0:	db37      	blt.n	8006a22 <__lshift+0xbe>
 80069b2:	6920      	ldr	r0, [r4, #16]
 80069b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069b8:	f104 0314 	add.w	r3, r4, #20
 80069bc:	f019 091f 	ands.w	r9, r9, #31
 80069c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80069c8:	d02f      	beq.n	8006a2a <__lshift+0xc6>
 80069ca:	f1c9 0e20 	rsb	lr, r9, #32
 80069ce:	468a      	mov	sl, r1
 80069d0:	f04f 0c00 	mov.w	ip, #0
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	fa02 f209 	lsl.w	r2, r2, r9
 80069da:	ea42 020c 	orr.w	r2, r2, ip
 80069de:	f84a 2b04 	str.w	r2, [sl], #4
 80069e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e6:	4298      	cmp	r0, r3
 80069e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80069ec:	d8f2      	bhi.n	80069d4 <__lshift+0x70>
 80069ee:	1b03      	subs	r3, r0, r4
 80069f0:	3b15      	subs	r3, #21
 80069f2:	f023 0303 	bic.w	r3, r3, #3
 80069f6:	3304      	adds	r3, #4
 80069f8:	f104 0215 	add.w	r2, r4, #21
 80069fc:	4290      	cmp	r0, r2
 80069fe:	bf38      	it	cc
 8006a00:	2304      	movcc	r3, #4
 8006a02:	f841 c003 	str.w	ip, [r1, r3]
 8006a06:	f1bc 0f00 	cmp.w	ip, #0
 8006a0a:	d001      	beq.n	8006a10 <__lshift+0xac>
 8006a0c:	f108 0602 	add.w	r6, r8, #2
 8006a10:	3e01      	subs	r6, #1
 8006a12:	4638      	mov	r0, r7
 8006a14:	612e      	str	r6, [r5, #16]
 8006a16:	4621      	mov	r1, r4
 8006a18:	f7ff fdd2 	bl	80065c0 <_Bfree>
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a26:	3301      	adds	r3, #1
 8006a28:	e7c1      	b.n	80069ae <__lshift+0x4a>
 8006a2a:	3904      	subs	r1, #4
 8006a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a34:	4298      	cmp	r0, r3
 8006a36:	d8f9      	bhi.n	8006a2c <__lshift+0xc8>
 8006a38:	e7ea      	b.n	8006a10 <__lshift+0xac>
 8006a3a:	bf00      	nop
 8006a3c:	080082d3 	.word	0x080082d3
 8006a40:	080082e4 	.word	0x080082e4

08006a44 <__mcmp>:
 8006a44:	b530      	push	{r4, r5, lr}
 8006a46:	6902      	ldr	r2, [r0, #16]
 8006a48:	690c      	ldr	r4, [r1, #16]
 8006a4a:	1b12      	subs	r2, r2, r4
 8006a4c:	d10e      	bne.n	8006a6c <__mcmp+0x28>
 8006a4e:	f100 0314 	add.w	r3, r0, #20
 8006a52:	3114      	adds	r1, #20
 8006a54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a64:	42a5      	cmp	r5, r4
 8006a66:	d003      	beq.n	8006a70 <__mcmp+0x2c>
 8006a68:	d305      	bcc.n	8006a76 <__mcmp+0x32>
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	bd30      	pop	{r4, r5, pc}
 8006a70:	4283      	cmp	r3, r0
 8006a72:	d3f3      	bcc.n	8006a5c <__mcmp+0x18>
 8006a74:	e7fa      	b.n	8006a6c <__mcmp+0x28>
 8006a76:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7a:	e7f7      	b.n	8006a6c <__mcmp+0x28>

08006a7c <__mdiff>:
 8006a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a80:	460c      	mov	r4, r1
 8006a82:	4606      	mov	r6, r0
 8006a84:	4611      	mov	r1, r2
 8006a86:	4620      	mov	r0, r4
 8006a88:	4690      	mov	r8, r2
 8006a8a:	f7ff ffdb 	bl	8006a44 <__mcmp>
 8006a8e:	1e05      	subs	r5, r0, #0
 8006a90:	d110      	bne.n	8006ab4 <__mdiff+0x38>
 8006a92:	4629      	mov	r1, r5
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7ff fd53 	bl	8006540 <_Balloc>
 8006a9a:	b930      	cbnz	r0, 8006aaa <__mdiff+0x2e>
 8006a9c:	4b3a      	ldr	r3, [pc, #232]	; (8006b88 <__mdiff+0x10c>)
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	f240 2132 	movw	r1, #562	; 0x232
 8006aa4:	4839      	ldr	r0, [pc, #228]	; (8006b8c <__mdiff+0x110>)
 8006aa6:	f000 fa41 	bl	8006f2c <__assert_func>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	bfa4      	itt	ge
 8006ab6:	4643      	movge	r3, r8
 8006ab8:	46a0      	movge	r8, r4
 8006aba:	4630      	mov	r0, r6
 8006abc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ac0:	bfa6      	itte	ge
 8006ac2:	461c      	movge	r4, r3
 8006ac4:	2500      	movge	r5, #0
 8006ac6:	2501      	movlt	r5, #1
 8006ac8:	f7ff fd3a 	bl	8006540 <_Balloc>
 8006acc:	b920      	cbnz	r0, 8006ad8 <__mdiff+0x5c>
 8006ace:	4b2e      	ldr	r3, [pc, #184]	; (8006b88 <__mdiff+0x10c>)
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ad6:	e7e5      	b.n	8006aa4 <__mdiff+0x28>
 8006ad8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006adc:	6926      	ldr	r6, [r4, #16]
 8006ade:	60c5      	str	r5, [r0, #12]
 8006ae0:	f104 0914 	add.w	r9, r4, #20
 8006ae4:	f108 0514 	add.w	r5, r8, #20
 8006ae8:	f100 0e14 	add.w	lr, r0, #20
 8006aec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006af0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006af4:	f108 0210 	add.w	r2, r8, #16
 8006af8:	46f2      	mov	sl, lr
 8006afa:	2100      	movs	r1, #0
 8006afc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b04:	fa1f f883 	uxth.w	r8, r3
 8006b08:	fa11 f18b 	uxtah	r1, r1, fp
 8006b0c:	0c1b      	lsrs	r3, r3, #16
 8006b0e:	eba1 0808 	sub.w	r8, r1, r8
 8006b12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006b1a:	fa1f f888 	uxth.w	r8, r8
 8006b1e:	1419      	asrs	r1, r3, #16
 8006b20:	454e      	cmp	r6, r9
 8006b22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b26:	f84a 3b04 	str.w	r3, [sl], #4
 8006b2a:	d8e7      	bhi.n	8006afc <__mdiff+0x80>
 8006b2c:	1b33      	subs	r3, r6, r4
 8006b2e:	3b15      	subs	r3, #21
 8006b30:	f023 0303 	bic.w	r3, r3, #3
 8006b34:	3304      	adds	r3, #4
 8006b36:	3415      	adds	r4, #21
 8006b38:	42a6      	cmp	r6, r4
 8006b3a:	bf38      	it	cc
 8006b3c:	2304      	movcc	r3, #4
 8006b3e:	441d      	add	r5, r3
 8006b40:	4473      	add	r3, lr
 8006b42:	469e      	mov	lr, r3
 8006b44:	462e      	mov	r6, r5
 8006b46:	4566      	cmp	r6, ip
 8006b48:	d30e      	bcc.n	8006b68 <__mdiff+0xec>
 8006b4a:	f10c 0203 	add.w	r2, ip, #3
 8006b4e:	1b52      	subs	r2, r2, r5
 8006b50:	f022 0203 	bic.w	r2, r2, #3
 8006b54:	3d03      	subs	r5, #3
 8006b56:	45ac      	cmp	ip, r5
 8006b58:	bf38      	it	cc
 8006b5a:	2200      	movcc	r2, #0
 8006b5c:	441a      	add	r2, r3
 8006b5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006b62:	b17b      	cbz	r3, 8006b84 <__mdiff+0x108>
 8006b64:	6107      	str	r7, [r0, #16]
 8006b66:	e7a3      	b.n	8006ab0 <__mdiff+0x34>
 8006b68:	f856 8b04 	ldr.w	r8, [r6], #4
 8006b6c:	fa11 f288 	uxtah	r2, r1, r8
 8006b70:	1414      	asrs	r4, r2, #16
 8006b72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b76:	b292      	uxth	r2, r2
 8006b78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b7c:	f84e 2b04 	str.w	r2, [lr], #4
 8006b80:	1421      	asrs	r1, r4, #16
 8006b82:	e7e0      	b.n	8006b46 <__mdiff+0xca>
 8006b84:	3f01      	subs	r7, #1
 8006b86:	e7ea      	b.n	8006b5e <__mdiff+0xe2>
 8006b88:	080082d3 	.word	0x080082d3
 8006b8c:	080082e4 	.word	0x080082e4

08006b90 <__d2b>:
 8006b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b94:	4689      	mov	r9, r1
 8006b96:	2101      	movs	r1, #1
 8006b98:	ec57 6b10 	vmov	r6, r7, d0
 8006b9c:	4690      	mov	r8, r2
 8006b9e:	f7ff fccf 	bl	8006540 <_Balloc>
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	b930      	cbnz	r0, 8006bb4 <__d2b+0x24>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <__d2b+0xb0>)
 8006baa:	4826      	ldr	r0, [pc, #152]	; (8006c44 <__d2b+0xb4>)
 8006bac:	f240 310a 	movw	r1, #778	; 0x30a
 8006bb0:	f000 f9bc 	bl	8006f2c <__assert_func>
 8006bb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006bb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bbc:	bb35      	cbnz	r5, 8006c0c <__d2b+0x7c>
 8006bbe:	2e00      	cmp	r6, #0
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	d028      	beq.n	8006c16 <__d2b+0x86>
 8006bc4:	4668      	mov	r0, sp
 8006bc6:	9600      	str	r6, [sp, #0]
 8006bc8:	f7ff fd82 	bl	80066d0 <__lo0bits>
 8006bcc:	9900      	ldr	r1, [sp, #0]
 8006bce:	b300      	cbz	r0, 8006c12 <__d2b+0x82>
 8006bd0:	9a01      	ldr	r2, [sp, #4]
 8006bd2:	f1c0 0320 	rsb	r3, r0, #32
 8006bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	40c2      	lsrs	r2, r0
 8006bde:	6163      	str	r3, [r4, #20]
 8006be0:	9201      	str	r2, [sp, #4]
 8006be2:	9b01      	ldr	r3, [sp, #4]
 8006be4:	61a3      	str	r3, [r4, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bf14      	ite	ne
 8006bea:	2202      	movne	r2, #2
 8006bec:	2201      	moveq	r2, #1
 8006bee:	6122      	str	r2, [r4, #16]
 8006bf0:	b1d5      	cbz	r5, 8006c28 <__d2b+0x98>
 8006bf2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006bf6:	4405      	add	r5, r0
 8006bf8:	f8c9 5000 	str.w	r5, [r9]
 8006bfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c00:	f8c8 0000 	str.w	r0, [r8]
 8006c04:	4620      	mov	r0, r4
 8006c06:	b003      	add	sp, #12
 8006c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c10:	e7d5      	b.n	8006bbe <__d2b+0x2e>
 8006c12:	6161      	str	r1, [r4, #20]
 8006c14:	e7e5      	b.n	8006be2 <__d2b+0x52>
 8006c16:	a801      	add	r0, sp, #4
 8006c18:	f7ff fd5a 	bl	80066d0 <__lo0bits>
 8006c1c:	9b01      	ldr	r3, [sp, #4]
 8006c1e:	6163      	str	r3, [r4, #20]
 8006c20:	2201      	movs	r2, #1
 8006c22:	6122      	str	r2, [r4, #16]
 8006c24:	3020      	adds	r0, #32
 8006c26:	e7e3      	b.n	8006bf0 <__d2b+0x60>
 8006c28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c30:	f8c9 0000 	str.w	r0, [r9]
 8006c34:	6918      	ldr	r0, [r3, #16]
 8006c36:	f7ff fd2b 	bl	8006690 <__hi0bits>
 8006c3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c3e:	e7df      	b.n	8006c00 <__d2b+0x70>
 8006c40:	080082d3 	.word	0x080082d3
 8006c44:	080082e4 	.word	0x080082e4

08006c48 <_calloc_r>:
 8006c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c4a:	fba1 2402 	umull	r2, r4, r1, r2
 8006c4e:	b94c      	cbnz	r4, 8006c64 <_calloc_r+0x1c>
 8006c50:	4611      	mov	r1, r2
 8006c52:	9201      	str	r2, [sp, #4]
 8006c54:	f7fe f8b2 	bl	8004dbc <_malloc_r>
 8006c58:	9a01      	ldr	r2, [sp, #4]
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	b930      	cbnz	r0, 8006c6c <_calloc_r+0x24>
 8006c5e:	4628      	mov	r0, r5
 8006c60:	b003      	add	sp, #12
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	220c      	movs	r2, #12
 8006c66:	6002      	str	r2, [r0, #0]
 8006c68:	2500      	movs	r5, #0
 8006c6a:	e7f8      	b.n	8006c5e <_calloc_r+0x16>
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	f7fe f831 	bl	8004cd4 <memset>
 8006c72:	e7f4      	b.n	8006c5e <_calloc_r+0x16>

08006c74 <__ssputs_r>:
 8006c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c78:	688e      	ldr	r6, [r1, #8]
 8006c7a:	429e      	cmp	r6, r3
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	4690      	mov	r8, r2
 8006c82:	461f      	mov	r7, r3
 8006c84:	d838      	bhi.n	8006cf8 <__ssputs_r+0x84>
 8006c86:	898a      	ldrh	r2, [r1, #12]
 8006c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c8c:	d032      	beq.n	8006cf4 <__ssputs_r+0x80>
 8006c8e:	6825      	ldr	r5, [r4, #0]
 8006c90:	6909      	ldr	r1, [r1, #16]
 8006c92:	eba5 0901 	sub.w	r9, r5, r1
 8006c96:	6965      	ldr	r5, [r4, #20]
 8006c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	444b      	add	r3, r9
 8006ca4:	106d      	asrs	r5, r5, #1
 8006ca6:	429d      	cmp	r5, r3
 8006ca8:	bf38      	it	cc
 8006caa:	461d      	movcc	r5, r3
 8006cac:	0553      	lsls	r3, r2, #21
 8006cae:	d531      	bpl.n	8006d14 <__ssputs_r+0xa0>
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	f7fe f883 	bl	8004dbc <_malloc_r>
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	b950      	cbnz	r0, 8006cd0 <__ssputs_r+0x5c>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	f8ca 3000 	str.w	r3, [sl]
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd0:	6921      	ldr	r1, [r4, #16]
 8006cd2:	464a      	mov	r2, r9
 8006cd4:	f7ff fc1a 	bl	800650c <memcpy>
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce2:	81a3      	strh	r3, [r4, #12]
 8006ce4:	6126      	str	r6, [r4, #16]
 8006ce6:	6165      	str	r5, [r4, #20]
 8006ce8:	444e      	add	r6, r9
 8006cea:	eba5 0509 	sub.w	r5, r5, r9
 8006cee:	6026      	str	r6, [r4, #0]
 8006cf0:	60a5      	str	r5, [r4, #8]
 8006cf2:	463e      	mov	r6, r7
 8006cf4:	42be      	cmp	r6, r7
 8006cf6:	d900      	bls.n	8006cfa <__ssputs_r+0x86>
 8006cf8:	463e      	mov	r6, r7
 8006cfa:	6820      	ldr	r0, [r4, #0]
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	4641      	mov	r1, r8
 8006d00:	f000 f959 	bl	8006fb6 <memmove>
 8006d04:	68a3      	ldr	r3, [r4, #8]
 8006d06:	1b9b      	subs	r3, r3, r6
 8006d08:	60a3      	str	r3, [r4, #8]
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	4433      	add	r3, r6
 8006d0e:	6023      	str	r3, [r4, #0]
 8006d10:	2000      	movs	r0, #0
 8006d12:	e7db      	b.n	8006ccc <__ssputs_r+0x58>
 8006d14:	462a      	mov	r2, r5
 8006d16:	f000 f968 	bl	8006fea <_realloc_r>
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d1e1      	bne.n	8006ce4 <__ssputs_r+0x70>
 8006d20:	6921      	ldr	r1, [r4, #16]
 8006d22:	4650      	mov	r0, sl
 8006d24:	f7fd ffde 	bl	8004ce4 <_free_r>
 8006d28:	e7c7      	b.n	8006cba <__ssputs_r+0x46>
	...

08006d2c <_svfiprintf_r>:
 8006d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	4698      	mov	r8, r3
 8006d32:	898b      	ldrh	r3, [r1, #12]
 8006d34:	061b      	lsls	r3, r3, #24
 8006d36:	b09d      	sub	sp, #116	; 0x74
 8006d38:	4607      	mov	r7, r0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	4614      	mov	r4, r2
 8006d3e:	d50e      	bpl.n	8006d5e <_svfiprintf_r+0x32>
 8006d40:	690b      	ldr	r3, [r1, #16]
 8006d42:	b963      	cbnz	r3, 8006d5e <_svfiprintf_r+0x32>
 8006d44:	2140      	movs	r1, #64	; 0x40
 8006d46:	f7fe f839 	bl	8004dbc <_malloc_r>
 8006d4a:	6028      	str	r0, [r5, #0]
 8006d4c:	6128      	str	r0, [r5, #16]
 8006d4e:	b920      	cbnz	r0, 8006d5a <_svfiprintf_r+0x2e>
 8006d50:	230c      	movs	r3, #12
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
 8006d58:	e0d1      	b.n	8006efe <_svfiprintf_r+0x1d2>
 8006d5a:	2340      	movs	r3, #64	; 0x40
 8006d5c:	616b      	str	r3, [r5, #20]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	9309      	str	r3, [sp, #36]	; 0x24
 8006d62:	2320      	movs	r3, #32
 8006d64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d6c:	2330      	movs	r3, #48	; 0x30
 8006d6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f18 <_svfiprintf_r+0x1ec>
 8006d72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d76:	f04f 0901 	mov.w	r9, #1
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	469a      	mov	sl, r3
 8006d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d82:	b10a      	cbz	r2, 8006d88 <_svfiprintf_r+0x5c>
 8006d84:	2a25      	cmp	r2, #37	; 0x25
 8006d86:	d1f9      	bne.n	8006d7c <_svfiprintf_r+0x50>
 8006d88:	ebba 0b04 	subs.w	fp, sl, r4
 8006d8c:	d00b      	beq.n	8006da6 <_svfiprintf_r+0x7a>
 8006d8e:	465b      	mov	r3, fp
 8006d90:	4622      	mov	r2, r4
 8006d92:	4629      	mov	r1, r5
 8006d94:	4638      	mov	r0, r7
 8006d96:	f7ff ff6d 	bl	8006c74 <__ssputs_r>
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	f000 80aa 	beq.w	8006ef4 <_svfiprintf_r+0x1c8>
 8006da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da2:	445a      	add	r2, fp
 8006da4:	9209      	str	r2, [sp, #36]	; 0x24
 8006da6:	f89a 3000 	ldrb.w	r3, [sl]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80a2 	beq.w	8006ef4 <_svfiprintf_r+0x1c8>
 8006db0:	2300      	movs	r3, #0
 8006db2:	f04f 32ff 	mov.w	r2, #4294967295
 8006db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dba:	f10a 0a01 	add.w	sl, sl, #1
 8006dbe:	9304      	str	r3, [sp, #16]
 8006dc0:	9307      	str	r3, [sp, #28]
 8006dc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8006dc8:	4654      	mov	r4, sl
 8006dca:	2205      	movs	r2, #5
 8006dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd0:	4851      	ldr	r0, [pc, #324]	; (8006f18 <_svfiprintf_r+0x1ec>)
 8006dd2:	f7f9 fa0d 	bl	80001f0 <memchr>
 8006dd6:	9a04      	ldr	r2, [sp, #16]
 8006dd8:	b9d8      	cbnz	r0, 8006e12 <_svfiprintf_r+0xe6>
 8006dda:	06d0      	lsls	r0, r2, #27
 8006ddc:	bf44      	itt	mi
 8006dde:	2320      	movmi	r3, #32
 8006de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006de4:	0711      	lsls	r1, r2, #28
 8006de6:	bf44      	itt	mi
 8006de8:	232b      	movmi	r3, #43	; 0x2b
 8006dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dee:	f89a 3000 	ldrb.w	r3, [sl]
 8006df2:	2b2a      	cmp	r3, #42	; 0x2a
 8006df4:	d015      	beq.n	8006e22 <_svfiprintf_r+0xf6>
 8006df6:	9a07      	ldr	r2, [sp, #28]
 8006df8:	4654      	mov	r4, sl
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	f04f 0c0a 	mov.w	ip, #10
 8006e00:	4621      	mov	r1, r4
 8006e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e06:	3b30      	subs	r3, #48	; 0x30
 8006e08:	2b09      	cmp	r3, #9
 8006e0a:	d94e      	bls.n	8006eaa <_svfiprintf_r+0x17e>
 8006e0c:	b1b0      	cbz	r0, 8006e3c <_svfiprintf_r+0x110>
 8006e0e:	9207      	str	r2, [sp, #28]
 8006e10:	e014      	b.n	8006e3c <_svfiprintf_r+0x110>
 8006e12:	eba0 0308 	sub.w	r3, r0, r8
 8006e16:	fa09 f303 	lsl.w	r3, r9, r3
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	46a2      	mov	sl, r4
 8006e20:	e7d2      	b.n	8006dc8 <_svfiprintf_r+0x9c>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	1d19      	adds	r1, r3, #4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	9103      	str	r1, [sp, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	bfbb      	ittet	lt
 8006e2e:	425b      	neglt	r3, r3
 8006e30:	f042 0202 	orrlt.w	r2, r2, #2
 8006e34:	9307      	strge	r3, [sp, #28]
 8006e36:	9307      	strlt	r3, [sp, #28]
 8006e38:	bfb8      	it	lt
 8006e3a:	9204      	strlt	r2, [sp, #16]
 8006e3c:	7823      	ldrb	r3, [r4, #0]
 8006e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e40:	d10c      	bne.n	8006e5c <_svfiprintf_r+0x130>
 8006e42:	7863      	ldrb	r3, [r4, #1]
 8006e44:	2b2a      	cmp	r3, #42	; 0x2a
 8006e46:	d135      	bne.n	8006eb4 <_svfiprintf_r+0x188>
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	9203      	str	r2, [sp, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bfb8      	it	lt
 8006e54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e58:	3402      	adds	r4, #2
 8006e5a:	9305      	str	r3, [sp, #20]
 8006e5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f28 <_svfiprintf_r+0x1fc>
 8006e60:	7821      	ldrb	r1, [r4, #0]
 8006e62:	2203      	movs	r2, #3
 8006e64:	4650      	mov	r0, sl
 8006e66:	f7f9 f9c3 	bl	80001f0 <memchr>
 8006e6a:	b140      	cbz	r0, 8006e7e <_svfiprintf_r+0x152>
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	eba0 000a 	sub.w	r0, r0, sl
 8006e72:	fa03 f000 	lsl.w	r0, r3, r0
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	4303      	orrs	r3, r0
 8006e7a:	3401      	adds	r4, #1
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e82:	4826      	ldr	r0, [pc, #152]	; (8006f1c <_svfiprintf_r+0x1f0>)
 8006e84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e88:	2206      	movs	r2, #6
 8006e8a:	f7f9 f9b1 	bl	80001f0 <memchr>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d038      	beq.n	8006f04 <_svfiprintf_r+0x1d8>
 8006e92:	4b23      	ldr	r3, [pc, #140]	; (8006f20 <_svfiprintf_r+0x1f4>)
 8006e94:	bb1b      	cbnz	r3, 8006ede <_svfiprintf_r+0x1b2>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	3307      	adds	r3, #7
 8006e9a:	f023 0307 	bic.w	r3, r3, #7
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	9303      	str	r3, [sp, #12]
 8006ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea4:	4433      	add	r3, r6
 8006ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea8:	e767      	b.n	8006d7a <_svfiprintf_r+0x4e>
 8006eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eae:	460c      	mov	r4, r1
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	e7a5      	b.n	8006e00 <_svfiprintf_r+0xd4>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	3401      	adds	r4, #1
 8006eb8:	9305      	str	r3, [sp, #20]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	f04f 0c0a 	mov.w	ip, #10
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ec6:	3a30      	subs	r2, #48	; 0x30
 8006ec8:	2a09      	cmp	r2, #9
 8006eca:	d903      	bls.n	8006ed4 <_svfiprintf_r+0x1a8>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0c5      	beq.n	8006e5c <_svfiprintf_r+0x130>
 8006ed0:	9105      	str	r1, [sp, #20]
 8006ed2:	e7c3      	b.n	8006e5c <_svfiprintf_r+0x130>
 8006ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ed8:	4604      	mov	r4, r0
 8006eda:	2301      	movs	r3, #1
 8006edc:	e7f0      	b.n	8006ec0 <_svfiprintf_r+0x194>
 8006ede:	ab03      	add	r3, sp, #12
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	462a      	mov	r2, r5
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <_svfiprintf_r+0x1f8>)
 8006ee6:	a904      	add	r1, sp, #16
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f7fe f87b 	bl	8004fe4 <_printf_float>
 8006eee:	1c42      	adds	r2, r0, #1
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	d1d6      	bne.n	8006ea2 <_svfiprintf_r+0x176>
 8006ef4:	89ab      	ldrh	r3, [r5, #12]
 8006ef6:	065b      	lsls	r3, r3, #25
 8006ef8:	f53f af2c 	bmi.w	8006d54 <_svfiprintf_r+0x28>
 8006efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006efe:	b01d      	add	sp, #116	; 0x74
 8006f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f04:	ab03      	add	r3, sp, #12
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	462a      	mov	r2, r5
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <_svfiprintf_r+0x1f8>)
 8006f0c:	a904      	add	r1, sp, #16
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f7fe fb0c 	bl	800552c <_printf_i>
 8006f14:	e7eb      	b.n	8006eee <_svfiprintf_r+0x1c2>
 8006f16:	bf00      	nop
 8006f18:	0800843c 	.word	0x0800843c
 8006f1c:	08008446 	.word	0x08008446
 8006f20:	08004fe5 	.word	0x08004fe5
 8006f24:	08006c75 	.word	0x08006c75
 8006f28:	08008442 	.word	0x08008442

08006f2c <__assert_func>:
 8006f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f2e:	4614      	mov	r4, r2
 8006f30:	461a      	mov	r2, r3
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <__assert_func+0x2c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4605      	mov	r5, r0
 8006f38:	68d8      	ldr	r0, [r3, #12]
 8006f3a:	b14c      	cbz	r4, 8006f50 <__assert_func+0x24>
 8006f3c:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <__assert_func+0x30>)
 8006f3e:	9100      	str	r1, [sp, #0]
 8006f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f44:	4906      	ldr	r1, [pc, #24]	; (8006f60 <__assert_func+0x34>)
 8006f46:	462b      	mov	r3, r5
 8006f48:	f000 f80e 	bl	8006f68 <fiprintf>
 8006f4c:	f000 faa4 	bl	8007498 <abort>
 8006f50:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <__assert_func+0x38>)
 8006f52:	461c      	mov	r4, r3
 8006f54:	e7f3      	b.n	8006f3e <__assert_func+0x12>
 8006f56:	bf00      	nop
 8006f58:	2000000c 	.word	0x2000000c
 8006f5c:	0800844d 	.word	0x0800844d
 8006f60:	0800845a 	.word	0x0800845a
 8006f64:	08008488 	.word	0x08008488

08006f68 <fiprintf>:
 8006f68:	b40e      	push	{r1, r2, r3}
 8006f6a:	b503      	push	{r0, r1, lr}
 8006f6c:	4601      	mov	r1, r0
 8006f6e:	ab03      	add	r3, sp, #12
 8006f70:	4805      	ldr	r0, [pc, #20]	; (8006f88 <fiprintf+0x20>)
 8006f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f76:	6800      	ldr	r0, [r0, #0]
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	f000 f88f 	bl	800709c <_vfiprintf_r>
 8006f7e:	b002      	add	sp, #8
 8006f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f84:	b003      	add	sp, #12
 8006f86:	4770      	bx	lr
 8006f88:	2000000c 	.word	0x2000000c

08006f8c <__retarget_lock_init_recursive>:
 8006f8c:	4770      	bx	lr

08006f8e <__retarget_lock_acquire_recursive>:
 8006f8e:	4770      	bx	lr

08006f90 <__retarget_lock_release_recursive>:
 8006f90:	4770      	bx	lr

08006f92 <__ascii_mbtowc>:
 8006f92:	b082      	sub	sp, #8
 8006f94:	b901      	cbnz	r1, 8006f98 <__ascii_mbtowc+0x6>
 8006f96:	a901      	add	r1, sp, #4
 8006f98:	b142      	cbz	r2, 8006fac <__ascii_mbtowc+0x1a>
 8006f9a:	b14b      	cbz	r3, 8006fb0 <__ascii_mbtowc+0x1e>
 8006f9c:	7813      	ldrb	r3, [r2, #0]
 8006f9e:	600b      	str	r3, [r1, #0]
 8006fa0:	7812      	ldrb	r2, [r2, #0]
 8006fa2:	1e10      	subs	r0, r2, #0
 8006fa4:	bf18      	it	ne
 8006fa6:	2001      	movne	r0, #1
 8006fa8:	b002      	add	sp, #8
 8006faa:	4770      	bx	lr
 8006fac:	4610      	mov	r0, r2
 8006fae:	e7fb      	b.n	8006fa8 <__ascii_mbtowc+0x16>
 8006fb0:	f06f 0001 	mvn.w	r0, #1
 8006fb4:	e7f8      	b.n	8006fa8 <__ascii_mbtowc+0x16>

08006fb6 <memmove>:
 8006fb6:	4288      	cmp	r0, r1
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	eb01 0402 	add.w	r4, r1, r2
 8006fbe:	d902      	bls.n	8006fc6 <memmove+0x10>
 8006fc0:	4284      	cmp	r4, r0
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	d807      	bhi.n	8006fd6 <memmove+0x20>
 8006fc6:	1e43      	subs	r3, r0, #1
 8006fc8:	42a1      	cmp	r1, r4
 8006fca:	d008      	beq.n	8006fde <memmove+0x28>
 8006fcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fd4:	e7f8      	b.n	8006fc8 <memmove+0x12>
 8006fd6:	4402      	add	r2, r0
 8006fd8:	4601      	mov	r1, r0
 8006fda:	428a      	cmp	r2, r1
 8006fdc:	d100      	bne.n	8006fe0 <memmove+0x2a>
 8006fde:	bd10      	pop	{r4, pc}
 8006fe0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fe4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fe8:	e7f7      	b.n	8006fda <memmove+0x24>

08006fea <_realloc_r>:
 8006fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fee:	4680      	mov	r8, r0
 8006ff0:	4614      	mov	r4, r2
 8006ff2:	460e      	mov	r6, r1
 8006ff4:	b921      	cbnz	r1, 8007000 <_realloc_r+0x16>
 8006ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	f7fd bede 	b.w	8004dbc <_malloc_r>
 8007000:	b92a      	cbnz	r2, 800700e <_realloc_r+0x24>
 8007002:	f7fd fe6f 	bl	8004ce4 <_free_r>
 8007006:	4625      	mov	r5, r4
 8007008:	4628      	mov	r0, r5
 800700a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700e:	f000 fc67 	bl	80078e0 <_malloc_usable_size_r>
 8007012:	4284      	cmp	r4, r0
 8007014:	4607      	mov	r7, r0
 8007016:	d802      	bhi.n	800701e <_realloc_r+0x34>
 8007018:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800701c:	d812      	bhi.n	8007044 <_realloc_r+0x5a>
 800701e:	4621      	mov	r1, r4
 8007020:	4640      	mov	r0, r8
 8007022:	f7fd fecb 	bl	8004dbc <_malloc_r>
 8007026:	4605      	mov	r5, r0
 8007028:	2800      	cmp	r0, #0
 800702a:	d0ed      	beq.n	8007008 <_realloc_r+0x1e>
 800702c:	42bc      	cmp	r4, r7
 800702e:	4622      	mov	r2, r4
 8007030:	4631      	mov	r1, r6
 8007032:	bf28      	it	cs
 8007034:	463a      	movcs	r2, r7
 8007036:	f7ff fa69 	bl	800650c <memcpy>
 800703a:	4631      	mov	r1, r6
 800703c:	4640      	mov	r0, r8
 800703e:	f7fd fe51 	bl	8004ce4 <_free_r>
 8007042:	e7e1      	b.n	8007008 <_realloc_r+0x1e>
 8007044:	4635      	mov	r5, r6
 8007046:	e7df      	b.n	8007008 <_realloc_r+0x1e>

08007048 <__sfputc_r>:
 8007048:	6893      	ldr	r3, [r2, #8]
 800704a:	3b01      	subs	r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	b410      	push	{r4}
 8007050:	6093      	str	r3, [r2, #8]
 8007052:	da08      	bge.n	8007066 <__sfputc_r+0x1e>
 8007054:	6994      	ldr	r4, [r2, #24]
 8007056:	42a3      	cmp	r3, r4
 8007058:	db01      	blt.n	800705e <__sfputc_r+0x16>
 800705a:	290a      	cmp	r1, #10
 800705c:	d103      	bne.n	8007066 <__sfputc_r+0x1e>
 800705e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007062:	f000 b94b 	b.w	80072fc <__swbuf_r>
 8007066:	6813      	ldr	r3, [r2, #0]
 8007068:	1c58      	adds	r0, r3, #1
 800706a:	6010      	str	r0, [r2, #0]
 800706c:	7019      	strb	r1, [r3, #0]
 800706e:	4608      	mov	r0, r1
 8007070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007074:	4770      	bx	lr

08007076 <__sfputs_r>:
 8007076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007078:	4606      	mov	r6, r0
 800707a:	460f      	mov	r7, r1
 800707c:	4614      	mov	r4, r2
 800707e:	18d5      	adds	r5, r2, r3
 8007080:	42ac      	cmp	r4, r5
 8007082:	d101      	bne.n	8007088 <__sfputs_r+0x12>
 8007084:	2000      	movs	r0, #0
 8007086:	e007      	b.n	8007098 <__sfputs_r+0x22>
 8007088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708c:	463a      	mov	r2, r7
 800708e:	4630      	mov	r0, r6
 8007090:	f7ff ffda 	bl	8007048 <__sfputc_r>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d1f3      	bne.n	8007080 <__sfputs_r+0xa>
 8007098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800709c <_vfiprintf_r>:
 800709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	460d      	mov	r5, r1
 80070a2:	b09d      	sub	sp, #116	; 0x74
 80070a4:	4614      	mov	r4, r2
 80070a6:	4698      	mov	r8, r3
 80070a8:	4606      	mov	r6, r0
 80070aa:	b118      	cbz	r0, 80070b4 <_vfiprintf_r+0x18>
 80070ac:	6983      	ldr	r3, [r0, #24]
 80070ae:	b90b      	cbnz	r3, 80070b4 <_vfiprintf_r+0x18>
 80070b0:	f000 fb14 	bl	80076dc <__sinit>
 80070b4:	4b89      	ldr	r3, [pc, #548]	; (80072dc <_vfiprintf_r+0x240>)
 80070b6:	429d      	cmp	r5, r3
 80070b8:	d11b      	bne.n	80070f2 <_vfiprintf_r+0x56>
 80070ba:	6875      	ldr	r5, [r6, #4]
 80070bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070be:	07d9      	lsls	r1, r3, #31
 80070c0:	d405      	bmi.n	80070ce <_vfiprintf_r+0x32>
 80070c2:	89ab      	ldrh	r3, [r5, #12]
 80070c4:	059a      	lsls	r2, r3, #22
 80070c6:	d402      	bmi.n	80070ce <_vfiprintf_r+0x32>
 80070c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ca:	f7ff ff60 	bl	8006f8e <__retarget_lock_acquire_recursive>
 80070ce:	89ab      	ldrh	r3, [r5, #12]
 80070d0:	071b      	lsls	r3, r3, #28
 80070d2:	d501      	bpl.n	80070d8 <_vfiprintf_r+0x3c>
 80070d4:	692b      	ldr	r3, [r5, #16]
 80070d6:	b9eb      	cbnz	r3, 8007114 <_vfiprintf_r+0x78>
 80070d8:	4629      	mov	r1, r5
 80070da:	4630      	mov	r0, r6
 80070dc:	f000 f96e 	bl	80073bc <__swsetup_r>
 80070e0:	b1c0      	cbz	r0, 8007114 <_vfiprintf_r+0x78>
 80070e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070e4:	07dc      	lsls	r4, r3, #31
 80070e6:	d50e      	bpl.n	8007106 <_vfiprintf_r+0x6a>
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	b01d      	add	sp, #116	; 0x74
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	4b7b      	ldr	r3, [pc, #492]	; (80072e0 <_vfiprintf_r+0x244>)
 80070f4:	429d      	cmp	r5, r3
 80070f6:	d101      	bne.n	80070fc <_vfiprintf_r+0x60>
 80070f8:	68b5      	ldr	r5, [r6, #8]
 80070fa:	e7df      	b.n	80070bc <_vfiprintf_r+0x20>
 80070fc:	4b79      	ldr	r3, [pc, #484]	; (80072e4 <_vfiprintf_r+0x248>)
 80070fe:	429d      	cmp	r5, r3
 8007100:	bf08      	it	eq
 8007102:	68f5      	ldreq	r5, [r6, #12]
 8007104:	e7da      	b.n	80070bc <_vfiprintf_r+0x20>
 8007106:	89ab      	ldrh	r3, [r5, #12]
 8007108:	0598      	lsls	r0, r3, #22
 800710a:	d4ed      	bmi.n	80070e8 <_vfiprintf_r+0x4c>
 800710c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800710e:	f7ff ff3f 	bl	8006f90 <__retarget_lock_release_recursive>
 8007112:	e7e9      	b.n	80070e8 <_vfiprintf_r+0x4c>
 8007114:	2300      	movs	r3, #0
 8007116:	9309      	str	r3, [sp, #36]	; 0x24
 8007118:	2320      	movs	r3, #32
 800711a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800711e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007122:	2330      	movs	r3, #48	; 0x30
 8007124:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072e8 <_vfiprintf_r+0x24c>
 8007128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800712c:	f04f 0901 	mov.w	r9, #1
 8007130:	4623      	mov	r3, r4
 8007132:	469a      	mov	sl, r3
 8007134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007138:	b10a      	cbz	r2, 800713e <_vfiprintf_r+0xa2>
 800713a:	2a25      	cmp	r2, #37	; 0x25
 800713c:	d1f9      	bne.n	8007132 <_vfiprintf_r+0x96>
 800713e:	ebba 0b04 	subs.w	fp, sl, r4
 8007142:	d00b      	beq.n	800715c <_vfiprintf_r+0xc0>
 8007144:	465b      	mov	r3, fp
 8007146:	4622      	mov	r2, r4
 8007148:	4629      	mov	r1, r5
 800714a:	4630      	mov	r0, r6
 800714c:	f7ff ff93 	bl	8007076 <__sfputs_r>
 8007150:	3001      	adds	r0, #1
 8007152:	f000 80aa 	beq.w	80072aa <_vfiprintf_r+0x20e>
 8007156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007158:	445a      	add	r2, fp
 800715a:	9209      	str	r2, [sp, #36]	; 0x24
 800715c:	f89a 3000 	ldrb.w	r3, [sl]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 80a2 	beq.w	80072aa <_vfiprintf_r+0x20e>
 8007166:	2300      	movs	r3, #0
 8007168:	f04f 32ff 	mov.w	r2, #4294967295
 800716c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007170:	f10a 0a01 	add.w	sl, sl, #1
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	9307      	str	r3, [sp, #28]
 8007178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800717c:	931a      	str	r3, [sp, #104]	; 0x68
 800717e:	4654      	mov	r4, sl
 8007180:	2205      	movs	r2, #5
 8007182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007186:	4858      	ldr	r0, [pc, #352]	; (80072e8 <_vfiprintf_r+0x24c>)
 8007188:	f7f9 f832 	bl	80001f0 <memchr>
 800718c:	9a04      	ldr	r2, [sp, #16]
 800718e:	b9d8      	cbnz	r0, 80071c8 <_vfiprintf_r+0x12c>
 8007190:	06d1      	lsls	r1, r2, #27
 8007192:	bf44      	itt	mi
 8007194:	2320      	movmi	r3, #32
 8007196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800719a:	0713      	lsls	r3, r2, #28
 800719c:	bf44      	itt	mi
 800719e:	232b      	movmi	r3, #43	; 0x2b
 80071a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071a4:	f89a 3000 	ldrb.w	r3, [sl]
 80071a8:	2b2a      	cmp	r3, #42	; 0x2a
 80071aa:	d015      	beq.n	80071d8 <_vfiprintf_r+0x13c>
 80071ac:	9a07      	ldr	r2, [sp, #28]
 80071ae:	4654      	mov	r4, sl
 80071b0:	2000      	movs	r0, #0
 80071b2:	f04f 0c0a 	mov.w	ip, #10
 80071b6:	4621      	mov	r1, r4
 80071b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071bc:	3b30      	subs	r3, #48	; 0x30
 80071be:	2b09      	cmp	r3, #9
 80071c0:	d94e      	bls.n	8007260 <_vfiprintf_r+0x1c4>
 80071c2:	b1b0      	cbz	r0, 80071f2 <_vfiprintf_r+0x156>
 80071c4:	9207      	str	r2, [sp, #28]
 80071c6:	e014      	b.n	80071f2 <_vfiprintf_r+0x156>
 80071c8:	eba0 0308 	sub.w	r3, r0, r8
 80071cc:	fa09 f303 	lsl.w	r3, r9, r3
 80071d0:	4313      	orrs	r3, r2
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	46a2      	mov	sl, r4
 80071d6:	e7d2      	b.n	800717e <_vfiprintf_r+0xe2>
 80071d8:	9b03      	ldr	r3, [sp, #12]
 80071da:	1d19      	adds	r1, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	9103      	str	r1, [sp, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bfbb      	ittet	lt
 80071e4:	425b      	neglt	r3, r3
 80071e6:	f042 0202 	orrlt.w	r2, r2, #2
 80071ea:	9307      	strge	r3, [sp, #28]
 80071ec:	9307      	strlt	r3, [sp, #28]
 80071ee:	bfb8      	it	lt
 80071f0:	9204      	strlt	r2, [sp, #16]
 80071f2:	7823      	ldrb	r3, [r4, #0]
 80071f4:	2b2e      	cmp	r3, #46	; 0x2e
 80071f6:	d10c      	bne.n	8007212 <_vfiprintf_r+0x176>
 80071f8:	7863      	ldrb	r3, [r4, #1]
 80071fa:	2b2a      	cmp	r3, #42	; 0x2a
 80071fc:	d135      	bne.n	800726a <_vfiprintf_r+0x1ce>
 80071fe:	9b03      	ldr	r3, [sp, #12]
 8007200:	1d1a      	adds	r2, r3, #4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	9203      	str	r2, [sp, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	bfb8      	it	lt
 800720a:	f04f 33ff 	movlt.w	r3, #4294967295
 800720e:	3402      	adds	r4, #2
 8007210:	9305      	str	r3, [sp, #20]
 8007212:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072f8 <_vfiprintf_r+0x25c>
 8007216:	7821      	ldrb	r1, [r4, #0]
 8007218:	2203      	movs	r2, #3
 800721a:	4650      	mov	r0, sl
 800721c:	f7f8 ffe8 	bl	80001f0 <memchr>
 8007220:	b140      	cbz	r0, 8007234 <_vfiprintf_r+0x198>
 8007222:	2340      	movs	r3, #64	; 0x40
 8007224:	eba0 000a 	sub.w	r0, r0, sl
 8007228:	fa03 f000 	lsl.w	r0, r3, r0
 800722c:	9b04      	ldr	r3, [sp, #16]
 800722e:	4303      	orrs	r3, r0
 8007230:	3401      	adds	r4, #1
 8007232:	9304      	str	r3, [sp, #16]
 8007234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007238:	482c      	ldr	r0, [pc, #176]	; (80072ec <_vfiprintf_r+0x250>)
 800723a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800723e:	2206      	movs	r2, #6
 8007240:	f7f8 ffd6 	bl	80001f0 <memchr>
 8007244:	2800      	cmp	r0, #0
 8007246:	d03f      	beq.n	80072c8 <_vfiprintf_r+0x22c>
 8007248:	4b29      	ldr	r3, [pc, #164]	; (80072f0 <_vfiprintf_r+0x254>)
 800724a:	bb1b      	cbnz	r3, 8007294 <_vfiprintf_r+0x1f8>
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	3307      	adds	r3, #7
 8007250:	f023 0307 	bic.w	r3, r3, #7
 8007254:	3308      	adds	r3, #8
 8007256:	9303      	str	r3, [sp, #12]
 8007258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800725a:	443b      	add	r3, r7
 800725c:	9309      	str	r3, [sp, #36]	; 0x24
 800725e:	e767      	b.n	8007130 <_vfiprintf_r+0x94>
 8007260:	fb0c 3202 	mla	r2, ip, r2, r3
 8007264:	460c      	mov	r4, r1
 8007266:	2001      	movs	r0, #1
 8007268:	e7a5      	b.n	80071b6 <_vfiprintf_r+0x11a>
 800726a:	2300      	movs	r3, #0
 800726c:	3401      	adds	r4, #1
 800726e:	9305      	str	r3, [sp, #20]
 8007270:	4619      	mov	r1, r3
 8007272:	f04f 0c0a 	mov.w	ip, #10
 8007276:	4620      	mov	r0, r4
 8007278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800727c:	3a30      	subs	r2, #48	; 0x30
 800727e:	2a09      	cmp	r2, #9
 8007280:	d903      	bls.n	800728a <_vfiprintf_r+0x1ee>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0c5      	beq.n	8007212 <_vfiprintf_r+0x176>
 8007286:	9105      	str	r1, [sp, #20]
 8007288:	e7c3      	b.n	8007212 <_vfiprintf_r+0x176>
 800728a:	fb0c 2101 	mla	r1, ip, r1, r2
 800728e:	4604      	mov	r4, r0
 8007290:	2301      	movs	r3, #1
 8007292:	e7f0      	b.n	8007276 <_vfiprintf_r+0x1da>
 8007294:	ab03      	add	r3, sp, #12
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	462a      	mov	r2, r5
 800729a:	4b16      	ldr	r3, [pc, #88]	; (80072f4 <_vfiprintf_r+0x258>)
 800729c:	a904      	add	r1, sp, #16
 800729e:	4630      	mov	r0, r6
 80072a0:	f7fd fea0 	bl	8004fe4 <_printf_float>
 80072a4:	4607      	mov	r7, r0
 80072a6:	1c78      	adds	r0, r7, #1
 80072a8:	d1d6      	bne.n	8007258 <_vfiprintf_r+0x1bc>
 80072aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ac:	07d9      	lsls	r1, r3, #31
 80072ae:	d405      	bmi.n	80072bc <_vfiprintf_r+0x220>
 80072b0:	89ab      	ldrh	r3, [r5, #12]
 80072b2:	059a      	lsls	r2, r3, #22
 80072b4:	d402      	bmi.n	80072bc <_vfiprintf_r+0x220>
 80072b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072b8:	f7ff fe6a 	bl	8006f90 <__retarget_lock_release_recursive>
 80072bc:	89ab      	ldrh	r3, [r5, #12]
 80072be:	065b      	lsls	r3, r3, #25
 80072c0:	f53f af12 	bmi.w	80070e8 <_vfiprintf_r+0x4c>
 80072c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072c6:	e711      	b.n	80070ec <_vfiprintf_r+0x50>
 80072c8:	ab03      	add	r3, sp, #12
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	462a      	mov	r2, r5
 80072ce:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <_vfiprintf_r+0x258>)
 80072d0:	a904      	add	r1, sp, #16
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7fe f92a 	bl	800552c <_printf_i>
 80072d8:	e7e4      	b.n	80072a4 <_vfiprintf_r+0x208>
 80072da:	bf00      	nop
 80072dc:	080085b4 	.word	0x080085b4
 80072e0:	080085d4 	.word	0x080085d4
 80072e4:	08008594 	.word	0x08008594
 80072e8:	0800843c 	.word	0x0800843c
 80072ec:	08008446 	.word	0x08008446
 80072f0:	08004fe5 	.word	0x08004fe5
 80072f4:	08007077 	.word	0x08007077
 80072f8:	08008442 	.word	0x08008442

080072fc <__swbuf_r>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	460e      	mov	r6, r1
 8007300:	4614      	mov	r4, r2
 8007302:	4605      	mov	r5, r0
 8007304:	b118      	cbz	r0, 800730e <__swbuf_r+0x12>
 8007306:	6983      	ldr	r3, [r0, #24]
 8007308:	b90b      	cbnz	r3, 800730e <__swbuf_r+0x12>
 800730a:	f000 f9e7 	bl	80076dc <__sinit>
 800730e:	4b21      	ldr	r3, [pc, #132]	; (8007394 <__swbuf_r+0x98>)
 8007310:	429c      	cmp	r4, r3
 8007312:	d12b      	bne.n	800736c <__swbuf_r+0x70>
 8007314:	686c      	ldr	r4, [r5, #4]
 8007316:	69a3      	ldr	r3, [r4, #24]
 8007318:	60a3      	str	r3, [r4, #8]
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	071a      	lsls	r2, r3, #28
 800731e:	d52f      	bpl.n	8007380 <__swbuf_r+0x84>
 8007320:	6923      	ldr	r3, [r4, #16]
 8007322:	b36b      	cbz	r3, 8007380 <__swbuf_r+0x84>
 8007324:	6923      	ldr	r3, [r4, #16]
 8007326:	6820      	ldr	r0, [r4, #0]
 8007328:	1ac0      	subs	r0, r0, r3
 800732a:	6963      	ldr	r3, [r4, #20]
 800732c:	b2f6      	uxtb	r6, r6
 800732e:	4283      	cmp	r3, r0
 8007330:	4637      	mov	r7, r6
 8007332:	dc04      	bgt.n	800733e <__swbuf_r+0x42>
 8007334:	4621      	mov	r1, r4
 8007336:	4628      	mov	r0, r5
 8007338:	f000 f93c 	bl	80075b4 <_fflush_r>
 800733c:	bb30      	cbnz	r0, 800738c <__swbuf_r+0x90>
 800733e:	68a3      	ldr	r3, [r4, #8]
 8007340:	3b01      	subs	r3, #1
 8007342:	60a3      	str	r3, [r4, #8]
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	6022      	str	r2, [r4, #0]
 800734a:	701e      	strb	r6, [r3, #0]
 800734c:	6963      	ldr	r3, [r4, #20]
 800734e:	3001      	adds	r0, #1
 8007350:	4283      	cmp	r3, r0
 8007352:	d004      	beq.n	800735e <__swbuf_r+0x62>
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	07db      	lsls	r3, r3, #31
 8007358:	d506      	bpl.n	8007368 <__swbuf_r+0x6c>
 800735a:	2e0a      	cmp	r6, #10
 800735c:	d104      	bne.n	8007368 <__swbuf_r+0x6c>
 800735e:	4621      	mov	r1, r4
 8007360:	4628      	mov	r0, r5
 8007362:	f000 f927 	bl	80075b4 <_fflush_r>
 8007366:	b988      	cbnz	r0, 800738c <__swbuf_r+0x90>
 8007368:	4638      	mov	r0, r7
 800736a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <__swbuf_r+0x9c>)
 800736e:	429c      	cmp	r4, r3
 8007370:	d101      	bne.n	8007376 <__swbuf_r+0x7a>
 8007372:	68ac      	ldr	r4, [r5, #8]
 8007374:	e7cf      	b.n	8007316 <__swbuf_r+0x1a>
 8007376:	4b09      	ldr	r3, [pc, #36]	; (800739c <__swbuf_r+0xa0>)
 8007378:	429c      	cmp	r4, r3
 800737a:	bf08      	it	eq
 800737c:	68ec      	ldreq	r4, [r5, #12]
 800737e:	e7ca      	b.n	8007316 <__swbuf_r+0x1a>
 8007380:	4621      	mov	r1, r4
 8007382:	4628      	mov	r0, r5
 8007384:	f000 f81a 	bl	80073bc <__swsetup_r>
 8007388:	2800      	cmp	r0, #0
 800738a:	d0cb      	beq.n	8007324 <__swbuf_r+0x28>
 800738c:	f04f 37ff 	mov.w	r7, #4294967295
 8007390:	e7ea      	b.n	8007368 <__swbuf_r+0x6c>
 8007392:	bf00      	nop
 8007394:	080085b4 	.word	0x080085b4
 8007398:	080085d4 	.word	0x080085d4
 800739c:	08008594 	.word	0x08008594

080073a0 <__ascii_wctomb>:
 80073a0:	b149      	cbz	r1, 80073b6 <__ascii_wctomb+0x16>
 80073a2:	2aff      	cmp	r2, #255	; 0xff
 80073a4:	bf85      	ittet	hi
 80073a6:	238a      	movhi	r3, #138	; 0x8a
 80073a8:	6003      	strhi	r3, [r0, #0]
 80073aa:	700a      	strbls	r2, [r1, #0]
 80073ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80073b0:	bf98      	it	ls
 80073b2:	2001      	movls	r0, #1
 80073b4:	4770      	bx	lr
 80073b6:	4608      	mov	r0, r1
 80073b8:	4770      	bx	lr
	...

080073bc <__swsetup_r>:
 80073bc:	4b32      	ldr	r3, [pc, #200]	; (8007488 <__swsetup_r+0xcc>)
 80073be:	b570      	push	{r4, r5, r6, lr}
 80073c0:	681d      	ldr	r5, [r3, #0]
 80073c2:	4606      	mov	r6, r0
 80073c4:	460c      	mov	r4, r1
 80073c6:	b125      	cbz	r5, 80073d2 <__swsetup_r+0x16>
 80073c8:	69ab      	ldr	r3, [r5, #24]
 80073ca:	b913      	cbnz	r3, 80073d2 <__swsetup_r+0x16>
 80073cc:	4628      	mov	r0, r5
 80073ce:	f000 f985 	bl	80076dc <__sinit>
 80073d2:	4b2e      	ldr	r3, [pc, #184]	; (800748c <__swsetup_r+0xd0>)
 80073d4:	429c      	cmp	r4, r3
 80073d6:	d10f      	bne.n	80073f8 <__swsetup_r+0x3c>
 80073d8:	686c      	ldr	r4, [r5, #4]
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e0:	0719      	lsls	r1, r3, #28
 80073e2:	d42c      	bmi.n	800743e <__swsetup_r+0x82>
 80073e4:	06dd      	lsls	r5, r3, #27
 80073e6:	d411      	bmi.n	800740c <__swsetup_r+0x50>
 80073e8:	2309      	movs	r3, #9
 80073ea:	6033      	str	r3, [r6, #0]
 80073ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073f0:	81a3      	strh	r3, [r4, #12]
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295
 80073f6:	e03e      	b.n	8007476 <__swsetup_r+0xba>
 80073f8:	4b25      	ldr	r3, [pc, #148]	; (8007490 <__swsetup_r+0xd4>)
 80073fa:	429c      	cmp	r4, r3
 80073fc:	d101      	bne.n	8007402 <__swsetup_r+0x46>
 80073fe:	68ac      	ldr	r4, [r5, #8]
 8007400:	e7eb      	b.n	80073da <__swsetup_r+0x1e>
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <__swsetup_r+0xd8>)
 8007404:	429c      	cmp	r4, r3
 8007406:	bf08      	it	eq
 8007408:	68ec      	ldreq	r4, [r5, #12]
 800740a:	e7e6      	b.n	80073da <__swsetup_r+0x1e>
 800740c:	0758      	lsls	r0, r3, #29
 800740e:	d512      	bpl.n	8007436 <__swsetup_r+0x7a>
 8007410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007412:	b141      	cbz	r1, 8007426 <__swsetup_r+0x6a>
 8007414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007418:	4299      	cmp	r1, r3
 800741a:	d002      	beq.n	8007422 <__swsetup_r+0x66>
 800741c:	4630      	mov	r0, r6
 800741e:	f7fd fc61 	bl	8004ce4 <_free_r>
 8007422:	2300      	movs	r3, #0
 8007424:	6363      	str	r3, [r4, #52]	; 0x34
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	2300      	movs	r3, #0
 8007430:	6063      	str	r3, [r4, #4]
 8007432:	6923      	ldr	r3, [r4, #16]
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	f043 0308 	orr.w	r3, r3, #8
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	6923      	ldr	r3, [r4, #16]
 8007440:	b94b      	cbnz	r3, 8007456 <__swsetup_r+0x9a>
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744c:	d003      	beq.n	8007456 <__swsetup_r+0x9a>
 800744e:	4621      	mov	r1, r4
 8007450:	4630      	mov	r0, r6
 8007452:	f000 fa05 	bl	8007860 <__smakebuf_r>
 8007456:	89a0      	ldrh	r0, [r4, #12]
 8007458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800745c:	f010 0301 	ands.w	r3, r0, #1
 8007460:	d00a      	beq.n	8007478 <__swsetup_r+0xbc>
 8007462:	2300      	movs	r3, #0
 8007464:	60a3      	str	r3, [r4, #8]
 8007466:	6963      	ldr	r3, [r4, #20]
 8007468:	425b      	negs	r3, r3
 800746a:	61a3      	str	r3, [r4, #24]
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	b943      	cbnz	r3, 8007482 <__swsetup_r+0xc6>
 8007470:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007474:	d1ba      	bne.n	80073ec <__swsetup_r+0x30>
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	0781      	lsls	r1, r0, #30
 800747a:	bf58      	it	pl
 800747c:	6963      	ldrpl	r3, [r4, #20]
 800747e:	60a3      	str	r3, [r4, #8]
 8007480:	e7f4      	b.n	800746c <__swsetup_r+0xb0>
 8007482:	2000      	movs	r0, #0
 8007484:	e7f7      	b.n	8007476 <__swsetup_r+0xba>
 8007486:	bf00      	nop
 8007488:	2000000c 	.word	0x2000000c
 800748c:	080085b4 	.word	0x080085b4
 8007490:	080085d4 	.word	0x080085d4
 8007494:	08008594 	.word	0x08008594

08007498 <abort>:
 8007498:	b508      	push	{r3, lr}
 800749a:	2006      	movs	r0, #6
 800749c:	f000 fa50 	bl	8007940 <raise>
 80074a0:	2001      	movs	r0, #1
 80074a2:	f7fa f833 	bl	800150c <_exit>
	...

080074a8 <__sflush_r>:
 80074a8:	898a      	ldrh	r2, [r1, #12]
 80074aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ae:	4605      	mov	r5, r0
 80074b0:	0710      	lsls	r0, r2, #28
 80074b2:	460c      	mov	r4, r1
 80074b4:	d458      	bmi.n	8007568 <__sflush_r+0xc0>
 80074b6:	684b      	ldr	r3, [r1, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dc05      	bgt.n	80074c8 <__sflush_r+0x20>
 80074bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dc02      	bgt.n	80074c8 <__sflush_r+0x20>
 80074c2:	2000      	movs	r0, #0
 80074c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	d0f9      	beq.n	80074c2 <__sflush_r+0x1a>
 80074ce:	2300      	movs	r3, #0
 80074d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074d4:	682f      	ldr	r7, [r5, #0]
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	d032      	beq.n	8007540 <__sflush_r+0x98>
 80074da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	075a      	lsls	r2, r3, #29
 80074e0:	d505      	bpl.n	80074ee <__sflush_r+0x46>
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	1ac0      	subs	r0, r0, r3
 80074e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074e8:	b10b      	cbz	r3, 80074ee <__sflush_r+0x46>
 80074ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074ec:	1ac0      	subs	r0, r0, r3
 80074ee:	2300      	movs	r3, #0
 80074f0:	4602      	mov	r2, r0
 80074f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074f4:	6a21      	ldr	r1, [r4, #32]
 80074f6:	4628      	mov	r0, r5
 80074f8:	47b0      	blx	r6
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	d106      	bne.n	800750e <__sflush_r+0x66>
 8007500:	6829      	ldr	r1, [r5, #0]
 8007502:	291d      	cmp	r1, #29
 8007504:	d82c      	bhi.n	8007560 <__sflush_r+0xb8>
 8007506:	4a2a      	ldr	r2, [pc, #168]	; (80075b0 <__sflush_r+0x108>)
 8007508:	40ca      	lsrs	r2, r1
 800750a:	07d6      	lsls	r6, r2, #31
 800750c:	d528      	bpl.n	8007560 <__sflush_r+0xb8>
 800750e:	2200      	movs	r2, #0
 8007510:	6062      	str	r2, [r4, #4]
 8007512:	04d9      	lsls	r1, r3, #19
 8007514:	6922      	ldr	r2, [r4, #16]
 8007516:	6022      	str	r2, [r4, #0]
 8007518:	d504      	bpl.n	8007524 <__sflush_r+0x7c>
 800751a:	1c42      	adds	r2, r0, #1
 800751c:	d101      	bne.n	8007522 <__sflush_r+0x7a>
 800751e:	682b      	ldr	r3, [r5, #0]
 8007520:	b903      	cbnz	r3, 8007524 <__sflush_r+0x7c>
 8007522:	6560      	str	r0, [r4, #84]	; 0x54
 8007524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007526:	602f      	str	r7, [r5, #0]
 8007528:	2900      	cmp	r1, #0
 800752a:	d0ca      	beq.n	80074c2 <__sflush_r+0x1a>
 800752c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007530:	4299      	cmp	r1, r3
 8007532:	d002      	beq.n	800753a <__sflush_r+0x92>
 8007534:	4628      	mov	r0, r5
 8007536:	f7fd fbd5 	bl	8004ce4 <_free_r>
 800753a:	2000      	movs	r0, #0
 800753c:	6360      	str	r0, [r4, #52]	; 0x34
 800753e:	e7c1      	b.n	80074c4 <__sflush_r+0x1c>
 8007540:	6a21      	ldr	r1, [r4, #32]
 8007542:	2301      	movs	r3, #1
 8007544:	4628      	mov	r0, r5
 8007546:	47b0      	blx	r6
 8007548:	1c41      	adds	r1, r0, #1
 800754a:	d1c7      	bne.n	80074dc <__sflush_r+0x34>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0c4      	beq.n	80074dc <__sflush_r+0x34>
 8007552:	2b1d      	cmp	r3, #29
 8007554:	d001      	beq.n	800755a <__sflush_r+0xb2>
 8007556:	2b16      	cmp	r3, #22
 8007558:	d101      	bne.n	800755e <__sflush_r+0xb6>
 800755a:	602f      	str	r7, [r5, #0]
 800755c:	e7b1      	b.n	80074c2 <__sflush_r+0x1a>
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007564:	81a3      	strh	r3, [r4, #12]
 8007566:	e7ad      	b.n	80074c4 <__sflush_r+0x1c>
 8007568:	690f      	ldr	r7, [r1, #16]
 800756a:	2f00      	cmp	r7, #0
 800756c:	d0a9      	beq.n	80074c2 <__sflush_r+0x1a>
 800756e:	0793      	lsls	r3, r2, #30
 8007570:	680e      	ldr	r6, [r1, #0]
 8007572:	bf08      	it	eq
 8007574:	694b      	ldreq	r3, [r1, #20]
 8007576:	600f      	str	r7, [r1, #0]
 8007578:	bf18      	it	ne
 800757a:	2300      	movne	r3, #0
 800757c:	eba6 0807 	sub.w	r8, r6, r7
 8007580:	608b      	str	r3, [r1, #8]
 8007582:	f1b8 0f00 	cmp.w	r8, #0
 8007586:	dd9c      	ble.n	80074c2 <__sflush_r+0x1a>
 8007588:	6a21      	ldr	r1, [r4, #32]
 800758a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800758c:	4643      	mov	r3, r8
 800758e:	463a      	mov	r2, r7
 8007590:	4628      	mov	r0, r5
 8007592:	47b0      	blx	r6
 8007594:	2800      	cmp	r0, #0
 8007596:	dc06      	bgt.n	80075a6 <__sflush_r+0xfe>
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	e78e      	b.n	80074c4 <__sflush_r+0x1c>
 80075a6:	4407      	add	r7, r0
 80075a8:	eba8 0800 	sub.w	r8, r8, r0
 80075ac:	e7e9      	b.n	8007582 <__sflush_r+0xda>
 80075ae:	bf00      	nop
 80075b0:	20400001 	.word	0x20400001

080075b4 <_fflush_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	690b      	ldr	r3, [r1, #16]
 80075b8:	4605      	mov	r5, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	b913      	cbnz	r3, 80075c4 <_fflush_r+0x10>
 80075be:	2500      	movs	r5, #0
 80075c0:	4628      	mov	r0, r5
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	b118      	cbz	r0, 80075ce <_fflush_r+0x1a>
 80075c6:	6983      	ldr	r3, [r0, #24]
 80075c8:	b90b      	cbnz	r3, 80075ce <_fflush_r+0x1a>
 80075ca:	f000 f887 	bl	80076dc <__sinit>
 80075ce:	4b14      	ldr	r3, [pc, #80]	; (8007620 <_fflush_r+0x6c>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	d11b      	bne.n	800760c <_fflush_r+0x58>
 80075d4:	686c      	ldr	r4, [r5, #4]
 80075d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0ef      	beq.n	80075be <_fflush_r+0xa>
 80075de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075e0:	07d0      	lsls	r0, r2, #31
 80075e2:	d404      	bmi.n	80075ee <_fflush_r+0x3a>
 80075e4:	0599      	lsls	r1, r3, #22
 80075e6:	d402      	bmi.n	80075ee <_fflush_r+0x3a>
 80075e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ea:	f7ff fcd0 	bl	8006f8e <__retarget_lock_acquire_recursive>
 80075ee:	4628      	mov	r0, r5
 80075f0:	4621      	mov	r1, r4
 80075f2:	f7ff ff59 	bl	80074a8 <__sflush_r>
 80075f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075f8:	07da      	lsls	r2, r3, #31
 80075fa:	4605      	mov	r5, r0
 80075fc:	d4e0      	bmi.n	80075c0 <_fflush_r+0xc>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	059b      	lsls	r3, r3, #22
 8007602:	d4dd      	bmi.n	80075c0 <_fflush_r+0xc>
 8007604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007606:	f7ff fcc3 	bl	8006f90 <__retarget_lock_release_recursive>
 800760a:	e7d9      	b.n	80075c0 <_fflush_r+0xc>
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <_fflush_r+0x70>)
 800760e:	429c      	cmp	r4, r3
 8007610:	d101      	bne.n	8007616 <_fflush_r+0x62>
 8007612:	68ac      	ldr	r4, [r5, #8]
 8007614:	e7df      	b.n	80075d6 <_fflush_r+0x22>
 8007616:	4b04      	ldr	r3, [pc, #16]	; (8007628 <_fflush_r+0x74>)
 8007618:	429c      	cmp	r4, r3
 800761a:	bf08      	it	eq
 800761c:	68ec      	ldreq	r4, [r5, #12]
 800761e:	e7da      	b.n	80075d6 <_fflush_r+0x22>
 8007620:	080085b4 	.word	0x080085b4
 8007624:	080085d4 	.word	0x080085d4
 8007628:	08008594 	.word	0x08008594

0800762c <std>:
 800762c:	2300      	movs	r3, #0
 800762e:	b510      	push	{r4, lr}
 8007630:	4604      	mov	r4, r0
 8007632:	e9c0 3300 	strd	r3, r3, [r0]
 8007636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800763a:	6083      	str	r3, [r0, #8]
 800763c:	8181      	strh	r1, [r0, #12]
 800763e:	6643      	str	r3, [r0, #100]	; 0x64
 8007640:	81c2      	strh	r2, [r0, #14]
 8007642:	6183      	str	r3, [r0, #24]
 8007644:	4619      	mov	r1, r3
 8007646:	2208      	movs	r2, #8
 8007648:	305c      	adds	r0, #92	; 0x5c
 800764a:	f7fd fb43 	bl	8004cd4 <memset>
 800764e:	4b05      	ldr	r3, [pc, #20]	; (8007664 <std+0x38>)
 8007650:	6263      	str	r3, [r4, #36]	; 0x24
 8007652:	4b05      	ldr	r3, [pc, #20]	; (8007668 <std+0x3c>)
 8007654:	62a3      	str	r3, [r4, #40]	; 0x28
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <std+0x40>)
 8007658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <std+0x44>)
 800765c:	6224      	str	r4, [r4, #32]
 800765e:	6323      	str	r3, [r4, #48]	; 0x30
 8007660:	bd10      	pop	{r4, pc}
 8007662:	bf00      	nop
 8007664:	08007979 	.word	0x08007979
 8007668:	0800799b 	.word	0x0800799b
 800766c:	080079d3 	.word	0x080079d3
 8007670:	080079f7 	.word	0x080079f7

08007674 <_cleanup_r>:
 8007674:	4901      	ldr	r1, [pc, #4]	; (800767c <_cleanup_r+0x8>)
 8007676:	f000 b8af 	b.w	80077d8 <_fwalk_reent>
 800767a:	bf00      	nop
 800767c:	080075b5 	.word	0x080075b5

08007680 <__sfmoreglue>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	2268      	movs	r2, #104	; 0x68
 8007684:	1e4d      	subs	r5, r1, #1
 8007686:	4355      	muls	r5, r2
 8007688:	460e      	mov	r6, r1
 800768a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800768e:	f7fd fb95 	bl	8004dbc <_malloc_r>
 8007692:	4604      	mov	r4, r0
 8007694:	b140      	cbz	r0, 80076a8 <__sfmoreglue+0x28>
 8007696:	2100      	movs	r1, #0
 8007698:	e9c0 1600 	strd	r1, r6, [r0]
 800769c:	300c      	adds	r0, #12
 800769e:	60a0      	str	r0, [r4, #8]
 80076a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076a4:	f7fd fb16 	bl	8004cd4 <memset>
 80076a8:	4620      	mov	r0, r4
 80076aa:	bd70      	pop	{r4, r5, r6, pc}

080076ac <__sfp_lock_acquire>:
 80076ac:	4801      	ldr	r0, [pc, #4]	; (80076b4 <__sfp_lock_acquire+0x8>)
 80076ae:	f7ff bc6e 	b.w	8006f8e <__retarget_lock_acquire_recursive>
 80076b2:	bf00      	nop
 80076b4:	20000435 	.word	0x20000435

080076b8 <__sfp_lock_release>:
 80076b8:	4801      	ldr	r0, [pc, #4]	; (80076c0 <__sfp_lock_release+0x8>)
 80076ba:	f7ff bc69 	b.w	8006f90 <__retarget_lock_release_recursive>
 80076be:	bf00      	nop
 80076c0:	20000435 	.word	0x20000435

080076c4 <__sinit_lock_acquire>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__sinit_lock_acquire+0x8>)
 80076c6:	f7ff bc62 	b.w	8006f8e <__retarget_lock_acquire_recursive>
 80076ca:	bf00      	nop
 80076cc:	20000436 	.word	0x20000436

080076d0 <__sinit_lock_release>:
 80076d0:	4801      	ldr	r0, [pc, #4]	; (80076d8 <__sinit_lock_release+0x8>)
 80076d2:	f7ff bc5d 	b.w	8006f90 <__retarget_lock_release_recursive>
 80076d6:	bf00      	nop
 80076d8:	20000436 	.word	0x20000436

080076dc <__sinit>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	4604      	mov	r4, r0
 80076e0:	f7ff fff0 	bl	80076c4 <__sinit_lock_acquire>
 80076e4:	69a3      	ldr	r3, [r4, #24]
 80076e6:	b11b      	cbz	r3, 80076f0 <__sinit+0x14>
 80076e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ec:	f7ff bff0 	b.w	80076d0 <__sinit_lock_release>
 80076f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076f4:	6523      	str	r3, [r4, #80]	; 0x50
 80076f6:	4b13      	ldr	r3, [pc, #76]	; (8007744 <__sinit+0x68>)
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <__sinit+0x6c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80076fe:	42a3      	cmp	r3, r4
 8007700:	bf04      	itt	eq
 8007702:	2301      	moveq	r3, #1
 8007704:	61a3      	streq	r3, [r4, #24]
 8007706:	4620      	mov	r0, r4
 8007708:	f000 f820 	bl	800774c <__sfp>
 800770c:	6060      	str	r0, [r4, #4]
 800770e:	4620      	mov	r0, r4
 8007710:	f000 f81c 	bl	800774c <__sfp>
 8007714:	60a0      	str	r0, [r4, #8]
 8007716:	4620      	mov	r0, r4
 8007718:	f000 f818 	bl	800774c <__sfp>
 800771c:	2200      	movs	r2, #0
 800771e:	60e0      	str	r0, [r4, #12]
 8007720:	2104      	movs	r1, #4
 8007722:	6860      	ldr	r0, [r4, #4]
 8007724:	f7ff ff82 	bl	800762c <std>
 8007728:	68a0      	ldr	r0, [r4, #8]
 800772a:	2201      	movs	r2, #1
 800772c:	2109      	movs	r1, #9
 800772e:	f7ff ff7d 	bl	800762c <std>
 8007732:	68e0      	ldr	r0, [r4, #12]
 8007734:	2202      	movs	r2, #2
 8007736:	2112      	movs	r1, #18
 8007738:	f7ff ff78 	bl	800762c <std>
 800773c:	2301      	movs	r3, #1
 800773e:	61a3      	str	r3, [r4, #24]
 8007740:	e7d2      	b.n	80076e8 <__sinit+0xc>
 8007742:	bf00      	nop
 8007744:	0800821c 	.word	0x0800821c
 8007748:	08007675 	.word	0x08007675

0800774c <__sfp>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	4607      	mov	r7, r0
 8007750:	f7ff ffac 	bl	80076ac <__sfp_lock_acquire>
 8007754:	4b1e      	ldr	r3, [pc, #120]	; (80077d0 <__sfp+0x84>)
 8007756:	681e      	ldr	r6, [r3, #0]
 8007758:	69b3      	ldr	r3, [r6, #24]
 800775a:	b913      	cbnz	r3, 8007762 <__sfp+0x16>
 800775c:	4630      	mov	r0, r6
 800775e:	f7ff ffbd 	bl	80076dc <__sinit>
 8007762:	3648      	adds	r6, #72	; 0x48
 8007764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007768:	3b01      	subs	r3, #1
 800776a:	d503      	bpl.n	8007774 <__sfp+0x28>
 800776c:	6833      	ldr	r3, [r6, #0]
 800776e:	b30b      	cbz	r3, 80077b4 <__sfp+0x68>
 8007770:	6836      	ldr	r6, [r6, #0]
 8007772:	e7f7      	b.n	8007764 <__sfp+0x18>
 8007774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007778:	b9d5      	cbnz	r5, 80077b0 <__sfp+0x64>
 800777a:	4b16      	ldr	r3, [pc, #88]	; (80077d4 <__sfp+0x88>)
 800777c:	60e3      	str	r3, [r4, #12]
 800777e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007782:	6665      	str	r5, [r4, #100]	; 0x64
 8007784:	f7ff fc02 	bl	8006f8c <__retarget_lock_init_recursive>
 8007788:	f7ff ff96 	bl	80076b8 <__sfp_lock_release>
 800778c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007790:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007794:	6025      	str	r5, [r4, #0]
 8007796:	61a5      	str	r5, [r4, #24]
 8007798:	2208      	movs	r2, #8
 800779a:	4629      	mov	r1, r5
 800779c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077a0:	f7fd fa98 	bl	8004cd4 <memset>
 80077a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077ac:	4620      	mov	r0, r4
 80077ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b0:	3468      	adds	r4, #104	; 0x68
 80077b2:	e7d9      	b.n	8007768 <__sfp+0x1c>
 80077b4:	2104      	movs	r1, #4
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7ff ff62 	bl	8007680 <__sfmoreglue>
 80077bc:	4604      	mov	r4, r0
 80077be:	6030      	str	r0, [r6, #0]
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d1d5      	bne.n	8007770 <__sfp+0x24>
 80077c4:	f7ff ff78 	bl	80076b8 <__sfp_lock_release>
 80077c8:	230c      	movs	r3, #12
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	e7ee      	b.n	80077ac <__sfp+0x60>
 80077ce:	bf00      	nop
 80077d0:	0800821c 	.word	0x0800821c
 80077d4:	ffff0001 	.word	0xffff0001

080077d8 <_fwalk_reent>:
 80077d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077dc:	4606      	mov	r6, r0
 80077de:	4688      	mov	r8, r1
 80077e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077e4:	2700      	movs	r7, #0
 80077e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077ea:	f1b9 0901 	subs.w	r9, r9, #1
 80077ee:	d505      	bpl.n	80077fc <_fwalk_reent+0x24>
 80077f0:	6824      	ldr	r4, [r4, #0]
 80077f2:	2c00      	cmp	r4, #0
 80077f4:	d1f7      	bne.n	80077e6 <_fwalk_reent+0xe>
 80077f6:	4638      	mov	r0, r7
 80077f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fc:	89ab      	ldrh	r3, [r5, #12]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d907      	bls.n	8007812 <_fwalk_reent+0x3a>
 8007802:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007806:	3301      	adds	r3, #1
 8007808:	d003      	beq.n	8007812 <_fwalk_reent+0x3a>
 800780a:	4629      	mov	r1, r5
 800780c:	4630      	mov	r0, r6
 800780e:	47c0      	blx	r8
 8007810:	4307      	orrs	r7, r0
 8007812:	3568      	adds	r5, #104	; 0x68
 8007814:	e7e9      	b.n	80077ea <_fwalk_reent+0x12>

08007816 <__swhatbuf_r>:
 8007816:	b570      	push	{r4, r5, r6, lr}
 8007818:	460e      	mov	r6, r1
 800781a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781e:	2900      	cmp	r1, #0
 8007820:	b096      	sub	sp, #88	; 0x58
 8007822:	4614      	mov	r4, r2
 8007824:	461d      	mov	r5, r3
 8007826:	da08      	bge.n	800783a <__swhatbuf_r+0x24>
 8007828:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	602a      	str	r2, [r5, #0]
 8007830:	061a      	lsls	r2, r3, #24
 8007832:	d410      	bmi.n	8007856 <__swhatbuf_r+0x40>
 8007834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007838:	e00e      	b.n	8007858 <__swhatbuf_r+0x42>
 800783a:	466a      	mov	r2, sp
 800783c:	f000 f902 	bl	8007a44 <_fstat_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	dbf1      	blt.n	8007828 <__swhatbuf_r+0x12>
 8007844:	9a01      	ldr	r2, [sp, #4]
 8007846:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800784a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800784e:	425a      	negs	r2, r3
 8007850:	415a      	adcs	r2, r3
 8007852:	602a      	str	r2, [r5, #0]
 8007854:	e7ee      	b.n	8007834 <__swhatbuf_r+0x1e>
 8007856:	2340      	movs	r3, #64	; 0x40
 8007858:	2000      	movs	r0, #0
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	b016      	add	sp, #88	; 0x58
 800785e:	bd70      	pop	{r4, r5, r6, pc}

08007860 <__smakebuf_r>:
 8007860:	898b      	ldrh	r3, [r1, #12]
 8007862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007864:	079d      	lsls	r5, r3, #30
 8007866:	4606      	mov	r6, r0
 8007868:	460c      	mov	r4, r1
 800786a:	d507      	bpl.n	800787c <__smakebuf_r+0x1c>
 800786c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	6123      	str	r3, [r4, #16]
 8007874:	2301      	movs	r3, #1
 8007876:	6163      	str	r3, [r4, #20]
 8007878:	b002      	add	sp, #8
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	ab01      	add	r3, sp, #4
 800787e:	466a      	mov	r2, sp
 8007880:	f7ff ffc9 	bl	8007816 <__swhatbuf_r>
 8007884:	9900      	ldr	r1, [sp, #0]
 8007886:	4605      	mov	r5, r0
 8007888:	4630      	mov	r0, r6
 800788a:	f7fd fa97 	bl	8004dbc <_malloc_r>
 800788e:	b948      	cbnz	r0, 80078a4 <__smakebuf_r+0x44>
 8007890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007894:	059a      	lsls	r2, r3, #22
 8007896:	d4ef      	bmi.n	8007878 <__smakebuf_r+0x18>
 8007898:	f023 0303 	bic.w	r3, r3, #3
 800789c:	f043 0302 	orr.w	r3, r3, #2
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	e7e3      	b.n	800786c <__smakebuf_r+0xc>
 80078a4:	4b0d      	ldr	r3, [pc, #52]	; (80078dc <__smakebuf_r+0x7c>)
 80078a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	6020      	str	r0, [r4, #0]
 80078ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	9b00      	ldr	r3, [sp, #0]
 80078b4:	6163      	str	r3, [r4, #20]
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	6120      	str	r0, [r4, #16]
 80078ba:	b15b      	cbz	r3, 80078d4 <__smakebuf_r+0x74>
 80078bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078c0:	4630      	mov	r0, r6
 80078c2:	f000 f8d1 	bl	8007a68 <_isatty_r>
 80078c6:	b128      	cbz	r0, 80078d4 <__smakebuf_r+0x74>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	f043 0301 	orr.w	r3, r3, #1
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	89a0      	ldrh	r0, [r4, #12]
 80078d6:	4305      	orrs	r5, r0
 80078d8:	81a5      	strh	r5, [r4, #12]
 80078da:	e7cd      	b.n	8007878 <__smakebuf_r+0x18>
 80078dc:	08007675 	.word	0x08007675

080078e0 <_malloc_usable_size_r>:
 80078e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078e4:	1f18      	subs	r0, r3, #4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bfbc      	itt	lt
 80078ea:	580b      	ldrlt	r3, [r1, r0]
 80078ec:	18c0      	addlt	r0, r0, r3
 80078ee:	4770      	bx	lr

080078f0 <_raise_r>:
 80078f0:	291f      	cmp	r1, #31
 80078f2:	b538      	push	{r3, r4, r5, lr}
 80078f4:	4604      	mov	r4, r0
 80078f6:	460d      	mov	r5, r1
 80078f8:	d904      	bls.n	8007904 <_raise_r+0x14>
 80078fa:	2316      	movs	r3, #22
 80078fc:	6003      	str	r3, [r0, #0]
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007906:	b112      	cbz	r2, 800790e <_raise_r+0x1e>
 8007908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800790c:	b94b      	cbnz	r3, 8007922 <_raise_r+0x32>
 800790e:	4620      	mov	r0, r4
 8007910:	f000 f830 	bl	8007974 <_getpid_r>
 8007914:	462a      	mov	r2, r5
 8007916:	4601      	mov	r1, r0
 8007918:	4620      	mov	r0, r4
 800791a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800791e:	f000 b817 	b.w	8007950 <_kill_r>
 8007922:	2b01      	cmp	r3, #1
 8007924:	d00a      	beq.n	800793c <_raise_r+0x4c>
 8007926:	1c59      	adds	r1, r3, #1
 8007928:	d103      	bne.n	8007932 <_raise_r+0x42>
 800792a:	2316      	movs	r3, #22
 800792c:	6003      	str	r3, [r0, #0]
 800792e:	2001      	movs	r0, #1
 8007930:	e7e7      	b.n	8007902 <_raise_r+0x12>
 8007932:	2400      	movs	r4, #0
 8007934:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007938:	4628      	mov	r0, r5
 800793a:	4798      	blx	r3
 800793c:	2000      	movs	r0, #0
 800793e:	e7e0      	b.n	8007902 <_raise_r+0x12>

08007940 <raise>:
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <raise+0xc>)
 8007942:	4601      	mov	r1, r0
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	f7ff bfd3 	b.w	80078f0 <_raise_r>
 800794a:	bf00      	nop
 800794c:	2000000c 	.word	0x2000000c

08007950 <_kill_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d07      	ldr	r5, [pc, #28]	; (8007970 <_kill_r+0x20>)
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	602b      	str	r3, [r5, #0]
 800795e:	f7f9 fdc5 	bl	80014ec <_kill>
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	d102      	bne.n	800796c <_kill_r+0x1c>
 8007966:	682b      	ldr	r3, [r5, #0]
 8007968:	b103      	cbz	r3, 800796c <_kill_r+0x1c>
 800796a:	6023      	str	r3, [r4, #0]
 800796c:	bd38      	pop	{r3, r4, r5, pc}
 800796e:	bf00      	nop
 8007970:	20000430 	.word	0x20000430

08007974 <_getpid_r>:
 8007974:	f7f9 bdb2 	b.w	80014dc <_getpid>

08007978 <__sread>:
 8007978:	b510      	push	{r4, lr}
 800797a:	460c      	mov	r4, r1
 800797c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007980:	f000 f894 	bl	8007aac <_read_r>
 8007984:	2800      	cmp	r0, #0
 8007986:	bfab      	itete	ge
 8007988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800798a:	89a3      	ldrhlt	r3, [r4, #12]
 800798c:	181b      	addge	r3, r3, r0
 800798e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007992:	bfac      	ite	ge
 8007994:	6563      	strge	r3, [r4, #84]	; 0x54
 8007996:	81a3      	strhlt	r3, [r4, #12]
 8007998:	bd10      	pop	{r4, pc}

0800799a <__swrite>:
 800799a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799e:	461f      	mov	r7, r3
 80079a0:	898b      	ldrh	r3, [r1, #12]
 80079a2:	05db      	lsls	r3, r3, #23
 80079a4:	4605      	mov	r5, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	4616      	mov	r6, r2
 80079aa:	d505      	bpl.n	80079b8 <__swrite+0x1e>
 80079ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b0:	2302      	movs	r3, #2
 80079b2:	2200      	movs	r2, #0
 80079b4:	f000 f868 	bl	8007a88 <_lseek_r>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	4632      	mov	r2, r6
 80079c6:	463b      	mov	r3, r7
 80079c8:	4628      	mov	r0, r5
 80079ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ce:	f000 b817 	b.w	8007a00 <_write_r>

080079d2 <__sseek>:
 80079d2:	b510      	push	{r4, lr}
 80079d4:	460c      	mov	r4, r1
 80079d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079da:	f000 f855 	bl	8007a88 <_lseek_r>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	bf15      	itete	ne
 80079e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80079e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ee:	81a3      	strheq	r3, [r4, #12]
 80079f0:	bf18      	it	ne
 80079f2:	81a3      	strhne	r3, [r4, #12]
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <__sclose>:
 80079f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fa:	f000 b813 	b.w	8007a24 <_close_r>
	...

08007a00 <_write_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d07      	ldr	r5, [pc, #28]	; (8007a20 <_write_r+0x20>)
 8007a04:	4604      	mov	r4, r0
 8007a06:	4608      	mov	r0, r1
 8007a08:	4611      	mov	r1, r2
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	602a      	str	r2, [r5, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f7f9 fda3 	bl	800155a <_write>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_write_r+0x1e>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_write_r+0x1e>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	20000430 	.word	0x20000430

08007a24 <_close_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d06      	ldr	r5, [pc, #24]	; (8007a40 <_close_r+0x1c>)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	602b      	str	r3, [r5, #0]
 8007a30:	f7f9 fdaf 	bl	8001592 <_close>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_close_r+0x1a>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_close_r+0x1a>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	20000430 	.word	0x20000430

08007a44 <_fstat_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4d07      	ldr	r5, [pc, #28]	; (8007a64 <_fstat_r+0x20>)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	4611      	mov	r1, r2
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	f7f9 fdaa 	bl	80015aa <_fstat>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d102      	bne.n	8007a60 <_fstat_r+0x1c>
 8007a5a:	682b      	ldr	r3, [r5, #0]
 8007a5c:	b103      	cbz	r3, 8007a60 <_fstat_r+0x1c>
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	bd38      	pop	{r3, r4, r5, pc}
 8007a62:	bf00      	nop
 8007a64:	20000430 	.word	0x20000430

08007a68 <_isatty_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d06      	ldr	r5, [pc, #24]	; (8007a84 <_isatty_r+0x1c>)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	602b      	str	r3, [r5, #0]
 8007a74:	f7f9 fda9 	bl	80015ca <_isatty>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_isatty_r+0x1a>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_isatty_r+0x1a>
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	20000430 	.word	0x20000430

08007a88 <_lseek_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4d07      	ldr	r5, [pc, #28]	; (8007aa8 <_lseek_r+0x20>)
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	4608      	mov	r0, r1
 8007a90:	4611      	mov	r1, r2
 8007a92:	2200      	movs	r2, #0
 8007a94:	602a      	str	r2, [r5, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f7f9 fda2 	bl	80015e0 <_lseek>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_lseek_r+0x1e>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_lseek_r+0x1e>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	20000430 	.word	0x20000430

08007aac <_read_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d07      	ldr	r5, [pc, #28]	; (8007acc <_read_r+0x20>)
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	602a      	str	r2, [r5, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	f7f9 fd30 	bl	8001520 <_read>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_read_r+0x1e>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_read_r+0x1e>
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	20000430 	.word	0x20000430

08007ad0 <log>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	ed2d 8b02 	vpush	{d8}
 8007ad6:	ec55 4b10 	vmov	r4, r5, d0
 8007ada:	f000 f865 	bl	8007ba8 <__ieee754_log>
 8007ade:	4622      	mov	r2, r4
 8007ae0:	462b      	mov	r3, r5
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	eeb0 8a40 	vmov.f32	s16, s0
 8007aea:	eef0 8a60 	vmov.f32	s17, s1
 8007aee:	f7f9 f825 	bl	8000b3c <__aeabi_dcmpun>
 8007af2:	b998      	cbnz	r0, 8007b1c <log+0x4c>
 8007af4:	2200      	movs	r2, #0
 8007af6:	2300      	movs	r3, #0
 8007af8:	4620      	mov	r0, r4
 8007afa:	4629      	mov	r1, r5
 8007afc:	f7f9 f814 	bl	8000b28 <__aeabi_dcmpgt>
 8007b00:	b960      	cbnz	r0, 8007b1c <log+0x4c>
 8007b02:	2200      	movs	r2, #0
 8007b04:	2300      	movs	r3, #0
 8007b06:	4620      	mov	r0, r4
 8007b08:	4629      	mov	r1, r5
 8007b0a:	f7f8 ffe5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b0e:	b160      	cbz	r0, 8007b2a <log+0x5a>
 8007b10:	f7fd f8ae 	bl	8004c70 <__errno>
 8007b14:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007b40 <log+0x70>
 8007b18:	2322      	movs	r3, #34	; 0x22
 8007b1a:	6003      	str	r3, [r0, #0]
 8007b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b20:	eef0 0a68 	vmov.f32	s1, s17
 8007b24:	ecbd 8b02 	vpop	{d8}
 8007b28:	bd38      	pop	{r3, r4, r5, pc}
 8007b2a:	f7fd f8a1 	bl	8004c70 <__errno>
 8007b2e:	ecbd 8b02 	vpop	{d8}
 8007b32:	2321      	movs	r3, #33	; 0x21
 8007b34:	6003      	str	r3, [r0, #0]
 8007b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b3a:	4803      	ldr	r0, [pc, #12]	; (8007b48 <log+0x78>)
 8007b3c:	f000 baa0 	b.w	8008080 <nan>
 8007b40:	00000000 	.word	0x00000000
 8007b44:	fff00000 	.word	0xfff00000
 8007b48:	08008488 	.word	0x08008488

08007b4c <sqrt>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	ed2d 8b02 	vpush	{d8}
 8007b52:	ec55 4b10 	vmov	r4, r5, d0
 8007b56:	f000 f9e1 	bl	8007f1c <__ieee754_sqrt>
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	462b      	mov	r3, r5
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	eeb0 8a40 	vmov.f32	s16, s0
 8007b66:	eef0 8a60 	vmov.f32	s17, s1
 8007b6a:	f7f8 ffe7 	bl	8000b3c <__aeabi_dcmpun>
 8007b6e:	b990      	cbnz	r0, 8007b96 <sqrt+0x4a>
 8007b70:	2200      	movs	r2, #0
 8007b72:	2300      	movs	r3, #0
 8007b74:	4620      	mov	r0, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	f7f8 ffb8 	bl	8000aec <__aeabi_dcmplt>
 8007b7c:	b158      	cbz	r0, 8007b96 <sqrt+0x4a>
 8007b7e:	f7fd f877 	bl	8004c70 <__errno>
 8007b82:	2321      	movs	r3, #33	; 0x21
 8007b84:	6003      	str	r3, [r0, #0]
 8007b86:	2200      	movs	r2, #0
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	f7f8 fe65 	bl	800085c <__aeabi_ddiv>
 8007b92:	ec41 0b18 	vmov	d8, r0, r1
 8007b96:	eeb0 0a48 	vmov.f32	s0, s16
 8007b9a:	eef0 0a68 	vmov.f32	s1, s17
 8007b9e:	ecbd 8b02 	vpop	{d8}
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	0000      	movs	r0, r0
	...

08007ba8 <__ieee754_log>:
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	ec51 0b10 	vmov	r0, r1, d0
 8007bb0:	ed2d 8b04 	vpush	{d8-d9}
 8007bb4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007bb8:	b083      	sub	sp, #12
 8007bba:	460d      	mov	r5, r1
 8007bbc:	da29      	bge.n	8007c12 <__ieee754_log+0x6a>
 8007bbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bc2:	4303      	orrs	r3, r0
 8007bc4:	ee10 2a10 	vmov	r2, s0
 8007bc8:	d10c      	bne.n	8007be4 <__ieee754_log+0x3c>
 8007bca:	49cf      	ldr	r1, [pc, #828]	; (8007f08 <__ieee754_log+0x360>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	f7f8 fe43 	bl	800085c <__aeabi_ddiv>
 8007bd6:	ec41 0b10 	vmov	d0, r0, r1
 8007bda:	b003      	add	sp, #12
 8007bdc:	ecbd 8b04 	vpop	{d8-d9}
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be4:	2900      	cmp	r1, #0
 8007be6:	da05      	bge.n	8007bf4 <__ieee754_log+0x4c>
 8007be8:	460b      	mov	r3, r1
 8007bea:	f7f8 fb55 	bl	8000298 <__aeabi_dsub>
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e7ee      	b.n	8007bd2 <__ieee754_log+0x2a>
 8007bf4:	4bc5      	ldr	r3, [pc, #788]	; (8007f0c <__ieee754_log+0x364>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f7f8 fd06 	bl	8000608 <__aeabi_dmul>
 8007bfc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007c00:	460d      	mov	r5, r1
 8007c02:	4ac3      	ldr	r2, [pc, #780]	; (8007f10 <__ieee754_log+0x368>)
 8007c04:	4295      	cmp	r5, r2
 8007c06:	dd06      	ble.n	8007c16 <__ieee754_log+0x6e>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	f7f8 fb46 	bl	800029c <__adddf3>
 8007c10:	e7e1      	b.n	8007bd6 <__ieee754_log+0x2e>
 8007c12:	2300      	movs	r3, #0
 8007c14:	e7f5      	b.n	8007c02 <__ieee754_log+0x5a>
 8007c16:	152c      	asrs	r4, r5, #20
 8007c18:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007c1c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007c20:	441c      	add	r4, r3
 8007c22:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007c26:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c2e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8007c32:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8007c36:	ea42 0105 	orr.w	r1, r2, r5
 8007c3a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4bb4      	ldr	r3, [pc, #720]	; (8007f14 <__ieee754_log+0x36c>)
 8007c42:	f7f8 fb29 	bl	8000298 <__aeabi_dsub>
 8007c46:	1cab      	adds	r3, r5, #2
 8007c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	4682      	mov	sl, r0
 8007c50:	468b      	mov	fp, r1
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	dc53      	bgt.n	8007d00 <__ieee754_log+0x158>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f7f8 ff3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c5e:	b1d0      	cbz	r0, 8007c96 <__ieee754_log+0xee>
 8007c60:	2c00      	cmp	r4, #0
 8007c62:	f000 8122 	beq.w	8007eaa <__ieee754_log+0x302>
 8007c66:	4620      	mov	r0, r4
 8007c68:	f7f8 fc64 	bl	8000534 <__aeabi_i2d>
 8007c6c:	a390      	add	r3, pc, #576	; (adr r3, 8007eb0 <__ieee754_log+0x308>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	4606      	mov	r6, r0
 8007c74:	460f      	mov	r7, r1
 8007c76:	f7f8 fcc7 	bl	8000608 <__aeabi_dmul>
 8007c7a:	a38f      	add	r3, pc, #572	; (adr r3, 8007eb8 <__ieee754_log+0x310>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	4604      	mov	r4, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	4630      	mov	r0, r6
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 fcbe 	bl	8000608 <__aeabi_dmul>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4620      	mov	r0, r4
 8007c92:	4629      	mov	r1, r5
 8007c94:	e7ba      	b.n	8007c0c <__ieee754_log+0x64>
 8007c96:	a38a      	add	r3, pc, #552	; (adr r3, 8007ec0 <__ieee754_log+0x318>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	4650      	mov	r0, sl
 8007c9e:	4659      	mov	r1, fp
 8007ca0:	f7f8 fcb2 	bl	8000608 <__aeabi_dmul>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	2000      	movs	r0, #0
 8007caa:	499b      	ldr	r1, [pc, #620]	; (8007f18 <__ieee754_log+0x370>)
 8007cac:	f7f8 faf4 	bl	8000298 <__aeabi_dsub>
 8007cb0:	4652      	mov	r2, sl
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	460f      	mov	r7, r1
 8007cb6:	465b      	mov	r3, fp
 8007cb8:	4650      	mov	r0, sl
 8007cba:	4659      	mov	r1, fp
 8007cbc:	f7f8 fca4 	bl	8000608 <__aeabi_dmul>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	f7f8 fc9e 	bl	8000608 <__aeabi_dmul>
 8007ccc:	4606      	mov	r6, r0
 8007cce:	460f      	mov	r7, r1
 8007cd0:	b914      	cbnz	r4, 8007cd8 <__ieee754_log+0x130>
 8007cd2:	4632      	mov	r2, r6
 8007cd4:	463b      	mov	r3, r7
 8007cd6:	e0a2      	b.n	8007e1e <__ieee754_log+0x276>
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f7f8 fc2b 	bl	8000534 <__aeabi_i2d>
 8007cde:	a374      	add	r3, pc, #464	; (adr r3, 8007eb0 <__ieee754_log+0x308>)
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	4689      	mov	r9, r1
 8007ce8:	f7f8 fc8e 	bl	8000608 <__aeabi_dmul>
 8007cec:	a372      	add	r3, pc, #456	; (adr r3, 8007eb8 <__ieee754_log+0x310>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	460d      	mov	r5, r1
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	f7f8 fc85 	bl	8000608 <__aeabi_dmul>
 8007cfe:	e0a7      	b.n	8007e50 <__ieee754_log+0x2a8>
 8007d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d04:	f7f8 faca 	bl	800029c <__adddf3>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4650      	mov	r0, sl
 8007d0e:	4659      	mov	r1, fp
 8007d10:	f7f8 fda4 	bl	800085c <__aeabi_ddiv>
 8007d14:	ec41 0b18 	vmov	d8, r0, r1
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f7f8 fc0b 	bl	8000534 <__aeabi_i2d>
 8007d1e:	ec53 2b18 	vmov	r2, r3, d8
 8007d22:	ec41 0b19 	vmov	d9, r0, r1
 8007d26:	ec51 0b18 	vmov	r0, r1, d8
 8007d2a:	f7f8 fc6d 	bl	8000608 <__aeabi_dmul>
 8007d2e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8007d32:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	4689      	mov	r9, r1
 8007d40:	f7f8 fc62 	bl	8000608 <__aeabi_dmul>
 8007d44:	a360      	add	r3, pc, #384	; (adr r3, 8007ec8 <__ieee754_log+0x320>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460f      	mov	r7, r1
 8007d4e:	f7f8 fc5b 	bl	8000608 <__aeabi_dmul>
 8007d52:	a35f      	add	r3, pc, #380	; (adr r3, 8007ed0 <__ieee754_log+0x328>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 faa0 	bl	800029c <__adddf3>
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	463b      	mov	r3, r7
 8007d60:	f7f8 fc52 	bl	8000608 <__aeabi_dmul>
 8007d64:	a35c      	add	r3, pc, #368	; (adr r3, 8007ed8 <__ieee754_log+0x330>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f7f8 fa97 	bl	800029c <__adddf3>
 8007d6e:	4632      	mov	r2, r6
 8007d70:	463b      	mov	r3, r7
 8007d72:	f7f8 fc49 	bl	8000608 <__aeabi_dmul>
 8007d76:	a35a      	add	r3, pc, #360	; (adr r3, 8007ee0 <__ieee754_log+0x338>)
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	f7f8 fa8e 	bl	800029c <__adddf3>
 8007d80:	4642      	mov	r2, r8
 8007d82:	464b      	mov	r3, r9
 8007d84:	f7f8 fc40 	bl	8000608 <__aeabi_dmul>
 8007d88:	a357      	add	r3, pc, #348	; (adr r3, 8007ee8 <__ieee754_log+0x340>)
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	4680      	mov	r8, r0
 8007d90:	4689      	mov	r9, r1
 8007d92:	4630      	mov	r0, r6
 8007d94:	4639      	mov	r1, r7
 8007d96:	f7f8 fc37 	bl	8000608 <__aeabi_dmul>
 8007d9a:	a355      	add	r3, pc, #340	; (adr r3, 8007ef0 <__ieee754_log+0x348>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fa7c 	bl	800029c <__adddf3>
 8007da4:	4632      	mov	r2, r6
 8007da6:	463b      	mov	r3, r7
 8007da8:	f7f8 fc2e 	bl	8000608 <__aeabi_dmul>
 8007dac:	a352      	add	r3, pc, #328	; (adr r3, 8007ef8 <__ieee754_log+0x350>)
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f7f8 fa73 	bl	800029c <__adddf3>
 8007db6:	4632      	mov	r2, r6
 8007db8:	463b      	mov	r3, r7
 8007dba:	f7f8 fc25 	bl	8000608 <__aeabi_dmul>
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	f7f8 fa69 	bl	800029c <__adddf3>
 8007dca:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007dce:	9b01      	ldr	r3, [sp, #4]
 8007dd0:	3551      	adds	r5, #81	; 0x51
 8007dd2:	431d      	orrs	r5, r3
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	4689      	mov	r9, r1
 8007dda:	dd48      	ble.n	8007e6e <__ieee754_log+0x2c6>
 8007ddc:	4b4e      	ldr	r3, [pc, #312]	; (8007f18 <__ieee754_log+0x370>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	4650      	mov	r0, sl
 8007de2:	4659      	mov	r1, fp
 8007de4:	f7f8 fc10 	bl	8000608 <__aeabi_dmul>
 8007de8:	4652      	mov	r2, sl
 8007dea:	465b      	mov	r3, fp
 8007dec:	f7f8 fc0c 	bl	8000608 <__aeabi_dmul>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4606      	mov	r6, r0
 8007df6:	460f      	mov	r7, r1
 8007df8:	4640      	mov	r0, r8
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	f7f8 fa4e 	bl	800029c <__adddf3>
 8007e00:	ec53 2b18 	vmov	r2, r3, d8
 8007e04:	f7f8 fc00 	bl	8000608 <__aeabi_dmul>
 8007e08:	4680      	mov	r8, r0
 8007e0a:	4689      	mov	r9, r1
 8007e0c:	b964      	cbnz	r4, 8007e28 <__ieee754_log+0x280>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4630      	mov	r0, r6
 8007e14:	4639      	mov	r1, r7
 8007e16:	f7f8 fa3f 	bl	8000298 <__aeabi_dsub>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4650      	mov	r0, sl
 8007e20:	4659      	mov	r1, fp
 8007e22:	f7f8 fa39 	bl	8000298 <__aeabi_dsub>
 8007e26:	e6d6      	b.n	8007bd6 <__ieee754_log+0x2e>
 8007e28:	a321      	add	r3, pc, #132	; (adr r3, 8007eb0 <__ieee754_log+0x308>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	ec51 0b19 	vmov	r0, r1, d9
 8007e32:	f7f8 fbe9 	bl	8000608 <__aeabi_dmul>
 8007e36:	a320      	add	r3, pc, #128	; (adr r3, 8007eb8 <__ieee754_log+0x310>)
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	460d      	mov	r5, r1
 8007e40:	ec51 0b19 	vmov	r0, r1, d9
 8007e44:	f7f8 fbe0 	bl	8000608 <__aeabi_dmul>
 8007e48:	4642      	mov	r2, r8
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	f7f8 fa26 	bl	800029c <__adddf3>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4630      	mov	r0, r6
 8007e56:	4639      	mov	r1, r7
 8007e58:	f7f8 fa1e 	bl	8000298 <__aeabi_dsub>
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	465b      	mov	r3, fp
 8007e60:	f7f8 fa1a 	bl	8000298 <__aeabi_dsub>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4620      	mov	r0, r4
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	e7d9      	b.n	8007e22 <__ieee754_log+0x27a>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4650      	mov	r0, sl
 8007e74:	4659      	mov	r1, fp
 8007e76:	f7f8 fa0f 	bl	8000298 <__aeabi_dsub>
 8007e7a:	ec53 2b18 	vmov	r2, r3, d8
 8007e7e:	f7f8 fbc3 	bl	8000608 <__aeabi_dmul>
 8007e82:	4606      	mov	r6, r0
 8007e84:	460f      	mov	r7, r1
 8007e86:	2c00      	cmp	r4, #0
 8007e88:	f43f af23 	beq.w	8007cd2 <__ieee754_log+0x12a>
 8007e8c:	a308      	add	r3, pc, #32	; (adr r3, 8007eb0 <__ieee754_log+0x308>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	ec51 0b19 	vmov	r0, r1, d9
 8007e96:	f7f8 fbb7 	bl	8000608 <__aeabi_dmul>
 8007e9a:	a307      	add	r3, pc, #28	; (adr r3, 8007eb8 <__ieee754_log+0x310>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	460d      	mov	r5, r1
 8007ea4:	ec51 0b19 	vmov	r0, r1, d9
 8007ea8:	e727      	b.n	8007cfa <__ieee754_log+0x152>
 8007eaa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007f00 <__ieee754_log+0x358>
 8007eae:	e694      	b.n	8007bda <__ieee754_log+0x32>
 8007eb0:	fee00000 	.word	0xfee00000
 8007eb4:	3fe62e42 	.word	0x3fe62e42
 8007eb8:	35793c76 	.word	0x35793c76
 8007ebc:	3dea39ef 	.word	0x3dea39ef
 8007ec0:	55555555 	.word	0x55555555
 8007ec4:	3fd55555 	.word	0x3fd55555
 8007ec8:	df3e5244 	.word	0xdf3e5244
 8007ecc:	3fc2f112 	.word	0x3fc2f112
 8007ed0:	96cb03de 	.word	0x96cb03de
 8007ed4:	3fc74664 	.word	0x3fc74664
 8007ed8:	94229359 	.word	0x94229359
 8007edc:	3fd24924 	.word	0x3fd24924
 8007ee0:	55555593 	.word	0x55555593
 8007ee4:	3fe55555 	.word	0x3fe55555
 8007ee8:	d078c69f 	.word	0xd078c69f
 8007eec:	3fc39a09 	.word	0x3fc39a09
 8007ef0:	1d8e78af 	.word	0x1d8e78af
 8007ef4:	3fcc71c5 	.word	0x3fcc71c5
 8007ef8:	9997fa04 	.word	0x9997fa04
 8007efc:	3fd99999 	.word	0x3fd99999
	...
 8007f08:	c3500000 	.word	0xc3500000
 8007f0c:	43500000 	.word	0x43500000
 8007f10:	7fefffff 	.word	0x7fefffff
 8007f14:	3ff00000 	.word	0x3ff00000
 8007f18:	3fe00000 	.word	0x3fe00000

08007f1c <__ieee754_sqrt>:
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	ec55 4b10 	vmov	r4, r5, d0
 8007f24:	4e55      	ldr	r6, [pc, #340]	; (800807c <__ieee754_sqrt+0x160>)
 8007f26:	43ae      	bics	r6, r5
 8007f28:	ee10 0a10 	vmov	r0, s0
 8007f2c:	ee10 3a10 	vmov	r3, s0
 8007f30:	462a      	mov	r2, r5
 8007f32:	4629      	mov	r1, r5
 8007f34:	d110      	bne.n	8007f58 <__ieee754_sqrt+0x3c>
 8007f36:	ee10 2a10 	vmov	r2, s0
 8007f3a:	462b      	mov	r3, r5
 8007f3c:	f7f8 fb64 	bl	8000608 <__aeabi_dmul>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 f9a8 	bl	800029c <__adddf3>
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	460d      	mov	r5, r1
 8007f50:	ec45 4b10 	vmov	d0, r4, r5
 8007f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	dc10      	bgt.n	8007f7e <__ieee754_sqrt+0x62>
 8007f5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007f60:	4330      	orrs	r0, r6
 8007f62:	d0f5      	beq.n	8007f50 <__ieee754_sqrt+0x34>
 8007f64:	b15d      	cbz	r5, 8007f7e <__ieee754_sqrt+0x62>
 8007f66:	ee10 2a10 	vmov	r2, s0
 8007f6a:	462b      	mov	r3, r5
 8007f6c:	ee10 0a10 	vmov	r0, s0
 8007f70:	f7f8 f992 	bl	8000298 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	f7f8 fc70 	bl	800085c <__aeabi_ddiv>
 8007f7c:	e7e6      	b.n	8007f4c <__ieee754_sqrt+0x30>
 8007f7e:	1512      	asrs	r2, r2, #20
 8007f80:	d074      	beq.n	800806c <__ieee754_sqrt+0x150>
 8007f82:	07d4      	lsls	r4, r2, #31
 8007f84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007f88:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007f8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007f90:	bf5e      	ittt	pl
 8007f92:	0fda      	lsrpl	r2, r3, #31
 8007f94:	005b      	lslpl	r3, r3, #1
 8007f96:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007f9a:	2400      	movs	r4, #0
 8007f9c:	0fda      	lsrs	r2, r3, #31
 8007f9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007fa2:	107f      	asrs	r7, r7, #1
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	2516      	movs	r5, #22
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007fae:	1886      	adds	r6, r0, r2
 8007fb0:	428e      	cmp	r6, r1
 8007fb2:	bfde      	ittt	le
 8007fb4:	1b89      	suble	r1, r1, r6
 8007fb6:	18b0      	addle	r0, r6, r2
 8007fb8:	18a4      	addle	r4, r4, r2
 8007fba:	0049      	lsls	r1, r1, #1
 8007fbc:	3d01      	subs	r5, #1
 8007fbe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007fc2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007fc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007fca:	d1f0      	bne.n	8007fae <__ieee754_sqrt+0x92>
 8007fcc:	462a      	mov	r2, r5
 8007fce:	f04f 0e20 	mov.w	lr, #32
 8007fd2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007fd6:	4281      	cmp	r1, r0
 8007fd8:	eb06 0c05 	add.w	ip, r6, r5
 8007fdc:	dc02      	bgt.n	8007fe4 <__ieee754_sqrt+0xc8>
 8007fde:	d113      	bne.n	8008008 <__ieee754_sqrt+0xec>
 8007fe0:	459c      	cmp	ip, r3
 8007fe2:	d811      	bhi.n	8008008 <__ieee754_sqrt+0xec>
 8007fe4:	f1bc 0f00 	cmp.w	ip, #0
 8007fe8:	eb0c 0506 	add.w	r5, ip, r6
 8007fec:	da43      	bge.n	8008076 <__ieee754_sqrt+0x15a>
 8007fee:	2d00      	cmp	r5, #0
 8007ff0:	db41      	blt.n	8008076 <__ieee754_sqrt+0x15a>
 8007ff2:	f100 0801 	add.w	r8, r0, #1
 8007ff6:	1a09      	subs	r1, r1, r0
 8007ff8:	459c      	cmp	ip, r3
 8007ffa:	bf88      	it	hi
 8007ffc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008000:	eba3 030c 	sub.w	r3, r3, ip
 8008004:	4432      	add	r2, r6
 8008006:	4640      	mov	r0, r8
 8008008:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800800c:	f1be 0e01 	subs.w	lr, lr, #1
 8008010:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008014:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008018:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800801c:	d1db      	bne.n	8007fd6 <__ieee754_sqrt+0xba>
 800801e:	430b      	orrs	r3, r1
 8008020:	d006      	beq.n	8008030 <__ieee754_sqrt+0x114>
 8008022:	1c50      	adds	r0, r2, #1
 8008024:	bf13      	iteet	ne
 8008026:	3201      	addne	r2, #1
 8008028:	3401      	addeq	r4, #1
 800802a:	4672      	moveq	r2, lr
 800802c:	f022 0201 	bicne.w	r2, r2, #1
 8008030:	1063      	asrs	r3, r4, #1
 8008032:	0852      	lsrs	r2, r2, #1
 8008034:	07e1      	lsls	r1, r4, #31
 8008036:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800803a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800803e:	bf48      	it	mi
 8008040:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008044:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008048:	4614      	mov	r4, r2
 800804a:	e781      	b.n	8007f50 <__ieee754_sqrt+0x34>
 800804c:	0ad9      	lsrs	r1, r3, #11
 800804e:	3815      	subs	r0, #21
 8008050:	055b      	lsls	r3, r3, #21
 8008052:	2900      	cmp	r1, #0
 8008054:	d0fa      	beq.n	800804c <__ieee754_sqrt+0x130>
 8008056:	02cd      	lsls	r5, r1, #11
 8008058:	d50a      	bpl.n	8008070 <__ieee754_sqrt+0x154>
 800805a:	f1c2 0420 	rsb	r4, r2, #32
 800805e:	fa23 f404 	lsr.w	r4, r3, r4
 8008062:	1e55      	subs	r5, r2, #1
 8008064:	4093      	lsls	r3, r2
 8008066:	4321      	orrs	r1, r4
 8008068:	1b42      	subs	r2, r0, r5
 800806a:	e78a      	b.n	8007f82 <__ieee754_sqrt+0x66>
 800806c:	4610      	mov	r0, r2
 800806e:	e7f0      	b.n	8008052 <__ieee754_sqrt+0x136>
 8008070:	0049      	lsls	r1, r1, #1
 8008072:	3201      	adds	r2, #1
 8008074:	e7ef      	b.n	8008056 <__ieee754_sqrt+0x13a>
 8008076:	4680      	mov	r8, r0
 8008078:	e7bd      	b.n	8007ff6 <__ieee754_sqrt+0xda>
 800807a:	bf00      	nop
 800807c:	7ff00000 	.word	0x7ff00000

08008080 <nan>:
 8008080:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008088 <nan+0x8>
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	00000000 	.word	0x00000000
 800808c:	7ff80000 	.word	0x7ff80000

08008090 <_init>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr

0800809c <_fini>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	bf00      	nop
 80080a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a2:	bc08      	pop	{r3}
 80080a4:	469e      	mov	lr, r3
 80080a6:	4770      	bx	lr
