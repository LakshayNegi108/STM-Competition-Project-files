
f070_MAX30102_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  080080b0  080080b0  000180b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800870c  0800870c  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  0800870c  0800870c  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800870c  0800870c  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800870c  0800870c  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08008714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000220  08008934  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08008934  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007656  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eed  00000000  00000000  0002789e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  00029790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  00029f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d74  00000000  00000000  0002a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aadc  00000000  00000000  0003d34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063f2f  00000000  00000000  00047e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000abd57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a94  00000000  00000000  000abda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000220 	.word	0x20000220
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008098 	.word	0x08008098

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000224 	.word	0x20000224
 8000104:	08008098 	.word	0x08008098

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff2b 	bl	8001298 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe7b 	bl	8001148 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff1d 	bl	8001298 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff13 	bl	8001298 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fea3 	bl	80011cc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe99 	bl	80011cc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fd6b 	bl	8001f98 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 f9b4 	bl	8001838 <__aeabi_dsub>
 80004d0:	f001 fd62 	bl	8001f98 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_dadd>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	464f      	mov	r7, r9
 80004e8:	4646      	mov	r6, r8
 80004ea:	46d6      	mov	lr, sl
 80004ec:	000d      	movs	r5, r1
 80004ee:	0004      	movs	r4, r0
 80004f0:	b5c0      	push	{r6, r7, lr}
 80004f2:	001f      	movs	r7, r3
 80004f4:	0011      	movs	r1, r2
 80004f6:	0328      	lsls	r0, r5, #12
 80004f8:	0f62      	lsrs	r2, r4, #29
 80004fa:	0a40      	lsrs	r0, r0, #9
 80004fc:	4310      	orrs	r0, r2
 80004fe:	007a      	lsls	r2, r7, #1
 8000500:	0d52      	lsrs	r2, r2, #21
 8000502:	00e3      	lsls	r3, r4, #3
 8000504:	033c      	lsls	r4, r7, #12
 8000506:	4691      	mov	r9, r2
 8000508:	0a64      	lsrs	r4, r4, #9
 800050a:	0ffa      	lsrs	r2, r7, #31
 800050c:	0f4f      	lsrs	r7, r1, #29
 800050e:	006e      	lsls	r6, r5, #1
 8000510:	4327      	orrs	r7, r4
 8000512:	4692      	mov	sl, r2
 8000514:	46b8      	mov	r8, r7
 8000516:	0d76      	lsrs	r6, r6, #21
 8000518:	0fed      	lsrs	r5, r5, #31
 800051a:	00c9      	lsls	r1, r1, #3
 800051c:	4295      	cmp	r5, r2
 800051e:	d100      	bne.n	8000522 <__aeabi_dadd+0x3e>
 8000520:	e099      	b.n	8000656 <__aeabi_dadd+0x172>
 8000522:	464c      	mov	r4, r9
 8000524:	1b34      	subs	r4, r6, r4
 8000526:	46a4      	mov	ip, r4
 8000528:	2c00      	cmp	r4, #0
 800052a:	dc00      	bgt.n	800052e <__aeabi_dadd+0x4a>
 800052c:	e07c      	b.n	8000628 <__aeabi_dadd+0x144>
 800052e:	464a      	mov	r2, r9
 8000530:	2a00      	cmp	r2, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_dadd+0x52>
 8000534:	e0b8      	b.n	80006a8 <__aeabi_dadd+0x1c4>
 8000536:	4ac5      	ldr	r2, [pc, #788]	; (800084c <__aeabi_dadd+0x368>)
 8000538:	4296      	cmp	r6, r2
 800053a:	d100      	bne.n	800053e <__aeabi_dadd+0x5a>
 800053c:	e11c      	b.n	8000778 <__aeabi_dadd+0x294>
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	003c      	movs	r4, r7
 8000542:	0412      	lsls	r2, r2, #16
 8000544:	4314      	orrs	r4, r2
 8000546:	46a0      	mov	r8, r4
 8000548:	4662      	mov	r2, ip
 800054a:	2a38      	cmp	r2, #56	; 0x38
 800054c:	dd00      	ble.n	8000550 <__aeabi_dadd+0x6c>
 800054e:	e161      	b.n	8000814 <__aeabi_dadd+0x330>
 8000550:	2a1f      	cmp	r2, #31
 8000552:	dd00      	ble.n	8000556 <__aeabi_dadd+0x72>
 8000554:	e1cc      	b.n	80008f0 <__aeabi_dadd+0x40c>
 8000556:	4664      	mov	r4, ip
 8000558:	2220      	movs	r2, #32
 800055a:	1b12      	subs	r2, r2, r4
 800055c:	4644      	mov	r4, r8
 800055e:	4094      	lsls	r4, r2
 8000560:	000f      	movs	r7, r1
 8000562:	46a1      	mov	r9, r4
 8000564:	4664      	mov	r4, ip
 8000566:	4091      	lsls	r1, r2
 8000568:	40e7      	lsrs	r7, r4
 800056a:	464c      	mov	r4, r9
 800056c:	1e4a      	subs	r2, r1, #1
 800056e:	4191      	sbcs	r1, r2
 8000570:	433c      	orrs	r4, r7
 8000572:	4642      	mov	r2, r8
 8000574:	4321      	orrs	r1, r4
 8000576:	4664      	mov	r4, ip
 8000578:	40e2      	lsrs	r2, r4
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	1a5c      	subs	r4, r3, r1
 800057e:	42a3      	cmp	r3, r4
 8000580:	419b      	sbcs	r3, r3
 8000582:	425f      	negs	r7, r3
 8000584:	1bc7      	subs	r7, r0, r7
 8000586:	023b      	lsls	r3, r7, #8
 8000588:	d400      	bmi.n	800058c <__aeabi_dadd+0xa8>
 800058a:	e0d0      	b.n	800072e <__aeabi_dadd+0x24a>
 800058c:	027f      	lsls	r7, r7, #9
 800058e:	0a7f      	lsrs	r7, r7, #9
 8000590:	2f00      	cmp	r7, #0
 8000592:	d100      	bne.n	8000596 <__aeabi_dadd+0xb2>
 8000594:	e0ff      	b.n	8000796 <__aeabi_dadd+0x2b2>
 8000596:	0038      	movs	r0, r7
 8000598:	f001 fd8a 	bl	80020b0 <__clzsi2>
 800059c:	0001      	movs	r1, r0
 800059e:	3908      	subs	r1, #8
 80005a0:	2320      	movs	r3, #32
 80005a2:	0022      	movs	r2, r4
 80005a4:	1a5b      	subs	r3, r3, r1
 80005a6:	408f      	lsls	r7, r1
 80005a8:	40da      	lsrs	r2, r3
 80005aa:	408c      	lsls	r4, r1
 80005ac:	4317      	orrs	r7, r2
 80005ae:	42b1      	cmp	r1, r6
 80005b0:	da00      	bge.n	80005b4 <__aeabi_dadd+0xd0>
 80005b2:	e0ff      	b.n	80007b4 <__aeabi_dadd+0x2d0>
 80005b4:	1b89      	subs	r1, r1, r6
 80005b6:	1c4b      	adds	r3, r1, #1
 80005b8:	2b1f      	cmp	r3, #31
 80005ba:	dd00      	ble.n	80005be <__aeabi_dadd+0xda>
 80005bc:	e0a8      	b.n	8000710 <__aeabi_dadd+0x22c>
 80005be:	2220      	movs	r2, #32
 80005c0:	0039      	movs	r1, r7
 80005c2:	1ad2      	subs	r2, r2, r3
 80005c4:	0020      	movs	r0, r4
 80005c6:	4094      	lsls	r4, r2
 80005c8:	4091      	lsls	r1, r2
 80005ca:	40d8      	lsrs	r0, r3
 80005cc:	1e62      	subs	r2, r4, #1
 80005ce:	4194      	sbcs	r4, r2
 80005d0:	40df      	lsrs	r7, r3
 80005d2:	2600      	movs	r6, #0
 80005d4:	4301      	orrs	r1, r0
 80005d6:	430c      	orrs	r4, r1
 80005d8:	0763      	lsls	r3, r4, #29
 80005da:	d009      	beq.n	80005f0 <__aeabi_dadd+0x10c>
 80005dc:	230f      	movs	r3, #15
 80005de:	4023      	ands	r3, r4
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d005      	beq.n	80005f0 <__aeabi_dadd+0x10c>
 80005e4:	1d23      	adds	r3, r4, #4
 80005e6:	42a3      	cmp	r3, r4
 80005e8:	41a4      	sbcs	r4, r4
 80005ea:	4264      	negs	r4, r4
 80005ec:	193f      	adds	r7, r7, r4
 80005ee:	001c      	movs	r4, r3
 80005f0:	023b      	lsls	r3, r7, #8
 80005f2:	d400      	bmi.n	80005f6 <__aeabi_dadd+0x112>
 80005f4:	e09e      	b.n	8000734 <__aeabi_dadd+0x250>
 80005f6:	4b95      	ldr	r3, [pc, #596]	; (800084c <__aeabi_dadd+0x368>)
 80005f8:	3601      	adds	r6, #1
 80005fa:	429e      	cmp	r6, r3
 80005fc:	d100      	bne.n	8000600 <__aeabi_dadd+0x11c>
 80005fe:	e0b7      	b.n	8000770 <__aeabi_dadd+0x28c>
 8000600:	4a93      	ldr	r2, [pc, #588]	; (8000850 <__aeabi_dadd+0x36c>)
 8000602:	08e4      	lsrs	r4, r4, #3
 8000604:	4017      	ands	r7, r2
 8000606:	077b      	lsls	r3, r7, #29
 8000608:	0571      	lsls	r1, r6, #21
 800060a:	027f      	lsls	r7, r7, #9
 800060c:	4323      	orrs	r3, r4
 800060e:	0b3f      	lsrs	r7, r7, #12
 8000610:	0d4a      	lsrs	r2, r1, #21
 8000612:	0512      	lsls	r2, r2, #20
 8000614:	433a      	orrs	r2, r7
 8000616:	07ed      	lsls	r5, r5, #31
 8000618:	432a      	orrs	r2, r5
 800061a:	0018      	movs	r0, r3
 800061c:	0011      	movs	r1, r2
 800061e:	bce0      	pop	{r5, r6, r7}
 8000620:	46ba      	mov	sl, r7
 8000622:	46b1      	mov	r9, r6
 8000624:	46a8      	mov	r8, r5
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	2c00      	cmp	r4, #0
 800062a:	d04b      	beq.n	80006c4 <__aeabi_dadd+0x1e0>
 800062c:	464c      	mov	r4, r9
 800062e:	1ba4      	subs	r4, r4, r6
 8000630:	46a4      	mov	ip, r4
 8000632:	2e00      	cmp	r6, #0
 8000634:	d000      	beq.n	8000638 <__aeabi_dadd+0x154>
 8000636:	e123      	b.n	8000880 <__aeabi_dadd+0x39c>
 8000638:	0004      	movs	r4, r0
 800063a:	431c      	orrs	r4, r3
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x15c>
 800063e:	e1af      	b.n	80009a0 <__aeabi_dadd+0x4bc>
 8000640:	4662      	mov	r2, ip
 8000642:	1e54      	subs	r4, r2, #1
 8000644:	2a01      	cmp	r2, #1
 8000646:	d100      	bne.n	800064a <__aeabi_dadd+0x166>
 8000648:	e215      	b.n	8000a76 <__aeabi_dadd+0x592>
 800064a:	4d80      	ldr	r5, [pc, #512]	; (800084c <__aeabi_dadd+0x368>)
 800064c:	45ac      	cmp	ip, r5
 800064e:	d100      	bne.n	8000652 <__aeabi_dadd+0x16e>
 8000650:	e1c8      	b.n	80009e4 <__aeabi_dadd+0x500>
 8000652:	46a4      	mov	ip, r4
 8000654:	e11b      	b.n	800088e <__aeabi_dadd+0x3aa>
 8000656:	464a      	mov	r2, r9
 8000658:	1ab2      	subs	r2, r6, r2
 800065a:	4694      	mov	ip, r2
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x17e>
 8000660:	e0ac      	b.n	80007bc <__aeabi_dadd+0x2d8>
 8000662:	464a      	mov	r2, r9
 8000664:	2a00      	cmp	r2, #0
 8000666:	d043      	beq.n	80006f0 <__aeabi_dadd+0x20c>
 8000668:	4a78      	ldr	r2, [pc, #480]	; (800084c <__aeabi_dadd+0x368>)
 800066a:	4296      	cmp	r6, r2
 800066c:	d100      	bne.n	8000670 <__aeabi_dadd+0x18c>
 800066e:	e1af      	b.n	80009d0 <__aeabi_dadd+0x4ec>
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	003c      	movs	r4, r7
 8000674:	0412      	lsls	r2, r2, #16
 8000676:	4314      	orrs	r4, r2
 8000678:	46a0      	mov	r8, r4
 800067a:	4662      	mov	r2, ip
 800067c:	2a38      	cmp	r2, #56	; 0x38
 800067e:	dc67      	bgt.n	8000750 <__aeabi_dadd+0x26c>
 8000680:	2a1f      	cmp	r2, #31
 8000682:	dc00      	bgt.n	8000686 <__aeabi_dadd+0x1a2>
 8000684:	e15f      	b.n	8000946 <__aeabi_dadd+0x462>
 8000686:	4647      	mov	r7, r8
 8000688:	3a20      	subs	r2, #32
 800068a:	40d7      	lsrs	r7, r2
 800068c:	4662      	mov	r2, ip
 800068e:	2a20      	cmp	r2, #32
 8000690:	d005      	beq.n	800069e <__aeabi_dadd+0x1ba>
 8000692:	4664      	mov	r4, ip
 8000694:	2240      	movs	r2, #64	; 0x40
 8000696:	1b12      	subs	r2, r2, r4
 8000698:	4644      	mov	r4, r8
 800069a:	4094      	lsls	r4, r2
 800069c:	4321      	orrs	r1, r4
 800069e:	1e4a      	subs	r2, r1, #1
 80006a0:	4191      	sbcs	r1, r2
 80006a2:	000c      	movs	r4, r1
 80006a4:	433c      	orrs	r4, r7
 80006a6:	e057      	b.n	8000758 <__aeabi_dadd+0x274>
 80006a8:	003a      	movs	r2, r7
 80006aa:	430a      	orrs	r2, r1
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dadd+0x1cc>
 80006ae:	e105      	b.n	80008bc <__aeabi_dadd+0x3d8>
 80006b0:	0022      	movs	r2, r4
 80006b2:	3a01      	subs	r2, #1
 80006b4:	2c01      	cmp	r4, #1
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x1d6>
 80006b8:	e182      	b.n	80009c0 <__aeabi_dadd+0x4dc>
 80006ba:	4c64      	ldr	r4, [pc, #400]	; (800084c <__aeabi_dadd+0x368>)
 80006bc:	45a4      	cmp	ip, r4
 80006be:	d05b      	beq.n	8000778 <__aeabi_dadd+0x294>
 80006c0:	4694      	mov	ip, r2
 80006c2:	e741      	b.n	8000548 <__aeabi_dadd+0x64>
 80006c4:	4c63      	ldr	r4, [pc, #396]	; (8000854 <__aeabi_dadd+0x370>)
 80006c6:	1c77      	adds	r7, r6, #1
 80006c8:	4227      	tst	r7, r4
 80006ca:	d000      	beq.n	80006ce <__aeabi_dadd+0x1ea>
 80006cc:	e0c4      	b.n	8000858 <__aeabi_dadd+0x374>
 80006ce:	0004      	movs	r4, r0
 80006d0:	431c      	orrs	r4, r3
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_dadd+0x1f4>
 80006d6:	e169      	b.n	80009ac <__aeabi_dadd+0x4c8>
 80006d8:	2c00      	cmp	r4, #0
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x1fa>
 80006dc:	e1bf      	b.n	8000a5e <__aeabi_dadd+0x57a>
 80006de:	4644      	mov	r4, r8
 80006e0:	430c      	orrs	r4, r1
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x202>
 80006e4:	e1d0      	b.n	8000a88 <__aeabi_dadd+0x5a4>
 80006e6:	0742      	lsls	r2, r0, #29
 80006e8:	08db      	lsrs	r3, r3, #3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	08c0      	lsrs	r0, r0, #3
 80006ee:	e029      	b.n	8000744 <__aeabi_dadd+0x260>
 80006f0:	003a      	movs	r2, r7
 80006f2:	430a      	orrs	r2, r1
 80006f4:	d100      	bne.n	80006f8 <__aeabi_dadd+0x214>
 80006f6:	e170      	b.n	80009da <__aeabi_dadd+0x4f6>
 80006f8:	4662      	mov	r2, ip
 80006fa:	4664      	mov	r4, ip
 80006fc:	3a01      	subs	r2, #1
 80006fe:	2c01      	cmp	r4, #1
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x220>
 8000702:	e0e0      	b.n	80008c6 <__aeabi_dadd+0x3e2>
 8000704:	4c51      	ldr	r4, [pc, #324]	; (800084c <__aeabi_dadd+0x368>)
 8000706:	45a4      	cmp	ip, r4
 8000708:	d100      	bne.n	800070c <__aeabi_dadd+0x228>
 800070a:	e161      	b.n	80009d0 <__aeabi_dadd+0x4ec>
 800070c:	4694      	mov	ip, r2
 800070e:	e7b4      	b.n	800067a <__aeabi_dadd+0x196>
 8000710:	003a      	movs	r2, r7
 8000712:	391f      	subs	r1, #31
 8000714:	40ca      	lsrs	r2, r1
 8000716:	0011      	movs	r1, r2
 8000718:	2b20      	cmp	r3, #32
 800071a:	d003      	beq.n	8000724 <__aeabi_dadd+0x240>
 800071c:	2240      	movs	r2, #64	; 0x40
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	409f      	lsls	r7, r3
 8000722:	433c      	orrs	r4, r7
 8000724:	1e63      	subs	r3, r4, #1
 8000726:	419c      	sbcs	r4, r3
 8000728:	2700      	movs	r7, #0
 800072a:	2600      	movs	r6, #0
 800072c:	430c      	orrs	r4, r1
 800072e:	0763      	lsls	r3, r4, #29
 8000730:	d000      	beq.n	8000734 <__aeabi_dadd+0x250>
 8000732:	e753      	b.n	80005dc <__aeabi_dadd+0xf8>
 8000734:	46b4      	mov	ip, r6
 8000736:	08e4      	lsrs	r4, r4, #3
 8000738:	077b      	lsls	r3, r7, #29
 800073a:	4323      	orrs	r3, r4
 800073c:	08f8      	lsrs	r0, r7, #3
 800073e:	4a43      	ldr	r2, [pc, #268]	; (800084c <__aeabi_dadd+0x368>)
 8000740:	4594      	cmp	ip, r2
 8000742:	d01d      	beq.n	8000780 <__aeabi_dadd+0x29c>
 8000744:	4662      	mov	r2, ip
 8000746:	0307      	lsls	r7, r0, #12
 8000748:	0552      	lsls	r2, r2, #21
 800074a:	0b3f      	lsrs	r7, r7, #12
 800074c:	0d52      	lsrs	r2, r2, #21
 800074e:	e760      	b.n	8000612 <__aeabi_dadd+0x12e>
 8000750:	4644      	mov	r4, r8
 8000752:	430c      	orrs	r4, r1
 8000754:	1e62      	subs	r2, r4, #1
 8000756:	4194      	sbcs	r4, r2
 8000758:	18e4      	adds	r4, r4, r3
 800075a:	429c      	cmp	r4, r3
 800075c:	419b      	sbcs	r3, r3
 800075e:	425f      	negs	r7, r3
 8000760:	183f      	adds	r7, r7, r0
 8000762:	023b      	lsls	r3, r7, #8
 8000764:	d5e3      	bpl.n	800072e <__aeabi_dadd+0x24a>
 8000766:	4b39      	ldr	r3, [pc, #228]	; (800084c <__aeabi_dadd+0x368>)
 8000768:	3601      	adds	r6, #1
 800076a:	429e      	cmp	r6, r3
 800076c:	d000      	beq.n	8000770 <__aeabi_dadd+0x28c>
 800076e:	e0b5      	b.n	80008dc <__aeabi_dadd+0x3f8>
 8000770:	0032      	movs	r2, r6
 8000772:	2700      	movs	r7, #0
 8000774:	2300      	movs	r3, #0
 8000776:	e74c      	b.n	8000612 <__aeabi_dadd+0x12e>
 8000778:	0742      	lsls	r2, r0, #29
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	4313      	orrs	r3, r2
 800077e:	08c0      	lsrs	r0, r0, #3
 8000780:	001a      	movs	r2, r3
 8000782:	4302      	orrs	r2, r0
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0x2a4>
 8000786:	e1e1      	b.n	8000b4c <__aeabi_dadd+0x668>
 8000788:	2780      	movs	r7, #128	; 0x80
 800078a:	033f      	lsls	r7, r7, #12
 800078c:	4307      	orrs	r7, r0
 800078e:	033f      	lsls	r7, r7, #12
 8000790:	4a2e      	ldr	r2, [pc, #184]	; (800084c <__aeabi_dadd+0x368>)
 8000792:	0b3f      	lsrs	r7, r7, #12
 8000794:	e73d      	b.n	8000612 <__aeabi_dadd+0x12e>
 8000796:	0020      	movs	r0, r4
 8000798:	f001 fc8a 	bl	80020b0 <__clzsi2>
 800079c:	0001      	movs	r1, r0
 800079e:	3118      	adds	r1, #24
 80007a0:	291f      	cmp	r1, #31
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_dadd+0x2c2>
 80007a4:	e6fc      	b.n	80005a0 <__aeabi_dadd+0xbc>
 80007a6:	3808      	subs	r0, #8
 80007a8:	4084      	lsls	r4, r0
 80007aa:	0027      	movs	r7, r4
 80007ac:	2400      	movs	r4, #0
 80007ae:	42b1      	cmp	r1, r6
 80007b0:	db00      	blt.n	80007b4 <__aeabi_dadd+0x2d0>
 80007b2:	e6ff      	b.n	80005b4 <__aeabi_dadd+0xd0>
 80007b4:	4a26      	ldr	r2, [pc, #152]	; (8000850 <__aeabi_dadd+0x36c>)
 80007b6:	1a76      	subs	r6, r6, r1
 80007b8:	4017      	ands	r7, r2
 80007ba:	e70d      	b.n	80005d8 <__aeabi_dadd+0xf4>
 80007bc:	2a00      	cmp	r2, #0
 80007be:	d02f      	beq.n	8000820 <__aeabi_dadd+0x33c>
 80007c0:	464a      	mov	r2, r9
 80007c2:	1b92      	subs	r2, r2, r6
 80007c4:	4694      	mov	ip, r2
 80007c6:	2e00      	cmp	r6, #0
 80007c8:	d100      	bne.n	80007cc <__aeabi_dadd+0x2e8>
 80007ca:	e0ad      	b.n	8000928 <__aeabi_dadd+0x444>
 80007cc:	4a1f      	ldr	r2, [pc, #124]	; (800084c <__aeabi_dadd+0x368>)
 80007ce:	4591      	cmp	r9, r2
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x2f0>
 80007d2:	e10f      	b.n	80009f4 <__aeabi_dadd+0x510>
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	0412      	lsls	r2, r2, #16
 80007d8:	4310      	orrs	r0, r2
 80007da:	4662      	mov	r2, ip
 80007dc:	2a38      	cmp	r2, #56	; 0x38
 80007de:	dd00      	ble.n	80007e2 <__aeabi_dadd+0x2fe>
 80007e0:	e10f      	b.n	8000a02 <__aeabi_dadd+0x51e>
 80007e2:	2a1f      	cmp	r2, #31
 80007e4:	dd00      	ble.n	80007e8 <__aeabi_dadd+0x304>
 80007e6:	e180      	b.n	8000aea <__aeabi_dadd+0x606>
 80007e8:	4664      	mov	r4, ip
 80007ea:	2220      	movs	r2, #32
 80007ec:	001e      	movs	r6, r3
 80007ee:	1b12      	subs	r2, r2, r4
 80007f0:	4667      	mov	r7, ip
 80007f2:	0004      	movs	r4, r0
 80007f4:	4093      	lsls	r3, r2
 80007f6:	4094      	lsls	r4, r2
 80007f8:	40fe      	lsrs	r6, r7
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	4193      	sbcs	r3, r2
 80007fe:	40f8      	lsrs	r0, r7
 8000800:	4334      	orrs	r4, r6
 8000802:	431c      	orrs	r4, r3
 8000804:	4480      	add	r8, r0
 8000806:	1864      	adds	r4, r4, r1
 8000808:	428c      	cmp	r4, r1
 800080a:	41bf      	sbcs	r7, r7
 800080c:	427f      	negs	r7, r7
 800080e:	464e      	mov	r6, r9
 8000810:	4447      	add	r7, r8
 8000812:	e7a6      	b.n	8000762 <__aeabi_dadd+0x27e>
 8000814:	4642      	mov	r2, r8
 8000816:	430a      	orrs	r2, r1
 8000818:	0011      	movs	r1, r2
 800081a:	1e4a      	subs	r2, r1, #1
 800081c:	4191      	sbcs	r1, r2
 800081e:	e6ad      	b.n	800057c <__aeabi_dadd+0x98>
 8000820:	4c0c      	ldr	r4, [pc, #48]	; (8000854 <__aeabi_dadd+0x370>)
 8000822:	1c72      	adds	r2, r6, #1
 8000824:	4222      	tst	r2, r4
 8000826:	d000      	beq.n	800082a <__aeabi_dadd+0x346>
 8000828:	e0a1      	b.n	800096e <__aeabi_dadd+0x48a>
 800082a:	0002      	movs	r2, r0
 800082c:	431a      	orrs	r2, r3
 800082e:	2e00      	cmp	r6, #0
 8000830:	d000      	beq.n	8000834 <__aeabi_dadd+0x350>
 8000832:	e0fa      	b.n	8000a2a <__aeabi_dadd+0x546>
 8000834:	2a00      	cmp	r2, #0
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x356>
 8000838:	e145      	b.n	8000ac6 <__aeabi_dadd+0x5e2>
 800083a:	003a      	movs	r2, r7
 800083c:	430a      	orrs	r2, r1
 800083e:	d000      	beq.n	8000842 <__aeabi_dadd+0x35e>
 8000840:	e146      	b.n	8000ad0 <__aeabi_dadd+0x5ec>
 8000842:	0742      	lsls	r2, r0, #29
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	4313      	orrs	r3, r2
 8000848:	08c0      	lsrs	r0, r0, #3
 800084a:	e77b      	b.n	8000744 <__aeabi_dadd+0x260>
 800084c:	000007ff 	.word	0x000007ff
 8000850:	ff7fffff 	.word	0xff7fffff
 8000854:	000007fe 	.word	0x000007fe
 8000858:	4647      	mov	r7, r8
 800085a:	1a5c      	subs	r4, r3, r1
 800085c:	1bc2      	subs	r2, r0, r7
 800085e:	42a3      	cmp	r3, r4
 8000860:	41bf      	sbcs	r7, r7
 8000862:	427f      	negs	r7, r7
 8000864:	46b9      	mov	r9, r7
 8000866:	0017      	movs	r7, r2
 8000868:	464a      	mov	r2, r9
 800086a:	1abf      	subs	r7, r7, r2
 800086c:	023a      	lsls	r2, r7, #8
 800086e:	d500      	bpl.n	8000872 <__aeabi_dadd+0x38e>
 8000870:	e08d      	b.n	800098e <__aeabi_dadd+0x4aa>
 8000872:	0023      	movs	r3, r4
 8000874:	433b      	orrs	r3, r7
 8000876:	d000      	beq.n	800087a <__aeabi_dadd+0x396>
 8000878:	e68a      	b.n	8000590 <__aeabi_dadd+0xac>
 800087a:	2000      	movs	r0, #0
 800087c:	2500      	movs	r5, #0
 800087e:	e761      	b.n	8000744 <__aeabi_dadd+0x260>
 8000880:	4cb4      	ldr	r4, [pc, #720]	; (8000b54 <__aeabi_dadd+0x670>)
 8000882:	45a1      	cmp	r9, r4
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x3a4>
 8000886:	e0ad      	b.n	80009e4 <__aeabi_dadd+0x500>
 8000888:	2480      	movs	r4, #128	; 0x80
 800088a:	0424      	lsls	r4, r4, #16
 800088c:	4320      	orrs	r0, r4
 800088e:	4664      	mov	r4, ip
 8000890:	2c38      	cmp	r4, #56	; 0x38
 8000892:	dc3d      	bgt.n	8000910 <__aeabi_dadd+0x42c>
 8000894:	4662      	mov	r2, ip
 8000896:	2c1f      	cmp	r4, #31
 8000898:	dd00      	ble.n	800089c <__aeabi_dadd+0x3b8>
 800089a:	e0b7      	b.n	8000a0c <__aeabi_dadd+0x528>
 800089c:	2520      	movs	r5, #32
 800089e:	001e      	movs	r6, r3
 80008a0:	1b2d      	subs	r5, r5, r4
 80008a2:	0004      	movs	r4, r0
 80008a4:	40ab      	lsls	r3, r5
 80008a6:	40ac      	lsls	r4, r5
 80008a8:	40d6      	lsrs	r6, r2
 80008aa:	40d0      	lsrs	r0, r2
 80008ac:	4642      	mov	r2, r8
 80008ae:	1e5d      	subs	r5, r3, #1
 80008b0:	41ab      	sbcs	r3, r5
 80008b2:	4334      	orrs	r4, r6
 80008b4:	1a12      	subs	r2, r2, r0
 80008b6:	4690      	mov	r8, r2
 80008b8:	4323      	orrs	r3, r4
 80008ba:	e02c      	b.n	8000916 <__aeabi_dadd+0x432>
 80008bc:	0742      	lsls	r2, r0, #29
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	08c0      	lsrs	r0, r0, #3
 80008c4:	e73b      	b.n	800073e <__aeabi_dadd+0x25a>
 80008c6:	185c      	adds	r4, r3, r1
 80008c8:	429c      	cmp	r4, r3
 80008ca:	419b      	sbcs	r3, r3
 80008cc:	4440      	add	r0, r8
 80008ce:	425b      	negs	r3, r3
 80008d0:	18c7      	adds	r7, r0, r3
 80008d2:	2601      	movs	r6, #1
 80008d4:	023b      	lsls	r3, r7, #8
 80008d6:	d400      	bmi.n	80008da <__aeabi_dadd+0x3f6>
 80008d8:	e729      	b.n	800072e <__aeabi_dadd+0x24a>
 80008da:	2602      	movs	r6, #2
 80008dc:	4a9e      	ldr	r2, [pc, #632]	; (8000b58 <__aeabi_dadd+0x674>)
 80008de:	0863      	lsrs	r3, r4, #1
 80008e0:	4017      	ands	r7, r2
 80008e2:	2201      	movs	r2, #1
 80008e4:	4014      	ands	r4, r2
 80008e6:	431c      	orrs	r4, r3
 80008e8:	07fb      	lsls	r3, r7, #31
 80008ea:	431c      	orrs	r4, r3
 80008ec:	087f      	lsrs	r7, r7, #1
 80008ee:	e673      	b.n	80005d8 <__aeabi_dadd+0xf4>
 80008f0:	4644      	mov	r4, r8
 80008f2:	3a20      	subs	r2, #32
 80008f4:	40d4      	lsrs	r4, r2
 80008f6:	4662      	mov	r2, ip
 80008f8:	2a20      	cmp	r2, #32
 80008fa:	d005      	beq.n	8000908 <__aeabi_dadd+0x424>
 80008fc:	4667      	mov	r7, ip
 80008fe:	2240      	movs	r2, #64	; 0x40
 8000900:	1bd2      	subs	r2, r2, r7
 8000902:	4647      	mov	r7, r8
 8000904:	4097      	lsls	r7, r2
 8000906:	4339      	orrs	r1, r7
 8000908:	1e4a      	subs	r2, r1, #1
 800090a:	4191      	sbcs	r1, r2
 800090c:	4321      	orrs	r1, r4
 800090e:	e635      	b.n	800057c <__aeabi_dadd+0x98>
 8000910:	4303      	orrs	r3, r0
 8000912:	1e58      	subs	r0, r3, #1
 8000914:	4183      	sbcs	r3, r0
 8000916:	1acc      	subs	r4, r1, r3
 8000918:	42a1      	cmp	r1, r4
 800091a:	41bf      	sbcs	r7, r7
 800091c:	4643      	mov	r3, r8
 800091e:	427f      	negs	r7, r7
 8000920:	4655      	mov	r5, sl
 8000922:	464e      	mov	r6, r9
 8000924:	1bdf      	subs	r7, r3, r7
 8000926:	e62e      	b.n	8000586 <__aeabi_dadd+0xa2>
 8000928:	0002      	movs	r2, r0
 800092a:	431a      	orrs	r2, r3
 800092c:	d100      	bne.n	8000930 <__aeabi_dadd+0x44c>
 800092e:	e0bd      	b.n	8000aac <__aeabi_dadd+0x5c8>
 8000930:	4662      	mov	r2, ip
 8000932:	4664      	mov	r4, ip
 8000934:	3a01      	subs	r2, #1
 8000936:	2c01      	cmp	r4, #1
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x458>
 800093a:	e0e5      	b.n	8000b08 <__aeabi_dadd+0x624>
 800093c:	4c85      	ldr	r4, [pc, #532]	; (8000b54 <__aeabi_dadd+0x670>)
 800093e:	45a4      	cmp	ip, r4
 8000940:	d058      	beq.n	80009f4 <__aeabi_dadd+0x510>
 8000942:	4694      	mov	ip, r2
 8000944:	e749      	b.n	80007da <__aeabi_dadd+0x2f6>
 8000946:	4664      	mov	r4, ip
 8000948:	2220      	movs	r2, #32
 800094a:	1b12      	subs	r2, r2, r4
 800094c:	4644      	mov	r4, r8
 800094e:	4094      	lsls	r4, r2
 8000950:	000f      	movs	r7, r1
 8000952:	46a1      	mov	r9, r4
 8000954:	4664      	mov	r4, ip
 8000956:	4091      	lsls	r1, r2
 8000958:	40e7      	lsrs	r7, r4
 800095a:	464c      	mov	r4, r9
 800095c:	1e4a      	subs	r2, r1, #1
 800095e:	4191      	sbcs	r1, r2
 8000960:	433c      	orrs	r4, r7
 8000962:	4642      	mov	r2, r8
 8000964:	430c      	orrs	r4, r1
 8000966:	4661      	mov	r1, ip
 8000968:	40ca      	lsrs	r2, r1
 800096a:	1880      	adds	r0, r0, r2
 800096c:	e6f4      	b.n	8000758 <__aeabi_dadd+0x274>
 800096e:	4c79      	ldr	r4, [pc, #484]	; (8000b54 <__aeabi_dadd+0x670>)
 8000970:	42a2      	cmp	r2, r4
 8000972:	d100      	bne.n	8000976 <__aeabi_dadd+0x492>
 8000974:	e6fd      	b.n	8000772 <__aeabi_dadd+0x28e>
 8000976:	1859      	adds	r1, r3, r1
 8000978:	4299      	cmp	r1, r3
 800097a:	419b      	sbcs	r3, r3
 800097c:	4440      	add	r0, r8
 800097e:	425f      	negs	r7, r3
 8000980:	19c7      	adds	r7, r0, r7
 8000982:	07fc      	lsls	r4, r7, #31
 8000984:	0849      	lsrs	r1, r1, #1
 8000986:	0016      	movs	r6, r2
 8000988:	430c      	orrs	r4, r1
 800098a:	087f      	lsrs	r7, r7, #1
 800098c:	e6cf      	b.n	800072e <__aeabi_dadd+0x24a>
 800098e:	1acc      	subs	r4, r1, r3
 8000990:	42a1      	cmp	r1, r4
 8000992:	41bf      	sbcs	r7, r7
 8000994:	4643      	mov	r3, r8
 8000996:	427f      	negs	r7, r7
 8000998:	1a18      	subs	r0, r3, r0
 800099a:	4655      	mov	r5, sl
 800099c:	1bc7      	subs	r7, r0, r7
 800099e:	e5f7      	b.n	8000590 <__aeabi_dadd+0xac>
 80009a0:	08c9      	lsrs	r1, r1, #3
 80009a2:	077b      	lsls	r3, r7, #29
 80009a4:	4655      	mov	r5, sl
 80009a6:	430b      	orrs	r3, r1
 80009a8:	08f8      	lsrs	r0, r7, #3
 80009aa:	e6c8      	b.n	800073e <__aeabi_dadd+0x25a>
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	d000      	beq.n	80009b2 <__aeabi_dadd+0x4ce>
 80009b0:	e081      	b.n	8000ab6 <__aeabi_dadd+0x5d2>
 80009b2:	4643      	mov	r3, r8
 80009b4:	430b      	orrs	r3, r1
 80009b6:	d115      	bne.n	80009e4 <__aeabi_dadd+0x500>
 80009b8:	2080      	movs	r0, #128	; 0x80
 80009ba:	2500      	movs	r5, #0
 80009bc:	0300      	lsls	r0, r0, #12
 80009be:	e6e3      	b.n	8000788 <__aeabi_dadd+0x2a4>
 80009c0:	1a5c      	subs	r4, r3, r1
 80009c2:	42a3      	cmp	r3, r4
 80009c4:	419b      	sbcs	r3, r3
 80009c6:	1bc7      	subs	r7, r0, r7
 80009c8:	425b      	negs	r3, r3
 80009ca:	2601      	movs	r6, #1
 80009cc:	1aff      	subs	r7, r7, r3
 80009ce:	e5da      	b.n	8000586 <__aeabi_dadd+0xa2>
 80009d0:	0742      	lsls	r2, r0, #29
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	4313      	orrs	r3, r2
 80009d6:	08c0      	lsrs	r0, r0, #3
 80009d8:	e6d2      	b.n	8000780 <__aeabi_dadd+0x29c>
 80009da:	0742      	lsls	r2, r0, #29
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	4313      	orrs	r3, r2
 80009e0:	08c0      	lsrs	r0, r0, #3
 80009e2:	e6ac      	b.n	800073e <__aeabi_dadd+0x25a>
 80009e4:	4643      	mov	r3, r8
 80009e6:	4642      	mov	r2, r8
 80009e8:	08c9      	lsrs	r1, r1, #3
 80009ea:	075b      	lsls	r3, r3, #29
 80009ec:	4655      	mov	r5, sl
 80009ee:	430b      	orrs	r3, r1
 80009f0:	08d0      	lsrs	r0, r2, #3
 80009f2:	e6c5      	b.n	8000780 <__aeabi_dadd+0x29c>
 80009f4:	4643      	mov	r3, r8
 80009f6:	4642      	mov	r2, r8
 80009f8:	075b      	lsls	r3, r3, #29
 80009fa:	08c9      	lsrs	r1, r1, #3
 80009fc:	430b      	orrs	r3, r1
 80009fe:	08d0      	lsrs	r0, r2, #3
 8000a00:	e6be      	b.n	8000780 <__aeabi_dadd+0x29c>
 8000a02:	4303      	orrs	r3, r0
 8000a04:	001c      	movs	r4, r3
 8000a06:	1e63      	subs	r3, r4, #1
 8000a08:	419c      	sbcs	r4, r3
 8000a0a:	e6fc      	b.n	8000806 <__aeabi_dadd+0x322>
 8000a0c:	0002      	movs	r2, r0
 8000a0e:	3c20      	subs	r4, #32
 8000a10:	40e2      	lsrs	r2, r4
 8000a12:	0014      	movs	r4, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	2a20      	cmp	r2, #32
 8000a18:	d003      	beq.n	8000a22 <__aeabi_dadd+0x53e>
 8000a1a:	2540      	movs	r5, #64	; 0x40
 8000a1c:	1aad      	subs	r5, r5, r2
 8000a1e:	40a8      	lsls	r0, r5
 8000a20:	4303      	orrs	r3, r0
 8000a22:	1e58      	subs	r0, r3, #1
 8000a24:	4183      	sbcs	r3, r0
 8000a26:	4323      	orrs	r3, r4
 8000a28:	e775      	b.n	8000916 <__aeabi_dadd+0x432>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d0e2      	beq.n	80009f4 <__aeabi_dadd+0x510>
 8000a2e:	003a      	movs	r2, r7
 8000a30:	430a      	orrs	r2, r1
 8000a32:	d0cd      	beq.n	80009d0 <__aeabi_dadd+0x4ec>
 8000a34:	0742      	lsls	r2, r0, #29
 8000a36:	08db      	lsrs	r3, r3, #3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	08c0      	lsrs	r0, r0, #3
 8000a3e:	0312      	lsls	r2, r2, #12
 8000a40:	4210      	tst	r0, r2
 8000a42:	d006      	beq.n	8000a52 <__aeabi_dadd+0x56e>
 8000a44:	08fc      	lsrs	r4, r7, #3
 8000a46:	4214      	tst	r4, r2
 8000a48:	d103      	bne.n	8000a52 <__aeabi_dadd+0x56e>
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	08cb      	lsrs	r3, r1, #3
 8000a4e:	077a      	lsls	r2, r7, #29
 8000a50:	4313      	orrs	r3, r2
 8000a52:	0f5a      	lsrs	r2, r3, #29
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	0752      	lsls	r2, r2, #29
 8000a58:	08db      	lsrs	r3, r3, #3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	e690      	b.n	8000780 <__aeabi_dadd+0x29c>
 8000a5e:	4643      	mov	r3, r8
 8000a60:	430b      	orrs	r3, r1
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dadd+0x582>
 8000a64:	e709      	b.n	800087a <__aeabi_dadd+0x396>
 8000a66:	4643      	mov	r3, r8
 8000a68:	4642      	mov	r2, r8
 8000a6a:	08c9      	lsrs	r1, r1, #3
 8000a6c:	075b      	lsls	r3, r3, #29
 8000a6e:	4655      	mov	r5, sl
 8000a70:	430b      	orrs	r3, r1
 8000a72:	08d0      	lsrs	r0, r2, #3
 8000a74:	e666      	b.n	8000744 <__aeabi_dadd+0x260>
 8000a76:	1acc      	subs	r4, r1, r3
 8000a78:	42a1      	cmp	r1, r4
 8000a7a:	4189      	sbcs	r1, r1
 8000a7c:	1a3f      	subs	r7, r7, r0
 8000a7e:	4249      	negs	r1, r1
 8000a80:	4655      	mov	r5, sl
 8000a82:	2601      	movs	r6, #1
 8000a84:	1a7f      	subs	r7, r7, r1
 8000a86:	e57e      	b.n	8000586 <__aeabi_dadd+0xa2>
 8000a88:	4642      	mov	r2, r8
 8000a8a:	1a5c      	subs	r4, r3, r1
 8000a8c:	1a87      	subs	r7, r0, r2
 8000a8e:	42a3      	cmp	r3, r4
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4252      	negs	r2, r2
 8000a94:	1abf      	subs	r7, r7, r2
 8000a96:	023a      	lsls	r2, r7, #8
 8000a98:	d53d      	bpl.n	8000b16 <__aeabi_dadd+0x632>
 8000a9a:	1acc      	subs	r4, r1, r3
 8000a9c:	42a1      	cmp	r1, r4
 8000a9e:	4189      	sbcs	r1, r1
 8000aa0:	4643      	mov	r3, r8
 8000aa2:	4249      	negs	r1, r1
 8000aa4:	1a1f      	subs	r7, r3, r0
 8000aa6:	4655      	mov	r5, sl
 8000aa8:	1a7f      	subs	r7, r7, r1
 8000aaa:	e595      	b.n	80005d8 <__aeabi_dadd+0xf4>
 8000aac:	077b      	lsls	r3, r7, #29
 8000aae:	08c9      	lsrs	r1, r1, #3
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	08f8      	lsrs	r0, r7, #3
 8000ab4:	e643      	b.n	800073e <__aeabi_dadd+0x25a>
 8000ab6:	4644      	mov	r4, r8
 8000ab8:	08db      	lsrs	r3, r3, #3
 8000aba:	430c      	orrs	r4, r1
 8000abc:	d130      	bne.n	8000b20 <__aeabi_dadd+0x63c>
 8000abe:	0742      	lsls	r2, r0, #29
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	08c0      	lsrs	r0, r0, #3
 8000ac4:	e65c      	b.n	8000780 <__aeabi_dadd+0x29c>
 8000ac6:	077b      	lsls	r3, r7, #29
 8000ac8:	08c9      	lsrs	r1, r1, #3
 8000aca:	430b      	orrs	r3, r1
 8000acc:	08f8      	lsrs	r0, r7, #3
 8000ace:	e639      	b.n	8000744 <__aeabi_dadd+0x260>
 8000ad0:	185c      	adds	r4, r3, r1
 8000ad2:	429c      	cmp	r4, r3
 8000ad4:	419b      	sbcs	r3, r3
 8000ad6:	4440      	add	r0, r8
 8000ad8:	425b      	negs	r3, r3
 8000ada:	18c7      	adds	r7, r0, r3
 8000adc:	023b      	lsls	r3, r7, #8
 8000ade:	d400      	bmi.n	8000ae2 <__aeabi_dadd+0x5fe>
 8000ae0:	e625      	b.n	800072e <__aeabi_dadd+0x24a>
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <__aeabi_dadd+0x674>)
 8000ae4:	2601      	movs	r6, #1
 8000ae6:	401f      	ands	r7, r3
 8000ae8:	e621      	b.n	800072e <__aeabi_dadd+0x24a>
 8000aea:	0004      	movs	r4, r0
 8000aec:	3a20      	subs	r2, #32
 8000aee:	40d4      	lsrs	r4, r2
 8000af0:	4662      	mov	r2, ip
 8000af2:	2a20      	cmp	r2, #32
 8000af4:	d004      	beq.n	8000b00 <__aeabi_dadd+0x61c>
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	4666      	mov	r6, ip
 8000afa:	1b92      	subs	r2, r2, r6
 8000afc:	4090      	lsls	r0, r2
 8000afe:	4303      	orrs	r3, r0
 8000b00:	1e5a      	subs	r2, r3, #1
 8000b02:	4193      	sbcs	r3, r2
 8000b04:	431c      	orrs	r4, r3
 8000b06:	e67e      	b.n	8000806 <__aeabi_dadd+0x322>
 8000b08:	185c      	adds	r4, r3, r1
 8000b0a:	428c      	cmp	r4, r1
 8000b0c:	4189      	sbcs	r1, r1
 8000b0e:	4440      	add	r0, r8
 8000b10:	4249      	negs	r1, r1
 8000b12:	1847      	adds	r7, r0, r1
 8000b14:	e6dd      	b.n	80008d2 <__aeabi_dadd+0x3ee>
 8000b16:	0023      	movs	r3, r4
 8000b18:	433b      	orrs	r3, r7
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x63a>
 8000b1c:	e6ad      	b.n	800087a <__aeabi_dadd+0x396>
 8000b1e:	e606      	b.n	800072e <__aeabi_dadd+0x24a>
 8000b20:	0744      	lsls	r4, r0, #29
 8000b22:	4323      	orrs	r3, r4
 8000b24:	2480      	movs	r4, #128	; 0x80
 8000b26:	08c0      	lsrs	r0, r0, #3
 8000b28:	0324      	lsls	r4, r4, #12
 8000b2a:	4220      	tst	r0, r4
 8000b2c:	d008      	beq.n	8000b40 <__aeabi_dadd+0x65c>
 8000b2e:	4642      	mov	r2, r8
 8000b30:	08d6      	lsrs	r6, r2, #3
 8000b32:	4226      	tst	r6, r4
 8000b34:	d104      	bne.n	8000b40 <__aeabi_dadd+0x65c>
 8000b36:	4655      	mov	r5, sl
 8000b38:	0030      	movs	r0, r6
 8000b3a:	08cb      	lsrs	r3, r1, #3
 8000b3c:	0751      	lsls	r1, r2, #29
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	0f5a      	lsrs	r2, r3, #29
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	0752      	lsls	r2, r2, #29
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	e619      	b.n	8000780 <__aeabi_dadd+0x29c>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	4a01      	ldr	r2, [pc, #4]	; (8000b54 <__aeabi_dadd+0x670>)
 8000b50:	001f      	movs	r7, r3
 8000b52:	e55e      	b.n	8000612 <__aeabi_dadd+0x12e>
 8000b54:	000007ff 	.word	0x000007ff
 8000b58:	ff7fffff 	.word	0xff7fffff

08000b5c <__aeabi_ddiv>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	4657      	mov	r7, sl
 8000b60:	464e      	mov	r6, r9
 8000b62:	4645      	mov	r5, r8
 8000b64:	46de      	mov	lr, fp
 8000b66:	b5e0      	push	{r5, r6, r7, lr}
 8000b68:	4681      	mov	r9, r0
 8000b6a:	0005      	movs	r5, r0
 8000b6c:	030c      	lsls	r4, r1, #12
 8000b6e:	0048      	lsls	r0, r1, #1
 8000b70:	4692      	mov	sl, r2
 8000b72:	001f      	movs	r7, r3
 8000b74:	b085      	sub	sp, #20
 8000b76:	0b24      	lsrs	r4, r4, #12
 8000b78:	0d40      	lsrs	r0, r0, #21
 8000b7a:	0fce      	lsrs	r6, r1, #31
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_ddiv+0x26>
 8000b80:	e156      	b.n	8000e30 <__aeabi_ddiv+0x2d4>
 8000b82:	4bd4      	ldr	r3, [pc, #848]	; (8000ed4 <__aeabi_ddiv+0x378>)
 8000b84:	4298      	cmp	r0, r3
 8000b86:	d100      	bne.n	8000b8a <__aeabi_ddiv+0x2e>
 8000b88:	e172      	b.n	8000e70 <__aeabi_ddiv+0x314>
 8000b8a:	0f6b      	lsrs	r3, r5, #29
 8000b8c:	00e4      	lsls	r4, r4, #3
 8000b8e:	431c      	orrs	r4, r3
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	041b      	lsls	r3, r3, #16
 8000b94:	4323      	orrs	r3, r4
 8000b96:	4698      	mov	r8, r3
 8000b98:	4bcf      	ldr	r3, [pc, #828]	; (8000ed8 <__aeabi_ddiv+0x37c>)
 8000b9a:	00ed      	lsls	r5, r5, #3
 8000b9c:	469b      	mov	fp, r3
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	4483      	add	fp, r0
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	033c      	lsls	r4, r7, #12
 8000ba8:	007b      	lsls	r3, r7, #1
 8000baa:	4650      	mov	r0, sl
 8000bac:	0b24      	lsrs	r4, r4, #12
 8000bae:	0d5b      	lsrs	r3, r3, #21
 8000bb0:	0fff      	lsrs	r7, r7, #31
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_ddiv+0x5c>
 8000bb6:	e11f      	b.n	8000df8 <__aeabi_ddiv+0x29c>
 8000bb8:	4ac6      	ldr	r2, [pc, #792]	; (8000ed4 <__aeabi_ddiv+0x378>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_ddiv+0x64>
 8000bbe:	e162      	b.n	8000e86 <__aeabi_ddiv+0x32a>
 8000bc0:	49c5      	ldr	r1, [pc, #788]	; (8000ed8 <__aeabi_ddiv+0x37c>)
 8000bc2:	0f42      	lsrs	r2, r0, #29
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	00e4      	lsls	r4, r4, #3
 8000bc8:	4659      	mov	r1, fp
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	4463      	add	r3, ip
 8000bd0:	0412      	lsls	r2, r2, #16
 8000bd2:	1acb      	subs	r3, r1, r3
 8000bd4:	4314      	orrs	r4, r2
 8000bd6:	469b      	mov	fp, r3
 8000bd8:	00c2      	lsls	r2, r0, #3
 8000bda:	2000      	movs	r0, #0
 8000bdc:	0033      	movs	r3, r6
 8000bde:	407b      	eors	r3, r7
 8000be0:	469a      	mov	sl, r3
 8000be2:	464b      	mov	r3, r9
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d827      	bhi.n	8000c38 <__aeabi_ddiv+0xdc>
 8000be8:	49bc      	ldr	r1, [pc, #752]	; (8000edc <__aeabi_ddiv+0x380>)
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	58cb      	ldr	r3, [r1, r3]
 8000bee:	469f      	mov	pc, r3
 8000bf0:	46b2      	mov	sl, r6
 8000bf2:	9b00      	ldr	r3, [sp, #0]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d016      	beq.n	8000c26 <__aeabi_ddiv+0xca>
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_ddiv+0xa2>
 8000bfc:	e28e      	b.n	800111c <__aeabi_ddiv+0x5c0>
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d000      	beq.n	8000c04 <__aeabi_ddiv+0xa8>
 8000c02:	e0d9      	b.n	8000db8 <__aeabi_ddiv+0x25c>
 8000c04:	2300      	movs	r3, #0
 8000c06:	2400      	movs	r4, #0
 8000c08:	2500      	movs	r5, #0
 8000c0a:	4652      	mov	r2, sl
 8000c0c:	051b      	lsls	r3, r3, #20
 8000c0e:	4323      	orrs	r3, r4
 8000c10:	07d2      	lsls	r2, r2, #31
 8000c12:	4313      	orrs	r3, r2
 8000c14:	0028      	movs	r0, r5
 8000c16:	0019      	movs	r1, r3
 8000c18:	b005      	add	sp, #20
 8000c1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c1c:	46bb      	mov	fp, r7
 8000c1e:	46b2      	mov	sl, r6
 8000c20:	46a9      	mov	r9, r5
 8000c22:	46a0      	mov	r8, r4
 8000c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c26:	2400      	movs	r4, #0
 8000c28:	2500      	movs	r5, #0
 8000c2a:	4baa      	ldr	r3, [pc, #680]	; (8000ed4 <__aeabi_ddiv+0x378>)
 8000c2c:	e7ed      	b.n	8000c0a <__aeabi_ddiv+0xae>
 8000c2e:	46ba      	mov	sl, r7
 8000c30:	46a0      	mov	r8, r4
 8000c32:	0015      	movs	r5, r2
 8000c34:	9000      	str	r0, [sp, #0]
 8000c36:	e7dc      	b.n	8000bf2 <__aeabi_ddiv+0x96>
 8000c38:	4544      	cmp	r4, r8
 8000c3a:	d200      	bcs.n	8000c3e <__aeabi_ddiv+0xe2>
 8000c3c:	e1c7      	b.n	8000fce <__aeabi_ddiv+0x472>
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_ddiv+0xe6>
 8000c40:	e1c2      	b.n	8000fc8 <__aeabi_ddiv+0x46c>
 8000c42:	2301      	movs	r3, #1
 8000c44:	425b      	negs	r3, r3
 8000c46:	469c      	mov	ip, r3
 8000c48:	002e      	movs	r6, r5
 8000c4a:	4640      	mov	r0, r8
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	44e3      	add	fp, ip
 8000c50:	0223      	lsls	r3, r4, #8
 8000c52:	0e14      	lsrs	r4, r2, #24
 8000c54:	431c      	orrs	r4, r3
 8000c56:	0c1b      	lsrs	r3, r3, #16
 8000c58:	4699      	mov	r9, r3
 8000c5a:	0423      	lsls	r3, r4, #16
 8000c5c:	0c1f      	lsrs	r7, r3, #16
 8000c5e:	0212      	lsls	r2, r2, #8
 8000c60:	4649      	mov	r1, r9
 8000c62:	9200      	str	r2, [sp, #0]
 8000c64:	9701      	str	r7, [sp, #4]
 8000c66:	f7ff faf1 	bl	800024c <__aeabi_uidivmod>
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	437a      	muls	r2, r7
 8000c6e:	040b      	lsls	r3, r1, #16
 8000c70:	0c31      	lsrs	r1, r6, #16
 8000c72:	4680      	mov	r8, r0
 8000c74:	4319      	orrs	r1, r3
 8000c76:	428a      	cmp	r2, r1
 8000c78:	d907      	bls.n	8000c8a <__aeabi_ddiv+0x12e>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	425b      	negs	r3, r3
 8000c7e:	469c      	mov	ip, r3
 8000c80:	1909      	adds	r1, r1, r4
 8000c82:	44e0      	add	r8, ip
 8000c84:	428c      	cmp	r4, r1
 8000c86:	d800      	bhi.n	8000c8a <__aeabi_ddiv+0x12e>
 8000c88:	e207      	b.n	800109a <__aeabi_ddiv+0x53e>
 8000c8a:	1a88      	subs	r0, r1, r2
 8000c8c:	4649      	mov	r1, r9
 8000c8e:	f7ff fadd 	bl	800024c <__aeabi_uidivmod>
 8000c92:	0409      	lsls	r1, r1, #16
 8000c94:	468c      	mov	ip, r1
 8000c96:	0431      	lsls	r1, r6, #16
 8000c98:	4666      	mov	r6, ip
 8000c9a:	9a01      	ldr	r2, [sp, #4]
 8000c9c:	0c09      	lsrs	r1, r1, #16
 8000c9e:	4342      	muls	r2, r0
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	4331      	orrs	r1, r6
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	d904      	bls.n	8000cb2 <__aeabi_ddiv+0x156>
 8000ca8:	1909      	adds	r1, r1, r4
 8000caa:	3b01      	subs	r3, #1
 8000cac:	428c      	cmp	r4, r1
 8000cae:	d800      	bhi.n	8000cb2 <__aeabi_ddiv+0x156>
 8000cb0:	e1ed      	b.n	800108e <__aeabi_ddiv+0x532>
 8000cb2:	1a88      	subs	r0, r1, r2
 8000cb4:	4642      	mov	r2, r8
 8000cb6:	0412      	lsls	r2, r2, #16
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	4690      	mov	r8, r2
 8000cbc:	4641      	mov	r1, r8
 8000cbe:	9b00      	ldr	r3, [sp, #0]
 8000cc0:	040e      	lsls	r6, r1, #16
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	001f      	movs	r7, r3
 8000cc6:	9302      	str	r3, [sp, #8]
 8000cc8:	9b00      	ldr	r3, [sp, #0]
 8000cca:	0c36      	lsrs	r6, r6, #16
 8000ccc:	041b      	lsls	r3, r3, #16
 8000cce:	0c19      	lsrs	r1, r3, #16
 8000cd0:	000b      	movs	r3, r1
 8000cd2:	4373      	muls	r3, r6
 8000cd4:	0c12      	lsrs	r2, r2, #16
 8000cd6:	437e      	muls	r6, r7
 8000cd8:	9103      	str	r1, [sp, #12]
 8000cda:	4351      	muls	r1, r2
 8000cdc:	437a      	muls	r2, r7
 8000cde:	0c1f      	lsrs	r7, r3, #16
 8000ce0:	46bc      	mov	ip, r7
 8000ce2:	1876      	adds	r6, r6, r1
 8000ce4:	4466      	add	r6, ip
 8000ce6:	42b1      	cmp	r1, r6
 8000ce8:	d903      	bls.n	8000cf2 <__aeabi_ddiv+0x196>
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	0249      	lsls	r1, r1, #9
 8000cee:	468c      	mov	ip, r1
 8000cf0:	4462      	add	r2, ip
 8000cf2:	0c31      	lsrs	r1, r6, #16
 8000cf4:	188a      	adds	r2, r1, r2
 8000cf6:	0431      	lsls	r1, r6, #16
 8000cf8:	041e      	lsls	r6, r3, #16
 8000cfa:	0c36      	lsrs	r6, r6, #16
 8000cfc:	198e      	adds	r6, r1, r6
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	d302      	bcc.n	8000d08 <__aeabi_ddiv+0x1ac>
 8000d02:	d112      	bne.n	8000d2a <__aeabi_ddiv+0x1ce>
 8000d04:	42b5      	cmp	r5, r6
 8000d06:	d210      	bcs.n	8000d2a <__aeabi_ddiv+0x1ce>
 8000d08:	4643      	mov	r3, r8
 8000d0a:	1e59      	subs	r1, r3, #1
 8000d0c:	9b00      	ldr	r3, [sp, #0]
 8000d0e:	469c      	mov	ip, r3
 8000d10:	4465      	add	r5, ip
 8000d12:	001f      	movs	r7, r3
 8000d14:	429d      	cmp	r5, r3
 8000d16:	419b      	sbcs	r3, r3
 8000d18:	425b      	negs	r3, r3
 8000d1a:	191b      	adds	r3, r3, r4
 8000d1c:	18c0      	adds	r0, r0, r3
 8000d1e:	4284      	cmp	r4, r0
 8000d20:	d200      	bcs.n	8000d24 <__aeabi_ddiv+0x1c8>
 8000d22:	e1a0      	b.n	8001066 <__aeabi_ddiv+0x50a>
 8000d24:	d100      	bne.n	8000d28 <__aeabi_ddiv+0x1cc>
 8000d26:	e19b      	b.n	8001060 <__aeabi_ddiv+0x504>
 8000d28:	4688      	mov	r8, r1
 8000d2a:	1bae      	subs	r6, r5, r6
 8000d2c:	42b5      	cmp	r5, r6
 8000d2e:	41ad      	sbcs	r5, r5
 8000d30:	1a80      	subs	r0, r0, r2
 8000d32:	426d      	negs	r5, r5
 8000d34:	1b40      	subs	r0, r0, r5
 8000d36:	4284      	cmp	r4, r0
 8000d38:	d100      	bne.n	8000d3c <__aeabi_ddiv+0x1e0>
 8000d3a:	e1d5      	b.n	80010e8 <__aeabi_ddiv+0x58c>
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	f7ff fa85 	bl	800024c <__aeabi_uidivmod>
 8000d42:	9a01      	ldr	r2, [sp, #4]
 8000d44:	040b      	lsls	r3, r1, #16
 8000d46:	4342      	muls	r2, r0
 8000d48:	0c31      	lsrs	r1, r6, #16
 8000d4a:	0005      	movs	r5, r0
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	428a      	cmp	r2, r1
 8000d50:	d900      	bls.n	8000d54 <__aeabi_ddiv+0x1f8>
 8000d52:	e16c      	b.n	800102e <__aeabi_ddiv+0x4d2>
 8000d54:	1a88      	subs	r0, r1, r2
 8000d56:	4649      	mov	r1, r9
 8000d58:	f7ff fa78 	bl	800024c <__aeabi_uidivmod>
 8000d5c:	9a01      	ldr	r2, [sp, #4]
 8000d5e:	0436      	lsls	r6, r6, #16
 8000d60:	4342      	muls	r2, r0
 8000d62:	0409      	lsls	r1, r1, #16
 8000d64:	0c36      	lsrs	r6, r6, #16
 8000d66:	0003      	movs	r3, r0
 8000d68:	430e      	orrs	r6, r1
 8000d6a:	42b2      	cmp	r2, r6
 8000d6c:	d900      	bls.n	8000d70 <__aeabi_ddiv+0x214>
 8000d6e:	e153      	b.n	8001018 <__aeabi_ddiv+0x4bc>
 8000d70:	9803      	ldr	r0, [sp, #12]
 8000d72:	1ab6      	subs	r6, r6, r2
 8000d74:	0002      	movs	r2, r0
 8000d76:	042d      	lsls	r5, r5, #16
 8000d78:	431d      	orrs	r5, r3
 8000d7a:	9f02      	ldr	r7, [sp, #8]
 8000d7c:	042b      	lsls	r3, r5, #16
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	435a      	muls	r2, r3
 8000d82:	437b      	muls	r3, r7
 8000d84:	469c      	mov	ip, r3
 8000d86:	0c29      	lsrs	r1, r5, #16
 8000d88:	4348      	muls	r0, r1
 8000d8a:	0c13      	lsrs	r3, r2, #16
 8000d8c:	4484      	add	ip, r0
 8000d8e:	4463      	add	r3, ip
 8000d90:	4379      	muls	r1, r7
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d903      	bls.n	8000d9e <__aeabi_ddiv+0x242>
 8000d96:	2080      	movs	r0, #128	; 0x80
 8000d98:	0240      	lsls	r0, r0, #9
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	4461      	add	r1, ip
 8000d9e:	0c18      	lsrs	r0, r3, #16
 8000da0:	0412      	lsls	r2, r2, #16
 8000da2:	041b      	lsls	r3, r3, #16
 8000da4:	0c12      	lsrs	r2, r2, #16
 8000da6:	1841      	adds	r1, r0, r1
 8000da8:	189b      	adds	r3, r3, r2
 8000daa:	428e      	cmp	r6, r1
 8000dac:	d200      	bcs.n	8000db0 <__aeabi_ddiv+0x254>
 8000dae:	e0ff      	b.n	8000fb0 <__aeabi_ddiv+0x454>
 8000db0:	d100      	bne.n	8000db4 <__aeabi_ddiv+0x258>
 8000db2:	e0fa      	b.n	8000faa <__aeabi_ddiv+0x44e>
 8000db4:	2301      	movs	r3, #1
 8000db6:	431d      	orrs	r5, r3
 8000db8:	4a49      	ldr	r2, [pc, #292]	; (8000ee0 <__aeabi_ddiv+0x384>)
 8000dba:	445a      	add	r2, fp
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	dc00      	bgt.n	8000dc2 <__aeabi_ddiv+0x266>
 8000dc0:	e0aa      	b.n	8000f18 <__aeabi_ddiv+0x3bc>
 8000dc2:	076b      	lsls	r3, r5, #29
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_ddiv+0x26c>
 8000dc6:	e13d      	b.n	8001044 <__aeabi_ddiv+0x4e8>
 8000dc8:	08ed      	lsrs	r5, r5, #3
 8000dca:	4643      	mov	r3, r8
 8000dcc:	01db      	lsls	r3, r3, #7
 8000dce:	d506      	bpl.n	8000dde <__aeabi_ddiv+0x282>
 8000dd0:	4642      	mov	r2, r8
 8000dd2:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <__aeabi_ddiv+0x388>)
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	4690      	mov	r8, r2
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	00d2      	lsls	r2, r2, #3
 8000ddc:	445a      	add	r2, fp
 8000dde:	4b42      	ldr	r3, [pc, #264]	; (8000ee8 <__aeabi_ddiv+0x38c>)
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dd00      	ble.n	8000de6 <__aeabi_ddiv+0x28a>
 8000de4:	e71f      	b.n	8000c26 <__aeabi_ddiv+0xca>
 8000de6:	4643      	mov	r3, r8
 8000de8:	075b      	lsls	r3, r3, #29
 8000dea:	431d      	orrs	r5, r3
 8000dec:	4643      	mov	r3, r8
 8000dee:	0552      	lsls	r2, r2, #21
 8000df0:	025c      	lsls	r4, r3, #9
 8000df2:	0b24      	lsrs	r4, r4, #12
 8000df4:	0d53      	lsrs	r3, r2, #21
 8000df6:	e708      	b.n	8000c0a <__aeabi_ddiv+0xae>
 8000df8:	4652      	mov	r2, sl
 8000dfa:	4322      	orrs	r2, r4
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_ddiv+0x2a4>
 8000dfe:	e07b      	b.n	8000ef8 <__aeabi_ddiv+0x39c>
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_ddiv+0x2aa>
 8000e04:	e0fa      	b.n	8000ffc <__aeabi_ddiv+0x4a0>
 8000e06:	0020      	movs	r0, r4
 8000e08:	f001 f952 	bl	80020b0 <__clzsi2>
 8000e0c:	0002      	movs	r2, r0
 8000e0e:	3a0b      	subs	r2, #11
 8000e10:	231d      	movs	r3, #29
 8000e12:	0001      	movs	r1, r0
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	4652      	mov	r2, sl
 8000e18:	3908      	subs	r1, #8
 8000e1a:	40da      	lsrs	r2, r3
 8000e1c:	408c      	lsls	r4, r1
 8000e1e:	4314      	orrs	r4, r2
 8000e20:	4652      	mov	r2, sl
 8000e22:	408a      	lsls	r2, r1
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <__aeabi_ddiv+0x390>)
 8000e26:	4458      	add	r0, fp
 8000e28:	469b      	mov	fp, r3
 8000e2a:	4483      	add	fp, r0
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e6d5      	b.n	8000bdc <__aeabi_ddiv+0x80>
 8000e30:	464b      	mov	r3, r9
 8000e32:	4323      	orrs	r3, r4
 8000e34:	4698      	mov	r8, r3
 8000e36:	d044      	beq.n	8000ec2 <__aeabi_ddiv+0x366>
 8000e38:	2c00      	cmp	r4, #0
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_ddiv+0x2e2>
 8000e3c:	e0ce      	b.n	8000fdc <__aeabi_ddiv+0x480>
 8000e3e:	0020      	movs	r0, r4
 8000e40:	f001 f936 	bl	80020b0 <__clzsi2>
 8000e44:	0001      	movs	r1, r0
 8000e46:	0002      	movs	r2, r0
 8000e48:	390b      	subs	r1, #11
 8000e4a:	231d      	movs	r3, #29
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	4649      	mov	r1, r9
 8000e50:	0010      	movs	r0, r2
 8000e52:	40d9      	lsrs	r1, r3
 8000e54:	3808      	subs	r0, #8
 8000e56:	4084      	lsls	r4, r0
 8000e58:	000b      	movs	r3, r1
 8000e5a:	464d      	mov	r5, r9
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	4698      	mov	r8, r3
 8000e60:	4085      	lsls	r5, r0
 8000e62:	4823      	ldr	r0, [pc, #140]	; (8000ef0 <__aeabi_ddiv+0x394>)
 8000e64:	1a83      	subs	r3, r0, r2
 8000e66:	469b      	mov	fp, r3
 8000e68:	2300      	movs	r3, #0
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	e69a      	b.n	8000ba6 <__aeabi_ddiv+0x4a>
 8000e70:	464b      	mov	r3, r9
 8000e72:	4323      	orrs	r3, r4
 8000e74:	4698      	mov	r8, r3
 8000e76:	d11d      	bne.n	8000eb4 <__aeabi_ddiv+0x358>
 8000e78:	2308      	movs	r3, #8
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	3b06      	subs	r3, #6
 8000e7e:	2500      	movs	r5, #0
 8000e80:	4683      	mov	fp, r0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	e68f      	b.n	8000ba6 <__aeabi_ddiv+0x4a>
 8000e86:	4652      	mov	r2, sl
 8000e88:	4322      	orrs	r2, r4
 8000e8a:	d109      	bne.n	8000ea0 <__aeabi_ddiv+0x344>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	4649      	mov	r1, r9
 8000e90:	4319      	orrs	r1, r3
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <__aeabi_ddiv+0x398>)
 8000e94:	4689      	mov	r9, r1
 8000e96:	469c      	mov	ip, r3
 8000e98:	2400      	movs	r4, #0
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	44e3      	add	fp, ip
 8000e9e:	e69d      	b.n	8000bdc <__aeabi_ddiv+0x80>
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	464a      	mov	r2, r9
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <__aeabi_ddiv+0x398>)
 8000ea8:	4691      	mov	r9, r2
 8000eaa:	469c      	mov	ip, r3
 8000eac:	4652      	mov	r2, sl
 8000eae:	2003      	movs	r0, #3
 8000eb0:	44e3      	add	fp, ip
 8000eb2:	e693      	b.n	8000bdc <__aeabi_ddiv+0x80>
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	4699      	mov	r9, r3
 8000eb8:	3b09      	subs	r3, #9
 8000eba:	46a0      	mov	r8, r4
 8000ebc:	4683      	mov	fp, r0
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	e671      	b.n	8000ba6 <__aeabi_ddiv+0x4a>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	469b      	mov	fp, r3
 8000eca:	3301      	adds	r3, #1
 8000ecc:	2500      	movs	r5, #0
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	e669      	b.n	8000ba6 <__aeabi_ddiv+0x4a>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	000007ff 	.word	0x000007ff
 8000ed8:	fffffc01 	.word	0xfffffc01
 8000edc:	08008150 	.word	0x08008150
 8000ee0:	000003ff 	.word	0x000003ff
 8000ee4:	feffffff 	.word	0xfeffffff
 8000ee8:	000007fe 	.word	0x000007fe
 8000eec:	000003f3 	.word	0x000003f3
 8000ef0:	fffffc0d 	.word	0xfffffc0d
 8000ef4:	fffff801 	.word	0xfffff801
 8000ef8:	4649      	mov	r1, r9
 8000efa:	2301      	movs	r3, #1
 8000efc:	4319      	orrs	r1, r3
 8000efe:	4689      	mov	r9, r1
 8000f00:	2400      	movs	r4, #0
 8000f02:	2001      	movs	r0, #1
 8000f04:	e66a      	b.n	8000bdc <__aeabi_ddiv+0x80>
 8000f06:	2300      	movs	r3, #0
 8000f08:	2480      	movs	r4, #128	; 0x80
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	4b8a      	ldr	r3, [pc, #552]	; (8001138 <__aeabi_ddiv+0x5dc>)
 8000f10:	0324      	lsls	r4, r4, #12
 8000f12:	e67a      	b.n	8000c0a <__aeabi_ddiv+0xae>
 8000f14:	2501      	movs	r5, #1
 8000f16:	426d      	negs	r5, r5
 8000f18:	2301      	movs	r3, #1
 8000f1a:	1a9b      	subs	r3, r3, r2
 8000f1c:	2b38      	cmp	r3, #56	; 0x38
 8000f1e:	dd00      	ble.n	8000f22 <__aeabi_ddiv+0x3c6>
 8000f20:	e670      	b.n	8000c04 <__aeabi_ddiv+0xa8>
 8000f22:	2b1f      	cmp	r3, #31
 8000f24:	dc00      	bgt.n	8000f28 <__aeabi_ddiv+0x3cc>
 8000f26:	e0bf      	b.n	80010a8 <__aeabi_ddiv+0x54c>
 8000f28:	211f      	movs	r1, #31
 8000f2a:	4249      	negs	r1, r1
 8000f2c:	1a8a      	subs	r2, r1, r2
 8000f2e:	4641      	mov	r1, r8
 8000f30:	40d1      	lsrs	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	2b20      	cmp	r3, #32
 8000f36:	d004      	beq.n	8000f42 <__aeabi_ddiv+0x3e6>
 8000f38:	4641      	mov	r1, r8
 8000f3a:	4b80      	ldr	r3, [pc, #512]	; (800113c <__aeabi_ddiv+0x5e0>)
 8000f3c:	445b      	add	r3, fp
 8000f3e:	4099      	lsls	r1, r3
 8000f40:	430d      	orrs	r5, r1
 8000f42:	1e6b      	subs	r3, r5, #1
 8000f44:	419d      	sbcs	r5, r3
 8000f46:	2307      	movs	r3, #7
 8000f48:	432a      	orrs	r2, r5
 8000f4a:	001d      	movs	r5, r3
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	4015      	ands	r5, r2
 8000f50:	4213      	tst	r3, r2
 8000f52:	d100      	bne.n	8000f56 <__aeabi_ddiv+0x3fa>
 8000f54:	e0d4      	b.n	8001100 <__aeabi_ddiv+0x5a4>
 8000f56:	210f      	movs	r1, #15
 8000f58:	2300      	movs	r3, #0
 8000f5a:	4011      	ands	r1, r2
 8000f5c:	2904      	cmp	r1, #4
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0x406>
 8000f60:	e0cb      	b.n	80010fa <__aeabi_ddiv+0x59e>
 8000f62:	1d11      	adds	r1, r2, #4
 8000f64:	4291      	cmp	r1, r2
 8000f66:	4192      	sbcs	r2, r2
 8000f68:	4252      	negs	r2, r2
 8000f6a:	189b      	adds	r3, r3, r2
 8000f6c:	000a      	movs	r2, r1
 8000f6e:	0219      	lsls	r1, r3, #8
 8000f70:	d400      	bmi.n	8000f74 <__aeabi_ddiv+0x418>
 8000f72:	e0c2      	b.n	80010fa <__aeabi_ddiv+0x59e>
 8000f74:	2301      	movs	r3, #1
 8000f76:	2400      	movs	r4, #0
 8000f78:	2500      	movs	r5, #0
 8000f7a:	e646      	b.n	8000c0a <__aeabi_ddiv+0xae>
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	4641      	mov	r1, r8
 8000f80:	031b      	lsls	r3, r3, #12
 8000f82:	4219      	tst	r1, r3
 8000f84:	d008      	beq.n	8000f98 <__aeabi_ddiv+0x43c>
 8000f86:	421c      	tst	r4, r3
 8000f88:	d106      	bne.n	8000f98 <__aeabi_ddiv+0x43c>
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	0324      	lsls	r4, r4, #12
 8000f8e:	46ba      	mov	sl, r7
 8000f90:	0015      	movs	r5, r2
 8000f92:	4b69      	ldr	r3, [pc, #420]	; (8001138 <__aeabi_ddiv+0x5dc>)
 8000f94:	0b24      	lsrs	r4, r4, #12
 8000f96:	e638      	b.n	8000c0a <__aeabi_ddiv+0xae>
 8000f98:	2480      	movs	r4, #128	; 0x80
 8000f9a:	4643      	mov	r3, r8
 8000f9c:	0324      	lsls	r4, r4, #12
 8000f9e:	431c      	orrs	r4, r3
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	46b2      	mov	sl, r6
 8000fa4:	4b64      	ldr	r3, [pc, #400]	; (8001138 <__aeabi_ddiv+0x5dc>)
 8000fa6:	0b24      	lsrs	r4, r4, #12
 8000fa8:	e62f      	b.n	8000c0a <__aeabi_ddiv+0xae>
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_ddiv+0x454>
 8000fae:	e703      	b.n	8000db8 <__aeabi_ddiv+0x25c>
 8000fb0:	19a6      	adds	r6, r4, r6
 8000fb2:	1e68      	subs	r0, r5, #1
 8000fb4:	42a6      	cmp	r6, r4
 8000fb6:	d200      	bcs.n	8000fba <__aeabi_ddiv+0x45e>
 8000fb8:	e08d      	b.n	80010d6 <__aeabi_ddiv+0x57a>
 8000fba:	428e      	cmp	r6, r1
 8000fbc:	d200      	bcs.n	8000fc0 <__aeabi_ddiv+0x464>
 8000fbe:	e0a3      	b.n	8001108 <__aeabi_ddiv+0x5ac>
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_ddiv+0x468>
 8000fc2:	e0b3      	b.n	800112c <__aeabi_ddiv+0x5d0>
 8000fc4:	0005      	movs	r5, r0
 8000fc6:	e6f5      	b.n	8000db4 <__aeabi_ddiv+0x258>
 8000fc8:	42aa      	cmp	r2, r5
 8000fca:	d900      	bls.n	8000fce <__aeabi_ddiv+0x472>
 8000fcc:	e639      	b.n	8000c42 <__aeabi_ddiv+0xe6>
 8000fce:	4643      	mov	r3, r8
 8000fd0:	07de      	lsls	r6, r3, #31
 8000fd2:	0858      	lsrs	r0, r3, #1
 8000fd4:	086b      	lsrs	r3, r5, #1
 8000fd6:	431e      	orrs	r6, r3
 8000fd8:	07ed      	lsls	r5, r5, #31
 8000fda:	e639      	b.n	8000c50 <__aeabi_ddiv+0xf4>
 8000fdc:	4648      	mov	r0, r9
 8000fde:	f001 f867 	bl	80020b0 <__clzsi2>
 8000fe2:	0001      	movs	r1, r0
 8000fe4:	0002      	movs	r2, r0
 8000fe6:	3115      	adds	r1, #21
 8000fe8:	3220      	adds	r2, #32
 8000fea:	291c      	cmp	r1, #28
 8000fec:	dc00      	bgt.n	8000ff0 <__aeabi_ddiv+0x494>
 8000fee:	e72c      	b.n	8000e4a <__aeabi_ddiv+0x2ee>
 8000ff0:	464b      	mov	r3, r9
 8000ff2:	3808      	subs	r0, #8
 8000ff4:	4083      	lsls	r3, r0
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	4698      	mov	r8, r3
 8000ffa:	e732      	b.n	8000e62 <__aeabi_ddiv+0x306>
 8000ffc:	f001 f858 	bl	80020b0 <__clzsi2>
 8001000:	0003      	movs	r3, r0
 8001002:	001a      	movs	r2, r3
 8001004:	3215      	adds	r2, #21
 8001006:	3020      	adds	r0, #32
 8001008:	2a1c      	cmp	r2, #28
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x4b2>
 800100c:	e700      	b.n	8000e10 <__aeabi_ddiv+0x2b4>
 800100e:	4654      	mov	r4, sl
 8001010:	3b08      	subs	r3, #8
 8001012:	2200      	movs	r2, #0
 8001014:	409c      	lsls	r4, r3
 8001016:	e705      	b.n	8000e24 <__aeabi_ddiv+0x2c8>
 8001018:	1936      	adds	r6, r6, r4
 800101a:	3b01      	subs	r3, #1
 800101c:	42b4      	cmp	r4, r6
 800101e:	d900      	bls.n	8001022 <__aeabi_ddiv+0x4c6>
 8001020:	e6a6      	b.n	8000d70 <__aeabi_ddiv+0x214>
 8001022:	42b2      	cmp	r2, r6
 8001024:	d800      	bhi.n	8001028 <__aeabi_ddiv+0x4cc>
 8001026:	e6a3      	b.n	8000d70 <__aeabi_ddiv+0x214>
 8001028:	1e83      	subs	r3, r0, #2
 800102a:	1936      	adds	r6, r6, r4
 800102c:	e6a0      	b.n	8000d70 <__aeabi_ddiv+0x214>
 800102e:	1909      	adds	r1, r1, r4
 8001030:	3d01      	subs	r5, #1
 8001032:	428c      	cmp	r4, r1
 8001034:	d900      	bls.n	8001038 <__aeabi_ddiv+0x4dc>
 8001036:	e68d      	b.n	8000d54 <__aeabi_ddiv+0x1f8>
 8001038:	428a      	cmp	r2, r1
 800103a:	d800      	bhi.n	800103e <__aeabi_ddiv+0x4e2>
 800103c:	e68a      	b.n	8000d54 <__aeabi_ddiv+0x1f8>
 800103e:	1e85      	subs	r5, r0, #2
 8001040:	1909      	adds	r1, r1, r4
 8001042:	e687      	b.n	8000d54 <__aeabi_ddiv+0x1f8>
 8001044:	230f      	movs	r3, #15
 8001046:	402b      	ands	r3, r5
 8001048:	2b04      	cmp	r3, #4
 800104a:	d100      	bne.n	800104e <__aeabi_ddiv+0x4f2>
 800104c:	e6bc      	b.n	8000dc8 <__aeabi_ddiv+0x26c>
 800104e:	2305      	movs	r3, #5
 8001050:	425b      	negs	r3, r3
 8001052:	42ab      	cmp	r3, r5
 8001054:	419b      	sbcs	r3, r3
 8001056:	3504      	adds	r5, #4
 8001058:	425b      	negs	r3, r3
 800105a:	08ed      	lsrs	r5, r5, #3
 800105c:	4498      	add	r8, r3
 800105e:	e6b4      	b.n	8000dca <__aeabi_ddiv+0x26e>
 8001060:	42af      	cmp	r7, r5
 8001062:	d900      	bls.n	8001066 <__aeabi_ddiv+0x50a>
 8001064:	e660      	b.n	8000d28 <__aeabi_ddiv+0x1cc>
 8001066:	4282      	cmp	r2, r0
 8001068:	d804      	bhi.n	8001074 <__aeabi_ddiv+0x518>
 800106a:	d000      	beq.n	800106e <__aeabi_ddiv+0x512>
 800106c:	e65c      	b.n	8000d28 <__aeabi_ddiv+0x1cc>
 800106e:	42ae      	cmp	r6, r5
 8001070:	d800      	bhi.n	8001074 <__aeabi_ddiv+0x518>
 8001072:	e659      	b.n	8000d28 <__aeabi_ddiv+0x1cc>
 8001074:	2302      	movs	r3, #2
 8001076:	425b      	negs	r3, r3
 8001078:	469c      	mov	ip, r3
 800107a:	9b00      	ldr	r3, [sp, #0]
 800107c:	44e0      	add	r8, ip
 800107e:	469c      	mov	ip, r3
 8001080:	4465      	add	r5, ip
 8001082:	429d      	cmp	r5, r3
 8001084:	419b      	sbcs	r3, r3
 8001086:	425b      	negs	r3, r3
 8001088:	191b      	adds	r3, r3, r4
 800108a:	18c0      	adds	r0, r0, r3
 800108c:	e64d      	b.n	8000d2a <__aeabi_ddiv+0x1ce>
 800108e:	428a      	cmp	r2, r1
 8001090:	d800      	bhi.n	8001094 <__aeabi_ddiv+0x538>
 8001092:	e60e      	b.n	8000cb2 <__aeabi_ddiv+0x156>
 8001094:	1e83      	subs	r3, r0, #2
 8001096:	1909      	adds	r1, r1, r4
 8001098:	e60b      	b.n	8000cb2 <__aeabi_ddiv+0x156>
 800109a:	428a      	cmp	r2, r1
 800109c:	d800      	bhi.n	80010a0 <__aeabi_ddiv+0x544>
 800109e:	e5f4      	b.n	8000c8a <__aeabi_ddiv+0x12e>
 80010a0:	1e83      	subs	r3, r0, #2
 80010a2:	4698      	mov	r8, r3
 80010a4:	1909      	adds	r1, r1, r4
 80010a6:	e5f0      	b.n	8000c8a <__aeabi_ddiv+0x12e>
 80010a8:	4925      	ldr	r1, [pc, #148]	; (8001140 <__aeabi_ddiv+0x5e4>)
 80010aa:	0028      	movs	r0, r5
 80010ac:	4459      	add	r1, fp
 80010ae:	408d      	lsls	r5, r1
 80010b0:	4642      	mov	r2, r8
 80010b2:	408a      	lsls	r2, r1
 80010b4:	1e69      	subs	r1, r5, #1
 80010b6:	418d      	sbcs	r5, r1
 80010b8:	4641      	mov	r1, r8
 80010ba:	40d8      	lsrs	r0, r3
 80010bc:	40d9      	lsrs	r1, r3
 80010be:	4302      	orrs	r2, r0
 80010c0:	432a      	orrs	r2, r5
 80010c2:	000b      	movs	r3, r1
 80010c4:	0751      	lsls	r1, r2, #29
 80010c6:	d100      	bne.n	80010ca <__aeabi_ddiv+0x56e>
 80010c8:	e751      	b.n	8000f6e <__aeabi_ddiv+0x412>
 80010ca:	210f      	movs	r1, #15
 80010cc:	4011      	ands	r1, r2
 80010ce:	2904      	cmp	r1, #4
 80010d0:	d000      	beq.n	80010d4 <__aeabi_ddiv+0x578>
 80010d2:	e746      	b.n	8000f62 <__aeabi_ddiv+0x406>
 80010d4:	e74b      	b.n	8000f6e <__aeabi_ddiv+0x412>
 80010d6:	0005      	movs	r5, r0
 80010d8:	428e      	cmp	r6, r1
 80010da:	d000      	beq.n	80010de <__aeabi_ddiv+0x582>
 80010dc:	e66a      	b.n	8000db4 <__aeabi_ddiv+0x258>
 80010de:	9a00      	ldr	r2, [sp, #0]
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d000      	beq.n	80010e6 <__aeabi_ddiv+0x58a>
 80010e4:	e666      	b.n	8000db4 <__aeabi_ddiv+0x258>
 80010e6:	e667      	b.n	8000db8 <__aeabi_ddiv+0x25c>
 80010e8:	4a16      	ldr	r2, [pc, #88]	; (8001144 <__aeabi_ddiv+0x5e8>)
 80010ea:	445a      	add	r2, fp
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	dc00      	bgt.n	80010f2 <__aeabi_ddiv+0x596>
 80010f0:	e710      	b.n	8000f14 <__aeabi_ddiv+0x3b8>
 80010f2:	2301      	movs	r3, #1
 80010f4:	2500      	movs	r5, #0
 80010f6:	4498      	add	r8, r3
 80010f8:	e667      	b.n	8000dca <__aeabi_ddiv+0x26e>
 80010fa:	075d      	lsls	r5, r3, #29
 80010fc:	025b      	lsls	r3, r3, #9
 80010fe:	0b1c      	lsrs	r4, r3, #12
 8001100:	08d2      	lsrs	r2, r2, #3
 8001102:	2300      	movs	r3, #0
 8001104:	4315      	orrs	r5, r2
 8001106:	e580      	b.n	8000c0a <__aeabi_ddiv+0xae>
 8001108:	9800      	ldr	r0, [sp, #0]
 800110a:	3d02      	subs	r5, #2
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	4282      	cmp	r2, r0
 8001110:	41bf      	sbcs	r7, r7
 8001112:	427f      	negs	r7, r7
 8001114:	193c      	adds	r4, r7, r4
 8001116:	1936      	adds	r6, r6, r4
 8001118:	9200      	str	r2, [sp, #0]
 800111a:	e7dd      	b.n	80010d8 <__aeabi_ddiv+0x57c>
 800111c:	2480      	movs	r4, #128	; 0x80
 800111e:	4643      	mov	r3, r8
 8001120:	0324      	lsls	r4, r4, #12
 8001122:	431c      	orrs	r4, r3
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__aeabi_ddiv+0x5dc>)
 8001128:	0b24      	lsrs	r4, r4, #12
 800112a:	e56e      	b.n	8000c0a <__aeabi_ddiv+0xae>
 800112c:	9a00      	ldr	r2, [sp, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d3ea      	bcc.n	8001108 <__aeabi_ddiv+0x5ac>
 8001132:	0005      	movs	r5, r0
 8001134:	e7d3      	b.n	80010de <__aeabi_ddiv+0x582>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	000007ff 	.word	0x000007ff
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e
 8001144:	000003ff 	.word	0x000003ff

08001148 <__eqdf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464e      	mov	r6, r9
 800114c:	4645      	mov	r5, r8
 800114e:	46de      	mov	lr, fp
 8001150:	4657      	mov	r7, sl
 8001152:	4690      	mov	r8, r2
 8001154:	b5e0      	push	{r5, r6, r7, lr}
 8001156:	0017      	movs	r7, r2
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	0005      	movs	r5, r0
 800115e:	4684      	mov	ip, r0
 8001160:	4819      	ldr	r0, [pc, #100]	; (80011c8 <__eqdf2+0x80>)
 8001162:	030e      	lsls	r6, r1, #12
 8001164:	004c      	lsls	r4, r1, #1
 8001166:	4691      	mov	r9, r2
 8001168:	005a      	lsls	r2, r3, #1
 800116a:	0fdb      	lsrs	r3, r3, #31
 800116c:	469b      	mov	fp, r3
 800116e:	0b36      	lsrs	r6, r6, #12
 8001170:	0d64      	lsrs	r4, r4, #21
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	0d52      	lsrs	r2, r2, #21
 8001176:	4284      	cmp	r4, r0
 8001178:	d019      	beq.n	80011ae <__eqdf2+0x66>
 800117a:	4282      	cmp	r2, r0
 800117c:	d010      	beq.n	80011a0 <__eqdf2+0x58>
 800117e:	2001      	movs	r0, #1
 8001180:	4294      	cmp	r4, r2
 8001182:	d10e      	bne.n	80011a2 <__eqdf2+0x5a>
 8001184:	454e      	cmp	r6, r9
 8001186:	d10c      	bne.n	80011a2 <__eqdf2+0x5a>
 8001188:	2001      	movs	r0, #1
 800118a:	45c4      	cmp	ip, r8
 800118c:	d109      	bne.n	80011a2 <__eqdf2+0x5a>
 800118e:	4559      	cmp	r1, fp
 8001190:	d017      	beq.n	80011c2 <__eqdf2+0x7a>
 8001192:	2c00      	cmp	r4, #0
 8001194:	d105      	bne.n	80011a2 <__eqdf2+0x5a>
 8001196:	0030      	movs	r0, r6
 8001198:	4328      	orrs	r0, r5
 800119a:	1e43      	subs	r3, r0, #1
 800119c:	4198      	sbcs	r0, r3
 800119e:	e000      	b.n	80011a2 <__eqdf2+0x5a>
 80011a0:	2001      	movs	r0, #1
 80011a2:	bcf0      	pop	{r4, r5, r6, r7}
 80011a4:	46bb      	mov	fp, r7
 80011a6:	46b2      	mov	sl, r6
 80011a8:	46a9      	mov	r9, r5
 80011aa:	46a0      	mov	r8, r4
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ae:	0033      	movs	r3, r6
 80011b0:	2001      	movs	r0, #1
 80011b2:	432b      	orrs	r3, r5
 80011b4:	d1f5      	bne.n	80011a2 <__eqdf2+0x5a>
 80011b6:	42a2      	cmp	r2, r4
 80011b8:	d1f3      	bne.n	80011a2 <__eqdf2+0x5a>
 80011ba:	464b      	mov	r3, r9
 80011bc:	433b      	orrs	r3, r7
 80011be:	d1f0      	bne.n	80011a2 <__eqdf2+0x5a>
 80011c0:	e7e2      	b.n	8001188 <__eqdf2+0x40>
 80011c2:	2000      	movs	r0, #0
 80011c4:	e7ed      	b.n	80011a2 <__eqdf2+0x5a>
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	000007ff 	.word	0x000007ff

080011cc <__gedf2>:
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	4647      	mov	r7, r8
 80011d0:	46ce      	mov	lr, r9
 80011d2:	0004      	movs	r4, r0
 80011d4:	0018      	movs	r0, r3
 80011d6:	0016      	movs	r6, r2
 80011d8:	031b      	lsls	r3, r3, #12
 80011da:	0b1b      	lsrs	r3, r3, #12
 80011dc:	4d2d      	ldr	r5, [pc, #180]	; (8001294 <__gedf2+0xc8>)
 80011de:	004a      	lsls	r2, r1, #1
 80011e0:	4699      	mov	r9, r3
 80011e2:	b580      	push	{r7, lr}
 80011e4:	0043      	lsls	r3, r0, #1
 80011e6:	030f      	lsls	r7, r1, #12
 80011e8:	46a4      	mov	ip, r4
 80011ea:	46b0      	mov	r8, r6
 80011ec:	0b3f      	lsrs	r7, r7, #12
 80011ee:	0d52      	lsrs	r2, r2, #21
 80011f0:	0fc9      	lsrs	r1, r1, #31
 80011f2:	0d5b      	lsrs	r3, r3, #21
 80011f4:	0fc0      	lsrs	r0, r0, #31
 80011f6:	42aa      	cmp	r2, r5
 80011f8:	d021      	beq.n	800123e <__gedf2+0x72>
 80011fa:	42ab      	cmp	r3, r5
 80011fc:	d013      	beq.n	8001226 <__gedf2+0x5a>
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d122      	bne.n	8001248 <__gedf2+0x7c>
 8001202:	433c      	orrs	r4, r7
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <__gedf2+0x42>
 8001208:	464d      	mov	r5, r9
 800120a:	432e      	orrs	r6, r5
 800120c:	d022      	beq.n	8001254 <__gedf2+0x88>
 800120e:	2c00      	cmp	r4, #0
 8001210:	d010      	beq.n	8001234 <__gedf2+0x68>
 8001212:	4281      	cmp	r1, r0
 8001214:	d022      	beq.n	800125c <__gedf2+0x90>
 8001216:	2002      	movs	r0, #2
 8001218:	3901      	subs	r1, #1
 800121a:	4008      	ands	r0, r1
 800121c:	3801      	subs	r0, #1
 800121e:	bcc0      	pop	{r6, r7}
 8001220:	46b9      	mov	r9, r7
 8001222:	46b0      	mov	r8, r6
 8001224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001226:	464d      	mov	r5, r9
 8001228:	432e      	orrs	r6, r5
 800122a:	d129      	bne.n	8001280 <__gedf2+0xb4>
 800122c:	2a00      	cmp	r2, #0
 800122e:	d1f0      	bne.n	8001212 <__gedf2+0x46>
 8001230:	433c      	orrs	r4, r7
 8001232:	d1ee      	bne.n	8001212 <__gedf2+0x46>
 8001234:	2800      	cmp	r0, #0
 8001236:	d1f2      	bne.n	800121e <__gedf2+0x52>
 8001238:	2001      	movs	r0, #1
 800123a:	4240      	negs	r0, r0
 800123c:	e7ef      	b.n	800121e <__gedf2+0x52>
 800123e:	003d      	movs	r5, r7
 8001240:	4325      	orrs	r5, r4
 8001242:	d11d      	bne.n	8001280 <__gedf2+0xb4>
 8001244:	4293      	cmp	r3, r2
 8001246:	d0ee      	beq.n	8001226 <__gedf2+0x5a>
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e2      	bne.n	8001212 <__gedf2+0x46>
 800124c:	464c      	mov	r4, r9
 800124e:	4326      	orrs	r6, r4
 8001250:	d1df      	bne.n	8001212 <__gedf2+0x46>
 8001252:	e7e0      	b.n	8001216 <__gedf2+0x4a>
 8001254:	2000      	movs	r0, #0
 8001256:	2c00      	cmp	r4, #0
 8001258:	d0e1      	beq.n	800121e <__gedf2+0x52>
 800125a:	e7dc      	b.n	8001216 <__gedf2+0x4a>
 800125c:	429a      	cmp	r2, r3
 800125e:	dc0a      	bgt.n	8001276 <__gedf2+0xaa>
 8001260:	dbe8      	blt.n	8001234 <__gedf2+0x68>
 8001262:	454f      	cmp	r7, r9
 8001264:	d8d7      	bhi.n	8001216 <__gedf2+0x4a>
 8001266:	d00e      	beq.n	8001286 <__gedf2+0xba>
 8001268:	2000      	movs	r0, #0
 800126a:	454f      	cmp	r7, r9
 800126c:	d2d7      	bcs.n	800121e <__gedf2+0x52>
 800126e:	2900      	cmp	r1, #0
 8001270:	d0e2      	beq.n	8001238 <__gedf2+0x6c>
 8001272:	0008      	movs	r0, r1
 8001274:	e7d3      	b.n	800121e <__gedf2+0x52>
 8001276:	4243      	negs	r3, r0
 8001278:	4158      	adcs	r0, r3
 800127a:	0040      	lsls	r0, r0, #1
 800127c:	3801      	subs	r0, #1
 800127e:	e7ce      	b.n	800121e <__gedf2+0x52>
 8001280:	2002      	movs	r0, #2
 8001282:	4240      	negs	r0, r0
 8001284:	e7cb      	b.n	800121e <__gedf2+0x52>
 8001286:	45c4      	cmp	ip, r8
 8001288:	d8c5      	bhi.n	8001216 <__gedf2+0x4a>
 800128a:	2000      	movs	r0, #0
 800128c:	45c4      	cmp	ip, r8
 800128e:	d2c6      	bcs.n	800121e <__gedf2+0x52>
 8001290:	e7ed      	b.n	800126e <__gedf2+0xa2>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	000007ff 	.word	0x000007ff

08001298 <__ledf2>:
 8001298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129a:	4647      	mov	r7, r8
 800129c:	46ce      	mov	lr, r9
 800129e:	0004      	movs	r4, r0
 80012a0:	0018      	movs	r0, r3
 80012a2:	0016      	movs	r6, r2
 80012a4:	031b      	lsls	r3, r3, #12
 80012a6:	0b1b      	lsrs	r3, r3, #12
 80012a8:	4d2c      	ldr	r5, [pc, #176]	; (800135c <__ledf2+0xc4>)
 80012aa:	004a      	lsls	r2, r1, #1
 80012ac:	4699      	mov	r9, r3
 80012ae:	b580      	push	{r7, lr}
 80012b0:	0043      	lsls	r3, r0, #1
 80012b2:	030f      	lsls	r7, r1, #12
 80012b4:	46a4      	mov	ip, r4
 80012b6:	46b0      	mov	r8, r6
 80012b8:	0b3f      	lsrs	r7, r7, #12
 80012ba:	0d52      	lsrs	r2, r2, #21
 80012bc:	0fc9      	lsrs	r1, r1, #31
 80012be:	0d5b      	lsrs	r3, r3, #21
 80012c0:	0fc0      	lsrs	r0, r0, #31
 80012c2:	42aa      	cmp	r2, r5
 80012c4:	d00d      	beq.n	80012e2 <__ledf2+0x4a>
 80012c6:	42ab      	cmp	r3, r5
 80012c8:	d010      	beq.n	80012ec <__ledf2+0x54>
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d127      	bne.n	800131e <__ledf2+0x86>
 80012ce:	433c      	orrs	r4, r7
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d111      	bne.n	80012f8 <__ledf2+0x60>
 80012d4:	464d      	mov	r5, r9
 80012d6:	432e      	orrs	r6, r5
 80012d8:	d10e      	bne.n	80012f8 <__ledf2+0x60>
 80012da:	2000      	movs	r0, #0
 80012dc:	2c00      	cmp	r4, #0
 80012de:	d015      	beq.n	800130c <__ledf2+0x74>
 80012e0:	e00e      	b.n	8001300 <__ledf2+0x68>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d110      	bne.n	800130a <__ledf2+0x72>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d118      	bne.n	800131e <__ledf2+0x86>
 80012ec:	464d      	mov	r5, r9
 80012ee:	432e      	orrs	r6, r5
 80012f0:	d10b      	bne.n	800130a <__ledf2+0x72>
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	d102      	bne.n	80012fc <__ledf2+0x64>
 80012f6:	433c      	orrs	r4, r7
 80012f8:	2c00      	cmp	r4, #0
 80012fa:	d00b      	beq.n	8001314 <__ledf2+0x7c>
 80012fc:	4281      	cmp	r1, r0
 80012fe:	d014      	beq.n	800132a <__ledf2+0x92>
 8001300:	2002      	movs	r0, #2
 8001302:	3901      	subs	r1, #1
 8001304:	4008      	ands	r0, r1
 8001306:	3801      	subs	r0, #1
 8001308:	e000      	b.n	800130c <__ledf2+0x74>
 800130a:	2002      	movs	r0, #2
 800130c:	bcc0      	pop	{r6, r7}
 800130e:	46b9      	mov	r9, r7
 8001310:	46b0      	mov	r8, r6
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	2800      	cmp	r0, #0
 8001316:	d1f9      	bne.n	800130c <__ledf2+0x74>
 8001318:	2001      	movs	r0, #1
 800131a:	4240      	negs	r0, r0
 800131c:	e7f6      	b.n	800130c <__ledf2+0x74>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ec      	bne.n	80012fc <__ledf2+0x64>
 8001322:	464c      	mov	r4, r9
 8001324:	4326      	orrs	r6, r4
 8001326:	d1e9      	bne.n	80012fc <__ledf2+0x64>
 8001328:	e7ea      	b.n	8001300 <__ledf2+0x68>
 800132a:	429a      	cmp	r2, r3
 800132c:	dd04      	ble.n	8001338 <__ledf2+0xa0>
 800132e:	4243      	negs	r3, r0
 8001330:	4158      	adcs	r0, r3
 8001332:	0040      	lsls	r0, r0, #1
 8001334:	3801      	subs	r0, #1
 8001336:	e7e9      	b.n	800130c <__ledf2+0x74>
 8001338:	429a      	cmp	r2, r3
 800133a:	dbeb      	blt.n	8001314 <__ledf2+0x7c>
 800133c:	454f      	cmp	r7, r9
 800133e:	d8df      	bhi.n	8001300 <__ledf2+0x68>
 8001340:	d006      	beq.n	8001350 <__ledf2+0xb8>
 8001342:	2000      	movs	r0, #0
 8001344:	454f      	cmp	r7, r9
 8001346:	d2e1      	bcs.n	800130c <__ledf2+0x74>
 8001348:	2900      	cmp	r1, #0
 800134a:	d0e5      	beq.n	8001318 <__ledf2+0x80>
 800134c:	0008      	movs	r0, r1
 800134e:	e7dd      	b.n	800130c <__ledf2+0x74>
 8001350:	45c4      	cmp	ip, r8
 8001352:	d8d5      	bhi.n	8001300 <__ledf2+0x68>
 8001354:	2000      	movs	r0, #0
 8001356:	45c4      	cmp	ip, r8
 8001358:	d2d8      	bcs.n	800130c <__ledf2+0x74>
 800135a:	e7f5      	b.n	8001348 <__ledf2+0xb0>
 800135c:	000007ff 	.word	0x000007ff

08001360 <__aeabi_dmul>:
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	4657      	mov	r7, sl
 8001364:	464e      	mov	r6, r9
 8001366:	4645      	mov	r5, r8
 8001368:	46de      	mov	lr, fp
 800136a:	b5e0      	push	{r5, r6, r7, lr}
 800136c:	4698      	mov	r8, r3
 800136e:	030c      	lsls	r4, r1, #12
 8001370:	004b      	lsls	r3, r1, #1
 8001372:	0006      	movs	r6, r0
 8001374:	4692      	mov	sl, r2
 8001376:	b087      	sub	sp, #28
 8001378:	0b24      	lsrs	r4, r4, #12
 800137a:	0d5b      	lsrs	r3, r3, #21
 800137c:	0fcf      	lsrs	r7, r1, #31
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <__aeabi_dmul+0x24>
 8001382:	e15c      	b.n	800163e <__aeabi_dmul+0x2de>
 8001384:	4ad9      	ldr	r2, [pc, #868]	; (80016ec <__aeabi_dmul+0x38c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d100      	bne.n	800138c <__aeabi_dmul+0x2c>
 800138a:	e175      	b.n	8001678 <__aeabi_dmul+0x318>
 800138c:	0f42      	lsrs	r2, r0, #29
 800138e:	00e4      	lsls	r4, r4, #3
 8001390:	4314      	orrs	r4, r2
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	0412      	lsls	r2, r2, #16
 8001396:	4314      	orrs	r4, r2
 8001398:	4ad5      	ldr	r2, [pc, #852]	; (80016f0 <__aeabi_dmul+0x390>)
 800139a:	00c5      	lsls	r5, r0, #3
 800139c:	4694      	mov	ip, r2
 800139e:	4463      	add	r3, ip
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2300      	movs	r3, #0
 80013a4:	4699      	mov	r9, r3
 80013a6:	469b      	mov	fp, r3
 80013a8:	4643      	mov	r3, r8
 80013aa:	4642      	mov	r2, r8
 80013ac:	031e      	lsls	r6, r3, #12
 80013ae:	0fd2      	lsrs	r2, r2, #31
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4650      	mov	r0, sl
 80013b4:	4690      	mov	r8, r2
 80013b6:	0b36      	lsrs	r6, r6, #12
 80013b8:	0d5b      	lsrs	r3, r3, #21
 80013ba:	d100      	bne.n	80013be <__aeabi_dmul+0x5e>
 80013bc:	e120      	b.n	8001600 <__aeabi_dmul+0x2a0>
 80013be:	4acb      	ldr	r2, [pc, #812]	; (80016ec <__aeabi_dmul+0x38c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dmul+0x66>
 80013c4:	e162      	b.n	800168c <__aeabi_dmul+0x32c>
 80013c6:	49ca      	ldr	r1, [pc, #808]	; (80016f0 <__aeabi_dmul+0x390>)
 80013c8:	0f42      	lsrs	r2, r0, #29
 80013ca:	468c      	mov	ip, r1
 80013cc:	9900      	ldr	r1, [sp, #0]
 80013ce:	4463      	add	r3, ip
 80013d0:	00f6      	lsls	r6, r6, #3
 80013d2:	468c      	mov	ip, r1
 80013d4:	4316      	orrs	r6, r2
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	449c      	add	ip, r3
 80013da:	0412      	lsls	r2, r2, #16
 80013dc:	4663      	mov	r3, ip
 80013de:	4316      	orrs	r6, r2
 80013e0:	00c2      	lsls	r2, r0, #3
 80013e2:	2000      	movs	r0, #0
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	9900      	ldr	r1, [sp, #0]
 80013e8:	4643      	mov	r3, r8
 80013ea:	3101      	adds	r1, #1
 80013ec:	468c      	mov	ip, r1
 80013ee:	4649      	mov	r1, r9
 80013f0:	407b      	eors	r3, r7
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	290f      	cmp	r1, #15
 80013f6:	d826      	bhi.n	8001446 <__aeabi_dmul+0xe6>
 80013f8:	4bbe      	ldr	r3, [pc, #760]	; (80016f4 <__aeabi_dmul+0x394>)
 80013fa:	0089      	lsls	r1, r1, #2
 80013fc:	5859      	ldr	r1, [r3, r1]
 80013fe:	468f      	mov	pc, r1
 8001400:	4643      	mov	r3, r8
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	0034      	movs	r4, r6
 8001406:	0015      	movs	r5, r2
 8001408:	4683      	mov	fp, r0
 800140a:	465b      	mov	r3, fp
 800140c:	2b02      	cmp	r3, #2
 800140e:	d016      	beq.n	800143e <__aeabi_dmul+0xde>
 8001410:	2b03      	cmp	r3, #3
 8001412:	d100      	bne.n	8001416 <__aeabi_dmul+0xb6>
 8001414:	e203      	b.n	800181e <__aeabi_dmul+0x4be>
 8001416:	2b01      	cmp	r3, #1
 8001418:	d000      	beq.n	800141c <__aeabi_dmul+0xbc>
 800141a:	e0cd      	b.n	80015b8 <__aeabi_dmul+0x258>
 800141c:	2200      	movs	r2, #0
 800141e:	2400      	movs	r4, #0
 8001420:	2500      	movs	r5, #0
 8001422:	9b01      	ldr	r3, [sp, #4]
 8001424:	0512      	lsls	r2, r2, #20
 8001426:	4322      	orrs	r2, r4
 8001428:	07db      	lsls	r3, r3, #31
 800142a:	431a      	orrs	r2, r3
 800142c:	0028      	movs	r0, r5
 800142e:	0011      	movs	r1, r2
 8001430:	b007      	add	sp, #28
 8001432:	bcf0      	pop	{r4, r5, r6, r7}
 8001434:	46bb      	mov	fp, r7
 8001436:	46b2      	mov	sl, r6
 8001438:	46a9      	mov	r9, r5
 800143a:	46a0      	mov	r8, r4
 800143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143e:	2400      	movs	r4, #0
 8001440:	2500      	movs	r5, #0
 8001442:	4aaa      	ldr	r2, [pc, #680]	; (80016ec <__aeabi_dmul+0x38c>)
 8001444:	e7ed      	b.n	8001422 <__aeabi_dmul+0xc2>
 8001446:	0c28      	lsrs	r0, r5, #16
 8001448:	042d      	lsls	r5, r5, #16
 800144a:	0c2d      	lsrs	r5, r5, #16
 800144c:	002b      	movs	r3, r5
 800144e:	0c11      	lsrs	r1, r2, #16
 8001450:	0412      	lsls	r2, r2, #16
 8001452:	0c12      	lsrs	r2, r2, #16
 8001454:	4353      	muls	r3, r2
 8001456:	4698      	mov	r8, r3
 8001458:	0013      	movs	r3, r2
 800145a:	002f      	movs	r7, r5
 800145c:	4343      	muls	r3, r0
 800145e:	4699      	mov	r9, r3
 8001460:	434f      	muls	r7, r1
 8001462:	444f      	add	r7, r9
 8001464:	46bb      	mov	fp, r7
 8001466:	4647      	mov	r7, r8
 8001468:	000b      	movs	r3, r1
 800146a:	0c3f      	lsrs	r7, r7, #16
 800146c:	46ba      	mov	sl, r7
 800146e:	4343      	muls	r3, r0
 8001470:	44da      	add	sl, fp
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	45d1      	cmp	r9, sl
 8001476:	d904      	bls.n	8001482 <__aeabi_dmul+0x122>
 8001478:	2780      	movs	r7, #128	; 0x80
 800147a:	027f      	lsls	r7, r7, #9
 800147c:	46b9      	mov	r9, r7
 800147e:	444b      	add	r3, r9
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	4653      	mov	r3, sl
 8001484:	0c1b      	lsrs	r3, r3, #16
 8001486:	469b      	mov	fp, r3
 8001488:	4653      	mov	r3, sl
 800148a:	041f      	lsls	r7, r3, #16
 800148c:	4643      	mov	r3, r8
 800148e:	041b      	lsls	r3, r3, #16
 8001490:	0c1b      	lsrs	r3, r3, #16
 8001492:	4698      	mov	r8, r3
 8001494:	003b      	movs	r3, r7
 8001496:	4443      	add	r3, r8
 8001498:	9304      	str	r3, [sp, #16]
 800149a:	0c33      	lsrs	r3, r6, #16
 800149c:	0436      	lsls	r6, r6, #16
 800149e:	0c36      	lsrs	r6, r6, #16
 80014a0:	4698      	mov	r8, r3
 80014a2:	0033      	movs	r3, r6
 80014a4:	4343      	muls	r3, r0
 80014a6:	4699      	mov	r9, r3
 80014a8:	4643      	mov	r3, r8
 80014aa:	4343      	muls	r3, r0
 80014ac:	002f      	movs	r7, r5
 80014ae:	469a      	mov	sl, r3
 80014b0:	4643      	mov	r3, r8
 80014b2:	4377      	muls	r7, r6
 80014b4:	435d      	muls	r5, r3
 80014b6:	0c38      	lsrs	r0, r7, #16
 80014b8:	444d      	add	r5, r9
 80014ba:	1945      	adds	r5, r0, r5
 80014bc:	45a9      	cmp	r9, r5
 80014be:	d903      	bls.n	80014c8 <__aeabi_dmul+0x168>
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	025b      	lsls	r3, r3, #9
 80014c4:	4699      	mov	r9, r3
 80014c6:	44ca      	add	sl, r9
 80014c8:	043f      	lsls	r7, r7, #16
 80014ca:	0c28      	lsrs	r0, r5, #16
 80014cc:	0c3f      	lsrs	r7, r7, #16
 80014ce:	042d      	lsls	r5, r5, #16
 80014d0:	19ed      	adds	r5, r5, r7
 80014d2:	0c27      	lsrs	r7, r4, #16
 80014d4:	0424      	lsls	r4, r4, #16
 80014d6:	0c24      	lsrs	r4, r4, #16
 80014d8:	0003      	movs	r3, r0
 80014da:	0020      	movs	r0, r4
 80014dc:	4350      	muls	r0, r2
 80014de:	437a      	muls	r2, r7
 80014e0:	4691      	mov	r9, r2
 80014e2:	003a      	movs	r2, r7
 80014e4:	4453      	add	r3, sl
 80014e6:	9305      	str	r3, [sp, #20]
 80014e8:	0c03      	lsrs	r3, r0, #16
 80014ea:	469a      	mov	sl, r3
 80014ec:	434a      	muls	r2, r1
 80014ee:	4361      	muls	r1, r4
 80014f0:	4449      	add	r1, r9
 80014f2:	4451      	add	r1, sl
 80014f4:	44ab      	add	fp, r5
 80014f6:	4589      	cmp	r9, r1
 80014f8:	d903      	bls.n	8001502 <__aeabi_dmul+0x1a2>
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	025b      	lsls	r3, r3, #9
 80014fe:	4699      	mov	r9, r3
 8001500:	444a      	add	r2, r9
 8001502:	0400      	lsls	r0, r0, #16
 8001504:	0c0b      	lsrs	r3, r1, #16
 8001506:	0c00      	lsrs	r0, r0, #16
 8001508:	0409      	lsls	r1, r1, #16
 800150a:	1809      	adds	r1, r1, r0
 800150c:	0020      	movs	r0, r4
 800150e:	4699      	mov	r9, r3
 8001510:	4643      	mov	r3, r8
 8001512:	4370      	muls	r0, r6
 8001514:	435c      	muls	r4, r3
 8001516:	437e      	muls	r6, r7
 8001518:	435f      	muls	r7, r3
 800151a:	0c03      	lsrs	r3, r0, #16
 800151c:	4698      	mov	r8, r3
 800151e:	19a4      	adds	r4, r4, r6
 8001520:	4444      	add	r4, r8
 8001522:	444a      	add	r2, r9
 8001524:	9703      	str	r7, [sp, #12]
 8001526:	42a6      	cmp	r6, r4
 8001528:	d904      	bls.n	8001534 <__aeabi_dmul+0x1d4>
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	025b      	lsls	r3, r3, #9
 800152e:	4698      	mov	r8, r3
 8001530:	4447      	add	r7, r8
 8001532:	9703      	str	r7, [sp, #12]
 8001534:	0423      	lsls	r3, r4, #16
 8001536:	9e02      	ldr	r6, [sp, #8]
 8001538:	469a      	mov	sl, r3
 800153a:	9b05      	ldr	r3, [sp, #20]
 800153c:	445e      	add	r6, fp
 800153e:	4698      	mov	r8, r3
 8001540:	42ae      	cmp	r6, r5
 8001542:	41ad      	sbcs	r5, r5
 8001544:	1876      	adds	r6, r6, r1
 8001546:	428e      	cmp	r6, r1
 8001548:	4189      	sbcs	r1, r1
 800154a:	0400      	lsls	r0, r0, #16
 800154c:	0c00      	lsrs	r0, r0, #16
 800154e:	4450      	add	r0, sl
 8001550:	4440      	add	r0, r8
 8001552:	426d      	negs	r5, r5
 8001554:	1947      	adds	r7, r0, r5
 8001556:	46b8      	mov	r8, r7
 8001558:	4693      	mov	fp, r2
 800155a:	4249      	negs	r1, r1
 800155c:	4689      	mov	r9, r1
 800155e:	44c3      	add	fp, r8
 8001560:	44d9      	add	r9, fp
 8001562:	4298      	cmp	r0, r3
 8001564:	4180      	sbcs	r0, r0
 8001566:	45a8      	cmp	r8, r5
 8001568:	41ad      	sbcs	r5, r5
 800156a:	4593      	cmp	fp, r2
 800156c:	4192      	sbcs	r2, r2
 800156e:	4589      	cmp	r9, r1
 8001570:	4189      	sbcs	r1, r1
 8001572:	426d      	negs	r5, r5
 8001574:	4240      	negs	r0, r0
 8001576:	4328      	orrs	r0, r5
 8001578:	0c24      	lsrs	r4, r4, #16
 800157a:	4252      	negs	r2, r2
 800157c:	4249      	negs	r1, r1
 800157e:	430a      	orrs	r2, r1
 8001580:	9b03      	ldr	r3, [sp, #12]
 8001582:	1900      	adds	r0, r0, r4
 8001584:	1880      	adds	r0, r0, r2
 8001586:	18c7      	adds	r7, r0, r3
 8001588:	464b      	mov	r3, r9
 800158a:	0ddc      	lsrs	r4, r3, #23
 800158c:	9b04      	ldr	r3, [sp, #16]
 800158e:	0275      	lsls	r5, r6, #9
 8001590:	431d      	orrs	r5, r3
 8001592:	1e6a      	subs	r2, r5, #1
 8001594:	4195      	sbcs	r5, r2
 8001596:	464b      	mov	r3, r9
 8001598:	0df6      	lsrs	r6, r6, #23
 800159a:	027f      	lsls	r7, r7, #9
 800159c:	4335      	orrs	r5, r6
 800159e:	025a      	lsls	r2, r3, #9
 80015a0:	433c      	orrs	r4, r7
 80015a2:	4315      	orrs	r5, r2
 80015a4:	01fb      	lsls	r3, r7, #7
 80015a6:	d400      	bmi.n	80015aa <__aeabi_dmul+0x24a>
 80015a8:	e11c      	b.n	80017e4 <__aeabi_dmul+0x484>
 80015aa:	2101      	movs	r1, #1
 80015ac:	086a      	lsrs	r2, r5, #1
 80015ae:	400d      	ands	r5, r1
 80015b0:	4315      	orrs	r5, r2
 80015b2:	07e2      	lsls	r2, r4, #31
 80015b4:	4315      	orrs	r5, r2
 80015b6:	0864      	lsrs	r4, r4, #1
 80015b8:	494f      	ldr	r1, [pc, #316]	; (80016f8 <__aeabi_dmul+0x398>)
 80015ba:	4461      	add	r1, ip
 80015bc:	2900      	cmp	r1, #0
 80015be:	dc00      	bgt.n	80015c2 <__aeabi_dmul+0x262>
 80015c0:	e0b0      	b.n	8001724 <__aeabi_dmul+0x3c4>
 80015c2:	076b      	lsls	r3, r5, #29
 80015c4:	d009      	beq.n	80015da <__aeabi_dmul+0x27a>
 80015c6:	220f      	movs	r2, #15
 80015c8:	402a      	ands	r2, r5
 80015ca:	2a04      	cmp	r2, #4
 80015cc:	d005      	beq.n	80015da <__aeabi_dmul+0x27a>
 80015ce:	1d2a      	adds	r2, r5, #4
 80015d0:	42aa      	cmp	r2, r5
 80015d2:	41ad      	sbcs	r5, r5
 80015d4:	426d      	negs	r5, r5
 80015d6:	1964      	adds	r4, r4, r5
 80015d8:	0015      	movs	r5, r2
 80015da:	01e3      	lsls	r3, r4, #7
 80015dc:	d504      	bpl.n	80015e8 <__aeabi_dmul+0x288>
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	4a46      	ldr	r2, [pc, #280]	; (80016fc <__aeabi_dmul+0x39c>)
 80015e2:	00c9      	lsls	r1, r1, #3
 80015e4:	4014      	ands	r4, r2
 80015e6:	4461      	add	r1, ip
 80015e8:	4a45      	ldr	r2, [pc, #276]	; (8001700 <__aeabi_dmul+0x3a0>)
 80015ea:	4291      	cmp	r1, r2
 80015ec:	dd00      	ble.n	80015f0 <__aeabi_dmul+0x290>
 80015ee:	e726      	b.n	800143e <__aeabi_dmul+0xde>
 80015f0:	0762      	lsls	r2, r4, #29
 80015f2:	08ed      	lsrs	r5, r5, #3
 80015f4:	0264      	lsls	r4, r4, #9
 80015f6:	0549      	lsls	r1, r1, #21
 80015f8:	4315      	orrs	r5, r2
 80015fa:	0b24      	lsrs	r4, r4, #12
 80015fc:	0d4a      	lsrs	r2, r1, #21
 80015fe:	e710      	b.n	8001422 <__aeabi_dmul+0xc2>
 8001600:	4652      	mov	r2, sl
 8001602:	4332      	orrs	r2, r6
 8001604:	d100      	bne.n	8001608 <__aeabi_dmul+0x2a8>
 8001606:	e07f      	b.n	8001708 <__aeabi_dmul+0x3a8>
 8001608:	2e00      	cmp	r6, #0
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0x2ae>
 800160c:	e0dc      	b.n	80017c8 <__aeabi_dmul+0x468>
 800160e:	0030      	movs	r0, r6
 8001610:	f000 fd4e 	bl	80020b0 <__clzsi2>
 8001614:	0002      	movs	r2, r0
 8001616:	3a0b      	subs	r2, #11
 8001618:	231d      	movs	r3, #29
 800161a:	0001      	movs	r1, r0
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	4652      	mov	r2, sl
 8001620:	3908      	subs	r1, #8
 8001622:	40da      	lsrs	r2, r3
 8001624:	408e      	lsls	r6, r1
 8001626:	4316      	orrs	r6, r2
 8001628:	4652      	mov	r2, sl
 800162a:	408a      	lsls	r2, r1
 800162c:	9b00      	ldr	r3, [sp, #0]
 800162e:	4935      	ldr	r1, [pc, #212]	; (8001704 <__aeabi_dmul+0x3a4>)
 8001630:	1a18      	subs	r0, r3, r0
 8001632:	0003      	movs	r3, r0
 8001634:	468c      	mov	ip, r1
 8001636:	4463      	add	r3, ip
 8001638:	2000      	movs	r0, #0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	e6d3      	b.n	80013e6 <__aeabi_dmul+0x86>
 800163e:	0025      	movs	r5, r4
 8001640:	4305      	orrs	r5, r0
 8001642:	d04a      	beq.n	80016da <__aeabi_dmul+0x37a>
 8001644:	2c00      	cmp	r4, #0
 8001646:	d100      	bne.n	800164a <__aeabi_dmul+0x2ea>
 8001648:	e0b0      	b.n	80017ac <__aeabi_dmul+0x44c>
 800164a:	0020      	movs	r0, r4
 800164c:	f000 fd30 	bl	80020b0 <__clzsi2>
 8001650:	0001      	movs	r1, r0
 8001652:	0002      	movs	r2, r0
 8001654:	390b      	subs	r1, #11
 8001656:	231d      	movs	r3, #29
 8001658:	0010      	movs	r0, r2
 800165a:	1a5b      	subs	r3, r3, r1
 800165c:	0031      	movs	r1, r6
 800165e:	0035      	movs	r5, r6
 8001660:	3808      	subs	r0, #8
 8001662:	4084      	lsls	r4, r0
 8001664:	40d9      	lsrs	r1, r3
 8001666:	4085      	lsls	r5, r0
 8001668:	430c      	orrs	r4, r1
 800166a:	4826      	ldr	r0, [pc, #152]	; (8001704 <__aeabi_dmul+0x3a4>)
 800166c:	1a83      	subs	r3, r0, r2
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	4699      	mov	r9, r3
 8001674:	469b      	mov	fp, r3
 8001676:	e697      	b.n	80013a8 <__aeabi_dmul+0x48>
 8001678:	0005      	movs	r5, r0
 800167a:	4325      	orrs	r5, r4
 800167c:	d126      	bne.n	80016cc <__aeabi_dmul+0x36c>
 800167e:	2208      	movs	r2, #8
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2302      	movs	r3, #2
 8001684:	2400      	movs	r4, #0
 8001686:	4691      	mov	r9, r2
 8001688:	469b      	mov	fp, r3
 800168a:	e68d      	b.n	80013a8 <__aeabi_dmul+0x48>
 800168c:	4652      	mov	r2, sl
 800168e:	9b00      	ldr	r3, [sp, #0]
 8001690:	4332      	orrs	r2, r6
 8001692:	d110      	bne.n	80016b6 <__aeabi_dmul+0x356>
 8001694:	4915      	ldr	r1, [pc, #84]	; (80016ec <__aeabi_dmul+0x38c>)
 8001696:	2600      	movs	r6, #0
 8001698:	468c      	mov	ip, r1
 800169a:	4463      	add	r3, ip
 800169c:	4649      	mov	r1, r9
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2302      	movs	r3, #2
 80016a2:	4319      	orrs	r1, r3
 80016a4:	4689      	mov	r9, r1
 80016a6:	2002      	movs	r0, #2
 80016a8:	e69d      	b.n	80013e6 <__aeabi_dmul+0x86>
 80016aa:	465b      	mov	r3, fp
 80016ac:	9701      	str	r7, [sp, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dmul+0x354>
 80016b2:	e6ad      	b.n	8001410 <__aeabi_dmul+0xb0>
 80016b4:	e6c3      	b.n	800143e <__aeabi_dmul+0xde>
 80016b6:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <__aeabi_dmul+0x38c>)
 80016b8:	2003      	movs	r0, #3
 80016ba:	4694      	mov	ip, r2
 80016bc:	4463      	add	r3, ip
 80016be:	464a      	mov	r2, r9
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2303      	movs	r3, #3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	4691      	mov	r9, r2
 80016c8:	4652      	mov	r2, sl
 80016ca:	e68c      	b.n	80013e6 <__aeabi_dmul+0x86>
 80016cc:	220c      	movs	r2, #12
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2303      	movs	r3, #3
 80016d2:	0005      	movs	r5, r0
 80016d4:	4691      	mov	r9, r2
 80016d6:	469b      	mov	fp, r3
 80016d8:	e666      	b.n	80013a8 <__aeabi_dmul+0x48>
 80016da:	2304      	movs	r3, #4
 80016dc:	4699      	mov	r9, r3
 80016de:	2300      	movs	r3, #0
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	2400      	movs	r4, #0
 80016e6:	469b      	mov	fp, r3
 80016e8:	e65e      	b.n	80013a8 <__aeabi_dmul+0x48>
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	000007ff 	.word	0x000007ff
 80016f0:	fffffc01 	.word	0xfffffc01
 80016f4:	08008190 	.word	0x08008190
 80016f8:	000003ff 	.word	0x000003ff
 80016fc:	feffffff 	.word	0xfeffffff
 8001700:	000007fe 	.word	0x000007fe
 8001704:	fffffc0d 	.word	0xfffffc0d
 8001708:	4649      	mov	r1, r9
 800170a:	2301      	movs	r3, #1
 800170c:	4319      	orrs	r1, r3
 800170e:	4689      	mov	r9, r1
 8001710:	2600      	movs	r6, #0
 8001712:	2001      	movs	r0, #1
 8001714:	e667      	b.n	80013e6 <__aeabi_dmul+0x86>
 8001716:	2300      	movs	r3, #0
 8001718:	2480      	movs	r4, #128	; 0x80
 800171a:	2500      	movs	r5, #0
 800171c:	4a43      	ldr	r2, [pc, #268]	; (800182c <__aeabi_dmul+0x4cc>)
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	0324      	lsls	r4, r4, #12
 8001722:	e67e      	b.n	8001422 <__aeabi_dmul+0xc2>
 8001724:	2001      	movs	r0, #1
 8001726:	1a40      	subs	r0, r0, r1
 8001728:	2838      	cmp	r0, #56	; 0x38
 800172a:	dd00      	ble.n	800172e <__aeabi_dmul+0x3ce>
 800172c:	e676      	b.n	800141c <__aeabi_dmul+0xbc>
 800172e:	281f      	cmp	r0, #31
 8001730:	dd5b      	ble.n	80017ea <__aeabi_dmul+0x48a>
 8001732:	221f      	movs	r2, #31
 8001734:	0023      	movs	r3, r4
 8001736:	4252      	negs	r2, r2
 8001738:	1a51      	subs	r1, r2, r1
 800173a:	40cb      	lsrs	r3, r1
 800173c:	0019      	movs	r1, r3
 800173e:	2820      	cmp	r0, #32
 8001740:	d003      	beq.n	800174a <__aeabi_dmul+0x3ea>
 8001742:	4a3b      	ldr	r2, [pc, #236]	; (8001830 <__aeabi_dmul+0x4d0>)
 8001744:	4462      	add	r2, ip
 8001746:	4094      	lsls	r4, r2
 8001748:	4325      	orrs	r5, r4
 800174a:	1e6a      	subs	r2, r5, #1
 800174c:	4195      	sbcs	r5, r2
 800174e:	002a      	movs	r2, r5
 8001750:	430a      	orrs	r2, r1
 8001752:	2107      	movs	r1, #7
 8001754:	000d      	movs	r5, r1
 8001756:	2400      	movs	r4, #0
 8001758:	4015      	ands	r5, r2
 800175a:	4211      	tst	r1, r2
 800175c:	d05b      	beq.n	8001816 <__aeabi_dmul+0x4b6>
 800175e:	210f      	movs	r1, #15
 8001760:	2400      	movs	r4, #0
 8001762:	4011      	ands	r1, r2
 8001764:	2904      	cmp	r1, #4
 8001766:	d053      	beq.n	8001810 <__aeabi_dmul+0x4b0>
 8001768:	1d11      	adds	r1, r2, #4
 800176a:	4291      	cmp	r1, r2
 800176c:	4192      	sbcs	r2, r2
 800176e:	4252      	negs	r2, r2
 8001770:	18a4      	adds	r4, r4, r2
 8001772:	000a      	movs	r2, r1
 8001774:	0223      	lsls	r3, r4, #8
 8001776:	d54b      	bpl.n	8001810 <__aeabi_dmul+0x4b0>
 8001778:	2201      	movs	r2, #1
 800177a:	2400      	movs	r4, #0
 800177c:	2500      	movs	r5, #0
 800177e:	e650      	b.n	8001422 <__aeabi_dmul+0xc2>
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	031b      	lsls	r3, r3, #12
 8001784:	421c      	tst	r4, r3
 8001786:	d009      	beq.n	800179c <__aeabi_dmul+0x43c>
 8001788:	421e      	tst	r6, r3
 800178a:	d107      	bne.n	800179c <__aeabi_dmul+0x43c>
 800178c:	4333      	orrs	r3, r6
 800178e:	031c      	lsls	r4, r3, #12
 8001790:	4643      	mov	r3, r8
 8001792:	0015      	movs	r5, r2
 8001794:	0b24      	lsrs	r4, r4, #12
 8001796:	4a25      	ldr	r2, [pc, #148]	; (800182c <__aeabi_dmul+0x4cc>)
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	e642      	b.n	8001422 <__aeabi_dmul+0xc2>
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	0312      	lsls	r2, r2, #12
 80017a0:	4314      	orrs	r4, r2
 80017a2:	0324      	lsls	r4, r4, #12
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <__aeabi_dmul+0x4cc>)
 80017a6:	0b24      	lsrs	r4, r4, #12
 80017a8:	9701      	str	r7, [sp, #4]
 80017aa:	e63a      	b.n	8001422 <__aeabi_dmul+0xc2>
 80017ac:	f000 fc80 	bl	80020b0 <__clzsi2>
 80017b0:	0001      	movs	r1, r0
 80017b2:	0002      	movs	r2, r0
 80017b4:	3115      	adds	r1, #21
 80017b6:	3220      	adds	r2, #32
 80017b8:	291c      	cmp	r1, #28
 80017ba:	dc00      	bgt.n	80017be <__aeabi_dmul+0x45e>
 80017bc:	e74b      	b.n	8001656 <__aeabi_dmul+0x2f6>
 80017be:	0034      	movs	r4, r6
 80017c0:	3808      	subs	r0, #8
 80017c2:	2500      	movs	r5, #0
 80017c4:	4084      	lsls	r4, r0
 80017c6:	e750      	b.n	800166a <__aeabi_dmul+0x30a>
 80017c8:	f000 fc72 	bl	80020b0 <__clzsi2>
 80017cc:	0003      	movs	r3, r0
 80017ce:	001a      	movs	r2, r3
 80017d0:	3215      	adds	r2, #21
 80017d2:	3020      	adds	r0, #32
 80017d4:	2a1c      	cmp	r2, #28
 80017d6:	dc00      	bgt.n	80017da <__aeabi_dmul+0x47a>
 80017d8:	e71e      	b.n	8001618 <__aeabi_dmul+0x2b8>
 80017da:	4656      	mov	r6, sl
 80017dc:	3b08      	subs	r3, #8
 80017de:	2200      	movs	r2, #0
 80017e0:	409e      	lsls	r6, r3
 80017e2:	e723      	b.n	800162c <__aeabi_dmul+0x2cc>
 80017e4:	9b00      	ldr	r3, [sp, #0]
 80017e6:	469c      	mov	ip, r3
 80017e8:	e6e6      	b.n	80015b8 <__aeabi_dmul+0x258>
 80017ea:	4912      	ldr	r1, [pc, #72]	; (8001834 <__aeabi_dmul+0x4d4>)
 80017ec:	0022      	movs	r2, r4
 80017ee:	4461      	add	r1, ip
 80017f0:	002e      	movs	r6, r5
 80017f2:	408d      	lsls	r5, r1
 80017f4:	408a      	lsls	r2, r1
 80017f6:	40c6      	lsrs	r6, r0
 80017f8:	1e69      	subs	r1, r5, #1
 80017fa:	418d      	sbcs	r5, r1
 80017fc:	4332      	orrs	r2, r6
 80017fe:	432a      	orrs	r2, r5
 8001800:	40c4      	lsrs	r4, r0
 8001802:	0753      	lsls	r3, r2, #29
 8001804:	d0b6      	beq.n	8001774 <__aeabi_dmul+0x414>
 8001806:	210f      	movs	r1, #15
 8001808:	4011      	ands	r1, r2
 800180a:	2904      	cmp	r1, #4
 800180c:	d1ac      	bne.n	8001768 <__aeabi_dmul+0x408>
 800180e:	e7b1      	b.n	8001774 <__aeabi_dmul+0x414>
 8001810:	0765      	lsls	r5, r4, #29
 8001812:	0264      	lsls	r4, r4, #9
 8001814:	0b24      	lsrs	r4, r4, #12
 8001816:	08d2      	lsrs	r2, r2, #3
 8001818:	4315      	orrs	r5, r2
 800181a:	2200      	movs	r2, #0
 800181c:	e601      	b.n	8001422 <__aeabi_dmul+0xc2>
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	0312      	lsls	r2, r2, #12
 8001822:	4314      	orrs	r4, r2
 8001824:	0324      	lsls	r4, r4, #12
 8001826:	4a01      	ldr	r2, [pc, #4]	; (800182c <__aeabi_dmul+0x4cc>)
 8001828:	0b24      	lsrs	r4, r4, #12
 800182a:	e5fa      	b.n	8001422 <__aeabi_dmul+0xc2>
 800182c:	000007ff 	.word	0x000007ff
 8001830:	0000043e 	.word	0x0000043e
 8001834:	0000041e 	.word	0x0000041e

08001838 <__aeabi_dsub>:
 8001838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183a:	4657      	mov	r7, sl
 800183c:	464e      	mov	r6, r9
 800183e:	4645      	mov	r5, r8
 8001840:	46de      	mov	lr, fp
 8001842:	b5e0      	push	{r5, r6, r7, lr}
 8001844:	001e      	movs	r6, r3
 8001846:	0017      	movs	r7, r2
 8001848:	004a      	lsls	r2, r1, #1
 800184a:	030b      	lsls	r3, r1, #12
 800184c:	0d52      	lsrs	r2, r2, #21
 800184e:	0a5b      	lsrs	r3, r3, #9
 8001850:	4690      	mov	r8, r2
 8001852:	0f42      	lsrs	r2, r0, #29
 8001854:	431a      	orrs	r2, r3
 8001856:	0fcd      	lsrs	r5, r1, #31
 8001858:	4ccd      	ldr	r4, [pc, #820]	; (8001b90 <__aeabi_dsub+0x358>)
 800185a:	0331      	lsls	r1, r6, #12
 800185c:	00c3      	lsls	r3, r0, #3
 800185e:	4694      	mov	ip, r2
 8001860:	0070      	lsls	r0, r6, #1
 8001862:	0f7a      	lsrs	r2, r7, #29
 8001864:	0a49      	lsrs	r1, r1, #9
 8001866:	00ff      	lsls	r7, r7, #3
 8001868:	469a      	mov	sl, r3
 800186a:	46b9      	mov	r9, r7
 800186c:	0d40      	lsrs	r0, r0, #21
 800186e:	0ff6      	lsrs	r6, r6, #31
 8001870:	4311      	orrs	r1, r2
 8001872:	42a0      	cmp	r0, r4
 8001874:	d100      	bne.n	8001878 <__aeabi_dsub+0x40>
 8001876:	e0b1      	b.n	80019dc <__aeabi_dsub+0x1a4>
 8001878:	2201      	movs	r2, #1
 800187a:	4056      	eors	r6, r2
 800187c:	46b3      	mov	fp, r6
 800187e:	42b5      	cmp	r5, r6
 8001880:	d100      	bne.n	8001884 <__aeabi_dsub+0x4c>
 8001882:	e088      	b.n	8001996 <__aeabi_dsub+0x15e>
 8001884:	4642      	mov	r2, r8
 8001886:	1a12      	subs	r2, r2, r0
 8001888:	2a00      	cmp	r2, #0
 800188a:	dc00      	bgt.n	800188e <__aeabi_dsub+0x56>
 800188c:	e0ae      	b.n	80019ec <__aeabi_dsub+0x1b4>
 800188e:	2800      	cmp	r0, #0
 8001890:	d100      	bne.n	8001894 <__aeabi_dsub+0x5c>
 8001892:	e0c1      	b.n	8001a18 <__aeabi_dsub+0x1e0>
 8001894:	48be      	ldr	r0, [pc, #760]	; (8001b90 <__aeabi_dsub+0x358>)
 8001896:	4580      	cmp	r8, r0
 8001898:	d100      	bne.n	800189c <__aeabi_dsub+0x64>
 800189a:	e151      	b.n	8001b40 <__aeabi_dsub+0x308>
 800189c:	2080      	movs	r0, #128	; 0x80
 800189e:	0400      	lsls	r0, r0, #16
 80018a0:	4301      	orrs	r1, r0
 80018a2:	2a38      	cmp	r2, #56	; 0x38
 80018a4:	dd00      	ble.n	80018a8 <__aeabi_dsub+0x70>
 80018a6:	e17b      	b.n	8001ba0 <__aeabi_dsub+0x368>
 80018a8:	2a1f      	cmp	r2, #31
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dsub+0x76>
 80018ac:	e1ee      	b.n	8001c8c <__aeabi_dsub+0x454>
 80018ae:	2020      	movs	r0, #32
 80018b0:	003e      	movs	r6, r7
 80018b2:	1a80      	subs	r0, r0, r2
 80018b4:	000c      	movs	r4, r1
 80018b6:	40d6      	lsrs	r6, r2
 80018b8:	40d1      	lsrs	r1, r2
 80018ba:	4087      	lsls	r7, r0
 80018bc:	4662      	mov	r2, ip
 80018be:	4084      	lsls	r4, r0
 80018c0:	1a52      	subs	r2, r2, r1
 80018c2:	1e78      	subs	r0, r7, #1
 80018c4:	4187      	sbcs	r7, r0
 80018c6:	4694      	mov	ip, r2
 80018c8:	4334      	orrs	r4, r6
 80018ca:	4327      	orrs	r7, r4
 80018cc:	1bdc      	subs	r4, r3, r7
 80018ce:	42a3      	cmp	r3, r4
 80018d0:	419b      	sbcs	r3, r3
 80018d2:	4662      	mov	r2, ip
 80018d4:	425b      	negs	r3, r3
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	4699      	mov	r9, r3
 80018da:	464b      	mov	r3, r9
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	d400      	bmi.n	80018e2 <__aeabi_dsub+0xaa>
 80018e0:	e118      	b.n	8001b14 <__aeabi_dsub+0x2dc>
 80018e2:	464b      	mov	r3, r9
 80018e4:	0258      	lsls	r0, r3, #9
 80018e6:	0a43      	lsrs	r3, r0, #9
 80018e8:	4699      	mov	r9, r3
 80018ea:	464b      	mov	r3, r9
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dsub+0xba>
 80018f0:	e137      	b.n	8001b62 <__aeabi_dsub+0x32a>
 80018f2:	4648      	mov	r0, r9
 80018f4:	f000 fbdc 	bl	80020b0 <__clzsi2>
 80018f8:	0001      	movs	r1, r0
 80018fa:	3908      	subs	r1, #8
 80018fc:	2320      	movs	r3, #32
 80018fe:	0022      	movs	r2, r4
 8001900:	4648      	mov	r0, r9
 8001902:	1a5b      	subs	r3, r3, r1
 8001904:	40da      	lsrs	r2, r3
 8001906:	4088      	lsls	r0, r1
 8001908:	408c      	lsls	r4, r1
 800190a:	4643      	mov	r3, r8
 800190c:	4310      	orrs	r0, r2
 800190e:	4588      	cmp	r8, r1
 8001910:	dd00      	ble.n	8001914 <__aeabi_dsub+0xdc>
 8001912:	e136      	b.n	8001b82 <__aeabi_dsub+0x34a>
 8001914:	1ac9      	subs	r1, r1, r3
 8001916:	1c4b      	adds	r3, r1, #1
 8001918:	2b1f      	cmp	r3, #31
 800191a:	dd00      	ble.n	800191e <__aeabi_dsub+0xe6>
 800191c:	e0ea      	b.n	8001af4 <__aeabi_dsub+0x2bc>
 800191e:	2220      	movs	r2, #32
 8001920:	0026      	movs	r6, r4
 8001922:	1ad2      	subs	r2, r2, r3
 8001924:	0001      	movs	r1, r0
 8001926:	4094      	lsls	r4, r2
 8001928:	40de      	lsrs	r6, r3
 800192a:	40d8      	lsrs	r0, r3
 800192c:	2300      	movs	r3, #0
 800192e:	4091      	lsls	r1, r2
 8001930:	1e62      	subs	r2, r4, #1
 8001932:	4194      	sbcs	r4, r2
 8001934:	4681      	mov	r9, r0
 8001936:	4698      	mov	r8, r3
 8001938:	4331      	orrs	r1, r6
 800193a:	430c      	orrs	r4, r1
 800193c:	0763      	lsls	r3, r4, #29
 800193e:	d009      	beq.n	8001954 <__aeabi_dsub+0x11c>
 8001940:	230f      	movs	r3, #15
 8001942:	4023      	ands	r3, r4
 8001944:	2b04      	cmp	r3, #4
 8001946:	d005      	beq.n	8001954 <__aeabi_dsub+0x11c>
 8001948:	1d23      	adds	r3, r4, #4
 800194a:	42a3      	cmp	r3, r4
 800194c:	41a4      	sbcs	r4, r4
 800194e:	4264      	negs	r4, r4
 8001950:	44a1      	add	r9, r4
 8001952:	001c      	movs	r4, r3
 8001954:	464b      	mov	r3, r9
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	d400      	bmi.n	800195c <__aeabi_dsub+0x124>
 800195a:	e0de      	b.n	8001b1a <__aeabi_dsub+0x2e2>
 800195c:	4641      	mov	r1, r8
 800195e:	4b8c      	ldr	r3, [pc, #560]	; (8001b90 <__aeabi_dsub+0x358>)
 8001960:	3101      	adds	r1, #1
 8001962:	4299      	cmp	r1, r3
 8001964:	d100      	bne.n	8001968 <__aeabi_dsub+0x130>
 8001966:	e0e7      	b.n	8001b38 <__aeabi_dsub+0x300>
 8001968:	464b      	mov	r3, r9
 800196a:	488a      	ldr	r0, [pc, #552]	; (8001b94 <__aeabi_dsub+0x35c>)
 800196c:	08e4      	lsrs	r4, r4, #3
 800196e:	4003      	ands	r3, r0
 8001970:	0018      	movs	r0, r3
 8001972:	0549      	lsls	r1, r1, #21
 8001974:	075b      	lsls	r3, r3, #29
 8001976:	0240      	lsls	r0, r0, #9
 8001978:	4323      	orrs	r3, r4
 800197a:	0d4a      	lsrs	r2, r1, #21
 800197c:	0b04      	lsrs	r4, r0, #12
 800197e:	0512      	lsls	r2, r2, #20
 8001980:	07ed      	lsls	r5, r5, #31
 8001982:	4322      	orrs	r2, r4
 8001984:	432a      	orrs	r2, r5
 8001986:	0018      	movs	r0, r3
 8001988:	0011      	movs	r1, r2
 800198a:	bcf0      	pop	{r4, r5, r6, r7}
 800198c:	46bb      	mov	fp, r7
 800198e:	46b2      	mov	sl, r6
 8001990:	46a9      	mov	r9, r5
 8001992:	46a0      	mov	r8, r4
 8001994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001996:	4642      	mov	r2, r8
 8001998:	1a12      	subs	r2, r2, r0
 800199a:	2a00      	cmp	r2, #0
 800199c:	dd52      	ble.n	8001a44 <__aeabi_dsub+0x20c>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x16c>
 80019a2:	e09c      	b.n	8001ade <__aeabi_dsub+0x2a6>
 80019a4:	45a0      	cmp	r8, r4
 80019a6:	d100      	bne.n	80019aa <__aeabi_dsub+0x172>
 80019a8:	e0ca      	b.n	8001b40 <__aeabi_dsub+0x308>
 80019aa:	2080      	movs	r0, #128	; 0x80
 80019ac:	0400      	lsls	r0, r0, #16
 80019ae:	4301      	orrs	r1, r0
 80019b0:	2a38      	cmp	r2, #56	; 0x38
 80019b2:	dd00      	ble.n	80019b6 <__aeabi_dsub+0x17e>
 80019b4:	e149      	b.n	8001c4a <__aeabi_dsub+0x412>
 80019b6:	2a1f      	cmp	r2, #31
 80019b8:	dc00      	bgt.n	80019bc <__aeabi_dsub+0x184>
 80019ba:	e197      	b.n	8001cec <__aeabi_dsub+0x4b4>
 80019bc:	0010      	movs	r0, r2
 80019be:	000e      	movs	r6, r1
 80019c0:	3820      	subs	r0, #32
 80019c2:	40c6      	lsrs	r6, r0
 80019c4:	2a20      	cmp	r2, #32
 80019c6:	d004      	beq.n	80019d2 <__aeabi_dsub+0x19a>
 80019c8:	2040      	movs	r0, #64	; 0x40
 80019ca:	1a82      	subs	r2, r0, r2
 80019cc:	4091      	lsls	r1, r2
 80019ce:	430f      	orrs	r7, r1
 80019d0:	46b9      	mov	r9, r7
 80019d2:	464c      	mov	r4, r9
 80019d4:	1e62      	subs	r2, r4, #1
 80019d6:	4194      	sbcs	r4, r2
 80019d8:	4334      	orrs	r4, r6
 80019da:	e13a      	b.n	8001c52 <__aeabi_dsub+0x41a>
 80019dc:	000a      	movs	r2, r1
 80019de:	433a      	orrs	r2, r7
 80019e0:	d028      	beq.n	8001a34 <__aeabi_dsub+0x1fc>
 80019e2:	46b3      	mov	fp, r6
 80019e4:	42b5      	cmp	r5, r6
 80019e6:	d02b      	beq.n	8001a40 <__aeabi_dsub+0x208>
 80019e8:	4a6b      	ldr	r2, [pc, #428]	; (8001b98 <__aeabi_dsub+0x360>)
 80019ea:	4442      	add	r2, r8
 80019ec:	2a00      	cmp	r2, #0
 80019ee:	d05d      	beq.n	8001aac <__aeabi_dsub+0x274>
 80019f0:	4642      	mov	r2, r8
 80019f2:	4644      	mov	r4, r8
 80019f4:	1a82      	subs	r2, r0, r2
 80019f6:	2c00      	cmp	r4, #0
 80019f8:	d000      	beq.n	80019fc <__aeabi_dsub+0x1c4>
 80019fa:	e0f5      	b.n	8001be8 <__aeabi_dsub+0x3b0>
 80019fc:	4665      	mov	r5, ip
 80019fe:	431d      	orrs	r5, r3
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x1cc>
 8001a02:	e19c      	b.n	8001d3e <__aeabi_dsub+0x506>
 8001a04:	1e55      	subs	r5, r2, #1
 8001a06:	2a01      	cmp	r2, #1
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x1d4>
 8001a0a:	e1fb      	b.n	8001e04 <__aeabi_dsub+0x5cc>
 8001a0c:	4c60      	ldr	r4, [pc, #384]	; (8001b90 <__aeabi_dsub+0x358>)
 8001a0e:	42a2      	cmp	r2, r4
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dsub+0x1dc>
 8001a12:	e1bd      	b.n	8001d90 <__aeabi_dsub+0x558>
 8001a14:	002a      	movs	r2, r5
 8001a16:	e0f0      	b.n	8001bfa <__aeabi_dsub+0x3c2>
 8001a18:	0008      	movs	r0, r1
 8001a1a:	4338      	orrs	r0, r7
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x1e8>
 8001a1e:	e0c3      	b.n	8001ba8 <__aeabi_dsub+0x370>
 8001a20:	1e50      	subs	r0, r2, #1
 8001a22:	2a01      	cmp	r2, #1
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dsub+0x1f0>
 8001a26:	e1a8      	b.n	8001d7a <__aeabi_dsub+0x542>
 8001a28:	4c59      	ldr	r4, [pc, #356]	; (8001b90 <__aeabi_dsub+0x358>)
 8001a2a:	42a2      	cmp	r2, r4
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dsub+0x1f8>
 8001a2e:	e087      	b.n	8001b40 <__aeabi_dsub+0x308>
 8001a30:	0002      	movs	r2, r0
 8001a32:	e736      	b.n	80018a2 <__aeabi_dsub+0x6a>
 8001a34:	2201      	movs	r2, #1
 8001a36:	4056      	eors	r6, r2
 8001a38:	46b3      	mov	fp, r6
 8001a3a:	42b5      	cmp	r5, r6
 8001a3c:	d000      	beq.n	8001a40 <__aeabi_dsub+0x208>
 8001a3e:	e721      	b.n	8001884 <__aeabi_dsub+0x4c>
 8001a40:	4a55      	ldr	r2, [pc, #340]	; (8001b98 <__aeabi_dsub+0x360>)
 8001a42:	4442      	add	r2, r8
 8001a44:	2a00      	cmp	r2, #0
 8001a46:	d100      	bne.n	8001a4a <__aeabi_dsub+0x212>
 8001a48:	e0b5      	b.n	8001bb6 <__aeabi_dsub+0x37e>
 8001a4a:	4642      	mov	r2, r8
 8001a4c:	4644      	mov	r4, r8
 8001a4e:	1a82      	subs	r2, r0, r2
 8001a50:	2c00      	cmp	r4, #0
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dsub+0x21e>
 8001a54:	e138      	b.n	8001cc8 <__aeabi_dsub+0x490>
 8001a56:	4e4e      	ldr	r6, [pc, #312]	; (8001b90 <__aeabi_dsub+0x358>)
 8001a58:	42b0      	cmp	r0, r6
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dsub+0x226>
 8001a5c:	e1de      	b.n	8001e1c <__aeabi_dsub+0x5e4>
 8001a5e:	2680      	movs	r6, #128	; 0x80
 8001a60:	4664      	mov	r4, ip
 8001a62:	0436      	lsls	r6, r6, #16
 8001a64:	4334      	orrs	r4, r6
 8001a66:	46a4      	mov	ip, r4
 8001a68:	2a38      	cmp	r2, #56	; 0x38
 8001a6a:	dd00      	ble.n	8001a6e <__aeabi_dsub+0x236>
 8001a6c:	e196      	b.n	8001d9c <__aeabi_dsub+0x564>
 8001a6e:	2a1f      	cmp	r2, #31
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_dsub+0x23c>
 8001a72:	e224      	b.n	8001ebe <__aeabi_dsub+0x686>
 8001a74:	2620      	movs	r6, #32
 8001a76:	1ab4      	subs	r4, r6, r2
 8001a78:	46a2      	mov	sl, r4
 8001a7a:	4664      	mov	r4, ip
 8001a7c:	4656      	mov	r6, sl
 8001a7e:	40b4      	lsls	r4, r6
 8001a80:	46a1      	mov	r9, r4
 8001a82:	001c      	movs	r4, r3
 8001a84:	464e      	mov	r6, r9
 8001a86:	40d4      	lsrs	r4, r2
 8001a88:	4326      	orrs	r6, r4
 8001a8a:	0034      	movs	r4, r6
 8001a8c:	4656      	mov	r6, sl
 8001a8e:	40b3      	lsls	r3, r6
 8001a90:	1e5e      	subs	r6, r3, #1
 8001a92:	41b3      	sbcs	r3, r6
 8001a94:	431c      	orrs	r4, r3
 8001a96:	4663      	mov	r3, ip
 8001a98:	40d3      	lsrs	r3, r2
 8001a9a:	18c9      	adds	r1, r1, r3
 8001a9c:	19e4      	adds	r4, r4, r7
 8001a9e:	42bc      	cmp	r4, r7
 8001aa0:	41bf      	sbcs	r7, r7
 8001aa2:	427f      	negs	r7, r7
 8001aa4:	46b9      	mov	r9, r7
 8001aa6:	4680      	mov	r8, r0
 8001aa8:	4489      	add	r9, r1
 8001aaa:	e0d8      	b.n	8001c5e <__aeabi_dsub+0x426>
 8001aac:	4640      	mov	r0, r8
 8001aae:	4c3b      	ldr	r4, [pc, #236]	; (8001b9c <__aeabi_dsub+0x364>)
 8001ab0:	3001      	adds	r0, #1
 8001ab2:	4220      	tst	r0, r4
 8001ab4:	d000      	beq.n	8001ab8 <__aeabi_dsub+0x280>
 8001ab6:	e0b4      	b.n	8001c22 <__aeabi_dsub+0x3ea>
 8001ab8:	4640      	mov	r0, r8
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_dsub+0x288>
 8001abe:	e144      	b.n	8001d4a <__aeabi_dsub+0x512>
 8001ac0:	4660      	mov	r0, ip
 8001ac2:	4318      	orrs	r0, r3
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x290>
 8001ac6:	e190      	b.n	8001dea <__aeabi_dsub+0x5b2>
 8001ac8:	0008      	movs	r0, r1
 8001aca:	4338      	orrs	r0, r7
 8001acc:	d000      	beq.n	8001ad0 <__aeabi_dsub+0x298>
 8001ace:	e1aa      	b.n	8001e26 <__aeabi_dsub+0x5ee>
 8001ad0:	4661      	mov	r1, ip
 8001ad2:	08db      	lsrs	r3, r3, #3
 8001ad4:	0749      	lsls	r1, r1, #29
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	4661      	mov	r1, ip
 8001ada:	08cc      	lsrs	r4, r1, #3
 8001adc:	e027      	b.n	8001b2e <__aeabi_dsub+0x2f6>
 8001ade:	0008      	movs	r0, r1
 8001ae0:	4338      	orrs	r0, r7
 8001ae2:	d061      	beq.n	8001ba8 <__aeabi_dsub+0x370>
 8001ae4:	1e50      	subs	r0, r2, #1
 8001ae6:	2a01      	cmp	r2, #1
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x2b4>
 8001aea:	e139      	b.n	8001d60 <__aeabi_dsub+0x528>
 8001aec:	42a2      	cmp	r2, r4
 8001aee:	d027      	beq.n	8001b40 <__aeabi_dsub+0x308>
 8001af0:	0002      	movs	r2, r0
 8001af2:	e75d      	b.n	80019b0 <__aeabi_dsub+0x178>
 8001af4:	0002      	movs	r2, r0
 8001af6:	391f      	subs	r1, #31
 8001af8:	40ca      	lsrs	r2, r1
 8001afa:	0011      	movs	r1, r2
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d003      	beq.n	8001b08 <__aeabi_dsub+0x2d0>
 8001b00:	2240      	movs	r2, #64	; 0x40
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	4098      	lsls	r0, r3
 8001b06:	4304      	orrs	r4, r0
 8001b08:	1e63      	subs	r3, r4, #1
 8001b0a:	419c      	sbcs	r4, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	4699      	mov	r9, r3
 8001b10:	4698      	mov	r8, r3
 8001b12:	430c      	orrs	r4, r1
 8001b14:	0763      	lsls	r3, r4, #29
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dsub+0x2e2>
 8001b18:	e712      	b.n	8001940 <__aeabi_dsub+0x108>
 8001b1a:	464b      	mov	r3, r9
 8001b1c:	464a      	mov	r2, r9
 8001b1e:	08e4      	lsrs	r4, r4, #3
 8001b20:	075b      	lsls	r3, r3, #29
 8001b22:	4323      	orrs	r3, r4
 8001b24:	08d4      	lsrs	r4, r2, #3
 8001b26:	4642      	mov	r2, r8
 8001b28:	4919      	ldr	r1, [pc, #100]	; (8001b90 <__aeabi_dsub+0x358>)
 8001b2a:	428a      	cmp	r2, r1
 8001b2c:	d00e      	beq.n	8001b4c <__aeabi_dsub+0x314>
 8001b2e:	0324      	lsls	r4, r4, #12
 8001b30:	0552      	lsls	r2, r2, #21
 8001b32:	0b24      	lsrs	r4, r4, #12
 8001b34:	0d52      	lsrs	r2, r2, #21
 8001b36:	e722      	b.n	800197e <__aeabi_dsub+0x146>
 8001b38:	000a      	movs	r2, r1
 8001b3a:	2400      	movs	r4, #0
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e71e      	b.n	800197e <__aeabi_dsub+0x146>
 8001b40:	08db      	lsrs	r3, r3, #3
 8001b42:	4662      	mov	r2, ip
 8001b44:	0752      	lsls	r2, r2, #29
 8001b46:	4313      	orrs	r3, r2
 8001b48:	4662      	mov	r2, ip
 8001b4a:	08d4      	lsrs	r4, r2, #3
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	4322      	orrs	r2, r4
 8001b50:	d100      	bne.n	8001b54 <__aeabi_dsub+0x31c>
 8001b52:	e1fc      	b.n	8001f4e <__aeabi_dsub+0x716>
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	0312      	lsls	r2, r2, #12
 8001b58:	4314      	orrs	r4, r2
 8001b5a:	0324      	lsls	r4, r4, #12
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <__aeabi_dsub+0x358>)
 8001b5e:	0b24      	lsrs	r4, r4, #12
 8001b60:	e70d      	b.n	800197e <__aeabi_dsub+0x146>
 8001b62:	0020      	movs	r0, r4
 8001b64:	f000 faa4 	bl	80020b0 <__clzsi2>
 8001b68:	0001      	movs	r1, r0
 8001b6a:	3118      	adds	r1, #24
 8001b6c:	291f      	cmp	r1, #31
 8001b6e:	dc00      	bgt.n	8001b72 <__aeabi_dsub+0x33a>
 8001b70:	e6c4      	b.n	80018fc <__aeabi_dsub+0xc4>
 8001b72:	3808      	subs	r0, #8
 8001b74:	4084      	lsls	r4, r0
 8001b76:	4643      	mov	r3, r8
 8001b78:	0020      	movs	r0, r4
 8001b7a:	2400      	movs	r4, #0
 8001b7c:	4588      	cmp	r8, r1
 8001b7e:	dc00      	bgt.n	8001b82 <__aeabi_dsub+0x34a>
 8001b80:	e6c8      	b.n	8001914 <__aeabi_dsub+0xdc>
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__aeabi_dsub+0x35c>)
 8001b84:	1a5b      	subs	r3, r3, r1
 8001b86:	4010      	ands	r0, r2
 8001b88:	4698      	mov	r8, r3
 8001b8a:	4681      	mov	r9, r0
 8001b8c:	e6d6      	b.n	800193c <__aeabi_dsub+0x104>
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	000007ff 	.word	0x000007ff
 8001b94:	ff7fffff 	.word	0xff7fffff
 8001b98:	fffff801 	.word	0xfffff801
 8001b9c:	000007fe 	.word	0x000007fe
 8001ba0:	430f      	orrs	r7, r1
 8001ba2:	1e7a      	subs	r2, r7, #1
 8001ba4:	4197      	sbcs	r7, r2
 8001ba6:	e691      	b.n	80018cc <__aeabi_dsub+0x94>
 8001ba8:	4661      	mov	r1, ip
 8001baa:	08db      	lsrs	r3, r3, #3
 8001bac:	0749      	lsls	r1, r1, #29
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	4661      	mov	r1, ip
 8001bb2:	08cc      	lsrs	r4, r1, #3
 8001bb4:	e7b8      	b.n	8001b28 <__aeabi_dsub+0x2f0>
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	4cd3      	ldr	r4, [pc, #844]	; (8001f08 <__aeabi_dsub+0x6d0>)
 8001bba:	3001      	adds	r0, #1
 8001bbc:	4220      	tst	r0, r4
 8001bbe:	d000      	beq.n	8001bc2 <__aeabi_dsub+0x38a>
 8001bc0:	e0a2      	b.n	8001d08 <__aeabi_dsub+0x4d0>
 8001bc2:	4640      	mov	r0, r8
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d000      	beq.n	8001bca <__aeabi_dsub+0x392>
 8001bc8:	e101      	b.n	8001dce <__aeabi_dsub+0x596>
 8001bca:	4660      	mov	r0, ip
 8001bcc:	4318      	orrs	r0, r3
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x39a>
 8001bd0:	e15e      	b.n	8001e90 <__aeabi_dsub+0x658>
 8001bd2:	0008      	movs	r0, r1
 8001bd4:	4338      	orrs	r0, r7
 8001bd6:	d000      	beq.n	8001bda <__aeabi_dsub+0x3a2>
 8001bd8:	e15f      	b.n	8001e9a <__aeabi_dsub+0x662>
 8001bda:	4661      	mov	r1, ip
 8001bdc:	08db      	lsrs	r3, r3, #3
 8001bde:	0749      	lsls	r1, r1, #29
 8001be0:	430b      	orrs	r3, r1
 8001be2:	4661      	mov	r1, ip
 8001be4:	08cc      	lsrs	r4, r1, #3
 8001be6:	e7a2      	b.n	8001b2e <__aeabi_dsub+0x2f6>
 8001be8:	4dc8      	ldr	r5, [pc, #800]	; (8001f0c <__aeabi_dsub+0x6d4>)
 8001bea:	42a8      	cmp	r0, r5
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dsub+0x3b8>
 8001bee:	e0cf      	b.n	8001d90 <__aeabi_dsub+0x558>
 8001bf0:	2580      	movs	r5, #128	; 0x80
 8001bf2:	4664      	mov	r4, ip
 8001bf4:	042d      	lsls	r5, r5, #16
 8001bf6:	432c      	orrs	r4, r5
 8001bf8:	46a4      	mov	ip, r4
 8001bfa:	2a38      	cmp	r2, #56	; 0x38
 8001bfc:	dc56      	bgt.n	8001cac <__aeabi_dsub+0x474>
 8001bfe:	2a1f      	cmp	r2, #31
 8001c00:	dd00      	ble.n	8001c04 <__aeabi_dsub+0x3cc>
 8001c02:	e0d1      	b.n	8001da8 <__aeabi_dsub+0x570>
 8001c04:	2520      	movs	r5, #32
 8001c06:	001e      	movs	r6, r3
 8001c08:	1aad      	subs	r5, r5, r2
 8001c0a:	4664      	mov	r4, ip
 8001c0c:	40ab      	lsls	r3, r5
 8001c0e:	40ac      	lsls	r4, r5
 8001c10:	40d6      	lsrs	r6, r2
 8001c12:	1e5d      	subs	r5, r3, #1
 8001c14:	41ab      	sbcs	r3, r5
 8001c16:	4334      	orrs	r4, r6
 8001c18:	4323      	orrs	r3, r4
 8001c1a:	4664      	mov	r4, ip
 8001c1c:	40d4      	lsrs	r4, r2
 8001c1e:	1b09      	subs	r1, r1, r4
 8001c20:	e049      	b.n	8001cb6 <__aeabi_dsub+0x47e>
 8001c22:	4660      	mov	r0, ip
 8001c24:	1bdc      	subs	r4, r3, r7
 8001c26:	1a46      	subs	r6, r0, r1
 8001c28:	42a3      	cmp	r3, r4
 8001c2a:	4180      	sbcs	r0, r0
 8001c2c:	4240      	negs	r0, r0
 8001c2e:	4681      	mov	r9, r0
 8001c30:	0030      	movs	r0, r6
 8001c32:	464e      	mov	r6, r9
 8001c34:	1b80      	subs	r0, r0, r6
 8001c36:	4681      	mov	r9, r0
 8001c38:	0200      	lsls	r0, r0, #8
 8001c3a:	d476      	bmi.n	8001d2a <__aeabi_dsub+0x4f2>
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	4323      	orrs	r3, r4
 8001c40:	d000      	beq.n	8001c44 <__aeabi_dsub+0x40c>
 8001c42:	e652      	b.n	80018ea <__aeabi_dsub+0xb2>
 8001c44:	2400      	movs	r4, #0
 8001c46:	2500      	movs	r5, #0
 8001c48:	e771      	b.n	8001b2e <__aeabi_dsub+0x2f6>
 8001c4a:	4339      	orrs	r1, r7
 8001c4c:	000c      	movs	r4, r1
 8001c4e:	1e62      	subs	r2, r4, #1
 8001c50:	4194      	sbcs	r4, r2
 8001c52:	18e4      	adds	r4, r4, r3
 8001c54:	429c      	cmp	r4, r3
 8001c56:	419b      	sbcs	r3, r3
 8001c58:	425b      	negs	r3, r3
 8001c5a:	4463      	add	r3, ip
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	464b      	mov	r3, r9
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	d400      	bmi.n	8001c66 <__aeabi_dsub+0x42e>
 8001c64:	e756      	b.n	8001b14 <__aeabi_dsub+0x2dc>
 8001c66:	2301      	movs	r3, #1
 8001c68:	469c      	mov	ip, r3
 8001c6a:	4ba8      	ldr	r3, [pc, #672]	; (8001f0c <__aeabi_dsub+0x6d4>)
 8001c6c:	44e0      	add	r8, ip
 8001c6e:	4598      	cmp	r8, r3
 8001c70:	d038      	beq.n	8001ce4 <__aeabi_dsub+0x4ac>
 8001c72:	464b      	mov	r3, r9
 8001c74:	48a6      	ldr	r0, [pc, #664]	; (8001f10 <__aeabi_dsub+0x6d8>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	4003      	ands	r3, r0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	0863      	lsrs	r3, r4, #1
 8001c7e:	4014      	ands	r4, r2
 8001c80:	431c      	orrs	r4, r3
 8001c82:	07c3      	lsls	r3, r0, #31
 8001c84:	431c      	orrs	r4, r3
 8001c86:	0843      	lsrs	r3, r0, #1
 8001c88:	4699      	mov	r9, r3
 8001c8a:	e657      	b.n	800193c <__aeabi_dsub+0x104>
 8001c8c:	0010      	movs	r0, r2
 8001c8e:	000e      	movs	r6, r1
 8001c90:	3820      	subs	r0, #32
 8001c92:	40c6      	lsrs	r6, r0
 8001c94:	2a20      	cmp	r2, #32
 8001c96:	d004      	beq.n	8001ca2 <__aeabi_dsub+0x46a>
 8001c98:	2040      	movs	r0, #64	; 0x40
 8001c9a:	1a82      	subs	r2, r0, r2
 8001c9c:	4091      	lsls	r1, r2
 8001c9e:	430f      	orrs	r7, r1
 8001ca0:	46b9      	mov	r9, r7
 8001ca2:	464f      	mov	r7, r9
 8001ca4:	1e7a      	subs	r2, r7, #1
 8001ca6:	4197      	sbcs	r7, r2
 8001ca8:	4337      	orrs	r7, r6
 8001caa:	e60f      	b.n	80018cc <__aeabi_dsub+0x94>
 8001cac:	4662      	mov	r2, ip
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	4193      	sbcs	r3, r2
 8001cb6:	1afc      	subs	r4, r7, r3
 8001cb8:	42a7      	cmp	r7, r4
 8001cba:	41bf      	sbcs	r7, r7
 8001cbc:	427f      	negs	r7, r7
 8001cbe:	1bcb      	subs	r3, r1, r7
 8001cc0:	4699      	mov	r9, r3
 8001cc2:	465d      	mov	r5, fp
 8001cc4:	4680      	mov	r8, r0
 8001cc6:	e608      	b.n	80018da <__aeabi_dsub+0xa2>
 8001cc8:	4666      	mov	r6, ip
 8001cca:	431e      	orrs	r6, r3
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x498>
 8001cce:	e0be      	b.n	8001e4e <__aeabi_dsub+0x616>
 8001cd0:	1e56      	subs	r6, r2, #1
 8001cd2:	2a01      	cmp	r2, #1
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x4a0>
 8001cd6:	e109      	b.n	8001eec <__aeabi_dsub+0x6b4>
 8001cd8:	4c8c      	ldr	r4, [pc, #560]	; (8001f0c <__aeabi_dsub+0x6d4>)
 8001cda:	42a2      	cmp	r2, r4
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dsub+0x4a8>
 8001cde:	e119      	b.n	8001f14 <__aeabi_dsub+0x6dc>
 8001ce0:	0032      	movs	r2, r6
 8001ce2:	e6c1      	b.n	8001a68 <__aeabi_dsub+0x230>
 8001ce4:	4642      	mov	r2, r8
 8001ce6:	2400      	movs	r4, #0
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e648      	b.n	800197e <__aeabi_dsub+0x146>
 8001cec:	2020      	movs	r0, #32
 8001cee:	000c      	movs	r4, r1
 8001cf0:	1a80      	subs	r0, r0, r2
 8001cf2:	003e      	movs	r6, r7
 8001cf4:	4087      	lsls	r7, r0
 8001cf6:	4084      	lsls	r4, r0
 8001cf8:	40d6      	lsrs	r6, r2
 8001cfa:	1e78      	subs	r0, r7, #1
 8001cfc:	4187      	sbcs	r7, r0
 8001cfe:	40d1      	lsrs	r1, r2
 8001d00:	4334      	orrs	r4, r6
 8001d02:	433c      	orrs	r4, r7
 8001d04:	448c      	add	ip, r1
 8001d06:	e7a4      	b.n	8001c52 <__aeabi_dsub+0x41a>
 8001d08:	4a80      	ldr	r2, [pc, #512]	; (8001f0c <__aeabi_dsub+0x6d4>)
 8001d0a:	4290      	cmp	r0, r2
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x4d8>
 8001d0e:	e0e9      	b.n	8001ee4 <__aeabi_dsub+0x6ac>
 8001d10:	19df      	adds	r7, r3, r7
 8001d12:	429f      	cmp	r7, r3
 8001d14:	419b      	sbcs	r3, r3
 8001d16:	4461      	add	r1, ip
 8001d18:	425b      	negs	r3, r3
 8001d1a:	18c9      	adds	r1, r1, r3
 8001d1c:	07cc      	lsls	r4, r1, #31
 8001d1e:	087f      	lsrs	r7, r7, #1
 8001d20:	084b      	lsrs	r3, r1, #1
 8001d22:	4699      	mov	r9, r3
 8001d24:	4680      	mov	r8, r0
 8001d26:	433c      	orrs	r4, r7
 8001d28:	e6f4      	b.n	8001b14 <__aeabi_dsub+0x2dc>
 8001d2a:	1afc      	subs	r4, r7, r3
 8001d2c:	42a7      	cmp	r7, r4
 8001d2e:	41bf      	sbcs	r7, r7
 8001d30:	4663      	mov	r3, ip
 8001d32:	427f      	negs	r7, r7
 8001d34:	1ac9      	subs	r1, r1, r3
 8001d36:	1bcb      	subs	r3, r1, r7
 8001d38:	4699      	mov	r9, r3
 8001d3a:	465d      	mov	r5, fp
 8001d3c:	e5d5      	b.n	80018ea <__aeabi_dsub+0xb2>
 8001d3e:	08ff      	lsrs	r7, r7, #3
 8001d40:	074b      	lsls	r3, r1, #29
 8001d42:	465d      	mov	r5, fp
 8001d44:	433b      	orrs	r3, r7
 8001d46:	08cc      	lsrs	r4, r1, #3
 8001d48:	e6ee      	b.n	8001b28 <__aeabi_dsub+0x2f0>
 8001d4a:	4662      	mov	r2, ip
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x51a>
 8001d50:	e082      	b.n	8001e58 <__aeabi_dsub+0x620>
 8001d52:	000b      	movs	r3, r1
 8001d54:	433b      	orrs	r3, r7
 8001d56:	d11b      	bne.n	8001d90 <__aeabi_dsub+0x558>
 8001d58:	2480      	movs	r4, #128	; 0x80
 8001d5a:	2500      	movs	r5, #0
 8001d5c:	0324      	lsls	r4, r4, #12
 8001d5e:	e6f9      	b.n	8001b54 <__aeabi_dsub+0x31c>
 8001d60:	19dc      	adds	r4, r3, r7
 8001d62:	429c      	cmp	r4, r3
 8001d64:	419b      	sbcs	r3, r3
 8001d66:	4461      	add	r1, ip
 8001d68:	4689      	mov	r9, r1
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	4499      	add	r9, r3
 8001d6e:	464b      	mov	r3, r9
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	d444      	bmi.n	8001dfe <__aeabi_dsub+0x5c6>
 8001d74:	2301      	movs	r3, #1
 8001d76:	4698      	mov	r8, r3
 8001d78:	e6cc      	b.n	8001b14 <__aeabi_dsub+0x2dc>
 8001d7a:	1bdc      	subs	r4, r3, r7
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	42a3      	cmp	r3, r4
 8001d80:	419b      	sbcs	r3, r3
 8001d82:	1a51      	subs	r1, r2, r1
 8001d84:	425b      	negs	r3, r3
 8001d86:	1acb      	subs	r3, r1, r3
 8001d88:	4699      	mov	r9, r3
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	4698      	mov	r8, r3
 8001d8e:	e5a4      	b.n	80018da <__aeabi_dsub+0xa2>
 8001d90:	08ff      	lsrs	r7, r7, #3
 8001d92:	074b      	lsls	r3, r1, #29
 8001d94:	465d      	mov	r5, fp
 8001d96:	433b      	orrs	r3, r7
 8001d98:	08cc      	lsrs	r4, r1, #3
 8001d9a:	e6d7      	b.n	8001b4c <__aeabi_dsub+0x314>
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	0014      	movs	r4, r2
 8001da2:	1e63      	subs	r3, r4, #1
 8001da4:	419c      	sbcs	r4, r3
 8001da6:	e679      	b.n	8001a9c <__aeabi_dsub+0x264>
 8001da8:	0015      	movs	r5, r2
 8001daa:	4664      	mov	r4, ip
 8001dac:	3d20      	subs	r5, #32
 8001dae:	40ec      	lsrs	r4, r5
 8001db0:	46a0      	mov	r8, r4
 8001db2:	2a20      	cmp	r2, #32
 8001db4:	d005      	beq.n	8001dc2 <__aeabi_dsub+0x58a>
 8001db6:	2540      	movs	r5, #64	; 0x40
 8001db8:	4664      	mov	r4, ip
 8001dba:	1aaa      	subs	r2, r5, r2
 8001dbc:	4094      	lsls	r4, r2
 8001dbe:	4323      	orrs	r3, r4
 8001dc0:	469a      	mov	sl, r3
 8001dc2:	4654      	mov	r4, sl
 8001dc4:	1e63      	subs	r3, r4, #1
 8001dc6:	419c      	sbcs	r4, r3
 8001dc8:	4643      	mov	r3, r8
 8001dca:	4323      	orrs	r3, r4
 8001dcc:	e773      	b.n	8001cb6 <__aeabi_dsub+0x47e>
 8001dce:	4662      	mov	r2, ip
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	d023      	beq.n	8001e1c <__aeabi_dsub+0x5e4>
 8001dd4:	000a      	movs	r2, r1
 8001dd6:	433a      	orrs	r2, r7
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_dsub+0x5a4>
 8001dda:	e0a0      	b.n	8001f1e <__aeabi_dsub+0x6e6>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	0752      	lsls	r2, r2, #29
 8001de2:	4313      	orrs	r3, r2
 8001de4:	4662      	mov	r2, ip
 8001de6:	08d4      	lsrs	r4, r2, #3
 8001de8:	e6b0      	b.n	8001b4c <__aeabi_dsub+0x314>
 8001dea:	000b      	movs	r3, r1
 8001dec:	433b      	orrs	r3, r7
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x5ba>
 8001df0:	e728      	b.n	8001c44 <__aeabi_dsub+0x40c>
 8001df2:	08ff      	lsrs	r7, r7, #3
 8001df4:	074b      	lsls	r3, r1, #29
 8001df6:	465d      	mov	r5, fp
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	08cc      	lsrs	r4, r1, #3
 8001dfc:	e697      	b.n	8001b2e <__aeabi_dsub+0x2f6>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	4698      	mov	r8, r3
 8001e02:	e736      	b.n	8001c72 <__aeabi_dsub+0x43a>
 8001e04:	1afc      	subs	r4, r7, r3
 8001e06:	42a7      	cmp	r7, r4
 8001e08:	41bf      	sbcs	r7, r7
 8001e0a:	4663      	mov	r3, ip
 8001e0c:	427f      	negs	r7, r7
 8001e0e:	1ac9      	subs	r1, r1, r3
 8001e10:	1bcb      	subs	r3, r1, r7
 8001e12:	4699      	mov	r9, r3
 8001e14:	2301      	movs	r3, #1
 8001e16:	465d      	mov	r5, fp
 8001e18:	4698      	mov	r8, r3
 8001e1a:	e55e      	b.n	80018da <__aeabi_dsub+0xa2>
 8001e1c:	074b      	lsls	r3, r1, #29
 8001e1e:	08ff      	lsrs	r7, r7, #3
 8001e20:	433b      	orrs	r3, r7
 8001e22:	08cc      	lsrs	r4, r1, #3
 8001e24:	e692      	b.n	8001b4c <__aeabi_dsub+0x314>
 8001e26:	1bdc      	subs	r4, r3, r7
 8001e28:	4660      	mov	r0, ip
 8001e2a:	42a3      	cmp	r3, r4
 8001e2c:	41b6      	sbcs	r6, r6
 8001e2e:	1a40      	subs	r0, r0, r1
 8001e30:	4276      	negs	r6, r6
 8001e32:	1b80      	subs	r0, r0, r6
 8001e34:	4681      	mov	r9, r0
 8001e36:	0200      	lsls	r0, r0, #8
 8001e38:	d560      	bpl.n	8001efc <__aeabi_dsub+0x6c4>
 8001e3a:	1afc      	subs	r4, r7, r3
 8001e3c:	42a7      	cmp	r7, r4
 8001e3e:	41bf      	sbcs	r7, r7
 8001e40:	4663      	mov	r3, ip
 8001e42:	427f      	negs	r7, r7
 8001e44:	1ac9      	subs	r1, r1, r3
 8001e46:	1bcb      	subs	r3, r1, r7
 8001e48:	4699      	mov	r9, r3
 8001e4a:	465d      	mov	r5, fp
 8001e4c:	e576      	b.n	800193c <__aeabi_dsub+0x104>
 8001e4e:	08ff      	lsrs	r7, r7, #3
 8001e50:	074b      	lsls	r3, r1, #29
 8001e52:	433b      	orrs	r3, r7
 8001e54:	08cc      	lsrs	r4, r1, #3
 8001e56:	e667      	b.n	8001b28 <__aeabi_dsub+0x2f0>
 8001e58:	000a      	movs	r2, r1
 8001e5a:	08db      	lsrs	r3, r3, #3
 8001e5c:	433a      	orrs	r2, r7
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x62a>
 8001e60:	e66f      	b.n	8001b42 <__aeabi_dsub+0x30a>
 8001e62:	4662      	mov	r2, ip
 8001e64:	0752      	lsls	r2, r2, #29
 8001e66:	4313      	orrs	r3, r2
 8001e68:	4662      	mov	r2, ip
 8001e6a:	08d4      	lsrs	r4, r2, #3
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	0312      	lsls	r2, r2, #12
 8001e70:	4214      	tst	r4, r2
 8001e72:	d007      	beq.n	8001e84 <__aeabi_dsub+0x64c>
 8001e74:	08c8      	lsrs	r0, r1, #3
 8001e76:	4210      	tst	r0, r2
 8001e78:	d104      	bne.n	8001e84 <__aeabi_dsub+0x64c>
 8001e7a:	465d      	mov	r5, fp
 8001e7c:	0004      	movs	r4, r0
 8001e7e:	08fb      	lsrs	r3, r7, #3
 8001e80:	0749      	lsls	r1, r1, #29
 8001e82:	430b      	orrs	r3, r1
 8001e84:	0f5a      	lsrs	r2, r3, #29
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	0752      	lsls	r2, r2, #29
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	e65d      	b.n	8001b4c <__aeabi_dsub+0x314>
 8001e90:	074b      	lsls	r3, r1, #29
 8001e92:	08ff      	lsrs	r7, r7, #3
 8001e94:	433b      	orrs	r3, r7
 8001e96:	08cc      	lsrs	r4, r1, #3
 8001e98:	e649      	b.n	8001b2e <__aeabi_dsub+0x2f6>
 8001e9a:	19dc      	adds	r4, r3, r7
 8001e9c:	429c      	cmp	r4, r3
 8001e9e:	419b      	sbcs	r3, r3
 8001ea0:	4461      	add	r1, ip
 8001ea2:	4689      	mov	r9, r1
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	4499      	add	r9, r3
 8001ea8:	464b      	mov	r3, r9
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	d400      	bmi.n	8001eb0 <__aeabi_dsub+0x678>
 8001eae:	e631      	b.n	8001b14 <__aeabi_dsub+0x2dc>
 8001eb0:	464a      	mov	r2, r9
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <__aeabi_dsub+0x6d8>)
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	4691      	mov	r9, r2
 8001eba:	4698      	mov	r8, r3
 8001ebc:	e62a      	b.n	8001b14 <__aeabi_dsub+0x2dc>
 8001ebe:	0016      	movs	r6, r2
 8001ec0:	4664      	mov	r4, ip
 8001ec2:	3e20      	subs	r6, #32
 8001ec4:	40f4      	lsrs	r4, r6
 8001ec6:	46a0      	mov	r8, r4
 8001ec8:	2a20      	cmp	r2, #32
 8001eca:	d005      	beq.n	8001ed8 <__aeabi_dsub+0x6a0>
 8001ecc:	2640      	movs	r6, #64	; 0x40
 8001ece:	4664      	mov	r4, ip
 8001ed0:	1ab2      	subs	r2, r6, r2
 8001ed2:	4094      	lsls	r4, r2
 8001ed4:	4323      	orrs	r3, r4
 8001ed6:	469a      	mov	sl, r3
 8001ed8:	4654      	mov	r4, sl
 8001eda:	1e63      	subs	r3, r4, #1
 8001edc:	419c      	sbcs	r4, r3
 8001ede:	4643      	mov	r3, r8
 8001ee0:	431c      	orrs	r4, r3
 8001ee2:	e5db      	b.n	8001a9c <__aeabi_dsub+0x264>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	2400      	movs	r4, #0
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e548      	b.n	800197e <__aeabi_dsub+0x146>
 8001eec:	19dc      	adds	r4, r3, r7
 8001eee:	42bc      	cmp	r4, r7
 8001ef0:	41bf      	sbcs	r7, r7
 8001ef2:	4461      	add	r1, ip
 8001ef4:	4689      	mov	r9, r1
 8001ef6:	427f      	negs	r7, r7
 8001ef8:	44b9      	add	r9, r7
 8001efa:	e738      	b.n	8001d6e <__aeabi_dsub+0x536>
 8001efc:	464b      	mov	r3, r9
 8001efe:	4323      	orrs	r3, r4
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x6cc>
 8001f02:	e69f      	b.n	8001c44 <__aeabi_dsub+0x40c>
 8001f04:	e606      	b.n	8001b14 <__aeabi_dsub+0x2dc>
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	000007fe 	.word	0x000007fe
 8001f0c:	000007ff 	.word	0x000007ff
 8001f10:	ff7fffff 	.word	0xff7fffff
 8001f14:	08ff      	lsrs	r7, r7, #3
 8001f16:	074b      	lsls	r3, r1, #29
 8001f18:	433b      	orrs	r3, r7
 8001f1a:	08cc      	lsrs	r4, r1, #3
 8001f1c:	e616      	b.n	8001b4c <__aeabi_dsub+0x314>
 8001f1e:	4662      	mov	r2, ip
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	0752      	lsls	r2, r2, #29
 8001f24:	4313      	orrs	r3, r2
 8001f26:	4662      	mov	r2, ip
 8001f28:	08d4      	lsrs	r4, r2, #3
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	0312      	lsls	r2, r2, #12
 8001f2e:	4214      	tst	r4, r2
 8001f30:	d007      	beq.n	8001f42 <__aeabi_dsub+0x70a>
 8001f32:	08c8      	lsrs	r0, r1, #3
 8001f34:	4210      	tst	r0, r2
 8001f36:	d104      	bne.n	8001f42 <__aeabi_dsub+0x70a>
 8001f38:	465d      	mov	r5, fp
 8001f3a:	0004      	movs	r4, r0
 8001f3c:	08fb      	lsrs	r3, r7, #3
 8001f3e:	0749      	lsls	r1, r1, #29
 8001f40:	430b      	orrs	r3, r1
 8001f42:	0f5a      	lsrs	r2, r3, #29
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	0752      	lsls	r2, r2, #29
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	e5fe      	b.n	8001b4c <__aeabi_dsub+0x314>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	4a01      	ldr	r2, [pc, #4]	; (8001f58 <__aeabi_dsub+0x720>)
 8001f52:	001c      	movs	r4, r3
 8001f54:	e513      	b.n	800197e <__aeabi_dsub+0x146>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff

08001f5c <__aeabi_dcmpun>:
 8001f5c:	b570      	push	{r4, r5, r6, lr}
 8001f5e:	0005      	movs	r5, r0
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <__aeabi_dcmpun+0x38>)
 8001f62:	031c      	lsls	r4, r3, #12
 8001f64:	0016      	movs	r6, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	030a      	lsls	r2, r1, #12
 8001f6a:	0049      	lsls	r1, r1, #1
 8001f6c:	0b12      	lsrs	r2, r2, #12
 8001f6e:	0d49      	lsrs	r1, r1, #21
 8001f70:	0b24      	lsrs	r4, r4, #12
 8001f72:	0d5b      	lsrs	r3, r3, #21
 8001f74:	4281      	cmp	r1, r0
 8001f76:	d008      	beq.n	8001f8a <__aeabi_dcmpun+0x2e>
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <__aeabi_dcmpun+0x38>)
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d103      	bne.n	8001f88 <__aeabi_dcmpun+0x2c>
 8001f80:	0020      	movs	r0, r4
 8001f82:	4330      	orrs	r0, r6
 8001f84:	1e43      	subs	r3, r0, #1
 8001f86:	4198      	sbcs	r0, r3
 8001f88:	bd70      	pop	{r4, r5, r6, pc}
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	432a      	orrs	r2, r5
 8001f8e:	d1fb      	bne.n	8001f88 <__aeabi_dcmpun+0x2c>
 8001f90:	e7f2      	b.n	8001f78 <__aeabi_dcmpun+0x1c>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	000007ff 	.word	0x000007ff

08001f98 <__aeabi_d2iz>:
 8001f98:	000a      	movs	r2, r1
 8001f9a:	b530      	push	{r4, r5, lr}
 8001f9c:	4c13      	ldr	r4, [pc, #76]	; (8001fec <__aeabi_d2iz+0x54>)
 8001f9e:	0053      	lsls	r3, r2, #1
 8001fa0:	0309      	lsls	r1, r1, #12
 8001fa2:	0005      	movs	r5, r0
 8001fa4:	0b09      	lsrs	r1, r1, #12
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	0d5b      	lsrs	r3, r3, #21
 8001faa:	0fd2      	lsrs	r2, r2, #31
 8001fac:	42a3      	cmp	r3, r4
 8001fae:	dd04      	ble.n	8001fba <__aeabi_d2iz+0x22>
 8001fb0:	480f      	ldr	r0, [pc, #60]	; (8001ff0 <__aeabi_d2iz+0x58>)
 8001fb2:	4283      	cmp	r3, r0
 8001fb4:	dd02      	ble.n	8001fbc <__aeabi_d2iz+0x24>
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <__aeabi_d2iz+0x5c>)
 8001fb8:	18d0      	adds	r0, r2, r3
 8001fba:	bd30      	pop	{r4, r5, pc}
 8001fbc:	2080      	movs	r0, #128	; 0x80
 8001fbe:	0340      	lsls	r0, r0, #13
 8001fc0:	4301      	orrs	r1, r0
 8001fc2:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <__aeabi_d2iz+0x60>)
 8001fc4:	1ac0      	subs	r0, r0, r3
 8001fc6:	281f      	cmp	r0, #31
 8001fc8:	dd08      	ble.n	8001fdc <__aeabi_d2iz+0x44>
 8001fca:	480c      	ldr	r0, [pc, #48]	; (8001ffc <__aeabi_d2iz+0x64>)
 8001fcc:	1ac3      	subs	r3, r0, r3
 8001fce:	40d9      	lsrs	r1, r3
 8001fd0:	000b      	movs	r3, r1
 8001fd2:	4258      	negs	r0, r3
 8001fd4:	2a00      	cmp	r2, #0
 8001fd6:	d1f0      	bne.n	8001fba <__aeabi_d2iz+0x22>
 8001fd8:	0018      	movs	r0, r3
 8001fda:	e7ee      	b.n	8001fba <__aeabi_d2iz+0x22>
 8001fdc:	4c08      	ldr	r4, [pc, #32]	; (8002000 <__aeabi_d2iz+0x68>)
 8001fde:	40c5      	lsrs	r5, r0
 8001fe0:	46a4      	mov	ip, r4
 8001fe2:	4463      	add	r3, ip
 8001fe4:	4099      	lsls	r1, r3
 8001fe6:	000b      	movs	r3, r1
 8001fe8:	432b      	orrs	r3, r5
 8001fea:	e7f2      	b.n	8001fd2 <__aeabi_d2iz+0x3a>
 8001fec:	000003fe 	.word	0x000003fe
 8001ff0:	0000041d 	.word	0x0000041d
 8001ff4:	7fffffff 	.word	0x7fffffff
 8001ff8:	00000433 	.word	0x00000433
 8001ffc:	00000413 	.word	0x00000413
 8002000:	fffffbed 	.word	0xfffffbed

08002004 <__aeabi_i2d>:
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	2800      	cmp	r0, #0
 8002008:	d016      	beq.n	8002038 <__aeabi_i2d+0x34>
 800200a:	17c3      	asrs	r3, r0, #31
 800200c:	18c5      	adds	r5, r0, r3
 800200e:	405d      	eors	r5, r3
 8002010:	0fc4      	lsrs	r4, r0, #31
 8002012:	0028      	movs	r0, r5
 8002014:	f000 f84c 	bl	80020b0 <__clzsi2>
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <__aeabi_i2d+0x5c>)
 800201a:	1a12      	subs	r2, r2, r0
 800201c:	280a      	cmp	r0, #10
 800201e:	dc16      	bgt.n	800204e <__aeabi_i2d+0x4a>
 8002020:	0003      	movs	r3, r0
 8002022:	002e      	movs	r6, r5
 8002024:	3315      	adds	r3, #21
 8002026:	409e      	lsls	r6, r3
 8002028:	230b      	movs	r3, #11
 800202a:	1a18      	subs	r0, r3, r0
 800202c:	40c5      	lsrs	r5, r0
 800202e:	0552      	lsls	r2, r2, #21
 8002030:	032d      	lsls	r5, r5, #12
 8002032:	0b2d      	lsrs	r5, r5, #12
 8002034:	0d53      	lsrs	r3, r2, #21
 8002036:	e003      	b.n	8002040 <__aeabi_i2d+0x3c>
 8002038:	2400      	movs	r4, #0
 800203a:	2300      	movs	r3, #0
 800203c:	2500      	movs	r5, #0
 800203e:	2600      	movs	r6, #0
 8002040:	051b      	lsls	r3, r3, #20
 8002042:	432b      	orrs	r3, r5
 8002044:	07e4      	lsls	r4, r4, #31
 8002046:	4323      	orrs	r3, r4
 8002048:	0030      	movs	r0, r6
 800204a:	0019      	movs	r1, r3
 800204c:	bd70      	pop	{r4, r5, r6, pc}
 800204e:	380b      	subs	r0, #11
 8002050:	4085      	lsls	r5, r0
 8002052:	0552      	lsls	r2, r2, #21
 8002054:	032d      	lsls	r5, r5, #12
 8002056:	2600      	movs	r6, #0
 8002058:	0b2d      	lsrs	r5, r5, #12
 800205a:	0d53      	lsrs	r3, r2, #21
 800205c:	e7f0      	b.n	8002040 <__aeabi_i2d+0x3c>
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	0000041e 	.word	0x0000041e

08002064 <__aeabi_ui2d>:
 8002064:	b510      	push	{r4, lr}
 8002066:	1e04      	subs	r4, r0, #0
 8002068:	d010      	beq.n	800208c <__aeabi_ui2d+0x28>
 800206a:	f000 f821 	bl	80020b0 <__clzsi2>
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <__aeabi_ui2d+0x48>)
 8002070:	1a1b      	subs	r3, r3, r0
 8002072:	280a      	cmp	r0, #10
 8002074:	dc11      	bgt.n	800209a <__aeabi_ui2d+0x36>
 8002076:	220b      	movs	r2, #11
 8002078:	0021      	movs	r1, r4
 800207a:	1a12      	subs	r2, r2, r0
 800207c:	40d1      	lsrs	r1, r2
 800207e:	3015      	adds	r0, #21
 8002080:	030a      	lsls	r2, r1, #12
 8002082:	055b      	lsls	r3, r3, #21
 8002084:	4084      	lsls	r4, r0
 8002086:	0b12      	lsrs	r2, r2, #12
 8002088:	0d5b      	lsrs	r3, r3, #21
 800208a:	e001      	b.n	8002090 <__aeabi_ui2d+0x2c>
 800208c:	2300      	movs	r3, #0
 800208e:	2200      	movs	r2, #0
 8002090:	051b      	lsls	r3, r3, #20
 8002092:	4313      	orrs	r3, r2
 8002094:	0020      	movs	r0, r4
 8002096:	0019      	movs	r1, r3
 8002098:	bd10      	pop	{r4, pc}
 800209a:	0022      	movs	r2, r4
 800209c:	380b      	subs	r0, #11
 800209e:	4082      	lsls	r2, r0
 80020a0:	055b      	lsls	r3, r3, #21
 80020a2:	0312      	lsls	r2, r2, #12
 80020a4:	2400      	movs	r4, #0
 80020a6:	0b12      	lsrs	r2, r2, #12
 80020a8:	0d5b      	lsrs	r3, r3, #21
 80020aa:	e7f1      	b.n	8002090 <__aeabi_ui2d+0x2c>
 80020ac:	0000041e 	.word	0x0000041e

080020b0 <__clzsi2>:
 80020b0:	211c      	movs	r1, #28
 80020b2:	2301      	movs	r3, #1
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	4298      	cmp	r0, r3
 80020b8:	d301      	bcc.n	80020be <__clzsi2+0xe>
 80020ba:	0c00      	lsrs	r0, r0, #16
 80020bc:	3910      	subs	r1, #16
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	4298      	cmp	r0, r3
 80020c2:	d301      	bcc.n	80020c8 <__clzsi2+0x18>
 80020c4:	0a00      	lsrs	r0, r0, #8
 80020c6:	3908      	subs	r1, #8
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	4298      	cmp	r0, r3
 80020cc:	d301      	bcc.n	80020d2 <__clzsi2+0x22>
 80020ce:	0900      	lsrs	r0, r0, #4
 80020d0:	3904      	subs	r1, #4
 80020d2:	a202      	add	r2, pc, #8	; (adr r2, 80020dc <__clzsi2+0x2c>)
 80020d4:	5c10      	ldrb	r0, [r2, r0]
 80020d6:	1840      	adds	r0, r0, r1
 80020d8:	4770      	bx	lr
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	02020304 	.word	0x02020304
 80020e0:	01010101 	.word	0x01010101
	...

080020ec <main>:
int beatAvg;

void I2C_GPIOConfig();
void max30102_startSeq();

int main(void) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af02      	add	r7, sp, #8
	RCC_CONFIG_48MHZ();
 80020f2:	f001 ffa3 	bl	800403c <RCC_CONFIG_48MHZ>
	uart_print_config(115200);
 80020f6:	23e1      	movs	r3, #225	; 0xe1
 80020f8:	025b      	lsls	r3, r3, #9
 80020fa:	0018      	movs	r0, r3
 80020fc:	f002 f9f8 	bl	80044f0 <uart_print_config>
	print("Working\n");
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <main+0x1c0>)
 8002102:	0018      	movs	r0, r3
 8002104:	f002 f9cc 	bl	80044a0 <print>

	I2C_GPIOConfig();
 8002108:	f000 f8ee 	bl	80022e8 <I2C_GPIOConfig>

	gpio_config(PORTC, 4, INPUT_MODE, HIGH_SPEED, EN_PU, PHPL);
 800210c:	4868      	ldr	r0, [pc, #416]	; (80022b0 <main+0x1c4>)
 800210e:	2300      	movs	r3, #0
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	2301      	movs	r3, #1
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2302      	movs	r3, #2
 8002118:	2200      	movs	r2, #0
 800211a:	2104      	movs	r1, #4
 800211c:	f001 f936 	bl	800338c <gpio_config>
	gpio_IT_config(PORTC, 4, FALLING_EDGE);
 8002120:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <main+0x1c4>)
 8002122:	2201      	movs	r2, #1
 8002124:	2104      	movs	r1, #4
 8002126:	0018      	movs	r0, r3
 8002128:	f001 fa1a 	bl	8003560 <gpio_IT_config>
	gpio_IT_EN(4, EXTI4_15_IRQn);
 800212c:	2107      	movs	r1, #7
 800212e:	2004      	movs	r0, #4
 8002130:	f001 fbc2 	bl	80038b8 <gpio_IT_EN>
	max30102_startSeq();
 8002134:	f000 f900 	bl	8002338 <max30102_startSeq>

	uint32_t ir = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
	uint16_t red = 0;
 800213c:	230a      	movs	r3, #10
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2200      	movs	r2, #0
 8002142:	801a      	strh	r2, [r3, #0]

	uint32_t start = 0, end = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	2300      	movs	r3, #0
 800214a:	607b      	str	r3, [r7, #4]

	while (1) {

		end = HAL_GetTick();
 800214c:	f000 face 	bl	80026ec <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	607b      	str	r3, [r7, #4]
//			if (max30102_interrupt_handler(&max30102) != true) {
//				max30102_startSeq();
//			}
//		}
//		uint16_t start = HAL_GetTick();
		if(max30102_update(&max30102) != true){
 8002154:	4b57      	ldr	r3, [pc, #348]	; (80022b4 <main+0x1c8>)
 8002156:	0018      	movs	r0, r3
 8002158:	f002 fe0a 	bl	8004d70 <max30102_update>
 800215c:	0003      	movs	r3, r0
 800215e:	001a      	movs	r2, r3
 8002160:	2301      	movs	r3, #1
 8002162:	4053      	eors	r3, r2
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <main+0x8c>
			max30102_startSeq();
 800216a:	f000 f8e5 	bl	8002338 <max30102_startSeq>
			Delay(1000);
 800216e:	23fa      	movs	r3, #250	; 0xfa
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	0018      	movs	r0, r3
 8002174:	f000 fac4 	bl	8002700 <HAL_Delay>
		}
//		uint16_t end = HAL_GetTick();
//		print("Elapsed Time: %dms\n", end - start);
		ir = max30102_getIR();
 8002178:	f002 fa0e 	bl	8004598 <max30102_getIR>
 800217c:	0003      	movs	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]
//		red = max30102_getRed();
//		print("%d\n", ir);
//		print("%d, %d\n", ir, red);

		if (checkForBeat(ir) == true && (ir > 10000)) {
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	0018      	movs	r0, r3
 8002184:	f002 fe2a 	bl	8004ddc <checkForBeat>
 8002188:	0003      	movs	r3, r0
 800218a:	2b01      	cmp	r3, #1
 800218c:	d167      	bne.n	800225e <main+0x172>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4a49      	ldr	r2, [pc, #292]	; (80022b8 <main+0x1cc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d963      	bls.n	800225e <main+0x172>
			//We sensed a beat!
			long delta = HAL_GetTick() - lastBeat;
 8002196:	f000 faa9 	bl	80026ec <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	4b47      	ldr	r3, [pc, #284]	; (80022bc <main+0x1d0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	603b      	str	r3, [r7, #0]
			lastBeat = HAL_GetTick();
 80021a4:	f000 faa2 	bl	80026ec <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	001a      	movs	r2, r3
 80021ac:	4b43      	ldr	r3, [pc, #268]	; (80022bc <main+0x1d0>)
 80021ae:	601a      	str	r2, [r3, #0]

			beatsPerMinute = 60 / (delta / 1000.0);
 80021b0:	6838      	ldr	r0, [r7, #0]
 80021b2:	f7ff ff27 	bl	8002004 <__aeabi_i2d>
 80021b6:	2200      	movs	r2, #0
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <main+0x1d4>)
 80021ba:	f7fe fccf 	bl	8000b5c <__aeabi_ddiv>
 80021be:	0002      	movs	r2, r0
 80021c0:	000b      	movs	r3, r1
 80021c2:	2000      	movs	r0, #0
 80021c4:	493f      	ldr	r1, [pc, #252]	; (80022c4 <main+0x1d8>)
 80021c6:	f7fe fcc9 	bl	8000b5c <__aeabi_ddiv>
 80021ca:	0002      	movs	r2, r0
 80021cc:	000b      	movs	r3, r1
 80021ce:	0010      	movs	r0, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	f7fe f969 	bl	80004a8 <__aeabi_d2uiz>
 80021d6:	0003      	movs	r3, r0
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <main+0x1dc>)
 80021dc:	701a      	strb	r2, [r3, #0]

			if (beatsPerMinute < 255 && beatsPerMinute > 20) {
 80021de:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <main+0x1dc>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2bff      	cmp	r3, #255	; 0xff
 80021e4:	d03b      	beq.n	800225e <main+0x172>
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <main+0x1dc>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b14      	cmp	r3, #20
 80021ec:	d937      	bls.n	800225e <main+0x172>
				rates[rateSpot++] = (uint8_t) beatsPerMinute; //Store this reading in the array
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <main+0x1e0>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	b2d1      	uxtb	r1, r2
 80021f6:	4a35      	ldr	r2, [pc, #212]	; (80022cc <main+0x1e0>)
 80021f8:	7011      	strb	r1, [r2, #0]
 80021fa:	001a      	movs	r2, r3
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <main+0x1dc>)
 80021fe:	7819      	ldrb	r1, [r3, #0]
 8002200:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <main+0x1e4>)
 8002202:	5499      	strb	r1, [r3, r2]
				rateSpot %= RATE_SIZE; //Wrap variable
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <main+0x1e0>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2207      	movs	r2, #7
 800220a:	4013      	ands	r3, r2
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <main+0x1e0>)
 8002210:	701a      	strb	r2, [r3, #0]

				//Take average of readings
				beatAvg = 0;
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <main+0x1e8>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
				for (uint8_t x = 0; x < RATE_SIZE; x++)
 8002218:	2313      	movs	r3, #19
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e00f      	b.n	8002242 <main+0x156>
					beatAvg += rates[x];
 8002222:	2113      	movs	r1, #19
 8002224:	187b      	adds	r3, r7, r1
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <main+0x1e4>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	001a      	movs	r2, r3
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <main+0x1e8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	18d2      	adds	r2, r2, r3
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <main+0x1e8>)
 8002236:	601a      	str	r2, [r3, #0]
				for (uint8_t x = 0; x < RATE_SIZE; x++)
 8002238:	187b      	adds	r3, r7, r1
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	187b      	adds	r3, r7, r1
 800223e:	3201      	adds	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	2313      	movs	r3, #19
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b07      	cmp	r3, #7
 800224a:	d9ea      	bls.n	8002222 <main+0x136>
				beatAvg /= RATE_SIZE;
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <main+0x1e8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da00      	bge.n	8002256 <main+0x16a>
 8002254:	3307      	adds	r3, #7
 8002256:	10db      	asrs	r3, r3, #3
 8002258:	001a      	movs	r2, r3
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <main+0x1e8>)
 800225c:	601a      	str	r2, [r3, #0]
			}
		}

		if (end - start > 500) {
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	1ad2      	subs	r2, r2, r3
 8002264:	23fa      	movs	r3, #250	; 0xfa
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	429a      	cmp	r2, r3
 800226a:	d800      	bhi.n	800226e <main+0x182>
 800226c:	e76e      	b.n	800214c <main+0x60>
			print("IR= %d, BPM = %d, Avg BPM = %d ", ir, beatsPerMinute,
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <main+0x1dc>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	001a      	movs	r2, r3
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <main+0x1e8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	4817      	ldr	r0, [pc, #92]	; (80022d8 <main+0x1ec>)
 800227c:	f002 f910 	bl	80044a0 <print>
					beatAvg);

			if (ir < 10000) {
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <main+0x1f0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d809      	bhi.n	800229c <main+0x1b0>
				print("No Finger?");
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <main+0x1f4>)
 800228a:	0018      	movs	r0, r3
 800228c:	f002 f908 	bl	80044a0 <print>
				beatsPerMinute = 0;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <main+0x1dc>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
				beatAvg = 0;
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <main+0x1e8>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
			}
			print(" \n\r");
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <main+0x1f8>)
 800229e:	0018      	movs	r0, r3
 80022a0:	f002 f8fe 	bl	80044a0 <print>

			start = end;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	617b      	str	r3, [r7, #20]
		end = HAL_GetTick();
 80022a8:	e750      	b.n	800214c <main+0x60>
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	080080b0 	.word	0x080080b0
 80022b0:	48000800 	.word	0x48000800
 80022b4:	2000023c 	.word	0x2000023c
 80022b8:	00002710 	.word	0x00002710
 80022bc:	20000350 	.word	0x20000350
 80022c0:	408f4000 	.word	0x408f4000
 80022c4:	404e0000 	.word	0x404e0000
 80022c8:	20000354 	.word	0x20000354
 80022cc:	2000034c 	.word	0x2000034c
 80022d0:	20000344 	.word	0x20000344
 80022d4:	20000358 	.word	0x20000358
 80022d8:	080080bc 	.word	0x080080bc
 80022dc:	0000270f 	.word	0x0000270f
 80022e0:	080080dc 	.word	0x080080dc
 80022e4:	080080e8 	.word	0x080080e8

080022e8 <I2C_GPIOConfig>:
	}

	return 0;
}

void I2C_GPIOConfig() {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af02      	add	r7, sp, #8
	gpio_config(SCL_PORT, SCL_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);
 80022ee:	4811      	ldr	r0, [pc, #68]	; (8002334 <I2C_GPIOConfig+0x4c>)
 80022f0:	2301      	movs	r3, #1
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	2301      	movs	r3, #1
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2302      	movs	r3, #2
 80022fa:	2202      	movs	r2, #2
 80022fc:	2108      	movs	r1, #8
 80022fe:	f001 f845 	bl	800338c <gpio_config>
	gpio_config(SDA_PORT, SDA_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);
 8002302:	480c      	ldr	r0, [pc, #48]	; (8002334 <I2C_GPIOConfig+0x4c>)
 8002304:	2301      	movs	r3, #1
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	2301      	movs	r3, #1
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2302      	movs	r3, #2
 800230e:	2202      	movs	r2, #2
 8002310:	2109      	movs	r1, #9
 8002312:	f001 f83b 	bl	800338c <gpio_config>

	gpio_altfn(SCL_PORT, SCL_PIN, I2C1_SCL_PB8);
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <I2C_GPIOConfig+0x4c>)
 8002318:	2201      	movs	r2, #1
 800231a:	2108      	movs	r1, #8
 800231c:	0018      	movs	r0, r3
 800231e:	f001 f8fc 	bl	800351a <gpio_altfn>
	gpio_altfn(SDA_PORT, SDA_PIN, I2C1_SDA_PB9);
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <I2C_GPIOConfig+0x4c>)
 8002324:	2201      	movs	r2, #1
 8002326:	2109      	movs	r1, #9
 8002328:	0018      	movs	r0, r3
 800232a:	f001 f8f6 	bl	800351a <gpio_altfn>
}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	48000400 	.word	0x48000400

08002338 <max30102_startSeq>:

void max30102_startSeq() {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
	if (max30102_init(&max30102, I2C1)) {
 800233e:	4a34      	ldr	r2, [pc, #208]	; (8002410 <max30102_startSeq+0xd8>)
 8002340:	4b34      	ldr	r3, [pc, #208]	; (8002414 <max30102_startSeq+0xdc>)
 8002342:	0011      	movs	r1, r2
 8002344:	0018      	movs	r0, r3
 8002346:	f002 f94b 	bl	80045e0 <max30102_init>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d004      	beq.n	8002358 <max30102_startSeq+0x20>
		print("Success\n\r");
 800234e:	4b32      	ldr	r3, [pc, #200]	; (8002418 <max30102_startSeq+0xe0>)
 8002350:	0018      	movs	r0, r3
 8002352:	f002 f8a5 	bl	80044a0 <print>
 8002356:	e003      	b.n	8002360 <max30102_startSeq+0x28>
	} else {
		print("Device Error\n\r");
 8002358:	4b30      	ldr	r3, [pc, #192]	; (800241c <max30102_startSeq+0xe4>)
 800235a:	0018      	movs	r0, r3
 800235c:	f002 f8a0 	bl	80044a0 <print>
	}
	max30102_reset(&max30102);
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <max30102_startSeq+0xdc>)
 8002362:	0018      	movs	r0, r3
 8002364:	f002 fa1e 	bl	80047a4 <max30102_reset>
	max30102_clear_fifo(&max30102);
 8002368:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <max30102_startSeq+0xdc>)
 800236a:	0018      	movs	r0, r3
 800236c:	f002 fc20 	bl	8004bb0 <max30102_clear_fifo>
	max30102_set_fifo_config(&max30102, max30102_smp_ave_16, 1, 7);
 8002370:	4828      	ldr	r0, [pc, #160]	; (8002414 <max30102_startSeq+0xdc>)
 8002372:	2307      	movs	r3, #7
 8002374:	2201      	movs	r2, #1
 8002376:	2104      	movs	r1, #4
 8002378:	f002 fbcb 	bl	8004b12 <max30102_set_fifo_config>

	uint8_t tempInt, tempFrac;
	max30102_read_temp(&max30102, &tempInt, &tempFrac);
 800237c:	1dba      	adds	r2, r7, #6
 800237e:	1df9      	adds	r1, r7, #7
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <max30102_startSeq+0xdc>)
 8002382:	0018      	movs	r0, r3
 8002384:	f002 fd01 	bl	8004d8a <max30102_read_temp>
	print("Temp: %d.%d\n\r", tempInt, tempFrac);
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	0019      	movs	r1, r3
 800238e:	1dbb      	adds	r3, r7, #6
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	001a      	movs	r2, r3
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <max30102_startSeq+0xe8>)
 8002396:	0018      	movs	r0, r3
 8002398:	f002 f882 	bl	80044a0 <print>

	// Sensor settings
	max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <max30102_startSeq+0xdc>)
 800239e:	2101      	movs	r1, #1
 80023a0:	0018      	movs	r0, r3
 80023a2:	f002 fb19 	bl	80049d8 <max30102_set_led_pulse_width>
	max30102_set_adc_resolution(&max30102, max30102_adc_8192);
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <max30102_startSeq+0xdc>)
 80023a8:	2102      	movs	r1, #2
 80023aa:	0018      	movs	r0, r3
 80023ac:	f002 fb4f 	bl	8004a4e <max30102_set_adc_resolution>
	max30102_set_sampling_rate(&max30102, max30102_sr_800);
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <max30102_startSeq+0xdc>)
 80023b2:	2104      	movs	r1, #4
 80023b4:	0018      	movs	r0, r3
 80023b6:	f002 fad9 	bl	800496c <max30102_set_sampling_rate>
	max30102_set_led_current_1(&max30102, 0x20);
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <max30102_startSeq+0xdc>)
 80023bc:	2120      	movs	r1, #32
 80023be:	0018      	movs	r0, r3
 80023c0:	f002 fb81 	bl	8004ac6 <max30102_set_led_current_1>
	max30102_set_led_current_2(&max30102, 0x20);
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <max30102_startSeq+0xdc>)
 80023c6:	2120      	movs	r1, #32
 80023c8:	0018      	movs	r0, r3
 80023ca:	f002 fb8f 	bl	8004aec <max30102_set_led_current_2>

	// Enter SpO2 mode
	max30102_set_mode(&max30102, max30102_spo2);
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <max30102_startSeq+0xdc>)
 80023d0:	2103      	movs	r1, #3
 80023d2:	0018      	movs	r0, r3
 80023d4:	f002 fa82 	bl	80048dc <max30102_set_mode>
	max30102_set_a_full(&max30102, 1);
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <max30102_startSeq+0xdc>)
 80023da:	2101      	movs	r1, #1
 80023dc:	0018      	movs	r0, r3
 80023de:	f002 f9f5 	bl	80047cc <max30102_set_a_full>

	// Initiate 1 temperature measurement
	max30102_set_die_temp_en(&max30102, 1);
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <max30102_startSeq+0xdc>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	0018      	movs	r0, r3
 80023e8:	f002 fa4f 	bl	800488a <max30102_set_die_temp_en>
	max30102_set_die_temp_rdy(&max30102, 1);
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <max30102_startSeq+0xdc>)
 80023ee:	2101      	movs	r1, #1
 80023f0:	0018      	movs	r0, r3
 80023f2:	f002 fa2e 	bl	8004852 <max30102_set_die_temp_rdy>

	uint8_t en_reg[2] = { 0 };
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	2200      	movs	r2, #0
 80023fa:	801a      	strh	r2, [r3, #0]
	max30102_readByte(&max30102, 0x00, en_reg);
 80023fc:	1d3a      	adds	r2, r7, #4
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <max30102_startSeq+0xdc>)
 8002400:	2100      	movs	r1, #0
 8002402:	0018      	movs	r0, r3
 8002404:	f002 f97a 	bl	80046fc <max30102_readByte>
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40005400 	.word	0x40005400
 8002414:	2000023c 	.word	0x2000023c
 8002418:	080080ec 	.word	0x080080ec
 800241c:	080080f8 	.word	0x080080f8
 8002420:	08008108 	.word	0x08008108

08002424 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void) {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0

	if (gpio_IT_CHK(4)) {
 8002428:	2004      	movs	r0, #4
 800242a:	f001 fa65 	bl	80038f8 <gpio_IT_CHK>
 800242e:	1e03      	subs	r3, r0, #0
 8002430:	d00a      	beq.n	8002448 <EXTI4_15_IRQHandler+0x24>
		print("Interrupt Happened\n\r");
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <EXTI4_15_IRQHandler+0x2c>)
 8002434:	0018      	movs	r0, r3
 8002436:	f002 f833 	bl	80044a0 <print>
		max30102_on_interrupt(&max30102);
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <EXTI4_15_IRQHandler+0x30>)
 800243c:	0018      	movs	r0, r3
 800243e:	f002 fa40 	bl	80048c2 <max30102_on_interrupt>
		gpio_IT_CLR(4);
 8002442:	2004      	movs	r0, #4
 8002444:	f001 fa70 	bl	8003928 <gpio_IT_CLR>
	}
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	08008118 	.word	0x08008118
 8002454:	2000023c 	.word	0x2000023c

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800245c:	e7fe      	b.n	800245c <NMI_Handler+0x4>

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247c:	f000 f924 	bl	80026c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	af00      	add	r7, sp, #0
	return 1;
 800248a:	2301      	movs	r3, #1
}
 800248c:	0018      	movs	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <_kill>:

int _kill(int pid, int sig)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800249c:	f002 fe18 	bl	80050d0 <__errno>
 80024a0:	0003      	movs	r3, r0
 80024a2:	2216      	movs	r2, #22
 80024a4:	601a      	str	r2, [r3, #0]
	return -1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	425b      	negs	r3, r3
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_exit>:

void _exit (int status)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024ba:	2301      	movs	r3, #1
 80024bc:	425a      	negs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0011      	movs	r1, r2
 80024c2:	0018      	movs	r0, r3
 80024c4:	f7ff ffe5 	bl	8002492 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024c8:	e7fe      	b.n	80024c8 <_exit+0x16>

080024ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e00a      	b.n	80024f2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024dc:	e000      	b.n	80024e0 <_read+0x16>
 80024de:	bf00      	nop
 80024e0:	0001      	movs	r1, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	60ba      	str	r2, [r7, #8]
 80024e8:	b2ca      	uxtb	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dbf0      	blt.n	80024dc <_read+0x12>
	}

return len;
 80024fa:	687b      	ldr	r3, [r7, #4]
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b006      	add	sp, #24
 8002502:	bd80      	pop	{r7, pc}

08002504 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	e009      	b.n	800252a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	60ba      	str	r2, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	0018      	movs	r0, r3
 8002520:	e000      	b.n	8002524 <_write+0x20>
 8002522:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3301      	adds	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	dbf1      	blt.n	8002516 <_write+0x12>
	}
	return len;
 8002532:	687b      	ldr	r3, [r7, #4]
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b006      	add	sp, #24
 800253a:	bd80      	pop	{r7, pc}

0800253c <_close>:

int _close(int file)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	return -1;
 8002544:	2301      	movs	r3, #1
 8002546:	425b      	negs	r3, r3
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	0192      	lsls	r2, r2, #6
 8002560:	605a      	str	r2, [r3, #4]
	return 0;
 8002562:	2300      	movs	r3, #0
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}

0800256c <_isatty>:

int _isatty(int file)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	return 1;
 8002574:	2301      	movs	r3, #1
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b002      	add	sp, #8
 800257c:	bd80      	pop	{r7, pc}

0800257e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
	return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b004      	add	sp, #16
 8002592:	bd80      	pop	{r7, pc}

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	18d3      	adds	r3, r2, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f002 fd84 	bl	80050d0 <__errno>
 80025c8:	0003      	movs	r3, r0
 80025ca:	220c      	movs	r2, #12
 80025cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ce:	2301      	movs	r3, #1
 80025d0:	425b      	negs	r3, r3
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	18d2      	adds	r2, r2, r3
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <_sbrk+0x64>)
 80025e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b006      	add	sp, #24
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20004000 	.word	0x20004000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	2000035c 	.word	0x2000035c
 80025fc:	200005d8 	.word	0x200005d8

08002600 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800260e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <LoopForever+0x6>)
  ldr r1, =_edata
 8002612:	490e      	ldr	r1, [pc, #56]	; (800264c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <LoopForever+0xe>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002628:	4c0b      	ldr	r4, [pc, #44]	; (8002658 <LoopForever+0x16>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002636:	f7ff ffe3 	bl	8002600 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800263a:	f002 fd4f 	bl	80050dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800263e:	f7ff fd55 	bl	80020ec <main>

08002642 <LoopForever>:

LoopForever:
    b LoopForever
 8002642:	e7fe      	b.n	8002642 <LoopForever>
  ldr   r0, =_estack
 8002644:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800264c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002650:	08008714 	.word	0x08008714
  ldr r2, =_sbss
 8002654:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002658:	200005d8 	.word	0x200005d8

0800265c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800265c:	e7fe      	b.n	800265c <ADC1_IRQHandler>
	...

08002660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <HAL_InitTick+0x5c>)
 800266a:	681c      	ldr	r4, [r3, #0]
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_InitTick+0x60>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	0019      	movs	r1, r3
 8002672:	23fa      	movs	r3, #250	; 0xfa
 8002674:	0098      	lsls	r0, r3, #2
 8002676:	f7fd fd63 	bl	8000140 <__udivsi3>
 800267a:	0003      	movs	r3, r0
 800267c:	0019      	movs	r1, r3
 800267e:	0020      	movs	r0, r4
 8002680:	f7fd fd5e 	bl	8000140 <__udivsi3>
 8002684:	0003      	movs	r3, r0
 8002686:	0018      	movs	r0, r3
 8002688:	f000 f905 	bl	8002896 <HAL_SYSTICK_Config>
 800268c:	1e03      	subs	r3, r0, #0
 800268e:	d001      	beq.n	8002694 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e00f      	b.n	80026b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d80b      	bhi.n	80026b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	2301      	movs	r3, #1
 800269e:	425b      	negs	r3, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	0018      	movs	r0, r3
 80026a4:	f000 f8e2 	bl	800286c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_InitTick+0x64>)
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b003      	add	sp, #12
 80026ba:	bd90      	pop	{r4, r7, pc}
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000008 	.word	0x20000008
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_IncTick+0x1c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	001a      	movs	r2, r3
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_IncTick+0x20>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	18d2      	adds	r2, r2, r3
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_IncTick+0x20>)
 80026da:	601a      	str	r2, [r3, #0]
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	20000008 	.word	0x20000008
 80026e8:	20000360 	.word	0x20000360

080026ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  return uwTick;
 80026f0:	4b02      	ldr	r3, [pc, #8]	; (80026fc <HAL_GetTick+0x10>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	20000360 	.word	0x20000360

08002700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff fff0 	bl	80026ec <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3301      	adds	r3, #1
 8002718:	d005      	beq.n	8002726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_Delay+0x44>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	001a      	movs	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	189b      	adds	r3, r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	f7ff ffe0 	bl	80026ec <HAL_GetTick>
 800272c:	0002      	movs	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	429a      	cmp	r2, r3
 8002736:	d8f7      	bhi.n	8002728 <HAL_Delay+0x28>
  {
  }
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b004      	add	sp, #16
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	20000008 	.word	0x20000008

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	0002      	movs	r2, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	1dfb      	adds	r3, r7, #7
 8002754:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b7f      	cmp	r3, #127	; 0x7f
 800275c:	d828      	bhi.n	80027b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800275e:	4a2f      	ldr	r2, [pc, #188]	; (800281c <__NVIC_SetPriority+0xd4>)
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	b25b      	sxtb	r3, r3
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	33c0      	adds	r3, #192	; 0xc0
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	589b      	ldr	r3, [r3, r2]
 800276e:	1dfa      	adds	r2, r7, #7
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	0011      	movs	r1, r2
 8002774:	2203      	movs	r2, #3
 8002776:	400a      	ands	r2, r1
 8002778:	00d2      	lsls	r2, r2, #3
 800277a:	21ff      	movs	r1, #255	; 0xff
 800277c:	4091      	lsls	r1, r2
 800277e:	000a      	movs	r2, r1
 8002780:	43d2      	mvns	r2, r2
 8002782:	401a      	ands	r2, r3
 8002784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	22ff      	movs	r2, #255	; 0xff
 800278c:	401a      	ands	r2, r3
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	0018      	movs	r0, r3
 8002794:	2303      	movs	r3, #3
 8002796:	4003      	ands	r3, r0
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800279c:	481f      	ldr	r0, [pc, #124]	; (800281c <__NVIC_SetPriority+0xd4>)
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	430a      	orrs	r2, r1
 80027a8:	33c0      	adds	r3, #192	; 0xc0
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027ae:	e031      	b.n	8002814 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b0:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <__NVIC_SetPriority+0xd8>)
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	0019      	movs	r1, r3
 80027b8:	230f      	movs	r3, #15
 80027ba:	400b      	ands	r3, r1
 80027bc:	3b08      	subs	r3, #8
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3306      	adds	r3, #6
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	18d3      	adds	r3, r2, r3
 80027c6:	3304      	adds	r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	1dfa      	adds	r2, r7, #7
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	0011      	movs	r1, r2
 80027d0:	2203      	movs	r2, #3
 80027d2:	400a      	ands	r2, r1
 80027d4:	00d2      	lsls	r2, r2, #3
 80027d6:	21ff      	movs	r1, #255	; 0xff
 80027d8:	4091      	lsls	r1, r2
 80027da:	000a      	movs	r2, r1
 80027dc:	43d2      	mvns	r2, r2
 80027de:	401a      	ands	r2, r3
 80027e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	22ff      	movs	r2, #255	; 0xff
 80027e8:	401a      	ands	r2, r3
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	0018      	movs	r0, r3
 80027f0:	2303      	movs	r3, #3
 80027f2:	4003      	ands	r3, r0
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f8:	4809      	ldr	r0, [pc, #36]	; (8002820 <__NVIC_SetPriority+0xd8>)
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	001c      	movs	r4, r3
 8002800:	230f      	movs	r3, #15
 8002802:	4023      	ands	r3, r4
 8002804:	3b08      	subs	r3, #8
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	430a      	orrs	r2, r1
 800280a:	3306      	adds	r3, #6
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	18c3      	adds	r3, r0, r3
 8002810:	3304      	adds	r3, #4
 8002812:	601a      	str	r2, [r3, #0]
}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b003      	add	sp, #12
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	e000e100 	.word	0xe000e100
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	1e5a      	subs	r2, r3, #1
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	045b      	lsls	r3, r3, #17
 8002834:	429a      	cmp	r2, r3
 8002836:	d301      	bcc.n	800283c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002838:	2301      	movs	r3, #1
 800283a:	e010      	b.n	800285e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <SysTick_Config+0x44>)
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	3a01      	subs	r2, #1
 8002842:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002844:	2301      	movs	r3, #1
 8002846:	425b      	negs	r3, r3
 8002848:	2103      	movs	r1, #3
 800284a:	0018      	movs	r0, r3
 800284c:	f7ff ff7c 	bl	8002748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <SysTick_Config+0x44>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <SysTick_Config+0x44>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b002      	add	sp, #8
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	210f      	movs	r1, #15
 8002878:	187b      	adds	r3, r7, r1
 800287a:	1c02      	adds	r2, r0, #0
 800287c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	187b      	adds	r3, r7, r1
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b25b      	sxtb	r3, r3
 8002886:	0011      	movs	r1, r2
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff ff5d 	bl	8002748 <__NVIC_SetPriority>
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b004      	add	sp, #16
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff ffbf 	bl	8002824 <SysTick_Config>
 80028a6:	0003      	movs	r3, r0
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e305      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2201      	movs	r2, #1
 80028c8:	4013      	ands	r3, r2
 80028ca:	d100      	bne.n	80028ce <HAL_RCC_OscConfig+0x1e>
 80028cc:	e08d      	b.n	80029ea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028ce:	4bc5      	ldr	r3, [pc, #788]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	220c      	movs	r2, #12
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d00e      	beq.n	80028f8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028da:	4bc2      	ldr	r3, [pc, #776]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	220c      	movs	r2, #12
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d116      	bne.n	8002914 <HAL_RCC_OscConfig+0x64>
 80028e6:	4bbf      	ldr	r3, [pc, #764]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	23c0      	movs	r3, #192	; 0xc0
 80028ec:	025b      	lsls	r3, r3, #9
 80028ee:	401a      	ands	r2, r3
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	025b      	lsls	r3, r3, #9
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d10d      	bne.n	8002914 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	4bba      	ldr	r3, [pc, #744]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	029b      	lsls	r3, r3, #10
 8002900:	4013      	ands	r3, r2
 8002902:	d100      	bne.n	8002906 <HAL_RCC_OscConfig+0x56>
 8002904:	e070      	b.n	80029e8 <HAL_RCC_OscConfig+0x138>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d000      	beq.n	8002910 <HAL_RCC_OscConfig+0x60>
 800290e:	e06b      	b.n	80029e8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e2dc      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d107      	bne.n	800292c <HAL_RCC_OscConfig+0x7c>
 800291c:	4bb1      	ldr	r3, [pc, #708]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4bb0      	ldr	r3, [pc, #704]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	0249      	lsls	r1, r1, #9
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e02f      	b.n	800298c <HAL_RCC_OscConfig+0xdc>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10c      	bne.n	800294e <HAL_RCC_OscConfig+0x9e>
 8002934:	4bab      	ldr	r3, [pc, #684]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4baa      	ldr	r3, [pc, #680]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 800293a:	49ab      	ldr	r1, [pc, #684]	; (8002be8 <HAL_RCC_OscConfig+0x338>)
 800293c:	400a      	ands	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	4ba8      	ldr	r3, [pc, #672]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4ba7      	ldr	r3, [pc, #668]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002946:	49a9      	ldr	r1, [pc, #676]	; (8002bec <HAL_RCC_OscConfig+0x33c>)
 8002948:	400a      	ands	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e01e      	b.n	800298c <HAL_RCC_OscConfig+0xdc>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b05      	cmp	r3, #5
 8002954:	d10e      	bne.n	8002974 <HAL_RCC_OscConfig+0xc4>
 8002956:	4ba3      	ldr	r3, [pc, #652]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4ba2      	ldr	r3, [pc, #648]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	02c9      	lsls	r1, r1, #11
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	4b9f      	ldr	r3, [pc, #636]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b9e      	ldr	r3, [pc, #632]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 800296a:	2180      	movs	r1, #128	; 0x80
 800296c:	0249      	lsls	r1, r1, #9
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0xdc>
 8002974:	4b9b      	ldr	r3, [pc, #620]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b9a      	ldr	r3, [pc, #616]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 800297a:	499b      	ldr	r1, [pc, #620]	; (8002be8 <HAL_RCC_OscConfig+0x338>)
 800297c:	400a      	ands	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	4b98      	ldr	r3, [pc, #608]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b97      	ldr	r3, [pc, #604]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002986:	4999      	ldr	r1, [pc, #612]	; (8002bec <HAL_RCC_OscConfig+0x33c>)
 8002988:	400a      	ands	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d014      	beq.n	80029be <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7ff feaa 	bl	80026ec <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800299e:	f7ff fea5 	bl	80026ec <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b64      	cmp	r3, #100	; 0x64
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e28e      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b0:	4b8c      	ldr	r3, [pc, #560]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	029b      	lsls	r3, r3, #10
 80029b8:	4013      	ands	r3, r2
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0xee>
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7ff fe95 	bl	80026ec <HAL_GetTick>
 80029c2:	0003      	movs	r3, r0
 80029c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff fe90 	bl	80026ec <HAL_GetTick>
 80029cc:	0002      	movs	r2, r0
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e279      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	4b82      	ldr	r3, [pc, #520]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	029b      	lsls	r3, r3, #10
 80029e2:	4013      	ands	r3, r2
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x118>
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2202      	movs	r2, #2
 80029f0:	4013      	ands	r3, r2
 80029f2:	d100      	bne.n	80029f6 <HAL_RCC_OscConfig+0x146>
 80029f4:	e06c      	b.n	8002ad0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029f6:	4b7b      	ldr	r3, [pc, #492]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	220c      	movs	r2, #12
 80029fc:	4013      	ands	r3, r2
 80029fe:	d00e      	beq.n	8002a1e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a00:	4b78      	ldr	r3, [pc, #480]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	220c      	movs	r2, #12
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d11f      	bne.n	8002a4c <HAL_RCC_OscConfig+0x19c>
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	23c0      	movs	r3, #192	; 0xc0
 8002a12:	025b      	lsls	r3, r3, #9
 8002a14:	401a      	ands	r2, r3
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d116      	bne.n	8002a4c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	4b71      	ldr	r3, [pc, #452]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2202      	movs	r2, #2
 8002a24:	4013      	ands	r3, r2
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_OscConfig+0x184>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e24c      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b6b      	ldr	r3, [pc, #428]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	22f8      	movs	r2, #248	; 0xf8
 8002a3a:	4393      	bics	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00da      	lsls	r2, r3, #3
 8002a44:	4b67      	ldr	r3, [pc, #412]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002a46:	430a      	orrs	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	e041      	b.n	8002ad0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d024      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a54:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b62      	ldr	r3, [pc, #392]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff fe44 	bl	80026ec <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6a:	f7ff fe3f 	bl	80026ec <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e228      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2202      	movs	r2, #2
 8002a82:	4013      	ands	r3, r2
 8002a84:	d0f1      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b57      	ldr	r3, [pc, #348]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	22f8      	movs	r2, #248	; 0xf8
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	00da      	lsls	r2, r3, #3
 8002a96:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e018      	b.n	8002ad0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9e:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	438a      	bics	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7ff fe1f 	bl	80026ec <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7ff fe1a 	bl	80026ec <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e203      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2202      	movs	r2, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d1f1      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d036      	beq.n	8002b48 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d019      	beq.n	8002b16 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae2:	4b40      	ldr	r3, [pc, #256]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002ae8:	2101      	movs	r1, #1
 8002aea:	430a      	orrs	r2, r1
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7ff fdfd 	bl	80026ec <HAL_GetTick>
 8002af2:	0003      	movs	r3, r0
 8002af4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af8:	f7ff fdf8 	bl	80026ec <HAL_GetTick>
 8002afc:	0002      	movs	r2, r0
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e1e1      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2202      	movs	r2, #2
 8002b10:	4013      	ands	r3, r2
 8002b12:	d0f1      	beq.n	8002af8 <HAL_RCC_OscConfig+0x248>
 8002b14:	e018      	b.n	8002b48 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b1a:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	438a      	bics	r2, r1
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7ff fde3 	bl	80026ec <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7ff fdde 	bl	80026ec <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1c7      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d1f1      	bne.n	8002b2c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d100      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2a4>
 8002b52:	e0b5      	b.n	8002cc0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b54:	201f      	movs	r0, #31
 8002b56:	183b      	adds	r3, r7, r0
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5c:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	055b      	lsls	r3, r3, #21
 8002b64:	4013      	ands	r3, r2
 8002b66:	d110      	bne.n	8002b8a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b68:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002b6e:	2180      	movs	r1, #128	; 0x80
 8002b70:	0549      	lsls	r1, r1, #21
 8002b72:	430a      	orrs	r2, r1
 8002b74:	61da      	str	r2, [r3, #28]
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	055b      	lsls	r3, r3, #21
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b84:	183b      	adds	r3, r7, r0
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCC_OscConfig+0x340>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4013      	ands	r3, r2
 8002b94:	d11a      	bne.n	8002bcc <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_RCC_OscConfig+0x340>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_RCC_OscConfig+0x340>)
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	0049      	lsls	r1, r1, #1
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba4:	f7ff fda2 	bl	80026ec <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bae:	f7ff fd9d 	bl	80026ec <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b64      	cmp	r3, #100	; 0x64
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e186      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_OscConfig+0x340>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x344>
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	621a      	str	r2, [r3, #32]
 8002be0:	e036      	b.n	8002c50 <HAL_RCC_OscConfig+0x3a0>
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	40021000 	.word	0x40021000
 8002be8:	fffeffff 	.word	0xfffeffff
 8002bec:	fffbffff 	.word	0xfffbffff
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCC_OscConfig+0x366>
 8002bfc:	4bb6      	ldr	r3, [pc, #728]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002bfe:	6a1a      	ldr	r2, [r3, #32]
 8002c00:	4bb5      	ldr	r3, [pc, #724]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c02:	2101      	movs	r1, #1
 8002c04:	438a      	bics	r2, r1
 8002c06:	621a      	str	r2, [r3, #32]
 8002c08:	4bb3      	ldr	r3, [pc, #716]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c0a:	6a1a      	ldr	r2, [r3, #32]
 8002c0c:	4bb2      	ldr	r3, [pc, #712]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c0e:	2104      	movs	r1, #4
 8002c10:	438a      	bics	r2, r1
 8002c12:	621a      	str	r2, [r3, #32]
 8002c14:	e01c      	b.n	8002c50 <HAL_RCC_OscConfig+0x3a0>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x388>
 8002c1e:	4bae      	ldr	r3, [pc, #696]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c20:	6a1a      	ldr	r2, [r3, #32]
 8002c22:	4bad      	ldr	r3, [pc, #692]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c24:	2104      	movs	r1, #4
 8002c26:	430a      	orrs	r2, r1
 8002c28:	621a      	str	r2, [r3, #32]
 8002c2a:	4bab      	ldr	r3, [pc, #684]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	4baa      	ldr	r3, [pc, #680]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c30:	2101      	movs	r1, #1
 8002c32:	430a      	orrs	r2, r1
 8002c34:	621a      	str	r2, [r3, #32]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0x3a0>
 8002c38:	4ba7      	ldr	r3, [pc, #668]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	4ba6      	ldr	r3, [pc, #664]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c3e:	2101      	movs	r1, #1
 8002c40:	438a      	bics	r2, r1
 8002c42:	621a      	str	r2, [r3, #32]
 8002c44:	4ba4      	ldr	r3, [pc, #656]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c46:	6a1a      	ldr	r2, [r3, #32]
 8002c48:	4ba3      	ldr	r3, [pc, #652]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d014      	beq.n	8002c82 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7ff fd48 	bl	80026ec <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	e009      	b.n	8002c76 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7ff fd43 	bl	80026ec <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	4a9b      	ldr	r2, [pc, #620]	; (8002edc <HAL_RCC_OscConfig+0x62c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e12b      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c76:	4b98      	ldr	r3, [pc, #608]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x3b2>
 8002c80:	e013      	b.n	8002caa <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7ff fd33 	bl	80026ec <HAL_GetTick>
 8002c86:	0003      	movs	r3, r0
 8002c88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8a:	e009      	b.n	8002ca0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7ff fd2e 	bl	80026ec <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	4a91      	ldr	r2, [pc, #580]	; (8002edc <HAL_RCC_OscConfig+0x62c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e116      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca0:	4b8d      	ldr	r3, [pc, #564]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002caa:	231f      	movs	r3, #31
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb4:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	4b87      	ldr	r3, [pc, #540]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002cba:	4989      	ldr	r1, [pc, #548]	; (8002ee0 <HAL_RCC_OscConfig+0x630>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d063      	beq.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d12a      	bne.n	8002d28 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cd2:	4b81      	ldr	r3, [pc, #516]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd6:	4b80      	ldr	r3, [pc, #512]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002cd8:	2104      	movs	r1, #4
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002cde:	4b7e      	ldr	r3, [pc, #504]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce2:	4b7d      	ldr	r3, [pc, #500]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7ff fcff 	bl	80026ec <HAL_GetTick>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cf4:	f7ff fcfa 	bl	80026ec <HAL_GetTick>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0e3      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d06:	4b74      	ldr	r3, [pc, #464]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d0f1      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d10:	4b71      	ldr	r3, [pc, #452]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	22f8      	movs	r2, #248	; 0xf8
 8002d16:	4393      	bics	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	00da      	lsls	r2, r3, #3
 8002d20:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d22:	430a      	orrs	r2, r1
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34
 8002d26:	e034      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	3305      	adds	r3, #5
 8002d2e:	d111      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d30:	4b69      	ldr	r3, [pc, #420]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d34:	4b68      	ldr	r3, [pc, #416]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d36:	2104      	movs	r1, #4
 8002d38:	438a      	bics	r2, r1
 8002d3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d3c:	4b66      	ldr	r3, [pc, #408]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	22f8      	movs	r2, #248	; 0xf8
 8002d42:	4393      	bics	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	00da      	lsls	r2, r3, #3
 8002d4c:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	635a      	str	r2, [r3, #52]	; 0x34
 8002d52:	e01e      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d54:	4b60      	ldr	r3, [pc, #384]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d58:	4b5f      	ldr	r3, [pc, #380]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d60:	4b5d      	ldr	r3, [pc, #372]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d64:	4b5c      	ldr	r3, [pc, #368]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d66:	2101      	movs	r1, #1
 8002d68:	438a      	bics	r2, r1
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7ff fcbe 	bl	80026ec <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d76:	f7ff fcb9 	bl	80026ec <HAL_GetTick>
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0a2      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d88:	4b53      	ldr	r3, [pc, #332]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d1f1      	bne.n	8002d76 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d100      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
 8002d9a:	e097      	b.n	8002ecc <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9c:	4b4e      	ldr	r3, [pc, #312]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	220c      	movs	r2, #12
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d100      	bne.n	8002daa <HAL_RCC_OscConfig+0x4fa>
 8002da8:	e06b      	b.n	8002e82 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d14c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b49      	ldr	r3, [pc, #292]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b48      	ldr	r3, [pc, #288]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002db8:	494a      	ldr	r1, [pc, #296]	; (8002ee4 <HAL_RCC_OscConfig+0x634>)
 8002dba:	400a      	ands	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbe:	f7ff fc95 	bl	80026ec <HAL_GetTick>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7ff fc90 	bl	80026ec <HAL_GetTick>
 8002dcc:	0002      	movs	r2, r0
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e079      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dda:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	049b      	lsls	r3, r3, #18
 8002de2:	4013      	ands	r3, r2
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de6:	4b3c      	ldr	r3, [pc, #240]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	220f      	movs	r2, #15
 8002dec:	4393      	bics	r3, r2
 8002dee:	0019      	movs	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002df6:	430a      	orrs	r2, r1
 8002df8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dfa:	4b37      	ldr	r3, [pc, #220]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a3a      	ldr	r2, [pc, #232]	; (8002ee8 <HAL_RCC_OscConfig+0x638>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e14:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	0449      	lsls	r1, r1, #17
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7ff fc63 	bl	80026ec <HAL_GetTick>
 8002e26:	0003      	movs	r3, r0
 8002e28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7ff fc5e 	bl	80026ec <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e047      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3e:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	049b      	lsls	r3, r3, #18
 8002e46:	4013      	ands	r3, r2
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x57c>
 8002e4a:	e03f      	b.n	8002ecc <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002e52:	4924      	ldr	r1, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x634>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7ff fc48 	bl	80026ec <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e62:	f7ff fc43 	bl	80026ec <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e02c      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	049b      	lsls	r3, r3, #18
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x5b2>
 8002e80:	e024      	b.n	8002ecc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e01f      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e94:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <HAL_RCC_OscConfig+0x628>)
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	23c0      	movs	r3, #192	; 0xc0
 8002e9e:	025b      	lsls	r3, r3, #9
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	220f      	movs	r2, #15
 8002eae:	401a      	ands	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	23f0      	movs	r3, #240	; 0xf0
 8002ebc:	039b      	lsls	r3, r3, #14
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	0018      	movs	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b008      	add	sp, #32
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	00001388 	.word	0x00001388
 8002ee0:	efffffff 	.word	0xefffffff
 8002ee4:	feffffff 	.word	0xfeffffff
 8002ee8:	ffc27fff 	.word	0xffc27fff

08002eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0b3      	b.n	8003068 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f00:	4b5b      	ldr	r3, [pc, #364]	; (8003070 <HAL_RCC_ClockConfig+0x184>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2201      	movs	r2, #1
 8002f06:	4013      	ands	r3, r2
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d911      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b58      	ldr	r3, [pc, #352]	; (8003070 <HAL_RCC_ClockConfig+0x184>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2201      	movs	r2, #1
 8002f14:	4393      	bics	r3, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	4b55      	ldr	r3, [pc, #340]	; (8003070 <HAL_RCC_ClockConfig+0x184>)
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f20:	4b53      	ldr	r3, [pc, #332]	; (8003070 <HAL_RCC_ClockConfig+0x184>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2201      	movs	r2, #1
 8002f26:	4013      	ands	r3, r2
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e09a      	b.n	8003068 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2202      	movs	r2, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d015      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2204      	movs	r2, #4
 8002f42:	4013      	ands	r3, r2
 8002f44:	d006      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f46:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8002f4c:	21e0      	movs	r1, #224	; 0xe0
 8002f4e:	00c9      	lsls	r1, r1, #3
 8002f50:	430a      	orrs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f54:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	22f0      	movs	r2, #240	; 0xf0
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	4b44      	ldr	r3, [pc, #272]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8002f64:	430a      	orrs	r2, r1
 8002f66:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d040      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	029b      	lsls	r3, r3, #10
 8002f82:	4013      	ands	r3, r2
 8002f84:	d114      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e06e      	b.n	8003068 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f92:	4b38      	ldr	r3, [pc, #224]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	049b      	lsls	r3, r3, #18
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d108      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e062      	b.n	8003068 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa2:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e05b      	b.n	8003068 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb0:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	4393      	bics	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc4:	f7ff fb92 	bl	80026ec <HAL_GetTick>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fcc:	e009      	b.n	8002fe2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fce:	f7ff fb8d 	bl	80026ec <HAL_GetTick>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_RCC_ClockConfig+0x18c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e042      	b.n	8003068 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	220c      	movs	r2, #12
 8002fe8:	401a      	ands	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d1ec      	bne.n	8002fce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_RCC_ClockConfig+0x184>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d211      	bcs.n	8003026 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCC_ClockConfig+0x184>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	4393      	bics	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_RCC_ClockConfig+0x184>)
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003014:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_RCC_ClockConfig+0x184>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2201      	movs	r2, #1
 800301a:	4013      	ands	r3, r2
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d001      	beq.n	8003026 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e020      	b.n	8003068 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2204      	movs	r2, #4
 800302c:	4013      	ands	r3, r2
 800302e:	d009      	beq.n	8003044 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003030:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a11      	ldr	r2, [pc, #68]	; (800307c <HAL_RCC_ClockConfig+0x190>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003044:	f000 f820 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003048:	0001      	movs	r1, r0
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x188>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	220f      	movs	r2, #15
 8003052:	4013      	ands	r3, r2
 8003054:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <HAL_RCC_ClockConfig+0x194>)
 8003056:	5cd3      	ldrb	r3, [r2, r3]
 8003058:	000a      	movs	r2, r1
 800305a:	40da      	lsrs	r2, r3
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x198>)
 800305e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003060:	2000      	movs	r0, #0
 8003062:	f7ff fafd 	bl	8002660 <HAL_InitTick>
  
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b004      	add	sp, #16
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40022000 	.word	0x40022000
 8003074:	40021000 	.word	0x40021000
 8003078:	00001388 	.word	0x00001388
 800307c:	fffff8ff 	.word	0xfffff8ff
 8003080:	080081d0 	.word	0x080081d0
 8003084:	20000000 	.word	0x20000000

08003088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b08f      	sub	sp, #60	; 0x3c
 800308c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800308e:	2314      	movs	r3, #20
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003094:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003096:	c313      	stmia	r3!, {r0, r1, r4}
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030a2:	c313      	stmia	r3!, {r0, r1, r4}
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ac:	2300      	movs	r3, #0
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b0:	2300      	movs	r3, #0
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80030bc:	4b23      	ldr	r3, [pc, #140]	; (800314c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	220c      	movs	r2, #12
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d002      	beq.n	80030d2 <HAL_RCC_GetSysClockFreq+0x4a>
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d003      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x50>
 80030d0:	e02f      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030d6:	e02f      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	0c9b      	lsrs	r3, r3, #18
 80030dc:	220f      	movs	r2, #15
 80030de:	4013      	ands	r3, r2
 80030e0:	2214      	movs	r2, #20
 80030e2:	18ba      	adds	r2, r7, r2
 80030e4:	5cd3      	ldrb	r3, [r2, r3]
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030e8:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	220f      	movs	r2, #15
 80030ee:	4013      	ands	r3, r2
 80030f0:	1d3a      	adds	r2, r7, #4
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f8:	23c0      	movs	r3, #192	; 0xc0
 80030fa:	025b      	lsls	r3, r3, #9
 80030fc:	401a      	ands	r2, r3
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	025b      	lsls	r3, r3, #9
 8003102:	429a      	cmp	r2, r3
 8003104:	d109      	bne.n	800311a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003108:	4811      	ldr	r0, [pc, #68]	; (8003150 <HAL_RCC_GetSysClockFreq+0xc8>)
 800310a:	f7fd f819 	bl	8000140 <__udivsi3>
 800310e:	0003      	movs	r3, r0
 8003110:	001a      	movs	r2, r3
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	4353      	muls	r3, r2
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
 8003118:	e008      	b.n	800312c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800311a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800311c:	480c      	ldr	r0, [pc, #48]	; (8003150 <HAL_RCC_GetSysClockFreq+0xc8>)
 800311e:	f7fd f80f 	bl	8000140 <__udivsi3>
 8003122:	0003      	movs	r3, r0
 8003124:	001a      	movs	r2, r3
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	4353      	muls	r3, r2
 800312a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003130:	e002      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003134:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003136:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b00f      	add	sp, #60	; 0x3c
 8003140:	bd90      	pop	{r4, r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	08008130 	.word	0x08008130
 8003148:	08008140 	.word	0x08008140
 800314c:	40021000 	.word	0x40021000
 8003150:	007a1200 	.word	0x007a1200

08003154 <adc_chsel>:
			return BML_TIMEOUT;
		}
		/* For robust implementation, add here time-out management */
	}
}
void adc_chsel(GPIO_TypeDef *port, uint16_t pin) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	000a      	movs	r2, r1
 800315e:	1cbb      	adds	r3, r7, #2
 8003160:	801a      	strh	r2, [r3, #0]

	if (port == GPIOA) {
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	2390      	movs	r3, #144	; 0x90
 8003166:	05db      	lsls	r3, r3, #23
 8003168:	429a      	cmp	r2, r3
 800316a:	d141      	bne.n	80031f0 <adc_chsel+0x9c>
		switch (pin) {
 800316c:	1cbb      	adds	r3, r7, #2
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	2b07      	cmp	r3, #7
 8003172:	d900      	bls.n	8003176 <adc_chsel+0x22>
 8003174:	e094      	b.n	80032a0 <adc_chsel+0x14c>
 8003176:	009a      	lsls	r2, r3, #2
 8003178:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <adc_chsel+0x160>)
 800317a:	18d3      	adds	r3, r2, r3
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL0;
 8003180:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <adc_chsel+0x164>)
 8003182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003184:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <adc_chsel+0x164>)
 8003186:	2101      	movs	r1, #1
 8003188:	430a      	orrs	r2, r1
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800318c:	e08d      	b.n	80032aa <adc_chsel+0x156>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 800318e:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <adc_chsel+0x164>)
 8003190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003192:	4b49      	ldr	r3, [pc, #292]	; (80032b8 <adc_chsel+0x164>)
 8003194:	2102      	movs	r1, #2
 8003196:	430a      	orrs	r2, r1
 8003198:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800319a:	e086      	b.n	80032aa <adc_chsel+0x156>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL2;
 800319c:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <adc_chsel+0x164>)
 800319e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031a0:	4b45      	ldr	r3, [pc, #276]	; (80032b8 <adc_chsel+0x164>)
 80031a2:	2104      	movs	r1, #4
 80031a4:	430a      	orrs	r2, r1
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80031a8:	e07f      	b.n	80032aa <adc_chsel+0x156>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL3;
 80031aa:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <adc_chsel+0x164>)
 80031ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ae:	4b42      	ldr	r3, [pc, #264]	; (80032b8 <adc_chsel+0x164>)
 80031b0:	2108      	movs	r1, #8
 80031b2:	430a      	orrs	r2, r1
 80031b4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80031b6:	e078      	b.n	80032aa <adc_chsel+0x156>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 80031b8:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <adc_chsel+0x164>)
 80031ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031bc:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <adc_chsel+0x164>)
 80031be:	2110      	movs	r1, #16
 80031c0:	430a      	orrs	r2, r1
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80031c4:	e071      	b.n	80032aa <adc_chsel+0x156>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL5;
 80031c6:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <adc_chsel+0x164>)
 80031c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ca:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <adc_chsel+0x164>)
 80031cc:	2120      	movs	r1, #32
 80031ce:	430a      	orrs	r2, r1
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80031d2:	e06a      	b.n	80032aa <adc_chsel+0x156>
		case 6:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
 80031d4:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <adc_chsel+0x164>)
 80031d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d8:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <adc_chsel+0x164>)
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	430a      	orrs	r2, r1
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80031e0:	e063      	b.n	80032aa <adc_chsel+0x156>
		case 7:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL7;
 80031e2:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <adc_chsel+0x164>)
 80031e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e6:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <adc_chsel+0x164>)
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	430a      	orrs	r2, r1
 80031ec:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80031ee:	e05c      	b.n	80032aa <adc_chsel+0x156>
		default:
			break;
		}
	} else if (port == GPIOB) {
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a32      	ldr	r2, [pc, #200]	; (80032bc <adc_chsel+0x168>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d116      	bne.n	8003226 <adc_chsel+0xd2>
		switch (pin) {
 80031f8:	1cbb      	adds	r3, r7, #2
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <adc_chsel+0xb2>
 8003200:	2b01      	cmp	r3, #1
 8003202:	d008      	beq.n	8003216 <adc_chsel+0xc2>
			break;
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
			break;
		default:
			break;
 8003204:	e051      	b.n	80032aa <adc_chsel+0x156>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 8003206:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <adc_chsel+0x164>)
 8003208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320a:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <adc_chsel+0x164>)
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	0049      	lsls	r1, r1, #1
 8003210:	430a      	orrs	r2, r1
 8003212:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003214:	e049      	b.n	80032aa <adc_chsel+0x156>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
 8003216:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <adc_chsel+0x164>)
 8003218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <adc_chsel+0x164>)
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	0089      	lsls	r1, r1, #2
 8003220:	430a      	orrs	r2, r1
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003224:	e041      	b.n	80032aa <adc_chsel+0x156>
		}
	} else if (port == GPIOC) {
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a25      	ldr	r2, [pc, #148]	; (80032c0 <adc_chsel+0x16c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d13a      	bne.n	80032a4 <adc_chsel+0x150>
		switch (pin) {
 800322e:	1cbb      	adds	r3, r7, #2
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	2b05      	cmp	r3, #5
 8003234:	d838      	bhi.n	80032a8 <adc_chsel+0x154>
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <adc_chsel+0x170>)
 800323a:	18d3      	adds	r3, r2, r3
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <adc_chsel+0x164>)
 8003242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003244:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <adc_chsel+0x164>)
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	00c9      	lsls	r1, r1, #3
 800324a:	430a      	orrs	r2, r1
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800324e:	e02c      	b.n	80032aa <adc_chsel+0x156>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <adc_chsel+0x164>)
 8003252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003254:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <adc_chsel+0x164>)
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	0109      	lsls	r1, r1, #4
 800325a:	430a      	orrs	r2, r1
 800325c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800325e:	e024      	b.n	80032aa <adc_chsel+0x156>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL12;
 8003260:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <adc_chsel+0x164>)
 8003262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <adc_chsel+0x164>)
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	0149      	lsls	r1, r1, #5
 800326a:	430a      	orrs	r2, r1
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800326e:	e01c      	b.n	80032aa <adc_chsel+0x156>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL13;
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <adc_chsel+0x164>)
 8003272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <adc_chsel+0x164>)
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	0189      	lsls	r1, r1, #6
 800327a:	430a      	orrs	r2, r1
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800327e:	e014      	b.n	80032aa <adc_chsel+0x156>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL14;
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <adc_chsel+0x164>)
 8003282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <adc_chsel+0x164>)
 8003286:	2180      	movs	r1, #128	; 0x80
 8003288:	01c9      	lsls	r1, r1, #7
 800328a:	430a      	orrs	r2, r1
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800328e:	e00c      	b.n	80032aa <adc_chsel+0x156>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <adc_chsel+0x164>)
 8003292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <adc_chsel+0x164>)
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	0209      	lsls	r1, r1, #8
 800329a:	430a      	orrs	r2, r1
 800329c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800329e:	e004      	b.n	80032aa <adc_chsel+0x156>
			break;
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	e002      	b.n	80032aa <adc_chsel+0x156>
		default:
			break;
		}
	}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	e000      	b.n	80032aa <adc_chsel+0x156>
			break;
 80032a8:	46c0      	nop			; (mov r8, r8)
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b002      	add	sp, #8
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	080081e0 	.word	0x080081e0
 80032b8:	40012400 	.word	0x40012400
 80032bc:	48000400 	.word	0x48000400
 80032c0:	48000800 	.word	0x48000800
 80032c4:	08008200 	.word	0x08008200

080032c8 <__NVIC_EnableIRQ>:
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	0002      	movs	r2, r0
 80032d0:	1dfb      	adds	r3, r7, #7
 80032d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032d4:	1dfb      	adds	r3, r7, #7
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b7f      	cmp	r3, #127	; 0x7f
 80032da:	d809      	bhi.n	80032f0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032dc:	1dfb      	adds	r3, r7, #7
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	001a      	movs	r2, r3
 80032e2:	231f      	movs	r3, #31
 80032e4:	401a      	ands	r2, r3
 80032e6:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <__NVIC_EnableIRQ+0x30>)
 80032e8:	2101      	movs	r1, #1
 80032ea:	4091      	lsls	r1, r2
 80032ec:	000a      	movs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	e000e100 	.word	0xe000e100

080032fc <gpio_clk_en>:
		uint16_t out_max) {
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
}

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	2390      	movs	r3, #144	; 0x90
 8003308:	05db      	lsls	r3, r3, #23
 800330a:	429a      	cmp	r2, r3
 800330c:	d107      	bne.n	800331e <gpio_clk_en+0x22>
		GPIOA_CLK_EN;
 800330e:	4b1b      	ldr	r3, [pc, #108]	; (800337c <gpio_clk_en+0x80>)
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <gpio_clk_en+0x80>)
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	0289      	lsls	r1, r1, #10
 8003318:	430a      	orrs	r2, r1
 800331a:	615a      	str	r2, [r3, #20]
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOF_CLK_EN;
	}
}
 800331c:	e02a      	b.n	8003374 <gpio_clk_en+0x78>
	} else if (port == GPIOB) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a17      	ldr	r2, [pc, #92]	; (8003380 <gpio_clk_en+0x84>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d107      	bne.n	8003336 <gpio_clk_en+0x3a>
		GPIOB_CLK_EN;
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <gpio_clk_en+0x80>)
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <gpio_clk_en+0x80>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	02c9      	lsls	r1, r1, #11
 8003330:	430a      	orrs	r2, r1
 8003332:	615a      	str	r2, [r3, #20]
}
 8003334:	e01e      	b.n	8003374 <gpio_clk_en+0x78>
	} else if (port == GPIOC) {
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a12      	ldr	r2, [pc, #72]	; (8003384 <gpio_clk_en+0x88>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d107      	bne.n	800334e <gpio_clk_en+0x52>
		GPIOC_CLK_EN;
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <gpio_clk_en+0x80>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <gpio_clk_en+0x80>)
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	0309      	lsls	r1, r1, #12
 8003348:	430a      	orrs	r2, r1
 800334a:	615a      	str	r2, [r3, #20]
}
 800334c:	e012      	b.n	8003374 <gpio_clk_en+0x78>
	} else if (port == GPIOD) {
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <gpio_clk_en+0x8c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d107      	bne.n	8003366 <gpio_clk_en+0x6a>
		GPIOD_CLK_EN;
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <gpio_clk_en+0x80>)
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <gpio_clk_en+0x80>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0349      	lsls	r1, r1, #13
 8003360:	430a      	orrs	r2, r1
 8003362:	615a      	str	r2, [r3, #20]
}
 8003364:	e006      	b.n	8003374 <gpio_clk_en+0x78>
		GPIOF_CLK_EN;
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <gpio_clk_en+0x80>)
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <gpio_clk_en+0x80>)
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	03c9      	lsls	r1, r1, #15
 8003370:	430a      	orrs	r2, r1
 8003372:	615a      	str	r2, [r3, #20]
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b002      	add	sp, #8
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	48000400 	.word	0x48000400
 8003384:	48000800 	.word	0x48000800
 8003388:	48000c00 	.word	0x48000c00

0800338c <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d11c      	bne.n	80033da <gpio_config+0x4e>
		gpio_clk_en(port);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7ff ffaa 	bl	80032fc <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 f858 	bl	8003464 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f86a 	bl	8003494 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f87c 	bl	80034c4 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 f88e 	bl	80034f4 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
		adc_chsel(port, pinNumber);
	}
}
 80033d8:	e040      	b.n	800345c <gpio_config+0xd0>
	} else if (pinMode == INPUT_MODE) {
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d110      	bne.n	8003402 <gpio_config+0x76>
		gpio_clk_en(port);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff ff8a 	bl	80032fc <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 f838 	bl	8003464 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 f862 	bl	80034c4 <gpio_PUPD>
}
 8003400:	e02c      	b.n	800345c <gpio_config+0xd0>
	} else if (pinMode == ALT_MODE) {
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d116      	bne.n	8003436 <gpio_config+0xaa>
		gpio_clk_en(port);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff ff76 	bl	80032fc <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	0018      	movs	r0, r3
 8003418:	f000 f824 	bl	8003464 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	0018      	movs	r0, r3
 8003424:	f000 f84e 	bl	80034c4 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	0018      	movs	r0, r3
 8003430:	f000 f860 	bl	80034f4 <gpio_PHPL_OD>
}
 8003434:	e012      	b.n	800345c <gpio_config+0xd0>
	} else if (pinMode == ANALOG_MODE) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d10f      	bne.n	800345c <gpio_config+0xd0>
		gpio_clk_en(port);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	0018      	movs	r0, r3
 8003440:	f7ff ff5c 	bl	80032fc <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	0018      	movs	r0, r3
 800344c:	f000 f80a 	bl	8003464 <gpio_moder>
		adc_chsel(port, pinNumber);
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	0011      	movs	r1, r2
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff fe7c 	bl	8003154 <adc_chsel>
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	b004      	add	sp, #16
 8003462:	bd80      	pop	{r7, pc}

08003464 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <gpio_moder+0x2c>)
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	0089      	lsls	r1, r1, #2
 800347a:	58cb      	ldr	r3, [r1, r3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4099      	lsls	r1, r3
 8003480:	000b      	movs	r3, r1
 8003482:	431a      	orrs	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	601a      	str	r2, [r3, #0]
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b004      	add	sp, #16
 800348e:	bd80      	pop	{r7, pc}
 8003490:	2000000c 	.word	0x2000000c

08003494 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <gpio_speed+0x2c>)
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	0089      	lsls	r1, r1, #2
 80034aa:	58cb      	ldr	r3, [r1, r3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4099      	lsls	r1, r3
 80034b0:	000b      	movs	r3, r1
 80034b2:	431a      	orrs	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b004      	add	sp, #16
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	2000000c 	.word	0x2000000c

080034c4 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <gpio_PUPD+0x2c>)
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	0089      	lsls	r1, r1, #2
 80034da:	58cb      	ldr	r3, [r1, r3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4099      	lsls	r1, r3
 80034e0:	000b      	movs	r3, r1
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	60da      	str	r2, [r3, #12]
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b004      	add	sp, #16
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	2000000c 	.word	0x2000000c

080034f4 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4099      	lsls	r1, r3
 800350a:	000b      	movs	r3, r1
 800350c:	431a      	orrs	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	605a      	str	r2, [r3, #4]
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b004      	add	sp, #16
 8003518:	bd80      	pop	{r7, pc}

0800351a <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b07      	cmp	r3, #7
 800352a:	d80a      	bhi.n	8003542 <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1a      	ldr	r2, [r3, #32]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4099      	lsls	r1, r3
 8003538:	000b      	movs	r3, r1
 800353a:	431a      	orrs	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8003540:	e00a      	b.n	8003558 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3b08      	subs	r3, #8
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4099      	lsls	r1, r3
 8003550:	000b      	movs	r3, r1
 8003552:	431a      	orrs	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b004      	add	sp, #16
 800355e:	bd80      	pop	{r7, pc}

08003560 <gpio_IT_config>:
	return flag;
}
/**************************************************************************************/

/*******************************INTERRUPT CONFIGURATION*********************************/
void gpio_IT_config(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t edge) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	1dfb      	adds	r3, r7, #7
 800356c:	701a      	strb	r2, [r3, #0]
	SYSCFG_CLK_EN;
 800356e:	4bc8      	ldr	r3, [pc, #800]	; (8003890 <gpio_IT_config+0x330>)
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	4bc7      	ldr	r3, [pc, #796]	; (8003890 <gpio_IT_config+0x330>)
 8003574:	2101      	movs	r1, #1
 8003576:	430a      	orrs	r2, r1
 8003578:	619a      	str	r2, [r3, #24]
	if (port == GPIOA) {
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	2390      	movs	r3, #144	; 0x90
 800357e:	05db      	lsls	r3, r3, #23
 8003580:	429a      	cmp	r2, r3
 8003582:	d149      	bne.n	8003618 <gpio_IT_config+0xb8>
		switch (pinNumber) {
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	d900      	bls.n	800358c <gpio_IT_config+0x2c>
 800358a:	e147      	b.n	800381c <gpio_IT_config+0x2bc>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	4bc0      	ldr	r3, [pc, #768]	; (8003894 <gpio_IT_config+0x334>)
 8003592:	18d3      	adds	r3, r2, r3
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8003598:	4bbf      	ldr	r3, [pc, #764]	; (8003898 <gpio_IT_config+0x338>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
			break;
 800359e:	e13d      	b.n	800381c <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 80035a0:	4bbd      	ldr	r3, [pc, #756]	; (8003898 <gpio_IT_config+0x338>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
			break;
 80035a6:	e139      	b.n	800381c <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 80035a8:	4bbb      	ldr	r3, [pc, #748]	; (8003898 <gpio_IT_config+0x338>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
			break;
 80035ae:	e135      	b.n	800381c <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 80035b0:	4bb9      	ldr	r3, [pc, #740]	; (8003898 <gpio_IT_config+0x338>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
			break;
 80035b6:	e131      	b.n	800381c <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA;
 80035b8:	4bb7      	ldr	r3, [pc, #732]	; (8003898 <gpio_IT_config+0x338>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
			break;
 80035be:	e12d      	b.n	800381c <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PA;
 80035c0:	4bb5      	ldr	r3, [pc, #724]	; (8003898 <gpio_IT_config+0x338>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	60da      	str	r2, [r3, #12]
			break;
 80035c6:	e129      	b.n	800381c <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PA;
 80035c8:	4bb3      	ldr	r3, [pc, #716]	; (8003898 <gpio_IT_config+0x338>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	60da      	str	r2, [r3, #12]
			break;
 80035ce:	e125      	b.n	800381c <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PA;
 80035d0:	4bb1      	ldr	r3, [pc, #708]	; (8003898 <gpio_IT_config+0x338>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	60da      	str	r2, [r3, #12]
			break;
 80035d6:	e121      	b.n	800381c <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PA;
 80035d8:	4baf      	ldr	r3, [pc, #700]	; (8003898 <gpio_IT_config+0x338>)
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
			break;
 80035de:	e11d      	b.n	800381c <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PA;
 80035e0:	4bad      	ldr	r3, [pc, #692]	; (8003898 <gpio_IT_config+0x338>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
			break;
 80035e6:	e119      	b.n	800381c <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PA;
 80035e8:	4bab      	ldr	r3, [pc, #684]	; (8003898 <gpio_IT_config+0x338>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	611a      	str	r2, [r3, #16]
			break;
 80035ee:	e115      	b.n	800381c <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PA;
 80035f0:	4ba9      	ldr	r3, [pc, #676]	; (8003898 <gpio_IT_config+0x338>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	611a      	str	r2, [r3, #16]
			break;
 80035f6:	e111      	b.n	800381c <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PA;
 80035f8:	4ba7      	ldr	r3, [pc, #668]	; (8003898 <gpio_IT_config+0x338>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	615a      	str	r2, [r3, #20]
			break;
 80035fe:	e10d      	b.n	800381c <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PA;
 8003600:	4ba5      	ldr	r3, [pc, #660]	; (8003898 <gpio_IT_config+0x338>)
 8003602:	2200      	movs	r2, #0
 8003604:	615a      	str	r2, [r3, #20]
			break;
 8003606:	e109      	b.n	800381c <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PA;
 8003608:	4ba3      	ldr	r3, [pc, #652]	; (8003898 <gpio_IT_config+0x338>)
 800360a:	2200      	movs	r2, #0
 800360c:	615a      	str	r2, [r3, #20]
			break;
 800360e:	e105      	b.n	800381c <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PA;
 8003610:	4ba1      	ldr	r3, [pc, #644]	; (8003898 <gpio_IT_config+0x338>)
 8003612:	2200      	movs	r2, #0
 8003614:	615a      	str	r2, [r3, #20]
			break;
 8003616:	e101      	b.n	800381c <gpio_IT_config+0x2bc>
		}	// end of Port A
	} else if (port == GPIOB) {
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4aa0      	ldr	r2, [pc, #640]	; (800389c <gpio_IT_config+0x33c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d151      	bne.n	80036c4 <gpio_IT_config+0x164>
		switch (pinNumber) {
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b0f      	cmp	r3, #15
 8003624:	d900      	bls.n	8003628 <gpio_IT_config+0xc8>
 8003626:	e0f9      	b.n	800381c <gpio_IT_config+0x2bc>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	009a      	lsls	r2, r3, #2
 800362c:	4b9c      	ldr	r3, [pc, #624]	; (80038a0 <gpio_IT_config+0x340>)
 800362e:	18d3      	adds	r3, r2, r3
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 8003634:	4b98      	ldr	r3, [pc, #608]	; (8003898 <gpio_IT_config+0x338>)
 8003636:	2201      	movs	r2, #1
 8003638:	609a      	str	r2, [r3, #8]
			break;
 800363a:	e0ef      	b.n	800381c <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 800363c:	4b96      	ldr	r3, [pc, #600]	; (8003898 <gpio_IT_config+0x338>)
 800363e:	2210      	movs	r2, #16
 8003640:	609a      	str	r2, [r3, #8]
			break;
 8003642:	e0eb      	b.n	800381c <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 8003644:	4b94      	ldr	r3, [pc, #592]	; (8003898 <gpio_IT_config+0x338>)
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	0052      	lsls	r2, r2, #1
 800364a:	609a      	str	r2, [r3, #8]
			break;
 800364c:	e0e6      	b.n	800381c <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 800364e:	4b92      	ldr	r3, [pc, #584]	; (8003898 <gpio_IT_config+0x338>)
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	0152      	lsls	r2, r2, #5
 8003654:	609a      	str	r2, [r3, #8]
			break;
 8003656:	e0e1      	b.n	800381c <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PB;
 8003658:	4b8f      	ldr	r3, [pc, #572]	; (8003898 <gpio_IT_config+0x338>)
 800365a:	2201      	movs	r2, #1
 800365c:	60da      	str	r2, [r3, #12]
			break;
 800365e:	e0dd      	b.n	800381c <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PB;
 8003660:	4b8d      	ldr	r3, [pc, #564]	; (8003898 <gpio_IT_config+0x338>)
 8003662:	2210      	movs	r2, #16
 8003664:	60da      	str	r2, [r3, #12]
			break;
 8003666:	e0d9      	b.n	800381c <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PB;
 8003668:	4b8b      	ldr	r3, [pc, #556]	; (8003898 <gpio_IT_config+0x338>)
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	0052      	lsls	r2, r2, #1
 800366e:	60da      	str	r2, [r3, #12]
			break;
 8003670:	e0d4      	b.n	800381c <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PB;
 8003672:	4b89      	ldr	r3, [pc, #548]	; (8003898 <gpio_IT_config+0x338>)
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	0152      	lsls	r2, r2, #5
 8003678:	60da      	str	r2, [r3, #12]
			break;
 800367a:	e0cf      	b.n	800381c <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PB;
 800367c:	4b86      	ldr	r3, [pc, #536]	; (8003898 <gpio_IT_config+0x338>)
 800367e:	2201      	movs	r2, #1
 8003680:	611a      	str	r2, [r3, #16]
			break;
 8003682:	e0cb      	b.n	800381c <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PB;
 8003684:	4b84      	ldr	r3, [pc, #528]	; (8003898 <gpio_IT_config+0x338>)
 8003686:	2210      	movs	r2, #16
 8003688:	611a      	str	r2, [r3, #16]
			break;
 800368a:	e0c7      	b.n	800381c <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PB;
 800368c:	4b82      	ldr	r3, [pc, #520]	; (8003898 <gpio_IT_config+0x338>)
 800368e:	2280      	movs	r2, #128	; 0x80
 8003690:	0052      	lsls	r2, r2, #1
 8003692:	611a      	str	r2, [r3, #16]
			break;
 8003694:	e0c2      	b.n	800381c <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PB;
 8003696:	4b80      	ldr	r3, [pc, #512]	; (8003898 <gpio_IT_config+0x338>)
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	0152      	lsls	r2, r2, #5
 800369c:	611a      	str	r2, [r3, #16]
			break;
 800369e:	e0bd      	b.n	800381c <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PB;
 80036a0:	4b7d      	ldr	r3, [pc, #500]	; (8003898 <gpio_IT_config+0x338>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	615a      	str	r2, [r3, #20]
			break;
 80036a6:	e0b9      	b.n	800381c <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PB;
 80036a8:	4b7b      	ldr	r3, [pc, #492]	; (8003898 <gpio_IT_config+0x338>)
 80036aa:	2210      	movs	r2, #16
 80036ac:	615a      	str	r2, [r3, #20]
			break;
 80036ae:	e0b5      	b.n	800381c <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PB;
 80036b0:	4b79      	ldr	r3, [pc, #484]	; (8003898 <gpio_IT_config+0x338>)
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	0052      	lsls	r2, r2, #1
 80036b6:	615a      	str	r2, [r3, #20]
			break;
 80036b8:	e0b0      	b.n	800381c <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PB;
 80036ba:	4b77      	ldr	r3, [pc, #476]	; (8003898 <gpio_IT_config+0x338>)
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	0152      	lsls	r2, r2, #5
 80036c0:	615a      	str	r2, [r3, #20]
			break;
 80036c2:	e0ab      	b.n	800381c <gpio_IT_config+0x2bc>
		}	// end of Port B
	} else if (port == GPIOC) {
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a77      	ldr	r2, [pc, #476]	; (80038a4 <gpio_IT_config+0x344>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d151      	bne.n	8003770 <gpio_IT_config+0x210>
		switch (pinNumber) {
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	d900      	bls.n	80036d4 <gpio_IT_config+0x174>
 80036d2:	e0a3      	b.n	800381c <gpio_IT_config+0x2bc>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	009a      	lsls	r2, r3, #2
 80036d8:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <gpio_IT_config+0x348>)
 80036da:	18d3      	adds	r3, r2, r3
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 80036e0:	4b6d      	ldr	r3, [pc, #436]	; (8003898 <gpio_IT_config+0x338>)
 80036e2:	2202      	movs	r2, #2
 80036e4:	609a      	str	r2, [r3, #8]
			break;
 80036e6:	e099      	b.n	800381c <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 80036e8:	4b6b      	ldr	r3, [pc, #428]	; (8003898 <gpio_IT_config+0x338>)
 80036ea:	2220      	movs	r2, #32
 80036ec:	609a      	str	r2, [r3, #8]
			break;
 80036ee:	e095      	b.n	800381c <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 80036f0:	4b69      	ldr	r3, [pc, #420]	; (8003898 <gpio_IT_config+0x338>)
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	0092      	lsls	r2, r2, #2
 80036f6:	609a      	str	r2, [r3, #8]
			break;
 80036f8:	e090      	b.n	800381c <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 80036fa:	4b67      	ldr	r3, [pc, #412]	; (8003898 <gpio_IT_config+0x338>)
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	0192      	lsls	r2, r2, #6
 8003700:	609a      	str	r2, [r3, #8]
			break;
 8003702:	e08b      	b.n	800381c <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PC;
 8003704:	4b64      	ldr	r3, [pc, #400]	; (8003898 <gpio_IT_config+0x338>)
 8003706:	2202      	movs	r2, #2
 8003708:	60da      	str	r2, [r3, #12]
			break;
 800370a:	e087      	b.n	800381c <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PC;
 800370c:	4b62      	ldr	r3, [pc, #392]	; (8003898 <gpio_IT_config+0x338>)
 800370e:	2220      	movs	r2, #32
 8003710:	60da      	str	r2, [r3, #12]
			break;
 8003712:	e083      	b.n	800381c <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PC;
 8003714:	4b60      	ldr	r3, [pc, #384]	; (8003898 <gpio_IT_config+0x338>)
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	0092      	lsls	r2, r2, #2
 800371a:	60da      	str	r2, [r3, #12]
			break;
 800371c:	e07e      	b.n	800381c <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PC;
 800371e:	4b5e      	ldr	r3, [pc, #376]	; (8003898 <gpio_IT_config+0x338>)
 8003720:	2280      	movs	r2, #128	; 0x80
 8003722:	0192      	lsls	r2, r2, #6
 8003724:	60da      	str	r2, [r3, #12]
			break;
 8003726:	e079      	b.n	800381c <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PC;
 8003728:	4b5b      	ldr	r3, [pc, #364]	; (8003898 <gpio_IT_config+0x338>)
 800372a:	2202      	movs	r2, #2
 800372c:	611a      	str	r2, [r3, #16]
			break;
 800372e:	e075      	b.n	800381c <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PC;
 8003730:	4b59      	ldr	r3, [pc, #356]	; (8003898 <gpio_IT_config+0x338>)
 8003732:	2220      	movs	r2, #32
 8003734:	611a      	str	r2, [r3, #16]
			break;
 8003736:	e071      	b.n	800381c <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PC;
 8003738:	4b57      	ldr	r3, [pc, #348]	; (8003898 <gpio_IT_config+0x338>)
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	0092      	lsls	r2, r2, #2
 800373e:	611a      	str	r2, [r3, #16]
			break;
 8003740:	e06c      	b.n	800381c <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PC;
 8003742:	4b55      	ldr	r3, [pc, #340]	; (8003898 <gpio_IT_config+0x338>)
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	0192      	lsls	r2, r2, #6
 8003748:	611a      	str	r2, [r3, #16]
			break;
 800374a:	e067      	b.n	800381c <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PC;
 800374c:	4b52      	ldr	r3, [pc, #328]	; (8003898 <gpio_IT_config+0x338>)
 800374e:	2202      	movs	r2, #2
 8003750:	615a      	str	r2, [r3, #20]
			break;
 8003752:	e063      	b.n	800381c <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PC;
 8003754:	4b50      	ldr	r3, [pc, #320]	; (8003898 <gpio_IT_config+0x338>)
 8003756:	2220      	movs	r2, #32
 8003758:	615a      	str	r2, [r3, #20]
			break;
 800375a:	e05f      	b.n	800381c <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PC;
 800375c:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <gpio_IT_config+0x338>)
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	0092      	lsls	r2, r2, #2
 8003762:	615a      	str	r2, [r3, #20]
			break;
 8003764:	e05a      	b.n	800381c <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PC;
 8003766:	4b4c      	ldr	r3, [pc, #304]	; (8003898 <gpio_IT_config+0x338>)
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	0192      	lsls	r2, r2, #6
 800376c:	615a      	str	r2, [r3, #20]
			break;
 800376e:	e055      	b.n	800381c <gpio_IT_config+0x2bc>
		}	// end of Port C
	} else if (port == GPIOD) {
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a4e      	ldr	r2, [pc, #312]	; (80038ac <gpio_IT_config+0x34c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d150      	bne.n	800381a <gpio_IT_config+0x2ba>
		switch (pinNumber) {
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b0f      	cmp	r3, #15
 800377c:	d84e      	bhi.n	800381c <gpio_IT_config+0x2bc>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	009a      	lsls	r2, r3, #2
 8003782:	4b4b      	ldr	r3, [pc, #300]	; (80038b0 <gpio_IT_config+0x350>)
 8003784:	18d3      	adds	r3, r2, r3
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 800378a:	4b43      	ldr	r3, [pc, #268]	; (8003898 <gpio_IT_config+0x338>)
 800378c:	2203      	movs	r2, #3
 800378e:	609a      	str	r2, [r3, #8]
			break;
 8003790:	e044      	b.n	800381c <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8003792:	4b41      	ldr	r3, [pc, #260]	; (8003898 <gpio_IT_config+0x338>)
 8003794:	2230      	movs	r2, #48	; 0x30
 8003796:	609a      	str	r2, [r3, #8]
			break;
 8003798:	e040      	b.n	800381c <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 800379a:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <gpio_IT_config+0x338>)
 800379c:	22c0      	movs	r2, #192	; 0xc0
 800379e:	0092      	lsls	r2, r2, #2
 80037a0:	609a      	str	r2, [r3, #8]
			break;
 80037a2:	e03b      	b.n	800381c <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 80037a4:	4b3c      	ldr	r3, [pc, #240]	; (8003898 <gpio_IT_config+0x338>)
 80037a6:	22c0      	movs	r2, #192	; 0xc0
 80037a8:	0192      	lsls	r2, r2, #6
 80037aa:	609a      	str	r2, [r3, #8]
			break;
 80037ac:	e036      	b.n	800381c <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PD;
 80037ae:	4b3a      	ldr	r3, [pc, #232]	; (8003898 <gpio_IT_config+0x338>)
 80037b0:	2203      	movs	r2, #3
 80037b2:	60da      	str	r2, [r3, #12]
			break;
 80037b4:	e032      	b.n	800381c <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PD;
 80037b6:	4b38      	ldr	r3, [pc, #224]	; (8003898 <gpio_IT_config+0x338>)
 80037b8:	2230      	movs	r2, #48	; 0x30
 80037ba:	60da      	str	r2, [r3, #12]
			break;
 80037bc:	e02e      	b.n	800381c <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PD;
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <gpio_IT_config+0x338>)
 80037c0:	22c0      	movs	r2, #192	; 0xc0
 80037c2:	0092      	lsls	r2, r2, #2
 80037c4:	60da      	str	r2, [r3, #12]
			break;
 80037c6:	e029      	b.n	800381c <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PD;
 80037c8:	4b33      	ldr	r3, [pc, #204]	; (8003898 <gpio_IT_config+0x338>)
 80037ca:	22c0      	movs	r2, #192	; 0xc0
 80037cc:	0192      	lsls	r2, r2, #6
 80037ce:	60da      	str	r2, [r3, #12]
			break;
 80037d0:	e024      	b.n	800381c <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PD;
 80037d2:	4b31      	ldr	r3, [pc, #196]	; (8003898 <gpio_IT_config+0x338>)
 80037d4:	2203      	movs	r2, #3
 80037d6:	611a      	str	r2, [r3, #16]
			break;
 80037d8:	e020      	b.n	800381c <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PD;
 80037da:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <gpio_IT_config+0x338>)
 80037dc:	2230      	movs	r2, #48	; 0x30
 80037de:	611a      	str	r2, [r3, #16]
			break;
 80037e0:	e01c      	b.n	800381c <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PD;
 80037e2:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <gpio_IT_config+0x338>)
 80037e4:	22c0      	movs	r2, #192	; 0xc0
 80037e6:	0092      	lsls	r2, r2, #2
 80037e8:	611a      	str	r2, [r3, #16]
			break;
 80037ea:	e017      	b.n	800381c <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PD;
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <gpio_IT_config+0x338>)
 80037ee:	22c0      	movs	r2, #192	; 0xc0
 80037f0:	0192      	lsls	r2, r2, #6
 80037f2:	611a      	str	r2, [r3, #16]
			break;
 80037f4:	e012      	b.n	800381c <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PD;
 80037f6:	4b28      	ldr	r3, [pc, #160]	; (8003898 <gpio_IT_config+0x338>)
 80037f8:	2203      	movs	r2, #3
 80037fa:	615a      	str	r2, [r3, #20]
			break;
 80037fc:	e00e      	b.n	800381c <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PD;
 80037fe:	4b26      	ldr	r3, [pc, #152]	; (8003898 <gpio_IT_config+0x338>)
 8003800:	2230      	movs	r2, #48	; 0x30
 8003802:	615a      	str	r2, [r3, #20]
			break;
 8003804:	e00a      	b.n	800381c <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PD;
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <gpio_IT_config+0x338>)
 8003808:	22c0      	movs	r2, #192	; 0xc0
 800380a:	0092      	lsls	r2, r2, #2
 800380c:	615a      	str	r2, [r3, #20]
			break;
 800380e:	e005      	b.n	800381c <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PD;
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <gpio_IT_config+0x338>)
 8003812:	22c0      	movs	r2, #192	; 0xc0
 8003814:	0192      	lsls	r2, r2, #6
 8003816:	615a      	str	r2, [r3, #20]
			break;
 8003818:	e000      	b.n	800381c <gpio_IT_config+0x2bc>
		}	// end of Port D
	}
 800381a:	46c0      	nop			; (mov r8, r8)

	if (edge == RISING_EDGE) {
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <gpio_IT_config+0x2da>
		EXTI->RTSR |= 1 << pinNumber;
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <gpio_IT_config+0x354>)
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	2101      	movs	r1, #1
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4099      	lsls	r1, r3
 800382e:	000b      	movs	r3, r1
 8003830:	0019      	movs	r1, r3
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <gpio_IT_config+0x354>)
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= 1 << pinNumber;
	} else if (edge == RISING_FALLING_EDGE) {
		EXTI->RTSR |= 1 << pinNumber;
		EXTI->FTSR |= 1 << pinNumber;
	}
}
 8003838:	e026      	b.n	8003888 <gpio_IT_config+0x328>
	} else if (edge == FALLING_EDGE) {
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10a      	bne.n	8003858 <gpio_IT_config+0x2f8>
		EXTI->FTSR |= 1 << pinNumber;
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <gpio_IT_config+0x354>)
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	2101      	movs	r1, #1
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4099      	lsls	r1, r3
 800384c:	000b      	movs	r3, r1
 800384e:	0019      	movs	r1, r3
 8003850:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <gpio_IT_config+0x354>)
 8003852:	430a      	orrs	r2, r1
 8003854:	60da      	str	r2, [r3, #12]
}
 8003856:	e017      	b.n	8003888 <gpio_IT_config+0x328>
	} else if (edge == RISING_FALLING_EDGE) {
 8003858:	1dfb      	adds	r3, r7, #7
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d113      	bne.n	8003888 <gpio_IT_config+0x328>
		EXTI->RTSR |= 1 << pinNumber;
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <gpio_IT_config+0x354>)
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	2101      	movs	r1, #1
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4099      	lsls	r1, r3
 800386a:	000b      	movs	r3, r1
 800386c:	0019      	movs	r1, r3
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <gpio_IT_config+0x354>)
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= 1 << pinNumber;
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <gpio_IT_config+0x354>)
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	2101      	movs	r1, #1
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4099      	lsls	r1, r3
 800387e:	000b      	movs	r3, r1
 8003880:	0019      	movs	r1, r3
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <gpio_IT_config+0x354>)
 8003884:	430a      	orrs	r2, r1
 8003886:	60da      	str	r2, [r3, #12]
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b004      	add	sp, #16
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	08008218 	.word	0x08008218
 8003898:	40010000 	.word	0x40010000
 800389c:	48000400 	.word	0x48000400
 80038a0:	08008258 	.word	0x08008258
 80038a4:	48000800 	.word	0x48000800
 80038a8:	08008298 	.word	0x08008298
 80038ac:	48000c00 	.word	0x48000c00
 80038b0:	080082d8 	.word	0x080082d8
 80038b4:	40010400 	.word	0x40010400

080038b8 <gpio_IT_EN>:

void gpio_IT_EN(uint8_t pinNumber, IRQn_Type irqNumber) {//Interrupt Enable Function
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	0002      	movs	r2, r0
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	1c0a      	adds	r2, r1, #0
 80038c8:	701a      	strb	r2, [r3, #0]
	EXTI->IMR |= 1 << pinNumber;	//enable interrupt in EXTI
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <gpio_IT_EN+0x3c>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	1dfb      	adds	r3, r7, #7
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2101      	movs	r1, #1
 80038d4:	4099      	lsls	r1, r3
 80038d6:	000b      	movs	r3, r1
 80038d8:	0019      	movs	r1, r3
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <gpio_IT_EN+0x3c>)
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(irqNumber);		//enable interrupt in NVIC
 80038e0:	1dbb      	adds	r3, r7, #6
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b25b      	sxtb	r3, r3
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7ff fcee 	bl	80032c8 <__NVIC_EnableIRQ>
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40010400 	.word	0x40010400

080038f8 <gpio_IT_CHK>:

void gpio_IT_SW(uint8_t pinNumber) {			//Interrupt Software generate
	EXTI->SWIER |= 1 << pinNumber;				//TODO: Not Done for now
}

uint8_t gpio_IT_CHK(uint8_t pinNumber) {			//Interrupt check function
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	0002      	movs	r2, r0
 8003900:	1dfb      	adds	r3, r7, #7
 8003902:	701a      	strb	r2, [r3, #0]
	if ((EXTI->PR) & (1 << pinNumber)) {				//Check pending register
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <gpio_IT_CHK+0x2c>)
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	1dfa      	adds	r2, r7, #7
 800390a:	7812      	ldrb	r2, [r2, #0]
 800390c:	2101      	movs	r1, #1
 800390e:	4091      	lsls	r1, r2
 8003910:	000a      	movs	r2, r1
 8003912:	4013      	ands	r3, r2
 8003914:	d001      	beq.n	800391a <gpio_IT_CHK+0x22>
		return 1;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <gpio_IT_CHK+0x24>
	} else {
		return 0;
 800391a:	2300      	movs	r3, #0
	}
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40010400 	.word	0x40010400

08003928 <gpio_IT_CLR>:

void gpio_IT_CLR(uint8_t pinNumber) {				//Interrupt clear function
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	0002      	movs	r2, r0
 8003930:	1dfb      	adds	r3, r7, #7
 8003932:	701a      	strb	r2, [r3, #0]
	EXTI->PR = 1 << pinNumber;		//clear pending register
 8003934:	1dfb      	adds	r3, r7, #7
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2201      	movs	r2, #1
 800393a:	409a      	lsls	r2, r3
 800393c:	4b02      	ldr	r3, [pc, #8]	; (8003948 <gpio_IT_CLR+0x20>)
 800393e:	615a      	str	r2, [r3, #20]
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40010400 	.word	0x40010400

0800394c <I2C_EN>:
 *  Created on: Oct 23, 2022
 *      Author: hp
 */
#include "i2c.h"

void I2C_EN(I2C_TypeDef *i2c) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_PE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2201      	movs	r2, #1
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	601a      	str	r2, [r3, #0]
}
 8003960:	46c0      	nop			; (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	b002      	add	sp, #8
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_DI>:

void I2C_DI(I2C_TypeDef *i2c) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	i2c->CR1 &= ~I2C_CR1_PE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2201      	movs	r2, #1
 8003976:	4393      	bics	r3, r2
 8003978:	001a      	movs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	601a      	str	r2, [r3, #0]
}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	b002      	add	sp, #8
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <I2C_INIT>:

void I2C_INIT(I2C_TypeDef *i2c, uint32_t timing) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	if (i2c == I2C1) {
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a11      	ldr	r2, [pc, #68]	; (80039dc <I2C_INIT+0x54>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d107      	bne.n	80039aa <I2C_INIT+0x22>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <I2C_INIT+0x58>)
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <I2C_INIT+0x58>)
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	0389      	lsls	r1, r1, #14
 80039a4:	430a      	orrs	r2, r1
 80039a6:	61da      	str	r2, [r3, #28]
 80039a8:	e00a      	b.n	80039c0 <I2C_INIT+0x38>
	} else if (i2c == I2C2) {
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a0d      	ldr	r2, [pc, #52]	; (80039e4 <I2C_INIT+0x5c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d106      	bne.n	80039c0 <I2C_INIT+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <I2C_INIT+0x58>)
 80039b4:	69da      	ldr	r2, [r3, #28]
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <I2C_INIT+0x58>)
 80039b8:	2180      	movs	r1, #128	; 0x80
 80039ba:	03c9      	lsls	r1, r1, #15
 80039bc:	430a      	orrs	r2, r1
 80039be:	61da      	str	r2, [r3, #28]
	}
	i2c->CR1 = 0; /* software reset I2C1 */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
	i2c->TIMINGR = timing; /* 100 KHz, peripheral clock is 8/48 MHz */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	611a      	str	r2, [r3, #16]
	I2C_EN(i2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7ff ffbc 	bl	800394c <I2C_EN>
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40005400 	.word	0x40005400
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40005800 	.word	0x40005800

080039e8 <I2C_CR2>:
	} else if (i2c == I2C2) {
		RCC->APB1ENR &= ~RCC_APB1ENR_I2C2EN;
	}
}

void I2C_CR2(I2C_TypeDef *i2c, uint32_t val) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
	i2c->CR2 = val;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	605a      	str	r2, [r3, #4]
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <I2C_DeviceReady>:

BML_StatusTypeDef I2C_DeviceReady(I2C_TypeDef *i2c, uint8_t saddr,
		uint16_t timeout) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	0008      	movs	r0, r1
 8003a0a:	0011      	movs	r1, r2
 8003a0c:	1cfb      	adds	r3, r7, #3
 8003a0e:	1c02      	adds	r2, r0, #0
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	003b      	movs	r3, r7
 8003a14:	1c0a      	adds	r2, r1, #0
 8003a16:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 8003a18:	230e      	movs	r3, #14
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	003a      	movs	r2, r7
 8003a1e:	8812      	ldrh	r2, [r2, #0]
 8003a20:	801a      	strh	r2, [r3, #0]
	uint8_t flag = 0;
 8003a22:	230d      	movs	r3, #13
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {/* wait until bus not busy */
 8003a2a:	e00b      	b.n	8003a44 <I2C_DeviceReady+0x44>
//		I2C_Delay(1);
		i--;
 8003a2c:	210e      	movs	r1, #14
 8003a2e:	187b      	adds	r3, r7, r1
 8003a30:	881a      	ldrh	r2, [r3, #0]
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	3a01      	subs	r2, #1
 8003a36:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <I2C_DeviceReady+0x44>
			return BML_BUSY;
 8003a40:	2302      	movs	r3, #2
 8003a42:	e035      	b.n	8003ab0 <I2C_DeviceReady+0xb0>
	while (i2c->ISR & I2C_ISR_BUSY) {/* wait until bus not busy */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d1ed      	bne.n	8003a2c <I2C_DeviceReady+0x2c>
		}
	}
	I2C_CR2(i2c, I2C_CR2_START | (saddr << 1));
 8003a50:	1cfb      	adds	r3, r7, #3
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	001a      	movs	r2, r3
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	019b      	lsls	r3, r3, #6
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0011      	movs	r1, r2
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7ff ffc0 	bl	80039e8 <I2C_CR2>

	I2C_Delay(1);
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f7fe fe49 	bl	8002700 <HAL_Delay>

	if (!(i2c->ISR & I2C_ISR_NACKF)) {
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2210      	movs	r2, #16
 8003a74:	4013      	ands	r3, r2
 8003a76:	d104      	bne.n	8003a82 <I2C_DeviceReady+0x82>
		flag = 1;
 8003a78:	230d      	movs	r3, #13
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e003      	b.n	8003a8a <I2C_DeviceReady+0x8a>
	} else {
		flag = 0;
 8003a82:	230d      	movs	r3, #13
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
	}

	i2c->CR2 = 0;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	605a      	str	r2, [r3, #4]
	I2C_DI(i2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	0018      	movs	r0, r3
 8003a94:	f7ff ff68 	bl	8003968 <I2C_DI>
	I2C_EN(i2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f7ff ff56 	bl	800394c <I2C_EN>
	if (flag == LOW) {
 8003aa0:	230d      	movs	r3, #13
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <I2C_DeviceReady+0xae>
		return BML_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <I2C_DeviceReady+0xb0>
	}
	return BML_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b004      	add	sp, #16
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_MasterByteWrite>:

BML_StatusTypeDef I2C_MasterByteWrite(I2C_TypeDef *i2c, uint8_t saddr,
		uint8_t maddr, uint8_t data, uint16_t timeout) {
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	000c      	movs	r4, r1
 8003ac2:	0010      	movs	r0, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	1cfb      	adds	r3, r7, #3
 8003ac8:	1c22      	adds	r2, r4, #0
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	1cbb      	adds	r3, r7, #2
 8003ace:	1c02      	adds	r2, r0, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	1c7b      	adds	r3, r7, #1
 8003ad4:	1c0a      	adds	r2, r1, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
	uint16_t i = timeout;
 8003ad8:	230e      	movs	r3, #14
 8003ada:	18fa      	adds	r2, r7, r3
 8003adc:	2320      	movs	r3, #32
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	8013      	strh	r3, [r2, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {
 8003ae4:	e00b      	b.n	8003afe <I2C_MasterByteWrite+0x46>
//		I2C_Delay(1);
		i--;
 8003ae6:	210e      	movs	r1, #14
 8003ae8:	187b      	adds	r3, r7, r1
 8003aea:	881a      	ldrh	r2, [r3, #0]
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	3a01      	subs	r2, #1
 8003af0:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <I2C_MasterByteWrite+0x46>
			return BML_BUSY;
 8003afa:	2302      	movs	r3, #2
 8003afc:	e06b      	b.n	8003bd6 <I2C_MasterByteWrite+0x11e>
	while (i2c->ISR & I2C_ISR_BUSY) {
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	4013      	ands	r3, r2
 8003b08:	d1ed      	bne.n	8003ae6 <I2C_MasterByteWrite+0x2e>
		}
	} /* wait until bus not busy */

	i = timeout;
 8003b0a:	230e      	movs	r3, #14
 8003b0c:	18fa      	adds	r2, r7, r3
 8003b0e:	2320      	movs	r3, #32
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	8013      	strh	r3, [r2, #0]

	I2C_CR2(i2c, I2C_CR2_START | I2C_CR2_AUTOEND | (2 << 16) | (saddr << 1));
 8003b16:	1cfb      	adds	r3, r7, #3
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	4b30      	ldr	r3, [pc, #192]	; (8003be0 <I2C_MasterByteWrite+0x128>)
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0011      	movs	r1, r2
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7ff ff5e 	bl	80039e8 <I2C_CR2>
	/* generate start, autoend, byte count 2 and send slave address */

	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003b2c:	e00b      	b.n	8003b46 <I2C_MasterByteWrite+0x8e>
//		I2C_Delay(1);
		i--;
 8003b2e:	210e      	movs	r1, #14
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	881a      	ldrh	r2, [r3, #0]
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	3a01      	subs	r2, #1
 8003b38:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <I2C_MasterByteWrite+0x8e>
			return BML_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e047      	b.n	8003bd6 <I2C_MasterByteWrite+0x11e>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d0ee      	beq.n	8003b2e <I2C_MasterByteWrite+0x76>
		}
	} /* wait until TXIS is set */
	i2c->TXDR = maddr; /* send register address */
 8003b50:	1cbb      	adds	r3, r7, #2
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28

	i = timeout;
 8003b58:	230e      	movs	r3, #14
 8003b5a:	18fa      	adds	r2, r7, r3
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	8013      	strh	r3, [r2, #0]

	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003b64:	e00b      	b.n	8003b7e <I2C_MasterByteWrite+0xc6>
//		I2C_Delay(1);
		i--;
 8003b66:	210e      	movs	r1, #14
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	881a      	ldrh	r2, [r3, #0]
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	3a01      	subs	r2, #1
 8003b70:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <I2C_MasterByteWrite+0xc6>
			return BML_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e02b      	b.n	8003bd6 <I2C_MasterByteWrite+0x11e>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2202      	movs	r2, #2
 8003b84:	4013      	ands	r3, r2
 8003b86:	d0ee      	beq.n	8003b66 <I2C_MasterByteWrite+0xae>
		}
	} /* wait until TXIS is set */
	i2c->TXDR = data; /* send data */
 8003b88:	1c7b      	adds	r3, r7, #1
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28

	i = timeout;
 8003b90:	230e      	movs	r3, #14
 8003b92:	18fa      	adds	r2, r7, r3
 8003b94:	2320      	movs	r3, #32
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	8013      	strh	r3, [r2, #0]

	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8003b9c:	e00b      	b.n	8003bb6 <I2C_MasterByteWrite+0xfe>
//		I2C_Delay(1);
		i--;
 8003b9e:	210e      	movs	r1, #14
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	3a01      	subs	r2, #1
 8003ba8:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <I2C_MasterByteWrite+0xfe>
			return BML_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e00f      	b.n	8003bd6 <I2C_MasterByteWrite+0x11e>
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d0ee      	beq.n	8003b9e <I2C_MasterByteWrite+0xe6>
		}
	}/* wait until stop flag is set */

	i2c->ICR = I2C_ICR_STOPCF; /* clear stop flag */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	61da      	str	r2, [r3, #28]
	I2C_CR2(i2c, I2C_CR2_AUTOEND);
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	049a      	lsls	r2, r3, #18
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0011      	movs	r1, r2
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7ff ff0a 	bl	80039e8 <I2C_CR2>

	return BML_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b005      	add	sp, #20
 8003bdc:	bd90      	pop	{r4, r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	02022000 	.word	0x02022000

08003be4 <I2C_MasterByteRead>:

BML_StatusTypeDef I2C_MasterByteRead(I2C_TypeDef *i2c, uint8_t saddr,
		uint8_t maddr, uint8_t *data, uint16_t timeout) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	0008      	movs	r0, r1
 8003bee:	0011      	movs	r1, r2
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	230b      	movs	r3, #11
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	1c02      	adds	r2, r0, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	230a      	movs	r3, #10
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	1c0a      	adds	r2, r1, #0
 8003c00:	701a      	strb	r2, [r3, #0]
	uint16_t i = timeout;
 8003c02:	2316      	movs	r3, #22
 8003c04:	18fa      	adds	r2, r7, r3
 8003c06:	2320      	movs	r3, #32
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	8013      	strh	r3, [r2, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {
 8003c0e:	e00b      	b.n	8003c28 <I2C_MasterByteRead+0x44>
//		I2C_Delay(1);
		i--;
 8003c10:	2116      	movs	r1, #22
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <I2C_MasterByteRead+0x44>
			return BML_BUSY;
 8003c24:	2302      	movs	r3, #2
 8003c26:	e093      	b.n	8003d50 <I2C_MasterByteRead+0x16c>
	while (i2c->ISR & I2C_ISR_BUSY) {
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	4013      	ands	r3, r2
 8003c32:	d1ed      	bne.n	8003c10 <I2C_MasterByteRead+0x2c>
		}
	} /* wait until bus not busy */

	i = timeout;
 8003c34:	2316      	movs	r3, #22
 8003c36:	18fa      	adds	r2, r7, r3
 8003c38:	2320      	movs	r3, #32
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	8013      	strh	r3, [r2, #0]

	I2C_CR2(i2c, I2C_CR2_START | (1 << 16) | (saddr << 1));
 8003c40:	230b      	movs	r3, #11
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	001a      	movs	r2, r3
 8003c4a:	2390      	movs	r3, #144	; 0x90
 8003c4c:	025b      	lsls	r3, r3, #9
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	0011      	movs	r1, r2
 8003c54:	0018      	movs	r0, r3
 8003c56:	f7ff fec7 	bl	80039e8 <I2C_CR2>
	/* generate start and send slave address */
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003c5a:	e00b      	b.n	8003c74 <I2C_MasterByteRead+0x90>
//		I2C_Delay(1);
		i--;
 8003c5c:	2116      	movs	r1, #22
 8003c5e:	187b      	adds	r3, r7, r1
 8003c60:	881a      	ldrh	r2, [r3, #0]
 8003c62:	187b      	adds	r3, r7, r1
 8003c64:	3a01      	subs	r2, #1
 8003c66:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <I2C_MasterByteRead+0x90>
			return BML_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e06d      	b.n	8003d50 <I2C_MasterByteRead+0x16c>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d0ee      	beq.n	8003c5c <I2C_MasterByteRead+0x78>
		}
	} /* wait until start flag is set */
	i = timeout;
 8003c7e:	2316      	movs	r3, #22
 8003c80:	18fa      	adds	r2, r7, r3
 8003c82:	2320      	movs	r3, #32
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	8013      	strh	r3, [r2, #0]

	i2c->TXDR = maddr; /* send memory address */
 8003c8a:	230a      	movs	r3, #10
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28

	while (!(i2c->ISR & I2C_ISR_TC)) {
 8003c94:	e00b      	b.n	8003cae <I2C_MasterByteRead+0xca>
//		I2C_Delay(1);
		i--;
 8003c96:	2116      	movs	r1, #22
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	3a01      	subs	r2, #1
 8003ca0:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <I2C_MasterByteRead+0xca>
			return BML_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e050      	b.n	8003d50 <I2C_MasterByteRead+0x16c>
	while (!(i2c->ISR & I2C_ISR_TC)) {
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2240      	movs	r2, #64	; 0x40
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d0ee      	beq.n	8003c96 <I2C_MasterByteRead+0xb2>
		}
	} /* wait until transfer complete */

	i = timeout;
 8003cb8:	2316      	movs	r3, #22
 8003cba:	18fa      	adds	r2, r7, r3
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	8013      	strh	r3, [r2, #0]

	/* generate restart, send slave address, read 1 byte, set for auto end */
	I2C_CR2(i2c,
			I2C_CR2_START | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND | (1 << 16)
					| (saddr << 1));
 8003cc4:	230b      	movs	r3, #11
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	001a      	movs	r2, r3
	I2C_CR2(i2c,
 8003cce:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <I2C_MasterByteRead+0x174>)
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	0011      	movs	r1, r2
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7ff fe86 	bl	80039e8 <I2C_CR2>

	while (!(i2c->ISR & I2C_ISR_RXNE)) {
 8003cdc:	e00b      	b.n	8003cf6 <I2C_MasterByteRead+0x112>
//		I2C_Delay(1);
		i--;
 8003cde:	2116      	movs	r1, #22
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	881a      	ldrh	r2, [r3, #0]
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	3a01      	subs	r2, #1
 8003ce8:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003cea:	187b      	adds	r3, r7, r1
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <I2C_MasterByteRead+0x112>
			return BML_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e02c      	b.n	8003d50 <I2C_MasterByteRead+0x16c>
	while (!(i2c->ISR & I2C_ISR_RXNE)) {
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d0ee      	beq.n	8003cde <I2C_MasterByteRead+0xfa>
		}
	} /* Wait until RXNE flag is set */
	*data = i2c->RXDR; /* Read data from DR */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	701a      	strb	r2, [r3, #0]

	i = timeout;
 8003d0a:	2316      	movs	r3, #22
 8003d0c:	18fa      	adds	r2, r7, r3
 8003d0e:	2320      	movs	r3, #32
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	8013      	strh	r3, [r2, #0]

	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8003d16:	e00b      	b.n	8003d30 <I2C_MasterByteRead+0x14c>
//		I2C_Delay(1);
		i--;
 8003d18:	2116      	movs	r1, #22
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	3a01      	subs	r2, #1
 8003d22:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003d24:	187b      	adds	r3, r7, r1
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <I2C_MasterByteRead+0x14c>
			return BML_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e00f      	b.n	8003d50 <I2C_MasterByteRead+0x16c>
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2220      	movs	r2, #32
 8003d36:	4013      	ands	r3, r2
 8003d38:	d0ee      	beq.n	8003d18 <I2C_MasterByteRead+0x134>
		}
	} /* wait until stop flag is set */

	i2c->ICR = I2C_ISR_STOPF; /* clear stop flag */
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	61da      	str	r2, [r3, #28]
	I2C_CR2(i2c, I2C_CR2_AUTOEND);
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	049a      	lsls	r2, r3, #18
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	0011      	movs	r1, r2
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7ff fe4d 	bl	80039e8 <I2C_CR2>

	return BML_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b006      	add	sp, #24
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	02012400 	.word	0x02012400

08003d5c <I2C_MasterMultiWrite>:

BML_StatusTypeDef I2C_MasterMultiWrite(I2C_TypeDef *i2c, uint8_t saddr,
		uint8_t maddr, uint32_t n, uint8_t *data, uint16_t timeout) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	0008      	movs	r0, r1
 8003d66:	0011      	movs	r1, r2
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	230b      	movs	r3, #11
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	1c02      	adds	r2, r0, #0
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	230a      	movs	r3, #10
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	1c0a      	adds	r2, r1, #0
 8003d78:	701a      	strb	r2, [r3, #0]
	int x;
	uint16_t i = timeout;
 8003d7a:	2312      	movs	r3, #18
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	2224      	movs	r2, #36	; 0x24
 8003d80:	18ba      	adds	r2, r7, r2
 8003d82:	8812      	ldrh	r2, [r2, #0]
 8003d84:	801a      	strh	r2, [r3, #0]

	while (i2c->ISR & I2C_ISR_BUSY) {
 8003d86:	e00b      	b.n	8003da0 <I2C_MasterMultiWrite+0x44>
//		I2C_Delay(1);
		i--;
 8003d88:	2112      	movs	r1, #18
 8003d8a:	187b      	adds	r3, r7, r1
 8003d8c:	881a      	ldrh	r2, [r3, #0]
 8003d8e:	187b      	adds	r3, r7, r1
 8003d90:	3a01      	subs	r2, #1
 8003d92:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <I2C_MasterMultiWrite+0x44>
			return BML_BUSY;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e07c      	b.n	8003e9a <I2C_MasterMultiWrite+0x13e>
	while (i2c->ISR & I2C_ISR_BUSY) {
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	699a      	ldr	r2, [r3, #24]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	4013      	ands	r3, r2
 8003daa:	d1ed      	bne.n	8003d88 <I2C_MasterMultiWrite+0x2c>
		}
	} /* wait until bus not busy */
	I2C_CR2(i2c,
	I2C_CR2_START | I2C_CR2_AUTOEND | ((n + 1) << 16) | (saddr << 1));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3301      	adds	r3, #1
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	220b      	movs	r2, #11
 8003db4:	18ba      	adds	r2, r7, r2
 8003db6:	7812      	ldrb	r2, [r2, #0]
 8003db8:	0052      	lsls	r2, r2, #1
 8003dba:	4313      	orrs	r3, r2
	I2C_CR2(i2c,
 8003dbc:	4a39      	ldr	r2, [pc, #228]	; (8003ea4 <I2C_MasterMultiWrite+0x148>)
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff fe0f 	bl	80039e8 <I2C_CR2>
	/* set byte count and send slave address */
	/* generate start, set auto end, */
	i = timeout;
 8003dca:	2312      	movs	r3, #18
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	2224      	movs	r2, #36	; 0x24
 8003dd0:	18ba      	adds	r2, r7, r2
 8003dd2:	8812      	ldrh	r2, [r2, #0]
 8003dd4:	801a      	strh	r2, [r3, #0]
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003dd6:	e00b      	b.n	8003df0 <I2C_MasterMultiWrite+0x94>
//		I2C_Delay(1);
		i--;
 8003dd8:	2112      	movs	r1, #18
 8003dda:	187b      	adds	r3, r7, r1
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	3a01      	subs	r2, #1
 8003de2:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <I2C_MasterMultiWrite+0x94>
			return BML_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e054      	b.n	8003e9a <I2C_MasterMultiWrite+0x13e>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2202      	movs	r2, #2
 8003df6:	4013      	ands	r3, r2
 8003df8:	d0ee      	beq.n	8003dd8 <I2C_MasterMultiWrite+0x7c>
		}
	} /* wait until TXIS is set */
	i2c->TXDR = maddr; /* send memory address */
 8003dfa:	230a      	movs	r3, #10
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28
	i = timeout;
 8003e04:	2312      	movs	r3, #18
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2224      	movs	r2, #36	; 0x24
 8003e0a:	18ba      	adds	r2, r7, r2
 8003e0c:	8812      	ldrh	r2, [r2, #0]
 8003e0e:	801a      	strh	r2, [r3, #0]
	for (x = 0; x < n; x++) /* send n bytes of data */
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	e01a      	b.n	8003e4c <I2C_MasterMultiWrite+0xf0>
	{
		while (!(i2c->ISR & I2C_ISR_TXIS)) {
//			I2C_Delay(1);
			i--;
 8003e16:	2112      	movs	r1, #18
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	3a01      	subs	r2, #1
 8003e20:	801a      	strh	r2, [r3, #0]
			if (i <= 0) {
 8003e22:	187b      	adds	r3, r7, r1
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <I2C_MasterMultiWrite+0xd2>
				return BML_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e035      	b.n	8003e9a <I2C_MasterMultiWrite+0x13e>
		while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2202      	movs	r2, #2
 8003e34:	4013      	ands	r3, r2
 8003e36:	d0ee      	beq.n	8003e16 <I2C_MasterMultiWrite+0xba>
			}
		} /* wait until TXIS is set */
		i2c->TXDR = *data++; /* send a byte of data */
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	623a      	str	r2, [r7, #32]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	001a      	movs	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28
	for (x = 0; x < n; x++) /* send n bytes of data */
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d8ec      	bhi.n	8003e2e <I2C_MasterMultiWrite+0xd2>
	}
	i = timeout;
 8003e54:	2312      	movs	r3, #18
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	2224      	movs	r2, #36	; 0x24
 8003e5a:	18ba      	adds	r2, r7, r2
 8003e5c:	8812      	ldrh	r2, [r2, #0]
 8003e5e:	801a      	strh	r2, [r3, #0]
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8003e60:	e00b      	b.n	8003e7a <I2C_MasterMultiWrite+0x11e>
//		I2C_Delay(1);
		i--;
 8003e62:	2112      	movs	r1, #18
 8003e64:	187b      	adds	r3, r7, r1
 8003e66:	881a      	ldrh	r2, [r3, #0]
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	3a01      	subs	r2, #1
 8003e6c:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <I2C_MasterMultiWrite+0x11e>
			return BML_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e00f      	b.n	8003e9a <I2C_MasterMultiWrite+0x13e>
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	4013      	ands	r3, r2
 8003e82:	d0ee      	beq.n	8003e62 <I2C_MasterMultiWrite+0x106>
		}
	} /* wait until stop flag is set */

	i2c->ICR = I2C_ISR_STOPF; /* clear stop flag */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	61da      	str	r2, [r3, #28]
	I2C_CR2(i2c, I2C_CR2_AUTOEND);
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	049a      	lsls	r2, r3, #18
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	0011      	movs	r1, r2
 8003e92:	0018      	movs	r0, r3
 8003e94:	f7ff fda8 	bl	80039e8 <I2C_CR2>

	return BML_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b006      	add	sp, #24
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	02002000 	.word	0x02002000

08003ea8 <I2C_MasterMultiRead>:

BML_StatusTypeDef I2C_MasterMultiRead(I2C_TypeDef *i2c, uint8_t saddr,
		uint8_t maddr, uint32_t n, uint8_t *data, uint16_t timeout) {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	0008      	movs	r0, r1
 8003eb2:	0011      	movs	r1, r2
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	230b      	movs	r3, #11
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	1c02      	adds	r2, r0, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	1c0a      	adds	r2, r1, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
	uint16_t i = timeout;
 8003ec6:	2316      	movs	r3, #22
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	18ba      	adds	r2, r7, r2
 8003ece:	8812      	ldrh	r2, [r2, #0]
 8003ed0:	801a      	strh	r2, [r3, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {
 8003ed2:	e00b      	b.n	8003eec <I2C_MasterMultiRead+0x44>
//		I2C_Delay(1);
		i--;
 8003ed4:	2116      	movs	r1, #22
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	187b      	adds	r3, r7, r1
 8003edc:	3a01      	subs	r2, #1
 8003ede:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <I2C_MasterMultiRead+0x44>
			return BML_BUSY;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e0a0      	b.n	800402e <I2C_MasterMultiRead+0x186>
	while (i2c->ISR & I2C_ISR_BUSY) {
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d1ed      	bne.n	8003ed4 <I2C_MasterMultiRead+0x2c>
		}
	} /* wait until bus not busy */
	i = timeout;
 8003ef8:	2316      	movs	r3, #22
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2224      	movs	r2, #36	; 0x24
 8003efe:	18ba      	adds	r2, r7, r2
 8003f00:	8812      	ldrh	r2, [r2, #0]
 8003f02:	801a      	strh	r2, [r3, #0]

	I2C_CR2(i2c, I2C_CR2_START | (1 << 16) | (saddr << 1));/* generate start and send slave address */
 8003f04:	230b      	movs	r3, #11
 8003f06:	18fb      	adds	r3, r7, r3
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	2390      	movs	r3, #144	; 0x90
 8003f10:	025b      	lsls	r3, r3, #9
 8003f12:	431a      	orrs	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	0011      	movs	r1, r2
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7ff fd65 	bl	80039e8 <I2C_CR2>

	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003f1e:	e00b      	b.n	8003f38 <I2C_MasterMultiRead+0x90>
//		I2C_Delay(1);
		i--;
 8003f20:	2116      	movs	r1, #22
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <I2C_MasterMultiRead+0x90>
			return BML_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e07a      	b.n	800402e <I2C_MasterMultiRead+0x186>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d0ee      	beq.n	8003f20 <I2C_MasterMultiRead+0x78>
		}
	}/* wait until transmitter is ready */

	i = timeout;
 8003f42:	2316      	movs	r3, #22
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	2224      	movs	r2, #36	; 0x24
 8003f48:	18ba      	adds	r2, r7, r2
 8003f4a:	8812      	ldrh	r2, [r2, #0]
 8003f4c:	801a      	strh	r2, [r3, #0]

	i2c->TXDR = maddr; /* send memory address */
 8003f4e:	230a      	movs	r3, #10
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(i2c->ISR & I2C_ISR_TC)) {
 8003f58:	e00b      	b.n	8003f72 <I2C_MasterMultiRead+0xca>
//		I2C_Delay(1);
		i--;
 8003f5a:	2116      	movs	r1, #22
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	3a01      	subs	r2, #1
 8003f64:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003f66:	187b      	adds	r3, r7, r1
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <I2C_MasterMultiRead+0xca>
			return BML_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e05d      	b.n	800402e <I2C_MasterMultiRead+0x186>
	while (!(i2c->ISR & I2C_ISR_TC)) {
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2240      	movs	r2, #64	; 0x40
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d0ee      	beq.n	8003f5a <I2C_MasterMultiRead+0xb2>

	/* generate restart, send slave address, repeat read n bytes, set for auto end */

	I2C_CR2(i2c,
			I2C_CR2_START | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND
					| ((n & 0xFF) << 16) | (saddr << 1));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	041a      	lsls	r2, r3, #16
 8003f80:	23ff      	movs	r3, #255	; 0xff
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	4013      	ands	r3, r2
 8003f86:	220b      	movs	r2, #11
 8003f88:	18ba      	adds	r2, r7, r2
 8003f8a:	7812      	ldrb	r2, [r2, #0]
 8003f8c:	0052      	lsls	r2, r2, #1
 8003f8e:	4313      	orrs	r3, r2
	I2C_CR2(i2c,
 8003f90:	4a29      	ldr	r2, [pc, #164]	; (8004038 <I2C_MasterMultiRead+0x190>)
 8003f92:	431a      	orrs	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	0011      	movs	r1, r2
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff fd25 	bl	80039e8 <I2C_CR2>

	for (; n > 0; n--) {
 8003f9e:	e020      	b.n	8003fe2 <I2C_MasterMultiRead+0x13a>
		while (!(i2c->ISR & I2C_ISR_RXNE)) {
//			I2C_Delay(1);
			i--;
 8003fa0:	2116      	movs	r1, #22
 8003fa2:	187b      	adds	r3, r7, r1
 8003fa4:	881a      	ldrh	r2, [r3, #0]
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	3a01      	subs	r2, #1
 8003faa:	801a      	strh	r2, [r3, #0]
			if (i <= 0) {
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <I2C_MasterMultiRead+0x110>
				return BML_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e03a      	b.n	800402e <I2C_MasterMultiRead+0x186>
		while (!(i2c->ISR & I2C_ISR_RXNE)) {
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d0ee      	beq.n	8003fa0 <I2C_MasterMultiRead+0xf8>
			}
		} /* Wait until RXNE flag is set */
		i = timeout;
 8003fc2:	2316      	movs	r3, #22
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	2224      	movs	r2, #36	; 0x24
 8003fc8:	18ba      	adds	r2, r7, r2
 8003fca:	8812      	ldrh	r2, [r2, #0]
 8003fcc:	801a      	strh	r2, [r3, #0]
		*data++ = i2c->RXDR; /* Read data from DR */
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	623a      	str	r2, [r7, #32]
 8003fd8:	b2ca      	uxtb	r2, r1
 8003fda:	701a      	strb	r2, [r3, #0]
	for (; n > 0; n--) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e7      	bne.n	8003fb8 <I2C_MasterMultiRead+0x110>
	}

	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8003fe8:	e00b      	b.n	8004002 <I2C_MasterMultiRead+0x15a>
//		I2C_Delay(1);
		i--;
 8003fea:	2116      	movs	r1, #22
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	881a      	ldrh	r2, [r3, #0]
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	3a01      	subs	r2, #1
 8003ff4:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003ff6:	187b      	adds	r3, r7, r1
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <I2C_MasterMultiRead+0x15a>
			return BML_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e015      	b.n	800402e <I2C_MasterMultiRead+0x186>
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2220      	movs	r2, #32
 8004008:	4013      	ands	r3, r2
 800400a:	d0ee      	beq.n	8003fea <I2C_MasterMultiRead+0x142>
		}
	} /* wait until stop flag is set */
	i = timeout;
 800400c:	2316      	movs	r3, #22
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	2224      	movs	r2, #36	; 0x24
 8004012:	18ba      	adds	r2, r7, r2
 8004014:	8812      	ldrh	r2, [r2, #0]
 8004016:	801a      	strh	r2, [r3, #0]
	i2c->ICR = I2C_ISR_STOPF; /* clear stop flag */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	61da      	str	r2, [r3, #28]
	I2C_CR2(i2c, I2C_CR2_AUTOEND);
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	049a      	lsls	r2, r3, #18
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f7ff fcde 	bl	80039e8 <I2C_CR2>

	return BML_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	0018      	movs	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	b006      	add	sp, #24
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	02002400 	.word	0x02002400

0800403c <RCC_CONFIG_48MHZ>:
 *      Author: hp
 */
#include "rcc.h"

//*****************************| RCC CLOCK FUNCTION |****************************//
BML_StatusTypeDef RCC_CONFIG_48MHZ() {
 800403c:	b590      	push	{r4, r7, lr}
 800403e:	b091      	sub	sp, #68	; 0x44
 8004040:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004042:	2410      	movs	r4, #16
 8004044:	193b      	adds	r3, r7, r4
 8004046:	0018      	movs	r0, r3
 8004048:	2330      	movs	r3, #48	; 0x30
 800404a:	001a      	movs	r2, r3
 800404c:	2100      	movs	r1, #0
 800404e:	f001 f869 	bl	8005124 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004052:	003b      	movs	r3, r7
 8004054:	0018      	movs	r0, r3
 8004056:	2310      	movs	r3, #16
 8004058:	001a      	movs	r2, r3
 800405a:	2100      	movs	r1, #0
 800405c:	f001 f862 	bl	8005124 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004060:	0021      	movs	r1, r4
 8004062:	187b      	adds	r3, r7, r1
 8004064:	2202      	movs	r2, #2
 8004066:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004068:	187b      	adds	r3, r7, r1
 800406a:	2201      	movs	r2, #1
 800406c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800406e:	187b      	adds	r3, r7, r1
 8004070:	2210      	movs	r2, #16
 8004072:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004074:	187b      	adds	r3, r7, r1
 8004076:	2202      	movs	r2, #2
 8004078:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800407a:	187b      	adds	r3, r7, r1
 800407c:	2280      	movs	r2, #128	; 0x80
 800407e:	0212      	lsls	r2, r2, #8
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004082:	187b      	adds	r3, r7, r1
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	0352      	lsls	r2, r2, #13
 8004088:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800408a:	187b      	adds	r3, r7, r1
 800408c:	2200      	movs	r2, #0
 800408e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != BML_OK) {
 8004090:	187b      	adds	r3, r7, r1
 8004092:	0018      	movs	r0, r3
 8004094:	f7fe fc0c 	bl	80028b0 <HAL_RCC_OscConfig>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d001      	beq.n	80040a0 <RCC_CONFIG_48MHZ+0x64>
		return BML_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e014      	b.n	80040ca <RCC_CONFIG_48MHZ+0x8e>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80040a0:	003b      	movs	r3, r7
 80040a2:	2207      	movs	r2, #7
 80040a4:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040a6:	003b      	movs	r3, r7
 80040a8:	2202      	movs	r2, #2
 80040aa:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040ac:	003b      	movs	r3, r7
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040b2:	003b      	movs	r3, r7
 80040b4:	2200      	movs	r2, #0
 80040b6:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80040b8:	003b      	movs	r3, r7
 80040ba:	2101      	movs	r1, #1
 80040bc:	0018      	movs	r0, r3
 80040be:	f7fe ff15 	bl	8002eec <HAL_RCC_ClockConfig>
 80040c2:	1e03      	subs	r3, r0, #0
 80040c4:	d001      	beq.n	80040ca <RCC_CONFIG_48MHZ+0x8e>
		return BML_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e7ff      	b.n	80040ca <RCC_CONFIG_48MHZ+0x8e>
	}
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b011      	add	sp, #68	; 0x44
 80040d0:	bd90      	pop	{r4, r7, pc}
	...

080040d4 <TIM6_IRQHandler>:
	return ticks;
}
void ticks_reset() {
	ticks = 0;
}
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
	ticks++;
 80040d8:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <TIM6_IRQHandler+0x24>)
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <TIM6_IRQHandler+0x24>)
 80040e2:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <TIM6_IRQHandler+0x28>)
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <TIM6_IRQHandler+0x28>)
 80040ea:	2101      	movs	r1, #1
 80040ec:	438a      	bics	r2, r1
 80040ee:	611a      	str	r2, [r3, #16]
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	20000364 	.word	0x20000364
 80040fc:	40001000 	.word	0x40001000

08004100 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b087      	sub	sp, #28
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	0018      	movs	r0, r3
 8004112:	f000 f819 	bl	8004148 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 8004116:	683c      	ldr	r4, [r7, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	0023      	movs	r3, r4
 8004124:	f000 f852 	bl	80041cc <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8004128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	0011      	movs	r1, r2
 800412e:	0018      	movs	r0, r3
 8004130:	f000 f960 	bl	80043f4 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	220d      	movs	r2, #13
 800413a:	431a      	orrs	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b005      	add	sp, #20
 8004146:	bd90      	pop	{r4, r7, pc}

08004148 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a19      	ldr	r2, [pc, #100]	; (80041b8 <USART_CLK_EN+0x70>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d107      	bne.n	8004168 <USART_CLK_EN+0x20>
		USART1_CLK_EN;
 8004158:	4b18      	ldr	r3, [pc, #96]	; (80041bc <USART_CLK_EN+0x74>)
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	4b17      	ldr	r3, [pc, #92]	; (80041bc <USART_CLK_EN+0x74>)
 800415e:	2180      	movs	r1, #128	; 0x80
 8004160:	01c9      	lsls	r1, r1, #7
 8004162:	430a      	orrs	r2, r1
 8004164:	61da      	str	r2, [r3, #28]
	} else if (usart == USART3) {
		USART3_CLK_EN;
	} else if (usart == USART4) {
		USART4_CLK_EN;
	}
}
 8004166:	e022      	b.n	80041ae <USART_CLK_EN+0x66>
	} else if (usart == USART2) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <USART_CLK_EN+0x78>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d107      	bne.n	8004180 <USART_CLK_EN+0x38>
		USART2_CLK_EN;
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <USART_CLK_EN+0x74>)
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <USART_CLK_EN+0x74>)
 8004176:	2180      	movs	r1, #128	; 0x80
 8004178:	0289      	lsls	r1, r1, #10
 800417a:	430a      	orrs	r2, r1
 800417c:	61da      	str	r2, [r3, #28]
}
 800417e:	e016      	b.n	80041ae <USART_CLK_EN+0x66>
	} else if (usart == USART3) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a10      	ldr	r2, [pc, #64]	; (80041c4 <USART_CLK_EN+0x7c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d107      	bne.n	8004198 <USART_CLK_EN+0x50>
		USART3_CLK_EN;
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <USART_CLK_EN+0x74>)
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <USART_CLK_EN+0x74>)
 800418e:	2180      	movs	r1, #128	; 0x80
 8004190:	02c9      	lsls	r1, r1, #11
 8004192:	430a      	orrs	r2, r1
 8004194:	61da      	str	r2, [r3, #28]
}
 8004196:	e00a      	b.n	80041ae <USART_CLK_EN+0x66>
	} else if (usart == USART4) {
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <USART_CLK_EN+0x80>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d106      	bne.n	80041ae <USART_CLK_EN+0x66>
		USART4_CLK_EN;
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <USART_CLK_EN+0x74>)
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <USART_CLK_EN+0x74>)
 80041a6:	2180      	movs	r1, #128	; 0x80
 80041a8:	0309      	lsls	r1, r1, #12
 80041aa:	430a      	orrs	r2, r1
 80041ac:	61da      	str	r2, [r3, #28]
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b002      	add	sp, #8
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	40013800 	.word	0x40013800
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40004400 	.word	0x40004400
 80041c4:	40004800 	.word	0x40004800
 80041c8:	40004c00 	.word	0x40004c00

080041cc <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80041da:	6839      	ldr	r1, [r7, #0]
 80041dc:	68b8      	ldr	r0, [r7, #8]
 80041de:	2300      	movs	r3, #0
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	2300      	movs	r3, #0
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2302      	movs	r3, #2
 80041e8:	2202      	movs	r2, #2
 80041ea:	f7ff f8cf 	bl	800338c <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80041ee:	69b9      	ldr	r1, [r7, #24]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	2300      	movs	r3, #0
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	2302      	movs	r3, #2
 80041fc:	2202      	movs	r2, #2
 80041fe:	f7ff f8c5 	bl	800338c <gpio_config>

	if (usart == USART1) {
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a75      	ldr	r2, [pc, #468]	; (80043dc <USART_PIN_CONFIG+0x210>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d13a      	bne.n	8004280 <USART_PIN_CONFIG+0xb4>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	2390      	movs	r3, #144	; 0x90
 800420e:	05db      	lsls	r3, r3, #23
 8004210:	429a      	cmp	r2, r3
 8004212:	d109      	bne.n	8004228 <USART_PIN_CONFIG+0x5c>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b09      	cmp	r3, #9
 8004218:	d106      	bne.n	8004228 <USART_PIN_CONFIG+0x5c>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 800421a:	6839      	ldr	r1, [r7, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2201      	movs	r2, #1
 8004220:	0018      	movs	r0, r3
 8004222:	f7ff f97a 	bl	800351a <gpio_altfn>
 8004226:	e00c      	b.n	8004242 <USART_PIN_CONFIG+0x76>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4a6d      	ldr	r2, [pc, #436]	; (80043e0 <USART_PIN_CONFIG+0x214>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d108      	bne.n	8004242 <USART_PIN_CONFIG+0x76>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b06      	cmp	r3, #6
 8004234:	d105      	bne.n	8004242 <USART_PIN_CONFIG+0x76>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
 8004236:	6839      	ldr	r1, [r7, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2200      	movs	r2, #0
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff f96c 	bl	800351a <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	2390      	movs	r3, #144	; 0x90
 8004246:	05db      	lsls	r3, r3, #23
 8004248:	429a      	cmp	r2, r3
 800424a:	d109      	bne.n	8004260 <USART_PIN_CONFIG+0x94>
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b0a      	cmp	r3, #10
 8004250:	d106      	bne.n	8004260 <USART_PIN_CONFIG+0x94>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 8004252:	69b9      	ldr	r1, [r7, #24]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	0018      	movs	r0, r3
 800425a:	f7ff f95e 	bl	800351a <gpio_altfn>
 800425e:	e0b8      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a5f      	ldr	r2, [pc, #380]	; (80043e0 <USART_PIN_CONFIG+0x214>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d000      	beq.n	800426a <USART_PIN_CONFIG+0x9e>
 8004268:	e0b3      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b07      	cmp	r3, #7
 800426e:	d000      	beq.n	8004272 <USART_PIN_CONFIG+0xa6>
 8004270:	e0af      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
 8004272:	69b9      	ldr	r1, [r7, #24]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff f94e 	bl	800351a <gpio_altfn>
		}
	} else if (usart == USART4) {
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
	}
}
 800427e:	e0a8      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
	} else if (usart == USART2) {
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <USART_PIN_CONFIG+0x218>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d13c      	bne.n	8004302 <USART_PIN_CONFIG+0x136>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	2390      	movs	r3, #144	; 0x90
 800428c:	05db      	lsls	r3, r3, #23
 800428e:	429a      	cmp	r2, r3
 8004290:	d109      	bne.n	80042a6 <USART_PIN_CONFIG+0xda>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d106      	bne.n	80042a6 <USART_PIN_CONFIG+0xda>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 8004298:	6839      	ldr	r1, [r7, #0]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2201      	movs	r2, #1
 800429e:	0018      	movs	r0, r3
 80042a0:	f7ff f93b 	bl	800351a <gpio_altfn>
 80042a4:	e00d      	b.n	80042c2 <USART_PIN_CONFIG+0xf6>
		} else if (tx_port == PORTA && tx_pinNumber == 14) {
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	2390      	movs	r3, #144	; 0x90
 80042aa:	05db      	lsls	r3, r3, #23
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d108      	bne.n	80042c2 <USART_PIN_CONFIG+0xf6>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b0e      	cmp	r3, #14
 80042b4:	d105      	bne.n	80042c2 <USART_PIN_CONFIG+0xf6>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA14);
 80042b6:	6839      	ldr	r1, [r7, #0]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2201      	movs	r2, #1
 80042bc:	0018      	movs	r0, r3
 80042be:	f7ff f92c 	bl	800351a <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	2390      	movs	r3, #144	; 0x90
 80042c6:	05db      	lsls	r3, r3, #23
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d109      	bne.n	80042e0 <USART_PIN_CONFIG+0x114>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d106      	bne.n	80042e0 <USART_PIN_CONFIG+0x114>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 80042d2:	69b9      	ldr	r1, [r7, #24]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	0018      	movs	r0, r3
 80042da:	f7ff f91e 	bl	800351a <gpio_altfn>
 80042de:	e078      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTA && rx_pinNumber == 15) {
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	2390      	movs	r3, #144	; 0x90
 80042e4:	05db      	lsls	r3, r3, #23
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d000      	beq.n	80042ec <USART_PIN_CONFIG+0x120>
 80042ea:	e072      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d000      	beq.n	80042f4 <USART_PIN_CONFIG+0x128>
 80042f2:	e06e      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA15);
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7ff f90d 	bl	800351a <gpio_altfn>
}
 8004300:	e067      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
	} else if (usart == USART3) {
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a38      	ldr	r2, [pc, #224]	; (80043e8 <USART_PIN_CONFIG+0x21c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d152      	bne.n	80043b0 <USART_PIN_CONFIG+0x1e4>
		if (tx_port == PORTC && tx_pinNumber == 4) {
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4a37      	ldr	r2, [pc, #220]	; (80043ec <USART_PIN_CONFIG+0x220>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d109      	bne.n	8004326 <USART_PIN_CONFIG+0x15a>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b04      	cmp	r3, #4
 8004316:	d106      	bne.n	8004326 <USART_PIN_CONFIG+0x15a>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC4);
 8004318:	6839      	ldr	r1, [r7, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2201      	movs	r2, #1
 800431e:	0018      	movs	r0, r3
 8004320:	f7ff f8fb 	bl	800351a <gpio_altfn>
 8004324:	e01a      	b.n	800435c <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTB && tx_pinNumber == 10) {
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4a2d      	ldr	r2, [pc, #180]	; (80043e0 <USART_PIN_CONFIG+0x214>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d109      	bne.n	8004342 <USART_PIN_CONFIG+0x176>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b0a      	cmp	r3, #10
 8004332:	d106      	bne.n	8004342 <USART_PIN_CONFIG+0x176>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PB10);
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2204      	movs	r2, #4
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff f8ed 	bl	800351a <gpio_altfn>
 8004340:	e00c      	b.n	800435c <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTC && tx_pinNumber == 10) {
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4a29      	ldr	r2, [pc, #164]	; (80043ec <USART_PIN_CONFIG+0x220>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <USART_PIN_CONFIG+0x190>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b0a      	cmp	r3, #10
 800434e:	d105      	bne.n	800435c <USART_PIN_CONFIG+0x190>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC10);
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2201      	movs	r2, #1
 8004356:	0018      	movs	r0, r3
 8004358:	f7ff f8df 	bl	800351a <gpio_altfn>
		if (rx_port == PORTC && rx_pinNumber == 5) {
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a23      	ldr	r2, [pc, #140]	; (80043ec <USART_PIN_CONFIG+0x220>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d109      	bne.n	8004378 <USART_PIN_CONFIG+0x1ac>
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b05      	cmp	r3, #5
 8004368:	d106      	bne.n	8004378 <USART_PIN_CONFIG+0x1ac>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC5);
 800436a:	69b9      	ldr	r1, [r7, #24]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	0018      	movs	r0, r3
 8004372:	f7ff f8d2 	bl	800351a <gpio_altfn>
 8004376:	e02c      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTC && rx_pinNumber == 11) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <USART_PIN_CONFIG+0x220>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d109      	bne.n	8004394 <USART_PIN_CONFIG+0x1c8>
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b0b      	cmp	r3, #11
 8004384:	d106      	bne.n	8004394 <USART_PIN_CONFIG+0x1c8>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
 8004386:	69b9      	ldr	r1, [r7, #24]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	0018      	movs	r0, r3
 800438e:	f7ff f8c4 	bl	800351a <gpio_altfn>
 8004392:	e01e      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <USART_PIN_CONFIG+0x214>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d11a      	bne.n	80043d2 <USART_PIN_CONFIG+0x206>
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b0b      	cmp	r3, #11
 80043a0:	d117      	bne.n	80043d2 <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
 80043a2:	69b9      	ldr	r1, [r7, #24]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2204      	movs	r2, #4
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7ff f8b6 	bl	800351a <gpio_altfn>
}
 80043ae:	e010      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
	} else if (usart == USART4) {
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a0f      	ldr	r2, [pc, #60]	; (80043f0 <USART_PIN_CONFIG+0x224>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d10c      	bne.n	80043d2 <USART_PIN_CONFIG+0x206>
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
 80043b8:	6839      	ldr	r1, [r7, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2204      	movs	r2, #4
 80043be:	0018      	movs	r0, r3
 80043c0:	f7ff f8ab 	bl	800351a <gpio_altfn>
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
 80043c4:	69b9      	ldr	r1, [r7, #24]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2204      	movs	r2, #4
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7ff f8a5 	bl	800351a <gpio_altfn>
}
 80043d0:	e7ff      	b.n	80043d2 <USART_PIN_CONFIG+0x206>
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b004      	add	sp, #16
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	40013800 	.word	0x40013800
 80043e0:	48000400 	.word	0x48000400
 80043e4:	40004400 	.word	0x40004400
 80043e8:	40004800 	.word	0x40004800
 80043ec:	48000800 	.word	0x48000800
 80043f0:	40004c00 	.word	0x40004c00

080043f4 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <USART_BDR_SEL+0x30>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6839      	ldr	r1, [r7, #0]
 8004404:	0018      	movs	r0, r3
 8004406:	f7fb fe9b 	bl	8000140 <__udivsi3>
 800440a:	0003      	movs	r3, r0
 800440c:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60da      	str	r2, [r3, #12]
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	46bd      	mov	sp, r7
 800441e:	b004      	add	sp, #16
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20000000 	.word	0x20000000

08004428 <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	001a      	movs	r2, r3
 8004436:	1cbb      	adds	r3, r7, #2
 8004438:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 800443a:	2314      	movs	r3, #20
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	1cba      	adds	r2, r7, #2
 8004440:	8812      	ldrh	r2, [r2, #0]
 8004442:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8004444:	2317      	movs	r3, #23
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	e01c      	b.n	8004488 <USART_WRITE+0x60>
		if (len == 1) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d104      	bne.n	800445e <USART_WRITE+0x36>
			usart->TDR = ch;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	; 0x28
 800445c:	e008      	b.n	8004470 <USART_WRITE+0x48>
		} else {
			usart->TDR = ch[i];
 800445e:	2317      	movs	r3, #23
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	18d3      	adds	r3, r2, r3
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		while (!(usart->ISR & USART_ISR_TXE)){
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	2280      	movs	r2, #128	; 0x80
 8004478:	4013      	ands	r3, r2
 800447a:	d0fa      	beq.n	8004472 <USART_WRITE+0x4a>
	for (uint8_t i = 0; i < len; i++) {
 800447c:	2117      	movs	r1, #23
 800447e:	187b      	adds	r3, r7, r1
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	187b      	adds	r3, r7, r1
 8004484:	3201      	adds	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	2317      	movs	r3, #23
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	429a      	cmp	r2, r3
 8004492:	d8dc      	bhi.n	800444e <USART_WRITE+0x26>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b006      	add	sp, #24
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 80044a0:	b40f      	push	{r0, r1, r2, r3}
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80044a8:	2314      	movs	r3, #20
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	0049      	lsls	r1, r1, #1
 80044b6:	480c      	ldr	r0, [pc, #48]	; (80044e8 <print+0x48>)
 80044b8:	f001 fad6 	bl	8005a68 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <print+0x48>)
 80044be:	0018      	movs	r0, r3
 80044c0:	f7fb fe22 	bl	8000108 <strlen>
 80044c4:	0002      	movs	r2, r0
 80044c6:	1dbb      	adds	r3, r7, #6
 80044c8:	801a      	strh	r2, [r3, #0]
	USART_WRITE(UART_TYPE, buffer, len, 1000);
 80044ca:	1dbb      	adds	r3, r7, #6
 80044cc:	881a      	ldrh	r2, [r3, #0]
 80044ce:	23fa      	movs	r3, #250	; 0xfa
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4905      	ldr	r1, [pc, #20]	; (80044e8 <print+0x48>)
 80044d4:	4805      	ldr	r0, [pc, #20]	; (80044ec <print+0x4c>)
 80044d6:	f7ff ffa7 	bl	8004428 <USART_WRITE>

}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	46bd      	mov	sp, r7
 80044de:	b002      	add	sp, #8
 80044e0:	bc80      	pop	{r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	b004      	add	sp, #16
 80044e6:	4718      	bx	r3
 80044e8:	20000368 	.word	0x20000368
 80044ec:	40004400 	.word	0x40004400

080044f0 <uart_print_config>:
	USART_WRITE(UART_TYPE, buffer, len, 100);
	USART_WRITE(UART_TYPE, '\n', 1, 100);

}

void uart_print_config(uint32_t baudRate) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 80044f8:	2390      	movs	r3, #144	; 0x90
 80044fa:	05da      	lsls	r2, r3, #23
 80044fc:	2390      	movs	r3, #144	; 0x90
 80044fe:	05d9      	lsls	r1, r3, #23
 8004500:	4805      	ldr	r0, [pc, #20]	; (8004518 <uart_print_config+0x28>)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	2303      	movs	r3, #3
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	2302      	movs	r3, #2
 800450c:	f7ff fdf8 	bl	8004100 <USART_INIT>
}
 8004510:	46c0      	nop			; (mov r8, r8)
 8004512:	46bd      	mov	sp, r7
 8004514:	b002      	add	sp, #8
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40004400 	.word	0x40004400

0800451c <max30102_plot>:
 * @brief Built-in plotting function. Called during an interrupt to print/plot the current sample.
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
void max30102_plot(uint32_t ir_sample, uint32_t red_sample) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]

//	print("%d, %d\n\r", ir_sample, red_sample);
//	print("%d \n\r", ir_sample);
//	print("%d \n\r", red_sample);
	ir_arr[ir_arrPutPtr] = ir_sample;
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <max30102_plot+0x68>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	001a      	movs	r2, r3
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <max30102_plot+0x6c>)
 800452e:	0092      	lsls	r2, r2, #2
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	50d1      	str	r1, [r2, r3]
	red_arr[red_arrPutPtr] = red_sample;
 8004534:	4b15      	ldr	r3, [pc, #84]	; (800458c <max30102_plot+0x70>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	001a      	movs	r2, r3
 800453a:	4b15      	ldr	r3, [pc, #84]	; (8004590 <max30102_plot+0x74>)
 800453c:	0092      	lsls	r2, r2, #2
 800453e:	6839      	ldr	r1, [r7, #0]
 8004540:	50d1      	str	r1, [r2, r3]
	ir_arrPutPtr = (ir_arrPutPtr + 1) % arrLen;
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <max30102_plot+0x68>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	4a12      	ldr	r2, [pc, #72]	; (8004594 <max30102_plot+0x78>)
 800454a:	4013      	ands	r3, r2
 800454c:	d504      	bpl.n	8004558 <max30102_plot+0x3c>
 800454e:	3b01      	subs	r3, #1
 8004550:	2220      	movs	r2, #32
 8004552:	4252      	negs	r2, r2
 8004554:	4313      	orrs	r3, r2
 8004556:	3301      	adds	r3, #1
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <max30102_plot+0x68>)
 800455c:	701a      	strb	r2, [r3, #0]
	red_arrPutPtr = (red_arrPutPtr + 1) % arrLen;
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <max30102_plot+0x70>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <max30102_plot+0x78>)
 8004566:	4013      	ands	r3, r2
 8004568:	d504      	bpl.n	8004574 <max30102_plot+0x58>
 800456a:	3b01      	subs	r3, #1
 800456c:	2220      	movs	r2, #32
 800456e:	4252      	negs	r2, r2
 8004570:	4313      	orrs	r3, r2
 8004572:	3301      	adds	r3, #1
 8004574:	b2da      	uxtb	r2, r3
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <max30102_plot+0x70>)
 8004578:	701a      	strb	r2, [r3, #0]
}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	46bd      	mov	sp, r7
 800457e:	b002      	add	sp, #8
 8004580:	bd80      	pop	{r7, pc}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	2000056c 	.word	0x2000056c
 8004588:	2000046c 	.word	0x2000046c
 800458c:	2000056d 	.word	0x2000056d
 8004590:	200004ec 	.word	0x200004ec
 8004594:	8000001f 	.word	0x8000001f

08004598 <max30102_getIR>:

uint32_t max30102_getIR(){
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
	uint32_t irVal = ir_arr[ir_arrGetPtr];
 800459e:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <max30102_getIR+0x3c>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	001a      	movs	r2, r3
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <max30102_getIR+0x40>)
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	58d3      	ldr	r3, [r2, r3]
 80045aa:	607b      	str	r3, [r7, #4]
	ir_arrGetPtr = (ir_arrGetPtr + 1) % arrLen;
 80045ac:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <max30102_getIR+0x3c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <max30102_getIR+0x44>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	d504      	bpl.n	80045c2 <max30102_getIR+0x2a>
 80045b8:	3b01      	subs	r3, #1
 80045ba:	2220      	movs	r2, #32
 80045bc:	4252      	negs	r2, r2
 80045be:	4313      	orrs	r3, r2
 80045c0:	3301      	adds	r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <max30102_getIR+0x3c>)
 80045c6:	701a      	strb	r2, [r3, #0]

	return irVal;
 80045c8:	687b      	ldr	r3, [r7, #4]
}
 80045ca:	0018      	movs	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b002      	add	sp, #8
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	2000056e 	.word	0x2000056e
 80045d8:	2000046c 	.word	0x2000046c
 80045dc:	8000001f 	.word	0x8000001f

080045e0 <max30102_init>:
 * @brief MAX30102 initiation function.
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
bool max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
	obj->_ui2c = hi2c;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	601a      	str	r2, [r3, #0]
	obj->_interrupt_flag = 0;
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	2382      	movs	r3, #130	; 0x82
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	2100      	movs	r1, #0
 80045f8:	54d1      	strb	r1, [r2, r3]
	memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	2100      	movs	r1, #0
 8004602:	0018      	movs	r0, r3
 8004604:	f000 fd8e 	bl	8005124 <memset>
	memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3384      	adds	r3, #132	; 0x84
 800460c:	2280      	movs	r2, #128	; 0x80
 800460e:	2100      	movs	r1, #0
 8004610:	0018      	movs	r0, r3
 8004612:	f000 fd87 	bl	8005124 <memset>

	I2C_INIT(obj->_ui2c, FAST_MODE_400KHZ);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a0d      	ldr	r2, [pc, #52]	; (8004650 <max30102_init+0x70>)
 800461c:	0011      	movs	r1, r2
 800461e:	0018      	movs	r0, r3
 8004620:	f7ff f9b2 	bl	8003988 <I2C_INIT>
	max30102_ret = I2C_DeviceReady(obj->_ui2c, MAX30102_I2C_ADDR, 10);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	220a      	movs	r2, #10
 800462a:	2157      	movs	r1, #87	; 0x57
 800462c:	0018      	movs	r0, r3
 800462e:	f7ff f9e7 	bl	8003a00 <I2C_DeviceReady>
 8004632:	0003      	movs	r3, r0
 8004634:	001a      	movs	r2, r3
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <max30102_init+0x74>)
 8004638:	701a      	strb	r2, [r3, #0]
	if (max30102_ret != BML_OK) {
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <max30102_init+0x74>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <max30102_init+0x66>
		return false;
 8004642:	2300      	movs	r3, #0
 8004644:	e000      	b.n	8004648 <max30102_init+0x68>
	} else {
		return true;
 8004646:	2301      	movs	r3, #1
	}
}
 8004648:	0018      	movs	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	b002      	add	sp, #8
 800464e:	bd80      	pop	{r7, pc}
 8004650:	0000020b 	.word	0x0000020b
 8004654:	20000468 	.word	0x20000468

08004658 <max30102_writeByte>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */

bool max30102_writeByte(max30102_t *obj, uint8_t maddr, uint8_t data) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af02      	add	r7, sp, #8
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	0008      	movs	r0, r1
 8004662:	0011      	movs	r1, r2
 8004664:	1cfb      	adds	r3, r7, #3
 8004666:	1c02      	adds	r2, r0, #0
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	1cbb      	adds	r3, r7, #2
 800466c:	1c0a      	adds	r2, r1, #0
 800466e:	701a      	strb	r2, [r3, #0]
	max30102_ret = I2C_MasterByteWrite(obj->_ui2c, MAX30102_I2C_ADDR, maddr,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	1cbb      	adds	r3, r7, #2
 8004676:	7819      	ldrb	r1, [r3, #0]
 8004678:	1cfb      	adds	r3, r7, #3
 800467a:	781a      	ldrb	r2, [r3, #0]
 800467c:	2364      	movs	r3, #100	; 0x64
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	000b      	movs	r3, r1
 8004682:	2157      	movs	r1, #87	; 0x57
 8004684:	f7ff fa18 	bl	8003ab8 <I2C_MasterByteWrite>
 8004688:	0003      	movs	r3, r0
 800468a:	001a      	movs	r2, r3
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <max30102_writeByte+0x50>)
 800468e:	701a      	strb	r2, [r3, #0]
			data, 100);

	if (max30102_ret == BML_OK)
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <max30102_writeByte+0x50>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <max30102_writeByte+0x44>
		return true;
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <max30102_writeByte+0x46>
	else
		return false;
 800469c:	2300      	movs	r3, #0
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b002      	add	sp, #8
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	20000468 	.word	0x20000468

080046ac <max30102_writeMulti>:

bool max30102_writeMulti(max30102_t *obj, uint8_t maddr, uint8_t *data,
		uint32_t n) {
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	240b      	movs	r4, #11
 80046ba:	193b      	adds	r3, r7, r4
 80046bc:	1c0a      	adds	r2, r1, #0
 80046be:	701a      	strb	r2, [r3, #0]
	max30102_ret = I2C_MasterMultiWrite(obj->_ui2c, MAX30102_I2C_ADDR, maddr, n,
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	6839      	ldr	r1, [r7, #0]
 80046c6:	193b      	adds	r3, r7, r4
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	2364      	movs	r3, #100	; 0x64
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	000b      	movs	r3, r1
 80046d4:	2157      	movs	r1, #87	; 0x57
 80046d6:	f7ff fb41 	bl	8003d5c <I2C_MasterMultiWrite>
 80046da:	0003      	movs	r3, r0
 80046dc:	001a      	movs	r2, r3
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <max30102_writeMulti+0x4c>)
 80046e0:	701a      	strb	r2, [r3, #0]
			data, 100);

	if (max30102_ret == BML_OK)
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <max30102_writeMulti+0x4c>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <max30102_writeMulti+0x42>
		return true;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <max30102_writeMulti+0x44>
	else
		return false;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b005      	add	sp, #20
 80046f6:	bd90      	pop	{r4, r7, pc}
 80046f8:	20000468 	.word	0x20000468

080046fc <max30102_readByte>:
 * @param obj Pointer to max30102_t object instance.
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
bool max30102_readByte(max30102_t *obj, uint8_t maddr, uint8_t *data) {
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b087      	sub	sp, #28
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	240b      	movs	r4, #11
 8004708:	193b      	adds	r3, r7, r4
 800470a:	1c0a      	adds	r2, r1, #0
 800470c:	701a      	strb	r2, [r3, #0]
//	HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1,
//	MAX30102_I2C_TIMEOUT);
//	HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen,
//	MAX30102_I2C_TIMEOUT);

	max30102_ret = I2C_MasterByteRead(obj->_ui2c, MAX30102_I2C_ADDR, maddr,
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	193b      	adds	r3, r7, r4
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	2364      	movs	r3, #100	; 0x64
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	000b      	movs	r3, r1
 800471e:	2157      	movs	r1, #87	; 0x57
 8004720:	f7ff fa60 	bl	8003be4 <I2C_MasterByteRead>
 8004724:	0003      	movs	r3, r0
 8004726:	001a      	movs	r2, r3
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <max30102_readByte+0x48>)
 800472a:	701a      	strb	r2, [r3, #0]
			data, 100);

	if (max30102_ret == BML_OK)
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <max30102_readByte+0x48>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <max30102_readByte+0x3c>
		return true;
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <max30102_readByte+0x3e>
	else
		return false;
 8004738:	2300      	movs	r3, #0
}
 800473a:	0018      	movs	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	b005      	add	sp, #20
 8004740:	bd90      	pop	{r4, r7, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	20000468 	.word	0x20000468

08004748 <max30102_readMulti>:

bool max30102_readMulti(max30102_t *obj, uint8_t maddr, uint8_t *data,
		uint16_t n) {
 8004748:	b5b0      	push	{r4, r5, r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	0008      	movs	r0, r1
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	0019      	movs	r1, r3
 8004756:	240b      	movs	r4, #11
 8004758:	193b      	adds	r3, r7, r4
 800475a:	1c02      	adds	r2, r0, #0
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	2508      	movs	r5, #8
 8004760:	197b      	adds	r3, r7, r5
 8004762:	1c0a      	adds	r2, r1, #0
 8004764:	801a      	strh	r2, [r3, #0]

	max30102_ret = I2C_MasterMultiRead(obj->_ui2c, MAX30102_I2C_ADDR, maddr, n,
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	197b      	adds	r3, r7, r5
 800476c:	8819      	ldrh	r1, [r3, #0]
 800476e:	193b      	adds	r3, r7, r4
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	2364      	movs	r3, #100	; 0x64
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	000b      	movs	r3, r1
 800477c:	2157      	movs	r1, #87	; 0x57
 800477e:	f7ff fb93 	bl	8003ea8 <I2C_MasterMultiRead>
 8004782:	0003      	movs	r3, r0
 8004784:	001a      	movs	r2, r3
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <max30102_readMulti+0x58>)
 8004788:	701a      	strb	r2, [r3, #0]
			data, 100);

	if (max30102_ret == BML_OK)
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <max30102_readMulti+0x58>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <max30102_readMulti+0x4e>
		return true;
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <max30102_readMulti+0x50>
	else
		return false;
 8004796:	2300      	movs	r3, #0
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b004      	add	sp, #16
 800479e:	bdb0      	pop	{r4, r5, r7, pc}
 80047a0:	20000468 	.word	0x20000468

080047a4 <max30102_reset>:
/**
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
bool max30102_reset(max30102_t *obj) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	uint8_t val = 0x40;
 80047ac:	210f      	movs	r1, #15
 80047ae:	187b      	adds	r3, r7, r1
 80047b0:	2240      	movs	r2, #64	; 0x40
 80047b2:	701a      	strb	r2, [r3, #0]
	return max30102_writeByte(obj, MAX30102_MODE_CONFIG, val);
 80047b4:	187b      	adds	r3, r7, r1
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2109      	movs	r1, #9
 80047bc:	0018      	movs	r0, r3
 80047be:	f7ff ff4b 	bl	8004658 <max30102_writeByte>
 80047c2:	0003      	movs	r3, r0
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b004      	add	sp, #16
 80047ca:	bd80      	pop	{r7, pc}

080047cc <max30102_set_a_full>:
 * @brief Enable A_FULL interrupt.
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
bool max30102_set_a_full(max30102_t *obj, uint8_t enable) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	000a      	movs	r2, r1
 80047d6:	1cfb      	adds	r3, r7, #3
 80047d8:	701a      	strb	r2, [r3, #0]
	uint8_t reg = 0;
 80047da:	210f      	movs	r1, #15
 80047dc:	187b      	adds	r3, r7, r1
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
	if (max30102_readByte(obj, MAX30102_INTERRUPT_ENABLE_1, &reg) != true) {
 80047e2:	187a      	adds	r2, r7, r1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2102      	movs	r1, #2
 80047e8:	0018      	movs	r0, r3
 80047ea:	f7ff ff87 	bl	80046fc <max30102_readByte>
 80047ee:	0003      	movs	r3, r0
 80047f0:	001a      	movs	r2, r3
 80047f2:	2301      	movs	r3, #1
 80047f4:	4053      	eors	r3, r2
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <max30102_set_a_full+0x34>
		return false;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e024      	b.n	800484a <max30102_set_a_full+0x7e>
	}
	reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8004800:	210f      	movs	r1, #15
 8004802:	187b      	adds	r3, r7, r1
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	227f      	movs	r2, #127	; 0x7f
 8004808:	4013      	ands	r3, r2
 800480a:	b2da      	uxtb	r2, r3
 800480c:	187b      	adds	r3, r7, r1
 800480e:	701a      	strb	r2, [r3, #0]
	reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8004810:	1cfb      	adds	r3, r7, #3
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	01db      	lsls	r3, r3, #7
 8004816:	b25a      	sxtb	r2, r3
 8004818:	187b      	adds	r3, r7, r1
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b25b      	sxtb	r3, r3
 800481e:	4313      	orrs	r3, r2
 8004820:	b25b      	sxtb	r3, r3
 8004822:	b2da      	uxtb	r2, r3
 8004824:	187b      	adds	r3, r7, r1
 8004826:	701a      	strb	r2, [r3, #0]
	if (max30102_writeByte(obj, MAX30102_INTERRUPT_ENABLE_1, reg) != true) {
 8004828:	187b      	adds	r3, r7, r1
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2102      	movs	r1, #2
 8004830:	0018      	movs	r0, r3
 8004832:	f7ff ff11 	bl	8004658 <max30102_writeByte>
 8004836:	0003      	movs	r3, r0
 8004838:	001a      	movs	r2, r3
 800483a:	2301      	movs	r3, #1
 800483c:	4053      	eors	r3, r2
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <max30102_set_a_full+0x7c>
		return false;
 8004844:	2300      	movs	r3, #0
 8004846:	e000      	b.n	800484a <max30102_set_a_full+0x7e>
	}
	return true;
 8004848:	2301      	movs	r3, #1
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b004      	add	sp, #16
 8004850:	bd80      	pop	{r7, pc}

08004852 <max30102_set_die_temp_rdy>:
 * @brief Enable DIE_TEMP_RDY interrupt.
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
bool max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable) {
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	000a      	movs	r2, r1
 800485c:	1cfb      	adds	r3, r7, #3
 800485e:	701a      	strb	r2, [r3, #0]
	uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8004860:	1cfb      	adds	r3, r7, #3
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	b2da      	uxtb	r2, r3
 8004868:	200f      	movs	r0, #15
 800486a:	183b      	adds	r3, r7, r0
 800486c:	2102      	movs	r1, #2
 800486e:	400a      	ands	r2, r1
 8004870:	701a      	strb	r2, [r3, #0]
	return max30102_writeByte(obj, MAX30102_INTERRUPT_ENABLE_2, reg);
 8004872:	183b      	adds	r3, r7, r0
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2103      	movs	r1, #3
 800487a:	0018      	movs	r0, r3
 800487c:	f7ff feec 	bl	8004658 <max30102_writeByte>
 8004880:	0003      	movs	r3, r0
}
 8004882:	0018      	movs	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	b004      	add	sp, #16
 8004888:	bd80      	pop	{r7, pc}

0800488a <max30102_set_die_temp_en>:
 * @brief Enable temperature measurement.
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
bool max30102_set_die_temp_en(max30102_t *obj, uint8_t enable) {
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	000a      	movs	r2, r1
 8004894:	1cfb      	adds	r3, r7, #3
 8004896:	701a      	strb	r2, [r3, #0]
	uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8004898:	1cfb      	adds	r3, r7, #3
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	200f      	movs	r0, #15
 80048a2:	183b      	adds	r3, r7, r0
 80048a4:	2102      	movs	r1, #2
 80048a6:	400a      	ands	r2, r1
 80048a8:	701a      	strb	r2, [r3, #0]
	return max30102_writeByte(obj, MAX30102_DIE_TEMP_CONFIG, reg);
 80048aa:	183b      	adds	r3, r7, r0
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2121      	movs	r1, #33	; 0x21
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7ff fed0 	bl	8004658 <max30102_writeByte>
 80048b8:	0003      	movs	r3, r0
}
 80048ba:	0018      	movs	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	b004      	add	sp, #16
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <max30102_on_interrupt>:
/**
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj) {
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
	obj->_interrupt_flag = 1;
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	2382      	movs	r3, #130	; 0x82
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	2101      	movs	r1, #1
 80048d2:	54d1      	strb	r1, [r2, r3]
}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}

080048dc <max30102_set_mode>:
 * @brief Set measurement mode.
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
bool max30102_set_mode(max30102_t *obj, max30102_mode_t mode) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	000a      	movs	r2, r1
 80048e6:	1cfb      	adds	r3, r7, #3
 80048e8:	701a      	strb	r2, [r3, #0]
	uint8_t config;
	if (max30102_readByte(obj, MAX30102_MODE_CONFIG, &config) != true) {
 80048ea:	230f      	movs	r3, #15
 80048ec:	18fa      	adds	r2, r7, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2109      	movs	r1, #9
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7ff ff02 	bl	80046fc <max30102_readByte>
 80048f8:	0003      	movs	r3, r0
 80048fa:	001a      	movs	r2, r3
 80048fc:	2301      	movs	r3, #1
 80048fe:	4053      	eors	r3, r2
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <max30102_set_mode+0x2e>
		return false;
 8004906:	2300      	movs	r3, #0
 8004908:	e02c      	b.n	8004964 <max30102_set_mode+0x88>
	}
	config = (config & 0xf8) | mode;
 800490a:	210f      	movs	r1, #15
 800490c:	187b      	adds	r3, r7, r1
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b25b      	sxtb	r3, r3
 8004912:	2207      	movs	r2, #7
 8004914:	4393      	bics	r3, r2
 8004916:	b25a      	sxtb	r2, r3
 8004918:	1cfb      	adds	r3, r7, #3
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	b25b      	sxtb	r3, r3
 800491e:	4313      	orrs	r3, r2
 8004920:	b25b      	sxtb	r3, r3
 8004922:	b2da      	uxtb	r2, r3
 8004924:	187b      	adds	r3, r7, r1
 8004926:	701a      	strb	r2, [r3, #0]
	if (max30102_writeByte(obj, MAX30102_MODE_CONFIG, config) != true) {
 8004928:	187b      	adds	r3, r7, r1
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2109      	movs	r1, #9
 8004930:	0018      	movs	r0, r3
 8004932:	f7ff fe91 	bl	8004658 <max30102_writeByte>
 8004936:	0003      	movs	r3, r0
 8004938:	001a      	movs	r2, r3
 800493a:	2301      	movs	r3, #1
 800493c:	4053      	eors	r3, r2
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <max30102_set_mode+0x6c>
		return false;
 8004944:	2300      	movs	r3, #0
 8004946:	e00d      	b.n	8004964 <max30102_set_mode+0x88>
	}
	if (max30102_clear_fifo(obj) != true) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0018      	movs	r0, r3
 800494c:	f000 f930 	bl	8004bb0 <max30102_clear_fifo>
 8004950:	0003      	movs	r3, r0
 8004952:	001a      	movs	r2, r3
 8004954:	2301      	movs	r3, #1
 8004956:	4053      	eors	r3, r2
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <max30102_set_mode+0x86>
		return false;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <max30102_set_mode+0x88>
	}
	return true;
 8004962:	2301      	movs	r3, #1
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	b004      	add	sp, #16
 800496a:	bd80      	pop	{r7, pc}

0800496c <max30102_set_sampling_rate>:
 * @brief Set sampling rate.
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
bool max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	000a      	movs	r2, r1
 8004976:	1cfb      	adds	r3, r7, #3
 8004978:	701a      	strb	r2, [r3, #0]
	uint8_t config;
	if (max30102_readByte(obj, MAX30102_SPO2_CONFIG, &config) != true) {
 800497a:	230f      	movs	r3, #15
 800497c:	18fa      	adds	r2, r7, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	210a      	movs	r1, #10
 8004982:	0018      	movs	r0, r3
 8004984:	f7ff feba 	bl	80046fc <max30102_readByte>
 8004988:	0003      	movs	r3, r0
 800498a:	001a      	movs	r2, r3
 800498c:	2301      	movs	r3, #1
 800498e:	4053      	eors	r3, r2
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <max30102_set_sampling_rate+0x2e>
		return false;
 8004996:	2300      	movs	r3, #0
 8004998:	e01a      	b.n	80049d0 <max30102_set_sampling_rate+0x64>
	}
	config = (config & 0x63) << MAX30102_SPO2_SR;
 800499a:	210f      	movs	r1, #15
 800499c:	187b      	adds	r3, r7, r1
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2273      	movs	r2, #115	; 0x73
 80049a6:	4393      	bics	r3, r2
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	187b      	adds	r3, r7, r1
 80049ac:	701a      	strb	r2, [r3, #0]
	if (max30102_writeByte(obj, MAX30102_SPO2_CONFIG, config) != true) {
 80049ae:	187b      	adds	r3, r7, r1
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	210a      	movs	r1, #10
 80049b6:	0018      	movs	r0, r3
 80049b8:	f7ff fe4e 	bl	8004658 <max30102_writeByte>
 80049bc:	0003      	movs	r3, r0
 80049be:	001a      	movs	r2, r3
 80049c0:	2301      	movs	r3, #1
 80049c2:	4053      	eors	r3, r2
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <max30102_set_sampling_rate+0x62>
		return false;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e000      	b.n	80049d0 <max30102_set_sampling_rate+0x64>
	}
	return true;
 80049ce:	2301      	movs	r3, #1
}
 80049d0:	0018      	movs	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b004      	add	sp, #16
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <max30102_set_led_pulse_width>:
 * @brief Set led pulse width.
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
bool max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	000a      	movs	r2, r1
 80049e2:	1cfb      	adds	r3, r7, #3
 80049e4:	701a      	strb	r2, [r3, #0]
	uint8_t config;
	if (max30102_readByte(obj, MAX30102_SPO2_CONFIG, &config) != true) {
 80049e6:	230f      	movs	r3, #15
 80049e8:	18fa      	adds	r2, r7, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	210a      	movs	r1, #10
 80049ee:	0018      	movs	r0, r3
 80049f0:	f7ff fe84 	bl	80046fc <max30102_readByte>
 80049f4:	0003      	movs	r3, r0
 80049f6:	001a      	movs	r2, r3
 80049f8:	2301      	movs	r3, #1
 80049fa:	4053      	eors	r3, r2
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <max30102_set_led_pulse_width+0x2e>
		return false;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e01f      	b.n	8004a46 <max30102_set_led_pulse_width+0x6e>
	}
	config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8004a06:	210f      	movs	r1, #15
 8004a08:	187b      	adds	r3, r7, r1
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b25b      	sxtb	r3, r3
 8004a0e:	227c      	movs	r2, #124	; 0x7c
 8004a10:	4013      	ands	r3, r2
 8004a12:	b25a      	sxtb	r2, r3
 8004a14:	1cfb      	adds	r3, r7, #3
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	b25b      	sxtb	r3, r3
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	b25b      	sxtb	r3, r3
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	187b      	adds	r3, r7, r1
 8004a22:	701a      	strb	r2, [r3, #0]
	if (max30102_writeByte(obj, MAX30102_SPO2_CONFIG, config) != true) {
 8004a24:	187b      	adds	r3, r7, r1
 8004a26:	781a      	ldrb	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	210a      	movs	r1, #10
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f7ff fe13 	bl	8004658 <max30102_writeByte>
 8004a32:	0003      	movs	r3, r0
 8004a34:	001a      	movs	r2, r3
 8004a36:	2301      	movs	r3, #1
 8004a38:	4053      	eors	r3, r2
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <max30102_set_led_pulse_width+0x6c>
		return false;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e000      	b.n	8004a46 <max30102_set_led_pulse_width+0x6e>
	}
	return true;
 8004a44:	2301      	movs	r3, #1
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b004      	add	sp, #16
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <max30102_set_adc_resolution>:
 * @brief Set ADC resolution.
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
bool max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc) {
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	000a      	movs	r2, r1
 8004a58:	1cfb      	adds	r3, r7, #3
 8004a5a:	701a      	strb	r2, [r3, #0]
	uint8_t config;
	if (max30102_readByte(obj, MAX30102_SPO2_CONFIG, &config) != true) {
 8004a5c:	230f      	movs	r3, #15
 8004a5e:	18fa      	adds	r2, r7, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	210a      	movs	r1, #10
 8004a64:	0018      	movs	r0, r3
 8004a66:	f7ff fe49 	bl	80046fc <max30102_readByte>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4053      	eors	r3, r2
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <max30102_set_adc_resolution+0x2e>
		return false;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e020      	b.n	8004abe <max30102_set_adc_resolution+0x70>
	}
	config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8004a7c:	210f      	movs	r1, #15
 8004a7e:	187b      	adds	r3, r7, r1
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	221f      	movs	r2, #31
 8004a86:	4013      	ands	r3, r2
 8004a88:	b25a      	sxtb	r2, r3
 8004a8a:	1cfb      	adds	r3, r7, #3
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	015b      	lsls	r3, r3, #5
 8004a90:	b25b      	sxtb	r3, r3
 8004a92:	4313      	orrs	r3, r2
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	701a      	strb	r2, [r3, #0]
	if (max30102_writeByte(obj, MAX30102_SPO2_CONFIG, config) != true) {
 8004a9c:	187b      	adds	r3, r7, r1
 8004a9e:	781a      	ldrb	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	210a      	movs	r1, #10
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7ff fdd7 	bl	8004658 <max30102_writeByte>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	001a      	movs	r2, r3
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4053      	eors	r3, r2
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <max30102_set_adc_resolution+0x6e>
		return false;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <max30102_set_adc_resolution+0x70>
	}
	return true;
 8004abc:	2301      	movs	r3, #1
}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b004      	add	sp, #16
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <max30102_set_led_current_1>:
 * @brief Set LED current.
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
bool max30102_set_led_current_1(max30102_t *obj, uint8_t ma) {
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	000a      	movs	r2, r1
 8004ad0:	1cfb      	adds	r3, r7, #3
 8004ad2:	701a      	strb	r2, [r3, #0]
	  //Default is 0x1F which gets us 6.4mA
	  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
	  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
	  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
	  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch
	return max30102_writeByte(obj, MAX30102_LED_IR_PA1, ma);
 8004ad4:	1cfb      	adds	r3, r7, #3
 8004ad6:	781a      	ldrb	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	210c      	movs	r1, #12
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7ff fdbb 	bl	8004658 <max30102_writeByte>
 8004ae2:	0003      	movs	r3, r0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b002      	add	sp, #8
 8004aea:	bd80      	pop	{r7, pc}

08004aec <max30102_set_led_current_2>:
 * @brief Set LED current.
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
bool max30102_set_led_current_2(max30102_t *obj, uint8_t ma) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	000a      	movs	r2, r1
 8004af6:	1cfb      	adds	r3, r7, #3
 8004af8:	701a      	strb	r2, [r3, #0]
//	uint8_t pa = ma / 0.2;
	return max30102_writeByte(obj, MAX30102_LED_RED_PA2, ma);
 8004afa:	1cfb      	adds	r3, r7, #3
 8004afc:	781a      	ldrb	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	210d      	movs	r1, #13
 8004b02:	0018      	movs	r0, r3
 8004b04:	f7ff fda8 	bl	8004658 <max30102_writeByte>
 8004b08:	0003      	movs	r3, r0
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b002      	add	sp, #8
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
bool max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave,
		uint8_t roll_over_en, uint8_t fifo_a_full) {
 8004b12:	b590      	push	{r4, r7, lr}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	000c      	movs	r4, r1
 8004b1c:	0010      	movs	r0, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	1cfb      	adds	r3, r7, #3
 8004b22:	1c22      	adds	r2, r4, #0
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	1cbb      	adds	r3, r7, #2
 8004b28:	1c02      	adds	r2, r0, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	1c7b      	adds	r3, r7, #1
 8004b2e:	1c0a      	adds	r2, r1, #0
 8004b30:	701a      	strb	r2, [r3, #0]
	uint8_t config = 0x00;
 8004b32:	210f      	movs	r1, #15
 8004b34:	187b      	adds	r3, r7, r1
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]
	config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8004b3a:	1cfb      	adds	r3, r7, #3
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	015b      	lsls	r3, r3, #5
 8004b40:	b25a      	sxtb	r2, r3
 8004b42:	187b      	adds	r3, r7, r1
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	b25a      	sxtb	r2, r3
 8004b4c:	187b      	adds	r3, r7, r1
 8004b4e:	701a      	strb	r2, [r3, #0]
	config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8004b50:	1cbb      	adds	r3, r7, #2
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	b25b      	sxtb	r3, r3
 8004b58:	2210      	movs	r2, #16
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	b25a      	sxtb	r2, r3
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b25b      	sxtb	r3, r3
 8004b64:	4313      	orrs	r3, r2
 8004b66:	b25a      	sxtb	r2, r3
 8004b68:	187b      	adds	r3, r7, r1
 8004b6a:	701a      	strb	r2, [r3, #0]
	config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8004b6c:	1c7b      	adds	r3, r7, #1
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	b25b      	sxtb	r3, r3
 8004b72:	220f      	movs	r2, #15
 8004b74:	4013      	ands	r3, r2
 8004b76:	b25a      	sxtb	r2, r3
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	b25a      	sxtb	r2, r3
 8004b82:	187b      	adds	r3, r7, r1
 8004b84:	701a      	strb	r2, [r3, #0]
	if (max30102_writeByte(obj, MAX30102_FIFO_CONFIG, config) != true) {
 8004b86:	187b      	adds	r3, r7, r1
 8004b88:	781a      	ldrb	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2108      	movs	r1, #8
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f7ff fd62 	bl	8004658 <max30102_writeByte>
 8004b94:	0003      	movs	r3, r0
 8004b96:	001a      	movs	r2, r3
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4053      	eors	r3, r2
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <max30102_set_fifo_config+0x94>
		return false;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <max30102_set_fifo_config+0x96>
	}
	return true;
 8004ba6:	2301      	movs	r3, #1
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b005      	add	sp, #20
 8004bae:	bd90      	pop	{r4, r7, pc}

08004bb0 <max30102_clear_fifo>:
/**
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
bool max30102_clear_fifo(max30102_t *obj) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	uint8_t val[4] = { 0x00, 0x00, 0x00, 0x00 };
 8004bb8:	210c      	movs	r1, #12
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
	if (max30102_writeMulti(obj, MAX30102_FIFO_WR_PTR, &val, 3) != true) {
 8004bc0:	187a      	adds	r2, r7, r1
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	2104      	movs	r1, #4
 8004bc8:	f7ff fd70 	bl	80046ac <max30102_writeMulti>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	001a      	movs	r2, r3
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4053      	eors	r3, r2
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <max30102_clear_fifo+0x2e>
		return false;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e020      	b.n	8004c20 <max30102_clear_fifo+0x70>
	}
	if (max30102_writeMulti(obj, MAX30102_FIFO_RD_PTR, &val, 3) != true) {
 8004bde:	230c      	movs	r3, #12
 8004be0:	18fa      	adds	r2, r7, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	2303      	movs	r3, #3
 8004be6:	2106      	movs	r1, #6
 8004be8:	f7ff fd60 	bl	80046ac <max30102_writeMulti>
 8004bec:	0003      	movs	r3, r0
 8004bee:	001a      	movs	r2, r3
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4053      	eors	r3, r2
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <max30102_clear_fifo+0x4e>
		return false;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e010      	b.n	8004c20 <max30102_clear_fifo+0x70>
	}
	if (max30102_writeMulti(obj, MAX30102_OVF_COUNTER, &val, 3) != true) {
 8004bfe:	230c      	movs	r3, #12
 8004c00:	18fa      	adds	r2, r7, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	2303      	movs	r3, #3
 8004c06:	2105      	movs	r1, #5
 8004c08:	f7ff fd50 	bl	80046ac <max30102_writeMulti>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	001a      	movs	r2, r3
 8004c10:	2301      	movs	r3, #1
 8004c12:	4053      	eors	r3, r2
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <max30102_clear_fifo+0x6e>
		return false;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <max30102_clear_fifo+0x70>
	}
	return true;
 8004c1e:	2301      	movs	r3, #1
}
 8004c20:	0018      	movs	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b004      	add	sp, #16
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <max30102_read_fifo>:
/**
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
bool max30102_read_fifo(max30102_t *obj) {
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b089      	sub	sp, #36	; 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	// First transaction: Get the FIFO_WR_PTR
	uint8_t wr_ptr = 0, rd_ptr = 0;
 8004c30:	2113      	movs	r1, #19
 8004c32:	187b      	adds	r3, r7, r1
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	2312      	movs	r3, #18
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
	if (max30102_readByte(obj, MAX30102_FIFO_WR_PTR, &wr_ptr) != true) {
 8004c40:	187a      	adds	r2, r7, r1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2104      	movs	r1, #4
 8004c46:	0018      	movs	r0, r3
 8004c48:	f7ff fd58 	bl	80046fc <max30102_readByte>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	001a      	movs	r2, r3
 8004c50:	2301      	movs	r3, #1
 8004c52:	4053      	eors	r3, r2
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <max30102_read_fifo+0x36>
		return false;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e084      	b.n	8004d68 <max30102_read_fifo+0x140>
	}
	if (max30102_readByte(obj, MAX30102_FIFO_RD_PTR, &rd_ptr) != true) {
 8004c5e:	2312      	movs	r3, #18
 8004c60:	18fa      	adds	r2, r7, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2106      	movs	r1, #6
 8004c66:	0018      	movs	r0, r3
 8004c68:	f7ff fd48 	bl	80046fc <max30102_readByte>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	001a      	movs	r2, r3
 8004c70:	2301      	movs	r3, #1
 8004c72:	4053      	eors	r3, r2
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <max30102_read_fifo+0x56>
		return false;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e074      	b.n	8004d68 <max30102_read_fifo+0x140>
	}

	int8_t num_samples;
//	rb_data_type value;

	num_samples = (int8_t) wr_ptr - (int8_t) rd_ptr;
 8004c7e:	2313      	movs	r3, #19
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	781a      	ldrb	r2, [r3, #0]
 8004c84:	2312      	movs	r3, #18
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	211f      	movs	r1, #31
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	701a      	strb	r2, [r3, #0]
	if (num_samples < 1) {
 8004c94:	187b      	adds	r3, r7, r1
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b25b      	sxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	dc05      	bgt.n	8004caa <max30102_read_fifo+0x82>
		num_samples += 32;
 8004c9e:	187b      	adds	r3, r7, r1
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	3320      	adds	r3, #32
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	187b      	adds	r3, r7, r1
 8004ca8:	701a      	strb	r2, [r3, #0]
	}

	// Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
	for (int8_t i = 0; i < num_samples; i++) {
 8004caa:	231e      	movs	r3, #30
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e04e      	b.n	8004d52 <max30102_read_fifo+0x12a>
		uint8_t sample[6];
//		max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
		if(max30102_readMulti(obj, MAX30102_FIFO_DATA, sample, 6) != true){
 8004cb4:	230c      	movs	r3, #12
 8004cb6:	18fa      	adds	r2, r7, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	2306      	movs	r3, #6
 8004cbc:	2107      	movs	r1, #7
 8004cbe:	f7ff fd43 	bl	8004748 <max30102_readMulti>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	4053      	eors	r3, r2
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <max30102_read_fifo+0xac>
			return false;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e049      	b.n	8004d68 <max30102_read_fifo+0x140>
		}
		uint32_t ir_sample = ((uint32_t) (sample[0] << 16)
 8004cd4:	210c      	movs	r1, #12
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	041b      	lsls	r3, r3, #16
 8004cdc:	001a      	movs	r2, r3
				| (uint32_t) (sample[1] << 8) | (uint32_t) (sample[3]))
 8004cde:	187b      	adds	r3, r7, r1
 8004ce0:	785b      	ldrb	r3, [r3, #1]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	187a      	adds	r2, r7, r1
 8004ce8:	78d2      	ldrb	r2, [r2, #3]
 8004cea:	4313      	orrs	r3, r2
		uint32_t ir_sample = ((uint32_t) (sample[0] << 16)
 8004cec:	039b      	lsls	r3, r3, #14
 8004cee:	0b9b      	lsrs	r3, r3, #14
 8004cf0:	61bb      	str	r3, [r7, #24]
				& 0x3ffff;
		uint32_t red_sample = ((uint32_t) (sample[3] << 16)
 8004cf2:	187b      	adds	r3, r7, r1
 8004cf4:	78db      	ldrb	r3, [r3, #3]
 8004cf6:	041b      	lsls	r3, r3, #16
 8004cf8:	001a      	movs	r2, r3
				| (uint32_t) (sample[4] << 8) | (uint32_t) (sample[5]))
 8004cfa:	187b      	adds	r3, r7, r1
 8004cfc:	791b      	ldrb	r3, [r3, #4]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	4313      	orrs	r3, r2
 8004d02:	187a      	adds	r2, r7, r1
 8004d04:	7952      	ldrb	r2, [r2, #5]
 8004d06:	4313      	orrs	r3, r2
		uint32_t red_sample = ((uint32_t) (sample[3] << 16)
 8004d08:	039b      	lsls	r3, r3, #14
 8004d0a:	0b9b      	lsrs	r3, r3, #14
 8004d0c:	617b      	str	r3, [r7, #20]
				& 0x3ffff;
		obj->_ir_samples[i] = ir_sample;
 8004d0e:	241e      	movs	r4, #30
 8004d10:	193b      	adds	r3, r7, r4
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	b25b      	sxtb	r3, r3
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	18d3      	adds	r3, r2, r3
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	601a      	str	r2, [r3, #0]
		obj->_red_samples[i] = red_sample;
 8004d22:	193b      	adds	r3, r7, r4
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	3320      	adds	r3, #32
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	18d3      	adds	r3, r2, r3
 8004d30:	3304      	adds	r3, #4
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	601a      	str	r2, [r3, #0]
//		value.ir = obj->_ir_samples[i];
//		value.red = obj->_red_samples[i];
//		rb_push(value);
		max30102_plot(ir_sample, red_sample);
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	0011      	movs	r1, r2
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7ff fbed 	bl	800451c <max30102_plot>
	for (int8_t i = 0; i < num_samples; i++) {
 8004d42:	193b      	adds	r3, r7, r4
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	193b      	adds	r3, r7, r4
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	231e      	movs	r3, #30
 8004d54:	18fa      	adds	r2, r7, r3
 8004d56:	231f      	movs	r3, #31
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	7812      	ldrb	r2, [r2, #0]
 8004d5c:	b252      	sxtb	r2, r2
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	b25b      	sxtb	r3, r3
 8004d62:	429a      	cmp	r2, r3
 8004d64:	dba6      	blt.n	8004cb4 <max30102_read_fifo+0x8c>
	}
	return true;
 8004d66:	2301      	movs	r3, #1
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b009      	add	sp, #36	; 0x24
 8004d6e:	bd90      	pop	{r4, r7, pc}

08004d70 <max30102_update>:

bool max30102_update(max30102_t *obj) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	return max30102_read_fifo(obj);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7ff ff54 	bl	8004c28 <max30102_read_fifo>
 8004d80:	0003      	movs	r3, r0
}
 8004d82:	0018      	movs	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b002      	add	sp, #8
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <max30102_read_temp>:
 * @param obj Pointer to max30102_t object instance.
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

bool max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac) {
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
	if (max30102_readByte(obj, MAX30102_DIE_TINT, temp_int) != true) {
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	211f      	movs	r1, #31
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7ff fcad 	bl	80046fc <max30102_readByte>
 8004da2:	0003      	movs	r3, r0
 8004da4:	001a      	movs	r2, r3
 8004da6:	2301      	movs	r3, #1
 8004da8:	4053      	eors	r3, r2
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <max30102_read_temp+0x2a>
		return false;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e00f      	b.n	8004dd4 <max30102_read_temp+0x4a>
	}
	if (max30102_readByte(obj, MAX30102_DIE_TFRAC, temp_frac) != true) {
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2120      	movs	r1, #32
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f7ff fc9e 	bl	80046fc <max30102_readByte>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	001a      	movs	r2, r3
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	4053      	eors	r3, r2
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <max30102_read_temp+0x48>
		return false;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <max30102_read_temp+0x4a>
	}
	return true;
 8004dd2:	2301      	movs	r3, #1
}
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b004      	add	sp, #16
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <checkForBeat>:

//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  bool beatDetected = false;
 8004de4:	230f      	movs	r3, #15
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 8004dec:	4b5d      	ldr	r3, [pc, #372]	; (8004f64 <checkForBeat+0x188>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	5e9a      	ldrsh	r2, [r3, r2]
 8004df2:	4b5d      	ldr	r3, [pc, #372]	; (8004f68 <checkForBeat+0x18c>)
 8004df4:	801a      	strh	r2, [r3, #0]

  //This is good to view for debugging
//  print("Signal_Current: %d\n", IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	4b5c      	ldr	r3, [pc, #368]	; (8004f6c <checkForBeat+0x190>)
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f000 f8c4 	bl	8004f8c <averageDCEstimator>
 8004e04:	0003      	movs	r3, r0
 8004e06:	001a      	movs	r2, r3
 8004e08:	4b59      	ldr	r3, [pc, #356]	; (8004f70 <checkForBeat+0x194>)
 8004e0a:	801a      	strh	r2, [r3, #0]
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	4b57      	ldr	r3, [pc, #348]	; (8004f70 <checkForBeat+0x194>)
 8004e12:	2100      	movs	r1, #0
 8004e14:	5e5b      	ldrsh	r3, [r3, r1]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	b21b      	sxth	r3, r3
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f000 f8d0 	bl	8004fc4 <lowPassFIRFilter>
 8004e24:	0003      	movs	r3, r0
 8004e26:	001a      	movs	r2, r3
 8004e28:	4b4e      	ldr	r3, [pc, #312]	; (8004f64 <checkForBeat+0x188>)
 8004e2a:	801a      	strh	r2, [r3, #0]

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
 8004e2c:	4b4e      	ldr	r3, [pc, #312]	; (8004f68 <checkForBeat+0x18c>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	5e9b      	ldrsh	r3, [r3, r2]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	0bdb      	lsrs	r3, r3, #15
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	4a4a      	ldr	r2, [pc, #296]	; (8004f64 <checkForBeat+0x188>)
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	5e52      	ldrsh	r2, [r2, r1]
 8004e3e:	43d2      	mvns	r2, r2
 8004e40:	b292      	uxth	r2, r2
 8004e42:	0bd2      	lsrs	r2, r2, #15
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	4013      	ands	r3, r2
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d039      	beq.n	8004ec2 <checkForBeat+0xe6>
  {

    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
 8004e4e:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <checkForBeat+0x198>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	5e9a      	ldrsh	r2, [r3, r2]
 8004e54:	4b48      	ldr	r3, [pc, #288]	; (8004f78 <checkForBeat+0x19c>)
 8004e56:	801a      	strh	r2, [r3, #0]
    IR_AC_Min = IR_AC_Signal_min;
 8004e58:	4b48      	ldr	r3, [pc, #288]	; (8004f7c <checkForBeat+0x1a0>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	5e9a      	ldrsh	r2, [r3, r2]
 8004e5e:	4b48      	ldr	r3, [pc, #288]	; (8004f80 <checkForBeat+0x1a4>)
 8004e60:	801a      	strh	r2, [r3, #0]

    positiveEdge = 1;
 8004e62:	4b48      	ldr	r3, [pc, #288]	; (8004f84 <checkForBeat+0x1a8>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	801a      	strh	r2, [r3, #0]
    negativeEdge = 0;
 8004e68:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <checkForBeat+0x1ac>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	801a      	strh	r2, [r3, #0]
    IR_AC_Signal_max = 0;
 8004e6e:	4b41      	ldr	r3, [pc, #260]	; (8004f74 <checkForBeat+0x198>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	801a      	strh	r2, [r3, #0]

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 8004e74:	4b40      	ldr	r3, [pc, #256]	; (8004f78 <checkForBeat+0x19c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	5e9b      	ldrsh	r3, [r3, r2]
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <checkForBeat+0x1a4>)
 8004e7e:	2100      	movs	r1, #0
 8004e80:	5e5b      	ldrsh	r3, [r3, r1]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2201      	movs	r2, #1
 8004e86:	2b14      	cmp	r3, #20
 8004e88:	dc01      	bgt.n	8004e8e <checkForBeat+0xb2>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	1c1a      	adds	r2, r3, #0
 8004e8e:	b2d3      	uxtb	r3, r2
 8004e90:	4a39      	ldr	r2, [pc, #228]	; (8004f78 <checkForBeat+0x19c>)
 8004e92:	2100      	movs	r1, #0
 8004e94:	5e52      	ldrsh	r2, [r2, r1]
 8004e96:	0011      	movs	r1, r2
 8004e98:	4a39      	ldr	r2, [pc, #228]	; (8004f80 <checkForBeat+0x1a4>)
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	5e12      	ldrsh	r2, [r2, r0]
 8004e9e:	1a89      	subs	r1, r1, r2
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	1c10      	adds	r0, r2, #0
 8004ea4:	22fa      	movs	r2, #250	; 0xfa
 8004ea6:	0092      	lsls	r2, r2, #2
 8004ea8:	4291      	cmp	r1, r2
 8004eaa:	db01      	blt.n	8004eb0 <checkForBeat+0xd4>
 8004eac:	2200      	movs	r2, #0
 8004eae:	1c10      	adds	r0, r2, #0
 8004eb0:	b2c2      	uxtb	r2, r0
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <checkForBeat+0xe6>
    {
      //Heart beat!!!
      beatDetected = true;
 8004eba:	230f      	movs	r3, #15
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
    }
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
 8004ec2:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <checkForBeat+0x18c>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	5e9b      	ldrsh	r3, [r3, r2]
 8004ec8:	17da      	asrs	r2, r3, #31
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	0fdb      	lsrs	r3, r3, #31
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <checkForBeat+0x188>)
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	5e5b      	ldrsh	r3, [r3, r1]
 8004ed6:	1e59      	subs	r1, r3, #1
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	0fdb      	lsrs	r3, r3, #31
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	4013      	ands	r3, r2
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d008      	beq.n	8004ef8 <checkForBeat+0x11c>
  {
    positiveEdge = 0;
 8004ee6:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <checkForBeat+0x1a8>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	801a      	strh	r2, [r3, #0]
    negativeEdge = 1;
 8004eec:	4b26      	ldr	r3, [pc, #152]	; (8004f88 <checkForBeat+0x1ac>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	801a      	strh	r2, [r3, #0]
    IR_AC_Signal_min = 0;
 8004ef2:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <checkForBeat+0x1a0>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	801a      	strh	r2, [r3, #0]
  }

  //  Find Maximum value in positive cycle
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
 8004ef8:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <checkForBeat+0x1a8>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	5e9b      	ldrsh	r3, [r3, r2]
 8004efe:	0019      	movs	r1, r3
 8004f00:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <checkForBeat+0x188>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	5e9a      	ldrsh	r2, [r3, r2]
 8004f06:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <checkForBeat+0x18c>)
 8004f08:	2000      	movs	r0, #0
 8004f0a:	5e1b      	ldrsh	r3, [r3, r0]
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	dc01      	bgt.n	8004f16 <checkForBeat+0x13a>
 8004f12:	2300      	movs	r3, #0
 8004f14:	1c18      	adds	r0, r3, #0
 8004f16:	b2c3      	uxtb	r3, r0
 8004f18:	400b      	ands	r3, r1
 8004f1a:	d004      	beq.n	8004f26 <checkForBeat+0x14a>
  {
    IR_AC_Signal_max = IR_AC_Signal_Current;
 8004f1c:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <checkForBeat+0x188>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	5e9a      	ldrsh	r2, [r3, r2]
 8004f22:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <checkForBeat+0x198>)
 8004f24:	801a      	strh	r2, [r3, #0]
  }

  //  Find Minimum value in negative cycle
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
 8004f26:	4b18      	ldr	r3, [pc, #96]	; (8004f88 <checkForBeat+0x1ac>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	5e9b      	ldrsh	r3, [r3, r2]
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <checkForBeat+0x188>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	5e9a      	ldrsh	r2, [r3, r2]
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <checkForBeat+0x18c>)
 8004f36:	2000      	movs	r0, #0
 8004f38:	5e1b      	ldrsh	r3, [r3, r0]
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	db01      	blt.n	8004f44 <checkForBeat+0x168>
 8004f40:	2300      	movs	r3, #0
 8004f42:	1c18      	adds	r0, r3, #0
 8004f44:	b2c3      	uxtb	r3, r0
 8004f46:	400b      	ands	r3, r1
 8004f48:	d004      	beq.n	8004f54 <checkForBeat+0x178>
  {
    IR_AC_Signal_min = IR_AC_Signal_Current;
 8004f4a:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <checkForBeat+0x188>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	5e9a      	ldrsh	r2, [r3, r2]
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <checkForBeat+0x1a0>)
 8004f52:	801a      	strh	r2, [r3, #0]
  }

  return(beatDetected);
 8004f54:	230f      	movs	r3, #15
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	781b      	ldrb	r3, [r3, #0]
}
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b004      	add	sp, #16
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	20000570 	.word	0x20000570
 8004f68:	20000572 	.word	0x20000572
 8004f6c:	20000580 	.word	0x20000580
 8004f70:	20000578 	.word	0x20000578
 8004f74:	20000576 	.word	0x20000576
 8004f78:	2000004c 	.word	0x2000004c
 8004f7c:	20000574 	.word	0x20000574
 8004f80:	2000004e 	.word	0x2000004e
 8004f84:	2000057a 	.word	0x2000057a
 8004f88:	2000057c 	.word	0x2000057c

08004f8c <averageDCEstimator>:

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	000a      	movs	r2, r1
 8004f96:	1cbb      	adds	r3, r7, #2
 8004f98:	801a      	strh	r2, [r3, #0]
  *p += ((((long) x << 15) - *p) >> 4);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	1cbb      	adds	r3, r7, #2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	03d9      	lsls	r1, r3, #15
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	1acb      	subs	r3, r1, r3
 8004faa:	111b      	asrs	r3, r3, #4
 8004fac:	18d2      	adds	r2, r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
  return (*p >> 15);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	13db      	asrs	r3, r3, #15
 8004fb8:	b21b      	sxth	r3, r3
}
 8004fba:	0018      	movs	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b002      	add	sp, #8
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <lowPassFIRFilter>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	0002      	movs	r2, r0
 8004fcc:	1dbb      	adds	r3, r7, #6
 8004fce:	801a      	strh	r2, [r3, #0]
  cbuf[offset] = din;
 8004fd0:	4b32      	ldr	r3, [pc, #200]	; (800509c <lowPassFIRFilter+0xd8>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	4b32      	ldr	r3, [pc, #200]	; (80050a0 <lowPassFIRFilter+0xdc>)
 8004fd8:	0052      	lsls	r2, r2, #1
 8004fda:	1db9      	adds	r1, r7, #6
 8004fdc:	8809      	ldrh	r1, [r1, #0]
 8004fde:	52d1      	strh	r1, [r2, r3]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	015b      	lsls	r3, r3, #5
 8004fe4:	b218      	sxth	r0, r3
 8004fe6:	4b2d      	ldr	r3, [pc, #180]	; (800509c <lowPassFIRFilter+0xd8>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	3b0b      	subs	r3, #11
 8004fec:	221f      	movs	r2, #31
 8004fee:	401a      	ands	r2, r3
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <lowPassFIRFilter+0xdc>)
 8004ff2:	0052      	lsls	r2, r2, #1
 8004ff4:	5ed3      	ldrsh	r3, [r2, r3]
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	f000 f856 	bl	80050a8 <mul16>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	60fb      	str	r3, [r7, #12]

  for (uint8_t i = 0 ; i < 11 ; i++)
 8005000:	230b      	movs	r3, #11
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e02f      	b.n	800506a <lowPassFIRFilter+0xa6>
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 800500a:	240b      	movs	r4, #11
 800500c:	193b      	adds	r3, r7, r4
 800500e:	781a      	ldrb	r2, [r3, #0]
 8005010:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <lowPassFIRFilter+0xe0>)
 8005012:	0052      	lsls	r2, r2, #1
 8005014:	5ad3      	ldrh	r3, [r2, r3]
 8005016:	b218      	sxth	r0, r3
 8005018:	4b20      	ldr	r3, [pc, #128]	; (800509c <lowPassFIRFilter+0xd8>)
 800501a:	781a      	ldrb	r2, [r3, #0]
 800501c:	193b      	adds	r3, r7, r4
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	b2db      	uxtb	r3, r3
 8005024:	001a      	movs	r2, r3
 8005026:	231f      	movs	r3, #31
 8005028:	401a      	ands	r2, r3
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <lowPassFIRFilter+0xdc>)
 800502c:	0052      	lsls	r2, r2, #1
 800502e:	5ed3      	ldrsh	r3, [r2, r3]
 8005030:	b29a      	uxth	r2, r3
 8005032:	4b1a      	ldr	r3, [pc, #104]	; (800509c <lowPassFIRFilter+0xd8>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	3b16      	subs	r3, #22
 8005038:	0019      	movs	r1, r3
 800503a:	193b      	adds	r3, r7, r4
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	18cb      	adds	r3, r1, r3
 8005040:	211f      	movs	r1, #31
 8005042:	4019      	ands	r1, r3
 8005044:	4b16      	ldr	r3, [pc, #88]	; (80050a0 <lowPassFIRFilter+0xdc>)
 8005046:	0049      	lsls	r1, r1, #1
 8005048:	5ecb      	ldrsh	r3, [r1, r3]
 800504a:	b29b      	uxth	r3, r3
 800504c:	18d3      	adds	r3, r2, r3
 800504e:	b29b      	uxth	r3, r3
 8005050:	b21b      	sxth	r3, r3
 8005052:	0019      	movs	r1, r3
 8005054:	f000 f828 	bl	80050a8 <mul16>
 8005058:	0002      	movs	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	189b      	adds	r3, r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0 ; i < 11 ; i++)
 8005060:	193b      	adds	r3, r7, r4
 8005062:	781a      	ldrb	r2, [r3, #0]
 8005064:	193b      	adds	r3, r7, r4
 8005066:	3201      	adds	r2, #1
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	230b      	movs	r3, #11
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b0a      	cmp	r3, #10
 8005072:	d9ca      	bls.n	800500a <lowPassFIRFilter+0x46>
  }

  offset++;
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <lowPassFIRFilter+0xd8>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	b2da      	uxtb	r2, r3
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <lowPassFIRFilter+0xd8>)
 800507e:	701a      	strb	r2, [r3, #0]
  offset %= 32; //Wrap condition
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <lowPassFIRFilter+0xd8>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	221f      	movs	r2, #31
 8005086:	4013      	ands	r3, r2
 8005088:	b2da      	uxtb	r2, r3
 800508a:	4b04      	ldr	r3, [pc, #16]	; (800509c <lowPassFIRFilter+0xd8>)
 800508c:	701a      	strb	r2, [r3, #0]

  return(z >> 15);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	13db      	asrs	r3, r3, #15
 8005092:	b21b      	sxth	r3, r3
}
 8005094:	0018      	movs	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	b005      	add	sp, #20
 800509a:	bd90      	pop	{r4, r7, pc}
 800509c:	200005c4 	.word	0x200005c4
 80050a0:	20000584 	.word	0x20000584
 80050a4:	08008318 	.word	0x08008318

080050a8 <mul16>:

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	0002      	movs	r2, r0
 80050b0:	1dbb      	adds	r3, r7, #6
 80050b2:	801a      	strh	r2, [r3, #0]
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	1c0a      	adds	r2, r1, #0
 80050b8:	801a      	strh	r2, [r3, #0]
  return((long)x * (long)y);
 80050ba:	1dbb      	adds	r3, r7, #6
 80050bc:	2200      	movs	r2, #0
 80050be:	5e9b      	ldrsh	r3, [r3, r2]
 80050c0:	1d3a      	adds	r2, r7, #4
 80050c2:	2100      	movs	r1, #0
 80050c4:	5e52      	ldrsh	r2, [r2, r1]
 80050c6:	4353      	muls	r3, r2
}
 80050c8:	0018      	movs	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b002      	add	sp, #8
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <__errno>:
 80050d0:	4b01      	ldr	r3, [pc, #4]	; (80050d8 <__errno+0x8>)
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	4770      	bx	lr
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	20000050 	.word	0x20000050

080050dc <__libc_init_array>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	2600      	movs	r6, #0
 80050e0:	4d0c      	ldr	r5, [pc, #48]	; (8005114 <__libc_init_array+0x38>)
 80050e2:	4c0d      	ldr	r4, [pc, #52]	; (8005118 <__libc_init_array+0x3c>)
 80050e4:	1b64      	subs	r4, r4, r5
 80050e6:	10a4      	asrs	r4, r4, #2
 80050e8:	42a6      	cmp	r6, r4
 80050ea:	d109      	bne.n	8005100 <__libc_init_array+0x24>
 80050ec:	2600      	movs	r6, #0
 80050ee:	f002 ffd3 	bl	8008098 <_init>
 80050f2:	4d0a      	ldr	r5, [pc, #40]	; (800511c <__libc_init_array+0x40>)
 80050f4:	4c0a      	ldr	r4, [pc, #40]	; (8005120 <__libc_init_array+0x44>)
 80050f6:	1b64      	subs	r4, r4, r5
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	42a6      	cmp	r6, r4
 80050fc:	d105      	bne.n	800510a <__libc_init_array+0x2e>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	00b3      	lsls	r3, r6, #2
 8005102:	58eb      	ldr	r3, [r5, r3]
 8005104:	4798      	blx	r3
 8005106:	3601      	adds	r6, #1
 8005108:	e7ee      	b.n	80050e8 <__libc_init_array+0xc>
 800510a:	00b3      	lsls	r3, r6, #2
 800510c:	58eb      	ldr	r3, [r5, r3]
 800510e:	4798      	blx	r3
 8005110:	3601      	adds	r6, #1
 8005112:	e7f2      	b.n	80050fa <__libc_init_array+0x1e>
 8005114:	0800870c 	.word	0x0800870c
 8005118:	0800870c 	.word	0x0800870c
 800511c:	0800870c 	.word	0x0800870c
 8005120:	08008710 	.word	0x08008710

08005124 <memset>:
 8005124:	0003      	movs	r3, r0
 8005126:	1882      	adds	r2, r0, r2
 8005128:	4293      	cmp	r3, r2
 800512a:	d100      	bne.n	800512e <memset+0xa>
 800512c:	4770      	bx	lr
 800512e:	7019      	strb	r1, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	e7f9      	b.n	8005128 <memset+0x4>

08005134 <__cvt>:
 8005134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005136:	001e      	movs	r6, r3
 8005138:	2300      	movs	r3, #0
 800513a:	0014      	movs	r4, r2
 800513c:	b08b      	sub	sp, #44	; 0x2c
 800513e:	429e      	cmp	r6, r3
 8005140:	da04      	bge.n	800514c <__cvt+0x18>
 8005142:	2180      	movs	r1, #128	; 0x80
 8005144:	0609      	lsls	r1, r1, #24
 8005146:	1873      	adds	r3, r6, r1
 8005148:	001e      	movs	r6, r3
 800514a:	232d      	movs	r3, #45	; 0x2d
 800514c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800514e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005150:	7013      	strb	r3, [r2, #0]
 8005152:	2320      	movs	r3, #32
 8005154:	2203      	movs	r2, #3
 8005156:	439f      	bics	r7, r3
 8005158:	2f46      	cmp	r7, #70	; 0x46
 800515a:	d007      	beq.n	800516c <__cvt+0x38>
 800515c:	003b      	movs	r3, r7
 800515e:	3b45      	subs	r3, #69	; 0x45
 8005160:	4259      	negs	r1, r3
 8005162:	414b      	adcs	r3, r1
 8005164:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005166:	3a01      	subs	r2, #1
 8005168:	18cb      	adds	r3, r1, r3
 800516a:	9310      	str	r3, [sp, #64]	; 0x40
 800516c:	ab09      	add	r3, sp, #36	; 0x24
 800516e:	9304      	str	r3, [sp, #16]
 8005170:	ab08      	add	r3, sp, #32
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005176:	9200      	str	r2, [sp, #0]
 8005178:	9302      	str	r3, [sp, #8]
 800517a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800517c:	0022      	movs	r2, r4
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	0033      	movs	r3, r6
 8005182:	f000 fd09 	bl	8005b98 <_dtoa_r>
 8005186:	0005      	movs	r5, r0
 8005188:	2f47      	cmp	r7, #71	; 0x47
 800518a:	d102      	bne.n	8005192 <__cvt+0x5e>
 800518c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800518e:	07db      	lsls	r3, r3, #31
 8005190:	d528      	bpl.n	80051e4 <__cvt+0xb0>
 8005192:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005194:	18eb      	adds	r3, r5, r3
 8005196:	9307      	str	r3, [sp, #28]
 8005198:	2f46      	cmp	r7, #70	; 0x46
 800519a:	d114      	bne.n	80051c6 <__cvt+0x92>
 800519c:	782b      	ldrb	r3, [r5, #0]
 800519e:	2b30      	cmp	r3, #48	; 0x30
 80051a0:	d10c      	bne.n	80051bc <__cvt+0x88>
 80051a2:	2200      	movs	r2, #0
 80051a4:	2300      	movs	r3, #0
 80051a6:	0020      	movs	r0, r4
 80051a8:	0031      	movs	r1, r6
 80051aa:	f7fb f94f 	bl	800044c <__aeabi_dcmpeq>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d104      	bne.n	80051bc <__cvt+0x88>
 80051b2:	2301      	movs	r3, #1
 80051b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051be:	9a07      	ldr	r2, [sp, #28]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	18d3      	adds	r3, r2, r3
 80051c4:	9307      	str	r3, [sp, #28]
 80051c6:	2200      	movs	r2, #0
 80051c8:	2300      	movs	r3, #0
 80051ca:	0020      	movs	r0, r4
 80051cc:	0031      	movs	r1, r6
 80051ce:	f7fb f93d 	bl	800044c <__aeabi_dcmpeq>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d001      	beq.n	80051da <__cvt+0xa6>
 80051d6:	9b07      	ldr	r3, [sp, #28]
 80051d8:	9309      	str	r3, [sp, #36]	; 0x24
 80051da:	2230      	movs	r2, #48	; 0x30
 80051dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051de:	9907      	ldr	r1, [sp, #28]
 80051e0:	428b      	cmp	r3, r1
 80051e2:	d306      	bcc.n	80051f2 <__cvt+0xbe>
 80051e4:	0028      	movs	r0, r5
 80051e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051ea:	1b5b      	subs	r3, r3, r5
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	b00b      	add	sp, #44	; 0x2c
 80051f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f2:	1c59      	adds	r1, r3, #1
 80051f4:	9109      	str	r1, [sp, #36]	; 0x24
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e7f0      	b.n	80051dc <__cvt+0xa8>

080051fa <__exponent>:
 80051fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051fc:	1c83      	adds	r3, r0, #2
 80051fe:	b087      	sub	sp, #28
 8005200:	9303      	str	r3, [sp, #12]
 8005202:	0005      	movs	r5, r0
 8005204:	000c      	movs	r4, r1
 8005206:	232b      	movs	r3, #43	; 0x2b
 8005208:	7002      	strb	r2, [r0, #0]
 800520a:	2900      	cmp	r1, #0
 800520c:	da01      	bge.n	8005212 <__exponent+0x18>
 800520e:	424c      	negs	r4, r1
 8005210:	3302      	adds	r3, #2
 8005212:	706b      	strb	r3, [r5, #1]
 8005214:	2c09      	cmp	r4, #9
 8005216:	dd31      	ble.n	800527c <__exponent+0x82>
 8005218:	270a      	movs	r7, #10
 800521a:	ab04      	add	r3, sp, #16
 800521c:	1dde      	adds	r6, r3, #7
 800521e:	0020      	movs	r0, r4
 8005220:	0039      	movs	r1, r7
 8005222:	9601      	str	r6, [sp, #4]
 8005224:	f7fb f8fc 	bl	8000420 <__aeabi_idivmod>
 8005228:	3e01      	subs	r6, #1
 800522a:	3130      	adds	r1, #48	; 0x30
 800522c:	0020      	movs	r0, r4
 800522e:	7031      	strb	r1, [r6, #0]
 8005230:	0039      	movs	r1, r7
 8005232:	9402      	str	r4, [sp, #8]
 8005234:	f7fb f80e 	bl	8000254 <__divsi3>
 8005238:	9b02      	ldr	r3, [sp, #8]
 800523a:	0004      	movs	r4, r0
 800523c:	2b63      	cmp	r3, #99	; 0x63
 800523e:	dcee      	bgt.n	800521e <__exponent+0x24>
 8005240:	9b01      	ldr	r3, [sp, #4]
 8005242:	3430      	adds	r4, #48	; 0x30
 8005244:	1e9a      	subs	r2, r3, #2
 8005246:	0013      	movs	r3, r2
 8005248:	9903      	ldr	r1, [sp, #12]
 800524a:	7014      	strb	r4, [r2, #0]
 800524c:	a804      	add	r0, sp, #16
 800524e:	3007      	adds	r0, #7
 8005250:	4298      	cmp	r0, r3
 8005252:	d80e      	bhi.n	8005272 <__exponent+0x78>
 8005254:	ab04      	add	r3, sp, #16
 8005256:	3307      	adds	r3, #7
 8005258:	2000      	movs	r0, #0
 800525a:	429a      	cmp	r2, r3
 800525c:	d804      	bhi.n	8005268 <__exponent+0x6e>
 800525e:	ab04      	add	r3, sp, #16
 8005260:	3009      	adds	r0, #9
 8005262:	18c0      	adds	r0, r0, r3
 8005264:	9b01      	ldr	r3, [sp, #4]
 8005266:	1ac0      	subs	r0, r0, r3
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	1818      	adds	r0, r3, r0
 800526c:	1b40      	subs	r0, r0, r5
 800526e:	b007      	add	sp, #28
 8005270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005272:	7818      	ldrb	r0, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	7008      	strb	r0, [r1, #0]
 8005278:	3101      	adds	r1, #1
 800527a:	e7e7      	b.n	800524c <__exponent+0x52>
 800527c:	2330      	movs	r3, #48	; 0x30
 800527e:	18e4      	adds	r4, r4, r3
 8005280:	70ab      	strb	r3, [r5, #2]
 8005282:	1d28      	adds	r0, r5, #4
 8005284:	70ec      	strb	r4, [r5, #3]
 8005286:	e7f1      	b.n	800526c <__exponent+0x72>

08005288 <_printf_float>:
 8005288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800528a:	b095      	sub	sp, #84	; 0x54
 800528c:	000c      	movs	r4, r1
 800528e:	9209      	str	r2, [sp, #36]	; 0x24
 8005290:	001e      	movs	r6, r3
 8005292:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005294:	0007      	movs	r7, r0
 8005296:	f001 fa99 	bl	80067cc <_localeconv_r>
 800529a:	6803      	ldr	r3, [r0, #0]
 800529c:	0018      	movs	r0, r3
 800529e:	930c      	str	r3, [sp, #48]	; 0x30
 80052a0:	f7fa ff32 	bl	8000108 <strlen>
 80052a4:	2300      	movs	r3, #0
 80052a6:	9312      	str	r3, [sp, #72]	; 0x48
 80052a8:	7e23      	ldrb	r3, [r4, #24]
 80052aa:	2207      	movs	r2, #7
 80052ac:	930a      	str	r3, [sp, #40]	; 0x28
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	900e      	str	r0, [sp, #56]	; 0x38
 80052b2:	930d      	str	r3, [sp, #52]	; 0x34
 80052b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	05c9      	lsls	r1, r1, #23
 80052ba:	d547      	bpl.n	800534c <_printf_float+0xc4>
 80052bc:	189b      	adds	r3, r3, r2
 80052be:	4393      	bics	r3, r2
 80052c0:	001a      	movs	r2, r3
 80052c2:	3208      	adds	r2, #8
 80052c4:	602a      	str	r2, [r5, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	64a2      	str	r2, [r4, #72]	; 0x48
 80052cc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80052ce:	2201      	movs	r2, #1
 80052d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80052d2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80052d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80052d6:	006b      	lsls	r3, r5, #1
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	930f      	str	r3, [sp, #60]	; 0x3c
 80052dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80052de:	4ba7      	ldr	r3, [pc, #668]	; (800557c <_printf_float+0x2f4>)
 80052e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052e2:	4252      	negs	r2, r2
 80052e4:	f7fc fe3a 	bl	8001f5c <__aeabi_dcmpun>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d131      	bne.n	8005350 <_printf_float+0xc8>
 80052ec:	2201      	movs	r2, #1
 80052ee:	4ba3      	ldr	r3, [pc, #652]	; (800557c <_printf_float+0x2f4>)
 80052f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80052f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052f4:	4252      	negs	r2, r2
 80052f6:	f7fb f8b9 	bl	800046c <__aeabi_dcmple>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d128      	bne.n	8005350 <_printf_float+0xc8>
 80052fe:	2200      	movs	r2, #0
 8005300:	2300      	movs	r3, #0
 8005302:	0029      	movs	r1, r5
 8005304:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005306:	f7fb f8a7 	bl	8000458 <__aeabi_dcmplt>
 800530a:	2800      	cmp	r0, #0
 800530c:	d003      	beq.n	8005316 <_printf_float+0x8e>
 800530e:	0023      	movs	r3, r4
 8005310:	222d      	movs	r2, #45	; 0x2d
 8005312:	3343      	adds	r3, #67	; 0x43
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005318:	4d99      	ldr	r5, [pc, #612]	; (8005580 <_printf_float+0x2f8>)
 800531a:	2b47      	cmp	r3, #71	; 0x47
 800531c:	d900      	bls.n	8005320 <_printf_float+0x98>
 800531e:	4d99      	ldr	r5, [pc, #612]	; (8005584 <_printf_float+0x2fc>)
 8005320:	2303      	movs	r3, #3
 8005322:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005324:	6123      	str	r3, [r4, #16]
 8005326:	3301      	adds	r3, #1
 8005328:	439a      	bics	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	6022      	str	r2, [r4, #0]
 800532e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005332:	0021      	movs	r1, r4
 8005334:	0038      	movs	r0, r7
 8005336:	9600      	str	r6, [sp, #0]
 8005338:	aa13      	add	r2, sp, #76	; 0x4c
 800533a:	f000 f9e7 	bl	800570c <_printf_common>
 800533e:	1c43      	adds	r3, r0, #1
 8005340:	d000      	beq.n	8005344 <_printf_float+0xbc>
 8005342:	e0a2      	b.n	800548a <_printf_float+0x202>
 8005344:	2001      	movs	r0, #1
 8005346:	4240      	negs	r0, r0
 8005348:	b015      	add	sp, #84	; 0x54
 800534a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800534c:	3307      	adds	r3, #7
 800534e:	e7b6      	b.n	80052be <_printf_float+0x36>
 8005350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005352:	002b      	movs	r3, r5
 8005354:	0010      	movs	r0, r2
 8005356:	0029      	movs	r1, r5
 8005358:	f7fc fe00 	bl	8001f5c <__aeabi_dcmpun>
 800535c:	2800      	cmp	r0, #0
 800535e:	d00b      	beq.n	8005378 <_printf_float+0xf0>
 8005360:	2d00      	cmp	r5, #0
 8005362:	da03      	bge.n	800536c <_printf_float+0xe4>
 8005364:	0023      	movs	r3, r4
 8005366:	222d      	movs	r2, #45	; 0x2d
 8005368:	3343      	adds	r3, #67	; 0x43
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800536e:	4d86      	ldr	r5, [pc, #536]	; (8005588 <_printf_float+0x300>)
 8005370:	2b47      	cmp	r3, #71	; 0x47
 8005372:	d9d5      	bls.n	8005320 <_printf_float+0x98>
 8005374:	4d85      	ldr	r5, [pc, #532]	; (800558c <_printf_float+0x304>)
 8005376:	e7d3      	b.n	8005320 <_printf_float+0x98>
 8005378:	2220      	movs	r2, #32
 800537a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	4391      	bics	r1, r2
 8005380:	910f      	str	r1, [sp, #60]	; 0x3c
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	d149      	bne.n	800541a <_printf_float+0x192>
 8005386:	3307      	adds	r3, #7
 8005388:	6063      	str	r3, [r4, #4]
 800538a:	2380      	movs	r3, #128	; 0x80
 800538c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4313      	orrs	r3, r2
 8005392:	2200      	movs	r2, #0
 8005394:	9206      	str	r2, [sp, #24]
 8005396:	aa12      	add	r2, sp, #72	; 0x48
 8005398:	9205      	str	r2, [sp, #20]
 800539a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800539c:	a908      	add	r1, sp, #32
 800539e:	9204      	str	r2, [sp, #16]
 80053a0:	aa11      	add	r2, sp, #68	; 0x44
 80053a2:	9203      	str	r2, [sp, #12]
 80053a4:	2223      	movs	r2, #35	; 0x23
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	9301      	str	r3, [sp, #4]
 80053aa:	6863      	ldr	r3, [r4, #4]
 80053ac:	1852      	adds	r2, r2, r1
 80053ae:	9202      	str	r2, [sp, #8]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	0038      	movs	r0, r7
 80053b4:	002b      	movs	r3, r5
 80053b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053b8:	f7ff febc 	bl	8005134 <__cvt>
 80053bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053be:	0005      	movs	r5, r0
 80053c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80053c2:	2b47      	cmp	r3, #71	; 0x47
 80053c4:	d108      	bne.n	80053d8 <_printf_float+0x150>
 80053c6:	1ccb      	adds	r3, r1, #3
 80053c8:	db02      	blt.n	80053d0 <_printf_float+0x148>
 80053ca:	6863      	ldr	r3, [r4, #4]
 80053cc:	4299      	cmp	r1, r3
 80053ce:	dd48      	ble.n	8005462 <_printf_float+0x1da>
 80053d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d2:	3b02      	subs	r3, #2
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	930a      	str	r3, [sp, #40]	; 0x28
 80053d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053da:	2b65      	cmp	r3, #101	; 0x65
 80053dc:	d824      	bhi.n	8005428 <_printf_float+0x1a0>
 80053de:	0020      	movs	r0, r4
 80053e0:	001a      	movs	r2, r3
 80053e2:	3901      	subs	r1, #1
 80053e4:	3050      	adds	r0, #80	; 0x50
 80053e6:	9111      	str	r1, [sp, #68]	; 0x44
 80053e8:	f7ff ff07 	bl	80051fa <__exponent>
 80053ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053ee:	900b      	str	r0, [sp, #44]	; 0x2c
 80053f0:	1813      	adds	r3, r2, r0
 80053f2:	6123      	str	r3, [r4, #16]
 80053f4:	2a01      	cmp	r2, #1
 80053f6:	dc02      	bgt.n	80053fe <_printf_float+0x176>
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	07d2      	lsls	r2, r2, #31
 80053fc:	d501      	bpl.n	8005402 <_printf_float+0x17a>
 80053fe:	3301      	adds	r3, #1
 8005400:	6123      	str	r3, [r4, #16]
 8005402:	2323      	movs	r3, #35	; 0x23
 8005404:	aa08      	add	r2, sp, #32
 8005406:	189b      	adds	r3, r3, r2
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d100      	bne.n	8005410 <_printf_float+0x188>
 800540e:	e78f      	b.n	8005330 <_printf_float+0xa8>
 8005410:	0023      	movs	r3, r4
 8005412:	222d      	movs	r2, #45	; 0x2d
 8005414:	3343      	adds	r3, #67	; 0x43
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	e78a      	b.n	8005330 <_printf_float+0xa8>
 800541a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800541c:	2a47      	cmp	r2, #71	; 0x47
 800541e:	d1b4      	bne.n	800538a <_printf_float+0x102>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1b2      	bne.n	800538a <_printf_float+0x102>
 8005424:	3301      	adds	r3, #1
 8005426:	e7af      	b.n	8005388 <_printf_float+0x100>
 8005428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800542a:	2b66      	cmp	r3, #102	; 0x66
 800542c:	d11b      	bne.n	8005466 <_printf_float+0x1de>
 800542e:	6863      	ldr	r3, [r4, #4]
 8005430:	2900      	cmp	r1, #0
 8005432:	dd0d      	ble.n	8005450 <_printf_float+0x1c8>
 8005434:	6121      	str	r1, [r4, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <_printf_float+0x1b8>
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	07d2      	lsls	r2, r2, #31
 800543e:	d502      	bpl.n	8005446 <_printf_float+0x1be>
 8005440:	3301      	adds	r3, #1
 8005442:	1859      	adds	r1, r3, r1
 8005444:	6121      	str	r1, [r4, #16]
 8005446:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005448:	65a3      	str	r3, [r4, #88]	; 0x58
 800544a:	2300      	movs	r3, #0
 800544c:	930b      	str	r3, [sp, #44]	; 0x2c
 800544e:	e7d8      	b.n	8005402 <_printf_float+0x17a>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <_printf_float+0x1d4>
 8005454:	2201      	movs	r2, #1
 8005456:	6821      	ldr	r1, [r4, #0]
 8005458:	4211      	tst	r1, r2
 800545a:	d000      	beq.n	800545e <_printf_float+0x1d6>
 800545c:	1c9a      	adds	r2, r3, #2
 800545e:	6122      	str	r2, [r4, #16]
 8005460:	e7f1      	b.n	8005446 <_printf_float+0x1be>
 8005462:	2367      	movs	r3, #103	; 0x67
 8005464:	930a      	str	r3, [sp, #40]	; 0x28
 8005466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005468:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800546a:	4293      	cmp	r3, r2
 800546c:	db06      	blt.n	800547c <_printf_float+0x1f4>
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	6123      	str	r3, [r4, #16]
 8005472:	07d2      	lsls	r2, r2, #31
 8005474:	d5e7      	bpl.n	8005446 <_printf_float+0x1be>
 8005476:	3301      	adds	r3, #1
 8005478:	6123      	str	r3, [r4, #16]
 800547a:	e7e4      	b.n	8005446 <_printf_float+0x1be>
 800547c:	2101      	movs	r1, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	dc01      	bgt.n	8005486 <_printf_float+0x1fe>
 8005482:	1849      	adds	r1, r1, r1
 8005484:	1ac9      	subs	r1, r1, r3
 8005486:	1852      	adds	r2, r2, r1
 8005488:	e7e9      	b.n	800545e <_printf_float+0x1d6>
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	0553      	lsls	r3, r2, #21
 800548e:	d407      	bmi.n	80054a0 <_printf_float+0x218>
 8005490:	6923      	ldr	r3, [r4, #16]
 8005492:	002a      	movs	r2, r5
 8005494:	0038      	movs	r0, r7
 8005496:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005498:	47b0      	blx	r6
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	d128      	bne.n	80054f0 <_printf_float+0x268>
 800549e:	e751      	b.n	8005344 <_printf_float+0xbc>
 80054a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a2:	2b65      	cmp	r3, #101	; 0x65
 80054a4:	d800      	bhi.n	80054a8 <_printf_float+0x220>
 80054a6:	e0e1      	b.n	800566c <_printf_float+0x3e4>
 80054a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80054aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80054ac:	2200      	movs	r2, #0
 80054ae:	2300      	movs	r3, #0
 80054b0:	f7fa ffcc 	bl	800044c <__aeabi_dcmpeq>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d031      	beq.n	800551c <_printf_float+0x294>
 80054b8:	2301      	movs	r3, #1
 80054ba:	0038      	movs	r0, r7
 80054bc:	4a34      	ldr	r2, [pc, #208]	; (8005590 <_printf_float+0x308>)
 80054be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054c0:	47b0      	blx	r6
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	d100      	bne.n	80054c8 <_printf_float+0x240>
 80054c6:	e73d      	b.n	8005344 <_printf_float+0xbc>
 80054c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054cc:	4293      	cmp	r3, r2
 80054ce:	db02      	blt.n	80054d6 <_printf_float+0x24e>
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	07db      	lsls	r3, r3, #31
 80054d4:	d50c      	bpl.n	80054f0 <_printf_float+0x268>
 80054d6:	0038      	movs	r0, r7
 80054d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054de:	47b0      	blx	r6
 80054e0:	2500      	movs	r5, #0
 80054e2:	1c43      	adds	r3, r0, #1
 80054e4:	d100      	bne.n	80054e8 <_printf_float+0x260>
 80054e6:	e72d      	b.n	8005344 <_printf_float+0xbc>
 80054e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054ea:	3b01      	subs	r3, #1
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	dc0a      	bgt.n	8005506 <_printf_float+0x27e>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	079b      	lsls	r3, r3, #30
 80054f4:	d500      	bpl.n	80054f8 <_printf_float+0x270>
 80054f6:	e106      	b.n	8005706 <_printf_float+0x47e>
 80054f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80054fa:	68e0      	ldr	r0, [r4, #12]
 80054fc:	4298      	cmp	r0, r3
 80054fe:	db00      	blt.n	8005502 <_printf_float+0x27a>
 8005500:	e722      	b.n	8005348 <_printf_float+0xc0>
 8005502:	0018      	movs	r0, r3
 8005504:	e720      	b.n	8005348 <_printf_float+0xc0>
 8005506:	0022      	movs	r2, r4
 8005508:	2301      	movs	r3, #1
 800550a:	0038      	movs	r0, r7
 800550c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800550e:	321a      	adds	r2, #26
 8005510:	47b0      	blx	r6
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	d100      	bne.n	8005518 <_printf_float+0x290>
 8005516:	e715      	b.n	8005344 <_printf_float+0xbc>
 8005518:	3501      	adds	r5, #1
 800551a:	e7e5      	b.n	80054e8 <_printf_float+0x260>
 800551c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800551e:	2b00      	cmp	r3, #0
 8005520:	dc38      	bgt.n	8005594 <_printf_float+0x30c>
 8005522:	2301      	movs	r3, #1
 8005524:	0038      	movs	r0, r7
 8005526:	4a1a      	ldr	r2, [pc, #104]	; (8005590 <_printf_float+0x308>)
 8005528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800552a:	47b0      	blx	r6
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d100      	bne.n	8005532 <_printf_float+0x2aa>
 8005530:	e708      	b.n	8005344 <_printf_float+0xbc>
 8005532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005534:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005536:	4313      	orrs	r3, r2
 8005538:	d102      	bne.n	8005540 <_printf_float+0x2b8>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	07db      	lsls	r3, r3, #31
 800553e:	d5d7      	bpl.n	80054f0 <_printf_float+0x268>
 8005540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005542:	0038      	movs	r0, r7
 8005544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005546:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005548:	47b0      	blx	r6
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d100      	bne.n	8005550 <_printf_float+0x2c8>
 800554e:	e6f9      	b.n	8005344 <_printf_float+0xbc>
 8005550:	2300      	movs	r3, #0
 8005552:	930a      	str	r3, [sp, #40]	; 0x28
 8005554:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005558:	425b      	negs	r3, r3
 800555a:	4293      	cmp	r3, r2
 800555c:	dc01      	bgt.n	8005562 <_printf_float+0x2da>
 800555e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005560:	e797      	b.n	8005492 <_printf_float+0x20a>
 8005562:	0022      	movs	r2, r4
 8005564:	2301      	movs	r3, #1
 8005566:	0038      	movs	r0, r7
 8005568:	9909      	ldr	r1, [sp, #36]	; 0x24
 800556a:	321a      	adds	r2, #26
 800556c:	47b0      	blx	r6
 800556e:	1c43      	adds	r3, r0, #1
 8005570:	d100      	bne.n	8005574 <_printf_float+0x2ec>
 8005572:	e6e7      	b.n	8005344 <_printf_float+0xbc>
 8005574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005576:	3301      	adds	r3, #1
 8005578:	e7eb      	b.n	8005552 <_printf_float+0x2ca>
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	7fefffff 	.word	0x7fefffff
 8005580:	08008334 	.word	0x08008334
 8005584:	08008338 	.word	0x08008338
 8005588:	0800833c 	.word	0x0800833c
 800558c:	08008340 	.word	0x08008340
 8005590:	08008344 	.word	0x08008344
 8005594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005598:	920a      	str	r2, [sp, #40]	; 0x28
 800559a:	429a      	cmp	r2, r3
 800559c:	dd00      	ble.n	80055a0 <_printf_float+0x318>
 800559e:	930a      	str	r3, [sp, #40]	; 0x28
 80055a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	dc3c      	bgt.n	8005620 <_printf_float+0x398>
 80055a6:	2300      	movs	r3, #0
 80055a8:	930d      	str	r3, [sp, #52]	; 0x34
 80055aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ac:	43db      	mvns	r3, r3
 80055ae:	17db      	asrs	r3, r3, #31
 80055b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80055b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80055b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ba:	4013      	ands	r3, r2
 80055bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055c2:	4293      	cmp	r3, r2
 80055c4:	dc34      	bgt.n	8005630 <_printf_float+0x3a8>
 80055c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055ca:	4293      	cmp	r3, r2
 80055cc:	db3d      	blt.n	800564a <_printf_float+0x3c2>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	07db      	lsls	r3, r3, #31
 80055d2:	d43a      	bmi.n	800564a <_printf_float+0x3c2>
 80055d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	1a52      	subs	r2, r2, r1
 80055de:	920a      	str	r2, [sp, #40]	; 0x28
 80055e0:	429a      	cmp	r2, r3
 80055e2:	dd00      	ble.n	80055e6 <_printf_float+0x35e>
 80055e4:	930a      	str	r3, [sp, #40]	; 0x28
 80055e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	dc36      	bgt.n	800565a <_printf_float+0x3d2>
 80055ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ee:	2500      	movs	r5, #0
 80055f0:	43db      	mvns	r3, r3
 80055f2:	17db      	asrs	r3, r3, #31
 80055f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80055f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80055f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005600:	400a      	ands	r2, r1
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	42ab      	cmp	r3, r5
 8005606:	dc00      	bgt.n	800560a <_printf_float+0x382>
 8005608:	e772      	b.n	80054f0 <_printf_float+0x268>
 800560a:	0022      	movs	r2, r4
 800560c:	2301      	movs	r3, #1
 800560e:	0038      	movs	r0, r7
 8005610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005612:	321a      	adds	r2, #26
 8005614:	47b0      	blx	r6
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d100      	bne.n	800561c <_printf_float+0x394>
 800561a:	e693      	b.n	8005344 <_printf_float+0xbc>
 800561c:	3501      	adds	r5, #1
 800561e:	e7ea      	b.n	80055f6 <_printf_float+0x36e>
 8005620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005622:	002a      	movs	r2, r5
 8005624:	0038      	movs	r0, r7
 8005626:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005628:	47b0      	blx	r6
 800562a:	1c43      	adds	r3, r0, #1
 800562c:	d1bb      	bne.n	80055a6 <_printf_float+0x31e>
 800562e:	e689      	b.n	8005344 <_printf_float+0xbc>
 8005630:	0022      	movs	r2, r4
 8005632:	2301      	movs	r3, #1
 8005634:	0038      	movs	r0, r7
 8005636:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005638:	321a      	adds	r2, #26
 800563a:	47b0      	blx	r6
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d100      	bne.n	8005642 <_printf_float+0x3ba>
 8005640:	e680      	b.n	8005344 <_printf_float+0xbc>
 8005642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005644:	3301      	adds	r3, #1
 8005646:	930d      	str	r3, [sp, #52]	; 0x34
 8005648:	e7b3      	b.n	80055b2 <_printf_float+0x32a>
 800564a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800564c:	0038      	movs	r0, r7
 800564e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005650:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005652:	47b0      	blx	r6
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d1bd      	bne.n	80055d4 <_printf_float+0x34c>
 8005658:	e674      	b.n	8005344 <_printf_float+0xbc>
 800565a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800565c:	0038      	movs	r0, r7
 800565e:	18ea      	adds	r2, r5, r3
 8005660:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005664:	47b0      	blx	r6
 8005666:	1c43      	adds	r3, r0, #1
 8005668:	d1c0      	bne.n	80055ec <_printf_float+0x364>
 800566a:	e66b      	b.n	8005344 <_printf_float+0xbc>
 800566c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800566e:	2b01      	cmp	r3, #1
 8005670:	dc02      	bgt.n	8005678 <_printf_float+0x3f0>
 8005672:	2301      	movs	r3, #1
 8005674:	421a      	tst	r2, r3
 8005676:	d034      	beq.n	80056e2 <_printf_float+0x45a>
 8005678:	2301      	movs	r3, #1
 800567a:	002a      	movs	r2, r5
 800567c:	0038      	movs	r0, r7
 800567e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005680:	47b0      	blx	r6
 8005682:	1c43      	adds	r3, r0, #1
 8005684:	d100      	bne.n	8005688 <_printf_float+0x400>
 8005686:	e65d      	b.n	8005344 <_printf_float+0xbc>
 8005688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800568a:	0038      	movs	r0, r7
 800568c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800568e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005690:	47b0      	blx	r6
 8005692:	1c43      	adds	r3, r0, #1
 8005694:	d100      	bne.n	8005698 <_printf_float+0x410>
 8005696:	e655      	b.n	8005344 <_printf_float+0xbc>
 8005698:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800569a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800569c:	2200      	movs	r2, #0
 800569e:	2300      	movs	r3, #0
 80056a0:	f7fa fed4 	bl	800044c <__aeabi_dcmpeq>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d11a      	bne.n	80056de <_printf_float+0x456>
 80056a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056aa:	1c6a      	adds	r2, r5, #1
 80056ac:	3b01      	subs	r3, #1
 80056ae:	0038      	movs	r0, r7
 80056b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056b2:	47b0      	blx	r6
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d10e      	bne.n	80056d6 <_printf_float+0x44e>
 80056b8:	e644      	b.n	8005344 <_printf_float+0xbc>
 80056ba:	0022      	movs	r2, r4
 80056bc:	2301      	movs	r3, #1
 80056be:	0038      	movs	r0, r7
 80056c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056c2:	321a      	adds	r2, #26
 80056c4:	47b0      	blx	r6
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	d100      	bne.n	80056cc <_printf_float+0x444>
 80056ca:	e63b      	b.n	8005344 <_printf_float+0xbc>
 80056cc:	3501      	adds	r5, #1
 80056ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056d0:	3b01      	subs	r3, #1
 80056d2:	42ab      	cmp	r3, r5
 80056d4:	dcf1      	bgt.n	80056ba <_printf_float+0x432>
 80056d6:	0022      	movs	r2, r4
 80056d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056da:	3250      	adds	r2, #80	; 0x50
 80056dc:	e6da      	b.n	8005494 <_printf_float+0x20c>
 80056de:	2500      	movs	r5, #0
 80056e0:	e7f5      	b.n	80056ce <_printf_float+0x446>
 80056e2:	002a      	movs	r2, r5
 80056e4:	e7e3      	b.n	80056ae <_printf_float+0x426>
 80056e6:	0022      	movs	r2, r4
 80056e8:	2301      	movs	r3, #1
 80056ea:	0038      	movs	r0, r7
 80056ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056ee:	3219      	adds	r2, #25
 80056f0:	47b0      	blx	r6
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	d100      	bne.n	80056f8 <_printf_float+0x470>
 80056f6:	e625      	b.n	8005344 <_printf_float+0xbc>
 80056f8:	3501      	adds	r5, #1
 80056fa:	68e3      	ldr	r3, [r4, #12]
 80056fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	42ab      	cmp	r3, r5
 8005702:	dcf0      	bgt.n	80056e6 <_printf_float+0x45e>
 8005704:	e6f8      	b.n	80054f8 <_printf_float+0x270>
 8005706:	2500      	movs	r5, #0
 8005708:	e7f7      	b.n	80056fa <_printf_float+0x472>
 800570a:	46c0      	nop			; (mov r8, r8)

0800570c <_printf_common>:
 800570c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800570e:	0015      	movs	r5, r2
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	688a      	ldr	r2, [r1, #8]
 8005714:	690b      	ldr	r3, [r1, #16]
 8005716:	000c      	movs	r4, r1
 8005718:	9000      	str	r0, [sp, #0]
 800571a:	4293      	cmp	r3, r2
 800571c:	da00      	bge.n	8005720 <_printf_common+0x14>
 800571e:	0013      	movs	r3, r2
 8005720:	0022      	movs	r2, r4
 8005722:	602b      	str	r3, [r5, #0]
 8005724:	3243      	adds	r2, #67	; 0x43
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	2a00      	cmp	r2, #0
 800572a:	d001      	beq.n	8005730 <_printf_common+0x24>
 800572c:	3301      	adds	r3, #1
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	069b      	lsls	r3, r3, #26
 8005734:	d502      	bpl.n	800573c <_printf_common+0x30>
 8005736:	682b      	ldr	r3, [r5, #0]
 8005738:	3302      	adds	r3, #2
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	6822      	ldr	r2, [r4, #0]
 800573e:	2306      	movs	r3, #6
 8005740:	0017      	movs	r7, r2
 8005742:	401f      	ands	r7, r3
 8005744:	421a      	tst	r2, r3
 8005746:	d027      	beq.n	8005798 <_printf_common+0x8c>
 8005748:	0023      	movs	r3, r4
 800574a:	3343      	adds	r3, #67	; 0x43
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	1e5a      	subs	r2, r3, #1
 8005750:	4193      	sbcs	r3, r2
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	0692      	lsls	r2, r2, #26
 8005756:	d430      	bmi.n	80057ba <_printf_common+0xae>
 8005758:	0022      	movs	r2, r4
 800575a:	9901      	ldr	r1, [sp, #4]
 800575c:	9800      	ldr	r0, [sp, #0]
 800575e:	9e08      	ldr	r6, [sp, #32]
 8005760:	3243      	adds	r2, #67	; 0x43
 8005762:	47b0      	blx	r6
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d025      	beq.n	80057b4 <_printf_common+0xa8>
 8005768:	2306      	movs	r3, #6
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	682a      	ldr	r2, [r5, #0]
 800576e:	68e1      	ldr	r1, [r4, #12]
 8005770:	2500      	movs	r5, #0
 8005772:	4003      	ands	r3, r0
 8005774:	2b04      	cmp	r3, #4
 8005776:	d103      	bne.n	8005780 <_printf_common+0x74>
 8005778:	1a8d      	subs	r5, r1, r2
 800577a:	43eb      	mvns	r3, r5
 800577c:	17db      	asrs	r3, r3, #31
 800577e:	401d      	ands	r5, r3
 8005780:	68a3      	ldr	r3, [r4, #8]
 8005782:	6922      	ldr	r2, [r4, #16]
 8005784:	4293      	cmp	r3, r2
 8005786:	dd01      	ble.n	800578c <_printf_common+0x80>
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	18ed      	adds	r5, r5, r3
 800578c:	2700      	movs	r7, #0
 800578e:	42bd      	cmp	r5, r7
 8005790:	d120      	bne.n	80057d4 <_printf_common+0xc8>
 8005792:	2000      	movs	r0, #0
 8005794:	e010      	b.n	80057b8 <_printf_common+0xac>
 8005796:	3701      	adds	r7, #1
 8005798:	68e3      	ldr	r3, [r4, #12]
 800579a:	682a      	ldr	r2, [r5, #0]
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	42bb      	cmp	r3, r7
 80057a0:	ddd2      	ble.n	8005748 <_printf_common+0x3c>
 80057a2:	0022      	movs	r2, r4
 80057a4:	2301      	movs	r3, #1
 80057a6:	9901      	ldr	r1, [sp, #4]
 80057a8:	9800      	ldr	r0, [sp, #0]
 80057aa:	9e08      	ldr	r6, [sp, #32]
 80057ac:	3219      	adds	r2, #25
 80057ae:	47b0      	blx	r6
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d1f0      	bne.n	8005796 <_printf_common+0x8a>
 80057b4:	2001      	movs	r0, #1
 80057b6:	4240      	negs	r0, r0
 80057b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057ba:	2030      	movs	r0, #48	; 0x30
 80057bc:	18e1      	adds	r1, r4, r3
 80057be:	3143      	adds	r1, #67	; 0x43
 80057c0:	7008      	strb	r0, [r1, #0]
 80057c2:	0021      	movs	r1, r4
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	3145      	adds	r1, #69	; 0x45
 80057c8:	7809      	ldrb	r1, [r1, #0]
 80057ca:	18a2      	adds	r2, r4, r2
 80057cc:	3243      	adds	r2, #67	; 0x43
 80057ce:	3302      	adds	r3, #2
 80057d0:	7011      	strb	r1, [r2, #0]
 80057d2:	e7c1      	b.n	8005758 <_printf_common+0x4c>
 80057d4:	0022      	movs	r2, r4
 80057d6:	2301      	movs	r3, #1
 80057d8:	9901      	ldr	r1, [sp, #4]
 80057da:	9800      	ldr	r0, [sp, #0]
 80057dc:	9e08      	ldr	r6, [sp, #32]
 80057de:	321a      	adds	r2, #26
 80057e0:	47b0      	blx	r6
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d0e6      	beq.n	80057b4 <_printf_common+0xa8>
 80057e6:	3701      	adds	r7, #1
 80057e8:	e7d1      	b.n	800578e <_printf_common+0x82>
	...

080057ec <_printf_i>:
 80057ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ee:	b08b      	sub	sp, #44	; 0x2c
 80057f0:	9206      	str	r2, [sp, #24]
 80057f2:	000a      	movs	r2, r1
 80057f4:	3243      	adds	r2, #67	; 0x43
 80057f6:	9307      	str	r3, [sp, #28]
 80057f8:	9005      	str	r0, [sp, #20]
 80057fa:	9204      	str	r2, [sp, #16]
 80057fc:	7e0a      	ldrb	r2, [r1, #24]
 80057fe:	000c      	movs	r4, r1
 8005800:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005802:	2a78      	cmp	r2, #120	; 0x78
 8005804:	d807      	bhi.n	8005816 <_printf_i+0x2a>
 8005806:	2a62      	cmp	r2, #98	; 0x62
 8005808:	d809      	bhi.n	800581e <_printf_i+0x32>
 800580a:	2a00      	cmp	r2, #0
 800580c:	d100      	bne.n	8005810 <_printf_i+0x24>
 800580e:	e0c1      	b.n	8005994 <_printf_i+0x1a8>
 8005810:	2a58      	cmp	r2, #88	; 0x58
 8005812:	d100      	bne.n	8005816 <_printf_i+0x2a>
 8005814:	e08c      	b.n	8005930 <_printf_i+0x144>
 8005816:	0026      	movs	r6, r4
 8005818:	3642      	adds	r6, #66	; 0x42
 800581a:	7032      	strb	r2, [r6, #0]
 800581c:	e022      	b.n	8005864 <_printf_i+0x78>
 800581e:	0010      	movs	r0, r2
 8005820:	3863      	subs	r0, #99	; 0x63
 8005822:	2815      	cmp	r0, #21
 8005824:	d8f7      	bhi.n	8005816 <_printf_i+0x2a>
 8005826:	f7fa fc81 	bl	800012c <__gnu_thumb1_case_shi>
 800582a:	0016      	.short	0x0016
 800582c:	fff6001f 	.word	0xfff6001f
 8005830:	fff6fff6 	.word	0xfff6fff6
 8005834:	001ffff6 	.word	0x001ffff6
 8005838:	fff6fff6 	.word	0xfff6fff6
 800583c:	fff6fff6 	.word	0xfff6fff6
 8005840:	003600a8 	.word	0x003600a8
 8005844:	fff6009a 	.word	0xfff6009a
 8005848:	00b9fff6 	.word	0x00b9fff6
 800584c:	0036fff6 	.word	0x0036fff6
 8005850:	fff6fff6 	.word	0xfff6fff6
 8005854:	009e      	.short	0x009e
 8005856:	0026      	movs	r6, r4
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	3642      	adds	r6, #66	; 0x42
 800585c:	1d11      	adds	r1, r2, #4
 800585e:	6019      	str	r1, [r3, #0]
 8005860:	6813      	ldr	r3, [r2, #0]
 8005862:	7033      	strb	r3, [r6, #0]
 8005864:	2301      	movs	r3, #1
 8005866:	e0a7      	b.n	80059b8 <_printf_i+0x1cc>
 8005868:	6808      	ldr	r0, [r1, #0]
 800586a:	6819      	ldr	r1, [r3, #0]
 800586c:	1d0a      	adds	r2, r1, #4
 800586e:	0605      	lsls	r5, r0, #24
 8005870:	d50b      	bpl.n	800588a <_printf_i+0x9e>
 8005872:	680d      	ldr	r5, [r1, #0]
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	2d00      	cmp	r5, #0
 8005878:	da03      	bge.n	8005882 <_printf_i+0x96>
 800587a:	232d      	movs	r3, #45	; 0x2d
 800587c:	9a04      	ldr	r2, [sp, #16]
 800587e:	426d      	negs	r5, r5
 8005880:	7013      	strb	r3, [r2, #0]
 8005882:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <_printf_i+0x21c>)
 8005884:	270a      	movs	r7, #10
 8005886:	9303      	str	r3, [sp, #12]
 8005888:	e01b      	b.n	80058c2 <_printf_i+0xd6>
 800588a:	680d      	ldr	r5, [r1, #0]
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	0641      	lsls	r1, r0, #25
 8005890:	d5f1      	bpl.n	8005876 <_printf_i+0x8a>
 8005892:	b22d      	sxth	r5, r5
 8005894:	e7ef      	b.n	8005876 <_printf_i+0x8a>
 8005896:	680d      	ldr	r5, [r1, #0]
 8005898:	6819      	ldr	r1, [r3, #0]
 800589a:	1d08      	adds	r0, r1, #4
 800589c:	6018      	str	r0, [r3, #0]
 800589e:	062e      	lsls	r6, r5, #24
 80058a0:	d501      	bpl.n	80058a6 <_printf_i+0xba>
 80058a2:	680d      	ldr	r5, [r1, #0]
 80058a4:	e003      	b.n	80058ae <_printf_i+0xc2>
 80058a6:	066d      	lsls	r5, r5, #25
 80058a8:	d5fb      	bpl.n	80058a2 <_printf_i+0xb6>
 80058aa:	680d      	ldr	r5, [r1, #0]
 80058ac:	b2ad      	uxth	r5, r5
 80058ae:	4b56      	ldr	r3, [pc, #344]	; (8005a08 <_printf_i+0x21c>)
 80058b0:	2708      	movs	r7, #8
 80058b2:	9303      	str	r3, [sp, #12]
 80058b4:	2a6f      	cmp	r2, #111	; 0x6f
 80058b6:	d000      	beq.n	80058ba <_printf_i+0xce>
 80058b8:	3702      	adds	r7, #2
 80058ba:	0023      	movs	r3, r4
 80058bc:	2200      	movs	r2, #0
 80058be:	3343      	adds	r3, #67	; 0x43
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	6863      	ldr	r3, [r4, #4]
 80058c4:	60a3      	str	r3, [r4, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	db03      	blt.n	80058d2 <_printf_i+0xe6>
 80058ca:	2204      	movs	r2, #4
 80058cc:	6821      	ldr	r1, [r4, #0]
 80058ce:	4391      	bics	r1, r2
 80058d0:	6021      	str	r1, [r4, #0]
 80058d2:	2d00      	cmp	r5, #0
 80058d4:	d102      	bne.n	80058dc <_printf_i+0xf0>
 80058d6:	9e04      	ldr	r6, [sp, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <_printf_i+0x10a>
 80058dc:	9e04      	ldr	r6, [sp, #16]
 80058de:	0028      	movs	r0, r5
 80058e0:	0039      	movs	r1, r7
 80058e2:	f7fa fcb3 	bl	800024c <__aeabi_uidivmod>
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	3e01      	subs	r6, #1
 80058ea:	5c5b      	ldrb	r3, [r3, r1]
 80058ec:	7033      	strb	r3, [r6, #0]
 80058ee:	002b      	movs	r3, r5
 80058f0:	0005      	movs	r5, r0
 80058f2:	429f      	cmp	r7, r3
 80058f4:	d9f3      	bls.n	80058de <_printf_i+0xf2>
 80058f6:	2f08      	cmp	r7, #8
 80058f8:	d109      	bne.n	800590e <_printf_i+0x122>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	07db      	lsls	r3, r3, #31
 80058fe:	d506      	bpl.n	800590e <_printf_i+0x122>
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	6922      	ldr	r2, [r4, #16]
 8005904:	4293      	cmp	r3, r2
 8005906:	dc02      	bgt.n	800590e <_printf_i+0x122>
 8005908:	2330      	movs	r3, #48	; 0x30
 800590a:	3e01      	subs	r6, #1
 800590c:	7033      	strb	r3, [r6, #0]
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	1b9b      	subs	r3, r3, r6
 8005912:	6123      	str	r3, [r4, #16]
 8005914:	9b07      	ldr	r3, [sp, #28]
 8005916:	0021      	movs	r1, r4
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	9805      	ldr	r0, [sp, #20]
 800591c:	9b06      	ldr	r3, [sp, #24]
 800591e:	aa09      	add	r2, sp, #36	; 0x24
 8005920:	f7ff fef4 	bl	800570c <_printf_common>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d14c      	bne.n	80059c2 <_printf_i+0x1d6>
 8005928:	2001      	movs	r0, #1
 800592a:	4240      	negs	r0, r0
 800592c:	b00b      	add	sp, #44	; 0x2c
 800592e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005930:	3145      	adds	r1, #69	; 0x45
 8005932:	700a      	strb	r2, [r1, #0]
 8005934:	4a34      	ldr	r2, [pc, #208]	; (8005a08 <_printf_i+0x21c>)
 8005936:	9203      	str	r2, [sp, #12]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	6821      	ldr	r1, [r4, #0]
 800593c:	ca20      	ldmia	r2!, {r5}
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	0608      	lsls	r0, r1, #24
 8005942:	d516      	bpl.n	8005972 <_printf_i+0x186>
 8005944:	07cb      	lsls	r3, r1, #31
 8005946:	d502      	bpl.n	800594e <_printf_i+0x162>
 8005948:	2320      	movs	r3, #32
 800594a:	4319      	orrs	r1, r3
 800594c:	6021      	str	r1, [r4, #0]
 800594e:	2710      	movs	r7, #16
 8005950:	2d00      	cmp	r5, #0
 8005952:	d1b2      	bne.n	80058ba <_printf_i+0xce>
 8005954:	2320      	movs	r3, #32
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	439a      	bics	r2, r3
 800595a:	6022      	str	r2, [r4, #0]
 800595c:	e7ad      	b.n	80058ba <_printf_i+0xce>
 800595e:	2220      	movs	r2, #32
 8005960:	6809      	ldr	r1, [r1, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	6022      	str	r2, [r4, #0]
 8005966:	0022      	movs	r2, r4
 8005968:	2178      	movs	r1, #120	; 0x78
 800596a:	3245      	adds	r2, #69	; 0x45
 800596c:	7011      	strb	r1, [r2, #0]
 800596e:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <_printf_i+0x220>)
 8005970:	e7e1      	b.n	8005936 <_printf_i+0x14a>
 8005972:	0648      	lsls	r0, r1, #25
 8005974:	d5e6      	bpl.n	8005944 <_printf_i+0x158>
 8005976:	b2ad      	uxth	r5, r5
 8005978:	e7e4      	b.n	8005944 <_printf_i+0x158>
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	680d      	ldr	r5, [r1, #0]
 800597e:	1d10      	adds	r0, r2, #4
 8005980:	6949      	ldr	r1, [r1, #20]
 8005982:	6018      	str	r0, [r3, #0]
 8005984:	6813      	ldr	r3, [r2, #0]
 8005986:	062e      	lsls	r6, r5, #24
 8005988:	d501      	bpl.n	800598e <_printf_i+0x1a2>
 800598a:	6019      	str	r1, [r3, #0]
 800598c:	e002      	b.n	8005994 <_printf_i+0x1a8>
 800598e:	066d      	lsls	r5, r5, #25
 8005990:	d5fb      	bpl.n	800598a <_printf_i+0x19e>
 8005992:	8019      	strh	r1, [r3, #0]
 8005994:	2300      	movs	r3, #0
 8005996:	9e04      	ldr	r6, [sp, #16]
 8005998:	6123      	str	r3, [r4, #16]
 800599a:	e7bb      	b.n	8005914 <_printf_i+0x128>
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	1d11      	adds	r1, r2, #4
 80059a0:	6019      	str	r1, [r3, #0]
 80059a2:	6816      	ldr	r6, [r2, #0]
 80059a4:	2100      	movs	r1, #0
 80059a6:	0030      	movs	r0, r6
 80059a8:	6862      	ldr	r2, [r4, #4]
 80059aa:	f000 ff1d 	bl	80067e8 <memchr>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d001      	beq.n	80059b6 <_printf_i+0x1ca>
 80059b2:	1b80      	subs	r0, r0, r6
 80059b4:	6060      	str	r0, [r4, #4]
 80059b6:	6863      	ldr	r3, [r4, #4]
 80059b8:	6123      	str	r3, [r4, #16]
 80059ba:	2300      	movs	r3, #0
 80059bc:	9a04      	ldr	r2, [sp, #16]
 80059be:	7013      	strb	r3, [r2, #0]
 80059c0:	e7a8      	b.n	8005914 <_printf_i+0x128>
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	0032      	movs	r2, r6
 80059c6:	9906      	ldr	r1, [sp, #24]
 80059c8:	9805      	ldr	r0, [sp, #20]
 80059ca:	9d07      	ldr	r5, [sp, #28]
 80059cc:	47a8      	blx	r5
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	d0aa      	beq.n	8005928 <_printf_i+0x13c>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	079b      	lsls	r3, r3, #30
 80059d6:	d415      	bmi.n	8005a04 <_printf_i+0x218>
 80059d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059da:	68e0      	ldr	r0, [r4, #12]
 80059dc:	4298      	cmp	r0, r3
 80059de:	daa5      	bge.n	800592c <_printf_i+0x140>
 80059e0:	0018      	movs	r0, r3
 80059e2:	e7a3      	b.n	800592c <_printf_i+0x140>
 80059e4:	0022      	movs	r2, r4
 80059e6:	2301      	movs	r3, #1
 80059e8:	9906      	ldr	r1, [sp, #24]
 80059ea:	9805      	ldr	r0, [sp, #20]
 80059ec:	9e07      	ldr	r6, [sp, #28]
 80059ee:	3219      	adds	r2, #25
 80059f0:	47b0      	blx	r6
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d098      	beq.n	8005928 <_printf_i+0x13c>
 80059f6:	3501      	adds	r5, #1
 80059f8:	68e3      	ldr	r3, [r4, #12]
 80059fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	42ab      	cmp	r3, r5
 8005a00:	dcf0      	bgt.n	80059e4 <_printf_i+0x1f8>
 8005a02:	e7e9      	b.n	80059d8 <_printf_i+0x1ec>
 8005a04:	2500      	movs	r5, #0
 8005a06:	e7f7      	b.n	80059f8 <_printf_i+0x20c>
 8005a08:	08008346 	.word	0x08008346
 8005a0c:	08008357 	.word	0x08008357

08005a10 <_vsniprintf_r>:
 8005a10:	b530      	push	{r4, r5, lr}
 8005a12:	0014      	movs	r4, r2
 8005a14:	0005      	movs	r5, r0
 8005a16:	001a      	movs	r2, r3
 8005a18:	b09b      	sub	sp, #108	; 0x6c
 8005a1a:	2c00      	cmp	r4, #0
 8005a1c:	da05      	bge.n	8005a2a <_vsniprintf_r+0x1a>
 8005a1e:	238b      	movs	r3, #139	; 0x8b
 8005a20:	6003      	str	r3, [r0, #0]
 8005a22:	2001      	movs	r0, #1
 8005a24:	4240      	negs	r0, r0
 8005a26:	b01b      	add	sp, #108	; 0x6c
 8005a28:	bd30      	pop	{r4, r5, pc}
 8005a2a:	2382      	movs	r3, #130	; 0x82
 8005a2c:	4668      	mov	r0, sp
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	8183      	strh	r3, [r0, #12]
 8005a32:	2300      	movs	r3, #0
 8005a34:	9100      	str	r1, [sp, #0]
 8005a36:	9104      	str	r1, [sp, #16]
 8005a38:	429c      	cmp	r4, r3
 8005a3a:	d000      	beq.n	8005a3e <_vsniprintf_r+0x2e>
 8005a3c:	1e63      	subs	r3, r4, #1
 8005a3e:	9302      	str	r3, [sp, #8]
 8005a40:	9305      	str	r3, [sp, #20]
 8005a42:	2301      	movs	r3, #1
 8005a44:	4669      	mov	r1, sp
 8005a46:	425b      	negs	r3, r3
 8005a48:	81cb      	strh	r3, [r1, #14]
 8005a4a:	0028      	movs	r0, r5
 8005a4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a4e:	f001 fbeb 	bl	8007228 <_svfiprintf_r>
 8005a52:	1c43      	adds	r3, r0, #1
 8005a54:	da01      	bge.n	8005a5a <_vsniprintf_r+0x4a>
 8005a56:	238b      	movs	r3, #139	; 0x8b
 8005a58:	602b      	str	r3, [r5, #0]
 8005a5a:	2c00      	cmp	r4, #0
 8005a5c:	d0e3      	beq.n	8005a26 <_vsniprintf_r+0x16>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9a00      	ldr	r2, [sp, #0]
 8005a62:	7013      	strb	r3, [r2, #0]
 8005a64:	e7df      	b.n	8005a26 <_vsniprintf_r+0x16>
	...

08005a68 <vsniprintf>:
 8005a68:	b507      	push	{r0, r1, r2, lr}
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	0013      	movs	r3, r2
 8005a6e:	000a      	movs	r2, r1
 8005a70:	0001      	movs	r1, r0
 8005a72:	4802      	ldr	r0, [pc, #8]	; (8005a7c <vsniprintf+0x14>)
 8005a74:	6800      	ldr	r0, [r0, #0]
 8005a76:	f7ff ffcb 	bl	8005a10 <_vsniprintf_r>
 8005a7a:	bd0e      	pop	{r1, r2, r3, pc}
 8005a7c:	20000050 	.word	0x20000050

08005a80 <quorem>:
 8005a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a82:	0006      	movs	r6, r0
 8005a84:	690b      	ldr	r3, [r1, #16]
 8005a86:	6932      	ldr	r2, [r6, #16]
 8005a88:	b087      	sub	sp, #28
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	9103      	str	r1, [sp, #12]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	db65      	blt.n	8005b5e <quorem+0xde>
 8005a92:	3b01      	subs	r3, #1
 8005a94:	009c      	lsls	r4, r3, #2
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	000b      	movs	r3, r1
 8005a9a:	3314      	adds	r3, #20
 8005a9c:	9305      	str	r3, [sp, #20]
 8005a9e:	191b      	adds	r3, r3, r4
 8005aa0:	9304      	str	r3, [sp, #16]
 8005aa2:	0033      	movs	r3, r6
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	9302      	str	r3, [sp, #8]
 8005aa8:	191c      	adds	r4, r3, r4
 8005aaa:	9b04      	ldr	r3, [sp, #16]
 8005aac:	6827      	ldr	r7, [r4, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	0038      	movs	r0, r7
 8005ab2:	1c5d      	adds	r5, r3, #1
 8005ab4:	0029      	movs	r1, r5
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	f7fa fb42 	bl	8000140 <__udivsi3>
 8005abc:	9001      	str	r0, [sp, #4]
 8005abe:	42af      	cmp	r7, r5
 8005ac0:	d324      	bcc.n	8005b0c <quorem+0x8c>
 8005ac2:	2500      	movs	r5, #0
 8005ac4:	46ac      	mov	ip, r5
 8005ac6:	9802      	ldr	r0, [sp, #8]
 8005ac8:	9f05      	ldr	r7, [sp, #20]
 8005aca:	cf08      	ldmia	r7!, {r3}
 8005acc:	9a01      	ldr	r2, [sp, #4]
 8005ace:	b299      	uxth	r1, r3
 8005ad0:	4351      	muls	r1, r2
 8005ad2:	0c1b      	lsrs	r3, r3, #16
 8005ad4:	4353      	muls	r3, r2
 8005ad6:	1949      	adds	r1, r1, r5
 8005ad8:	0c0a      	lsrs	r2, r1, #16
 8005ada:	189b      	adds	r3, r3, r2
 8005adc:	6802      	ldr	r2, [r0, #0]
 8005ade:	b289      	uxth	r1, r1
 8005ae0:	b292      	uxth	r2, r2
 8005ae2:	4462      	add	r2, ip
 8005ae4:	1a52      	subs	r2, r2, r1
 8005ae6:	6801      	ldr	r1, [r0, #0]
 8005ae8:	0c1d      	lsrs	r5, r3, #16
 8005aea:	0c09      	lsrs	r1, r1, #16
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	1acb      	subs	r3, r1, r3
 8005af0:	1411      	asrs	r1, r2, #16
 8005af2:	185b      	adds	r3, r3, r1
 8005af4:	1419      	asrs	r1, r3, #16
 8005af6:	b292      	uxth	r2, r2
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	431a      	orrs	r2, r3
 8005afc:	9b04      	ldr	r3, [sp, #16]
 8005afe:	468c      	mov	ip, r1
 8005b00:	c004      	stmia	r0!, {r2}
 8005b02:	42bb      	cmp	r3, r7
 8005b04:	d2e1      	bcs.n	8005aca <quorem+0x4a>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d030      	beq.n	8005b6e <quorem+0xee>
 8005b0c:	0030      	movs	r0, r6
 8005b0e:	9903      	ldr	r1, [sp, #12]
 8005b10:	f001 f902 	bl	8006d18 <__mcmp>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	db21      	blt.n	8005b5c <quorem+0xdc>
 8005b18:	0030      	movs	r0, r6
 8005b1a:	2400      	movs	r4, #0
 8005b1c:	9b01      	ldr	r3, [sp, #4]
 8005b1e:	9903      	ldr	r1, [sp, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	3014      	adds	r0, #20
 8005b26:	3114      	adds	r1, #20
 8005b28:	6803      	ldr	r3, [r0, #0]
 8005b2a:	c920      	ldmia	r1!, {r5}
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	1914      	adds	r4, r2, r4
 8005b30:	b2aa      	uxth	r2, r5
 8005b32:	1aa2      	subs	r2, r4, r2
 8005b34:	0c1b      	lsrs	r3, r3, #16
 8005b36:	0c2d      	lsrs	r5, r5, #16
 8005b38:	1414      	asrs	r4, r2, #16
 8005b3a:	1b5b      	subs	r3, r3, r5
 8005b3c:	191b      	adds	r3, r3, r4
 8005b3e:	141c      	asrs	r4, r3, #16
 8005b40:	b292      	uxth	r2, r2
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	4313      	orrs	r3, r2
 8005b46:	c008      	stmia	r0!, {r3}
 8005b48:	9b04      	ldr	r3, [sp, #16]
 8005b4a:	428b      	cmp	r3, r1
 8005b4c:	d2ec      	bcs.n	8005b28 <quorem+0xa8>
 8005b4e:	9b00      	ldr	r3, [sp, #0]
 8005b50:	9a02      	ldr	r2, [sp, #8]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	18d3      	adds	r3, r2, r3
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	2a00      	cmp	r2, #0
 8005b5a:	d015      	beq.n	8005b88 <quorem+0x108>
 8005b5c:	9801      	ldr	r0, [sp, #4]
 8005b5e:	b007      	add	sp, #28
 8005b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d106      	bne.n	8005b76 <quorem+0xf6>
 8005b68:	9b00      	ldr	r3, [sp, #0]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	9b02      	ldr	r3, [sp, #8]
 8005b70:	3c04      	subs	r4, #4
 8005b72:	42a3      	cmp	r3, r4
 8005b74:	d3f5      	bcc.n	8005b62 <quorem+0xe2>
 8005b76:	9b00      	ldr	r3, [sp, #0]
 8005b78:	6133      	str	r3, [r6, #16]
 8005b7a:	e7c7      	b.n	8005b0c <quorem+0x8c>
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	2a00      	cmp	r2, #0
 8005b80:	d106      	bne.n	8005b90 <quorem+0x110>
 8005b82:	9a00      	ldr	r2, [sp, #0]
 8005b84:	3a01      	subs	r2, #1
 8005b86:	9200      	str	r2, [sp, #0]
 8005b88:	9a02      	ldr	r2, [sp, #8]
 8005b8a:	3b04      	subs	r3, #4
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d3f5      	bcc.n	8005b7c <quorem+0xfc>
 8005b90:	9b00      	ldr	r3, [sp, #0]
 8005b92:	6133      	str	r3, [r6, #16]
 8005b94:	e7e2      	b.n	8005b5c <quorem+0xdc>
	...

08005b98 <_dtoa_r>:
 8005b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b9a:	b09d      	sub	sp, #116	; 0x74
 8005b9c:	9202      	str	r2, [sp, #8]
 8005b9e:	9303      	str	r3, [sp, #12]
 8005ba0:	9b02      	ldr	r3, [sp, #8]
 8005ba2:	9c03      	ldr	r4, [sp, #12]
 8005ba4:	9308      	str	r3, [sp, #32]
 8005ba6:	9409      	str	r4, [sp, #36]	; 0x24
 8005ba8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005baa:	0007      	movs	r7, r0
 8005bac:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8005bae:	2c00      	cmp	r4, #0
 8005bb0:	d10e      	bne.n	8005bd0 <_dtoa_r+0x38>
 8005bb2:	2010      	movs	r0, #16
 8005bb4:	f000 fe0e 	bl	80067d4 <malloc>
 8005bb8:	1e02      	subs	r2, r0, #0
 8005bba:	6278      	str	r0, [r7, #36]	; 0x24
 8005bbc:	d104      	bne.n	8005bc8 <_dtoa_r+0x30>
 8005bbe:	21ea      	movs	r1, #234	; 0xea
 8005bc0:	4bc7      	ldr	r3, [pc, #796]	; (8005ee0 <_dtoa_r+0x348>)
 8005bc2:	48c8      	ldr	r0, [pc, #800]	; (8005ee4 <_dtoa_r+0x34c>)
 8005bc4:	f001 fc42 	bl	800744c <__assert_func>
 8005bc8:	6044      	str	r4, [r0, #4]
 8005bca:	6084      	str	r4, [r0, #8]
 8005bcc:	6004      	str	r4, [r0, #0]
 8005bce:	60c4      	str	r4, [r0, #12]
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	6819      	ldr	r1, [r3, #0]
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	d00a      	beq.n	8005bee <_dtoa_r+0x56>
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4093      	lsls	r3, r2
 8005bde:	604a      	str	r2, [r1, #4]
 8005be0:	608b      	str	r3, [r1, #8]
 8005be2:	0038      	movs	r0, r7
 8005be4:	f000 fe58 	bl	8006898 <_Bfree>
 8005be8:	2200      	movs	r2, #0
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	9b03      	ldr	r3, [sp, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	da20      	bge.n	8005c36 <_dtoa_r+0x9e>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	602b      	str	r3, [r5, #0]
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005c00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c02:	4bb9      	ldr	r3, [pc, #740]	; (8005ee8 <_dtoa_r+0x350>)
 8005c04:	4ab8      	ldr	r2, [pc, #736]	; (8005ee8 <_dtoa_r+0x350>)
 8005c06:	402b      	ands	r3, r5
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d117      	bne.n	8005c3c <_dtoa_r+0xa4>
 8005c0c:	4bb7      	ldr	r3, [pc, #732]	; (8005eec <_dtoa_r+0x354>)
 8005c0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c10:	0328      	lsls	r0, r5, #12
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	9b02      	ldr	r3, [sp, #8]
 8005c16:	0b00      	lsrs	r0, r0, #12
 8005c18:	4318      	orrs	r0, r3
 8005c1a:	d101      	bne.n	8005c20 <_dtoa_r+0x88>
 8005c1c:	f000 fdbf 	bl	800679e <_dtoa_r+0xc06>
 8005c20:	48b3      	ldr	r0, [pc, #716]	; (8005ef0 <_dtoa_r+0x358>)
 8005c22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c24:	9006      	str	r0, [sp, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <_dtoa_r+0x98>
 8005c2a:	4bb2      	ldr	r3, [pc, #712]	; (8005ef4 <_dtoa_r+0x35c>)
 8005c2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	9806      	ldr	r0, [sp, #24]
 8005c32:	b01d      	add	sp, #116	; 0x74
 8005c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c36:	2300      	movs	r3, #0
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	e7e1      	b.n	8005c00 <_dtoa_r+0x68>
 8005c3c:	9b08      	ldr	r3, [sp, #32]
 8005c3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005c40:	9312      	str	r3, [sp, #72]	; 0x48
 8005c42:	9413      	str	r4, [sp, #76]	; 0x4c
 8005c44:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005c46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f7fa fbfe 	bl	800044c <__aeabi_dcmpeq>
 8005c50:	1e04      	subs	r4, r0, #0
 8005c52:	d009      	beq.n	8005c68 <_dtoa_r+0xd0>
 8005c54:	2301      	movs	r3, #1
 8005c56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	4ba7      	ldr	r3, [pc, #668]	; (8005ef8 <_dtoa_r+0x360>)
 8005c5c:	9306      	str	r3, [sp, #24]
 8005c5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0e5      	beq.n	8005c30 <_dtoa_r+0x98>
 8005c64:	4ba5      	ldr	r3, [pc, #660]	; (8005efc <_dtoa_r+0x364>)
 8005c66:	e7e1      	b.n	8005c2c <_dtoa_r+0x94>
 8005c68:	ab1a      	add	r3, sp, #104	; 0x68
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	ab1b      	add	r3, sp, #108	; 0x6c
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	0038      	movs	r0, r7
 8005c72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c76:	f001 f903 	bl	8006e80 <__d2b>
 8005c7a:	006e      	lsls	r6, r5, #1
 8005c7c:	9005      	str	r0, [sp, #20]
 8005c7e:	0d76      	lsrs	r6, r6, #21
 8005c80:	d100      	bne.n	8005c84 <_dtoa_r+0xec>
 8005c82:	e07c      	b.n	8005d7e <_dtoa_r+0x1e6>
 8005c84:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005c86:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005c88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c8a:	4a9d      	ldr	r2, [pc, #628]	; (8005f00 <_dtoa_r+0x368>)
 8005c8c:	031b      	lsls	r3, r3, #12
 8005c8e:	0b1b      	lsrs	r3, r3, #12
 8005c90:	431a      	orrs	r2, r3
 8005c92:	0011      	movs	r1, r2
 8005c94:	4b9b      	ldr	r3, [pc, #620]	; (8005f04 <_dtoa_r+0x36c>)
 8005c96:	9418      	str	r4, [sp, #96]	; 0x60
 8005c98:	18f6      	adds	r6, r6, r3
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4b9a      	ldr	r3, [pc, #616]	; (8005f08 <_dtoa_r+0x370>)
 8005c9e:	f7fb fdcb 	bl	8001838 <__aeabi_dsub>
 8005ca2:	4a9a      	ldr	r2, [pc, #616]	; (8005f0c <_dtoa_r+0x374>)
 8005ca4:	4b9a      	ldr	r3, [pc, #616]	; (8005f10 <_dtoa_r+0x378>)
 8005ca6:	f7fb fb5b 	bl	8001360 <__aeabi_dmul>
 8005caa:	4a9a      	ldr	r2, [pc, #616]	; (8005f14 <_dtoa_r+0x37c>)
 8005cac:	4b9a      	ldr	r3, [pc, #616]	; (8005f18 <_dtoa_r+0x380>)
 8005cae:	f7fa fc19 	bl	80004e4 <__aeabi_dadd>
 8005cb2:	0004      	movs	r4, r0
 8005cb4:	0030      	movs	r0, r6
 8005cb6:	000d      	movs	r5, r1
 8005cb8:	f7fc f9a4 	bl	8002004 <__aeabi_i2d>
 8005cbc:	4a97      	ldr	r2, [pc, #604]	; (8005f1c <_dtoa_r+0x384>)
 8005cbe:	4b98      	ldr	r3, [pc, #608]	; (8005f20 <_dtoa_r+0x388>)
 8005cc0:	f7fb fb4e 	bl	8001360 <__aeabi_dmul>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	000b      	movs	r3, r1
 8005cc8:	0020      	movs	r0, r4
 8005cca:	0029      	movs	r1, r5
 8005ccc:	f7fa fc0a 	bl	80004e4 <__aeabi_dadd>
 8005cd0:	0004      	movs	r4, r0
 8005cd2:	000d      	movs	r5, r1
 8005cd4:	f7fc f960 	bl	8001f98 <__aeabi_d2iz>
 8005cd8:	2200      	movs	r2, #0
 8005cda:	9002      	str	r0, [sp, #8]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	0020      	movs	r0, r4
 8005ce0:	0029      	movs	r1, r5
 8005ce2:	f7fa fbb9 	bl	8000458 <__aeabi_dcmplt>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d00b      	beq.n	8005d02 <_dtoa_r+0x16a>
 8005cea:	9802      	ldr	r0, [sp, #8]
 8005cec:	f7fc f98a 	bl	8002004 <__aeabi_i2d>
 8005cf0:	002b      	movs	r3, r5
 8005cf2:	0022      	movs	r2, r4
 8005cf4:	f7fa fbaa 	bl	800044c <__aeabi_dcmpeq>
 8005cf8:	4243      	negs	r3, r0
 8005cfa:	4158      	adcs	r0, r3
 8005cfc:	9b02      	ldr	r3, [sp, #8]
 8005cfe:	1a1b      	subs	r3, r3, r0
 8005d00:	9302      	str	r3, [sp, #8]
 8005d02:	2301      	movs	r3, #1
 8005d04:	9316      	str	r3, [sp, #88]	; 0x58
 8005d06:	9b02      	ldr	r3, [sp, #8]
 8005d08:	2b16      	cmp	r3, #22
 8005d0a:	d80f      	bhi.n	8005d2c <_dtoa_r+0x194>
 8005d0c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005d0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005d10:	00da      	lsls	r2, r3, #3
 8005d12:	4b84      	ldr	r3, [pc, #528]	; (8005f24 <_dtoa_r+0x38c>)
 8005d14:	189b      	adds	r3, r3, r2
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f7fa fb9d 	bl	8000458 <__aeabi_dcmplt>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d049      	beq.n	8005db6 <_dtoa_r+0x21e>
 8005d22:	9b02      	ldr	r3, [sp, #8]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	9302      	str	r3, [sp, #8]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9316      	str	r3, [sp, #88]	; 0x58
 8005d2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d2e:	1b9e      	subs	r6, r3, r6
 8005d30:	2300      	movs	r3, #0
 8005d32:	930a      	str	r3, [sp, #40]	; 0x28
 8005d34:	0033      	movs	r3, r6
 8005d36:	3b01      	subs	r3, #1
 8005d38:	930d      	str	r3, [sp, #52]	; 0x34
 8005d3a:	d504      	bpl.n	8005d46 <_dtoa_r+0x1ae>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	1b9b      	subs	r3, r3, r6
 8005d40:	930a      	str	r3, [sp, #40]	; 0x28
 8005d42:	2300      	movs	r3, #0
 8005d44:	930d      	str	r3, [sp, #52]	; 0x34
 8005d46:	9b02      	ldr	r3, [sp, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	db36      	blt.n	8005dba <_dtoa_r+0x222>
 8005d4c:	9a02      	ldr	r2, [sp, #8]
 8005d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d50:	4694      	mov	ip, r2
 8005d52:	4463      	add	r3, ip
 8005d54:	930d      	str	r3, [sp, #52]	; 0x34
 8005d56:	2300      	movs	r3, #0
 8005d58:	9215      	str	r2, [sp, #84]	; 0x54
 8005d5a:	930e      	str	r3, [sp, #56]	; 0x38
 8005d5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d5e:	2401      	movs	r4, #1
 8005d60:	2b09      	cmp	r3, #9
 8005d62:	d864      	bhi.n	8005e2e <_dtoa_r+0x296>
 8005d64:	2b05      	cmp	r3, #5
 8005d66:	dd02      	ble.n	8005d6e <_dtoa_r+0x1d6>
 8005d68:	2400      	movs	r4, #0
 8005d6a:	3b04      	subs	r3, #4
 8005d6c:	9322      	str	r3, [sp, #136]	; 0x88
 8005d6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d70:	1e98      	subs	r0, r3, #2
 8005d72:	2803      	cmp	r0, #3
 8005d74:	d864      	bhi.n	8005e40 <_dtoa_r+0x2a8>
 8005d76:	f7fa f9cf 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005d7a:	3829      	.short	0x3829
 8005d7c:	5836      	.short	0x5836
 8005d7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005d82:	189e      	adds	r6, r3, r2
 8005d84:	4b68      	ldr	r3, [pc, #416]	; (8005f28 <_dtoa_r+0x390>)
 8005d86:	18f2      	adds	r2, r6, r3
 8005d88:	2a20      	cmp	r2, #32
 8005d8a:	dd0f      	ble.n	8005dac <_dtoa_r+0x214>
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	409d      	lsls	r5, r3
 8005d92:	4b66      	ldr	r3, [pc, #408]	; (8005f2c <_dtoa_r+0x394>)
 8005d94:	9802      	ldr	r0, [sp, #8]
 8005d96:	18f3      	adds	r3, r6, r3
 8005d98:	40d8      	lsrs	r0, r3
 8005d9a:	4328      	orrs	r0, r5
 8005d9c:	f7fc f962 	bl	8002064 <__aeabi_ui2d>
 8005da0:	2301      	movs	r3, #1
 8005da2:	4c63      	ldr	r4, [pc, #396]	; (8005f30 <_dtoa_r+0x398>)
 8005da4:	3e01      	subs	r6, #1
 8005da6:	1909      	adds	r1, r1, r4
 8005da8:	9318      	str	r3, [sp, #96]	; 0x60
 8005daa:	e776      	b.n	8005c9a <_dtoa_r+0x102>
 8005dac:	2320      	movs	r3, #32
 8005dae:	9802      	ldr	r0, [sp, #8]
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	4098      	lsls	r0, r3
 8005db4:	e7f2      	b.n	8005d9c <_dtoa_r+0x204>
 8005db6:	9016      	str	r0, [sp, #88]	; 0x58
 8005db8:	e7b8      	b.n	8005d2c <_dtoa_r+0x194>
 8005dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dbc:	9a02      	ldr	r2, [sp, #8]
 8005dbe:	1a9b      	subs	r3, r3, r2
 8005dc0:	930a      	str	r3, [sp, #40]	; 0x28
 8005dc2:	4253      	negs	r3, r2
 8005dc4:	930e      	str	r3, [sp, #56]	; 0x38
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	9315      	str	r3, [sp, #84]	; 0x54
 8005dca:	e7c7      	b.n	8005d5c <_dtoa_r+0x1c4>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dd2:	930c      	str	r3, [sp, #48]	; 0x30
 8005dd4:	9307      	str	r3, [sp, #28]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	dc13      	bgt.n	8005e02 <_dtoa_r+0x26a>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	001a      	movs	r2, r3
 8005dde:	930c      	str	r3, [sp, #48]	; 0x30
 8005de0:	9307      	str	r3, [sp, #28]
 8005de2:	9223      	str	r2, [sp, #140]	; 0x8c
 8005de4:	e00d      	b.n	8005e02 <_dtoa_r+0x26a>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e7f1      	b.n	8005dce <_dtoa_r+0x236>
 8005dea:	2300      	movs	r3, #0
 8005dec:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8005df0:	4694      	mov	ip, r2
 8005df2:	9b02      	ldr	r3, [sp, #8]
 8005df4:	4463      	add	r3, ip
 8005df6:	930c      	str	r3, [sp, #48]	; 0x30
 8005df8:	3301      	adds	r3, #1
 8005dfa:	9307      	str	r3, [sp, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	dc00      	bgt.n	8005e02 <_dtoa_r+0x26a>
 8005e00:	2301      	movs	r3, #1
 8005e02:	2200      	movs	r2, #0
 8005e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e06:	6042      	str	r2, [r0, #4]
 8005e08:	3204      	adds	r2, #4
 8005e0a:	0015      	movs	r5, r2
 8005e0c:	3514      	adds	r5, #20
 8005e0e:	6841      	ldr	r1, [r0, #4]
 8005e10:	429d      	cmp	r5, r3
 8005e12:	d919      	bls.n	8005e48 <_dtoa_r+0x2b0>
 8005e14:	0038      	movs	r0, r7
 8005e16:	f000 fcfb 	bl	8006810 <_Balloc>
 8005e1a:	9006      	str	r0, [sp, #24]
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d117      	bne.n	8005e50 <_dtoa_r+0x2b8>
 8005e20:	21d5      	movs	r1, #213	; 0xd5
 8005e22:	0002      	movs	r2, r0
 8005e24:	4b43      	ldr	r3, [pc, #268]	; (8005f34 <_dtoa_r+0x39c>)
 8005e26:	0049      	lsls	r1, r1, #1
 8005e28:	e6cb      	b.n	8005bc2 <_dtoa_r+0x2a>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e7de      	b.n	8005dec <_dtoa_r+0x254>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	940f      	str	r4, [sp, #60]	; 0x3c
 8005e32:	9322      	str	r3, [sp, #136]	; 0x88
 8005e34:	3b01      	subs	r3, #1
 8005e36:	930c      	str	r3, [sp, #48]	; 0x30
 8005e38:	9307      	str	r3, [sp, #28]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	3313      	adds	r3, #19
 8005e3e:	e7d0      	b.n	8005de2 <_dtoa_r+0x24a>
 8005e40:	2301      	movs	r3, #1
 8005e42:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e44:	3b02      	subs	r3, #2
 8005e46:	e7f6      	b.n	8005e36 <_dtoa_r+0x29e>
 8005e48:	3101      	adds	r1, #1
 8005e4a:	6041      	str	r1, [r0, #4]
 8005e4c:	0052      	lsls	r2, r2, #1
 8005e4e:	e7dc      	b.n	8005e0a <_dtoa_r+0x272>
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	9a06      	ldr	r2, [sp, #24]
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	9b07      	ldr	r3, [sp, #28]
 8005e58:	2b0e      	cmp	r3, #14
 8005e5a:	d900      	bls.n	8005e5e <_dtoa_r+0x2c6>
 8005e5c:	e0eb      	b.n	8006036 <_dtoa_r+0x49e>
 8005e5e:	2c00      	cmp	r4, #0
 8005e60:	d100      	bne.n	8005e64 <_dtoa_r+0x2cc>
 8005e62:	e0e8      	b.n	8006036 <_dtoa_r+0x49e>
 8005e64:	9b02      	ldr	r3, [sp, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dd68      	ble.n	8005f3c <_dtoa_r+0x3a4>
 8005e6a:	001a      	movs	r2, r3
 8005e6c:	210f      	movs	r1, #15
 8005e6e:	4b2d      	ldr	r3, [pc, #180]	; (8005f24 <_dtoa_r+0x38c>)
 8005e70:	400a      	ands	r2, r1
 8005e72:	00d2      	lsls	r2, r2, #3
 8005e74:	189b      	adds	r3, r3, r2
 8005e76:	681d      	ldr	r5, [r3, #0]
 8005e78:	685e      	ldr	r6, [r3, #4]
 8005e7a:	9b02      	ldr	r3, [sp, #8]
 8005e7c:	111c      	asrs	r4, r3, #4
 8005e7e:	2302      	movs	r3, #2
 8005e80:	9310      	str	r3, [sp, #64]	; 0x40
 8005e82:	9b02      	ldr	r3, [sp, #8]
 8005e84:	05db      	lsls	r3, r3, #23
 8005e86:	d50b      	bpl.n	8005ea0 <_dtoa_r+0x308>
 8005e88:	4b2b      	ldr	r3, [pc, #172]	; (8005f38 <_dtoa_r+0x3a0>)
 8005e8a:	400c      	ands	r4, r1
 8005e8c:	6a1a      	ldr	r2, [r3, #32]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005e92:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005e94:	f7fa fe62 	bl	8000b5c <__aeabi_ddiv>
 8005e98:	2303      	movs	r3, #3
 8005e9a:	9008      	str	r0, [sp, #32]
 8005e9c:	9109      	str	r1, [sp, #36]	; 0x24
 8005e9e:	9310      	str	r3, [sp, #64]	; 0x40
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <_dtoa_r+0x3a0>)
 8005ea2:	9314      	str	r3, [sp, #80]	; 0x50
 8005ea4:	2c00      	cmp	r4, #0
 8005ea6:	d108      	bne.n	8005eba <_dtoa_r+0x322>
 8005ea8:	9808      	ldr	r0, [sp, #32]
 8005eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eac:	002a      	movs	r2, r5
 8005eae:	0033      	movs	r3, r6
 8005eb0:	f7fa fe54 	bl	8000b5c <__aeabi_ddiv>
 8005eb4:	9008      	str	r0, [sp, #32]
 8005eb6:	9109      	str	r1, [sp, #36]	; 0x24
 8005eb8:	e05c      	b.n	8005f74 <_dtoa_r+0x3dc>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	421c      	tst	r4, r3
 8005ebe:	d00b      	beq.n	8005ed8 <_dtoa_r+0x340>
 8005ec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ec2:	0028      	movs	r0, r5
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	9310      	str	r3, [sp, #64]	; 0x40
 8005ec8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005eca:	0031      	movs	r1, r6
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f7fb fa46 	bl	8001360 <__aeabi_dmul>
 8005ed4:	0005      	movs	r5, r0
 8005ed6:	000e      	movs	r6, r1
 8005ed8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005eda:	1064      	asrs	r4, r4, #1
 8005edc:	3308      	adds	r3, #8
 8005ede:	e7e0      	b.n	8005ea2 <_dtoa_r+0x30a>
 8005ee0:	08008375 	.word	0x08008375
 8005ee4:	0800838c 	.word	0x0800838c
 8005ee8:	7ff00000 	.word	0x7ff00000
 8005eec:	0000270f 	.word	0x0000270f
 8005ef0:	08008371 	.word	0x08008371
 8005ef4:	08008374 	.word	0x08008374
 8005ef8:	08008344 	.word	0x08008344
 8005efc:	08008345 	.word	0x08008345
 8005f00:	3ff00000 	.word	0x3ff00000
 8005f04:	fffffc01 	.word	0xfffffc01
 8005f08:	3ff80000 	.word	0x3ff80000
 8005f0c:	636f4361 	.word	0x636f4361
 8005f10:	3fd287a7 	.word	0x3fd287a7
 8005f14:	8b60c8b3 	.word	0x8b60c8b3
 8005f18:	3fc68a28 	.word	0x3fc68a28
 8005f1c:	509f79fb 	.word	0x509f79fb
 8005f20:	3fd34413 	.word	0x3fd34413
 8005f24:	08008480 	.word	0x08008480
 8005f28:	00000432 	.word	0x00000432
 8005f2c:	00000412 	.word	0x00000412
 8005f30:	fe100000 	.word	0xfe100000
 8005f34:	080083e7 	.word	0x080083e7
 8005f38:	08008458 	.word	0x08008458
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	9310      	str	r3, [sp, #64]	; 0x40
 8005f40:	9b02      	ldr	r3, [sp, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <_dtoa_r+0x3dc>
 8005f46:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005f48:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005f4a:	425c      	negs	r4, r3
 8005f4c:	230f      	movs	r3, #15
 8005f4e:	4ab6      	ldr	r2, [pc, #728]	; (8006228 <_dtoa_r+0x690>)
 8005f50:	4023      	ands	r3, r4
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	18d3      	adds	r3, r2, r3
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f7fb fa01 	bl	8001360 <__aeabi_dmul>
 8005f5e:	2601      	movs	r6, #1
 8005f60:	2300      	movs	r3, #0
 8005f62:	9008      	str	r0, [sp, #32]
 8005f64:	9109      	str	r1, [sp, #36]	; 0x24
 8005f66:	4db1      	ldr	r5, [pc, #708]	; (800622c <_dtoa_r+0x694>)
 8005f68:	1124      	asrs	r4, r4, #4
 8005f6a:	2c00      	cmp	r4, #0
 8005f6c:	d000      	beq.n	8005f70 <_dtoa_r+0x3d8>
 8005f6e:	e094      	b.n	800609a <_dtoa_r+0x502>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d19f      	bne.n	8005eb4 <_dtoa_r+0x31c>
 8005f74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d100      	bne.n	8005f7c <_dtoa_r+0x3e4>
 8005f7a:	e09b      	b.n	80060b4 <_dtoa_r+0x51c>
 8005f7c:	9c08      	ldr	r4, [sp, #32]
 8005f7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005f80:	2200      	movs	r2, #0
 8005f82:	0020      	movs	r0, r4
 8005f84:	0029      	movs	r1, r5
 8005f86:	4baa      	ldr	r3, [pc, #680]	; (8006230 <_dtoa_r+0x698>)
 8005f88:	f7fa fa66 	bl	8000458 <__aeabi_dcmplt>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d100      	bne.n	8005f92 <_dtoa_r+0x3fa>
 8005f90:	e090      	b.n	80060b4 <_dtoa_r+0x51c>
 8005f92:	9b07      	ldr	r3, [sp, #28]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d100      	bne.n	8005f9a <_dtoa_r+0x402>
 8005f98:	e08c      	b.n	80060b4 <_dtoa_r+0x51c>
 8005f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	dd46      	ble.n	800602e <_dtoa_r+0x496>
 8005fa0:	9b02      	ldr	r3, [sp, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	0020      	movs	r0, r4
 8005fa6:	0029      	movs	r1, r5
 8005fa8:	1e5e      	subs	r6, r3, #1
 8005faa:	4ba2      	ldr	r3, [pc, #648]	; (8006234 <_dtoa_r+0x69c>)
 8005fac:	f7fb f9d8 	bl	8001360 <__aeabi_dmul>
 8005fb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fb2:	9008      	str	r0, [sp, #32]
 8005fb4:	9109      	str	r1, [sp, #36]	; 0x24
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	9310      	str	r3, [sp, #64]	; 0x40
 8005fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fbc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005fbe:	9c08      	ldr	r4, [sp, #32]
 8005fc0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005fc2:	9314      	str	r3, [sp, #80]	; 0x50
 8005fc4:	f7fc f81e 	bl	8002004 <__aeabi_i2d>
 8005fc8:	0022      	movs	r2, r4
 8005fca:	002b      	movs	r3, r5
 8005fcc:	f7fb f9c8 	bl	8001360 <__aeabi_dmul>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4b99      	ldr	r3, [pc, #612]	; (8006238 <_dtoa_r+0x6a0>)
 8005fd4:	f7fa fa86 	bl	80004e4 <__aeabi_dadd>
 8005fd8:	9010      	str	r0, [sp, #64]	; 0x40
 8005fda:	9111      	str	r1, [sp, #68]	; 0x44
 8005fdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fe0:	9208      	str	r2, [sp, #32]
 8005fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe4:	4a95      	ldr	r2, [pc, #596]	; (800623c <_dtoa_r+0x6a4>)
 8005fe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fe8:	4694      	mov	ip, r2
 8005fea:	4463      	add	r3, ip
 8005fec:	9317      	str	r3, [sp, #92]	; 0x5c
 8005fee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d161      	bne.n	80060ba <_dtoa_r+0x522>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	0020      	movs	r0, r4
 8005ffa:	0029      	movs	r1, r5
 8005ffc:	4b90      	ldr	r3, [pc, #576]	; (8006240 <_dtoa_r+0x6a8>)
 8005ffe:	f7fb fc1b 	bl	8001838 <__aeabi_dsub>
 8006002:	9a08      	ldr	r2, [sp, #32]
 8006004:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006006:	0004      	movs	r4, r0
 8006008:	000d      	movs	r5, r1
 800600a:	f7fa fa39 	bl	8000480 <__aeabi_dcmpgt>
 800600e:	2800      	cmp	r0, #0
 8006010:	d000      	beq.n	8006014 <_dtoa_r+0x47c>
 8006012:	e2af      	b.n	8006574 <_dtoa_r+0x9dc>
 8006014:	488b      	ldr	r0, [pc, #556]	; (8006244 <_dtoa_r+0x6ac>)
 8006016:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006018:	4684      	mov	ip, r0
 800601a:	4461      	add	r1, ip
 800601c:	000b      	movs	r3, r1
 800601e:	0020      	movs	r0, r4
 8006020:	0029      	movs	r1, r5
 8006022:	9a08      	ldr	r2, [sp, #32]
 8006024:	f7fa fa18 	bl	8000458 <__aeabi_dcmplt>
 8006028:	2800      	cmp	r0, #0
 800602a:	d000      	beq.n	800602e <_dtoa_r+0x496>
 800602c:	e29f      	b.n	800656e <_dtoa_r+0x9d6>
 800602e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006030:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006032:	9308      	str	r3, [sp, #32]
 8006034:	9409      	str	r4, [sp, #36]	; 0x24
 8006036:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006038:	2b00      	cmp	r3, #0
 800603a:	da00      	bge.n	800603e <_dtoa_r+0x4a6>
 800603c:	e172      	b.n	8006324 <_dtoa_r+0x78c>
 800603e:	9a02      	ldr	r2, [sp, #8]
 8006040:	2a0e      	cmp	r2, #14
 8006042:	dd00      	ble.n	8006046 <_dtoa_r+0x4ae>
 8006044:	e16e      	b.n	8006324 <_dtoa_r+0x78c>
 8006046:	4b78      	ldr	r3, [pc, #480]	; (8006228 <_dtoa_r+0x690>)
 8006048:	00d2      	lsls	r2, r2, #3
 800604a:	189b      	adds	r3, r3, r2
 800604c:	685c      	ldr	r4, [r3, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	930a      	str	r3, [sp, #40]	; 0x28
 8006052:	940b      	str	r4, [sp, #44]	; 0x2c
 8006054:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006056:	2b00      	cmp	r3, #0
 8006058:	db00      	blt.n	800605c <_dtoa_r+0x4c4>
 800605a:	e0f7      	b.n	800624c <_dtoa_r+0x6b4>
 800605c:	9b07      	ldr	r3, [sp, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	dd00      	ble.n	8006064 <_dtoa_r+0x4cc>
 8006062:	e0f3      	b.n	800624c <_dtoa_r+0x6b4>
 8006064:	d000      	beq.n	8006068 <_dtoa_r+0x4d0>
 8006066:	e282      	b.n	800656e <_dtoa_r+0x9d6>
 8006068:	980a      	ldr	r0, [sp, #40]	; 0x28
 800606a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800606c:	2200      	movs	r2, #0
 800606e:	4b74      	ldr	r3, [pc, #464]	; (8006240 <_dtoa_r+0x6a8>)
 8006070:	f7fb f976 	bl	8001360 <__aeabi_dmul>
 8006074:	9a08      	ldr	r2, [sp, #32]
 8006076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006078:	f7fa fa0c 	bl	8000494 <__aeabi_dcmpge>
 800607c:	9e07      	ldr	r6, [sp, #28]
 800607e:	0035      	movs	r5, r6
 8006080:	2800      	cmp	r0, #0
 8006082:	d000      	beq.n	8006086 <_dtoa_r+0x4ee>
 8006084:	e259      	b.n	800653a <_dtoa_r+0x9a2>
 8006086:	9b06      	ldr	r3, [sp, #24]
 8006088:	9a06      	ldr	r2, [sp, #24]
 800608a:	3301      	adds	r3, #1
 800608c:	9308      	str	r3, [sp, #32]
 800608e:	2331      	movs	r3, #49	; 0x31
 8006090:	7013      	strb	r3, [r2, #0]
 8006092:	9b02      	ldr	r3, [sp, #8]
 8006094:	3301      	adds	r3, #1
 8006096:	9302      	str	r3, [sp, #8]
 8006098:	e254      	b.n	8006544 <_dtoa_r+0x9ac>
 800609a:	4234      	tst	r4, r6
 800609c:	d007      	beq.n	80060ae <_dtoa_r+0x516>
 800609e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060a0:	3301      	adds	r3, #1
 80060a2:	9310      	str	r3, [sp, #64]	; 0x40
 80060a4:	682a      	ldr	r2, [r5, #0]
 80060a6:	686b      	ldr	r3, [r5, #4]
 80060a8:	f7fb f95a 	bl	8001360 <__aeabi_dmul>
 80060ac:	0033      	movs	r3, r6
 80060ae:	1064      	asrs	r4, r4, #1
 80060b0:	3508      	adds	r5, #8
 80060b2:	e75a      	b.n	8005f6a <_dtoa_r+0x3d2>
 80060b4:	9e02      	ldr	r6, [sp, #8]
 80060b6:	9b07      	ldr	r3, [sp, #28]
 80060b8:	e780      	b.n	8005fbc <_dtoa_r+0x424>
 80060ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80060be:	1e5a      	subs	r2, r3, #1
 80060c0:	4b59      	ldr	r3, [pc, #356]	; (8006228 <_dtoa_r+0x690>)
 80060c2:	00d2      	lsls	r2, r2, #3
 80060c4:	189b      	adds	r3, r3, r2
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2900      	cmp	r1, #0
 80060cc:	d051      	beq.n	8006172 <_dtoa_r+0x5da>
 80060ce:	2000      	movs	r0, #0
 80060d0:	495d      	ldr	r1, [pc, #372]	; (8006248 <_dtoa_r+0x6b0>)
 80060d2:	f7fa fd43 	bl	8000b5c <__aeabi_ddiv>
 80060d6:	9a08      	ldr	r2, [sp, #32]
 80060d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060da:	f7fb fbad 	bl	8001838 <__aeabi_dsub>
 80060de:	9a06      	ldr	r2, [sp, #24]
 80060e0:	9b06      	ldr	r3, [sp, #24]
 80060e2:	4694      	mov	ip, r2
 80060e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80060e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060e8:	9010      	str	r0, [sp, #64]	; 0x40
 80060ea:	9111      	str	r1, [sp, #68]	; 0x44
 80060ec:	4463      	add	r3, ip
 80060ee:	9319      	str	r3, [sp, #100]	; 0x64
 80060f0:	0029      	movs	r1, r5
 80060f2:	0020      	movs	r0, r4
 80060f4:	f7fb ff50 	bl	8001f98 <__aeabi_d2iz>
 80060f8:	9014      	str	r0, [sp, #80]	; 0x50
 80060fa:	f7fb ff83 	bl	8002004 <__aeabi_i2d>
 80060fe:	0002      	movs	r2, r0
 8006100:	000b      	movs	r3, r1
 8006102:	0020      	movs	r0, r4
 8006104:	0029      	movs	r1, r5
 8006106:	f7fb fb97 	bl	8001838 <__aeabi_dsub>
 800610a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800610c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800610e:	3301      	adds	r3, #1
 8006110:	9308      	str	r3, [sp, #32]
 8006112:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006114:	0004      	movs	r4, r0
 8006116:	3330      	adds	r3, #48	; 0x30
 8006118:	7013      	strb	r3, [r2, #0]
 800611a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800611c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800611e:	000d      	movs	r5, r1
 8006120:	f7fa f99a 	bl	8000458 <__aeabi_dcmplt>
 8006124:	2800      	cmp	r0, #0
 8006126:	d175      	bne.n	8006214 <_dtoa_r+0x67c>
 8006128:	0022      	movs	r2, r4
 800612a:	002b      	movs	r3, r5
 800612c:	2000      	movs	r0, #0
 800612e:	4940      	ldr	r1, [pc, #256]	; (8006230 <_dtoa_r+0x698>)
 8006130:	f7fb fb82 	bl	8001838 <__aeabi_dsub>
 8006134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006138:	f7fa f98e 	bl	8000458 <__aeabi_dcmplt>
 800613c:	2800      	cmp	r0, #0
 800613e:	d000      	beq.n	8006142 <_dtoa_r+0x5aa>
 8006140:	e0d2      	b.n	80062e8 <_dtoa_r+0x750>
 8006142:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006144:	9a08      	ldr	r2, [sp, #32]
 8006146:	4293      	cmp	r3, r2
 8006148:	d100      	bne.n	800614c <_dtoa_r+0x5b4>
 800614a:	e770      	b.n	800602e <_dtoa_r+0x496>
 800614c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800614e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006150:	2200      	movs	r2, #0
 8006152:	4b38      	ldr	r3, [pc, #224]	; (8006234 <_dtoa_r+0x69c>)
 8006154:	f7fb f904 	bl	8001360 <__aeabi_dmul>
 8006158:	4b36      	ldr	r3, [pc, #216]	; (8006234 <_dtoa_r+0x69c>)
 800615a:	9010      	str	r0, [sp, #64]	; 0x40
 800615c:	9111      	str	r1, [sp, #68]	; 0x44
 800615e:	2200      	movs	r2, #0
 8006160:	0020      	movs	r0, r4
 8006162:	0029      	movs	r1, r5
 8006164:	f7fb f8fc 	bl	8001360 <__aeabi_dmul>
 8006168:	9b08      	ldr	r3, [sp, #32]
 800616a:	0004      	movs	r4, r0
 800616c:	000d      	movs	r5, r1
 800616e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006170:	e7be      	b.n	80060f0 <_dtoa_r+0x558>
 8006172:	9808      	ldr	r0, [sp, #32]
 8006174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006176:	f7fb f8f3 	bl	8001360 <__aeabi_dmul>
 800617a:	9a06      	ldr	r2, [sp, #24]
 800617c:	9b06      	ldr	r3, [sp, #24]
 800617e:	4694      	mov	ip, r2
 8006180:	9308      	str	r3, [sp, #32]
 8006182:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006184:	9010      	str	r0, [sp, #64]	; 0x40
 8006186:	9111      	str	r1, [sp, #68]	; 0x44
 8006188:	4463      	add	r3, ip
 800618a:	9319      	str	r3, [sp, #100]	; 0x64
 800618c:	0029      	movs	r1, r5
 800618e:	0020      	movs	r0, r4
 8006190:	f7fb ff02 	bl	8001f98 <__aeabi_d2iz>
 8006194:	9017      	str	r0, [sp, #92]	; 0x5c
 8006196:	f7fb ff35 	bl	8002004 <__aeabi_i2d>
 800619a:	0002      	movs	r2, r0
 800619c:	000b      	movs	r3, r1
 800619e:	0020      	movs	r0, r4
 80061a0:	0029      	movs	r1, r5
 80061a2:	f7fb fb49 	bl	8001838 <__aeabi_dsub>
 80061a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061a8:	9a08      	ldr	r2, [sp, #32]
 80061aa:	3330      	adds	r3, #48	; 0x30
 80061ac:	7013      	strb	r3, [r2, #0]
 80061ae:	0013      	movs	r3, r2
 80061b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80061b2:	3301      	adds	r3, #1
 80061b4:	0004      	movs	r4, r0
 80061b6:	000d      	movs	r5, r1
 80061b8:	9308      	str	r3, [sp, #32]
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d12c      	bne.n	8006218 <_dtoa_r+0x680>
 80061be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80061c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80061c2:	9a06      	ldr	r2, [sp, #24]
 80061c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061c6:	4694      	mov	ip, r2
 80061c8:	4463      	add	r3, ip
 80061ca:	2200      	movs	r2, #0
 80061cc:	9308      	str	r3, [sp, #32]
 80061ce:	4b1e      	ldr	r3, [pc, #120]	; (8006248 <_dtoa_r+0x6b0>)
 80061d0:	f7fa f988 	bl	80004e4 <__aeabi_dadd>
 80061d4:	0002      	movs	r2, r0
 80061d6:	000b      	movs	r3, r1
 80061d8:	0020      	movs	r0, r4
 80061da:	0029      	movs	r1, r5
 80061dc:	f7fa f950 	bl	8000480 <__aeabi_dcmpgt>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d000      	beq.n	80061e6 <_dtoa_r+0x64e>
 80061e4:	e080      	b.n	80062e8 <_dtoa_r+0x750>
 80061e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061ea:	2000      	movs	r0, #0
 80061ec:	4916      	ldr	r1, [pc, #88]	; (8006248 <_dtoa_r+0x6b0>)
 80061ee:	f7fb fb23 	bl	8001838 <__aeabi_dsub>
 80061f2:	0002      	movs	r2, r0
 80061f4:	000b      	movs	r3, r1
 80061f6:	0020      	movs	r0, r4
 80061f8:	0029      	movs	r1, r5
 80061fa:	f7fa f92d 	bl	8000458 <__aeabi_dcmplt>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d100      	bne.n	8006204 <_dtoa_r+0x66c>
 8006202:	e714      	b.n	800602e <_dtoa_r+0x496>
 8006204:	9b08      	ldr	r3, [sp, #32]
 8006206:	001a      	movs	r2, r3
 8006208:	3a01      	subs	r2, #1
 800620a:	9208      	str	r2, [sp, #32]
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	2a30      	cmp	r2, #48	; 0x30
 8006210:	d0f8      	beq.n	8006204 <_dtoa_r+0x66c>
 8006212:	9308      	str	r3, [sp, #32]
 8006214:	9602      	str	r6, [sp, #8]
 8006216:	e055      	b.n	80062c4 <_dtoa_r+0x72c>
 8006218:	2200      	movs	r2, #0
 800621a:	4b06      	ldr	r3, [pc, #24]	; (8006234 <_dtoa_r+0x69c>)
 800621c:	f7fb f8a0 	bl	8001360 <__aeabi_dmul>
 8006220:	0004      	movs	r4, r0
 8006222:	000d      	movs	r5, r1
 8006224:	e7b2      	b.n	800618c <_dtoa_r+0x5f4>
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	08008480 	.word	0x08008480
 800622c:	08008458 	.word	0x08008458
 8006230:	3ff00000 	.word	0x3ff00000
 8006234:	40240000 	.word	0x40240000
 8006238:	401c0000 	.word	0x401c0000
 800623c:	fcc00000 	.word	0xfcc00000
 8006240:	40140000 	.word	0x40140000
 8006244:	7cc00000 	.word	0x7cc00000
 8006248:	3fe00000 	.word	0x3fe00000
 800624c:	9b07      	ldr	r3, [sp, #28]
 800624e:	9e06      	ldr	r6, [sp, #24]
 8006250:	3b01      	subs	r3, #1
 8006252:	199b      	adds	r3, r3, r6
 8006254:	930c      	str	r3, [sp, #48]	; 0x30
 8006256:	9c08      	ldr	r4, [sp, #32]
 8006258:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800625a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800625c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800625e:	0020      	movs	r0, r4
 8006260:	0029      	movs	r1, r5
 8006262:	f7fa fc7b 	bl	8000b5c <__aeabi_ddiv>
 8006266:	f7fb fe97 	bl	8001f98 <__aeabi_d2iz>
 800626a:	9007      	str	r0, [sp, #28]
 800626c:	f7fb feca 	bl	8002004 <__aeabi_i2d>
 8006270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006274:	f7fb f874 	bl	8001360 <__aeabi_dmul>
 8006278:	0002      	movs	r2, r0
 800627a:	000b      	movs	r3, r1
 800627c:	0020      	movs	r0, r4
 800627e:	0029      	movs	r1, r5
 8006280:	f7fb fada 	bl	8001838 <__aeabi_dsub>
 8006284:	0033      	movs	r3, r6
 8006286:	9a07      	ldr	r2, [sp, #28]
 8006288:	3601      	adds	r6, #1
 800628a:	3230      	adds	r2, #48	; 0x30
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006290:	9608      	str	r6, [sp, #32]
 8006292:	429a      	cmp	r2, r3
 8006294:	d139      	bne.n	800630a <_dtoa_r+0x772>
 8006296:	0002      	movs	r2, r0
 8006298:	000b      	movs	r3, r1
 800629a:	f7fa f923 	bl	80004e4 <__aeabi_dadd>
 800629e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a2:	0004      	movs	r4, r0
 80062a4:	000d      	movs	r5, r1
 80062a6:	f7fa f8eb 	bl	8000480 <__aeabi_dcmpgt>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d11b      	bne.n	80062e6 <_dtoa_r+0x74e>
 80062ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b2:	0020      	movs	r0, r4
 80062b4:	0029      	movs	r1, r5
 80062b6:	f7fa f8c9 	bl	800044c <__aeabi_dcmpeq>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d002      	beq.n	80062c4 <_dtoa_r+0x72c>
 80062be:	9b07      	ldr	r3, [sp, #28]
 80062c0:	07db      	lsls	r3, r3, #31
 80062c2:	d410      	bmi.n	80062e6 <_dtoa_r+0x74e>
 80062c4:	0038      	movs	r0, r7
 80062c6:	9905      	ldr	r1, [sp, #20]
 80062c8:	f000 fae6 	bl	8006898 <_Bfree>
 80062cc:	2300      	movs	r3, #0
 80062ce:	9a08      	ldr	r2, [sp, #32]
 80062d0:	9802      	ldr	r0, [sp, #8]
 80062d2:	7013      	strb	r3, [r2, #0]
 80062d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80062d6:	3001      	adds	r0, #1
 80062d8:	6018      	str	r0, [r3, #0]
 80062da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d100      	bne.n	80062e2 <_dtoa_r+0x74a>
 80062e0:	e4a6      	b.n	8005c30 <_dtoa_r+0x98>
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e4a4      	b.n	8005c30 <_dtoa_r+0x98>
 80062e6:	9e02      	ldr	r6, [sp, #8]
 80062e8:	9b08      	ldr	r3, [sp, #32]
 80062ea:	9308      	str	r3, [sp, #32]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	781a      	ldrb	r2, [r3, #0]
 80062f0:	2a39      	cmp	r2, #57	; 0x39
 80062f2:	d106      	bne.n	8006302 <_dtoa_r+0x76a>
 80062f4:	9a06      	ldr	r2, [sp, #24]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d1f7      	bne.n	80062ea <_dtoa_r+0x752>
 80062fa:	2230      	movs	r2, #48	; 0x30
 80062fc:	9906      	ldr	r1, [sp, #24]
 80062fe:	3601      	adds	r6, #1
 8006300:	700a      	strb	r2, [r1, #0]
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	3201      	adds	r2, #1
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e784      	b.n	8006214 <_dtoa_r+0x67c>
 800630a:	2200      	movs	r2, #0
 800630c:	4baa      	ldr	r3, [pc, #680]	; (80065b8 <_dtoa_r+0xa20>)
 800630e:	f7fb f827 	bl	8001360 <__aeabi_dmul>
 8006312:	2200      	movs	r2, #0
 8006314:	2300      	movs	r3, #0
 8006316:	0004      	movs	r4, r0
 8006318:	000d      	movs	r5, r1
 800631a:	f7fa f897 	bl	800044c <__aeabi_dcmpeq>
 800631e:	2800      	cmp	r0, #0
 8006320:	d09b      	beq.n	800625a <_dtoa_r+0x6c2>
 8006322:	e7cf      	b.n	80062c4 <_dtoa_r+0x72c>
 8006324:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006326:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006328:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800632a:	2d00      	cmp	r5, #0
 800632c:	d012      	beq.n	8006354 <_dtoa_r+0x7bc>
 800632e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006330:	2a01      	cmp	r2, #1
 8006332:	dc66      	bgt.n	8006402 <_dtoa_r+0x86a>
 8006334:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006336:	2a00      	cmp	r2, #0
 8006338:	d05d      	beq.n	80063f6 <_dtoa_r+0x85e>
 800633a:	4aa0      	ldr	r2, [pc, #640]	; (80065bc <_dtoa_r+0xa24>)
 800633c:	189b      	adds	r3, r3, r2
 800633e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006340:	2101      	movs	r1, #1
 8006342:	18d2      	adds	r2, r2, r3
 8006344:	920a      	str	r2, [sp, #40]	; 0x28
 8006346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006348:	0038      	movs	r0, r7
 800634a:	18d3      	adds	r3, r2, r3
 800634c:	930d      	str	r3, [sp, #52]	; 0x34
 800634e:	f000 fb53 	bl	80069f8 <__i2b>
 8006352:	0005      	movs	r5, r0
 8006354:	2c00      	cmp	r4, #0
 8006356:	dd0e      	ble.n	8006376 <_dtoa_r+0x7de>
 8006358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800635a:	2b00      	cmp	r3, #0
 800635c:	dd0b      	ble.n	8006376 <_dtoa_r+0x7de>
 800635e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006360:	0023      	movs	r3, r4
 8006362:	4294      	cmp	r4, r2
 8006364:	dd00      	ble.n	8006368 <_dtoa_r+0x7d0>
 8006366:	0013      	movs	r3, r2
 8006368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800636a:	1ae4      	subs	r4, r4, r3
 800636c:	1ad2      	subs	r2, r2, r3
 800636e:	920a      	str	r2, [sp, #40]	; 0x28
 8006370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	930d      	str	r3, [sp, #52]	; 0x34
 8006376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01f      	beq.n	80063bc <_dtoa_r+0x824>
 800637c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d054      	beq.n	800642c <_dtoa_r+0x894>
 8006382:	2e00      	cmp	r6, #0
 8006384:	dd11      	ble.n	80063aa <_dtoa_r+0x812>
 8006386:	0029      	movs	r1, r5
 8006388:	0032      	movs	r2, r6
 800638a:	0038      	movs	r0, r7
 800638c:	f000 fbfa 	bl	8006b84 <__pow5mult>
 8006390:	9a05      	ldr	r2, [sp, #20]
 8006392:	0001      	movs	r1, r0
 8006394:	0005      	movs	r5, r0
 8006396:	0038      	movs	r0, r7
 8006398:	f000 fb44 	bl	8006a24 <__multiply>
 800639c:	9905      	ldr	r1, [sp, #20]
 800639e:	9014      	str	r0, [sp, #80]	; 0x50
 80063a0:	0038      	movs	r0, r7
 80063a2:	f000 fa79 	bl	8006898 <_Bfree>
 80063a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063a8:	9305      	str	r3, [sp, #20]
 80063aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ac:	1b9a      	subs	r2, r3, r6
 80063ae:	42b3      	cmp	r3, r6
 80063b0:	d004      	beq.n	80063bc <_dtoa_r+0x824>
 80063b2:	0038      	movs	r0, r7
 80063b4:	9905      	ldr	r1, [sp, #20]
 80063b6:	f000 fbe5 	bl	8006b84 <__pow5mult>
 80063ba:	9005      	str	r0, [sp, #20]
 80063bc:	2101      	movs	r1, #1
 80063be:	0038      	movs	r0, r7
 80063c0:	f000 fb1a 	bl	80069f8 <__i2b>
 80063c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063c6:	0006      	movs	r6, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dd31      	ble.n	8006430 <_dtoa_r+0x898>
 80063cc:	001a      	movs	r2, r3
 80063ce:	0001      	movs	r1, r0
 80063d0:	0038      	movs	r0, r7
 80063d2:	f000 fbd7 	bl	8006b84 <__pow5mult>
 80063d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063d8:	0006      	movs	r6, r0
 80063da:	2b01      	cmp	r3, #1
 80063dc:	dd2d      	ble.n	800643a <_dtoa_r+0x8a2>
 80063de:	2300      	movs	r3, #0
 80063e0:	930e      	str	r3, [sp, #56]	; 0x38
 80063e2:	6933      	ldr	r3, [r6, #16]
 80063e4:	3303      	adds	r3, #3
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	18f3      	adds	r3, r6, r3
 80063ea:	6858      	ldr	r0, [r3, #4]
 80063ec:	f000 fabc 	bl	8006968 <__hi0bits>
 80063f0:	2320      	movs	r3, #32
 80063f2:	1a18      	subs	r0, r3, r0
 80063f4:	e039      	b.n	800646a <_dtoa_r+0x8d2>
 80063f6:	2336      	movs	r3, #54	; 0x36
 80063f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80063fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80063fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	e79d      	b.n	800633e <_dtoa_r+0x7a6>
 8006402:	9b07      	ldr	r3, [sp, #28]
 8006404:	1e5e      	subs	r6, r3, #1
 8006406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006408:	42b3      	cmp	r3, r6
 800640a:	db07      	blt.n	800641c <_dtoa_r+0x884>
 800640c:	1b9e      	subs	r6, r3, r6
 800640e:	9b07      	ldr	r3, [sp, #28]
 8006410:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006412:	2b00      	cmp	r3, #0
 8006414:	da93      	bge.n	800633e <_dtoa_r+0x7a6>
 8006416:	1ae4      	subs	r4, r4, r3
 8006418:	2300      	movs	r3, #0
 800641a:	e790      	b.n	800633e <_dtoa_r+0x7a6>
 800641c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800641e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006420:	1af3      	subs	r3, r6, r3
 8006422:	18d3      	adds	r3, r2, r3
 8006424:	960e      	str	r6, [sp, #56]	; 0x38
 8006426:	9315      	str	r3, [sp, #84]	; 0x54
 8006428:	2600      	movs	r6, #0
 800642a:	e7f0      	b.n	800640e <_dtoa_r+0x876>
 800642c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800642e:	e7c0      	b.n	80063b2 <_dtoa_r+0x81a>
 8006430:	2300      	movs	r3, #0
 8006432:	930e      	str	r3, [sp, #56]	; 0x38
 8006434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006436:	2b01      	cmp	r3, #1
 8006438:	dc13      	bgt.n	8006462 <_dtoa_r+0x8ca>
 800643a:	2300      	movs	r3, #0
 800643c:	930e      	str	r3, [sp, #56]	; 0x38
 800643e:	9b08      	ldr	r3, [sp, #32]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10e      	bne.n	8006462 <_dtoa_r+0x8ca>
 8006444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006446:	031b      	lsls	r3, r3, #12
 8006448:	d10b      	bne.n	8006462 <_dtoa_r+0x8ca>
 800644a:	4b5d      	ldr	r3, [pc, #372]	; (80065c0 <_dtoa_r+0xa28>)
 800644c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800644e:	4213      	tst	r3, r2
 8006450:	d007      	beq.n	8006462 <_dtoa_r+0x8ca>
 8006452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006454:	3301      	adds	r3, #1
 8006456:	930a      	str	r3, [sp, #40]	; 0x28
 8006458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800645a:	3301      	adds	r3, #1
 800645c:	930d      	str	r3, [sp, #52]	; 0x34
 800645e:	2301      	movs	r3, #1
 8006460:	930e      	str	r3, [sp, #56]	; 0x38
 8006462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006464:	2001      	movs	r0, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1bb      	bne.n	80063e2 <_dtoa_r+0x84a>
 800646a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800646c:	221f      	movs	r2, #31
 800646e:	1818      	adds	r0, r3, r0
 8006470:	0003      	movs	r3, r0
 8006472:	4013      	ands	r3, r2
 8006474:	4210      	tst	r0, r2
 8006476:	d046      	beq.n	8006506 <_dtoa_r+0x96e>
 8006478:	3201      	adds	r2, #1
 800647a:	1ad2      	subs	r2, r2, r3
 800647c:	2a04      	cmp	r2, #4
 800647e:	dd3f      	ble.n	8006500 <_dtoa_r+0x968>
 8006480:	221c      	movs	r2, #28
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006486:	18e4      	adds	r4, r4, r3
 8006488:	18d2      	adds	r2, r2, r3
 800648a:	920a      	str	r2, [sp, #40]	; 0x28
 800648c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800648e:	18d3      	adds	r3, r2, r3
 8006490:	930d      	str	r3, [sp, #52]	; 0x34
 8006492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006494:	2b00      	cmp	r3, #0
 8006496:	dd05      	ble.n	80064a4 <_dtoa_r+0x90c>
 8006498:	001a      	movs	r2, r3
 800649a:	0038      	movs	r0, r7
 800649c:	9905      	ldr	r1, [sp, #20]
 800649e:	f000 fbcd 	bl	8006c3c <__lshift>
 80064a2:	9005      	str	r0, [sp, #20]
 80064a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dd05      	ble.n	80064b6 <_dtoa_r+0x91e>
 80064aa:	0031      	movs	r1, r6
 80064ac:	001a      	movs	r2, r3
 80064ae:	0038      	movs	r0, r7
 80064b0:	f000 fbc4 	bl	8006c3c <__lshift>
 80064b4:	0006      	movs	r6, r0
 80064b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d026      	beq.n	800650a <_dtoa_r+0x972>
 80064bc:	0031      	movs	r1, r6
 80064be:	9805      	ldr	r0, [sp, #20]
 80064c0:	f000 fc2a 	bl	8006d18 <__mcmp>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	da20      	bge.n	800650a <_dtoa_r+0x972>
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	220a      	movs	r2, #10
 80064cc:	3b01      	subs	r3, #1
 80064ce:	9302      	str	r3, [sp, #8]
 80064d0:	0038      	movs	r0, r7
 80064d2:	2300      	movs	r3, #0
 80064d4:	9905      	ldr	r1, [sp, #20]
 80064d6:	f000 fa03 	bl	80068e0 <__multadd>
 80064da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064dc:	9005      	str	r0, [sp, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d100      	bne.n	80064e4 <_dtoa_r+0x94c>
 80064e2:	e166      	b.n	80067b2 <_dtoa_r+0xc1a>
 80064e4:	2300      	movs	r3, #0
 80064e6:	0029      	movs	r1, r5
 80064e8:	220a      	movs	r2, #10
 80064ea:	0038      	movs	r0, r7
 80064ec:	f000 f9f8 	bl	80068e0 <__multadd>
 80064f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064f2:	0005      	movs	r5, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	dc47      	bgt.n	8006588 <_dtoa_r+0x9f0>
 80064f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	dc0d      	bgt.n	800651a <_dtoa_r+0x982>
 80064fe:	e043      	b.n	8006588 <_dtoa_r+0x9f0>
 8006500:	2a04      	cmp	r2, #4
 8006502:	d0c6      	beq.n	8006492 <_dtoa_r+0x8fa>
 8006504:	0013      	movs	r3, r2
 8006506:	331c      	adds	r3, #28
 8006508:	e7bc      	b.n	8006484 <_dtoa_r+0x8ec>
 800650a:	9b07      	ldr	r3, [sp, #28]
 800650c:	2b00      	cmp	r3, #0
 800650e:	dc35      	bgt.n	800657c <_dtoa_r+0x9e4>
 8006510:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006512:	2b02      	cmp	r3, #2
 8006514:	dd32      	ble.n	800657c <_dtoa_r+0x9e4>
 8006516:	9b07      	ldr	r3, [sp, #28]
 8006518:	930c      	str	r3, [sp, #48]	; 0x30
 800651a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10c      	bne.n	800653a <_dtoa_r+0x9a2>
 8006520:	0031      	movs	r1, r6
 8006522:	2205      	movs	r2, #5
 8006524:	0038      	movs	r0, r7
 8006526:	f000 f9db 	bl	80068e0 <__multadd>
 800652a:	0006      	movs	r6, r0
 800652c:	0001      	movs	r1, r0
 800652e:	9805      	ldr	r0, [sp, #20]
 8006530:	f000 fbf2 	bl	8006d18 <__mcmp>
 8006534:	2800      	cmp	r0, #0
 8006536:	dd00      	ble.n	800653a <_dtoa_r+0x9a2>
 8006538:	e5a5      	b.n	8006086 <_dtoa_r+0x4ee>
 800653a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800653c:	43db      	mvns	r3, r3
 800653e:	9302      	str	r3, [sp, #8]
 8006540:	9b06      	ldr	r3, [sp, #24]
 8006542:	9308      	str	r3, [sp, #32]
 8006544:	2400      	movs	r4, #0
 8006546:	0031      	movs	r1, r6
 8006548:	0038      	movs	r0, r7
 800654a:	f000 f9a5 	bl	8006898 <_Bfree>
 800654e:	2d00      	cmp	r5, #0
 8006550:	d100      	bne.n	8006554 <_dtoa_r+0x9bc>
 8006552:	e6b7      	b.n	80062c4 <_dtoa_r+0x72c>
 8006554:	2c00      	cmp	r4, #0
 8006556:	d005      	beq.n	8006564 <_dtoa_r+0x9cc>
 8006558:	42ac      	cmp	r4, r5
 800655a:	d003      	beq.n	8006564 <_dtoa_r+0x9cc>
 800655c:	0021      	movs	r1, r4
 800655e:	0038      	movs	r0, r7
 8006560:	f000 f99a 	bl	8006898 <_Bfree>
 8006564:	0029      	movs	r1, r5
 8006566:	0038      	movs	r0, r7
 8006568:	f000 f996 	bl	8006898 <_Bfree>
 800656c:	e6aa      	b.n	80062c4 <_dtoa_r+0x72c>
 800656e:	2600      	movs	r6, #0
 8006570:	0035      	movs	r5, r6
 8006572:	e7e2      	b.n	800653a <_dtoa_r+0x9a2>
 8006574:	9602      	str	r6, [sp, #8]
 8006576:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006578:	0035      	movs	r5, r6
 800657a:	e584      	b.n	8006086 <_dtoa_r+0x4ee>
 800657c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800657e:	2b00      	cmp	r3, #0
 8006580:	d100      	bne.n	8006584 <_dtoa_r+0x9ec>
 8006582:	e0ce      	b.n	8006722 <_dtoa_r+0xb8a>
 8006584:	9b07      	ldr	r3, [sp, #28]
 8006586:	930c      	str	r3, [sp, #48]	; 0x30
 8006588:	2c00      	cmp	r4, #0
 800658a:	dd05      	ble.n	8006598 <_dtoa_r+0xa00>
 800658c:	0029      	movs	r1, r5
 800658e:	0022      	movs	r2, r4
 8006590:	0038      	movs	r0, r7
 8006592:	f000 fb53 	bl	8006c3c <__lshift>
 8006596:	0005      	movs	r5, r0
 8006598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800659a:	0028      	movs	r0, r5
 800659c:	2b00      	cmp	r3, #0
 800659e:	d022      	beq.n	80065e6 <_dtoa_r+0xa4e>
 80065a0:	0038      	movs	r0, r7
 80065a2:	6869      	ldr	r1, [r5, #4]
 80065a4:	f000 f934 	bl	8006810 <_Balloc>
 80065a8:	1e04      	subs	r4, r0, #0
 80065aa:	d10f      	bne.n	80065cc <_dtoa_r+0xa34>
 80065ac:	0002      	movs	r2, r0
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <_dtoa_r+0xa2c>)
 80065b0:	4905      	ldr	r1, [pc, #20]	; (80065c8 <_dtoa_r+0xa30>)
 80065b2:	f7ff fb06 	bl	8005bc2 <_dtoa_r+0x2a>
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	40240000 	.word	0x40240000
 80065bc:	00000433 	.word	0x00000433
 80065c0:	7ff00000 	.word	0x7ff00000
 80065c4:	080083e7 	.word	0x080083e7
 80065c8:	000002ea 	.word	0x000002ea
 80065cc:	0029      	movs	r1, r5
 80065ce:	692b      	ldr	r3, [r5, #16]
 80065d0:	310c      	adds	r1, #12
 80065d2:	1c9a      	adds	r2, r3, #2
 80065d4:	0092      	lsls	r2, r2, #2
 80065d6:	300c      	adds	r0, #12
 80065d8:	f000 f911 	bl	80067fe <memcpy>
 80065dc:	2201      	movs	r2, #1
 80065de:	0021      	movs	r1, r4
 80065e0:	0038      	movs	r0, r7
 80065e2:	f000 fb2b 	bl	8006c3c <__lshift>
 80065e6:	9b06      	ldr	r3, [sp, #24]
 80065e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065ea:	930a      	str	r3, [sp, #40]	; 0x28
 80065ec:	3b01      	subs	r3, #1
 80065ee:	189b      	adds	r3, r3, r2
 80065f0:	2201      	movs	r2, #1
 80065f2:	002c      	movs	r4, r5
 80065f4:	0005      	movs	r5, r0
 80065f6:	9314      	str	r3, [sp, #80]	; 0x50
 80065f8:	9b08      	ldr	r3, [sp, #32]
 80065fa:	4013      	ands	r3, r2
 80065fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80065fe:	0031      	movs	r1, r6
 8006600:	9805      	ldr	r0, [sp, #20]
 8006602:	f7ff fa3d 	bl	8005a80 <quorem>
 8006606:	0003      	movs	r3, r0
 8006608:	0021      	movs	r1, r4
 800660a:	3330      	adds	r3, #48	; 0x30
 800660c:	900d      	str	r0, [sp, #52]	; 0x34
 800660e:	9805      	ldr	r0, [sp, #20]
 8006610:	9307      	str	r3, [sp, #28]
 8006612:	f000 fb81 	bl	8006d18 <__mcmp>
 8006616:	002a      	movs	r2, r5
 8006618:	900e      	str	r0, [sp, #56]	; 0x38
 800661a:	0031      	movs	r1, r6
 800661c:	0038      	movs	r0, r7
 800661e:	f000 fb97 	bl	8006d50 <__mdiff>
 8006622:	68c3      	ldr	r3, [r0, #12]
 8006624:	9008      	str	r0, [sp, #32]
 8006626:	9310      	str	r3, [sp, #64]	; 0x40
 8006628:	2301      	movs	r3, #1
 800662a:	930c      	str	r3, [sp, #48]	; 0x30
 800662c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <_dtoa_r+0xaa4>
 8006632:	0001      	movs	r1, r0
 8006634:	9805      	ldr	r0, [sp, #20]
 8006636:	f000 fb6f 	bl	8006d18 <__mcmp>
 800663a:	900c      	str	r0, [sp, #48]	; 0x30
 800663c:	0038      	movs	r0, r7
 800663e:	9908      	ldr	r1, [sp, #32]
 8006640:	f000 f92a 	bl	8006898 <_Bfree>
 8006644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006648:	3301      	adds	r3, #1
 800664a:	9308      	str	r3, [sp, #32]
 800664c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800664e:	4313      	orrs	r3, r2
 8006650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006652:	4313      	orrs	r3, r2
 8006654:	d10c      	bne.n	8006670 <_dtoa_r+0xad8>
 8006656:	9b07      	ldr	r3, [sp, #28]
 8006658:	2b39      	cmp	r3, #57	; 0x39
 800665a:	d026      	beq.n	80066aa <_dtoa_r+0xb12>
 800665c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665e:	2b00      	cmp	r3, #0
 8006660:	dd02      	ble.n	8006668 <_dtoa_r+0xad0>
 8006662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006664:	3331      	adds	r3, #49	; 0x31
 8006666:	9307      	str	r3, [sp, #28]
 8006668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800666a:	9a07      	ldr	r2, [sp, #28]
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e76a      	b.n	8006546 <_dtoa_r+0x9ae>
 8006670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006672:	2b00      	cmp	r3, #0
 8006674:	db04      	blt.n	8006680 <_dtoa_r+0xae8>
 8006676:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006678:	4313      	orrs	r3, r2
 800667a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800667c:	4313      	orrs	r3, r2
 800667e:	d11f      	bne.n	80066c0 <_dtoa_r+0xb28>
 8006680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006682:	2b00      	cmp	r3, #0
 8006684:	ddf0      	ble.n	8006668 <_dtoa_r+0xad0>
 8006686:	9905      	ldr	r1, [sp, #20]
 8006688:	2201      	movs	r2, #1
 800668a:	0038      	movs	r0, r7
 800668c:	f000 fad6 	bl	8006c3c <__lshift>
 8006690:	0031      	movs	r1, r6
 8006692:	9005      	str	r0, [sp, #20]
 8006694:	f000 fb40 	bl	8006d18 <__mcmp>
 8006698:	2800      	cmp	r0, #0
 800669a:	dc03      	bgt.n	80066a4 <_dtoa_r+0xb0c>
 800669c:	d1e4      	bne.n	8006668 <_dtoa_r+0xad0>
 800669e:	9b07      	ldr	r3, [sp, #28]
 80066a0:	07db      	lsls	r3, r3, #31
 80066a2:	d5e1      	bpl.n	8006668 <_dtoa_r+0xad0>
 80066a4:	9b07      	ldr	r3, [sp, #28]
 80066a6:	2b39      	cmp	r3, #57	; 0x39
 80066a8:	d1db      	bne.n	8006662 <_dtoa_r+0xaca>
 80066aa:	2339      	movs	r3, #57	; 0x39
 80066ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ae:	7013      	strb	r3, [r2, #0]
 80066b0:	9b08      	ldr	r3, [sp, #32]
 80066b2:	9308      	str	r3, [sp, #32]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	781a      	ldrb	r2, [r3, #0]
 80066b8:	2a39      	cmp	r2, #57	; 0x39
 80066ba:	d068      	beq.n	800678e <_dtoa_r+0xbf6>
 80066bc:	3201      	adds	r2, #1
 80066be:	e7d5      	b.n	800666c <_dtoa_r+0xad4>
 80066c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	dd07      	ble.n	80066d6 <_dtoa_r+0xb3e>
 80066c6:	9b07      	ldr	r3, [sp, #28]
 80066c8:	2b39      	cmp	r3, #57	; 0x39
 80066ca:	d0ee      	beq.n	80066aa <_dtoa_r+0xb12>
 80066cc:	9b07      	ldr	r3, [sp, #28]
 80066ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066d0:	3301      	adds	r3, #1
 80066d2:	7013      	strb	r3, [r2, #0]
 80066d4:	e737      	b.n	8006546 <_dtoa_r+0x9ae>
 80066d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d8:	9a07      	ldr	r2, [sp, #28]
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d03e      	beq.n	8006762 <_dtoa_r+0xbca>
 80066e4:	2300      	movs	r3, #0
 80066e6:	220a      	movs	r2, #10
 80066e8:	9905      	ldr	r1, [sp, #20]
 80066ea:	0038      	movs	r0, r7
 80066ec:	f000 f8f8 	bl	80068e0 <__multadd>
 80066f0:	2300      	movs	r3, #0
 80066f2:	9005      	str	r0, [sp, #20]
 80066f4:	220a      	movs	r2, #10
 80066f6:	0021      	movs	r1, r4
 80066f8:	0038      	movs	r0, r7
 80066fa:	42ac      	cmp	r4, r5
 80066fc:	d106      	bne.n	800670c <_dtoa_r+0xb74>
 80066fe:	f000 f8ef 	bl	80068e0 <__multadd>
 8006702:	0004      	movs	r4, r0
 8006704:	0005      	movs	r5, r0
 8006706:	9b08      	ldr	r3, [sp, #32]
 8006708:	930a      	str	r3, [sp, #40]	; 0x28
 800670a:	e778      	b.n	80065fe <_dtoa_r+0xa66>
 800670c:	f000 f8e8 	bl	80068e0 <__multadd>
 8006710:	0029      	movs	r1, r5
 8006712:	0004      	movs	r4, r0
 8006714:	2300      	movs	r3, #0
 8006716:	220a      	movs	r2, #10
 8006718:	0038      	movs	r0, r7
 800671a:	f000 f8e1 	bl	80068e0 <__multadd>
 800671e:	0005      	movs	r5, r0
 8006720:	e7f1      	b.n	8006706 <_dtoa_r+0xb6e>
 8006722:	9b07      	ldr	r3, [sp, #28]
 8006724:	930c      	str	r3, [sp, #48]	; 0x30
 8006726:	2400      	movs	r4, #0
 8006728:	0031      	movs	r1, r6
 800672a:	9805      	ldr	r0, [sp, #20]
 800672c:	f7ff f9a8 	bl	8005a80 <quorem>
 8006730:	9b06      	ldr	r3, [sp, #24]
 8006732:	3030      	adds	r0, #48	; 0x30
 8006734:	5518      	strb	r0, [r3, r4]
 8006736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006738:	3401      	adds	r4, #1
 800673a:	9007      	str	r0, [sp, #28]
 800673c:	42a3      	cmp	r3, r4
 800673e:	dd07      	ble.n	8006750 <_dtoa_r+0xbb8>
 8006740:	2300      	movs	r3, #0
 8006742:	220a      	movs	r2, #10
 8006744:	0038      	movs	r0, r7
 8006746:	9905      	ldr	r1, [sp, #20]
 8006748:	f000 f8ca 	bl	80068e0 <__multadd>
 800674c:	9005      	str	r0, [sp, #20]
 800674e:	e7eb      	b.n	8006728 <_dtoa_r+0xb90>
 8006750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006752:	2001      	movs	r0, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	dd00      	ble.n	800675a <_dtoa_r+0xbc2>
 8006758:	0018      	movs	r0, r3
 800675a:	2400      	movs	r4, #0
 800675c:	9b06      	ldr	r3, [sp, #24]
 800675e:	181b      	adds	r3, r3, r0
 8006760:	9308      	str	r3, [sp, #32]
 8006762:	9905      	ldr	r1, [sp, #20]
 8006764:	2201      	movs	r2, #1
 8006766:	0038      	movs	r0, r7
 8006768:	f000 fa68 	bl	8006c3c <__lshift>
 800676c:	0031      	movs	r1, r6
 800676e:	9005      	str	r0, [sp, #20]
 8006770:	f000 fad2 	bl	8006d18 <__mcmp>
 8006774:	2800      	cmp	r0, #0
 8006776:	dc9b      	bgt.n	80066b0 <_dtoa_r+0xb18>
 8006778:	d102      	bne.n	8006780 <_dtoa_r+0xbe8>
 800677a:	9b07      	ldr	r3, [sp, #28]
 800677c:	07db      	lsls	r3, r3, #31
 800677e:	d497      	bmi.n	80066b0 <_dtoa_r+0xb18>
 8006780:	9b08      	ldr	r3, [sp, #32]
 8006782:	9308      	str	r3, [sp, #32]
 8006784:	3b01      	subs	r3, #1
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	2a30      	cmp	r2, #48	; 0x30
 800678a:	d0fa      	beq.n	8006782 <_dtoa_r+0xbea>
 800678c:	e6db      	b.n	8006546 <_dtoa_r+0x9ae>
 800678e:	9a06      	ldr	r2, [sp, #24]
 8006790:	429a      	cmp	r2, r3
 8006792:	d18e      	bne.n	80066b2 <_dtoa_r+0xb1a>
 8006794:	9b02      	ldr	r3, [sp, #8]
 8006796:	3301      	adds	r3, #1
 8006798:	9302      	str	r3, [sp, #8]
 800679a:	2331      	movs	r3, #49	; 0x31
 800679c:	e799      	b.n	80066d2 <_dtoa_r+0xb3a>
 800679e:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <_dtoa_r+0xc2c>)
 80067a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80067a2:	9306      	str	r3, [sp, #24]
 80067a4:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <_dtoa_r+0xc30>)
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	d001      	beq.n	80067ae <_dtoa_r+0xc16>
 80067aa:	f7ff fa3f 	bl	8005c2c <_dtoa_r+0x94>
 80067ae:	f7ff fa3f 	bl	8005c30 <_dtoa_r+0x98>
 80067b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	dcb6      	bgt.n	8006726 <_dtoa_r+0xb8e>
 80067b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	dd00      	ble.n	80067c0 <_dtoa_r+0xc28>
 80067be:	e6ac      	b.n	800651a <_dtoa_r+0x982>
 80067c0:	e7b1      	b.n	8006726 <_dtoa_r+0xb8e>
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	08008368 	.word	0x08008368
 80067c8:	08008370 	.word	0x08008370

080067cc <_localeconv_r>:
 80067cc:	4800      	ldr	r0, [pc, #0]	; (80067d0 <_localeconv_r+0x4>)
 80067ce:	4770      	bx	lr
 80067d0:	200001a4 	.word	0x200001a4

080067d4 <malloc>:
 80067d4:	b510      	push	{r4, lr}
 80067d6:	4b03      	ldr	r3, [pc, #12]	; (80067e4 <malloc+0x10>)
 80067d8:	0001      	movs	r1, r0
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	f000 fc4c 	bl	8007078 <_malloc_r>
 80067e0:	bd10      	pop	{r4, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	20000050 	.word	0x20000050

080067e8 <memchr>:
 80067e8:	b2c9      	uxtb	r1, r1
 80067ea:	1882      	adds	r2, r0, r2
 80067ec:	4290      	cmp	r0, r2
 80067ee:	d101      	bne.n	80067f4 <memchr+0xc>
 80067f0:	2000      	movs	r0, #0
 80067f2:	4770      	bx	lr
 80067f4:	7803      	ldrb	r3, [r0, #0]
 80067f6:	428b      	cmp	r3, r1
 80067f8:	d0fb      	beq.n	80067f2 <memchr+0xa>
 80067fa:	3001      	adds	r0, #1
 80067fc:	e7f6      	b.n	80067ec <memchr+0x4>

080067fe <memcpy>:
 80067fe:	2300      	movs	r3, #0
 8006800:	b510      	push	{r4, lr}
 8006802:	429a      	cmp	r2, r3
 8006804:	d100      	bne.n	8006808 <memcpy+0xa>
 8006806:	bd10      	pop	{r4, pc}
 8006808:	5ccc      	ldrb	r4, [r1, r3]
 800680a:	54c4      	strb	r4, [r0, r3]
 800680c:	3301      	adds	r3, #1
 800680e:	e7f8      	b.n	8006802 <memcpy+0x4>

08006810 <_Balloc>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006814:	0006      	movs	r6, r0
 8006816:	000c      	movs	r4, r1
 8006818:	2d00      	cmp	r5, #0
 800681a:	d10e      	bne.n	800683a <_Balloc+0x2a>
 800681c:	2010      	movs	r0, #16
 800681e:	f7ff ffd9 	bl	80067d4 <malloc>
 8006822:	1e02      	subs	r2, r0, #0
 8006824:	6270      	str	r0, [r6, #36]	; 0x24
 8006826:	d104      	bne.n	8006832 <_Balloc+0x22>
 8006828:	2166      	movs	r1, #102	; 0x66
 800682a:	4b19      	ldr	r3, [pc, #100]	; (8006890 <_Balloc+0x80>)
 800682c:	4819      	ldr	r0, [pc, #100]	; (8006894 <_Balloc+0x84>)
 800682e:	f000 fe0d 	bl	800744c <__assert_func>
 8006832:	6045      	str	r5, [r0, #4]
 8006834:	6085      	str	r5, [r0, #8]
 8006836:	6005      	str	r5, [r0, #0]
 8006838:	60c5      	str	r5, [r0, #12]
 800683a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800683c:	68eb      	ldr	r3, [r5, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d013      	beq.n	800686a <_Balloc+0x5a>
 8006842:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006844:	00a2      	lsls	r2, r4, #2
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	189b      	adds	r3, r3, r2
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	2800      	cmp	r0, #0
 800684e:	d118      	bne.n	8006882 <_Balloc+0x72>
 8006850:	2101      	movs	r1, #1
 8006852:	000d      	movs	r5, r1
 8006854:	40a5      	lsls	r5, r4
 8006856:	1d6a      	adds	r2, r5, #5
 8006858:	0030      	movs	r0, r6
 800685a:	0092      	lsls	r2, r2, #2
 800685c:	f000 fb74 	bl	8006f48 <_calloc_r>
 8006860:	2800      	cmp	r0, #0
 8006862:	d00c      	beq.n	800687e <_Balloc+0x6e>
 8006864:	6044      	str	r4, [r0, #4]
 8006866:	6085      	str	r5, [r0, #8]
 8006868:	e00d      	b.n	8006886 <_Balloc+0x76>
 800686a:	2221      	movs	r2, #33	; 0x21
 800686c:	2104      	movs	r1, #4
 800686e:	0030      	movs	r0, r6
 8006870:	f000 fb6a 	bl	8006f48 <_calloc_r>
 8006874:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006876:	60e8      	str	r0, [r5, #12]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e1      	bne.n	8006842 <_Balloc+0x32>
 800687e:	2000      	movs	r0, #0
 8006880:	bd70      	pop	{r4, r5, r6, pc}
 8006882:	6802      	ldr	r2, [r0, #0]
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	2300      	movs	r3, #0
 8006888:	6103      	str	r3, [r0, #16]
 800688a:	60c3      	str	r3, [r0, #12]
 800688c:	e7f8      	b.n	8006880 <_Balloc+0x70>
 800688e:	46c0      	nop			; (mov r8, r8)
 8006890:	08008375 	.word	0x08008375
 8006894:	080083f8 	.word	0x080083f8

08006898 <_Bfree>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800689c:	0005      	movs	r5, r0
 800689e:	000c      	movs	r4, r1
 80068a0:	2e00      	cmp	r6, #0
 80068a2:	d10e      	bne.n	80068c2 <_Bfree+0x2a>
 80068a4:	2010      	movs	r0, #16
 80068a6:	f7ff ff95 	bl	80067d4 <malloc>
 80068aa:	1e02      	subs	r2, r0, #0
 80068ac:	6268      	str	r0, [r5, #36]	; 0x24
 80068ae:	d104      	bne.n	80068ba <_Bfree+0x22>
 80068b0:	218a      	movs	r1, #138	; 0x8a
 80068b2:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <_Bfree+0x40>)
 80068b4:	4809      	ldr	r0, [pc, #36]	; (80068dc <_Bfree+0x44>)
 80068b6:	f000 fdc9 	bl	800744c <__assert_func>
 80068ba:	6046      	str	r6, [r0, #4]
 80068bc:	6086      	str	r6, [r0, #8]
 80068be:	6006      	str	r6, [r0, #0]
 80068c0:	60c6      	str	r6, [r0, #12]
 80068c2:	2c00      	cmp	r4, #0
 80068c4:	d007      	beq.n	80068d6 <_Bfree+0x3e>
 80068c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068c8:	6862      	ldr	r2, [r4, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	0092      	lsls	r2, r2, #2
 80068ce:	189b      	adds	r3, r3, r2
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	6022      	str	r2, [r4, #0]
 80068d4:	601c      	str	r4, [r3, #0]
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	08008375 	.word	0x08008375
 80068dc:	080083f8 	.word	0x080083f8

080068e0 <__multadd>:
 80068e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068e2:	000e      	movs	r6, r1
 80068e4:	9001      	str	r0, [sp, #4]
 80068e6:	000c      	movs	r4, r1
 80068e8:	001d      	movs	r5, r3
 80068ea:	2000      	movs	r0, #0
 80068ec:	690f      	ldr	r7, [r1, #16]
 80068ee:	3614      	adds	r6, #20
 80068f0:	6833      	ldr	r3, [r6, #0]
 80068f2:	3001      	adds	r0, #1
 80068f4:	b299      	uxth	r1, r3
 80068f6:	4351      	muls	r1, r2
 80068f8:	0c1b      	lsrs	r3, r3, #16
 80068fa:	4353      	muls	r3, r2
 80068fc:	1949      	adds	r1, r1, r5
 80068fe:	0c0d      	lsrs	r5, r1, #16
 8006900:	195b      	adds	r3, r3, r5
 8006902:	0c1d      	lsrs	r5, r3, #16
 8006904:	b289      	uxth	r1, r1
 8006906:	041b      	lsls	r3, r3, #16
 8006908:	185b      	adds	r3, r3, r1
 800690a:	c608      	stmia	r6!, {r3}
 800690c:	4287      	cmp	r7, r0
 800690e:	dcef      	bgt.n	80068f0 <__multadd+0x10>
 8006910:	2d00      	cmp	r5, #0
 8006912:	d022      	beq.n	800695a <__multadd+0x7a>
 8006914:	68a3      	ldr	r3, [r4, #8]
 8006916:	42bb      	cmp	r3, r7
 8006918:	dc19      	bgt.n	800694e <__multadd+0x6e>
 800691a:	6863      	ldr	r3, [r4, #4]
 800691c:	9801      	ldr	r0, [sp, #4]
 800691e:	1c59      	adds	r1, r3, #1
 8006920:	f7ff ff76 	bl	8006810 <_Balloc>
 8006924:	1e06      	subs	r6, r0, #0
 8006926:	d105      	bne.n	8006934 <__multadd+0x54>
 8006928:	0002      	movs	r2, r0
 800692a:	21b5      	movs	r1, #181	; 0xb5
 800692c:	4b0c      	ldr	r3, [pc, #48]	; (8006960 <__multadd+0x80>)
 800692e:	480d      	ldr	r0, [pc, #52]	; (8006964 <__multadd+0x84>)
 8006930:	f000 fd8c 	bl	800744c <__assert_func>
 8006934:	0021      	movs	r1, r4
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	310c      	adds	r1, #12
 800693a:	1c9a      	adds	r2, r3, #2
 800693c:	0092      	lsls	r2, r2, #2
 800693e:	300c      	adds	r0, #12
 8006940:	f7ff ff5d 	bl	80067fe <memcpy>
 8006944:	0021      	movs	r1, r4
 8006946:	9801      	ldr	r0, [sp, #4]
 8006948:	f7ff ffa6 	bl	8006898 <_Bfree>
 800694c:	0034      	movs	r4, r6
 800694e:	1d3b      	adds	r3, r7, #4
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	18e3      	adds	r3, r4, r3
 8006954:	605d      	str	r5, [r3, #4]
 8006956:	1c7b      	adds	r3, r7, #1
 8006958:	6123      	str	r3, [r4, #16]
 800695a:	0020      	movs	r0, r4
 800695c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	080083e7 	.word	0x080083e7
 8006964:	080083f8 	.word	0x080083f8

08006968 <__hi0bits>:
 8006968:	0003      	movs	r3, r0
 800696a:	0c02      	lsrs	r2, r0, #16
 800696c:	2000      	movs	r0, #0
 800696e:	4282      	cmp	r2, r0
 8006970:	d101      	bne.n	8006976 <__hi0bits+0xe>
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	3010      	adds	r0, #16
 8006976:	0e1a      	lsrs	r2, r3, #24
 8006978:	d101      	bne.n	800697e <__hi0bits+0x16>
 800697a:	3008      	adds	r0, #8
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	0f1a      	lsrs	r2, r3, #28
 8006980:	d101      	bne.n	8006986 <__hi0bits+0x1e>
 8006982:	3004      	adds	r0, #4
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	0f9a      	lsrs	r2, r3, #30
 8006988:	d101      	bne.n	800698e <__hi0bits+0x26>
 800698a:	3002      	adds	r0, #2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	db03      	blt.n	800699a <__hi0bits+0x32>
 8006992:	3001      	adds	r0, #1
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	d400      	bmi.n	800699a <__hi0bits+0x32>
 8006998:	2020      	movs	r0, #32
 800699a:	4770      	bx	lr

0800699c <__lo0bits>:
 800699c:	6803      	ldr	r3, [r0, #0]
 800699e:	0002      	movs	r2, r0
 80069a0:	2107      	movs	r1, #7
 80069a2:	0018      	movs	r0, r3
 80069a4:	4008      	ands	r0, r1
 80069a6:	420b      	tst	r3, r1
 80069a8:	d00d      	beq.n	80069c6 <__lo0bits+0x2a>
 80069aa:	3906      	subs	r1, #6
 80069ac:	2000      	movs	r0, #0
 80069ae:	420b      	tst	r3, r1
 80069b0:	d105      	bne.n	80069be <__lo0bits+0x22>
 80069b2:	3002      	adds	r0, #2
 80069b4:	4203      	tst	r3, r0
 80069b6:	d003      	beq.n	80069c0 <__lo0bits+0x24>
 80069b8:	40cb      	lsrs	r3, r1
 80069ba:	0008      	movs	r0, r1
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	4770      	bx	lr
 80069c0:	089b      	lsrs	r3, r3, #2
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e7fb      	b.n	80069be <__lo0bits+0x22>
 80069c6:	b299      	uxth	r1, r3
 80069c8:	2900      	cmp	r1, #0
 80069ca:	d101      	bne.n	80069d0 <__lo0bits+0x34>
 80069cc:	2010      	movs	r0, #16
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	b2d9      	uxtb	r1, r3
 80069d2:	2900      	cmp	r1, #0
 80069d4:	d101      	bne.n	80069da <__lo0bits+0x3e>
 80069d6:	3008      	adds	r0, #8
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	0719      	lsls	r1, r3, #28
 80069dc:	d101      	bne.n	80069e2 <__lo0bits+0x46>
 80069de:	3004      	adds	r0, #4
 80069e0:	091b      	lsrs	r3, r3, #4
 80069e2:	0799      	lsls	r1, r3, #30
 80069e4:	d101      	bne.n	80069ea <__lo0bits+0x4e>
 80069e6:	3002      	adds	r0, #2
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	07d9      	lsls	r1, r3, #31
 80069ec:	d4e9      	bmi.n	80069c2 <__lo0bits+0x26>
 80069ee:	3001      	adds	r0, #1
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	d1e6      	bne.n	80069c2 <__lo0bits+0x26>
 80069f4:	2020      	movs	r0, #32
 80069f6:	e7e2      	b.n	80069be <__lo0bits+0x22>

080069f8 <__i2b>:
 80069f8:	b510      	push	{r4, lr}
 80069fa:	000c      	movs	r4, r1
 80069fc:	2101      	movs	r1, #1
 80069fe:	f7ff ff07 	bl	8006810 <_Balloc>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d106      	bne.n	8006a14 <__i2b+0x1c>
 8006a06:	21a0      	movs	r1, #160	; 0xa0
 8006a08:	0002      	movs	r2, r0
 8006a0a:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <__i2b+0x24>)
 8006a0c:	4804      	ldr	r0, [pc, #16]	; (8006a20 <__i2b+0x28>)
 8006a0e:	0049      	lsls	r1, r1, #1
 8006a10:	f000 fd1c 	bl	800744c <__assert_func>
 8006a14:	2301      	movs	r3, #1
 8006a16:	6144      	str	r4, [r0, #20]
 8006a18:	6103      	str	r3, [r0, #16]
 8006a1a:	bd10      	pop	{r4, pc}
 8006a1c:	080083e7 	.word	0x080083e7
 8006a20:	080083f8 	.word	0x080083f8

08006a24 <__multiply>:
 8006a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a26:	690b      	ldr	r3, [r1, #16]
 8006a28:	0014      	movs	r4, r2
 8006a2a:	6912      	ldr	r2, [r2, #16]
 8006a2c:	000d      	movs	r5, r1
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	4293      	cmp	r3, r2
 8006a32:	da01      	bge.n	8006a38 <__multiply+0x14>
 8006a34:	0025      	movs	r5, r4
 8006a36:	000c      	movs	r4, r1
 8006a38:	692f      	ldr	r7, [r5, #16]
 8006a3a:	6926      	ldr	r6, [r4, #16]
 8006a3c:	6869      	ldr	r1, [r5, #4]
 8006a3e:	19bb      	adds	r3, r7, r6
 8006a40:	9302      	str	r3, [sp, #8]
 8006a42:	68ab      	ldr	r3, [r5, #8]
 8006a44:	19ba      	adds	r2, r7, r6
 8006a46:	4293      	cmp	r3, r2
 8006a48:	da00      	bge.n	8006a4c <__multiply+0x28>
 8006a4a:	3101      	adds	r1, #1
 8006a4c:	f7ff fee0 	bl	8006810 <_Balloc>
 8006a50:	9001      	str	r0, [sp, #4]
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d106      	bne.n	8006a64 <__multiply+0x40>
 8006a56:	215e      	movs	r1, #94	; 0x5e
 8006a58:	0002      	movs	r2, r0
 8006a5a:	4b48      	ldr	r3, [pc, #288]	; (8006b7c <__multiply+0x158>)
 8006a5c:	4848      	ldr	r0, [pc, #288]	; (8006b80 <__multiply+0x15c>)
 8006a5e:	31ff      	adds	r1, #255	; 0xff
 8006a60:	f000 fcf4 	bl	800744c <__assert_func>
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	3314      	adds	r3, #20
 8006a6a:	469c      	mov	ip, r3
 8006a6c:	19bb      	adds	r3, r7, r6
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4463      	add	r3, ip
 8006a72:	9303      	str	r3, [sp, #12]
 8006a74:	4663      	mov	r3, ip
 8006a76:	9903      	ldr	r1, [sp, #12]
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	d32c      	bcc.n	8006ad6 <__multiply+0xb2>
 8006a7c:	002b      	movs	r3, r5
 8006a7e:	0022      	movs	r2, r4
 8006a80:	3314      	adds	r3, #20
 8006a82:	00bf      	lsls	r7, r7, #2
 8006a84:	3214      	adds	r2, #20
 8006a86:	9306      	str	r3, [sp, #24]
 8006a88:	00b6      	lsls	r6, r6, #2
 8006a8a:	19db      	adds	r3, r3, r7
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	1993      	adds	r3, r2, r6
 8006a90:	9307      	str	r3, [sp, #28]
 8006a92:	2304      	movs	r3, #4
 8006a94:	9305      	str	r3, [sp, #20]
 8006a96:	002b      	movs	r3, r5
 8006a98:	9904      	ldr	r1, [sp, #16]
 8006a9a:	3315      	adds	r3, #21
 8006a9c:	9200      	str	r2, [sp, #0]
 8006a9e:	4299      	cmp	r1, r3
 8006aa0:	d305      	bcc.n	8006aae <__multiply+0x8a>
 8006aa2:	1b4b      	subs	r3, r1, r5
 8006aa4:	3b15      	subs	r3, #21
 8006aa6:	089b      	lsrs	r3, r3, #2
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	9305      	str	r3, [sp, #20]
 8006aae:	9b07      	ldr	r3, [sp, #28]
 8006ab0:	9a00      	ldr	r2, [sp, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d311      	bcc.n	8006ada <__multiply+0xb6>
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	dd06      	ble.n	8006aca <__multiply+0xa6>
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	3b04      	subs	r3, #4
 8006ac0:	9303      	str	r3, [sp, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d053      	beq.n	8006b72 <__multiply+0x14e>
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	9a02      	ldr	r2, [sp, #8]
 8006ace:	0018      	movs	r0, r3
 8006ad0:	611a      	str	r2, [r3, #16]
 8006ad2:	b009      	add	sp, #36	; 0x24
 8006ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad6:	c304      	stmia	r3!, {r2}
 8006ad8:	e7cd      	b.n	8006a76 <__multiply+0x52>
 8006ada:	9b00      	ldr	r3, [sp, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	b298      	uxth	r0, r3
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d01b      	beq.n	8006b1c <__multiply+0xf8>
 8006ae4:	4667      	mov	r7, ip
 8006ae6:	2400      	movs	r4, #0
 8006ae8:	9e06      	ldr	r6, [sp, #24]
 8006aea:	ce02      	ldmia	r6!, {r1}
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	b28b      	uxth	r3, r1
 8006af0:	4343      	muls	r3, r0
 8006af2:	b292      	uxth	r2, r2
 8006af4:	189b      	adds	r3, r3, r2
 8006af6:	191b      	adds	r3, r3, r4
 8006af8:	0c0c      	lsrs	r4, r1, #16
 8006afa:	4344      	muls	r4, r0
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	0c11      	lsrs	r1, r2, #16
 8006b00:	1861      	adds	r1, r4, r1
 8006b02:	0c1c      	lsrs	r4, r3, #16
 8006b04:	1909      	adds	r1, r1, r4
 8006b06:	0c0c      	lsrs	r4, r1, #16
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	0409      	lsls	r1, r1, #16
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	c708      	stmia	r7!, {r3}
 8006b10:	9b04      	ldr	r3, [sp, #16]
 8006b12:	42b3      	cmp	r3, r6
 8006b14:	d8e9      	bhi.n	8006aea <__multiply+0xc6>
 8006b16:	4663      	mov	r3, ip
 8006b18:	9a05      	ldr	r2, [sp, #20]
 8006b1a:	509c      	str	r4, [r3, r2]
 8006b1c:	9b00      	ldr	r3, [sp, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	0c1e      	lsrs	r6, r3, #16
 8006b22:	d020      	beq.n	8006b66 <__multiply+0x142>
 8006b24:	4663      	mov	r3, ip
 8006b26:	002c      	movs	r4, r5
 8006b28:	4660      	mov	r0, ip
 8006b2a:	2700      	movs	r7, #0
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3414      	adds	r4, #20
 8006b30:	6822      	ldr	r2, [r4, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	b291      	uxth	r1, r2
 8006b36:	4371      	muls	r1, r6
 8006b38:	6802      	ldr	r2, [r0, #0]
 8006b3a:	0c12      	lsrs	r2, r2, #16
 8006b3c:	1889      	adds	r1, r1, r2
 8006b3e:	19cf      	adds	r7, r1, r7
 8006b40:	0439      	lsls	r1, r7, #16
 8006b42:	430b      	orrs	r3, r1
 8006b44:	6003      	str	r3, [r0, #0]
 8006b46:	cc02      	ldmia	r4!, {r1}
 8006b48:	6843      	ldr	r3, [r0, #4]
 8006b4a:	0c09      	lsrs	r1, r1, #16
 8006b4c:	4371      	muls	r1, r6
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	0c3f      	lsrs	r7, r7, #16
 8006b52:	18cb      	adds	r3, r1, r3
 8006b54:	9a04      	ldr	r2, [sp, #16]
 8006b56:	19db      	adds	r3, r3, r7
 8006b58:	0c1f      	lsrs	r7, r3, #16
 8006b5a:	3004      	adds	r0, #4
 8006b5c:	42a2      	cmp	r2, r4
 8006b5e:	d8e7      	bhi.n	8006b30 <__multiply+0x10c>
 8006b60:	4662      	mov	r2, ip
 8006b62:	9905      	ldr	r1, [sp, #20]
 8006b64:	5053      	str	r3, [r2, r1]
 8006b66:	9b00      	ldr	r3, [sp, #0]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	449c      	add	ip, r3
 8006b70:	e79d      	b.n	8006aae <__multiply+0x8a>
 8006b72:	9b02      	ldr	r3, [sp, #8]
 8006b74:	3b01      	subs	r3, #1
 8006b76:	9302      	str	r3, [sp, #8]
 8006b78:	e79d      	b.n	8006ab6 <__multiply+0x92>
 8006b7a:	46c0      	nop			; (mov r8, r8)
 8006b7c:	080083e7 	.word	0x080083e7
 8006b80:	080083f8 	.word	0x080083f8

08006b84 <__pow5mult>:
 8006b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b86:	2303      	movs	r3, #3
 8006b88:	0015      	movs	r5, r2
 8006b8a:	0007      	movs	r7, r0
 8006b8c:	000e      	movs	r6, r1
 8006b8e:	401a      	ands	r2, r3
 8006b90:	421d      	tst	r5, r3
 8006b92:	d008      	beq.n	8006ba6 <__pow5mult+0x22>
 8006b94:	4925      	ldr	r1, [pc, #148]	; (8006c2c <__pow5mult+0xa8>)
 8006b96:	3a01      	subs	r2, #1
 8006b98:	0092      	lsls	r2, r2, #2
 8006b9a:	5852      	ldr	r2, [r2, r1]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	0031      	movs	r1, r6
 8006ba0:	f7ff fe9e 	bl	80068e0 <__multadd>
 8006ba4:	0006      	movs	r6, r0
 8006ba6:	10ad      	asrs	r5, r5, #2
 8006ba8:	d03d      	beq.n	8006c26 <__pow5mult+0xa2>
 8006baa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006bac:	2c00      	cmp	r4, #0
 8006bae:	d10f      	bne.n	8006bd0 <__pow5mult+0x4c>
 8006bb0:	2010      	movs	r0, #16
 8006bb2:	f7ff fe0f 	bl	80067d4 <malloc>
 8006bb6:	1e02      	subs	r2, r0, #0
 8006bb8:	6278      	str	r0, [r7, #36]	; 0x24
 8006bba:	d105      	bne.n	8006bc8 <__pow5mult+0x44>
 8006bbc:	21d7      	movs	r1, #215	; 0xd7
 8006bbe:	4b1c      	ldr	r3, [pc, #112]	; (8006c30 <__pow5mult+0xac>)
 8006bc0:	481c      	ldr	r0, [pc, #112]	; (8006c34 <__pow5mult+0xb0>)
 8006bc2:	0049      	lsls	r1, r1, #1
 8006bc4:	f000 fc42 	bl	800744c <__assert_func>
 8006bc8:	6044      	str	r4, [r0, #4]
 8006bca:	6084      	str	r4, [r0, #8]
 8006bcc:	6004      	str	r4, [r0, #0]
 8006bce:	60c4      	str	r4, [r0, #12]
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	689c      	ldr	r4, [r3, #8]
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	2c00      	cmp	r4, #0
 8006bd8:	d108      	bne.n	8006bec <__pow5mult+0x68>
 8006bda:	0038      	movs	r0, r7
 8006bdc:	4916      	ldr	r1, [pc, #88]	; (8006c38 <__pow5mult+0xb4>)
 8006bde:	f7ff ff0b 	bl	80069f8 <__i2b>
 8006be2:	9b01      	ldr	r3, [sp, #4]
 8006be4:	0004      	movs	r4, r0
 8006be6:	6098      	str	r0, [r3, #8]
 8006be8:	2300      	movs	r3, #0
 8006bea:	6003      	str	r3, [r0, #0]
 8006bec:	2301      	movs	r3, #1
 8006bee:	421d      	tst	r5, r3
 8006bf0:	d00a      	beq.n	8006c08 <__pow5mult+0x84>
 8006bf2:	0031      	movs	r1, r6
 8006bf4:	0022      	movs	r2, r4
 8006bf6:	0038      	movs	r0, r7
 8006bf8:	f7ff ff14 	bl	8006a24 <__multiply>
 8006bfc:	0031      	movs	r1, r6
 8006bfe:	9001      	str	r0, [sp, #4]
 8006c00:	0038      	movs	r0, r7
 8006c02:	f7ff fe49 	bl	8006898 <_Bfree>
 8006c06:	9e01      	ldr	r6, [sp, #4]
 8006c08:	106d      	asrs	r5, r5, #1
 8006c0a:	d00c      	beq.n	8006c26 <__pow5mult+0xa2>
 8006c0c:	6820      	ldr	r0, [r4, #0]
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d107      	bne.n	8006c22 <__pow5mult+0x9e>
 8006c12:	0022      	movs	r2, r4
 8006c14:	0021      	movs	r1, r4
 8006c16:	0038      	movs	r0, r7
 8006c18:	f7ff ff04 	bl	8006a24 <__multiply>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	6020      	str	r0, [r4, #0]
 8006c20:	6003      	str	r3, [r0, #0]
 8006c22:	0004      	movs	r4, r0
 8006c24:	e7e2      	b.n	8006bec <__pow5mult+0x68>
 8006c26:	0030      	movs	r0, r6
 8006c28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	08008548 	.word	0x08008548
 8006c30:	08008375 	.word	0x08008375
 8006c34:	080083f8 	.word	0x080083f8
 8006c38:	00000271 	.word	0x00000271

08006c3c <__lshift>:
 8006c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c3e:	000c      	movs	r4, r1
 8006c40:	0017      	movs	r7, r2
 8006c42:	6923      	ldr	r3, [r4, #16]
 8006c44:	1155      	asrs	r5, r2, #5
 8006c46:	b087      	sub	sp, #28
 8006c48:	18eb      	adds	r3, r5, r3
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	6849      	ldr	r1, [r1, #4]
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	9004      	str	r0, [sp, #16]
 8006c56:	9a01      	ldr	r2, [sp, #4]
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	db10      	blt.n	8006c7e <__lshift+0x42>
 8006c5c:	9804      	ldr	r0, [sp, #16]
 8006c5e:	f7ff fdd7 	bl	8006810 <_Balloc>
 8006c62:	2300      	movs	r3, #0
 8006c64:	0002      	movs	r2, r0
 8006c66:	0006      	movs	r6, r0
 8006c68:	0019      	movs	r1, r3
 8006c6a:	3214      	adds	r2, #20
 8006c6c:	4298      	cmp	r0, r3
 8006c6e:	d10c      	bne.n	8006c8a <__lshift+0x4e>
 8006c70:	21da      	movs	r1, #218	; 0xda
 8006c72:	0002      	movs	r2, r0
 8006c74:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <__lshift+0xd4>)
 8006c76:	4827      	ldr	r0, [pc, #156]	; (8006d14 <__lshift+0xd8>)
 8006c78:	31ff      	adds	r1, #255	; 0xff
 8006c7a:	f000 fbe7 	bl	800744c <__assert_func>
 8006c7e:	3101      	adds	r1, #1
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	e7e8      	b.n	8006c56 <__lshift+0x1a>
 8006c84:	0098      	lsls	r0, r3, #2
 8006c86:	5011      	str	r1, [r2, r0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	42ab      	cmp	r3, r5
 8006c8c:	dbfa      	blt.n	8006c84 <__lshift+0x48>
 8006c8e:	43eb      	mvns	r3, r5
 8006c90:	17db      	asrs	r3, r3, #31
 8006c92:	401d      	ands	r5, r3
 8006c94:	211f      	movs	r1, #31
 8006c96:	0023      	movs	r3, r4
 8006c98:	0038      	movs	r0, r7
 8006c9a:	00ad      	lsls	r5, r5, #2
 8006c9c:	1955      	adds	r5, r2, r5
 8006c9e:	6922      	ldr	r2, [r4, #16]
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	0092      	lsls	r2, r2, #2
 8006ca4:	4008      	ands	r0, r1
 8006ca6:	4684      	mov	ip, r0
 8006ca8:	189a      	adds	r2, r3, r2
 8006caa:	420f      	tst	r7, r1
 8006cac:	d02a      	beq.n	8006d04 <__lshift+0xc8>
 8006cae:	3101      	adds	r1, #1
 8006cb0:	1a09      	subs	r1, r1, r0
 8006cb2:	9105      	str	r1, [sp, #20]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	9503      	str	r5, [sp, #12]
 8006cb8:	4667      	mov	r7, ip
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	40b8      	lsls	r0, r7
 8006cbe:	4301      	orrs	r1, r0
 8006cc0:	9803      	ldr	r0, [sp, #12]
 8006cc2:	c002      	stmia	r0!, {r1}
 8006cc4:	cb02      	ldmia	r3!, {r1}
 8006cc6:	9003      	str	r0, [sp, #12]
 8006cc8:	9805      	ldr	r0, [sp, #20]
 8006cca:	40c1      	lsrs	r1, r0
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d8f3      	bhi.n	8006cb8 <__lshift+0x7c>
 8006cd0:	0020      	movs	r0, r4
 8006cd2:	3015      	adds	r0, #21
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	4282      	cmp	r2, r0
 8006cd8:	d304      	bcc.n	8006ce4 <__lshift+0xa8>
 8006cda:	1b13      	subs	r3, r2, r4
 8006cdc:	3b15      	subs	r3, #21
 8006cde:	089b      	lsrs	r3, r3, #2
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	50e9      	str	r1, [r5, r3]
 8006ce6:	2900      	cmp	r1, #0
 8006ce8:	d002      	beq.n	8006cf0 <__lshift+0xb4>
 8006cea:	9b02      	ldr	r3, [sp, #8]
 8006cec:	3302      	adds	r3, #2
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	9b01      	ldr	r3, [sp, #4]
 8006cf2:	9804      	ldr	r0, [sp, #16]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	0021      	movs	r1, r4
 8006cf8:	6133      	str	r3, [r6, #16]
 8006cfa:	f7ff fdcd 	bl	8006898 <_Bfree>
 8006cfe:	0030      	movs	r0, r6
 8006d00:	b007      	add	sp, #28
 8006d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d04:	cb02      	ldmia	r3!, {r1}
 8006d06:	c502      	stmia	r5!, {r1}
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d8fb      	bhi.n	8006d04 <__lshift+0xc8>
 8006d0c:	e7f0      	b.n	8006cf0 <__lshift+0xb4>
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	080083e7 	.word	0x080083e7
 8006d14:	080083f8 	.word	0x080083f8

08006d18 <__mcmp>:
 8006d18:	6902      	ldr	r2, [r0, #16]
 8006d1a:	690b      	ldr	r3, [r1, #16]
 8006d1c:	b530      	push	{r4, r5, lr}
 8006d1e:	0004      	movs	r4, r0
 8006d20:	1ad0      	subs	r0, r2, r3
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d10d      	bne.n	8006d42 <__mcmp+0x2a>
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	3414      	adds	r4, #20
 8006d2a:	3114      	adds	r1, #20
 8006d2c:	18e2      	adds	r2, r4, r3
 8006d2e:	18c9      	adds	r1, r1, r3
 8006d30:	3a04      	subs	r2, #4
 8006d32:	3904      	subs	r1, #4
 8006d34:	6815      	ldr	r5, [r2, #0]
 8006d36:	680b      	ldr	r3, [r1, #0]
 8006d38:	429d      	cmp	r5, r3
 8006d3a:	d003      	beq.n	8006d44 <__mcmp+0x2c>
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	429d      	cmp	r5, r3
 8006d40:	d303      	bcc.n	8006d4a <__mcmp+0x32>
 8006d42:	bd30      	pop	{r4, r5, pc}
 8006d44:	4294      	cmp	r4, r2
 8006d46:	d3f3      	bcc.n	8006d30 <__mcmp+0x18>
 8006d48:	e7fb      	b.n	8006d42 <__mcmp+0x2a>
 8006d4a:	4240      	negs	r0, r0
 8006d4c:	e7f9      	b.n	8006d42 <__mcmp+0x2a>
	...

08006d50 <__mdiff>:
 8006d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d52:	000e      	movs	r6, r1
 8006d54:	0007      	movs	r7, r0
 8006d56:	0011      	movs	r1, r2
 8006d58:	0030      	movs	r0, r6
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	0014      	movs	r4, r2
 8006d5e:	f7ff ffdb 	bl	8006d18 <__mcmp>
 8006d62:	1e05      	subs	r5, r0, #0
 8006d64:	d110      	bne.n	8006d88 <__mdiff+0x38>
 8006d66:	0001      	movs	r1, r0
 8006d68:	0038      	movs	r0, r7
 8006d6a:	f7ff fd51 	bl	8006810 <_Balloc>
 8006d6e:	1e02      	subs	r2, r0, #0
 8006d70:	d104      	bne.n	8006d7c <__mdiff+0x2c>
 8006d72:	4b40      	ldr	r3, [pc, #256]	; (8006e74 <__mdiff+0x124>)
 8006d74:	4940      	ldr	r1, [pc, #256]	; (8006e78 <__mdiff+0x128>)
 8006d76:	4841      	ldr	r0, [pc, #260]	; (8006e7c <__mdiff+0x12c>)
 8006d78:	f000 fb68 	bl	800744c <__assert_func>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6145      	str	r5, [r0, #20]
 8006d80:	6103      	str	r3, [r0, #16]
 8006d82:	0010      	movs	r0, r2
 8006d84:	b007      	add	sp, #28
 8006d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d88:	2301      	movs	r3, #1
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	db04      	blt.n	8006d9a <__mdiff+0x4a>
 8006d90:	0023      	movs	r3, r4
 8006d92:	0034      	movs	r4, r6
 8006d94:	001e      	movs	r6, r3
 8006d96:	2300      	movs	r3, #0
 8006d98:	9301      	str	r3, [sp, #4]
 8006d9a:	0038      	movs	r0, r7
 8006d9c:	6861      	ldr	r1, [r4, #4]
 8006d9e:	f7ff fd37 	bl	8006810 <_Balloc>
 8006da2:	1e02      	subs	r2, r0, #0
 8006da4:	d103      	bne.n	8006dae <__mdiff+0x5e>
 8006da6:	2190      	movs	r1, #144	; 0x90
 8006da8:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <__mdiff+0x124>)
 8006daa:	0089      	lsls	r1, r1, #2
 8006dac:	e7e3      	b.n	8006d76 <__mdiff+0x26>
 8006dae:	9b01      	ldr	r3, [sp, #4]
 8006db0:	2700      	movs	r7, #0
 8006db2:	60c3      	str	r3, [r0, #12]
 8006db4:	6920      	ldr	r0, [r4, #16]
 8006db6:	3414      	adds	r4, #20
 8006db8:	9401      	str	r4, [sp, #4]
 8006dba:	9b01      	ldr	r3, [sp, #4]
 8006dbc:	0084      	lsls	r4, r0, #2
 8006dbe:	191b      	adds	r3, r3, r4
 8006dc0:	0034      	movs	r4, r6
 8006dc2:	9302      	str	r3, [sp, #8]
 8006dc4:	6933      	ldr	r3, [r6, #16]
 8006dc6:	3414      	adds	r4, #20
 8006dc8:	0099      	lsls	r1, r3, #2
 8006dca:	1863      	adds	r3, r4, r1
 8006dcc:	9303      	str	r3, [sp, #12]
 8006dce:	0013      	movs	r3, r2
 8006dd0:	3314      	adds	r3, #20
 8006dd2:	469c      	mov	ip, r3
 8006dd4:	9305      	str	r3, [sp, #20]
 8006dd6:	9b01      	ldr	r3, [sp, #4]
 8006dd8:	9304      	str	r3, [sp, #16]
 8006dda:	9b04      	ldr	r3, [sp, #16]
 8006ddc:	cc02      	ldmia	r4!, {r1}
 8006dde:	cb20      	ldmia	r3!, {r5}
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	b2ab      	uxth	r3, r5
 8006de4:	19df      	adds	r7, r3, r7
 8006de6:	b28b      	uxth	r3, r1
 8006de8:	1afb      	subs	r3, r7, r3
 8006dea:	0c09      	lsrs	r1, r1, #16
 8006dec:	0c2d      	lsrs	r5, r5, #16
 8006dee:	1a6d      	subs	r5, r5, r1
 8006df0:	1419      	asrs	r1, r3, #16
 8006df2:	186d      	adds	r5, r5, r1
 8006df4:	4661      	mov	r1, ip
 8006df6:	142f      	asrs	r7, r5, #16
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	042d      	lsls	r5, r5, #16
 8006dfc:	432b      	orrs	r3, r5
 8006dfe:	c108      	stmia	r1!, {r3}
 8006e00:	9b03      	ldr	r3, [sp, #12]
 8006e02:	468c      	mov	ip, r1
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	d8e8      	bhi.n	8006dda <__mdiff+0x8a>
 8006e08:	0031      	movs	r1, r6
 8006e0a:	9c03      	ldr	r4, [sp, #12]
 8006e0c:	3115      	adds	r1, #21
 8006e0e:	2304      	movs	r3, #4
 8006e10:	428c      	cmp	r4, r1
 8006e12:	d304      	bcc.n	8006e1e <__mdiff+0xce>
 8006e14:	1ba3      	subs	r3, r4, r6
 8006e16:	3b15      	subs	r3, #21
 8006e18:	089b      	lsrs	r3, r3, #2
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	9901      	ldr	r1, [sp, #4]
 8006e20:	18cc      	adds	r4, r1, r3
 8006e22:	9905      	ldr	r1, [sp, #20]
 8006e24:	0026      	movs	r6, r4
 8006e26:	18cb      	adds	r3, r1, r3
 8006e28:	469c      	mov	ip, r3
 8006e2a:	9902      	ldr	r1, [sp, #8]
 8006e2c:	428e      	cmp	r6, r1
 8006e2e:	d310      	bcc.n	8006e52 <__mdiff+0x102>
 8006e30:	9e02      	ldr	r6, [sp, #8]
 8006e32:	1ee1      	subs	r1, r4, #3
 8006e34:	2500      	movs	r5, #0
 8006e36:	428e      	cmp	r6, r1
 8006e38:	d304      	bcc.n	8006e44 <__mdiff+0xf4>
 8006e3a:	0031      	movs	r1, r6
 8006e3c:	3103      	adds	r1, #3
 8006e3e:	1b0c      	subs	r4, r1, r4
 8006e40:	08a4      	lsrs	r4, r4, #2
 8006e42:	00a5      	lsls	r5, r4, #2
 8006e44:	195b      	adds	r3, r3, r5
 8006e46:	3b04      	subs	r3, #4
 8006e48:	6819      	ldr	r1, [r3, #0]
 8006e4a:	2900      	cmp	r1, #0
 8006e4c:	d00f      	beq.n	8006e6e <__mdiff+0x11e>
 8006e4e:	6110      	str	r0, [r2, #16]
 8006e50:	e797      	b.n	8006d82 <__mdiff+0x32>
 8006e52:	ce02      	ldmia	r6!, {r1}
 8006e54:	b28d      	uxth	r5, r1
 8006e56:	19ed      	adds	r5, r5, r7
 8006e58:	0c0f      	lsrs	r7, r1, #16
 8006e5a:	1429      	asrs	r1, r5, #16
 8006e5c:	1879      	adds	r1, r7, r1
 8006e5e:	140f      	asrs	r7, r1, #16
 8006e60:	b2ad      	uxth	r5, r5
 8006e62:	0409      	lsls	r1, r1, #16
 8006e64:	430d      	orrs	r5, r1
 8006e66:	4661      	mov	r1, ip
 8006e68:	c120      	stmia	r1!, {r5}
 8006e6a:	468c      	mov	ip, r1
 8006e6c:	e7dd      	b.n	8006e2a <__mdiff+0xda>
 8006e6e:	3801      	subs	r0, #1
 8006e70:	e7e9      	b.n	8006e46 <__mdiff+0xf6>
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	080083e7 	.word	0x080083e7
 8006e78:	00000232 	.word	0x00000232
 8006e7c:	080083f8 	.word	0x080083f8

08006e80 <__d2b>:
 8006e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e82:	2101      	movs	r1, #1
 8006e84:	0014      	movs	r4, r2
 8006e86:	001e      	movs	r6, r3
 8006e88:	9f08      	ldr	r7, [sp, #32]
 8006e8a:	f7ff fcc1 	bl	8006810 <_Balloc>
 8006e8e:	1e05      	subs	r5, r0, #0
 8006e90:	d105      	bne.n	8006e9e <__d2b+0x1e>
 8006e92:	0002      	movs	r2, r0
 8006e94:	4b26      	ldr	r3, [pc, #152]	; (8006f30 <__d2b+0xb0>)
 8006e96:	4927      	ldr	r1, [pc, #156]	; (8006f34 <__d2b+0xb4>)
 8006e98:	4827      	ldr	r0, [pc, #156]	; (8006f38 <__d2b+0xb8>)
 8006e9a:	f000 fad7 	bl	800744c <__assert_func>
 8006e9e:	0333      	lsls	r3, r6, #12
 8006ea0:	0076      	lsls	r6, r6, #1
 8006ea2:	0b1b      	lsrs	r3, r3, #12
 8006ea4:	0d76      	lsrs	r6, r6, #21
 8006ea6:	d124      	bne.n	8006ef2 <__d2b+0x72>
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	2c00      	cmp	r4, #0
 8006eac:	d027      	beq.n	8006efe <__d2b+0x7e>
 8006eae:	4668      	mov	r0, sp
 8006eb0:	9400      	str	r4, [sp, #0]
 8006eb2:	f7ff fd73 	bl	800699c <__lo0bits>
 8006eb6:	9c00      	ldr	r4, [sp, #0]
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d01e      	beq.n	8006efa <__d2b+0x7a>
 8006ebc:	9b01      	ldr	r3, [sp, #4]
 8006ebe:	2120      	movs	r1, #32
 8006ec0:	001a      	movs	r2, r3
 8006ec2:	1a09      	subs	r1, r1, r0
 8006ec4:	408a      	lsls	r2, r1
 8006ec6:	40c3      	lsrs	r3, r0
 8006ec8:	4322      	orrs	r2, r4
 8006eca:	616a      	str	r2, [r5, #20]
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	9c01      	ldr	r4, [sp, #4]
 8006ed0:	61ac      	str	r4, [r5, #24]
 8006ed2:	1e63      	subs	r3, r4, #1
 8006ed4:	419c      	sbcs	r4, r3
 8006ed6:	3401      	adds	r4, #1
 8006ed8:	612c      	str	r4, [r5, #16]
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	d018      	beq.n	8006f10 <__d2b+0x90>
 8006ede:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <__d2b+0xbc>)
 8006ee0:	18f6      	adds	r6, r6, r3
 8006ee2:	2335      	movs	r3, #53	; 0x35
 8006ee4:	1836      	adds	r6, r6, r0
 8006ee6:	1a18      	subs	r0, r3, r0
 8006ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eea:	603e      	str	r6, [r7, #0]
 8006eec:	6018      	str	r0, [r3, #0]
 8006eee:	0028      	movs	r0, r5
 8006ef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ef2:	2280      	movs	r2, #128	; 0x80
 8006ef4:	0352      	lsls	r2, r2, #13
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	e7d6      	b.n	8006ea8 <__d2b+0x28>
 8006efa:	616c      	str	r4, [r5, #20]
 8006efc:	e7e7      	b.n	8006ece <__d2b+0x4e>
 8006efe:	a801      	add	r0, sp, #4
 8006f00:	f7ff fd4c 	bl	800699c <__lo0bits>
 8006f04:	2401      	movs	r4, #1
 8006f06:	9b01      	ldr	r3, [sp, #4]
 8006f08:	612c      	str	r4, [r5, #16]
 8006f0a:	616b      	str	r3, [r5, #20]
 8006f0c:	3020      	adds	r0, #32
 8006f0e:	e7e4      	b.n	8006eda <__d2b+0x5a>
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <__d2b+0xc0>)
 8006f12:	18c0      	adds	r0, r0, r3
 8006f14:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <__d2b+0xc4>)
 8006f16:	6038      	str	r0, [r7, #0]
 8006f18:	18e3      	adds	r3, r4, r3
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	18eb      	adds	r3, r5, r3
 8006f1e:	6958      	ldr	r0, [r3, #20]
 8006f20:	f7ff fd22 	bl	8006968 <__hi0bits>
 8006f24:	0164      	lsls	r4, r4, #5
 8006f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f28:	1a24      	subs	r4, r4, r0
 8006f2a:	601c      	str	r4, [r3, #0]
 8006f2c:	e7df      	b.n	8006eee <__d2b+0x6e>
 8006f2e:	46c0      	nop			; (mov r8, r8)
 8006f30:	080083e7 	.word	0x080083e7
 8006f34:	0000030a 	.word	0x0000030a
 8006f38:	080083f8 	.word	0x080083f8
 8006f3c:	fffffbcd 	.word	0xfffffbcd
 8006f40:	fffffbce 	.word	0xfffffbce
 8006f44:	3fffffff 	.word	0x3fffffff

08006f48 <_calloc_r>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	0c13      	lsrs	r3, r2, #16
 8006f4c:	0c0d      	lsrs	r5, r1, #16
 8006f4e:	d11e      	bne.n	8006f8e <_calloc_r+0x46>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10c      	bne.n	8006f6e <_calloc_r+0x26>
 8006f54:	b289      	uxth	r1, r1
 8006f56:	b294      	uxth	r4, r2
 8006f58:	434c      	muls	r4, r1
 8006f5a:	0021      	movs	r1, r4
 8006f5c:	f000 f88c 	bl	8007078 <_malloc_r>
 8006f60:	1e05      	subs	r5, r0, #0
 8006f62:	d01b      	beq.n	8006f9c <_calloc_r+0x54>
 8006f64:	0022      	movs	r2, r4
 8006f66:	2100      	movs	r1, #0
 8006f68:	f7fe f8dc 	bl	8005124 <memset>
 8006f6c:	e016      	b.n	8006f9c <_calloc_r+0x54>
 8006f6e:	1c1d      	adds	r5, r3, #0
 8006f70:	1c0b      	adds	r3, r1, #0
 8006f72:	b292      	uxth	r2, r2
 8006f74:	b289      	uxth	r1, r1
 8006f76:	b29c      	uxth	r4, r3
 8006f78:	4351      	muls	r1, r2
 8006f7a:	b2ab      	uxth	r3, r5
 8006f7c:	4363      	muls	r3, r4
 8006f7e:	0c0c      	lsrs	r4, r1, #16
 8006f80:	191c      	adds	r4, r3, r4
 8006f82:	0c22      	lsrs	r2, r4, #16
 8006f84:	d107      	bne.n	8006f96 <_calloc_r+0x4e>
 8006f86:	0424      	lsls	r4, r4, #16
 8006f88:	b289      	uxth	r1, r1
 8006f8a:	430c      	orrs	r4, r1
 8006f8c:	e7e5      	b.n	8006f5a <_calloc_r+0x12>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <_calloc_r+0x4e>
 8006f92:	1c13      	adds	r3, r2, #0
 8006f94:	e7ed      	b.n	8006f72 <_calloc_r+0x2a>
 8006f96:	230c      	movs	r3, #12
 8006f98:	2500      	movs	r5, #0
 8006f9a:	6003      	str	r3, [r0, #0]
 8006f9c:	0028      	movs	r0, r5
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}

08006fa0 <_free_r>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	0005      	movs	r5, r0
 8006fa4:	2900      	cmp	r1, #0
 8006fa6:	d010      	beq.n	8006fca <_free_r+0x2a>
 8006fa8:	1f0c      	subs	r4, r1, #4
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	da00      	bge.n	8006fb2 <_free_r+0x12>
 8006fb0:	18e4      	adds	r4, r4, r3
 8006fb2:	0028      	movs	r0, r5
 8006fb4:	f000 fa9e 	bl	80074f4 <__malloc_lock>
 8006fb8:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <_free_r+0x90>)
 8006fba:	6813      	ldr	r3, [r2, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <_free_r+0x2c>
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	6014      	str	r4, [r2, #0]
 8006fc4:	0028      	movs	r0, r5
 8006fc6:	f000 fa9d 	bl	8007504 <__malloc_unlock>
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	d908      	bls.n	8006fe2 <_free_r+0x42>
 8006fd0:	6821      	ldr	r1, [r4, #0]
 8006fd2:	1860      	adds	r0, r4, r1
 8006fd4:	4283      	cmp	r3, r0
 8006fd6:	d1f3      	bne.n	8006fc0 <_free_r+0x20>
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	1841      	adds	r1, r0, r1
 8006fde:	6021      	str	r1, [r4, #0]
 8006fe0:	e7ee      	b.n	8006fc0 <_free_r+0x20>
 8006fe2:	001a      	movs	r2, r3
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <_free_r+0x4e>
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	d9f9      	bls.n	8006fe2 <_free_r+0x42>
 8006fee:	6811      	ldr	r1, [r2, #0]
 8006ff0:	1850      	adds	r0, r2, r1
 8006ff2:	42a0      	cmp	r0, r4
 8006ff4:	d10b      	bne.n	800700e <_free_r+0x6e>
 8006ff6:	6820      	ldr	r0, [r4, #0]
 8006ff8:	1809      	adds	r1, r1, r0
 8006ffa:	1850      	adds	r0, r2, r1
 8006ffc:	6011      	str	r1, [r2, #0]
 8006ffe:	4283      	cmp	r3, r0
 8007000:	d1e0      	bne.n	8006fc4 <_free_r+0x24>
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	1841      	adds	r1, r0, r1
 8007008:	6011      	str	r1, [r2, #0]
 800700a:	6053      	str	r3, [r2, #4]
 800700c:	e7da      	b.n	8006fc4 <_free_r+0x24>
 800700e:	42a0      	cmp	r0, r4
 8007010:	d902      	bls.n	8007018 <_free_r+0x78>
 8007012:	230c      	movs	r3, #12
 8007014:	602b      	str	r3, [r5, #0]
 8007016:	e7d5      	b.n	8006fc4 <_free_r+0x24>
 8007018:	6821      	ldr	r1, [r4, #0]
 800701a:	1860      	adds	r0, r4, r1
 800701c:	4283      	cmp	r3, r0
 800701e:	d103      	bne.n	8007028 <_free_r+0x88>
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	1841      	adds	r1, r0, r1
 8007026:	6021      	str	r1, [r4, #0]
 8007028:	6063      	str	r3, [r4, #4]
 800702a:	6054      	str	r4, [r2, #4]
 800702c:	e7ca      	b.n	8006fc4 <_free_r+0x24>
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	200005c8 	.word	0x200005c8

08007034 <sbrk_aligned>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	4e0f      	ldr	r6, [pc, #60]	; (8007074 <sbrk_aligned+0x40>)
 8007038:	000d      	movs	r5, r1
 800703a:	6831      	ldr	r1, [r6, #0]
 800703c:	0004      	movs	r4, r0
 800703e:	2900      	cmp	r1, #0
 8007040:	d102      	bne.n	8007048 <sbrk_aligned+0x14>
 8007042:	f000 f9f1 	bl	8007428 <_sbrk_r>
 8007046:	6030      	str	r0, [r6, #0]
 8007048:	0029      	movs	r1, r5
 800704a:	0020      	movs	r0, r4
 800704c:	f000 f9ec 	bl	8007428 <_sbrk_r>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d00a      	beq.n	800706a <sbrk_aligned+0x36>
 8007054:	2303      	movs	r3, #3
 8007056:	1cc5      	adds	r5, r0, #3
 8007058:	439d      	bics	r5, r3
 800705a:	42a8      	cmp	r0, r5
 800705c:	d007      	beq.n	800706e <sbrk_aligned+0x3a>
 800705e:	1a29      	subs	r1, r5, r0
 8007060:	0020      	movs	r0, r4
 8007062:	f000 f9e1 	bl	8007428 <_sbrk_r>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	d101      	bne.n	800706e <sbrk_aligned+0x3a>
 800706a:	2501      	movs	r5, #1
 800706c:	426d      	negs	r5, r5
 800706e:	0028      	movs	r0, r5
 8007070:	bd70      	pop	{r4, r5, r6, pc}
 8007072:	46c0      	nop			; (mov r8, r8)
 8007074:	200005cc 	.word	0x200005cc

08007078 <_malloc_r>:
 8007078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800707a:	2203      	movs	r2, #3
 800707c:	1ccb      	adds	r3, r1, #3
 800707e:	4393      	bics	r3, r2
 8007080:	3308      	adds	r3, #8
 8007082:	0006      	movs	r6, r0
 8007084:	001f      	movs	r7, r3
 8007086:	2b0c      	cmp	r3, #12
 8007088:	d232      	bcs.n	80070f0 <_malloc_r+0x78>
 800708a:	270c      	movs	r7, #12
 800708c:	42b9      	cmp	r1, r7
 800708e:	d831      	bhi.n	80070f4 <_malloc_r+0x7c>
 8007090:	0030      	movs	r0, r6
 8007092:	f000 fa2f 	bl	80074f4 <__malloc_lock>
 8007096:	4d32      	ldr	r5, [pc, #200]	; (8007160 <_malloc_r+0xe8>)
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	001c      	movs	r4, r3
 800709c:	2c00      	cmp	r4, #0
 800709e:	d12e      	bne.n	80070fe <_malloc_r+0x86>
 80070a0:	0039      	movs	r1, r7
 80070a2:	0030      	movs	r0, r6
 80070a4:	f7ff ffc6 	bl	8007034 <sbrk_aligned>
 80070a8:	0004      	movs	r4, r0
 80070aa:	1c43      	adds	r3, r0, #1
 80070ac:	d11e      	bne.n	80070ec <_malloc_r+0x74>
 80070ae:	682c      	ldr	r4, [r5, #0]
 80070b0:	0025      	movs	r5, r4
 80070b2:	2d00      	cmp	r5, #0
 80070b4:	d14a      	bne.n	800714c <_malloc_r+0xd4>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	0029      	movs	r1, r5
 80070ba:	18e3      	adds	r3, r4, r3
 80070bc:	0030      	movs	r0, r6
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	f000 f9b2 	bl	8007428 <_sbrk_r>
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	4283      	cmp	r3, r0
 80070c8:	d143      	bne.n	8007152 <_malloc_r+0xda>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	3703      	adds	r7, #3
 80070ce:	1aff      	subs	r7, r7, r3
 80070d0:	2303      	movs	r3, #3
 80070d2:	439f      	bics	r7, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	2f0c      	cmp	r7, #12
 80070d8:	d200      	bcs.n	80070dc <_malloc_r+0x64>
 80070da:	270c      	movs	r7, #12
 80070dc:	0039      	movs	r1, r7
 80070de:	0030      	movs	r0, r6
 80070e0:	f7ff ffa8 	bl	8007034 <sbrk_aligned>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d034      	beq.n	8007152 <_malloc_r+0xda>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	19df      	adds	r7, r3, r7
 80070ec:	6027      	str	r7, [r4, #0]
 80070ee:	e013      	b.n	8007118 <_malloc_r+0xa0>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	dacb      	bge.n	800708c <_malloc_r+0x14>
 80070f4:	230c      	movs	r3, #12
 80070f6:	2500      	movs	r5, #0
 80070f8:	6033      	str	r3, [r6, #0]
 80070fa:	0028      	movs	r0, r5
 80070fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	1bd1      	subs	r1, r2, r7
 8007102:	d420      	bmi.n	8007146 <_malloc_r+0xce>
 8007104:	290b      	cmp	r1, #11
 8007106:	d917      	bls.n	8007138 <_malloc_r+0xc0>
 8007108:	19e2      	adds	r2, r4, r7
 800710a:	6027      	str	r7, [r4, #0]
 800710c:	42a3      	cmp	r3, r4
 800710e:	d111      	bne.n	8007134 <_malloc_r+0xbc>
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	6863      	ldr	r3, [r4, #4]
 8007114:	6011      	str	r1, [r2, #0]
 8007116:	6053      	str	r3, [r2, #4]
 8007118:	0030      	movs	r0, r6
 800711a:	0025      	movs	r5, r4
 800711c:	f000 f9f2 	bl	8007504 <__malloc_unlock>
 8007120:	2207      	movs	r2, #7
 8007122:	350b      	adds	r5, #11
 8007124:	1d23      	adds	r3, r4, #4
 8007126:	4395      	bics	r5, r2
 8007128:	1aea      	subs	r2, r5, r3
 800712a:	429d      	cmp	r5, r3
 800712c:	d0e5      	beq.n	80070fa <_malloc_r+0x82>
 800712e:	1b5b      	subs	r3, r3, r5
 8007130:	50a3      	str	r3, [r4, r2]
 8007132:	e7e2      	b.n	80070fa <_malloc_r+0x82>
 8007134:	605a      	str	r2, [r3, #4]
 8007136:	e7ec      	b.n	8007112 <_malloc_r+0x9a>
 8007138:	6862      	ldr	r2, [r4, #4]
 800713a:	42a3      	cmp	r3, r4
 800713c:	d101      	bne.n	8007142 <_malloc_r+0xca>
 800713e:	602a      	str	r2, [r5, #0]
 8007140:	e7ea      	b.n	8007118 <_malloc_r+0xa0>
 8007142:	605a      	str	r2, [r3, #4]
 8007144:	e7e8      	b.n	8007118 <_malloc_r+0xa0>
 8007146:	0023      	movs	r3, r4
 8007148:	6864      	ldr	r4, [r4, #4]
 800714a:	e7a7      	b.n	800709c <_malloc_r+0x24>
 800714c:	002c      	movs	r4, r5
 800714e:	686d      	ldr	r5, [r5, #4]
 8007150:	e7af      	b.n	80070b2 <_malloc_r+0x3a>
 8007152:	230c      	movs	r3, #12
 8007154:	0030      	movs	r0, r6
 8007156:	6033      	str	r3, [r6, #0]
 8007158:	f000 f9d4 	bl	8007504 <__malloc_unlock>
 800715c:	e7cd      	b.n	80070fa <_malloc_r+0x82>
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	200005c8 	.word	0x200005c8

08007164 <__ssputs_r>:
 8007164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007166:	688e      	ldr	r6, [r1, #8]
 8007168:	b085      	sub	sp, #20
 800716a:	0007      	movs	r7, r0
 800716c:	000c      	movs	r4, r1
 800716e:	9203      	str	r2, [sp, #12]
 8007170:	9301      	str	r3, [sp, #4]
 8007172:	429e      	cmp	r6, r3
 8007174:	d83c      	bhi.n	80071f0 <__ssputs_r+0x8c>
 8007176:	2390      	movs	r3, #144	; 0x90
 8007178:	898a      	ldrh	r2, [r1, #12]
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	421a      	tst	r2, r3
 800717e:	d034      	beq.n	80071ea <__ssputs_r+0x86>
 8007180:	6909      	ldr	r1, [r1, #16]
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	6960      	ldr	r0, [r4, #20]
 8007186:	1a5b      	subs	r3, r3, r1
 8007188:	9302      	str	r3, [sp, #8]
 800718a:	2303      	movs	r3, #3
 800718c:	4343      	muls	r3, r0
 800718e:	0fdd      	lsrs	r5, r3, #31
 8007190:	18ed      	adds	r5, r5, r3
 8007192:	9b01      	ldr	r3, [sp, #4]
 8007194:	9802      	ldr	r0, [sp, #8]
 8007196:	3301      	adds	r3, #1
 8007198:	181b      	adds	r3, r3, r0
 800719a:	106d      	asrs	r5, r5, #1
 800719c:	42ab      	cmp	r3, r5
 800719e:	d900      	bls.n	80071a2 <__ssputs_r+0x3e>
 80071a0:	001d      	movs	r5, r3
 80071a2:	0553      	lsls	r3, r2, #21
 80071a4:	d532      	bpl.n	800720c <__ssputs_r+0xa8>
 80071a6:	0029      	movs	r1, r5
 80071a8:	0038      	movs	r0, r7
 80071aa:	f7ff ff65 	bl	8007078 <_malloc_r>
 80071ae:	1e06      	subs	r6, r0, #0
 80071b0:	d109      	bne.n	80071c6 <__ssputs_r+0x62>
 80071b2:	230c      	movs	r3, #12
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	2340      	movs	r3, #64	; 0x40
 80071b8:	2001      	movs	r0, #1
 80071ba:	89a2      	ldrh	r2, [r4, #12]
 80071bc:	4240      	negs	r0, r0
 80071be:	4313      	orrs	r3, r2
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	b005      	add	sp, #20
 80071c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c6:	9a02      	ldr	r2, [sp, #8]
 80071c8:	6921      	ldr	r1, [r4, #16]
 80071ca:	f7ff fb18 	bl	80067fe <memcpy>
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	4a14      	ldr	r2, [pc, #80]	; (8007224 <__ssputs_r+0xc0>)
 80071d2:	401a      	ands	r2, r3
 80071d4:	2380      	movs	r3, #128	; 0x80
 80071d6:	4313      	orrs	r3, r2
 80071d8:	81a3      	strh	r3, [r4, #12]
 80071da:	9b02      	ldr	r3, [sp, #8]
 80071dc:	6126      	str	r6, [r4, #16]
 80071de:	18f6      	adds	r6, r6, r3
 80071e0:	6026      	str	r6, [r4, #0]
 80071e2:	6165      	str	r5, [r4, #20]
 80071e4:	9e01      	ldr	r6, [sp, #4]
 80071e6:	1aed      	subs	r5, r5, r3
 80071e8:	60a5      	str	r5, [r4, #8]
 80071ea:	9b01      	ldr	r3, [sp, #4]
 80071ec:	429e      	cmp	r6, r3
 80071ee:	d900      	bls.n	80071f2 <__ssputs_r+0x8e>
 80071f0:	9e01      	ldr	r6, [sp, #4]
 80071f2:	0032      	movs	r2, r6
 80071f4:	9903      	ldr	r1, [sp, #12]
 80071f6:	6820      	ldr	r0, [r4, #0]
 80071f8:	f000 f968 	bl	80074cc <memmove>
 80071fc:	68a3      	ldr	r3, [r4, #8]
 80071fe:	2000      	movs	r0, #0
 8007200:	1b9b      	subs	r3, r3, r6
 8007202:	60a3      	str	r3, [r4, #8]
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	199e      	adds	r6, r3, r6
 8007208:	6026      	str	r6, [r4, #0]
 800720a:	e7da      	b.n	80071c2 <__ssputs_r+0x5e>
 800720c:	002a      	movs	r2, r5
 800720e:	0038      	movs	r0, r7
 8007210:	f000 f980 	bl	8007514 <_realloc_r>
 8007214:	1e06      	subs	r6, r0, #0
 8007216:	d1e0      	bne.n	80071da <__ssputs_r+0x76>
 8007218:	0038      	movs	r0, r7
 800721a:	6921      	ldr	r1, [r4, #16]
 800721c:	f7ff fec0 	bl	8006fa0 <_free_r>
 8007220:	e7c7      	b.n	80071b2 <__ssputs_r+0x4e>
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	fffffb7f 	.word	0xfffffb7f

08007228 <_svfiprintf_r>:
 8007228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800722a:	b0a1      	sub	sp, #132	; 0x84
 800722c:	9003      	str	r0, [sp, #12]
 800722e:	001d      	movs	r5, r3
 8007230:	898b      	ldrh	r3, [r1, #12]
 8007232:	000f      	movs	r7, r1
 8007234:	0016      	movs	r6, r2
 8007236:	061b      	lsls	r3, r3, #24
 8007238:	d511      	bpl.n	800725e <_svfiprintf_r+0x36>
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10e      	bne.n	800725e <_svfiprintf_r+0x36>
 8007240:	2140      	movs	r1, #64	; 0x40
 8007242:	f7ff ff19 	bl	8007078 <_malloc_r>
 8007246:	6038      	str	r0, [r7, #0]
 8007248:	6138      	str	r0, [r7, #16]
 800724a:	2800      	cmp	r0, #0
 800724c:	d105      	bne.n	800725a <_svfiprintf_r+0x32>
 800724e:	230c      	movs	r3, #12
 8007250:	9a03      	ldr	r2, [sp, #12]
 8007252:	3801      	subs	r0, #1
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	b021      	add	sp, #132	; 0x84
 8007258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800725a:	2340      	movs	r3, #64	; 0x40
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	2300      	movs	r3, #0
 8007260:	ac08      	add	r4, sp, #32
 8007262:	6163      	str	r3, [r4, #20]
 8007264:	3320      	adds	r3, #32
 8007266:	7663      	strb	r3, [r4, #25]
 8007268:	3310      	adds	r3, #16
 800726a:	76a3      	strb	r3, [r4, #26]
 800726c:	9507      	str	r5, [sp, #28]
 800726e:	0035      	movs	r5, r6
 8007270:	782b      	ldrb	r3, [r5, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <_svfiprintf_r+0x52>
 8007276:	2b25      	cmp	r3, #37	; 0x25
 8007278:	d147      	bne.n	800730a <_svfiprintf_r+0xe2>
 800727a:	1bab      	subs	r3, r5, r6
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	42b5      	cmp	r5, r6
 8007280:	d00c      	beq.n	800729c <_svfiprintf_r+0x74>
 8007282:	0032      	movs	r2, r6
 8007284:	0039      	movs	r1, r7
 8007286:	9803      	ldr	r0, [sp, #12]
 8007288:	f7ff ff6c 	bl	8007164 <__ssputs_r>
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	d100      	bne.n	8007292 <_svfiprintf_r+0x6a>
 8007290:	e0ae      	b.n	80073f0 <_svfiprintf_r+0x1c8>
 8007292:	6962      	ldr	r2, [r4, #20]
 8007294:	9b05      	ldr	r3, [sp, #20]
 8007296:	4694      	mov	ip, r2
 8007298:	4463      	add	r3, ip
 800729a:	6163      	str	r3, [r4, #20]
 800729c:	782b      	ldrb	r3, [r5, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d100      	bne.n	80072a4 <_svfiprintf_r+0x7c>
 80072a2:	e0a5      	b.n	80073f0 <_svfiprintf_r+0x1c8>
 80072a4:	2201      	movs	r2, #1
 80072a6:	2300      	movs	r3, #0
 80072a8:	4252      	negs	r2, r2
 80072aa:	6062      	str	r2, [r4, #4]
 80072ac:	a904      	add	r1, sp, #16
 80072ae:	3254      	adds	r2, #84	; 0x54
 80072b0:	1852      	adds	r2, r2, r1
 80072b2:	1c6e      	adds	r6, r5, #1
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	60e3      	str	r3, [r4, #12]
 80072b8:	60a3      	str	r3, [r4, #8]
 80072ba:	7013      	strb	r3, [r2, #0]
 80072bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80072be:	2205      	movs	r2, #5
 80072c0:	7831      	ldrb	r1, [r6, #0]
 80072c2:	4854      	ldr	r0, [pc, #336]	; (8007414 <_svfiprintf_r+0x1ec>)
 80072c4:	f7ff fa90 	bl	80067e8 <memchr>
 80072c8:	1c75      	adds	r5, r6, #1
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d11f      	bne.n	800730e <_svfiprintf_r+0xe6>
 80072ce:	6822      	ldr	r2, [r4, #0]
 80072d0:	06d3      	lsls	r3, r2, #27
 80072d2:	d504      	bpl.n	80072de <_svfiprintf_r+0xb6>
 80072d4:	2353      	movs	r3, #83	; 0x53
 80072d6:	a904      	add	r1, sp, #16
 80072d8:	185b      	adds	r3, r3, r1
 80072da:	2120      	movs	r1, #32
 80072dc:	7019      	strb	r1, [r3, #0]
 80072de:	0713      	lsls	r3, r2, #28
 80072e0:	d504      	bpl.n	80072ec <_svfiprintf_r+0xc4>
 80072e2:	2353      	movs	r3, #83	; 0x53
 80072e4:	a904      	add	r1, sp, #16
 80072e6:	185b      	adds	r3, r3, r1
 80072e8:	212b      	movs	r1, #43	; 0x2b
 80072ea:	7019      	strb	r1, [r3, #0]
 80072ec:	7833      	ldrb	r3, [r6, #0]
 80072ee:	2b2a      	cmp	r3, #42	; 0x2a
 80072f0:	d016      	beq.n	8007320 <_svfiprintf_r+0xf8>
 80072f2:	0035      	movs	r5, r6
 80072f4:	2100      	movs	r1, #0
 80072f6:	200a      	movs	r0, #10
 80072f8:	68e3      	ldr	r3, [r4, #12]
 80072fa:	782a      	ldrb	r2, [r5, #0]
 80072fc:	1c6e      	adds	r6, r5, #1
 80072fe:	3a30      	subs	r2, #48	; 0x30
 8007300:	2a09      	cmp	r2, #9
 8007302:	d94e      	bls.n	80073a2 <_svfiprintf_r+0x17a>
 8007304:	2900      	cmp	r1, #0
 8007306:	d111      	bne.n	800732c <_svfiprintf_r+0x104>
 8007308:	e017      	b.n	800733a <_svfiprintf_r+0x112>
 800730a:	3501      	adds	r5, #1
 800730c:	e7b0      	b.n	8007270 <_svfiprintf_r+0x48>
 800730e:	4b41      	ldr	r3, [pc, #260]	; (8007414 <_svfiprintf_r+0x1ec>)
 8007310:	6822      	ldr	r2, [r4, #0]
 8007312:	1ac0      	subs	r0, r0, r3
 8007314:	2301      	movs	r3, #1
 8007316:	4083      	lsls	r3, r0
 8007318:	4313      	orrs	r3, r2
 800731a:	002e      	movs	r6, r5
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	e7ce      	b.n	80072be <_svfiprintf_r+0x96>
 8007320:	9b07      	ldr	r3, [sp, #28]
 8007322:	1d19      	adds	r1, r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	9107      	str	r1, [sp, #28]
 8007328:	2b00      	cmp	r3, #0
 800732a:	db01      	blt.n	8007330 <_svfiprintf_r+0x108>
 800732c:	930b      	str	r3, [sp, #44]	; 0x2c
 800732e:	e004      	b.n	800733a <_svfiprintf_r+0x112>
 8007330:	425b      	negs	r3, r3
 8007332:	60e3      	str	r3, [r4, #12]
 8007334:	2302      	movs	r3, #2
 8007336:	4313      	orrs	r3, r2
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	782b      	ldrb	r3, [r5, #0]
 800733c:	2b2e      	cmp	r3, #46	; 0x2e
 800733e:	d10a      	bne.n	8007356 <_svfiprintf_r+0x12e>
 8007340:	786b      	ldrb	r3, [r5, #1]
 8007342:	2b2a      	cmp	r3, #42	; 0x2a
 8007344:	d135      	bne.n	80073b2 <_svfiprintf_r+0x18a>
 8007346:	9b07      	ldr	r3, [sp, #28]
 8007348:	3502      	adds	r5, #2
 800734a:	1d1a      	adds	r2, r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	9207      	str	r2, [sp, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	db2b      	blt.n	80073ac <_svfiprintf_r+0x184>
 8007354:	9309      	str	r3, [sp, #36]	; 0x24
 8007356:	4e30      	ldr	r6, [pc, #192]	; (8007418 <_svfiprintf_r+0x1f0>)
 8007358:	2203      	movs	r2, #3
 800735a:	0030      	movs	r0, r6
 800735c:	7829      	ldrb	r1, [r5, #0]
 800735e:	f7ff fa43 	bl	80067e8 <memchr>
 8007362:	2800      	cmp	r0, #0
 8007364:	d006      	beq.n	8007374 <_svfiprintf_r+0x14c>
 8007366:	2340      	movs	r3, #64	; 0x40
 8007368:	1b80      	subs	r0, r0, r6
 800736a:	4083      	lsls	r3, r0
 800736c:	6822      	ldr	r2, [r4, #0]
 800736e:	3501      	adds	r5, #1
 8007370:	4313      	orrs	r3, r2
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	7829      	ldrb	r1, [r5, #0]
 8007376:	2206      	movs	r2, #6
 8007378:	4828      	ldr	r0, [pc, #160]	; (800741c <_svfiprintf_r+0x1f4>)
 800737a:	1c6e      	adds	r6, r5, #1
 800737c:	7621      	strb	r1, [r4, #24]
 800737e:	f7ff fa33 	bl	80067e8 <memchr>
 8007382:	2800      	cmp	r0, #0
 8007384:	d03c      	beq.n	8007400 <_svfiprintf_r+0x1d8>
 8007386:	4b26      	ldr	r3, [pc, #152]	; (8007420 <_svfiprintf_r+0x1f8>)
 8007388:	2b00      	cmp	r3, #0
 800738a:	d125      	bne.n	80073d8 <_svfiprintf_r+0x1b0>
 800738c:	2207      	movs	r2, #7
 800738e:	9b07      	ldr	r3, [sp, #28]
 8007390:	3307      	adds	r3, #7
 8007392:	4393      	bics	r3, r2
 8007394:	3308      	adds	r3, #8
 8007396:	9307      	str	r3, [sp, #28]
 8007398:	6963      	ldr	r3, [r4, #20]
 800739a:	9a04      	ldr	r2, [sp, #16]
 800739c:	189b      	adds	r3, r3, r2
 800739e:	6163      	str	r3, [r4, #20]
 80073a0:	e765      	b.n	800726e <_svfiprintf_r+0x46>
 80073a2:	4343      	muls	r3, r0
 80073a4:	0035      	movs	r5, r6
 80073a6:	2101      	movs	r1, #1
 80073a8:	189b      	adds	r3, r3, r2
 80073aa:	e7a6      	b.n	80072fa <_svfiprintf_r+0xd2>
 80073ac:	2301      	movs	r3, #1
 80073ae:	425b      	negs	r3, r3
 80073b0:	e7d0      	b.n	8007354 <_svfiprintf_r+0x12c>
 80073b2:	2300      	movs	r3, #0
 80073b4:	200a      	movs	r0, #10
 80073b6:	001a      	movs	r2, r3
 80073b8:	3501      	adds	r5, #1
 80073ba:	6063      	str	r3, [r4, #4]
 80073bc:	7829      	ldrb	r1, [r5, #0]
 80073be:	1c6e      	adds	r6, r5, #1
 80073c0:	3930      	subs	r1, #48	; 0x30
 80073c2:	2909      	cmp	r1, #9
 80073c4:	d903      	bls.n	80073ce <_svfiprintf_r+0x1a6>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0c5      	beq.n	8007356 <_svfiprintf_r+0x12e>
 80073ca:	9209      	str	r2, [sp, #36]	; 0x24
 80073cc:	e7c3      	b.n	8007356 <_svfiprintf_r+0x12e>
 80073ce:	4342      	muls	r2, r0
 80073d0:	0035      	movs	r5, r6
 80073d2:	2301      	movs	r3, #1
 80073d4:	1852      	adds	r2, r2, r1
 80073d6:	e7f1      	b.n	80073bc <_svfiprintf_r+0x194>
 80073d8:	ab07      	add	r3, sp, #28
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	003a      	movs	r2, r7
 80073de:	0021      	movs	r1, r4
 80073e0:	4b10      	ldr	r3, [pc, #64]	; (8007424 <_svfiprintf_r+0x1fc>)
 80073e2:	9803      	ldr	r0, [sp, #12]
 80073e4:	f7fd ff50 	bl	8005288 <_printf_float>
 80073e8:	9004      	str	r0, [sp, #16]
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	3301      	adds	r3, #1
 80073ee:	d1d3      	bne.n	8007398 <_svfiprintf_r+0x170>
 80073f0:	89bb      	ldrh	r3, [r7, #12]
 80073f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80073f4:	065b      	lsls	r3, r3, #25
 80073f6:	d400      	bmi.n	80073fa <_svfiprintf_r+0x1d2>
 80073f8:	e72d      	b.n	8007256 <_svfiprintf_r+0x2e>
 80073fa:	2001      	movs	r0, #1
 80073fc:	4240      	negs	r0, r0
 80073fe:	e72a      	b.n	8007256 <_svfiprintf_r+0x2e>
 8007400:	ab07      	add	r3, sp, #28
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	003a      	movs	r2, r7
 8007406:	0021      	movs	r1, r4
 8007408:	4b06      	ldr	r3, [pc, #24]	; (8007424 <_svfiprintf_r+0x1fc>)
 800740a:	9803      	ldr	r0, [sp, #12]
 800740c:	f7fe f9ee 	bl	80057ec <_printf_i>
 8007410:	e7ea      	b.n	80073e8 <_svfiprintf_r+0x1c0>
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	08008554 	.word	0x08008554
 8007418:	0800855a 	.word	0x0800855a
 800741c:	0800855e 	.word	0x0800855e
 8007420:	08005289 	.word	0x08005289
 8007424:	08007165 	.word	0x08007165

08007428 <_sbrk_r>:
 8007428:	2300      	movs	r3, #0
 800742a:	b570      	push	{r4, r5, r6, lr}
 800742c:	4d06      	ldr	r5, [pc, #24]	; (8007448 <_sbrk_r+0x20>)
 800742e:	0004      	movs	r4, r0
 8007430:	0008      	movs	r0, r1
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	f7fb f8ae 	bl	8002594 <_sbrk>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d103      	bne.n	8007444 <_sbrk_r+0x1c>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d000      	beq.n	8007444 <_sbrk_r+0x1c>
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	46c0      	nop			; (mov r8, r8)
 8007448:	200005d0 	.word	0x200005d0

0800744c <__assert_func>:
 800744c:	b530      	push	{r4, r5, lr}
 800744e:	0014      	movs	r4, r2
 8007450:	001a      	movs	r2, r3
 8007452:	4b09      	ldr	r3, [pc, #36]	; (8007478 <__assert_func+0x2c>)
 8007454:	0005      	movs	r5, r0
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	b085      	sub	sp, #20
 800745a:	68d8      	ldr	r0, [r3, #12]
 800745c:	4b07      	ldr	r3, [pc, #28]	; (800747c <__assert_func+0x30>)
 800745e:	2c00      	cmp	r4, #0
 8007460:	d101      	bne.n	8007466 <__assert_func+0x1a>
 8007462:	4b07      	ldr	r3, [pc, #28]	; (8007480 <__assert_func+0x34>)
 8007464:	001c      	movs	r4, r3
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	9100      	str	r1, [sp, #0]
 800746a:	002b      	movs	r3, r5
 800746c:	4905      	ldr	r1, [pc, #20]	; (8007484 <__assert_func+0x38>)
 800746e:	9402      	str	r4, [sp, #8]
 8007470:	f000 f80a 	bl	8007488 <fiprintf>
 8007474:	f000 faba 	bl	80079ec <abort>
 8007478:	20000050 	.word	0x20000050
 800747c:	08008565 	.word	0x08008565
 8007480:	080085a0 	.word	0x080085a0
 8007484:	08008572 	.word	0x08008572

08007488 <fiprintf>:
 8007488:	b40e      	push	{r1, r2, r3}
 800748a:	b503      	push	{r0, r1, lr}
 800748c:	0001      	movs	r1, r0
 800748e:	ab03      	add	r3, sp, #12
 8007490:	4804      	ldr	r0, [pc, #16]	; (80074a4 <fiprintf+0x1c>)
 8007492:	cb04      	ldmia	r3!, {r2}
 8007494:	6800      	ldr	r0, [r0, #0]
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	f000 f892 	bl	80075c0 <_vfiprintf_r>
 800749c:	b002      	add	sp, #8
 800749e:	bc08      	pop	{r3}
 80074a0:	b003      	add	sp, #12
 80074a2:	4718      	bx	r3
 80074a4:	20000050 	.word	0x20000050

080074a8 <__ascii_mbtowc>:
 80074a8:	b082      	sub	sp, #8
 80074aa:	2900      	cmp	r1, #0
 80074ac:	d100      	bne.n	80074b0 <__ascii_mbtowc+0x8>
 80074ae:	a901      	add	r1, sp, #4
 80074b0:	1e10      	subs	r0, r2, #0
 80074b2:	d006      	beq.n	80074c2 <__ascii_mbtowc+0x1a>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d006      	beq.n	80074c6 <__ascii_mbtowc+0x1e>
 80074b8:	7813      	ldrb	r3, [r2, #0]
 80074ba:	600b      	str	r3, [r1, #0]
 80074bc:	7810      	ldrb	r0, [r2, #0]
 80074be:	1e43      	subs	r3, r0, #1
 80074c0:	4198      	sbcs	r0, r3
 80074c2:	b002      	add	sp, #8
 80074c4:	4770      	bx	lr
 80074c6:	2002      	movs	r0, #2
 80074c8:	4240      	negs	r0, r0
 80074ca:	e7fa      	b.n	80074c2 <__ascii_mbtowc+0x1a>

080074cc <memmove>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4288      	cmp	r0, r1
 80074d0:	d902      	bls.n	80074d8 <memmove+0xc>
 80074d2:	188b      	adds	r3, r1, r2
 80074d4:	4298      	cmp	r0, r3
 80074d6:	d303      	bcc.n	80074e0 <memmove+0x14>
 80074d8:	2300      	movs	r3, #0
 80074da:	e007      	b.n	80074ec <memmove+0x20>
 80074dc:	5c8b      	ldrb	r3, [r1, r2]
 80074de:	5483      	strb	r3, [r0, r2]
 80074e0:	3a01      	subs	r2, #1
 80074e2:	d2fb      	bcs.n	80074dc <memmove+0x10>
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	5ccc      	ldrb	r4, [r1, r3]
 80074e8:	54c4      	strb	r4, [r0, r3]
 80074ea:	3301      	adds	r3, #1
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d1fa      	bne.n	80074e6 <memmove+0x1a>
 80074f0:	e7f8      	b.n	80074e4 <memmove+0x18>
	...

080074f4 <__malloc_lock>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	4802      	ldr	r0, [pc, #8]	; (8007500 <__malloc_lock+0xc>)
 80074f8:	f000 fc4f 	bl	8007d9a <__retarget_lock_acquire_recursive>
 80074fc:	bd10      	pop	{r4, pc}
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	200005d4 	.word	0x200005d4

08007504 <__malloc_unlock>:
 8007504:	b510      	push	{r4, lr}
 8007506:	4802      	ldr	r0, [pc, #8]	; (8007510 <__malloc_unlock+0xc>)
 8007508:	f000 fc48 	bl	8007d9c <__retarget_lock_release_recursive>
 800750c:	bd10      	pop	{r4, pc}
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	200005d4 	.word	0x200005d4

08007514 <_realloc_r>:
 8007514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007516:	0007      	movs	r7, r0
 8007518:	000e      	movs	r6, r1
 800751a:	0014      	movs	r4, r2
 800751c:	2900      	cmp	r1, #0
 800751e:	d105      	bne.n	800752c <_realloc_r+0x18>
 8007520:	0011      	movs	r1, r2
 8007522:	f7ff fda9 	bl	8007078 <_malloc_r>
 8007526:	0005      	movs	r5, r0
 8007528:	0028      	movs	r0, r5
 800752a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800752c:	2a00      	cmp	r2, #0
 800752e:	d103      	bne.n	8007538 <_realloc_r+0x24>
 8007530:	f7ff fd36 	bl	8006fa0 <_free_r>
 8007534:	0025      	movs	r5, r4
 8007536:	e7f7      	b.n	8007528 <_realloc_r+0x14>
 8007538:	f000 fc9e 	bl	8007e78 <_malloc_usable_size_r>
 800753c:	9001      	str	r0, [sp, #4]
 800753e:	4284      	cmp	r4, r0
 8007540:	d803      	bhi.n	800754a <_realloc_r+0x36>
 8007542:	0035      	movs	r5, r6
 8007544:	0843      	lsrs	r3, r0, #1
 8007546:	42a3      	cmp	r3, r4
 8007548:	d3ee      	bcc.n	8007528 <_realloc_r+0x14>
 800754a:	0021      	movs	r1, r4
 800754c:	0038      	movs	r0, r7
 800754e:	f7ff fd93 	bl	8007078 <_malloc_r>
 8007552:	1e05      	subs	r5, r0, #0
 8007554:	d0e8      	beq.n	8007528 <_realloc_r+0x14>
 8007556:	9b01      	ldr	r3, [sp, #4]
 8007558:	0022      	movs	r2, r4
 800755a:	429c      	cmp	r4, r3
 800755c:	d900      	bls.n	8007560 <_realloc_r+0x4c>
 800755e:	001a      	movs	r2, r3
 8007560:	0031      	movs	r1, r6
 8007562:	0028      	movs	r0, r5
 8007564:	f7ff f94b 	bl	80067fe <memcpy>
 8007568:	0031      	movs	r1, r6
 800756a:	0038      	movs	r0, r7
 800756c:	f7ff fd18 	bl	8006fa0 <_free_r>
 8007570:	e7da      	b.n	8007528 <_realloc_r+0x14>

08007572 <__sfputc_r>:
 8007572:	6893      	ldr	r3, [r2, #8]
 8007574:	b510      	push	{r4, lr}
 8007576:	3b01      	subs	r3, #1
 8007578:	6093      	str	r3, [r2, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	da04      	bge.n	8007588 <__sfputc_r+0x16>
 800757e:	6994      	ldr	r4, [r2, #24]
 8007580:	42a3      	cmp	r3, r4
 8007582:	db07      	blt.n	8007594 <__sfputc_r+0x22>
 8007584:	290a      	cmp	r1, #10
 8007586:	d005      	beq.n	8007594 <__sfputc_r+0x22>
 8007588:	6813      	ldr	r3, [r2, #0]
 800758a:	1c58      	adds	r0, r3, #1
 800758c:	6010      	str	r0, [r2, #0]
 800758e:	7019      	strb	r1, [r3, #0]
 8007590:	0008      	movs	r0, r1
 8007592:	bd10      	pop	{r4, pc}
 8007594:	f000 f94e 	bl	8007834 <__swbuf_r>
 8007598:	0001      	movs	r1, r0
 800759a:	e7f9      	b.n	8007590 <__sfputc_r+0x1e>

0800759c <__sfputs_r>:
 800759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759e:	0006      	movs	r6, r0
 80075a0:	000f      	movs	r7, r1
 80075a2:	0014      	movs	r4, r2
 80075a4:	18d5      	adds	r5, r2, r3
 80075a6:	42ac      	cmp	r4, r5
 80075a8:	d101      	bne.n	80075ae <__sfputs_r+0x12>
 80075aa:	2000      	movs	r0, #0
 80075ac:	e007      	b.n	80075be <__sfputs_r+0x22>
 80075ae:	7821      	ldrb	r1, [r4, #0]
 80075b0:	003a      	movs	r2, r7
 80075b2:	0030      	movs	r0, r6
 80075b4:	f7ff ffdd 	bl	8007572 <__sfputc_r>
 80075b8:	3401      	adds	r4, #1
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	d1f3      	bne.n	80075a6 <__sfputs_r+0xa>
 80075be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075c0 <_vfiprintf_r>:
 80075c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075c2:	b0a1      	sub	sp, #132	; 0x84
 80075c4:	0006      	movs	r6, r0
 80075c6:	000c      	movs	r4, r1
 80075c8:	001f      	movs	r7, r3
 80075ca:	9203      	str	r2, [sp, #12]
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d004      	beq.n	80075da <_vfiprintf_r+0x1a>
 80075d0:	6983      	ldr	r3, [r0, #24]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <_vfiprintf_r+0x1a>
 80075d6:	f000 fb3f 	bl	8007c58 <__sinit>
 80075da:	4b8e      	ldr	r3, [pc, #568]	; (8007814 <_vfiprintf_r+0x254>)
 80075dc:	429c      	cmp	r4, r3
 80075de:	d11c      	bne.n	800761a <_vfiprintf_r+0x5a>
 80075e0:	6874      	ldr	r4, [r6, #4]
 80075e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075e4:	07db      	lsls	r3, r3, #31
 80075e6:	d405      	bmi.n	80075f4 <_vfiprintf_r+0x34>
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	059b      	lsls	r3, r3, #22
 80075ec:	d402      	bmi.n	80075f4 <_vfiprintf_r+0x34>
 80075ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075f0:	f000 fbd3 	bl	8007d9a <__retarget_lock_acquire_recursive>
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	071b      	lsls	r3, r3, #28
 80075f8:	d502      	bpl.n	8007600 <_vfiprintf_r+0x40>
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d11d      	bne.n	800763c <_vfiprintf_r+0x7c>
 8007600:	0021      	movs	r1, r4
 8007602:	0030      	movs	r0, r6
 8007604:	f000 f97a 	bl	80078fc <__swsetup_r>
 8007608:	2800      	cmp	r0, #0
 800760a:	d017      	beq.n	800763c <_vfiprintf_r+0x7c>
 800760c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800760e:	07db      	lsls	r3, r3, #31
 8007610:	d50d      	bpl.n	800762e <_vfiprintf_r+0x6e>
 8007612:	2001      	movs	r0, #1
 8007614:	4240      	negs	r0, r0
 8007616:	b021      	add	sp, #132	; 0x84
 8007618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800761a:	4b7f      	ldr	r3, [pc, #508]	; (8007818 <_vfiprintf_r+0x258>)
 800761c:	429c      	cmp	r4, r3
 800761e:	d101      	bne.n	8007624 <_vfiprintf_r+0x64>
 8007620:	68b4      	ldr	r4, [r6, #8]
 8007622:	e7de      	b.n	80075e2 <_vfiprintf_r+0x22>
 8007624:	4b7d      	ldr	r3, [pc, #500]	; (800781c <_vfiprintf_r+0x25c>)
 8007626:	429c      	cmp	r4, r3
 8007628:	d1db      	bne.n	80075e2 <_vfiprintf_r+0x22>
 800762a:	68f4      	ldr	r4, [r6, #12]
 800762c:	e7d9      	b.n	80075e2 <_vfiprintf_r+0x22>
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	059b      	lsls	r3, r3, #22
 8007632:	d4ee      	bmi.n	8007612 <_vfiprintf_r+0x52>
 8007634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007636:	f000 fbb1 	bl	8007d9c <__retarget_lock_release_recursive>
 800763a:	e7ea      	b.n	8007612 <_vfiprintf_r+0x52>
 800763c:	2300      	movs	r3, #0
 800763e:	ad08      	add	r5, sp, #32
 8007640:	616b      	str	r3, [r5, #20]
 8007642:	3320      	adds	r3, #32
 8007644:	766b      	strb	r3, [r5, #25]
 8007646:	3310      	adds	r3, #16
 8007648:	76ab      	strb	r3, [r5, #26]
 800764a:	9707      	str	r7, [sp, #28]
 800764c:	9f03      	ldr	r7, [sp, #12]
 800764e:	783b      	ldrb	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <_vfiprintf_r+0x98>
 8007654:	2b25      	cmp	r3, #37	; 0x25
 8007656:	d14e      	bne.n	80076f6 <_vfiprintf_r+0x136>
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	1afb      	subs	r3, r7, r3
 800765c:	9305      	str	r3, [sp, #20]
 800765e:	9b03      	ldr	r3, [sp, #12]
 8007660:	429f      	cmp	r7, r3
 8007662:	d00d      	beq.n	8007680 <_vfiprintf_r+0xc0>
 8007664:	9b05      	ldr	r3, [sp, #20]
 8007666:	0021      	movs	r1, r4
 8007668:	0030      	movs	r0, r6
 800766a:	9a03      	ldr	r2, [sp, #12]
 800766c:	f7ff ff96 	bl	800759c <__sfputs_r>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d100      	bne.n	8007676 <_vfiprintf_r+0xb6>
 8007674:	e0b5      	b.n	80077e2 <_vfiprintf_r+0x222>
 8007676:	696a      	ldr	r2, [r5, #20]
 8007678:	9b05      	ldr	r3, [sp, #20]
 800767a:	4694      	mov	ip, r2
 800767c:	4463      	add	r3, ip
 800767e:	616b      	str	r3, [r5, #20]
 8007680:	783b      	ldrb	r3, [r7, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d100      	bne.n	8007688 <_vfiprintf_r+0xc8>
 8007686:	e0ac      	b.n	80077e2 <_vfiprintf_r+0x222>
 8007688:	2201      	movs	r2, #1
 800768a:	1c7b      	adds	r3, r7, #1
 800768c:	9303      	str	r3, [sp, #12]
 800768e:	2300      	movs	r3, #0
 8007690:	4252      	negs	r2, r2
 8007692:	606a      	str	r2, [r5, #4]
 8007694:	a904      	add	r1, sp, #16
 8007696:	3254      	adds	r2, #84	; 0x54
 8007698:	1852      	adds	r2, r2, r1
 800769a:	602b      	str	r3, [r5, #0]
 800769c:	60eb      	str	r3, [r5, #12]
 800769e:	60ab      	str	r3, [r5, #8]
 80076a0:	7013      	strb	r3, [r2, #0]
 80076a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80076a4:	9b03      	ldr	r3, [sp, #12]
 80076a6:	2205      	movs	r2, #5
 80076a8:	7819      	ldrb	r1, [r3, #0]
 80076aa:	485d      	ldr	r0, [pc, #372]	; (8007820 <_vfiprintf_r+0x260>)
 80076ac:	f7ff f89c 	bl	80067e8 <memchr>
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	1c5f      	adds	r7, r3, #1
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d120      	bne.n	80076fa <_vfiprintf_r+0x13a>
 80076b8:	682a      	ldr	r2, [r5, #0]
 80076ba:	06d3      	lsls	r3, r2, #27
 80076bc:	d504      	bpl.n	80076c8 <_vfiprintf_r+0x108>
 80076be:	2353      	movs	r3, #83	; 0x53
 80076c0:	a904      	add	r1, sp, #16
 80076c2:	185b      	adds	r3, r3, r1
 80076c4:	2120      	movs	r1, #32
 80076c6:	7019      	strb	r1, [r3, #0]
 80076c8:	0713      	lsls	r3, r2, #28
 80076ca:	d504      	bpl.n	80076d6 <_vfiprintf_r+0x116>
 80076cc:	2353      	movs	r3, #83	; 0x53
 80076ce:	a904      	add	r1, sp, #16
 80076d0:	185b      	adds	r3, r3, r1
 80076d2:	212b      	movs	r1, #43	; 0x2b
 80076d4:	7019      	strb	r1, [r3, #0]
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b2a      	cmp	r3, #42	; 0x2a
 80076dc:	d016      	beq.n	800770c <_vfiprintf_r+0x14c>
 80076de:	2100      	movs	r1, #0
 80076e0:	68eb      	ldr	r3, [r5, #12]
 80076e2:	9f03      	ldr	r7, [sp, #12]
 80076e4:	783a      	ldrb	r2, [r7, #0]
 80076e6:	1c78      	adds	r0, r7, #1
 80076e8:	3a30      	subs	r2, #48	; 0x30
 80076ea:	4684      	mov	ip, r0
 80076ec:	2a09      	cmp	r2, #9
 80076ee:	d94f      	bls.n	8007790 <_vfiprintf_r+0x1d0>
 80076f0:	2900      	cmp	r1, #0
 80076f2:	d111      	bne.n	8007718 <_vfiprintf_r+0x158>
 80076f4:	e017      	b.n	8007726 <_vfiprintf_r+0x166>
 80076f6:	3701      	adds	r7, #1
 80076f8:	e7a9      	b.n	800764e <_vfiprintf_r+0x8e>
 80076fa:	4b49      	ldr	r3, [pc, #292]	; (8007820 <_vfiprintf_r+0x260>)
 80076fc:	682a      	ldr	r2, [r5, #0]
 80076fe:	1ac0      	subs	r0, r0, r3
 8007700:	2301      	movs	r3, #1
 8007702:	4083      	lsls	r3, r0
 8007704:	4313      	orrs	r3, r2
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	9703      	str	r7, [sp, #12]
 800770a:	e7cb      	b.n	80076a4 <_vfiprintf_r+0xe4>
 800770c:	9b07      	ldr	r3, [sp, #28]
 800770e:	1d19      	adds	r1, r3, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	9107      	str	r1, [sp, #28]
 8007714:	2b00      	cmp	r3, #0
 8007716:	db01      	blt.n	800771c <_vfiprintf_r+0x15c>
 8007718:	930b      	str	r3, [sp, #44]	; 0x2c
 800771a:	e004      	b.n	8007726 <_vfiprintf_r+0x166>
 800771c:	425b      	negs	r3, r3
 800771e:	60eb      	str	r3, [r5, #12]
 8007720:	2302      	movs	r3, #2
 8007722:	4313      	orrs	r3, r2
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	783b      	ldrb	r3, [r7, #0]
 8007728:	2b2e      	cmp	r3, #46	; 0x2e
 800772a:	d10a      	bne.n	8007742 <_vfiprintf_r+0x182>
 800772c:	787b      	ldrb	r3, [r7, #1]
 800772e:	2b2a      	cmp	r3, #42	; 0x2a
 8007730:	d137      	bne.n	80077a2 <_vfiprintf_r+0x1e2>
 8007732:	9b07      	ldr	r3, [sp, #28]
 8007734:	3702      	adds	r7, #2
 8007736:	1d1a      	adds	r2, r3, #4
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	9207      	str	r2, [sp, #28]
 800773c:	2b00      	cmp	r3, #0
 800773e:	db2d      	blt.n	800779c <_vfiprintf_r+0x1dc>
 8007740:	9309      	str	r3, [sp, #36]	; 0x24
 8007742:	2203      	movs	r2, #3
 8007744:	7839      	ldrb	r1, [r7, #0]
 8007746:	4837      	ldr	r0, [pc, #220]	; (8007824 <_vfiprintf_r+0x264>)
 8007748:	f7ff f84e 	bl	80067e8 <memchr>
 800774c:	2800      	cmp	r0, #0
 800774e:	d007      	beq.n	8007760 <_vfiprintf_r+0x1a0>
 8007750:	4b34      	ldr	r3, [pc, #208]	; (8007824 <_vfiprintf_r+0x264>)
 8007752:	682a      	ldr	r2, [r5, #0]
 8007754:	1ac0      	subs	r0, r0, r3
 8007756:	2340      	movs	r3, #64	; 0x40
 8007758:	4083      	lsls	r3, r0
 800775a:	4313      	orrs	r3, r2
 800775c:	3701      	adds	r7, #1
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	7839      	ldrb	r1, [r7, #0]
 8007762:	1c7b      	adds	r3, r7, #1
 8007764:	2206      	movs	r2, #6
 8007766:	4830      	ldr	r0, [pc, #192]	; (8007828 <_vfiprintf_r+0x268>)
 8007768:	9303      	str	r3, [sp, #12]
 800776a:	7629      	strb	r1, [r5, #24]
 800776c:	f7ff f83c 	bl	80067e8 <memchr>
 8007770:	2800      	cmp	r0, #0
 8007772:	d045      	beq.n	8007800 <_vfiprintf_r+0x240>
 8007774:	4b2d      	ldr	r3, [pc, #180]	; (800782c <_vfiprintf_r+0x26c>)
 8007776:	2b00      	cmp	r3, #0
 8007778:	d127      	bne.n	80077ca <_vfiprintf_r+0x20a>
 800777a:	2207      	movs	r2, #7
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	3307      	adds	r3, #7
 8007780:	4393      	bics	r3, r2
 8007782:	3308      	adds	r3, #8
 8007784:	9307      	str	r3, [sp, #28]
 8007786:	696b      	ldr	r3, [r5, #20]
 8007788:	9a04      	ldr	r2, [sp, #16]
 800778a:	189b      	adds	r3, r3, r2
 800778c:	616b      	str	r3, [r5, #20]
 800778e:	e75d      	b.n	800764c <_vfiprintf_r+0x8c>
 8007790:	210a      	movs	r1, #10
 8007792:	434b      	muls	r3, r1
 8007794:	4667      	mov	r7, ip
 8007796:	189b      	adds	r3, r3, r2
 8007798:	3909      	subs	r1, #9
 800779a:	e7a3      	b.n	80076e4 <_vfiprintf_r+0x124>
 800779c:	2301      	movs	r3, #1
 800779e:	425b      	negs	r3, r3
 80077a0:	e7ce      	b.n	8007740 <_vfiprintf_r+0x180>
 80077a2:	2300      	movs	r3, #0
 80077a4:	001a      	movs	r2, r3
 80077a6:	3701      	adds	r7, #1
 80077a8:	606b      	str	r3, [r5, #4]
 80077aa:	7839      	ldrb	r1, [r7, #0]
 80077ac:	1c78      	adds	r0, r7, #1
 80077ae:	3930      	subs	r1, #48	; 0x30
 80077b0:	4684      	mov	ip, r0
 80077b2:	2909      	cmp	r1, #9
 80077b4:	d903      	bls.n	80077be <_vfiprintf_r+0x1fe>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0c3      	beq.n	8007742 <_vfiprintf_r+0x182>
 80077ba:	9209      	str	r2, [sp, #36]	; 0x24
 80077bc:	e7c1      	b.n	8007742 <_vfiprintf_r+0x182>
 80077be:	230a      	movs	r3, #10
 80077c0:	435a      	muls	r2, r3
 80077c2:	4667      	mov	r7, ip
 80077c4:	1852      	adds	r2, r2, r1
 80077c6:	3b09      	subs	r3, #9
 80077c8:	e7ef      	b.n	80077aa <_vfiprintf_r+0x1ea>
 80077ca:	ab07      	add	r3, sp, #28
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	0022      	movs	r2, r4
 80077d0:	0029      	movs	r1, r5
 80077d2:	0030      	movs	r0, r6
 80077d4:	4b16      	ldr	r3, [pc, #88]	; (8007830 <_vfiprintf_r+0x270>)
 80077d6:	f7fd fd57 	bl	8005288 <_printf_float>
 80077da:	9004      	str	r0, [sp, #16]
 80077dc:	9b04      	ldr	r3, [sp, #16]
 80077de:	3301      	adds	r3, #1
 80077e0:	d1d1      	bne.n	8007786 <_vfiprintf_r+0x1c6>
 80077e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e4:	07db      	lsls	r3, r3, #31
 80077e6:	d405      	bmi.n	80077f4 <_vfiprintf_r+0x234>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	059b      	lsls	r3, r3, #22
 80077ec:	d402      	bmi.n	80077f4 <_vfiprintf_r+0x234>
 80077ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077f0:	f000 fad4 	bl	8007d9c <__retarget_lock_release_recursive>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	065b      	lsls	r3, r3, #25
 80077f8:	d500      	bpl.n	80077fc <_vfiprintf_r+0x23c>
 80077fa:	e70a      	b.n	8007612 <_vfiprintf_r+0x52>
 80077fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80077fe:	e70a      	b.n	8007616 <_vfiprintf_r+0x56>
 8007800:	ab07      	add	r3, sp, #28
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	0022      	movs	r2, r4
 8007806:	0029      	movs	r1, r5
 8007808:	0030      	movs	r0, r6
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <_vfiprintf_r+0x270>)
 800780c:	f7fd ffee 	bl	80057ec <_printf_i>
 8007810:	e7e3      	b.n	80077da <_vfiprintf_r+0x21a>
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	080086cc 	.word	0x080086cc
 8007818:	080086ec 	.word	0x080086ec
 800781c:	080086ac 	.word	0x080086ac
 8007820:	08008554 	.word	0x08008554
 8007824:	0800855a 	.word	0x0800855a
 8007828:	0800855e 	.word	0x0800855e
 800782c:	08005289 	.word	0x08005289
 8007830:	0800759d 	.word	0x0800759d

08007834 <__swbuf_r>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	0005      	movs	r5, r0
 8007838:	000e      	movs	r6, r1
 800783a:	0014      	movs	r4, r2
 800783c:	2800      	cmp	r0, #0
 800783e:	d004      	beq.n	800784a <__swbuf_r+0x16>
 8007840:	6983      	ldr	r3, [r0, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <__swbuf_r+0x16>
 8007846:	f000 fa07 	bl	8007c58 <__sinit>
 800784a:	4b22      	ldr	r3, [pc, #136]	; (80078d4 <__swbuf_r+0xa0>)
 800784c:	429c      	cmp	r4, r3
 800784e:	d12e      	bne.n	80078ae <__swbuf_r+0x7a>
 8007850:	686c      	ldr	r4, [r5, #4]
 8007852:	69a3      	ldr	r3, [r4, #24]
 8007854:	60a3      	str	r3, [r4, #8]
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	071b      	lsls	r3, r3, #28
 800785a:	d532      	bpl.n	80078c2 <__swbuf_r+0x8e>
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d02f      	beq.n	80078c2 <__swbuf_r+0x8e>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	6922      	ldr	r2, [r4, #16]
 8007866:	b2f7      	uxtb	r7, r6
 8007868:	1a98      	subs	r0, r3, r2
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	b2f6      	uxtb	r6, r6
 800786e:	4283      	cmp	r3, r0
 8007870:	dc05      	bgt.n	800787e <__swbuf_r+0x4a>
 8007872:	0021      	movs	r1, r4
 8007874:	0028      	movs	r0, r5
 8007876:	f000 f94d 	bl	8007b14 <_fflush_r>
 800787a:	2800      	cmp	r0, #0
 800787c:	d127      	bne.n	80078ce <__swbuf_r+0x9a>
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	3001      	adds	r0, #1
 8007882:	3b01      	subs	r3, #1
 8007884:	60a3      	str	r3, [r4, #8]
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	6022      	str	r2, [r4, #0]
 800788c:	701f      	strb	r7, [r3, #0]
 800788e:	6963      	ldr	r3, [r4, #20]
 8007890:	4283      	cmp	r3, r0
 8007892:	d004      	beq.n	800789e <__swbuf_r+0x6a>
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	07db      	lsls	r3, r3, #31
 8007898:	d507      	bpl.n	80078aa <__swbuf_r+0x76>
 800789a:	2e0a      	cmp	r6, #10
 800789c:	d105      	bne.n	80078aa <__swbuf_r+0x76>
 800789e:	0021      	movs	r1, r4
 80078a0:	0028      	movs	r0, r5
 80078a2:	f000 f937 	bl	8007b14 <_fflush_r>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d111      	bne.n	80078ce <__swbuf_r+0x9a>
 80078aa:	0030      	movs	r0, r6
 80078ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <__swbuf_r+0xa4>)
 80078b0:	429c      	cmp	r4, r3
 80078b2:	d101      	bne.n	80078b8 <__swbuf_r+0x84>
 80078b4:	68ac      	ldr	r4, [r5, #8]
 80078b6:	e7cc      	b.n	8007852 <__swbuf_r+0x1e>
 80078b8:	4b08      	ldr	r3, [pc, #32]	; (80078dc <__swbuf_r+0xa8>)
 80078ba:	429c      	cmp	r4, r3
 80078bc:	d1c9      	bne.n	8007852 <__swbuf_r+0x1e>
 80078be:	68ec      	ldr	r4, [r5, #12]
 80078c0:	e7c7      	b.n	8007852 <__swbuf_r+0x1e>
 80078c2:	0021      	movs	r1, r4
 80078c4:	0028      	movs	r0, r5
 80078c6:	f000 f819 	bl	80078fc <__swsetup_r>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d0c9      	beq.n	8007862 <__swbuf_r+0x2e>
 80078ce:	2601      	movs	r6, #1
 80078d0:	4276      	negs	r6, r6
 80078d2:	e7ea      	b.n	80078aa <__swbuf_r+0x76>
 80078d4:	080086cc 	.word	0x080086cc
 80078d8:	080086ec 	.word	0x080086ec
 80078dc:	080086ac 	.word	0x080086ac

080078e0 <__ascii_wctomb>:
 80078e0:	0003      	movs	r3, r0
 80078e2:	1e08      	subs	r0, r1, #0
 80078e4:	d005      	beq.n	80078f2 <__ascii_wctomb+0x12>
 80078e6:	2aff      	cmp	r2, #255	; 0xff
 80078e8:	d904      	bls.n	80078f4 <__ascii_wctomb+0x14>
 80078ea:	228a      	movs	r2, #138	; 0x8a
 80078ec:	2001      	movs	r0, #1
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	4240      	negs	r0, r0
 80078f2:	4770      	bx	lr
 80078f4:	2001      	movs	r0, #1
 80078f6:	700a      	strb	r2, [r1, #0]
 80078f8:	e7fb      	b.n	80078f2 <__ascii_wctomb+0x12>
	...

080078fc <__swsetup_r>:
 80078fc:	4b37      	ldr	r3, [pc, #220]	; (80079dc <__swsetup_r+0xe0>)
 80078fe:	b570      	push	{r4, r5, r6, lr}
 8007900:	681d      	ldr	r5, [r3, #0]
 8007902:	0006      	movs	r6, r0
 8007904:	000c      	movs	r4, r1
 8007906:	2d00      	cmp	r5, #0
 8007908:	d005      	beq.n	8007916 <__swsetup_r+0x1a>
 800790a:	69ab      	ldr	r3, [r5, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <__swsetup_r+0x1a>
 8007910:	0028      	movs	r0, r5
 8007912:	f000 f9a1 	bl	8007c58 <__sinit>
 8007916:	4b32      	ldr	r3, [pc, #200]	; (80079e0 <__swsetup_r+0xe4>)
 8007918:	429c      	cmp	r4, r3
 800791a:	d10f      	bne.n	800793c <__swsetup_r+0x40>
 800791c:	686c      	ldr	r4, [r5, #4]
 800791e:	230c      	movs	r3, #12
 8007920:	5ee2      	ldrsh	r2, [r4, r3]
 8007922:	b293      	uxth	r3, r2
 8007924:	0711      	lsls	r1, r2, #28
 8007926:	d42d      	bmi.n	8007984 <__swsetup_r+0x88>
 8007928:	06d9      	lsls	r1, r3, #27
 800792a:	d411      	bmi.n	8007950 <__swsetup_r+0x54>
 800792c:	2309      	movs	r3, #9
 800792e:	2001      	movs	r0, #1
 8007930:	6033      	str	r3, [r6, #0]
 8007932:	3337      	adds	r3, #55	; 0x37
 8007934:	4313      	orrs	r3, r2
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	4240      	negs	r0, r0
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	4b29      	ldr	r3, [pc, #164]	; (80079e4 <__swsetup_r+0xe8>)
 800793e:	429c      	cmp	r4, r3
 8007940:	d101      	bne.n	8007946 <__swsetup_r+0x4a>
 8007942:	68ac      	ldr	r4, [r5, #8]
 8007944:	e7eb      	b.n	800791e <__swsetup_r+0x22>
 8007946:	4b28      	ldr	r3, [pc, #160]	; (80079e8 <__swsetup_r+0xec>)
 8007948:	429c      	cmp	r4, r3
 800794a:	d1e8      	bne.n	800791e <__swsetup_r+0x22>
 800794c:	68ec      	ldr	r4, [r5, #12]
 800794e:	e7e6      	b.n	800791e <__swsetup_r+0x22>
 8007950:	075b      	lsls	r3, r3, #29
 8007952:	d513      	bpl.n	800797c <__swsetup_r+0x80>
 8007954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007956:	2900      	cmp	r1, #0
 8007958:	d008      	beq.n	800796c <__swsetup_r+0x70>
 800795a:	0023      	movs	r3, r4
 800795c:	3344      	adds	r3, #68	; 0x44
 800795e:	4299      	cmp	r1, r3
 8007960:	d002      	beq.n	8007968 <__swsetup_r+0x6c>
 8007962:	0030      	movs	r0, r6
 8007964:	f7ff fb1c 	bl	8006fa0 <_free_r>
 8007968:	2300      	movs	r3, #0
 800796a:	6363      	str	r3, [r4, #52]	; 0x34
 800796c:	2224      	movs	r2, #36	; 0x24
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	4393      	bics	r3, r2
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	2300      	movs	r3, #0
 8007976:	6063      	str	r3, [r4, #4]
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	6023      	str	r3, [r4, #0]
 800797c:	2308      	movs	r3, #8
 800797e:	89a2      	ldrh	r2, [r4, #12]
 8007980:	4313      	orrs	r3, r2
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <__swsetup_r+0xa6>
 800798a:	21a0      	movs	r1, #160	; 0xa0
 800798c:	2280      	movs	r2, #128	; 0x80
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	0089      	lsls	r1, r1, #2
 8007992:	0092      	lsls	r2, r2, #2
 8007994:	400b      	ands	r3, r1
 8007996:	4293      	cmp	r3, r2
 8007998:	d003      	beq.n	80079a2 <__swsetup_r+0xa6>
 800799a:	0021      	movs	r1, r4
 800799c:	0030      	movs	r0, r6
 800799e:	f000 fa27 	bl	8007df0 <__smakebuf_r>
 80079a2:	220c      	movs	r2, #12
 80079a4:	5ea3      	ldrsh	r3, [r4, r2]
 80079a6:	2001      	movs	r0, #1
 80079a8:	001a      	movs	r2, r3
 80079aa:	b299      	uxth	r1, r3
 80079ac:	4002      	ands	r2, r0
 80079ae:	4203      	tst	r3, r0
 80079b0:	d00f      	beq.n	80079d2 <__swsetup_r+0xd6>
 80079b2:	2200      	movs	r2, #0
 80079b4:	60a2      	str	r2, [r4, #8]
 80079b6:	6962      	ldr	r2, [r4, #20]
 80079b8:	4252      	negs	r2, r2
 80079ba:	61a2      	str	r2, [r4, #24]
 80079bc:	2000      	movs	r0, #0
 80079be:	6922      	ldr	r2, [r4, #16]
 80079c0:	4282      	cmp	r2, r0
 80079c2:	d1ba      	bne.n	800793a <__swsetup_r+0x3e>
 80079c4:	060a      	lsls	r2, r1, #24
 80079c6:	d5b8      	bpl.n	800793a <__swsetup_r+0x3e>
 80079c8:	2240      	movs	r2, #64	; 0x40
 80079ca:	4313      	orrs	r3, r2
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	3801      	subs	r0, #1
 80079d0:	e7b3      	b.n	800793a <__swsetup_r+0x3e>
 80079d2:	0788      	lsls	r0, r1, #30
 80079d4:	d400      	bmi.n	80079d8 <__swsetup_r+0xdc>
 80079d6:	6962      	ldr	r2, [r4, #20]
 80079d8:	60a2      	str	r2, [r4, #8]
 80079da:	e7ef      	b.n	80079bc <__swsetup_r+0xc0>
 80079dc:	20000050 	.word	0x20000050
 80079e0:	080086cc 	.word	0x080086cc
 80079e4:	080086ec 	.word	0x080086ec
 80079e8:	080086ac 	.word	0x080086ac

080079ec <abort>:
 80079ec:	2006      	movs	r0, #6
 80079ee:	b510      	push	{r4, lr}
 80079f0:	f000 fa74 	bl	8007edc <raise>
 80079f4:	2001      	movs	r0, #1
 80079f6:	f7fa fd5c 	bl	80024b2 <_exit>
	...

080079fc <__sflush_r>:
 80079fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079fe:	898b      	ldrh	r3, [r1, #12]
 8007a00:	0005      	movs	r5, r0
 8007a02:	000c      	movs	r4, r1
 8007a04:	071a      	lsls	r2, r3, #28
 8007a06:	d45f      	bmi.n	8007ac8 <__sflush_r+0xcc>
 8007a08:	684a      	ldr	r2, [r1, #4]
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	dc04      	bgt.n	8007a18 <__sflush_r+0x1c>
 8007a0e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007a10:	2a00      	cmp	r2, #0
 8007a12:	dc01      	bgt.n	8007a18 <__sflush_r+0x1c>
 8007a14:	2000      	movs	r0, #0
 8007a16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007a1a:	2f00      	cmp	r7, #0
 8007a1c:	d0fa      	beq.n	8007a14 <__sflush_r+0x18>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2180      	movs	r1, #128	; 0x80
 8007a22:	682e      	ldr	r6, [r5, #0]
 8007a24:	602a      	str	r2, [r5, #0]
 8007a26:	001a      	movs	r2, r3
 8007a28:	0149      	lsls	r1, r1, #5
 8007a2a:	400a      	ands	r2, r1
 8007a2c:	420b      	tst	r3, r1
 8007a2e:	d034      	beq.n	8007a9a <__sflush_r+0x9e>
 8007a30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	075b      	lsls	r3, r3, #29
 8007a36:	d506      	bpl.n	8007a46 <__sflush_r+0x4a>
 8007a38:	6863      	ldr	r3, [r4, #4]
 8007a3a:	1ac0      	subs	r0, r0, r3
 8007a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <__sflush_r+0x4a>
 8007a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a44:	1ac0      	subs	r0, r0, r3
 8007a46:	0002      	movs	r2, r0
 8007a48:	6a21      	ldr	r1, [r4, #32]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	0028      	movs	r0, r5
 8007a4e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007a50:	47b8      	blx	r7
 8007a52:	89a1      	ldrh	r1, [r4, #12]
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d106      	bne.n	8007a66 <__sflush_r+0x6a>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	2b1d      	cmp	r3, #29
 8007a5c:	d831      	bhi.n	8007ac2 <__sflush_r+0xc6>
 8007a5e:	4a2c      	ldr	r2, [pc, #176]	; (8007b10 <__sflush_r+0x114>)
 8007a60:	40da      	lsrs	r2, r3
 8007a62:	07d3      	lsls	r3, r2, #31
 8007a64:	d52d      	bpl.n	8007ac2 <__sflush_r+0xc6>
 8007a66:	2300      	movs	r3, #0
 8007a68:	6063      	str	r3, [r4, #4]
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	04cb      	lsls	r3, r1, #19
 8007a70:	d505      	bpl.n	8007a7e <__sflush_r+0x82>
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	d102      	bne.n	8007a7c <__sflush_r+0x80>
 8007a76:	682b      	ldr	r3, [r5, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d100      	bne.n	8007a7e <__sflush_r+0x82>
 8007a7c:	6560      	str	r0, [r4, #84]	; 0x54
 8007a7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a80:	602e      	str	r6, [r5, #0]
 8007a82:	2900      	cmp	r1, #0
 8007a84:	d0c6      	beq.n	8007a14 <__sflush_r+0x18>
 8007a86:	0023      	movs	r3, r4
 8007a88:	3344      	adds	r3, #68	; 0x44
 8007a8a:	4299      	cmp	r1, r3
 8007a8c:	d002      	beq.n	8007a94 <__sflush_r+0x98>
 8007a8e:	0028      	movs	r0, r5
 8007a90:	f7ff fa86 	bl	8006fa0 <_free_r>
 8007a94:	2000      	movs	r0, #0
 8007a96:	6360      	str	r0, [r4, #52]	; 0x34
 8007a98:	e7bd      	b.n	8007a16 <__sflush_r+0x1a>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	0028      	movs	r0, r5
 8007a9e:	6a21      	ldr	r1, [r4, #32]
 8007aa0:	47b8      	blx	r7
 8007aa2:	1c43      	adds	r3, r0, #1
 8007aa4:	d1c5      	bne.n	8007a32 <__sflush_r+0x36>
 8007aa6:	682b      	ldr	r3, [r5, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0c2      	beq.n	8007a32 <__sflush_r+0x36>
 8007aac:	2b1d      	cmp	r3, #29
 8007aae:	d001      	beq.n	8007ab4 <__sflush_r+0xb8>
 8007ab0:	2b16      	cmp	r3, #22
 8007ab2:	d101      	bne.n	8007ab8 <__sflush_r+0xbc>
 8007ab4:	602e      	str	r6, [r5, #0]
 8007ab6:	e7ad      	b.n	8007a14 <__sflush_r+0x18>
 8007ab8:	2340      	movs	r3, #64	; 0x40
 8007aba:	89a2      	ldrh	r2, [r4, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	e7a9      	b.n	8007a16 <__sflush_r+0x1a>
 8007ac2:	2340      	movs	r3, #64	; 0x40
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	e7fa      	b.n	8007abe <__sflush_r+0xc2>
 8007ac8:	690f      	ldr	r7, [r1, #16]
 8007aca:	2f00      	cmp	r7, #0
 8007acc:	d0a2      	beq.n	8007a14 <__sflush_r+0x18>
 8007ace:	680a      	ldr	r2, [r1, #0]
 8007ad0:	600f      	str	r7, [r1, #0]
 8007ad2:	1bd2      	subs	r2, r2, r7
 8007ad4:	9201      	str	r2, [sp, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	079b      	lsls	r3, r3, #30
 8007ada:	d100      	bne.n	8007ade <__sflush_r+0xe2>
 8007adc:	694a      	ldr	r2, [r1, #20]
 8007ade:	60a2      	str	r2, [r4, #8]
 8007ae0:	9b01      	ldr	r3, [sp, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dc00      	bgt.n	8007ae8 <__sflush_r+0xec>
 8007ae6:	e795      	b.n	8007a14 <__sflush_r+0x18>
 8007ae8:	003a      	movs	r2, r7
 8007aea:	0028      	movs	r0, r5
 8007aec:	9b01      	ldr	r3, [sp, #4]
 8007aee:	6a21      	ldr	r1, [r4, #32]
 8007af0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007af2:	47b0      	blx	r6
 8007af4:	2800      	cmp	r0, #0
 8007af6:	dc06      	bgt.n	8007b06 <__sflush_r+0x10a>
 8007af8:	2340      	movs	r3, #64	; 0x40
 8007afa:	2001      	movs	r0, #1
 8007afc:	89a2      	ldrh	r2, [r4, #12]
 8007afe:	4240      	negs	r0, r0
 8007b00:	4313      	orrs	r3, r2
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	e787      	b.n	8007a16 <__sflush_r+0x1a>
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	183f      	adds	r7, r7, r0
 8007b0a:	1a1b      	subs	r3, r3, r0
 8007b0c:	9301      	str	r3, [sp, #4]
 8007b0e:	e7e7      	b.n	8007ae0 <__sflush_r+0xe4>
 8007b10:	20400001 	.word	0x20400001

08007b14 <_fflush_r>:
 8007b14:	690b      	ldr	r3, [r1, #16]
 8007b16:	b570      	push	{r4, r5, r6, lr}
 8007b18:	0005      	movs	r5, r0
 8007b1a:	000c      	movs	r4, r1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <_fflush_r+0x12>
 8007b20:	2500      	movs	r5, #0
 8007b22:	0028      	movs	r0, r5
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d004      	beq.n	8007b34 <_fflush_r+0x20>
 8007b2a:	6983      	ldr	r3, [r0, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <_fflush_r+0x20>
 8007b30:	f000 f892 	bl	8007c58 <__sinit>
 8007b34:	4b14      	ldr	r3, [pc, #80]	; (8007b88 <_fflush_r+0x74>)
 8007b36:	429c      	cmp	r4, r3
 8007b38:	d11b      	bne.n	8007b72 <_fflush_r+0x5e>
 8007b3a:	686c      	ldr	r4, [r5, #4]
 8007b3c:	220c      	movs	r2, #12
 8007b3e:	5ea3      	ldrsh	r3, [r4, r2]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0ed      	beq.n	8007b20 <_fflush_r+0xc>
 8007b44:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b46:	07d2      	lsls	r2, r2, #31
 8007b48:	d404      	bmi.n	8007b54 <_fflush_r+0x40>
 8007b4a:	059b      	lsls	r3, r3, #22
 8007b4c:	d402      	bmi.n	8007b54 <_fflush_r+0x40>
 8007b4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b50:	f000 f923 	bl	8007d9a <__retarget_lock_acquire_recursive>
 8007b54:	0028      	movs	r0, r5
 8007b56:	0021      	movs	r1, r4
 8007b58:	f7ff ff50 	bl	80079fc <__sflush_r>
 8007b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b5e:	0005      	movs	r5, r0
 8007b60:	07db      	lsls	r3, r3, #31
 8007b62:	d4de      	bmi.n	8007b22 <_fflush_r+0xe>
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	059b      	lsls	r3, r3, #22
 8007b68:	d4db      	bmi.n	8007b22 <_fflush_r+0xe>
 8007b6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b6c:	f000 f916 	bl	8007d9c <__retarget_lock_release_recursive>
 8007b70:	e7d7      	b.n	8007b22 <_fflush_r+0xe>
 8007b72:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <_fflush_r+0x78>)
 8007b74:	429c      	cmp	r4, r3
 8007b76:	d101      	bne.n	8007b7c <_fflush_r+0x68>
 8007b78:	68ac      	ldr	r4, [r5, #8]
 8007b7a:	e7df      	b.n	8007b3c <_fflush_r+0x28>
 8007b7c:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <_fflush_r+0x7c>)
 8007b7e:	429c      	cmp	r4, r3
 8007b80:	d1dc      	bne.n	8007b3c <_fflush_r+0x28>
 8007b82:	68ec      	ldr	r4, [r5, #12]
 8007b84:	e7da      	b.n	8007b3c <_fflush_r+0x28>
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	080086cc 	.word	0x080086cc
 8007b8c:	080086ec 	.word	0x080086ec
 8007b90:	080086ac 	.word	0x080086ac

08007b94 <std>:
 8007b94:	2300      	movs	r3, #0
 8007b96:	b510      	push	{r4, lr}
 8007b98:	0004      	movs	r4, r0
 8007b9a:	6003      	str	r3, [r0, #0]
 8007b9c:	6043      	str	r3, [r0, #4]
 8007b9e:	6083      	str	r3, [r0, #8]
 8007ba0:	8181      	strh	r1, [r0, #12]
 8007ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ba4:	0019      	movs	r1, r3
 8007ba6:	81c2      	strh	r2, [r0, #14]
 8007ba8:	6103      	str	r3, [r0, #16]
 8007baa:	6143      	str	r3, [r0, #20]
 8007bac:	6183      	str	r3, [r0, #24]
 8007bae:	2208      	movs	r2, #8
 8007bb0:	305c      	adds	r0, #92	; 0x5c
 8007bb2:	f7fd fab7 	bl	8005124 <memset>
 8007bb6:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <std+0x38>)
 8007bb8:	6224      	str	r4, [r4, #32]
 8007bba:	6263      	str	r3, [r4, #36]	; 0x24
 8007bbc:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <std+0x3c>)
 8007bbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bc0:	4b04      	ldr	r3, [pc, #16]	; (8007bd4 <std+0x40>)
 8007bc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <std+0x44>)
 8007bc6:	6323      	str	r3, [r4, #48]	; 0x30
 8007bc8:	bd10      	pop	{r4, pc}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	08007f1d 	.word	0x08007f1d
 8007bd0:	08007f45 	.word	0x08007f45
 8007bd4:	08007f7d 	.word	0x08007f7d
 8007bd8:	08007fa9 	.word	0x08007fa9

08007bdc <_cleanup_r>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	4902      	ldr	r1, [pc, #8]	; (8007be8 <_cleanup_r+0xc>)
 8007be0:	f000 f8ba 	bl	8007d58 <_fwalk_reent>
 8007be4:	bd10      	pop	{r4, pc}
 8007be6:	46c0      	nop			; (mov r8, r8)
 8007be8:	08007b15 	.word	0x08007b15

08007bec <__sfmoreglue>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	2568      	movs	r5, #104	; 0x68
 8007bf0:	1e4a      	subs	r2, r1, #1
 8007bf2:	4355      	muls	r5, r2
 8007bf4:	000e      	movs	r6, r1
 8007bf6:	0029      	movs	r1, r5
 8007bf8:	3174      	adds	r1, #116	; 0x74
 8007bfa:	f7ff fa3d 	bl	8007078 <_malloc_r>
 8007bfe:	1e04      	subs	r4, r0, #0
 8007c00:	d008      	beq.n	8007c14 <__sfmoreglue+0x28>
 8007c02:	2100      	movs	r1, #0
 8007c04:	002a      	movs	r2, r5
 8007c06:	6001      	str	r1, [r0, #0]
 8007c08:	6046      	str	r6, [r0, #4]
 8007c0a:	300c      	adds	r0, #12
 8007c0c:	60a0      	str	r0, [r4, #8]
 8007c0e:	3268      	adds	r2, #104	; 0x68
 8007c10:	f7fd fa88 	bl	8005124 <memset>
 8007c14:	0020      	movs	r0, r4
 8007c16:	bd70      	pop	{r4, r5, r6, pc}

08007c18 <__sfp_lock_acquire>:
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	4802      	ldr	r0, [pc, #8]	; (8007c24 <__sfp_lock_acquire+0xc>)
 8007c1c:	f000 f8bd 	bl	8007d9a <__retarget_lock_acquire_recursive>
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	200005d5 	.word	0x200005d5

08007c28 <__sfp_lock_release>:
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	4802      	ldr	r0, [pc, #8]	; (8007c34 <__sfp_lock_release+0xc>)
 8007c2c:	f000 f8b6 	bl	8007d9c <__retarget_lock_release_recursive>
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	46c0      	nop			; (mov r8, r8)
 8007c34:	200005d5 	.word	0x200005d5

08007c38 <__sinit_lock_acquire>:
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	4802      	ldr	r0, [pc, #8]	; (8007c44 <__sinit_lock_acquire+0xc>)
 8007c3c:	f000 f8ad 	bl	8007d9a <__retarget_lock_acquire_recursive>
 8007c40:	bd10      	pop	{r4, pc}
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	200005d6 	.word	0x200005d6

08007c48 <__sinit_lock_release>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	4802      	ldr	r0, [pc, #8]	; (8007c54 <__sinit_lock_release+0xc>)
 8007c4c:	f000 f8a6 	bl	8007d9c <__retarget_lock_release_recursive>
 8007c50:	bd10      	pop	{r4, pc}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	200005d6 	.word	0x200005d6

08007c58 <__sinit>:
 8007c58:	b513      	push	{r0, r1, r4, lr}
 8007c5a:	0004      	movs	r4, r0
 8007c5c:	f7ff ffec 	bl	8007c38 <__sinit_lock_acquire>
 8007c60:	69a3      	ldr	r3, [r4, #24]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <__sinit+0x14>
 8007c66:	f7ff ffef 	bl	8007c48 <__sinit_lock_release>
 8007c6a:	bd13      	pop	{r0, r1, r4, pc}
 8007c6c:	64a3      	str	r3, [r4, #72]	; 0x48
 8007c6e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007c70:	6523      	str	r3, [r4, #80]	; 0x50
 8007c72:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <__sinit+0x68>)
 8007c74:	4a13      	ldr	r2, [pc, #76]	; (8007cc4 <__sinit+0x6c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	d101      	bne.n	8007c84 <__sinit+0x2c>
 8007c80:	2301      	movs	r3, #1
 8007c82:	61a3      	str	r3, [r4, #24]
 8007c84:	0020      	movs	r0, r4
 8007c86:	f000 f81f 	bl	8007cc8 <__sfp>
 8007c8a:	6060      	str	r0, [r4, #4]
 8007c8c:	0020      	movs	r0, r4
 8007c8e:	f000 f81b 	bl	8007cc8 <__sfp>
 8007c92:	60a0      	str	r0, [r4, #8]
 8007c94:	0020      	movs	r0, r4
 8007c96:	f000 f817 	bl	8007cc8 <__sfp>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2104      	movs	r1, #4
 8007c9e:	60e0      	str	r0, [r4, #12]
 8007ca0:	6860      	ldr	r0, [r4, #4]
 8007ca2:	f7ff ff77 	bl	8007b94 <std>
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	2109      	movs	r1, #9
 8007caa:	68a0      	ldr	r0, [r4, #8]
 8007cac:	f7ff ff72 	bl	8007b94 <std>
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	2112      	movs	r1, #18
 8007cb4:	68e0      	ldr	r0, [r4, #12]
 8007cb6:	f7ff ff6d 	bl	8007b94 <std>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	61a3      	str	r3, [r4, #24]
 8007cbe:	e7d2      	b.n	8007c66 <__sinit+0xe>
 8007cc0:	08008330 	.word	0x08008330
 8007cc4:	08007bdd 	.word	0x08007bdd

08007cc8 <__sfp>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	0007      	movs	r7, r0
 8007ccc:	f7ff ffa4 	bl	8007c18 <__sfp_lock_acquire>
 8007cd0:	4b1f      	ldr	r3, [pc, #124]	; (8007d50 <__sfp+0x88>)
 8007cd2:	681e      	ldr	r6, [r3, #0]
 8007cd4:	69b3      	ldr	r3, [r6, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d102      	bne.n	8007ce0 <__sfp+0x18>
 8007cda:	0030      	movs	r0, r6
 8007cdc:	f7ff ffbc 	bl	8007c58 <__sinit>
 8007ce0:	3648      	adds	r6, #72	; 0x48
 8007ce2:	68b4      	ldr	r4, [r6, #8]
 8007ce4:	6873      	ldr	r3, [r6, #4]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	d504      	bpl.n	8007cf4 <__sfp+0x2c>
 8007cea:	6833      	ldr	r3, [r6, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d022      	beq.n	8007d36 <__sfp+0x6e>
 8007cf0:	6836      	ldr	r6, [r6, #0]
 8007cf2:	e7f6      	b.n	8007ce2 <__sfp+0x1a>
 8007cf4:	220c      	movs	r2, #12
 8007cf6:	5ea5      	ldrsh	r5, [r4, r2]
 8007cf8:	2d00      	cmp	r5, #0
 8007cfa:	d11a      	bne.n	8007d32 <__sfp+0x6a>
 8007cfc:	0020      	movs	r0, r4
 8007cfe:	4b15      	ldr	r3, [pc, #84]	; (8007d54 <__sfp+0x8c>)
 8007d00:	3058      	adds	r0, #88	; 0x58
 8007d02:	60e3      	str	r3, [r4, #12]
 8007d04:	6665      	str	r5, [r4, #100]	; 0x64
 8007d06:	f000 f847 	bl	8007d98 <__retarget_lock_init_recursive>
 8007d0a:	f7ff ff8d 	bl	8007c28 <__sfp_lock_release>
 8007d0e:	0020      	movs	r0, r4
 8007d10:	2208      	movs	r2, #8
 8007d12:	0029      	movs	r1, r5
 8007d14:	6025      	str	r5, [r4, #0]
 8007d16:	60a5      	str	r5, [r4, #8]
 8007d18:	6065      	str	r5, [r4, #4]
 8007d1a:	6125      	str	r5, [r4, #16]
 8007d1c:	6165      	str	r5, [r4, #20]
 8007d1e:	61a5      	str	r5, [r4, #24]
 8007d20:	305c      	adds	r0, #92	; 0x5c
 8007d22:	f7fd f9ff 	bl	8005124 <memset>
 8007d26:	6365      	str	r5, [r4, #52]	; 0x34
 8007d28:	63a5      	str	r5, [r4, #56]	; 0x38
 8007d2a:	64a5      	str	r5, [r4, #72]	; 0x48
 8007d2c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007d2e:	0020      	movs	r0, r4
 8007d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d32:	3468      	adds	r4, #104	; 0x68
 8007d34:	e7d7      	b.n	8007ce6 <__sfp+0x1e>
 8007d36:	2104      	movs	r1, #4
 8007d38:	0038      	movs	r0, r7
 8007d3a:	f7ff ff57 	bl	8007bec <__sfmoreglue>
 8007d3e:	1e04      	subs	r4, r0, #0
 8007d40:	6030      	str	r0, [r6, #0]
 8007d42:	d1d5      	bne.n	8007cf0 <__sfp+0x28>
 8007d44:	f7ff ff70 	bl	8007c28 <__sfp_lock_release>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	e7ef      	b.n	8007d2e <__sfp+0x66>
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	08008330 	.word	0x08008330
 8007d54:	ffff0001 	.word	0xffff0001

08007d58 <_fwalk_reent>:
 8007d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d5a:	0004      	movs	r4, r0
 8007d5c:	0006      	movs	r6, r0
 8007d5e:	2700      	movs	r7, #0
 8007d60:	9101      	str	r1, [sp, #4]
 8007d62:	3448      	adds	r4, #72	; 0x48
 8007d64:	6863      	ldr	r3, [r4, #4]
 8007d66:	68a5      	ldr	r5, [r4, #8]
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	9b00      	ldr	r3, [sp, #0]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	d504      	bpl.n	8007d7c <_fwalk_reent+0x24>
 8007d72:	6824      	ldr	r4, [r4, #0]
 8007d74:	2c00      	cmp	r4, #0
 8007d76:	d1f5      	bne.n	8007d64 <_fwalk_reent+0xc>
 8007d78:	0038      	movs	r0, r7
 8007d7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d7c:	89ab      	ldrh	r3, [r5, #12]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d908      	bls.n	8007d94 <_fwalk_reent+0x3c>
 8007d82:	220e      	movs	r2, #14
 8007d84:	5eab      	ldrsh	r3, [r5, r2]
 8007d86:	3301      	adds	r3, #1
 8007d88:	d004      	beq.n	8007d94 <_fwalk_reent+0x3c>
 8007d8a:	0029      	movs	r1, r5
 8007d8c:	0030      	movs	r0, r6
 8007d8e:	9b01      	ldr	r3, [sp, #4]
 8007d90:	4798      	blx	r3
 8007d92:	4307      	orrs	r7, r0
 8007d94:	3568      	adds	r5, #104	; 0x68
 8007d96:	e7e8      	b.n	8007d6a <_fwalk_reent+0x12>

08007d98 <__retarget_lock_init_recursive>:
 8007d98:	4770      	bx	lr

08007d9a <__retarget_lock_acquire_recursive>:
 8007d9a:	4770      	bx	lr

08007d9c <__retarget_lock_release_recursive>:
 8007d9c:	4770      	bx	lr
	...

08007da0 <__swhatbuf_r>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	000e      	movs	r6, r1
 8007da4:	001d      	movs	r5, r3
 8007da6:	230e      	movs	r3, #14
 8007da8:	5ec9      	ldrsh	r1, [r1, r3]
 8007daa:	0014      	movs	r4, r2
 8007dac:	b096      	sub	sp, #88	; 0x58
 8007dae:	2900      	cmp	r1, #0
 8007db0:	da08      	bge.n	8007dc4 <__swhatbuf_r+0x24>
 8007db2:	220c      	movs	r2, #12
 8007db4:	5eb3      	ldrsh	r3, [r6, r2]
 8007db6:	2200      	movs	r2, #0
 8007db8:	602a      	str	r2, [r5, #0]
 8007dba:	061b      	lsls	r3, r3, #24
 8007dbc:	d411      	bmi.n	8007de2 <__swhatbuf_r+0x42>
 8007dbe:	2380      	movs	r3, #128	; 0x80
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	e00f      	b.n	8007de4 <__swhatbuf_r+0x44>
 8007dc4:	466a      	mov	r2, sp
 8007dc6:	f000 f91b 	bl	8008000 <_fstat_r>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	dbf1      	blt.n	8007db2 <__swhatbuf_r+0x12>
 8007dce:	23f0      	movs	r3, #240	; 0xf0
 8007dd0:	9901      	ldr	r1, [sp, #4]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	4019      	ands	r1, r3
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <__swhatbuf_r+0x4c>)
 8007dd8:	18c9      	adds	r1, r1, r3
 8007dda:	424b      	negs	r3, r1
 8007ddc:	4159      	adcs	r1, r3
 8007dde:	6029      	str	r1, [r5, #0]
 8007de0:	e7ed      	b.n	8007dbe <__swhatbuf_r+0x1e>
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	2000      	movs	r0, #0
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	b016      	add	sp, #88	; 0x58
 8007dea:	bd70      	pop	{r4, r5, r6, pc}
 8007dec:	ffffe000 	.word	0xffffe000

08007df0 <__smakebuf_r>:
 8007df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007df2:	2602      	movs	r6, #2
 8007df4:	898b      	ldrh	r3, [r1, #12]
 8007df6:	0005      	movs	r5, r0
 8007df8:	000c      	movs	r4, r1
 8007dfa:	4233      	tst	r3, r6
 8007dfc:	d006      	beq.n	8007e0c <__smakebuf_r+0x1c>
 8007dfe:	0023      	movs	r3, r4
 8007e00:	3347      	adds	r3, #71	; 0x47
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	2301      	movs	r3, #1
 8007e08:	6163      	str	r3, [r4, #20]
 8007e0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007e0c:	466a      	mov	r2, sp
 8007e0e:	ab01      	add	r3, sp, #4
 8007e10:	f7ff ffc6 	bl	8007da0 <__swhatbuf_r>
 8007e14:	9900      	ldr	r1, [sp, #0]
 8007e16:	0007      	movs	r7, r0
 8007e18:	0028      	movs	r0, r5
 8007e1a:	f7ff f92d 	bl	8007078 <_malloc_r>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d108      	bne.n	8007e34 <__smakebuf_r+0x44>
 8007e22:	220c      	movs	r2, #12
 8007e24:	5ea3      	ldrsh	r3, [r4, r2]
 8007e26:	059a      	lsls	r2, r3, #22
 8007e28:	d4ef      	bmi.n	8007e0a <__smakebuf_r+0x1a>
 8007e2a:	2203      	movs	r2, #3
 8007e2c:	4393      	bics	r3, r2
 8007e2e:	431e      	orrs	r6, r3
 8007e30:	81a6      	strh	r6, [r4, #12]
 8007e32:	e7e4      	b.n	8007dfe <__smakebuf_r+0xe>
 8007e34:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <__smakebuf_r+0x84>)
 8007e36:	62ab      	str	r3, [r5, #40]	; 0x28
 8007e38:	2380      	movs	r3, #128	; 0x80
 8007e3a:	89a2      	ldrh	r2, [r4, #12]
 8007e3c:	6020      	str	r0, [r4, #0]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	81a3      	strh	r3, [r4, #12]
 8007e42:	9b00      	ldr	r3, [sp, #0]
 8007e44:	6120      	str	r0, [r4, #16]
 8007e46:	6163      	str	r3, [r4, #20]
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00d      	beq.n	8007e6a <__smakebuf_r+0x7a>
 8007e4e:	0028      	movs	r0, r5
 8007e50:	230e      	movs	r3, #14
 8007e52:	5ee1      	ldrsh	r1, [r4, r3]
 8007e54:	f000 f8e6 	bl	8008024 <_isatty_r>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d006      	beq.n	8007e6a <__smakebuf_r+0x7a>
 8007e5c:	2203      	movs	r2, #3
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	4393      	bics	r3, r2
 8007e62:	001a      	movs	r2, r3
 8007e64:	2301      	movs	r3, #1
 8007e66:	4313      	orrs	r3, r2
 8007e68:	81a3      	strh	r3, [r4, #12]
 8007e6a:	89a0      	ldrh	r0, [r4, #12]
 8007e6c:	4307      	orrs	r7, r0
 8007e6e:	81a7      	strh	r7, [r4, #12]
 8007e70:	e7cb      	b.n	8007e0a <__smakebuf_r+0x1a>
 8007e72:	46c0      	nop			; (mov r8, r8)
 8007e74:	08007bdd 	.word	0x08007bdd

08007e78 <_malloc_usable_size_r>:
 8007e78:	1f0b      	subs	r3, r1, #4
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	1f18      	subs	r0, r3, #4
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	da01      	bge.n	8007e86 <_malloc_usable_size_r+0xe>
 8007e82:	580b      	ldr	r3, [r1, r0]
 8007e84:	18c0      	adds	r0, r0, r3
 8007e86:	4770      	bx	lr

08007e88 <_raise_r>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	0004      	movs	r4, r0
 8007e8c:	000d      	movs	r5, r1
 8007e8e:	291f      	cmp	r1, #31
 8007e90:	d904      	bls.n	8007e9c <_raise_r+0x14>
 8007e92:	2316      	movs	r3, #22
 8007e94:	6003      	str	r3, [r0, #0]
 8007e96:	2001      	movs	r0, #1
 8007e98:	4240      	negs	r0, r0
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <_raise_r+0x24>
 8007ea2:	008a      	lsls	r2, r1, #2
 8007ea4:	189b      	adds	r3, r3, r2
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	2a00      	cmp	r2, #0
 8007eaa:	d108      	bne.n	8007ebe <_raise_r+0x36>
 8007eac:	0020      	movs	r0, r4
 8007eae:	f000 f831 	bl	8007f14 <_getpid_r>
 8007eb2:	002a      	movs	r2, r5
 8007eb4:	0001      	movs	r1, r0
 8007eb6:	0020      	movs	r0, r4
 8007eb8:	f000 f81a 	bl	8007ef0 <_kill_r>
 8007ebc:	e7ed      	b.n	8007e9a <_raise_r+0x12>
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	2a01      	cmp	r2, #1
 8007ec2:	d0ea      	beq.n	8007e9a <_raise_r+0x12>
 8007ec4:	1c51      	adds	r1, r2, #1
 8007ec6:	d103      	bne.n	8007ed0 <_raise_r+0x48>
 8007ec8:	2316      	movs	r3, #22
 8007eca:	3001      	adds	r0, #1
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	e7e4      	b.n	8007e9a <_raise_r+0x12>
 8007ed0:	2400      	movs	r4, #0
 8007ed2:	0028      	movs	r0, r5
 8007ed4:	601c      	str	r4, [r3, #0]
 8007ed6:	4790      	blx	r2
 8007ed8:	0020      	movs	r0, r4
 8007eda:	e7de      	b.n	8007e9a <_raise_r+0x12>

08007edc <raise>:
 8007edc:	b510      	push	{r4, lr}
 8007ede:	4b03      	ldr	r3, [pc, #12]	; (8007eec <raise+0x10>)
 8007ee0:	0001      	movs	r1, r0
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	f7ff ffd0 	bl	8007e88 <_raise_r>
 8007ee8:	bd10      	pop	{r4, pc}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	20000050 	.word	0x20000050

08007ef0 <_kill_r>:
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	b570      	push	{r4, r5, r6, lr}
 8007ef4:	4d06      	ldr	r5, [pc, #24]	; (8007f10 <_kill_r+0x20>)
 8007ef6:	0004      	movs	r4, r0
 8007ef8:	0008      	movs	r0, r1
 8007efa:	0011      	movs	r1, r2
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	f7fa fac8 	bl	8002492 <_kill>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	d103      	bne.n	8007f0e <_kill_r+0x1e>
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d000      	beq.n	8007f0e <_kill_r+0x1e>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	200005d0 	.word	0x200005d0

08007f14 <_getpid_r>:
 8007f14:	b510      	push	{r4, lr}
 8007f16:	f7fa fab6 	bl	8002486 <_getpid>
 8007f1a:	bd10      	pop	{r4, pc}

08007f1c <__sread>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	000c      	movs	r4, r1
 8007f20:	250e      	movs	r5, #14
 8007f22:	5f49      	ldrsh	r1, [r1, r5]
 8007f24:	f000 f8a4 	bl	8008070 <_read_r>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	db03      	blt.n	8007f34 <__sread+0x18>
 8007f2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f2e:	181b      	adds	r3, r3, r0
 8007f30:	6563      	str	r3, [r4, #84]	; 0x54
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	4a02      	ldr	r2, [pc, #8]	; (8007f40 <__sread+0x24>)
 8007f38:	4013      	ands	r3, r2
 8007f3a:	81a3      	strh	r3, [r4, #12]
 8007f3c:	e7f9      	b.n	8007f32 <__sread+0x16>
 8007f3e:	46c0      	nop			; (mov r8, r8)
 8007f40:	ffffefff 	.word	0xffffefff

08007f44 <__swrite>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	001f      	movs	r7, r3
 8007f48:	898b      	ldrh	r3, [r1, #12]
 8007f4a:	0005      	movs	r5, r0
 8007f4c:	000c      	movs	r4, r1
 8007f4e:	0016      	movs	r6, r2
 8007f50:	05db      	lsls	r3, r3, #23
 8007f52:	d505      	bpl.n	8007f60 <__swrite+0x1c>
 8007f54:	230e      	movs	r3, #14
 8007f56:	5ec9      	ldrsh	r1, [r1, r3]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	f000 f874 	bl	8008048 <_lseek_r>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	4a05      	ldr	r2, [pc, #20]	; (8007f78 <__swrite+0x34>)
 8007f64:	0028      	movs	r0, r5
 8007f66:	4013      	ands	r3, r2
 8007f68:	81a3      	strh	r3, [r4, #12]
 8007f6a:	0032      	movs	r2, r6
 8007f6c:	230e      	movs	r3, #14
 8007f6e:	5ee1      	ldrsh	r1, [r4, r3]
 8007f70:	003b      	movs	r3, r7
 8007f72:	f000 f81f 	bl	8007fb4 <_write_r>
 8007f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f78:	ffffefff 	.word	0xffffefff

08007f7c <__sseek>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	000c      	movs	r4, r1
 8007f80:	250e      	movs	r5, #14
 8007f82:	5f49      	ldrsh	r1, [r1, r5]
 8007f84:	f000 f860 	bl	8008048 <_lseek_r>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	1c42      	adds	r2, r0, #1
 8007f8c:	d103      	bne.n	8007f96 <__sseek+0x1a>
 8007f8e:	4a05      	ldr	r2, [pc, #20]	; (8007fa4 <__sseek+0x28>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	bd70      	pop	{r4, r5, r6, pc}
 8007f96:	2280      	movs	r2, #128	; 0x80
 8007f98:	0152      	lsls	r2, r2, #5
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	6560      	str	r0, [r4, #84]	; 0x54
 8007fa0:	e7f8      	b.n	8007f94 <__sseek+0x18>
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	ffffefff 	.word	0xffffefff

08007fa8 <__sclose>:
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	230e      	movs	r3, #14
 8007fac:	5ec9      	ldrsh	r1, [r1, r3]
 8007fae:	f000 f815 	bl	8007fdc <_close_r>
 8007fb2:	bd10      	pop	{r4, pc}

08007fb4 <_write_r>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	0004      	movs	r4, r0
 8007fb8:	0008      	movs	r0, r1
 8007fba:	0011      	movs	r1, r2
 8007fbc:	001a      	movs	r2, r3
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	4d05      	ldr	r5, [pc, #20]	; (8007fd8 <_write_r+0x24>)
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	f7fa fa9e 	bl	8002504 <_write>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d103      	bne.n	8007fd4 <_write_r+0x20>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d000      	beq.n	8007fd4 <_write_r+0x20>
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	bd70      	pop	{r4, r5, r6, pc}
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	200005d0 	.word	0x200005d0

08007fdc <_close_r>:
 8007fdc:	2300      	movs	r3, #0
 8007fde:	b570      	push	{r4, r5, r6, lr}
 8007fe0:	4d06      	ldr	r5, [pc, #24]	; (8007ffc <_close_r+0x20>)
 8007fe2:	0004      	movs	r4, r0
 8007fe4:	0008      	movs	r0, r1
 8007fe6:	602b      	str	r3, [r5, #0]
 8007fe8:	f7fa faa8 	bl	800253c <_close>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d103      	bne.n	8007ff8 <_close_r+0x1c>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d000      	beq.n	8007ff8 <_close_r+0x1c>
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	bd70      	pop	{r4, r5, r6, pc}
 8007ffa:	46c0      	nop			; (mov r8, r8)
 8007ffc:	200005d0 	.word	0x200005d0

08008000 <_fstat_r>:
 8008000:	2300      	movs	r3, #0
 8008002:	b570      	push	{r4, r5, r6, lr}
 8008004:	4d06      	ldr	r5, [pc, #24]	; (8008020 <_fstat_r+0x20>)
 8008006:	0004      	movs	r4, r0
 8008008:	0008      	movs	r0, r1
 800800a:	0011      	movs	r1, r2
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	f7fa fa9f 	bl	8002550 <_fstat>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	d103      	bne.n	800801e <_fstat_r+0x1e>
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d000      	beq.n	800801e <_fstat_r+0x1e>
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	200005d0 	.word	0x200005d0

08008024 <_isatty_r>:
 8008024:	2300      	movs	r3, #0
 8008026:	b570      	push	{r4, r5, r6, lr}
 8008028:	4d06      	ldr	r5, [pc, #24]	; (8008044 <_isatty_r+0x20>)
 800802a:	0004      	movs	r4, r0
 800802c:	0008      	movs	r0, r1
 800802e:	602b      	str	r3, [r5, #0]
 8008030:	f7fa fa9c 	bl	800256c <_isatty>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d103      	bne.n	8008040 <_isatty_r+0x1c>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d000      	beq.n	8008040 <_isatty_r+0x1c>
 800803e:	6023      	str	r3, [r4, #0]
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	200005d0 	.word	0x200005d0

08008048 <_lseek_r>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	0004      	movs	r4, r0
 800804c:	0008      	movs	r0, r1
 800804e:	0011      	movs	r1, r2
 8008050:	001a      	movs	r2, r3
 8008052:	2300      	movs	r3, #0
 8008054:	4d05      	ldr	r5, [pc, #20]	; (800806c <_lseek_r+0x24>)
 8008056:	602b      	str	r3, [r5, #0]
 8008058:	f7fa fa91 	bl	800257e <_lseek>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d103      	bne.n	8008068 <_lseek_r+0x20>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d000      	beq.n	8008068 <_lseek_r+0x20>
 8008066:	6023      	str	r3, [r4, #0]
 8008068:	bd70      	pop	{r4, r5, r6, pc}
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	200005d0 	.word	0x200005d0

08008070 <_read_r>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	0004      	movs	r4, r0
 8008074:	0008      	movs	r0, r1
 8008076:	0011      	movs	r1, r2
 8008078:	001a      	movs	r2, r3
 800807a:	2300      	movs	r3, #0
 800807c:	4d05      	ldr	r5, [pc, #20]	; (8008094 <_read_r+0x24>)
 800807e:	602b      	str	r3, [r5, #0]
 8008080:	f7fa fa23 	bl	80024ca <_read>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d103      	bne.n	8008090 <_read_r+0x20>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d000      	beq.n	8008090 <_read_r+0x20>
 800808e:	6023      	str	r3, [r4, #0]
 8008090:	bd70      	pop	{r4, r5, r6, pc}
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	200005d0 	.word	0x200005d0

08008098 <_init>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809e:	bc08      	pop	{r3}
 80080a0:	469e      	mov	lr, r3
 80080a2:	4770      	bx	lr

080080a4 <_fini>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080aa:	bc08      	pop	{r3}
 80080ac:	469e      	mov	lr, r3
 80080ae:	4770      	bx	lr
