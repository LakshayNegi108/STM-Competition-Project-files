
FreeRtos practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08006f1c  08006f1c  00016f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007440  08007440  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007448  08007448  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007448  08007448  00017448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800744c  0800744c  0001744c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08007450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004384  200000b8  08007508  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000443c  08007508  0002443c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c78f  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b18  00000000  00000000  0003c877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  00040390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001658  00000000  00000000  00041b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1d5  00000000  00000000  00043190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd8b  00000000  00000000  0005e365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a66b2  00000000  00000000  0007a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001207a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a4c  00000000  00000000  001207f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f04 	.word	0x08006f04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	08006f04 	.word	0x08006f04

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200000d4 	.word	0x200000d4
 80005c4:	20000188 	.word	0x20000188

080005c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b09c      	sub	sp, #112	; 0x70
 80005cc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ce:	f000 fcdf 	bl	8000f90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d2:	f000 f89d 	bl	8000710 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005d6:	f000 f9b1 	bl	800093c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005da:	f000 f985 	bl	80008e8 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80005de:	f000 f903 	bl	80007e8 <MX_ADC1_Init>
	MX_I2C1_Init();
 80005e2:	f000 f953 	bl	800088c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	USART_INIT(USART6, PORTA, PORTA, 11, 12, 115200);
 80005e6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	230c      	movs	r3, #12
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	230b      	movs	r3, #11
 80005f2:	4a39      	ldr	r2, [pc, #228]	; (80006d8 <main+0x110>)
 80005f4:	4938      	ldr	r1, [pc, #224]	; (80006d8 <main+0x110>)
 80005f6:	4839      	ldr	r0, [pc, #228]	; (80006dc <main+0x114>)
 80005f8:	f003 f90a 	bl	8003810 <USART_INIT>
	print("Working\r\n");
 80005fc:	4838      	ldr	r0, [pc, #224]	; (80006e0 <main+0x118>)
 80005fe:	f003 fa4d 	bl	8003a9c <print>
	USART_WRITE(USART6, "WORKING USART 6\r\n", 18, 100);
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	2212      	movs	r2, #18
 8000606:	4937      	ldr	r1, [pc, #220]	; (80006e4 <main+0x11c>)
 8000608:	4834      	ldr	r0, [pc, #208]	; (80006dc <main+0x114>)
 800060a:	f003 fa17 	bl	8003a3c <USART_WRITE>
	LCD_Begin();
 800060e:	f003 faf1 	bl	8003bf4 <LCD_Begin>
	LCD_FillScreen(BLACK);
 8000612:	2000      	movs	r0, #0
 8000614:	f003 fd66 	bl	80040e4 <LCD_FillScreen>
	LCD_Printf("Working");
 8000618:	4833      	ldr	r0, [pc, #204]	; (80006e8 <main+0x120>)
 800061a:	f003 fee3 	bl	80043e4 <LCD_Printf>

	gpio_config(PORTC, 9, INPUT_MODE, LOW_SPEED, EN_PU, PHPL);
 800061e:	2300      	movs	r3, #0
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2301      	movs	r3, #1
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	2200      	movs	r2, #0
 800062a:	2109      	movs	r1, #9
 800062c:	482f      	ldr	r0, [pc, #188]	; (80006ec <main+0x124>)
 800062e:	f002 fd87 	bl	8003140 <gpio_config>
	gpio_IT_config(PORTC, 9, FALLING_EDGE);
 8000632:	2201      	movs	r2, #1
 8000634:	2109      	movs	r1, #9
 8000636:	482d      	ldr	r0, [pc, #180]	; (80006ec <main+0x124>)
 8000638:	f002 fe82 	bl	8003340 <gpio_IT_config>
	gpio_IT_EN(9, EXTI9_5_IRQn);
 800063c:	2117      	movs	r1, #23
 800063e:	2009      	movs	r0, #9
 8000640:	f003 f89c 	bl	800377c <gpio_IT_EN>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 16, uint16_t);
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <main+0x128>)
 8000646:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800064a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800064c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000650:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 f9d1 	bl	80049fe <osMessageCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	4a25      	ldr	r2, [pc, #148]	; (80006f4 <main+0x12c>)
 8000660:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <main+0x130>)
 8000664:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000676:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f004 f95e 	bl	800493e <osThreadCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	4a1d      	ldr	r2, [pc, #116]	; (80006fc <main+0x134>)
 8000686:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <main+0x138>)
 800068a:	f107 0420 	add.w	r4, r7, #32
 800068e:	461d      	mov	r5, r3
 8000690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 f94b 	bl	800493e <osThreadCreate>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a16      	ldr	r2, [pc, #88]	; (8000704 <main+0x13c>)
 80006ac:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 256);
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <main+0x140>)
 80006b0:	1d3c      	adds	r4, r7, #4
 80006b2:	461d      	mov	r5, r3
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 f93a 	bl	800493e <osThreadCreate>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a0f      	ldr	r2, [pc, #60]	; (800070c <main+0x144>)
 80006ce:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80006d0:	f004 f91e 	bl	8004910 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006d4:	e7fe      	b.n	80006d4 <main+0x10c>
 80006d6:	bf00      	nop
 80006d8:	40020000 	.word	0x40020000
 80006dc:	40011400 	.word	0x40011400
 80006e0:	08006f40 	.word	0x08006f40
 80006e4:	08006f4c 	.word	0x08006f4c
 80006e8:	08006f60 	.word	0x08006f60
 80006ec:	40020800 	.word	0x40020800
 80006f0:	08006f68 	.word	0x08006f68
 80006f4:	20000474 	.word	0x20000474
 80006f8:	08006f78 	.word	0x08006f78
 80006fc:	20000468 	.word	0x20000468
 8000700:	08006f94 	.word	0x08006f94
 8000704:	2000046c 	.word	0x2000046c
 8000708:	08006fb0 	.word	0x08006fb0
 800070c:	20000470 	.word	0x20000470

08000710 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2230      	movs	r2, #48	; 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f005 fee6 	bl	80064f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <SystemClock_Config+0xd0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a28      	ldr	r2, [pc, #160]	; (80007e0 <SystemClock_Config+0xd0>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <SystemClock_Config+0xd0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <SystemClock_Config+0xd4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <SystemClock_Config+0xd4>)
 800075e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <SystemClock_Config+0xd4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000784:	2310      	movs	r3, #16
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000788:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800078e:	2304      	movs	r3, #4
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000792:	2307      	movs	r3, #7
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fa60 	bl	8001c60 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x9a>
		Error_Handler();
 80007a6:	f000 f9e9 	bl	8000b7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2102      	movs	r1, #2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fcc2 	bl	8002150 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc6>
		Error_Handler();
 80007d2:	f000 f9d3 	bl	8000b7c <Error_Handler>
	}
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_ADC1_Init+0x98>)
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <MX_ADC1_Init+0x9c>)
 80007fe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_ADC1_Init+0x98>)
 8000802:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000806:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_ADC1_Init+0x98>)
 8000816:	2201      	movs	r2, #1
 8000818:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_ADC1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_ADC1_Init+0x98>)
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <MX_ADC1_Init+0xa0>)
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_ADC1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_ADC1_Init+0x98>)
 8000836:	2201      	movs	r2, #1
 8000838:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_ADC1_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_ADC1_Init+0x98>)
 8000844:	2201      	movs	r2, #1
 8000846:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_ADC1_Init+0x98>)
 800084a:	f000 fbe3 	bl	8001014 <HAL_ADC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000854:	f000 f992 	bl	8000b7c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8000858:	230e      	movs	r3, #14
 800085a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_ADC1_Init+0x98>)
 800086a:	f000 fc17 	bl	800109c <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000874:	f000 f982 	bl	8000b7c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000388 	.word	0x20000388
 8000884:	40012000 	.word	0x40012000
 8000888:	0f000001 	.word	0x0f000001

0800088c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2C1_Init+0x50>)
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_I2C1_Init+0x54>)
 8000894:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_I2C1_Init+0x50>)
 8000898:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x58>)
 800089a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_I2C1_Init+0x50>)
 80008aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ae:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_I2C1_Init+0x50>)
 80008ca:	f001 f885 	bl	80019d8 <HAL_I2C_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80008d4:	f000 f952 	bl	8000b7c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200003d0 	.word	0x200003d0
 80008e0:	40005400 	.word	0x40005400
 80008e4:	000186a0 	.word	0x000186a0

080008e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_USART2_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000920:	f002 f8e8 	bl	8002af4 <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800092a:	f000 f927 	bl	8000b7c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000424 	.word	0x20000424
 8000938:	40004400 	.word	0x40004400

0800093c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a2c      	ldr	r2, [pc, #176]	; (8000a0c <MX_GPIO_Init+0xd0>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a25      	ldr	r2, [pc, #148]	; (8000a0c <MX_GPIO_Init+0xd0>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <MX_GPIO_Init+0xd0>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <MX_GPIO_Init+0xd0>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2120      	movs	r1, #32
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <MX_GPIO_Init+0xd4>)
 80009c8:	f000 ffec 	bl	80019a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80009cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_GPIO_Init+0xd8>)
 80009e4:	f000 fe5a 	bl	800169c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80009e8:	2320      	movs	r3, #32
 80009ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_GPIO_Init+0xd4>)
 8000a00:	f000 fe4c 	bl	800169c <HAL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020800 	.word	0x40020800

08000a18 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 4 */

void EXTI9_5_IRQHandler() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
	if (gpio_IT_CHK(9)) {
 8000a1e:	2009      	movs	r0, #9
 8000a20:	f002 feca 	bl	80037b8 <gpio_IT_CHK>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d022      	beq.n	8000a70 <EXTI9_5_IRQHandler+0x58>
		for (int i = 2000000; i > 0; i--)
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <EXTI9_5_IRQHandler+0x60>)
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	e002      	b.n	8000a36 <EXTI9_5_IRQHandler+0x1e>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	dcf9      	bgt.n	8000a30 <EXTI9_5_IRQHandler+0x18>
			;
		menu_select_flag = (menu_select_flag + 1) % 3;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <EXTI9_5_IRQHandler+0x64>)
 8000a3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <EXTI9_5_IRQHandler+0x68>)
 8000a46:	fb83 3102 	smull	r3, r1, r3, r2
 8000a4a:	17d3      	asrs	r3, r2, #31
 8000a4c:	1ac9      	subs	r1, r1, r3
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	1ad1      	subs	r1, r2, r3
 8000a56:	b24a      	sxtb	r2, r1
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <EXTI9_5_IRQHandler+0x64>)
 8000a5a:	701a      	strb	r2, [r3, #0]

		print("interrupt: %d\r\n", menu_select_flag);
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <EXTI9_5_IRQHandler+0x64>)
 8000a5e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a62:	4619      	mov	r1, r3
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <EXTI9_5_IRQHandler+0x6c>)
 8000a66:	f003 f819 	bl	8003a9c <print>
		gpio_IT_CLR(9);
 8000a6a:	2009      	movs	r0, #9
 8000a6c:	f002 febe 	bl	80037ec <gpio_IT_CLR>
	}
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	001e8480 	.word	0x001e8480
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	55555556 	.word	0x55555556
 8000a84:	08006fcc 	.word	0x08006fcc

08000a88 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		if (menu_select_flag == 0) {
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <StartDefaultTask+0x70>)
 8000a92:	f993 3000 	ldrsb.w	r3, [r3]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10a      	bne.n	8000ab0 <StartDefaultTask+0x28>
			vTaskSuspend(myTask03Handle);
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <StartDefaultTask+0x74>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 fba2 	bl	80051e8 <vTaskSuspend>
			vTaskResume(myTask02Handle);
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <StartDefaultTask+0x78>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f004 fc61 	bl	8005370 <vTaskResume>
 8000aae:	e01e      	b.n	8000aee <StartDefaultTask+0x66>
		} else if (menu_select_flag == 1) {
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <StartDefaultTask+0x70>)
 8000ab2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d10a      	bne.n	8000ad0 <StartDefaultTask+0x48>
			vTaskSuspend(myTask02Handle);
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <StartDefaultTask+0x78>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f004 fb92 	bl	80051e8 <vTaskSuspend>
			vTaskResume(myTask03Handle);
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <StartDefaultTask+0x74>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 fc51 	bl	8005370 <vTaskResume>
 8000ace:	e00e      	b.n	8000aee <StartDefaultTask+0x66>
		} else if (menu_select_flag == 2) {
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <StartDefaultTask+0x70>)
 8000ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d109      	bne.n	8000aee <StartDefaultTask+0x66>
			vTaskResume(myTask02Handle);
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <StartDefaultTask+0x78>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f004 fc46 	bl	8005370 <vTaskResume>
			vTaskResume(myTask03Handle);
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <StartDefaultTask+0x74>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fc41 	bl	8005370 <vTaskResume>
		}
		osDelay(10);
 8000aee:	200a      	movs	r0, #10
 8000af0:	f003 ff71 	bl	80049d6 <osDelay>
		if (menu_select_flag == 0) {
 8000af4:	e7cc      	b.n	8000a90 <StartDefaultTask+0x8>
 8000af6:	bf00      	nop
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000470 	.word	0x20000470
 8000b00:	2000046c 	.word	0x2000046c

08000b04 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	uint32_t PreviousWakeTime = osKernelSysTick();
 8000b0c:	f003 ff07 	bl	800491e <osKernelSysTick>
 8000b10:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {

		print("This is Task 2\r\n");
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <StartTask02+0x20>)
 8000b14:	f002 ffc2 	bl	8003a9c <print>
//		if(osDelayUntil(PreviousWakeTime, 5000) == osOK){
//			print("osDelayUnit happended\r\n");
//			PreviousWakeTime = osKernelSysTick();
//		}
		osDelay(1000);
 8000b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1c:	f003 ff5b 	bl	80049d6 <osDelay>
		print("This is Task 2\r\n");
 8000b20:	e7f7      	b.n	8000b12 <StartTask02+0xe>
 8000b22:	bf00      	nop
 8000b24:	08006fdc 	.word	0x08006fdc

08000b28 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	int i = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
	LCD_SetCursor(50, 70);
 8000b34:	2146      	movs	r1, #70	; 0x46
 8000b36:	2032      	movs	r0, #50	; 0x32
 8000b38:	f003 fd3c 	bl	80045b4 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f003 fd51 	bl	80045e4 <LCD_SetTextSize>
	/* Infinite loop */
	for (;;) {
//		LCD_SetCursor(20, 20);
//		LCD_Printf("Counter: %d", i++);

		print("This is Task 3\r\n");
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <StartTask03+0x2c>)
 8000b44:	f002 ffaa 	bl	8003a9c <print>
		osDelay(256);
 8000b48:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b4c:	f003 ff43 	bl	80049d6 <osDelay>
		print("This is Task 3\r\n");
 8000b50:	e7f7      	b.n	8000b42 <StartTask03+0x1a>
 8000b52:	bf00      	nop
 8000b54:	08006ff0 	.word	0x08006ff0

08000b58 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM11) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b6a:	f000 fa33 	bl	8000fd4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40014800 	.word	0x40014800

08000b7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_MspInit+0x54>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <HAL_MspInit+0x54>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_MspInit+0x54>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_MspInit+0x54>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_MspInit+0x54>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_MspInit+0x54>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	210f      	movs	r1, #15
 8000bca:	f06f 0001 	mvn.w	r0, #1
 8000bce:	f000 fd3b 	bl	8001648 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_ADC_MspInit+0x7c>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d127      	bne.n	8000c52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c3a:	2310      	movs	r3, #16
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_ADC_MspInit+0x84>)
 8000c4e:	f000 fd25 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40012000 	.word	0x40012000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020800 	.word	0x40020800

08000c68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_I2C_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12c      	bne.n	8000ce4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <HAL_I2C_MspInit+0x8c>)
 8000cc4:	f000 fcea 	bl	800169c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000cd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_UART_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12b      	bne.n	8000d72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d52:	230c      	movs	r3, #12
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d62:	2307      	movs	r3, #7
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_UART_MspInit+0x8c>)
 8000d6e:	f000 fc95 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <HAL_InitTick+0xd0>)
 8000d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da0:	4a2d      	ldr	r2, [pc, #180]	; (8000e58 <HAL_InitTick+0xd0>)
 8000da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da6:	6453      	str	r3, [r2, #68]	; 0x44
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <HAL_InitTick+0xd0>)
 8000daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db4:	f107 020c 	add.w	r2, r7, #12
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fbe6 	bl	8002590 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dc4:	f001 fbd0 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 8000dc8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dcc:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <HAL_InitTick+0xd4>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	0c9b      	lsrs	r3, r3, #18
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <HAL_InitTick+0xd8>)
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <HAL_InitTick+0xdc>)
 8000ddc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_InitTick+0xd8>)
 8000de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000de6:	4a1e      	ldr	r2, [pc, #120]	; (8000e60 <HAL_InitTick+0xd8>)
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_InitTick+0xd8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_InitTick+0xd8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_InitTick+0xd8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <HAL_InitTick+0xd8>)
 8000e00:	f001 fbf8 	bl	80025f4 <HAL_TIM_Base_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d11b      	bne.n	8000e4a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000e12:	4813      	ldr	r0, [pc, #76]	; (8000e60 <HAL_InitTick+0xd8>)
 8000e14:	f001 fc48 	bl	80026a8 <HAL_TIM_Base_Start_IT>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d111      	bne.n	8000e4a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e26:	201a      	movs	r0, #26
 8000e28:	f000 fc2a 	bl	8001680 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b0f      	cmp	r3, #15
 8000e30:	d808      	bhi.n	8000e44 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000e32:	2200      	movs	r2, #0
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	201a      	movs	r0, #26
 8000e38:	f000 fc06 	bl	8001648 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_InitTick+0xe0>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e002      	b.n	8000e4a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3730      	adds	r7, #48	; 0x30
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	431bde83 	.word	0x431bde83
 8000e60:	20000478 	.word	0x20000478
 8000e64:	40014800 	.word	0x40014800
 8000e68:	20000008 	.word	0x20000008

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <NMI_Handler+0x4>

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <MemManage_Handler+0x4>

08000e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e9e:	f001 fc65 	bl	800276c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000478 	.word	0x20000478

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f005 face 	bl	800647c <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20018000 	.word	0x20018000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	200004c0 	.word	0x200004c0
 8000f14:	20004440 	.word	0x20004440

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f005 fa8d 	bl	8006488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fb2b 	bl	80005c8 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8000f80:	08007450 	.word	0x08007450
  ldr r2, =_sbss
 8000f84:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8000f88:	2000443c 	.word	0x2000443c

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fb3a 	bl	8001632 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f7ff fee2 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fde0 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	200004c4 	.word	0x200004c4

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200004c4 	.word	0x200004c4

08001014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e033      	b.n	8001092 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	2b00      	cmp	r3, #0
 8001030:	d109      	bne.n	8001046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fdd4 	bl	8000be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	d118      	bne.n	8001084 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800105a:	f023 0302 	bic.w	r3, r3, #2
 800105e:	f043 0202 	orr.w	r2, r3, #2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f93a 	bl	80012e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f023 0303 	bic.w	r3, r3, #3
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
 8001082:	e001      	b.n	8001088 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_ADC_ConfigChannel+0x1c>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e105      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x228>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d925      	bls.n	8001114 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68d9      	ldr	r1, [r3, #12]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	3b1e      	subs	r3, #30
 80010de:	2207      	movs	r2, #7
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43da      	mvns	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	400a      	ands	r2, r1
 80010ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68d9      	ldr	r1, [r3, #12]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	4603      	mov	r3, r0
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4403      	add	r3, r0
 8001106:	3b1e      	subs	r3, #30
 8001108:	409a      	lsls	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	e022      	b.n	800115a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6919      	ldr	r1, [r3, #16]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	b29b      	uxth	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	2207      	movs	r2, #7
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	400a      	ands	r2, r1
 8001136:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6919      	ldr	r1, [r3, #16]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	4603      	mov	r3, r0
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4403      	add	r3, r0
 8001150:	409a      	lsls	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b06      	cmp	r3, #6
 8001160:	d824      	bhi.n	80011ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	3b05      	subs	r3, #5
 8001174:	221f      	movs	r2, #31
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	400a      	ands	r2, r1
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	3b05      	subs	r3, #5
 800119e:	fa00 f203 	lsl.w	r2, r0, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
 80011aa:	e04c      	b.n	8001246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b0c      	cmp	r3, #12
 80011b2:	d824      	bhi.n	80011fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b23      	subs	r3, #35	; 0x23
 80011c6:	221f      	movs	r2, #31
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43da      	mvns	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	400a      	ands	r2, r1
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	3b23      	subs	r3, #35	; 0x23
 80011f0:	fa00 f203 	lsl.w	r2, r0, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	631a      	str	r2, [r3, #48]	; 0x30
 80011fc:	e023      	b.n	8001246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b41      	subs	r3, #65	; 0x41
 8001210:	221f      	movs	r2, #31
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	400a      	ands	r2, r1
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b41      	subs	r3, #65	; 0x41
 800123a:	fa00 f203 	lsl.w	r2, r0, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_ADC_ConfigChannel+0x234>)
 8001248:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_ADC_ConfigChannel+0x238>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d109      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1cc>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b12      	cmp	r3, #18
 800125a:	d105      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_ADC_ConfigChannel+0x238>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d123      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x21e>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b10      	cmp	r3, #16
 8001278:	d003      	beq.n	8001282 <HAL_ADC_ConfigChannel+0x1e6>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b11      	cmp	r3, #17
 8001280:	d11b      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b10      	cmp	r3, #16
 8001294:	d111      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_ADC_ConfigChannel+0x23c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <HAL_ADC_ConfigChannel+0x240>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	0c9a      	lsrs	r2, r3, #18
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012ac:	e002      	b.n	80012b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f9      	bne.n	80012ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40012300 	.word	0x40012300
 80012d4:	40012000 	.word	0x40012000
 80012d8:	20000004 	.word	0x20000004
 80012dc:	431bde83 	.word	0x431bde83

080012e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e8:	4b79      	ldr	r3, [pc, #484]	; (80014d0 <ADC_Init+0x1f0>)
 80012ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	431a      	orrs	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6859      	ldr	r1, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	021a      	lsls	r2, r3, #8
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6859      	ldr	r1, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800135a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6899      	ldr	r1, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	4a58      	ldr	r2, [pc, #352]	; (80014d4 <ADC_Init+0x1f4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d022      	beq.n	80013be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001386:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6899      	ldr	r1, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6899      	ldr	r1, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	e00f      	b.n	80013de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0202 	bic.w	r2, r2, #2
 80013ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6899      	ldr	r1, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e1b      	ldrb	r3, [r3, #24]
 80013f8:	005a      	lsls	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01b      	beq.n	8001444 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800141a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800142a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6859      	ldr	r1, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	3b01      	subs	r3, #1
 8001438:	035a      	lsls	r2, r3, #13
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	e007      	b.n	8001454 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001452:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	3b01      	subs	r3, #1
 8001470:	051a      	lsls	r2, r3, #20
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6899      	ldr	r1, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001496:	025a      	lsls	r2, r3, #9
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6899      	ldr	r1, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	029a      	lsls	r2, r3, #10
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	609a      	str	r2, [r3, #8]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40012300 	.word	0x40012300
 80014d4:	0f000001 	.word	0x0f000001

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff4c 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165a:	f7ff ff61 	bl	8001520 <__NVIC_GetPriorityGrouping>
 800165e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	6978      	ldr	r0, [r7, #20]
 8001666:	f7ff ffb1 	bl	80015cc <NVIC_EncodePriority>
 800166a:	4602      	mov	r2, r0
 800166c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff80 	bl	8001578 <__NVIC_SetPriority>
}
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff54 	bl	800153c <__NVIC_EnableIRQ>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e159      	b.n	800196c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8148 	bne.w	8001966 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d005      	beq.n	80016ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d130      	bne.n	8001750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 0201 	and.w	r2, r3, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b03      	cmp	r3, #3
 800175a:	d017      	beq.n	800178c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d123      	bne.n	80017e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0203 	and.w	r2, r3, #3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80a2 	beq.w	8001966 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b57      	ldr	r3, [pc, #348]	; (8001984 <HAL_GPIO_Init+0x2e8>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a56      	ldr	r2, [pc, #344]	; (8001984 <HAL_GPIO_Init+0x2e8>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b54      	ldr	r3, [pc, #336]	; (8001984 <HAL_GPIO_Init+0x2e8>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183e:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_GPIO_Init+0x2ec>)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a49      	ldr	r2, [pc, #292]	; (800198c <HAL_GPIO_Init+0x2f0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d019      	beq.n	800189e <HAL_GPIO_Init+0x202>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_GPIO_Init+0x2f4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x1fe>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a47      	ldr	r2, [pc, #284]	; (8001994 <HAL_GPIO_Init+0x2f8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x1fa>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a46      	ldr	r2, [pc, #280]	; (8001998 <HAL_GPIO_Init+0x2fc>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x1f6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a45      	ldr	r2, [pc, #276]	; (800199c <HAL_GPIO_Init+0x300>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x1f2>
 800188a:	2304      	movs	r3, #4
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 800188e:	2307      	movs	r3, #7
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 800189e:	2300      	movs	r3, #0
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b0:	4935      	ldr	r1, [pc, #212]	; (8001988 <HAL_GPIO_Init+0x2ec>)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018be:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <HAL_GPIO_Init+0x304>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e2:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <HAL_GPIO_Init+0x304>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_GPIO_Init+0x304>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800190c:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <HAL_GPIO_Init+0x304>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001936:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_GPIO_Init+0x304>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b0f      	cmp	r3, #15
 8001970:	f67f aea2 	bls.w	80016b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40013c00 	.word	0x40013c00

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c0:	e003      	b.n	80019ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e12b      	b.n	8001c42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff f932 	bl	8000c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2224      	movs	r2, #36	; 0x24
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a3c:	f000 fd80 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8001a40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a81      	ldr	r2, [pc, #516]	; (8001c4c <HAL_I2C_Init+0x274>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d807      	bhi.n	8001a5c <HAL_I2C_Init+0x84>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a80      	ldr	r2, [pc, #512]	; (8001c50 <HAL_I2C_Init+0x278>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	bf94      	ite	ls
 8001a54:	2301      	movls	r3, #1
 8001a56:	2300      	movhi	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	e006      	b.n	8001a6a <HAL_I2C_Init+0x92>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a7d      	ldr	r2, [pc, #500]	; (8001c54 <HAL_I2C_Init+0x27c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	bf94      	ite	ls
 8001a64:	2301      	movls	r3, #1
 8001a66:	2300      	movhi	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0e7      	b.n	8001c42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4a78      	ldr	r2, [pc, #480]	; (8001c58 <HAL_I2C_Init+0x280>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0c9b      	lsrs	r3, r3, #18
 8001a7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a6a      	ldr	r2, [pc, #424]	; (8001c4c <HAL_I2C_Init+0x274>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d802      	bhi.n	8001aac <HAL_I2C_Init+0xd4>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	e009      	b.n	8001ac0 <HAL_I2C_Init+0xe8>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	4a69      	ldr	r2, [pc, #420]	; (8001c5c <HAL_I2C_Init+0x284>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	3301      	adds	r3, #1
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ad2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	495c      	ldr	r1, [pc, #368]	; (8001c4c <HAL_I2C_Init+0x274>)
 8001adc:	428b      	cmp	r3, r1
 8001ade:	d819      	bhi.n	8001b14 <HAL_I2C_Init+0x13c>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1e59      	subs	r1, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aee:	1c59      	adds	r1, r3, #1
 8001af0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001af4:	400b      	ands	r3, r1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00a      	beq.n	8001b10 <HAL_I2C_Init+0x138>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1e59      	subs	r1, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0e:	e051      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b10:	2304      	movs	r3, #4
 8001b12:	e04f      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d111      	bne.n	8001b40 <HAL_I2C_Init+0x168>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	440b      	add	r3, r1
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e012      	b.n	8001b66 <HAL_I2C_Init+0x18e>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	0099      	lsls	r1, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Init+0x196>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e022      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10e      	bne.n	8001b94 <HAL_I2C_Init+0x1bc>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1e58      	subs	r0, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	440b      	add	r3, r1
 8001b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b92:	e00f      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	0099      	lsls	r1, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	6809      	ldr	r1, [r1, #0]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69da      	ldr	r2, [r3, #28]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001be2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6911      	ldr	r1, [r2, #16]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68d2      	ldr	r2, [r2, #12]
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	000186a0 	.word	0x000186a0
 8001c50:	001e847f 	.word	0x001e847f
 8001c54:	003d08ff 	.word	0x003d08ff
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	10624dd3 	.word	0x10624dd3

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e267      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d075      	beq.n	8001d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7e:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d00c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b85      	ldr	r3, [pc, #532]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d112      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c96:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d05b      	beq.n	8001d68 <HAL_RCC_OscConfig+0x108>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d157      	bne.n	8001d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e242      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x74>
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e01d      	b.n	8001d10 <HAL_RCC_OscConfig+0xb0>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x98>
 8001cde:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6f      	ldr	r2, [pc, #444]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6c      	ldr	r2, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	4b69      	ldr	r3, [pc, #420]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a68      	ldr	r2, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a65      	ldr	r2, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff f970 	bl	8000ffc <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f96c 	bl	8000ffc <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e207      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0xc0>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff f95c 	bl	8000ffc <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff f958 	bl	8000ffc <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1f3      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0xe8>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d063      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d76:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8e:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_RCC_OscConfig+0x152>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e1c7      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	e03a      	b.n	8001e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_OscConfig+0x244>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f911 	bl	8000ffc <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff f90d 	bl	8000ffc <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1a8      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4925      	ldr	r1, [pc, #148]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	e015      	b.n	8001e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_RCC_OscConfig+0x244>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f8f0 	bl	8000ffc <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff f8ec 	bl	8000ffc <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e187      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d036      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d016      	beq.n	8001e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_RCC_OscConfig+0x248>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f8d0 	bl	8000ffc <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff f8cc 	bl	8000ffc <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e167      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x200>
 8001e7e:	e01b      	b.n	8001eb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_OscConfig+0x248>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7ff f8b9 	bl	8000ffc <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	e00e      	b.n	8001eac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f8b5 	bl	8000ffc <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d907      	bls.n	8001eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e150      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470000 	.word	0x42470000
 8001ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1ea      	bne.n	8001e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8097 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b7d      	ldr	r3, [pc, #500]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a7c      	ldr	r2, [pc, #496]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b7a      	ldr	r3, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b77      	ldr	r3, [pc, #476]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b74      	ldr	r3, [pc, #464]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a73      	ldr	r2, [pc, #460]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f875 	bl	8000ffc <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7ff f871 	bl	8000ffc <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e10c      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x2ea>
 8001f3c:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	e01c      	b.n	8001f84 <HAL_RCC_OscConfig+0x324>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x30c>
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a5e      	ldr	r2, [pc, #376]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a5b      	ldr	r2, [pc, #364]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0x324>
 8001f6c:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	4a57      	ldr	r2, [pc, #348]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	6713      	str	r3, [r2, #112]	; 0x70
 8001f78:	4b55      	ldr	r3, [pc, #340]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f023 0304 	bic.w	r3, r3, #4
 8001f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d015      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f836 	bl	8000ffc <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f94:	f7ff f832 	bl	8000ffc <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0cb      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001faa:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0ee      	beq.n	8001f94 <HAL_RCC_OscConfig+0x334>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7ff f820 	bl	8000ffc <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f81c 	bl	8000ffc <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e0b5      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ee      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe8:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80a1 	beq.w	8002140 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ffe:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d05c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d141      	bne.n	8002096 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe fff0 	bl	8000ffc <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe ffec 	bl	8000ffc <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e087      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	019b      	lsls	r3, r3, #6
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	491b      	ldr	r1, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7fe ffc5 	bl	8000ffc <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe ffc1 	bl	8000ffc <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e05c      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x416>
 8002094:	e054      	b.n	8002140 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe ffae 	bl	8000ffc <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe ffaa 	bl	8000ffc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e045      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x444>
 80020c2:	e03d      	b.n	8002140 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e038      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40007000 	.word	0x40007000
 80020d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x4ec>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d028      	beq.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d121      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d11a      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800210c:	4013      	ands	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002114:	4293      	cmp	r3, r2
 8002116:	d111      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	3b01      	subs	r3, #1
 8002126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d107      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800

08002150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0cc      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002164:	4b68      	ldr	r3, [pc, #416]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d90c      	bls.n	800218c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b65      	ldr	r3, [pc, #404]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0b8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	494d      	ldr	r1, [pc, #308]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d044      	beq.n	8002270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d119      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e07f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d003      	beq.n	800220e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220a:	2b03      	cmp	r3, #3
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e067      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222e:	4b37      	ldr	r3, [pc, #220]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4934      	ldr	r1, [pc, #208]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002240:	f7fe fedc 	bl	8000ffc <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7fe fed8 	bl	8000ffc <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e04f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d1eb      	bne.n	8002248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d20c      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e032      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4916      	ldr	r1, [pc, #88]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022d6:	f000 f821 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	490a      	ldr	r1, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	5ccb      	ldrb	r3, [r1, r3]
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fd46 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00
 800230c:	40023800 	.word	0x40023800
 8002310:	0800700c 	.word	0x0800700c
 8002314:	20000004 	.word	0x20000004
 8002318:	20000008 	.word	0x20000008

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002320:	b094      	sub	sp, #80	; 0x50
 8002322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	647b      	str	r3, [r7, #68]	; 0x44
 8002328:	2300      	movs	r3, #0
 800232a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800232c:	2300      	movs	r3, #0
 800232e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002334:	4b79      	ldr	r3, [pc, #484]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d00d      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x40>
 8002340:	2b08      	cmp	r3, #8
 8002342:	f200 80e1 	bhi.w	8002508 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x34>
 800234a:	2b04      	cmp	r3, #4
 800234c:	d003      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x3a>
 800234e:	e0db      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b73      	ldr	r3, [pc, #460]	; (8002520 <HAL_RCC_GetSysClockFreq+0x204>)
 8002352:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002354:	e0db      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_RCC_GetSysClockFreq+0x208>)
 8002358:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800235a:	e0d8      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800235c:	4b6f      	ldr	r3, [pc, #444]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002366:	4b6d      	ldr	r3, [pc, #436]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d063      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002372:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	2200      	movs	r2, #0
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
 800237c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
 8002386:	2300      	movs	r3, #0
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
 800238a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800238e:	4622      	mov	r2, r4
 8002390:	462b      	mov	r3, r5
 8002392:	f04f 0000 	mov.w	r0, #0
 8002396:	f04f 0100 	mov.w	r1, #0
 800239a:	0159      	lsls	r1, r3, #5
 800239c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a0:	0150      	lsls	r0, r2, #5
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4621      	mov	r1, r4
 80023a8:	1a51      	subs	r1, r2, r1
 80023aa:	6139      	str	r1, [r7, #16]
 80023ac:	4629      	mov	r1, r5
 80023ae:	eb63 0301 	sbc.w	r3, r3, r1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023c0:	4659      	mov	r1, fp
 80023c2:	018b      	lsls	r3, r1, #6
 80023c4:	4651      	mov	r1, sl
 80023c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ca:	4651      	mov	r1, sl
 80023cc:	018a      	lsls	r2, r1, #6
 80023ce:	4651      	mov	r1, sl
 80023d0:	ebb2 0801 	subs.w	r8, r2, r1
 80023d4:	4659      	mov	r1, fp
 80023d6:	eb63 0901 	sbc.w	r9, r3, r1
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ee:	4690      	mov	r8, r2
 80023f0:	4699      	mov	r9, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	eb18 0303 	adds.w	r3, r8, r3
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	462b      	mov	r3, r5
 80023fc:	eb49 0303 	adc.w	r3, r9, r3
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800240e:	4629      	mov	r1, r5
 8002410:	024b      	lsls	r3, r1, #9
 8002412:	4621      	mov	r1, r4
 8002414:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002418:	4621      	mov	r1, r4
 800241a:	024a      	lsls	r2, r1, #9
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002422:	2200      	movs	r2, #0
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
 8002426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800242c:	f7fd ff30 	bl	8000290 <__aeabi_uldivmod>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4613      	mov	r3, r2
 8002436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002438:	e058      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	2200      	movs	r2, #0
 8002442:	4618      	mov	r0, r3
 8002444:	4611      	mov	r1, r2
 8002446:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
 8002450:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002454:	4642      	mov	r2, r8
 8002456:	464b      	mov	r3, r9
 8002458:	f04f 0000 	mov.w	r0, #0
 800245c:	f04f 0100 	mov.w	r1, #0
 8002460:	0159      	lsls	r1, r3, #5
 8002462:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002466:	0150      	lsls	r0, r2, #5
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4641      	mov	r1, r8
 800246e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002472:	4649      	mov	r1, r9
 8002474:	eb63 0b01 	sbc.w	fp, r3, r1
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002484:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002488:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800248c:	ebb2 040a 	subs.w	r4, r2, sl
 8002490:	eb63 050b 	sbc.w	r5, r3, fp
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	00eb      	lsls	r3, r5, #3
 800249e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a2:	00e2      	lsls	r2, r4, #3
 80024a4:	4614      	mov	r4, r2
 80024a6:	461d      	mov	r5, r3
 80024a8:	4643      	mov	r3, r8
 80024aa:	18e3      	adds	r3, r4, r3
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	464b      	mov	r3, r9
 80024b0:	eb45 0303 	adc.w	r3, r5, r3
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024c2:	4629      	mov	r1, r5
 80024c4:	028b      	lsls	r3, r1, #10
 80024c6:	4621      	mov	r1, r4
 80024c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024cc:	4621      	mov	r1, r4
 80024ce:	028a      	lsls	r2, r1, #10
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d6:	2200      	movs	r2, #0
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	61fa      	str	r2, [r7, #28]
 80024dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e0:	f7fd fed6 	bl	8000290 <__aeabi_uldivmod>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4613      	mov	r3, r2
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	3301      	adds	r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002506:	e002      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetSysClockFreq+0x204>)
 800250a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800250c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002510:	4618      	mov	r0, r3
 8002512:	3750      	adds	r7, #80	; 0x50
 8002514:	46bd      	mov	sp, r7
 8002516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	00f42400 	.word	0x00f42400
 8002524:	007a1200 	.word	0x007a1200

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCC_GetHCLKFreq+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002544:	f7ff fff0 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0a9b      	lsrs	r3, r3, #10
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4903      	ldr	r1, [pc, #12]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	0800701c 	.word	0x0800701c

08002568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800256c:	f7ff ffdc 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0b5b      	lsrs	r3, r3, #13
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCC_GetPCLK2Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	0800701c 	.word	0x0800701c

08002590 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	220f      	movs	r2, #15
 800259e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_RCC_GetClockConfig+0x5c>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0203 	and.w	r2, r3, #3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <HAL_RCC_GetClockConfig+0x5c>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_RCC_GetClockConfig+0x5c>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_RCC_GetClockConfig+0x5c>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_RCC_GetClockConfig+0x60>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0207 	and.w	r2, r3, #7
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40023c00 	.word	0x40023c00

080025f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e041      	b.n	800268a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f839 	bl	8002692 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f000 f9ca 	bl	80029cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d001      	beq.n	80026c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e044      	b.n	800274a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <HAL_TIM_Base_Start_IT+0xb0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d018      	beq.n	8002714 <HAL_TIM_Base_Start_IT+0x6c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ea:	d013      	beq.n	8002714 <HAL_TIM_Base_Start_IT+0x6c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1a      	ldr	r2, [pc, #104]	; (800275c <HAL_TIM_Base_Start_IT+0xb4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00e      	beq.n	8002714 <HAL_TIM_Base_Start_IT+0x6c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_TIM_Base_Start_IT+0xb8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d009      	beq.n	8002714 <HAL_TIM_Base_Start_IT+0x6c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a17      	ldr	r2, [pc, #92]	; (8002764 <HAL_TIM_Base_Start_IT+0xbc>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d004      	beq.n	8002714 <HAL_TIM_Base_Start_IT+0x6c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a16      	ldr	r2, [pc, #88]	; (8002768 <HAL_TIM_Base_Start_IT+0xc0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d111      	bne.n	8002738 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b06      	cmp	r3, #6
 8002724:	d010      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	e007      	b.n	8002748 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40010000 	.word	0x40010000
 800275c:	40000400 	.word	0x40000400
 8002760:	40000800 	.word	0x40000800
 8002764:	40000c00 	.word	0x40000c00
 8002768:	40014000 	.word	0x40014000

0800276c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d122      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d11b      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0202 	mvn.w	r2, #2
 8002798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8ee 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8e0 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f8f1 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d122      	bne.n	800281c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d11b      	bne.n	800281c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0204 	mvn.w	r2, #4
 80027ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8c4 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 8002808:	e005      	b.n	8002816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8b6 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8c7 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b08      	cmp	r3, #8
 8002828:	d122      	bne.n	8002870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b08      	cmp	r3, #8
 8002836:	d11b      	bne.n	8002870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0208 	mvn.w	r2, #8
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2204      	movs	r2, #4
 8002846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f89a 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 800285c:	e005      	b.n	800286a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f88c 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f89d 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b10      	cmp	r3, #16
 800287c:	d122      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b10      	cmp	r3, #16
 800288a:	d11b      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0210 	mvn.w	r2, #16
 8002894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2208      	movs	r2, #8
 800289a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f870 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f862 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f873 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10e      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0201 	mvn.w	r2, #1
 80028e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe f934 	bl	8000b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b80      	cmp	r3, #128	; 0x80
 80028fc:	d10e      	bne.n	800291c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d107      	bne.n	800291c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f8e2 	bl	8002ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d10e      	bne.n	8002948 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d107      	bne.n	8002948 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f838 	bl	80029b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b20      	cmp	r3, #32
 8002954:	d10e      	bne.n	8002974 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b20      	cmp	r3, #32
 8002962:	d107      	bne.n	8002974 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0220 	mvn.w	r2, #32
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8ac 	bl	8002acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a34      	ldr	r2, [pc, #208]	; (8002ab0 <TIM_Base_SetConfig+0xe4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00f      	beq.n	8002a04 <TIM_Base_SetConfig+0x38>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ea:	d00b      	beq.n	8002a04 <TIM_Base_SetConfig+0x38>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a31      	ldr	r2, [pc, #196]	; (8002ab4 <TIM_Base_SetConfig+0xe8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <TIM_Base_SetConfig+0x38>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a30      	ldr	r2, [pc, #192]	; (8002ab8 <TIM_Base_SetConfig+0xec>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0x38>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a2f      	ldr	r2, [pc, #188]	; (8002abc <TIM_Base_SetConfig+0xf0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a25      	ldr	r2, [pc, #148]	; (8002ab0 <TIM_Base_SetConfig+0xe4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01b      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d017      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <TIM_Base_SetConfig+0xe8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <TIM_Base_SetConfig+0xec>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00f      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a20      	ldr	r2, [pc, #128]	; (8002abc <TIM_Base_SetConfig+0xf0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00b      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <TIM_Base_SetConfig+0xf4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <TIM_Base_SetConfig+0xf8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <TIM_Base_SetConfig+0xfc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <TIM_Base_SetConfig+0xe4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	615a      	str	r2, [r3, #20]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40000800 	.word	0x40000800
 8002abc:	40000c00 	.word	0x40000c00
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40014400 	.word	0x40014400
 8002ac8:	40014800 	.word	0x40014800

08002acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e03f      	b.n	8002b86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe f8ec 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f829 	bl	8002b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b94:	b0c0      	sub	sp, #256	; 0x100
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	ea40 0301 	orr.w	r3, r0, r1
 8002bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002be8:	f021 010c 	bic.w	r1, r1, #12
 8002bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0a:	6999      	ldr	r1, [r3, #24]
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	ea40 0301 	orr.w	r3, r0, r1
 8002c16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b8f      	ldr	r3, [pc, #572]	; (8002e5c <UART_SetConfig+0x2cc>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d005      	beq.n	8002c30 <UART_SetConfig+0xa0>
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b8d      	ldr	r3, [pc, #564]	; (8002e60 <UART_SetConfig+0x2d0>)
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d104      	bne.n	8002c3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7ff fc9a 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 8002c34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c38:	e003      	b.n	8002c42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c3a:	f7ff fc81 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8002c3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4c:	f040 810c 	bne.w	8002e68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c62:	4622      	mov	r2, r4
 8002c64:	462b      	mov	r3, r5
 8002c66:	1891      	adds	r1, r2, r2
 8002c68:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c6a:	415b      	adcs	r3, r3
 8002c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c72:	4621      	mov	r1, r4
 8002c74:	eb12 0801 	adds.w	r8, r2, r1
 8002c78:	4629      	mov	r1, r5
 8002c7a:	eb43 0901 	adc.w	r9, r3, r1
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c92:	4690      	mov	r8, r2
 8002c94:	4699      	mov	r9, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	eb18 0303 	adds.w	r3, r8, r3
 8002c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ca0:	462b      	mov	r3, r5
 8002ca2:	eb49 0303 	adc.w	r3, r9, r3
 8002ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	18db      	adds	r3, r3, r3
 8002cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	eb42 0303 	adc.w	r3, r2, r3
 8002cca:	657b      	str	r3, [r7, #84]	; 0x54
 8002ccc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cd4:	f7fd fadc 	bl	8000290 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <UART_SetConfig+0x2d4>)
 8002cde:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	011c      	lsls	r4, r3, #4
 8002ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	1891      	adds	r1, r2, r2
 8002cfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d00:	415b      	adcs	r3, r3
 8002d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d08:	4641      	mov	r1, r8
 8002d0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002d0e:	4649      	mov	r1, r9
 8002d10:	eb43 0b01 	adc.w	fp, r3, r1
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d28:	4692      	mov	sl, r2
 8002d2a:	469b      	mov	fp, r3
 8002d2c:	4643      	mov	r3, r8
 8002d2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002d32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d36:	464b      	mov	r3, r9
 8002d38:	eb4b 0303 	adc.w	r3, fp, r3
 8002d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d54:	460b      	mov	r3, r1
 8002d56:	18db      	adds	r3, r3, r3
 8002d58:	643b      	str	r3, [r7, #64]	; 0x40
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	647b      	str	r3, [r7, #68]	; 0x44
 8002d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d6a:	f7fd fa91 	bl	8000290 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <UART_SetConfig+0x2d4>)
 8002d76:	fba3 2301 	umull	r2, r3, r3, r1
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2264      	movs	r2, #100	; 0x64
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	1acb      	subs	r3, r1, r3
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <UART_SetConfig+0x2d4>)
 8002d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d98:	441c      	add	r4, r3
 8002d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002da4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002da8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002dac:	4642      	mov	r2, r8
 8002dae:	464b      	mov	r3, r9
 8002db0:	1891      	adds	r1, r2, r2
 8002db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002db4:	415b      	adcs	r3, r3
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	1851      	adds	r1, r2, r1
 8002dc0:	6339      	str	r1, [r7, #48]	; 0x30
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	414b      	adcs	r3, r1
 8002dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	00cb      	lsls	r3, r1, #3
 8002dd8:	4651      	mov	r1, sl
 8002dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dde:	4651      	mov	r1, sl
 8002de0:	00ca      	lsls	r2, r1, #3
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	4642      	mov	r2, r8
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002df0:	464b      	mov	r3, r9
 8002df2:	460a      	mov	r2, r1
 8002df4:	eb42 0303 	adc.w	r3, r2, r3
 8002df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e10:	460b      	mov	r3, r1
 8002e12:	18db      	adds	r3, r3, r3
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e16:	4613      	mov	r3, r2
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e26:	f7fd fa33 	bl	8000290 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <UART_SetConfig+0x2d4>)
 8002e30:	fba3 1302 	umull	r1, r3, r3, r2
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	2164      	movs	r1, #100	; 0x64
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	3332      	adds	r3, #50	; 0x32
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <UART_SetConfig+0x2d4>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	f003 0207 	and.w	r2, r3, #7
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4422      	add	r2, r4
 8002e56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e58:	e105      	b.n	8003066 <UART_SetConfig+0x4d6>
 8002e5a:	bf00      	nop
 8002e5c:	40011000 	.word	0x40011000
 8002e60:	40011400 	.word	0x40011400
 8002e64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e7a:	4642      	mov	r2, r8
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	1891      	adds	r1, r2, r2
 8002e80:	6239      	str	r1, [r7, #32]
 8002e82:	415b      	adcs	r3, r3
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	1854      	adds	r4, r2, r1
 8002e8e:	4649      	mov	r1, r9
 8002e90:	eb43 0501 	adc.w	r5, r3, r1
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	00eb      	lsls	r3, r5, #3
 8002e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea2:	00e2      	lsls	r2, r4, #3
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	4643      	mov	r3, r8
 8002eaa:	18e3      	adds	r3, r4, r3
 8002eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	eb45 0303 	adc.w	r3, r5, r3
 8002eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ec6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	008b      	lsls	r3, r1, #2
 8002eda:	4621      	mov	r1, r4
 8002edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	008a      	lsls	r2, r1, #2
 8002ee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ee8:	f7fd f9d2 	bl	8000290 <__aeabi_uldivmod>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4b60      	ldr	r3, [pc, #384]	; (8003074 <UART_SetConfig+0x4e4>)
 8002ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	011c      	lsls	r4, r3, #4
 8002efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	464b      	mov	r3, r9
 8002f10:	1891      	adds	r1, r2, r2
 8002f12:	61b9      	str	r1, [r7, #24]
 8002f14:	415b      	adcs	r3, r3
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	1851      	adds	r1, r2, r1
 8002f20:	6139      	str	r1, [r7, #16]
 8002f22:	4649      	mov	r1, r9
 8002f24:	414b      	adcs	r3, r1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f34:	4659      	mov	r1, fp
 8002f36:	00cb      	lsls	r3, r1, #3
 8002f38:	4651      	mov	r1, sl
 8002f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3e:	4651      	mov	r1, sl
 8002f40:	00ca      	lsls	r2, r1, #3
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	4642      	mov	r2, r8
 8002f4a:	189b      	adds	r3, r3, r2
 8002f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f50:	464b      	mov	r3, r9
 8002f52:	460a      	mov	r2, r1
 8002f54:	eb42 0303 	adc.w	r3, r2, r3
 8002f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f74:	4649      	mov	r1, r9
 8002f76:	008b      	lsls	r3, r1, #2
 8002f78:	4641      	mov	r1, r8
 8002f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f7e:	4641      	mov	r1, r8
 8002f80:	008a      	lsls	r2, r1, #2
 8002f82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f86:	f7fd f983 	bl	8000290 <__aeabi_uldivmod>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <UART_SetConfig+0x4e4>)
 8002f90:	fba3 1302 	umull	r1, r3, r3, r2
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	2164      	movs	r1, #100	; 0x64
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	3332      	adds	r3, #50	; 0x32
 8002fa2:	4a34      	ldr	r2, [pc, #208]	; (8003074 <UART_SetConfig+0x4e4>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fae:	441c      	add	r4, r3
 8002fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	673b      	str	r3, [r7, #112]	; 0x70
 8002fb8:	677a      	str	r2, [r7, #116]	; 0x74
 8002fba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fbe:	4642      	mov	r2, r8
 8002fc0:	464b      	mov	r3, r9
 8002fc2:	1891      	adds	r1, r2, r2
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	415b      	adcs	r3, r3
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fce:	4641      	mov	r1, r8
 8002fd0:	1851      	adds	r1, r2, r1
 8002fd2:	6039      	str	r1, [r7, #0]
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	414b      	adcs	r3, r1
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fe6:	4659      	mov	r1, fp
 8002fe8:	00cb      	lsls	r3, r1, #3
 8002fea:	4651      	mov	r1, sl
 8002fec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	00ca      	lsls	r2, r1, #3
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4642      	mov	r2, r8
 8002ffc:	189b      	adds	r3, r3, r2
 8002ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003000:	464b      	mov	r3, r9
 8003002:	460a      	mov	r2, r1
 8003004:	eb42 0303 	adc.w	r3, r2, r3
 8003008:	66fb      	str	r3, [r7, #108]	; 0x6c
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	663b      	str	r3, [r7, #96]	; 0x60
 8003014:	667a      	str	r2, [r7, #100]	; 0x64
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003022:	4649      	mov	r1, r9
 8003024:	008b      	lsls	r3, r1, #2
 8003026:	4641      	mov	r1, r8
 8003028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800302c:	4641      	mov	r1, r8
 800302e:	008a      	lsls	r2, r1, #2
 8003030:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003034:	f7fd f92c 	bl	8000290 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <UART_SetConfig+0x4e4>)
 800303e:	fba3 1302 	umull	r1, r3, r3, r2
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2164      	movs	r1, #100	; 0x64
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	3332      	adds	r3, #50	; 0x32
 8003050:	4a08      	ldr	r2, [pc, #32]	; (8003074 <UART_SetConfig+0x4e4>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4422      	add	r2, r4
 8003064:	609a      	str	r2, [r3, #8]
}
 8003066:	bf00      	nop
 8003068:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800306c:	46bd      	mov	sp, r7
 800306e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003072:	bf00      	nop
 8003074:	51eb851f 	.word	0x51eb851f

08003078 <__NVIC_EnableIRQ>:
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db0b      	blt.n	80030a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4907      	ldr	r1, [pc, #28]	; (80030b0 <__NVIC_EnableIRQ+0x38>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <gpio_clk_en>:
		uint16_t out_max) {
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
}

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a1b      	ldr	r2, [pc, #108]	; (800312c <gpio_clk_en+0x78>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d106      	bne.n	80030d2 <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <gpio_clk_en+0x7c>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	4a19      	ldr	r2, [pc, #100]	; (8003130 <gpio_clk_en+0x7c>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 80030d0:	e026      	b.n	8003120 <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a17      	ldr	r2, [pc, #92]	; (8003134 <gpio_clk_en+0x80>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d106      	bne.n	80030e8 <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <gpio_clk_en+0x7c>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4a14      	ldr	r2, [pc, #80]	; (8003130 <gpio_clk_en+0x7c>)
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80030e6:	e01b      	b.n	8003120 <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a13      	ldr	r2, [pc, #76]	; (8003138 <gpio_clk_en+0x84>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d106      	bne.n	80030fe <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <gpio_clk_en+0x7c>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <gpio_clk_en+0x7c>)
 80030f6:	f043 0304 	orr.w	r3, r3, #4
 80030fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80030fc:	e010      	b.n	8003120 <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a0e      	ldr	r2, [pc, #56]	; (800313c <gpio_clk_en+0x88>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d106      	bne.n	8003114 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <gpio_clk_en+0x7c>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <gpio_clk_en+0x7c>)
 800310c:	f043 0308 	orr.w	r3, r3, #8
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003112:	e005      	b.n	8003120 <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <gpio_clk_en+0x7c>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4a05      	ldr	r2, [pc, #20]	; (8003130 <gpio_clk_en+0x7c>)
 800311a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40020000 	.word	0x40020000
 8003130:	40023800 	.word	0x40023800
 8003134:	40020400 	.word	0x40020400
 8003138:	40020800 	.word	0x40020800
 800313c:	40020c00 	.word	0x40020c00

08003140 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d117      	bne.n	8003184 <gpio_config+0x44>
		gpio_clk_en(port);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7ff ffad 	bl	80030b4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f846 	bl	80031f0 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f85b 	bl	8003224 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f870 	bl	8003258 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f885 	bl	800328c <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 8003182:	e031      	b.n	80031e8 <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <gpio_config+0x66>
		gpio_clk_en(port);
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff ff92 	bl	80030b4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f82b 	bl	80031f0 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f85a 	bl	8003258 <gpio_PUPD>
}
 80031a4:	e020      	b.n	80031e8 <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d112      	bne.n	80031d2 <gpio_config+0x92>
		gpio_clk_en(port);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff ff81 	bl	80030b4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f81a 	bl	80031f0 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f849 	bl	8003258 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f85e 	bl	800328c <gpio_PHPL_OD>
}
 80031d0:	e00a      	b.n	80031e8 <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d107      	bne.n	80031e8 <gpio_config+0xa8>
		gpio_clk_en(port);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff ff6b 	bl	80030b4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f804 	bl	80031f0 <gpio_moder>
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4907      	ldr	r1, [pc, #28]	; (8003220 <gpio_moder+0x30>)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	431a      	orrs	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	20000010 	.word	0x20000010

08003224 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4907      	ldr	r1, [pc, #28]	; (8003254 <gpio_speed+0x30>)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	431a      	orrs	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	609a      	str	r2, [r3, #8]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	20000010 	.word	0x20000010

08003258 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	4907      	ldr	r1, [pc, #28]	; (8003288 <gpio_PUPD+0x30>)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	60da      	str	r2, [r3, #12]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	20000010 	.word	0x20000010

0800328c <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	605a      	str	r2, [r3, #4]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 80032b6:	b480      	push	{r7}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b07      	cmp	r3, #7
 80032c6:	d80a      	bhi.n	80032de <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 80032dc:	e00a      	b.n	80032f4 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	3b08      	subs	r3, #8
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	4613      	mov	r3, r2
 800330c:	71fb      	strb	r3, [r7, #7]
	if (state) {
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <gpio_write+0x24>
		port->BSRR = (1 << pinNumber);
 8003314:	2201      	movs	r2, #1
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	461a      	mov	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 8003322:	e007      	b.n	8003334 <gpio_write+0x34>
		port->BSRR = (1 << (pinNumber + 16));
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3310      	adds	r3, #16
 8003328:	2201      	movs	r2, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	461a      	mov	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	619a      	str	r2, [r3, #24]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <gpio_IT_config>:
	return flag;
}
/**************************************************************************************/

/*******************************INTERRUPT CONFIGURATION*********************************/
void gpio_IT_config(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t edge) {
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	71fb      	strb	r3, [r7, #7]
	SYSCFG_CLK_EN;
 800334e:	4baa      	ldr	r3, [pc, #680]	; (80035f8 <gpio_IT_config+0x2b8>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	4aa9      	ldr	r2, [pc, #676]	; (80035f8 <gpio_IT_config+0x2b8>)
 8003354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003358:	6453      	str	r3, [r2, #68]	; 0x44
	if (port == GPIOA) {
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4aa7      	ldr	r2, [pc, #668]	; (80035fc <gpio_IT_config+0x2bc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d166      	bne.n	8003430 <gpio_IT_config+0xf0>
		switch (pinNumber) {
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	f200 81ca 	bhi.w	80036fe <gpio_IT_config+0x3be>
 800336a:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <gpio_IT_config+0x30>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	080033b1 	.word	0x080033b1
 8003374:	080033b9 	.word	0x080033b9
 8003378:	080033c1 	.word	0x080033c1
 800337c:	080033c9 	.word	0x080033c9
 8003380:	080033d1 	.word	0x080033d1
 8003384:	080033d9 	.word	0x080033d9
 8003388:	080033e1 	.word	0x080033e1
 800338c:	080033e9 	.word	0x080033e9
 8003390:	080033f1 	.word	0x080033f1
 8003394:	080033f9 	.word	0x080033f9
 8003398:	08003401 	.word	0x08003401
 800339c:	08003409 	.word	0x08003409
 80033a0:	08003411 	.word	0x08003411
 80033a4:	08003419 	.word	0x08003419
 80033a8:	08003421 	.word	0x08003421
 80033ac:	08003429 	.word	0x08003429
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 80033b0:	4b93      	ldr	r3, [pc, #588]	; (8003600 <gpio_IT_config+0x2c0>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
			break;
 80033b6:	e1a2      	b.n	80036fe <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 80033b8:	4b91      	ldr	r3, [pc, #580]	; (8003600 <gpio_IT_config+0x2c0>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
			break;
 80033be:	e19e      	b.n	80036fe <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 80033c0:	4b8f      	ldr	r3, [pc, #572]	; (8003600 <gpio_IT_config+0x2c0>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
			break;
 80033c6:	e19a      	b.n	80036fe <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 80033c8:	4b8d      	ldr	r3, [pc, #564]	; (8003600 <gpio_IT_config+0x2c0>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
			break;
 80033ce:	e196      	b.n	80036fe <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA;
 80033d0:	4b8b      	ldr	r3, [pc, #556]	; (8003600 <gpio_IT_config+0x2c0>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	60da      	str	r2, [r3, #12]
			break;
 80033d6:	e192      	b.n	80036fe <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PA;
 80033d8:	4b89      	ldr	r3, [pc, #548]	; (8003600 <gpio_IT_config+0x2c0>)
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]
			break;
 80033de:	e18e      	b.n	80036fe <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PA;
 80033e0:	4b87      	ldr	r3, [pc, #540]	; (8003600 <gpio_IT_config+0x2c0>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
			break;
 80033e6:	e18a      	b.n	80036fe <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PA;
 80033e8:	4b85      	ldr	r3, [pc, #532]	; (8003600 <gpio_IT_config+0x2c0>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
			break;
 80033ee:	e186      	b.n	80036fe <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PA;
 80033f0:	4b83      	ldr	r3, [pc, #524]	; (8003600 <gpio_IT_config+0x2c0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	611a      	str	r2, [r3, #16]
			break;
 80033f6:	e182      	b.n	80036fe <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PA;
 80033f8:	4b81      	ldr	r3, [pc, #516]	; (8003600 <gpio_IT_config+0x2c0>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
			break;
 80033fe:	e17e      	b.n	80036fe <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PA;
 8003400:	4b7f      	ldr	r3, [pc, #508]	; (8003600 <gpio_IT_config+0x2c0>)
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
			break;
 8003406:	e17a      	b.n	80036fe <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PA;
 8003408:	4b7d      	ldr	r3, [pc, #500]	; (8003600 <gpio_IT_config+0x2c0>)
 800340a:	2200      	movs	r2, #0
 800340c:	611a      	str	r2, [r3, #16]
			break;
 800340e:	e176      	b.n	80036fe <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PA;
 8003410:	4b7b      	ldr	r3, [pc, #492]	; (8003600 <gpio_IT_config+0x2c0>)
 8003412:	2200      	movs	r2, #0
 8003414:	615a      	str	r2, [r3, #20]
			break;
 8003416:	e172      	b.n	80036fe <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PA;
 8003418:	4b79      	ldr	r3, [pc, #484]	; (8003600 <gpio_IT_config+0x2c0>)
 800341a:	2200      	movs	r2, #0
 800341c:	615a      	str	r2, [r3, #20]
			break;
 800341e:	e16e      	b.n	80036fe <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PA;
 8003420:	4b77      	ldr	r3, [pc, #476]	; (8003600 <gpio_IT_config+0x2c0>)
 8003422:	2200      	movs	r2, #0
 8003424:	615a      	str	r2, [r3, #20]
			break;
 8003426:	e16a      	b.n	80036fe <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PA;
 8003428:	4b75      	ldr	r3, [pc, #468]	; (8003600 <gpio_IT_config+0x2c0>)
 800342a:	2200      	movs	r2, #0
 800342c:	615a      	str	r2, [r3, #20]
			break;
 800342e:	e166      	b.n	80036fe <gpio_IT_config+0x3be>
		}	// end of Port A
	} else if (port == GPIOB) {
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a74      	ldr	r2, [pc, #464]	; (8003604 <gpio_IT_config+0x2c4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d16f      	bne.n	8003518 <gpio_IT_config+0x1d8>
		switch (pinNumber) {
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b0f      	cmp	r3, #15
 800343c:	f200 815f 	bhi.w	80036fe <gpio_IT_config+0x3be>
 8003440:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <gpio_IT_config+0x108>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	08003489 	.word	0x08003489
 800344c:	08003491 	.word	0x08003491
 8003450:	08003499 	.word	0x08003499
 8003454:	080034a3 	.word	0x080034a3
 8003458:	080034ad 	.word	0x080034ad
 800345c:	080034b5 	.word	0x080034b5
 8003460:	080034bd 	.word	0x080034bd
 8003464:	080034c7 	.word	0x080034c7
 8003468:	080034d1 	.word	0x080034d1
 800346c:	080034d9 	.word	0x080034d9
 8003470:	080034e1 	.word	0x080034e1
 8003474:	080034eb 	.word	0x080034eb
 8003478:	080034f5 	.word	0x080034f5
 800347c:	080034fd 	.word	0x080034fd
 8003480:	08003505 	.word	0x08003505
 8003484:	0800350f 	.word	0x0800350f
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 8003488:	4b5d      	ldr	r3, [pc, #372]	; (8003600 <gpio_IT_config+0x2c0>)
 800348a:	2201      	movs	r2, #1
 800348c:	609a      	str	r2, [r3, #8]
			break;
 800348e:	e136      	b.n	80036fe <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 8003490:	4b5b      	ldr	r3, [pc, #364]	; (8003600 <gpio_IT_config+0x2c0>)
 8003492:	2210      	movs	r2, #16
 8003494:	609a      	str	r2, [r3, #8]
			break;
 8003496:	e132      	b.n	80036fe <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 8003498:	4b59      	ldr	r3, [pc, #356]	; (8003600 <gpio_IT_config+0x2c0>)
 800349a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800349e:	609a      	str	r2, [r3, #8]
			break;
 80034a0:	e12d      	b.n	80036fe <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <gpio_IT_config+0x2c0>)
 80034a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034a8:	609a      	str	r2, [r3, #8]
			break;
 80034aa:	e128      	b.n	80036fe <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PB;
 80034ac:	4b54      	ldr	r3, [pc, #336]	; (8003600 <gpio_IT_config+0x2c0>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	60da      	str	r2, [r3, #12]
			break;
 80034b2:	e124      	b.n	80036fe <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PB;
 80034b4:	4b52      	ldr	r3, [pc, #328]	; (8003600 <gpio_IT_config+0x2c0>)
 80034b6:	2210      	movs	r2, #16
 80034b8:	60da      	str	r2, [r3, #12]
			break;
 80034ba:	e120      	b.n	80036fe <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PB;
 80034bc:	4b50      	ldr	r3, [pc, #320]	; (8003600 <gpio_IT_config+0x2c0>)
 80034be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c2:	60da      	str	r2, [r3, #12]
			break;
 80034c4:	e11b      	b.n	80036fe <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PB;
 80034c6:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <gpio_IT_config+0x2c0>)
 80034c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034cc:	60da      	str	r2, [r3, #12]
			break;
 80034ce:	e116      	b.n	80036fe <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PB;
 80034d0:	4b4b      	ldr	r3, [pc, #300]	; (8003600 <gpio_IT_config+0x2c0>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	611a      	str	r2, [r3, #16]
			break;
 80034d6:	e112      	b.n	80036fe <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PB;
 80034d8:	4b49      	ldr	r3, [pc, #292]	; (8003600 <gpio_IT_config+0x2c0>)
 80034da:	2210      	movs	r2, #16
 80034dc:	611a      	str	r2, [r3, #16]
			break;
 80034de:	e10e      	b.n	80036fe <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PB;
 80034e0:	4b47      	ldr	r3, [pc, #284]	; (8003600 <gpio_IT_config+0x2c0>)
 80034e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e6:	611a      	str	r2, [r3, #16]
			break;
 80034e8:	e109      	b.n	80036fe <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PB;
 80034ea:	4b45      	ldr	r3, [pc, #276]	; (8003600 <gpio_IT_config+0x2c0>)
 80034ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034f0:	611a      	str	r2, [r3, #16]
			break;
 80034f2:	e104      	b.n	80036fe <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PB;
 80034f4:	4b42      	ldr	r3, [pc, #264]	; (8003600 <gpio_IT_config+0x2c0>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	615a      	str	r2, [r3, #20]
			break;
 80034fa:	e100      	b.n	80036fe <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PB;
 80034fc:	4b40      	ldr	r3, [pc, #256]	; (8003600 <gpio_IT_config+0x2c0>)
 80034fe:	2210      	movs	r2, #16
 8003500:	615a      	str	r2, [r3, #20]
			break;
 8003502:	e0fc      	b.n	80036fe <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PB;
 8003504:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <gpio_IT_config+0x2c0>)
 8003506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800350a:	615a      	str	r2, [r3, #20]
			break;
 800350c:	e0f7      	b.n	80036fe <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PB;
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <gpio_IT_config+0x2c0>)
 8003510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003514:	615a      	str	r2, [r3, #20]
			break;
 8003516:	e0f2      	b.n	80036fe <gpio_IT_config+0x3be>
		}	// end of Port B
	} else if (port == GPIOC) {
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a3b      	ldr	r2, [pc, #236]	; (8003608 <gpio_IT_config+0x2c8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d17a      	bne.n	8003616 <gpio_IT_config+0x2d6>
		switch (pinNumber) {
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	f200 80eb 	bhi.w	80036fe <gpio_IT_config+0x3be>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <gpio_IT_config+0x1f0>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003571 	.word	0x08003571
 8003534:	08003579 	.word	0x08003579
 8003538:	08003581 	.word	0x08003581
 800353c:	0800358b 	.word	0x0800358b
 8003540:	08003595 	.word	0x08003595
 8003544:	0800359d 	.word	0x0800359d
 8003548:	080035a5 	.word	0x080035a5
 800354c:	080035af 	.word	0x080035af
 8003550:	080035b9 	.word	0x080035b9
 8003554:	080035c1 	.word	0x080035c1
 8003558:	080035c9 	.word	0x080035c9
 800355c:	080035d3 	.word	0x080035d3
 8003560:	080035dd 	.word	0x080035dd
 8003564:	080035e5 	.word	0x080035e5
 8003568:	080035ed 	.word	0x080035ed
 800356c:	0800360d 	.word	0x0800360d
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 8003570:	4b23      	ldr	r3, [pc, #140]	; (8003600 <gpio_IT_config+0x2c0>)
 8003572:	2202      	movs	r2, #2
 8003574:	609a      	str	r2, [r3, #8]
			break;
 8003576:	e0c2      	b.n	80036fe <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 8003578:	4b21      	ldr	r3, [pc, #132]	; (8003600 <gpio_IT_config+0x2c0>)
 800357a:	2220      	movs	r2, #32
 800357c:	609a      	str	r2, [r3, #8]
			break;
 800357e:	e0be      	b.n	80036fe <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 8003580:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <gpio_IT_config+0x2c0>)
 8003582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003586:	609a      	str	r2, [r3, #8]
			break;
 8003588:	e0b9      	b.n	80036fe <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <gpio_IT_config+0x2c0>)
 800358c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003590:	609a      	str	r2, [r3, #8]
			break;
 8003592:	e0b4      	b.n	80036fe <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PC;
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <gpio_IT_config+0x2c0>)
 8003596:	2202      	movs	r2, #2
 8003598:	60da      	str	r2, [r3, #12]
			break;
 800359a:	e0b0      	b.n	80036fe <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PC;
 800359c:	4b18      	ldr	r3, [pc, #96]	; (8003600 <gpio_IT_config+0x2c0>)
 800359e:	2220      	movs	r2, #32
 80035a0:	60da      	str	r2, [r3, #12]
			break;
 80035a2:	e0ac      	b.n	80036fe <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PC;
 80035a4:	4b16      	ldr	r3, [pc, #88]	; (8003600 <gpio_IT_config+0x2c0>)
 80035a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035aa:	60da      	str	r2, [r3, #12]
			break;
 80035ac:	e0a7      	b.n	80036fe <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PC;
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <gpio_IT_config+0x2c0>)
 80035b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035b4:	60da      	str	r2, [r3, #12]
			break;
 80035b6:	e0a2      	b.n	80036fe <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PC;
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <gpio_IT_config+0x2c0>)
 80035ba:	2202      	movs	r2, #2
 80035bc:	611a      	str	r2, [r3, #16]
			break;
 80035be:	e09e      	b.n	80036fe <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PC;
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <gpio_IT_config+0x2c0>)
 80035c2:	2220      	movs	r2, #32
 80035c4:	611a      	str	r2, [r3, #16]
			break;
 80035c6:	e09a      	b.n	80036fe <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PC;
 80035c8:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <gpio_IT_config+0x2c0>)
 80035ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ce:	611a      	str	r2, [r3, #16]
			break;
 80035d0:	e095      	b.n	80036fe <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PC;
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <gpio_IT_config+0x2c0>)
 80035d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035d8:	611a      	str	r2, [r3, #16]
			break;
 80035da:	e090      	b.n	80036fe <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PC;
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <gpio_IT_config+0x2c0>)
 80035de:	2202      	movs	r2, #2
 80035e0:	615a      	str	r2, [r3, #20]
			break;
 80035e2:	e08c      	b.n	80036fe <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PC;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <gpio_IT_config+0x2c0>)
 80035e6:	2220      	movs	r2, #32
 80035e8:	615a      	str	r2, [r3, #20]
			break;
 80035ea:	e088      	b.n	80036fe <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PC;
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <gpio_IT_config+0x2c0>)
 80035ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f2:	615a      	str	r2, [r3, #20]
			break;
 80035f4:	e083      	b.n	80036fe <gpio_IT_config+0x3be>
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020000 	.word	0x40020000
 8003600:	40013800 	.word	0x40013800
 8003604:	40020400 	.word	0x40020400
 8003608:	40020800 	.word	0x40020800
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PC;
 800360c:	4b58      	ldr	r3, [pc, #352]	; (8003770 <gpio_IT_config+0x430>)
 800360e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003612:	615a      	str	r2, [r3, #20]
			break;
 8003614:	e073      	b.n	80036fe <gpio_IT_config+0x3be>
		}	// end of Port C
	} else if (port == GPIOD) {
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a56      	ldr	r2, [pc, #344]	; (8003774 <gpio_IT_config+0x434>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d16e      	bne.n	80036fc <gpio_IT_config+0x3bc>
		switch (pinNumber) {
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b0f      	cmp	r3, #15
 8003622:	d86c      	bhi.n	80036fe <gpio_IT_config+0x3be>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <gpio_IT_config+0x2ec>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	0800366d 	.word	0x0800366d
 8003630:	08003675 	.word	0x08003675
 8003634:	0800367d 	.word	0x0800367d
 8003638:	08003687 	.word	0x08003687
 800363c:	08003691 	.word	0x08003691
 8003640:	08003699 	.word	0x08003699
 8003644:	080036a1 	.word	0x080036a1
 8003648:	080036ab 	.word	0x080036ab
 800364c:	080036b5 	.word	0x080036b5
 8003650:	080036bd 	.word	0x080036bd
 8003654:	080036c5 	.word	0x080036c5
 8003658:	080036cf 	.word	0x080036cf
 800365c:	080036d9 	.word	0x080036d9
 8003660:	080036e1 	.word	0x080036e1
 8003664:	080036e9 	.word	0x080036e9
 8003668:	080036f3 	.word	0x080036f3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <gpio_IT_config+0x430>)
 800366e:	2203      	movs	r2, #3
 8003670:	609a      	str	r2, [r3, #8]
			break;
 8003672:	e044      	b.n	80036fe <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <gpio_IT_config+0x430>)
 8003676:	2230      	movs	r2, #48	; 0x30
 8003678:	609a      	str	r2, [r3, #8]
			break;
 800367a:	e040      	b.n	80036fe <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 800367c:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <gpio_IT_config+0x430>)
 800367e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003682:	609a      	str	r2, [r3, #8]
			break;
 8003684:	e03b      	b.n	80036fe <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 8003686:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <gpio_IT_config+0x430>)
 8003688:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800368c:	609a      	str	r2, [r3, #8]
			break;
 800368e:	e036      	b.n	80036fe <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PD;
 8003690:	4b37      	ldr	r3, [pc, #220]	; (8003770 <gpio_IT_config+0x430>)
 8003692:	2203      	movs	r2, #3
 8003694:	60da      	str	r2, [r3, #12]
			break;
 8003696:	e032      	b.n	80036fe <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PD;
 8003698:	4b35      	ldr	r3, [pc, #212]	; (8003770 <gpio_IT_config+0x430>)
 800369a:	2230      	movs	r2, #48	; 0x30
 800369c:	60da      	str	r2, [r3, #12]
			break;
 800369e:	e02e      	b.n	80036fe <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PD;
 80036a0:	4b33      	ldr	r3, [pc, #204]	; (8003770 <gpio_IT_config+0x430>)
 80036a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80036a6:	60da      	str	r2, [r3, #12]
			break;
 80036a8:	e029      	b.n	80036fe <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PD;
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <gpio_IT_config+0x430>)
 80036ac:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80036b0:	60da      	str	r2, [r3, #12]
			break;
 80036b2:	e024      	b.n	80036fe <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PD;
 80036b4:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <gpio_IT_config+0x430>)
 80036b6:	2203      	movs	r2, #3
 80036b8:	611a      	str	r2, [r3, #16]
			break;
 80036ba:	e020      	b.n	80036fe <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PD;
 80036bc:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <gpio_IT_config+0x430>)
 80036be:	2230      	movs	r2, #48	; 0x30
 80036c0:	611a      	str	r2, [r3, #16]
			break;
 80036c2:	e01c      	b.n	80036fe <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PD;
 80036c4:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <gpio_IT_config+0x430>)
 80036c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80036ca:	611a      	str	r2, [r3, #16]
			break;
 80036cc:	e017      	b.n	80036fe <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PD;
 80036ce:	4b28      	ldr	r3, [pc, #160]	; (8003770 <gpio_IT_config+0x430>)
 80036d0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80036d4:	611a      	str	r2, [r3, #16]
			break;
 80036d6:	e012      	b.n	80036fe <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PD;
 80036d8:	4b25      	ldr	r3, [pc, #148]	; (8003770 <gpio_IT_config+0x430>)
 80036da:	2203      	movs	r2, #3
 80036dc:	615a      	str	r2, [r3, #20]
			break;
 80036de:	e00e      	b.n	80036fe <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PD;
 80036e0:	4b23      	ldr	r3, [pc, #140]	; (8003770 <gpio_IT_config+0x430>)
 80036e2:	2230      	movs	r2, #48	; 0x30
 80036e4:	615a      	str	r2, [r3, #20]
			break;
 80036e6:	e00a      	b.n	80036fe <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PD;
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <gpio_IT_config+0x430>)
 80036ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80036ee:	615a      	str	r2, [r3, #20]
			break;
 80036f0:	e005      	b.n	80036fe <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PD;
 80036f2:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <gpio_IT_config+0x430>)
 80036f4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80036f8:	615a      	str	r2, [r3, #20]
			break;
 80036fa:	e000      	b.n	80036fe <gpio_IT_config+0x3be>
		}	// end of Port D
	}
 80036fc:	bf00      	nop

	if (edge == RISING_EDGE) {
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <gpio_IT_config+0x3da>
		EXTI->RTSR |= 1 << pinNumber;
 8003704:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <gpio_IT_config+0x438>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2101      	movs	r1, #1
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	fa01 f202 	lsl.w	r2, r1, r2
 8003710:	4611      	mov	r1, r2
 8003712:	4a19      	ldr	r2, [pc, #100]	; (8003778 <gpio_IT_config+0x438>)
 8003714:	430b      	orrs	r3, r1
 8003716:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1 << pinNumber;
	} else if (edge == RISING_FALLING_EDGE) {
		EXTI->RTSR |= 1 << pinNumber;
		EXTI->FTSR |= 1 << pinNumber;
	}
}
 8003718:	e024      	b.n	8003764 <gpio_IT_config+0x424>
	} else if (edge == FALLING_EDGE) {
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10a      	bne.n	8003736 <gpio_IT_config+0x3f6>
		EXTI->FTSR |= 1 << pinNumber;
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <gpio_IT_config+0x438>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2101      	movs	r1, #1
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	4611      	mov	r1, r2
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <gpio_IT_config+0x438>)
 8003730:	430b      	orrs	r3, r1
 8003732:	60d3      	str	r3, [r2, #12]
}
 8003734:	e016      	b.n	8003764 <gpio_IT_config+0x424>
	} else if (edge == RISING_FALLING_EDGE) {
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d113      	bne.n	8003764 <gpio_IT_config+0x424>
		EXTI->RTSR |= 1 << pinNumber;
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <gpio_IT_config+0x438>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2101      	movs	r1, #1
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	fa01 f202 	lsl.w	r2, r1, r2
 8003748:	4611      	mov	r1, r2
 800374a:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <gpio_IT_config+0x438>)
 800374c:	430b      	orrs	r3, r1
 800374e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1 << pinNumber;
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <gpio_IT_config+0x438>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2101      	movs	r1, #1
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	4611      	mov	r1, r2
 800375e:	4a06      	ldr	r2, [pc, #24]	; (8003778 <gpio_IT_config+0x438>)
 8003760:	430b      	orrs	r3, r1
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40013800 	.word	0x40013800
 8003774:	40020c00 	.word	0x40020c00
 8003778:	40013c00 	.word	0x40013c00

0800377c <gpio_IT_EN>:

void gpio_IT_EN(uint8_t pinNumber, IRQn_Type irqNumber) {//Interrupt Enable Function
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	460a      	mov	r2, r1
 8003786:	71fb      	strb	r3, [r7, #7]
 8003788:	4613      	mov	r3, r2
 800378a:	71bb      	strb	r3, [r7, #6]
	EXTI->IMR |= 1 << pinNumber;	//enable interrupt in EXTI
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <gpio_IT_EN+0x38>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	79fa      	ldrb	r2, [r7, #7]
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f202 	lsl.w	r2, r1, r2
 8003798:	4611      	mov	r1, r2
 800379a:	4a06      	ldr	r2, [pc, #24]	; (80037b4 <gpio_IT_EN+0x38>)
 800379c:	430b      	orrs	r3, r1
 800379e:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irqNumber);		//enable interrupt in NVIC
 80037a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fc67 	bl	8003078 <__NVIC_EnableIRQ>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40013c00 	.word	0x40013c00

080037b8 <gpio_IT_CHK>:

void gpio_IT_SW(uint8_t pinNumber) {			//Interrupt Software generate
	EXTI->SWIER |= 1 << pinNumber;				//TODO: Not Done for now
}

uint8_t gpio_IT_CHK(uint8_t pinNumber) {			//Interrupt check function
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
	if ((EXTI->PR) & (1 << pinNumber)) {				//Check pending register
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <gpio_IT_CHK+0x30>)
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	79fa      	ldrb	r2, [r7, #7]
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f202 	lsl.w	r2, r1, r2
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <gpio_IT_CHK+0x20>
		return 1;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <gpio_IT_CHK+0x22>
	} else {
		return 0;
 80037d8:	2300      	movs	r3, #0
	}
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40013c00 	.word	0x40013c00

080037ec <gpio_IT_CLR>:

void gpio_IT_CLR(uint8_t pinNumber) {				//Interrupt clear function
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
	EXTI->PR = 1 << pinNumber;		//clear pending register
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	2201      	movs	r2, #1
 80037fa:	409a      	lsls	r2, r3
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <gpio_IT_CLR+0x20>)
 80037fe:	615a      	str	r2, [r3, #20]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40013c00 	.word	0x40013c00

08003810 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f818 	bl	8003854 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f842 	bl	80038b8 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8003834:	69f9      	ldr	r1, [r7, #28]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f8d8 	bl	80039ec <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003844:	f043 030c 	orr.w	r3, r3, #12
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	60d3      	str	r3, [r2, #12]

}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <USART_CLK_EN+0x54>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d106      	bne.n	8003872 <USART_CLK_EN+0x1e>
		USART1_CLK_EN;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <USART_CLK_EN+0x58>)
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	4a10      	ldr	r2, [pc, #64]	; (80038ac <USART_CLK_EN+0x58>)
 800386a:	f043 0310 	orr.w	r3, r3, #16
 800386e:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (usart == USART2) {
		USART2_CLK_EN;
	} else if (usart == USART6) {
		USART6_CLK_EN;
	}
}
 8003870:	e014      	b.n	800389c <USART_CLK_EN+0x48>
	} else if (usart == USART2) {
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a0e      	ldr	r2, [pc, #56]	; (80038b0 <USART_CLK_EN+0x5c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d106      	bne.n	8003888 <USART_CLK_EN+0x34>
		USART2_CLK_EN;
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <USART_CLK_EN+0x58>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	4a0b      	ldr	r2, [pc, #44]	; (80038ac <USART_CLK_EN+0x58>)
 8003880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003886:	e009      	b.n	800389c <USART_CLK_EN+0x48>
	} else if (usart == USART6) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <USART_CLK_EN+0x60>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d105      	bne.n	800389c <USART_CLK_EN+0x48>
		USART6_CLK_EN;
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <USART_CLK_EN+0x58>)
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	4a05      	ldr	r2, [pc, #20]	; (80038ac <USART_CLK_EN+0x58>)
 8003896:	f043 0320 	orr.w	r3, r3, #32
 800389a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	40011000 	.word	0x40011000
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40004400 	.word	0x40004400
 80038b4:	40011400 	.word	0x40011400

080038b8 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80038c6:	2300      	movs	r3, #0
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	2300      	movs	r3, #0
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2302      	movs	r3, #2
 80038d0:	2202      	movs	r2, #2
 80038d2:	6839      	ldr	r1, [r7, #0]
 80038d4:	68b8      	ldr	r0, [r7, #8]
 80038d6:	f7ff fc33 	bl	8003140 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80038da:	2300      	movs	r3, #0
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	2300      	movs	r3, #0
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2302      	movs	r3, #2
 80038e4:	2202      	movs	r2, #2
 80038e6:	69b9      	ldr	r1, [r7, #24]
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fc29 	bl	8003140 <gpio_config>

	if (usart == USART1) {
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a39      	ldr	r2, [pc, #228]	; (80039d8 <USART_PIN_CONFIG+0x120>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d118      	bne.n	8003928 <USART_PIN_CONFIG+0x70>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4a38      	ldr	r2, [pc, #224]	; (80039dc <USART_PIN_CONFIG+0x124>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d107      	bne.n	800390e <USART_PIN_CONFIG+0x56>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b09      	cmp	r3, #9
 8003902:	d104      	bne.n	800390e <USART_PIN_CONFIG+0x56>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 8003904:	2207      	movs	r2, #7
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	68b8      	ldr	r0, [r7, #8]
 800390a:	f7ff fcd4 	bl	80032b6 <gpio_altfn>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
//			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a32      	ldr	r2, [pc, #200]	; (80039dc <USART_PIN_CONFIG+0x124>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d15b      	bne.n	80039ce <USART_PIN_CONFIG+0x116>
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b0a      	cmp	r3, #10
 800391a:	d158      	bne.n	80039ce <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 800391c:	2207      	movs	r2, #7
 800391e:	69b9      	ldr	r1, [r7, #24]
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff fcc8 	bl	80032b6 <gpio_altfn>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PA12);
		} else if (rx_port == PORTC && rx_pinNumber == 7) {
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PC7);
		}
	}
}
 8003926:	e052      	b.n	80039ce <USART_PIN_CONFIG+0x116>
	} else if (usart == USART2) {
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <USART_PIN_CONFIG+0x128>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d118      	bne.n	8003962 <USART_PIN_CONFIG+0xaa>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <USART_PIN_CONFIG+0x124>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d107      	bne.n	8003948 <USART_PIN_CONFIG+0x90>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d104      	bne.n	8003948 <USART_PIN_CONFIG+0x90>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 800393e:	2207      	movs	r2, #7
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	68b8      	ldr	r0, [r7, #8]
 8003944:	f7ff fcb7 	bl	80032b6 <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a24      	ldr	r2, [pc, #144]	; (80039dc <USART_PIN_CONFIG+0x124>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d13e      	bne.n	80039ce <USART_PIN_CONFIG+0x116>
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d13b      	bne.n	80039ce <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 8003956:	2207      	movs	r2, #7
 8003958:	69b9      	ldr	r1, [r7, #24]
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fcab 	bl	80032b6 <gpio_altfn>
}
 8003960:	e035      	b.n	80039ce <USART_PIN_CONFIG+0x116>
	} else if (usart == USART6) {
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a1f      	ldr	r2, [pc, #124]	; (80039e4 <USART_PIN_CONFIG+0x12c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d131      	bne.n	80039ce <USART_PIN_CONFIG+0x116>
		if (tx_port == PORTA && tx_pinNumber == 11) {
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <USART_PIN_CONFIG+0x124>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d108      	bne.n	8003984 <USART_PIN_CONFIG+0xcc>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b0b      	cmp	r3, #11
 8003976:	d105      	bne.n	8003984 <USART_PIN_CONFIG+0xcc>
			gpio_altfn(tx_port, tx_pinNumber, USART6_TX_PA11);
 8003978:	2208      	movs	r2, #8
 800397a:	6839      	ldr	r1, [r7, #0]
 800397c:	68b8      	ldr	r0, [r7, #8]
 800397e:	f7ff fc9a 	bl	80032b6 <gpio_altfn>
 8003982:	e00b      	b.n	800399c <USART_PIN_CONFIG+0xe4>
		} else if (tx_port == PORTC && tx_pinNumber == 6) {
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <USART_PIN_CONFIG+0x130>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d107      	bne.n	800399c <USART_PIN_CONFIG+0xe4>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b06      	cmp	r3, #6
 8003990:	d104      	bne.n	800399c <USART_PIN_CONFIG+0xe4>
			gpio_altfn(tx_port, tx_pinNumber, USART6_TX_PC6);
 8003992:	2208      	movs	r2, #8
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	68b8      	ldr	r0, [r7, #8]
 8003998:	f7ff fc8d 	bl	80032b6 <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 12) {
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0f      	ldr	r2, [pc, #60]	; (80039dc <USART_PIN_CONFIG+0x124>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d108      	bne.n	80039b6 <USART_PIN_CONFIG+0xfe>
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d105      	bne.n	80039b6 <USART_PIN_CONFIG+0xfe>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PA12);
 80039aa:	2208      	movs	r2, #8
 80039ac:	69b9      	ldr	r1, [r7, #24]
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff fc81 	bl	80032b6 <gpio_altfn>
}
 80039b4:	e00b      	b.n	80039ce <USART_PIN_CONFIG+0x116>
		} else if (rx_port == PORTC && rx_pinNumber == 7) {
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <USART_PIN_CONFIG+0x130>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d107      	bne.n	80039ce <USART_PIN_CONFIG+0x116>
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b07      	cmp	r3, #7
 80039c2:	d104      	bne.n	80039ce <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PC7);
 80039c4:	2208      	movs	r2, #8
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fc74 	bl	80032b6 <gpio_altfn>
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40011000 	.word	0x40011000
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40004400 	.word	0x40004400
 80039e4:	40011400 	.word	0x40011400
 80039e8:	40020800 	.word	0x40020800

080039ec <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 80039f6:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <USART_BDR_SEL+0x48>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	60fb      	str	r3, [r7, #12]
	if(usart == USART2){
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <USART_BDR_SEL+0x4c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d107      	bne.n	8003a1a <USART_BDR_SEL+0x2e>
		usart->BRR |= baud / 2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	609a      	str	r2, [r3, #8]
	}
	else{
		usart->BRR |= baud;
	}

}
 8003a18:	e005      	b.n	8003a26 <USART_BDR_SEL+0x3a>
		usart->BRR |= baud;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000004 	.word	0x20000004
 8003a38:	40004400 	.word	0x40004400

08003a3c <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 8003a4a:	887b      	ldrh	r3, [r7, #2]
 8003a4c:	82bb      	strh	r3, [r7, #20]
	for (uint16_t i = 0; i < len; i++) {
 8003a4e:	2300      	movs	r3, #0
 8003a50:	82fb      	strh	r3, [r7, #22]
 8003a52:	e017      	b.n	8003a84 <USART_WRITE+0x48>
		if (len == 1) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d103      	bne.n	8003a62 <USART_WRITE+0x26>
			usart->DR = ch;
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	e006      	b.n	8003a70 <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 8003a62:	8afb      	ldrh	r3, [r7, #22]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	4413      	add	r3, r2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 8003a70:	bf00      	nop
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f9      	beq.n	8003a72 <USART_WRITE+0x36>
	for (uint16_t i = 0; i < len; i++) {
 8003a7e:	8afb      	ldrh	r3, [r7, #22]
 8003a80:	3301      	adds	r3, #1
 8003a82:	82fb      	strh	r3, [r7, #22]
 8003a84:	8afb      	ldrh	r3, [r7, #22]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d8e3      	bhi.n	8003a54 <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <print>:
//}


//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8003a9c:	b40f      	push	{r0, r1, r2, r3}
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ab2:	480a      	ldr	r0, [pc, #40]	; (8003adc <print+0x40>)
 8003ab4:	f002 feaa 	bl	800680c <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8003ab8:	4808      	ldr	r0, [pc, #32]	; (8003adc <print+0x40>)
 8003aba:	f7fc fb91 	bl	80001e0 <strlen>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	2364      	movs	r3, #100	; 0x64
 8003ac6:	4905      	ldr	r1, [pc, #20]	; (8003adc <print+0x40>)
 8003ac8:	4805      	ldr	r0, [pc, #20]	; (8003ae0 <print+0x44>)
 8003aca:	f7ff ffb7 	bl	8003a3c <USART_WRITE>

}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad8:	b004      	add	sp, #16
 8003ada:	4770      	bx	lr
 8003adc:	200004c8 	.word	0x200004c8
 8003ae0:	40004400 	.word	0x40004400

08003ae4 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	t *= 20;
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	607b      	str	r3, [r7, #4]
	for (; t > 0; t--) {
 8003af8:	e003      	b.n	8003b02 <delay+0x1e>
		__asm("nop");
 8003afa:	bf00      	nop
	for (; t > 0; t--) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f8      	bne.n	8003afa <delay+0x16>
	}
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <GPIO_Init>:
 * \param 
 * 
 * \return void
 */

static void GPIO_Init(void) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;
	gpio_clk_en(PORTB);
 8003b1e:	4832      	ldr	r0, [pc, #200]	; (8003be8 <GPIO_Init+0xd0>)
 8003b20:	f7ff fac8 	bl	80030b4 <gpio_clk_en>
	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003b24:	2300      	movs	r3, #0
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2201      	movs	r2, #1
 8003b30:	2101      	movs	r1, #1
 8003b32:	482e      	ldr	r0, [pc, #184]	; (8003bec <GPIO_Init+0xd4>)
 8003b34:	f7ff fb04 	bl	8003140 <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	2300      	movs	r3, #0
 8003b42:	2201      	movs	r2, #1
 8003b44:	2107      	movs	r1, #7
 8003b46:	4829      	ldr	r0, [pc, #164]	; (8003bec <GPIO_Init+0xd4>)
 8003b48:	f7ff fafa 	bl	8003140 <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	2201      	movs	r2, #1
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4825      	ldr	r0, [pc, #148]	; (8003bf0 <GPIO_Init+0xd8>)
 8003b5c:	f7ff faf0 	bl	8003140 <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003b60:	2300      	movs	r3, #0
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	2300      	movs	r3, #0
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4820      	ldr	r0, [pc, #128]	; (8003bf0 <GPIO_Init+0xd8>)
 8003b70:	f7ff fae6 	bl	8003140 <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003b74:	2300      	movs	r3, #0
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2201      	movs	r2, #1
 8003b80:	2104      	movs	r1, #4
 8003b82:	481b      	ldr	r0, [pc, #108]	; (8003bf0 <GPIO_Init+0xd8>)
 8003b84:	f7ff fadc 	bl	8003140 <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	2300      	movs	r3, #0
 8003b92:	2201      	movs	r2, #1
 8003b94:	2108      	movs	r1, #8
 8003b96:	4816      	ldr	r0, [pc, #88]	; (8003bf0 <GPIO_Init+0xd8>)
 8003b98:	f7ff fad2 	bl	8003140 <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2109      	movs	r1, #9
 8003baa:	4811      	ldr	r0, [pc, #68]	; (8003bf0 <GPIO_Init+0xd8>)
 8003bac:	f7ff fac8 	bl	8003140 <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2201      	movs	r2, #1
 8003bbc:	210a      	movs	r1, #10
 8003bbe:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <GPIO_Init+0xd8>)
 8003bc0:	f7ff fabe 	bl	8003140 <gpio_config>
//	gpio_config(PORTB, 3, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 5, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
	/*Configure GPIO pins : PB0 PB10 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_10 | GPIO_PIN_4
 8003bc4:	f240 4339 	movw	r3, #1081	; 0x439
 8003bc8:	607b      	str	r3, [r7, #4]
			| GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4803      	ldr	r0, [pc, #12]	; (8003be8 <GPIO_Init+0xd0>)
 8003bdc:	f7fd fd5e 	bl	800169c <HAL_GPIO_Init>
	//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8003be0:	bf00      	nop
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40020400 	.word	0x40020400
 8003bec:	40020800 	.word	0x40020800
 8003bf0:	40020000 	.word	0x40020000

08003bf4 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8003bfa:	4b2e      	ldr	r3, [pc, #184]	; (8003cb4 <LCD_Begin+0xc0>)
 8003bfc:	22f0      	movs	r2, #240	; 0xf0
 8003bfe:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8003c00:	4b2d      	ldr	r3, [pc, #180]	; (8003cb8 <LCD_Begin+0xc4>)
 8003c02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c06:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8003c08:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <LCD_Begin+0xc8>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8003c0e:	4b2c      	ldr	r3, [pc, #176]	; (8003cc0 <LCD_Begin+0xcc>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	801a      	strh	r2, [r3, #0]
 8003c14:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <LCD_Begin+0xcc>)
 8003c16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003c1a:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <LCD_Begin+0xd0>)
 8003c1c:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <LCD_Begin+0xd4>)
 8003c20:	2204      	movs	r2, #4
 8003c22:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8003c24:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <LCD_Begin+0xd8>)
 8003c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c2a:	801a      	strh	r2, [r3, #0]
 8003c2c:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <LCD_Begin+0xd8>)
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <LCD_Begin+0xdc>)
 8003c32:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <LCD_Begin+0xe0>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;

	GPIO_Init();
 8003c3e:	f7ff ff6b 	bl	8003b18 <GPIO_Init>

	LCD_Reset();
 8003c42:	f000 fc63 	bl	800450c <LCD_Reset>

	LCD_CS_LOW();
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4823      	ldr	r0, [pc, #140]	; (8003cd8 <LCD_Begin+0xe4>)
 8003c4c:	f7ff fb58 	bl	8003300 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8003c50:	e01d      	b.n	8003c8e <LCD_Begin+0x9a>
		a = ST7781_regValues[i++];
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	71fa      	strb	r2, [r7, #7]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <LCD_Begin+0xe8>)
 8003c5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003c60:	80bb      	strh	r3, [r7, #4]
		d = ST7781_regValues[i++];
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	71fa      	strb	r2, [r7, #7]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <LCD_Begin+0xe8>)
 8003c6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003c70:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8003c72:	88bb      	ldrh	r3, [r7, #4]
 8003c74:	2bff      	cmp	r3, #255	; 0xff
 8003c76:	d104      	bne.n	8003c82 <LCD_Begin+0x8e>
			delay(d);
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff ff32 	bl	8003ae4 <delay>
 8003c80:	e005      	b.n	8003c8e <LCD_Begin+0x9a>
		} else {
			LCD_WriteRegister16(a, d);
 8003c82:	887a      	ldrh	r2, [r7, #2]
 8003c84:	88bb      	ldrh	r3, [r7, #4]
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fde3 	bl	8004854 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	2b83      	cmp	r3, #131	; 0x83
 8003c92:	d9de      	bls.n	8003c52 <LCD_Begin+0x5e>
		}
	}

	LCD_SetRotation(m_rotation);
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <LCD_Begin+0xc8>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fcb9 	bl	8004610 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8003c9e:	f240 133f 	movw	r3, #319	; 0x13f
 8003ca2:	22ef      	movs	r2, #239	; 0xef
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f000 fce8 	bl	800467c <LCD_SetAddrWindow>
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	200005c8 	.word	0x200005c8
 8003cb8:	200005ca 	.word	0x200005ca
 8003cbc:	200005d5 	.word	0x200005d5
 8003cc0:	200005cc 	.word	0x200005cc
 8003cc4:	200005ce 	.word	0x200005ce
 8003cc8:	200005d4 	.word	0x200005d4
 8003ccc:	200005d2 	.word	0x200005d2
 8003cd0:	200005d0 	.word	0x200005d0
 8003cd4:	200005d6 	.word	0x200005d6
 8003cd8:	40020400 	.word	0x40020400
 8003cdc:	080072a4 	.word	0x080072a4

08003ce0 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	80fb      	strh	r3, [r7, #6]
 8003cea:	460b      	mov	r3, r1
 8003cec:	80bb      	strh	r3, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 8003cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	db52      	blt.n	8003da0 <LCD_DrawPixel+0xc0>
 8003cfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	db4e      	blt.n	8003da0 <LCD_DrawPixel+0xc0>
 8003d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d06:	2bef      	cmp	r3, #239	; 0xef
 8003d08:	dc4a      	bgt.n	8003da0 <LCD_DrawPixel+0xc0>
 8003d0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d0e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d12:	da45      	bge.n	8003da0 <LCD_DrawPixel+0xc0>
		return;

	LCD_CS_LOW();
 8003d14:	2200      	movs	r2, #0
 8003d16:	2100      	movs	r1, #0
 8003d18:	4823      	ldr	r0, [pc, #140]	; (8003da8 <LCD_DrawPixel+0xc8>)
 8003d1a:	f7ff faf1 	bl	8003300 <gpio_write>

	int16_t t;
	switch (m_rotation) {
 8003d1e:	4b23      	ldr	r3, [pc, #140]	; (8003dac <LCD_DrawPixel+0xcc>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d01c      	beq.n	8003d60 <LCD_DrawPixel+0x80>
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	dc25      	bgt.n	8003d76 <LCD_DrawPixel+0x96>
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d002      	beq.n	8003d34 <LCD_DrawPixel+0x54>
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d00a      	beq.n	8003d48 <LCD_DrawPixel+0x68>
 8003d32:	e020      	b.n	8003d76 <LCD_DrawPixel+0x96>
	case 1:
		t = x;
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 8003d38:	88bb      	ldrh	r3, [r7, #4]
 8003d3a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	80fb      	strh	r3, [r7, #6]
		y = t;
 8003d42:	89fb      	ldrh	r3, [r7, #14]
 8003d44:	80bb      	strh	r3, [r7, #4]
		break;
 8003d46:	e016      	b.n	8003d76 <LCD_DrawPixel+0x96>
	case 2:
		x = TFTWIDTH - 1 - x;
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8003d52:	88bb      	ldrh	r3, [r7, #4]
 8003d54:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003d58:	3301      	adds	r3, #1
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	80bb      	strh	r3, [r7, #4]
		break;
 8003d5e:	e00a      	b.n	8003d76 <LCD_DrawPixel+0x96>
	case 3:
		t = x;
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	81fb      	strh	r3, [r7, #14]
		x = y;
 8003d64:	88bb      	ldrh	r3, [r7, #4]
 8003d66:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 8003d68:	89fb      	ldrh	r3, [r7, #14]
 8003d6a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003d6e:	3301      	adds	r3, #1
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	80bb      	strh	r3, [r7, #4]
		break;
 8003d74:	bf00      	nop
	}

	LCD_WriteRegister16(0x0020, x);
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	2020      	movs	r0, #32
 8003d7c:	f000 fd6a 	bl	8004854 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8003d80:	88bb      	ldrh	r3, [r7, #4]
 8003d82:	4619      	mov	r1, r3
 8003d84:	2021      	movs	r0, #33	; 0x21
 8003d86:	f000 fd65 	bl	8004854 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	2022      	movs	r0, #34	; 0x22
 8003d90:	f000 fd60 	bl	8004854 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8003d94:	2201      	movs	r2, #1
 8003d96:	2100      	movs	r1, #0
 8003d98:	4803      	ldr	r0, [pc, #12]	; (8003da8 <LCD_DrawPixel+0xc8>)
 8003d9a:	f7ff fab1 	bl	8003300 <gpio_write>
 8003d9e:	e000      	b.n	8003da2 <LCD_DrawPixel+0xc2>
		return;
 8003da0:	bf00      	nop
}
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40020400 	.word	0x40020400
 8003dac:	200005d5 	.word	0x200005d5

08003db0 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	80fb      	strh	r3, [r7, #6]
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	80bb      	strh	r3, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	70fb      	strb	r3, [r7, #3]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	803b      	strh	r3, [r7, #0]
	if ((x >= m_width) || // Clip right
 8003dce:	4b6e      	ldr	r3, [pc, #440]	; (8003f88 <LCD_DrawChar+0x1d8>)
 8003dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	f280 80d0 	bge.w	8003f7e <LCD_DrawChar+0x1ce>
			(y >= m_height) || // Clip bottom
 8003dde:	4b6b      	ldr	r3, [pc, #428]	; (8003f8c <LCD_DrawChar+0x1dc>)
 8003de0:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8003de4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	f280 80c8 	bge.w	8003f7e <LCD_DrawChar+0x1ce>
			((x + 6 * size - 1) < 0) || // Clip left
 8003dee:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003df2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003df6:	4613      	mov	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4413      	add	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	440b      	add	r3, r1
			(y >= m_height) || // Clip bottom
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f340 80bc 	ble.w	8003f7e <LCD_DrawChar+0x1ce>
			((y + 8 * size - 1) < 0))   // Clip top
 8003e06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003e0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
			((x + 6 * size - 1) < 0) || // Clip left
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f340 80b3 	ble.w	8003f7e <LCD_DrawChar+0x1ce>
		return;

	for (int8_t i = 0; i < 6; i++) {
 8003e18:	2300      	movs	r3, #0
 8003e1a:	73fb      	strb	r3, [r7, #15]
 8003e1c:	e0a9      	b.n	8003f72 <LCD_DrawChar+0x1c2>
		uint8_t line;
		if (i == 5) {
 8003e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e22:	2b05      	cmp	r3, #5
 8003e24:	d102      	bne.n	8003e2c <LCD_DrawChar+0x7c>
			line = 0x0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73bb      	strb	r3, [r7, #14]
 8003e2a:	e09c      	b.n	8003f66 <LCD_DrawChar+0x1b6>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	441a      	add	r2, r3
 8003e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e38:	4413      	add	r3, r2
 8003e3a:	4a55      	ldr	r2, [pc, #340]	; (8003f90 <LCD_DrawChar+0x1e0>)
 8003e3c:	5cd3      	ldrb	r3, [r2, r3]
 8003e3e:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8003e40:	2300      	movs	r3, #0
 8003e42:	737b      	strb	r3, [r7, #13]
 8003e44:	e08a      	b.n	8003f5c <LCD_DrawChar+0x1ac>
				if (line & 0x1) {
 8003e46:	7bbb      	ldrb	r3, [r7, #14]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d03c      	beq.n	8003eca <LCD_DrawChar+0x11a>
					if (size == 1) { // default size
 8003e50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d112      	bne.n	8003e7e <LCD_DrawChar+0xce>
						LCD_DrawPixel(x + i, y + j, color);
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	4413      	add	r3, r2
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	b218      	sxth	r0, r3
 8003e66:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	88bb      	ldrh	r3, [r7, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	b21b      	sxth	r3, r3
 8003e74:	883a      	ldrh	r2, [r7, #0]
 8003e76:	4619      	mov	r1, r3
 8003e78:	f7ff ff32 	bl	8003ce0 <LCD_DrawPixel>
 8003e7c:	e065      	b.n	8003f4a <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 8003e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	fb12 f303 	smulbb	r3, r2, r3
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	4413      	add	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	b218      	sxth	r0, r3
 8003e98:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	fb12 f303 	smulbb	r3, r2, r3
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	88bb      	ldrh	r3, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	b219      	sxth	r1, r3
 8003eb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003eb6:	b21a      	sxth	r2, r3
 8003eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ebc:	b21c      	sxth	r4, r3
 8003ebe:	883b      	ldrh	r3, [r7, #0]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	f000 f866 	bl	8003f94 <LCD_FillRect>
 8003ec8:	e03f      	b.n	8003f4a <LCD_DrawChar+0x19a>
								color);
					}
				} else if (bg != color) {
 8003eca:	8c3a      	ldrh	r2, [r7, #32]
 8003ecc:	883b      	ldrh	r3, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d03b      	beq.n	8003f4a <LCD_DrawChar+0x19a>
					if (size == 1) { // default size
 8003ed2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d112      	bne.n	8003f00 <LCD_DrawChar+0x150>
						LCD_DrawPixel(x + i, y + j, bg);
 8003eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b218      	sxth	r0, r3
 8003ee8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	88bb      	ldrh	r3, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	b21b      	sxth	r3, r3
 8003ef6:	8c3a      	ldrh	r2, [r7, #32]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	f7ff fef1 	bl	8003ce0 <LCD_DrawPixel>
 8003efe:	e024      	b.n	8003f4a <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 8003f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	fb12 f303 	smulbb	r3, r2, r3
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	4413      	add	r3, r2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	b218      	sxth	r0, r3
 8003f1a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	fb12 f303 	smulbb	r3, r2, r3
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	88bb      	ldrh	r3, [r7, #4]
 8003f2e:	4413      	add	r3, r2
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	b219      	sxth	r1, r3
 8003f34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f38:	b21a      	sxth	r2, r3
 8003f3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f3e:	b21c      	sxth	r4, r3
 8003f40:	8c3b      	ldrh	r3, [r7, #32]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4623      	mov	r3, r4
 8003f46:	f000 f825 	bl	8003f94 <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 8003f4a:	7bbb      	ldrb	r3, [r7, #14]
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8003f50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	737b      	strb	r3, [r7, #13]
 8003f5c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003f60:	2b07      	cmp	r3, #7
 8003f62:	f77f af70 	ble.w	8003e46 <LCD_DrawChar+0x96>
	for (int8_t i = 0; i < 6; i++) {
 8003f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	73fb      	strb	r3, [r7, #15]
 8003f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	f77f af51 	ble.w	8003e1e <LCD_DrawChar+0x6e>
 8003f7c:	e000      	b.n	8003f80 <LCD_DrawChar+0x1d0>
		return;
 8003f7e:	bf00      	nop
			}
		}
	}
}
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd90      	pop	{r4, r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200005c8 	.word	0x200005c8
 8003f8c:	200005ca 	.word	0x200005ca
 8003f90:	08007024 	.word	0x08007024

08003f94 <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4623      	mov	r3, r4
 8003fa4:	80fb      	strh	r3, [r7, #6]
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	80bb      	strh	r3, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	807b      	strh	r3, [r7, #2]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	803b      	strh	r3, [r7, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 8003fb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f340 808b 	ble.w	80040d2 <LCD_FillRect+0x13e>
 8003fbc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f340 8086 	ble.w	80040d2 <LCD_FillRect+0x13e>
 8003fc6:	4b45      	ldr	r3, [pc, #276]	; (80040dc <LCD_FillRect+0x148>)
 8003fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fcc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	da7e      	bge.n	80040d2 <LCD_FillRect+0x13e>
 8003fd4:	4b42      	ldr	r3, [pc, #264]	; (80040e0 <LCD_FillRect+0x14c>)
 8003fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fda:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	da77      	bge.n	80040d2 <LCD_FillRect+0x13e>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	887b      	ldrh	r3, [r7, #2]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	81fb      	strh	r3, [r7, #14]
 8003ff0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	db6c      	blt.n	80040d2 <LCD_FillRect+0x13e>
 8003ff8:	88ba      	ldrh	r2, [r7, #4]
 8003ffa:	883b      	ldrh	r3, [r7, #0]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29b      	uxth	r3, r3
 8004004:	81bb      	strh	r3, [r7, #12]
 8004006:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	db61      	blt.n	80040d2 <LCD_FillRect+0x13e>
		return;
	if (x < 0) { // Clip left
 800400e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004012:	2b00      	cmp	r3, #0
 8004014:	da06      	bge.n	8004024 <LCD_FillRect+0x90>
		w += x;
 8004016:	887a      	ldrh	r2, [r7, #2]
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	4413      	add	r3, r2
 800401c:	b29b      	uxth	r3, r3
 800401e:	807b      	strh	r3, [r7, #2]
		x = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	80fb      	strh	r3, [r7, #6]
	}
	if (y1 < 0) { // Clip top
 8004024:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	da06      	bge.n	800403a <LCD_FillRect+0xa6>
		h += y1;
 800402c:	883a      	ldrh	r2, [r7, #0]
 800402e:	88bb      	ldrh	r3, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	803b      	strh	r3, [r7, #0]
		y1 = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	80bb      	strh	r3, [r7, #4]
	}
	if (x2 >= m_width) { // Clip right
 800403a:	4b28      	ldr	r3, [pc, #160]	; (80040dc <LCD_FillRect+0x148>)
 800403c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004040:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004044:	429a      	cmp	r2, r3
 8004046:	db0d      	blt.n	8004064 <LCD_FillRect+0xd0>
		x2 = m_width - 1;
 8004048:	4b24      	ldr	r3, [pc, #144]	; (80040dc <LCD_FillRect+0x148>)
 800404a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29b      	uxth	r3, r3
 8004054:	81fb      	strh	r3, [r7, #14]
		w = x2 - x + 1;
 8004056:	89fa      	ldrh	r2, [r7, #14]
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	b29b      	uxth	r3, r3
 800405e:	3301      	adds	r3, #1
 8004060:	b29b      	uxth	r3, r3
 8004062:	807b      	strh	r3, [r7, #2]
	}
	if (y2 >= m_height) { // Clip bottom
 8004064:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <LCD_FillRect+0x14c>)
 8004066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800406a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800406e:	429a      	cmp	r2, r3
 8004070:	db0d      	blt.n	800408e <LCD_FillRect+0xfa>
		y2 = m_height - 1;
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <LCD_FillRect+0x14c>)
 8004074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29b      	uxth	r3, r3
 800407e:	81bb      	strh	r3, [r7, #12]
		h = y2 - y1 + 1;
 8004080:	89ba      	ldrh	r2, [r7, #12]
 8004082:	88bb      	ldrh	r3, [r7, #4]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	b29b      	uxth	r3, r3
 8004088:	3301      	adds	r3, #1
 800408a:	b29b      	uxth	r3, r3
 800408c:	803b      	strh	r3, [r7, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 800408e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004092:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004096:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800409a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800409e:	f000 faed 	bl	800467c <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 80040a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80040aa:	fb03 f202 	mul.w	r2, r3, r2
 80040ae:	8c3b      	ldrh	r3, [r7, #32]
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f858 	bl	8004168 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <LCD_FillRect+0x148>)
 80040ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040be:	1e5a      	subs	r2, r3, #1
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <LCD_FillRect+0x14c>)
 80040c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	2100      	movs	r1, #0
 80040ca:	2000      	movs	r0, #0
 80040cc:	f000 fad6 	bl	800467c <LCD_SetAddrWindow>
 80040d0:	e000      	b.n	80040d4 <LCD_FillRect+0x140>
		return;
 80040d2:	bf00      	nop
}
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}
 80040da:	bf00      	nop
 80040dc:	200005c8 	.word	0x200005c8
 80040e0:	200005ca 	.word	0x200005ca

080040e4 <LCD_FillScreen>:
 * 
 * \param color	Color
 * 
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	80fb      	strh	r3, [r7, #6]
	// state, just need to set the address pointer to the top-left corner.
	// Although we could fill in any direction, the code uses the current
	// screen rotation because some users find it disconcerting when a
	// fill does not occur top-to-bottom.
	uint16_t x, y;
	switch (m_rotation) {
 80040ee:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <LCD_FillScreen+0x7c>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d015      	beq.n	8004122 <LCD_FillScreen+0x3e>
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	dc03      	bgt.n	8004102 <LCD_FillScreen+0x1e>
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d006      	beq.n	800410c <LCD_FillScreen+0x28>
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d009      	beq.n	8004116 <LCD_FillScreen+0x32>
	default:
		x = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	81bb      	strh	r3, [r7, #12]
		break;
 800410a:	e010      	b.n	800412e <LCD_FillScreen+0x4a>
	case 1:
		x = TFTWIDTH - 1;
 800410c:	23ef      	movs	r3, #239	; 0xef
 800410e:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	81bb      	strh	r3, [r7, #12]
		break;
 8004114:	e00b      	b.n	800412e <LCD_FillScreen+0x4a>
	case 2:
		x = TFTWIDTH - 1;
 8004116:	23ef      	movs	r3, #239	; 0xef
 8004118:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 800411a:	f240 133f 	movw	r3, #319	; 0x13f
 800411e:	81bb      	strh	r3, [r7, #12]
		break;
 8004120:	e005      	b.n	800412e <LCD_FillScreen+0x4a>
	case 3:
		x = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8004126:	f240 133f 	movw	r3, #319	; 0x13f
 800412a:	81bb      	strh	r3, [r7, #12]
		break;
 800412c:	bf00      	nop
	}
	LCD_CS_LOW();
 800412e:	2200      	movs	r2, #0
 8004130:	2100      	movs	r1, #0
 8004132:	480c      	ldr	r0, [pc, #48]	; (8004164 <LCD_FillScreen+0x80>)
 8004134:	f7ff f8e4 	bl	8003300 <gpio_write>
	LCD_WriteRegister16(0x0020, x);
 8004138:	89fb      	ldrh	r3, [r7, #14]
 800413a:	4619      	mov	r1, r3
 800413c:	2020      	movs	r0, #32
 800413e:	f000 fb89 	bl	8004854 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8004142:	89bb      	ldrh	r3, [r7, #12]
 8004144:	4619      	mov	r1, r3
 8004146:	2021      	movs	r0, #33	; 0x21
 8004148:	f000 fb84 	bl	8004854 <LCD_WriteRegister16>

	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f808 	bl	8004168 <LCD_Flood>
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	200005d5 	.word	0x200005d5
 8004164:	40020400 	.word	0x40020400

08004168 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	b29b      	uxth	r3, r3
 800417a:	733b      	strb	r3, [r7, #12]
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	72fb      	strb	r3, [r7, #11]

	LCD_CS_LOW();
 8004180:	2200      	movs	r2, #0
 8004182:	2100      	movs	r1, #0
 8004184:	4895      	ldr	r0, [pc, #596]	; (80043dc <LCD_Flood+0x274>)
 8004186:	f7ff f8bb 	bl	8003300 <gpio_write>
	LCD_CD_LOW();
 800418a:	2200      	movs	r2, #0
 800418c:	2104      	movs	r1, #4
 800418e:	4894      	ldr	r0, [pc, #592]	; (80043e0 <LCD_Flood+0x278>)
 8004190:	f7ff f8b6 	bl	8003300 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 8004194:	2000      	movs	r0, #0
 8004196:	f000 fb01 	bl	800479c <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 800419a:	2022      	movs	r0, #34	; 0x22
 800419c:	f000 fafe 	bl	800479c <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 80041a0:	2201      	movs	r2, #1
 80041a2:	2104      	movs	r1, #4
 80041a4:	488e      	ldr	r0, [pc, #568]	; (80043e0 <LCD_Flood+0x278>)
 80041a6:	f7ff f8ab 	bl	8003300 <gpio_write>
	LCD_Write8(hi);
 80041aa:	7b3b      	ldrb	r3, [r7, #12]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 faf5 	bl	800479c <LCD_Write8>
	LCD_Write8(lo);
 80041b2:	7afb      	ldrb	r3, [r7, #11]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 faf1 	bl	800479c <LCD_Write8>
	len--;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	3b01      	subs	r3, #1
 80041be:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	81fb      	strh	r3, [r7, #14]
	if (hi == lo) {
 80041c6:	7b3a      	ldrb	r2, [r7, #12]
 80041c8:	7afb      	ldrb	r3, [r7, #11]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	f040 80e4 	bne.w	8004398 <LCD_Flood+0x230>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 80041d0:	e088      	b.n	80042e4 <LCD_Flood+0x17c>
			i = 16; // 64 pixels/block / 4 pixels/pass
 80041d2:	2310      	movs	r3, #16
 80041d4:	737b      	strb	r3, [r7, #13]
			do {
				LCD_WR_STROBE();
 80041d6:	2200      	movs	r2, #0
 80041d8:	2101      	movs	r1, #1
 80041da:	4881      	ldr	r0, [pc, #516]	; (80043e0 <LCD_Flood+0x278>)
 80041dc:	f7ff f890 	bl	8003300 <gpio_write>
 80041e0:	2001      	movs	r0, #1
 80041e2:	f7ff fc7f 	bl	8003ae4 <delay>
 80041e6:	2201      	movs	r2, #1
 80041e8:	2101      	movs	r1, #1
 80041ea:	487d      	ldr	r0, [pc, #500]	; (80043e0 <LCD_Flood+0x278>)
 80041ec:	f7ff f888 	bl	8003300 <gpio_write>
 80041f0:	2001      	movs	r0, #1
 80041f2:	f7ff fc77 	bl	8003ae4 <delay>
				LCD_WR_STROBE();
 80041f6:	2200      	movs	r2, #0
 80041f8:	2101      	movs	r1, #1
 80041fa:	4879      	ldr	r0, [pc, #484]	; (80043e0 <LCD_Flood+0x278>)
 80041fc:	f7ff f880 	bl	8003300 <gpio_write>
 8004200:	2001      	movs	r0, #1
 8004202:	f7ff fc6f 	bl	8003ae4 <delay>
 8004206:	2201      	movs	r2, #1
 8004208:	2101      	movs	r1, #1
 800420a:	4875      	ldr	r0, [pc, #468]	; (80043e0 <LCD_Flood+0x278>)
 800420c:	f7ff f878 	bl	8003300 <gpio_write>
 8004210:	2001      	movs	r0, #1
 8004212:	f7ff fc67 	bl	8003ae4 <delay>
				LCD_WR_STROBE();
 8004216:	2200      	movs	r2, #0
 8004218:	2101      	movs	r1, #1
 800421a:	4871      	ldr	r0, [pc, #452]	; (80043e0 <LCD_Flood+0x278>)
 800421c:	f7ff f870 	bl	8003300 <gpio_write>
 8004220:	2001      	movs	r0, #1
 8004222:	f7ff fc5f 	bl	8003ae4 <delay>
 8004226:	2201      	movs	r2, #1
 8004228:	2101      	movs	r1, #1
 800422a:	486d      	ldr	r0, [pc, #436]	; (80043e0 <LCD_Flood+0x278>)
 800422c:	f7ff f868 	bl	8003300 <gpio_write>
 8004230:	2001      	movs	r0, #1
 8004232:	f7ff fc57 	bl	8003ae4 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 8004236:	2200      	movs	r2, #0
 8004238:	2101      	movs	r1, #1
 800423a:	4869      	ldr	r0, [pc, #420]	; (80043e0 <LCD_Flood+0x278>)
 800423c:	f7ff f860 	bl	8003300 <gpio_write>
 8004240:	2001      	movs	r0, #1
 8004242:	f7ff fc4f 	bl	8003ae4 <delay>
 8004246:	2201      	movs	r2, #1
 8004248:	2101      	movs	r1, #1
 800424a:	4865      	ldr	r0, [pc, #404]	; (80043e0 <LCD_Flood+0x278>)
 800424c:	f7ff f858 	bl	8003300 <gpio_write>
 8004250:	2001      	movs	r0, #1
 8004252:	f7ff fc47 	bl	8003ae4 <delay>
				LCD_WR_STROBE();
 8004256:	2200      	movs	r2, #0
 8004258:	2101      	movs	r1, #1
 800425a:	4861      	ldr	r0, [pc, #388]	; (80043e0 <LCD_Flood+0x278>)
 800425c:	f7ff f850 	bl	8003300 <gpio_write>
 8004260:	2001      	movs	r0, #1
 8004262:	f7ff fc3f 	bl	8003ae4 <delay>
 8004266:	2201      	movs	r2, #1
 8004268:	2101      	movs	r1, #1
 800426a:	485d      	ldr	r0, [pc, #372]	; (80043e0 <LCD_Flood+0x278>)
 800426c:	f7ff f848 	bl	8003300 <gpio_write>
 8004270:	2001      	movs	r0, #1
 8004272:	f7ff fc37 	bl	8003ae4 <delay>
				LCD_WR_STROBE();
 8004276:	2200      	movs	r2, #0
 8004278:	2101      	movs	r1, #1
 800427a:	4859      	ldr	r0, [pc, #356]	; (80043e0 <LCD_Flood+0x278>)
 800427c:	f7ff f840 	bl	8003300 <gpio_write>
 8004280:	2001      	movs	r0, #1
 8004282:	f7ff fc2f 	bl	8003ae4 <delay>
 8004286:	2201      	movs	r2, #1
 8004288:	2101      	movs	r1, #1
 800428a:	4855      	ldr	r0, [pc, #340]	; (80043e0 <LCD_Flood+0x278>)
 800428c:	f7ff f838 	bl	8003300 <gpio_write>
 8004290:	2001      	movs	r0, #1
 8004292:	f7ff fc27 	bl	8003ae4 <delay>
				LCD_WR_STROBE();
 8004296:	2200      	movs	r2, #0
 8004298:	2101      	movs	r1, #1
 800429a:	4851      	ldr	r0, [pc, #324]	; (80043e0 <LCD_Flood+0x278>)
 800429c:	f7ff f830 	bl	8003300 <gpio_write>
 80042a0:	2001      	movs	r0, #1
 80042a2:	f7ff fc1f 	bl	8003ae4 <delay>
 80042a6:	2201      	movs	r2, #1
 80042a8:	2101      	movs	r1, #1
 80042aa:	484d      	ldr	r0, [pc, #308]	; (80043e0 <LCD_Flood+0x278>)
 80042ac:	f7ff f828 	bl	8003300 <gpio_write>
 80042b0:	2001      	movs	r0, #1
 80042b2:	f7ff fc17 	bl	8003ae4 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 80042b6:	2200      	movs	r2, #0
 80042b8:	2101      	movs	r1, #1
 80042ba:	4849      	ldr	r0, [pc, #292]	; (80043e0 <LCD_Flood+0x278>)
 80042bc:	f7ff f820 	bl	8003300 <gpio_write>
 80042c0:	2001      	movs	r0, #1
 80042c2:	f7ff fc0f 	bl	8003ae4 <delay>
 80042c6:	2201      	movs	r2, #1
 80042c8:	2101      	movs	r1, #1
 80042ca:	4845      	ldr	r0, [pc, #276]	; (80043e0 <LCD_Flood+0x278>)
 80042cc:	f7ff f818 	bl	8003300 <gpio_write>
 80042d0:	2001      	movs	r0, #1
 80042d2:	f7ff fc07 	bl	8003ae4 <delay>
			} while (--i);
 80042d6:	7b7b      	ldrb	r3, [r7, #13]
 80042d8:	3b01      	subs	r3, #1
 80042da:	737b      	strb	r3, [r7, #13]
 80042dc:	7b7b      	ldrb	r3, [r7, #13]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f47f af79 	bne.w	80041d6 <LCD_Flood+0x6e>
		while (blocks--) {
 80042e4:	89fb      	ldrh	r3, [r7, #14]
 80042e6:	1e5a      	subs	r2, r3, #1
 80042e8:	81fa      	strh	r2, [r7, #14]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f47f af71 	bne.w	80041d2 <LCD_Flood+0x6a>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f8:	737b      	strb	r3, [r7, #13]
 80042fa:	e01f      	b.n	800433c <LCD_Flood+0x1d4>
			LCD_WR_STROBE();
 80042fc:	2200      	movs	r2, #0
 80042fe:	2101      	movs	r1, #1
 8004300:	4837      	ldr	r0, [pc, #220]	; (80043e0 <LCD_Flood+0x278>)
 8004302:	f7fe fffd 	bl	8003300 <gpio_write>
 8004306:	2001      	movs	r0, #1
 8004308:	f7ff fbec 	bl	8003ae4 <delay>
 800430c:	2201      	movs	r2, #1
 800430e:	2101      	movs	r1, #1
 8004310:	4833      	ldr	r0, [pc, #204]	; (80043e0 <LCD_Flood+0x278>)
 8004312:	f7fe fff5 	bl	8003300 <gpio_write>
 8004316:	2001      	movs	r0, #1
 8004318:	f7ff fbe4 	bl	8003ae4 <delay>
			LCD_WR_STROBE();
 800431c:	2200      	movs	r2, #0
 800431e:	2101      	movs	r1, #1
 8004320:	482f      	ldr	r0, [pc, #188]	; (80043e0 <LCD_Flood+0x278>)
 8004322:	f7fe ffed 	bl	8003300 <gpio_write>
 8004326:	2001      	movs	r0, #1
 8004328:	f7ff fbdc 	bl	8003ae4 <delay>
 800432c:	2201      	movs	r2, #1
 800432e:	2101      	movs	r1, #1
 8004330:	482b      	ldr	r0, [pc, #172]	; (80043e0 <LCD_Flood+0x278>)
 8004332:	f7fe ffe5 	bl	8003300 <gpio_write>
 8004336:	2001      	movs	r0, #1
 8004338:	f7ff fbd4 	bl	8003ae4 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 800433c:	7b7b      	ldrb	r3, [r7, #13]
 800433e:	1e5a      	subs	r2, r3, #1
 8004340:	737a      	strb	r2, [r7, #13]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1da      	bne.n	80042fc <LCD_Flood+0x194>
 8004346:	e03f      	b.n	80043c8 <LCD_Flood+0x260>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 8004348:	2310      	movs	r3, #16
 800434a:	737b      	strb	r3, [r7, #13]
			do {
				LCD_Write8(hi);
 800434c:	7b3b      	ldrb	r3, [r7, #12]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fa24 	bl	800479c <LCD_Write8>
				LCD_Write8(lo);
 8004354:	7afb      	ldrb	r3, [r7, #11]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fa20 	bl	800479c <LCD_Write8>
				LCD_Write8(hi);
 800435c:	7b3b      	ldrb	r3, [r7, #12]
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fa1c 	bl	800479c <LCD_Write8>
				LCD_Write8(lo);
 8004364:	7afb      	ldrb	r3, [r7, #11]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fa18 	bl	800479c <LCD_Write8>
				LCD_Write8(hi);
 800436c:	7b3b      	ldrb	r3, [r7, #12]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fa14 	bl	800479c <LCD_Write8>
				LCD_Write8(lo);
 8004374:	7afb      	ldrb	r3, [r7, #11]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fa10 	bl	800479c <LCD_Write8>
				LCD_Write8(hi);
 800437c:	7b3b      	ldrb	r3, [r7, #12]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fa0c 	bl	800479c <LCD_Write8>
				LCD_Write8(lo);
 8004384:	7afb      	ldrb	r3, [r7, #11]
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fa08 	bl	800479c <LCD_Write8>
			} while (--i);
 800438c:	7b7b      	ldrb	r3, [r7, #13]
 800438e:	3b01      	subs	r3, #1
 8004390:	737b      	strb	r3, [r7, #13]
 8004392:	7b7b      	ldrb	r3, [r7, #13]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1d9      	bne.n	800434c <LCD_Flood+0x1e4>
		while (blocks--) {
 8004398:	89fb      	ldrh	r3, [r7, #14]
 800439a:	1e5a      	subs	r2, r3, #1
 800439c:	81fa      	strh	r2, [r7, #14]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1d2      	bne.n	8004348 <LCD_Flood+0x1e0>
		}
		for (i = (uint8_t) len & 63; i--;) {
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043aa:	737b      	strb	r3, [r7, #13]
 80043ac:	e007      	b.n	80043be <LCD_Flood+0x256>
			LCD_Write8(hi);
 80043ae:	7b3b      	ldrb	r3, [r7, #12]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f9f3 	bl	800479c <LCD_Write8>
			LCD_Write8(lo);
 80043b6:	7afb      	ldrb	r3, [r7, #11]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f9ef 	bl	800479c <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 80043be:	7b7b      	ldrb	r3, [r7, #13]
 80043c0:	1e5a      	subs	r2, r3, #1
 80043c2:	737a      	strb	r2, [r7, #13]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f2      	bne.n	80043ae <LCD_Flood+0x246>
		}
	}
	LCD_CS_HIGH();
 80043c8:	2201      	movs	r2, #1
 80043ca:	2100      	movs	r1, #0
 80043cc:	4803      	ldr	r0, [pc, #12]	; (80043dc <LCD_Flood+0x274>)
 80043ce:	f7fe ff97 	bl	8003300 <gpio_write>
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40020400 	.word	0x40020400
 80043e0:	40020000 	.word	0x40020000

080043e4 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 80043e4:	b40f      	push	{r0, r1, r2, r3}
 80043e6:	b5b0      	push	{r4, r5, r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 80043ec:	f107 031c 	add.w	r3, r7, #28
 80043f0:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	69b9      	ldr	r1, [r7, #24]
 80043f6:	483d      	ldr	r0, [pc, #244]	; (80044ec <LCD_Printf+0x108>)
 80043f8:	f002 fa2c 	bl	8006854 <vsiprintf>
	va_end(lst);

	p = buf;
 80043fc:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <LCD_Printf+0x108>)
 80043fe:	607b      	str	r3, [r7, #4]
	while (*p) {
 8004400:	e068      	b.n	80044d4 <LCD_Printf+0xf0>
		if (*p == '\n') {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b0a      	cmp	r3, #10
 8004408:	d111      	bne.n	800442e <LCD_Printf+0x4a>
			m_cursor_y += m_textsize * 8;
 800440a:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <LCD_Printf+0x10c>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	b29a      	uxth	r2, r3
 8004414:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <LCD_Printf+0x110>)
 8004416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800441a:	b29b      	uxth	r3, r3
 800441c:	4413      	add	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	b21a      	sxth	r2, r3
 8004422:	4b34      	ldr	r3, [pc, #208]	; (80044f4 <LCD_Printf+0x110>)
 8004424:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8004426:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <LCD_Printf+0x114>)
 8004428:	2200      	movs	r2, #0
 800442a:	801a      	strh	r2, [r3, #0]
 800442c:	e04f      	b.n	80044ce <LCD_Printf+0xea>
		} else if (*p == '\r') {
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b0d      	cmp	r3, #13
 8004434:	d04b      	beq.n	80044ce <LCD_Printf+0xea>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8004436:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <LCD_Printf+0x114>)
 8004438:	f9b3 0000 	ldrsh.w	r0, [r3]
 800443c:	4b2d      	ldr	r3, [pc, #180]	; (80044f4 <LCD_Printf+0x110>)
 800443e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	781c      	ldrb	r4, [r3, #0]
 8004446:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <LCD_Printf+0x118>)
 8004448:	881d      	ldrh	r5, [r3, #0]
 800444a:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <LCD_Printf+0x11c>)
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <LCD_Printf+0x10c>)
 8004450:	7812      	ldrb	r2, [r2, #0]
 8004452:	9201      	str	r2, [sp, #4]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	462b      	mov	r3, r5
 8004458:	4622      	mov	r2, r4
 800445a:	f7ff fca9 	bl	8003db0 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 800445e:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <LCD_Printf+0x10c>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	0052      	lsls	r2, r2, #1
 8004468:	4413      	add	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <LCD_Printf+0x114>)
 8004470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004474:	b29b      	uxth	r3, r3
 8004476:	4413      	add	r3, r2
 8004478:	b29b      	uxth	r3, r3
 800447a:	b21a      	sxth	r2, r3
 800447c:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <LCD_Printf+0x114>)
 800447e:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 8004480:	4b20      	ldr	r3, [pc, #128]	; (8004504 <LCD_Printf+0x120>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d022      	beq.n	80044ce <LCD_Printf+0xea>
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <LCD_Printf+0x114>)
 800448a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800448e:	4619      	mov	r1, r3
 8004490:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <LCD_Printf+0x124>)
 8004492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004496:	4618      	mov	r0, r3
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <LCD_Printf+0x10c>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	4613      	mov	r3, r2
 80044a0:	0092      	lsls	r2, r2, #2
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4403      	add	r3, r0
 80044a8:	4299      	cmp	r1, r3
 80044aa:	dd10      	ble.n	80044ce <LCD_Printf+0xea>
				m_cursor_y += m_textsize * 8;
 80044ac:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <LCD_Printf+0x10c>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <LCD_Printf+0x110>)
 80044b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	4413      	add	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b21a      	sxth	r2, r3
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <LCD_Printf+0x110>)
 80044c6:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <LCD_Printf+0x114>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3301      	adds	r3, #1
 80044d2:	607b      	str	r3, [r7, #4]
	while (*p) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d192      	bne.n	8004402 <LCD_Printf+0x1e>
	}
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80044e8:	b004      	add	sp, #16
 80044ea:	4770      	bx	lr
 80044ec:	200005d8 	.word	0x200005d8
 80044f0:	200005d4 	.word	0x200005d4
 80044f4:	200005ce 	.word	0x200005ce
 80044f8:	200005cc 	.word	0x200005cc
 80044fc:	200005d0 	.word	0x200005d0
 8004500:	200005d2 	.word	0x200005d2
 8004504:	200005d6 	.word	0x200005d6
 8004508:	200005c8 	.word	0x200005c8

0800450c <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8004512:	2201      	movs	r2, #1
 8004514:	2100      	movs	r1, #0
 8004516:	4824      	ldr	r0, [pc, #144]	; (80045a8 <LCD_Reset+0x9c>)
 8004518:	f7fe fef2 	bl	8003300 <gpio_write>
	LCD_WR_HIGH();
 800451c:	2201      	movs	r2, #1
 800451e:	2101      	movs	r1, #1
 8004520:	4822      	ldr	r0, [pc, #136]	; (80045ac <LCD_Reset+0xa0>)
 8004522:	f7fe feed 	bl	8003300 <gpio_write>
	LCD_RD_HIGH();
 8004526:	2201      	movs	r2, #1
 8004528:	2100      	movs	r1, #0
 800452a:	4820      	ldr	r0, [pc, #128]	; (80045ac <LCD_Reset+0xa0>)
 800452c:	f7fe fee8 	bl	8003300 <gpio_write>

	LCD_RST_LOW();
 8004530:	2200      	movs	r2, #0
 8004532:	2101      	movs	r1, #1
 8004534:	481e      	ldr	r0, [pc, #120]	; (80045b0 <LCD_Reset+0xa4>)
 8004536:	f7fe fee3 	bl	8003300 <gpio_write>
	delay(100);
 800453a:	2064      	movs	r0, #100	; 0x64
 800453c:	f7ff fad2 	bl	8003ae4 <delay>
	LCD_RST_HIGH();
 8004540:	2201      	movs	r2, #1
 8004542:	2101      	movs	r1, #1
 8004544:	481a      	ldr	r0, [pc, #104]	; (80045b0 <LCD_Reset+0xa4>)
 8004546:	f7fe fedb 	bl	8003300 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 800454a:	2200      	movs	r2, #0
 800454c:	2100      	movs	r1, #0
 800454e:	4816      	ldr	r0, [pc, #88]	; (80045a8 <LCD_Reset+0x9c>)
 8004550:	f7fe fed6 	bl	8003300 <gpio_write>

	LCD_CD_LOW();
 8004554:	2200      	movs	r2, #0
 8004556:	2104      	movs	r1, #4
 8004558:	4814      	ldr	r0, [pc, #80]	; (80045ac <LCD_Reset+0xa0>)
 800455a:	f7fe fed1 	bl	8003300 <gpio_write>
	LCD_Write8(0x00);
 800455e:	2000      	movs	r0, #0
 8004560:	f000 f91c 	bl	800479c <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 8004564:	2300      	movs	r3, #0
 8004566:	71fb      	strb	r3, [r7, #7]
 8004568:	e012      	b.n	8004590 <LCD_Reset+0x84>
		LCD_WR_STROBE(); // Three extra 0x00s
 800456a:	2200      	movs	r2, #0
 800456c:	2101      	movs	r1, #1
 800456e:	480f      	ldr	r0, [pc, #60]	; (80045ac <LCD_Reset+0xa0>)
 8004570:	f7fe fec6 	bl	8003300 <gpio_write>
 8004574:	2001      	movs	r0, #1
 8004576:	f7ff fab5 	bl	8003ae4 <delay>
 800457a:	2201      	movs	r2, #1
 800457c:	2101      	movs	r1, #1
 800457e:	480b      	ldr	r0, [pc, #44]	; (80045ac <LCD_Reset+0xa0>)
 8004580:	f7fe febe 	bl	8003300 <gpio_write>
 8004584:	2001      	movs	r0, #1
 8004586:	f7ff faad 	bl	8003ae4 <delay>
	for (uint8_t i = 0; i < 3; i++)
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	3301      	adds	r3, #1
 800458e:	71fb      	strb	r3, [r7, #7]
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d9e9      	bls.n	800456a <LCD_Reset+0x5e>
	LCD_CS_HIGH();
 8004596:	2201      	movs	r2, #1
 8004598:	2100      	movs	r1, #0
 800459a:	4803      	ldr	r0, [pc, #12]	; (80045a8 <LCD_Reset+0x9c>)
 800459c:	f7fe feb0 	bl	8003300 <gpio_write>
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40020400 	.word	0x40020400
 80045ac:	40020000 	.word	0x40020000
 80045b0:	40020800 	.word	0x40020800

080045b4 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	b21a      	sxth	r2, r3
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <LCD_SetCursor+0x28>)
 80045c4:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	b21a      	sxth	r2, r3
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <LCD_SetCursor+0x2c>)
 80045cc:	801a      	strh	r2, [r3, #0]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	200005cc 	.word	0x200005cc
 80045e0:	200005ce 	.word	0x200005ce

080045e4 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
	m_textsize = (s > 0) ? s : 1;
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <LCD_SetTextSize+0x14>
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	e000      	b.n	80045fa <LCD_SetTextSize+0x16>
 80045f8:	2301      	movs	r3, #1
 80045fa:	4a04      	ldr	r2, [pc, #16]	; (800460c <LCD_SetTextSize+0x28>)
 80045fc:	7013      	strb	r3, [r2, #0]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	200005d4 	.word	0x200005d4

08004610 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	b2da      	uxtb	r2, r3
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <LCD_SetRotation+0x60>)
 8004624:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <LCD_SetRotation+0x60>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b03      	cmp	r3, #3
 800462c:	d81a      	bhi.n	8004664 <LCD_SetRotation+0x54>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <LCD_SetRotation+0x24>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004645 	.word	0x08004645
 8004638:	08004655 	.word	0x08004655
 800463c:	08004645 	.word	0x08004645
 8004640:	08004655 	.word	0x08004655
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <LCD_SetRotation+0x64>)
 8004646:	22f0      	movs	r2, #240	; 0xf0
 8004648:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <LCD_SetRotation+0x68>)
 800464c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004650:	801a      	strh	r2, [r3, #0]
		break;
 8004652:	e007      	b.n	8004664 <LCD_SetRotation+0x54>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <LCD_SetRotation+0x64>)
 8004656:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800465a:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <LCD_SetRotation+0x68>)
 800465e:	22f0      	movs	r2, #240	; 0xf0
 8004660:	801a      	strh	r2, [r3, #0]
		break;
 8004662:	bf00      	nop
	}
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	200005d5 	.word	0x200005d5
 8004674:	200005c8 	.word	0x200005c8
 8004678:	200005ca 	.word	0x200005ca

0800467c <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 800468a:	2200      	movs	r2, #0
 800468c:	2100      	movs	r1, #0
 800468e:	4841      	ldr	r0, [pc, #260]	; (8004794 <LCD_SetAddrWindow+0x118>)
 8004690:	f7fe fe36 	bl	8003300 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 8004694:	4b40      	ldr	r3, [pc, #256]	; (8004798 <LCD_SetAddrWindow+0x11c>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d038      	beq.n	800470e <LCD_SetAddrWindow+0x92>
 800469c:	2b03      	cmp	r3, #3
 800469e:	dc03      	bgt.n	80046a8 <LCD_SetAddrWindow+0x2c>
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d006      	beq.n	80046b2 <LCD_SetAddrWindow+0x36>
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d017      	beq.n	80046d8 <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	61fb      	str	r3, [r7, #28]
		y = y1;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	61bb      	str	r3, [r7, #24]
		break;
 80046b0:	e042      	b.n	8004738 <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	617b      	str	r3, [r7, #20]
		y1 = x1;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80046c0:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80046cc:	607b      	str	r3, [r7, #4]
		x = x2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	61fb      	str	r3, [r7, #28]
		y = y1;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	61bb      	str	r3, [r7, #24]
		break;
 80046d6:	e02f      	b.n	8004738 <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80046e2:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80046ea:	607b      	str	r3, [r7, #4]
		t = y1;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80046f6:	3301      	adds	r3, #1
 80046f8:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004700:	3301      	adds	r3, #1
 8004702:	603b      	str	r3, [r7, #0]
		x = x2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	61fb      	str	r3, [r7, #28]
		y = y2;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	61bb      	str	r3, [r7, #24]
		break;
 800470c:	e014      	b.n	8004738 <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	617b      	str	r3, [r7, #20]
		x1 = y1;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800471c:	3301      	adds	r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800472a:	3301      	adds	r3, #1
 800472c:	603b      	str	r3, [r7, #0]
		x = x1;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	61fb      	str	r3, [r7, #28]
		y = y2;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	61bb      	str	r3, [r7, #24]
		break;
 8004736:	bf00      	nop
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	b29b      	uxth	r3, r3
 800473c:	4619      	mov	r1, r3
 800473e:	2050      	movs	r0, #80	; 0x50
 8004740:	f000 f888 	bl	8004854 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	b29b      	uxth	r3, r3
 8004748:	4619      	mov	r1, r3
 800474a:	2051      	movs	r0, #81	; 0x51
 800474c:	f000 f882 	bl	8004854 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	b29b      	uxth	r3, r3
 8004754:	4619      	mov	r1, r3
 8004756:	2052      	movs	r0, #82	; 0x52
 8004758:	f000 f87c 	bl	8004854 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	4619      	mov	r1, r3
 8004762:	2053      	movs	r0, #83	; 0x53
 8004764:	f000 f876 	bl	8004854 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	b29b      	uxth	r3, r3
 800476c:	4619      	mov	r1, r3
 800476e:	2020      	movs	r0, #32
 8004770:	f000 f870 	bl	8004854 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	b29b      	uxth	r3, r3
 8004778:	4619      	mov	r1, r3
 800477a:	2021      	movs	r0, #33	; 0x21
 800477c:	f000 f86a 	bl	8004854 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8004780:	2201      	movs	r2, #1
 8004782:	2100      	movs	r1, #0
 8004784:	4803      	ldr	r0, [pc, #12]	; (8004794 <LCD_SetAddrWindow+0x118>)
 8004786:	f7fe fdbb 	bl	8003300 <gpio_write>
}
 800478a:	bf00      	nop
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40020400 	.word	0x40020400
 8004798:	200005d5 	.word	0x200005d5

0800479c <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 80047a6:	4b28      	ldr	r3, [pc, #160]	; (8004848 <LCD_Write8+0xac>)
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047ae:	4013      	ands	r3, r2
 80047b0:	79fa      	ldrb	r2, [r7, #7]
 80047b2:	0252      	lsls	r2, r2, #9
 80047b4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80047b8:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c2:	431a      	orrs	r2, r3
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 80047cc:	491e      	ldr	r1, [pc, #120]	; (8004848 <LCD_Write8+0xac>)
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 80047ce:	4313      	orrs	r3, r2
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 80047d0:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80047d2:	4b1e      	ldr	r3, [pc, #120]	; (800484c <LCD_Write8+0xb0>)
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 80047da:	4013      	ands	r3, r2
 80047dc:	79fa      	ldrb	r2, [r7, #7]
 80047de:	f002 0208 	and.w	r2, r2, #8
 80047e2:	431a      	orrs	r2, r3
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	105b      	asrs	r3, r3, #1
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	431a      	orrs	r2, r3
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8004800:	4912      	ldr	r1, [pc, #72]	; (800484c <LCD_Write8+0xb0>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8004802:	4313      	orrs	r3, r2
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8004804:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <LCD_Write8+0xb4>)
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800480e:	4013      	ands	r3, r2
 8004810:	79fa      	ldrb	r2, [r7, #7]
 8004812:	0192      	lsls	r2, r2, #6
 8004814:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004818:	490d      	ldr	r1, [pc, #52]	; (8004850 <LCD_Write8+0xb4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 800481e:	2200      	movs	r2, #0
 8004820:	2101      	movs	r1, #1
 8004822:	4809      	ldr	r0, [pc, #36]	; (8004848 <LCD_Write8+0xac>)
 8004824:	f7fe fd6c 	bl	8003300 <gpio_write>
 8004828:	2001      	movs	r0, #1
 800482a:	f7ff f95b 	bl	8003ae4 <delay>
 800482e:	2201      	movs	r2, #1
 8004830:	2101      	movs	r1, #1
 8004832:	4805      	ldr	r0, [pc, #20]	; (8004848 <LCD_Write8+0xac>)
 8004834:	f7fe fd64 	bl	8003300 <gpio_write>
 8004838:	2001      	movs	r0, #1
 800483a:	f7ff f953 	bl	8003ae4 <delay>
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40020000 	.word	0x40020000
 800484c:	40020400 	.word	0x40020400
 8004850:	40020800 	.word	0x40020800

08004854 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	460a      	mov	r2, r1
 800485e:	80fb      	strh	r3, [r7, #6]
 8004860:	4613      	mov	r3, r2
 8004862:	80bb      	strh	r3, [r7, #4]
	uint8_t hi, lo;
	hi = (a) >> 8;
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	b29b      	uxth	r3, r3
 800486a:	73fb      	strb	r3, [r7, #15]
	lo = (a);
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	73bb      	strb	r3, [r7, #14]
	LCD_CD_LOW();
 8004870:	2200      	movs	r2, #0
 8004872:	2104      	movs	r1, #4
 8004874:	4810      	ldr	r0, [pc, #64]	; (80048b8 <LCD_WriteRegister16+0x64>)
 8004876:	f7fe fd43 	bl	8003300 <gpio_write>
	LCD_Write8(hi);
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff ff8d 	bl	800479c <LCD_Write8>
	LCD_Write8(lo);
 8004882:	7bbb      	ldrb	r3, [r7, #14]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff ff89 	bl	800479c <LCD_Write8>
	hi = (d) >> 8;
 800488a:	88bb      	ldrh	r3, [r7, #4]
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	b29b      	uxth	r3, r3
 8004890:	73fb      	strb	r3, [r7, #15]
	lo = (d);
 8004892:	88bb      	ldrh	r3, [r7, #4]
 8004894:	73bb      	strb	r3, [r7, #14]
	LCD_CD_HIGH();
 8004896:	2201      	movs	r2, #1
 8004898:	2104      	movs	r1, #4
 800489a:	4807      	ldr	r0, [pc, #28]	; (80048b8 <LCD_WriteRegister16+0x64>)
 800489c:	f7fe fd30 	bl	8003300 <gpio_write>
	LCD_Write8(hi);
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff ff7a 	bl	800479c <LCD_Write8>
	LCD_Write8(lo);
 80048a8:	7bbb      	ldrb	r3, [r7, #14]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff ff76 	bl	800479c <LCD_Write8>
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40020000 	.word	0x40020000

080048bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80048ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048ce:	2b84      	cmp	r3, #132	; 0x84
 80048d0:	d005      	beq.n	80048de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80048d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	3303      	adds	r3, #3
 80048dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80048de:	68fb      	ldr	r3, [r7, #12]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048f2:	f3ef 8305 	mrs	r3, IPSR
 80048f6:	607b      	str	r3, [r7, #4]
  return(result);
 80048f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf14      	ite	ne
 80048fe:	2301      	movne	r3, #1
 8004900:	2300      	moveq	r3, #0
 8004902:	b2db      	uxtb	r3, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004914:	f000 fd8a 	bl	800542c <vTaskStartScheduler>
  
  return osOK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	bd80      	pop	{r7, pc}

0800491e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004922:	f7ff ffe3 	bl	80048ec <inHandlerMode>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800492c:	f000 fea2 	bl	8005674 <xTaskGetTickCountFromISR>
 8004930:	4603      	mov	r3, r0
 8004932:	e002      	b.n	800493a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004934:	f000 fe8e 	bl	8005654 <xTaskGetTickCount>
 8004938:	4603      	mov	r3, r0
  }
}
 800493a:	4618      	mov	r0, r3
 800493c:	bd80      	pop	{r7, pc}

0800493e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800493e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004940:	b089      	sub	sp, #36	; 0x24
 8004942:	af04      	add	r7, sp, #16
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d020      	beq.n	8004992 <osThreadCreate+0x54>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01c      	beq.n	8004992 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685c      	ldr	r4, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681d      	ldr	r5, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691e      	ldr	r6, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ffa6 	bl	80048bc <makeFreeRtosPriority>
 8004970:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800497a:	9202      	str	r2, [sp, #8]
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	9100      	str	r1, [sp, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	4632      	mov	r2, r6
 8004984:	4629      	mov	r1, r5
 8004986:	4620      	mov	r0, r4
 8004988:	f000 fa4f 	bl	8004e2a <xTaskCreateStatic>
 800498c:	4603      	mov	r3, r0
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e01c      	b.n	80049cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685c      	ldr	r4, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800499e:	b29e      	uxth	r6, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff88 	bl	80048bc <makeFreeRtosPriority>
 80049ac:	4602      	mov	r2, r0
 80049ae:	f107 030c 	add.w	r3, r7, #12
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	9200      	str	r2, [sp, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	4632      	mov	r2, r6
 80049ba:	4629      	mov	r1, r5
 80049bc:	4620      	mov	r0, r4
 80049be:	f000 fa91 	bl	8004ee4 <xTaskCreate>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d001      	beq.n	80049cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80049cc:	68fb      	ldr	r3, [r7, #12]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <osDelay+0x16>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	e000      	b.n	80049ee <osDelay+0x18>
 80049ec:	2301      	movs	r3, #1
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fbc6 	bl	8005180 <vTaskDelay>
  
  return osOK;
 80049f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80049fe:	b590      	push	{r4, r7, lr}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af02      	add	r7, sp, #8
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d011      	beq.n	8004a34 <osMessageCreate+0x36>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00d      	beq.n	8004a34 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2400      	movs	r4, #0
 8004a2a:	9400      	str	r4, [sp, #0]
 8004a2c:	f000 f92c 	bl	8004c88 <xQueueGenericCreateStatic>
 8004a30:	4603      	mov	r3, r0
 8004a32:	e008      	b.n	8004a46 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f000 f99a 	bl	8004d78 <xQueueGenericCreate>
 8004a44:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd90      	pop	{r4, r7, pc}

08004a4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f103 0208 	add.w	r2, r3, #8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f04f 32ff 	mov.w	r2, #4294967295
 8004a66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f103 0208 	add.w	r2, r3, #8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f103 0208 	add.w	r2, r3, #8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	601a      	str	r2, [r3, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b06:	d103      	bne.n	8004b10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e00c      	b.n	8004b2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3308      	adds	r3, #8
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e002      	b.n	8004b1e <vListInsert+0x2e>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d2f6      	bcs.n	8004b18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	601a      	str	r2, [r3, #0]
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6892      	ldr	r2, [r2, #8]
 8004b78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6852      	ldr	r2, [r2, #4]
 8004b82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d103      	bne.n	8004b96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	1e5a      	subs	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004be2:	f001 f93f 	bl	8005e64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	68f9      	ldr	r1, [r7, #12]
 8004bf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	441a      	add	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	3b01      	subs	r3, #1
 8004c14:	68f9      	ldr	r1, [r7, #12]
 8004c16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	22ff      	movs	r2, #255	; 0xff
 8004c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	22ff      	movs	r2, #255	; 0xff
 8004c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d114      	bne.n	8004c62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01a      	beq.n	8004c76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3310      	adds	r3, #16
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fe41 	bl	80058cc <xTaskRemoveFromEventList>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d012      	beq.n	8004c76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <xQueueGenericReset+0xcc>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	e009      	b.n	8004c76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3310      	adds	r3, #16
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fef1 	bl	8004a4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3324      	adds	r3, #36	; 0x24
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff feec 	bl	8004a4e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c76:	f001 f925 	bl	8005ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c7a:	2301      	movs	r3, #1
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08e      	sub	sp, #56	; 0x38
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <xQueueGenericCreateStatic+0x52>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <xQueueGenericCreateStatic+0x56>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <xQueueGenericCreateStatic+0x58>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	623b      	str	r3, [r7, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <xQueueGenericCreateStatic+0x7e>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <xQueueGenericCreateStatic+0x82>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <xQueueGenericCreateStatic+0x84>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	61fb      	str	r3, [r7, #28]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d26:	2348      	movs	r3, #72	; 0x48
 8004d28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b48      	cmp	r3, #72	; 0x48
 8004d2e:	d00a      	beq.n	8004d46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	61bb      	str	r3, [r7, #24]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	4613      	mov	r3, r2
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f83f 	bl	8004dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3730      	adds	r7, #48	; 0x30
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	4613      	mov	r3, r2
 8004d84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	613b      	str	r3, [r7, #16]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	3348      	adds	r3, #72	; 0x48
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 f979 	bl	80060a8 <pvPortMalloc>
 8004db6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d011      	beq.n	8004de2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	3348      	adds	r3, #72	; 0x48
 8004dc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dd0:	79fa      	ldrb	r2, [r7, #7]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f805 	bl	8004dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004de2:	69bb      	ldr	r3, [r7, #24]
	}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e002      	b.n	8004e0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	69b8      	ldr	r0, [r7, #24]
 8004e1e:	f7ff fecb 	bl	8004bb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b08e      	sub	sp, #56	; 0x38
 8004e2e:	af04      	add	r7, sp, #16
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10a      	bne.n	8004e54 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	623b      	str	r3, [r7, #32]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <xTaskCreateStatic+0x46>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	61fb      	str	r3, [r7, #28]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e70:	23b4      	movs	r3, #180	; 0xb4
 8004e72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2bb4      	cmp	r3, #180	; 0xb4
 8004e78:	d00a      	beq.n	8004e90 <xTaskCreateStatic+0x66>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	61bb      	str	r3, [r7, #24]
}
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01e      	beq.n	8004ed6 <xTaskCreateStatic+0xac>
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01b      	beq.n	8004ed6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9303      	str	r3, [sp, #12]
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	f107 0314 	add.w	r3, r7, #20
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f851 	bl	8004f70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ed0:	f000 f8ec 	bl	80050ac <prvAddNewTaskToReadyList>
 8004ed4:	e001      	b.n	8004eda <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004eda:	697b      	ldr	r3, [r7, #20]
	}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3728      	adds	r7, #40	; 0x28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08c      	sub	sp, #48	; 0x30
 8004ee8:	af04      	add	r7, sp, #16
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 f8d5 	bl	80060a8 <pvPortMalloc>
 8004efe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00e      	beq.n	8004f24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f06:	20b4      	movs	r0, #180	; 0xb4
 8004f08:	f001 f8ce 	bl	80060a8 <pvPortMalloc>
 8004f0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30
 8004f1a:	e005      	b.n	8004f28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f1c:	6978      	ldr	r0, [r7, #20]
 8004f1e:	f001 f98f 	bl	8006240 <vPortFree>
 8004f22:	e001      	b.n	8004f28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f24:	2300      	movs	r3, #0
 8004f26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d017      	beq.n	8004f5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9303      	str	r3, [sp, #12]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	9302      	str	r3, [sp, #8]
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f80f 	bl	8004f70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f52:	69f8      	ldr	r0, [r7, #28]
 8004f54:	f000 f8aa 	bl	80050ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	e002      	b.n	8004f64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f64:	69bb      	ldr	r3, [r7, #24]
	}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f023 0307 	bic.w	r3, r3, #7
 8004f96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	617b      	str	r3, [r7, #20]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d01f      	beq.n	8004ffe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	e012      	b.n	8004fea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	7819      	ldrb	r1, [r3, #0]
 8004fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3334      	adds	r3, #52	; 0x34
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d006      	beq.n	8004ff2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b0f      	cmp	r3, #15
 8004fee:	d9e9      	bls.n	8004fc4 <prvInitialiseNewTask+0x54>
 8004ff0:	e000      	b.n	8004ff4 <prvInitialiseNewTask+0x84>
			{
				break;
 8004ff2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ffc:	e003      	b.n	8005006 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	2b06      	cmp	r3, #6
 800500a:	d901      	bls.n	8005010 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800500c:	2306      	movs	r3, #6
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005014:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800501a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	2200      	movs	r2, #0
 8005020:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	3304      	adds	r3, #4
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fd31 	bl	8004a8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	3318      	adds	r3, #24
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fd2c 	bl	8004a8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	f1c3 0207 	rsb	r2, r3, #7
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	2200      	movs	r2, #0
 8005050:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	2200      	movs	r2, #0
 8005058:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	334c      	adds	r3, #76	; 0x4c
 8005060:	2260      	movs	r2, #96	; 0x60
 8005062:	2100      	movs	r1, #0
 8005064:	4618      	mov	r0, r3
 8005066:	f001 fa43 	bl	80064f0 <memset>
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	4a0c      	ldr	r2, [pc, #48]	; (80050a0 <prvInitialiseNewTask+0x130>)
 800506e:	651a      	str	r2, [r3, #80]	; 0x50
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	4a0c      	ldr	r2, [pc, #48]	; (80050a4 <prvInitialiseNewTask+0x134>)
 8005074:	655a      	str	r2, [r3, #84]	; 0x54
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	4a0b      	ldr	r2, [pc, #44]	; (80050a8 <prvInitialiseNewTask+0x138>)
 800507a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	69b8      	ldr	r0, [r7, #24]
 8005082:	f000 fdc5 	bl	8005c10 <pxPortInitialiseStack>
 8005086:	4602      	mov	r2, r0
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005096:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005098:	bf00      	nop
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	080073cc 	.word	0x080073cc
 80050a4:	080073ec 	.word	0x080073ec
 80050a8:	080073ac 	.word	0x080073ac

080050ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050b4:	f000 fed6 	bl	8005e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050b8:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <prvAddNewTaskToReadyList+0xb8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	4a29      	ldr	r2, [pc, #164]	; (8005164 <prvAddNewTaskToReadyList+0xb8>)
 80050c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050c2:	4b29      	ldr	r3, [pc, #164]	; (8005168 <prvAddNewTaskToReadyList+0xbc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050ca:	4a27      	ldr	r2, [pc, #156]	; (8005168 <prvAddNewTaskToReadyList+0xbc>)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050d0:	4b24      	ldr	r3, [pc, #144]	; (8005164 <prvAddNewTaskToReadyList+0xb8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d110      	bne.n	80050fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050d8:	f000 fc72 	bl	80059c0 <prvInitialiseTaskLists>
 80050dc:	e00d      	b.n	80050fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050de:	4b23      	ldr	r3, [pc, #140]	; (800516c <prvAddNewTaskToReadyList+0xc0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050e6:	4b20      	ldr	r3, [pc, #128]	; (8005168 <prvAddNewTaskToReadyList+0xbc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d802      	bhi.n	80050fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050f4:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <prvAddNewTaskToReadyList+0xbc>)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <prvAddNewTaskToReadyList+0xc4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3301      	adds	r3, #1
 8005100:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <prvAddNewTaskToReadyList+0xc4>)
 8005102:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	2201      	movs	r2, #1
 800510a:	409a      	lsls	r2, r3
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <prvAddNewTaskToReadyList+0xc8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4313      	orrs	r3, r2
 8005112:	4a18      	ldr	r2, [pc, #96]	; (8005174 <prvAddNewTaskToReadyList+0xc8>)
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4a15      	ldr	r2, [pc, #84]	; (8005178 <prvAddNewTaskToReadyList+0xcc>)
 8005124:	441a      	add	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3304      	adds	r3, #4
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f7ff fcbb 	bl	8004aa8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005132:	f000 fec7 	bl	8005ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005136:	4b0d      	ldr	r3, [pc, #52]	; (800516c <prvAddNewTaskToReadyList+0xc0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00e      	beq.n	800515c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800513e:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <prvAddNewTaskToReadyList+0xbc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	429a      	cmp	r2, r3
 800514a:	d207      	bcs.n	800515c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <prvAddNewTaskToReadyList+0xd0>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800515c:	bf00      	nop
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	200007d8 	.word	0x200007d8
 8005168:	200006d8 	.word	0x200006d8
 800516c:	200007e4 	.word	0x200007e4
 8005170:	200007f4 	.word	0x200007f4
 8005174:	200007e0 	.word	0x200007e0
 8005178:	200006dc 	.word	0x200006dc
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d017      	beq.n	80051c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <vTaskDelay+0x60>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <vTaskDelay+0x30>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	60bb      	str	r3, [r7, #8]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051b0:	f000 f9a6 	bl	8005500 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051b4:	2100      	movs	r1, #0
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fcc4 	bl	8005b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051bc:	f000 f9ae 	bl	800551c <xTaskResumeAll>
 80051c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <vTaskDelay+0x64>)
 80051ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000800 	.word	0x20000800
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80051f0:	f000 fe38 	bl	8005e64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <vTaskSuspend+0x18>
 80051fa:	4b3c      	ldr	r3, [pc, #240]	; (80052ec <vTaskSuspend+0x104>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	e000      	b.n	8005202 <vTaskSuspend+0x1a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3304      	adds	r3, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff fcaa 	bl	8004b62 <uxListRemove>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d115      	bne.n	8005240 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005218:	4935      	ldr	r1, [pc, #212]	; (80052f0 <vTaskSuspend+0x108>)
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <vTaskSuspend+0x58>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	2201      	movs	r2, #1
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	43da      	mvns	r2, r3
 8005236:	4b2f      	ldr	r3, [pc, #188]	; (80052f4 <vTaskSuspend+0x10c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4013      	ands	r3, r2
 800523c:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <vTaskSuspend+0x10c>)
 800523e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3318      	adds	r3, #24
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff fc88 	bl	8004b62 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3304      	adds	r3, #4
 8005256:	4619      	mov	r1, r3
 8005258:	4827      	ldr	r0, [pc, #156]	; (80052f8 <vTaskSuspend+0x110>)
 800525a:	f7ff fc25 	bl	8004aa8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	d103      	bne.n	8005272 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005272:	f000 fe27 	bl	8005ec4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005276:	4b21      	ldr	r3, [pc, #132]	; (80052fc <vTaskSuspend+0x114>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800527e:	f000 fdf1 	bl	8005e64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005282:	f000 fc3f 	bl	8005b04 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005286:	f000 fe1d 	bl	8005ec4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800528a:	4b18      	ldr	r3, [pc, #96]	; (80052ec <vTaskSuspend+0x104>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	429a      	cmp	r2, r3
 8005292:	d127      	bne.n	80052e4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005294:	4b19      	ldr	r3, [pc, #100]	; (80052fc <vTaskSuspend+0x114>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d017      	beq.n	80052cc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800529c:	4b18      	ldr	r3, [pc, #96]	; (8005300 <vTaskSuspend+0x118>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <vTaskSuspend+0xd2>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	60bb      	str	r3, [r7, #8]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <vTaskSuspend+0x11c>)
 80052bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052ca:	e00b      	b.n	80052e4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <vTaskSuspend+0x110>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <vTaskSuspend+0x120>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d103      	bne.n	80052e0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <vTaskSuspend+0x104>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
	}
 80052de:	e001      	b.n	80052e4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80052e0:	f000 fa92 	bl	8005808 <vTaskSwitchContext>
	}
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	200006d8 	.word	0x200006d8
 80052f0:	200006dc 	.word	0x200006dc
 80052f4:	200007e0 	.word	0x200007e0
 80052f8:	200007c4 	.word	0x200007c4
 80052fc:	200007e4 	.word	0x200007e4
 8005300:	20000800 	.word	0x20000800
 8005304:	e000ed04 	.word	0xe000ed04
 8005308:	200007d8 	.word	0x200007d8

0800530c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	60fb      	str	r3, [r7, #12]
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <prvTaskIsTaskSuspended+0x5c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d10a      	bne.n	8005358 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005346:	4a09      	ldr	r2, [pc, #36]	; (800536c <prvTaskIsTaskSuspended+0x60>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d005      	beq.n	8005358 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005354:	2301      	movs	r3, #1
 8005356:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005358:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800535a:	4618      	mov	r0, r3
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	200007c4 	.word	0x200007c4
 800536c:	20000798 	.word	0x20000798

08005370 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <vTaskResume+0x28>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	60bb      	str	r3, [r7, #8]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005398:	4b20      	ldr	r3, [pc, #128]	; (800541c <vTaskResume+0xac>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d037      	beq.n	8005412 <vTaskResume+0xa2>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d034      	beq.n	8005412 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80053a8:	f000 fd5c 	bl	8005e64 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f7ff ffad 	bl	800530c <prvTaskIsTaskSuspended>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d02a      	beq.n	800540e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff fbd0 	bl	8004b62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	2201      	movs	r2, #1
 80053c8:	409a      	lsls	r2, r3
 80053ca:	4b15      	ldr	r3, [pc, #84]	; (8005420 <vTaskResume+0xb0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	4a13      	ldr	r2, [pc, #76]	; (8005420 <vTaskResume+0xb0>)
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4a10      	ldr	r2, [pc, #64]	; (8005424 <vTaskResume+0xb4>)
 80053e2:	441a      	add	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f7ff fb5c 	bl	8004aa8 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	4b09      	ldr	r3, [pc, #36]	; (800541c <vTaskResume+0xac>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d307      	bcc.n	800540e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <vTaskResume+0xb8>)
 8005400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800540e:	f000 fd59 	bl	8005ec4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	200006d8 	.word	0x200006d8
 8005420:	200007e0 	.word	0x200007e0
 8005424:	200006dc 	.word	0x200006dc
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800543a:	463a      	mov	r2, r7
 800543c:	1d39      	adds	r1, r7, #4
 800543e:	f107 0308 	add.w	r3, r7, #8
 8005442:	4618      	mov	r0, r3
 8005444:	f7fb f8a6 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	9202      	str	r2, [sp, #8]
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	2300      	movs	r3, #0
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	460a      	mov	r2, r1
 800545a:	4921      	ldr	r1, [pc, #132]	; (80054e0 <vTaskStartScheduler+0xb4>)
 800545c:	4821      	ldr	r0, [pc, #132]	; (80054e4 <vTaskStartScheduler+0xb8>)
 800545e:	f7ff fce4 	bl	8004e2a <xTaskCreateStatic>
 8005462:	4603      	mov	r3, r0
 8005464:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <vTaskStartScheduler+0xbc>)
 8005466:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005468:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <vTaskStartScheduler+0xbc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005470:	2301      	movs	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	e001      	b.n	800547a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d11b      	bne.n	80054b8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	613b      	str	r3, [r7, #16]
}
 8005492:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005494:	4b15      	ldr	r3, [pc, #84]	; (80054ec <vTaskStartScheduler+0xc0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	334c      	adds	r3, #76	; 0x4c
 800549a:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <vTaskStartScheduler+0xc4>)
 800549c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800549e:	4b15      	ldr	r3, [pc, #84]	; (80054f4 <vTaskStartScheduler+0xc8>)
 80054a0:	f04f 32ff 	mov.w	r2, #4294967295
 80054a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <vTaskStartScheduler+0xcc>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054ac:	4b13      	ldr	r3, [pc, #76]	; (80054fc <vTaskStartScheduler+0xd0>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054b2:	f000 fc35 	bl	8005d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054b6:	e00e      	b.n	80054d6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d10a      	bne.n	80054d6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	60fb      	str	r3, [r7, #12]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <vTaskStartScheduler+0xa8>
}
 80054d6:	bf00      	nop
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	08007004 	.word	0x08007004
 80054e4:	08005991 	.word	0x08005991
 80054e8:	200007fc 	.word	0x200007fc
 80054ec:	200006d8 	.word	0x200006d8
 80054f0:	20000054 	.word	0x20000054
 80054f4:	200007f8 	.word	0x200007f8
 80054f8:	200007e4 	.word	0x200007e4
 80054fc:	200007dc 	.word	0x200007dc

08005500 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005504:	4b04      	ldr	r3, [pc, #16]	; (8005518 <vTaskSuspendAll+0x18>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	4a03      	ldr	r2, [pc, #12]	; (8005518 <vTaskSuspendAll+0x18>)
 800550c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800550e:	bf00      	nop
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	20000800 	.word	0x20000800

0800551c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800552a:	4b41      	ldr	r3, [pc, #260]	; (8005630 <xTaskResumeAll+0x114>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <xTaskResumeAll+0x2c>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	603b      	str	r3, [r7, #0]
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005548:	f000 fc8c 	bl	8005e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800554c:	4b38      	ldr	r3, [pc, #224]	; (8005630 <xTaskResumeAll+0x114>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3b01      	subs	r3, #1
 8005552:	4a37      	ldr	r2, [pc, #220]	; (8005630 <xTaskResumeAll+0x114>)
 8005554:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005556:	4b36      	ldr	r3, [pc, #216]	; (8005630 <xTaskResumeAll+0x114>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d161      	bne.n	8005622 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800555e:	4b35      	ldr	r3, [pc, #212]	; (8005634 <xTaskResumeAll+0x118>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d05d      	beq.n	8005622 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005566:	e02e      	b.n	80055c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005568:	4b33      	ldr	r3, [pc, #204]	; (8005638 <xTaskResumeAll+0x11c>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3318      	adds	r3, #24
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff faf4 	bl	8004b62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3304      	adds	r3, #4
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff faef 	bl	8004b62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	2201      	movs	r2, #1
 800558a:	409a      	lsls	r2, r3
 800558c:	4b2b      	ldr	r3, [pc, #172]	; (800563c <xTaskResumeAll+0x120>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4313      	orrs	r3, r2
 8005592:	4a2a      	ldr	r2, [pc, #168]	; (800563c <xTaskResumeAll+0x120>)
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4a27      	ldr	r2, [pc, #156]	; (8005640 <xTaskResumeAll+0x124>)
 80055a4:	441a      	add	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4619      	mov	r1, r3
 80055ac:	4610      	mov	r0, r2
 80055ae:	f7ff fa7b 	bl	8004aa8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b6:	4b23      	ldr	r3, [pc, #140]	; (8005644 <xTaskResumeAll+0x128>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	429a      	cmp	r2, r3
 80055be:	d302      	bcc.n	80055c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80055c0:	4b21      	ldr	r3, [pc, #132]	; (8005648 <xTaskResumeAll+0x12c>)
 80055c2:	2201      	movs	r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055c6:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <xTaskResumeAll+0x11c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1cc      	bne.n	8005568 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055d4:	f000 fa96 	bl	8005b04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055d8:	4b1c      	ldr	r3, [pc, #112]	; (800564c <xTaskResumeAll+0x130>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d010      	beq.n	8005606 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055e4:	f000 f858 	bl	8005698 <xTaskIncrementTick>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <xTaskResumeAll+0x12c>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f1      	bne.n	80055e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005600:	4b12      	ldr	r3, [pc, #72]	; (800564c <xTaskResumeAll+0x130>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005606:	4b10      	ldr	r3, [pc, #64]	; (8005648 <xTaskResumeAll+0x12c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800560e:	2301      	movs	r3, #1
 8005610:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005612:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <xTaskResumeAll+0x134>)
 8005614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005622:	f000 fc4f 	bl	8005ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8005626:	68bb      	ldr	r3, [r7, #8]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000800 	.word	0x20000800
 8005634:	200007d8 	.word	0x200007d8
 8005638:	20000798 	.word	0x20000798
 800563c:	200007e0 	.word	0x200007e0
 8005640:	200006dc 	.word	0x200006dc
 8005644:	200006d8 	.word	0x200006d8
 8005648:	200007ec 	.word	0x200007ec
 800564c:	200007e8 	.word	0x200007e8
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <xTaskGetTickCount+0x1c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005660:	687b      	ldr	r3, [r7, #4]
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	200007dc 	.word	0x200007dc

08005674 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800567a:	f000 fcd5 	bl	8006028 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800567e:	2300      	movs	r3, #0
 8005680:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005682:	4b04      	ldr	r3, [pc, #16]	; (8005694 <xTaskGetTickCountFromISR+0x20>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005688:	683b      	ldr	r3, [r7, #0]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	200007dc 	.word	0x200007dc

08005698 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a2:	4b4e      	ldr	r3, [pc, #312]	; (80057dc <xTaskIncrementTick+0x144>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f040 808e 	bne.w	80057c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056ac:	4b4c      	ldr	r3, [pc, #304]	; (80057e0 <xTaskIncrementTick+0x148>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056b4:	4a4a      	ldr	r2, [pc, #296]	; (80057e0 <xTaskIncrementTick+0x148>)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d120      	bne.n	8005702 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056c0:	4b48      	ldr	r3, [pc, #288]	; (80057e4 <xTaskIncrementTick+0x14c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	603b      	str	r3, [r7, #0]
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <xTaskIncrementTick+0x46>
 80056e0:	4b40      	ldr	r3, [pc, #256]	; (80057e4 <xTaskIncrementTick+0x14c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	4b40      	ldr	r3, [pc, #256]	; (80057e8 <xTaskIncrementTick+0x150>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a3e      	ldr	r2, [pc, #248]	; (80057e4 <xTaskIncrementTick+0x14c>)
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	4a3e      	ldr	r2, [pc, #248]	; (80057e8 <xTaskIncrementTick+0x150>)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	4b3d      	ldr	r3, [pc, #244]	; (80057ec <xTaskIncrementTick+0x154>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	4a3c      	ldr	r2, [pc, #240]	; (80057ec <xTaskIncrementTick+0x154>)
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	f000 fa01 	bl	8005b04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005702:	4b3b      	ldr	r3, [pc, #236]	; (80057f0 <xTaskIncrementTick+0x158>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	429a      	cmp	r2, r3
 800570a:	d348      	bcc.n	800579e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800570c:	4b35      	ldr	r3, [pc, #212]	; (80057e4 <xTaskIncrementTick+0x14c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005716:	4b36      	ldr	r3, [pc, #216]	; (80057f0 <xTaskIncrementTick+0x158>)
 8005718:	f04f 32ff 	mov.w	r2, #4294967295
 800571c:	601a      	str	r2, [r3, #0]
					break;
 800571e:	e03e      	b.n	800579e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005720:	4b30      	ldr	r3, [pc, #192]	; (80057e4 <xTaskIncrementTick+0x14c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d203      	bcs.n	8005740 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005738:	4a2d      	ldr	r2, [pc, #180]	; (80057f0 <xTaskIncrementTick+0x158>)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800573e:	e02e      	b.n	800579e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	3304      	adds	r3, #4
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff fa0c 	bl	8004b62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3318      	adds	r3, #24
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fa03 	bl	8004b62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	2201      	movs	r2, #1
 8005762:	409a      	lsls	r2, r3
 8005764:	4b23      	ldr	r3, [pc, #140]	; (80057f4 <xTaskIncrementTick+0x15c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4313      	orrs	r3, r2
 800576a:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <xTaskIncrementTick+0x15c>)
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <xTaskIncrementTick+0x160>)
 800577c:	441a      	add	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3304      	adds	r3, #4
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f7ff f98f 	bl	8004aa8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578e:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <xTaskIncrementTick+0x164>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	429a      	cmp	r2, r3
 8005796:	d3b9      	bcc.n	800570c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005798:	2301      	movs	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800579c:	e7b6      	b.n	800570c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800579e:	4b17      	ldr	r3, [pc, #92]	; (80057fc <xTaskIncrementTick+0x164>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	4914      	ldr	r1, [pc, #80]	; (80057f8 <xTaskIncrementTick+0x160>)
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d901      	bls.n	80057ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057ba:	4b11      	ldr	r3, [pc, #68]	; (8005800 <xTaskIncrementTick+0x168>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80057c2:	2301      	movs	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e004      	b.n	80057d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057c8:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <xTaskIncrementTick+0x16c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	4a0d      	ldr	r2, [pc, #52]	; (8005804 <xTaskIncrementTick+0x16c>)
 80057d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057d2:	697b      	ldr	r3, [r7, #20]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000800 	.word	0x20000800
 80057e0:	200007dc 	.word	0x200007dc
 80057e4:	20000790 	.word	0x20000790
 80057e8:	20000794 	.word	0x20000794
 80057ec:	200007f0 	.word	0x200007f0
 80057f0:	200007f8 	.word	0x200007f8
 80057f4:	200007e0 	.word	0x200007e0
 80057f8:	200006dc 	.word	0x200006dc
 80057fc:	200006d8 	.word	0x200006d8
 8005800:	200007ec 	.word	0x200007ec
 8005804:	200007e8 	.word	0x200007e8

08005808 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800580e:	4b29      	ldr	r3, [pc, #164]	; (80058b4 <vTaskSwitchContext+0xac>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005816:	4b28      	ldr	r3, [pc, #160]	; (80058b8 <vTaskSwitchContext+0xb0>)
 8005818:	2201      	movs	r2, #1
 800581a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800581c:	e044      	b.n	80058a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800581e:	4b26      	ldr	r3, [pc, #152]	; (80058b8 <vTaskSwitchContext+0xb0>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005824:	4b25      	ldr	r3, [pc, #148]	; (80058bc <vTaskSwitchContext+0xb4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	fab3 f383 	clz	r3, r3
 8005830:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005832:	7afb      	ldrb	r3, [r7, #11]
 8005834:	f1c3 031f 	rsb	r3, r3, #31
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	4921      	ldr	r1, [pc, #132]	; (80058c0 <vTaskSwitchContext+0xb8>)
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <vTaskSwitchContext+0x5c>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	607b      	str	r3, [r7, #4]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <vTaskSwitchContext+0x5a>
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4a14      	ldr	r2, [pc, #80]	; (80058c0 <vTaskSwitchContext+0xb8>)
 8005870:	4413      	add	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	605a      	str	r2, [r3, #4]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	3308      	adds	r3, #8
 8005886:	429a      	cmp	r2, r3
 8005888:	d104      	bne.n	8005894 <vTaskSwitchContext+0x8c>
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	605a      	str	r2, [r3, #4]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	4a0a      	ldr	r2, [pc, #40]	; (80058c4 <vTaskSwitchContext+0xbc>)
 800589c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <vTaskSwitchContext+0xbc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	334c      	adds	r3, #76	; 0x4c
 80058a4:	4a08      	ldr	r2, [pc, #32]	; (80058c8 <vTaskSwitchContext+0xc0>)
 80058a6:	6013      	str	r3, [r2, #0]
}
 80058a8:	bf00      	nop
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	20000800 	.word	0x20000800
 80058b8:	200007ec 	.word	0x200007ec
 80058bc:	200007e0 	.word	0x200007e0
 80058c0:	200006dc 	.word	0x200006dc
 80058c4:	200006d8 	.word	0x200006d8
 80058c8:	20000054 	.word	0x20000054

080058cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	60fb      	str	r3, [r7, #12]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3318      	adds	r3, #24
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff f930 	bl	8004b62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005902:	4b1d      	ldr	r3, [pc, #116]	; (8005978 <xTaskRemoveFromEventList+0xac>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d11c      	bne.n	8005944 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	3304      	adds	r3, #4
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff f927 	bl	8004b62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	2201      	movs	r2, #1
 800591a:	409a      	lsls	r2, r3
 800591c:	4b17      	ldr	r3, [pc, #92]	; (800597c <xTaskRemoveFromEventList+0xb0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4313      	orrs	r3, r2
 8005922:	4a16      	ldr	r2, [pc, #88]	; (800597c <xTaskRemoveFromEventList+0xb0>)
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <xTaskRemoveFromEventList+0xb4>)
 8005934:	441a      	add	r2, r3
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3304      	adds	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f7ff f8b3 	bl	8004aa8 <vListInsertEnd>
 8005942:	e005      	b.n	8005950 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	3318      	adds	r3, #24
 8005948:	4619      	mov	r1, r3
 800594a:	480e      	ldr	r0, [pc, #56]	; (8005984 <xTaskRemoveFromEventList+0xb8>)
 800594c:	f7ff f8ac 	bl	8004aa8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <xTaskRemoveFromEventList+0xbc>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	429a      	cmp	r2, r3
 800595c:	d905      	bls.n	800596a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800595e:	2301      	movs	r3, #1
 8005960:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <xTaskRemoveFromEventList+0xc0>)
 8005964:	2201      	movs	r2, #1
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e001      	b.n	800596e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800596e:	697b      	ldr	r3, [r7, #20]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20000800 	.word	0x20000800
 800597c:	200007e0 	.word	0x200007e0
 8005980:	200006dc 	.word	0x200006dc
 8005984:	20000798 	.word	0x20000798
 8005988:	200006d8 	.word	0x200006d8
 800598c:	200007ec 	.word	0x200007ec

08005990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005998:	f000 f852 	bl	8005a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800599c:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <prvIdleTask+0x28>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d9f9      	bls.n	8005998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059a4:	4b05      	ldr	r3, [pc, #20]	; (80059bc <prvIdleTask+0x2c>)
 80059a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059b4:	e7f0      	b.n	8005998 <prvIdleTask+0x8>
 80059b6:	bf00      	nop
 80059b8:	200006dc 	.word	0x200006dc
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	e00c      	b.n	80059e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4a12      	ldr	r2, [pc, #72]	; (8005a20 <prvInitialiseTaskLists+0x60>)
 80059d8:	4413      	add	r3, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff f837 	bl	8004a4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3301      	adds	r3, #1
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b06      	cmp	r3, #6
 80059ea:	d9ef      	bls.n	80059cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059ec:	480d      	ldr	r0, [pc, #52]	; (8005a24 <prvInitialiseTaskLists+0x64>)
 80059ee:	f7ff f82e 	bl	8004a4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059f2:	480d      	ldr	r0, [pc, #52]	; (8005a28 <prvInitialiseTaskLists+0x68>)
 80059f4:	f7ff f82b 	bl	8004a4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059f8:	480c      	ldr	r0, [pc, #48]	; (8005a2c <prvInitialiseTaskLists+0x6c>)
 80059fa:	f7ff f828 	bl	8004a4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059fe:	480c      	ldr	r0, [pc, #48]	; (8005a30 <prvInitialiseTaskLists+0x70>)
 8005a00:	f7ff f825 	bl	8004a4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a04:	480b      	ldr	r0, [pc, #44]	; (8005a34 <prvInitialiseTaskLists+0x74>)
 8005a06:	f7ff f822 	bl	8004a4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <prvInitialiseTaskLists+0x78>)
 8005a0c:	4a05      	ldr	r2, [pc, #20]	; (8005a24 <prvInitialiseTaskLists+0x64>)
 8005a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <prvInitialiseTaskLists+0x7c>)
 8005a12:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <prvInitialiseTaskLists+0x68>)
 8005a14:	601a      	str	r2, [r3, #0]
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	200006dc 	.word	0x200006dc
 8005a24:	20000768 	.word	0x20000768
 8005a28:	2000077c 	.word	0x2000077c
 8005a2c:	20000798 	.word	0x20000798
 8005a30:	200007ac 	.word	0x200007ac
 8005a34:	200007c4 	.word	0x200007c4
 8005a38:	20000790 	.word	0x20000790
 8005a3c:	20000794 	.word	0x20000794

08005a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a46:	e019      	b.n	8005a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a48:	f000 fa0c 	bl	8005e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a4c:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <prvCheckTasksWaitingTermination+0x50>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff f882 	bl	8004b62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <prvCheckTasksWaitingTermination+0x54>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	4a0b      	ldr	r2, [pc, #44]	; (8005a94 <prvCheckTasksWaitingTermination+0x54>)
 8005a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a68:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <prvCheckTasksWaitingTermination+0x58>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	4a0a      	ldr	r2, [pc, #40]	; (8005a98 <prvCheckTasksWaitingTermination+0x58>)
 8005a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a72:	f000 fa27 	bl	8005ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f810 	bl	8005a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <prvCheckTasksWaitingTermination+0x58>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e1      	bne.n	8005a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	200007ac 	.word	0x200007ac
 8005a94:	200007d8 	.word	0x200007d8
 8005a98:	200007c0 	.word	0x200007c0

08005a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	334c      	adds	r3, #76	; 0x4c
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fe17 	bl	80066dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d108      	bne.n	8005aca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fbbf 	bl	8006240 <vPortFree>
				vPortFree( pxTCB );
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fbbc 	bl	8006240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ac8:	e018      	b.n	8005afc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d103      	bne.n	8005adc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fbb3 	bl	8006240 <vPortFree>
	}
 8005ada:	e00f      	b.n	8005afc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d00a      	beq.n	8005afc <prvDeleteTCB+0x60>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	60fb      	str	r3, [r7, #12]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <prvDeleteTCB+0x5e>
	}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b0a:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <prvResetNextTaskUnblockTime+0x38>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <prvResetNextTaskUnblockTime+0x3c>)
 8005b16:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b1c:	e008      	b.n	8005b30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <prvResetNextTaskUnblockTime+0x38>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <prvResetNextTaskUnblockTime+0x3c>)
 8005b2e:	6013      	str	r3, [r2, #0]
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000790 	.word	0x20000790
 8005b40:	200007f8 	.word	0x200007f8

08005b44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b4e:	4b29      	ldr	r3, [pc, #164]	; (8005bf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b54:	4b28      	ldr	r3, [pc, #160]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff f801 	bl	8004b62 <uxListRemove>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10b      	bne.n	8005b7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b66:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43da      	mvns	r2, r3
 8005b74:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	4a20      	ldr	r2, [pc, #128]	; (8005bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b84:	d10a      	bne.n	8005b9c <prvAddCurrentTaskToDelayedList+0x58>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4619      	mov	r1, r3
 8005b94:	481a      	ldr	r0, [pc, #104]	; (8005c00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b96:	f7fe ff87 	bl	8004aa8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b9a:	e026      	b.n	8005bea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ba4:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d209      	bcs.n	8005bc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bb4:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f7fe ff95 	bl	8004af0 <vListInsert>
}
 8005bc6:	e010      	b.n	8005bea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f7fe ff8b 	bl	8004af0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bda:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d202      	bcs.n	8005bea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005be4:	4a09      	ldr	r2, [pc, #36]	; (8005c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6013      	str	r3, [r2, #0]
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200007dc 	.word	0x200007dc
 8005bf8:	200006d8 	.word	0x200006d8
 8005bfc:	200007e0 	.word	0x200007e0
 8005c00:	200007c4 	.word	0x200007c4
 8005c04:	20000794 	.word	0x20000794
 8005c08:	20000790 	.word	0x20000790
 8005c0c:	200007f8 	.word	0x200007f8

08005c10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3b04      	subs	r3, #4
 8005c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f023 0201 	bic.w	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3b04      	subs	r3, #4
 8005c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c40:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <pxPortInitialiseStack+0x64>)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3b14      	subs	r3, #20
 8005c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3b04      	subs	r3, #4
 8005c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f06f 0202 	mvn.w	r2, #2
 8005c5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3b20      	subs	r3, #32
 8005c64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c66:	68fb      	ldr	r3, [r7, #12]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	08005c79 	.word	0x08005c79

08005c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c82:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <prvTaskExitError+0x54>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8a:	d00a      	beq.n	8005ca2 <prvTaskExitError+0x2a>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	60fb      	str	r3, [r7, #12]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <prvTaskExitError+0x28>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	60bb      	str	r3, [r7, #8]
}
 8005cb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cb6:	bf00      	nop
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0fc      	beq.n	8005cb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	20000050 	.word	0x20000050

08005cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005cd0:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <pxCurrentTCBConst2>)
 8005cd2:	6819      	ldr	r1, [r3, #0]
 8005cd4:	6808      	ldr	r0, [r1, #0]
 8005cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cda:	f380 8809 	msr	PSP, r0
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f04f 0000 	mov.w	r0, #0
 8005ce6:	f380 8811 	msr	BASEPRI, r0
 8005cea:	4770      	bx	lr
 8005cec:	f3af 8000 	nop.w

08005cf0 <pxCurrentTCBConst2>:
 8005cf0:	200006d8 	.word	0x200006d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop

08005cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cf8:	4808      	ldr	r0, [pc, #32]	; (8005d1c <prvPortStartFirstTask+0x24>)
 8005cfa:	6800      	ldr	r0, [r0, #0]
 8005cfc:	6800      	ldr	r0, [r0, #0]
 8005cfe:	f380 8808 	msr	MSP, r0
 8005d02:	f04f 0000 	mov.w	r0, #0
 8005d06:	f380 8814 	msr	CONTROL, r0
 8005d0a:	b662      	cpsie	i
 8005d0c:	b661      	cpsie	f
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	df00      	svc	0
 8005d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d1a:	bf00      	nop
 8005d1c:	e000ed08 	.word	0xe000ed08

08005d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d26:	4b46      	ldr	r3, [pc, #280]	; (8005e40 <xPortStartScheduler+0x120>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a46      	ldr	r2, [pc, #280]	; (8005e44 <xPortStartScheduler+0x124>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d10a      	bne.n	8005d46 <xPortStartScheduler+0x26>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	613b      	str	r3, [r7, #16]
}
 8005d42:	bf00      	nop
 8005d44:	e7fe      	b.n	8005d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d46:	4b3e      	ldr	r3, [pc, #248]	; (8005e40 <xPortStartScheduler+0x120>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a3f      	ldr	r2, [pc, #252]	; (8005e48 <xPortStartScheduler+0x128>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d10a      	bne.n	8005d66 <xPortStartScheduler+0x46>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
}
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d66:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <xPortStartScheduler+0x12c>)
 8005d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	22ff      	movs	r2, #255	; 0xff
 8005d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	4b31      	ldr	r3, [pc, #196]	; (8005e50 <xPortStartScheduler+0x130>)
 8005d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d8e:	4b31      	ldr	r3, [pc, #196]	; (8005e54 <xPortStartScheduler+0x134>)
 8005d90:	2207      	movs	r2, #7
 8005d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d94:	e009      	b.n	8005daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d96:	4b2f      	ldr	r3, [pc, #188]	; (8005e54 <xPortStartScheduler+0x134>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	4a2d      	ldr	r2, [pc, #180]	; (8005e54 <xPortStartScheduler+0x134>)
 8005d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b80      	cmp	r3, #128	; 0x80
 8005db4:	d0ef      	beq.n	8005d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005db6:	4b27      	ldr	r3, [pc, #156]	; (8005e54 <xPortStartScheduler+0x134>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f1c3 0307 	rsb	r3, r3, #7
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d00a      	beq.n	8005dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	60bb      	str	r3, [r7, #8]
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dd8:	4b1e      	ldr	r3, [pc, #120]	; (8005e54 <xPortStartScheduler+0x134>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <xPortStartScheduler+0x134>)
 8005de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005de2:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <xPortStartScheduler+0x134>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dea:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <xPortStartScheduler+0x134>)
 8005dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005df6:	4b18      	ldr	r3, [pc, #96]	; (8005e58 <xPortStartScheduler+0x138>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a17      	ldr	r2, [pc, #92]	; (8005e58 <xPortStartScheduler+0x138>)
 8005dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e02:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <xPortStartScheduler+0x138>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a14      	ldr	r2, [pc, #80]	; (8005e58 <xPortStartScheduler+0x138>)
 8005e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e0e:	f000 f8dd 	bl	8005fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <xPortStartScheduler+0x13c>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e18:	f000 f8fc 	bl	8006014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <xPortStartScheduler+0x140>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a0f      	ldr	r2, [pc, #60]	; (8005e60 <xPortStartScheduler+0x140>)
 8005e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e28:	f7ff ff66 	bl	8005cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e2c:	f7ff fcec 	bl	8005808 <vTaskSwitchContext>
	prvTaskExitError();
 8005e30:	f7ff ff22 	bl	8005c78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	e000ed00 	.word	0xe000ed00
 8005e44:	410fc271 	.word	0x410fc271
 8005e48:	410fc270 	.word	0x410fc270
 8005e4c:	e000e400 	.word	0xe000e400
 8005e50:	20000804 	.word	0x20000804
 8005e54:	20000808 	.word	0x20000808
 8005e58:	e000ed20 	.word	0xe000ed20
 8005e5c:	20000050 	.word	0x20000050
 8005e60:	e000ef34 	.word	0xe000ef34

08005e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	607b      	str	r3, [r7, #4]
}
 8005e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <vPortEnterCritical+0x58>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <vPortEnterCritical+0x58>)
 8005e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e88:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <vPortEnterCritical+0x58>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d10f      	bne.n	8005eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <vPortEnterCritical+0x5c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	603b      	str	r3, [r7, #0]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <vPortEnterCritical+0x4a>
	}
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	20000050 	.word	0x20000050
 8005ec0:	e000ed04 	.word	0xe000ed04

08005ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005eca:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <vPortExitCritical+0x50>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <vPortExitCritical+0x24>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	607b      	str	r3, [r7, #4]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <vPortExitCritical+0x50>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	4a09      	ldr	r2, [pc, #36]	; (8005f14 <vPortExitCritical+0x50>)
 8005ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ef2:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <vPortExitCritical+0x50>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d105      	bne.n	8005f06 <vPortExitCritical+0x42>
 8005efa:	2300      	movs	r3, #0
 8005efc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000050 	.word	0x20000050
	...

08005f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f20:	f3ef 8009 	mrs	r0, PSP
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	4b15      	ldr	r3, [pc, #84]	; (8005f80 <pxCurrentTCBConst>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	f01e 0f10 	tst.w	lr, #16
 8005f30:	bf08      	it	eq
 8005f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3a:	6010      	str	r0, [r2, #0]
 8005f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f44:	f380 8811 	msr	BASEPRI, r0
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f7ff fc5a 	bl	8005808 <vTaskSwitchContext>
 8005f54:	f04f 0000 	mov.w	r0, #0
 8005f58:	f380 8811 	msr	BASEPRI, r0
 8005f5c:	bc09      	pop	{r0, r3}
 8005f5e:	6819      	ldr	r1, [r3, #0]
 8005f60:	6808      	ldr	r0, [r1, #0]
 8005f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f66:	f01e 0f10 	tst.w	lr, #16
 8005f6a:	bf08      	it	eq
 8005f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f70:	f380 8809 	msr	PSP, r0
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	f3af 8000 	nop.w

08005f80 <pxCurrentTCBConst>:
 8005f80:	200006d8 	.word	0x200006d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop

08005f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	607b      	str	r3, [r7, #4]
}
 8005fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fa2:	f7ff fb79 	bl	8005698 <xTaskIncrementTick>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <SysTick_Handler+0x40>)
 8005fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	f383 8811 	msr	BASEPRI, r3
}
 8005fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fc0:	bf00      	nop
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <vPortSetupTimerInterrupt+0x34>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <vPortSetupTimerInterrupt+0x38>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <vPortSetupTimerInterrupt+0x3c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a0a      	ldr	r2, [pc, #40]	; (800600c <vPortSetupTimerInterrupt+0x40>)
 8005fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe6:	099b      	lsrs	r3, r3, #6
 8005fe8:	4a09      	ldr	r2, [pc, #36]	; (8006010 <vPortSetupTimerInterrupt+0x44>)
 8005fea:	3b01      	subs	r3, #1
 8005fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fee:	4b04      	ldr	r3, [pc, #16]	; (8006000 <vPortSetupTimerInterrupt+0x34>)
 8005ff0:	2207      	movs	r2, #7
 8005ff2:	601a      	str	r2, [r3, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	e000e010 	.word	0xe000e010
 8006004:	e000e018 	.word	0xe000e018
 8006008:	20000004 	.word	0x20000004
 800600c:	10624dd3 	.word	0x10624dd3
 8006010:	e000e014 	.word	0xe000e014

08006014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006024 <vPortEnableVFP+0x10>
 8006018:	6801      	ldr	r1, [r0, #0]
 800601a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800601e:	6001      	str	r1, [r0, #0]
 8006020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006022:	bf00      	nop
 8006024:	e000ed88 	.word	0xe000ed88

08006028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800602e:	f3ef 8305 	mrs	r3, IPSR
 8006032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b0f      	cmp	r3, #15
 8006038:	d914      	bls.n	8006064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800603a:	4a17      	ldr	r2, [pc, #92]	; (8006098 <vPortValidateInterruptPriority+0x70>)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006044:	4b15      	ldr	r3, [pc, #84]	; (800609c <vPortValidateInterruptPriority+0x74>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	7afa      	ldrb	r2, [r7, #11]
 800604a:	429a      	cmp	r2, r3
 800604c:	d20a      	bcs.n	8006064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
}
 8006060:	bf00      	nop
 8006062:	e7fe      	b.n	8006062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006064:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <vPortValidateInterruptPriority+0x78>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800606c:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <vPortValidateInterruptPriority+0x7c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d90a      	bls.n	800608a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	603b      	str	r3, [r7, #0]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <vPortValidateInterruptPriority+0x60>
	}
 800608a:	bf00      	nop
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	e000e3f0 	.word	0xe000e3f0
 800609c:	20000804 	.word	0x20000804
 80060a0:	e000ed0c 	.word	0xe000ed0c
 80060a4:	20000808 	.word	0x20000808

080060a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060b4:	f7ff fa24 	bl	8005500 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060b8:	4b5b      	ldr	r3, [pc, #364]	; (8006228 <pvPortMalloc+0x180>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060c0:	f000 f920 	bl	8006304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060c4:	4b59      	ldr	r3, [pc, #356]	; (800622c <pvPortMalloc+0x184>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f040 8093 	bne.w	80061f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01d      	beq.n	8006114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80060d8:	2208      	movs	r2, #8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4413      	add	r3, r2
 80060de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d014      	beq.n	8006114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f023 0307 	bic.w	r3, r3, #7
 80060f0:	3308      	adds	r3, #8
 80060f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <pvPortMalloc+0x6c>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	617b      	str	r3, [r7, #20]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d06e      	beq.n	80061f8 <pvPortMalloc+0x150>
 800611a:	4b45      	ldr	r3, [pc, #276]	; (8006230 <pvPortMalloc+0x188>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d869      	bhi.n	80061f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006124:	4b43      	ldr	r3, [pc, #268]	; (8006234 <pvPortMalloc+0x18c>)
 8006126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006128:	4b42      	ldr	r3, [pc, #264]	; (8006234 <pvPortMalloc+0x18c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800612e:	e004      	b.n	800613a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d903      	bls.n	800614c <pvPortMalloc+0xa4>
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1f1      	bne.n	8006130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800614c:	4b36      	ldr	r3, [pc, #216]	; (8006228 <pvPortMalloc+0x180>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006152:	429a      	cmp	r2, r3
 8006154:	d050      	beq.n	80061f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2208      	movs	r2, #8
 800615c:	4413      	add	r3, r2
 800615e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	2308      	movs	r3, #8
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	429a      	cmp	r2, r3
 8006176:	d91f      	bls.n	80061b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <pvPortMalloc+0xf8>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	613b      	str	r3, [r7, #16]
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	1ad2      	subs	r2, r2, r3
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061b2:	69b8      	ldr	r0, [r7, #24]
 80061b4:	f000 f908 	bl	80063c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061b8:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <pvPortMalloc+0x188>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <pvPortMalloc+0x188>)
 80061c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061c6:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <pvPortMalloc+0x188>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b1b      	ldr	r3, [pc, #108]	; (8006238 <pvPortMalloc+0x190>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d203      	bcs.n	80061da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061d2:	4b17      	ldr	r3, [pc, #92]	; (8006230 <pvPortMalloc+0x188>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a18      	ldr	r2, [pc, #96]	; (8006238 <pvPortMalloc+0x190>)
 80061d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	4b13      	ldr	r3, [pc, #76]	; (800622c <pvPortMalloc+0x184>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061ee:	4b13      	ldr	r3, [pc, #76]	; (800623c <pvPortMalloc+0x194>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	4a11      	ldr	r2, [pc, #68]	; (800623c <pvPortMalloc+0x194>)
 80061f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061f8:	f7ff f990 	bl	800551c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <pvPortMalloc+0x174>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60fb      	str	r3, [r7, #12]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <pvPortMalloc+0x172>
	return pvReturn;
 800621c:	69fb      	ldr	r3, [r7, #28]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3728      	adds	r7, #40	; 0x28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20004414 	.word	0x20004414
 800622c:	20004428 	.word	0x20004428
 8006230:	20004418 	.word	0x20004418
 8006234:	2000440c 	.word	0x2000440c
 8006238:	2000441c 	.word	0x2000441c
 800623c:	20004420 	.word	0x20004420

08006240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d04d      	beq.n	80062ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006252:	2308      	movs	r3, #8
 8006254:	425b      	negs	r3, r3
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4413      	add	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <vPortFree+0xb8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <vPortFree+0x44>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	60fb      	str	r3, [r7, #12]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <vPortFree+0x62>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	60bb      	str	r3, [r7, #8]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <vPortFree+0xb8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01e      	beq.n	80062ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d11a      	bne.n	80062ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	4b0e      	ldr	r3, [pc, #56]	; (80062f8 <vPortFree+0xb8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	401a      	ands	r2, r3
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062c8:	f7ff f91a 	bl	8005500 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <vPortFree+0xbc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4413      	add	r3, r2
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <vPortFree+0xbc>)
 80062d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062da:	6938      	ldr	r0, [r7, #16]
 80062dc:	f000 f874 	bl	80063c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062e0:	4b07      	ldr	r3, [pc, #28]	; (8006300 <vPortFree+0xc0>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3301      	adds	r3, #1
 80062e6:	4a06      	ldr	r2, [pc, #24]	; (8006300 <vPortFree+0xc0>)
 80062e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062ea:	f7ff f917 	bl	800551c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062ee:	bf00      	nop
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20004428 	.word	0x20004428
 80062fc:	20004418 	.word	0x20004418
 8006300:	20004424 	.word	0x20004424

08006304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800630a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800630e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006310:	4b27      	ldr	r3, [pc, #156]	; (80063b0 <prvHeapInit+0xac>)
 8006312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3307      	adds	r3, #7
 8006322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0307 	bic.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	4a1f      	ldr	r2, [pc, #124]	; (80063b0 <prvHeapInit+0xac>)
 8006334:	4413      	add	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800633c:	4a1d      	ldr	r2, [pc, #116]	; (80063b4 <prvHeapInit+0xb0>)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006342:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <prvHeapInit+0xb0>)
 8006344:	2200      	movs	r2, #0
 8006346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4413      	add	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006350:	2208      	movs	r2, #8
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0307 	bic.w	r3, r3, #7
 800635e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <prvHeapInit+0xb4>)
 8006364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <prvHeapInit+0xb4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2200      	movs	r2, #0
 800636c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <prvHeapInit+0xb4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	1ad2      	subs	r2, r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <prvHeapInit+0xb4>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <prvHeapInit+0xb8>)
 8006392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <prvHeapInit+0xbc>)
 800639a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <prvHeapInit+0xc0>)
 800639e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063a2:	601a      	str	r2, [r3, #0]
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	2000080c 	.word	0x2000080c
 80063b4:	2000440c 	.word	0x2000440c
 80063b8:	20004414 	.word	0x20004414
 80063bc:	2000441c 	.word	0x2000441c
 80063c0:	20004418 	.word	0x20004418
 80063c4:	20004428 	.word	0x20004428

080063c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063d0:	4b28      	ldr	r3, [pc, #160]	; (8006474 <prvInsertBlockIntoFreeList+0xac>)
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e002      	b.n	80063dc <prvInsertBlockIntoFreeList+0x14>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d8f7      	bhi.n	80063d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d108      	bne.n	800640a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	441a      	add	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	441a      	add	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d118      	bne.n	8006450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b15      	ldr	r3, [pc, #84]	; (8006478 <prvInsertBlockIntoFreeList+0xb0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d00d      	beq.n	8006446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	441a      	add	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	e008      	b.n	8006458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006446:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <prvInsertBlockIntoFreeList+0xb0>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e003      	b.n	8006458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	429a      	cmp	r2, r3
 800645e:	d002      	beq.n	8006466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	2000440c 	.word	0x2000440c
 8006478:	20004414 	.word	0x20004414

0800647c <__errno>:
 800647c:	4b01      	ldr	r3, [pc, #4]	; (8006484 <__errno+0x8>)
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000054 	.word	0x20000054

08006488 <__libc_init_array>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4d0d      	ldr	r5, [pc, #52]	; (80064c0 <__libc_init_array+0x38>)
 800648c:	4c0d      	ldr	r4, [pc, #52]	; (80064c4 <__libc_init_array+0x3c>)
 800648e:	1b64      	subs	r4, r4, r5
 8006490:	10a4      	asrs	r4, r4, #2
 8006492:	2600      	movs	r6, #0
 8006494:	42a6      	cmp	r6, r4
 8006496:	d109      	bne.n	80064ac <__libc_init_array+0x24>
 8006498:	4d0b      	ldr	r5, [pc, #44]	; (80064c8 <__libc_init_array+0x40>)
 800649a:	4c0c      	ldr	r4, [pc, #48]	; (80064cc <__libc_init_array+0x44>)
 800649c:	f000 fd32 	bl	8006f04 <_init>
 80064a0:	1b64      	subs	r4, r4, r5
 80064a2:	10a4      	asrs	r4, r4, #2
 80064a4:	2600      	movs	r6, #0
 80064a6:	42a6      	cmp	r6, r4
 80064a8:	d105      	bne.n	80064b6 <__libc_init_array+0x2e>
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b0:	4798      	blx	r3
 80064b2:	3601      	adds	r6, #1
 80064b4:	e7ee      	b.n	8006494 <__libc_init_array+0xc>
 80064b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ba:	4798      	blx	r3
 80064bc:	3601      	adds	r6, #1
 80064be:	e7f2      	b.n	80064a6 <__libc_init_array+0x1e>
 80064c0:	08007448 	.word	0x08007448
 80064c4:	08007448 	.word	0x08007448
 80064c8:	08007448 	.word	0x08007448
 80064cc:	0800744c 	.word	0x0800744c

080064d0 <__retarget_lock_acquire_recursive>:
 80064d0:	4770      	bx	lr

080064d2 <__retarget_lock_release_recursive>:
 80064d2:	4770      	bx	lr

080064d4 <memcpy>:
 80064d4:	440a      	add	r2, r1
 80064d6:	4291      	cmp	r1, r2
 80064d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064dc:	d100      	bne.n	80064e0 <memcpy+0xc>
 80064de:	4770      	bx	lr
 80064e0:	b510      	push	{r4, lr}
 80064e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ea:	4291      	cmp	r1, r2
 80064ec:	d1f9      	bne.n	80064e2 <memcpy+0xe>
 80064ee:	bd10      	pop	{r4, pc}

080064f0 <memset>:
 80064f0:	4402      	add	r2, r0
 80064f2:	4603      	mov	r3, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <_free_r>:
 8006500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006502:	2900      	cmp	r1, #0
 8006504:	d044      	beq.n	8006590 <_free_r+0x90>
 8006506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650a:	9001      	str	r0, [sp, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f1a1 0404 	sub.w	r4, r1, #4
 8006512:	bfb8      	it	lt
 8006514:	18e4      	addlt	r4, r4, r3
 8006516:	f000 f9a7 	bl	8006868 <__malloc_lock>
 800651a:	4a1e      	ldr	r2, [pc, #120]	; (8006594 <_free_r+0x94>)
 800651c:	9801      	ldr	r0, [sp, #4]
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	b933      	cbnz	r3, 8006530 <_free_r+0x30>
 8006522:	6063      	str	r3, [r4, #4]
 8006524:	6014      	str	r4, [r2, #0]
 8006526:	b003      	add	sp, #12
 8006528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800652c:	f000 b9a2 	b.w	8006874 <__malloc_unlock>
 8006530:	42a3      	cmp	r3, r4
 8006532:	d908      	bls.n	8006546 <_free_r+0x46>
 8006534:	6825      	ldr	r5, [r4, #0]
 8006536:	1961      	adds	r1, r4, r5
 8006538:	428b      	cmp	r3, r1
 800653a:	bf01      	itttt	eq
 800653c:	6819      	ldreq	r1, [r3, #0]
 800653e:	685b      	ldreq	r3, [r3, #4]
 8006540:	1949      	addeq	r1, r1, r5
 8006542:	6021      	streq	r1, [r4, #0]
 8006544:	e7ed      	b.n	8006522 <_free_r+0x22>
 8006546:	461a      	mov	r2, r3
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	b10b      	cbz	r3, 8006550 <_free_r+0x50>
 800654c:	42a3      	cmp	r3, r4
 800654e:	d9fa      	bls.n	8006546 <_free_r+0x46>
 8006550:	6811      	ldr	r1, [r2, #0]
 8006552:	1855      	adds	r5, r2, r1
 8006554:	42a5      	cmp	r5, r4
 8006556:	d10b      	bne.n	8006570 <_free_r+0x70>
 8006558:	6824      	ldr	r4, [r4, #0]
 800655a:	4421      	add	r1, r4
 800655c:	1854      	adds	r4, r2, r1
 800655e:	42a3      	cmp	r3, r4
 8006560:	6011      	str	r1, [r2, #0]
 8006562:	d1e0      	bne.n	8006526 <_free_r+0x26>
 8006564:	681c      	ldr	r4, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	6053      	str	r3, [r2, #4]
 800656a:	4421      	add	r1, r4
 800656c:	6011      	str	r1, [r2, #0]
 800656e:	e7da      	b.n	8006526 <_free_r+0x26>
 8006570:	d902      	bls.n	8006578 <_free_r+0x78>
 8006572:	230c      	movs	r3, #12
 8006574:	6003      	str	r3, [r0, #0]
 8006576:	e7d6      	b.n	8006526 <_free_r+0x26>
 8006578:	6825      	ldr	r5, [r4, #0]
 800657a:	1961      	adds	r1, r4, r5
 800657c:	428b      	cmp	r3, r1
 800657e:	bf04      	itt	eq
 8006580:	6819      	ldreq	r1, [r3, #0]
 8006582:	685b      	ldreq	r3, [r3, #4]
 8006584:	6063      	str	r3, [r4, #4]
 8006586:	bf04      	itt	eq
 8006588:	1949      	addeq	r1, r1, r5
 800658a:	6021      	streq	r1, [r4, #0]
 800658c:	6054      	str	r4, [r2, #4]
 800658e:	e7ca      	b.n	8006526 <_free_r+0x26>
 8006590:	b003      	add	sp, #12
 8006592:	bd30      	pop	{r4, r5, pc}
 8006594:	20004430 	.word	0x20004430

08006598 <sbrk_aligned>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	4e0e      	ldr	r6, [pc, #56]	; (80065d4 <sbrk_aligned+0x3c>)
 800659c:	460c      	mov	r4, r1
 800659e:	6831      	ldr	r1, [r6, #0]
 80065a0:	4605      	mov	r5, r0
 80065a2:	b911      	cbnz	r1, 80065aa <sbrk_aligned+0x12>
 80065a4:	f000 f8f6 	bl	8006794 <_sbrk_r>
 80065a8:	6030      	str	r0, [r6, #0]
 80065aa:	4621      	mov	r1, r4
 80065ac:	4628      	mov	r0, r5
 80065ae:	f000 f8f1 	bl	8006794 <_sbrk_r>
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	d00a      	beq.n	80065cc <sbrk_aligned+0x34>
 80065b6:	1cc4      	adds	r4, r0, #3
 80065b8:	f024 0403 	bic.w	r4, r4, #3
 80065bc:	42a0      	cmp	r0, r4
 80065be:	d007      	beq.n	80065d0 <sbrk_aligned+0x38>
 80065c0:	1a21      	subs	r1, r4, r0
 80065c2:	4628      	mov	r0, r5
 80065c4:	f000 f8e6 	bl	8006794 <_sbrk_r>
 80065c8:	3001      	adds	r0, #1
 80065ca:	d101      	bne.n	80065d0 <sbrk_aligned+0x38>
 80065cc:	f04f 34ff 	mov.w	r4, #4294967295
 80065d0:	4620      	mov	r0, r4
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
 80065d4:	20004434 	.word	0x20004434

080065d8 <_malloc_r>:
 80065d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065dc:	1ccd      	adds	r5, r1, #3
 80065de:	f025 0503 	bic.w	r5, r5, #3
 80065e2:	3508      	adds	r5, #8
 80065e4:	2d0c      	cmp	r5, #12
 80065e6:	bf38      	it	cc
 80065e8:	250c      	movcc	r5, #12
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	4607      	mov	r7, r0
 80065ee:	db01      	blt.n	80065f4 <_malloc_r+0x1c>
 80065f0:	42a9      	cmp	r1, r5
 80065f2:	d905      	bls.n	8006600 <_malloc_r+0x28>
 80065f4:	230c      	movs	r3, #12
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	2600      	movs	r6, #0
 80065fa:	4630      	mov	r0, r6
 80065fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006600:	4e2e      	ldr	r6, [pc, #184]	; (80066bc <_malloc_r+0xe4>)
 8006602:	f000 f931 	bl	8006868 <__malloc_lock>
 8006606:	6833      	ldr	r3, [r6, #0]
 8006608:	461c      	mov	r4, r3
 800660a:	bb34      	cbnz	r4, 800665a <_malloc_r+0x82>
 800660c:	4629      	mov	r1, r5
 800660e:	4638      	mov	r0, r7
 8006610:	f7ff ffc2 	bl	8006598 <sbrk_aligned>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	4604      	mov	r4, r0
 8006618:	d14d      	bne.n	80066b6 <_malloc_r+0xde>
 800661a:	6834      	ldr	r4, [r6, #0]
 800661c:	4626      	mov	r6, r4
 800661e:	2e00      	cmp	r6, #0
 8006620:	d140      	bne.n	80066a4 <_malloc_r+0xcc>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	4631      	mov	r1, r6
 8006626:	4638      	mov	r0, r7
 8006628:	eb04 0803 	add.w	r8, r4, r3
 800662c:	f000 f8b2 	bl	8006794 <_sbrk_r>
 8006630:	4580      	cmp	r8, r0
 8006632:	d13a      	bne.n	80066aa <_malloc_r+0xd2>
 8006634:	6821      	ldr	r1, [r4, #0]
 8006636:	3503      	adds	r5, #3
 8006638:	1a6d      	subs	r5, r5, r1
 800663a:	f025 0503 	bic.w	r5, r5, #3
 800663e:	3508      	adds	r5, #8
 8006640:	2d0c      	cmp	r5, #12
 8006642:	bf38      	it	cc
 8006644:	250c      	movcc	r5, #12
 8006646:	4629      	mov	r1, r5
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ffa5 	bl	8006598 <sbrk_aligned>
 800664e:	3001      	adds	r0, #1
 8006650:	d02b      	beq.n	80066aa <_malloc_r+0xd2>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	442b      	add	r3, r5
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	e00e      	b.n	8006678 <_malloc_r+0xa0>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	1b52      	subs	r2, r2, r5
 800665e:	d41e      	bmi.n	800669e <_malloc_r+0xc6>
 8006660:	2a0b      	cmp	r2, #11
 8006662:	d916      	bls.n	8006692 <_malloc_r+0xba>
 8006664:	1961      	adds	r1, r4, r5
 8006666:	42a3      	cmp	r3, r4
 8006668:	6025      	str	r5, [r4, #0]
 800666a:	bf18      	it	ne
 800666c:	6059      	strne	r1, [r3, #4]
 800666e:	6863      	ldr	r3, [r4, #4]
 8006670:	bf08      	it	eq
 8006672:	6031      	streq	r1, [r6, #0]
 8006674:	5162      	str	r2, [r4, r5]
 8006676:	604b      	str	r3, [r1, #4]
 8006678:	4638      	mov	r0, r7
 800667a:	f104 060b 	add.w	r6, r4, #11
 800667e:	f000 f8f9 	bl	8006874 <__malloc_unlock>
 8006682:	f026 0607 	bic.w	r6, r6, #7
 8006686:	1d23      	adds	r3, r4, #4
 8006688:	1af2      	subs	r2, r6, r3
 800668a:	d0b6      	beq.n	80065fa <_malloc_r+0x22>
 800668c:	1b9b      	subs	r3, r3, r6
 800668e:	50a3      	str	r3, [r4, r2]
 8006690:	e7b3      	b.n	80065fa <_malloc_r+0x22>
 8006692:	6862      	ldr	r2, [r4, #4]
 8006694:	42a3      	cmp	r3, r4
 8006696:	bf0c      	ite	eq
 8006698:	6032      	streq	r2, [r6, #0]
 800669a:	605a      	strne	r2, [r3, #4]
 800669c:	e7ec      	b.n	8006678 <_malloc_r+0xa0>
 800669e:	4623      	mov	r3, r4
 80066a0:	6864      	ldr	r4, [r4, #4]
 80066a2:	e7b2      	b.n	800660a <_malloc_r+0x32>
 80066a4:	4634      	mov	r4, r6
 80066a6:	6876      	ldr	r6, [r6, #4]
 80066a8:	e7b9      	b.n	800661e <_malloc_r+0x46>
 80066aa:	230c      	movs	r3, #12
 80066ac:	603b      	str	r3, [r7, #0]
 80066ae:	4638      	mov	r0, r7
 80066b0:	f000 f8e0 	bl	8006874 <__malloc_unlock>
 80066b4:	e7a1      	b.n	80065fa <_malloc_r+0x22>
 80066b6:	6025      	str	r5, [r4, #0]
 80066b8:	e7de      	b.n	8006678 <_malloc_r+0xa0>
 80066ba:	bf00      	nop
 80066bc:	20004430 	.word	0x20004430

080066c0 <cleanup_glue>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	460c      	mov	r4, r1
 80066c4:	6809      	ldr	r1, [r1, #0]
 80066c6:	4605      	mov	r5, r0
 80066c8:	b109      	cbz	r1, 80066ce <cleanup_glue+0xe>
 80066ca:	f7ff fff9 	bl	80066c0 <cleanup_glue>
 80066ce:	4621      	mov	r1, r4
 80066d0:	4628      	mov	r0, r5
 80066d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d6:	f7ff bf13 	b.w	8006500 <_free_r>
	...

080066dc <_reclaim_reent>:
 80066dc:	4b2c      	ldr	r3, [pc, #176]	; (8006790 <_reclaim_reent+0xb4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4283      	cmp	r3, r0
 80066e2:	b570      	push	{r4, r5, r6, lr}
 80066e4:	4604      	mov	r4, r0
 80066e6:	d051      	beq.n	800678c <_reclaim_reent+0xb0>
 80066e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80066ea:	b143      	cbz	r3, 80066fe <_reclaim_reent+0x22>
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d14a      	bne.n	8006788 <_reclaim_reent+0xac>
 80066f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066f4:	6819      	ldr	r1, [r3, #0]
 80066f6:	b111      	cbz	r1, 80066fe <_reclaim_reent+0x22>
 80066f8:	4620      	mov	r0, r4
 80066fa:	f7ff ff01 	bl	8006500 <_free_r>
 80066fe:	6961      	ldr	r1, [r4, #20]
 8006700:	b111      	cbz	r1, 8006708 <_reclaim_reent+0x2c>
 8006702:	4620      	mov	r0, r4
 8006704:	f7ff fefc 	bl	8006500 <_free_r>
 8006708:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800670a:	b111      	cbz	r1, 8006712 <_reclaim_reent+0x36>
 800670c:	4620      	mov	r0, r4
 800670e:	f7ff fef7 	bl	8006500 <_free_r>
 8006712:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006714:	b111      	cbz	r1, 800671c <_reclaim_reent+0x40>
 8006716:	4620      	mov	r0, r4
 8006718:	f7ff fef2 	bl	8006500 <_free_r>
 800671c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800671e:	b111      	cbz	r1, 8006726 <_reclaim_reent+0x4a>
 8006720:	4620      	mov	r0, r4
 8006722:	f7ff feed 	bl	8006500 <_free_r>
 8006726:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006728:	b111      	cbz	r1, 8006730 <_reclaim_reent+0x54>
 800672a:	4620      	mov	r0, r4
 800672c:	f7ff fee8 	bl	8006500 <_free_r>
 8006730:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006732:	b111      	cbz	r1, 800673a <_reclaim_reent+0x5e>
 8006734:	4620      	mov	r0, r4
 8006736:	f7ff fee3 	bl	8006500 <_free_r>
 800673a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800673c:	b111      	cbz	r1, 8006744 <_reclaim_reent+0x68>
 800673e:	4620      	mov	r0, r4
 8006740:	f7ff fede 	bl	8006500 <_free_r>
 8006744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006746:	b111      	cbz	r1, 800674e <_reclaim_reent+0x72>
 8006748:	4620      	mov	r0, r4
 800674a:	f7ff fed9 	bl	8006500 <_free_r>
 800674e:	69a3      	ldr	r3, [r4, #24]
 8006750:	b1e3      	cbz	r3, 800678c <_reclaim_reent+0xb0>
 8006752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006754:	4620      	mov	r0, r4
 8006756:	4798      	blx	r3
 8006758:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800675a:	b1b9      	cbz	r1, 800678c <_reclaim_reent+0xb0>
 800675c:	4620      	mov	r0, r4
 800675e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006762:	f7ff bfad 	b.w	80066c0 <cleanup_glue>
 8006766:	5949      	ldr	r1, [r1, r5]
 8006768:	b941      	cbnz	r1, 800677c <_reclaim_reent+0xa0>
 800676a:	3504      	adds	r5, #4
 800676c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800676e:	2d80      	cmp	r5, #128	; 0x80
 8006770:	68d9      	ldr	r1, [r3, #12]
 8006772:	d1f8      	bne.n	8006766 <_reclaim_reent+0x8a>
 8006774:	4620      	mov	r0, r4
 8006776:	f7ff fec3 	bl	8006500 <_free_r>
 800677a:	e7ba      	b.n	80066f2 <_reclaim_reent+0x16>
 800677c:	680e      	ldr	r6, [r1, #0]
 800677e:	4620      	mov	r0, r4
 8006780:	f7ff febe 	bl	8006500 <_free_r>
 8006784:	4631      	mov	r1, r6
 8006786:	e7ef      	b.n	8006768 <_reclaim_reent+0x8c>
 8006788:	2500      	movs	r5, #0
 800678a:	e7ef      	b.n	800676c <_reclaim_reent+0x90>
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	bf00      	nop
 8006790:	20000054 	.word	0x20000054

08006794 <_sbrk_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d06      	ldr	r5, [pc, #24]	; (80067b0 <_sbrk_r+0x1c>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	f7fa fb84 	bl	8000eac <_sbrk>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_sbrk_r+0x1a>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_sbrk_r+0x1a>
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	20004438 	.word	0x20004438

080067b4 <_vsniprintf_r>:
 80067b4:	b530      	push	{r4, r5, lr}
 80067b6:	4614      	mov	r4, r2
 80067b8:	2c00      	cmp	r4, #0
 80067ba:	b09b      	sub	sp, #108	; 0x6c
 80067bc:	4605      	mov	r5, r0
 80067be:	461a      	mov	r2, r3
 80067c0:	da05      	bge.n	80067ce <_vsniprintf_r+0x1a>
 80067c2:	238b      	movs	r3, #139	; 0x8b
 80067c4:	6003      	str	r3, [r0, #0]
 80067c6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ca:	b01b      	add	sp, #108	; 0x6c
 80067cc:	bd30      	pop	{r4, r5, pc}
 80067ce:	f44f 7302 	mov.w	r3, #520	; 0x208
 80067d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80067d6:	bf14      	ite	ne
 80067d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80067dc:	4623      	moveq	r3, r4
 80067de:	9302      	str	r3, [sp, #8]
 80067e0:	9305      	str	r3, [sp, #20]
 80067e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067e6:	9100      	str	r1, [sp, #0]
 80067e8:	9104      	str	r1, [sp, #16]
 80067ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80067ee:	4669      	mov	r1, sp
 80067f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067f2:	f000 f8a1 	bl	8006938 <_svfiprintf_r>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	bfbc      	itt	lt
 80067fa:	238b      	movlt	r3, #139	; 0x8b
 80067fc:	602b      	strlt	r3, [r5, #0]
 80067fe:	2c00      	cmp	r4, #0
 8006800:	d0e3      	beq.n	80067ca <_vsniprintf_r+0x16>
 8006802:	9b00      	ldr	r3, [sp, #0]
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	e7df      	b.n	80067ca <_vsniprintf_r+0x16>
	...

0800680c <vsniprintf>:
 800680c:	b507      	push	{r0, r1, r2, lr}
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	460a      	mov	r2, r1
 8006814:	4601      	mov	r1, r0
 8006816:	4803      	ldr	r0, [pc, #12]	; (8006824 <vsniprintf+0x18>)
 8006818:	6800      	ldr	r0, [r0, #0]
 800681a:	f7ff ffcb 	bl	80067b4 <_vsniprintf_r>
 800681e:	b003      	add	sp, #12
 8006820:	f85d fb04 	ldr.w	pc, [sp], #4
 8006824:	20000054 	.word	0x20000054

08006828 <_vsiprintf_r>:
 8006828:	b500      	push	{lr}
 800682a:	b09b      	sub	sp, #108	; 0x6c
 800682c:	9100      	str	r1, [sp, #0]
 800682e:	9104      	str	r1, [sp, #16]
 8006830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006834:	9105      	str	r1, [sp, #20]
 8006836:	9102      	str	r1, [sp, #8]
 8006838:	4905      	ldr	r1, [pc, #20]	; (8006850 <_vsiprintf_r+0x28>)
 800683a:	9103      	str	r1, [sp, #12]
 800683c:	4669      	mov	r1, sp
 800683e:	f000 f87b 	bl	8006938 <_svfiprintf_r>
 8006842:	9b00      	ldr	r3, [sp, #0]
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	b01b      	add	sp, #108	; 0x6c
 800684a:	f85d fb04 	ldr.w	pc, [sp], #4
 800684e:	bf00      	nop
 8006850:	ffff0208 	.word	0xffff0208

08006854 <vsiprintf>:
 8006854:	4613      	mov	r3, r2
 8006856:	460a      	mov	r2, r1
 8006858:	4601      	mov	r1, r0
 800685a:	4802      	ldr	r0, [pc, #8]	; (8006864 <vsiprintf+0x10>)
 800685c:	6800      	ldr	r0, [r0, #0]
 800685e:	f7ff bfe3 	b.w	8006828 <_vsiprintf_r>
 8006862:	bf00      	nop
 8006864:	20000054 	.word	0x20000054

08006868 <__malloc_lock>:
 8006868:	4801      	ldr	r0, [pc, #4]	; (8006870 <__malloc_lock+0x8>)
 800686a:	f7ff be31 	b.w	80064d0 <__retarget_lock_acquire_recursive>
 800686e:	bf00      	nop
 8006870:	2000442c 	.word	0x2000442c

08006874 <__malloc_unlock>:
 8006874:	4801      	ldr	r0, [pc, #4]	; (800687c <__malloc_unlock+0x8>)
 8006876:	f7ff be2c 	b.w	80064d2 <__retarget_lock_release_recursive>
 800687a:	bf00      	nop
 800687c:	2000442c 	.word	0x2000442c

08006880 <__ssputs_r>:
 8006880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006884:	688e      	ldr	r6, [r1, #8]
 8006886:	429e      	cmp	r6, r3
 8006888:	4682      	mov	sl, r0
 800688a:	460c      	mov	r4, r1
 800688c:	4690      	mov	r8, r2
 800688e:	461f      	mov	r7, r3
 8006890:	d838      	bhi.n	8006904 <__ssputs_r+0x84>
 8006892:	898a      	ldrh	r2, [r1, #12]
 8006894:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006898:	d032      	beq.n	8006900 <__ssputs_r+0x80>
 800689a:	6825      	ldr	r5, [r4, #0]
 800689c:	6909      	ldr	r1, [r1, #16]
 800689e:	eba5 0901 	sub.w	r9, r5, r1
 80068a2:	6965      	ldr	r5, [r4, #20]
 80068a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068ac:	3301      	adds	r3, #1
 80068ae:	444b      	add	r3, r9
 80068b0:	106d      	asrs	r5, r5, #1
 80068b2:	429d      	cmp	r5, r3
 80068b4:	bf38      	it	cc
 80068b6:	461d      	movcc	r5, r3
 80068b8:	0553      	lsls	r3, r2, #21
 80068ba:	d531      	bpl.n	8006920 <__ssputs_r+0xa0>
 80068bc:	4629      	mov	r1, r5
 80068be:	f7ff fe8b 	bl	80065d8 <_malloc_r>
 80068c2:	4606      	mov	r6, r0
 80068c4:	b950      	cbnz	r0, 80068dc <__ssputs_r+0x5c>
 80068c6:	230c      	movs	r3, #12
 80068c8:	f8ca 3000 	str.w	r3, [sl]
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d2:	81a3      	strh	r3, [r4, #12]
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068dc:	6921      	ldr	r1, [r4, #16]
 80068de:	464a      	mov	r2, r9
 80068e0:	f7ff fdf8 	bl	80064d4 <memcpy>
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	6126      	str	r6, [r4, #16]
 80068f2:	6165      	str	r5, [r4, #20]
 80068f4:	444e      	add	r6, r9
 80068f6:	eba5 0509 	sub.w	r5, r5, r9
 80068fa:	6026      	str	r6, [r4, #0]
 80068fc:	60a5      	str	r5, [r4, #8]
 80068fe:	463e      	mov	r6, r7
 8006900:	42be      	cmp	r6, r7
 8006902:	d900      	bls.n	8006906 <__ssputs_r+0x86>
 8006904:	463e      	mov	r6, r7
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	4632      	mov	r2, r6
 800690a:	4641      	mov	r1, r8
 800690c:	f000 faa8 	bl	8006e60 <memmove>
 8006910:	68a3      	ldr	r3, [r4, #8]
 8006912:	1b9b      	subs	r3, r3, r6
 8006914:	60a3      	str	r3, [r4, #8]
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	4433      	add	r3, r6
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	2000      	movs	r0, #0
 800691e:	e7db      	b.n	80068d8 <__ssputs_r+0x58>
 8006920:	462a      	mov	r2, r5
 8006922:	f000 fab7 	bl	8006e94 <_realloc_r>
 8006926:	4606      	mov	r6, r0
 8006928:	2800      	cmp	r0, #0
 800692a:	d1e1      	bne.n	80068f0 <__ssputs_r+0x70>
 800692c:	6921      	ldr	r1, [r4, #16]
 800692e:	4650      	mov	r0, sl
 8006930:	f7ff fde6 	bl	8006500 <_free_r>
 8006934:	e7c7      	b.n	80068c6 <__ssputs_r+0x46>
	...

08006938 <_svfiprintf_r>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	4698      	mov	r8, r3
 800693e:	898b      	ldrh	r3, [r1, #12]
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	b09d      	sub	sp, #116	; 0x74
 8006944:	4607      	mov	r7, r0
 8006946:	460d      	mov	r5, r1
 8006948:	4614      	mov	r4, r2
 800694a:	d50e      	bpl.n	800696a <_svfiprintf_r+0x32>
 800694c:	690b      	ldr	r3, [r1, #16]
 800694e:	b963      	cbnz	r3, 800696a <_svfiprintf_r+0x32>
 8006950:	2140      	movs	r1, #64	; 0x40
 8006952:	f7ff fe41 	bl	80065d8 <_malloc_r>
 8006956:	6028      	str	r0, [r5, #0]
 8006958:	6128      	str	r0, [r5, #16]
 800695a:	b920      	cbnz	r0, 8006966 <_svfiprintf_r+0x2e>
 800695c:	230c      	movs	r3, #12
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	e0d1      	b.n	8006b0a <_svfiprintf_r+0x1d2>
 8006966:	2340      	movs	r3, #64	; 0x40
 8006968:	616b      	str	r3, [r5, #20]
 800696a:	2300      	movs	r3, #0
 800696c:	9309      	str	r3, [sp, #36]	; 0x24
 800696e:	2320      	movs	r3, #32
 8006970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006974:	f8cd 800c 	str.w	r8, [sp, #12]
 8006978:	2330      	movs	r3, #48	; 0x30
 800697a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b24 <_svfiprintf_r+0x1ec>
 800697e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006982:	f04f 0901 	mov.w	r9, #1
 8006986:	4623      	mov	r3, r4
 8006988:	469a      	mov	sl, r3
 800698a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800698e:	b10a      	cbz	r2, 8006994 <_svfiprintf_r+0x5c>
 8006990:	2a25      	cmp	r2, #37	; 0x25
 8006992:	d1f9      	bne.n	8006988 <_svfiprintf_r+0x50>
 8006994:	ebba 0b04 	subs.w	fp, sl, r4
 8006998:	d00b      	beq.n	80069b2 <_svfiprintf_r+0x7a>
 800699a:	465b      	mov	r3, fp
 800699c:	4622      	mov	r2, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7ff ff6d 	bl	8006880 <__ssputs_r>
 80069a6:	3001      	adds	r0, #1
 80069a8:	f000 80aa 	beq.w	8006b00 <_svfiprintf_r+0x1c8>
 80069ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ae:	445a      	add	r2, fp
 80069b0:	9209      	str	r2, [sp, #36]	; 0x24
 80069b2:	f89a 3000 	ldrb.w	r3, [sl]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80a2 	beq.w	8006b00 <_svfiprintf_r+0x1c8>
 80069bc:	2300      	movs	r3, #0
 80069be:	f04f 32ff 	mov.w	r2, #4294967295
 80069c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069c6:	f10a 0a01 	add.w	sl, sl, #1
 80069ca:	9304      	str	r3, [sp, #16]
 80069cc:	9307      	str	r3, [sp, #28]
 80069ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069d2:	931a      	str	r3, [sp, #104]	; 0x68
 80069d4:	4654      	mov	r4, sl
 80069d6:	2205      	movs	r2, #5
 80069d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069dc:	4851      	ldr	r0, [pc, #324]	; (8006b24 <_svfiprintf_r+0x1ec>)
 80069de:	f7f9 fc07 	bl	80001f0 <memchr>
 80069e2:	9a04      	ldr	r2, [sp, #16]
 80069e4:	b9d8      	cbnz	r0, 8006a1e <_svfiprintf_r+0xe6>
 80069e6:	06d0      	lsls	r0, r2, #27
 80069e8:	bf44      	itt	mi
 80069ea:	2320      	movmi	r3, #32
 80069ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069f0:	0711      	lsls	r1, r2, #28
 80069f2:	bf44      	itt	mi
 80069f4:	232b      	movmi	r3, #43	; 0x2b
 80069f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069fa:	f89a 3000 	ldrb.w	r3, [sl]
 80069fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006a00:	d015      	beq.n	8006a2e <_svfiprintf_r+0xf6>
 8006a02:	9a07      	ldr	r2, [sp, #28]
 8006a04:	4654      	mov	r4, sl
 8006a06:	2000      	movs	r0, #0
 8006a08:	f04f 0c0a 	mov.w	ip, #10
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a12:	3b30      	subs	r3, #48	; 0x30
 8006a14:	2b09      	cmp	r3, #9
 8006a16:	d94e      	bls.n	8006ab6 <_svfiprintf_r+0x17e>
 8006a18:	b1b0      	cbz	r0, 8006a48 <_svfiprintf_r+0x110>
 8006a1a:	9207      	str	r2, [sp, #28]
 8006a1c:	e014      	b.n	8006a48 <_svfiprintf_r+0x110>
 8006a1e:	eba0 0308 	sub.w	r3, r0, r8
 8006a22:	fa09 f303 	lsl.w	r3, r9, r3
 8006a26:	4313      	orrs	r3, r2
 8006a28:	9304      	str	r3, [sp, #16]
 8006a2a:	46a2      	mov	sl, r4
 8006a2c:	e7d2      	b.n	80069d4 <_svfiprintf_r+0x9c>
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	1d19      	adds	r1, r3, #4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	9103      	str	r1, [sp, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	bfbb      	ittet	lt
 8006a3a:	425b      	neglt	r3, r3
 8006a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a40:	9307      	strge	r3, [sp, #28]
 8006a42:	9307      	strlt	r3, [sp, #28]
 8006a44:	bfb8      	it	lt
 8006a46:	9204      	strlt	r2, [sp, #16]
 8006a48:	7823      	ldrb	r3, [r4, #0]
 8006a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a4c:	d10c      	bne.n	8006a68 <_svfiprintf_r+0x130>
 8006a4e:	7863      	ldrb	r3, [r4, #1]
 8006a50:	2b2a      	cmp	r3, #42	; 0x2a
 8006a52:	d135      	bne.n	8006ac0 <_svfiprintf_r+0x188>
 8006a54:	9b03      	ldr	r3, [sp, #12]
 8006a56:	1d1a      	adds	r2, r3, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	9203      	str	r2, [sp, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bfb8      	it	lt
 8006a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a64:	3402      	adds	r4, #2
 8006a66:	9305      	str	r3, [sp, #20]
 8006a68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b34 <_svfiprintf_r+0x1fc>
 8006a6c:	7821      	ldrb	r1, [r4, #0]
 8006a6e:	2203      	movs	r2, #3
 8006a70:	4650      	mov	r0, sl
 8006a72:	f7f9 fbbd 	bl	80001f0 <memchr>
 8006a76:	b140      	cbz	r0, 8006a8a <_svfiprintf_r+0x152>
 8006a78:	2340      	movs	r3, #64	; 0x40
 8006a7a:	eba0 000a 	sub.w	r0, r0, sl
 8006a7e:	fa03 f000 	lsl.w	r0, r3, r0
 8006a82:	9b04      	ldr	r3, [sp, #16]
 8006a84:	4303      	orrs	r3, r0
 8006a86:	3401      	adds	r4, #1
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8e:	4826      	ldr	r0, [pc, #152]	; (8006b28 <_svfiprintf_r+0x1f0>)
 8006a90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a94:	2206      	movs	r2, #6
 8006a96:	f7f9 fbab 	bl	80001f0 <memchr>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d038      	beq.n	8006b10 <_svfiprintf_r+0x1d8>
 8006a9e:	4b23      	ldr	r3, [pc, #140]	; (8006b2c <_svfiprintf_r+0x1f4>)
 8006aa0:	bb1b      	cbnz	r3, 8006aea <_svfiprintf_r+0x1b2>
 8006aa2:	9b03      	ldr	r3, [sp, #12]
 8006aa4:	3307      	adds	r3, #7
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	3308      	adds	r3, #8
 8006aac:	9303      	str	r3, [sp, #12]
 8006aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab0:	4433      	add	r3, r6
 8006ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab4:	e767      	b.n	8006986 <_svfiprintf_r+0x4e>
 8006ab6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aba:	460c      	mov	r4, r1
 8006abc:	2001      	movs	r0, #1
 8006abe:	e7a5      	b.n	8006a0c <_svfiprintf_r+0xd4>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	3401      	adds	r4, #1
 8006ac4:	9305      	str	r3, [sp, #20]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	f04f 0c0a 	mov.w	ip, #10
 8006acc:	4620      	mov	r0, r4
 8006ace:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ad2:	3a30      	subs	r2, #48	; 0x30
 8006ad4:	2a09      	cmp	r2, #9
 8006ad6:	d903      	bls.n	8006ae0 <_svfiprintf_r+0x1a8>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0c5      	beq.n	8006a68 <_svfiprintf_r+0x130>
 8006adc:	9105      	str	r1, [sp, #20]
 8006ade:	e7c3      	b.n	8006a68 <_svfiprintf_r+0x130>
 8006ae0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e7f0      	b.n	8006acc <_svfiprintf_r+0x194>
 8006aea:	ab03      	add	r3, sp, #12
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	462a      	mov	r2, r5
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <_svfiprintf_r+0x1f8>)
 8006af2:	a904      	add	r1, sp, #16
 8006af4:	4638      	mov	r0, r7
 8006af6:	f3af 8000 	nop.w
 8006afa:	1c42      	adds	r2, r0, #1
 8006afc:	4606      	mov	r6, r0
 8006afe:	d1d6      	bne.n	8006aae <_svfiprintf_r+0x176>
 8006b00:	89ab      	ldrh	r3, [r5, #12]
 8006b02:	065b      	lsls	r3, r3, #25
 8006b04:	f53f af2c 	bmi.w	8006960 <_svfiprintf_r+0x28>
 8006b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b0a:	b01d      	add	sp, #116	; 0x74
 8006b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b10:	ab03      	add	r3, sp, #12
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	462a      	mov	r2, r5
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <_svfiprintf_r+0x1f8>)
 8006b18:	a904      	add	r1, sp, #16
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	f000 f87a 	bl	8006c14 <_printf_i>
 8006b20:	e7eb      	b.n	8006afa <_svfiprintf_r+0x1c2>
 8006b22:	bf00      	nop
 8006b24:	0800740c 	.word	0x0800740c
 8006b28:	08007416 	.word	0x08007416
 8006b2c:	00000000 	.word	0x00000000
 8006b30:	08006881 	.word	0x08006881
 8006b34:	08007412 	.word	0x08007412

08006b38 <_printf_common>:
 8006b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b3c:	4616      	mov	r6, r2
 8006b3e:	4699      	mov	r9, r3
 8006b40:	688a      	ldr	r2, [r1, #8]
 8006b42:	690b      	ldr	r3, [r1, #16]
 8006b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	bfb8      	it	lt
 8006b4c:	4613      	movlt	r3, r2
 8006b4e:	6033      	str	r3, [r6, #0]
 8006b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b54:	4607      	mov	r7, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	b10a      	cbz	r2, 8006b5e <_printf_common+0x26>
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	6033      	str	r3, [r6, #0]
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	0699      	lsls	r1, r3, #26
 8006b62:	bf42      	ittt	mi
 8006b64:	6833      	ldrmi	r3, [r6, #0]
 8006b66:	3302      	addmi	r3, #2
 8006b68:	6033      	strmi	r3, [r6, #0]
 8006b6a:	6825      	ldr	r5, [r4, #0]
 8006b6c:	f015 0506 	ands.w	r5, r5, #6
 8006b70:	d106      	bne.n	8006b80 <_printf_common+0x48>
 8006b72:	f104 0a19 	add.w	sl, r4, #25
 8006b76:	68e3      	ldr	r3, [r4, #12]
 8006b78:	6832      	ldr	r2, [r6, #0]
 8006b7a:	1a9b      	subs	r3, r3, r2
 8006b7c:	42ab      	cmp	r3, r5
 8006b7e:	dc26      	bgt.n	8006bce <_printf_common+0x96>
 8006b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b84:	1e13      	subs	r3, r2, #0
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	bf18      	it	ne
 8006b8a:	2301      	movne	r3, #1
 8006b8c:	0692      	lsls	r2, r2, #26
 8006b8e:	d42b      	bmi.n	8006be8 <_printf_common+0xb0>
 8006b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b94:	4649      	mov	r1, r9
 8006b96:	4638      	mov	r0, r7
 8006b98:	47c0      	blx	r8
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	d01e      	beq.n	8006bdc <_printf_common+0xa4>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	68e5      	ldr	r5, [r4, #12]
 8006ba2:	6832      	ldr	r2, [r6, #0]
 8006ba4:	f003 0306 	and.w	r3, r3, #6
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	bf08      	it	eq
 8006bac:	1aad      	subeq	r5, r5, r2
 8006bae:	68a3      	ldr	r3, [r4, #8]
 8006bb0:	6922      	ldr	r2, [r4, #16]
 8006bb2:	bf0c      	ite	eq
 8006bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bb8:	2500      	movne	r5, #0
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	bfc4      	itt	gt
 8006bbe:	1a9b      	subgt	r3, r3, r2
 8006bc0:	18ed      	addgt	r5, r5, r3
 8006bc2:	2600      	movs	r6, #0
 8006bc4:	341a      	adds	r4, #26
 8006bc6:	42b5      	cmp	r5, r6
 8006bc8:	d11a      	bne.n	8006c00 <_printf_common+0xc8>
 8006bca:	2000      	movs	r0, #0
 8006bcc:	e008      	b.n	8006be0 <_printf_common+0xa8>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4652      	mov	r2, sl
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	47c0      	blx	r8
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d103      	bne.n	8006be4 <_printf_common+0xac>
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be4:	3501      	adds	r5, #1
 8006be6:	e7c6      	b.n	8006b76 <_printf_common+0x3e>
 8006be8:	18e1      	adds	r1, r4, r3
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	2030      	movs	r0, #48	; 0x30
 8006bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bf2:	4422      	add	r2, r4
 8006bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bfc:	3302      	adds	r3, #2
 8006bfe:	e7c7      	b.n	8006b90 <_printf_common+0x58>
 8006c00:	2301      	movs	r3, #1
 8006c02:	4622      	mov	r2, r4
 8006c04:	4649      	mov	r1, r9
 8006c06:	4638      	mov	r0, r7
 8006c08:	47c0      	blx	r8
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d0e6      	beq.n	8006bdc <_printf_common+0xa4>
 8006c0e:	3601      	adds	r6, #1
 8006c10:	e7d9      	b.n	8006bc6 <_printf_common+0x8e>
	...

08006c14 <_printf_i>:
 8006c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c18:	7e0f      	ldrb	r7, [r1, #24]
 8006c1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c1c:	2f78      	cmp	r7, #120	; 0x78
 8006c1e:	4691      	mov	r9, r2
 8006c20:	4680      	mov	r8, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	469a      	mov	sl, r3
 8006c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c2a:	d807      	bhi.n	8006c3c <_printf_i+0x28>
 8006c2c:	2f62      	cmp	r7, #98	; 0x62
 8006c2e:	d80a      	bhi.n	8006c46 <_printf_i+0x32>
 8006c30:	2f00      	cmp	r7, #0
 8006c32:	f000 80d8 	beq.w	8006de6 <_printf_i+0x1d2>
 8006c36:	2f58      	cmp	r7, #88	; 0x58
 8006c38:	f000 80a3 	beq.w	8006d82 <_printf_i+0x16e>
 8006c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c44:	e03a      	b.n	8006cbc <_printf_i+0xa8>
 8006c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c4a:	2b15      	cmp	r3, #21
 8006c4c:	d8f6      	bhi.n	8006c3c <_printf_i+0x28>
 8006c4e:	a101      	add	r1, pc, #4	; (adr r1, 8006c54 <_printf_i+0x40>)
 8006c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c54:	08006cad 	.word	0x08006cad
 8006c58:	08006cc1 	.word	0x08006cc1
 8006c5c:	08006c3d 	.word	0x08006c3d
 8006c60:	08006c3d 	.word	0x08006c3d
 8006c64:	08006c3d 	.word	0x08006c3d
 8006c68:	08006c3d 	.word	0x08006c3d
 8006c6c:	08006cc1 	.word	0x08006cc1
 8006c70:	08006c3d 	.word	0x08006c3d
 8006c74:	08006c3d 	.word	0x08006c3d
 8006c78:	08006c3d 	.word	0x08006c3d
 8006c7c:	08006c3d 	.word	0x08006c3d
 8006c80:	08006dcd 	.word	0x08006dcd
 8006c84:	08006cf1 	.word	0x08006cf1
 8006c88:	08006daf 	.word	0x08006daf
 8006c8c:	08006c3d 	.word	0x08006c3d
 8006c90:	08006c3d 	.word	0x08006c3d
 8006c94:	08006def 	.word	0x08006def
 8006c98:	08006c3d 	.word	0x08006c3d
 8006c9c:	08006cf1 	.word	0x08006cf1
 8006ca0:	08006c3d 	.word	0x08006c3d
 8006ca4:	08006c3d 	.word	0x08006c3d
 8006ca8:	08006db7 	.word	0x08006db7
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	1d1a      	adds	r2, r3, #4
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	602a      	str	r2, [r5, #0]
 8006cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0a3      	b.n	8006e08 <_printf_i+0x1f4>
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	6829      	ldr	r1, [r5, #0]
 8006cc4:	0606      	lsls	r6, r0, #24
 8006cc6:	f101 0304 	add.w	r3, r1, #4
 8006cca:	d50a      	bpl.n	8006ce2 <_printf_i+0xce>
 8006ccc:	680e      	ldr	r6, [r1, #0]
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	2e00      	cmp	r6, #0
 8006cd2:	da03      	bge.n	8006cdc <_printf_i+0xc8>
 8006cd4:	232d      	movs	r3, #45	; 0x2d
 8006cd6:	4276      	negs	r6, r6
 8006cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cdc:	485e      	ldr	r0, [pc, #376]	; (8006e58 <_printf_i+0x244>)
 8006cde:	230a      	movs	r3, #10
 8006ce0:	e019      	b.n	8006d16 <_printf_i+0x102>
 8006ce2:	680e      	ldr	r6, [r1, #0]
 8006ce4:	602b      	str	r3, [r5, #0]
 8006ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cea:	bf18      	it	ne
 8006cec:	b236      	sxthne	r6, r6
 8006cee:	e7ef      	b.n	8006cd0 <_printf_i+0xbc>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	6820      	ldr	r0, [r4, #0]
 8006cf4:	1d19      	adds	r1, r3, #4
 8006cf6:	6029      	str	r1, [r5, #0]
 8006cf8:	0601      	lsls	r1, r0, #24
 8006cfa:	d501      	bpl.n	8006d00 <_printf_i+0xec>
 8006cfc:	681e      	ldr	r6, [r3, #0]
 8006cfe:	e002      	b.n	8006d06 <_printf_i+0xf2>
 8006d00:	0646      	lsls	r6, r0, #25
 8006d02:	d5fb      	bpl.n	8006cfc <_printf_i+0xe8>
 8006d04:	881e      	ldrh	r6, [r3, #0]
 8006d06:	4854      	ldr	r0, [pc, #336]	; (8006e58 <_printf_i+0x244>)
 8006d08:	2f6f      	cmp	r7, #111	; 0x6f
 8006d0a:	bf0c      	ite	eq
 8006d0c:	2308      	moveq	r3, #8
 8006d0e:	230a      	movne	r3, #10
 8006d10:	2100      	movs	r1, #0
 8006d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d16:	6865      	ldr	r5, [r4, #4]
 8006d18:	60a5      	str	r5, [r4, #8]
 8006d1a:	2d00      	cmp	r5, #0
 8006d1c:	bfa2      	ittt	ge
 8006d1e:	6821      	ldrge	r1, [r4, #0]
 8006d20:	f021 0104 	bicge.w	r1, r1, #4
 8006d24:	6021      	strge	r1, [r4, #0]
 8006d26:	b90e      	cbnz	r6, 8006d2c <_printf_i+0x118>
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	d04d      	beq.n	8006dc8 <_printf_i+0x1b4>
 8006d2c:	4615      	mov	r5, r2
 8006d2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d32:	fb03 6711 	mls	r7, r3, r1, r6
 8006d36:	5dc7      	ldrb	r7, [r0, r7]
 8006d38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d3c:	4637      	mov	r7, r6
 8006d3e:	42bb      	cmp	r3, r7
 8006d40:	460e      	mov	r6, r1
 8006d42:	d9f4      	bls.n	8006d2e <_printf_i+0x11a>
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d10b      	bne.n	8006d60 <_printf_i+0x14c>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	07de      	lsls	r6, r3, #31
 8006d4c:	d508      	bpl.n	8006d60 <_printf_i+0x14c>
 8006d4e:	6923      	ldr	r3, [r4, #16]
 8006d50:	6861      	ldr	r1, [r4, #4]
 8006d52:	4299      	cmp	r1, r3
 8006d54:	bfde      	ittt	le
 8006d56:	2330      	movle	r3, #48	; 0x30
 8006d58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d60:	1b52      	subs	r2, r2, r5
 8006d62:	6122      	str	r2, [r4, #16]
 8006d64:	f8cd a000 	str.w	sl, [sp]
 8006d68:	464b      	mov	r3, r9
 8006d6a:	aa03      	add	r2, sp, #12
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	4640      	mov	r0, r8
 8006d70:	f7ff fee2 	bl	8006b38 <_printf_common>
 8006d74:	3001      	adds	r0, #1
 8006d76:	d14c      	bne.n	8006e12 <_printf_i+0x1fe>
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	b004      	add	sp, #16
 8006d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d82:	4835      	ldr	r0, [pc, #212]	; (8006e58 <_printf_i+0x244>)
 8006d84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d88:	6829      	ldr	r1, [r5, #0]
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d90:	6029      	str	r1, [r5, #0]
 8006d92:	061d      	lsls	r5, r3, #24
 8006d94:	d514      	bpl.n	8006dc0 <_printf_i+0x1ac>
 8006d96:	07df      	lsls	r7, r3, #31
 8006d98:	bf44      	itt	mi
 8006d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d9e:	6023      	strmi	r3, [r4, #0]
 8006da0:	b91e      	cbnz	r6, 8006daa <_printf_i+0x196>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	f023 0320 	bic.w	r3, r3, #32
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	2310      	movs	r3, #16
 8006dac:	e7b0      	b.n	8006d10 <_printf_i+0xfc>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	f043 0320 	orr.w	r3, r3, #32
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	2378      	movs	r3, #120	; 0x78
 8006db8:	4828      	ldr	r0, [pc, #160]	; (8006e5c <_printf_i+0x248>)
 8006dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dbe:	e7e3      	b.n	8006d88 <_printf_i+0x174>
 8006dc0:	0659      	lsls	r1, r3, #25
 8006dc2:	bf48      	it	mi
 8006dc4:	b2b6      	uxthmi	r6, r6
 8006dc6:	e7e6      	b.n	8006d96 <_printf_i+0x182>
 8006dc8:	4615      	mov	r5, r2
 8006dca:	e7bb      	b.n	8006d44 <_printf_i+0x130>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	6826      	ldr	r6, [r4, #0]
 8006dd0:	6961      	ldr	r1, [r4, #20]
 8006dd2:	1d18      	adds	r0, r3, #4
 8006dd4:	6028      	str	r0, [r5, #0]
 8006dd6:	0635      	lsls	r5, r6, #24
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	d501      	bpl.n	8006de0 <_printf_i+0x1cc>
 8006ddc:	6019      	str	r1, [r3, #0]
 8006dde:	e002      	b.n	8006de6 <_printf_i+0x1d2>
 8006de0:	0670      	lsls	r0, r6, #25
 8006de2:	d5fb      	bpl.n	8006ddc <_printf_i+0x1c8>
 8006de4:	8019      	strh	r1, [r3, #0]
 8006de6:	2300      	movs	r3, #0
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	4615      	mov	r5, r2
 8006dec:	e7ba      	b.n	8006d64 <_printf_i+0x150>
 8006dee:	682b      	ldr	r3, [r5, #0]
 8006df0:	1d1a      	adds	r2, r3, #4
 8006df2:	602a      	str	r2, [r5, #0]
 8006df4:	681d      	ldr	r5, [r3, #0]
 8006df6:	6862      	ldr	r2, [r4, #4]
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f7f9 f9f8 	bl	80001f0 <memchr>
 8006e00:	b108      	cbz	r0, 8006e06 <_printf_i+0x1f2>
 8006e02:	1b40      	subs	r0, r0, r5
 8006e04:	6060      	str	r0, [r4, #4]
 8006e06:	6863      	ldr	r3, [r4, #4]
 8006e08:	6123      	str	r3, [r4, #16]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e10:	e7a8      	b.n	8006d64 <_printf_i+0x150>
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	462a      	mov	r2, r5
 8006e16:	4649      	mov	r1, r9
 8006e18:	4640      	mov	r0, r8
 8006e1a:	47d0      	blx	sl
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d0ab      	beq.n	8006d78 <_printf_i+0x164>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	079b      	lsls	r3, r3, #30
 8006e24:	d413      	bmi.n	8006e4e <_printf_i+0x23a>
 8006e26:	68e0      	ldr	r0, [r4, #12]
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	4298      	cmp	r0, r3
 8006e2c:	bfb8      	it	lt
 8006e2e:	4618      	movlt	r0, r3
 8006e30:	e7a4      	b.n	8006d7c <_printf_i+0x168>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4632      	mov	r2, r6
 8006e36:	4649      	mov	r1, r9
 8006e38:	4640      	mov	r0, r8
 8006e3a:	47d0      	blx	sl
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d09b      	beq.n	8006d78 <_printf_i+0x164>
 8006e40:	3501      	adds	r5, #1
 8006e42:	68e3      	ldr	r3, [r4, #12]
 8006e44:	9903      	ldr	r1, [sp, #12]
 8006e46:	1a5b      	subs	r3, r3, r1
 8006e48:	42ab      	cmp	r3, r5
 8006e4a:	dcf2      	bgt.n	8006e32 <_printf_i+0x21e>
 8006e4c:	e7eb      	b.n	8006e26 <_printf_i+0x212>
 8006e4e:	2500      	movs	r5, #0
 8006e50:	f104 0619 	add.w	r6, r4, #25
 8006e54:	e7f5      	b.n	8006e42 <_printf_i+0x22e>
 8006e56:	bf00      	nop
 8006e58:	0800741d 	.word	0x0800741d
 8006e5c:	0800742e 	.word	0x0800742e

08006e60 <memmove>:
 8006e60:	4288      	cmp	r0, r1
 8006e62:	b510      	push	{r4, lr}
 8006e64:	eb01 0402 	add.w	r4, r1, r2
 8006e68:	d902      	bls.n	8006e70 <memmove+0x10>
 8006e6a:	4284      	cmp	r4, r0
 8006e6c:	4623      	mov	r3, r4
 8006e6e:	d807      	bhi.n	8006e80 <memmove+0x20>
 8006e70:	1e43      	subs	r3, r0, #1
 8006e72:	42a1      	cmp	r1, r4
 8006e74:	d008      	beq.n	8006e88 <memmove+0x28>
 8006e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e7e:	e7f8      	b.n	8006e72 <memmove+0x12>
 8006e80:	4402      	add	r2, r0
 8006e82:	4601      	mov	r1, r0
 8006e84:	428a      	cmp	r2, r1
 8006e86:	d100      	bne.n	8006e8a <memmove+0x2a>
 8006e88:	bd10      	pop	{r4, pc}
 8006e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e92:	e7f7      	b.n	8006e84 <memmove+0x24>

08006e94 <_realloc_r>:
 8006e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e98:	4680      	mov	r8, r0
 8006e9a:	4614      	mov	r4, r2
 8006e9c:	460e      	mov	r6, r1
 8006e9e:	b921      	cbnz	r1, 8006eaa <_realloc_r+0x16>
 8006ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	f7ff bb97 	b.w	80065d8 <_malloc_r>
 8006eaa:	b92a      	cbnz	r2, 8006eb8 <_realloc_r+0x24>
 8006eac:	f7ff fb28 	bl	8006500 <_free_r>
 8006eb0:	4625      	mov	r5, r4
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb8:	f000 f81b 	bl	8006ef2 <_malloc_usable_size_r>
 8006ebc:	4284      	cmp	r4, r0
 8006ebe:	4607      	mov	r7, r0
 8006ec0:	d802      	bhi.n	8006ec8 <_realloc_r+0x34>
 8006ec2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ec6:	d812      	bhi.n	8006eee <_realloc_r+0x5a>
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4640      	mov	r0, r8
 8006ecc:	f7ff fb84 	bl	80065d8 <_malloc_r>
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d0ed      	beq.n	8006eb2 <_realloc_r+0x1e>
 8006ed6:	42bc      	cmp	r4, r7
 8006ed8:	4622      	mov	r2, r4
 8006eda:	4631      	mov	r1, r6
 8006edc:	bf28      	it	cs
 8006ede:	463a      	movcs	r2, r7
 8006ee0:	f7ff faf8 	bl	80064d4 <memcpy>
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	f7ff fb0a 	bl	8006500 <_free_r>
 8006eec:	e7e1      	b.n	8006eb2 <_realloc_r+0x1e>
 8006eee:	4635      	mov	r5, r6
 8006ef0:	e7df      	b.n	8006eb2 <_realloc_r+0x1e>

08006ef2 <_malloc_usable_size_r>:
 8006ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef6:	1f18      	subs	r0, r3, #4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bfbc      	itt	lt
 8006efc:	580b      	ldrlt	r3, [r1, r0]
 8006efe:	18c0      	addlt	r0, r0, r3
 8006f00:	4770      	bx	lr
	...

08006f04 <_init>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	bf00      	nop
 8006f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0a:	bc08      	pop	{r3}
 8006f0c:	469e      	mov	lr, r3
 8006f0e:	4770      	bx	lr

08006f10 <_fini>:
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f12:	bf00      	nop
 8006f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f16:	bc08      	pop	{r3}
 8006f18:	469e      	mov	lr, r3
 8006f1a:	4770      	bx	lr
