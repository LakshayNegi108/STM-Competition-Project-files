
HMS_TRY_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800bca8  0800bca8  0001bca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c55c  0800c55c  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800c55c  0800c55c  0001c55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c564  0800c564  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c564  0800c564  0001c564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c568  0800c568  0001c568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800c56c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004384  20000230  0800c79c  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045b4  0800c79c  000245b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b35f  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ed1  00000000  00000000  0003b5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003f490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  00040be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c59b  00000000  00000000  00042180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c111  00000000  00000000  0005e71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a69d9  00000000  00000000  0007a82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007454  00000000  00000000  00121258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bc8c 	.word	0x0800bc8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	0800bc8c 	.word	0x0800bc8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <vApplicationGetIdleTaskMemory+0x30>)
 8000ed2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2000024c 	.word	0x2000024c
 8000eec:	20000300 	.word	0x20000300

08000ef0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b0b4      	sub	sp, #208	; 0xd0
 8000ef4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef6:	f000 fe17 	bl	8001b28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000efa:	f000 f8c1 	bl	8001080 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000efe:	f000 f9ab 	bl	8001258 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000f02:	f000 f97b 	bl	80011fc <MX_I2C1_Init>
	MX_ADC1_Init();
 8000f06:	f000 f927 	bl	8001158 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	uart_print_config(9600);
 8000f0a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000f0e:	f004 f821 	bl	8004f54 <uart_print_config>
	USART_INIT(USART6, PORTA, PORTA, 11, 12, 115200);
 8000f12:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	230c      	movs	r3, #12
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	230b      	movs	r3, #11
 8000f1e:	4a49      	ldr	r2, [pc, #292]	; (8001044 <main+0x154>)
 8000f20:	4948      	ldr	r1, [pc, #288]	; (8001044 <main+0x154>)
 8000f22:	4849      	ldr	r0, [pc, #292]	; (8001048 <main+0x158>)
 8000f24:	f003 feac 	bl	8004c80 <USART_INIT>
	print("Working\r\n");
 8000f28:	4848      	ldr	r0, [pc, #288]	; (800104c <main+0x15c>)
 8000f2a:	f003 ffef 	bl	8004f0c <print>
	USART_WRITE(USART6, "WORKING USART 6\r\n", 18, 100);
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	2212      	movs	r2, #18
 8000f32:	4947      	ldr	r1, [pc, #284]	; (8001050 <main+0x160>)
 8000f34:	4844      	ldr	r0, [pc, #272]	; (8001048 <main+0x158>)
 8000f36:	f003 ffb9 	bl	8004eac <USART_WRITE>
	LCD_Begin();
 8000f3a:	f004 fe8f 	bl	8005c5c <LCD_Begin>
	LCD_SetRotation(0);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f005 ffba 	bl	8006eb8 <LCD_SetRotation>
	//	LCD_FillScreen(BLACK);
	colorgradient(0, 0, TFTWIDTH, TFTHEIGHT, 50);
 8000f44:	2332      	movs	r3, #50	; 0x32
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f4c:	22f0      	movs	r2, #240	; 0xf0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2000      	movs	r0, #0
 8000f52:	f006 f934 	bl	80071be <colorgradient>
	HMS_bgdisplay();
 8000f56:	f004 f813 	bl	8004f80 <HMS_bgdisplay>

	gpio_config(PORTC, 9, INPUT_MODE, LOW_SPEED, EN_PU, PHPL);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	2200      	movs	r2, #0
 8000f66:	2109      	movs	r1, #9
 8000f68:	483a      	ldr	r0, [pc, #232]	; (8001054 <main+0x164>)
 8000f6a:	f003 fb21 	bl	80045b0 <gpio_config>
	gpio_IT_config(PORTC, 9, FALLING_EDGE);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2109      	movs	r1, #9
 8000f72:	4838      	ldr	r0, [pc, #224]	; (8001054 <main+0x164>)
 8000f74:	f003 fc1c 	bl	80047b0 <gpio_IT_config>
	gpio_IT_EN(9, EXTI9_5_IRQn);
 8000f78:	2117      	movs	r1, #23
 8000f7a:	2009      	movs	r0, #9
 8000f7c:	f003 fe36 	bl	8004bec <gpio_IT_EN>

	char print_char[PRINT_CHAR_LEN] = { 0 };
 8000f80:	2300      	movs	r3, #0
 8000f82:	667b      	str	r3, [r7, #100]	; 0x64
 8000f84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f88:	2260      	movs	r2, #96	; 0x60
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 ffdf 	bl	8008f50 <memset>

	while (!(mlx90614_init())) {
 8000f92:	e005      	b.n	8000fa0 <main+0xb0>
		print("Error in MLX90614 INIT\n");
 8000f94:	4830      	ldr	r0, [pc, #192]	; (8001058 <main+0x168>)
 8000f96:	f003 ffb9 	bl	8004f0c <print>
		mlx90614_workingFlag = 0;
 8000f9a:	4b30      	ldr	r3, [pc, #192]	; (800105c <main+0x16c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	while (!(mlx90614_init())) {
 8000fa0:	f004 fc0e 	bl	80057c0 <mlx90614_init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f083 0301 	eor.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f1      	bne.n	8000f94 <main+0xa4>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 16, uint16_t);
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <main+0x170>)
 8000fb2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000fbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f006 f9ad 	bl	8007322 <osMessageCreate>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a26      	ldr	r2, [pc, #152]	; (8001064 <main+0x174>)
 8000fcc:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <main+0x178>)
 8000fd0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000fd4:	461d      	mov	r5, r3
 8000fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fe2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f006 f93a 	bl	8007262 <osThreadCreate>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a1e      	ldr	r2, [pc, #120]	; (800106c <main+0x17c>)
 8000ff2:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <main+0x180>)
 8000ff6:	f107 041c 	add.w	r4, r7, #28
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001000:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001004:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f006 f927 	bl	8007262 <osThreadCreate>
 8001014:	4603      	mov	r3, r0
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <main+0x184>)
 8001018:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 256);
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <main+0x188>)
 800101c:	463c      	mov	r4, r7
 800101e:	461d      	mov	r5, r3
 8001020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001024:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800102c:	463b      	mov	r3, r7
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f006 f916 	bl	8007262 <osThreadCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <main+0x18c>)
 800103a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800103c:	f006 f90a 	bl	8007254 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001040:	e7fe      	b.n	8001040 <main+0x150>
 8001042:	bf00      	nop
 8001044:	40020000 	.word	0x40020000
 8001048:	40011400 	.word	0x40011400
 800104c:	0800bccc 	.word	0x0800bccc
 8001050:	0800bcd8 	.word	0x0800bcd8
 8001054:	40020800 	.word	0x40020800
 8001058:	0800bcec 	.word	0x0800bcec
 800105c:	20000009 	.word	0x20000009
 8001060:	0800bd04 	.word	0x0800bd04
 8001064:	200005a8 	.word	0x200005a8
 8001068:	0800bd14 	.word	0x0800bd14
 800106c:	2000059c 	.word	0x2000059c
 8001070:	0800bd30 	.word	0x0800bd30
 8001074:	200005a0 	.word	0x200005a0
 8001078:	0800bd4c 	.word	0x0800bd4c
 800107c:	200005a4 	.word	0x200005a4

08001080 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	; 0x50
 8001084:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2230      	movs	r2, #48	; 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f007 ff5e 	bl	8008f50 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <SystemClock_Config+0xd0>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a28      	ldr	r2, [pc, #160]	; (8001150 <SystemClock_Config+0xd0>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <SystemClock_Config+0xd0>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <SystemClock_Config+0xd4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010cc:	4a21      	ldr	r2, [pc, #132]	; (8001154 <SystemClock_Config+0xd4>)
 80010ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <SystemClock_Config+0xd4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	2302      	movs	r3, #2
 80010e2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ec:	2302      	movs	r3, #2
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80010f4:	2310      	movs	r3, #16
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80010f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010fe:	2304      	movs	r3, #4
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001102:	2307      	movs	r3, #7
 8001104:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fa7e 	bl	800360c <HAL_RCC_OscConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x9a>
		Error_Handler();
 8001116:	f000 fab5 	bl	8001684 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800111a:	230f      	movs	r3, #15
 800111c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111e:	2302      	movs	r3, #2
 8001120:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2102      	movs	r1, #2
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fce0 	bl	8003afc <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xc6>
		Error_Handler();
 8001142:	f000 fa9f 	bl	8001684 <Error_Handler>
	}
}
 8001146:	bf00      	nop
 8001148:	3750      	adds	r7, #80	; 0x50
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <MX_ADC1_Init+0x98>)
 800116c:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <MX_ADC1_Init+0x9c>)
 800116e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_ADC1_Init+0x98>)
 8001172:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001176:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_ADC1_Init+0x98>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_ADC1_Init+0x98>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_ADC1_Init+0x98>)
 8001186:	2201      	movs	r2, #1
 8001188:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_ADC1_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_ADC1_Init+0x98>)
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <MX_ADC1_Init+0xa0>)
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011ba:	f000 fcf7 	bl	8001bac <HAL_ADC_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x70>
		Error_Handler();
 80011c4:	f000 fa5e 	bl	8001684 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 80011c8:	230e      	movs	r3, #14
 80011ca:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011da:	f000 fe77 	bl	8001ecc <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x90>
		Error_Handler();
 80011e4:	f000 fa4e 	bl	8001684 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000500 	.word	0x20000500
 80011f4:	40012000 	.word	0x40012000
 80011f8:	0f000001 	.word	0x0f000001

080011fc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_I2C1_Init+0x50>)
 8001202:	4a13      	ldr	r2, [pc, #76]	; (8001250 <MX_I2C1_Init+0x54>)
 8001204:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_I2C1_Init+0x50>)
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_I2C1_Init+0x58>)
 800120a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_I2C1_Init+0x50>)
 800121a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_I2C1_Init+0x50>)
 800123a:	f001 facb 	bl	80027d4 <HAL_I2C_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001244:	f000 fa1e 	bl	8001684 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000548 	.word	0x20000548
 8001250:	40005400 	.word	0x40005400
 8001254:	000186a0 	.word	0x000186a0

08001258 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_GPIO_Init+0x84>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <MX_GPIO_Init+0x84>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_GPIO_Init+0x84>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_GPIO_Init+0x84>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a16      	ldr	r2, [pc, #88]	; (80012dc <MX_GPIO_Init+0x84>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_GPIO_Init+0x84>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_GPIO_Init+0x84>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <MX_GPIO_Init+0x84>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_GPIO_Init+0x84>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_GPIO_Init+0x84>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <MX_GPIO_Init+0x84>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_GPIO_Init+0x84>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI9_5_IRQHandler() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
	if (gpio_IT_CHK(9)) {
 80012e6:	2009      	movs	r0, #9
 80012e8:	f003 fc9e 	bl	8004c28 <gpio_IT_CHK>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d01b      	beq.n	800132a <EXTI9_5_IRQHandler+0x4a>
		for (int i = 2000000; i > 0; i--)
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <EXTI9_5_IRQHandler+0x54>)
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	e002      	b.n	80012fe <EXTI9_5_IRQHandler+0x1e>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dcf9      	bgt.n	80012f8 <EXTI9_5_IRQHandler+0x18>
			;
		menu_select_flag = (menu_select_flag + 1) % 3;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <EXTI9_5_IRQHandler+0x58>)
 8001306:	f993 3000 	ldrsb.w	r3, [r3]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <EXTI9_5_IRQHandler+0x5c>)
 800130e:	fb83 3102 	smull	r3, r1, r3, r2
 8001312:	17d3      	asrs	r3, r2, #31
 8001314:	1ac9      	subs	r1, r1, r3
 8001316:	460b      	mov	r3, r1
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	440b      	add	r3, r1
 800131c:	1ad1      	subs	r1, r2, r3
 800131e:	b24a      	sxtb	r2, r1
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <EXTI9_5_IRQHandler+0x58>)
 8001322:	701a      	strb	r2, [r3, #0]

//		print("interrupt: %d\r\n", menu_select_flag);
		gpio_IT_CLR(9);
 8001324:	2009      	movs	r0, #9
 8001326:	f003 fc99 	bl	8004c5c <gpio_IT_CLR>
	}
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	001e8480 	.word	0x001e8480
 8001338:	20000008 	.word	0x20000008
 800133c:	55555556 	.word	0x55555556

08001340 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b09c      	sub	sp, #112	; 0x70
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	char print_char[PRINT_CHAR_LEN] = { 0 };
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	2260      	movs	r2, #96	; 0x60
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f007 fdfb 	bl	8008f50 <memset>
	/* Infinite loop */
	for (;;) {
		if (menu_select_flag == 0) {
 800135a:	4b36      	ldr	r3, [pc, #216]	; (8001434 <StartDefaultTask+0xf4>)
 800135c:	f993 3000 	ldrsb.w	r3, [r3]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10a      	bne.n	800137a <StartDefaultTask+0x3a>
			vTaskSuspend(myTask03Handle);
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <StartDefaultTask+0xf8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f006 fbcf 	bl	8007b0c <vTaskSuspend>
			vTaskResume(myTask02Handle);
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <StartDefaultTask+0xfc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fc8e 	bl	8007c94 <vTaskResume>
 8001378:	e01e      	b.n	80013b8 <StartDefaultTask+0x78>
		} else if (menu_select_flag == 1) {
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <StartDefaultTask+0xf4>)
 800137c:	f993 3000 	ldrsb.w	r3, [r3]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10a      	bne.n	800139a <StartDefaultTask+0x5a>
			vTaskSuspend(myTask02Handle);
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <StartDefaultTask+0xfc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f006 fbbf 	bl	8007b0c <vTaskSuspend>
			vTaskResume(myTask03Handle);
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <StartDefaultTask+0xf8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fc7e 	bl	8007c94 <vTaskResume>
 8001398:	e00e      	b.n	80013b8 <StartDefaultTask+0x78>
		} else if (menu_select_flag == 2) {
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <StartDefaultTask+0xf4>)
 800139c:	f993 3000 	ldrsb.w	r3, [r3]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d109      	bne.n	80013b8 <StartDefaultTask+0x78>
			vTaskResume(myTask02Handle);
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <StartDefaultTask+0xfc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f006 fc73 	bl	8007c94 <vTaskResume>
			vTaskResume(myTask03Handle);
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <StartDefaultTask+0xf8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f006 fc6e 	bl	8007c94 <vTaskResume>
		}

		adcDataPrev = adcData;
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <StartDefaultTask+0x100>)
 80013ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <StartDefaultTask+0x104>)
 80013c0:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 80013c2:	4821      	ldr	r0, [pc, #132]	; (8001448 <StartDefaultTask+0x108>)
 80013c4:	f000 fc36 	bl	8001c34 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 80013c8:	2164      	movs	r1, #100	; 0x64
 80013ca:	481f      	ldr	r0, [pc, #124]	; (8001448 <StartDefaultTask+0x108>)
 80013cc:	f000 fce6 	bl	8001d9c <HAL_ADC_PollForConversion>
		adcData = (uint16_t) HAL_ADC_GetValue(&hadc1);
 80013d0:	481d      	ldr	r0, [pc, #116]	; (8001448 <StartDefaultTask+0x108>)
 80013d2:	f000 fd6e 	bl	8001eb2 <HAL_ADC_GetValue>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b21a      	sxth	r2, r3
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <StartDefaultTask+0x100>)
 80013dc:	801a      	strh	r2, [r3, #0]
		sprintf(print_char, "Analog Val: %d\n", adcData);
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <StartDefaultTask+0x100>)
 80013e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4918      	ldr	r1, [pc, #96]	; (800144c <StartDefaultTask+0x10c>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f008 fb7b 	bl	8009ae8 <siprintf>
		USART_WRITE(USART2, print_char, strlen(print_char), 10);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe fef2 	bl	80001e0 <strlen>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f107 010c 	add.w	r1, r7, #12
 8001402:	230a      	movs	r3, #10
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <StartDefaultTask+0x110>)
 8001406:	f003 fd51 	bl	8004eac <USART_WRITE>

		if ((adcData - adcDataPrev) > 800) {
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <StartDefaultTask+0x100>)
 800140c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001410:	461a      	mov	r2, r3
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <StartDefaultTask+0x104>)
 8001414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800141e:	dd04      	ble.n	800142a <StartDefaultTask+0xea>
			ECG_HR += 1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <StartDefaultTask+0x114>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <StartDefaultTask+0x114>)
 8001428:	6013      	str	r3, [r2, #0]
		}

		osDelay(10);
 800142a:	200a      	movs	r0, #10
 800142c:	f005 ff65 	bl	80072fa <osDelay>
		if (menu_select_flag == 0) {
 8001430:	e793      	b.n	800135a <StartDefaultTask+0x1a>
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008
 8001438:	200005a4 	.word	0x200005a4
 800143c:	200005a0 	.word	0x200005a0
 8001440:	200005b2 	.word	0x200005b2
 8001444:	200005b4 	.word	0x200005b4
 8001448:	20000500 	.word	0x20000500
 800144c:	0800bd68 	.word	0x0800bd68
 8001450:	40004400 	.word	0x40004400
 8001454:	200005b8 	.word	0x200005b8

08001458 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */

	/* Infinite loop */
	for (;;) {
		if (mlx90614_workingFlag == 1) {
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <StartTask02+0xa4>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d12c      	bne.n	80014c2 <StartTask02+0x6a>
			mlx90614_status = mlx90614_getObject1(&temp);
 8001468:	4825      	ldr	r0, [pc, #148]	; (8001500 <StartTask02+0xa8>)
 800146a:	f004 fab3 	bl	80059d4 <mlx90614_getObject1>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <StartTask02+0xac>)
 8001474:	701a      	strb	r2, [r3, #0]
			if (mlx90614_status == true) {
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <StartTask02+0xac>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d11d      	bne.n	80014ba <StartTask02+0x62>
				dts = displayTemp_ok;
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <StartTask02+0xb0>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
				if ((temp > 0) && (temp < 100)) {
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <StartTask02+0xa8>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	dd0e      	ble.n	80014b2 <StartTask02+0x5a>
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <StartTask02+0xa8>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800150c <StartTask02+0xb4>
 800149e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a6:	d504      	bpl.n	80014b2 <StartTask02+0x5a>
					globalTemp = temp;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <StartTask02+0xa8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <StartTask02+0xb8>)
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e01f      	b.n	80014f2 <StartTask02+0x9a>
				} else {
					dts = displayTemp_errorVal;
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <StartTask02+0xb0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e01b      	b.n	80014f2 <StartTask02+0x9a>
				}
			} else {
				mlx90614_workingFlag = 0;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <StartTask02+0xa4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	e017      	b.n	80014f2 <StartTask02+0x9a>
			}
		} else if (mlx90614_workingFlag == 0) {
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <StartTask02+0xa4>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d113      	bne.n	80014f2 <StartTask02+0x9a>
			if (!(mlx90614_init())) {
 80014ca:	f004 f979 	bl	80057c0 <mlx90614_init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f083 0301 	eor.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d008      	beq.n	80014ec <StartTask02+0x94>
				dts = displayTemp_errorInit;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <StartTask02+0xb0>)
 80014dc:	22ff      	movs	r2, #255	; 0xff
 80014de:	701a      	strb	r2, [r3, #0]
				MX_I2C1_Init();
 80014e0:	f7ff fe8c 	bl	80011fc <MX_I2C1_Init>
				mlx90614_workingFlag = 0;
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <StartTask02+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e002      	b.n	80014f2 <StartTask02+0x9a>
			} else {
				mlx90614_workingFlag = 1;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <StartTask02+0xa4>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
			}
		}


		osDelay(200);
 80014f2:	20c8      	movs	r0, #200	; 0xc8
 80014f4:	f005 ff01 	bl	80072fa <osDelay>
		if (mlx90614_workingFlag == 1) {
 80014f8:	e7b2      	b.n	8001460 <StartTask02+0x8>
 80014fa:	bf00      	nop
 80014fc:	20000009 	.word	0x20000009
 8001500:	200005ac 	.word	0x200005ac
 8001504:	200005b0 	.word	0x200005b0
 8001508:	200005b1 	.word	0x200005b1
 800150c:	42c80000 	.word	0x42c80000
 8001510:	20000000 	.word	0x20000000

08001514 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	uint32_t ecg_startTime = HAL_GetTick(), ecg_lapsedTime = 60000;
 800151c:	f000 fb3a 	bl	8001b94 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001526:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;) {

		if (dts == displayTemp_ok) {
 8001528:	4b44      	ldr	r3, [pc, #272]	; (800163c <StartTask03+0x128>)
 800152a:	f993 3000 	ldrsb.w	r3, [r3]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d116      	bne.n	8001560 <StartTask03+0x4c>
#if DEBUG_TEMP == 1
			print("Temp in Celsius: = %0.2f\n", globalTemp);
#endif
			LCD_SetTextColor(WHITE, BLUE);
 8001532:	211f      	movs	r1, #31
 8001534:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001538:	f005 fca6 	bl	8006e88 <LCD_SetTextColor>
			LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 800153c:	21ba      	movs	r1, #186	; 0xba
 800153e:	2082      	movs	r0, #130	; 0x82
 8001540:	f005 fc74 	bl	8006e2c <LCD_SetCursor>
			LCD_SetTextSize(2);
 8001544:	2002      	movs	r0, #2
 8001546:	f005 fc89 	bl	8006e5c <LCD_SetTextSize>
			LCD_Printf("%0.2f'C", globalTemp);
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <StartTask03+0x12c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f802 	bl	8000558 <__aeabi_f2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	483a      	ldr	r0, [pc, #232]	; (8001644 <StartTask03+0x130>)
 800155a:	f005 fb7f 	bl	8006c5c <LCD_Printf>
 800155e:	e029      	b.n	80015b4 <StartTask03+0xa0>
		} else if (dts == displayTemp_errorVal) {
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <StartTask03+0x128>)
 8001562:	f993 3000 	ldrsb.w	r3, [r3]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <StartTask03+0x76>
#if DEBUG_TEMP == 1
			print("Temp in Celsius: = %0.2f\n", globalTemp);
#endif
			LCD_SetTextColor(WHITE, BLUE);
 800156a:	211f      	movs	r1, #31
 800156c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001570:	f005 fc8a 	bl	8006e88 <LCD_SetTextColor>
			LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 8001574:	21ba      	movs	r1, #186	; 0xba
 8001576:	2082      	movs	r0, #130	; 0x82
 8001578:	f005 fc58 	bl	8006e2c <LCD_SetCursor>
			LCD_SetTextSize(2);
 800157c:	2002      	movs	r0, #2
 800157e:	f005 fc6d 	bl	8006e5c <LCD_SetTextSize>
			LCD_Printf("     NA");
 8001582:	4831      	ldr	r0, [pc, #196]	; (8001648 <StartTask03+0x134>)
 8001584:	f005 fb6a 	bl	8006c5c <LCD_Printf>
 8001588:	e014      	b.n	80015b4 <StartTask03+0xa0>
		} else if (dts == displayTemp_errorInit) {
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <StartTask03+0x128>)
 800158c:	f993 3000 	ldrsb.w	r3, [r3]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d10e      	bne.n	80015b4 <StartTask03+0xa0>
#if DEBUG_TEMP == 1
			print("Error in MLX90614 INIT\n");
#endif
			LCD_SetTextColor(WHITE, BLUE);
 8001596:	211f      	movs	r1, #31
 8001598:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800159c:	f005 fc74 	bl	8006e88 <LCD_SetTextColor>
			LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 80015a0:	21ba      	movs	r1, #186	; 0xba
 80015a2:	2082      	movs	r0, #130	; 0x82
 80015a4:	f005 fc42 	bl	8006e2c <LCD_SetCursor>
			LCD_SetTextSize(2);
 80015a8:	2002      	movs	r0, #2
 80015aa:	f005 fc57 	bl	8006e5c <LCD_SetTextSize>
			LCD_Printf("  ERROR");
 80015ae:	4827      	ldr	r0, [pc, #156]	; (800164c <StartTask03+0x138>)
 80015b0:	f005 fb54 	bl	8006c5c <LCD_Printf>
		}

		//			LCD_ECGAnimation();
		if ((HAL_GetTick()- ecg_startTime) > ecg_lapsedTime) {
 80015b4:	f000 faee 	bl	8001b94 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d235      	bcs.n	8001630 <StartTask03+0x11c>
			if ((ECG_HR > 0) && (ECG_HR < 100))
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <StartTask03+0x13c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	dd07      	ble.n	80015dc <StartTask03+0xc8>
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <StartTask03+0x13c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b63      	cmp	r3, #99	; 0x63
 80015d2:	dc03      	bgt.n	80015dc <StartTask03+0xc8>
				globalECG = ECG_HR;
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <StartTask03+0x13c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <StartTask03+0x140>)
 80015da:	6013      	str	r3, [r2, #0]
#if DEBUG_ECG == 1
			sprintf(print_char,"<======|The ECG Heart Rate is: %d|======>\r\n", ECG_HR);
			USART_WRITE(USART2, print_char, strlen(print_char), 10);
#endif
			LCD_SetTextColor(BLACK, WHITE);
 80015dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015e0:	2000      	movs	r0, #0
 80015e2:	f005 fc51 	bl	8006e88 <LCD_SetTextColor>
			LCD_SetCursor(190, 270);
 80015e6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80015ea:	20be      	movs	r0, #190	; 0xbe
 80015ec:	f005 fc1e 	bl	8006e2c <LCD_SetCursor>
			LCD_SetTextSize(2);
 80015f0:	2002      	movs	r0, #2
 80015f2:	f005 fc33 	bl	8006e5c <LCD_SetTextSize>
			if (globalECG < 10)
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <StartTask03+0x140>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b09      	cmp	r3, #9
 80015fc:	dc06      	bgt.n	800160c <StartTask03+0xf8>
				LCD_Printf(" %d", globalECG);
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <StartTask03+0x140>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4619      	mov	r1, r3
 8001604:	4814      	ldr	r0, [pc, #80]	; (8001658 <StartTask03+0x144>)
 8001606:	f005 fb29 	bl	8006c5c <LCD_Printf>
 800160a:	e009      	b.n	8001620 <StartTask03+0x10c>
			else if (globalECG < 100)
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <StartTask03+0x140>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b63      	cmp	r3, #99	; 0x63
 8001612:	dc05      	bgt.n	8001620 <StartTask03+0x10c>
				LCD_Printf("%d", globalECG);
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <StartTask03+0x140>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	4810      	ldr	r0, [pc, #64]	; (800165c <StartTask03+0x148>)
 800161c:	f005 fb1e 	bl	8006c5c <LCD_Printf>
			ECG_HR = 0;
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <StartTask03+0x13c>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
			LCD_ECGAnimation();
 8001626:	f004 f829 	bl	800567c <LCD_ECGAnimation>
			ecg_startTime = HAL_GetTick();
 800162a:	f000 fab3 	bl	8001b94 <HAL_GetTick>
 800162e:	60f8      	str	r0, [r7, #12]
		}

		osDelay(500);
 8001630:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001634:	f005 fe61 	bl	80072fa <osDelay>
		if (dts == displayTemp_ok) {
 8001638:	e776      	b.n	8001528 <StartTask03+0x14>
 800163a:	bf00      	nop
 800163c:	200005b1 	.word	0x200005b1
 8001640:	20000000 	.word	0x20000000
 8001644:	0800bd78 	.word	0x0800bd78
 8001648:	0800bd80 	.word	0x0800bd80
 800164c:	0800bd88 	.word	0x0800bd88
 8001650:	200005b8 	.word	0x200005b8
 8001654:	20000004 	.word	0x20000004
 8001658:	0800bd90 	.word	0x0800bd90
 800165c:	0800bd94 	.word	0x0800bd94

08001660 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM11) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001672:	f000 fa7b 	bl	8001b6c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40014800 	.word	0x40014800

08001684 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_MspInit+0x54>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_MspInit+0x54>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_MspInit+0x54>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_MspInit+0x54>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_MspInit+0x54>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_MspInit+0x54>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	210f      	movs	r1, #15
 80016d2:	f06f 0001 	mvn.w	r0, #1
 80016d6:	f000 fecf 	bl	8002478 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_ADC_MspInit+0x7c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d127      	bne.n	800175a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_ADC_MspInit+0x80>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_ADC_MspInit+0x80>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_ADC_MspInit+0x80>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_ADC_MspInit+0x80>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_ADC_MspInit+0x80>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_ADC_MspInit+0x80>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001742:	2310      	movs	r3, #16
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001746:	2303      	movs	r3, #3
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <HAL_ADC_MspInit+0x84>)
 8001756:	f000 feb9 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40012000 	.word	0x40012000
 8001768:	40023800 	.word	0x40023800
 800176c:	40020800 	.word	0x40020800

08001770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_I2C_MspInit+0x84>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d12c      	bne.n	80017ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b4:	2312      	movs	r3, #18
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c0:	2304      	movs	r3, #4
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <HAL_I2C_MspInit+0x8c>)
 80017cc:	f000 fe7e 	bl	80024cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40005400 	.word	0x40005400
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020400 	.word	0x40020400

08001800 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	; 0x30
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <HAL_InitTick+0xd0>)
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <HAL_InitTick+0xd0>)
 800181a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181e:	6453      	str	r3, [r2, #68]	; 0x44
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_InitTick+0xd0>)
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800182c:	f107 020c 	add.w	r2, r7, #12
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fb80 	bl	8003f3c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800183c:	f002 fb6a 	bl	8003f14 <HAL_RCC_GetPCLK2Freq>
 8001840:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <HAL_InitTick+0xd4>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0c9b      	lsrs	r3, r3, #18
 800184c:	3b01      	subs	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_InitTick+0xd8>)
 8001852:	4a22      	ldr	r2, [pc, #136]	; (80018dc <HAL_InitTick+0xdc>)
 8001854:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_InitTick+0xd8>)
 8001858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800185c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800185e:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <HAL_InitTick+0xd8>)
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_InitTick+0xd8>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_InitTick+0xd8>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_InitTick+0xd8>)
 8001872:	2200      	movs	r2, #0
 8001874:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001876:	4818      	ldr	r0, [pc, #96]	; (80018d8 <HAL_InitTick+0xd8>)
 8001878:	f002 fb92 	bl	8003fa0 <HAL_TIM_Base_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001886:	2b00      	cmp	r3, #0
 8001888:	d11b      	bne.n	80018c2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800188a:	4813      	ldr	r0, [pc, #76]	; (80018d8 <HAL_InitTick+0xd8>)
 800188c:	f002 fbe2 	bl	8004054 <HAL_TIM_Base_Start_IT>
 8001890:	4603      	mov	r3, r0
 8001892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800189a:	2b00      	cmp	r3, #0
 800189c:	d111      	bne.n	80018c2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800189e:	201a      	movs	r0, #26
 80018a0:	f000 fe06 	bl	80024b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	d808      	bhi.n	80018bc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80018aa:	2200      	movs	r2, #0
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	201a      	movs	r0, #26
 80018b0:	f000 fde2 	bl	8002478 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_InitTick+0xe0>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e002      	b.n	80018c2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3730      	adds	r7, #48	; 0x30
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	431bde83 	.word	0x431bde83
 80018d8:	200005bc 	.word	0x200005bc
 80018dc:	40014800 	.word	0x40014800
 80018e0:	20000010 	.word	0x20000010

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <BusFault_Handler+0x4>

080018fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler+0x4>

08001902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001916:	f002 fbff 	bl	8004118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200005bc 	.word	0x200005bc

08001924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	return 1;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_kill>:

int _kill(int pid, int sig)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800193e:	f007 f9cd 	bl	8008cdc <__errno>
 8001942:	4603      	mov	r3, r0
 8001944:	2216      	movs	r2, #22
 8001946:	601a      	str	r2, [r3, #0]
	return -1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_exit>:

void _exit (int status)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ffe7 	bl	8001934 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001966:	e7fe      	b.n	8001966 <_exit+0x12>

08001968 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e00a      	b.n	8001990 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800197a:	f3af 8000 	nop.w
 800197e:	4601      	mov	r1, r0
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	b2ca      	uxtb	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf0      	blt.n	800197a <_read+0x12>
	}

return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e009      	b.n	80019c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dbf1      	blt.n	80019b4 <_write+0x12>
	}
	return len;
 80019d0:	687b      	ldr	r3, [r7, #4]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_close>:

int _close(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a02:	605a      	str	r2, [r3, #4]
	return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <_isatty>:

int _isatty(int file)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	return 1;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f007 f932 	bl	8008cdc <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20018000 	.word	0x20018000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	20000604 	.word	0x20000604
 8001aac:	200045b8 	.word	0x200045b8

08001ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <SystemInit+0x20>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <SystemInit+0x20>)
 8001abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ada:	490e      	ldr	r1, [pc, #56]	; (8001b14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001af0:	4c0b      	ldr	r4, [pc, #44]	; (8001b20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001afe:	f7ff ffd7 	bl	8001ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b02:	f007 f9e7 	bl	8008ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b06:	f7ff f9f3 	bl	8000ef0 <main>
  bx  lr    
 8001b0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b14:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8001b18:	0800c56c 	.word	0x0800c56c
  ldr r2, =_sbss
 8001b1c:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8001b20:	200045b4 	.word	0x200045b4

08001b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC_IRQHandler>
	...

08001b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_Init+0x40>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_Init+0x40>)
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <HAL_Init+0x40>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f000 fc86 	bl	8002462 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b56:	200f      	movs	r0, #15
 8001b58:	f7ff fe52 	bl	8001800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5c:	f7ff fd98 	bl	8001690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000014 	.word	0x20000014
 8001b90:	20000608 	.word	0x20000608

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000608 	.word	0x20000608

08001bac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e033      	b.n	8001c2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fd8c 	bl	80016e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d118      	bne.n	8001c1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bf2:	f023 0302 	bic.w	r3, r3, #2
 8001bf6:	f043 0202 	orr.w	r2, r3, #2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fa86 	bl	8002110 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
 8001c1a:	e001      	b.n	8001c20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Start+0x1a>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e097      	b.n	8001d7e <HAL_ADC_Start+0x14a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d018      	beq.n	8001c96 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c74:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <HAL_ADC_Start+0x158>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <HAL_ADC_Start+0x15c>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0c9a      	lsrs	r2, r3, #18
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c88:	e002      	b.n	8001c90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f9      	bne.n	8001c8a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d15f      	bne.n	8001d64 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce2:	d106      	bne.n	8001cf2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	f023 0206 	bic.w	r2, r3, #6
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44
 8001cf0:	e002      	b.n	8001cf8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_ADC_Start+0x160>)
 8001d02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d0c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10f      	bne.n	8001d3a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d129      	bne.n	8001d7c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	e020      	b.n	8001d7c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <HAL_ADC_Start+0x164>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d11b      	bne.n	8001d7c <HAL_ADC_Start+0x148>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d114      	bne.n	8001d7c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	e00b      	b.n	8001d7c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f043 0210 	orr.w	r2, r3, #16
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	2000000c 	.word	0x2000000c
 8001d90:	431bde83 	.word	0x431bde83
 8001d94:	40012300 	.word	0x40012300
 8001d98:	40012000 	.word	0x40012000

08001d9c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db8:	d113      	bne.n	8001de2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc8:	d10b      	bne.n	8001de2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f043 0220 	orr.w	r2, r3, #32
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e063      	b.n	8001eaa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001de2:	f7ff fed7 	bl	8001b94 <HAL_GetTick>
 8001de6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001de8:	e021      	b.n	8001e2e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d01d      	beq.n	8001e2e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_ADC_PollForConversion+0x6c>
 8001df8:	f7ff fecc 	bl	8001b94 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d212      	bcs.n	8001e2e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d00b      	beq.n	8001e2e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f043 0204 	orr.w	r2, r3, #4
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e03d      	b.n	8001eaa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d1d6      	bne.n	8001dea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0212 	mvn.w	r2, #18
 8001e44:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d123      	bne.n	8001ea8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d11f      	bne.n	8001ea8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1c>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e105      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x228>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b09      	cmp	r3, #9
 8001ef6:	d925      	bls.n	8001f44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68d9      	ldr	r1, [r3, #12]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b1e      	subs	r3, #30
 8001f0e:	2207      	movs	r2, #7
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43da      	mvns	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68d9      	ldr	r1, [r3, #12]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4603      	mov	r3, r0
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4403      	add	r3, r0
 8001f36:	3b1e      	subs	r3, #30
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	e022      	b.n	8001f8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6919      	ldr	r1, [r3, #16]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	2207      	movs	r2, #7
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	400a      	ands	r2, r1
 8001f66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6919      	ldr	r1, [r3, #16]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4403      	add	r3, r0
 8001f80:	409a      	lsls	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d824      	bhi.n	8001fdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b05      	subs	r3, #5
 8001fa4:	221f      	movs	r2, #31
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b05      	subs	r3, #5
 8001fce:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fda:	e04c      	b.n	8002076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d824      	bhi.n	800202e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b23      	subs	r3, #35	; 0x23
 8001ff6:	221f      	movs	r2, #31
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43da      	mvns	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	400a      	ands	r2, r1
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	4618      	mov	r0, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b23      	subs	r3, #35	; 0x23
 8002020:	fa00 f203 	lsl.w	r2, r0, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
 800202c:	e023      	b.n	8002076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b41      	subs	r3, #65	; 0x41
 8002040:	221f      	movs	r2, #31
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	400a      	ands	r2, r1
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b41      	subs	r3, #65	; 0x41
 800206a:	fa00 f203 	lsl.w	r2, r0, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_ADC_ConfigChannel+0x234>)
 8002078:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a21      	ldr	r2, [pc, #132]	; (8002104 <HAL_ADC_ConfigChannel+0x238>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d109      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1cc>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b12      	cmp	r3, #18
 800208a:	d105      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_ADC_ConfigChannel+0x238>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d123      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x21e>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d003      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0x1e6>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b11      	cmp	r3, #17
 80020b0:	d11b      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d111      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_ADC_ConfigChannel+0x23c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <HAL_ADC_ConfigChannel+0x240>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	0c9a      	lsrs	r2, r3, #18
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020dc:	e002      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f9      	bne.n	80020de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40012300 	.word	0x40012300
 8002104:	40012000 	.word	0x40012000
 8002108:	2000000c 	.word	0x2000000c
 800210c:	431bde83 	.word	0x431bde83

08002110 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002118:	4b79      	ldr	r3, [pc, #484]	; (8002300 <ADC_Init+0x1f0>)
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	431a      	orrs	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	021a      	lsls	r2, r3, #8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6899      	ldr	r1, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	4a58      	ldr	r2, [pc, #352]	; (8002304 <ADC_Init+0x1f4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d022      	beq.n	80021ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6899      	ldr	r1, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6899      	ldr	r1, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	e00f      	b.n	800220e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800220c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0202 	bic.w	r2, r2, #2
 800221c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6899      	ldr	r1, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7e1b      	ldrb	r3, [r3, #24]
 8002228:	005a      	lsls	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01b      	beq.n	8002274 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800225a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	3b01      	subs	r3, #1
 8002268:	035a      	lsls	r2, r3, #13
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	e007      	b.n	8002284 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002282:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	3b01      	subs	r3, #1
 80022a0:	051a      	lsls	r2, r3, #20
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6899      	ldr	r1, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c6:	025a      	lsls	r2, r3, #9
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6899      	ldr	r1, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	029a      	lsls	r2, r3, #10
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	609a      	str	r2, [r3, #8]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40012300 	.word	0x40012300
 8002304:	0f000001 	.word	0x0f000001

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <__NVIC_EnableIRQ+0x38>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	; (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff4c 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800248a:	f7ff ff61 	bl	8002350 <__NVIC_GetPriorityGrouping>
 800248e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	6978      	ldr	r0, [r7, #20]
 8002496:	f7ff ffb1 	bl	80023fc <NVIC_EncodePriority>
 800249a:	4602      	mov	r2, r0
 800249c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff80 	bl	80023a8 <__NVIC_SetPriority>
}
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff54 	bl	800236c <__NVIC_EnableIRQ>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e159      	b.n	800279c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	f040 8148 	bne.w	8002796 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d005      	beq.n	800251e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251a:	2b02      	cmp	r3, #2
 800251c:	d130      	bne.n	8002580 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 0201 	and.w	r2, r3, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b03      	cmp	r3, #3
 800258a:	d017      	beq.n	80025bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d123      	bne.n	8002610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	220f      	movs	r2, #15
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	69b9      	ldr	r1, [r7, #24]
 800260c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0203 	and.w	r2, r3, #3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a2 	beq.w	8002796 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_GPIO_Init+0x2e8>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_GPIO_Init+0x2e8>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_GPIO_Init+0x2e8>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800266e:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_GPIO_Init+0x2ec>)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	220f      	movs	r2, #15
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a49      	ldr	r2, [pc, #292]	; (80027bc <HAL_GPIO_Init+0x2f0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d019      	beq.n	80026ce <HAL_GPIO_Init+0x202>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a48      	ldr	r2, [pc, #288]	; (80027c0 <HAL_GPIO_Init+0x2f4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_GPIO_Init+0x1fe>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a47      	ldr	r2, [pc, #284]	; (80027c4 <HAL_GPIO_Init+0x2f8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00d      	beq.n	80026c6 <HAL_GPIO_Init+0x1fa>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a46      	ldr	r2, [pc, #280]	; (80027c8 <HAL_GPIO_Init+0x2fc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <HAL_GPIO_Init+0x1f6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a45      	ldr	r2, [pc, #276]	; (80027cc <HAL_GPIO_Init+0x300>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_GPIO_Init+0x1f2>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e008      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026be:	2307      	movs	r3, #7
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026ce:	2300      	movs	r3, #0
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f002 0203 	and.w	r2, r2, #3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e0:	4935      	ldr	r1, [pc, #212]	; (80027b8 <HAL_GPIO_Init+0x2ec>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ee:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <HAL_GPIO_Init+0x304>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002712:	4a2f      	ldr	r2, [pc, #188]	; (80027d0 <HAL_GPIO_Init+0x304>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_GPIO_Init+0x304>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800273c:	4a24      	ldr	r2, [pc, #144]	; (80027d0 <HAL_GPIO_Init+0x304>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <HAL_GPIO_Init+0x304>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002766:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <HAL_GPIO_Init+0x304>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <HAL_GPIO_Init+0x304>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002790:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <HAL_GPIO_Init+0x304>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	f67f aea2 	bls.w	80024e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40013800 	.word	0x40013800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	40020400 	.word	0x40020400
 80027c4:	40020800 	.word	0x40020800
 80027c8:	40020c00 	.word	0x40020c00
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e12b      	b.n	8002a3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe ffb8 	bl	8001770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002826:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002838:	f001 fb58 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 800283c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a81      	ldr	r2, [pc, #516]	; (8002a48 <HAL_I2C_Init+0x274>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d807      	bhi.n	8002858 <HAL_I2C_Init+0x84>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4a80      	ldr	r2, [pc, #512]	; (8002a4c <HAL_I2C_Init+0x278>)
 800284c:	4293      	cmp	r3, r2
 800284e:	bf94      	ite	ls
 8002850:	2301      	movls	r3, #1
 8002852:	2300      	movhi	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	e006      	b.n	8002866 <HAL_I2C_Init+0x92>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a7d      	ldr	r2, [pc, #500]	; (8002a50 <HAL_I2C_Init+0x27c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	bf94      	ite	ls
 8002860:	2301      	movls	r3, #1
 8002862:	2300      	movhi	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0e7      	b.n	8002a3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a78      	ldr	r2, [pc, #480]	; (8002a54 <HAL_I2C_Init+0x280>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0c9b      	lsrs	r3, r3, #18
 8002878:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a6a      	ldr	r2, [pc, #424]	; (8002a48 <HAL_I2C_Init+0x274>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d802      	bhi.n	80028a8 <HAL_I2C_Init+0xd4>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3301      	adds	r3, #1
 80028a6:	e009      	b.n	80028bc <HAL_I2C_Init+0xe8>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	4a69      	ldr	r2, [pc, #420]	; (8002a58 <HAL_I2C_Init+0x284>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	3301      	adds	r3, #1
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	495c      	ldr	r1, [pc, #368]	; (8002a48 <HAL_I2C_Init+0x274>)
 80028d8:	428b      	cmp	r3, r1
 80028da:	d819      	bhi.n	8002910 <HAL_I2C_Init+0x13c>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e59      	subs	r1, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ea:	1c59      	adds	r1, r3, #1
 80028ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028f0:	400b      	ands	r3, r1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_I2C_Init+0x138>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1e59      	subs	r1, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fbb1 f3f3 	udiv	r3, r1, r3
 8002904:	3301      	adds	r3, #1
 8002906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290a:	e051      	b.n	80029b0 <HAL_I2C_Init+0x1dc>
 800290c:	2304      	movs	r3, #4
 800290e:	e04f      	b.n	80029b0 <HAL_I2C_Init+0x1dc>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d111      	bne.n	800293c <HAL_I2C_Init+0x168>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	440b      	add	r3, r1
 8002926:	fbb0 f3f3 	udiv	r3, r0, r3
 800292a:	3301      	adds	r3, #1
 800292c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	e012      	b.n	8002962 <HAL_I2C_Init+0x18e>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1e58      	subs	r0, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	0099      	lsls	r1, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002952:	3301      	adds	r3, #1
 8002954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Init+0x196>
 8002966:	2301      	movs	r3, #1
 8002968:	e022      	b.n	80029b0 <HAL_I2C_Init+0x1dc>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10e      	bne.n	8002990 <HAL_I2C_Init+0x1bc>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e58      	subs	r0, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	440b      	add	r3, r1
 8002980:	fbb0 f3f3 	udiv	r3, r0, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298e:	e00f      	b.n	80029b0 <HAL_I2C_Init+0x1dc>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e58      	subs	r0, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	0099      	lsls	r1, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	6809      	ldr	r1, [r1, #0]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6911      	ldr	r1, [r2, #16]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68d2      	ldr	r2, [r2, #12]
 80029ea:	4311      	orrs	r1, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	000186a0 	.word	0x000186a0
 8002a4c:	001e847f 	.word	0x001e847f
 8002a50:	003d08ff 	.word	0x003d08ff
 8002a54:	431bde83 	.word	0x431bde83
 8002a58:	10624dd3 	.word	0x10624dd3

08002a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	813b      	strh	r3, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a76:	f7ff f88d 	bl	8001b94 <HAL_GetTick>
 8002a7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	f040 8208 	bne.w	8002e9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2319      	movs	r3, #25
 8002a90:	2201      	movs	r2, #1
 8002a92:	497b      	ldr	r1, [pc, #492]	; (8002c80 <HAL_I2C_Mem_Read+0x224>)
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fc1d 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e1fb      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2C_Mem_Read+0x56>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e1f4      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d007      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2222      	movs	r2, #34	; 0x22
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <HAL_I2C_Mem_Read+0x228>)
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b1a:	88f8      	ldrh	r0, [r7, #6]
 8002b1c:	893a      	ldrh	r2, [r7, #8]
 8002b1e:	8979      	ldrh	r1, [r7, #10]
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4603      	mov	r3, r0
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 faea 	bl	8003104 <I2C_RequestMemoryRead>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1b0      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d113      	bne.n	8002b6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	623b      	str	r3, [r7, #32]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e184      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d11b      	bne.n	8002baa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e164      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d11b      	bne.n	8002bea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	e144      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c00:	e138      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	f200 80f1 	bhi.w	8002dee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d123      	bne.n	8002c5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fc72 	bl	8003502 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e139      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c5a:	e10b      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d14e      	bne.n	8002d02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4906      	ldr	r1, [pc, #24]	; (8002c88 <HAL_I2C_Mem_Read+0x22c>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fb30 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e10e      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
 8002c7e:	bf00      	nop
 8002c80:	00100002 	.word	0x00100002
 8002c84:	ffff0000 	.word	0xffff0000
 8002c88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d00:	e0b8      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4966      	ldr	r1, [pc, #408]	; (8002ea4 <HAL_I2C_Mem_Read+0x448>)
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fae1 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0bf      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	2200      	movs	r2, #0
 8002d66:	494f      	ldr	r1, [pc, #316]	; (8002ea4 <HAL_I2C_Mem_Read+0x448>)
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fab3 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e091      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dec:	e042      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fb85 	bl	8003502 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e04c      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d118      	bne.n	8002e74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f47f aec2 	bne.w	8002c02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e000      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
  }
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3728      	adds	r7, #40	; 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	00010004 	.word	0x00010004

08002ea8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002eb8:	f7fe fe6c 	bl	8001b94 <HAL_GetTick>
 8002ebc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	f040 8111 	bne.w	80030f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	2319      	movs	r3, #25
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4988      	ldr	r1, [pc, #544]	; (80030fc <HAL_I2C_IsDeviceReady+0x254>)
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f9fa 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e104      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2C_IsDeviceReady+0x50>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0fd      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x24c>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d007      	beq.n	8002f1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2224      	movs	r2, #36	; 0x24
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a70      	ldr	r2, [pc, #448]	; (8003100 <HAL_I2C_IsDeviceReady+0x258>)
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f9b8 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00d      	beq.n	8002f86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f78:	d103      	bne.n	8002f82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e0b6      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f86:	897b      	ldrh	r3, [r7, #10]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe fdfd 	bl	8001b94 <HAL_GetTick>
 8002f9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fca:	e025      	b.n	8003018 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fcc:	f7fe fde2 	bl	8001b94 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <HAL_I2C_IsDeviceReady+0x13a>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	22a0      	movs	r2, #160	; 0xa0
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2ba0      	cmp	r3, #160	; 0xa0
 8003022:	d005      	beq.n	8003030 <HAL_I2C_IsDeviceReady+0x188>
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_I2C_IsDeviceReady+0x188>
 800302a:	7dbb      	ldrb	r3, [r7, #22]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0cd      	beq.n	8002fcc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d129      	bne.n	800309a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003054:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2319      	movs	r3, #25
 8003072:	2201      	movs	r2, #1
 8003074:	4921      	ldr	r1, [pc, #132]	; (80030fc <HAL_I2C_IsDeviceReady+0x254>)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f92c 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e036      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e02c      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2319      	movs	r3, #25
 80030ba:	2201      	movs	r2, #1
 80030bc:	490f      	ldr	r1, [pc, #60]	; (80030fc <HAL_I2C_IsDeviceReady+0x254>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f908 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e012      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	3301      	adds	r3, #1
 80030d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f4ff af32 	bcc.w	8002f42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	00100002 	.word	0x00100002
 8003100:	ffff0000 	.word	0xffff0000

08003104 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4603      	mov	r3, r0
 8003114:	817b      	strh	r3, [r7, #10]
 8003116:	460b      	mov	r3, r1
 8003118:	813b      	strh	r3, [r7, #8]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800312c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	2200      	movs	r2, #0
 8003146:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f8c2 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003164:	d103      	bne.n	800316e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0aa      	b.n	80032c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003172:	897b      	ldrh	r3, [r7, #10]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003180:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	4952      	ldr	r1, [pc, #328]	; (80032d0 <I2C_RequestMemoryRead+0x1cc>)
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f8fa 	bl	8003382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e097      	b.n	80032c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b0:	6a39      	ldr	r1, [r7, #32]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f964 	bl	8003480 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d107      	bne.n	80031d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e076      	b.n	80032c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031e0:	893b      	ldrh	r3, [r7, #8]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	611a      	str	r2, [r3, #16]
 80031ea:	e021      	b.n	8003230 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031ec:	893b      	ldrh	r3, [r7, #8]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fc:	6a39      	ldr	r1, [r7, #32]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f93e 	bl	8003480 <I2C_WaitOnTXEFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2b04      	cmp	r3, #4
 8003210:	d107      	bne.n	8003222 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003220:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e050      	b.n	80032c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003226:	893b      	ldrh	r3, [r7, #8]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003232:	6a39      	ldr	r1, [r7, #32]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f923 	bl	8003480 <I2C_WaitOnTXEFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00d      	beq.n	800325c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	2b04      	cmp	r3, #4
 8003246:	d107      	bne.n	8003258 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003256:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e035      	b.n	80032c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800326a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2200      	movs	r2, #0
 8003274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f82b 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00d      	beq.n	80032a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003292:	d103      	bne.n	800329c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e013      	b.n	80032c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032a0:	897b      	ldrh	r3, [r7, #10]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	6a3a      	ldr	r2, [r7, #32]
 80032b4:	4906      	ldr	r1, [pc, #24]	; (80032d0 <I2C_RequestMemoryRead+0x1cc>)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f863 	bl	8003382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	00010002 	.word	0x00010002

080032d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e4:	e025      	b.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d021      	beq.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fe fc51 	bl	8001b94 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e023      	b.n	800337a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	0c1b      	lsrs	r3, r3, #16
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d10d      	bne.n	8003358 <I2C_WaitOnFlagUntilTimeout+0x84>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf0c      	ite	eq
 800334e:	2301      	moveq	r3, #1
 8003350:	2300      	movne	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	e00c      	b.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	429a      	cmp	r2, r3
 8003376:	d0b6      	beq.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003390:	e051      	b.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d123      	bne.n	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f043 0204 	orr.w	r2, r3, #4
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e046      	b.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d021      	beq.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7fe fbcf 	bl	8001b94 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d116      	bne.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e020      	b.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d10c      	bne.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4013      	ands	r3, r2
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	bf14      	ite	ne
 8003452:	2301      	movne	r3, #1
 8003454:	2300      	moveq	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	e00b      	b.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	43da      	mvns	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4013      	ands	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d18d      	bne.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800348c:	e02d      	b.n	80034ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f88d 	bl	80035ae <I2C_IsAcknowledgeFailed>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e02d      	b.n	80034fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d021      	beq.n	80034ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fe fb75 	bl	8001b94 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d116      	bne.n	80034ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e007      	b.n	80034fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f4:	2b80      	cmp	r3, #128	; 0x80
 80034f6:	d1ca      	bne.n	800348e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800350e:	e042      	b.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b10      	cmp	r3, #16
 800351c:	d119      	bne.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f06f 0210 	mvn.w	r2, #16
 8003526:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e029      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fe fb1f 	bl	8001b94 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d116      	bne.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e007      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d1b5      	bne.n	8003510 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c4:	d11b      	bne.n	80035fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0204 	orr.w	r2, r3, #4
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e267      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d075      	beq.n	8003716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800362a:	4b88      	ldr	r3, [pc, #544]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b04      	cmp	r3, #4
 8003634:	d00c      	beq.n	8003650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003636:	4b85      	ldr	r3, [pc, #532]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800363e:	2b08      	cmp	r3, #8
 8003640:	d112      	bne.n	8003668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003642:	4b82      	ldr	r3, [pc, #520]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364e:	d10b      	bne.n	8003668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	4b7e      	ldr	r3, [pc, #504]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d05b      	beq.n	8003714 <HAL_RCC_OscConfig+0x108>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d157      	bne.n	8003714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e242      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003670:	d106      	bne.n	8003680 <HAL_RCC_OscConfig+0x74>
 8003672:	4b76      	ldr	r3, [pc, #472]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a75      	ldr	r2, [pc, #468]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e01d      	b.n	80036bc <HAL_RCC_OscConfig+0xb0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x98>
 800368a:	4b70      	ldr	r3, [pc, #448]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6f      	ldr	r2, [pc, #444]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b6d      	ldr	r3, [pc, #436]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a6c      	ldr	r2, [pc, #432]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0xb0>
 80036a4:	4b69      	ldr	r3, [pc, #420]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a68      	ldr	r2, [pc, #416]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80036aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b66      	ldr	r3, [pc, #408]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a65      	ldr	r2, [pc, #404]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80036b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe fa66 	bl	8001b94 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fe fa62 	bl	8001b94 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e207      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b5b      	ldr	r3, [pc, #364]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0xc0>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe fa52 	bl	8001b94 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fe fa4e 	bl	8001b94 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1f3      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	4b51      	ldr	r3, [pc, #324]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0xe8>
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d063      	beq.n	80037ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003722:	4b4a      	ldr	r3, [pc, #296]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800372e:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003736:	2b08      	cmp	r3, #8
 8003738:	d11c      	bne.n	8003774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373a:	4b44      	ldr	r3, [pc, #272]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_RCC_OscConfig+0x152>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e1c7      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375e:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4937      	ldr	r1, [pc, #220]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	e03a      	b.n	80037ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800377c:	4b34      	ldr	r3, [pc, #208]	; (8003850 <HAL_RCC_OscConfig+0x244>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003782:	f7fe fa07 	bl	8001b94 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800378a:	f7fe fa03 	bl	8001b94 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e1a8      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379c:	4b2b      	ldr	r3, [pc, #172]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a8:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4925      	ldr	r1, [pc, #148]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	e015      	b.n	80037ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_RCC_OscConfig+0x244>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe f9e6 	bl	8001b94 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037cc:	f7fe f9e2 	bl	8001b94 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e187      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d036      	beq.n	8003864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <HAL_RCC_OscConfig+0x248>)
 8003800:	2201      	movs	r2, #1
 8003802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7fe f9c6 	bl	8001b94 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380c:	f7fe f9c2 	bl	8001b94 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e167      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x200>
 800382a:	e01b      	b.n	8003864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_OscConfig+0x248>)
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003832:	f7fe f9af 	bl	8001b94 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003838:	e00e      	b.n	8003858 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800383a:	f7fe f9ab 	bl	8001b94 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d907      	bls.n	8003858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e150      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
 800384c:	40023800 	.word	0x40023800
 8003850:	42470000 	.word	0x42470000
 8003854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003858:	4b88      	ldr	r3, [pc, #544]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800385a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ea      	bne.n	800383a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8097 	beq.w	80039a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003876:	4b81      	ldr	r3, [pc, #516]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10f      	bne.n	80038a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	4b7d      	ldr	r3, [pc, #500]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	4a7c      	ldr	r2, [pc, #496]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800388c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003890:	6413      	str	r3, [r2, #64]	; 0x40
 8003892:	4b7a      	ldr	r3, [pc, #488]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a2:	4b77      	ldr	r3, [pc, #476]	; (8003a80 <HAL_RCC_OscConfig+0x474>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d118      	bne.n	80038e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ae:	4b74      	ldr	r3, [pc, #464]	; (8003a80 <HAL_RCC_OscConfig+0x474>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a73      	ldr	r2, [pc, #460]	; (8003a80 <HAL_RCC_OscConfig+0x474>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ba:	f7fe f96b 	bl	8001b94 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c2:	f7fe f967 	bl	8001b94 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e10c      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <HAL_RCC_OscConfig+0x474>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d106      	bne.n	80038f6 <HAL_RCC_OscConfig+0x2ea>
 80038e8:	4b64      	ldr	r3, [pc, #400]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a63      	ldr	r2, [pc, #396]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
 80038f4:	e01c      	b.n	8003930 <HAL_RCC_OscConfig+0x324>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b05      	cmp	r3, #5
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0x30c>
 80038fe:	4b5f      	ldr	r3, [pc, #380]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a5e      	ldr	r2, [pc, #376]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003904:	f043 0304 	orr.w	r3, r3, #4
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
 800390a:	4b5c      	ldr	r3, [pc, #368]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a5b      	ldr	r2, [pc, #364]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6713      	str	r3, [r2, #112]	; 0x70
 8003916:	e00b      	b.n	8003930 <HAL_RCC_OscConfig+0x324>
 8003918:	4b58      	ldr	r3, [pc, #352]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
 8003924:	4b55      	ldr	r3, [pc, #340]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	4a54      	ldr	r2, [pc, #336]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800392a:	f023 0304 	bic.w	r3, r3, #4
 800392e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fe f92c 	bl	8001b94 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393e:	e00a      	b.n	8003956 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003940:	f7fe f928 	bl	8001b94 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e0cb      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003956:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ee      	beq.n	8003940 <HAL_RCC_OscConfig+0x334>
 8003962:	e014      	b.n	800398e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003964:	f7fe f916 	bl	8001b94 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fe f912 	bl	8001b94 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e0b5      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003982:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1ee      	bne.n	800396c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d105      	bne.n	80039a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003994:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	4a38      	ldr	r2, [pc, #224]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800399a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80a1 	beq.w	8003aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039aa:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d05c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d141      	bne.n	8003a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <HAL_RCC_OscConfig+0x478>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe f8e6 	bl	8001b94 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe f8e2 	bl	8001b94 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e087      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	019b      	lsls	r3, r3, #6
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	3b01      	subs	r3, #1
 8003a04:	041b      	lsls	r3, r3, #16
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	491b      	ldr	r1, [pc, #108]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCC_OscConfig+0x478>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1a:	f7fe f8bb 	bl	8001b94 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fe f8b7 	bl	8001b94 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e05c      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x416>
 8003a40:	e054      	b.n	8003aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_RCC_OscConfig+0x478>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fe f8a4 	bl	8001b94 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fe f8a0 	bl	8001b94 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e045      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x444>
 8003a6e:	e03d      	b.n	8003aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d107      	bne.n	8003a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e038      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40007000 	.word	0x40007000
 8003a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <HAL_RCC_OscConfig+0x4ec>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d028      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d121      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d11a      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d111      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800

08003afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0cc      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b10:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d90c      	bls.n	8003b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b65      	ldr	r3, [pc, #404]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b63      	ldr	r3, [pc, #396]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0b8      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b50:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4a58      	ldr	r2, [pc, #352]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b68:	4b53      	ldr	r3, [pc, #332]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a52      	ldr	r2, [pc, #328]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4b50      	ldr	r3, [pc, #320]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	494d      	ldr	r1, [pc, #308]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d044      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	4b47      	ldr	r3, [pc, #284]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d119      	bne.n	8003bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e07f      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d003      	beq.n	8003bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bba:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06f      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bca:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e067      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bda:	4b37      	ldr	r3, [pc, #220]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f023 0203 	bic.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4934      	ldr	r1, [pc, #208]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bec:	f7fd ffd2 	bl	8001b94 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf4:	f7fd ffce 	bl	8001b94 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e04f      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 020c 	and.w	r2, r3, #12
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1eb      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d20c      	bcs.n	8003c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e032      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4916      	ldr	r1, [pc, #88]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d009      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	490e      	ldr	r1, [pc, #56]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c82:	f000 f821 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8003c86:	4602      	mov	r2, r0
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	490a      	ldr	r1, [pc, #40]	; (8003cbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	5ccb      	ldrb	r3, [r1, r3]
 8003c96:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fd fdac 	bl	8001800 <HAL_InitTick>

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023c00 	.word	0x40023c00
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	0800bde0 	.word	0x0800bde0
 8003cc0:	2000000c 	.word	0x2000000c
 8003cc4:	20000010 	.word	0x20000010

08003cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ccc:	b094      	sub	sp, #80	; 0x50
 8003cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd8:	2300      	movs	r3, #0
 8003cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce0:	4b79      	ldr	r3, [pc, #484]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d00d      	beq.n	8003d08 <HAL_RCC_GetSysClockFreq+0x40>
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	f200 80e1 	bhi.w	8003eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x34>
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cfa:	e0db      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b73      	ldr	r3, [pc, #460]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8003cfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d00:	e0db      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d02:	4b73      	ldr	r3, [pc, #460]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d06:	e0d8      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d08:	4b6f      	ldr	r3, [pc, #444]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d12:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d063      	beq.n	8003de6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1e:	4b6a      	ldr	r3, [pc, #424]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	099b      	lsrs	r3, r3, #6
 8003d24:	2200      	movs	r2, #0
 8003d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
 8003d32:	2300      	movs	r3, #0
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
 8003d36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	462b      	mov	r3, r5
 8003d3e:	f04f 0000 	mov.w	r0, #0
 8003d42:	f04f 0100 	mov.w	r1, #0
 8003d46:	0159      	lsls	r1, r3, #5
 8003d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d4c:	0150      	lsls	r0, r2, #5
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4621      	mov	r1, r4
 8003d54:	1a51      	subs	r1, r2, r1
 8003d56:	6139      	str	r1, [r7, #16]
 8003d58:	4629      	mov	r1, r5
 8003d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d6c:	4659      	mov	r1, fp
 8003d6e:	018b      	lsls	r3, r1, #6
 8003d70:	4651      	mov	r1, sl
 8003d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d76:	4651      	mov	r1, sl
 8003d78:	018a      	lsls	r2, r1, #6
 8003d7a:	4651      	mov	r1, sl
 8003d7c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d80:	4659      	mov	r1, fp
 8003d82:	eb63 0901 	sbc.w	r9, r3, r1
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d9a:	4690      	mov	r8, r2
 8003d9c:	4699      	mov	r9, r3
 8003d9e:	4623      	mov	r3, r4
 8003da0:	eb18 0303 	adds.w	r3, r8, r3
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	462b      	mov	r3, r5
 8003da8:	eb49 0303 	adc.w	r3, r9, r3
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dba:	4629      	mov	r1, r5
 8003dbc:	024b      	lsls	r3, r1, #9
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	024a      	lsls	r2, r1, #9
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dce:	2200      	movs	r2, #0
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dd8:	f7fc feee 	bl	8000bb8 <__aeabi_uldivmod>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4613      	mov	r3, r2
 8003de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de4:	e058      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de6:	4b38      	ldr	r3, [pc, #224]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	2200      	movs	r2, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	4611      	mov	r1, r2
 8003df2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003df6:	623b      	str	r3, [r7, #32]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e00:	4642      	mov	r2, r8
 8003e02:	464b      	mov	r3, r9
 8003e04:	f04f 0000 	mov.w	r0, #0
 8003e08:	f04f 0100 	mov.w	r1, #0
 8003e0c:	0159      	lsls	r1, r3, #5
 8003e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e12:	0150      	lsls	r0, r2, #5
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4641      	mov	r1, r8
 8003e1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e1e:	4649      	mov	r1, r9
 8003e20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e38:	ebb2 040a 	subs.w	r4, r2, sl
 8003e3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	00eb      	lsls	r3, r5, #3
 8003e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e4e:	00e2      	lsls	r2, r4, #3
 8003e50:	4614      	mov	r4, r2
 8003e52:	461d      	mov	r5, r3
 8003e54:	4643      	mov	r3, r8
 8003e56:	18e3      	adds	r3, r4, r3
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	eb45 0303 	adc.w	r3, r5, r3
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e6e:	4629      	mov	r1, r5
 8003e70:	028b      	lsls	r3, r1, #10
 8003e72:	4621      	mov	r1, r4
 8003e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e78:	4621      	mov	r1, r4
 8003e7a:	028a      	lsls	r2, r1, #10
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e82:	2200      	movs	r2, #0
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	61fa      	str	r2, [r7, #28]
 8003e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e8c:	f7fc fe94 	bl	8000bb8 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4613      	mov	r3, r2
 8003e96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8003eb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3750      	adds	r7, #80	; 0x50
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	00f42400 	.word	0x00f42400
 8003ed0:	007a1200 	.word	0x007a1200

08003ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eda:	681b      	ldr	r3, [r3, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	2000000c 	.word	0x2000000c

08003eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ef0:	f7ff fff0 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0a9b      	lsrs	r3, r3, #10
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4903      	ldr	r1, [pc, #12]	; (8003f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	0800bdf0 	.word	0x0800bdf0

08003f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f18:	f7ff ffdc 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	0b5b      	lsrs	r3, r3, #13
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	4903      	ldr	r1, [pc, #12]	; (8003f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f2a:	5ccb      	ldrb	r3, [r1, r3]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40023800 	.word	0x40023800
 8003f38:	0800bdf0 	.word	0x0800bdf0

08003f3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	220f      	movs	r2, #15
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <HAL_RCC_GetClockConfig+0x5c>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0203 	and.w	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f58:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <HAL_RCC_GetClockConfig+0x5c>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <HAL_RCC_GetClockConfig+0x5c>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <HAL_RCC_GetClockConfig+0x5c>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	08db      	lsrs	r3, r3, #3
 8003f76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <HAL_RCC_GetClockConfig+0x60>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0207 	and.w	r2, r3, #7
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	601a      	str	r2, [r3, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40023c00 	.word	0x40023c00

08003fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e041      	b.n	8004036 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f839 	bl	800403e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f000 f9ca 	bl	8004378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d001      	beq.n	800406c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e044      	b.n	80040f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <HAL_TIM_Base_Start_IT+0xb0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d018      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x6c>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004096:	d013      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x6c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <HAL_TIM_Base_Start_IT+0xb4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00e      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x6c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a19      	ldr	r2, [pc, #100]	; (800410c <HAL_TIM_Base_Start_IT+0xb8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d009      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x6c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a17      	ldr	r2, [pc, #92]	; (8004110 <HAL_TIM_Base_Start_IT+0xbc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x6c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a16      	ldr	r2, [pc, #88]	; (8004114 <HAL_TIM_Base_Start_IT+0xc0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d111      	bne.n	80040e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b06      	cmp	r3, #6
 80040d0:	d010      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	e007      	b.n	80040f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40014000 	.word	0x40014000

08004118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d122      	bne.n	8004174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b02      	cmp	r3, #2
 800413a:	d11b      	bne.n	8004174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0202 	mvn.w	r2, #2
 8004144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8ee 	bl	800433c <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f8e0 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f8f1 	bl	8004350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b04      	cmp	r3, #4
 8004180:	d122      	bne.n	80041c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d11b      	bne.n	80041c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0204 	mvn.w	r2, #4
 8004198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f8c4 	bl	800433c <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8b6 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f8c7 	bl	8004350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d122      	bne.n	800421c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d11b      	bne.n	800421c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0208 	mvn.w	r2, #8
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2204      	movs	r2, #4
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f89a 	bl	800433c <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f88c 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f89d 	bl	8004350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d122      	bne.n	8004270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b10      	cmp	r3, #16
 8004236:	d11b      	bne.n	8004270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0210 	mvn.w	r2, #16
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2208      	movs	r2, #8
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f870 	bl	800433c <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f862 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f873 	bl	8004350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10e      	bne.n	800429c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d107      	bne.n	800429c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0201 	mvn.w	r2, #1
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd f9e2 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d10e      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d107      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f8e2 	bl	800448c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d10e      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d107      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f838 	bl	8004364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b20      	cmp	r3, #32
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0220 	mvn.w	r2, #32
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f8ac 	bl	8004478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a34      	ldr	r2, [pc, #208]	; (800445c <TIM_Base_SetConfig+0xe4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00f      	beq.n	80043b0 <TIM_Base_SetConfig+0x38>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d00b      	beq.n	80043b0 <TIM_Base_SetConfig+0x38>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a31      	ldr	r2, [pc, #196]	; (8004460 <TIM_Base_SetConfig+0xe8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d007      	beq.n	80043b0 <TIM_Base_SetConfig+0x38>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a30      	ldr	r2, [pc, #192]	; (8004464 <TIM_Base_SetConfig+0xec>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_Base_SetConfig+0x38>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <TIM_Base_SetConfig+0xf0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d108      	bne.n	80043c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a25      	ldr	r2, [pc, #148]	; (800445c <TIM_Base_SetConfig+0xe4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01b      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d0:	d017      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a22      	ldr	r2, [pc, #136]	; (8004460 <TIM_Base_SetConfig+0xe8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a21      	ldr	r2, [pc, #132]	; (8004464 <TIM_Base_SetConfig+0xec>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00f      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a20      	ldr	r2, [pc, #128]	; (8004468 <TIM_Base_SetConfig+0xf0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00b      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1f      	ldr	r2, [pc, #124]	; (800446c <TIM_Base_SetConfig+0xf4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <TIM_Base_SetConfig+0xf8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <TIM_Base_SetConfig+0xfc>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d108      	bne.n	8004414 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a08      	ldr	r2, [pc, #32]	; (800445c <TIM_Base_SetConfig+0xe4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d103      	bne.n	8004448 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	615a      	str	r2, [r3, #20]
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40014000 	.word	0x40014000
 8004470:	40014400 	.word	0x40014400
 8004474:	40014800 	.word	0x40014800

08004478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <__NVIC_EnableIRQ>:
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	db0b      	blt.n	80044ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	f003 021f 	and.w	r2, r3, #31
 80044b8:	4907      	ldr	r1, [pc, #28]	; (80044d8 <__NVIC_EnableIRQ+0x38>)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2001      	movs	r0, #1
 80044c2:	fa00 f202 	lsl.w	r2, r0, r2
 80044c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	e000e100 	.word	0xe000e100

080044dc <map>:
		(0x07), (0x08), (0x09), (0x10), (0x11), (0x12), (0x13), (0x14), (0x015) };



uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 80044dc:	b490      	push	{r4, r7}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4604      	mov	r4, r0
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	80fb      	strh	r3, [r7, #6]
 80044ee:	4603      	mov	r3, r0
 80044f0:	80bb      	strh	r3, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	807b      	strh	r3, [r7, #2]
 80044f6:	4613      	mov	r3, r2
 80044f8:	803b      	strh	r3, [r7, #0]
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	88bb      	ldrh	r3, [r7, #4]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	8a39      	ldrh	r1, [r7, #16]
 8004502:	883a      	ldrh	r2, [r7, #0]
 8004504:	1a8a      	subs	r2, r1, r2
 8004506:	fb03 f202 	mul.w	r2, r3, r2
 800450a:	8879      	ldrh	r1, [r7, #2]
 800450c:	88bb      	ldrh	r3, [r7, #4]
 800450e:	1ac9      	subs	r1, r1, r3
 8004510:	883b      	ldrh	r3, [r7, #0]
 8004512:	440b      	add	r3, r1
 8004514:	fb92 f3f3 	sdiv	r3, r2, r3
 8004518:	b29b      	uxth	r3, r3
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bc90      	pop	{r4, r7}
 8004522:	4770      	bx	lr

08004524 <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a1b      	ldr	r2, [pc, #108]	; (800459c <gpio_clk_en+0x78>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d106      	bne.n	8004542 <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 8004534:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <gpio_clk_en+0x7c>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <gpio_clk_en+0x7c>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 8004540:	e026      	b.n	8004590 <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <gpio_clk_en+0x80>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d106      	bne.n	8004558 <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <gpio_clk_en+0x7c>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <gpio_clk_en+0x7c>)
 8004550:	f043 0302 	orr.w	r3, r3, #2
 8004554:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004556:	e01b      	b.n	8004590 <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <gpio_clk_en+0x84>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d106      	bne.n	800456e <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 8004560:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <gpio_clk_en+0x7c>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	4a0e      	ldr	r2, [pc, #56]	; (80045a0 <gpio_clk_en+0x7c>)
 8004566:	f043 0304 	orr.w	r3, r3, #4
 800456a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800456c:	e010      	b.n	8004590 <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a0e      	ldr	r2, [pc, #56]	; (80045ac <gpio_clk_en+0x88>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d106      	bne.n	8004584 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <gpio_clk_en+0x7c>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <gpio_clk_en+0x7c>)
 800457c:	f043 0308 	orr.w	r3, r3, #8
 8004580:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004582:	e005      	b.n	8004590 <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <gpio_clk_en+0x7c>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	4a05      	ldr	r2, [pc, #20]	; (80045a0 <gpio_clk_en+0x7c>)
 800458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40020000 	.word	0x40020000
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40020400 	.word	0x40020400
 80045a8:	40020800 	.word	0x40020800
 80045ac:	40020c00 	.word	0x40020c00

080045b0 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d117      	bne.n	80045f4 <gpio_config+0x44>
		gpio_clk_en(port);
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7ff ffad 	bl	8004524 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f846 	bl	8004660 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f85b 	bl	8004694 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f870 	bl	80046c8 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f885 	bl	80046fc <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 80045f2:	e031      	b.n	8004658 <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10d      	bne.n	8004616 <gpio_config+0x66>
		gpio_clk_en(port);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff ff92 	bl	8004524 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f82b 	bl	8004660 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f85a 	bl	80046c8 <gpio_PUPD>
}
 8004614:	e020      	b.n	8004658 <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d112      	bne.n	8004642 <gpio_config+0x92>
		gpio_clk_en(port);
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff ff81 	bl	8004524 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f81a 	bl	8004660 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f849 	bl	80046c8 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f85e 	bl	80046fc <gpio_PHPL_OD>
}
 8004640:	e00a      	b.n	8004658 <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d107      	bne.n	8004658 <gpio_config+0xa8>
		gpio_clk_en(port);
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff ff6b 	bl	8004524 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f804 	bl	8004660 <gpio_moder>
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4907      	ldr	r1, [pc, #28]	; (8004690 <gpio_moder+0x30>)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	431a      	orrs	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	601a      	str	r2, [r3, #0]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20000018 	.word	0x20000018

08004694 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	4907      	ldr	r1, [pc, #28]	; (80046c4 <gpio_speed+0x30>)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	431a      	orrs	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	609a      	str	r2, [r3, #8]
}
 80046b8:	bf00      	nop
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	20000018 	.word	0x20000018

080046c8 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	4907      	ldr	r1, [pc, #28]	; (80046f8 <gpio_PUPD+0x30>)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	431a      	orrs	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	60da      	str	r2, [r3, #12]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	20000018 	.word	0x20000018

080046fc <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	605a      	str	r2, [r3, #4]
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b07      	cmp	r3, #7
 8004736:	d80a      	bhi.n	800474e <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	431a      	orrs	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 800474c:	e00a      	b.n	8004764 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	3b08      	subs	r3, #8
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	fa01 f303 	lsl.w	r3, r1, r3
 800475e:	431a      	orrs	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	71fb      	strb	r3, [r7, #7]
	if (state) {
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <gpio_write+0x24>
		port->BSRR = (1 << pinNumber);
 8004784:	2201      	movs	r2, #1
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	461a      	mov	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 8004792:	e007      	b.n	80047a4 <gpio_write+0x34>
		port->BSRR = (1 << (pinNumber + 16));
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3310      	adds	r3, #16
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	619a      	str	r2, [r3, #24]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <gpio_IT_config>:
	return flag;
}
/**************************************************************************************/

/*******************************INTERRUPT CONFIGURATION*********************************/
void gpio_IT_config(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t edge) {
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	4613      	mov	r3, r2
 80047bc:	71fb      	strb	r3, [r7, #7]
	SYSCFG_CLK_EN;
 80047be:	4baa      	ldr	r3, [pc, #680]	; (8004a68 <gpio_IT_config+0x2b8>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	4aa9      	ldr	r2, [pc, #676]	; (8004a68 <gpio_IT_config+0x2b8>)
 80047c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c8:	6453      	str	r3, [r2, #68]	; 0x44
	if (port == GPIOA) {
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4aa7      	ldr	r2, [pc, #668]	; (8004a6c <gpio_IT_config+0x2bc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d166      	bne.n	80048a0 <gpio_IT_config+0xf0>
		switch (pinNumber) {
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b0f      	cmp	r3, #15
 80047d6:	f200 81ca 	bhi.w	8004b6e <gpio_IT_config+0x3be>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <gpio_IT_config+0x30>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004821 	.word	0x08004821
 80047e4:	08004829 	.word	0x08004829
 80047e8:	08004831 	.word	0x08004831
 80047ec:	08004839 	.word	0x08004839
 80047f0:	08004841 	.word	0x08004841
 80047f4:	08004849 	.word	0x08004849
 80047f8:	08004851 	.word	0x08004851
 80047fc:	08004859 	.word	0x08004859
 8004800:	08004861 	.word	0x08004861
 8004804:	08004869 	.word	0x08004869
 8004808:	08004871 	.word	0x08004871
 800480c:	08004879 	.word	0x08004879
 8004810:	08004881 	.word	0x08004881
 8004814:	08004889 	.word	0x08004889
 8004818:	08004891 	.word	0x08004891
 800481c:	08004899 	.word	0x08004899
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8004820:	4b93      	ldr	r3, [pc, #588]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004822:	2200      	movs	r2, #0
 8004824:	609a      	str	r2, [r3, #8]
			break;
 8004826:	e1a2      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 8004828:	4b91      	ldr	r3, [pc, #580]	; (8004a70 <gpio_IT_config+0x2c0>)
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
			break;
 800482e:	e19e      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 8004830:	4b8f      	ldr	r3, [pc, #572]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
			break;
 8004836:	e19a      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 8004838:	4b8d      	ldr	r3, [pc, #564]	; (8004a70 <gpio_IT_config+0x2c0>)
 800483a:	2200      	movs	r2, #0
 800483c:	609a      	str	r2, [r3, #8]
			break;
 800483e:	e196      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA;
 8004840:	4b8b      	ldr	r3, [pc, #556]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004842:	2200      	movs	r2, #0
 8004844:	60da      	str	r2, [r3, #12]
			break;
 8004846:	e192      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PA;
 8004848:	4b89      	ldr	r3, [pc, #548]	; (8004a70 <gpio_IT_config+0x2c0>)
 800484a:	2200      	movs	r2, #0
 800484c:	60da      	str	r2, [r3, #12]
			break;
 800484e:	e18e      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PA;
 8004850:	4b87      	ldr	r3, [pc, #540]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004852:	2200      	movs	r2, #0
 8004854:	60da      	str	r2, [r3, #12]
			break;
 8004856:	e18a      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PA;
 8004858:	4b85      	ldr	r3, [pc, #532]	; (8004a70 <gpio_IT_config+0x2c0>)
 800485a:	2200      	movs	r2, #0
 800485c:	60da      	str	r2, [r3, #12]
			break;
 800485e:	e186      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PA;
 8004860:	4b83      	ldr	r3, [pc, #524]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004862:	2200      	movs	r2, #0
 8004864:	611a      	str	r2, [r3, #16]
			break;
 8004866:	e182      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PA;
 8004868:	4b81      	ldr	r3, [pc, #516]	; (8004a70 <gpio_IT_config+0x2c0>)
 800486a:	2200      	movs	r2, #0
 800486c:	611a      	str	r2, [r3, #16]
			break;
 800486e:	e17e      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PA;
 8004870:	4b7f      	ldr	r3, [pc, #508]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004872:	2200      	movs	r2, #0
 8004874:	611a      	str	r2, [r3, #16]
			break;
 8004876:	e17a      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PA;
 8004878:	4b7d      	ldr	r3, [pc, #500]	; (8004a70 <gpio_IT_config+0x2c0>)
 800487a:	2200      	movs	r2, #0
 800487c:	611a      	str	r2, [r3, #16]
			break;
 800487e:	e176      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PA;
 8004880:	4b7b      	ldr	r3, [pc, #492]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004882:	2200      	movs	r2, #0
 8004884:	615a      	str	r2, [r3, #20]
			break;
 8004886:	e172      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PA;
 8004888:	4b79      	ldr	r3, [pc, #484]	; (8004a70 <gpio_IT_config+0x2c0>)
 800488a:	2200      	movs	r2, #0
 800488c:	615a      	str	r2, [r3, #20]
			break;
 800488e:	e16e      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PA;
 8004890:	4b77      	ldr	r3, [pc, #476]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004892:	2200      	movs	r2, #0
 8004894:	615a      	str	r2, [r3, #20]
			break;
 8004896:	e16a      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PA;
 8004898:	4b75      	ldr	r3, [pc, #468]	; (8004a70 <gpio_IT_config+0x2c0>)
 800489a:	2200      	movs	r2, #0
 800489c:	615a      	str	r2, [r3, #20]
			break;
 800489e:	e166      	b.n	8004b6e <gpio_IT_config+0x3be>
		}	// end of Port A
	} else if (port == GPIOB) {
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a74      	ldr	r2, [pc, #464]	; (8004a74 <gpio_IT_config+0x2c4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d16f      	bne.n	8004988 <gpio_IT_config+0x1d8>
		switch (pinNumber) {
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	f200 815f 	bhi.w	8004b6e <gpio_IT_config+0x3be>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <gpio_IT_config+0x108>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048f9 	.word	0x080048f9
 80048bc:	08004901 	.word	0x08004901
 80048c0:	08004909 	.word	0x08004909
 80048c4:	08004913 	.word	0x08004913
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	08004925 	.word	0x08004925
 80048d0:	0800492d 	.word	0x0800492d
 80048d4:	08004937 	.word	0x08004937
 80048d8:	08004941 	.word	0x08004941
 80048dc:	08004949 	.word	0x08004949
 80048e0:	08004951 	.word	0x08004951
 80048e4:	0800495b 	.word	0x0800495b
 80048e8:	08004965 	.word	0x08004965
 80048ec:	0800496d 	.word	0x0800496d
 80048f0:	08004975 	.word	0x08004975
 80048f4:	0800497f 	.word	0x0800497f
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 80048f8:	4b5d      	ldr	r3, [pc, #372]	; (8004a70 <gpio_IT_config+0x2c0>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	609a      	str	r2, [r3, #8]
			break;
 80048fe:	e136      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 8004900:	4b5b      	ldr	r3, [pc, #364]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004902:	2210      	movs	r2, #16
 8004904:	609a      	str	r2, [r3, #8]
			break;
 8004906:	e132      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 8004908:	4b59      	ldr	r3, [pc, #356]	; (8004a70 <gpio_IT_config+0x2c0>)
 800490a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800490e:	609a      	str	r2, [r3, #8]
			break;
 8004910:	e12d      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 8004912:	4b57      	ldr	r3, [pc, #348]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004914:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004918:	609a      	str	r2, [r3, #8]
			break;
 800491a:	e128      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PB;
 800491c:	4b54      	ldr	r3, [pc, #336]	; (8004a70 <gpio_IT_config+0x2c0>)
 800491e:	2201      	movs	r2, #1
 8004920:	60da      	str	r2, [r3, #12]
			break;
 8004922:	e124      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PB;
 8004924:	4b52      	ldr	r3, [pc, #328]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004926:	2210      	movs	r2, #16
 8004928:	60da      	str	r2, [r3, #12]
			break;
 800492a:	e120      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PB;
 800492c:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <gpio_IT_config+0x2c0>)
 800492e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004932:	60da      	str	r2, [r3, #12]
			break;
 8004934:	e11b      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PB;
 8004936:	4b4e      	ldr	r3, [pc, #312]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800493c:	60da      	str	r2, [r3, #12]
			break;
 800493e:	e116      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PB;
 8004940:	4b4b      	ldr	r3, [pc, #300]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004942:	2201      	movs	r2, #1
 8004944:	611a      	str	r2, [r3, #16]
			break;
 8004946:	e112      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PB;
 8004948:	4b49      	ldr	r3, [pc, #292]	; (8004a70 <gpio_IT_config+0x2c0>)
 800494a:	2210      	movs	r2, #16
 800494c:	611a      	str	r2, [r3, #16]
			break;
 800494e:	e10e      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PB;
 8004950:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004956:	611a      	str	r2, [r3, #16]
			break;
 8004958:	e109      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PB;
 800495a:	4b45      	ldr	r3, [pc, #276]	; (8004a70 <gpio_IT_config+0x2c0>)
 800495c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004960:	611a      	str	r2, [r3, #16]
			break;
 8004962:	e104      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PB;
 8004964:	4b42      	ldr	r3, [pc, #264]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004966:	2201      	movs	r2, #1
 8004968:	615a      	str	r2, [r3, #20]
			break;
 800496a:	e100      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PB;
 800496c:	4b40      	ldr	r3, [pc, #256]	; (8004a70 <gpio_IT_config+0x2c0>)
 800496e:	2210      	movs	r2, #16
 8004970:	615a      	str	r2, [r3, #20]
			break;
 8004972:	e0fc      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PB;
 8004974:	4b3e      	ldr	r3, [pc, #248]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800497a:	615a      	str	r2, [r3, #20]
			break;
 800497c:	e0f7      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PB;
 800497e:	4b3c      	ldr	r3, [pc, #240]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004984:	615a      	str	r2, [r3, #20]
			break;
 8004986:	e0f2      	b.n	8004b6e <gpio_IT_config+0x3be>
		}	// end of Port B
	} else if (port == GPIOC) {
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a3b      	ldr	r2, [pc, #236]	; (8004a78 <gpio_IT_config+0x2c8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d17a      	bne.n	8004a86 <gpio_IT_config+0x2d6>
		switch (pinNumber) {
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b0f      	cmp	r3, #15
 8004994:	f200 80eb 	bhi.w	8004b6e <gpio_IT_config+0x3be>
 8004998:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <gpio_IT_config+0x1f0>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	080049e1 	.word	0x080049e1
 80049a4:	080049e9 	.word	0x080049e9
 80049a8:	080049f1 	.word	0x080049f1
 80049ac:	080049fb 	.word	0x080049fb
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004a0d 	.word	0x08004a0d
 80049b8:	08004a15 	.word	0x08004a15
 80049bc:	08004a1f 	.word	0x08004a1f
 80049c0:	08004a29 	.word	0x08004a29
 80049c4:	08004a31 	.word	0x08004a31
 80049c8:	08004a39 	.word	0x08004a39
 80049cc:	08004a43 	.word	0x08004a43
 80049d0:	08004a4d 	.word	0x08004a4d
 80049d4:	08004a55 	.word	0x08004a55
 80049d8:	08004a5d 	.word	0x08004a5d
 80049dc:	08004a7d 	.word	0x08004a7d
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 80049e0:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <gpio_IT_config+0x2c0>)
 80049e2:	2202      	movs	r2, #2
 80049e4:	609a      	str	r2, [r3, #8]
			break;
 80049e6:	e0c2      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 80049e8:	4b21      	ldr	r3, [pc, #132]	; (8004a70 <gpio_IT_config+0x2c0>)
 80049ea:	2220      	movs	r2, #32
 80049ec:	609a      	str	r2, [r3, #8]
			break;
 80049ee:	e0be      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <gpio_IT_config+0x2c0>)
 80049f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f6:	609a      	str	r2, [r3, #8]
			break;
 80049f8:	e0b9      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 80049fa:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <gpio_IT_config+0x2c0>)
 80049fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a00:	609a      	str	r2, [r3, #8]
			break;
 8004a02:	e0b4      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PC;
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a06:	2202      	movs	r2, #2
 8004a08:	60da      	str	r2, [r3, #12]
			break;
 8004a0a:	e0b0      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PC;
 8004a0c:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a0e:	2220      	movs	r2, #32
 8004a10:	60da      	str	r2, [r3, #12]
			break;
 8004a12:	e0ac      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PC;
 8004a14:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a1a:	60da      	str	r2, [r3, #12]
			break;
 8004a1c:	e0a7      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PC;
 8004a1e:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a24:	60da      	str	r2, [r3, #12]
			break;
 8004a26:	e0a2      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PC;
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	611a      	str	r2, [r3, #16]
			break;
 8004a2e:	e09e      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PC;
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a32:	2220      	movs	r2, #32
 8004a34:	611a      	str	r2, [r3, #16]
			break;
 8004a36:	e09a      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PC;
 8004a38:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3e:	611a      	str	r2, [r3, #16]
			break;
 8004a40:	e095      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PC;
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a48:	611a      	str	r2, [r3, #16]
			break;
 8004a4a:	e090      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PC;
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a4e:	2202      	movs	r2, #2
 8004a50:	615a      	str	r2, [r3, #20]
			break;
 8004a52:	e08c      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PC;
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a56:	2220      	movs	r2, #32
 8004a58:	615a      	str	r2, [r3, #20]
			break;
 8004a5a:	e088      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PC;
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <gpio_IT_config+0x2c0>)
 8004a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a62:	615a      	str	r2, [r3, #20]
			break;
 8004a64:	e083      	b.n	8004b6e <gpio_IT_config+0x3be>
 8004a66:	bf00      	nop
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40020000 	.word	0x40020000
 8004a70:	40013800 	.word	0x40013800
 8004a74:	40020400 	.word	0x40020400
 8004a78:	40020800 	.word	0x40020800
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PC;
 8004a7c:	4b58      	ldr	r3, [pc, #352]	; (8004be0 <gpio_IT_config+0x430>)
 8004a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a82:	615a      	str	r2, [r3, #20]
			break;
 8004a84:	e073      	b.n	8004b6e <gpio_IT_config+0x3be>
		}	// end of Port C
	} else if (port == GPIOD) {
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a56      	ldr	r2, [pc, #344]	; (8004be4 <gpio_IT_config+0x434>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d16e      	bne.n	8004b6c <gpio_IT_config+0x3bc>
		switch (pinNumber) {
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b0f      	cmp	r3, #15
 8004a92:	d86c      	bhi.n	8004b6e <gpio_IT_config+0x3be>
 8004a94:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <gpio_IT_config+0x2ec>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004ae5 	.word	0x08004ae5
 8004aa4:	08004aed 	.word	0x08004aed
 8004aa8:	08004af7 	.word	0x08004af7
 8004aac:	08004b01 	.word	0x08004b01
 8004ab0:	08004b09 	.word	0x08004b09
 8004ab4:	08004b11 	.word	0x08004b11
 8004ab8:	08004b1b 	.word	0x08004b1b
 8004abc:	08004b25 	.word	0x08004b25
 8004ac0:	08004b2d 	.word	0x08004b2d
 8004ac4:	08004b35 	.word	0x08004b35
 8004ac8:	08004b3f 	.word	0x08004b3f
 8004acc:	08004b49 	.word	0x08004b49
 8004ad0:	08004b51 	.word	0x08004b51
 8004ad4:	08004b59 	.word	0x08004b59
 8004ad8:	08004b63 	.word	0x08004b63
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 8004adc:	4b40      	ldr	r3, [pc, #256]	; (8004be0 <gpio_IT_config+0x430>)
 8004ade:	2203      	movs	r2, #3
 8004ae0:	609a      	str	r2, [r3, #8]
			break;
 8004ae2:	e044      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <gpio_IT_config+0x430>)
 8004ae6:	2230      	movs	r2, #48	; 0x30
 8004ae8:	609a      	str	r2, [r3, #8]
			break;
 8004aea:	e040      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 8004aec:	4b3c      	ldr	r3, [pc, #240]	; (8004be0 <gpio_IT_config+0x430>)
 8004aee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004af2:	609a      	str	r2, [r3, #8]
			break;
 8004af4:	e03b      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 8004af6:	4b3a      	ldr	r3, [pc, #232]	; (8004be0 <gpio_IT_config+0x430>)
 8004af8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004afc:	609a      	str	r2, [r3, #8]
			break;
 8004afe:	e036      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PD;
 8004b00:	4b37      	ldr	r3, [pc, #220]	; (8004be0 <gpio_IT_config+0x430>)
 8004b02:	2203      	movs	r2, #3
 8004b04:	60da      	str	r2, [r3, #12]
			break;
 8004b06:	e032      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PD;
 8004b08:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <gpio_IT_config+0x430>)
 8004b0a:	2230      	movs	r2, #48	; 0x30
 8004b0c:	60da      	str	r2, [r3, #12]
			break;
 8004b0e:	e02e      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PD;
 8004b10:	4b33      	ldr	r3, [pc, #204]	; (8004be0 <gpio_IT_config+0x430>)
 8004b12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004b16:	60da      	str	r2, [r3, #12]
			break;
 8004b18:	e029      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PD;
 8004b1a:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <gpio_IT_config+0x430>)
 8004b1c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004b20:	60da      	str	r2, [r3, #12]
			break;
 8004b22:	e024      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PD;
 8004b24:	4b2e      	ldr	r3, [pc, #184]	; (8004be0 <gpio_IT_config+0x430>)
 8004b26:	2203      	movs	r2, #3
 8004b28:	611a      	str	r2, [r3, #16]
			break;
 8004b2a:	e020      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PD;
 8004b2c:	4b2c      	ldr	r3, [pc, #176]	; (8004be0 <gpio_IT_config+0x430>)
 8004b2e:	2230      	movs	r2, #48	; 0x30
 8004b30:	611a      	str	r2, [r3, #16]
			break;
 8004b32:	e01c      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PD;
 8004b34:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <gpio_IT_config+0x430>)
 8004b36:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004b3a:	611a      	str	r2, [r3, #16]
			break;
 8004b3c:	e017      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PD;
 8004b3e:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <gpio_IT_config+0x430>)
 8004b40:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004b44:	611a      	str	r2, [r3, #16]
			break;
 8004b46:	e012      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PD;
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <gpio_IT_config+0x430>)
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	615a      	str	r2, [r3, #20]
			break;
 8004b4e:	e00e      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PD;
 8004b50:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <gpio_IT_config+0x430>)
 8004b52:	2230      	movs	r2, #48	; 0x30
 8004b54:	615a      	str	r2, [r3, #20]
			break;
 8004b56:	e00a      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PD;
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <gpio_IT_config+0x430>)
 8004b5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004b5e:	615a      	str	r2, [r3, #20]
			break;
 8004b60:	e005      	b.n	8004b6e <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PD;
 8004b62:	4b1f      	ldr	r3, [pc, #124]	; (8004be0 <gpio_IT_config+0x430>)
 8004b64:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004b68:	615a      	str	r2, [r3, #20]
			break;
 8004b6a:	e000      	b.n	8004b6e <gpio_IT_config+0x3be>
		}	// end of Port D
	}
 8004b6c:	bf00      	nop

	if (edge == RISING_EDGE) {
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <gpio_IT_config+0x3da>
		EXTI->RTSR |= 1 << pinNumber;
 8004b74:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <gpio_IT_config+0x438>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b80:	4611      	mov	r1, r2
 8004b82:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <gpio_IT_config+0x438>)
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1 << pinNumber;
	} else if (edge == RISING_FALLING_EDGE) {
		EXTI->RTSR |= 1 << pinNumber;
		EXTI->FTSR |= 1 << pinNumber;
	}
}
 8004b88:	e024      	b.n	8004bd4 <gpio_IT_config+0x424>
	} else if (edge == FALLING_EDGE) {
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d10a      	bne.n	8004ba6 <gpio_IT_config+0x3f6>
		EXTI->FTSR |= 1 << pinNumber;
 8004b90:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <gpio_IT_config+0x438>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2101      	movs	r1, #1
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	fa01 f202 	lsl.w	r2, r1, r2
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4a12      	ldr	r2, [pc, #72]	; (8004be8 <gpio_IT_config+0x438>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	60d3      	str	r3, [r2, #12]
}
 8004ba4:	e016      	b.n	8004bd4 <gpio_IT_config+0x424>
	} else if (edge == RISING_FALLING_EDGE) {
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d113      	bne.n	8004bd4 <gpio_IT_config+0x424>
		EXTI->RTSR |= 1 << pinNumber;
 8004bac:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <gpio_IT_config+0x438>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4a0b      	ldr	r2, [pc, #44]	; (8004be8 <gpio_IT_config+0x438>)
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1 << pinNumber;
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <gpio_IT_config+0x438>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bcc:	4611      	mov	r1, r2
 8004bce:	4a06      	ldr	r2, [pc, #24]	; (8004be8 <gpio_IT_config+0x438>)
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	60d3      	str	r3, [r2, #12]
}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40013800 	.word	0x40013800
 8004be4:	40020c00 	.word	0x40020c00
 8004be8:	40013c00 	.word	0x40013c00

08004bec <gpio_IT_EN>:

void gpio_IT_EN(uint8_t pinNumber, IRQn_Type irqNumber) {//Interrupt Enable Function
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	460a      	mov	r2, r1
 8004bf6:	71fb      	strb	r3, [r7, #7]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	71bb      	strb	r3, [r7, #6]
	EXTI->IMR |= 1 << pinNumber;	//enable interrupt in EXTI
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <gpio_IT_EN+0x38>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	79fa      	ldrb	r2, [r7, #7]
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4a06      	ldr	r2, [pc, #24]	; (8004c24 <gpio_IT_EN+0x38>)
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irqNumber);		//enable interrupt in NVIC
 8004c10:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fc43 	bl	80044a0 <__NVIC_EnableIRQ>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40013c00 	.word	0x40013c00

08004c28 <gpio_IT_CHK>:

void gpio_IT_SW(uint8_t pinNumber) {			//Interrupt Software generate
	EXTI->SWIER |= 1 << pinNumber;				//TODO: Not Done for now
}

uint8_t gpio_IT_CHK(uint8_t pinNumber) {			//Interrupt check function
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]
	if ((EXTI->PR) & (1 << pinNumber)) {				//Check pending register
 8004c32:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <gpio_IT_CHK+0x30>)
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	79fa      	ldrb	r2, [r7, #7]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <gpio_IT_CHK+0x20>
		return 1;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <gpio_IT_CHK+0x22>
	} else {
		return 0;
 8004c48:	2300      	movs	r3, #0
	}
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40013c00 	.word	0x40013c00

08004c5c <gpio_IT_CLR>:

void gpio_IT_CLR(uint8_t pinNumber) {				//Interrupt clear function
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
	EXTI->PR = 1 << pinNumber;		//clear pending register
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <gpio_IT_CLR+0x20>)
 8004c6e:	615a      	str	r2, [r3, #20]
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	40013c00 	.word	0x40013c00

08004c80 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f818 	bl	8004cc4 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f842 	bl	8004d28 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8004ca4:	69f9      	ldr	r1, [r7, #28]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f8d8 	bl	8004e5c <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cb4:	f043 030c 	orr.w	r3, r3, #12
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	60d3      	str	r3, [r2, #12]

}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <USART_CLK_EN+0x54>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d106      	bne.n	8004ce2 <USART_CLK_EN+0x1e>
		USART1_CLK_EN;
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <USART_CLK_EN+0x58>)
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd8:	4a10      	ldr	r2, [pc, #64]	; (8004d1c <USART_CLK_EN+0x58>)
 8004cda:	f043 0310 	orr.w	r3, r3, #16
 8004cde:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (usart == USART2) {
		USART2_CLK_EN;
	} else if (usart == USART6) {
		USART6_CLK_EN;
	}
}
 8004ce0:	e014      	b.n	8004d0c <USART_CLK_EN+0x48>
	} else if (usart == USART2) {
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a0e      	ldr	r2, [pc, #56]	; (8004d20 <USART_CLK_EN+0x5c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d106      	bne.n	8004cf8 <USART_CLK_EN+0x34>
		USART2_CLK_EN;
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <USART_CLK_EN+0x58>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <USART_CLK_EN+0x58>)
 8004cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004cf6:	e009      	b.n	8004d0c <USART_CLK_EN+0x48>
	} else if (usart == USART6) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a0a      	ldr	r2, [pc, #40]	; (8004d24 <USART_CLK_EN+0x60>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d105      	bne.n	8004d0c <USART_CLK_EN+0x48>
		USART6_CLK_EN;
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <USART_CLK_EN+0x58>)
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <USART_CLK_EN+0x58>)
 8004d06:	f043 0320 	orr.w	r3, r3, #32
 8004d0a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	40004400 	.word	0x40004400
 8004d24:	40011400 	.word	0x40011400

08004d28 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004d36:	2300      	movs	r3, #0
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	2302      	movs	r3, #2
 8004d40:	2202      	movs	r2, #2
 8004d42:	6839      	ldr	r1, [r7, #0]
 8004d44:	68b8      	ldr	r0, [r7, #8]
 8004d46:	f7ff fc33 	bl	80045b0 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	2302      	movs	r3, #2
 8004d54:	2202      	movs	r2, #2
 8004d56:	69b9      	ldr	r1, [r7, #24]
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff fc29 	bl	80045b0 <gpio_config>

	if (usart == USART1) {
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a39      	ldr	r2, [pc, #228]	; (8004e48 <USART_PIN_CONFIG+0x120>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d118      	bne.n	8004d98 <USART_PIN_CONFIG+0x70>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4a38      	ldr	r2, [pc, #224]	; (8004e4c <USART_PIN_CONFIG+0x124>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d107      	bne.n	8004d7e <USART_PIN_CONFIG+0x56>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b09      	cmp	r3, #9
 8004d72:	d104      	bne.n	8004d7e <USART_PIN_CONFIG+0x56>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 8004d74:	2207      	movs	r2, #7
 8004d76:	6839      	ldr	r1, [r7, #0]
 8004d78:	68b8      	ldr	r0, [r7, #8]
 8004d7a:	f7ff fcd4 	bl	8004726 <gpio_altfn>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
//			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a32      	ldr	r2, [pc, #200]	; (8004e4c <USART_PIN_CONFIG+0x124>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d15b      	bne.n	8004e3e <USART_PIN_CONFIG+0x116>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b0a      	cmp	r3, #10
 8004d8a:	d158      	bne.n	8004e3e <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 8004d8c:	2207      	movs	r2, #7
 8004d8e:	69b9      	ldr	r1, [r7, #24]
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff fcc8 	bl	8004726 <gpio_altfn>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PA12);
		} else if (rx_port == PORTC && rx_pinNumber == 7) {
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PC7);
		}
	}
}
 8004d96:	e052      	b.n	8004e3e <USART_PIN_CONFIG+0x116>
	} else if (usart == USART2) {
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a2d      	ldr	r2, [pc, #180]	; (8004e50 <USART_PIN_CONFIG+0x128>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d118      	bne.n	8004dd2 <USART_PIN_CONFIG+0xaa>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4a2a      	ldr	r2, [pc, #168]	; (8004e4c <USART_PIN_CONFIG+0x124>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d107      	bne.n	8004db8 <USART_PIN_CONFIG+0x90>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d104      	bne.n	8004db8 <USART_PIN_CONFIG+0x90>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 8004dae:	2207      	movs	r2, #7
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	68b8      	ldr	r0, [r7, #8]
 8004db4:	f7ff fcb7 	bl	8004726 <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a24      	ldr	r2, [pc, #144]	; (8004e4c <USART_PIN_CONFIG+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d13e      	bne.n	8004e3e <USART_PIN_CONFIG+0x116>
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d13b      	bne.n	8004e3e <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	69b9      	ldr	r1, [r7, #24]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fcab 	bl	8004726 <gpio_altfn>
}
 8004dd0:	e035      	b.n	8004e3e <USART_PIN_CONFIG+0x116>
	} else if (usart == USART6) {
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <USART_PIN_CONFIG+0x12c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d131      	bne.n	8004e3e <USART_PIN_CONFIG+0x116>
		if (tx_port == PORTA && tx_pinNumber == 11) {
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <USART_PIN_CONFIG+0x124>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d108      	bne.n	8004df4 <USART_PIN_CONFIG+0xcc>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b0b      	cmp	r3, #11
 8004de6:	d105      	bne.n	8004df4 <USART_PIN_CONFIG+0xcc>
			gpio_altfn(tx_port, tx_pinNumber, USART6_TX_PA11);
 8004de8:	2208      	movs	r2, #8
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	68b8      	ldr	r0, [r7, #8]
 8004dee:	f7ff fc9a 	bl	8004726 <gpio_altfn>
 8004df2:	e00b      	b.n	8004e0c <USART_PIN_CONFIG+0xe4>
		} else if (tx_port == PORTC && tx_pinNumber == 6) {
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <USART_PIN_CONFIG+0x130>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d107      	bne.n	8004e0c <USART_PIN_CONFIG+0xe4>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d104      	bne.n	8004e0c <USART_PIN_CONFIG+0xe4>
			gpio_altfn(tx_port, tx_pinNumber, USART6_TX_PC6);
 8004e02:	2208      	movs	r2, #8
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	68b8      	ldr	r0, [r7, #8]
 8004e08:	f7ff fc8d 	bl	8004726 <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 12) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0f      	ldr	r2, [pc, #60]	; (8004e4c <USART_PIN_CONFIG+0x124>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d108      	bne.n	8004e26 <USART_PIN_CONFIG+0xfe>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b0c      	cmp	r3, #12
 8004e18:	d105      	bne.n	8004e26 <USART_PIN_CONFIG+0xfe>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PA12);
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	69b9      	ldr	r1, [r7, #24]
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fc81 	bl	8004726 <gpio_altfn>
}
 8004e24:	e00b      	b.n	8004e3e <USART_PIN_CONFIG+0x116>
		} else if (rx_port == PORTC && rx_pinNumber == 7) {
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a0b      	ldr	r2, [pc, #44]	; (8004e58 <USART_PIN_CONFIG+0x130>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d107      	bne.n	8004e3e <USART_PIN_CONFIG+0x116>
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b07      	cmp	r3, #7
 8004e32:	d104      	bne.n	8004e3e <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PC7);
 8004e34:	2208      	movs	r2, #8
 8004e36:	69b9      	ldr	r1, [r7, #24]
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fc74 	bl	8004726 <gpio_altfn>
}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40011000 	.word	0x40011000
 8004e4c:	40020000 	.word	0x40020000
 8004e50:	40004400 	.word	0x40004400
 8004e54:	40011400 	.word	0x40011400
 8004e58:	40020800 	.word	0x40020800

08004e5c <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 8004e66:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <USART_BDR_SEL+0x48>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	60fb      	str	r3, [r7, #12]
	if(usart == USART2){
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a0c      	ldr	r2, [pc, #48]	; (8004ea8 <USART_BDR_SEL+0x4c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d107      	bne.n	8004e8a <USART_BDR_SEL+0x2e>
		usart->BRR |= baud / 2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	609a      	str	r2, [r3, #8]
	}
	else{
		usart->BRR |= baud;
	}

}
 8004e88:	e005      	b.n	8004e96 <USART_BDR_SEL+0x3a>
		usart->BRR |= baud;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	609a      	str	r2, [r3, #8]
}
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	2000000c 	.word	0x2000000c
 8004ea8:	40004400 	.word	0x40004400

08004eac <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 8004eba:	887b      	ldrh	r3, [r7, #2]
 8004ebc:	82bb      	strh	r3, [r7, #20]
	for (uint16_t i = 0; i < len; i++) {
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	82fb      	strh	r3, [r7, #22]
 8004ec2:	e017      	b.n	8004ef4 <USART_WRITE+0x48>
		if (len == 1) {
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d103      	bne.n	8004ed2 <USART_WRITE+0x26>
			usart->DR = ch;
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	605a      	str	r2, [r3, #4]
 8004ed0:	e006      	b.n	8004ee0 <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 8004ed2:	8afb      	ldrh	r3, [r7, #22]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 8004ee0:	bf00      	nop
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f9      	beq.n	8004ee2 <USART_WRITE+0x36>
	for (uint16_t i = 0; i < len; i++) {
 8004eee:	8afb      	ldrh	r3, [r7, #22]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	82fb      	strh	r3, [r7, #22]
 8004ef4:	8afb      	ldrh	r3, [r7, #22]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d8e3      	bhi.n	8004ec4 <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <print>:
//}


//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8004f0c:	b40f      	push	{r0, r1, r2, r3}
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f22:	480a      	ldr	r0, [pc, #40]	; (8004f4c <print+0x40>)
 8004f24:	f004 fe6e 	bl	8009c04 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8004f28:	4808      	ldr	r0, [pc, #32]	; (8004f4c <print+0x40>)
 8004f2a:	f7fb f959 	bl	80001e0 <strlen>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 8004f32:	88fa      	ldrh	r2, [r7, #6]
 8004f34:	2364      	movs	r3, #100	; 0x64
 8004f36:	4905      	ldr	r1, [pc, #20]	; (8004f4c <print+0x40>)
 8004f38:	4805      	ldr	r0, [pc, #20]	; (8004f50 <print+0x44>)
 8004f3a:	f7ff ffb7 	bl	8004eac <USART_WRITE>

}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f48:	b004      	add	sp, #16
 8004f4a:	4770      	bx	lr
 8004f4c:	2000060c 	.word	0x2000060c
 8004f50:	40004400 	.word	0x40004400

08004f54 <uart_print_config>:
	USART_WRITE(UART_TYPE, buffer, len, 100);
	USART_WRITE(UART_TYPE, '\n', 1, 100);

}

void uart_print_config(uint32_t baudRate) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	2303      	movs	r3, #3
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	2302      	movs	r3, #2
 8004f66:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <uart_print_config+0x24>)
 8004f68:	4903      	ldr	r1, [pc, #12]	; (8004f78 <uart_print_config+0x24>)
 8004f6a:	4804      	ldr	r0, [pc, #16]	; (8004f7c <uart_print_config+0x28>)
 8004f6c:	f7ff fe88 	bl	8004c80 <USART_INIT>
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40020000 	.word	0x40020000
 8004f7c:	40004400 	.word	0x40004400

08004f80 <HMS_bgdisplay>:
int graph_x = graph_x0;
int graph_y = 0;
int graph_y_prevVal = 0;
int graph_refresh_x = graph_x0;

void HMS_bgdisplay(void) {
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b08b      	sub	sp, #44	; 0x2c
 8004f84:	af08      	add	r7, sp, #32

	//===================== | Border |===============================//
	for (uint16_t i = 5; i > 0; i--) {
 8004f86:	2305      	movs	r3, #5
 8004f88:	80fb      	strh	r3, [r7, #6]
 8004f8a:	e019      	b.n	8004fc0 <HMS_bgdisplay+0x40>
		LCD_DrawRect(i, i, TFTWIDTH - 2 * i, TFTHEIGHT - 2 * i, WHITE);
 8004f8c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f90:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	b21a      	sxth	r2, r3
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	b21b      	sxth	r3, r3
 8004fb0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004fb4:	9400      	str	r4, [sp, #0]
 8004fb6:	f001 f892 	bl	80060de <LCD_DrawRect>
	for (uint16_t i = 5; i > 0; i--) {
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	80fb      	strh	r3, [r7, #6]
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e2      	bne.n	8004f8c <HMS_bgdisplay+0xc>
	}

	LCD_DrawHBorder(0, TFTHEIGHT / 3, TFTWIDTH, WHITE, 5);
 8004fc6:	2305      	movs	r3, #5
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fce:	22f0      	movs	r2, #240	; 0xf0
 8004fd0:	216a      	movs	r1, #106	; 0x6a
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f000 fd8e 	bl	8005af4 <LCD_DrawHBorder>
	LCD_DrawHBorder(0, 2 * (TFTHEIGHT / 3), TFTWIDTH, WHITE, 5);
 8004fd8:	2305      	movs	r3, #5
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fe0:	22f0      	movs	r2, #240	; 0xf0
 8004fe2:	21d4      	movs	r1, #212	; 0xd4
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f000 fd85 	bl	8005af4 <LCD_DrawHBorder>
	//===============================================================//

	//===================== | Box 1 |===============================//

	LCD_DrawButton1(" ", 20, 20, TFTWIDTH - 40, (TFTHEIGHT / 3) - 40, 10, CYAN,
 8004fea:	2302      	movs	r3, #2
 8004fec:	9307      	str	r3, [sp, #28]
 8004fee:	2302      	movs	r3, #2
 8004ff0:	9306      	str	r3, [sp, #24]
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	9305      	str	r3, [sp, #20]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ffe:	9303      	str	r3, [sp, #12]
 8005000:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005004:	9302      	str	r3, [sp, #8]
 8005006:	230a      	movs	r3, #10
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	2342      	movs	r3, #66	; 0x42
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	23c8      	movs	r3, #200	; 0xc8
 8005010:	2214      	movs	r2, #20
 8005012:	2114      	movs	r1, #20
 8005014:	484b      	ldr	r0, [pc, #300]	; (8005144 <HMS_bgdisplay+0x1c4>)
 8005016:	f000 fd09 	bl	8005a2c <LCD_DrawButton1>
	WHITE, 0, 2, 2, 2);

	LCD_SetTextSize(2);
 800501a:	2002      	movs	r0, #2
 800501c:	f001 ff1e 	bl	8006e5c <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, CYAN);
 8005020:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005024:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005028:	f001 ff2e 	bl	8006e88 <LCD_SetTextColor>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 25);
 800502c:	2119      	movs	r1, #25
 800502e:	2058      	movs	r0, #88	; 0x58
 8005030:	f001 fefc 	bl	8006e2c <LCD_SetCursor>
	LCD_Printf("Health");
 8005034:	4844      	ldr	r0, [pc, #272]	; (8005148 <HMS_bgdisplay+0x1c8>)
 8005036:	f001 fe11 	bl	8006c5c <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) - 10, 45);
 800503a:	212d      	movs	r1, #45	; 0x2d
 800503c:	203f      	movs	r0, #63	; 0x3f
 800503e:	f001 fef5 	bl	8006e2c <LCD_SetCursor>
	LCD_Printf("Monitoring");
 8005042:	4842      	ldr	r0, [pc, #264]	; (800514c <HMS_bgdisplay+0x1cc>)
 8005044:	f001 fe0a 	bl	8006c5c <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 65);
 8005048:	2141      	movs	r1, #65	; 0x41
 800504a:	2058      	movs	r0, #88	; 0x58
 800504c:	f001 feee 	bl	8006e2c <LCD_SetCursor>
	LCD_Printf("System");
 8005050:	483f      	ldr	r0, [pc, #252]	; (8005150 <HMS_bgdisplay+0x1d0>)
 8005052:	f001 fe03 	bl	8006c5c <LCD_Printf>

	//===============================================================//

	//===================== | Box 2 |===============================//

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 15, TFTWIDTH - 35, 25, 5, RED);
 8005056:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	2305      	movs	r3, #5
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2319      	movs	r3, #25
 8005062:	22cd      	movs	r2, #205	; 0xcd
 8005064:	2179      	movs	r1, #121	; 0x79
 8005066:	200f      	movs	r0, #15
 8005068:	f001 fc54 	bl	8006914 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, RED);
 800506c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8005070:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005074:	f001 ff08 	bl	8006e88 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 20);
 8005078:	217e      	movs	r1, #126	; 0x7e
 800507a:	2014      	movs	r0, #20
 800507c:	f001 fed6 	bl	8006e2c <LCD_SetCursor>
	LCD_SetTextSize(2);
 8005080:	2002      	movs	r0, #2
 8005082:	f001 feeb 	bl	8006e5c <LCD_SetTextSize>
	LCD_Printf("H.Rate: ");
 8005086:	4833      	ldr	r0, [pc, #204]	; (8005154 <HMS_bgdisplay+0x1d4>)
 8005088:	f001 fde8 	bl	8006c5c <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 45, TFTWIDTH - 35, 25, 5, GREEN);
 800508c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	2305      	movs	r3, #5
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	2319      	movs	r3, #25
 8005098:	22cd      	movs	r2, #205	; 0xcd
 800509a:	2197      	movs	r1, #151	; 0x97
 800509c:	200f      	movs	r0, #15
 800509e:	f001 fc39 	bl	8006914 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, GREEN);
 80050a2:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80050a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80050aa:	f001 feed 	bl	8006e88 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 50);
 80050ae:	219c      	movs	r1, #156	; 0x9c
 80050b0:	2014      	movs	r0, #20
 80050b2:	f001 febb 	bl	8006e2c <LCD_SetCursor>
	LCD_SetTextSize(2);
 80050b6:	2002      	movs	r0, #2
 80050b8:	f001 fed0 	bl	8006e5c <LCD_SetTextSize>
	LCD_Printf("SpO2: ");
 80050bc:	4826      	ldr	r0, [pc, #152]	; (8005158 <HMS_bgdisplay+0x1d8>)
 80050be:	f001 fdcd 	bl	8006c5c <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 75, TFTWIDTH - 35, 25, 5, BLUE);
 80050c2:	231f      	movs	r3, #31
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	2305      	movs	r3, #5
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	2319      	movs	r3, #25
 80050cc:	22cd      	movs	r2, #205	; 0xcd
 80050ce:	21b5      	movs	r1, #181	; 0xb5
 80050d0:	200f      	movs	r0, #15
 80050d2:	f001 fc1f 	bl	8006914 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, BLUE);
 80050d6:	211f      	movs	r1, #31
 80050d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80050dc:	f001 fed4 	bl	8006e88 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 80);
 80050e0:	21ba      	movs	r1, #186	; 0xba
 80050e2:	2014      	movs	r0, #20
 80050e4:	f001 fea2 	bl	8006e2c <LCD_SetCursor>
	LCD_SetTextSize(2);
 80050e8:	2002      	movs	r0, #2
 80050ea:	f001 feb7 	bl	8006e5c <LCD_SetTextSize>
	LCD_Printf("Temp: ");
 80050ee:	481b      	ldr	r0, [pc, #108]	; (800515c <HMS_bgdisplay+0x1dc>)
 80050f0:	f001 fdb4 	bl	8006c5c <LCD_Printf>

	//===============================================================//

	//========================= | Box 3 |============================//

	LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 35, 70, WHITE);
 80050f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	2346      	movs	r3, #70	; 0x46
 80050fc:	22cd      	movs	r2, #205	; 0xcd
 80050fe:	21e8      	movs	r1, #232	; 0xe8
 8005100:	2014      	movs	r0, #20
 8005102:	f001 fb5f 	bl	80067c4 <LCD_FillRect>

	//===============================================================//

	for(int i = 4; i > 0; i--)
 8005106:	2304      	movs	r3, #4
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	e004      	b.n	8005116 <HMS_bgdisplay+0x196>
		LCD_ECGAnimation();
 800510c:	f000 fab6 	bl	800567c <LCD_ECGAnimation>
	for(int i = 4; i > 0; i--)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	3b01      	subs	r3, #1
 8005114:	603b      	str	r3, [r7, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	dcf7      	bgt.n	800510c <HMS_bgdisplay+0x18c>

	LCD_SetTextColor(BLACK, WHITE);
 800511c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005120:	2000      	movs	r0, #0
 8005122:	f001 feb1 	bl	8006e88 <LCD_SetTextColor>
	LCD_SetCursor(180, 240);
 8005126:	21f0      	movs	r1, #240	; 0xf0
 8005128:	20b4      	movs	r0, #180	; 0xb4
 800512a:	f001 fe7f 	bl	8006e2c <LCD_SetCursor>
	LCD_SetTextSize(2);
 800512e:	2002      	movs	r0, #2
 8005130:	f001 fe94 	bl	8006e5c <LCD_SetTextSize>
	LCD_Printf("ECG");
 8005134:	480a      	ldr	r0, [pc, #40]	; (8005160 <HMS_bgdisplay+0x1e0>)
 8005136:	f001 fd91 	bl	8006c5c <LCD_Printf>

}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}
 8005142:	bf00      	nop
 8005144:	0800bd98 	.word	0x0800bd98
 8005148:	0800bd9c 	.word	0x0800bd9c
 800514c:	0800bda4 	.word	0x0800bda4
 8005150:	0800bdb0 	.word	0x0800bdb0
 8005154:	0800bdb8 	.word	0x0800bdb8
 8005158:	0800bdc4 	.word	0x0800bdc4
 800515c:	0800bdcc 	.word	0x0800bdcc
 8005160:	0800bdd4 	.word	0x0800bdd4

08005164 <ecgPeak>:

void ecgPeak() {
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b083      	sub	sp, #12
 8005168:	af02      	add	r7, sp, #8
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800516a:	4b9b      	ldr	r3, [pc, #620]	; (80053d8 <ecgPeak+0x274>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	b218      	sxth	r0, r3
 8005170:	23f2      	movs	r3, #242	; 0xf2
 8005172:	b29b      	uxth	r3, r3
 8005174:	3319      	adds	r3, #25
 8005176:	b29b      	uxth	r3, r3
 8005178:	b219      	sxth	r1, r3
 800517a:	4b97      	ldr	r3, [pc, #604]	; (80053d8 <ecgPeak+0x274>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	3302      	adds	r3, #2
 8005182:	b29b      	uxth	r3, r3
 8005184:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8005186:	23f2      	movs	r3, #242	; 0xf2
 8005188:	b29b      	uxth	r3, r3
 800518a:	3319      	adds	r3, #25
 800518c:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800518e:	b21b      	sxth	r3, r3
 8005190:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8005194:	9400      	str	r4, [sp, #0]
 8005196:	f000 fe65 	bl	8005e64 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800519a:	4b8f      	ldr	r3, [pc, #572]	; (80053d8 <ecgPeak+0x274>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	b218      	sxth	r0, r3
 80051a0:	23f2      	movs	r3, #242	; 0xf2
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	331a      	adds	r3, #26
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	b219      	sxth	r1, r3
 80051aa:	4b8b      	ldr	r3, [pc, #556]	; (80053d8 <ecgPeak+0x274>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3302      	adds	r3, #2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 80051b6:	23f2      	movs	r3, #242	; 0xf2
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	331a      	adds	r3, #26
 80051bc:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80051be:	b21b      	sxth	r3, r3
 80051c0:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80051c4:	9400      	str	r4, [sp, #0]
 80051c6:	f000 fe4d 	bl	8005e64 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 80051ca:	4b83      	ldr	r3, [pc, #524]	; (80053d8 <ecgPeak+0x274>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3302      	adds	r3, #2
 80051d0:	4a81      	ldr	r2, [pc, #516]	; (80053d8 <ecgPeak+0x274>)
 80051d2:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80051d4:	4b80      	ldr	r3, [pc, #512]	; (80053d8 <ecgPeak+0x274>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	b218      	sxth	r0, r3
 80051da:	23f2      	movs	r3, #242	; 0xf2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3319      	adds	r3, #25
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	b219      	sxth	r1, r3
 80051e4:	4b7c      	ldr	r3, [pc, #496]	; (80053d8 <ecgPeak+0x274>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3302      	adds	r3, #2
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 80051f0:	23f2      	movs	r3, #242	; 0xf2
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3319      	adds	r3, #25
 80051f6:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80051f8:	b21b      	sxth	r3, r3
 80051fa:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80051fe:	9400      	str	r4, [sp, #0]
 8005200:	f000 fe30 	bl	8005e64 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8005204:	4b74      	ldr	r3, [pc, #464]	; (80053d8 <ecgPeak+0x274>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	b218      	sxth	r0, r3
 800520a:	23f2      	movs	r3, #242	; 0xf2
 800520c:	b29b      	uxth	r3, r3
 800520e:	331a      	adds	r3, #26
 8005210:	b29b      	uxth	r3, r3
 8005212:	b219      	sxth	r1, r3
 8005214:	4b70      	ldr	r3, [pc, #448]	; (80053d8 <ecgPeak+0x274>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	b29b      	uxth	r3, r3
 800521a:	3302      	adds	r3, #2
 800521c:	b29b      	uxth	r3, r3
 800521e:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8005220:	23f2      	movs	r3, #242	; 0xf2
 8005222:	b29b      	uxth	r3, r3
 8005224:	331a      	adds	r3, #26
 8005226:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8005228:	b21b      	sxth	r3, r3
 800522a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800522e:	9400      	str	r4, [sp, #0]
 8005230:	f000 fe18 	bl	8005e64 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8005234:	4b68      	ldr	r3, [pc, #416]	; (80053d8 <ecgPeak+0x274>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3302      	adds	r3, #2
 800523a:	4a67      	ldr	r2, [pc, #412]	; (80053d8 <ecgPeak+0x274>)
 800523c:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800523e:	4b66      	ldr	r3, [pc, #408]	; (80053d8 <ecgPeak+0x274>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	b218      	sxth	r0, r3
 8005244:	23f2      	movs	r3, #242	; 0xf2
 8005246:	b29b      	uxth	r3, r3
 8005248:	3319      	adds	r3, #25
 800524a:	b29b      	uxth	r3, r3
 800524c:	b219      	sxth	r1, r3
 800524e:	4b62      	ldr	r3, [pc, #392]	; (80053d8 <ecgPeak+0x274>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	3302      	adds	r3, #2
 8005256:	b29b      	uxth	r3, r3
 8005258:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 800525a:	23f2      	movs	r3, #242	; 0xf2
 800525c:	b29b      	uxth	r3, r3
 800525e:	3319      	adds	r3, #25
 8005260:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8005262:	b21b      	sxth	r3, r3
 8005264:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8005268:	9400      	str	r4, [sp, #0]
 800526a:	f000 fdfb 	bl	8005e64 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800526e:	4b5a      	ldr	r3, [pc, #360]	; (80053d8 <ecgPeak+0x274>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	b218      	sxth	r0, r3
 8005274:	23f2      	movs	r3, #242	; 0xf2
 8005276:	b29b      	uxth	r3, r3
 8005278:	331a      	adds	r3, #26
 800527a:	b29b      	uxth	r3, r3
 800527c:	b219      	sxth	r1, r3
 800527e:	4b56      	ldr	r3, [pc, #344]	; (80053d8 <ecgPeak+0x274>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	3302      	adds	r3, #2
 8005286:	b29b      	uxth	r3, r3
 8005288:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 800528a:	23f2      	movs	r3, #242	; 0xf2
 800528c:	b29b      	uxth	r3, r3
 800528e:	331a      	adds	r3, #26
 8005290:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8005292:	b21b      	sxth	r3, r3
 8005294:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8005298:	9400      	str	r4, [sp, #0]
 800529a:	f000 fde3 	bl	8005e64 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 800529e:	4b4e      	ldr	r3, [pc, #312]	; (80053d8 <ecgPeak+0x274>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3302      	adds	r3, #2
 80052a4:	4a4c      	ldr	r2, [pc, #304]	; (80053d8 <ecgPeak+0x274>)
 80052a6:	6013      	str	r3, [r2, #0]

	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80052a8:	4b4b      	ldr	r3, [pc, #300]	; (80053d8 <ecgPeak+0x274>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	b218      	sxth	r0, r3
 80052ae:	23f2      	movs	r3, #242	; 0xf2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3319      	adds	r3, #25
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	b219      	sxth	r1, r3
 80052b8:	4b47      	ldr	r3, [pc, #284]	; (80053d8 <ecgPeak+0x274>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3302      	adds	r3, #2
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	b21a      	sxth	r2, r3
			graph_y0 + 40, RED);
 80052c4:	23f2      	movs	r3, #242	; 0xf2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3328      	adds	r3, #40	; 0x28
 80052ca:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80052cc:	b21b      	sxth	r3, r3
 80052ce:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80052d2:	9400      	str	r4, [sp, #0]
 80052d4:	f000 fdc6 	bl	8005e64 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80052d8:	4b3f      	ldr	r3, [pc, #252]	; (80053d8 <ecgPeak+0x274>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	b218      	sxth	r0, r3
 80052de:	23f2      	movs	r3, #242	; 0xf2
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	331a      	adds	r3, #26
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	b219      	sxth	r1, r3
 80052e8:	4b3b      	ldr	r3, [pc, #236]	; (80053d8 <ecgPeak+0x274>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3302      	adds	r3, #2
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	b21a      	sxth	r2, r3
			graph_y0 + 41, RED);
 80052f4:	23f2      	movs	r3, #242	; 0xf2
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3329      	adds	r3, #41	; 0x29
 80052fa:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8005302:	9400      	str	r4, [sp, #0]
 8005304:	f000 fdae 	bl	8005e64 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8005308:	4b33      	ldr	r3, [pc, #204]	; (80053d8 <ecgPeak+0x274>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3302      	adds	r3, #2
 800530e:	4a32      	ldr	r2, [pc, #200]	; (80053d8 <ecgPeak+0x274>)
 8005310:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 40, graph_x + graphRefreshRate_peak,
 8005312:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <ecgPeak+0x274>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	b218      	sxth	r0, r3
 8005318:	23f2      	movs	r3, #242	; 0xf2
 800531a:	b29b      	uxth	r3, r3
 800531c:	3328      	adds	r3, #40	; 0x28
 800531e:	b29b      	uxth	r3, r3
 8005320:	b219      	sxth	r1, r3
 8005322:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <ecgPeak+0x274>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	3302      	adds	r3, #2
 800532a:	b29b      	uxth	r3, r3
 800532c:	b21a      	sxth	r2, r3
 800532e:	23f2      	movs	r3, #242	; 0xf2
 8005330:	b21b      	sxth	r3, r3
 8005332:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8005336:	9400      	str	r4, [sp, #0]
 8005338:	f000 fd94 	bl	8005e64 <LCD_DrawLine>
			graph_y0, RED);
	LCD_DrawLine(graph_x, graph_y0 + 41, graph_x + graphRefreshRate_peak,
 800533c:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <ecgPeak+0x274>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	b218      	sxth	r0, r3
 8005342:	23f2      	movs	r3, #242	; 0xf2
 8005344:	b29b      	uxth	r3, r3
 8005346:	3329      	adds	r3, #41	; 0x29
 8005348:	b29b      	uxth	r3, r3
 800534a:	b219      	sxth	r1, r3
 800534c:	4b22      	ldr	r3, [pc, #136]	; (80053d8 <ecgPeak+0x274>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	3302      	adds	r3, #2
 8005354:	b29b      	uxth	r3, r3
 8005356:	b21a      	sxth	r2, r3
			graph_y0 + 1, RED);
 8005358:	23f2      	movs	r3, #242	; 0xf2
 800535a:	b29b      	uxth	r3, r3
 800535c:	3301      	adds	r3, #1
 800535e:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 41, graph_x + graphRefreshRate_peak,
 8005360:	b21b      	sxth	r3, r3
 8005362:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8005366:	9400      	str	r4, [sp, #0]
 8005368:	f000 fd7c 	bl	8005e64 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 800536c:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <ecgPeak+0x274>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3302      	adds	r3, #2
 8005372:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <ecgPeak+0x274>)
 8005374:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0, graph_x + graphRefreshRate_peak,
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <ecgPeak+0x274>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	b218      	sxth	r0, r3
 800537c:	23f2      	movs	r3, #242	; 0xf2
 800537e:	b219      	sxth	r1, r3
 8005380:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <ecgPeak+0x274>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	3302      	adds	r3, #2
 8005388:	b29b      	uxth	r3, r3
 800538a:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 800538c:	23f2      	movs	r3, #242	; 0xf2
 800538e:	b29b      	uxth	r3, r3
 8005390:	3319      	adds	r3, #25
 8005392:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0, graph_x + graphRefreshRate_peak,
 8005394:	b21b      	sxth	r3, r3
 8005396:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800539a:	9400      	str	r4, [sp, #0]
 800539c:	f000 fd62 	bl	8005e64 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 1, graph_x + graphRefreshRate_peak,
 80053a0:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <ecgPeak+0x274>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	b218      	sxth	r0, r3
 80053a6:	23f2      	movs	r3, #242	; 0xf2
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3301      	adds	r3, #1
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	b219      	sxth	r1, r3
 80053b0:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <ecgPeak+0x274>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3302      	adds	r3, #2
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 80053bc:	23f2      	movs	r3, #242	; 0xf2
 80053be:	b29b      	uxth	r3, r3
 80053c0:	331a      	adds	r3, #26
 80053c2:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 1, graph_x + graphRefreshRate_peak,
 80053c4:	b21b      	sxth	r3, r3
 80053c6:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80053ca:	9400      	str	r4, [sp, #0]
 80053cc:	f000 fd4a 	bl	8005e64 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 80053d0:	4b01      	ldr	r3, [pc, #4]	; (80053d8 <ecgPeak+0x274>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3302      	adds	r3, #2
 80053d6:	e001      	b.n	80053dc <ecgPeak+0x278>
 80053d8:	20000058 	.word	0x20000058
 80053dc:	4a4f      	ldr	r2, [pc, #316]	; (800551c <ecgPeak+0x3b8>)
 80053de:	6013      	str	r3, [r2, #0]

	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80053e0:	4b4e      	ldr	r3, [pc, #312]	; (800551c <ecgPeak+0x3b8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	b218      	sxth	r0, r3
 80053e6:	23f2      	movs	r3, #242	; 0xf2
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3319      	adds	r3, #25
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	b219      	sxth	r1, r3
 80053f0:	4b4a      	ldr	r3, [pc, #296]	; (800551c <ecgPeak+0x3b8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3302      	adds	r3, #2
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 80053fc:	23f2      	movs	r3, #242	; 0xf2
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3319      	adds	r3, #25
 8005402:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8005404:	b21b      	sxth	r3, r3
 8005406:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800540a:	9400      	str	r4, [sp, #0]
 800540c:	f000 fd2a 	bl	8005e64 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8005410:	4b42      	ldr	r3, [pc, #264]	; (800551c <ecgPeak+0x3b8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	b218      	sxth	r0, r3
 8005416:	23f2      	movs	r3, #242	; 0xf2
 8005418:	b29b      	uxth	r3, r3
 800541a:	331a      	adds	r3, #26
 800541c:	b29b      	uxth	r3, r3
 800541e:	b219      	sxth	r1, r3
 8005420:	4b3e      	ldr	r3, [pc, #248]	; (800551c <ecgPeak+0x3b8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	3302      	adds	r3, #2
 8005428:	b29b      	uxth	r3, r3
 800542a:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 800542c:	23f2      	movs	r3, #242	; 0xf2
 800542e:	b29b      	uxth	r3, r3
 8005430:	331a      	adds	r3, #26
 8005432:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8005434:	b21b      	sxth	r3, r3
 8005436:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800543a:	9400      	str	r4, [sp, #0]
 800543c:	f000 fd12 	bl	8005e64 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8005440:	4b36      	ldr	r3, [pc, #216]	; (800551c <ecgPeak+0x3b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3302      	adds	r3, #2
 8005446:	4a35      	ldr	r2, [pc, #212]	; (800551c <ecgPeak+0x3b8>)
 8005448:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800544a:	4b34      	ldr	r3, [pc, #208]	; (800551c <ecgPeak+0x3b8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	b218      	sxth	r0, r3
 8005450:	23f2      	movs	r3, #242	; 0xf2
 8005452:	b29b      	uxth	r3, r3
 8005454:	3319      	adds	r3, #25
 8005456:	b29b      	uxth	r3, r3
 8005458:	b219      	sxth	r1, r3
 800545a:	4b30      	ldr	r3, [pc, #192]	; (800551c <ecgPeak+0x3b8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	3302      	adds	r3, #2
 8005462:	b29b      	uxth	r3, r3
 8005464:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8005466:	23f2      	movs	r3, #242	; 0xf2
 8005468:	b29b      	uxth	r3, r3
 800546a:	3319      	adds	r3, #25
 800546c:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800546e:	b21b      	sxth	r3, r3
 8005470:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8005474:	9400      	str	r4, [sp, #0]
 8005476:	f000 fcf5 	bl	8005e64 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800547a:	4b28      	ldr	r3, [pc, #160]	; (800551c <ecgPeak+0x3b8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	b218      	sxth	r0, r3
 8005480:	23f2      	movs	r3, #242	; 0xf2
 8005482:	b29b      	uxth	r3, r3
 8005484:	331a      	adds	r3, #26
 8005486:	b29b      	uxth	r3, r3
 8005488:	b219      	sxth	r1, r3
 800548a:	4b24      	ldr	r3, [pc, #144]	; (800551c <ecgPeak+0x3b8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	3302      	adds	r3, #2
 8005492:	b29b      	uxth	r3, r3
 8005494:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8005496:	23f2      	movs	r3, #242	; 0xf2
 8005498:	b29b      	uxth	r3, r3
 800549a:	331a      	adds	r3, #26
 800549c:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800549e:	b21b      	sxth	r3, r3
 80054a0:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80054a4:	9400      	str	r4, [sp, #0]
 80054a6:	f000 fcdd 	bl	8005e64 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 80054aa:	4b1c      	ldr	r3, [pc, #112]	; (800551c <ecgPeak+0x3b8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3302      	adds	r3, #2
 80054b0:	4a1a      	ldr	r2, [pc, #104]	; (800551c <ecgPeak+0x3b8>)
 80054b2:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80054b4:	4b19      	ldr	r3, [pc, #100]	; (800551c <ecgPeak+0x3b8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	b218      	sxth	r0, r3
 80054ba:	23f2      	movs	r3, #242	; 0xf2
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3319      	adds	r3, #25
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	b219      	sxth	r1, r3
 80054c4:	4b15      	ldr	r3, [pc, #84]	; (800551c <ecgPeak+0x3b8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3302      	adds	r3, #2
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 80054d0:	23f2      	movs	r3, #242	; 0xf2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3319      	adds	r3, #25
 80054d6:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80054d8:	b21b      	sxth	r3, r3
 80054da:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80054de:	9400      	str	r4, [sp, #0]
 80054e0:	f000 fcc0 	bl	8005e64 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80054e4:	4b0d      	ldr	r3, [pc, #52]	; (800551c <ecgPeak+0x3b8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	b218      	sxth	r0, r3
 80054ea:	23f2      	movs	r3, #242	; 0xf2
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	331a      	adds	r3, #26
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	b219      	sxth	r1, r3
 80054f4:	4b09      	ldr	r3, [pc, #36]	; (800551c <ecgPeak+0x3b8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3302      	adds	r3, #2
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8005500:	23f2      	movs	r3, #242	; 0xf2
 8005502:	b29b      	uxth	r3, r3
 8005504:	331a      	adds	r3, #26
 8005506:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8005508:	b21b      	sxth	r3, r3
 800550a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800550e:	9400      	str	r4, [sp, #0]
 8005510:	f000 fca8 	bl	8005e64 <LCD_DrawLine>
}
 8005514:	bf00      	nop
 8005516:	3704      	adds	r7, #4
 8005518:	46bd      	mov	sp, r7
 800551a:	bd90      	pop	{r4, r7, pc}
 800551c:	20000058 	.word	0x20000058

08005520 <ecgLine>:

void ecgLine() {
 8005520:	b590      	push	{r4, r7, lr}
 8005522:	b085      	sub	sp, #20
 8005524:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < 3; i++) {
 8005526:	2300      	movs	r3, #0
 8005528:	71fb      	strb	r3, [r7, #7]
 800552a:	e09c      	b.n	8005666 <ecgLine+0x146>
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800552c:	4b52      	ldr	r3, [pc, #328]	; (8005678 <ecgLine+0x158>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	b218      	sxth	r0, r3
 8005532:	23f2      	movs	r3, #242	; 0xf2
 8005534:	b29b      	uxth	r3, r3
 8005536:	3319      	adds	r3, #25
 8005538:	b29b      	uxth	r3, r3
 800553a:	b219      	sxth	r1, r3
 800553c:	4b4e      	ldr	r3, [pc, #312]	; (8005678 <ecgLine+0x158>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	3302      	adds	r3, #2
 8005544:	b29b      	uxth	r3, r3
 8005546:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 8005548:	23f2      	movs	r3, #242	; 0xf2
 800554a:	b29b      	uxth	r3, r3
 800554c:	3319      	adds	r3, #25
 800554e:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8005550:	b21b      	sxth	r3, r3
 8005552:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8005556:	9400      	str	r4, [sp, #0]
 8005558:	f000 fc84 	bl	8005e64 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800555c:	4b46      	ldr	r3, [pc, #280]	; (8005678 <ecgLine+0x158>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	b218      	sxth	r0, r3
 8005562:	23f2      	movs	r3, #242	; 0xf2
 8005564:	b29b      	uxth	r3, r3
 8005566:	331a      	adds	r3, #26
 8005568:	b29b      	uxth	r3, r3
 800556a:	b219      	sxth	r1, r3
 800556c:	4b42      	ldr	r3, [pc, #264]	; (8005678 <ecgLine+0x158>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	3302      	adds	r3, #2
 8005574:	b29b      	uxth	r3, r3
 8005576:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 8005578:	23f2      	movs	r3, #242	; 0xf2
 800557a:	b29b      	uxth	r3, r3
 800557c:	331a      	adds	r3, #26
 800557e:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8005580:	b21b      	sxth	r3, r3
 8005582:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8005586:	9400      	str	r4, [sp, #0]
 8005588:	f000 fc6c 	bl	8005e64 <LCD_DrawLine>
		graph_x += graphRefreshRate_peak;
 800558c:	4b3a      	ldr	r3, [pc, #232]	; (8005678 <ecgLine+0x158>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3302      	adds	r3, #2
 8005592:	4a39      	ldr	r2, [pc, #228]	; (8005678 <ecgLine+0x158>)
 8005594:	6013      	str	r3, [r2, #0]
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8005596:	4b38      	ldr	r3, [pc, #224]	; (8005678 <ecgLine+0x158>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	b218      	sxth	r0, r3
 800559c:	23f2      	movs	r3, #242	; 0xf2
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3319      	adds	r3, #25
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	b219      	sxth	r1, r3
 80055a6:	4b34      	ldr	r3, [pc, #208]	; (8005678 <ecgLine+0x158>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3302      	adds	r3, #2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 80055b2:	23f2      	movs	r3, #242	; 0xf2
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3319      	adds	r3, #25
 80055b8:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80055ba:	b21b      	sxth	r3, r3
 80055bc:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80055c0:	9400      	str	r4, [sp, #0]
 80055c2:	f000 fc4f 	bl	8005e64 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80055c6:	4b2c      	ldr	r3, [pc, #176]	; (8005678 <ecgLine+0x158>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	b218      	sxth	r0, r3
 80055cc:	23f2      	movs	r3, #242	; 0xf2
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	331a      	adds	r3, #26
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	b219      	sxth	r1, r3
 80055d6:	4b28      	ldr	r3, [pc, #160]	; (8005678 <ecgLine+0x158>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3302      	adds	r3, #2
 80055de:	b29b      	uxth	r3, r3
 80055e0:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 80055e2:	23f2      	movs	r3, #242	; 0xf2
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	331a      	adds	r3, #26
 80055e8:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80055ea:	b21b      	sxth	r3, r3
 80055ec:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80055f0:	9400      	str	r4, [sp, #0]
 80055f2:	f000 fc37 	bl	8005e64 <LCD_DrawLine>
		graph_x += graphRefreshRate_peak;
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <ecgLine+0x158>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3302      	adds	r3, #2
 80055fc:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <ecgLine+0x158>)
 80055fe:	6013      	str	r3, [r2, #0]
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8005600:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <ecgLine+0x158>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	b218      	sxth	r0, r3
 8005606:	23f2      	movs	r3, #242	; 0xf2
 8005608:	b29b      	uxth	r3, r3
 800560a:	3319      	adds	r3, #25
 800560c:	b29b      	uxth	r3, r3
 800560e:	b219      	sxth	r1, r3
 8005610:	4b19      	ldr	r3, [pc, #100]	; (8005678 <ecgLine+0x158>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	3302      	adds	r3, #2
 8005618:	b29b      	uxth	r3, r3
 800561a:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 800561c:	23f2      	movs	r3, #242	; 0xf2
 800561e:	b29b      	uxth	r3, r3
 8005620:	3319      	adds	r3, #25
 8005622:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8005624:	b21b      	sxth	r3, r3
 8005626:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800562a:	9400      	str	r4, [sp, #0]
 800562c:	f000 fc1a 	bl	8005e64 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8005630:	4b11      	ldr	r3, [pc, #68]	; (8005678 <ecgLine+0x158>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	b218      	sxth	r0, r3
 8005636:	23f2      	movs	r3, #242	; 0xf2
 8005638:	b29b      	uxth	r3, r3
 800563a:	331a      	adds	r3, #26
 800563c:	b29b      	uxth	r3, r3
 800563e:	b219      	sxth	r1, r3
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <ecgLine+0x158>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	3302      	adds	r3, #2
 8005648:	b29b      	uxth	r3, r3
 800564a:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 800564c:	23f2      	movs	r3, #242	; 0xf2
 800564e:	b29b      	uxth	r3, r3
 8005650:	331a      	adds	r3, #26
 8005652:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8005654:	b21b      	sxth	r3, r3
 8005656:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800565a:	9400      	str	r4, [sp, #0]
 800565c:	f000 fc02 	bl	8005e64 <LCD_DrawLine>
	for (uint8_t i = 0; i < 3; i++) {
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	3301      	adds	r3, #1
 8005664:	71fb      	strb	r3, [r7, #7]
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	2b02      	cmp	r3, #2
 800566a:	f67f af5f 	bls.w	800552c <ecgLine+0xc>
	}
}
 800566e:	bf00      	nop
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	bd90      	pop	{r4, r7, pc}
 8005678:	20000058 	.word	0x20000058

0800567c <LCD_ECGAnimation>:

void LCD_ECGAnimation() {
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af02      	add	r7, sp, #8
	ecgLine();
 8005682:	f7ff ff4d 	bl	8005520 <ecgLine>

	int a = graph_x;
 8005686:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <LCD_ECGAnimation+0x4c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	607b      	str	r3, [r7, #4]
	if (a + graphRefreshRate_peak >= graph_x2 - 25) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1c9a      	adds	r2, r3, #2
 8005690:	23af      	movs	r3, #175	; 0xaf
 8005692:	3b19      	subs	r3, #25
 8005694:	429a      	cmp	r2, r3
 8005696:	db0c      	blt.n	80056b2 <LCD_ECGAnimation+0x36>
		LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 80, 70, WHITE);
 8005698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	2346      	movs	r3, #70	; 0x46
 80056a0:	22a0      	movs	r2, #160	; 0xa0
 80056a2:	21e8      	movs	r1, #232	; 0xe8
 80056a4:	2014      	movs	r0, #20
 80056a6:	f001 f88d 	bl	80067c4 <LCD_FillRect>
		graph_x = graph_x0;
 80056aa:	221e      	movs	r2, #30
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <LCD_ECGAnimation+0x4c>)
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e004      	b.n	80056bc <LCD_ECGAnimation+0x40>
	} else {
		graph_x += graphRefreshRate_peak;
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <LCD_ECGAnimation+0x4c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3302      	adds	r3, #2
 80056b8:	4a03      	ldr	r2, [pc, #12]	; (80056c8 <LCD_ECGAnimation+0x4c>)
 80056ba:	6013      	str	r3, [r2, #0]
	}

	ecgPeak();
 80056bc:	f7ff fd52 	bl	8005164 <ecgPeak>
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20000058 	.word	0x20000058

080056cc <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af04      	add	r7, sp, #16
 80056d2:	4603      	mov	r3, r0
 80056d4:	6039      	str	r1, [r7, #0]
 80056d6:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	b29a      	uxth	r2, r3
 80056dc:	2364      	movs	r3, #100	; 0x64
 80056de:	9302      	str	r3, [sp, #8]
 80056e0:	2303      	movs	r3, #3
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	f107 030c 	add.w	r3, r7, #12
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	2301      	movs	r3, #1
 80056ec:	21b4      	movs	r1, #180	; 0xb4
 80056ee:	480b      	ldr	r0, [pc, #44]	; (800571c <mlx90614_read16+0x50>)
 80056f0:	f7fd f9b4 	bl	8002a5c <HAL_I2C_Mem_Read>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <mlx90614_read16+0x32>
    return false;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e009      	b.n	8005712 <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 80056fe:	7b3b      	ldrb	r3, [r7, #12]
 8005700:	b21a      	sxth	r2, r3
 8005702:	7b7b      	ldrb	r3, [r7, #13]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	b21b      	sxth	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b21a      	sxth	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	801a      	strh	r2, [r3, #0]
  return true;
 8005710:	2301      	movs	r3, #1
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000548 	.word	0x20000548

08005720 <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 800572a:	4b21      	ldr	r3, [pc, #132]	; (80057b0 <mlx90614_calcTemperature+0x90>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d108      	bne.n	8005744 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 8005732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800573e:	edc7 7a03 	vstr	s15, [r7, #12]
 8005742:	e02b      	b.n	800579c <mlx90614_calcTemperature+0x7c>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 8005744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005750:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80057b4 <mlx90614_calcTemperature+0x94>
 8005754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005758:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <mlx90614_calcTemperature+0x90>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d01b      	beq.n	800579c <mlx90614_calcTemperature+0x7c>
		{
			retTemp -= 273.15f;
 8005764:	edd7 7a03 	vldr	s15, [r7, #12]
 8005768:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80057b8 <mlx90614_calcTemperature+0x98>
 800576c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005770:	edc7 7a03 	vstr	s15, [r7, #12]
			if(mlx90614.unit == MLX90614_UNIT_F)
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <mlx90614_calcTemperature+0x90>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d10f      	bne.n	800579c <mlx90614_calcTemperature+0x7c>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 800577c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005780:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8005784:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005788:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800578c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005790:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80057bc <mlx90614_calcTemperature+0x9c>
 8005794:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005798:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}
	return retTemp;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	ee07 3a90 	vmov	s15, r3
}
 80057a2:	eeb0 0a67 	vmov.f32	s0, s15
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	2000070c 	.word	0x2000070c
 80057b4:	3ca3d70a 	.word	0x3ca3d70a
 80057b8:	43889333 	.word	0x43889333
 80057bc:	42000000 	.word	0x42000000

080057c0 <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 80057c4:	2234      	movs	r2, #52	; 0x34
 80057c6:	2100      	movs	r1, #0
 80057c8:	4821      	ldr	r0, [pc, #132]	; (8005850 <mlx90614_init+0x90>)
 80057ca:	f003 fbc1 	bl	8008f50 <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 80057ce:	4b20      	ldr	r3, [pc, #128]	; (8005850 <mlx90614_init+0x90>)
 80057d0:	2202      	movs	r2, #2
 80057d2:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 80057d4:	2364      	movs	r3, #100	; 0x64
 80057d6:	2201      	movs	r2, #1
 80057d8:	21b4      	movs	r1, #180	; 0xb4
 80057da:	481e      	ldr	r0, [pc, #120]	; (8005854 <mlx90614_init+0x94>)
 80057dc:	f7fd fb64 	bl	8002ea8 <HAL_I2C_IsDeviceReady>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <mlx90614_init+0x2a>
    return false;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e030      	b.n	800584c <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 80057ea:	491b      	ldr	r1, [pc, #108]	; (8005858 <mlx90614_init+0x98>)
 80057ec:	2025      	movs	r0, #37	; 0x25
 80057ee:	f7ff ff6d 	bl	80056cc <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 80057f2:	2000      	movs	r0, #0
 80057f4:	f000 f832 	bl	800585c <mlx90614_readID>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f083 0301 	eor.w	r3, r3, #1
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <mlx90614_init+0x48>
    return false;
 8005804:	2300      	movs	r3, #0
 8005806:	e021      	b.n	800584c <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 8005808:	2000      	movs	r0, #0
 800580a:	f000 f861 	bl	80058d0 <mlx90614_getEmissivity>
 800580e:	4603      	mov	r3, r0
 8005810:	f083 0301 	eor.w	r3, r3, #1
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <mlx90614_init+0x5e>
    return false;
 800581a:	2300      	movs	r3, #0
 800581c:	e016      	b.n	800584c <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 800581e:	2000      	movs	r0, #0
 8005820:	f000 f890 	bl	8005944 <mlx90614_getMax>
 8005824:	4603      	mov	r3, r0
 8005826:	f083 0301 	eor.w	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <mlx90614_init+0x74>
    return false;
 8005830:	2300      	movs	r3, #0
 8005832:	e00b      	b.n	800584c <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 8005834:	2000      	movs	r0, #0
 8005836:	f000 f8a9 	bl	800598c <mlx90614_getMin>
 800583a:	4603      	mov	r3, r0
 800583c:	f083 0301 	eor.w	r3, r3, #1
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <mlx90614_init+0x8a>
    return false;
 8005846:	2300      	movs	r3, #0
 8005848:	e000      	b.n	800584c <mlx90614_init+0x8c>

  return true;
 800584a:	2301      	movs	r3, #1
}
 800584c:	4618      	mov	r0, r3
 800584e:	bd80      	pop	{r7, pc}
 8005850:	2000070c 	.word	0x2000070c
 8005854:	20000548 	.word	0x20000548
 8005858:	2000073c 	.word	0x2000073c

0800585c <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	e028      	b.n	80058bc <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	333c      	adds	r3, #60	; 0x3c
 8005874:	b2db      	uxtb	r3, r3
 8005876:	f107 020a 	add.w	r2, r7, #10
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff ff25 	bl	80056cc <mlx90614_read16>
 8005882:	4603      	mov	r3, r0
 8005884:	f083 0301 	eor.w	r3, r3, #1
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <mlx90614_readID+0x36>
			return false;
 800588e:	2300      	movs	r3, #0
 8005890:	e018      	b.n	80058c4 <mlx90614_readID+0x68>
    if(id != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d006      	beq.n	80058a6 <mlx90614_readID+0x4a>
      id[i] = (uint16_t)temp;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	4413      	add	r3, r2
 80058a0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80058a4:	801a      	strh	r2, [r3, #0]
    mlx90614.id[i] = (uint16_t)temp;
 80058a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80058aa:	b299      	uxth	r1, r3
 80058ac:	4a07      	ldr	r2, [pc, #28]	; (80058cc <mlx90614_readID+0x70>)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3314      	adds	r3, #20
 80058b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	ddd3      	ble.n	800586a <mlx90614_readID+0xe>
	}
	return true;
 80058c2:	2301      	movs	r3, #1
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	2000070c 	.word	0x2000070c

080058d0 <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 80058d8:	4917      	ldr	r1, [pc, #92]	; (8005938 <mlx90614_getEmissivity+0x68>)
 80058da:	2024      	movs	r0, #36	; 0x24
 80058dc:	f7ff fef6 	bl	80056cc <mlx90614_read16>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d022      	beq.n	800592c <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 80058e6:	4b15      	ldr	r3, [pc, #84]	; (800593c <mlx90614_getEmissivity+0x6c>)
 80058e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058f6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005940 <mlx90614_getEmissivity+0x70>
 80058fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058fe:	4b0f      	ldr	r3, [pc, #60]	; (800593c <mlx90614_getEmissivity+0x6c>)
 8005900:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 800590a:	4b0c      	ldr	r3, [pc, #48]	; (800593c <mlx90614_getEmissivity+0x6c>)
 800590c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005910:	b29b      	uxth	r3, r3
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800591a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005940 <mlx90614_getEmissivity+0x70>
 800591e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <mlx90614_getEmissivity+0x5e>
	}
	return false;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	2000070e 	.word	0x2000070e
 800593c:	2000070c 	.word	0x2000070c
 8005940:	477fff00 	.word	0x477fff00

08005944 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 800594c:	490d      	ldr	r1, [pc, #52]	; (8005984 <mlx90614_getMax+0x40>)
 800594e:	2020      	movs	r0, #32
 8005950:	f7ff febc 	bl	80056cc <mlx90614_read16>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00e      	beq.n	8005978 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <mlx90614_getMax+0x44>)
 8005962:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <mlx90614_getMax+0x36>
	}
	return false;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000716 	.word	0x20000716
 8005988:	2000070c 	.word	0x2000070c

0800598c <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 8005994:	490d      	ldr	r1, [pc, #52]	; (80059cc <mlx90614_getMin+0x40>)
 8005996:	2021      	movs	r0, #33	; 0x21
 8005998:	f7ff fe98 	bl	80056cc <mlx90614_read16>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00e      	beq.n	80059c0 <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d009      	beq.n	80059bc <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <mlx90614_getMin+0x44>)
 80059aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <mlx90614_getMin+0x36>
	}
	return false;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000718 	.word	0x20000718
 80059d0:	2000070c 	.word	0x2000070c

080059d4 <mlx90614_getObject1>:
	}
	return false;
}
//###################################################################################################
bool mlx90614_getObject1(float *objectTemp)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOBJ1, &mlx90614.rawObject1))
 80059dc:	4911      	ldr	r1, [pc, #68]	; (8005a24 <mlx90614_getObject1+0x50>)
 80059de:	2007      	movs	r0, #7
 80059e0:	f7ff fe74 	bl	80056cc <mlx90614_read16>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d016      	beq.n	8005a18 <mlx90614_getObject1+0x44>
	{
		if(mlx90614.rawObject1 & 0x8000)
 80059ea:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <mlx90614_getObject1+0x54>)
 80059ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	da01      	bge.n	80059f8 <mlx90614_getObject1+0x24>
			return false;
 80059f4:	2300      	movs	r3, #0
 80059f6:	e010      	b.n	8005a1a <mlx90614_getObject1+0x46>
		if(objectTemp != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <mlx90614_getObject1+0x40>
      *objectTemp =  mlx90614_calcTemperature(mlx90614.rawObject1);
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <mlx90614_getObject1+0x54>)
 8005a00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff fe8b 	bl	8005720 <mlx90614_calcTemperature>
 8005a0a:	eef0 7a40 	vmov.f32	s15, s0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <mlx90614_getObject1+0x46>
	}
	return false;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000712 	.word	0x20000712
 8005a28:	2000070c 	.word	0x2000070c

08005a2c <LCD_DrawButton1>:

#include "graphics.h"
#include "Pictures.h"

void LCD_DrawButton1(char *c, int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, uint16_t bgColor, uint16_t textColor, uint8_t bg_draw, uint16_t xPadding, uint16_t yPadding, uint8_t textSize) {
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	817b      	strh	r3, [r7, #10]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	813b      	strh	r3, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]

	if (bg_draw == 1)
 8005a46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d113      	bne.n	8005a76 <LCD_DrawButton1+0x4a>
		LCD_FillRoundRect(x + 5, y + 5, w, h, r, textColor);
 8005a4e:	897b      	ldrh	r3, [r7, #10]
 8005a50:	3305      	adds	r3, #5
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	b218      	sxth	r0, r3
 8005a56:	893b      	ldrh	r3, [r7, #8]
 8005a58:	3305      	adds	r3, #5
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	b219      	sxth	r1, r3
 8005a5e:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8005a62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	4623      	mov	r3, r4
 8005a72:	f000 ff4f 	bl	8006914 <LCD_FillRoundRect>

	LCD_FillRoundRect(x, y, w, h, r, bgColor);
 8005a76:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8005a7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a7e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8005a82:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8005a86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	4623      	mov	r3, r4
 8005a92:	f000 ff3f 	bl	8006914 <LCD_FillRoundRect>
	LCD_DrawRoundRect(x, y, w, h, r, WHITE);
 8005a96:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8005a9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a9e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8005aa2:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8005aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	4623      	mov	r3, r4
 8005ab4:	f000 fb54 	bl	8006160 <LCD_DrawRoundRect>
	LCD_SetCursor(x + xPadding, y + yPadding);
 8005ab8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005abc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005abe:	4413      	add	r3, r2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005ac6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ac8:	4413      	add	r3, r2
 8005aca:	4619      	mov	r1, r3
 8005acc:	f001 f9ae 	bl	8006e2c <LCD_SetCursor>
	LCD_SetTextSize(textSize);
 8005ad0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f9c1 	bl	8006e5c <LCD_SetTextSize>
	LCD_SetTextColor(textColor, bgColor);
 8005ada:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005adc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 f9d1 	bl	8006e88 <LCD_SetTextColor>
	LCD_Printf(c);
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f001 f8b8 	bl	8006c5c <LCD_Printf>

}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd90      	pop	{r4, r7, pc}

08005af4 <LCD_DrawHBorder>:

void LCD_DrawHBorder(int16_t x, int16_t y, int16_t w, uint16_t color, int16_t BorderSize){
 8005af4:	b590      	push	{r4, r7, lr}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4604      	mov	r4, r0
 8005afc:	4608      	mov	r0, r1
 8005afe:	4611      	mov	r1, r2
 8005b00:	461a      	mov	r2, r3
 8005b02:	4623      	mov	r3, r4
 8005b04:	80fb      	strh	r3, [r7, #6]
 8005b06:	4603      	mov	r3, r0
 8005b08:	80bb      	strh	r3, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	807b      	strh	r3, [r7, #2]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	803b      	strh	r3, [r7, #0]

	for(uint8_t i = 0; i < BorderSize; i++){
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
 8005b16:	e00f      	b.n	8005b38 <LCD_DrawHBorder+0x44>
		LCD_DrawFastHLine(x, y + i, w, color);
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	88bb      	ldrh	r3, [r7, #4]
 8005b1e:	4413      	add	r3, r2
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	b219      	sxth	r1, r3
 8005b24:	883b      	ldrh	r3, [r7, #0]
 8005b26:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005b2a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b2e:	f000 fa3b 	bl	8005fa8 <LCD_DrawFastHLine>
	for(uint8_t i = 0; i < BorderSize; i++){
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	3301      	adds	r3, #1
 8005b36:	73fb      	strb	r3, [r7, #15]
 8005b38:	7bfa      	ldrb	r2, [r7, #15]
 8005b3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	dbea      	blt.n	8005b18 <LCD_DrawHBorder+0x24>
	}

}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd90      	pop	{r4, r7, pc}

08005b4c <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
	t *= 20;
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	607b      	str	r3, [r7, #4]
	for (; t > 0; t--) {
 8005b60:	e003      	b.n	8005b6a <delay+0x1e>
		__asm("nop");
 8005b62:	bf00      	nop
	for (; t > 0; t--) {
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f8      	bne.n	8005b62 <delay+0x16>
	}
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <GPIO_Init>:
 * \param 
 * 
 * \return void
 */

static void GPIO_Init(void) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;
	gpio_clk_en(PORTB);
 8005b86:	4832      	ldr	r0, [pc, #200]	; (8005c50 <GPIO_Init+0xd0>)
 8005b88:	f7fe fccc 	bl	8004524 <gpio_clk_en>
	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	2300      	movs	r3, #0
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	2201      	movs	r2, #1
 8005b98:	2101      	movs	r1, #1
 8005b9a:	482e      	ldr	r0, [pc, #184]	; (8005c54 <GPIO_Init+0xd4>)
 8005b9c:	f7fe fd08 	bl	80045b0 <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2201      	movs	r2, #1
 8005bac:	2107      	movs	r1, #7
 8005bae:	4829      	ldr	r0, [pc, #164]	; (8005c54 <GPIO_Init+0xd4>)
 8005bb0:	f7fe fcfe 	bl	80045b0 <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4825      	ldr	r0, [pc, #148]	; (8005c58 <GPIO_Init+0xd8>)
 8005bc4:	f7fe fcf4 	bl	80045b0 <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	9301      	str	r3, [sp, #4]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	4820      	ldr	r0, [pc, #128]	; (8005c58 <GPIO_Init+0xd8>)
 8005bd8:	f7fe fcea 	bl	80045b0 <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	2300      	movs	r3, #0
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2300      	movs	r3, #0
 8005be6:	2201      	movs	r2, #1
 8005be8:	2104      	movs	r1, #4
 8005bea:	481b      	ldr	r0, [pc, #108]	; (8005c58 <GPIO_Init+0xd8>)
 8005bec:	f7fe fce0 	bl	80045b0 <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	2108      	movs	r1, #8
 8005bfe:	4816      	ldr	r0, [pc, #88]	; (8005c58 <GPIO_Init+0xd8>)
 8005c00:	f7fe fcd6 	bl	80045b0 <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8005c04:	2300      	movs	r3, #0
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2201      	movs	r2, #1
 8005c10:	2109      	movs	r1, #9
 8005c12:	4811      	ldr	r0, [pc, #68]	; (8005c58 <GPIO_Init+0xd8>)
 8005c14:	f7fe fccc 	bl	80045b0 <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8005c18:	2300      	movs	r3, #0
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	2300      	movs	r3, #0
 8005c22:	2201      	movs	r2, #1
 8005c24:	210a      	movs	r1, #10
 8005c26:	480c      	ldr	r0, [pc, #48]	; (8005c58 <GPIO_Init+0xd8>)
 8005c28:	f7fe fcc2 	bl	80045b0 <gpio_config>
//	gpio_config(PORTB, 3, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 5, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
	/*Configure GPIO pins : PB0 PB10 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_10 | GPIO_PIN_4
 8005c2c:	f240 4339 	movw	r3, #1081	; 0x439
 8005c30:	607b      	str	r3, [r7, #4]
			| GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c32:	2301      	movs	r3, #1
 8005c34:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4803      	ldr	r0, [pc, #12]	; (8005c50 <GPIO_Init+0xd0>)
 8005c44:	f7fc fc42 	bl	80024cc <HAL_GPIO_Init>
	//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8005c48:	bf00      	nop
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40020400 	.word	0x40020400
 8005c54:	40020800 	.word	0x40020800
 8005c58:	40020000 	.word	0x40020000

08005c5c <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8005c62:	4b2e      	ldr	r3, [pc, #184]	; (8005d1c <LCD_Begin+0xc0>)
 8005c64:	22f0      	movs	r2, #240	; 0xf0
 8005c66:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8005c68:	4b2d      	ldr	r3, [pc, #180]	; (8005d20 <LCD_Begin+0xc4>)
 8005c6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005c6e:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8005c70:	4b2c      	ldr	r3, [pc, #176]	; (8005d24 <LCD_Begin+0xc8>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8005c76:	4b2c      	ldr	r3, [pc, #176]	; (8005d28 <LCD_Begin+0xcc>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	801a      	strh	r2, [r3, #0]
 8005c7c:	4b2a      	ldr	r3, [pc, #168]	; (8005d28 <LCD_Begin+0xcc>)
 8005c7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005c82:	4b2a      	ldr	r3, [pc, #168]	; (8005d2c <LCD_Begin+0xd0>)
 8005c84:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8005c86:	4b2a      	ldr	r3, [pc, #168]	; (8005d30 <LCD_Begin+0xd4>)
 8005c88:	2204      	movs	r2, #4
 8005c8a:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8005c8c:	4b29      	ldr	r3, [pc, #164]	; (8005d34 <LCD_Begin+0xd8>)
 8005c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	4b27      	ldr	r3, [pc, #156]	; (8005d34 <LCD_Begin+0xd8>)
 8005c96:	881a      	ldrh	r2, [r3, #0]
 8005c98:	4b27      	ldr	r3, [pc, #156]	; (8005d38 <LCD_Begin+0xdc>)
 8005c9a:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8005c9c:	4b27      	ldr	r3, [pc, #156]	; (8005d3c <LCD_Begin+0xe0>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;

	GPIO_Init();
 8005ca6:	f7ff ff6b 	bl	8005b80 <GPIO_Init>

	LCD_Reset();
 8005caa:	f001 f86b 	bl	8006d84 <LCD_Reset>

	LCD_CS_LOW();
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4823      	ldr	r0, [pc, #140]	; (8005d40 <LCD_Begin+0xe4>)
 8005cb4:	f7fe fd5c 	bl	8004770 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8005cb8:	e01d      	b.n	8005cf6 <LCD_Begin+0x9a>
		a = ST7781_regValues[i++];
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	71fa      	strb	r2, [r7, #7]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4b20      	ldr	r3, [pc, #128]	; (8005d44 <LCD_Begin+0xe8>)
 8005cc4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005cc8:	80bb      	strh	r3, [r7, #4]
		d = ST7781_regValues[i++];
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	71fa      	strb	r2, [r7, #7]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <LCD_Begin+0xe8>)
 8005cd4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005cd8:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8005cda:	88bb      	ldrh	r3, [r7, #4]
 8005cdc:	2bff      	cmp	r3, #255	; 0xff
 8005cde:	d104      	bne.n	8005cea <LCD_Begin+0x8e>
			delay(d);
 8005ce0:	887b      	ldrh	r3, [r7, #2]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff ff32 	bl	8005b4c <delay>
 8005ce8:	e005      	b.n	8005cf6 <LCD_Begin+0x9a>
		} else {
			LCD_WriteRegister16(a, d);
 8005cea:	887a      	ldrh	r2, [r7, #2]
 8005cec:	88bb      	ldrh	r3, [r7, #4]
 8005cee:	4611      	mov	r1, r2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 fa03 	bl	80070fc <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	2b83      	cmp	r3, #131	; 0x83
 8005cfa:	d9de      	bls.n	8005cba <LCD_Begin+0x5e>
		}
	}

	LCD_SetRotation(m_rotation);
 8005cfc:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <LCD_Begin+0xc8>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 f8d9 	bl	8006eb8 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8005d06:	f240 133f 	movw	r3, #319	; 0x13f
 8005d0a:	22ef      	movs	r2, #239	; 0xef
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	2000      	movs	r0, #0
 8005d10:	f001 f908 	bl	8006f24 <LCD_SetAddrWindow>
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000740 	.word	0x20000740
 8005d20:	20000742 	.word	0x20000742
 8005d24:	2000074d 	.word	0x2000074d
 8005d28:	20000744 	.word	0x20000744
 8005d2c:	20000746 	.word	0x20000746
 8005d30:	2000074c 	.word	0x2000074c
 8005d34:	2000074a 	.word	0x2000074a
 8005d38:	20000748 	.word	0x20000748
 8005d3c:	2000074e 	.word	0x2000074e
 8005d40:	40020400 	.word	0x40020400
 8005d44:	0800c078 	.word	0x0800c078

08005d48 <LCD_Color565>:
 * \param g	Green
 * \param b	Blue
 * 
 * \return uint16_t	16Bit-RGB
 */
uint16_t LCD_Color565(uint8_t r, uint8_t g, uint8_t b) {
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	71fb      	strb	r3, [r7, #7]
 8005d52:	460b      	mov	r3, r1
 8005d54:	71bb      	strb	r3, [r7, #6]
 8005d56:	4613      	mov	r3, r2
 8005d58:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	b21b      	sxth	r3, r3
 8005d60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d64:	f023 0307 	bic.w	r3, r3, #7
 8005d68:	b21a      	sxth	r2, r3
 8005d6a:	79bb      	ldrb	r3, [r7, #6]
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	b21b      	sxth	r3, r3
 8005d70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8005d74:	b21b      	sxth	r3, r3
 8005d76:	4313      	orrs	r3, r2
 8005d78:	b21a      	sxth	r2, r3
 8005d7a:	797b      	ldrb	r3, [r7, #5]
 8005d7c:	08db      	lsrs	r3, r3, #3
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	b21b      	sxth	r3, r3
 8005d82:	4313      	orrs	r3, r2
 8005d84:	b21b      	sxth	r3, r3
 8005d86:	b29b      	uxth	r3, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	80fb      	strh	r3, [r7, #6]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	80bb      	strh	r3, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 8005da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	db52      	blt.n	8005e54 <LCD_DrawPixel+0xc0>
 8005dae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	db4e      	blt.n	8005e54 <LCD_DrawPixel+0xc0>
 8005db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dba:	2bef      	cmp	r3, #239	; 0xef
 8005dbc:	dc4a      	bgt.n	8005e54 <LCD_DrawPixel+0xc0>
 8005dbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005dc2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005dc6:	da45      	bge.n	8005e54 <LCD_DrawPixel+0xc0>
		return;

	LCD_CS_LOW();
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2100      	movs	r1, #0
 8005dcc:	4823      	ldr	r0, [pc, #140]	; (8005e5c <LCD_DrawPixel+0xc8>)
 8005dce:	f7fe fccf 	bl	8004770 <gpio_write>

	int16_t t;
	switch (m_rotation) {
 8005dd2:	4b23      	ldr	r3, [pc, #140]	; (8005e60 <LCD_DrawPixel+0xcc>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d01c      	beq.n	8005e14 <LCD_DrawPixel+0x80>
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	dc25      	bgt.n	8005e2a <LCD_DrawPixel+0x96>
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d002      	beq.n	8005de8 <LCD_DrawPixel+0x54>
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d00a      	beq.n	8005dfc <LCD_DrawPixel+0x68>
 8005de6:	e020      	b.n	8005e2a <LCD_DrawPixel+0x96>
	case 1:
		t = x;
 8005de8:	88fb      	ldrh	r3, [r7, #6]
 8005dea:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 8005dec:	88bb      	ldrh	r3, [r7, #4]
 8005dee:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	80fb      	strh	r3, [r7, #6]
		y = t;
 8005df6:	89fb      	ldrh	r3, [r7, #14]
 8005df8:	80bb      	strh	r3, [r7, #4]
		break;
 8005dfa:	e016      	b.n	8005e2a <LCD_DrawPixel+0x96>
	case 2:
		x = TFTWIDTH - 1 - x;
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8005e06:	88bb      	ldrh	r3, [r7, #4]
 8005e08:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	80bb      	strh	r3, [r7, #4]
		break;
 8005e12:	e00a      	b.n	8005e2a <LCD_DrawPixel+0x96>
	case 3:
		t = x;
 8005e14:	88fb      	ldrh	r3, [r7, #6]
 8005e16:	81fb      	strh	r3, [r7, #14]
		x = y;
 8005e18:	88bb      	ldrh	r3, [r7, #4]
 8005e1a:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 8005e1c:	89fb      	ldrh	r3, [r7, #14]
 8005e1e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005e22:	3301      	adds	r3, #1
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	80bb      	strh	r3, [r7, #4]
		break;
 8005e28:	bf00      	nop
	}

	LCD_WriteRegister16(0x0020, x);
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	2020      	movs	r0, #32
 8005e30:	f001 f964 	bl	80070fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8005e34:	88bb      	ldrh	r3, [r7, #4]
 8005e36:	4619      	mov	r1, r3
 8005e38:	2021      	movs	r0, #33	; 0x21
 8005e3a:	f001 f95f 	bl	80070fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 8005e3e:	887b      	ldrh	r3, [r7, #2]
 8005e40:	4619      	mov	r1, r3
 8005e42:	2022      	movs	r0, #34	; 0x22
 8005e44:	f001 f95a 	bl	80070fc <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8005e48:	2201      	movs	r2, #1
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4803      	ldr	r0, [pc, #12]	; (8005e5c <LCD_DrawPixel+0xc8>)
 8005e4e:	f7fe fc8f 	bl	8004770 <gpio_write>
 8005e52:	e000      	b.n	8005e56 <LCD_DrawPixel+0xc2>
		return;
 8005e54:	bf00      	nop
}
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40020400 	.word	0x40020400
 8005e60:	2000074d 	.word	0x2000074d

08005e64 <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 8005e64:	b590      	push	{r4, r7, lr}
 8005e66:	b089      	sub	sp, #36	; 0x24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	4611      	mov	r1, r2
 8005e70:	461a      	mov	r2, r3
 8005e72:	4623      	mov	r3, r4
 8005e74:	80fb      	strh	r3, [r7, #6]
 8005e76:	4603      	mov	r3, r0
 8005e78:	80bb      	strh	r3, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	807b      	strh	r3, [r7, #2]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8005e82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005e86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005e90:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005e94:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e9c:	1acb      	subs	r3, r1, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfb8      	it	lt
 8005ea2:	425b      	neglt	r3, r3
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	bfcc      	ite	gt
 8005ea8:	2301      	movgt	r3, #1
 8005eaa:	2300      	movle	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8005eb0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <LCD_DrawLine+0x6c>
		swap(x1, y1);
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	833b      	strh	r3, [r7, #24]
 8005ebc:	88bb      	ldrh	r3, [r7, #4]
 8005ebe:	80fb      	strh	r3, [r7, #6]
 8005ec0:	8b3b      	ldrh	r3, [r7, #24]
 8005ec2:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8005ec4:	887b      	ldrh	r3, [r7, #2]
 8005ec6:	82fb      	strh	r3, [r7, #22]
 8005ec8:	883b      	ldrh	r3, [r7, #0]
 8005eca:	807b      	strh	r3, [r7, #2]
 8005ecc:	8afb      	ldrh	r3, [r7, #22]
 8005ece:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2) {
 8005ed0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ed4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	dd0b      	ble.n	8005ef4 <LCD_DrawLine+0x90>
		swap(x1, x2);
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	82bb      	strh	r3, [r7, #20]
 8005ee0:	887b      	ldrh	r3, [r7, #2]
 8005ee2:	80fb      	strh	r3, [r7, #6]
 8005ee4:	8abb      	ldrh	r3, [r7, #20]
 8005ee6:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8005ee8:	88bb      	ldrh	r3, [r7, #4]
 8005eea:	827b      	strh	r3, [r7, #18]
 8005eec:	883b      	ldrh	r3, [r7, #0]
 8005eee:	80bb      	strh	r3, [r7, #4]
 8005ef0:	8a7b      	ldrh	r3, [r7, #18]
 8005ef2:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8005ef4:	887a      	ldrh	r2, [r7, #2]
 8005ef6:	88fb      	ldrh	r3, [r7, #6]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 8005efe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005f02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	bfb8      	it	lt
 8005f0c:	425b      	neglt	r3, r3
 8005f0e:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8005f10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005f14:	0fda      	lsrs	r2, r3, #31
 8005f16:	4413      	add	r3, r2
 8005f18:	105b      	asrs	r3, r3, #1
 8005f1a:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2) {
 8005f1c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f20:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	da02      	bge.n	8005f2e <LCD_DrawLine+0xca>
		ystep = 1;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	83bb      	strh	r3, [r7, #28]
 8005f2c:	e031      	b.n	8005f92 <LCD_DrawLine+0x12e>
	} else {
		ystep = -1;
 8005f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f32:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++) {
 8005f34:	e02d      	b.n	8005f92 <LCD_DrawLine+0x12e>
		if (steep) {
 8005f36:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <LCD_DrawLine+0xec>
			LCD_DrawPixel(y1, x1, color);
 8005f3e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005f40:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005f44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff ff23 	bl	8005d94 <LCD_DrawPixel>
 8005f4e:	e007      	b.n	8005f60 <LCD_DrawLine+0xfc>
		} else {
			LCD_DrawPixel(x1, y1, color);
 8005f50:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005f52:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff ff1a 	bl	8005d94 <LCD_DrawPixel>
		}
		err -= dy;
 8005f60:	8bfa      	ldrh	r2, [r7, #30]
 8005f62:	89fb      	ldrh	r3, [r7, #14]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8005f6a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da09      	bge.n	8005f86 <LCD_DrawLine+0x122>
			y1 += ystep;
 8005f72:	88ba      	ldrh	r2, [r7, #4]
 8005f74:	8bbb      	ldrh	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8005f7c:	8bfa      	ldrh	r2, [r7, #30]
 8005f7e:	8a3b      	ldrh	r3, [r7, #16]
 8005f80:	4413      	add	r3, r2
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++) {
 8005f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	80fb      	strh	r3, [r7, #6]
 8005f92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	ddcb      	ble.n	8005f36 <LCD_DrawLine+0xd2>
		}
	}
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	3724      	adds	r7, #36	; 0x24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd90      	pop	{r4, r7, pc}

08005fa8 <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	80fb      	strh	r3, [r7, #6]
 8005fba:	4603      	mov	r3, r0
 8005fbc:	80bb      	strh	r3, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	807b      	strh	r3, [r7, #2]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	803b      	strh	r3, [r7, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8005fc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	dd5a      	ble.n	8006084 <LCD_DrawFastHLine+0xdc>
 8005fce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	db56      	blt.n	8006084 <LCD_DrawFastHLine+0xdc>
 8005fd6:	4b2d      	ldr	r3, [pc, #180]	; (800608c <LCD_DrawFastHLine+0xe4>)
 8005fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fdc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	da4f      	bge.n	8006084 <LCD_DrawFastHLine+0xdc>
 8005fe4:	4b2a      	ldr	r3, [pc, #168]	; (8006090 <LCD_DrawFastHLine+0xe8>)
 8005fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	da48      	bge.n	8006084 <LCD_DrawFastHLine+0xdc>
			(x + length - 1)) < 0))
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	887b      	ldrh	r3, [r7, #2]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29b      	uxth	r3, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8005ffe:	81fb      	strh	r3, [r7, #14]
 8006000:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006004:	2b00      	cmp	r3, #0
 8006006:	db3d      	blt.n	8006084 <LCD_DrawFastHLine+0xdc>
		return;

	if (x < 0) { // Clip left
 8006008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800600c:	2b00      	cmp	r3, #0
 800600e:	da06      	bge.n	800601e <LCD_DrawFastHLine+0x76>
		length += x;
 8006010:	887a      	ldrh	r2, [r7, #2]
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	4413      	add	r3, r2
 8006016:	b29b      	uxth	r3, r3
 8006018:	807b      	strh	r3, [r7, #2]
		x = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	80fb      	strh	r3, [r7, #6]
	}

	if (x2 >= m_width) { // Clip right
 800601e:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <LCD_DrawFastHLine+0xe8>)
 8006020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006024:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006028:	429a      	cmp	r2, r3
 800602a:	db0d      	blt.n	8006048 <LCD_DrawFastHLine+0xa0>
		x2 = m_width - 1;
 800602c:	4b18      	ldr	r3, [pc, #96]	; (8006090 <LCD_DrawFastHLine+0xe8>)
 800602e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29b      	uxth	r3, r3
 8006038:	81fb      	strh	r3, [r7, #14]
		length = x2 - x + 1;
 800603a:	89fa      	ldrh	r2, [r7, #14]
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	b29b      	uxth	r3, r3
 8006042:	3301      	adds	r3, #1
 8006044:	b29b      	uxth	r3, r3
 8006046:	807b      	strh	r3, [r7, #2]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 8006048:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800604c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006050:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006054:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006058:	f000 ff64 	bl	8006f24 <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 800605c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006060:	883b      	ldrh	r3, [r7, #0]
 8006062:	4611      	mov	r1, r2
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fcbb 	bl	80069e0 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 800606a:	4b09      	ldr	r3, [pc, #36]	; (8006090 <LCD_DrawFastHLine+0xe8>)
 800606c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006070:	1e5a      	subs	r2, r3, #1
 8006072:	4b06      	ldr	r3, [pc, #24]	; (800608c <LCD_DrawFastHLine+0xe4>)
 8006074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006078:	3b01      	subs	r3, #1
 800607a:	2100      	movs	r1, #0
 800607c:	2000      	movs	r0, #0
 800607e:	f000 ff51 	bl	8006f24 <LCD_SetAddrWindow>
 8006082:	e000      	b.n	8006086 <LCD_DrawFastHLine+0xde>
		return;
 8006084:	bf00      	nop

}
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	bd90      	pop	{r4, r7, pc}
 800608c:	20000742 	.word	0x20000742
 8006090:	20000740 	.word	0x20000740

08006094 <LCD_DrawFastVLine>:
 * \param h		High of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8006094:	b590      	push	{r4, r7, lr}
 8006096:	b085      	sub	sp, #20
 8006098:	af02      	add	r7, sp, #8
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	4611      	mov	r1, r2
 80060a0:	461a      	mov	r2, r3
 80060a2:	4623      	mov	r3, r4
 80060a4:	80fb      	strh	r3, [r7, #6]
 80060a6:	4603      	mov	r3, r0
 80060a8:	80bb      	strh	r3, [r7, #4]
 80060aa:	460b      	mov	r3, r1
 80060ac:	807b      	strh	r3, [r7, #2]
 80060ae:	4613      	mov	r3, r2
 80060b0:	803b      	strh	r3, [r7, #0]
	// Update in subclasses if desired!
	LCD_DrawLine(x, y, x, y + h - 1, color);
 80060b2:	88ba      	ldrh	r2, [r7, #4]
 80060b4:	887b      	ldrh	r3, [r7, #2]
 80060b6:	4413      	add	r3, r2
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29b      	uxth	r3, r3
 80060be:	b21c      	sxth	r4, r3
 80060c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80060c8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80060cc:	883b      	ldrh	r3, [r7, #0]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	4623      	mov	r3, r4
 80060d2:	f7ff fec7 	bl	8005e64 <LCD_DrawLine>
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd90      	pop	{r4, r7, pc}

080060de <LCD_DrawRect>:
 * \param h			Height of the rectangle to draw
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80060de:	b590      	push	{r4, r7, lr}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	4604      	mov	r4, r0
 80060e6:	4608      	mov	r0, r1
 80060e8:	4611      	mov	r1, r2
 80060ea:	461a      	mov	r2, r3
 80060ec:	4623      	mov	r3, r4
 80060ee:	80fb      	strh	r3, [r7, #6]
 80060f0:	4603      	mov	r3, r0
 80060f2:	80bb      	strh	r3, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	807b      	strh	r3, [r7, #2]
 80060f8:	4613      	mov	r3, r2
 80060fa:	803b      	strh	r3, [r7, #0]
	LCD_DrawFastHLine(x, y, w, color);
 80060fc:	8b3b      	ldrh	r3, [r7, #24]
 80060fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006102:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006106:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800610a:	f7ff ff4d 	bl	8005fa8 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x, y + h - 1, w, color);
 800610e:	88ba      	ldrh	r2, [r7, #4]
 8006110:	883b      	ldrh	r3, [r7, #0]
 8006112:	4413      	add	r3, r2
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29b      	uxth	r3, r3
 800611a:	b219      	sxth	r1, r3
 800611c:	8b3b      	ldrh	r3, [r7, #24]
 800611e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006122:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006126:	f7ff ff3f 	bl	8005fa8 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y, h, color);
 800612a:	8b3b      	ldrh	r3, [r7, #24]
 800612c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006130:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006134:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006138:	f7ff ffac 	bl	8006094 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y, h, color);
 800613c:	88fa      	ldrh	r2, [r7, #6]
 800613e:	887b      	ldrh	r3, [r7, #2]
 8006140:	4413      	add	r3, r2
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29b      	uxth	r3, r3
 8006148:	b218      	sxth	r0, r3
 800614a:	8b3b      	ldrh	r3, [r7, #24]
 800614c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006150:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006154:	f7ff ff9e 	bl	8006094 <LCD_DrawFastVLine>
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bd90      	pop	{r4, r7, pc}

08006160 <LCD_DrawRoundRect>:
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b085      	sub	sp, #20
 8006164:	af02      	add	r7, sp, #8
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	4611      	mov	r1, r2
 800616c:	461a      	mov	r2, r3
 800616e:	4623      	mov	r3, r4
 8006170:	80fb      	strh	r3, [r7, #6]
 8006172:	4603      	mov	r3, r0
 8006174:	80bb      	strh	r3, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	807b      	strh	r3, [r7, #2]
 800617a:	4613      	mov	r3, r2
 800617c:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_DrawFastHLine(x + r, y, w - 2 * r, color); // Top
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	8b3b      	ldrh	r3, [r7, #24]
 8006182:	4413      	add	r3, r2
 8006184:	b29b      	uxth	r3, r3
 8006186:	b218      	sxth	r0, r3
 8006188:	887a      	ldrh	r2, [r7, #2]
 800618a:	8b3b      	ldrh	r3, [r7, #24]
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	b29b      	uxth	r3, r3
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	b29b      	uxth	r3, r3
 8006194:	b21a      	sxth	r2, r3
 8006196:	8bbb      	ldrh	r3, [r7, #28]
 8006198:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800619c:	f7ff ff04 	bl	8005fa8 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 80061a0:	88fa      	ldrh	r2, [r7, #6]
 80061a2:	8b3b      	ldrh	r3, [r7, #24]
 80061a4:	4413      	add	r3, r2
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	b218      	sxth	r0, r3
 80061aa:	88ba      	ldrh	r2, [r7, #4]
 80061ac:	883b      	ldrh	r3, [r7, #0]
 80061ae:	4413      	add	r3, r2
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	b219      	sxth	r1, r3
 80061b8:	887a      	ldrh	r2, [r7, #2]
 80061ba:	8b3b      	ldrh	r3, [r7, #24]
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	b29b      	uxth	r3, r3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	b21a      	sxth	r2, r3
 80061c6:	8bbb      	ldrh	r3, [r7, #28]
 80061c8:	f7ff feee 	bl	8005fa8 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y + r, h - 2 * r, color); // Left
 80061cc:	88ba      	ldrh	r2, [r7, #4]
 80061ce:	8b3b      	ldrh	r3, [r7, #24]
 80061d0:	4413      	add	r3, r2
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	b219      	sxth	r1, r3
 80061d6:	883a      	ldrh	r2, [r7, #0]
 80061d8:	8b3b      	ldrh	r3, [r7, #24]
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	b29b      	uxth	r3, r3
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	b21a      	sxth	r2, r3
 80061e4:	8bbb      	ldrh	r3, [r7, #28]
 80061e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80061ea:	f7ff ff53 	bl	8006094 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 80061ee:	88fa      	ldrh	r2, [r7, #6]
 80061f0:	887b      	ldrh	r3, [r7, #2]
 80061f2:	4413      	add	r3, r2
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	b218      	sxth	r0, r3
 80061fc:	88ba      	ldrh	r2, [r7, #4]
 80061fe:	8b3b      	ldrh	r3, [r7, #24]
 8006200:	4413      	add	r3, r2
 8006202:	b29b      	uxth	r3, r3
 8006204:	b219      	sxth	r1, r3
 8006206:	883a      	ldrh	r2, [r7, #0]
 8006208:	8b3b      	ldrh	r3, [r7, #24]
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	b29b      	uxth	r3, r3
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	b29b      	uxth	r3, r3
 8006212:	b21a      	sxth	r2, r3
 8006214:	8bbb      	ldrh	r3, [r7, #28]
 8006216:	f7ff ff3d 	bl	8006094 <LCD_DrawFastVLine>
	// draw four corners
	LCD_DrawCircleHelper(x + r, y + r, r, 1, color);
 800621a:	88fa      	ldrh	r2, [r7, #6]
 800621c:	8b3b      	ldrh	r3, [r7, #24]
 800621e:	4413      	add	r3, r2
 8006220:	b29b      	uxth	r3, r3
 8006222:	b218      	sxth	r0, r3
 8006224:	88ba      	ldrh	r2, [r7, #4]
 8006226:	8b3b      	ldrh	r3, [r7, #24]
 8006228:	4413      	add	r3, r2
 800622a:	b29b      	uxth	r3, r3
 800622c:	b219      	sxth	r1, r3
 800622e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006232:	8bbb      	ldrh	r3, [r7, #28]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	2301      	movs	r3, #1
 8006238:	f000 f84b 	bl	80062d2 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	887b      	ldrh	r3, [r7, #2]
 8006240:	4413      	add	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	8b3b      	ldrh	r3, [r7, #24]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29b      	uxth	r3, r3
 800624e:	b218      	sxth	r0, r3
 8006250:	88ba      	ldrh	r2, [r7, #4]
 8006252:	8b3b      	ldrh	r3, [r7, #24]
 8006254:	4413      	add	r3, r2
 8006256:	b29b      	uxth	r3, r3
 8006258:	b219      	sxth	r1, r3
 800625a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800625e:	8bbb      	ldrh	r3, [r7, #28]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	2302      	movs	r3, #2
 8006264:	f000 f835 	bl	80062d2 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	887b      	ldrh	r3, [r7, #2]
 800626c:	4413      	add	r3, r2
 800626e:	b29a      	uxth	r2, r3
 8006270:	8b3b      	ldrh	r3, [r7, #24]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29b      	uxth	r3, r3
 800627a:	b218      	sxth	r0, r3
 800627c:	88ba      	ldrh	r2, [r7, #4]
 800627e:	883b      	ldrh	r3, [r7, #0]
 8006280:	4413      	add	r3, r2
 8006282:	b29a      	uxth	r2, r3
 8006284:	8b3b      	ldrh	r3, [r7, #24]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29b      	uxth	r3, r3
 800628e:	b219      	sxth	r1, r3
 8006290:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006294:	8bbb      	ldrh	r3, [r7, #28]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2304      	movs	r3, #4
 800629a:	f000 f81a 	bl	80062d2 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 800629e:	88fa      	ldrh	r2, [r7, #6]
 80062a0:	8b3b      	ldrh	r3, [r7, #24]
 80062a2:	4413      	add	r3, r2
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	b218      	sxth	r0, r3
 80062a8:	88ba      	ldrh	r2, [r7, #4]
 80062aa:	883b      	ldrh	r3, [r7, #0]
 80062ac:	4413      	add	r3, r2
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	8b3b      	ldrh	r3, [r7, #24]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	b219      	sxth	r1, r3
 80062bc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80062c0:	8bbb      	ldrh	r3, [r7, #28]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2308      	movs	r3, #8
 80062c6:	f000 f804 	bl	80062d2 <LCD_DrawCircleHelper>
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd90      	pop	{r4, r7, pc}

080062d2 <LCD_DrawCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 80062d2:	b590      	push	{r4, r7, lr}
 80062d4:	b087      	sub	sp, #28
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	4604      	mov	r4, r0
 80062da:	4608      	mov	r0, r1
 80062dc:	4611      	mov	r1, r2
 80062de:	461a      	mov	r2, r3
 80062e0:	4623      	mov	r3, r4
 80062e2:	80fb      	strh	r3, [r7, #6]
 80062e4:	4603      	mov	r3, r0
 80062e6:	80bb      	strh	r3, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	807b      	strh	r3, [r7, #2]
 80062ec:	4613      	mov	r3, r2
 80062ee:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80062f0:	887b      	ldrh	r3, [r7, #2]
 80062f2:	f1c3 0301 	rsb	r3, r3, #1
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80062fa:	2301      	movs	r3, #1
 80062fc:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	461a      	mov	r2, r3
 8006302:	03d2      	lsls	r2, r2, #15
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	b29b      	uxth	r3, r3
 800630a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8006310:	887b      	ldrh	r3, [r7, #2]
 8006312:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8006314:	e0a5      	b.n	8006462 <LCD_DrawCircleHelper+0x190>
		if (f >= 0) {
 8006316:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800631a:	2b00      	cmp	r3, #0
 800631c:	db0e      	blt.n	800633c <LCD_DrawCircleHelper+0x6a>
			y--;
 800631e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29b      	uxth	r3, r3
 8006328:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800632a:	8a7b      	ldrh	r3, [r7, #18]
 800632c:	3302      	adds	r3, #2
 800632e:	b29b      	uxth	r3, r3
 8006330:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8006332:	8afa      	ldrh	r2, [r7, #22]
 8006334:	8a7b      	ldrh	r3, [r7, #18]
 8006336:	4413      	add	r3, r2
 8006338:	b29b      	uxth	r3, r3
 800633a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800633c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006340:	b29b      	uxth	r3, r3
 8006342:	3301      	adds	r3, #1
 8006344:	b29b      	uxth	r3, r3
 8006346:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8006348:	8abb      	ldrh	r3, [r7, #20]
 800634a:	3302      	adds	r3, #2
 800634c:	b29b      	uxth	r3, r3
 800634e:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8006350:	8afa      	ldrh	r2, [r7, #22]
 8006352:	8abb      	ldrh	r3, [r7, #20]
 8006354:	4413      	add	r3, r2
 8006356:	b29b      	uxth	r3, r3
 8006358:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 800635a:	787b      	ldrb	r3, [r7, #1]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01b      	beq.n	800639c <LCD_DrawCircleHelper+0xca>
			LCD_DrawPixel(x0 + x, y0 + y, color);
 8006364:	88fa      	ldrh	r2, [r7, #6]
 8006366:	8a3b      	ldrh	r3, [r7, #16]
 8006368:	4413      	add	r3, r2
 800636a:	b29b      	uxth	r3, r3
 800636c:	b218      	sxth	r0, r3
 800636e:	88ba      	ldrh	r2, [r7, #4]
 8006370:	89fb      	ldrh	r3, [r7, #14]
 8006372:	4413      	add	r3, r2
 8006374:	b29b      	uxth	r3, r3
 8006376:	b21b      	sxth	r3, r3
 8006378:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800637a:	4619      	mov	r1, r3
 800637c:	f7ff fd0a 	bl	8005d94 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 + x, color);
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	89fb      	ldrh	r3, [r7, #14]
 8006384:	4413      	add	r3, r2
 8006386:	b29b      	uxth	r3, r3
 8006388:	b218      	sxth	r0, r3
 800638a:	88ba      	ldrh	r2, [r7, #4]
 800638c:	8a3b      	ldrh	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	b29b      	uxth	r3, r3
 8006392:	b21b      	sxth	r3, r3
 8006394:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006396:	4619      	mov	r1, r3
 8006398:	f7ff fcfc 	bl	8005d94 <LCD_DrawPixel>
		}
		if (cornername & 0x2) {
 800639c:	787b      	ldrb	r3, [r7, #1]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d01b      	beq.n	80063de <LCD_DrawCircleHelper+0x10c>
			LCD_DrawPixel(x0 + x, y0 - y, color);
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	8a3b      	ldrh	r3, [r7, #16]
 80063aa:	4413      	add	r3, r2
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	b218      	sxth	r0, r3
 80063b0:	88ba      	ldrh	r2, [r7, #4]
 80063b2:	89fb      	ldrh	r3, [r7, #14]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	b21b      	sxth	r3, r3
 80063ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80063bc:	4619      	mov	r1, r3
 80063be:	f7ff fce9 	bl	8005d94 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 - x, color);
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	89fb      	ldrh	r3, [r7, #14]
 80063c6:	4413      	add	r3, r2
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	b218      	sxth	r0, r3
 80063cc:	88ba      	ldrh	r2, [r7, #4]
 80063ce:	8a3b      	ldrh	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	b21b      	sxth	r3, r3
 80063d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80063d8:	4619      	mov	r1, r3
 80063da:	f7ff fcdb 	bl	8005d94 <LCD_DrawPixel>
		}
		if (cornername & 0x8) {
 80063de:	787b      	ldrb	r3, [r7, #1]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01b      	beq.n	8006420 <LCD_DrawCircleHelper+0x14e>
			LCD_DrawPixel(x0 - y, y0 + x, color);
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	89fb      	ldrh	r3, [r7, #14]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	b218      	sxth	r0, r3
 80063f2:	88ba      	ldrh	r2, [r7, #4]
 80063f4:	8a3b      	ldrh	r3, [r7, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	b21b      	sxth	r3, r3
 80063fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80063fe:	4619      	mov	r1, r3
 8006400:	f7ff fcc8 	bl	8005d94 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 + y, color);
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	8a3b      	ldrh	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	b29b      	uxth	r3, r3
 800640c:	b218      	sxth	r0, r3
 800640e:	88ba      	ldrh	r2, [r7, #4]
 8006410:	89fb      	ldrh	r3, [r7, #14]
 8006412:	4413      	add	r3, r2
 8006414:	b29b      	uxth	r3, r3
 8006416:	b21b      	sxth	r3, r3
 8006418:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800641a:	4619      	mov	r1, r3
 800641c:	f7ff fcba 	bl	8005d94 <LCD_DrawPixel>
		}
		if (cornername & 0x1) {
 8006420:	787b      	ldrb	r3, [r7, #1]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01b      	beq.n	8006462 <LCD_DrawCircleHelper+0x190>
			LCD_DrawPixel(x0 - y, y0 - x, color);
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	89fb      	ldrh	r3, [r7, #14]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	b29b      	uxth	r3, r3
 8006432:	b218      	sxth	r0, r3
 8006434:	88ba      	ldrh	r2, [r7, #4]
 8006436:	8a3b      	ldrh	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	b29b      	uxth	r3, r3
 800643c:	b21b      	sxth	r3, r3
 800643e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006440:	4619      	mov	r1, r3
 8006442:	f7ff fca7 	bl	8005d94 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 - y, color);
 8006446:	88fa      	ldrh	r2, [r7, #6]
 8006448:	8a3b      	ldrh	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	b29b      	uxth	r3, r3
 800644e:	b218      	sxth	r0, r3
 8006450:	88ba      	ldrh	r2, [r7, #4]
 8006452:	89fb      	ldrh	r3, [r7, #14]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	b29b      	uxth	r3, r3
 8006458:	b21b      	sxth	r3, r3
 800645a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800645c:	4619      	mov	r1, r3
 800645e:	f7ff fc99 	bl	8005d94 <LCD_DrawPixel>
	while (x < y) {
 8006462:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006466:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800646a:	429a      	cmp	r2, r3
 800646c:	f6ff af53 	blt.w	8006316 <LCD_DrawCircleHelper+0x44>
		}
	}
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	bd90      	pop	{r4, r7, pc}
	...

0800647c <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b087      	sub	sp, #28
 8006480:	af02      	add	r7, sp, #8
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4623      	mov	r3, r4
 800648c:	80fb      	strh	r3, [r7, #6]
 800648e:	4603      	mov	r3, r0
 8006490:	80bb      	strh	r3, [r7, #4]
 8006492:	460b      	mov	r3, r1
 8006494:	70fb      	strb	r3, [r7, #3]
 8006496:	4613      	mov	r3, r2
 8006498:	803b      	strh	r3, [r7, #0]
	if ((x >= m_width) || // Clip right
 800649a:	4b6e      	ldr	r3, [pc, #440]	; (8006654 <LCD_DrawChar+0x1d8>)
 800649c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	f280 80d0 	bge.w	800664a <LCD_DrawChar+0x1ce>
			(y >= m_height) || // Clip bottom
 80064aa:	4b6b      	ldr	r3, [pc, #428]	; (8006658 <LCD_DrawChar+0x1dc>)
 80064ac:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 80064b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	f280 80c8 	bge.w	800664a <LCD_DrawChar+0x1ce>
			((x + 6 * size - 1) < 0) || // Clip left
 80064ba:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80064be:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80064c2:	4613      	mov	r3, r2
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	4413      	add	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	440b      	add	r3, r1
			(y >= m_height) || // Clip bottom
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f340 80bc 	ble.w	800664a <LCD_DrawChar+0x1ce>
			((y + 8 * size - 1) < 0))   // Clip top
 80064d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80064d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	4413      	add	r3, r2
			((x + 6 * size - 1) < 0) || // Clip left
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f340 80b3 	ble.w	800664a <LCD_DrawChar+0x1ce>
		return;

	for (int8_t i = 0; i < 6; i++) {
 80064e4:	2300      	movs	r3, #0
 80064e6:	73fb      	strb	r3, [r7, #15]
 80064e8:	e0a9      	b.n	800663e <LCD_DrawChar+0x1c2>
		uint8_t line;
		if (i == 5) {
 80064ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	d102      	bne.n	80064f8 <LCD_DrawChar+0x7c>
			line = 0x0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73bb      	strb	r3, [r7, #14]
 80064f6:	e09c      	b.n	8006632 <LCD_DrawChar+0x1b6>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 80064f8:	78fa      	ldrb	r2, [r7, #3]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	441a      	add	r2, r3
 8006500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006504:	4413      	add	r3, r2
 8006506:	4a55      	ldr	r2, [pc, #340]	; (800665c <LCD_DrawChar+0x1e0>)
 8006508:	5cd3      	ldrb	r3, [r2, r3]
 800650a:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 800650c:	2300      	movs	r3, #0
 800650e:	737b      	strb	r3, [r7, #13]
 8006510:	e08a      	b.n	8006628 <LCD_DrawChar+0x1ac>
				if (line & 0x1) {
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d03c      	beq.n	8006596 <LCD_DrawChar+0x11a>
					if (size == 1) { // default size
 800651c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006520:	2b01      	cmp	r3, #1
 8006522:	d112      	bne.n	800654a <LCD_DrawChar+0xce>
						LCD_DrawPixel(x + i, y + j, color);
 8006524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006528:	b29a      	uxth	r2, r3
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	4413      	add	r3, r2
 800652e:	b29b      	uxth	r3, r3
 8006530:	b218      	sxth	r0, r3
 8006532:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006536:	b29a      	uxth	r2, r3
 8006538:	88bb      	ldrh	r3, [r7, #4]
 800653a:	4413      	add	r3, r2
 800653c:	b29b      	uxth	r3, r3
 800653e:	b21b      	sxth	r3, r3
 8006540:	883a      	ldrh	r2, [r7, #0]
 8006542:	4619      	mov	r1, r3
 8006544:	f7ff fc26 	bl	8005d94 <LCD_DrawPixel>
 8006548:	e065      	b.n	8006616 <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 800654a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800654e:	b29a      	uxth	r2, r3
 8006550:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006554:	b29b      	uxth	r3, r3
 8006556:	fb12 f303 	smulbb	r3, r2, r3
 800655a:	b29a      	uxth	r2, r3
 800655c:	88fb      	ldrh	r3, [r7, #6]
 800655e:	4413      	add	r3, r2
 8006560:	b29b      	uxth	r3, r3
 8006562:	b218      	sxth	r0, r3
 8006564:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006568:	b29a      	uxth	r2, r3
 800656a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800656e:	b29b      	uxth	r3, r3
 8006570:	fb12 f303 	smulbb	r3, r2, r3
 8006574:	b29a      	uxth	r2, r3
 8006576:	88bb      	ldrh	r3, [r7, #4]
 8006578:	4413      	add	r3, r2
 800657a:	b29b      	uxth	r3, r3
 800657c:	b219      	sxth	r1, r3
 800657e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006582:	b21a      	sxth	r2, r3
 8006584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006588:	b21c      	sxth	r4, r3
 800658a:	883b      	ldrh	r3, [r7, #0]
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	4623      	mov	r3, r4
 8006590:	f000 f918 	bl	80067c4 <LCD_FillRect>
 8006594:	e03f      	b.n	8006616 <LCD_DrawChar+0x19a>
								color);
					}
				} else if (bg != color) {
 8006596:	8c3a      	ldrh	r2, [r7, #32]
 8006598:	883b      	ldrh	r3, [r7, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d03b      	beq.n	8006616 <LCD_DrawChar+0x19a>
					if (size == 1) { // default size
 800659e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d112      	bne.n	80065cc <LCD_DrawChar+0x150>
						LCD_DrawPixel(x + i, y + j, bg);
 80065a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	88fb      	ldrh	r3, [r7, #6]
 80065ae:	4413      	add	r3, r2
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	b218      	sxth	r0, r3
 80065b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	88bb      	ldrh	r3, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	b29b      	uxth	r3, r3
 80065c0:	b21b      	sxth	r3, r3
 80065c2:	8c3a      	ldrh	r2, [r7, #32]
 80065c4:	4619      	mov	r1, r3
 80065c6:	f7ff fbe5 	bl	8005d94 <LCD_DrawPixel>
 80065ca:	e024      	b.n	8006616 <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 80065cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	fb12 f303 	smulbb	r3, r2, r3
 80065dc:	b29a      	uxth	r2, r3
 80065de:	88fb      	ldrh	r3, [r7, #6]
 80065e0:	4413      	add	r3, r2
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	b218      	sxth	r0, r3
 80065e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	fb12 f303 	smulbb	r3, r2, r3
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	88bb      	ldrh	r3, [r7, #4]
 80065fa:	4413      	add	r3, r2
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	b219      	sxth	r1, r3
 8006600:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006604:	b21a      	sxth	r2, r3
 8006606:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800660a:	b21c      	sxth	r4, r3
 800660c:	8c3b      	ldrh	r3, [r7, #32]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	4623      	mov	r3, r4
 8006612:	f000 f8d7 	bl	80067c4 <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	085b      	lsrs	r3, r3, #1
 800661a:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 800661c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006620:	b2db      	uxtb	r3, r3
 8006622:	3301      	adds	r3, #1
 8006624:	b2db      	uxtb	r3, r3
 8006626:	737b      	strb	r3, [r7, #13]
 8006628:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800662c:	2b07      	cmp	r3, #7
 800662e:	f77f af70 	ble.w	8006512 <LCD_DrawChar+0x96>
	for (int8_t i = 0; i < 6; i++) {
 8006632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	3301      	adds	r3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	73fb      	strb	r3, [r7, #15]
 800663e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006642:	2b05      	cmp	r3, #5
 8006644:	f77f af51 	ble.w	80064ea <LCD_DrawChar+0x6e>
 8006648:	e000      	b.n	800664c <LCD_DrawChar+0x1d0>
		return;
 800664a:	bf00      	nop
			}
		}
	}
}
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}
 8006652:	bf00      	nop
 8006654:	20000740 	.word	0x20000740
 8006658:	20000742 	.word	0x20000742
 800665c:	0800bdf8 	.word	0x0800bdf8

08006660 <LCD_FillCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		int16_t delta, uint16_t color) {
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	4604      	mov	r4, r0
 8006668:	4608      	mov	r0, r1
 800666a:	4611      	mov	r1, r2
 800666c:	461a      	mov	r2, r3
 800666e:	4623      	mov	r3, r4
 8006670:	80fb      	strh	r3, [r7, #6]
 8006672:	4603      	mov	r3, r0
 8006674:	80bb      	strh	r3, [r7, #4]
 8006676:	460b      	mov	r3, r1
 8006678:	807b      	strh	r3, [r7, #2]
 800667a:	4613      	mov	r3, r2
 800667c:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800667e:	887b      	ldrh	r3, [r7, #2]
 8006680:	f1c3 0301 	rsb	r3, r3, #1
 8006684:	b29b      	uxth	r3, r3
 8006686:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8006688:	2301      	movs	r3, #1
 800668a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800668c:	887b      	ldrh	r3, [r7, #2]
 800668e:	461a      	mov	r2, r3
 8006690:	03d2      	lsls	r2, r2, #15
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	b29b      	uxth	r3, r3
 8006698:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800669e:	887b      	ldrh	r3, [r7, #2]
 80066a0:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 80066a2:	e083      	b.n	80067ac <LCD_FillCircleHelper+0x14c>
		if (f >= 0) {
 80066a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	db0e      	blt.n	80066ca <LCD_FillCircleHelper+0x6a>
			y--;
 80066ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80066b8:	8a7b      	ldrh	r3, [r7, #18]
 80066ba:	3302      	adds	r3, #2
 80066bc:	b29b      	uxth	r3, r3
 80066be:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80066c0:	8afa      	ldrh	r2, [r7, #22]
 80066c2:	8a7b      	ldrh	r3, [r7, #18]
 80066c4:	4413      	add	r3, r2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80066ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3301      	adds	r3, #1
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80066d6:	8abb      	ldrh	r3, [r7, #20]
 80066d8:	3302      	adds	r3, #2
 80066da:	b29b      	uxth	r3, r3
 80066dc:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80066de:	8afa      	ldrh	r2, [r7, #22]
 80066e0:	8abb      	ldrh	r3, [r7, #20]
 80066e2:	4413      	add	r3, r2
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 80066e8:	787b      	ldrb	r3, [r7, #1]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02b      	beq.n	800674a <LCD_FillCircleHelper+0xea>
			LCD_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 80066f2:	88fa      	ldrh	r2, [r7, #6]
 80066f4:	8a3b      	ldrh	r3, [r7, #16]
 80066f6:	4413      	add	r3, r2
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	b218      	sxth	r0, r3
 80066fc:	88ba      	ldrh	r2, [r7, #4]
 80066fe:	89fb      	ldrh	r3, [r7, #14]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	b29b      	uxth	r3, r3
 8006704:	b219      	sxth	r1, r3
 8006706:	89fb      	ldrh	r3, [r7, #14]
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800670e:	4413      	add	r3, r2
 8006710:	b29b      	uxth	r3, r3
 8006712:	3301      	adds	r3, #1
 8006714:	b29b      	uxth	r3, r3
 8006716:	b21a      	sxth	r2, r3
 8006718:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800671a:	f7ff fcbb 	bl	8006094 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	89fb      	ldrh	r3, [r7, #14]
 8006722:	4413      	add	r3, r2
 8006724:	b29b      	uxth	r3, r3
 8006726:	b218      	sxth	r0, r3
 8006728:	88ba      	ldrh	r2, [r7, #4]
 800672a:	8a3b      	ldrh	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	b29b      	uxth	r3, r3
 8006730:	b219      	sxth	r1, r3
 8006732:	8a3b      	ldrh	r3, [r7, #16]
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800673a:	4413      	add	r3, r2
 800673c:	b29b      	uxth	r3, r3
 800673e:	3301      	adds	r3, #1
 8006740:	b29b      	uxth	r3, r3
 8006742:	b21a      	sxth	r2, r3
 8006744:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006746:	f7ff fca5 	bl	8006094 <LCD_DrawFastVLine>
		}
		if (cornername & 0x2) {
 800674a:	787b      	ldrb	r3, [r7, #1]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d02b      	beq.n	80067ac <LCD_FillCircleHelper+0x14c>
			LCD_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	8a3b      	ldrh	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	b29b      	uxth	r3, r3
 800675c:	b218      	sxth	r0, r3
 800675e:	88ba      	ldrh	r2, [r7, #4]
 8006760:	89fb      	ldrh	r3, [r7, #14]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	b29b      	uxth	r3, r3
 8006766:	b219      	sxth	r1, r3
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006770:	4413      	add	r3, r2
 8006772:	b29b      	uxth	r3, r3
 8006774:	3301      	adds	r3, #1
 8006776:	b29b      	uxth	r3, r3
 8006778:	b21a      	sxth	r2, r3
 800677a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800677c:	f7ff fc8a 	bl	8006094 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8006780:	88fa      	ldrh	r2, [r7, #6]
 8006782:	89fb      	ldrh	r3, [r7, #14]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	b218      	sxth	r0, r3
 800678a:	88ba      	ldrh	r2, [r7, #4]
 800678c:	8a3b      	ldrh	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	b29b      	uxth	r3, r3
 8006792:	b219      	sxth	r1, r3
 8006794:	8a3b      	ldrh	r3, [r7, #16]
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800679c:	4413      	add	r3, r2
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3301      	adds	r3, #1
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	b21a      	sxth	r2, r3
 80067a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067a8:	f7ff fc74 	bl	8006094 <LCD_DrawFastVLine>
	while (x < y) {
 80067ac:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80067b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	f6ff af75 	blt.w	80066a4 <LCD_FillCircleHelper+0x44>
		}
	}
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd90      	pop	{r4, r7, pc}

080067c4 <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 80067c4:	b590      	push	{r4, r7, lr}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4604      	mov	r4, r0
 80067cc:	4608      	mov	r0, r1
 80067ce:	4611      	mov	r1, r2
 80067d0:	461a      	mov	r2, r3
 80067d2:	4623      	mov	r3, r4
 80067d4:	80fb      	strh	r3, [r7, #6]
 80067d6:	4603      	mov	r3, r0
 80067d8:	80bb      	strh	r3, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	807b      	strh	r3, [r7, #2]
 80067de:	4613      	mov	r3, r2
 80067e0:	803b      	strh	r3, [r7, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 80067e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f340 808b 	ble.w	8006902 <LCD_FillRect+0x13e>
 80067ec:	f9b7 3000 	ldrsh.w	r3, [r7]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f340 8086 	ble.w	8006902 <LCD_FillRect+0x13e>
 80067f6:	4b45      	ldr	r3, [pc, #276]	; (800690c <LCD_FillRect+0x148>)
 80067f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006800:	429a      	cmp	r2, r3
 8006802:	da7e      	bge.n	8006902 <LCD_FillRect+0x13e>
 8006804:	4b42      	ldr	r3, [pc, #264]	; (8006910 <LCD_FillRect+0x14c>)
 8006806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800680a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800680e:	429a      	cmp	r2, r3
 8006810:	da77      	bge.n	8006902 <LCD_FillRect+0x13e>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	887b      	ldrh	r3, [r7, #2]
 8006816:	4413      	add	r3, r2
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29b      	uxth	r3, r3
 800681e:	81fb      	strh	r3, [r7, #14]
 8006820:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006824:	2b00      	cmp	r3, #0
 8006826:	db6c      	blt.n	8006902 <LCD_FillRect+0x13e>
 8006828:	88ba      	ldrh	r2, [r7, #4]
 800682a:	883b      	ldrh	r3, [r7, #0]
 800682c:	4413      	add	r3, r2
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29b      	uxth	r3, r3
 8006834:	81bb      	strh	r3, [r7, #12]
 8006836:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	db61      	blt.n	8006902 <LCD_FillRect+0x13e>
		return;
	if (x < 0) { // Clip left
 800683e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006842:	2b00      	cmp	r3, #0
 8006844:	da06      	bge.n	8006854 <LCD_FillRect+0x90>
		w += x;
 8006846:	887a      	ldrh	r2, [r7, #2]
 8006848:	88fb      	ldrh	r3, [r7, #6]
 800684a:	4413      	add	r3, r2
 800684c:	b29b      	uxth	r3, r3
 800684e:	807b      	strh	r3, [r7, #2]
		x = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	80fb      	strh	r3, [r7, #6]
	}
	if (y1 < 0) { // Clip top
 8006854:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	da06      	bge.n	800686a <LCD_FillRect+0xa6>
		h += y1;
 800685c:	883a      	ldrh	r2, [r7, #0]
 800685e:	88bb      	ldrh	r3, [r7, #4]
 8006860:	4413      	add	r3, r2
 8006862:	b29b      	uxth	r3, r3
 8006864:	803b      	strh	r3, [r7, #0]
		y1 = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	80bb      	strh	r3, [r7, #4]
	}
	if (x2 >= m_width) { // Clip right
 800686a:	4b28      	ldr	r3, [pc, #160]	; (800690c <LCD_FillRect+0x148>)
 800686c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006870:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006874:	429a      	cmp	r2, r3
 8006876:	db0d      	blt.n	8006894 <LCD_FillRect+0xd0>
		x2 = m_width - 1;
 8006878:	4b24      	ldr	r3, [pc, #144]	; (800690c <LCD_FillRect+0x148>)
 800687a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29b      	uxth	r3, r3
 8006884:	81fb      	strh	r3, [r7, #14]
		w = x2 - x + 1;
 8006886:	89fa      	ldrh	r2, [r7, #14]
 8006888:	88fb      	ldrh	r3, [r7, #6]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	b29b      	uxth	r3, r3
 800688e:	3301      	adds	r3, #1
 8006890:	b29b      	uxth	r3, r3
 8006892:	807b      	strh	r3, [r7, #2]
	}
	if (y2 >= m_height) { // Clip bottom
 8006894:	4b1e      	ldr	r3, [pc, #120]	; (8006910 <LCD_FillRect+0x14c>)
 8006896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800689a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800689e:	429a      	cmp	r2, r3
 80068a0:	db0d      	blt.n	80068be <LCD_FillRect+0xfa>
		y2 = m_height - 1;
 80068a2:	4b1b      	ldr	r3, [pc, #108]	; (8006910 <LCD_FillRect+0x14c>)
 80068a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	81bb      	strh	r3, [r7, #12]
		h = y2 - y1 + 1;
 80068b0:	89ba      	ldrh	r2, [r7, #12]
 80068b2:	88bb      	ldrh	r3, [r7, #4]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3301      	adds	r3, #1
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	803b      	strh	r3, [r7, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 80068be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80068c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80068c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80068ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068ce:	f000 fb29 	bl	8006f24 <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 80068d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80068d6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80068da:	fb03 f202 	mul.w	r2, r3, r2
 80068de:	8c3b      	ldrh	r3, [r7, #32]
 80068e0:	4611      	mov	r1, r2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 f87c 	bl	80069e0 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80068e8:	4b08      	ldr	r3, [pc, #32]	; (800690c <LCD_FillRect+0x148>)
 80068ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068ee:	1e5a      	subs	r2, r3, #1
 80068f0:	4b07      	ldr	r3, [pc, #28]	; (8006910 <LCD_FillRect+0x14c>)
 80068f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	2100      	movs	r1, #0
 80068fa:	2000      	movs	r0, #0
 80068fc:	f000 fb12 	bl	8006f24 <LCD_SetAddrWindow>
 8006900:	e000      	b.n	8006904 <LCD_FillRect+0x140>
		return;
 8006902:	bf00      	nop
}
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	bd90      	pop	{r4, r7, pc}
 800690a:	bf00      	nop
 800690c:	20000740 	.word	0x20000740
 8006910:	20000742 	.word	0x20000742

08006914 <LCD_FillRoundRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8006914:	b590      	push	{r4, r7, lr}
 8006916:	b085      	sub	sp, #20
 8006918:	af02      	add	r7, sp, #8
 800691a:	4604      	mov	r4, r0
 800691c:	4608      	mov	r0, r1
 800691e:	4611      	mov	r1, r2
 8006920:	461a      	mov	r2, r3
 8006922:	4623      	mov	r3, r4
 8006924:	80fb      	strh	r3, [r7, #6]
 8006926:	4603      	mov	r3, r0
 8006928:	80bb      	strh	r3, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	807b      	strh	r3, [r7, #2]
 800692e:	4613      	mov	r3, r2
 8006930:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_FillRect(x + r, y, w - 2 * r, h, color);
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	8b3b      	ldrh	r3, [r7, #24]
 8006936:	4413      	add	r3, r2
 8006938:	b29b      	uxth	r3, r3
 800693a:	b218      	sxth	r0, r3
 800693c:	887a      	ldrh	r2, [r7, #2]
 800693e:	8b3b      	ldrh	r3, [r7, #24]
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	b29b      	uxth	r3, r3
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	b29b      	uxth	r3, r3
 8006948:	b21a      	sxth	r2, r3
 800694a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800694e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006952:	8bbb      	ldrh	r3, [r7, #28]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	4623      	mov	r3, r4
 8006958:	f7ff ff34 	bl	80067c4 <LCD_FillRect>

	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	887b      	ldrh	r3, [r7, #2]
 8006960:	4413      	add	r3, r2
 8006962:	b29a      	uxth	r2, r3
 8006964:	8b3b      	ldrh	r3, [r7, #24]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29b      	uxth	r3, r3
 800696e:	b218      	sxth	r0, r3
 8006970:	88ba      	ldrh	r2, [r7, #4]
 8006972:	8b3b      	ldrh	r3, [r7, #24]
 8006974:	4413      	add	r3, r2
 8006976:	b29b      	uxth	r3, r3
 8006978:	b219      	sxth	r1, r3
 800697a:	883a      	ldrh	r2, [r7, #0]
 800697c:	8b3b      	ldrh	r3, [r7, #24]
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	b29b      	uxth	r3, r3
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b29b      	uxth	r3, r3
 800698a:	b21b      	sxth	r3, r3
 800698c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8006990:	8bba      	ldrh	r2, [r7, #28]
 8006992:	9201      	str	r2, [sp, #4]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	2301      	movs	r3, #1
 8006998:	4622      	mov	r2, r4
 800699a:	f7ff fe61 	bl	8006660 <LCD_FillCircleHelper>
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 800699e:	88fa      	ldrh	r2, [r7, #6]
 80069a0:	8b3b      	ldrh	r3, [r7, #24]
 80069a2:	4413      	add	r3, r2
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	b218      	sxth	r0, r3
 80069a8:	88ba      	ldrh	r2, [r7, #4]
 80069aa:	8b3b      	ldrh	r3, [r7, #24]
 80069ac:	4413      	add	r3, r2
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	b219      	sxth	r1, r3
 80069b2:	883a      	ldrh	r2, [r7, #0]
 80069b4:	8b3b      	ldrh	r3, [r7, #24]
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	b21b      	sxth	r3, r3
 80069c4:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80069c8:	8bba      	ldrh	r2, [r7, #28]
 80069ca:	9201      	str	r2, [sp, #4]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	2302      	movs	r3, #2
 80069d0:	4622      	mov	r2, r4
 80069d2:	f7ff fe45 	bl	8006660 <LCD_FillCircleHelper>
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd90      	pop	{r4, r7, pc}
	...

080069e0 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	6039      	str	r1, [r7, #0]
 80069ea:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	0a1b      	lsrs	r3, r3, #8
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	733b      	strb	r3, [r7, #12]
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	72fb      	strb	r3, [r7, #11]

	LCD_CS_LOW();
 80069f8:	2200      	movs	r2, #0
 80069fa:	2100      	movs	r1, #0
 80069fc:	4895      	ldr	r0, [pc, #596]	; (8006c54 <LCD_Flood+0x274>)
 80069fe:	f7fd feb7 	bl	8004770 <gpio_write>
	LCD_CD_LOW();
 8006a02:	2200      	movs	r2, #0
 8006a04:	2104      	movs	r1, #4
 8006a06:	4894      	ldr	r0, [pc, #592]	; (8006c58 <LCD_Flood+0x278>)
 8006a08:	f7fd feb2 	bl	8004770 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	f000 fb19 	bl	8007044 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 8006a12:	2022      	movs	r0, #34	; 0x22
 8006a14:	f000 fb16 	bl	8007044 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 8006a18:	2201      	movs	r2, #1
 8006a1a:	2104      	movs	r1, #4
 8006a1c:	488e      	ldr	r0, [pc, #568]	; (8006c58 <LCD_Flood+0x278>)
 8006a1e:	f7fd fea7 	bl	8004770 <gpio_write>
	LCD_Write8(hi);
 8006a22:	7b3b      	ldrb	r3, [r7, #12]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fb0d 	bl	8007044 <LCD_Write8>
	LCD_Write8(lo);
 8006a2a:	7afb      	ldrb	r3, [r7, #11]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fb09 	bl	8007044 <LCD_Write8>
	len--;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	099b      	lsrs	r3, r3, #6
 8006a3c:	81fb      	strh	r3, [r7, #14]
	if (hi == lo) {
 8006a3e:	7b3a      	ldrb	r2, [r7, #12]
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	f040 80e4 	bne.w	8006c10 <LCD_Flood+0x230>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8006a48:	e088      	b.n	8006b5c <LCD_Flood+0x17c>
			i = 16; // 64 pixels/block / 4 pixels/pass
 8006a4a:	2310      	movs	r3, #16
 8006a4c:	737b      	strb	r3, [r7, #13]
			do {
				LCD_WR_STROBE();
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2101      	movs	r1, #1
 8006a52:	4881      	ldr	r0, [pc, #516]	; (8006c58 <LCD_Flood+0x278>)
 8006a54:	f7fd fe8c 	bl	8004770 <gpio_write>
 8006a58:	2001      	movs	r0, #1
 8006a5a:	f7ff f877 	bl	8005b4c <delay>
 8006a5e:	2201      	movs	r2, #1
 8006a60:	2101      	movs	r1, #1
 8006a62:	487d      	ldr	r0, [pc, #500]	; (8006c58 <LCD_Flood+0x278>)
 8006a64:	f7fd fe84 	bl	8004770 <gpio_write>
 8006a68:	2001      	movs	r0, #1
 8006a6a:	f7ff f86f 	bl	8005b4c <delay>
				LCD_WR_STROBE();
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2101      	movs	r1, #1
 8006a72:	4879      	ldr	r0, [pc, #484]	; (8006c58 <LCD_Flood+0x278>)
 8006a74:	f7fd fe7c 	bl	8004770 <gpio_write>
 8006a78:	2001      	movs	r0, #1
 8006a7a:	f7ff f867 	bl	8005b4c <delay>
 8006a7e:	2201      	movs	r2, #1
 8006a80:	2101      	movs	r1, #1
 8006a82:	4875      	ldr	r0, [pc, #468]	; (8006c58 <LCD_Flood+0x278>)
 8006a84:	f7fd fe74 	bl	8004770 <gpio_write>
 8006a88:	2001      	movs	r0, #1
 8006a8a:	f7ff f85f 	bl	8005b4c <delay>
				LCD_WR_STROBE();
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2101      	movs	r1, #1
 8006a92:	4871      	ldr	r0, [pc, #452]	; (8006c58 <LCD_Flood+0x278>)
 8006a94:	f7fd fe6c 	bl	8004770 <gpio_write>
 8006a98:	2001      	movs	r0, #1
 8006a9a:	f7ff f857 	bl	8005b4c <delay>
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	486d      	ldr	r0, [pc, #436]	; (8006c58 <LCD_Flood+0x278>)
 8006aa4:	f7fd fe64 	bl	8004770 <gpio_write>
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	f7ff f84f 	bl	8005b4c <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	4869      	ldr	r0, [pc, #420]	; (8006c58 <LCD_Flood+0x278>)
 8006ab4:	f7fd fe5c 	bl	8004770 <gpio_write>
 8006ab8:	2001      	movs	r0, #1
 8006aba:	f7ff f847 	bl	8005b4c <delay>
 8006abe:	2201      	movs	r2, #1
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	4865      	ldr	r0, [pc, #404]	; (8006c58 <LCD_Flood+0x278>)
 8006ac4:	f7fd fe54 	bl	8004770 <gpio_write>
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f7ff f83f 	bl	8005b4c <delay>
				LCD_WR_STROBE();
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	4861      	ldr	r0, [pc, #388]	; (8006c58 <LCD_Flood+0x278>)
 8006ad4:	f7fd fe4c 	bl	8004770 <gpio_write>
 8006ad8:	2001      	movs	r0, #1
 8006ada:	f7ff f837 	bl	8005b4c <delay>
 8006ade:	2201      	movs	r2, #1
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	485d      	ldr	r0, [pc, #372]	; (8006c58 <LCD_Flood+0x278>)
 8006ae4:	f7fd fe44 	bl	8004770 <gpio_write>
 8006ae8:	2001      	movs	r0, #1
 8006aea:	f7ff f82f 	bl	8005b4c <delay>
				LCD_WR_STROBE();
 8006aee:	2200      	movs	r2, #0
 8006af0:	2101      	movs	r1, #1
 8006af2:	4859      	ldr	r0, [pc, #356]	; (8006c58 <LCD_Flood+0x278>)
 8006af4:	f7fd fe3c 	bl	8004770 <gpio_write>
 8006af8:	2001      	movs	r0, #1
 8006afa:	f7ff f827 	bl	8005b4c <delay>
 8006afe:	2201      	movs	r2, #1
 8006b00:	2101      	movs	r1, #1
 8006b02:	4855      	ldr	r0, [pc, #340]	; (8006c58 <LCD_Flood+0x278>)
 8006b04:	f7fd fe34 	bl	8004770 <gpio_write>
 8006b08:	2001      	movs	r0, #1
 8006b0a:	f7ff f81f 	bl	8005b4c <delay>
				LCD_WR_STROBE();
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2101      	movs	r1, #1
 8006b12:	4851      	ldr	r0, [pc, #324]	; (8006c58 <LCD_Flood+0x278>)
 8006b14:	f7fd fe2c 	bl	8004770 <gpio_write>
 8006b18:	2001      	movs	r0, #1
 8006b1a:	f7ff f817 	bl	8005b4c <delay>
 8006b1e:	2201      	movs	r2, #1
 8006b20:	2101      	movs	r1, #1
 8006b22:	484d      	ldr	r0, [pc, #308]	; (8006c58 <LCD_Flood+0x278>)
 8006b24:	f7fd fe24 	bl	8004770 <gpio_write>
 8006b28:	2001      	movs	r0, #1
 8006b2a:	f7ff f80f 	bl	8005b4c <delay>
				LCD_WR_STROBE(); // x 4 pixels
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2101      	movs	r1, #1
 8006b32:	4849      	ldr	r0, [pc, #292]	; (8006c58 <LCD_Flood+0x278>)
 8006b34:	f7fd fe1c 	bl	8004770 <gpio_write>
 8006b38:	2001      	movs	r0, #1
 8006b3a:	f7ff f807 	bl	8005b4c <delay>
 8006b3e:	2201      	movs	r2, #1
 8006b40:	2101      	movs	r1, #1
 8006b42:	4845      	ldr	r0, [pc, #276]	; (8006c58 <LCD_Flood+0x278>)
 8006b44:	f7fd fe14 	bl	8004770 <gpio_write>
 8006b48:	2001      	movs	r0, #1
 8006b4a:	f7fe ffff 	bl	8005b4c <delay>
			} while (--i);
 8006b4e:	7b7b      	ldrb	r3, [r7, #13]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	737b      	strb	r3, [r7, #13]
 8006b54:	7b7b      	ldrb	r3, [r7, #13]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f47f af79 	bne.w	8006a4e <LCD_Flood+0x6e>
		while (blocks--) {
 8006b5c:	89fb      	ldrh	r3, [r7, #14]
 8006b5e:	1e5a      	subs	r2, r3, #1
 8006b60:	81fa      	strh	r2, [r7, #14]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f47f af71 	bne.w	8006a4a <LCD_Flood+0x6a>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b70:	737b      	strb	r3, [r7, #13]
 8006b72:	e01f      	b.n	8006bb4 <LCD_Flood+0x1d4>
			LCD_WR_STROBE();
 8006b74:	2200      	movs	r2, #0
 8006b76:	2101      	movs	r1, #1
 8006b78:	4837      	ldr	r0, [pc, #220]	; (8006c58 <LCD_Flood+0x278>)
 8006b7a:	f7fd fdf9 	bl	8004770 <gpio_write>
 8006b7e:	2001      	movs	r0, #1
 8006b80:	f7fe ffe4 	bl	8005b4c <delay>
 8006b84:	2201      	movs	r2, #1
 8006b86:	2101      	movs	r1, #1
 8006b88:	4833      	ldr	r0, [pc, #204]	; (8006c58 <LCD_Flood+0x278>)
 8006b8a:	f7fd fdf1 	bl	8004770 <gpio_write>
 8006b8e:	2001      	movs	r0, #1
 8006b90:	f7fe ffdc 	bl	8005b4c <delay>
			LCD_WR_STROBE();
 8006b94:	2200      	movs	r2, #0
 8006b96:	2101      	movs	r1, #1
 8006b98:	482f      	ldr	r0, [pc, #188]	; (8006c58 <LCD_Flood+0x278>)
 8006b9a:	f7fd fde9 	bl	8004770 <gpio_write>
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	f7fe ffd4 	bl	8005b4c <delay>
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	482b      	ldr	r0, [pc, #172]	; (8006c58 <LCD_Flood+0x278>)
 8006baa:	f7fd fde1 	bl	8004770 <gpio_write>
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f7fe ffcc 	bl	8005b4c <delay>
		for (i = (uint8_t) len & 63; i--;) {
 8006bb4:	7b7b      	ldrb	r3, [r7, #13]
 8006bb6:	1e5a      	subs	r2, r3, #1
 8006bb8:	737a      	strb	r2, [r7, #13]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1da      	bne.n	8006b74 <LCD_Flood+0x194>
 8006bbe:	e03f      	b.n	8006c40 <LCD_Flood+0x260>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	737b      	strb	r3, [r7, #13]
			do {
				LCD_Write8(hi);
 8006bc4:	7b3b      	ldrb	r3, [r7, #12]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fa3c 	bl	8007044 <LCD_Write8>
				LCD_Write8(lo);
 8006bcc:	7afb      	ldrb	r3, [r7, #11]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fa38 	bl	8007044 <LCD_Write8>
				LCD_Write8(hi);
 8006bd4:	7b3b      	ldrb	r3, [r7, #12]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fa34 	bl	8007044 <LCD_Write8>
				LCD_Write8(lo);
 8006bdc:	7afb      	ldrb	r3, [r7, #11]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fa30 	bl	8007044 <LCD_Write8>
				LCD_Write8(hi);
 8006be4:	7b3b      	ldrb	r3, [r7, #12]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fa2c 	bl	8007044 <LCD_Write8>
				LCD_Write8(lo);
 8006bec:	7afb      	ldrb	r3, [r7, #11]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fa28 	bl	8007044 <LCD_Write8>
				LCD_Write8(hi);
 8006bf4:	7b3b      	ldrb	r3, [r7, #12]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fa24 	bl	8007044 <LCD_Write8>
				LCD_Write8(lo);
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fa20 	bl	8007044 <LCD_Write8>
			} while (--i);
 8006c04:	7b7b      	ldrb	r3, [r7, #13]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	737b      	strb	r3, [r7, #13]
 8006c0a:	7b7b      	ldrb	r3, [r7, #13]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1d9      	bne.n	8006bc4 <LCD_Flood+0x1e4>
		while (blocks--) {
 8006c10:	89fb      	ldrh	r3, [r7, #14]
 8006c12:	1e5a      	subs	r2, r3, #1
 8006c14:	81fa      	strh	r2, [r7, #14]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1d2      	bne.n	8006bc0 <LCD_Flood+0x1e0>
		}
		for (i = (uint8_t) len & 63; i--;) {
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c22:	737b      	strb	r3, [r7, #13]
 8006c24:	e007      	b.n	8006c36 <LCD_Flood+0x256>
			LCD_Write8(hi);
 8006c26:	7b3b      	ldrb	r3, [r7, #12]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fa0b 	bl	8007044 <LCD_Write8>
			LCD_Write8(lo);
 8006c2e:	7afb      	ldrb	r3, [r7, #11]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fa07 	bl	8007044 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 8006c36:	7b7b      	ldrb	r3, [r7, #13]
 8006c38:	1e5a      	subs	r2, r3, #1
 8006c3a:	737a      	strb	r2, [r7, #13]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1f2      	bne.n	8006c26 <LCD_Flood+0x246>
		}
	}
	LCD_CS_HIGH();
 8006c40:	2201      	movs	r2, #1
 8006c42:	2100      	movs	r1, #0
 8006c44:	4803      	ldr	r0, [pc, #12]	; (8006c54 <LCD_Flood+0x274>)
 8006c46:	f7fd fd93 	bl	8004770 <gpio_write>
}
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40020400 	.word	0x40020400
 8006c58:	40020000 	.word	0x40020000

08006c5c <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8006c5c:	b40f      	push	{r0, r1, r2, r3}
 8006c5e:	b5b0      	push	{r4, r5, r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8006c64:	f107 031c 	add.w	r3, r7, #28
 8006c68:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	69b9      	ldr	r1, [r7, #24]
 8006c6e:	483d      	ldr	r0, [pc, #244]	; (8006d64 <LCD_Printf+0x108>)
 8006c70:	f002 ffec 	bl	8009c4c <vsiprintf>
	va_end(lst);

	p = buf;
 8006c74:	4b3b      	ldr	r3, [pc, #236]	; (8006d64 <LCD_Printf+0x108>)
 8006c76:	607b      	str	r3, [r7, #4]
	while (*p) {
 8006c78:	e068      	b.n	8006d4c <LCD_Printf+0xf0>
		if (*p == '\n') {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b0a      	cmp	r3, #10
 8006c80:	d111      	bne.n	8006ca6 <LCD_Printf+0x4a>
			m_cursor_y += m_textsize * 8;
 8006c82:	4b39      	ldr	r3, [pc, #228]	; (8006d68 <LCD_Printf+0x10c>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	4b37      	ldr	r3, [pc, #220]	; (8006d6c <LCD_Printf+0x110>)
 8006c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4413      	add	r3, r2
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	b21a      	sxth	r2, r3
 8006c9a:	4b34      	ldr	r3, [pc, #208]	; (8006d6c <LCD_Printf+0x110>)
 8006c9c:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8006c9e:	4b34      	ldr	r3, [pc, #208]	; (8006d70 <LCD_Printf+0x114>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e04f      	b.n	8006d46 <LCD_Printf+0xea>
		} else if (*p == '\r') {
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b0d      	cmp	r3, #13
 8006cac:	d04b      	beq.n	8006d46 <LCD_Printf+0xea>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8006cae:	4b30      	ldr	r3, [pc, #192]	; (8006d70 <LCD_Printf+0x114>)
 8006cb0:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006cb4:	4b2d      	ldr	r3, [pc, #180]	; (8006d6c <LCD_Printf+0x110>)
 8006cb6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	781c      	ldrb	r4, [r3, #0]
 8006cbe:	4b2d      	ldr	r3, [pc, #180]	; (8006d74 <LCD_Printf+0x118>)
 8006cc0:	881d      	ldrh	r5, [r3, #0]
 8006cc2:	4b2d      	ldr	r3, [pc, #180]	; (8006d78 <LCD_Printf+0x11c>)
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	4a28      	ldr	r2, [pc, #160]	; (8006d68 <LCD_Printf+0x10c>)
 8006cc8:	7812      	ldrb	r2, [r2, #0]
 8006cca:	9201      	str	r2, [sp, #4]
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	462b      	mov	r3, r5
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	f7ff fbd3 	bl	800647c <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 8006cd6:	4b24      	ldr	r3, [pc, #144]	; (8006d68 <LCD_Printf+0x10c>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	0052      	lsls	r2, r2, #1
 8006ce0:	4413      	add	r3, r2
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	4b22      	ldr	r3, [pc, #136]	; (8006d70 <LCD_Printf+0x114>)
 8006ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	4413      	add	r3, r2
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	b21a      	sxth	r2, r3
 8006cf4:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <LCD_Printf+0x114>)
 8006cf6:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 8006cf8:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <LCD_Printf+0x120>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d022      	beq.n	8006d46 <LCD_Printf+0xea>
 8006d00:	4b1b      	ldr	r3, [pc, #108]	; (8006d70 <LCD_Printf+0x114>)
 8006d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d06:	4619      	mov	r1, r3
 8006d08:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <LCD_Printf+0x124>)
 8006d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	4b15      	ldr	r3, [pc, #84]	; (8006d68 <LCD_Printf+0x10c>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	4613      	mov	r3, r2
 8006d18:	0092      	lsls	r2, r2, #2
 8006d1a:	1a9b      	subs	r3, r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4403      	add	r3, r0
 8006d20:	4299      	cmp	r1, r3
 8006d22:	dd10      	ble.n	8006d46 <LCD_Printf+0xea>
				m_cursor_y += m_textsize * 8;
 8006d24:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <LCD_Printf+0x10c>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <LCD_Printf+0x110>)
 8006d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	4413      	add	r3, r2
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	b21a      	sxth	r2, r3
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <LCD_Printf+0x110>)
 8006d3e:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8006d40:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <LCD_Printf+0x114>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	607b      	str	r3, [r7, #4]
	while (*p) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d192      	bne.n	8006c7a <LCD_Printf+0x1e>
	}
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006d60:	b004      	add	sp, #16
 8006d62:	4770      	bx	lr
 8006d64:	20000750 	.word	0x20000750
 8006d68:	2000074c 	.word	0x2000074c
 8006d6c:	20000746 	.word	0x20000746
 8006d70:	20000744 	.word	0x20000744
 8006d74:	20000748 	.word	0x20000748
 8006d78:	2000074a 	.word	0x2000074a
 8006d7c:	2000074e 	.word	0x2000074e
 8006d80:	20000740 	.word	0x20000740

08006d84 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4824      	ldr	r0, [pc, #144]	; (8006e20 <LCD_Reset+0x9c>)
 8006d90:	f7fd fcee 	bl	8004770 <gpio_write>
	LCD_WR_HIGH();
 8006d94:	2201      	movs	r2, #1
 8006d96:	2101      	movs	r1, #1
 8006d98:	4822      	ldr	r0, [pc, #136]	; (8006e24 <LCD_Reset+0xa0>)
 8006d9a:	f7fd fce9 	bl	8004770 <gpio_write>
	LCD_RD_HIGH();
 8006d9e:	2201      	movs	r2, #1
 8006da0:	2100      	movs	r1, #0
 8006da2:	4820      	ldr	r0, [pc, #128]	; (8006e24 <LCD_Reset+0xa0>)
 8006da4:	f7fd fce4 	bl	8004770 <gpio_write>

	LCD_RST_LOW();
 8006da8:	2200      	movs	r2, #0
 8006daa:	2101      	movs	r1, #1
 8006dac:	481e      	ldr	r0, [pc, #120]	; (8006e28 <LCD_Reset+0xa4>)
 8006dae:	f7fd fcdf 	bl	8004770 <gpio_write>
	delay(100);
 8006db2:	2064      	movs	r0, #100	; 0x64
 8006db4:	f7fe feca 	bl	8005b4c <delay>
	LCD_RST_HIGH();
 8006db8:	2201      	movs	r2, #1
 8006dba:	2101      	movs	r1, #1
 8006dbc:	481a      	ldr	r0, [pc, #104]	; (8006e28 <LCD_Reset+0xa4>)
 8006dbe:	f7fd fcd7 	bl	8004770 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4816      	ldr	r0, [pc, #88]	; (8006e20 <LCD_Reset+0x9c>)
 8006dc8:	f7fd fcd2 	bl	8004770 <gpio_write>

	LCD_CD_LOW();
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2104      	movs	r1, #4
 8006dd0:	4814      	ldr	r0, [pc, #80]	; (8006e24 <LCD_Reset+0xa0>)
 8006dd2:	f7fd fccd 	bl	8004770 <gpio_write>
	LCD_Write8(0x00);
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	f000 f934 	bl	8007044 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	71fb      	strb	r3, [r7, #7]
 8006de0:	e012      	b.n	8006e08 <LCD_Reset+0x84>
		LCD_WR_STROBE(); // Three extra 0x00s
 8006de2:	2200      	movs	r2, #0
 8006de4:	2101      	movs	r1, #1
 8006de6:	480f      	ldr	r0, [pc, #60]	; (8006e24 <LCD_Reset+0xa0>)
 8006de8:	f7fd fcc2 	bl	8004770 <gpio_write>
 8006dec:	2001      	movs	r0, #1
 8006dee:	f7fe fead 	bl	8005b4c <delay>
 8006df2:	2201      	movs	r2, #1
 8006df4:	2101      	movs	r1, #1
 8006df6:	480b      	ldr	r0, [pc, #44]	; (8006e24 <LCD_Reset+0xa0>)
 8006df8:	f7fd fcba 	bl	8004770 <gpio_write>
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	f7fe fea5 	bl	8005b4c <delay>
	for (uint8_t i = 0; i < 3; i++)
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	3301      	adds	r3, #1
 8006e06:	71fb      	strb	r3, [r7, #7]
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d9e9      	bls.n	8006de2 <LCD_Reset+0x5e>
	LCD_CS_HIGH();
 8006e0e:	2201      	movs	r2, #1
 8006e10:	2100      	movs	r1, #0
 8006e12:	4803      	ldr	r0, [pc, #12]	; (8006e20 <LCD_Reset+0x9c>)
 8006e14:	f7fd fcac 	bl	8004770 <gpio_write>
}
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40020400 	.word	0x40020400
 8006e24:	40020000 	.word	0x40020000
 8006e28:	40020800 	.word	0x40020800

08006e2c <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	b21a      	sxth	r2, r3
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <LCD_SetCursor+0x28>)
 8006e3c:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	b21a      	sxth	r2, r3
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <LCD_SetCursor+0x2c>)
 8006e44:	801a      	strh	r2, [r3, #0]
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20000744 	.word	0x20000744
 8006e58:	20000746 	.word	0x20000746

08006e5c <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
	m_textsize = (s > 0) ? s : 1;
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <LCD_SetTextSize+0x14>
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	e000      	b.n	8006e72 <LCD_SetTextSize+0x16>
 8006e70:	2301      	movs	r3, #1
 8006e72:	4a04      	ldr	r2, [pc, #16]	; (8006e84 <LCD_SetTextSize+0x28>)
 8006e74:	7013      	strb	r3, [r2, #0]
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	2000074c 	.word	0x2000074c

08006e88 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	460a      	mov	r2, r1
 8006e92:	80fb      	strh	r3, [r7, #6]
 8006e94:	4613      	mov	r3, r2
 8006e96:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8006e98:	4a05      	ldr	r2, [pc, #20]	; (8006eb0 <LCD_SetTextColor+0x28>)
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 8006e9e:	4a05      	ldr	r2, [pc, #20]	; (8006eb4 <LCD_SetTextColor+0x2c>)
 8006ea0:	88bb      	ldrh	r3, [r7, #4]
 8006ea2:	8013      	strh	r3, [r2, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	20000748 	.word	0x20000748
 8006eb4:	2000074a 	.word	0x2000074a

08006eb8 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <LCD_SetRotation+0x60>)
 8006ecc:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8006ece:	4b12      	ldr	r3, [pc, #72]	; (8006f18 <LCD_SetRotation+0x60>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d81a      	bhi.n	8006f0c <LCD_SetRotation+0x54>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <LCD_SetRotation+0x24>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006efd 	.word	0x08006efd
 8006ee4:	08006eed 	.word	0x08006eed
 8006ee8:	08006efd 	.word	0x08006efd
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8006eec:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <LCD_SetRotation+0x64>)
 8006eee:	22f0      	movs	r2, #240	; 0xf0
 8006ef0:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <LCD_SetRotation+0x68>)
 8006ef4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006ef8:	801a      	strh	r2, [r3, #0]
		break;
 8006efa:	e007      	b.n	8006f0c <LCD_SetRotation+0x54>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8006efc:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <LCD_SetRotation+0x64>)
 8006efe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006f02:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8006f04:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <LCD_SetRotation+0x68>)
 8006f06:	22f0      	movs	r2, #240	; 0xf0
 8006f08:	801a      	strh	r2, [r3, #0]
		break;
 8006f0a:	bf00      	nop
	}
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	2000074d 	.word	0x2000074d
 8006f1c:	20000740 	.word	0x20000740
 8006f20:	20000742 	.word	0x20000742

08006f24 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 8006f32:	2200      	movs	r2, #0
 8006f34:	2100      	movs	r1, #0
 8006f36:	4841      	ldr	r0, [pc, #260]	; (800703c <LCD_SetAddrWindow+0x118>)
 8006f38:	f7fd fc1a 	bl	8004770 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 8006f3c:	4b40      	ldr	r3, [pc, #256]	; (8007040 <LCD_SetAddrWindow+0x11c>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d038      	beq.n	8006fb6 <LCD_SetAddrWindow+0x92>
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	dc03      	bgt.n	8006f50 <LCD_SetAddrWindow+0x2c>
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d006      	beq.n	8006f5a <LCD_SetAddrWindow+0x36>
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d017      	beq.n	8006f80 <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	61fb      	str	r3, [r7, #28]
		y = y1;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	61bb      	str	r3, [r7, #24]
		break;
 8006f58:	e042      	b.n	8006fe0 <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	617b      	str	r3, [r7, #20]
		y1 = x1;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8006f68:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8006f74:	607b      	str	r3, [r7, #4]
		x = x2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	61fb      	str	r3, [r7, #28]
		y = y1;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	61bb      	str	r3, [r7, #24]
		break;
 8006f7e:	e02f      	b.n	8006fe0 <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8006f8a:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8006f92:	607b      	str	r3, [r7, #4]
		t = y1;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8006fa8:	3301      	adds	r3, #1
 8006faa:	603b      	str	r3, [r7, #0]
		x = x2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	61fb      	str	r3, [r7, #28]
		y = y2;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	61bb      	str	r3, [r7, #24]
		break;
 8006fb4:	e014      	b.n	8006fe0 <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	617b      	str	r3, [r7, #20]
		x1 = y1;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	603b      	str	r3, [r7, #0]
		x = x1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	61fb      	str	r3, [r7, #28]
		y = y2;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	61bb      	str	r3, [r7, #24]
		break;
 8006fde:	bf00      	nop
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	2050      	movs	r0, #80	; 0x50
 8006fe8:	f000 f888 	bl	80070fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	2051      	movs	r0, #81	; 0x51
 8006ff4:	f000 f882 	bl	80070fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	2052      	movs	r0, #82	; 0x52
 8007000:	f000 f87c 	bl	80070fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	4619      	mov	r1, r3
 800700a:	2053      	movs	r0, #83	; 0x53
 800700c:	f000 f876 	bl	80070fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	b29b      	uxth	r3, r3
 8007014:	4619      	mov	r1, r3
 8007016:	2020      	movs	r0, #32
 8007018:	f000 f870 	bl	80070fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	b29b      	uxth	r3, r3
 8007020:	4619      	mov	r1, r3
 8007022:	2021      	movs	r0, #33	; 0x21
 8007024:	f000 f86a 	bl	80070fc <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8007028:	2201      	movs	r2, #1
 800702a:	2100      	movs	r1, #0
 800702c:	4803      	ldr	r0, [pc, #12]	; (800703c <LCD_SetAddrWindow+0x118>)
 800702e:	f7fd fb9f 	bl	8004770 <gpio_write>
}
 8007032:	bf00      	nop
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	40020400 	.word	0x40020400
 8007040:	2000074d 	.word	0x2000074d

08007044 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800704e:	4b28      	ldr	r3, [pc, #160]	; (80070f0 <LCD_Write8+0xac>)
 8007050:	695a      	ldr	r2, [r3, #20]
 8007052:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007056:	4013      	ands	r3, r2
 8007058:	79fa      	ldrb	r2, [r7, #7]
 800705a:	0252      	lsls	r2, r2, #9
 800705c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007060:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	021b      	lsls	r3, r3, #8
 8007066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800706a:	431a      	orrs	r2, r3
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8007074:	491e      	ldr	r1, [pc, #120]	; (80070f0 <LCD_Write8+0xac>)
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8007076:	4313      	orrs	r3, r2
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8007078:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800707a:	4b1e      	ldr	r3, [pc, #120]	; (80070f4 <LCD_Write8+0xb0>)
 800707c:	695a      	ldr	r2, [r3, #20]
 800707e:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8007082:	4013      	ands	r3, r2
 8007084:	79fa      	ldrb	r2, [r7, #7]
 8007086:	f002 0208 	and.w	r2, r2, #8
 800708a:	431a      	orrs	r2, r3
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	105b      	asrs	r3, r3, #1
 800709a:	f003 0310 	and.w	r3, r3, #16
 800709e:	431a      	orrs	r2, r3
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80070a8:	4912      	ldr	r1, [pc, #72]	; (80070f4 <LCD_Write8+0xb0>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80070aa:	4313      	orrs	r3, r2
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80070ac:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 80070ae:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <LCD_Write8+0xb4>)
 80070b0:	695a      	ldr	r2, [r3, #20]
 80070b2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80070b6:	4013      	ands	r3, r2
 80070b8:	79fa      	ldrb	r2, [r7, #7]
 80070ba:	0192      	lsls	r2, r2, #6
 80070bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80070c0:	490d      	ldr	r1, [pc, #52]	; (80070f8 <LCD_Write8+0xb4>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 80070c6:	2200      	movs	r2, #0
 80070c8:	2101      	movs	r1, #1
 80070ca:	4809      	ldr	r0, [pc, #36]	; (80070f0 <LCD_Write8+0xac>)
 80070cc:	f7fd fb50 	bl	8004770 <gpio_write>
 80070d0:	2001      	movs	r0, #1
 80070d2:	f7fe fd3b 	bl	8005b4c <delay>
 80070d6:	2201      	movs	r2, #1
 80070d8:	2101      	movs	r1, #1
 80070da:	4805      	ldr	r0, [pc, #20]	; (80070f0 <LCD_Write8+0xac>)
 80070dc:	f7fd fb48 	bl	8004770 <gpio_write>
 80070e0:	2001      	movs	r0, #1
 80070e2:	f7fe fd33 	bl	8005b4c <delay>
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	40020000 	.word	0x40020000
 80070f4:	40020400 	.word	0x40020400
 80070f8:	40020800 	.word	0x40020800

080070fc <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	460a      	mov	r2, r1
 8007106:	80fb      	strh	r3, [r7, #6]
 8007108:	4613      	mov	r3, r2
 800710a:	80bb      	strh	r3, [r7, #4]
	uint8_t hi, lo;
	hi = (a) >> 8;
 800710c:	88fb      	ldrh	r3, [r7, #6]
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	b29b      	uxth	r3, r3
 8007112:	73fb      	strb	r3, [r7, #15]
	lo = (a);
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	73bb      	strb	r3, [r7, #14]
	LCD_CD_LOW();
 8007118:	2200      	movs	r2, #0
 800711a:	2104      	movs	r1, #4
 800711c:	4810      	ldr	r0, [pc, #64]	; (8007160 <LCD_WriteRegister16+0x64>)
 800711e:	f7fd fb27 	bl	8004770 <gpio_write>
	LCD_Write8(hi);
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff ff8d 	bl	8007044 <LCD_Write8>
	LCD_Write8(lo);
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff ff89 	bl	8007044 <LCD_Write8>
	hi = (d) >> 8;
 8007132:	88bb      	ldrh	r3, [r7, #4]
 8007134:	0a1b      	lsrs	r3, r3, #8
 8007136:	b29b      	uxth	r3, r3
 8007138:	73fb      	strb	r3, [r7, #15]
	lo = (d);
 800713a:	88bb      	ldrh	r3, [r7, #4]
 800713c:	73bb      	strb	r3, [r7, #14]
	LCD_CD_HIGH();
 800713e:	2201      	movs	r2, #1
 8007140:	2104      	movs	r1, #4
 8007142:	4807      	ldr	r0, [pc, #28]	; (8007160 <LCD_WriteRegister16+0x64>)
 8007144:	f7fd fb14 	bl	8004770 <gpio_write>
	LCD_Write8(hi);
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff ff7a 	bl	8007044 <LCD_Write8>
	LCD_Write8(lo);
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff ff76 	bl	8007044 <LCD_Write8>
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40020000 	.word	0x40020000

08007164 <temp2color>:
void printstr(uint8_t *str) {
	while (*str)
		write(*str++);
}

uint16_t temp2color(int degree, int lo, int hi) {
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af02      	add	r7, sp, #8
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
	uint8_t r, g, b;
	r = map(degree, lo, hi, 255, 0);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	b298      	uxth	r0, r3
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	b299      	uxth	r1, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	b29a      	uxth	r2, r3
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	23ff      	movs	r3, #255	; 0xff
 8007182:	f7fd f9ab 	bl	80044dc <map>
 8007186:	4603      	mov	r3, r0
 8007188:	75fb      	strb	r3, [r7, #23]
	g = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	75bb      	strb	r3, [r7, #22]
	b = map(degree, lo, hi, 0, 255);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	b298      	uxth	r0, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	b299      	uxth	r1, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	b29a      	uxth	r2, r3
 800719a:	23ff      	movs	r3, #255	; 0xff
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	2300      	movs	r3, #0
 80071a0:	f7fd f99c 	bl	80044dc <map>
 80071a4:	4603      	mov	r3, r0
 80071a6:	757b      	strb	r3, [r7, #21]
	return LCD_Color565(r, g, b);
 80071a8:	7d7a      	ldrb	r2, [r7, #21]
 80071aa:	7db9      	ldrb	r1, [r7, #22]
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fdca 	bl	8005d48 <LCD_Color565>
 80071b4:	4603      	mov	r3, r0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <colorgradient>:

void colorgradient(int x, int y, int w, int h, int percent) {
 80071be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071c0:	b087      	sub	sp, #28
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	603b      	str	r3, [r7, #0]
//	LCD_DrawRect(x, y, w, h, BLACK);
	for (int row = 1; row < h - 1; row++) {
 80071cc:	2301      	movs	r3, #1
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	e01e      	b.n	8007210 <colorgradient+0x52>
		LCD_DrawFastHLine(x + 1, y + row, w - 2, temp2color(row, 0, h));
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	3301      	adds	r3, #1
 80071d8:	b29b      	uxth	r3, r3
 80071da:	b21c      	sxth	r4, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	b29a      	uxth	r2, r3
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	4413      	add	r3, r2
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	b21d      	sxth	r5, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b02      	subs	r3, #2
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	b21e      	sxth	r6, r3
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	2100      	movs	r1, #0
 80071f8:	6978      	ldr	r0, [r7, #20]
 80071fa:	f7ff ffb3 	bl	8007164 <temp2color>
 80071fe:	4603      	mov	r3, r0
 8007200:	4632      	mov	r2, r6
 8007202:	4629      	mov	r1, r5
 8007204:	4620      	mov	r0, r4
 8007206:	f7fe fecf 	bl	8005fa8 <LCD_DrawFastHLine>
	for (int row = 1; row < h - 1; row++) {
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	3301      	adds	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	3b01      	subs	r3, #1
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	429a      	cmp	r2, r3
 8007218:	dbdb      	blt.n	80071d2 <colorgradient+0x14>
	}
}
 800721a:	bf00      	nop
 800721c:	bf00      	nop
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007224 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007236:	2b84      	cmp	r3, #132	; 0x84
 8007238:	d005      	beq.n	8007246 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800723a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	3303      	adds	r3, #3
 8007244:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007246:	68fb      	ldr	r3, [r7, #12]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007258:	f000 fd7a 	bl	8007d50 <vTaskStartScheduler>
  
  return osOK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	bd80      	pop	{r7, pc}

08007262 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007264:	b089      	sub	sp, #36	; 0x24
 8007266:	af04      	add	r7, sp, #16
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d020      	beq.n	80072b6 <osThreadCreate+0x54>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01c      	beq.n	80072b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685c      	ldr	r4, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681d      	ldr	r5, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691e      	ldr	r6, [r3, #16]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff ffc8 	bl	8007224 <makeFreeRtosPriority>
 8007294:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800729e:	9202      	str	r2, [sp, #8]
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	9100      	str	r1, [sp, #0]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	4632      	mov	r2, r6
 80072a8:	4629      	mov	r1, r5
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 fa4f 	bl	800774e <xTaskCreateStatic>
 80072b0:	4603      	mov	r3, r0
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	e01c      	b.n	80072f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685c      	ldr	r4, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072c2:	b29e      	uxth	r6, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff ffaa 	bl	8007224 <makeFreeRtosPriority>
 80072d0:	4602      	mov	r2, r0
 80072d2:	f107 030c 	add.w	r3, r7, #12
 80072d6:	9301      	str	r3, [sp, #4]
 80072d8:	9200      	str	r2, [sp, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	4632      	mov	r2, r6
 80072de:	4629      	mov	r1, r5
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 fa91 	bl	8007808 <xTaskCreate>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d001      	beq.n	80072f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	e000      	b.n	80072f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80072f0:	68fb      	ldr	r3, [r7, #12]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <osDelay+0x16>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	e000      	b.n	8007312 <osDelay+0x18>
 8007310:	2301      	movs	r3, #1
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fbc6 	bl	8007aa4 <vTaskDelay>
  
  return osOK;
 8007318:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007322:	b590      	push	{r4, r7, lr}
 8007324:	b085      	sub	sp, #20
 8007326:	af02      	add	r7, sp, #8
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d011      	beq.n	8007358 <osMessageCreate+0x36>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00d      	beq.n	8007358 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	2400      	movs	r4, #0
 800734e:	9400      	str	r4, [sp, #0]
 8007350:	f000 f92c 	bl	80075ac <xQueueGenericCreateStatic>
 8007354:	4603      	mov	r3, r0
 8007356:	e008      	b.n	800736a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	4619      	mov	r1, r3
 8007364:	f000 f99a 	bl	800769c <xQueueGenericCreate>
 8007368:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800736a:	4618      	mov	r0, r3
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	bd90      	pop	{r4, r7, pc}

08007372 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f103 0208 	add.w	r2, r3, #8
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f04f 32ff 	mov.w	r2, #4294967295
 800738a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f103 0208 	add.w	r2, r3, #8
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f103 0208 	add.w	r2, r3, #8
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]
}
 8007408:	bf00      	nop
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742a:	d103      	bne.n	8007434 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	e00c      	b.n	800744e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3308      	adds	r3, #8
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	e002      	b.n	8007442 <vListInsert+0x2e>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	429a      	cmp	r2, r3
 800744c:	d2f6      	bcs.n	800743c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	601a      	str	r2, [r3, #0]
}
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007486:	b480      	push	{r7}
 8007488:	b085      	sub	sp, #20
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6892      	ldr	r2, [r2, #8]
 800749c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6852      	ldr	r2, [r2, #4]
 80074a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d103      	bne.n	80074ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	1e5a      	subs	r2, r3, #1
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
	...

080074dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10a      	bne.n	8007506 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007506:	f001 f91d 	bl	8008744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	441a      	add	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007536:	3b01      	subs	r3, #1
 8007538:	68f9      	ldr	r1, [r7, #12]
 800753a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	22ff      	movs	r2, #255	; 0xff
 800754a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	22ff      	movs	r2, #255	; 0xff
 8007552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d114      	bne.n	8007586 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01a      	beq.n	800759a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3310      	adds	r3, #16
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fe1f 	bl	80081ac <xTaskRemoveFromEventList>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d012      	beq.n	800759a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007574:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <xQueueGenericReset+0xcc>)
 8007576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	e009      	b.n	800759a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	3310      	adds	r3, #16
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fef1 	bl	8007372 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3324      	adds	r3, #36	; 0x24
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff feec 	bl	8007372 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800759a:	f001 f903 	bl	80087a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800759e:	2301      	movs	r3, #1
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08e      	sub	sp, #56	; 0x38
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <xQueueGenericCreateStatic+0x52>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <xQueueGenericCreateStatic+0x56>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <xQueueGenericCreateStatic+0x58>
 8007602:	2300      	movs	r3, #0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	623b      	str	r3, [r7, #32]
}
 800761a:	bf00      	nop
 800761c:	e7fe      	b.n	800761c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d102      	bne.n	800762a <xQueueGenericCreateStatic+0x7e>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <xQueueGenericCreateStatic+0x82>
 800762a:	2301      	movs	r3, #1
 800762c:	e000      	b.n	8007630 <xQueueGenericCreateStatic+0x84>
 800762e:	2300      	movs	r3, #0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	61fb      	str	r3, [r7, #28]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800764a:	2348      	movs	r3, #72	; 0x48
 800764c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2b48      	cmp	r3, #72	; 0x48
 8007652:	d00a      	beq.n	800766a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	61bb      	str	r3, [r7, #24]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800766a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00d      	beq.n	8007692 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800767e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4613      	mov	r3, r2
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f83f 	bl	8007710 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007694:	4618      	mov	r0, r3
 8007696:	3730      	adds	r7, #48	; 0x30
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	; 0x28
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	4613      	mov	r3, r2
 80076a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10a      	bne.n	80076c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	613b      	str	r3, [r7, #16]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	fb02 f303 	mul.w	r3, r2, r3
 80076ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	3348      	adds	r3, #72	; 0x48
 80076d4:	4618      	mov	r0, r3
 80076d6:	f001 f917 	bl	8008908 <pvPortMalloc>
 80076da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d011      	beq.n	8007706 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	3348      	adds	r3, #72	; 0x48
 80076ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076f4:	79fa      	ldrb	r2, [r7, #7]
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	4613      	mov	r3, r2
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	68b9      	ldr	r1, [r7, #8]
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f805 	bl	8007710 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007706:	69bb      	ldr	r3, [r7, #24]
	}
 8007708:	4618      	mov	r0, r3
 800770a:	3720      	adds	r7, #32
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d103      	bne.n	800772c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	e002      	b.n	8007732 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800773e:	2101      	movs	r1, #1
 8007740:	69b8      	ldr	r0, [r7, #24]
 8007742:	f7ff fecb 	bl	80074dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800774e:	b580      	push	{r7, lr}
 8007750:	b08e      	sub	sp, #56	; 0x38
 8007752:	af04      	add	r7, sp, #16
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800775c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	623b      	str	r3, [r7, #32]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <xTaskCreateStatic+0x46>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	61fb      	str	r3, [r7, #28]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007794:	23b4      	movs	r3, #180	; 0xb4
 8007796:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	2bb4      	cmp	r3, #180	; 0xb4
 800779c:	d00a      	beq.n	80077b4 <xTaskCreateStatic+0x66>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	61bb      	str	r3, [r7, #24]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01e      	beq.n	80077fa <xTaskCreateStatic+0xac>
 80077bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01b      	beq.n	80077fa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077d4:	2300      	movs	r3, #0
 80077d6:	9303      	str	r3, [sp, #12]
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	9302      	str	r3, [sp, #8]
 80077dc:	f107 0314 	add.w	r3, r7, #20
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f851 	bl	8007894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077f4:	f000 f8ec 	bl	80079d0 <prvAddNewTaskToReadyList>
 80077f8:	e001      	b.n	80077fe <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077fe:	697b      	ldr	r3, [r7, #20]
	}
 8007800:	4618      	mov	r0, r3
 8007802:	3728      	adds	r7, #40	; 0x28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08c      	sub	sp, #48	; 0x30
 800780c:	af04      	add	r7, sp, #16
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f873 	bl	8008908 <pvPortMalloc>
 8007822:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00e      	beq.n	8007848 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800782a:	20b4      	movs	r0, #180	; 0xb4
 800782c:	f001 f86c 	bl	8008908 <pvPortMalloc>
 8007830:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	631a      	str	r2, [r3, #48]	; 0x30
 800783e:	e005      	b.n	800784c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007840:	6978      	ldr	r0, [r7, #20]
 8007842:	f001 f92d 	bl	8008aa0 <vPortFree>
 8007846:	e001      	b.n	800784c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d017      	beq.n	8007882 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800785a:	88fa      	ldrh	r2, [r7, #6]
 800785c:	2300      	movs	r3, #0
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	9302      	str	r3, [sp, #8]
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	68b9      	ldr	r1, [r7, #8]
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 f80f 	bl	8007894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007876:	69f8      	ldr	r0, [r7, #28]
 8007878:	f000 f8aa 	bl	80079d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800787c:	2301      	movs	r3, #1
 800787e:	61bb      	str	r3, [r7, #24]
 8007880:	e002      	b.n	8007888 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007882:	f04f 33ff 	mov.w	r3, #4294967295
 8007886:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007888:	69bb      	ldr	r3, [r7, #24]
	}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078ac:	3b01      	subs	r3, #1
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	f023 0307 	bic.w	r3, r3, #7
 80078ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	617b      	str	r3, [r7, #20]
}
 80078d8:	bf00      	nop
 80078da:	e7fe      	b.n	80078da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d01f      	beq.n	8007922 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]
 80078e6:	e012      	b.n	800790e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4413      	add	r3, r2
 80078ee:	7819      	ldrb	r1, [r3, #0]
 80078f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	3334      	adds	r3, #52	; 0x34
 80078f8:	460a      	mov	r2, r1
 80078fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	4413      	add	r3, r2
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d006      	beq.n	8007916 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3301      	adds	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	2b0f      	cmp	r3, #15
 8007912:	d9e9      	bls.n	80078e8 <prvInitialiseNewTask+0x54>
 8007914:	e000      	b.n	8007918 <prvInitialiseNewTask+0x84>
			{
				break;
 8007916:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007920:	e003      	b.n	800792a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	2b06      	cmp	r3, #6
 800792e:	d901      	bls.n	8007934 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007930:	2306      	movs	r3, #6
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007938:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800793e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	2200      	movs	r2, #0
 8007944:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	3304      	adds	r3, #4
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff fd31 	bl	80073b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	3318      	adds	r3, #24
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff fd2c 	bl	80073b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	f1c3 0207 	rsb	r2, r3, #7
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	2200      	movs	r2, #0
 8007974:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	2200      	movs	r2, #0
 800797c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	334c      	adds	r3, #76	; 0x4c
 8007984:	2260      	movs	r2, #96	; 0x60
 8007986:	2100      	movs	r1, #0
 8007988:	4618      	mov	r0, r3
 800798a:	f001 fae1 	bl	8008f50 <memset>
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	4a0c      	ldr	r2, [pc, #48]	; (80079c4 <prvInitialiseNewTask+0x130>)
 8007992:	651a      	str	r2, [r3, #80]	; 0x50
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	4a0c      	ldr	r2, [pc, #48]	; (80079c8 <prvInitialiseNewTask+0x134>)
 8007998:	655a      	str	r2, [r3, #84]	; 0x54
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	4a0b      	ldr	r2, [pc, #44]	; (80079cc <prvInitialiseNewTask+0x138>)
 800799e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	69b8      	ldr	r0, [r7, #24]
 80079a6:	f000 fda3 	bl	80084f0 <pxPortInitialiseStack>
 80079aa:	4602      	mov	r2, r0
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079bc:	bf00      	nop
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	0800c1a0 	.word	0x0800c1a0
 80079c8:	0800c1c0 	.word	0x0800c1c0
 80079cc:	0800c180 	.word	0x0800c180

080079d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079d8:	f000 feb4 	bl	8008744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079dc:	4b2a      	ldr	r3, [pc, #168]	; (8007a88 <prvAddNewTaskToReadyList+0xb8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	4a29      	ldr	r2, [pc, #164]	; (8007a88 <prvAddNewTaskToReadyList+0xb8>)
 80079e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079e6:	4b29      	ldr	r3, [pc, #164]	; (8007a8c <prvAddNewTaskToReadyList+0xbc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079ee:	4a27      	ldr	r2, [pc, #156]	; (8007a8c <prvAddNewTaskToReadyList+0xbc>)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80079f4:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <prvAddNewTaskToReadyList+0xb8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d110      	bne.n	8007a1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80079fc:	f000 fc50 	bl	80082a0 <prvInitialiseTaskLists>
 8007a00:	e00d      	b.n	8007a1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a02:	4b23      	ldr	r3, [pc, #140]	; (8007a90 <prvAddNewTaskToReadyList+0xc0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d109      	bne.n	8007a1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a0a:	4b20      	ldr	r3, [pc, #128]	; (8007a8c <prvAddNewTaskToReadyList+0xbc>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d802      	bhi.n	8007a1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a18:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <prvAddNewTaskToReadyList+0xbc>)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a1e:	4b1d      	ldr	r3, [pc, #116]	; (8007a94 <prvAddNewTaskToReadyList+0xc4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3301      	adds	r3, #1
 8007a24:	4a1b      	ldr	r2, [pc, #108]	; (8007a94 <prvAddNewTaskToReadyList+0xc4>)
 8007a26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	409a      	lsls	r2, r3
 8007a30:	4b19      	ldr	r3, [pc, #100]	; (8007a98 <prvAddNewTaskToReadyList+0xc8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <prvAddNewTaskToReadyList+0xc8>)
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4a15      	ldr	r2, [pc, #84]	; (8007a9c <prvAddNewTaskToReadyList+0xcc>)
 8007a48:	441a      	add	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4610      	mov	r0, r2
 8007a52:	f7ff fcbb 	bl	80073cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a56:	f000 fea5 	bl	80087a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <prvAddNewTaskToReadyList+0xc0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00e      	beq.n	8007a80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a62:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <prvAddNewTaskToReadyList+0xbc>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d207      	bcs.n	8007a80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a70:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <prvAddNewTaskToReadyList+0xd0>)
 8007a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000950 	.word	0x20000950
 8007a8c:	20000850 	.word	0x20000850
 8007a90:	2000095c 	.word	0x2000095c
 8007a94:	2000096c 	.word	0x2000096c
 8007a98:	20000958 	.word	0x20000958
 8007a9c:	20000854 	.word	0x20000854
 8007aa0:	e000ed04 	.word	0xe000ed04

08007aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d017      	beq.n	8007ae6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ab6:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <vTaskDelay+0x60>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <vTaskDelay+0x30>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	60bb      	str	r3, [r7, #8]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ad4:	f000 f9a6 	bl	8007e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ad8:	2100      	movs	r1, #0
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fca2 	bl	8008424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ae0:	f000 f9ae 	bl	8007e40 <xTaskResumeAll>
 8007ae4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d107      	bne.n	8007afc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007aec:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <vTaskDelay+0x64>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000978 	.word	0x20000978
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007b14:	f000 fe16 	bl	8008744 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d102      	bne.n	8007b24 <vTaskSuspend+0x18>
 8007b1e:	4b3c      	ldr	r3, [pc, #240]	; (8007c10 <vTaskSuspend+0x104>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	e000      	b.n	8007b26 <vTaskSuspend+0x1a>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff fcaa 	bl	8007486 <uxListRemove>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d115      	bne.n	8007b64 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3c:	4935      	ldr	r1, [pc, #212]	; (8007c14 <vTaskSuspend+0x108>)
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	440b      	add	r3, r1
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <vTaskSuspend+0x58>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	2201      	movs	r2, #1
 8007b54:	fa02 f303 	lsl.w	r3, r2, r3
 8007b58:	43da      	mvns	r2, r3
 8007b5a:	4b2f      	ldr	r3, [pc, #188]	; (8007c18 <vTaskSuspend+0x10c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	4a2d      	ldr	r2, [pc, #180]	; (8007c18 <vTaskSuspend+0x10c>)
 8007b62:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d004      	beq.n	8007b76 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3318      	adds	r3, #24
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff fc88 	bl	8007486 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4827      	ldr	r0, [pc, #156]	; (8007c1c <vTaskSuspend+0x110>)
 8007b7e:	f7ff fc25 	bl	80073cc <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d103      	bne.n	8007b96 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007b96:	f000 fe05 	bl	80087a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007b9a:	4b21      	ldr	r3, [pc, #132]	; (8007c20 <vTaskSuspend+0x114>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007ba2:	f000 fdcf 	bl	8008744 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007ba6:	f000 fc1d 	bl	80083e4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007baa:	f000 fdfb 	bl	80087a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007bae:	4b18      	ldr	r3, [pc, #96]	; (8007c10 <vTaskSuspend+0x104>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d127      	bne.n	8007c08 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007bb8:	4b19      	ldr	r3, [pc, #100]	; (8007c20 <vTaskSuspend+0x114>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d017      	beq.n	8007bf0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007bc0:	4b18      	ldr	r3, [pc, #96]	; (8007c24 <vTaskSuspend+0x118>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <vTaskSuspend+0xd2>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	60bb      	str	r3, [r7, #8]
}
 8007bda:	bf00      	nop
 8007bdc:	e7fe      	b.n	8007bdc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <vTaskSuspend+0x11c>)
 8007be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bee:	e00b      	b.n	8007c08 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <vTaskSuspend+0x110>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <vTaskSuspend+0x120>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d103      	bne.n	8007c04 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007bfc:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <vTaskSuspend+0x104>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]
	}
 8007c02:	e001      	b.n	8007c08 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007c04:	f000 fa70 	bl	80080e8 <vTaskSwitchContext>
	}
 8007c08:	bf00      	nop
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000850 	.word	0x20000850
 8007c14:	20000854 	.word	0x20000854
 8007c18:	20000958 	.word	0x20000958
 8007c1c:	2000093c 	.word	0x2000093c
 8007c20:	2000095c 	.word	0x2000095c
 8007c24:	20000978 	.word	0x20000978
 8007c28:	e000ed04 	.word	0xe000ed04
 8007c2c:	20000950 	.word	0x20000950

08007c30 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60fb      	str	r3, [r7, #12]
}
 8007c58:	bf00      	nop
 8007c5a:	e7fe      	b.n	8007c5a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	4a0a      	ldr	r2, [pc, #40]	; (8007c8c <prvTaskIsTaskSuspended+0x5c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d10a      	bne.n	8007c7c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <prvTaskIsTaskSuspended+0x60>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d005      	beq.n	8007c7c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c7c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007c7e:	4618      	mov	r0, r3
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	2000093c 	.word	0x2000093c
 8007c90:	20000910 	.word	0x20000910

08007c94 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <vTaskResume+0x28>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60bb      	str	r3, [r7, #8]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007cbc:	4b20      	ldr	r3, [pc, #128]	; (8007d40 <vTaskResume+0xac>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d037      	beq.n	8007d36 <vTaskResume+0xa2>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d034      	beq.n	8007d36 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007ccc:	f000 fd3a 	bl	8008744 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7ff ffad 	bl	8007c30 <prvTaskIsTaskSuspended>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d02a      	beq.n	8007d32 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff fbd0 	bl	8007486 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	2201      	movs	r2, #1
 8007cec:	409a      	lsls	r2, r3
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <vTaskResume+0xb0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	4a13      	ldr	r2, [pc, #76]	; (8007d44 <vTaskResume+0xb0>)
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4a10      	ldr	r2, [pc, #64]	; (8007d48 <vTaskResume+0xb4>)
 8007d06:	441a      	add	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4610      	mov	r0, r2
 8007d10:	f7ff fb5c 	bl	80073cc <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d18:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <vTaskResume+0xac>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d307      	bcc.n	8007d32 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007d22:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <vTaskResume+0xb8>)
 8007d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007d32:	f000 fd37 	bl	80087a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000850 	.word	0x20000850
 8007d44:	20000958 	.word	0x20000958
 8007d48:	20000854 	.word	0x20000854
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	; 0x28
 8007d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d5e:	463a      	mov	r2, r7
 8007d60:	1d39      	adds	r1, r7, #4
 8007d62:	f107 0308 	add.w	r3, r7, #8
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7f9 f8a8 	bl	8000ebc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	9202      	str	r2, [sp, #8]
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	2300      	movs	r3, #0
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	460a      	mov	r2, r1
 8007d7e:	4921      	ldr	r1, [pc, #132]	; (8007e04 <vTaskStartScheduler+0xb4>)
 8007d80:	4821      	ldr	r0, [pc, #132]	; (8007e08 <vTaskStartScheduler+0xb8>)
 8007d82:	f7ff fce4 	bl	800774e <xTaskCreateStatic>
 8007d86:	4603      	mov	r3, r0
 8007d88:	4a20      	ldr	r2, [pc, #128]	; (8007e0c <vTaskStartScheduler+0xbc>)
 8007d8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <vTaskStartScheduler+0xbc>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e001      	b.n	8007d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d11b      	bne.n	8007ddc <vTaskStartScheduler+0x8c>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	613b      	str	r3, [r7, #16]
}
 8007db6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007db8:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <vTaskStartScheduler+0xc0>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	334c      	adds	r3, #76	; 0x4c
 8007dbe:	4a15      	ldr	r2, [pc, #84]	; (8007e14 <vTaskStartScheduler+0xc4>)
 8007dc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <vTaskStartScheduler+0xc8>)
 8007dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dca:	4b14      	ldr	r3, [pc, #80]	; (8007e1c <vTaskStartScheduler+0xcc>)
 8007dcc:	2201      	movs	r2, #1
 8007dce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007dd0:	4b13      	ldr	r3, [pc, #76]	; (8007e20 <vTaskStartScheduler+0xd0>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dd6:	f000 fc13 	bl	8008600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dda:	e00e      	b.n	8007dfa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d10a      	bne.n	8007dfa <vTaskStartScheduler+0xaa>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	60fb      	str	r3, [r7, #12]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <vTaskStartScheduler+0xa8>
}
 8007dfa:	bf00      	nop
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	0800bdd8 	.word	0x0800bdd8
 8007e08:	08008271 	.word	0x08008271
 8007e0c:	20000974 	.word	0x20000974
 8007e10:	20000850 	.word	0x20000850
 8007e14:	20000060 	.word	0x20000060
 8007e18:	20000970 	.word	0x20000970
 8007e1c:	2000095c 	.word	0x2000095c
 8007e20:	20000954 	.word	0x20000954

08007e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e28:	4b04      	ldr	r3, [pc, #16]	; (8007e3c <vTaskSuspendAll+0x18>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	4a03      	ldr	r2, [pc, #12]	; (8007e3c <vTaskSuspendAll+0x18>)
 8007e30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e32:	bf00      	nop
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	20000978 	.word	0x20000978

08007e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e4e:	4b41      	ldr	r3, [pc, #260]	; (8007f54 <xTaskResumeAll+0x114>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10a      	bne.n	8007e6c <xTaskResumeAll+0x2c>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	603b      	str	r3, [r7, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	e7fe      	b.n	8007e6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e6c:	f000 fc6a 	bl	8008744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e70:	4b38      	ldr	r3, [pc, #224]	; (8007f54 <xTaskResumeAll+0x114>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	4a37      	ldr	r2, [pc, #220]	; (8007f54 <xTaskResumeAll+0x114>)
 8007e78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e7a:	4b36      	ldr	r3, [pc, #216]	; (8007f54 <xTaskResumeAll+0x114>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d161      	bne.n	8007f46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e82:	4b35      	ldr	r3, [pc, #212]	; (8007f58 <xTaskResumeAll+0x118>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d05d      	beq.n	8007f46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e8a:	e02e      	b.n	8007eea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8c:	4b33      	ldr	r3, [pc, #204]	; (8007f5c <xTaskResumeAll+0x11c>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3318      	adds	r3, #24
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff faf4 	bl	8007486 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff faef 	bl	8007486 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	2201      	movs	r2, #1
 8007eae:	409a      	lsls	r2, r3
 8007eb0:	4b2b      	ldr	r3, [pc, #172]	; (8007f60 <xTaskResumeAll+0x120>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	4a2a      	ldr	r2, [pc, #168]	; (8007f60 <xTaskResumeAll+0x120>)
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4a27      	ldr	r2, [pc, #156]	; (8007f64 <xTaskResumeAll+0x124>)
 8007ec8:	441a      	add	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	f7ff fa7b 	bl	80073cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eda:	4b23      	ldr	r3, [pc, #140]	; (8007f68 <xTaskResumeAll+0x128>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d302      	bcc.n	8007eea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007ee4:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <xTaskResumeAll+0x12c>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eea:	4b1c      	ldr	r3, [pc, #112]	; (8007f5c <xTaskResumeAll+0x11c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1cc      	bne.n	8007e8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ef8:	f000 fa74 	bl	80083e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007efc:	4b1c      	ldr	r3, [pc, #112]	; (8007f70 <xTaskResumeAll+0x130>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d010      	beq.n	8007f2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f08:	f000 f836 	bl	8007f78 <xTaskIncrementTick>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007f12:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <xTaskResumeAll+0x12c>)
 8007f14:	2201      	movs	r2, #1
 8007f16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1f1      	bne.n	8007f08 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007f24:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <xTaskResumeAll+0x130>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f2a:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <xTaskResumeAll+0x12c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d009      	beq.n	8007f46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f36:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <xTaskResumeAll+0x134>)
 8007f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f46:	f000 fc2d 	bl	80087a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000978 	.word	0x20000978
 8007f58:	20000950 	.word	0x20000950
 8007f5c:	20000910 	.word	0x20000910
 8007f60:	20000958 	.word	0x20000958
 8007f64:	20000854 	.word	0x20000854
 8007f68:	20000850 	.word	0x20000850
 8007f6c:	20000964 	.word	0x20000964
 8007f70:	20000960 	.word	0x20000960
 8007f74:	e000ed04 	.word	0xe000ed04

08007f78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f82:	4b4e      	ldr	r3, [pc, #312]	; (80080bc <xTaskIncrementTick+0x144>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f040 808e 	bne.w	80080a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f8c:	4b4c      	ldr	r3, [pc, #304]	; (80080c0 <xTaskIncrementTick+0x148>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3301      	adds	r3, #1
 8007f92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f94:	4a4a      	ldr	r2, [pc, #296]	; (80080c0 <xTaskIncrementTick+0x148>)
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d120      	bne.n	8007fe2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fa0:	4b48      	ldr	r3, [pc, #288]	; (80080c4 <xTaskIncrementTick+0x14c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	603b      	str	r3, [r7, #0]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <xTaskIncrementTick+0x46>
 8007fc0:	4b40      	ldr	r3, [pc, #256]	; (80080c4 <xTaskIncrementTick+0x14c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	4b40      	ldr	r3, [pc, #256]	; (80080c8 <xTaskIncrementTick+0x150>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a3e      	ldr	r2, [pc, #248]	; (80080c4 <xTaskIncrementTick+0x14c>)
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	4a3e      	ldr	r2, [pc, #248]	; (80080c8 <xTaskIncrementTick+0x150>)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	4b3d      	ldr	r3, [pc, #244]	; (80080cc <xTaskIncrementTick+0x154>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	4a3c      	ldr	r2, [pc, #240]	; (80080cc <xTaskIncrementTick+0x154>)
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	f000 fa01 	bl	80083e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fe2:	4b3b      	ldr	r3, [pc, #236]	; (80080d0 <xTaskIncrementTick+0x158>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d348      	bcc.n	800807e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fec:	4b35      	ldr	r3, [pc, #212]	; (80080c4 <xTaskIncrementTick+0x14c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d104      	bne.n	8008000 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff6:	4b36      	ldr	r3, [pc, #216]	; (80080d0 <xTaskIncrementTick+0x158>)
 8007ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffc:	601a      	str	r2, [r3, #0]
					break;
 8007ffe:	e03e      	b.n	800807e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008000:	4b30      	ldr	r3, [pc, #192]	; (80080c4 <xTaskIncrementTick+0x14c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	d203      	bcs.n	8008020 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008018:	4a2d      	ldr	r2, [pc, #180]	; (80080d0 <xTaskIncrementTick+0x158>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800801e:	e02e      	b.n	800807e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	3304      	adds	r3, #4
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff fa2e 	bl	8007486 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	3318      	adds	r3, #24
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff fa25 	bl	8007486 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	2201      	movs	r2, #1
 8008042:	409a      	lsls	r2, r3
 8008044:	4b23      	ldr	r3, [pc, #140]	; (80080d4 <xTaskIncrementTick+0x15c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4313      	orrs	r3, r2
 800804a:	4a22      	ldr	r2, [pc, #136]	; (80080d4 <xTaskIncrementTick+0x15c>)
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4a1f      	ldr	r2, [pc, #124]	; (80080d8 <xTaskIncrementTick+0x160>)
 800805c:	441a      	add	r2, r3
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3304      	adds	r3, #4
 8008062:	4619      	mov	r1, r3
 8008064:	4610      	mov	r0, r2
 8008066:	f7ff f9b1 	bl	80073cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806e:	4b1b      	ldr	r3, [pc, #108]	; (80080dc <xTaskIncrementTick+0x164>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	429a      	cmp	r2, r3
 8008076:	d3b9      	bcc.n	8007fec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008078:	2301      	movs	r3, #1
 800807a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800807c:	e7b6      	b.n	8007fec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800807e:	4b17      	ldr	r3, [pc, #92]	; (80080dc <xTaskIncrementTick+0x164>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008084:	4914      	ldr	r1, [pc, #80]	; (80080d8 <xTaskIncrementTick+0x160>)
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	440b      	add	r3, r1
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d901      	bls.n	800809a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008096:	2301      	movs	r3, #1
 8008098:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800809a:	4b11      	ldr	r3, [pc, #68]	; (80080e0 <xTaskIncrementTick+0x168>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80080a2:	2301      	movs	r3, #1
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	e004      	b.n	80080b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080a8:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <xTaskIncrementTick+0x16c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3301      	adds	r3, #1
 80080ae:	4a0d      	ldr	r2, [pc, #52]	; (80080e4 <xTaskIncrementTick+0x16c>)
 80080b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080b2:	697b      	ldr	r3, [r7, #20]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20000978 	.word	0x20000978
 80080c0:	20000954 	.word	0x20000954
 80080c4:	20000908 	.word	0x20000908
 80080c8:	2000090c 	.word	0x2000090c
 80080cc:	20000968 	.word	0x20000968
 80080d0:	20000970 	.word	0x20000970
 80080d4:	20000958 	.word	0x20000958
 80080d8:	20000854 	.word	0x20000854
 80080dc:	20000850 	.word	0x20000850
 80080e0:	20000964 	.word	0x20000964
 80080e4:	20000960 	.word	0x20000960

080080e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080ee:	4b29      	ldr	r3, [pc, #164]	; (8008194 <vTaskSwitchContext+0xac>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080f6:	4b28      	ldr	r3, [pc, #160]	; (8008198 <vTaskSwitchContext+0xb0>)
 80080f8:	2201      	movs	r2, #1
 80080fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080fc:	e044      	b.n	8008188 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80080fe:	4b26      	ldr	r3, [pc, #152]	; (8008198 <vTaskSwitchContext+0xb0>)
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008104:	4b25      	ldr	r3, [pc, #148]	; (800819c <vTaskSwitchContext+0xb4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	fab3 f383 	clz	r3, r3
 8008110:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008112:	7afb      	ldrb	r3, [r7, #11]
 8008114:	f1c3 031f 	rsb	r3, r3, #31
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	4921      	ldr	r1, [pc, #132]	; (80081a0 <vTaskSwitchContext+0xb8>)
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	440b      	add	r3, r1
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <vTaskSwitchContext+0x5c>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	607b      	str	r3, [r7, #4]
}
 8008140:	bf00      	nop
 8008142:	e7fe      	b.n	8008142 <vTaskSwitchContext+0x5a>
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4a14      	ldr	r2, [pc, #80]	; (80081a0 <vTaskSwitchContext+0xb8>)
 8008150:	4413      	add	r3, r2
 8008152:	613b      	str	r3, [r7, #16]
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	605a      	str	r2, [r3, #4]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	3308      	adds	r3, #8
 8008166:	429a      	cmp	r2, r3
 8008168:	d104      	bne.n	8008174 <vTaskSwitchContext+0x8c>
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	605a      	str	r2, [r3, #4]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	4a0a      	ldr	r2, [pc, #40]	; (80081a4 <vTaskSwitchContext+0xbc>)
 800817c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800817e:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <vTaskSwitchContext+0xbc>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	334c      	adds	r3, #76	; 0x4c
 8008184:	4a08      	ldr	r2, [pc, #32]	; (80081a8 <vTaskSwitchContext+0xc0>)
 8008186:	6013      	str	r3, [r2, #0]
}
 8008188:	bf00      	nop
 800818a:	371c      	adds	r7, #28
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	20000978 	.word	0x20000978
 8008198:	20000964 	.word	0x20000964
 800819c:	20000958 	.word	0x20000958
 80081a0:	20000854 	.word	0x20000854
 80081a4:	20000850 	.word	0x20000850
 80081a8:	20000060 	.word	0x20000060

080081ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10a      	bne.n	80081d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	60fb      	str	r3, [r7, #12]
}
 80081d4:	bf00      	nop
 80081d6:	e7fe      	b.n	80081d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	3318      	adds	r3, #24
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff f952 	bl	8007486 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081e2:	4b1d      	ldr	r3, [pc, #116]	; (8008258 <xTaskRemoveFromEventList+0xac>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d11c      	bne.n	8008224 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3304      	adds	r3, #4
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff f949 	bl	8007486 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	2201      	movs	r2, #1
 80081fa:	409a      	lsls	r2, r3
 80081fc:	4b17      	ldr	r3, [pc, #92]	; (800825c <xTaskRemoveFromEventList+0xb0>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4313      	orrs	r3, r2
 8008202:	4a16      	ldr	r2, [pc, #88]	; (800825c <xTaskRemoveFromEventList+0xb0>)
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4a13      	ldr	r2, [pc, #76]	; (8008260 <xTaskRemoveFromEventList+0xb4>)
 8008214:	441a      	add	r2, r3
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	3304      	adds	r3, #4
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f7ff f8d5 	bl	80073cc <vListInsertEnd>
 8008222:	e005      	b.n	8008230 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	3318      	adds	r3, #24
 8008228:	4619      	mov	r1, r3
 800822a:	480e      	ldr	r0, [pc, #56]	; (8008264 <xTaskRemoveFromEventList+0xb8>)
 800822c:	f7ff f8ce 	bl	80073cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008234:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <xTaskRemoveFromEventList+0xbc>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	429a      	cmp	r2, r3
 800823c:	d905      	bls.n	800824a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800823e:	2301      	movs	r3, #1
 8008240:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008242:	4b0a      	ldr	r3, [pc, #40]	; (800826c <xTaskRemoveFromEventList+0xc0>)
 8008244:	2201      	movs	r2, #1
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	e001      	b.n	800824e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800824e:	697b      	ldr	r3, [r7, #20]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000978 	.word	0x20000978
 800825c:	20000958 	.word	0x20000958
 8008260:	20000854 	.word	0x20000854
 8008264:	20000910 	.word	0x20000910
 8008268:	20000850 	.word	0x20000850
 800826c:	20000964 	.word	0x20000964

08008270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008278:	f000 f852 	bl	8008320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800827c:	4b06      	ldr	r3, [pc, #24]	; (8008298 <prvIdleTask+0x28>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d9f9      	bls.n	8008278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008284:	4b05      	ldr	r3, [pc, #20]	; (800829c <prvIdleTask+0x2c>)
 8008286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008294:	e7f0      	b.n	8008278 <prvIdleTask+0x8>
 8008296:	bf00      	nop
 8008298:	20000854 	.word	0x20000854
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082a6:	2300      	movs	r3, #0
 80082a8:	607b      	str	r3, [r7, #4]
 80082aa:	e00c      	b.n	80082c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4a12      	ldr	r2, [pc, #72]	; (8008300 <prvInitialiseTaskLists+0x60>)
 80082b8:	4413      	add	r3, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff f859 	bl	8007372 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3301      	adds	r3, #1
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b06      	cmp	r3, #6
 80082ca:	d9ef      	bls.n	80082ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082cc:	480d      	ldr	r0, [pc, #52]	; (8008304 <prvInitialiseTaskLists+0x64>)
 80082ce:	f7ff f850 	bl	8007372 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082d2:	480d      	ldr	r0, [pc, #52]	; (8008308 <prvInitialiseTaskLists+0x68>)
 80082d4:	f7ff f84d 	bl	8007372 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082d8:	480c      	ldr	r0, [pc, #48]	; (800830c <prvInitialiseTaskLists+0x6c>)
 80082da:	f7ff f84a 	bl	8007372 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082de:	480c      	ldr	r0, [pc, #48]	; (8008310 <prvInitialiseTaskLists+0x70>)
 80082e0:	f7ff f847 	bl	8007372 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082e4:	480b      	ldr	r0, [pc, #44]	; (8008314 <prvInitialiseTaskLists+0x74>)
 80082e6:	f7ff f844 	bl	8007372 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082ea:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <prvInitialiseTaskLists+0x78>)
 80082ec:	4a05      	ldr	r2, [pc, #20]	; (8008304 <prvInitialiseTaskLists+0x64>)
 80082ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <prvInitialiseTaskLists+0x7c>)
 80082f2:	4a05      	ldr	r2, [pc, #20]	; (8008308 <prvInitialiseTaskLists+0x68>)
 80082f4:	601a      	str	r2, [r3, #0]
}
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000854 	.word	0x20000854
 8008304:	200008e0 	.word	0x200008e0
 8008308:	200008f4 	.word	0x200008f4
 800830c:	20000910 	.word	0x20000910
 8008310:	20000924 	.word	0x20000924
 8008314:	2000093c 	.word	0x2000093c
 8008318:	20000908 	.word	0x20000908
 800831c:	2000090c 	.word	0x2000090c

08008320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008326:	e019      	b.n	800835c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008328:	f000 fa0c 	bl	8008744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800832c:	4b10      	ldr	r3, [pc, #64]	; (8008370 <prvCheckTasksWaitingTermination+0x50>)
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3304      	adds	r3, #4
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff f8a4 	bl	8007486 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800833e:	4b0d      	ldr	r3, [pc, #52]	; (8008374 <prvCheckTasksWaitingTermination+0x54>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3b01      	subs	r3, #1
 8008344:	4a0b      	ldr	r2, [pc, #44]	; (8008374 <prvCheckTasksWaitingTermination+0x54>)
 8008346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008348:	4b0b      	ldr	r3, [pc, #44]	; (8008378 <prvCheckTasksWaitingTermination+0x58>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3b01      	subs	r3, #1
 800834e:	4a0a      	ldr	r2, [pc, #40]	; (8008378 <prvCheckTasksWaitingTermination+0x58>)
 8008350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008352:	f000 fa27 	bl	80087a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f810 	bl	800837c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <prvCheckTasksWaitingTermination+0x58>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e1      	bne.n	8008328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20000924 	.word	0x20000924
 8008374:	20000950 	.word	0x20000950
 8008378:	20000938 	.word	0x20000938

0800837c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	334c      	adds	r3, #76	; 0x4c
 8008388:	4618      	mov	r0, r3
 800838a:	f001 fb41 	bl	8009a10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d108      	bne.n	80083aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839c:	4618      	mov	r0, r3
 800839e:	f000 fb7f 	bl	8008aa0 <vPortFree>
				vPortFree( pxTCB );
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fb7c 	bl	8008aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083a8:	e018      	b.n	80083dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d103      	bne.n	80083bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fb73 	bl	8008aa0 <vPortFree>
	}
 80083ba:	e00f      	b.n	80083dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d00a      	beq.n	80083dc <prvDeleteTCB+0x60>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	60fb      	str	r3, [r7, #12]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <prvDeleteTCB+0x5e>
	}
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ea:	4b0c      	ldr	r3, [pc, #48]	; (800841c <prvResetNextTaskUnblockTime+0x38>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d104      	bne.n	80083fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083f4:	4b0a      	ldr	r3, [pc, #40]	; (8008420 <prvResetNextTaskUnblockTime+0x3c>)
 80083f6:	f04f 32ff 	mov.w	r2, #4294967295
 80083fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083fc:	e008      	b.n	8008410 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083fe:	4b07      	ldr	r3, [pc, #28]	; (800841c <prvResetNextTaskUnblockTime+0x38>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	4a04      	ldr	r2, [pc, #16]	; (8008420 <prvResetNextTaskUnblockTime+0x3c>)
 800840e:	6013      	str	r3, [r2, #0]
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20000908 	.word	0x20000908
 8008420:	20000970 	.word	0x20000970

08008424 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800842e:	4b29      	ldr	r3, [pc, #164]	; (80084d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008434:	4b28      	ldr	r3, [pc, #160]	; (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3304      	adds	r3, #4
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff f823 	bl	8007486 <uxListRemove>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008446:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	2201      	movs	r2, #1
 800844e:	fa02 f303 	lsl.w	r3, r2, r3
 8008452:	43da      	mvns	r2, r3
 8008454:	4b21      	ldr	r3, [pc, #132]	; (80084dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4013      	ands	r3, r2
 800845a:	4a20      	ldr	r2, [pc, #128]	; (80084dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800845c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008464:	d10a      	bne.n	800847c <prvAddCurrentTaskToDelayedList+0x58>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d007      	beq.n	800847c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800846c:	4b1a      	ldr	r3, [pc, #104]	; (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	481a      	ldr	r0, [pc, #104]	; (80084e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008476:	f7fe ffa9 	bl	80073cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800847a:	e026      	b.n	80084ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4413      	add	r3, r2
 8008482:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008484:	4b14      	ldr	r3, [pc, #80]	; (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	429a      	cmp	r2, r3
 8008492:	d209      	bcs.n	80084a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008494:	4b13      	ldr	r3, [pc, #76]	; (80084e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	4b0f      	ldr	r3, [pc, #60]	; (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3304      	adds	r3, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	4610      	mov	r0, r2
 80084a2:	f7fe ffb7 	bl	8007414 <vListInsert>
}
 80084a6:	e010      	b.n	80084ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084a8:	4b0f      	ldr	r3, [pc, #60]	; (80084e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3304      	adds	r3, #4
 80084b2:	4619      	mov	r1, r3
 80084b4:	4610      	mov	r0, r2
 80084b6:	f7fe ffad 	bl	8007414 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084ba:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d202      	bcs.n	80084ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084c4:	4a09      	ldr	r2, [pc, #36]	; (80084ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	6013      	str	r3, [r2, #0]
}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000954 	.word	0x20000954
 80084d8:	20000850 	.word	0x20000850
 80084dc:	20000958 	.word	0x20000958
 80084e0:	2000093c 	.word	0x2000093c
 80084e4:	2000090c 	.word	0x2000090c
 80084e8:	20000908 	.word	0x20000908
 80084ec:	20000970 	.word	0x20000970

080084f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3b04      	subs	r3, #4
 8008500:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3b04      	subs	r3, #4
 800850e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f023 0201 	bic.w	r2, r3, #1
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3b04      	subs	r3, #4
 800851e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008520:	4a0c      	ldr	r2, [pc, #48]	; (8008554 <pxPortInitialiseStack+0x64>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3b14      	subs	r3, #20
 800852a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3b04      	subs	r3, #4
 8008536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f06f 0202 	mvn.w	r2, #2
 800853e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3b20      	subs	r3, #32
 8008544:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008546:	68fb      	ldr	r3, [r7, #12]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	08008559 	.word	0x08008559

08008558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008562:	4b12      	ldr	r3, [pc, #72]	; (80085ac <prvTaskExitError+0x54>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856a:	d00a      	beq.n	8008582 <prvTaskExitError+0x2a>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	60fb      	str	r3, [r7, #12]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <prvTaskExitError+0x28>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	60bb      	str	r3, [r7, #8]
}
 8008594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008596:	bf00      	nop
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0fc      	beq.n	8008598 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	2000005c 	.word	0x2000005c

080085b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085b0:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <pxCurrentTCBConst2>)
 80085b2:	6819      	ldr	r1, [r3, #0]
 80085b4:	6808      	ldr	r0, [r1, #0]
 80085b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ba:	f380 8809 	msr	PSP, r0
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f04f 0000 	mov.w	r0, #0
 80085c6:	f380 8811 	msr	BASEPRI, r0
 80085ca:	4770      	bx	lr
 80085cc:	f3af 8000 	nop.w

080085d0 <pxCurrentTCBConst2>:
 80085d0:	20000850 	.word	0x20000850
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop

080085d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085d8:	4808      	ldr	r0, [pc, #32]	; (80085fc <prvPortStartFirstTask+0x24>)
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	6800      	ldr	r0, [r0, #0]
 80085de:	f380 8808 	msr	MSP, r0
 80085e2:	f04f 0000 	mov.w	r0, #0
 80085e6:	f380 8814 	msr	CONTROL, r0
 80085ea:	b662      	cpsie	i
 80085ec:	b661      	cpsie	f
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	df00      	svc	0
 80085f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085fa:	bf00      	nop
 80085fc:	e000ed08 	.word	0xe000ed08

08008600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008606:	4b46      	ldr	r3, [pc, #280]	; (8008720 <xPortStartScheduler+0x120>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a46      	ldr	r2, [pc, #280]	; (8008724 <xPortStartScheduler+0x124>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d10a      	bne.n	8008626 <xPortStartScheduler+0x26>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	613b      	str	r3, [r7, #16]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008626:	4b3e      	ldr	r3, [pc, #248]	; (8008720 <xPortStartScheduler+0x120>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a3f      	ldr	r2, [pc, #252]	; (8008728 <xPortStartScheduler+0x128>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d10a      	bne.n	8008646 <xPortStartScheduler+0x46>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008646:	4b39      	ldr	r3, [pc, #228]	; (800872c <xPortStartScheduler+0x12c>)
 8008648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	22ff      	movs	r2, #255	; 0xff
 8008656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008668:	b2da      	uxtb	r2, r3
 800866a:	4b31      	ldr	r3, [pc, #196]	; (8008730 <xPortStartScheduler+0x130>)
 800866c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800866e:	4b31      	ldr	r3, [pc, #196]	; (8008734 <xPortStartScheduler+0x134>)
 8008670:	2207      	movs	r2, #7
 8008672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008674:	e009      	b.n	800868a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008676:	4b2f      	ldr	r3, [pc, #188]	; (8008734 <xPortStartScheduler+0x134>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3b01      	subs	r3, #1
 800867c:	4a2d      	ldr	r2, [pc, #180]	; (8008734 <xPortStartScheduler+0x134>)
 800867e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	b2db      	uxtb	r3, r3
 8008688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008692:	2b80      	cmp	r3, #128	; 0x80
 8008694:	d0ef      	beq.n	8008676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008696:	4b27      	ldr	r3, [pc, #156]	; (8008734 <xPortStartScheduler+0x134>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1c3 0307 	rsb	r3, r3, #7
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d00a      	beq.n	80086b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	60bb      	str	r3, [r7, #8]
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086b8:	4b1e      	ldr	r3, [pc, #120]	; (8008734 <xPortStartScheduler+0x134>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	4a1d      	ldr	r2, [pc, #116]	; (8008734 <xPortStartScheduler+0x134>)
 80086c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086c2:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <xPortStartScheduler+0x134>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086ca:	4a1a      	ldr	r2, [pc, #104]	; (8008734 <xPortStartScheduler+0x134>)
 80086cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086d6:	4b18      	ldr	r3, [pc, #96]	; (8008738 <xPortStartScheduler+0x138>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a17      	ldr	r2, [pc, #92]	; (8008738 <xPortStartScheduler+0x138>)
 80086dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086e2:	4b15      	ldr	r3, [pc, #84]	; (8008738 <xPortStartScheduler+0x138>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a14      	ldr	r2, [pc, #80]	; (8008738 <xPortStartScheduler+0x138>)
 80086e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086ee:	f000 f8dd 	bl	80088ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086f2:	4b12      	ldr	r3, [pc, #72]	; (800873c <xPortStartScheduler+0x13c>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086f8:	f000 f8fc 	bl	80088f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086fc:	4b10      	ldr	r3, [pc, #64]	; (8008740 <xPortStartScheduler+0x140>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a0f      	ldr	r2, [pc, #60]	; (8008740 <xPortStartScheduler+0x140>)
 8008702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008708:	f7ff ff66 	bl	80085d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800870c:	f7ff fcec 	bl	80080e8 <vTaskSwitchContext>
	prvTaskExitError();
 8008710:	f7ff ff22 	bl	8008558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	e000ed00 	.word	0xe000ed00
 8008724:	410fc271 	.word	0x410fc271
 8008728:	410fc270 	.word	0x410fc270
 800872c:	e000e400 	.word	0xe000e400
 8008730:	2000097c 	.word	0x2000097c
 8008734:	20000980 	.word	0x20000980
 8008738:	e000ed20 	.word	0xe000ed20
 800873c:	2000005c 	.word	0x2000005c
 8008740:	e000ef34 	.word	0xe000ef34

08008744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	607b      	str	r3, [r7, #4]
}
 800875c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800875e:	4b0f      	ldr	r3, [pc, #60]	; (800879c <vPortEnterCritical+0x58>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3301      	adds	r3, #1
 8008764:	4a0d      	ldr	r2, [pc, #52]	; (800879c <vPortEnterCritical+0x58>)
 8008766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008768:	4b0c      	ldr	r3, [pc, #48]	; (800879c <vPortEnterCritical+0x58>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d10f      	bne.n	8008790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008770:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <vPortEnterCritical+0x5c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <vPortEnterCritical+0x4c>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	603b      	str	r3, [r7, #0]
}
 800878c:	bf00      	nop
 800878e:	e7fe      	b.n	800878e <vPortEnterCritical+0x4a>
	}
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	2000005c 	.word	0x2000005c
 80087a0:	e000ed04 	.word	0xe000ed04

080087a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087aa:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <vPortExitCritical+0x50>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10a      	bne.n	80087c8 <vPortExitCritical+0x24>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	607b      	str	r3, [r7, #4]
}
 80087c4:	bf00      	nop
 80087c6:	e7fe      	b.n	80087c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <vPortExitCritical+0x50>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	4a09      	ldr	r2, [pc, #36]	; (80087f4 <vPortExitCritical+0x50>)
 80087d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087d2:	4b08      	ldr	r3, [pc, #32]	; (80087f4 <vPortExitCritical+0x50>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <vPortExitCritical+0x42>
 80087da:	2300      	movs	r3, #0
 80087dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	2000005c 	.word	0x2000005c
	...

08008800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008800:	f3ef 8009 	mrs	r0, PSP
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	4b15      	ldr	r3, [pc, #84]	; (8008860 <pxCurrentTCBConst>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	f01e 0f10 	tst.w	lr, #16
 8008810:	bf08      	it	eq
 8008812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881a:	6010      	str	r0, [r2, #0]
 800881c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008824:	f380 8811 	msr	BASEPRI, r0
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f7ff fc5a 	bl	80080e8 <vTaskSwitchContext>
 8008834:	f04f 0000 	mov.w	r0, #0
 8008838:	f380 8811 	msr	BASEPRI, r0
 800883c:	bc09      	pop	{r0, r3}
 800883e:	6819      	ldr	r1, [r3, #0]
 8008840:	6808      	ldr	r0, [r1, #0]
 8008842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008846:	f01e 0f10 	tst.w	lr, #16
 800884a:	bf08      	it	eq
 800884c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008850:	f380 8809 	msr	PSP, r0
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	f3af 8000 	nop.w

08008860 <pxCurrentTCBConst>:
 8008860:	20000850 	.word	0x20000850
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop

08008868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	607b      	str	r3, [r7, #4]
}
 8008880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008882:	f7ff fb79 	bl	8007f78 <xTaskIncrementTick>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d003      	beq.n	8008894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800888c:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <SysTick_Handler+0x40>)
 800888e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	2300      	movs	r3, #0
 8008896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	f383 8811 	msr	BASEPRI, r3
}
 800889e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	e000ed04 	.word	0xe000ed04

080088ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088b0:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <vPortSetupTimerInterrupt+0x34>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088b6:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <vPortSetupTimerInterrupt+0x38>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088bc:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <vPortSetupTimerInterrupt+0x3c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <vPortSetupTimerInterrupt+0x40>)
 80088c2:	fba2 2303 	umull	r2, r3, r2, r3
 80088c6:	099b      	lsrs	r3, r3, #6
 80088c8:	4a09      	ldr	r2, [pc, #36]	; (80088f0 <vPortSetupTimerInterrupt+0x44>)
 80088ca:	3b01      	subs	r3, #1
 80088cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088ce:	4b04      	ldr	r3, [pc, #16]	; (80088e0 <vPortSetupTimerInterrupt+0x34>)
 80088d0:	2207      	movs	r2, #7
 80088d2:	601a      	str	r2, [r3, #0]
}
 80088d4:	bf00      	nop
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	e000e010 	.word	0xe000e010
 80088e4:	e000e018 	.word	0xe000e018
 80088e8:	2000000c 	.word	0x2000000c
 80088ec:	10624dd3 	.word	0x10624dd3
 80088f0:	e000e014 	.word	0xe000e014

080088f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008904 <vPortEnableVFP+0x10>
 80088f8:	6801      	ldr	r1, [r0, #0]
 80088fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088fe:	6001      	str	r1, [r0, #0]
 8008900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008902:	bf00      	nop
 8008904:	e000ed88 	.word	0xe000ed88

08008908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08a      	sub	sp, #40	; 0x28
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008914:	f7ff fa86 	bl	8007e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008918:	4b5b      	ldr	r3, [pc, #364]	; (8008a88 <pvPortMalloc+0x180>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008920:	f000 f920 	bl	8008b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008924:	4b59      	ldr	r3, [pc, #356]	; (8008a8c <pvPortMalloc+0x184>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4013      	ands	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	f040 8093 	bne.w	8008a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01d      	beq.n	8008974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008938:	2208      	movs	r2, #8
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4413      	add	r3, r2
 800893e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	2b00      	cmp	r3, #0
 8008948:	d014      	beq.n	8008974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f023 0307 	bic.w	r3, r3, #7
 8008950:	3308      	adds	r3, #8
 8008952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <pvPortMalloc+0x6c>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	617b      	str	r3, [r7, #20]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d06e      	beq.n	8008a58 <pvPortMalloc+0x150>
 800897a:	4b45      	ldr	r3, [pc, #276]	; (8008a90 <pvPortMalloc+0x188>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	429a      	cmp	r2, r3
 8008982:	d869      	bhi.n	8008a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008984:	4b43      	ldr	r3, [pc, #268]	; (8008a94 <pvPortMalloc+0x18c>)
 8008986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008988:	4b42      	ldr	r3, [pc, #264]	; (8008a94 <pvPortMalloc+0x18c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800898e:	e004      	b.n	800899a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d903      	bls.n	80089ac <pvPortMalloc+0xa4>
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1f1      	bne.n	8008990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ac:	4b36      	ldr	r3, [pc, #216]	; (8008a88 <pvPortMalloc+0x180>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d050      	beq.n	8008a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2208      	movs	r2, #8
 80089bc:	4413      	add	r3, r2
 80089be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	2308      	movs	r3, #8
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d91f      	bls.n	8008a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <pvPortMalloc+0xf8>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	613b      	str	r3, [r7, #16]
}
 80089fc:	bf00      	nop
 80089fe:	e7fe      	b.n	80089fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a12:	69b8      	ldr	r0, [r7, #24]
 8008a14:	f000 f908 	bl	8008c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a18:	4b1d      	ldr	r3, [pc, #116]	; (8008a90 <pvPortMalloc+0x188>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	4a1b      	ldr	r2, [pc, #108]	; (8008a90 <pvPortMalloc+0x188>)
 8008a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a26:	4b1a      	ldr	r3, [pc, #104]	; (8008a90 <pvPortMalloc+0x188>)
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	4b1b      	ldr	r3, [pc, #108]	; (8008a98 <pvPortMalloc+0x190>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d203      	bcs.n	8008a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a32:	4b17      	ldr	r3, [pc, #92]	; (8008a90 <pvPortMalloc+0x188>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a18      	ldr	r2, [pc, #96]	; (8008a98 <pvPortMalloc+0x190>)
 8008a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <pvPortMalloc+0x184>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	431a      	orrs	r2, r3
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <pvPortMalloc+0x194>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3301      	adds	r3, #1
 8008a54:	4a11      	ldr	r2, [pc, #68]	; (8008a9c <pvPortMalloc+0x194>)
 8008a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a58:	f7ff f9f2 	bl	8007e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00a      	beq.n	8008a7c <pvPortMalloc+0x174>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	60fb      	str	r3, [r7, #12]
}
 8008a78:	bf00      	nop
 8008a7a:	e7fe      	b.n	8008a7a <pvPortMalloc+0x172>
	return pvReturn;
 8008a7c:	69fb      	ldr	r3, [r7, #28]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3728      	adds	r7, #40	; 0x28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	2000458c 	.word	0x2000458c
 8008a8c:	200045a0 	.word	0x200045a0
 8008a90:	20004590 	.word	0x20004590
 8008a94:	20004584 	.word	0x20004584
 8008a98:	20004594 	.word	0x20004594
 8008a9c:	20004598 	.word	0x20004598

08008aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d04d      	beq.n	8008b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ab2:	2308      	movs	r3, #8
 8008ab4:	425b      	negs	r3, r3
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4413      	add	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	4b24      	ldr	r3, [pc, #144]	; (8008b58 <vPortFree+0xb8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10a      	bne.n	8008ae4 <vPortFree+0x44>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	60fb      	str	r3, [r7, #12]
}
 8008ae0:	bf00      	nop
 8008ae2:	e7fe      	b.n	8008ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00a      	beq.n	8008b02 <vPortFree+0x62>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	60bb      	str	r3, [r7, #8]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <vPortFree+0xb8>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d01e      	beq.n	8008b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d11a      	bne.n	8008b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	4b0e      	ldr	r3, [pc, #56]	; (8008b58 <vPortFree+0xb8>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b28:	f7ff f97c 	bl	8007e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <vPortFree+0xbc>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	4a09      	ldr	r2, [pc, #36]	; (8008b5c <vPortFree+0xbc>)
 8008b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b3a:	6938      	ldr	r0, [r7, #16]
 8008b3c:	f000 f874 	bl	8008c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b40:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <vPortFree+0xc0>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3301      	adds	r3, #1
 8008b46:	4a06      	ldr	r2, [pc, #24]	; (8008b60 <vPortFree+0xc0>)
 8008b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b4a:	f7ff f979 	bl	8007e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b4e:	bf00      	nop
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	200045a0 	.word	0x200045a0
 8008b5c:	20004590 	.word	0x20004590
 8008b60:	2000459c 	.word	0x2000459c

08008b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b70:	4b27      	ldr	r3, [pc, #156]	; (8008c10 <prvHeapInit+0xac>)
 8008b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3307      	adds	r3, #7
 8008b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	4a1f      	ldr	r2, [pc, #124]	; (8008c10 <prvHeapInit+0xac>)
 8008b94:	4413      	add	r3, r2
 8008b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <prvHeapInit+0xb0>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ba2:	4b1c      	ldr	r3, [pc, #112]	; (8008c14 <prvHeapInit+0xb0>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1a9b      	subs	r3, r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a15      	ldr	r2, [pc, #84]	; (8008c18 <prvHeapInit+0xb4>)
 8008bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bc6:	4b14      	ldr	r3, [pc, #80]	; (8008c18 <prvHeapInit+0xb4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bce:	4b12      	ldr	r3, [pc, #72]	; (8008c18 <prvHeapInit+0xb4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008be4:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <prvHeapInit+0xb4>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4a0a      	ldr	r2, [pc, #40]	; (8008c1c <prvHeapInit+0xb8>)
 8008bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a09      	ldr	r2, [pc, #36]	; (8008c20 <prvHeapInit+0xbc>)
 8008bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bfc:	4b09      	ldr	r3, [pc, #36]	; (8008c24 <prvHeapInit+0xc0>)
 8008bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c02:	601a      	str	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	20000984 	.word	0x20000984
 8008c14:	20004584 	.word	0x20004584
 8008c18:	2000458c 	.word	0x2000458c
 8008c1c:	20004594 	.word	0x20004594
 8008c20:	20004590 	.word	0x20004590
 8008c24:	200045a0 	.word	0x200045a0

08008c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c30:	4b28      	ldr	r3, [pc, #160]	; (8008cd4 <prvInsertBlockIntoFreeList+0xac>)
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	e002      	b.n	8008c3c <prvInsertBlockIntoFreeList+0x14>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d8f7      	bhi.n	8008c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	4413      	add	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d108      	bne.n	8008c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	441a      	add	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	441a      	add	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d118      	bne.n	8008cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d00d      	beq.n	8008ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	441a      	add	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	e008      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	e003      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d002      	beq.n	8008cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20004584 	.word	0x20004584
 8008cd8:	2000458c 	.word	0x2000458c

08008cdc <__errno>:
 8008cdc:	4b01      	ldr	r3, [pc, #4]	; (8008ce4 <__errno+0x8>)
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	20000060 	.word	0x20000060

08008ce8 <std>:
 8008ce8:	2300      	movs	r3, #0
 8008cea:	b510      	push	{r4, lr}
 8008cec:	4604      	mov	r4, r0
 8008cee:	e9c0 3300 	strd	r3, r3, [r0]
 8008cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cf6:	6083      	str	r3, [r0, #8]
 8008cf8:	8181      	strh	r1, [r0, #12]
 8008cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8008cfc:	81c2      	strh	r2, [r0, #14]
 8008cfe:	6183      	str	r3, [r0, #24]
 8008d00:	4619      	mov	r1, r3
 8008d02:	2208      	movs	r2, #8
 8008d04:	305c      	adds	r0, #92	; 0x5c
 8008d06:	f000 f923 	bl	8008f50 <memset>
 8008d0a:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <std+0x38>)
 8008d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d0e:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <std+0x3c>)
 8008d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d12:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <std+0x40>)
 8008d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d16:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <std+0x44>)
 8008d18:	6224      	str	r4, [r4, #32]
 8008d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d1c:	bd10      	pop	{r4, pc}
 8008d1e:	bf00      	nop
 8008d20:	08009b29 	.word	0x08009b29
 8008d24:	08009b4b 	.word	0x08009b4b
 8008d28:	08009b83 	.word	0x08009b83
 8008d2c:	08009ba7 	.word	0x08009ba7

08008d30 <_cleanup_r>:
 8008d30:	4901      	ldr	r1, [pc, #4]	; (8008d38 <_cleanup_r+0x8>)
 8008d32:	f000 b8af 	b.w	8008e94 <_fwalk_reent>
 8008d36:	bf00      	nop
 8008d38:	0800aaa9 	.word	0x0800aaa9

08008d3c <__sfmoreglue>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	2268      	movs	r2, #104	; 0x68
 8008d40:	1e4d      	subs	r5, r1, #1
 8008d42:	4355      	muls	r5, r2
 8008d44:	460e      	mov	r6, r1
 8008d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d4a:	f000 f975 	bl	8009038 <_malloc_r>
 8008d4e:	4604      	mov	r4, r0
 8008d50:	b140      	cbz	r0, 8008d64 <__sfmoreglue+0x28>
 8008d52:	2100      	movs	r1, #0
 8008d54:	e9c0 1600 	strd	r1, r6, [r0]
 8008d58:	300c      	adds	r0, #12
 8008d5a:	60a0      	str	r0, [r4, #8]
 8008d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d60:	f000 f8f6 	bl	8008f50 <memset>
 8008d64:	4620      	mov	r0, r4
 8008d66:	bd70      	pop	{r4, r5, r6, pc}

08008d68 <__sfp_lock_acquire>:
 8008d68:	4801      	ldr	r0, [pc, #4]	; (8008d70 <__sfp_lock_acquire+0x8>)
 8008d6a:	f000 b8d8 	b.w	8008f1e <__retarget_lock_acquire_recursive>
 8008d6e:	bf00      	nop
 8008d70:	200045a5 	.word	0x200045a5

08008d74 <__sfp_lock_release>:
 8008d74:	4801      	ldr	r0, [pc, #4]	; (8008d7c <__sfp_lock_release+0x8>)
 8008d76:	f000 b8d3 	b.w	8008f20 <__retarget_lock_release_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	200045a5 	.word	0x200045a5

08008d80 <__sinit_lock_acquire>:
 8008d80:	4801      	ldr	r0, [pc, #4]	; (8008d88 <__sinit_lock_acquire+0x8>)
 8008d82:	f000 b8cc 	b.w	8008f1e <__retarget_lock_acquire_recursive>
 8008d86:	bf00      	nop
 8008d88:	200045a6 	.word	0x200045a6

08008d8c <__sinit_lock_release>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	; (8008d94 <__sinit_lock_release+0x8>)
 8008d8e:	f000 b8c7 	b.w	8008f20 <__retarget_lock_release_recursive>
 8008d92:	bf00      	nop
 8008d94:	200045a6 	.word	0x200045a6

08008d98 <__sinit>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	f7ff fff0 	bl	8008d80 <__sinit_lock_acquire>
 8008da0:	69a3      	ldr	r3, [r4, #24]
 8008da2:	b11b      	cbz	r3, 8008dac <__sinit+0x14>
 8008da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da8:	f7ff bff0 	b.w	8008d8c <__sinit_lock_release>
 8008dac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008db0:	6523      	str	r3, [r4, #80]	; 0x50
 8008db2:	4b13      	ldr	r3, [pc, #76]	; (8008e00 <__sinit+0x68>)
 8008db4:	4a13      	ldr	r2, [pc, #76]	; (8008e04 <__sinit+0x6c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dba:	42a3      	cmp	r3, r4
 8008dbc:	bf04      	itt	eq
 8008dbe:	2301      	moveq	r3, #1
 8008dc0:	61a3      	streq	r3, [r4, #24]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 f820 	bl	8008e08 <__sfp>
 8008dc8:	6060      	str	r0, [r4, #4]
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f000 f81c 	bl	8008e08 <__sfp>
 8008dd0:	60a0      	str	r0, [r4, #8]
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 f818 	bl	8008e08 <__sfp>
 8008dd8:	2200      	movs	r2, #0
 8008dda:	60e0      	str	r0, [r4, #12]
 8008ddc:	2104      	movs	r1, #4
 8008dde:	6860      	ldr	r0, [r4, #4]
 8008de0:	f7ff ff82 	bl	8008ce8 <std>
 8008de4:	68a0      	ldr	r0, [r4, #8]
 8008de6:	2201      	movs	r2, #1
 8008de8:	2109      	movs	r1, #9
 8008dea:	f7ff ff7d 	bl	8008ce8 <std>
 8008dee:	68e0      	ldr	r0, [r4, #12]
 8008df0:	2202      	movs	r2, #2
 8008df2:	2112      	movs	r1, #18
 8008df4:	f7ff ff78 	bl	8008ce8 <std>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	61a3      	str	r3, [r4, #24]
 8008dfc:	e7d2      	b.n	8008da4 <__sinit+0xc>
 8008dfe:	bf00      	nop
 8008e00:	0800c1e0 	.word	0x0800c1e0
 8008e04:	08008d31 	.word	0x08008d31

08008e08 <__sfp>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	f7ff ffac 	bl	8008d68 <__sfp_lock_acquire>
 8008e10:	4b1e      	ldr	r3, [pc, #120]	; (8008e8c <__sfp+0x84>)
 8008e12:	681e      	ldr	r6, [r3, #0]
 8008e14:	69b3      	ldr	r3, [r6, #24]
 8008e16:	b913      	cbnz	r3, 8008e1e <__sfp+0x16>
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f7ff ffbd 	bl	8008d98 <__sinit>
 8008e1e:	3648      	adds	r6, #72	; 0x48
 8008e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	d503      	bpl.n	8008e30 <__sfp+0x28>
 8008e28:	6833      	ldr	r3, [r6, #0]
 8008e2a:	b30b      	cbz	r3, 8008e70 <__sfp+0x68>
 8008e2c:	6836      	ldr	r6, [r6, #0]
 8008e2e:	e7f7      	b.n	8008e20 <__sfp+0x18>
 8008e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e34:	b9d5      	cbnz	r5, 8008e6c <__sfp+0x64>
 8008e36:	4b16      	ldr	r3, [pc, #88]	; (8008e90 <__sfp+0x88>)
 8008e38:	60e3      	str	r3, [r4, #12]
 8008e3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e3e:	6665      	str	r5, [r4, #100]	; 0x64
 8008e40:	f000 f86c 	bl	8008f1c <__retarget_lock_init_recursive>
 8008e44:	f7ff ff96 	bl	8008d74 <__sfp_lock_release>
 8008e48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e50:	6025      	str	r5, [r4, #0]
 8008e52:	61a5      	str	r5, [r4, #24]
 8008e54:	2208      	movs	r2, #8
 8008e56:	4629      	mov	r1, r5
 8008e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e5c:	f000 f878 	bl	8008f50 <memset>
 8008e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e68:	4620      	mov	r0, r4
 8008e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6c:	3468      	adds	r4, #104	; 0x68
 8008e6e:	e7d9      	b.n	8008e24 <__sfp+0x1c>
 8008e70:	2104      	movs	r1, #4
 8008e72:	4638      	mov	r0, r7
 8008e74:	f7ff ff62 	bl	8008d3c <__sfmoreglue>
 8008e78:	4604      	mov	r4, r0
 8008e7a:	6030      	str	r0, [r6, #0]
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d1d5      	bne.n	8008e2c <__sfp+0x24>
 8008e80:	f7ff ff78 	bl	8008d74 <__sfp_lock_release>
 8008e84:	230c      	movs	r3, #12
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	e7ee      	b.n	8008e68 <__sfp+0x60>
 8008e8a:	bf00      	nop
 8008e8c:	0800c1e0 	.word	0x0800c1e0
 8008e90:	ffff0001 	.word	0xffff0001

08008e94 <_fwalk_reent>:
 8008e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e98:	4606      	mov	r6, r0
 8008e9a:	4688      	mov	r8, r1
 8008e9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ea0:	2700      	movs	r7, #0
 8008ea2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ea6:	f1b9 0901 	subs.w	r9, r9, #1
 8008eaa:	d505      	bpl.n	8008eb8 <_fwalk_reent+0x24>
 8008eac:	6824      	ldr	r4, [r4, #0]
 8008eae:	2c00      	cmp	r4, #0
 8008eb0:	d1f7      	bne.n	8008ea2 <_fwalk_reent+0xe>
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb8:	89ab      	ldrh	r3, [r5, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d907      	bls.n	8008ece <_fwalk_reent+0x3a>
 8008ebe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	d003      	beq.n	8008ece <_fwalk_reent+0x3a>
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4630      	mov	r0, r6
 8008eca:	47c0      	blx	r8
 8008ecc:	4307      	orrs	r7, r0
 8008ece:	3568      	adds	r5, #104	; 0x68
 8008ed0:	e7e9      	b.n	8008ea6 <_fwalk_reent+0x12>
	...

08008ed4 <__libc_init_array>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	4d0d      	ldr	r5, [pc, #52]	; (8008f0c <__libc_init_array+0x38>)
 8008ed8:	4c0d      	ldr	r4, [pc, #52]	; (8008f10 <__libc_init_array+0x3c>)
 8008eda:	1b64      	subs	r4, r4, r5
 8008edc:	10a4      	asrs	r4, r4, #2
 8008ede:	2600      	movs	r6, #0
 8008ee0:	42a6      	cmp	r6, r4
 8008ee2:	d109      	bne.n	8008ef8 <__libc_init_array+0x24>
 8008ee4:	4d0b      	ldr	r5, [pc, #44]	; (8008f14 <__libc_init_array+0x40>)
 8008ee6:	4c0c      	ldr	r4, [pc, #48]	; (8008f18 <__libc_init_array+0x44>)
 8008ee8:	f002 fed0 	bl	800bc8c <_init>
 8008eec:	1b64      	subs	r4, r4, r5
 8008eee:	10a4      	asrs	r4, r4, #2
 8008ef0:	2600      	movs	r6, #0
 8008ef2:	42a6      	cmp	r6, r4
 8008ef4:	d105      	bne.n	8008f02 <__libc_init_array+0x2e>
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efc:	4798      	blx	r3
 8008efe:	3601      	adds	r6, #1
 8008f00:	e7ee      	b.n	8008ee0 <__libc_init_array+0xc>
 8008f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f06:	4798      	blx	r3
 8008f08:	3601      	adds	r6, #1
 8008f0a:	e7f2      	b.n	8008ef2 <__libc_init_array+0x1e>
 8008f0c:	0800c564 	.word	0x0800c564
 8008f10:	0800c564 	.word	0x0800c564
 8008f14:	0800c564 	.word	0x0800c564
 8008f18:	0800c568 	.word	0x0800c568

08008f1c <__retarget_lock_init_recursive>:
 8008f1c:	4770      	bx	lr

08008f1e <__retarget_lock_acquire_recursive>:
 8008f1e:	4770      	bx	lr

08008f20 <__retarget_lock_release_recursive>:
 8008f20:	4770      	bx	lr
	...

08008f24 <malloc>:
 8008f24:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <malloc+0xc>)
 8008f26:	4601      	mov	r1, r0
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	f000 b885 	b.w	8009038 <_malloc_r>
 8008f2e:	bf00      	nop
 8008f30:	20000060 	.word	0x20000060

08008f34 <memcpy>:
 8008f34:	440a      	add	r2, r1
 8008f36:	4291      	cmp	r1, r2
 8008f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f3c:	d100      	bne.n	8008f40 <memcpy+0xc>
 8008f3e:	4770      	bx	lr
 8008f40:	b510      	push	{r4, lr}
 8008f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f4a:	4291      	cmp	r1, r2
 8008f4c:	d1f9      	bne.n	8008f42 <memcpy+0xe>
 8008f4e:	bd10      	pop	{r4, pc}

08008f50 <memset>:
 8008f50:	4402      	add	r2, r0
 8008f52:	4603      	mov	r3, r0
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d100      	bne.n	8008f5a <memset+0xa>
 8008f58:	4770      	bx	lr
 8008f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5e:	e7f9      	b.n	8008f54 <memset+0x4>

08008f60 <_free_r>:
 8008f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f62:	2900      	cmp	r1, #0
 8008f64:	d044      	beq.n	8008ff0 <_free_r+0x90>
 8008f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6a:	9001      	str	r0, [sp, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f72:	bfb8      	it	lt
 8008f74:	18e4      	addlt	r4, r4, r3
 8008f76:	f001 fde9 	bl	800ab4c <__malloc_lock>
 8008f7a:	4a1e      	ldr	r2, [pc, #120]	; (8008ff4 <_free_r+0x94>)
 8008f7c:	9801      	ldr	r0, [sp, #4]
 8008f7e:	6813      	ldr	r3, [r2, #0]
 8008f80:	b933      	cbnz	r3, 8008f90 <_free_r+0x30>
 8008f82:	6063      	str	r3, [r4, #4]
 8008f84:	6014      	str	r4, [r2, #0]
 8008f86:	b003      	add	sp, #12
 8008f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f8c:	f001 bde4 	b.w	800ab58 <__malloc_unlock>
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d908      	bls.n	8008fa6 <_free_r+0x46>
 8008f94:	6825      	ldr	r5, [r4, #0]
 8008f96:	1961      	adds	r1, r4, r5
 8008f98:	428b      	cmp	r3, r1
 8008f9a:	bf01      	itttt	eq
 8008f9c:	6819      	ldreq	r1, [r3, #0]
 8008f9e:	685b      	ldreq	r3, [r3, #4]
 8008fa0:	1949      	addeq	r1, r1, r5
 8008fa2:	6021      	streq	r1, [r4, #0]
 8008fa4:	e7ed      	b.n	8008f82 <_free_r+0x22>
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	b10b      	cbz	r3, 8008fb0 <_free_r+0x50>
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	d9fa      	bls.n	8008fa6 <_free_r+0x46>
 8008fb0:	6811      	ldr	r1, [r2, #0]
 8008fb2:	1855      	adds	r5, r2, r1
 8008fb4:	42a5      	cmp	r5, r4
 8008fb6:	d10b      	bne.n	8008fd0 <_free_r+0x70>
 8008fb8:	6824      	ldr	r4, [r4, #0]
 8008fba:	4421      	add	r1, r4
 8008fbc:	1854      	adds	r4, r2, r1
 8008fbe:	42a3      	cmp	r3, r4
 8008fc0:	6011      	str	r1, [r2, #0]
 8008fc2:	d1e0      	bne.n	8008f86 <_free_r+0x26>
 8008fc4:	681c      	ldr	r4, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	6053      	str	r3, [r2, #4]
 8008fca:	4421      	add	r1, r4
 8008fcc:	6011      	str	r1, [r2, #0]
 8008fce:	e7da      	b.n	8008f86 <_free_r+0x26>
 8008fd0:	d902      	bls.n	8008fd8 <_free_r+0x78>
 8008fd2:	230c      	movs	r3, #12
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	e7d6      	b.n	8008f86 <_free_r+0x26>
 8008fd8:	6825      	ldr	r5, [r4, #0]
 8008fda:	1961      	adds	r1, r4, r5
 8008fdc:	428b      	cmp	r3, r1
 8008fde:	bf04      	itt	eq
 8008fe0:	6819      	ldreq	r1, [r3, #0]
 8008fe2:	685b      	ldreq	r3, [r3, #4]
 8008fe4:	6063      	str	r3, [r4, #4]
 8008fe6:	bf04      	itt	eq
 8008fe8:	1949      	addeq	r1, r1, r5
 8008fea:	6021      	streq	r1, [r4, #0]
 8008fec:	6054      	str	r4, [r2, #4]
 8008fee:	e7ca      	b.n	8008f86 <_free_r+0x26>
 8008ff0:	b003      	add	sp, #12
 8008ff2:	bd30      	pop	{r4, r5, pc}
 8008ff4:	200045a8 	.word	0x200045a8

08008ff8 <sbrk_aligned>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	4e0e      	ldr	r6, [pc, #56]	; (8009034 <sbrk_aligned+0x3c>)
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	6831      	ldr	r1, [r6, #0]
 8009000:	4605      	mov	r5, r0
 8009002:	b911      	cbnz	r1, 800900a <sbrk_aligned+0x12>
 8009004:	f000 fd60 	bl	8009ac8 <_sbrk_r>
 8009008:	6030      	str	r0, [r6, #0]
 800900a:	4621      	mov	r1, r4
 800900c:	4628      	mov	r0, r5
 800900e:	f000 fd5b 	bl	8009ac8 <_sbrk_r>
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	d00a      	beq.n	800902c <sbrk_aligned+0x34>
 8009016:	1cc4      	adds	r4, r0, #3
 8009018:	f024 0403 	bic.w	r4, r4, #3
 800901c:	42a0      	cmp	r0, r4
 800901e:	d007      	beq.n	8009030 <sbrk_aligned+0x38>
 8009020:	1a21      	subs	r1, r4, r0
 8009022:	4628      	mov	r0, r5
 8009024:	f000 fd50 	bl	8009ac8 <_sbrk_r>
 8009028:	3001      	adds	r0, #1
 800902a:	d101      	bne.n	8009030 <sbrk_aligned+0x38>
 800902c:	f04f 34ff 	mov.w	r4, #4294967295
 8009030:	4620      	mov	r0, r4
 8009032:	bd70      	pop	{r4, r5, r6, pc}
 8009034:	200045ac 	.word	0x200045ac

08009038 <_malloc_r>:
 8009038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903c:	1ccd      	adds	r5, r1, #3
 800903e:	f025 0503 	bic.w	r5, r5, #3
 8009042:	3508      	adds	r5, #8
 8009044:	2d0c      	cmp	r5, #12
 8009046:	bf38      	it	cc
 8009048:	250c      	movcc	r5, #12
 800904a:	2d00      	cmp	r5, #0
 800904c:	4607      	mov	r7, r0
 800904e:	db01      	blt.n	8009054 <_malloc_r+0x1c>
 8009050:	42a9      	cmp	r1, r5
 8009052:	d905      	bls.n	8009060 <_malloc_r+0x28>
 8009054:	230c      	movs	r3, #12
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	2600      	movs	r6, #0
 800905a:	4630      	mov	r0, r6
 800905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009060:	4e2e      	ldr	r6, [pc, #184]	; (800911c <_malloc_r+0xe4>)
 8009062:	f001 fd73 	bl	800ab4c <__malloc_lock>
 8009066:	6833      	ldr	r3, [r6, #0]
 8009068:	461c      	mov	r4, r3
 800906a:	bb34      	cbnz	r4, 80090ba <_malloc_r+0x82>
 800906c:	4629      	mov	r1, r5
 800906e:	4638      	mov	r0, r7
 8009070:	f7ff ffc2 	bl	8008ff8 <sbrk_aligned>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	4604      	mov	r4, r0
 8009078:	d14d      	bne.n	8009116 <_malloc_r+0xde>
 800907a:	6834      	ldr	r4, [r6, #0]
 800907c:	4626      	mov	r6, r4
 800907e:	2e00      	cmp	r6, #0
 8009080:	d140      	bne.n	8009104 <_malloc_r+0xcc>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	4631      	mov	r1, r6
 8009086:	4638      	mov	r0, r7
 8009088:	eb04 0803 	add.w	r8, r4, r3
 800908c:	f000 fd1c 	bl	8009ac8 <_sbrk_r>
 8009090:	4580      	cmp	r8, r0
 8009092:	d13a      	bne.n	800910a <_malloc_r+0xd2>
 8009094:	6821      	ldr	r1, [r4, #0]
 8009096:	3503      	adds	r5, #3
 8009098:	1a6d      	subs	r5, r5, r1
 800909a:	f025 0503 	bic.w	r5, r5, #3
 800909e:	3508      	adds	r5, #8
 80090a0:	2d0c      	cmp	r5, #12
 80090a2:	bf38      	it	cc
 80090a4:	250c      	movcc	r5, #12
 80090a6:	4629      	mov	r1, r5
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7ff ffa5 	bl	8008ff8 <sbrk_aligned>
 80090ae:	3001      	adds	r0, #1
 80090b0:	d02b      	beq.n	800910a <_malloc_r+0xd2>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	442b      	add	r3, r5
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	e00e      	b.n	80090d8 <_malloc_r+0xa0>
 80090ba:	6822      	ldr	r2, [r4, #0]
 80090bc:	1b52      	subs	r2, r2, r5
 80090be:	d41e      	bmi.n	80090fe <_malloc_r+0xc6>
 80090c0:	2a0b      	cmp	r2, #11
 80090c2:	d916      	bls.n	80090f2 <_malloc_r+0xba>
 80090c4:	1961      	adds	r1, r4, r5
 80090c6:	42a3      	cmp	r3, r4
 80090c8:	6025      	str	r5, [r4, #0]
 80090ca:	bf18      	it	ne
 80090cc:	6059      	strne	r1, [r3, #4]
 80090ce:	6863      	ldr	r3, [r4, #4]
 80090d0:	bf08      	it	eq
 80090d2:	6031      	streq	r1, [r6, #0]
 80090d4:	5162      	str	r2, [r4, r5]
 80090d6:	604b      	str	r3, [r1, #4]
 80090d8:	4638      	mov	r0, r7
 80090da:	f104 060b 	add.w	r6, r4, #11
 80090de:	f001 fd3b 	bl	800ab58 <__malloc_unlock>
 80090e2:	f026 0607 	bic.w	r6, r6, #7
 80090e6:	1d23      	adds	r3, r4, #4
 80090e8:	1af2      	subs	r2, r6, r3
 80090ea:	d0b6      	beq.n	800905a <_malloc_r+0x22>
 80090ec:	1b9b      	subs	r3, r3, r6
 80090ee:	50a3      	str	r3, [r4, r2]
 80090f0:	e7b3      	b.n	800905a <_malloc_r+0x22>
 80090f2:	6862      	ldr	r2, [r4, #4]
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	bf0c      	ite	eq
 80090f8:	6032      	streq	r2, [r6, #0]
 80090fa:	605a      	strne	r2, [r3, #4]
 80090fc:	e7ec      	b.n	80090d8 <_malloc_r+0xa0>
 80090fe:	4623      	mov	r3, r4
 8009100:	6864      	ldr	r4, [r4, #4]
 8009102:	e7b2      	b.n	800906a <_malloc_r+0x32>
 8009104:	4634      	mov	r4, r6
 8009106:	6876      	ldr	r6, [r6, #4]
 8009108:	e7b9      	b.n	800907e <_malloc_r+0x46>
 800910a:	230c      	movs	r3, #12
 800910c:	603b      	str	r3, [r7, #0]
 800910e:	4638      	mov	r0, r7
 8009110:	f001 fd22 	bl	800ab58 <__malloc_unlock>
 8009114:	e7a1      	b.n	800905a <_malloc_r+0x22>
 8009116:	6025      	str	r5, [r4, #0]
 8009118:	e7de      	b.n	80090d8 <_malloc_r+0xa0>
 800911a:	bf00      	nop
 800911c:	200045a8 	.word	0x200045a8

08009120 <__cvt>:
 8009120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009124:	ec55 4b10 	vmov	r4, r5, d0
 8009128:	2d00      	cmp	r5, #0
 800912a:	460e      	mov	r6, r1
 800912c:	4619      	mov	r1, r3
 800912e:	462b      	mov	r3, r5
 8009130:	bfbb      	ittet	lt
 8009132:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009136:	461d      	movlt	r5, r3
 8009138:	2300      	movge	r3, #0
 800913a:	232d      	movlt	r3, #45	; 0x2d
 800913c:	700b      	strb	r3, [r1, #0]
 800913e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009140:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009144:	4691      	mov	r9, r2
 8009146:	f023 0820 	bic.w	r8, r3, #32
 800914a:	bfbc      	itt	lt
 800914c:	4622      	movlt	r2, r4
 800914e:	4614      	movlt	r4, r2
 8009150:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009154:	d005      	beq.n	8009162 <__cvt+0x42>
 8009156:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800915a:	d100      	bne.n	800915e <__cvt+0x3e>
 800915c:	3601      	adds	r6, #1
 800915e:	2102      	movs	r1, #2
 8009160:	e000      	b.n	8009164 <__cvt+0x44>
 8009162:	2103      	movs	r1, #3
 8009164:	ab03      	add	r3, sp, #12
 8009166:	9301      	str	r3, [sp, #4]
 8009168:	ab02      	add	r3, sp, #8
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	ec45 4b10 	vmov	d0, r4, r5
 8009170:	4653      	mov	r3, sl
 8009172:	4632      	mov	r2, r6
 8009174:	f000 fe24 	bl	8009dc0 <_dtoa_r>
 8009178:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800917c:	4607      	mov	r7, r0
 800917e:	d102      	bne.n	8009186 <__cvt+0x66>
 8009180:	f019 0f01 	tst.w	r9, #1
 8009184:	d022      	beq.n	80091cc <__cvt+0xac>
 8009186:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800918a:	eb07 0906 	add.w	r9, r7, r6
 800918e:	d110      	bne.n	80091b2 <__cvt+0x92>
 8009190:	783b      	ldrb	r3, [r7, #0]
 8009192:	2b30      	cmp	r3, #48	; 0x30
 8009194:	d10a      	bne.n	80091ac <__cvt+0x8c>
 8009196:	2200      	movs	r2, #0
 8009198:	2300      	movs	r3, #0
 800919a:	4620      	mov	r0, r4
 800919c:	4629      	mov	r1, r5
 800919e:	f7f7 fc9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80091a2:	b918      	cbnz	r0, 80091ac <__cvt+0x8c>
 80091a4:	f1c6 0601 	rsb	r6, r6, #1
 80091a8:	f8ca 6000 	str.w	r6, [sl]
 80091ac:	f8da 3000 	ldr.w	r3, [sl]
 80091b0:	4499      	add	r9, r3
 80091b2:	2200      	movs	r2, #0
 80091b4:	2300      	movs	r3, #0
 80091b6:	4620      	mov	r0, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7f7 fc8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80091be:	b108      	cbz	r0, 80091c4 <__cvt+0xa4>
 80091c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80091c4:	2230      	movs	r2, #48	; 0x30
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	454b      	cmp	r3, r9
 80091ca:	d307      	bcc.n	80091dc <__cvt+0xbc>
 80091cc:	9b03      	ldr	r3, [sp, #12]
 80091ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091d0:	1bdb      	subs	r3, r3, r7
 80091d2:	4638      	mov	r0, r7
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	b004      	add	sp, #16
 80091d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091dc:	1c59      	adds	r1, r3, #1
 80091de:	9103      	str	r1, [sp, #12]
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	e7f0      	b.n	80091c6 <__cvt+0xa6>

080091e4 <__exponent>:
 80091e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091e6:	4603      	mov	r3, r0
 80091e8:	2900      	cmp	r1, #0
 80091ea:	bfb8      	it	lt
 80091ec:	4249      	neglt	r1, r1
 80091ee:	f803 2b02 	strb.w	r2, [r3], #2
 80091f2:	bfb4      	ite	lt
 80091f4:	222d      	movlt	r2, #45	; 0x2d
 80091f6:	222b      	movge	r2, #43	; 0x2b
 80091f8:	2909      	cmp	r1, #9
 80091fa:	7042      	strb	r2, [r0, #1]
 80091fc:	dd2a      	ble.n	8009254 <__exponent+0x70>
 80091fe:	f10d 0407 	add.w	r4, sp, #7
 8009202:	46a4      	mov	ip, r4
 8009204:	270a      	movs	r7, #10
 8009206:	46a6      	mov	lr, r4
 8009208:	460a      	mov	r2, r1
 800920a:	fb91 f6f7 	sdiv	r6, r1, r7
 800920e:	fb07 1516 	mls	r5, r7, r6, r1
 8009212:	3530      	adds	r5, #48	; 0x30
 8009214:	2a63      	cmp	r2, #99	; 0x63
 8009216:	f104 34ff 	add.w	r4, r4, #4294967295
 800921a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800921e:	4631      	mov	r1, r6
 8009220:	dcf1      	bgt.n	8009206 <__exponent+0x22>
 8009222:	3130      	adds	r1, #48	; 0x30
 8009224:	f1ae 0502 	sub.w	r5, lr, #2
 8009228:	f804 1c01 	strb.w	r1, [r4, #-1]
 800922c:	1c44      	adds	r4, r0, #1
 800922e:	4629      	mov	r1, r5
 8009230:	4561      	cmp	r1, ip
 8009232:	d30a      	bcc.n	800924a <__exponent+0x66>
 8009234:	f10d 0209 	add.w	r2, sp, #9
 8009238:	eba2 020e 	sub.w	r2, r2, lr
 800923c:	4565      	cmp	r5, ip
 800923e:	bf88      	it	hi
 8009240:	2200      	movhi	r2, #0
 8009242:	4413      	add	r3, r2
 8009244:	1a18      	subs	r0, r3, r0
 8009246:	b003      	add	sp, #12
 8009248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800924a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800924e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009252:	e7ed      	b.n	8009230 <__exponent+0x4c>
 8009254:	2330      	movs	r3, #48	; 0x30
 8009256:	3130      	adds	r1, #48	; 0x30
 8009258:	7083      	strb	r3, [r0, #2]
 800925a:	70c1      	strb	r1, [r0, #3]
 800925c:	1d03      	adds	r3, r0, #4
 800925e:	e7f1      	b.n	8009244 <__exponent+0x60>

08009260 <_printf_float>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	ed2d 8b02 	vpush	{d8}
 8009268:	b08d      	sub	sp, #52	; 0x34
 800926a:	460c      	mov	r4, r1
 800926c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009270:	4616      	mov	r6, r2
 8009272:	461f      	mov	r7, r3
 8009274:	4605      	mov	r5, r0
 8009276:	f001 fc53 	bl	800ab20 <_localeconv_r>
 800927a:	f8d0 a000 	ldr.w	sl, [r0]
 800927e:	4650      	mov	r0, sl
 8009280:	f7f6 ffae 	bl	80001e0 <strlen>
 8009284:	2300      	movs	r3, #0
 8009286:	930a      	str	r3, [sp, #40]	; 0x28
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	f8d8 3000 	ldr.w	r3, [r8]
 8009290:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009294:	3307      	adds	r3, #7
 8009296:	f023 0307 	bic.w	r3, r3, #7
 800929a:	f103 0208 	add.w	r2, r3, #8
 800929e:	f8c8 2000 	str.w	r2, [r8]
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80092aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80092ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092b2:	9307      	str	r3, [sp, #28]
 80092b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80092b8:	ee08 0a10 	vmov	s16, r0
 80092bc:	4b9f      	ldr	r3, [pc, #636]	; (800953c <_printf_float+0x2dc>)
 80092be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	f7f7 fc39 	bl	8000b3c <__aeabi_dcmpun>
 80092ca:	bb88      	cbnz	r0, 8009330 <_printf_float+0xd0>
 80092cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092d0:	4b9a      	ldr	r3, [pc, #616]	; (800953c <_printf_float+0x2dc>)
 80092d2:	f04f 32ff 	mov.w	r2, #4294967295
 80092d6:	f7f7 fc13 	bl	8000b00 <__aeabi_dcmple>
 80092da:	bb48      	cbnz	r0, 8009330 <_printf_float+0xd0>
 80092dc:	2200      	movs	r2, #0
 80092de:	2300      	movs	r3, #0
 80092e0:	4640      	mov	r0, r8
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7f7 fc02 	bl	8000aec <__aeabi_dcmplt>
 80092e8:	b110      	cbz	r0, 80092f0 <_printf_float+0x90>
 80092ea:	232d      	movs	r3, #45	; 0x2d
 80092ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092f0:	4b93      	ldr	r3, [pc, #588]	; (8009540 <_printf_float+0x2e0>)
 80092f2:	4894      	ldr	r0, [pc, #592]	; (8009544 <_printf_float+0x2e4>)
 80092f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80092f8:	bf94      	ite	ls
 80092fa:	4698      	movls	r8, r3
 80092fc:	4680      	movhi	r8, r0
 80092fe:	2303      	movs	r3, #3
 8009300:	6123      	str	r3, [r4, #16]
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	f023 0204 	bic.w	r2, r3, #4
 8009308:	6022      	str	r2, [r4, #0]
 800930a:	f04f 0900 	mov.w	r9, #0
 800930e:	9700      	str	r7, [sp, #0]
 8009310:	4633      	mov	r3, r6
 8009312:	aa0b      	add	r2, sp, #44	; 0x2c
 8009314:	4621      	mov	r1, r4
 8009316:	4628      	mov	r0, r5
 8009318:	f000 f9d8 	bl	80096cc <_printf_common>
 800931c:	3001      	adds	r0, #1
 800931e:	f040 8090 	bne.w	8009442 <_printf_float+0x1e2>
 8009322:	f04f 30ff 	mov.w	r0, #4294967295
 8009326:	b00d      	add	sp, #52	; 0x34
 8009328:	ecbd 8b02 	vpop	{d8}
 800932c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009330:	4642      	mov	r2, r8
 8009332:	464b      	mov	r3, r9
 8009334:	4640      	mov	r0, r8
 8009336:	4649      	mov	r1, r9
 8009338:	f7f7 fc00 	bl	8000b3c <__aeabi_dcmpun>
 800933c:	b140      	cbz	r0, 8009350 <_printf_float+0xf0>
 800933e:	464b      	mov	r3, r9
 8009340:	2b00      	cmp	r3, #0
 8009342:	bfbc      	itt	lt
 8009344:	232d      	movlt	r3, #45	; 0x2d
 8009346:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800934a:	487f      	ldr	r0, [pc, #508]	; (8009548 <_printf_float+0x2e8>)
 800934c:	4b7f      	ldr	r3, [pc, #508]	; (800954c <_printf_float+0x2ec>)
 800934e:	e7d1      	b.n	80092f4 <_printf_float+0x94>
 8009350:	6863      	ldr	r3, [r4, #4]
 8009352:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009356:	9206      	str	r2, [sp, #24]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	d13f      	bne.n	80093dc <_printf_float+0x17c>
 800935c:	2306      	movs	r3, #6
 800935e:	6063      	str	r3, [r4, #4]
 8009360:	9b05      	ldr	r3, [sp, #20]
 8009362:	6861      	ldr	r1, [r4, #4]
 8009364:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009368:	2300      	movs	r3, #0
 800936a:	9303      	str	r3, [sp, #12]
 800936c:	ab0a      	add	r3, sp, #40	; 0x28
 800936e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009372:	ab09      	add	r3, sp, #36	; 0x24
 8009374:	ec49 8b10 	vmov	d0, r8, r9
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	6022      	str	r2, [r4, #0]
 800937c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009380:	4628      	mov	r0, r5
 8009382:	f7ff fecd 	bl	8009120 <__cvt>
 8009386:	9b06      	ldr	r3, [sp, #24]
 8009388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800938a:	2b47      	cmp	r3, #71	; 0x47
 800938c:	4680      	mov	r8, r0
 800938e:	d108      	bne.n	80093a2 <_printf_float+0x142>
 8009390:	1cc8      	adds	r0, r1, #3
 8009392:	db02      	blt.n	800939a <_printf_float+0x13a>
 8009394:	6863      	ldr	r3, [r4, #4]
 8009396:	4299      	cmp	r1, r3
 8009398:	dd41      	ble.n	800941e <_printf_float+0x1be>
 800939a:	f1ab 0b02 	sub.w	fp, fp, #2
 800939e:	fa5f fb8b 	uxtb.w	fp, fp
 80093a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093a6:	d820      	bhi.n	80093ea <_printf_float+0x18a>
 80093a8:	3901      	subs	r1, #1
 80093aa:	465a      	mov	r2, fp
 80093ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80093b0:	9109      	str	r1, [sp, #36]	; 0x24
 80093b2:	f7ff ff17 	bl	80091e4 <__exponent>
 80093b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093b8:	1813      	adds	r3, r2, r0
 80093ba:	2a01      	cmp	r2, #1
 80093bc:	4681      	mov	r9, r0
 80093be:	6123      	str	r3, [r4, #16]
 80093c0:	dc02      	bgt.n	80093c8 <_printf_float+0x168>
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	07d2      	lsls	r2, r2, #31
 80093c6:	d501      	bpl.n	80093cc <_printf_float+0x16c>
 80093c8:	3301      	adds	r3, #1
 80093ca:	6123      	str	r3, [r4, #16]
 80093cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d09c      	beq.n	800930e <_printf_float+0xae>
 80093d4:	232d      	movs	r3, #45	; 0x2d
 80093d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093da:	e798      	b.n	800930e <_printf_float+0xae>
 80093dc:	9a06      	ldr	r2, [sp, #24]
 80093de:	2a47      	cmp	r2, #71	; 0x47
 80093e0:	d1be      	bne.n	8009360 <_printf_float+0x100>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1bc      	bne.n	8009360 <_printf_float+0x100>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e7b9      	b.n	800935e <_printf_float+0xfe>
 80093ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80093ee:	d118      	bne.n	8009422 <_printf_float+0x1c2>
 80093f0:	2900      	cmp	r1, #0
 80093f2:	6863      	ldr	r3, [r4, #4]
 80093f4:	dd0b      	ble.n	800940e <_printf_float+0x1ae>
 80093f6:	6121      	str	r1, [r4, #16]
 80093f8:	b913      	cbnz	r3, 8009400 <_printf_float+0x1a0>
 80093fa:	6822      	ldr	r2, [r4, #0]
 80093fc:	07d0      	lsls	r0, r2, #31
 80093fe:	d502      	bpl.n	8009406 <_printf_float+0x1a6>
 8009400:	3301      	adds	r3, #1
 8009402:	440b      	add	r3, r1
 8009404:	6123      	str	r3, [r4, #16]
 8009406:	65a1      	str	r1, [r4, #88]	; 0x58
 8009408:	f04f 0900 	mov.w	r9, #0
 800940c:	e7de      	b.n	80093cc <_printf_float+0x16c>
 800940e:	b913      	cbnz	r3, 8009416 <_printf_float+0x1b6>
 8009410:	6822      	ldr	r2, [r4, #0]
 8009412:	07d2      	lsls	r2, r2, #31
 8009414:	d501      	bpl.n	800941a <_printf_float+0x1ba>
 8009416:	3302      	adds	r3, #2
 8009418:	e7f4      	b.n	8009404 <_printf_float+0x1a4>
 800941a:	2301      	movs	r3, #1
 800941c:	e7f2      	b.n	8009404 <_printf_float+0x1a4>
 800941e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009424:	4299      	cmp	r1, r3
 8009426:	db05      	blt.n	8009434 <_printf_float+0x1d4>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	6121      	str	r1, [r4, #16]
 800942c:	07d8      	lsls	r0, r3, #31
 800942e:	d5ea      	bpl.n	8009406 <_printf_float+0x1a6>
 8009430:	1c4b      	adds	r3, r1, #1
 8009432:	e7e7      	b.n	8009404 <_printf_float+0x1a4>
 8009434:	2900      	cmp	r1, #0
 8009436:	bfd4      	ite	le
 8009438:	f1c1 0202 	rsble	r2, r1, #2
 800943c:	2201      	movgt	r2, #1
 800943e:	4413      	add	r3, r2
 8009440:	e7e0      	b.n	8009404 <_printf_float+0x1a4>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	055a      	lsls	r2, r3, #21
 8009446:	d407      	bmi.n	8009458 <_printf_float+0x1f8>
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	4642      	mov	r2, r8
 800944c:	4631      	mov	r1, r6
 800944e:	4628      	mov	r0, r5
 8009450:	47b8      	blx	r7
 8009452:	3001      	adds	r0, #1
 8009454:	d12c      	bne.n	80094b0 <_printf_float+0x250>
 8009456:	e764      	b.n	8009322 <_printf_float+0xc2>
 8009458:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800945c:	f240 80e0 	bls.w	8009620 <_printf_float+0x3c0>
 8009460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009464:	2200      	movs	r2, #0
 8009466:	2300      	movs	r3, #0
 8009468:	f7f7 fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800946c:	2800      	cmp	r0, #0
 800946e:	d034      	beq.n	80094da <_printf_float+0x27a>
 8009470:	4a37      	ldr	r2, [pc, #220]	; (8009550 <_printf_float+0x2f0>)
 8009472:	2301      	movs	r3, #1
 8009474:	4631      	mov	r1, r6
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	f43f af51 	beq.w	8009322 <_printf_float+0xc2>
 8009480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009484:	429a      	cmp	r2, r3
 8009486:	db02      	blt.n	800948e <_printf_float+0x22e>
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	07d8      	lsls	r0, r3, #31
 800948c:	d510      	bpl.n	80094b0 <_printf_float+0x250>
 800948e:	ee18 3a10 	vmov	r3, s16
 8009492:	4652      	mov	r2, sl
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	f43f af41 	beq.w	8009322 <_printf_float+0xc2>
 80094a0:	f04f 0800 	mov.w	r8, #0
 80094a4:	f104 091a 	add.w	r9, r4, #26
 80094a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094aa:	3b01      	subs	r3, #1
 80094ac:	4543      	cmp	r3, r8
 80094ae:	dc09      	bgt.n	80094c4 <_printf_float+0x264>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	079b      	lsls	r3, r3, #30
 80094b4:	f100 8105 	bmi.w	80096c2 <_printf_float+0x462>
 80094b8:	68e0      	ldr	r0, [r4, #12]
 80094ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094bc:	4298      	cmp	r0, r3
 80094be:	bfb8      	it	lt
 80094c0:	4618      	movlt	r0, r3
 80094c2:	e730      	b.n	8009326 <_printf_float+0xc6>
 80094c4:	2301      	movs	r3, #1
 80094c6:	464a      	mov	r2, r9
 80094c8:	4631      	mov	r1, r6
 80094ca:	4628      	mov	r0, r5
 80094cc:	47b8      	blx	r7
 80094ce:	3001      	adds	r0, #1
 80094d0:	f43f af27 	beq.w	8009322 <_printf_float+0xc2>
 80094d4:	f108 0801 	add.w	r8, r8, #1
 80094d8:	e7e6      	b.n	80094a8 <_printf_float+0x248>
 80094da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dc39      	bgt.n	8009554 <_printf_float+0x2f4>
 80094e0:	4a1b      	ldr	r2, [pc, #108]	; (8009550 <_printf_float+0x2f0>)
 80094e2:	2301      	movs	r3, #1
 80094e4:	4631      	mov	r1, r6
 80094e6:	4628      	mov	r0, r5
 80094e8:	47b8      	blx	r7
 80094ea:	3001      	adds	r0, #1
 80094ec:	f43f af19 	beq.w	8009322 <_printf_float+0xc2>
 80094f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094f4:	4313      	orrs	r3, r2
 80094f6:	d102      	bne.n	80094fe <_printf_float+0x29e>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	07d9      	lsls	r1, r3, #31
 80094fc:	d5d8      	bpl.n	80094b0 <_printf_float+0x250>
 80094fe:	ee18 3a10 	vmov	r3, s16
 8009502:	4652      	mov	r2, sl
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	47b8      	blx	r7
 800950a:	3001      	adds	r0, #1
 800950c:	f43f af09 	beq.w	8009322 <_printf_float+0xc2>
 8009510:	f04f 0900 	mov.w	r9, #0
 8009514:	f104 0a1a 	add.w	sl, r4, #26
 8009518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951a:	425b      	negs	r3, r3
 800951c:	454b      	cmp	r3, r9
 800951e:	dc01      	bgt.n	8009524 <_printf_float+0x2c4>
 8009520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009522:	e792      	b.n	800944a <_printf_float+0x1ea>
 8009524:	2301      	movs	r3, #1
 8009526:	4652      	mov	r2, sl
 8009528:	4631      	mov	r1, r6
 800952a:	4628      	mov	r0, r5
 800952c:	47b8      	blx	r7
 800952e:	3001      	adds	r0, #1
 8009530:	f43f aef7 	beq.w	8009322 <_printf_float+0xc2>
 8009534:	f109 0901 	add.w	r9, r9, #1
 8009538:	e7ee      	b.n	8009518 <_printf_float+0x2b8>
 800953a:	bf00      	nop
 800953c:	7fefffff 	.word	0x7fefffff
 8009540:	0800c1e4 	.word	0x0800c1e4
 8009544:	0800c1e8 	.word	0x0800c1e8
 8009548:	0800c1f0 	.word	0x0800c1f0
 800954c:	0800c1ec 	.word	0x0800c1ec
 8009550:	0800c1f4 	.word	0x0800c1f4
 8009554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009558:	429a      	cmp	r2, r3
 800955a:	bfa8      	it	ge
 800955c:	461a      	movge	r2, r3
 800955e:	2a00      	cmp	r2, #0
 8009560:	4691      	mov	r9, r2
 8009562:	dc37      	bgt.n	80095d4 <_printf_float+0x374>
 8009564:	f04f 0b00 	mov.w	fp, #0
 8009568:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800956c:	f104 021a 	add.w	r2, r4, #26
 8009570:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009572:	9305      	str	r3, [sp, #20]
 8009574:	eba3 0309 	sub.w	r3, r3, r9
 8009578:	455b      	cmp	r3, fp
 800957a:	dc33      	bgt.n	80095e4 <_printf_float+0x384>
 800957c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009580:	429a      	cmp	r2, r3
 8009582:	db3b      	blt.n	80095fc <_printf_float+0x39c>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	07da      	lsls	r2, r3, #31
 8009588:	d438      	bmi.n	80095fc <_printf_float+0x39c>
 800958a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800958c:	9a05      	ldr	r2, [sp, #20]
 800958e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009590:	1a9a      	subs	r2, r3, r2
 8009592:	eba3 0901 	sub.w	r9, r3, r1
 8009596:	4591      	cmp	r9, r2
 8009598:	bfa8      	it	ge
 800959a:	4691      	movge	r9, r2
 800959c:	f1b9 0f00 	cmp.w	r9, #0
 80095a0:	dc35      	bgt.n	800960e <_printf_float+0x3ae>
 80095a2:	f04f 0800 	mov.w	r8, #0
 80095a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095aa:	f104 0a1a 	add.w	sl, r4, #26
 80095ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	eba3 0309 	sub.w	r3, r3, r9
 80095b8:	4543      	cmp	r3, r8
 80095ba:	f77f af79 	ble.w	80094b0 <_printf_float+0x250>
 80095be:	2301      	movs	r3, #1
 80095c0:	4652      	mov	r2, sl
 80095c2:	4631      	mov	r1, r6
 80095c4:	4628      	mov	r0, r5
 80095c6:	47b8      	blx	r7
 80095c8:	3001      	adds	r0, #1
 80095ca:	f43f aeaa 	beq.w	8009322 <_printf_float+0xc2>
 80095ce:	f108 0801 	add.w	r8, r8, #1
 80095d2:	e7ec      	b.n	80095ae <_printf_float+0x34e>
 80095d4:	4613      	mov	r3, r2
 80095d6:	4631      	mov	r1, r6
 80095d8:	4642      	mov	r2, r8
 80095da:	4628      	mov	r0, r5
 80095dc:	47b8      	blx	r7
 80095de:	3001      	adds	r0, #1
 80095e0:	d1c0      	bne.n	8009564 <_printf_float+0x304>
 80095e2:	e69e      	b.n	8009322 <_printf_float+0xc2>
 80095e4:	2301      	movs	r3, #1
 80095e6:	4631      	mov	r1, r6
 80095e8:	4628      	mov	r0, r5
 80095ea:	9205      	str	r2, [sp, #20]
 80095ec:	47b8      	blx	r7
 80095ee:	3001      	adds	r0, #1
 80095f0:	f43f ae97 	beq.w	8009322 <_printf_float+0xc2>
 80095f4:	9a05      	ldr	r2, [sp, #20]
 80095f6:	f10b 0b01 	add.w	fp, fp, #1
 80095fa:	e7b9      	b.n	8009570 <_printf_float+0x310>
 80095fc:	ee18 3a10 	vmov	r3, s16
 8009600:	4652      	mov	r2, sl
 8009602:	4631      	mov	r1, r6
 8009604:	4628      	mov	r0, r5
 8009606:	47b8      	blx	r7
 8009608:	3001      	adds	r0, #1
 800960a:	d1be      	bne.n	800958a <_printf_float+0x32a>
 800960c:	e689      	b.n	8009322 <_printf_float+0xc2>
 800960e:	9a05      	ldr	r2, [sp, #20]
 8009610:	464b      	mov	r3, r9
 8009612:	4442      	add	r2, r8
 8009614:	4631      	mov	r1, r6
 8009616:	4628      	mov	r0, r5
 8009618:	47b8      	blx	r7
 800961a:	3001      	adds	r0, #1
 800961c:	d1c1      	bne.n	80095a2 <_printf_float+0x342>
 800961e:	e680      	b.n	8009322 <_printf_float+0xc2>
 8009620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009622:	2a01      	cmp	r2, #1
 8009624:	dc01      	bgt.n	800962a <_printf_float+0x3ca>
 8009626:	07db      	lsls	r3, r3, #31
 8009628:	d538      	bpl.n	800969c <_printf_float+0x43c>
 800962a:	2301      	movs	r3, #1
 800962c:	4642      	mov	r2, r8
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	f43f ae74 	beq.w	8009322 <_printf_float+0xc2>
 800963a:	ee18 3a10 	vmov	r3, s16
 800963e:	4652      	mov	r2, sl
 8009640:	4631      	mov	r1, r6
 8009642:	4628      	mov	r0, r5
 8009644:	47b8      	blx	r7
 8009646:	3001      	adds	r0, #1
 8009648:	f43f ae6b 	beq.w	8009322 <_printf_float+0xc2>
 800964c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009650:	2200      	movs	r2, #0
 8009652:	2300      	movs	r3, #0
 8009654:	f7f7 fa40 	bl	8000ad8 <__aeabi_dcmpeq>
 8009658:	b9d8      	cbnz	r0, 8009692 <_printf_float+0x432>
 800965a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800965c:	f108 0201 	add.w	r2, r8, #1
 8009660:	3b01      	subs	r3, #1
 8009662:	4631      	mov	r1, r6
 8009664:	4628      	mov	r0, r5
 8009666:	47b8      	blx	r7
 8009668:	3001      	adds	r0, #1
 800966a:	d10e      	bne.n	800968a <_printf_float+0x42a>
 800966c:	e659      	b.n	8009322 <_printf_float+0xc2>
 800966e:	2301      	movs	r3, #1
 8009670:	4652      	mov	r2, sl
 8009672:	4631      	mov	r1, r6
 8009674:	4628      	mov	r0, r5
 8009676:	47b8      	blx	r7
 8009678:	3001      	adds	r0, #1
 800967a:	f43f ae52 	beq.w	8009322 <_printf_float+0xc2>
 800967e:	f108 0801 	add.w	r8, r8, #1
 8009682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009684:	3b01      	subs	r3, #1
 8009686:	4543      	cmp	r3, r8
 8009688:	dcf1      	bgt.n	800966e <_printf_float+0x40e>
 800968a:	464b      	mov	r3, r9
 800968c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009690:	e6dc      	b.n	800944c <_printf_float+0x1ec>
 8009692:	f04f 0800 	mov.w	r8, #0
 8009696:	f104 0a1a 	add.w	sl, r4, #26
 800969a:	e7f2      	b.n	8009682 <_printf_float+0x422>
 800969c:	2301      	movs	r3, #1
 800969e:	4642      	mov	r2, r8
 80096a0:	e7df      	b.n	8009662 <_printf_float+0x402>
 80096a2:	2301      	movs	r3, #1
 80096a4:	464a      	mov	r2, r9
 80096a6:	4631      	mov	r1, r6
 80096a8:	4628      	mov	r0, r5
 80096aa:	47b8      	blx	r7
 80096ac:	3001      	adds	r0, #1
 80096ae:	f43f ae38 	beq.w	8009322 <_printf_float+0xc2>
 80096b2:	f108 0801 	add.w	r8, r8, #1
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096ba:	1a5b      	subs	r3, r3, r1
 80096bc:	4543      	cmp	r3, r8
 80096be:	dcf0      	bgt.n	80096a2 <_printf_float+0x442>
 80096c0:	e6fa      	b.n	80094b8 <_printf_float+0x258>
 80096c2:	f04f 0800 	mov.w	r8, #0
 80096c6:	f104 0919 	add.w	r9, r4, #25
 80096ca:	e7f4      	b.n	80096b6 <_printf_float+0x456>

080096cc <_printf_common>:
 80096cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	4616      	mov	r6, r2
 80096d2:	4699      	mov	r9, r3
 80096d4:	688a      	ldr	r2, [r1, #8]
 80096d6:	690b      	ldr	r3, [r1, #16]
 80096d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096dc:	4293      	cmp	r3, r2
 80096de:	bfb8      	it	lt
 80096e0:	4613      	movlt	r3, r2
 80096e2:	6033      	str	r3, [r6, #0]
 80096e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096e8:	4607      	mov	r7, r0
 80096ea:	460c      	mov	r4, r1
 80096ec:	b10a      	cbz	r2, 80096f2 <_printf_common+0x26>
 80096ee:	3301      	adds	r3, #1
 80096f0:	6033      	str	r3, [r6, #0]
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	0699      	lsls	r1, r3, #26
 80096f6:	bf42      	ittt	mi
 80096f8:	6833      	ldrmi	r3, [r6, #0]
 80096fa:	3302      	addmi	r3, #2
 80096fc:	6033      	strmi	r3, [r6, #0]
 80096fe:	6825      	ldr	r5, [r4, #0]
 8009700:	f015 0506 	ands.w	r5, r5, #6
 8009704:	d106      	bne.n	8009714 <_printf_common+0x48>
 8009706:	f104 0a19 	add.w	sl, r4, #25
 800970a:	68e3      	ldr	r3, [r4, #12]
 800970c:	6832      	ldr	r2, [r6, #0]
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	42ab      	cmp	r3, r5
 8009712:	dc26      	bgt.n	8009762 <_printf_common+0x96>
 8009714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009718:	1e13      	subs	r3, r2, #0
 800971a:	6822      	ldr	r2, [r4, #0]
 800971c:	bf18      	it	ne
 800971e:	2301      	movne	r3, #1
 8009720:	0692      	lsls	r2, r2, #26
 8009722:	d42b      	bmi.n	800977c <_printf_common+0xb0>
 8009724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009728:	4649      	mov	r1, r9
 800972a:	4638      	mov	r0, r7
 800972c:	47c0      	blx	r8
 800972e:	3001      	adds	r0, #1
 8009730:	d01e      	beq.n	8009770 <_printf_common+0xa4>
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	68e5      	ldr	r5, [r4, #12]
 8009736:	6832      	ldr	r2, [r6, #0]
 8009738:	f003 0306 	and.w	r3, r3, #6
 800973c:	2b04      	cmp	r3, #4
 800973e:	bf08      	it	eq
 8009740:	1aad      	subeq	r5, r5, r2
 8009742:	68a3      	ldr	r3, [r4, #8]
 8009744:	6922      	ldr	r2, [r4, #16]
 8009746:	bf0c      	ite	eq
 8009748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800974c:	2500      	movne	r5, #0
 800974e:	4293      	cmp	r3, r2
 8009750:	bfc4      	itt	gt
 8009752:	1a9b      	subgt	r3, r3, r2
 8009754:	18ed      	addgt	r5, r5, r3
 8009756:	2600      	movs	r6, #0
 8009758:	341a      	adds	r4, #26
 800975a:	42b5      	cmp	r5, r6
 800975c:	d11a      	bne.n	8009794 <_printf_common+0xc8>
 800975e:	2000      	movs	r0, #0
 8009760:	e008      	b.n	8009774 <_printf_common+0xa8>
 8009762:	2301      	movs	r3, #1
 8009764:	4652      	mov	r2, sl
 8009766:	4649      	mov	r1, r9
 8009768:	4638      	mov	r0, r7
 800976a:	47c0      	blx	r8
 800976c:	3001      	adds	r0, #1
 800976e:	d103      	bne.n	8009778 <_printf_common+0xac>
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009778:	3501      	adds	r5, #1
 800977a:	e7c6      	b.n	800970a <_printf_common+0x3e>
 800977c:	18e1      	adds	r1, r4, r3
 800977e:	1c5a      	adds	r2, r3, #1
 8009780:	2030      	movs	r0, #48	; 0x30
 8009782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009786:	4422      	add	r2, r4
 8009788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800978c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009790:	3302      	adds	r3, #2
 8009792:	e7c7      	b.n	8009724 <_printf_common+0x58>
 8009794:	2301      	movs	r3, #1
 8009796:	4622      	mov	r2, r4
 8009798:	4649      	mov	r1, r9
 800979a:	4638      	mov	r0, r7
 800979c:	47c0      	blx	r8
 800979e:	3001      	adds	r0, #1
 80097a0:	d0e6      	beq.n	8009770 <_printf_common+0xa4>
 80097a2:	3601      	adds	r6, #1
 80097a4:	e7d9      	b.n	800975a <_printf_common+0x8e>
	...

080097a8 <_printf_i>:
 80097a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097ac:	7e0f      	ldrb	r7, [r1, #24]
 80097ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097b0:	2f78      	cmp	r7, #120	; 0x78
 80097b2:	4691      	mov	r9, r2
 80097b4:	4680      	mov	r8, r0
 80097b6:	460c      	mov	r4, r1
 80097b8:	469a      	mov	sl, r3
 80097ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097be:	d807      	bhi.n	80097d0 <_printf_i+0x28>
 80097c0:	2f62      	cmp	r7, #98	; 0x62
 80097c2:	d80a      	bhi.n	80097da <_printf_i+0x32>
 80097c4:	2f00      	cmp	r7, #0
 80097c6:	f000 80d8 	beq.w	800997a <_printf_i+0x1d2>
 80097ca:	2f58      	cmp	r7, #88	; 0x58
 80097cc:	f000 80a3 	beq.w	8009916 <_printf_i+0x16e>
 80097d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097d8:	e03a      	b.n	8009850 <_printf_i+0xa8>
 80097da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097de:	2b15      	cmp	r3, #21
 80097e0:	d8f6      	bhi.n	80097d0 <_printf_i+0x28>
 80097e2:	a101      	add	r1, pc, #4	; (adr r1, 80097e8 <_printf_i+0x40>)
 80097e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097e8:	08009841 	.word	0x08009841
 80097ec:	08009855 	.word	0x08009855
 80097f0:	080097d1 	.word	0x080097d1
 80097f4:	080097d1 	.word	0x080097d1
 80097f8:	080097d1 	.word	0x080097d1
 80097fc:	080097d1 	.word	0x080097d1
 8009800:	08009855 	.word	0x08009855
 8009804:	080097d1 	.word	0x080097d1
 8009808:	080097d1 	.word	0x080097d1
 800980c:	080097d1 	.word	0x080097d1
 8009810:	080097d1 	.word	0x080097d1
 8009814:	08009961 	.word	0x08009961
 8009818:	08009885 	.word	0x08009885
 800981c:	08009943 	.word	0x08009943
 8009820:	080097d1 	.word	0x080097d1
 8009824:	080097d1 	.word	0x080097d1
 8009828:	08009983 	.word	0x08009983
 800982c:	080097d1 	.word	0x080097d1
 8009830:	08009885 	.word	0x08009885
 8009834:	080097d1 	.word	0x080097d1
 8009838:	080097d1 	.word	0x080097d1
 800983c:	0800994b 	.word	0x0800994b
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	1d1a      	adds	r2, r3, #4
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	602a      	str	r2, [r5, #0]
 8009848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800984c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009850:	2301      	movs	r3, #1
 8009852:	e0a3      	b.n	800999c <_printf_i+0x1f4>
 8009854:	6820      	ldr	r0, [r4, #0]
 8009856:	6829      	ldr	r1, [r5, #0]
 8009858:	0606      	lsls	r6, r0, #24
 800985a:	f101 0304 	add.w	r3, r1, #4
 800985e:	d50a      	bpl.n	8009876 <_printf_i+0xce>
 8009860:	680e      	ldr	r6, [r1, #0]
 8009862:	602b      	str	r3, [r5, #0]
 8009864:	2e00      	cmp	r6, #0
 8009866:	da03      	bge.n	8009870 <_printf_i+0xc8>
 8009868:	232d      	movs	r3, #45	; 0x2d
 800986a:	4276      	negs	r6, r6
 800986c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009870:	485e      	ldr	r0, [pc, #376]	; (80099ec <_printf_i+0x244>)
 8009872:	230a      	movs	r3, #10
 8009874:	e019      	b.n	80098aa <_printf_i+0x102>
 8009876:	680e      	ldr	r6, [r1, #0]
 8009878:	602b      	str	r3, [r5, #0]
 800987a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800987e:	bf18      	it	ne
 8009880:	b236      	sxthne	r6, r6
 8009882:	e7ef      	b.n	8009864 <_printf_i+0xbc>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	6820      	ldr	r0, [r4, #0]
 8009888:	1d19      	adds	r1, r3, #4
 800988a:	6029      	str	r1, [r5, #0]
 800988c:	0601      	lsls	r1, r0, #24
 800988e:	d501      	bpl.n	8009894 <_printf_i+0xec>
 8009890:	681e      	ldr	r6, [r3, #0]
 8009892:	e002      	b.n	800989a <_printf_i+0xf2>
 8009894:	0646      	lsls	r6, r0, #25
 8009896:	d5fb      	bpl.n	8009890 <_printf_i+0xe8>
 8009898:	881e      	ldrh	r6, [r3, #0]
 800989a:	4854      	ldr	r0, [pc, #336]	; (80099ec <_printf_i+0x244>)
 800989c:	2f6f      	cmp	r7, #111	; 0x6f
 800989e:	bf0c      	ite	eq
 80098a0:	2308      	moveq	r3, #8
 80098a2:	230a      	movne	r3, #10
 80098a4:	2100      	movs	r1, #0
 80098a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098aa:	6865      	ldr	r5, [r4, #4]
 80098ac:	60a5      	str	r5, [r4, #8]
 80098ae:	2d00      	cmp	r5, #0
 80098b0:	bfa2      	ittt	ge
 80098b2:	6821      	ldrge	r1, [r4, #0]
 80098b4:	f021 0104 	bicge.w	r1, r1, #4
 80098b8:	6021      	strge	r1, [r4, #0]
 80098ba:	b90e      	cbnz	r6, 80098c0 <_printf_i+0x118>
 80098bc:	2d00      	cmp	r5, #0
 80098be:	d04d      	beq.n	800995c <_printf_i+0x1b4>
 80098c0:	4615      	mov	r5, r2
 80098c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80098c6:	fb03 6711 	mls	r7, r3, r1, r6
 80098ca:	5dc7      	ldrb	r7, [r0, r7]
 80098cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098d0:	4637      	mov	r7, r6
 80098d2:	42bb      	cmp	r3, r7
 80098d4:	460e      	mov	r6, r1
 80098d6:	d9f4      	bls.n	80098c2 <_printf_i+0x11a>
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d10b      	bne.n	80098f4 <_printf_i+0x14c>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	07de      	lsls	r6, r3, #31
 80098e0:	d508      	bpl.n	80098f4 <_printf_i+0x14c>
 80098e2:	6923      	ldr	r3, [r4, #16]
 80098e4:	6861      	ldr	r1, [r4, #4]
 80098e6:	4299      	cmp	r1, r3
 80098e8:	bfde      	ittt	le
 80098ea:	2330      	movle	r3, #48	; 0x30
 80098ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098f4:	1b52      	subs	r2, r2, r5
 80098f6:	6122      	str	r2, [r4, #16]
 80098f8:	f8cd a000 	str.w	sl, [sp]
 80098fc:	464b      	mov	r3, r9
 80098fe:	aa03      	add	r2, sp, #12
 8009900:	4621      	mov	r1, r4
 8009902:	4640      	mov	r0, r8
 8009904:	f7ff fee2 	bl	80096cc <_printf_common>
 8009908:	3001      	adds	r0, #1
 800990a:	d14c      	bne.n	80099a6 <_printf_i+0x1fe>
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	b004      	add	sp, #16
 8009912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009916:	4835      	ldr	r0, [pc, #212]	; (80099ec <_printf_i+0x244>)
 8009918:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800991c:	6829      	ldr	r1, [r5, #0]
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	f851 6b04 	ldr.w	r6, [r1], #4
 8009924:	6029      	str	r1, [r5, #0]
 8009926:	061d      	lsls	r5, r3, #24
 8009928:	d514      	bpl.n	8009954 <_printf_i+0x1ac>
 800992a:	07df      	lsls	r7, r3, #31
 800992c:	bf44      	itt	mi
 800992e:	f043 0320 	orrmi.w	r3, r3, #32
 8009932:	6023      	strmi	r3, [r4, #0]
 8009934:	b91e      	cbnz	r6, 800993e <_printf_i+0x196>
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	f023 0320 	bic.w	r3, r3, #32
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	2310      	movs	r3, #16
 8009940:	e7b0      	b.n	80098a4 <_printf_i+0xfc>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	f043 0320 	orr.w	r3, r3, #32
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	2378      	movs	r3, #120	; 0x78
 800994c:	4828      	ldr	r0, [pc, #160]	; (80099f0 <_printf_i+0x248>)
 800994e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009952:	e7e3      	b.n	800991c <_printf_i+0x174>
 8009954:	0659      	lsls	r1, r3, #25
 8009956:	bf48      	it	mi
 8009958:	b2b6      	uxthmi	r6, r6
 800995a:	e7e6      	b.n	800992a <_printf_i+0x182>
 800995c:	4615      	mov	r5, r2
 800995e:	e7bb      	b.n	80098d8 <_printf_i+0x130>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	6826      	ldr	r6, [r4, #0]
 8009964:	6961      	ldr	r1, [r4, #20]
 8009966:	1d18      	adds	r0, r3, #4
 8009968:	6028      	str	r0, [r5, #0]
 800996a:	0635      	lsls	r5, r6, #24
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	d501      	bpl.n	8009974 <_printf_i+0x1cc>
 8009970:	6019      	str	r1, [r3, #0]
 8009972:	e002      	b.n	800997a <_printf_i+0x1d2>
 8009974:	0670      	lsls	r0, r6, #25
 8009976:	d5fb      	bpl.n	8009970 <_printf_i+0x1c8>
 8009978:	8019      	strh	r1, [r3, #0]
 800997a:	2300      	movs	r3, #0
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	4615      	mov	r5, r2
 8009980:	e7ba      	b.n	80098f8 <_printf_i+0x150>
 8009982:	682b      	ldr	r3, [r5, #0]
 8009984:	1d1a      	adds	r2, r3, #4
 8009986:	602a      	str	r2, [r5, #0]
 8009988:	681d      	ldr	r5, [r3, #0]
 800998a:	6862      	ldr	r2, [r4, #4]
 800998c:	2100      	movs	r1, #0
 800998e:	4628      	mov	r0, r5
 8009990:	f7f6 fc2e 	bl	80001f0 <memchr>
 8009994:	b108      	cbz	r0, 800999a <_printf_i+0x1f2>
 8009996:	1b40      	subs	r0, r0, r5
 8009998:	6060      	str	r0, [r4, #4]
 800999a:	6863      	ldr	r3, [r4, #4]
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	2300      	movs	r3, #0
 80099a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099a4:	e7a8      	b.n	80098f8 <_printf_i+0x150>
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	462a      	mov	r2, r5
 80099aa:	4649      	mov	r1, r9
 80099ac:	4640      	mov	r0, r8
 80099ae:	47d0      	blx	sl
 80099b0:	3001      	adds	r0, #1
 80099b2:	d0ab      	beq.n	800990c <_printf_i+0x164>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	079b      	lsls	r3, r3, #30
 80099b8:	d413      	bmi.n	80099e2 <_printf_i+0x23a>
 80099ba:	68e0      	ldr	r0, [r4, #12]
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	4298      	cmp	r0, r3
 80099c0:	bfb8      	it	lt
 80099c2:	4618      	movlt	r0, r3
 80099c4:	e7a4      	b.n	8009910 <_printf_i+0x168>
 80099c6:	2301      	movs	r3, #1
 80099c8:	4632      	mov	r2, r6
 80099ca:	4649      	mov	r1, r9
 80099cc:	4640      	mov	r0, r8
 80099ce:	47d0      	blx	sl
 80099d0:	3001      	adds	r0, #1
 80099d2:	d09b      	beq.n	800990c <_printf_i+0x164>
 80099d4:	3501      	adds	r5, #1
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	9903      	ldr	r1, [sp, #12]
 80099da:	1a5b      	subs	r3, r3, r1
 80099dc:	42ab      	cmp	r3, r5
 80099de:	dcf2      	bgt.n	80099c6 <_printf_i+0x21e>
 80099e0:	e7eb      	b.n	80099ba <_printf_i+0x212>
 80099e2:	2500      	movs	r5, #0
 80099e4:	f104 0619 	add.w	r6, r4, #25
 80099e8:	e7f5      	b.n	80099d6 <_printf_i+0x22e>
 80099ea:	bf00      	nop
 80099ec:	0800c1f6 	.word	0x0800c1f6
 80099f0:	0800c207 	.word	0x0800c207

080099f4 <cleanup_glue>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	460c      	mov	r4, r1
 80099f8:	6809      	ldr	r1, [r1, #0]
 80099fa:	4605      	mov	r5, r0
 80099fc:	b109      	cbz	r1, 8009a02 <cleanup_glue+0xe>
 80099fe:	f7ff fff9 	bl	80099f4 <cleanup_glue>
 8009a02:	4621      	mov	r1, r4
 8009a04:	4628      	mov	r0, r5
 8009a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a0a:	f7ff baa9 	b.w	8008f60 <_free_r>
	...

08009a10 <_reclaim_reent>:
 8009a10:	4b2c      	ldr	r3, [pc, #176]	; (8009ac4 <_reclaim_reent+0xb4>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4283      	cmp	r3, r0
 8009a16:	b570      	push	{r4, r5, r6, lr}
 8009a18:	4604      	mov	r4, r0
 8009a1a:	d051      	beq.n	8009ac0 <_reclaim_reent+0xb0>
 8009a1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009a1e:	b143      	cbz	r3, 8009a32 <_reclaim_reent+0x22>
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d14a      	bne.n	8009abc <_reclaim_reent+0xac>
 8009a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a28:	6819      	ldr	r1, [r3, #0]
 8009a2a:	b111      	cbz	r1, 8009a32 <_reclaim_reent+0x22>
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f7ff fa97 	bl	8008f60 <_free_r>
 8009a32:	6961      	ldr	r1, [r4, #20]
 8009a34:	b111      	cbz	r1, 8009a3c <_reclaim_reent+0x2c>
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7ff fa92 	bl	8008f60 <_free_r>
 8009a3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009a3e:	b111      	cbz	r1, 8009a46 <_reclaim_reent+0x36>
 8009a40:	4620      	mov	r0, r4
 8009a42:	f7ff fa8d 	bl	8008f60 <_free_r>
 8009a46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009a48:	b111      	cbz	r1, 8009a50 <_reclaim_reent+0x40>
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f7ff fa88 	bl	8008f60 <_free_r>
 8009a50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009a52:	b111      	cbz	r1, 8009a5a <_reclaim_reent+0x4a>
 8009a54:	4620      	mov	r0, r4
 8009a56:	f7ff fa83 	bl	8008f60 <_free_r>
 8009a5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009a5c:	b111      	cbz	r1, 8009a64 <_reclaim_reent+0x54>
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f7ff fa7e 	bl	8008f60 <_free_r>
 8009a64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009a66:	b111      	cbz	r1, 8009a6e <_reclaim_reent+0x5e>
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f7ff fa79 	bl	8008f60 <_free_r>
 8009a6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009a70:	b111      	cbz	r1, 8009a78 <_reclaim_reent+0x68>
 8009a72:	4620      	mov	r0, r4
 8009a74:	f7ff fa74 	bl	8008f60 <_free_r>
 8009a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a7a:	b111      	cbz	r1, 8009a82 <_reclaim_reent+0x72>
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f7ff fa6f 	bl	8008f60 <_free_r>
 8009a82:	69a3      	ldr	r3, [r4, #24]
 8009a84:	b1e3      	cbz	r3, 8009ac0 <_reclaim_reent+0xb0>
 8009a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a88:	4620      	mov	r0, r4
 8009a8a:	4798      	blx	r3
 8009a8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a8e:	b1b9      	cbz	r1, 8009ac0 <_reclaim_reent+0xb0>
 8009a90:	4620      	mov	r0, r4
 8009a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a96:	f7ff bfad 	b.w	80099f4 <cleanup_glue>
 8009a9a:	5949      	ldr	r1, [r1, r5]
 8009a9c:	b941      	cbnz	r1, 8009ab0 <_reclaim_reent+0xa0>
 8009a9e:	3504      	adds	r5, #4
 8009aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa2:	2d80      	cmp	r5, #128	; 0x80
 8009aa4:	68d9      	ldr	r1, [r3, #12]
 8009aa6:	d1f8      	bne.n	8009a9a <_reclaim_reent+0x8a>
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f7ff fa59 	bl	8008f60 <_free_r>
 8009aae:	e7ba      	b.n	8009a26 <_reclaim_reent+0x16>
 8009ab0:	680e      	ldr	r6, [r1, #0]
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7ff fa54 	bl	8008f60 <_free_r>
 8009ab8:	4631      	mov	r1, r6
 8009aba:	e7ef      	b.n	8009a9c <_reclaim_reent+0x8c>
 8009abc:	2500      	movs	r5, #0
 8009abe:	e7ef      	b.n	8009aa0 <_reclaim_reent+0x90>
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20000060 	.word	0x20000060

08009ac8 <_sbrk_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d06      	ldr	r5, [pc, #24]	; (8009ae4 <_sbrk_r+0x1c>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	602b      	str	r3, [r5, #0]
 8009ad4:	f7f7 ffb6 	bl	8001a44 <_sbrk>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d102      	bne.n	8009ae2 <_sbrk_r+0x1a>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b103      	cbz	r3, 8009ae2 <_sbrk_r+0x1a>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	200045b0 	.word	0x200045b0

08009ae8 <siprintf>:
 8009ae8:	b40e      	push	{r1, r2, r3}
 8009aea:	b500      	push	{lr}
 8009aec:	b09c      	sub	sp, #112	; 0x70
 8009aee:	ab1d      	add	r3, sp, #116	; 0x74
 8009af0:	9002      	str	r0, [sp, #8]
 8009af2:	9006      	str	r0, [sp, #24]
 8009af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009af8:	4809      	ldr	r0, [pc, #36]	; (8009b20 <siprintf+0x38>)
 8009afa:	9107      	str	r1, [sp, #28]
 8009afc:	9104      	str	r1, [sp, #16]
 8009afe:	4909      	ldr	r1, [pc, #36]	; (8009b24 <siprintf+0x3c>)
 8009b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b04:	9105      	str	r1, [sp, #20]
 8009b06:	6800      	ldr	r0, [r0, #0]
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	a902      	add	r1, sp, #8
 8009b0c:	f001 fc20 	bl	800b350 <_svfiprintf_r>
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	2200      	movs	r2, #0
 8009b14:	701a      	strb	r2, [r3, #0]
 8009b16:	b01c      	add	sp, #112	; 0x70
 8009b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b1c:	b003      	add	sp, #12
 8009b1e:	4770      	bx	lr
 8009b20:	20000060 	.word	0x20000060
 8009b24:	ffff0208 	.word	0xffff0208

08009b28 <__sread>:
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b30:	f001 fd0e 	bl	800b550 <_read_r>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	bfab      	itete	ge
 8009b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b3c:	181b      	addge	r3, r3, r0
 8009b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b42:	bfac      	ite	ge
 8009b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b46:	81a3      	strhlt	r3, [r4, #12]
 8009b48:	bd10      	pop	{r4, pc}

08009b4a <__swrite>:
 8009b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4e:	461f      	mov	r7, r3
 8009b50:	898b      	ldrh	r3, [r1, #12]
 8009b52:	05db      	lsls	r3, r3, #23
 8009b54:	4605      	mov	r5, r0
 8009b56:	460c      	mov	r4, r1
 8009b58:	4616      	mov	r6, r2
 8009b5a:	d505      	bpl.n	8009b68 <__swrite+0x1e>
 8009b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b60:	2302      	movs	r3, #2
 8009b62:	2200      	movs	r2, #0
 8009b64:	f000 ffe0 	bl	800ab28 <_lseek_r>
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b72:	81a3      	strh	r3, [r4, #12]
 8009b74:	4632      	mov	r2, r6
 8009b76:	463b      	mov	r3, r7
 8009b78:	4628      	mov	r0, r5
 8009b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7e:	f000 b86f 	b.w	8009c60 <_write_r>

08009b82 <__sseek>:
 8009b82:	b510      	push	{r4, lr}
 8009b84:	460c      	mov	r4, r1
 8009b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8a:	f000 ffcd 	bl	800ab28 <_lseek_r>
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	bf15      	itete	ne
 8009b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b9e:	81a3      	strheq	r3, [r4, #12]
 8009ba0:	bf18      	it	ne
 8009ba2:	81a3      	strhne	r3, [r4, #12]
 8009ba4:	bd10      	pop	{r4, pc}

08009ba6 <__sclose>:
 8009ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009baa:	f000 b86b 	b.w	8009c84 <_close_r>

08009bae <_vsniprintf_r>:
 8009bae:	b530      	push	{r4, r5, lr}
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	b09b      	sub	sp, #108	; 0x6c
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	da05      	bge.n	8009bc8 <_vsniprintf_r+0x1a>
 8009bbc:	238b      	movs	r3, #139	; 0x8b
 8009bbe:	6003      	str	r3, [r0, #0]
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	b01b      	add	sp, #108	; 0x6c
 8009bc6:	bd30      	pop	{r4, r5, pc}
 8009bc8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009bcc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009bd0:	bf14      	ite	ne
 8009bd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009bd6:	4623      	moveq	r3, r4
 8009bd8:	9302      	str	r3, [sp, #8]
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009be0:	9100      	str	r1, [sp, #0]
 8009be2:	9104      	str	r1, [sp, #16]
 8009be4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009be8:	4669      	mov	r1, sp
 8009bea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009bec:	f001 fbb0 	bl	800b350 <_svfiprintf_r>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	bfbc      	itt	lt
 8009bf4:	238b      	movlt	r3, #139	; 0x8b
 8009bf6:	602b      	strlt	r3, [r5, #0]
 8009bf8:	2c00      	cmp	r4, #0
 8009bfa:	d0e3      	beq.n	8009bc4 <_vsniprintf_r+0x16>
 8009bfc:	9b00      	ldr	r3, [sp, #0]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	e7df      	b.n	8009bc4 <_vsniprintf_r+0x16>

08009c04 <vsniprintf>:
 8009c04:	b507      	push	{r0, r1, r2, lr}
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	460a      	mov	r2, r1
 8009c0c:	4601      	mov	r1, r0
 8009c0e:	4803      	ldr	r0, [pc, #12]	; (8009c1c <vsniprintf+0x18>)
 8009c10:	6800      	ldr	r0, [r0, #0]
 8009c12:	f7ff ffcc 	bl	8009bae <_vsniprintf_r>
 8009c16:	b003      	add	sp, #12
 8009c18:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c1c:	20000060 	.word	0x20000060

08009c20 <_vsiprintf_r>:
 8009c20:	b500      	push	{lr}
 8009c22:	b09b      	sub	sp, #108	; 0x6c
 8009c24:	9100      	str	r1, [sp, #0]
 8009c26:	9104      	str	r1, [sp, #16]
 8009c28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c2c:	9105      	str	r1, [sp, #20]
 8009c2e:	9102      	str	r1, [sp, #8]
 8009c30:	4905      	ldr	r1, [pc, #20]	; (8009c48 <_vsiprintf_r+0x28>)
 8009c32:	9103      	str	r1, [sp, #12]
 8009c34:	4669      	mov	r1, sp
 8009c36:	f001 fb8b 	bl	800b350 <_svfiprintf_r>
 8009c3a:	9b00      	ldr	r3, [sp, #0]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	b01b      	add	sp, #108	; 0x6c
 8009c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c46:	bf00      	nop
 8009c48:	ffff0208 	.word	0xffff0208

08009c4c <vsiprintf>:
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	460a      	mov	r2, r1
 8009c50:	4601      	mov	r1, r0
 8009c52:	4802      	ldr	r0, [pc, #8]	; (8009c5c <vsiprintf+0x10>)
 8009c54:	6800      	ldr	r0, [r0, #0]
 8009c56:	f7ff bfe3 	b.w	8009c20 <_vsiprintf_r>
 8009c5a:	bf00      	nop
 8009c5c:	20000060 	.word	0x20000060

08009c60 <_write_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d07      	ldr	r5, [pc, #28]	; (8009c80 <_write_r+0x20>)
 8009c64:	4604      	mov	r4, r0
 8009c66:	4608      	mov	r0, r1
 8009c68:	4611      	mov	r1, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	602a      	str	r2, [r5, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f7f7 fe97 	bl	80019a2 <_write>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d102      	bne.n	8009c7e <_write_r+0x1e>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	b103      	cbz	r3, 8009c7e <_write_r+0x1e>
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	200045b0 	.word	0x200045b0

08009c84 <_close_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4d06      	ldr	r5, [pc, #24]	; (8009ca0 <_close_r+0x1c>)
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	602b      	str	r3, [r5, #0]
 8009c90:	f7f7 fea3 	bl	80019da <_close>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_close_r+0x1a>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_close_r+0x1a>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	200045b0 	.word	0x200045b0

08009ca4 <quorem>:
 8009ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca8:	6903      	ldr	r3, [r0, #16]
 8009caa:	690c      	ldr	r4, [r1, #16]
 8009cac:	42a3      	cmp	r3, r4
 8009cae:	4607      	mov	r7, r0
 8009cb0:	f2c0 8081 	blt.w	8009db6 <quorem+0x112>
 8009cb4:	3c01      	subs	r4, #1
 8009cb6:	f101 0814 	add.w	r8, r1, #20
 8009cba:	f100 0514 	add.w	r5, r0, #20
 8009cbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cc2:	9301      	str	r3, [sp, #4]
 8009cc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009cd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009cd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cdc:	d331      	bcc.n	8009d42 <quorem+0x9e>
 8009cde:	f04f 0e00 	mov.w	lr, #0
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	46ac      	mov	ip, r5
 8009ce6:	46f2      	mov	sl, lr
 8009ce8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009cec:	b293      	uxth	r3, r2
 8009cee:	fb06 e303 	mla	r3, r6, r3, lr
 8009cf2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	ebaa 0303 	sub.w	r3, sl, r3
 8009cfc:	f8dc a000 	ldr.w	sl, [ip]
 8009d00:	0c12      	lsrs	r2, r2, #16
 8009d02:	fa13 f38a 	uxtah	r3, r3, sl
 8009d06:	fb06 e202 	mla	r2, r6, r2, lr
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	9b00      	ldr	r3, [sp, #0]
 8009d0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d12:	b292      	uxth	r2, r2
 8009d14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009d18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d1c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009d20:	4581      	cmp	r9, r0
 8009d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d26:	f84c 3b04 	str.w	r3, [ip], #4
 8009d2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d2e:	d2db      	bcs.n	8009ce8 <quorem+0x44>
 8009d30:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d34:	b92b      	cbnz	r3, 8009d42 <quorem+0x9e>
 8009d36:	9b01      	ldr	r3, [sp, #4]
 8009d38:	3b04      	subs	r3, #4
 8009d3a:	429d      	cmp	r5, r3
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	d32e      	bcc.n	8009d9e <quorem+0xfa>
 8009d40:	613c      	str	r4, [r7, #16]
 8009d42:	4638      	mov	r0, r7
 8009d44:	f001 f990 	bl	800b068 <__mcmp>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	db24      	blt.n	8009d96 <quorem+0xf2>
 8009d4c:	3601      	adds	r6, #1
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f04f 0c00 	mov.w	ip, #0
 8009d54:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d58:	f8d0 e000 	ldr.w	lr, [r0]
 8009d5c:	b293      	uxth	r3, r2
 8009d5e:	ebac 0303 	sub.w	r3, ip, r3
 8009d62:	0c12      	lsrs	r2, r2, #16
 8009d64:	fa13 f38e 	uxtah	r3, r3, lr
 8009d68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d76:	45c1      	cmp	r9, r8
 8009d78:	f840 3b04 	str.w	r3, [r0], #4
 8009d7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d80:	d2e8      	bcs.n	8009d54 <quorem+0xb0>
 8009d82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d8a:	b922      	cbnz	r2, 8009d96 <quorem+0xf2>
 8009d8c:	3b04      	subs	r3, #4
 8009d8e:	429d      	cmp	r5, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	d30a      	bcc.n	8009daa <quorem+0x106>
 8009d94:	613c      	str	r4, [r7, #16]
 8009d96:	4630      	mov	r0, r6
 8009d98:	b003      	add	sp, #12
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	6812      	ldr	r2, [r2, #0]
 8009da0:	3b04      	subs	r3, #4
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	d1cc      	bne.n	8009d40 <quorem+0x9c>
 8009da6:	3c01      	subs	r4, #1
 8009da8:	e7c7      	b.n	8009d3a <quorem+0x96>
 8009daa:	6812      	ldr	r2, [r2, #0]
 8009dac:	3b04      	subs	r3, #4
 8009dae:	2a00      	cmp	r2, #0
 8009db0:	d1f0      	bne.n	8009d94 <quorem+0xf0>
 8009db2:	3c01      	subs	r4, #1
 8009db4:	e7eb      	b.n	8009d8e <quorem+0xea>
 8009db6:	2000      	movs	r0, #0
 8009db8:	e7ee      	b.n	8009d98 <quorem+0xf4>
 8009dba:	0000      	movs	r0, r0
 8009dbc:	0000      	movs	r0, r0
	...

08009dc0 <_dtoa_r>:
 8009dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	ed2d 8b04 	vpush	{d8-d9}
 8009dc8:	ec57 6b10 	vmov	r6, r7, d0
 8009dcc:	b093      	sub	sp, #76	; 0x4c
 8009dce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009dd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009dd4:	9106      	str	r1, [sp, #24]
 8009dd6:	ee10 aa10 	vmov	sl, s0
 8009dda:	4604      	mov	r4, r0
 8009ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8009dde:	930c      	str	r3, [sp, #48]	; 0x30
 8009de0:	46bb      	mov	fp, r7
 8009de2:	b975      	cbnz	r5, 8009e02 <_dtoa_r+0x42>
 8009de4:	2010      	movs	r0, #16
 8009de6:	f7ff f89d 	bl	8008f24 <malloc>
 8009dea:	4602      	mov	r2, r0
 8009dec:	6260      	str	r0, [r4, #36]	; 0x24
 8009dee:	b920      	cbnz	r0, 8009dfa <_dtoa_r+0x3a>
 8009df0:	4ba7      	ldr	r3, [pc, #668]	; (800a090 <_dtoa_r+0x2d0>)
 8009df2:	21ea      	movs	r1, #234	; 0xea
 8009df4:	48a7      	ldr	r0, [pc, #668]	; (800a094 <_dtoa_r+0x2d4>)
 8009df6:	f001 fbbd 	bl	800b574 <__assert_func>
 8009dfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009dfe:	6005      	str	r5, [r0, #0]
 8009e00:	60c5      	str	r5, [r0, #12]
 8009e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e04:	6819      	ldr	r1, [r3, #0]
 8009e06:	b151      	cbz	r1, 8009e1e <_dtoa_r+0x5e>
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	604a      	str	r2, [r1, #4]
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	4093      	lsls	r3, r2
 8009e10:	608b      	str	r3, [r1, #8]
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 fee6 	bl	800abe4 <_Bfree>
 8009e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	1e3b      	subs	r3, r7, #0
 8009e20:	bfaa      	itet	ge
 8009e22:	2300      	movge	r3, #0
 8009e24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009e28:	f8c8 3000 	strge.w	r3, [r8]
 8009e2c:	4b9a      	ldr	r3, [pc, #616]	; (800a098 <_dtoa_r+0x2d8>)
 8009e2e:	bfbc      	itt	lt
 8009e30:	2201      	movlt	r2, #1
 8009e32:	f8c8 2000 	strlt.w	r2, [r8]
 8009e36:	ea33 030b 	bics.w	r3, r3, fp
 8009e3a:	d11b      	bne.n	8009e74 <_dtoa_r+0xb4>
 8009e3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e48:	4333      	orrs	r3, r6
 8009e4a:	f000 8592 	beq.w	800a972 <_dtoa_r+0xbb2>
 8009e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e50:	b963      	cbnz	r3, 8009e6c <_dtoa_r+0xac>
 8009e52:	4b92      	ldr	r3, [pc, #584]	; (800a09c <_dtoa_r+0x2dc>)
 8009e54:	e022      	b.n	8009e9c <_dtoa_r+0xdc>
 8009e56:	4b92      	ldr	r3, [pc, #584]	; (800a0a0 <_dtoa_r+0x2e0>)
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	9801      	ldr	r0, [sp, #4]
 8009e62:	b013      	add	sp, #76	; 0x4c
 8009e64:	ecbd 8b04 	vpop	{d8-d9}
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6c:	4b8b      	ldr	r3, [pc, #556]	; (800a09c <_dtoa_r+0x2dc>)
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	3303      	adds	r3, #3
 8009e72:	e7f3      	b.n	8009e5c <_dtoa_r+0x9c>
 8009e74:	2200      	movs	r2, #0
 8009e76:	2300      	movs	r3, #0
 8009e78:	4650      	mov	r0, sl
 8009e7a:	4659      	mov	r1, fp
 8009e7c:	f7f6 fe2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e80:	ec4b ab19 	vmov	d9, sl, fp
 8009e84:	4680      	mov	r8, r0
 8009e86:	b158      	cbz	r0, 8009ea0 <_dtoa_r+0xe0>
 8009e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	6013      	str	r3, [r2, #0]
 8009e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 856b 	beq.w	800a96c <_dtoa_r+0xbac>
 8009e96:	4883      	ldr	r0, [pc, #524]	; (800a0a4 <_dtoa_r+0x2e4>)
 8009e98:	6018      	str	r0, [r3, #0]
 8009e9a:	1e43      	subs	r3, r0, #1
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	e7df      	b.n	8009e60 <_dtoa_r+0xa0>
 8009ea0:	ec4b ab10 	vmov	d0, sl, fp
 8009ea4:	aa10      	add	r2, sp, #64	; 0x40
 8009ea6:	a911      	add	r1, sp, #68	; 0x44
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f001 f983 	bl	800b1b4 <__d2b>
 8009eae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009eb2:	ee08 0a10 	vmov	s16, r0
 8009eb6:	2d00      	cmp	r5, #0
 8009eb8:	f000 8084 	beq.w	8009fc4 <_dtoa_r+0x204>
 8009ebc:	ee19 3a90 	vmov	r3, s19
 8009ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ec4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ec8:	4656      	mov	r6, sl
 8009eca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ed2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009ed6:	4b74      	ldr	r3, [pc, #464]	; (800a0a8 <_dtoa_r+0x2e8>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	4630      	mov	r0, r6
 8009edc:	4639      	mov	r1, r7
 8009ede:	f7f6 f9db 	bl	8000298 <__aeabi_dsub>
 8009ee2:	a365      	add	r3, pc, #404	; (adr r3, 800a078 <_dtoa_r+0x2b8>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f7f6 fb8e 	bl	8000608 <__aeabi_dmul>
 8009eec:	a364      	add	r3, pc, #400	; (adr r3, 800a080 <_dtoa_r+0x2c0>)
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	f7f6 f9d3 	bl	800029c <__adddf3>
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	4628      	mov	r0, r5
 8009efa:	460f      	mov	r7, r1
 8009efc:	f7f6 fb1a 	bl	8000534 <__aeabi_i2d>
 8009f00:	a361      	add	r3, pc, #388	; (adr r3, 800a088 <_dtoa_r+0x2c8>)
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	f7f6 fb7f 	bl	8000608 <__aeabi_dmul>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4630      	mov	r0, r6
 8009f10:	4639      	mov	r1, r7
 8009f12:	f7f6 f9c3 	bl	800029c <__adddf3>
 8009f16:	4606      	mov	r6, r0
 8009f18:	460f      	mov	r7, r1
 8009f1a:	f7f6 fe25 	bl	8000b68 <__aeabi_d2iz>
 8009f1e:	2200      	movs	r2, #0
 8009f20:	9000      	str	r0, [sp, #0]
 8009f22:	2300      	movs	r3, #0
 8009f24:	4630      	mov	r0, r6
 8009f26:	4639      	mov	r1, r7
 8009f28:	f7f6 fde0 	bl	8000aec <__aeabi_dcmplt>
 8009f2c:	b150      	cbz	r0, 8009f44 <_dtoa_r+0x184>
 8009f2e:	9800      	ldr	r0, [sp, #0]
 8009f30:	f7f6 fb00 	bl	8000534 <__aeabi_i2d>
 8009f34:	4632      	mov	r2, r6
 8009f36:	463b      	mov	r3, r7
 8009f38:	f7f6 fdce 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f3c:	b910      	cbnz	r0, 8009f44 <_dtoa_r+0x184>
 8009f3e:	9b00      	ldr	r3, [sp, #0]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	9b00      	ldr	r3, [sp, #0]
 8009f46:	2b16      	cmp	r3, #22
 8009f48:	d85a      	bhi.n	800a000 <_dtoa_r+0x240>
 8009f4a:	9a00      	ldr	r2, [sp, #0]
 8009f4c:	4b57      	ldr	r3, [pc, #348]	; (800a0ac <_dtoa_r+0x2ec>)
 8009f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	ec51 0b19 	vmov	r0, r1, d9
 8009f5a:	f7f6 fdc7 	bl	8000aec <__aeabi_dcmplt>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d050      	beq.n	800a004 <_dtoa_r+0x244>
 8009f62:	9b00      	ldr	r3, [sp, #0]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f6e:	1b5d      	subs	r5, r3, r5
 8009f70:	1e6b      	subs	r3, r5, #1
 8009f72:	9305      	str	r3, [sp, #20]
 8009f74:	bf45      	ittet	mi
 8009f76:	f1c5 0301 	rsbmi	r3, r5, #1
 8009f7a:	9304      	strmi	r3, [sp, #16]
 8009f7c:	2300      	movpl	r3, #0
 8009f7e:	2300      	movmi	r3, #0
 8009f80:	bf4c      	ite	mi
 8009f82:	9305      	strmi	r3, [sp, #20]
 8009f84:	9304      	strpl	r3, [sp, #16]
 8009f86:	9b00      	ldr	r3, [sp, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	db3d      	blt.n	800a008 <_dtoa_r+0x248>
 8009f8c:	9b05      	ldr	r3, [sp, #20]
 8009f8e:	9a00      	ldr	r2, [sp, #0]
 8009f90:	920a      	str	r2, [sp, #40]	; 0x28
 8009f92:	4413      	add	r3, r2
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	2300      	movs	r3, #0
 8009f98:	9307      	str	r3, [sp, #28]
 8009f9a:	9b06      	ldr	r3, [sp, #24]
 8009f9c:	2b09      	cmp	r3, #9
 8009f9e:	f200 8089 	bhi.w	800a0b4 <_dtoa_r+0x2f4>
 8009fa2:	2b05      	cmp	r3, #5
 8009fa4:	bfc4      	itt	gt
 8009fa6:	3b04      	subgt	r3, #4
 8009fa8:	9306      	strgt	r3, [sp, #24]
 8009faa:	9b06      	ldr	r3, [sp, #24]
 8009fac:	f1a3 0302 	sub.w	r3, r3, #2
 8009fb0:	bfcc      	ite	gt
 8009fb2:	2500      	movgt	r5, #0
 8009fb4:	2501      	movle	r5, #1
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	f200 8087 	bhi.w	800a0ca <_dtoa_r+0x30a>
 8009fbc:	e8df f003 	tbb	[pc, r3]
 8009fc0:	59383a2d 	.word	0x59383a2d
 8009fc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009fc8:	441d      	add	r5, r3
 8009fca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009fce:	2b20      	cmp	r3, #32
 8009fd0:	bfc1      	itttt	gt
 8009fd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009fd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009fda:	fa0b f303 	lslgt.w	r3, fp, r3
 8009fde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009fe2:	bfda      	itte	le
 8009fe4:	f1c3 0320 	rsble	r3, r3, #32
 8009fe8:	fa06 f003 	lslle.w	r0, r6, r3
 8009fec:	4318      	orrgt	r0, r3
 8009fee:	f7f6 fa91 	bl	8000514 <__aeabi_ui2d>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009ffa:	3d01      	subs	r5, #1
 8009ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8009ffe:	e76a      	b.n	8009ed6 <_dtoa_r+0x116>
 800a000:	2301      	movs	r3, #1
 800a002:	e7b2      	b.n	8009f6a <_dtoa_r+0x1aa>
 800a004:	900b      	str	r0, [sp, #44]	; 0x2c
 800a006:	e7b1      	b.n	8009f6c <_dtoa_r+0x1ac>
 800a008:	9b04      	ldr	r3, [sp, #16]
 800a00a:	9a00      	ldr	r2, [sp, #0]
 800a00c:	1a9b      	subs	r3, r3, r2
 800a00e:	9304      	str	r3, [sp, #16]
 800a010:	4253      	negs	r3, r2
 800a012:	9307      	str	r3, [sp, #28]
 800a014:	2300      	movs	r3, #0
 800a016:	930a      	str	r3, [sp, #40]	; 0x28
 800a018:	e7bf      	b.n	8009f9a <_dtoa_r+0x1da>
 800a01a:	2300      	movs	r3, #0
 800a01c:	9308      	str	r3, [sp, #32]
 800a01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	dc55      	bgt.n	800a0d0 <_dtoa_r+0x310>
 800a024:	2301      	movs	r3, #1
 800a026:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a02a:	461a      	mov	r2, r3
 800a02c:	9209      	str	r2, [sp, #36]	; 0x24
 800a02e:	e00c      	b.n	800a04a <_dtoa_r+0x28a>
 800a030:	2301      	movs	r3, #1
 800a032:	e7f3      	b.n	800a01c <_dtoa_r+0x25c>
 800a034:	2300      	movs	r3, #0
 800a036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a038:	9308      	str	r3, [sp, #32]
 800a03a:	9b00      	ldr	r3, [sp, #0]
 800a03c:	4413      	add	r3, r2
 800a03e:	9302      	str	r3, [sp, #8]
 800a040:	3301      	adds	r3, #1
 800a042:	2b01      	cmp	r3, #1
 800a044:	9303      	str	r3, [sp, #12]
 800a046:	bfb8      	it	lt
 800a048:	2301      	movlt	r3, #1
 800a04a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a04c:	2200      	movs	r2, #0
 800a04e:	6042      	str	r2, [r0, #4]
 800a050:	2204      	movs	r2, #4
 800a052:	f102 0614 	add.w	r6, r2, #20
 800a056:	429e      	cmp	r6, r3
 800a058:	6841      	ldr	r1, [r0, #4]
 800a05a:	d93d      	bls.n	800a0d8 <_dtoa_r+0x318>
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 fd81 	bl	800ab64 <_Balloc>
 800a062:	9001      	str	r0, [sp, #4]
 800a064:	2800      	cmp	r0, #0
 800a066:	d13b      	bne.n	800a0e0 <_dtoa_r+0x320>
 800a068:	4b11      	ldr	r3, [pc, #68]	; (800a0b0 <_dtoa_r+0x2f0>)
 800a06a:	4602      	mov	r2, r0
 800a06c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a070:	e6c0      	b.n	8009df4 <_dtoa_r+0x34>
 800a072:	2301      	movs	r3, #1
 800a074:	e7df      	b.n	800a036 <_dtoa_r+0x276>
 800a076:	bf00      	nop
 800a078:	636f4361 	.word	0x636f4361
 800a07c:	3fd287a7 	.word	0x3fd287a7
 800a080:	8b60c8b3 	.word	0x8b60c8b3
 800a084:	3fc68a28 	.word	0x3fc68a28
 800a088:	509f79fb 	.word	0x509f79fb
 800a08c:	3fd34413 	.word	0x3fd34413
 800a090:	0800c225 	.word	0x0800c225
 800a094:	0800c23c 	.word	0x0800c23c
 800a098:	7ff00000 	.word	0x7ff00000
 800a09c:	0800c221 	.word	0x0800c221
 800a0a0:	0800c218 	.word	0x0800c218
 800a0a4:	0800c1f5 	.word	0x0800c1f5
 800a0a8:	3ff80000 	.word	0x3ff80000
 800a0ac:	0800c330 	.word	0x0800c330
 800a0b0:	0800c297 	.word	0x0800c297
 800a0b4:	2501      	movs	r5, #1
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9306      	str	r3, [sp, #24]
 800a0ba:	9508      	str	r5, [sp, #32]
 800a0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2312      	movs	r3, #18
 800a0c8:	e7b0      	b.n	800a02c <_dtoa_r+0x26c>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	9308      	str	r3, [sp, #32]
 800a0ce:	e7f5      	b.n	800a0bc <_dtoa_r+0x2fc>
 800a0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0d6:	e7b8      	b.n	800a04a <_dtoa_r+0x28a>
 800a0d8:	3101      	adds	r1, #1
 800a0da:	6041      	str	r1, [r0, #4]
 800a0dc:	0052      	lsls	r2, r2, #1
 800a0de:	e7b8      	b.n	800a052 <_dtoa_r+0x292>
 800a0e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0e2:	9a01      	ldr	r2, [sp, #4]
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	2b0e      	cmp	r3, #14
 800a0ea:	f200 809d 	bhi.w	800a228 <_dtoa_r+0x468>
 800a0ee:	2d00      	cmp	r5, #0
 800a0f0:	f000 809a 	beq.w	800a228 <_dtoa_r+0x468>
 800a0f4:	9b00      	ldr	r3, [sp, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	dd32      	ble.n	800a160 <_dtoa_r+0x3a0>
 800a0fa:	4ab7      	ldr	r2, [pc, #732]	; (800a3d8 <_dtoa_r+0x618>)
 800a0fc:	f003 030f 	and.w	r3, r3, #15
 800a100:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a104:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a108:	9b00      	ldr	r3, [sp, #0]
 800a10a:	05d8      	lsls	r0, r3, #23
 800a10c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a110:	d516      	bpl.n	800a140 <_dtoa_r+0x380>
 800a112:	4bb2      	ldr	r3, [pc, #712]	; (800a3dc <_dtoa_r+0x61c>)
 800a114:	ec51 0b19 	vmov	r0, r1, d9
 800a118:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a11c:	f7f6 fb9e 	bl	800085c <__aeabi_ddiv>
 800a120:	f007 070f 	and.w	r7, r7, #15
 800a124:	4682      	mov	sl, r0
 800a126:	468b      	mov	fp, r1
 800a128:	2503      	movs	r5, #3
 800a12a:	4eac      	ldr	r6, [pc, #688]	; (800a3dc <_dtoa_r+0x61c>)
 800a12c:	b957      	cbnz	r7, 800a144 <_dtoa_r+0x384>
 800a12e:	4642      	mov	r2, r8
 800a130:	464b      	mov	r3, r9
 800a132:	4650      	mov	r0, sl
 800a134:	4659      	mov	r1, fp
 800a136:	f7f6 fb91 	bl	800085c <__aeabi_ddiv>
 800a13a:	4682      	mov	sl, r0
 800a13c:	468b      	mov	fp, r1
 800a13e:	e028      	b.n	800a192 <_dtoa_r+0x3d2>
 800a140:	2502      	movs	r5, #2
 800a142:	e7f2      	b.n	800a12a <_dtoa_r+0x36a>
 800a144:	07f9      	lsls	r1, r7, #31
 800a146:	d508      	bpl.n	800a15a <_dtoa_r+0x39a>
 800a148:	4640      	mov	r0, r8
 800a14a:	4649      	mov	r1, r9
 800a14c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a150:	f7f6 fa5a 	bl	8000608 <__aeabi_dmul>
 800a154:	3501      	adds	r5, #1
 800a156:	4680      	mov	r8, r0
 800a158:	4689      	mov	r9, r1
 800a15a:	107f      	asrs	r7, r7, #1
 800a15c:	3608      	adds	r6, #8
 800a15e:	e7e5      	b.n	800a12c <_dtoa_r+0x36c>
 800a160:	f000 809b 	beq.w	800a29a <_dtoa_r+0x4da>
 800a164:	9b00      	ldr	r3, [sp, #0]
 800a166:	4f9d      	ldr	r7, [pc, #628]	; (800a3dc <_dtoa_r+0x61c>)
 800a168:	425e      	negs	r6, r3
 800a16a:	4b9b      	ldr	r3, [pc, #620]	; (800a3d8 <_dtoa_r+0x618>)
 800a16c:	f006 020f 	and.w	r2, r6, #15
 800a170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	ec51 0b19 	vmov	r0, r1, d9
 800a17c:	f7f6 fa44 	bl	8000608 <__aeabi_dmul>
 800a180:	1136      	asrs	r6, r6, #4
 800a182:	4682      	mov	sl, r0
 800a184:	468b      	mov	fp, r1
 800a186:	2300      	movs	r3, #0
 800a188:	2502      	movs	r5, #2
 800a18a:	2e00      	cmp	r6, #0
 800a18c:	d17a      	bne.n	800a284 <_dtoa_r+0x4c4>
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1d3      	bne.n	800a13a <_dtoa_r+0x37a>
 800a192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 8082 	beq.w	800a29e <_dtoa_r+0x4de>
 800a19a:	4b91      	ldr	r3, [pc, #580]	; (800a3e0 <_dtoa_r+0x620>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	4650      	mov	r0, sl
 800a1a0:	4659      	mov	r1, fp
 800a1a2:	f7f6 fca3 	bl	8000aec <__aeabi_dcmplt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d079      	beq.n	800a29e <_dtoa_r+0x4de>
 800a1aa:	9b03      	ldr	r3, [sp, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d076      	beq.n	800a29e <_dtoa_r+0x4de>
 800a1b0:	9b02      	ldr	r3, [sp, #8]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	dd36      	ble.n	800a224 <_dtoa_r+0x464>
 800a1b6:	9b00      	ldr	r3, [sp, #0]
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	4659      	mov	r1, fp
 800a1bc:	1e5f      	subs	r7, r3, #1
 800a1be:	2200      	movs	r2, #0
 800a1c0:	4b88      	ldr	r3, [pc, #544]	; (800a3e4 <_dtoa_r+0x624>)
 800a1c2:	f7f6 fa21 	bl	8000608 <__aeabi_dmul>
 800a1c6:	9e02      	ldr	r6, [sp, #8]
 800a1c8:	4682      	mov	sl, r0
 800a1ca:	468b      	mov	fp, r1
 800a1cc:	3501      	adds	r5, #1
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f7f6 f9b0 	bl	8000534 <__aeabi_i2d>
 800a1d4:	4652      	mov	r2, sl
 800a1d6:	465b      	mov	r3, fp
 800a1d8:	f7f6 fa16 	bl	8000608 <__aeabi_dmul>
 800a1dc:	4b82      	ldr	r3, [pc, #520]	; (800a3e8 <_dtoa_r+0x628>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f7f6 f85c 	bl	800029c <__adddf3>
 800a1e4:	46d0      	mov	r8, sl
 800a1e6:	46d9      	mov	r9, fp
 800a1e8:	4682      	mov	sl, r0
 800a1ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a1ee:	2e00      	cmp	r6, #0
 800a1f0:	d158      	bne.n	800a2a4 <_dtoa_r+0x4e4>
 800a1f2:	4b7e      	ldr	r3, [pc, #504]	; (800a3ec <_dtoa_r+0x62c>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	4649      	mov	r1, r9
 800a1fa:	f7f6 f84d 	bl	8000298 <__aeabi_dsub>
 800a1fe:	4652      	mov	r2, sl
 800a200:	465b      	mov	r3, fp
 800a202:	4680      	mov	r8, r0
 800a204:	4689      	mov	r9, r1
 800a206:	f7f6 fc8f 	bl	8000b28 <__aeabi_dcmpgt>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	f040 8295 	bne.w	800a73a <_dtoa_r+0x97a>
 800a210:	4652      	mov	r2, sl
 800a212:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a216:	4640      	mov	r0, r8
 800a218:	4649      	mov	r1, r9
 800a21a:	f7f6 fc67 	bl	8000aec <__aeabi_dcmplt>
 800a21e:	2800      	cmp	r0, #0
 800a220:	f040 8289 	bne.w	800a736 <_dtoa_r+0x976>
 800a224:	ec5b ab19 	vmov	sl, fp, d9
 800a228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f2c0 8148 	blt.w	800a4c0 <_dtoa_r+0x700>
 800a230:	9a00      	ldr	r2, [sp, #0]
 800a232:	2a0e      	cmp	r2, #14
 800a234:	f300 8144 	bgt.w	800a4c0 <_dtoa_r+0x700>
 800a238:	4b67      	ldr	r3, [pc, #412]	; (800a3d8 <_dtoa_r+0x618>)
 800a23a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a23e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	f280 80d5 	bge.w	800a3f4 <_dtoa_r+0x634>
 800a24a:	9b03      	ldr	r3, [sp, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f300 80d1 	bgt.w	800a3f4 <_dtoa_r+0x634>
 800a252:	f040 826f 	bne.w	800a734 <_dtoa_r+0x974>
 800a256:	4b65      	ldr	r3, [pc, #404]	; (800a3ec <_dtoa_r+0x62c>)
 800a258:	2200      	movs	r2, #0
 800a25a:	4640      	mov	r0, r8
 800a25c:	4649      	mov	r1, r9
 800a25e:	f7f6 f9d3 	bl	8000608 <__aeabi_dmul>
 800a262:	4652      	mov	r2, sl
 800a264:	465b      	mov	r3, fp
 800a266:	f7f6 fc55 	bl	8000b14 <__aeabi_dcmpge>
 800a26a:	9e03      	ldr	r6, [sp, #12]
 800a26c:	4637      	mov	r7, r6
 800a26e:	2800      	cmp	r0, #0
 800a270:	f040 8245 	bne.w	800a6fe <_dtoa_r+0x93e>
 800a274:	9d01      	ldr	r5, [sp, #4]
 800a276:	2331      	movs	r3, #49	; 0x31
 800a278:	f805 3b01 	strb.w	r3, [r5], #1
 800a27c:	9b00      	ldr	r3, [sp, #0]
 800a27e:	3301      	adds	r3, #1
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	e240      	b.n	800a706 <_dtoa_r+0x946>
 800a284:	07f2      	lsls	r2, r6, #31
 800a286:	d505      	bpl.n	800a294 <_dtoa_r+0x4d4>
 800a288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a28c:	f7f6 f9bc 	bl	8000608 <__aeabi_dmul>
 800a290:	3501      	adds	r5, #1
 800a292:	2301      	movs	r3, #1
 800a294:	1076      	asrs	r6, r6, #1
 800a296:	3708      	adds	r7, #8
 800a298:	e777      	b.n	800a18a <_dtoa_r+0x3ca>
 800a29a:	2502      	movs	r5, #2
 800a29c:	e779      	b.n	800a192 <_dtoa_r+0x3d2>
 800a29e:	9f00      	ldr	r7, [sp, #0]
 800a2a0:	9e03      	ldr	r6, [sp, #12]
 800a2a2:	e794      	b.n	800a1ce <_dtoa_r+0x40e>
 800a2a4:	9901      	ldr	r1, [sp, #4]
 800a2a6:	4b4c      	ldr	r3, [pc, #304]	; (800a3d8 <_dtoa_r+0x618>)
 800a2a8:	4431      	add	r1, r6
 800a2aa:	910d      	str	r1, [sp, #52]	; 0x34
 800a2ac:	9908      	ldr	r1, [sp, #32]
 800a2ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a2b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2b6:	2900      	cmp	r1, #0
 800a2b8:	d043      	beq.n	800a342 <_dtoa_r+0x582>
 800a2ba:	494d      	ldr	r1, [pc, #308]	; (800a3f0 <_dtoa_r+0x630>)
 800a2bc:	2000      	movs	r0, #0
 800a2be:	f7f6 facd 	bl	800085c <__aeabi_ddiv>
 800a2c2:	4652      	mov	r2, sl
 800a2c4:	465b      	mov	r3, fp
 800a2c6:	f7f5 ffe7 	bl	8000298 <__aeabi_dsub>
 800a2ca:	9d01      	ldr	r5, [sp, #4]
 800a2cc:	4682      	mov	sl, r0
 800a2ce:	468b      	mov	fp, r1
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	f7f6 fc48 	bl	8000b68 <__aeabi_d2iz>
 800a2d8:	4606      	mov	r6, r0
 800a2da:	f7f6 f92b 	bl	8000534 <__aeabi_i2d>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	f7f5 ffd7 	bl	8000298 <__aeabi_dsub>
 800a2ea:	3630      	adds	r6, #48	; 0x30
 800a2ec:	f805 6b01 	strb.w	r6, [r5], #1
 800a2f0:	4652      	mov	r2, sl
 800a2f2:	465b      	mov	r3, fp
 800a2f4:	4680      	mov	r8, r0
 800a2f6:	4689      	mov	r9, r1
 800a2f8:	f7f6 fbf8 	bl	8000aec <__aeabi_dcmplt>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d163      	bne.n	800a3c8 <_dtoa_r+0x608>
 800a300:	4642      	mov	r2, r8
 800a302:	464b      	mov	r3, r9
 800a304:	4936      	ldr	r1, [pc, #216]	; (800a3e0 <_dtoa_r+0x620>)
 800a306:	2000      	movs	r0, #0
 800a308:	f7f5 ffc6 	bl	8000298 <__aeabi_dsub>
 800a30c:	4652      	mov	r2, sl
 800a30e:	465b      	mov	r3, fp
 800a310:	f7f6 fbec 	bl	8000aec <__aeabi_dcmplt>
 800a314:	2800      	cmp	r0, #0
 800a316:	f040 80b5 	bne.w	800a484 <_dtoa_r+0x6c4>
 800a31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a31c:	429d      	cmp	r5, r3
 800a31e:	d081      	beq.n	800a224 <_dtoa_r+0x464>
 800a320:	4b30      	ldr	r3, [pc, #192]	; (800a3e4 <_dtoa_r+0x624>)
 800a322:	2200      	movs	r2, #0
 800a324:	4650      	mov	r0, sl
 800a326:	4659      	mov	r1, fp
 800a328:	f7f6 f96e 	bl	8000608 <__aeabi_dmul>
 800a32c:	4b2d      	ldr	r3, [pc, #180]	; (800a3e4 <_dtoa_r+0x624>)
 800a32e:	4682      	mov	sl, r0
 800a330:	468b      	mov	fp, r1
 800a332:	4640      	mov	r0, r8
 800a334:	4649      	mov	r1, r9
 800a336:	2200      	movs	r2, #0
 800a338:	f7f6 f966 	bl	8000608 <__aeabi_dmul>
 800a33c:	4680      	mov	r8, r0
 800a33e:	4689      	mov	r9, r1
 800a340:	e7c6      	b.n	800a2d0 <_dtoa_r+0x510>
 800a342:	4650      	mov	r0, sl
 800a344:	4659      	mov	r1, fp
 800a346:	f7f6 f95f 	bl	8000608 <__aeabi_dmul>
 800a34a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a34c:	9d01      	ldr	r5, [sp, #4]
 800a34e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a350:	4682      	mov	sl, r0
 800a352:	468b      	mov	fp, r1
 800a354:	4649      	mov	r1, r9
 800a356:	4640      	mov	r0, r8
 800a358:	f7f6 fc06 	bl	8000b68 <__aeabi_d2iz>
 800a35c:	4606      	mov	r6, r0
 800a35e:	f7f6 f8e9 	bl	8000534 <__aeabi_i2d>
 800a362:	3630      	adds	r6, #48	; 0x30
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4640      	mov	r0, r8
 800a36a:	4649      	mov	r1, r9
 800a36c:	f7f5 ff94 	bl	8000298 <__aeabi_dsub>
 800a370:	f805 6b01 	strb.w	r6, [r5], #1
 800a374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a376:	429d      	cmp	r5, r3
 800a378:	4680      	mov	r8, r0
 800a37a:	4689      	mov	r9, r1
 800a37c:	f04f 0200 	mov.w	r2, #0
 800a380:	d124      	bne.n	800a3cc <_dtoa_r+0x60c>
 800a382:	4b1b      	ldr	r3, [pc, #108]	; (800a3f0 <_dtoa_r+0x630>)
 800a384:	4650      	mov	r0, sl
 800a386:	4659      	mov	r1, fp
 800a388:	f7f5 ff88 	bl	800029c <__adddf3>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4640      	mov	r0, r8
 800a392:	4649      	mov	r1, r9
 800a394:	f7f6 fbc8 	bl	8000b28 <__aeabi_dcmpgt>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d173      	bne.n	800a484 <_dtoa_r+0x6c4>
 800a39c:	4652      	mov	r2, sl
 800a39e:	465b      	mov	r3, fp
 800a3a0:	4913      	ldr	r1, [pc, #76]	; (800a3f0 <_dtoa_r+0x630>)
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	f7f5 ff78 	bl	8000298 <__aeabi_dsub>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4640      	mov	r0, r8
 800a3ae:	4649      	mov	r1, r9
 800a3b0:	f7f6 fb9c 	bl	8000aec <__aeabi_dcmplt>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	f43f af35 	beq.w	800a224 <_dtoa_r+0x464>
 800a3ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a3bc:	1e6b      	subs	r3, r5, #1
 800a3be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3c4:	2b30      	cmp	r3, #48	; 0x30
 800a3c6:	d0f8      	beq.n	800a3ba <_dtoa_r+0x5fa>
 800a3c8:	9700      	str	r7, [sp, #0]
 800a3ca:	e049      	b.n	800a460 <_dtoa_r+0x6a0>
 800a3cc:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <_dtoa_r+0x624>)
 800a3ce:	f7f6 f91b 	bl	8000608 <__aeabi_dmul>
 800a3d2:	4680      	mov	r8, r0
 800a3d4:	4689      	mov	r9, r1
 800a3d6:	e7bd      	b.n	800a354 <_dtoa_r+0x594>
 800a3d8:	0800c330 	.word	0x0800c330
 800a3dc:	0800c308 	.word	0x0800c308
 800a3e0:	3ff00000 	.word	0x3ff00000
 800a3e4:	40240000 	.word	0x40240000
 800a3e8:	401c0000 	.word	0x401c0000
 800a3ec:	40140000 	.word	0x40140000
 800a3f0:	3fe00000 	.word	0x3fe00000
 800a3f4:	9d01      	ldr	r5, [sp, #4]
 800a3f6:	4656      	mov	r6, sl
 800a3f8:	465f      	mov	r7, fp
 800a3fa:	4642      	mov	r2, r8
 800a3fc:	464b      	mov	r3, r9
 800a3fe:	4630      	mov	r0, r6
 800a400:	4639      	mov	r1, r7
 800a402:	f7f6 fa2b 	bl	800085c <__aeabi_ddiv>
 800a406:	f7f6 fbaf 	bl	8000b68 <__aeabi_d2iz>
 800a40a:	4682      	mov	sl, r0
 800a40c:	f7f6 f892 	bl	8000534 <__aeabi_i2d>
 800a410:	4642      	mov	r2, r8
 800a412:	464b      	mov	r3, r9
 800a414:	f7f6 f8f8 	bl	8000608 <__aeabi_dmul>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4630      	mov	r0, r6
 800a41e:	4639      	mov	r1, r7
 800a420:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a424:	f7f5 ff38 	bl	8000298 <__aeabi_dsub>
 800a428:	f805 6b01 	strb.w	r6, [r5], #1
 800a42c:	9e01      	ldr	r6, [sp, #4]
 800a42e:	9f03      	ldr	r7, [sp, #12]
 800a430:	1bae      	subs	r6, r5, r6
 800a432:	42b7      	cmp	r7, r6
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	d135      	bne.n	800a4a6 <_dtoa_r+0x6e6>
 800a43a:	f7f5 ff2f 	bl	800029c <__adddf3>
 800a43e:	4642      	mov	r2, r8
 800a440:	464b      	mov	r3, r9
 800a442:	4606      	mov	r6, r0
 800a444:	460f      	mov	r7, r1
 800a446:	f7f6 fb6f 	bl	8000b28 <__aeabi_dcmpgt>
 800a44a:	b9d0      	cbnz	r0, 800a482 <_dtoa_r+0x6c2>
 800a44c:	4642      	mov	r2, r8
 800a44e:	464b      	mov	r3, r9
 800a450:	4630      	mov	r0, r6
 800a452:	4639      	mov	r1, r7
 800a454:	f7f6 fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 800a458:	b110      	cbz	r0, 800a460 <_dtoa_r+0x6a0>
 800a45a:	f01a 0f01 	tst.w	sl, #1
 800a45e:	d110      	bne.n	800a482 <_dtoa_r+0x6c2>
 800a460:	4620      	mov	r0, r4
 800a462:	ee18 1a10 	vmov	r1, s16
 800a466:	f000 fbbd 	bl	800abe4 <_Bfree>
 800a46a:	2300      	movs	r3, #0
 800a46c:	9800      	ldr	r0, [sp, #0]
 800a46e:	702b      	strb	r3, [r5, #0]
 800a470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a472:	3001      	adds	r0, #1
 800a474:	6018      	str	r0, [r3, #0]
 800a476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f43f acf1 	beq.w	8009e60 <_dtoa_r+0xa0>
 800a47e:	601d      	str	r5, [r3, #0]
 800a480:	e4ee      	b.n	8009e60 <_dtoa_r+0xa0>
 800a482:	9f00      	ldr	r7, [sp, #0]
 800a484:	462b      	mov	r3, r5
 800a486:	461d      	mov	r5, r3
 800a488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a48c:	2a39      	cmp	r2, #57	; 0x39
 800a48e:	d106      	bne.n	800a49e <_dtoa_r+0x6de>
 800a490:	9a01      	ldr	r2, [sp, #4]
 800a492:	429a      	cmp	r2, r3
 800a494:	d1f7      	bne.n	800a486 <_dtoa_r+0x6c6>
 800a496:	9901      	ldr	r1, [sp, #4]
 800a498:	2230      	movs	r2, #48	; 0x30
 800a49a:	3701      	adds	r7, #1
 800a49c:	700a      	strb	r2, [r1, #0]
 800a49e:	781a      	ldrb	r2, [r3, #0]
 800a4a0:	3201      	adds	r2, #1
 800a4a2:	701a      	strb	r2, [r3, #0]
 800a4a4:	e790      	b.n	800a3c8 <_dtoa_r+0x608>
 800a4a6:	4ba6      	ldr	r3, [pc, #664]	; (800a740 <_dtoa_r+0x980>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f7f6 f8ad 	bl	8000608 <__aeabi_dmul>
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	460f      	mov	r7, r1
 800a4b6:	f7f6 fb0f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d09d      	beq.n	800a3fa <_dtoa_r+0x63a>
 800a4be:	e7cf      	b.n	800a460 <_dtoa_r+0x6a0>
 800a4c0:	9a08      	ldr	r2, [sp, #32]
 800a4c2:	2a00      	cmp	r2, #0
 800a4c4:	f000 80d7 	beq.w	800a676 <_dtoa_r+0x8b6>
 800a4c8:	9a06      	ldr	r2, [sp, #24]
 800a4ca:	2a01      	cmp	r2, #1
 800a4cc:	f300 80ba 	bgt.w	800a644 <_dtoa_r+0x884>
 800a4d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4d2:	2a00      	cmp	r2, #0
 800a4d4:	f000 80b2 	beq.w	800a63c <_dtoa_r+0x87c>
 800a4d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4dc:	9e07      	ldr	r6, [sp, #28]
 800a4de:	9d04      	ldr	r5, [sp, #16]
 800a4e0:	9a04      	ldr	r2, [sp, #16]
 800a4e2:	441a      	add	r2, r3
 800a4e4:	9204      	str	r2, [sp, #16]
 800a4e6:	9a05      	ldr	r2, [sp, #20]
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	441a      	add	r2, r3
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	9205      	str	r2, [sp, #20]
 800a4f0:	f000 fc30 	bl	800ad54 <__i2b>
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	dd0c      	ble.n	800a514 <_dtoa_r+0x754>
 800a4fa:	9b05      	ldr	r3, [sp, #20]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dd09      	ble.n	800a514 <_dtoa_r+0x754>
 800a500:	42ab      	cmp	r3, r5
 800a502:	9a04      	ldr	r2, [sp, #16]
 800a504:	bfa8      	it	ge
 800a506:	462b      	movge	r3, r5
 800a508:	1ad2      	subs	r2, r2, r3
 800a50a:	9204      	str	r2, [sp, #16]
 800a50c:	9a05      	ldr	r2, [sp, #20]
 800a50e:	1aed      	subs	r5, r5, r3
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	9b07      	ldr	r3, [sp, #28]
 800a516:	b31b      	cbz	r3, 800a560 <_dtoa_r+0x7a0>
 800a518:	9b08      	ldr	r3, [sp, #32]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 80af 	beq.w	800a67e <_dtoa_r+0x8be>
 800a520:	2e00      	cmp	r6, #0
 800a522:	dd13      	ble.n	800a54c <_dtoa_r+0x78c>
 800a524:	4639      	mov	r1, r7
 800a526:	4632      	mov	r2, r6
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fcd3 	bl	800aed4 <__pow5mult>
 800a52e:	ee18 2a10 	vmov	r2, s16
 800a532:	4601      	mov	r1, r0
 800a534:	4607      	mov	r7, r0
 800a536:	4620      	mov	r0, r4
 800a538:	f000 fc22 	bl	800ad80 <__multiply>
 800a53c:	ee18 1a10 	vmov	r1, s16
 800a540:	4680      	mov	r8, r0
 800a542:	4620      	mov	r0, r4
 800a544:	f000 fb4e 	bl	800abe4 <_Bfree>
 800a548:	ee08 8a10 	vmov	s16, r8
 800a54c:	9b07      	ldr	r3, [sp, #28]
 800a54e:	1b9a      	subs	r2, r3, r6
 800a550:	d006      	beq.n	800a560 <_dtoa_r+0x7a0>
 800a552:	ee18 1a10 	vmov	r1, s16
 800a556:	4620      	mov	r0, r4
 800a558:	f000 fcbc 	bl	800aed4 <__pow5mult>
 800a55c:	ee08 0a10 	vmov	s16, r0
 800a560:	2101      	movs	r1, #1
 800a562:	4620      	mov	r0, r4
 800a564:	f000 fbf6 	bl	800ad54 <__i2b>
 800a568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	4606      	mov	r6, r0
 800a56e:	f340 8088 	ble.w	800a682 <_dtoa_r+0x8c2>
 800a572:	461a      	mov	r2, r3
 800a574:	4601      	mov	r1, r0
 800a576:	4620      	mov	r0, r4
 800a578:	f000 fcac 	bl	800aed4 <__pow5mult>
 800a57c:	9b06      	ldr	r3, [sp, #24]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	4606      	mov	r6, r0
 800a582:	f340 8081 	ble.w	800a688 <_dtoa_r+0x8c8>
 800a586:	f04f 0800 	mov.w	r8, #0
 800a58a:	6933      	ldr	r3, [r6, #16]
 800a58c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a590:	6918      	ldr	r0, [r3, #16]
 800a592:	f000 fb8f 	bl	800acb4 <__hi0bits>
 800a596:	f1c0 0020 	rsb	r0, r0, #32
 800a59a:	9b05      	ldr	r3, [sp, #20]
 800a59c:	4418      	add	r0, r3
 800a59e:	f010 001f 	ands.w	r0, r0, #31
 800a5a2:	f000 8092 	beq.w	800a6ca <_dtoa_r+0x90a>
 800a5a6:	f1c0 0320 	rsb	r3, r0, #32
 800a5aa:	2b04      	cmp	r3, #4
 800a5ac:	f340 808a 	ble.w	800a6c4 <_dtoa_r+0x904>
 800a5b0:	f1c0 001c 	rsb	r0, r0, #28
 800a5b4:	9b04      	ldr	r3, [sp, #16]
 800a5b6:	4403      	add	r3, r0
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	9b05      	ldr	r3, [sp, #20]
 800a5bc:	4403      	add	r3, r0
 800a5be:	4405      	add	r5, r0
 800a5c0:	9305      	str	r3, [sp, #20]
 800a5c2:	9b04      	ldr	r3, [sp, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dd07      	ble.n	800a5d8 <_dtoa_r+0x818>
 800a5c8:	ee18 1a10 	vmov	r1, s16
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f000 fcda 	bl	800af88 <__lshift>
 800a5d4:	ee08 0a10 	vmov	s16, r0
 800a5d8:	9b05      	ldr	r3, [sp, #20]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	dd05      	ble.n	800a5ea <_dtoa_r+0x82a>
 800a5de:	4631      	mov	r1, r6
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 fcd0 	bl	800af88 <__lshift>
 800a5e8:	4606      	mov	r6, r0
 800a5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d06e      	beq.n	800a6ce <_dtoa_r+0x90e>
 800a5f0:	ee18 0a10 	vmov	r0, s16
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	f000 fd37 	bl	800b068 <__mcmp>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	da67      	bge.n	800a6ce <_dtoa_r+0x90e>
 800a5fe:	9b00      	ldr	r3, [sp, #0]
 800a600:	3b01      	subs	r3, #1
 800a602:	ee18 1a10 	vmov	r1, s16
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	220a      	movs	r2, #10
 800a60a:	2300      	movs	r3, #0
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 fb0b 	bl	800ac28 <__multadd>
 800a612:	9b08      	ldr	r3, [sp, #32]
 800a614:	ee08 0a10 	vmov	s16, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 81b1 	beq.w	800a980 <_dtoa_r+0xbc0>
 800a61e:	2300      	movs	r3, #0
 800a620:	4639      	mov	r1, r7
 800a622:	220a      	movs	r2, #10
 800a624:	4620      	mov	r0, r4
 800a626:	f000 faff 	bl	800ac28 <__multadd>
 800a62a:	9b02      	ldr	r3, [sp, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	4607      	mov	r7, r0
 800a630:	f300 808e 	bgt.w	800a750 <_dtoa_r+0x990>
 800a634:	9b06      	ldr	r3, [sp, #24]
 800a636:	2b02      	cmp	r3, #2
 800a638:	dc51      	bgt.n	800a6de <_dtoa_r+0x91e>
 800a63a:	e089      	b.n	800a750 <_dtoa_r+0x990>
 800a63c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a63e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a642:	e74b      	b.n	800a4dc <_dtoa_r+0x71c>
 800a644:	9b03      	ldr	r3, [sp, #12]
 800a646:	1e5e      	subs	r6, r3, #1
 800a648:	9b07      	ldr	r3, [sp, #28]
 800a64a:	42b3      	cmp	r3, r6
 800a64c:	bfbf      	itttt	lt
 800a64e:	9b07      	ldrlt	r3, [sp, #28]
 800a650:	9607      	strlt	r6, [sp, #28]
 800a652:	1af2      	sublt	r2, r6, r3
 800a654:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a656:	bfb6      	itet	lt
 800a658:	189b      	addlt	r3, r3, r2
 800a65a:	1b9e      	subge	r6, r3, r6
 800a65c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a65e:	9b03      	ldr	r3, [sp, #12]
 800a660:	bfb8      	it	lt
 800a662:	2600      	movlt	r6, #0
 800a664:	2b00      	cmp	r3, #0
 800a666:	bfb7      	itett	lt
 800a668:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a66c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a670:	1a9d      	sublt	r5, r3, r2
 800a672:	2300      	movlt	r3, #0
 800a674:	e734      	b.n	800a4e0 <_dtoa_r+0x720>
 800a676:	9e07      	ldr	r6, [sp, #28]
 800a678:	9d04      	ldr	r5, [sp, #16]
 800a67a:	9f08      	ldr	r7, [sp, #32]
 800a67c:	e73b      	b.n	800a4f6 <_dtoa_r+0x736>
 800a67e:	9a07      	ldr	r2, [sp, #28]
 800a680:	e767      	b.n	800a552 <_dtoa_r+0x792>
 800a682:	9b06      	ldr	r3, [sp, #24]
 800a684:	2b01      	cmp	r3, #1
 800a686:	dc18      	bgt.n	800a6ba <_dtoa_r+0x8fa>
 800a688:	f1ba 0f00 	cmp.w	sl, #0
 800a68c:	d115      	bne.n	800a6ba <_dtoa_r+0x8fa>
 800a68e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a692:	b993      	cbnz	r3, 800a6ba <_dtoa_r+0x8fa>
 800a694:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a698:	0d1b      	lsrs	r3, r3, #20
 800a69a:	051b      	lsls	r3, r3, #20
 800a69c:	b183      	cbz	r3, 800a6c0 <_dtoa_r+0x900>
 800a69e:	9b04      	ldr	r3, [sp, #16]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	9304      	str	r3, [sp, #16]
 800a6a4:	9b05      	ldr	r3, [sp, #20]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	9305      	str	r3, [sp, #20]
 800a6aa:	f04f 0801 	mov.w	r8, #1
 800a6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f47f af6a 	bne.w	800a58a <_dtoa_r+0x7ca>
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	e76f      	b.n	800a59a <_dtoa_r+0x7da>
 800a6ba:	f04f 0800 	mov.w	r8, #0
 800a6be:	e7f6      	b.n	800a6ae <_dtoa_r+0x8ee>
 800a6c0:	4698      	mov	r8, r3
 800a6c2:	e7f4      	b.n	800a6ae <_dtoa_r+0x8ee>
 800a6c4:	f43f af7d 	beq.w	800a5c2 <_dtoa_r+0x802>
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	301c      	adds	r0, #28
 800a6cc:	e772      	b.n	800a5b4 <_dtoa_r+0x7f4>
 800a6ce:	9b03      	ldr	r3, [sp, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	dc37      	bgt.n	800a744 <_dtoa_r+0x984>
 800a6d4:	9b06      	ldr	r3, [sp, #24]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	dd34      	ble.n	800a744 <_dtoa_r+0x984>
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	9302      	str	r3, [sp, #8]
 800a6de:	9b02      	ldr	r3, [sp, #8]
 800a6e0:	b96b      	cbnz	r3, 800a6fe <_dtoa_r+0x93e>
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	2205      	movs	r2, #5
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 fa9e 	bl	800ac28 <__multadd>
 800a6ec:	4601      	mov	r1, r0
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	ee18 0a10 	vmov	r0, s16
 800a6f4:	f000 fcb8 	bl	800b068 <__mcmp>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	f73f adbb 	bgt.w	800a274 <_dtoa_r+0x4b4>
 800a6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a700:	9d01      	ldr	r5, [sp, #4]
 800a702:	43db      	mvns	r3, r3
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	f04f 0800 	mov.w	r8, #0
 800a70a:	4631      	mov	r1, r6
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 fa69 	bl	800abe4 <_Bfree>
 800a712:	2f00      	cmp	r7, #0
 800a714:	f43f aea4 	beq.w	800a460 <_dtoa_r+0x6a0>
 800a718:	f1b8 0f00 	cmp.w	r8, #0
 800a71c:	d005      	beq.n	800a72a <_dtoa_r+0x96a>
 800a71e:	45b8      	cmp	r8, r7
 800a720:	d003      	beq.n	800a72a <_dtoa_r+0x96a>
 800a722:	4641      	mov	r1, r8
 800a724:	4620      	mov	r0, r4
 800a726:	f000 fa5d 	bl	800abe4 <_Bfree>
 800a72a:	4639      	mov	r1, r7
 800a72c:	4620      	mov	r0, r4
 800a72e:	f000 fa59 	bl	800abe4 <_Bfree>
 800a732:	e695      	b.n	800a460 <_dtoa_r+0x6a0>
 800a734:	2600      	movs	r6, #0
 800a736:	4637      	mov	r7, r6
 800a738:	e7e1      	b.n	800a6fe <_dtoa_r+0x93e>
 800a73a:	9700      	str	r7, [sp, #0]
 800a73c:	4637      	mov	r7, r6
 800a73e:	e599      	b.n	800a274 <_dtoa_r+0x4b4>
 800a740:	40240000 	.word	0x40240000
 800a744:	9b08      	ldr	r3, [sp, #32]
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 80ca 	beq.w	800a8e0 <_dtoa_r+0xb20>
 800a74c:	9b03      	ldr	r3, [sp, #12]
 800a74e:	9302      	str	r3, [sp, #8]
 800a750:	2d00      	cmp	r5, #0
 800a752:	dd05      	ble.n	800a760 <_dtoa_r+0x9a0>
 800a754:	4639      	mov	r1, r7
 800a756:	462a      	mov	r2, r5
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 fc15 	bl	800af88 <__lshift>
 800a75e:	4607      	mov	r7, r0
 800a760:	f1b8 0f00 	cmp.w	r8, #0
 800a764:	d05b      	beq.n	800a81e <_dtoa_r+0xa5e>
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 f9fb 	bl	800ab64 <_Balloc>
 800a76e:	4605      	mov	r5, r0
 800a770:	b928      	cbnz	r0, 800a77e <_dtoa_r+0x9be>
 800a772:	4b87      	ldr	r3, [pc, #540]	; (800a990 <_dtoa_r+0xbd0>)
 800a774:	4602      	mov	r2, r0
 800a776:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a77a:	f7ff bb3b 	b.w	8009df4 <_dtoa_r+0x34>
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	3202      	adds	r2, #2
 800a782:	0092      	lsls	r2, r2, #2
 800a784:	f107 010c 	add.w	r1, r7, #12
 800a788:	300c      	adds	r0, #12
 800a78a:	f7fe fbd3 	bl	8008f34 <memcpy>
 800a78e:	2201      	movs	r2, #1
 800a790:	4629      	mov	r1, r5
 800a792:	4620      	mov	r0, r4
 800a794:	f000 fbf8 	bl	800af88 <__lshift>
 800a798:	9b01      	ldr	r3, [sp, #4]
 800a79a:	f103 0901 	add.w	r9, r3, #1
 800a79e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	9305      	str	r3, [sp, #20]
 800a7a6:	f00a 0301 	and.w	r3, sl, #1
 800a7aa:	46b8      	mov	r8, r7
 800a7ac:	9304      	str	r3, [sp, #16]
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	ee18 0a10 	vmov	r0, s16
 800a7b6:	f7ff fa75 	bl	8009ca4 <quorem>
 800a7ba:	4641      	mov	r1, r8
 800a7bc:	9002      	str	r0, [sp, #8]
 800a7be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a7c2:	ee18 0a10 	vmov	r0, s16
 800a7c6:	f000 fc4f 	bl	800b068 <__mcmp>
 800a7ca:	463a      	mov	r2, r7
 800a7cc:	9003      	str	r0, [sp, #12]
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f000 fc65 	bl	800b0a0 <__mdiff>
 800a7d6:	68c2      	ldr	r2, [r0, #12]
 800a7d8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a7dc:	4605      	mov	r5, r0
 800a7de:	bb02      	cbnz	r2, 800a822 <_dtoa_r+0xa62>
 800a7e0:	4601      	mov	r1, r0
 800a7e2:	ee18 0a10 	vmov	r0, s16
 800a7e6:	f000 fc3f 	bl	800b068 <__mcmp>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	4629      	mov	r1, r5
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	9207      	str	r2, [sp, #28]
 800a7f2:	f000 f9f7 	bl	800abe4 <_Bfree>
 800a7f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a7fa:	ea43 0102 	orr.w	r1, r3, r2
 800a7fe:	9b04      	ldr	r3, [sp, #16]
 800a800:	430b      	orrs	r3, r1
 800a802:	464d      	mov	r5, r9
 800a804:	d10f      	bne.n	800a826 <_dtoa_r+0xa66>
 800a806:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a80a:	d02a      	beq.n	800a862 <_dtoa_r+0xaa2>
 800a80c:	9b03      	ldr	r3, [sp, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dd02      	ble.n	800a818 <_dtoa_r+0xa58>
 800a812:	9b02      	ldr	r3, [sp, #8]
 800a814:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a818:	f88b a000 	strb.w	sl, [fp]
 800a81c:	e775      	b.n	800a70a <_dtoa_r+0x94a>
 800a81e:	4638      	mov	r0, r7
 800a820:	e7ba      	b.n	800a798 <_dtoa_r+0x9d8>
 800a822:	2201      	movs	r2, #1
 800a824:	e7e2      	b.n	800a7ec <_dtoa_r+0xa2c>
 800a826:	9b03      	ldr	r3, [sp, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	db04      	blt.n	800a836 <_dtoa_r+0xa76>
 800a82c:	9906      	ldr	r1, [sp, #24]
 800a82e:	430b      	orrs	r3, r1
 800a830:	9904      	ldr	r1, [sp, #16]
 800a832:	430b      	orrs	r3, r1
 800a834:	d122      	bne.n	800a87c <_dtoa_r+0xabc>
 800a836:	2a00      	cmp	r2, #0
 800a838:	ddee      	ble.n	800a818 <_dtoa_r+0xa58>
 800a83a:	ee18 1a10 	vmov	r1, s16
 800a83e:	2201      	movs	r2, #1
 800a840:	4620      	mov	r0, r4
 800a842:	f000 fba1 	bl	800af88 <__lshift>
 800a846:	4631      	mov	r1, r6
 800a848:	ee08 0a10 	vmov	s16, r0
 800a84c:	f000 fc0c 	bl	800b068 <__mcmp>
 800a850:	2800      	cmp	r0, #0
 800a852:	dc03      	bgt.n	800a85c <_dtoa_r+0xa9c>
 800a854:	d1e0      	bne.n	800a818 <_dtoa_r+0xa58>
 800a856:	f01a 0f01 	tst.w	sl, #1
 800a85a:	d0dd      	beq.n	800a818 <_dtoa_r+0xa58>
 800a85c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a860:	d1d7      	bne.n	800a812 <_dtoa_r+0xa52>
 800a862:	2339      	movs	r3, #57	; 0x39
 800a864:	f88b 3000 	strb.w	r3, [fp]
 800a868:	462b      	mov	r3, r5
 800a86a:	461d      	mov	r5, r3
 800a86c:	3b01      	subs	r3, #1
 800a86e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a872:	2a39      	cmp	r2, #57	; 0x39
 800a874:	d071      	beq.n	800a95a <_dtoa_r+0xb9a>
 800a876:	3201      	adds	r2, #1
 800a878:	701a      	strb	r2, [r3, #0]
 800a87a:	e746      	b.n	800a70a <_dtoa_r+0x94a>
 800a87c:	2a00      	cmp	r2, #0
 800a87e:	dd07      	ble.n	800a890 <_dtoa_r+0xad0>
 800a880:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a884:	d0ed      	beq.n	800a862 <_dtoa_r+0xaa2>
 800a886:	f10a 0301 	add.w	r3, sl, #1
 800a88a:	f88b 3000 	strb.w	r3, [fp]
 800a88e:	e73c      	b.n	800a70a <_dtoa_r+0x94a>
 800a890:	9b05      	ldr	r3, [sp, #20]
 800a892:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a896:	4599      	cmp	r9, r3
 800a898:	d047      	beq.n	800a92a <_dtoa_r+0xb6a>
 800a89a:	ee18 1a10 	vmov	r1, s16
 800a89e:	2300      	movs	r3, #0
 800a8a0:	220a      	movs	r2, #10
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 f9c0 	bl	800ac28 <__multadd>
 800a8a8:	45b8      	cmp	r8, r7
 800a8aa:	ee08 0a10 	vmov	s16, r0
 800a8ae:	f04f 0300 	mov.w	r3, #0
 800a8b2:	f04f 020a 	mov.w	r2, #10
 800a8b6:	4641      	mov	r1, r8
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	d106      	bne.n	800a8ca <_dtoa_r+0xb0a>
 800a8bc:	f000 f9b4 	bl	800ac28 <__multadd>
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	4607      	mov	r7, r0
 800a8c4:	f109 0901 	add.w	r9, r9, #1
 800a8c8:	e772      	b.n	800a7b0 <_dtoa_r+0x9f0>
 800a8ca:	f000 f9ad 	bl	800ac28 <__multadd>
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	4680      	mov	r8, r0
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	220a      	movs	r2, #10
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f000 f9a6 	bl	800ac28 <__multadd>
 800a8dc:	4607      	mov	r7, r0
 800a8de:	e7f1      	b.n	800a8c4 <_dtoa_r+0xb04>
 800a8e0:	9b03      	ldr	r3, [sp, #12]
 800a8e2:	9302      	str	r3, [sp, #8]
 800a8e4:	9d01      	ldr	r5, [sp, #4]
 800a8e6:	ee18 0a10 	vmov	r0, s16
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	f7ff f9da 	bl	8009ca4 <quorem>
 800a8f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8f4:	9b01      	ldr	r3, [sp, #4]
 800a8f6:	f805 ab01 	strb.w	sl, [r5], #1
 800a8fa:	1aea      	subs	r2, r5, r3
 800a8fc:	9b02      	ldr	r3, [sp, #8]
 800a8fe:	4293      	cmp	r3, r2
 800a900:	dd09      	ble.n	800a916 <_dtoa_r+0xb56>
 800a902:	ee18 1a10 	vmov	r1, s16
 800a906:	2300      	movs	r3, #0
 800a908:	220a      	movs	r2, #10
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 f98c 	bl	800ac28 <__multadd>
 800a910:	ee08 0a10 	vmov	s16, r0
 800a914:	e7e7      	b.n	800a8e6 <_dtoa_r+0xb26>
 800a916:	9b02      	ldr	r3, [sp, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	bfc8      	it	gt
 800a91c:	461d      	movgt	r5, r3
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	bfd8      	it	le
 800a922:	2501      	movle	r5, #1
 800a924:	441d      	add	r5, r3
 800a926:	f04f 0800 	mov.w	r8, #0
 800a92a:	ee18 1a10 	vmov	r1, s16
 800a92e:	2201      	movs	r2, #1
 800a930:	4620      	mov	r0, r4
 800a932:	f000 fb29 	bl	800af88 <__lshift>
 800a936:	4631      	mov	r1, r6
 800a938:	ee08 0a10 	vmov	s16, r0
 800a93c:	f000 fb94 	bl	800b068 <__mcmp>
 800a940:	2800      	cmp	r0, #0
 800a942:	dc91      	bgt.n	800a868 <_dtoa_r+0xaa8>
 800a944:	d102      	bne.n	800a94c <_dtoa_r+0xb8c>
 800a946:	f01a 0f01 	tst.w	sl, #1
 800a94a:	d18d      	bne.n	800a868 <_dtoa_r+0xaa8>
 800a94c:	462b      	mov	r3, r5
 800a94e:	461d      	mov	r5, r3
 800a950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a954:	2a30      	cmp	r2, #48	; 0x30
 800a956:	d0fa      	beq.n	800a94e <_dtoa_r+0xb8e>
 800a958:	e6d7      	b.n	800a70a <_dtoa_r+0x94a>
 800a95a:	9a01      	ldr	r2, [sp, #4]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d184      	bne.n	800a86a <_dtoa_r+0xaaa>
 800a960:	9b00      	ldr	r3, [sp, #0]
 800a962:	3301      	adds	r3, #1
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	2331      	movs	r3, #49	; 0x31
 800a968:	7013      	strb	r3, [r2, #0]
 800a96a:	e6ce      	b.n	800a70a <_dtoa_r+0x94a>
 800a96c:	4b09      	ldr	r3, [pc, #36]	; (800a994 <_dtoa_r+0xbd4>)
 800a96e:	f7ff ba95 	b.w	8009e9c <_dtoa_r+0xdc>
 800a972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a974:	2b00      	cmp	r3, #0
 800a976:	f47f aa6e 	bne.w	8009e56 <_dtoa_r+0x96>
 800a97a:	4b07      	ldr	r3, [pc, #28]	; (800a998 <_dtoa_r+0xbd8>)
 800a97c:	f7ff ba8e 	b.w	8009e9c <_dtoa_r+0xdc>
 800a980:	9b02      	ldr	r3, [sp, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	dcae      	bgt.n	800a8e4 <_dtoa_r+0xb24>
 800a986:	9b06      	ldr	r3, [sp, #24]
 800a988:	2b02      	cmp	r3, #2
 800a98a:	f73f aea8 	bgt.w	800a6de <_dtoa_r+0x91e>
 800a98e:	e7a9      	b.n	800a8e4 <_dtoa_r+0xb24>
 800a990:	0800c297 	.word	0x0800c297
 800a994:	0800c1f4 	.word	0x0800c1f4
 800a998:	0800c218 	.word	0x0800c218

0800a99c <__sflush_r>:
 800a99c:	898a      	ldrh	r2, [r1, #12]
 800a99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	0710      	lsls	r0, r2, #28
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	d458      	bmi.n	800aa5c <__sflush_r+0xc0>
 800a9aa:	684b      	ldr	r3, [r1, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dc05      	bgt.n	800a9bc <__sflush_r+0x20>
 800a9b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	dc02      	bgt.n	800a9bc <__sflush_r+0x20>
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9be:	2e00      	cmp	r6, #0
 800a9c0:	d0f9      	beq.n	800a9b6 <__sflush_r+0x1a>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9c8:	682f      	ldr	r7, [r5, #0]
 800a9ca:	602b      	str	r3, [r5, #0]
 800a9cc:	d032      	beq.n	800aa34 <__sflush_r+0x98>
 800a9ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	075a      	lsls	r2, r3, #29
 800a9d4:	d505      	bpl.n	800a9e2 <__sflush_r+0x46>
 800a9d6:	6863      	ldr	r3, [r4, #4]
 800a9d8:	1ac0      	subs	r0, r0, r3
 800a9da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9dc:	b10b      	cbz	r3, 800a9e2 <__sflush_r+0x46>
 800a9de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9e0:	1ac0      	subs	r0, r0, r3
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9e8:	6a21      	ldr	r1, [r4, #32]
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	47b0      	blx	r6
 800a9ee:	1c43      	adds	r3, r0, #1
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	d106      	bne.n	800aa02 <__sflush_r+0x66>
 800a9f4:	6829      	ldr	r1, [r5, #0]
 800a9f6:	291d      	cmp	r1, #29
 800a9f8:	d82c      	bhi.n	800aa54 <__sflush_r+0xb8>
 800a9fa:	4a2a      	ldr	r2, [pc, #168]	; (800aaa4 <__sflush_r+0x108>)
 800a9fc:	40ca      	lsrs	r2, r1
 800a9fe:	07d6      	lsls	r6, r2, #31
 800aa00:	d528      	bpl.n	800aa54 <__sflush_r+0xb8>
 800aa02:	2200      	movs	r2, #0
 800aa04:	6062      	str	r2, [r4, #4]
 800aa06:	04d9      	lsls	r1, r3, #19
 800aa08:	6922      	ldr	r2, [r4, #16]
 800aa0a:	6022      	str	r2, [r4, #0]
 800aa0c:	d504      	bpl.n	800aa18 <__sflush_r+0x7c>
 800aa0e:	1c42      	adds	r2, r0, #1
 800aa10:	d101      	bne.n	800aa16 <__sflush_r+0x7a>
 800aa12:	682b      	ldr	r3, [r5, #0]
 800aa14:	b903      	cbnz	r3, 800aa18 <__sflush_r+0x7c>
 800aa16:	6560      	str	r0, [r4, #84]	; 0x54
 800aa18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa1a:	602f      	str	r7, [r5, #0]
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	d0ca      	beq.n	800a9b6 <__sflush_r+0x1a>
 800aa20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa24:	4299      	cmp	r1, r3
 800aa26:	d002      	beq.n	800aa2e <__sflush_r+0x92>
 800aa28:	4628      	mov	r0, r5
 800aa2a:	f7fe fa99 	bl	8008f60 <_free_r>
 800aa2e:	2000      	movs	r0, #0
 800aa30:	6360      	str	r0, [r4, #52]	; 0x34
 800aa32:	e7c1      	b.n	800a9b8 <__sflush_r+0x1c>
 800aa34:	6a21      	ldr	r1, [r4, #32]
 800aa36:	2301      	movs	r3, #1
 800aa38:	4628      	mov	r0, r5
 800aa3a:	47b0      	blx	r6
 800aa3c:	1c41      	adds	r1, r0, #1
 800aa3e:	d1c7      	bne.n	800a9d0 <__sflush_r+0x34>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0c4      	beq.n	800a9d0 <__sflush_r+0x34>
 800aa46:	2b1d      	cmp	r3, #29
 800aa48:	d001      	beq.n	800aa4e <__sflush_r+0xb2>
 800aa4a:	2b16      	cmp	r3, #22
 800aa4c:	d101      	bne.n	800aa52 <__sflush_r+0xb6>
 800aa4e:	602f      	str	r7, [r5, #0]
 800aa50:	e7b1      	b.n	800a9b6 <__sflush_r+0x1a>
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	e7ad      	b.n	800a9b8 <__sflush_r+0x1c>
 800aa5c:	690f      	ldr	r7, [r1, #16]
 800aa5e:	2f00      	cmp	r7, #0
 800aa60:	d0a9      	beq.n	800a9b6 <__sflush_r+0x1a>
 800aa62:	0793      	lsls	r3, r2, #30
 800aa64:	680e      	ldr	r6, [r1, #0]
 800aa66:	bf08      	it	eq
 800aa68:	694b      	ldreq	r3, [r1, #20]
 800aa6a:	600f      	str	r7, [r1, #0]
 800aa6c:	bf18      	it	ne
 800aa6e:	2300      	movne	r3, #0
 800aa70:	eba6 0807 	sub.w	r8, r6, r7
 800aa74:	608b      	str	r3, [r1, #8]
 800aa76:	f1b8 0f00 	cmp.w	r8, #0
 800aa7a:	dd9c      	ble.n	800a9b6 <__sflush_r+0x1a>
 800aa7c:	6a21      	ldr	r1, [r4, #32]
 800aa7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa80:	4643      	mov	r3, r8
 800aa82:	463a      	mov	r2, r7
 800aa84:	4628      	mov	r0, r5
 800aa86:	47b0      	blx	r6
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	dc06      	bgt.n	800aa9a <__sflush_r+0xfe>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa92:	81a3      	strh	r3, [r4, #12]
 800aa94:	f04f 30ff 	mov.w	r0, #4294967295
 800aa98:	e78e      	b.n	800a9b8 <__sflush_r+0x1c>
 800aa9a:	4407      	add	r7, r0
 800aa9c:	eba8 0800 	sub.w	r8, r8, r0
 800aaa0:	e7e9      	b.n	800aa76 <__sflush_r+0xda>
 800aaa2:	bf00      	nop
 800aaa4:	20400001 	.word	0x20400001

0800aaa8 <_fflush_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	690b      	ldr	r3, [r1, #16]
 800aaac:	4605      	mov	r5, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	b913      	cbnz	r3, 800aab8 <_fflush_r+0x10>
 800aab2:	2500      	movs	r5, #0
 800aab4:	4628      	mov	r0, r5
 800aab6:	bd38      	pop	{r3, r4, r5, pc}
 800aab8:	b118      	cbz	r0, 800aac2 <_fflush_r+0x1a>
 800aaba:	6983      	ldr	r3, [r0, #24]
 800aabc:	b90b      	cbnz	r3, 800aac2 <_fflush_r+0x1a>
 800aabe:	f7fe f96b 	bl	8008d98 <__sinit>
 800aac2:	4b14      	ldr	r3, [pc, #80]	; (800ab14 <_fflush_r+0x6c>)
 800aac4:	429c      	cmp	r4, r3
 800aac6:	d11b      	bne.n	800ab00 <_fflush_r+0x58>
 800aac8:	686c      	ldr	r4, [r5, #4]
 800aaca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d0ef      	beq.n	800aab2 <_fflush_r+0xa>
 800aad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aad4:	07d0      	lsls	r0, r2, #31
 800aad6:	d404      	bmi.n	800aae2 <_fflush_r+0x3a>
 800aad8:	0599      	lsls	r1, r3, #22
 800aada:	d402      	bmi.n	800aae2 <_fflush_r+0x3a>
 800aadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aade:	f7fe fa1e 	bl	8008f1e <__retarget_lock_acquire_recursive>
 800aae2:	4628      	mov	r0, r5
 800aae4:	4621      	mov	r1, r4
 800aae6:	f7ff ff59 	bl	800a99c <__sflush_r>
 800aaea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaec:	07da      	lsls	r2, r3, #31
 800aaee:	4605      	mov	r5, r0
 800aaf0:	d4e0      	bmi.n	800aab4 <_fflush_r+0xc>
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	059b      	lsls	r3, r3, #22
 800aaf6:	d4dd      	bmi.n	800aab4 <_fflush_r+0xc>
 800aaf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aafa:	f7fe fa11 	bl	8008f20 <__retarget_lock_release_recursive>
 800aafe:	e7d9      	b.n	800aab4 <_fflush_r+0xc>
 800ab00:	4b05      	ldr	r3, [pc, #20]	; (800ab18 <_fflush_r+0x70>)
 800ab02:	429c      	cmp	r4, r3
 800ab04:	d101      	bne.n	800ab0a <_fflush_r+0x62>
 800ab06:	68ac      	ldr	r4, [r5, #8]
 800ab08:	e7df      	b.n	800aaca <_fflush_r+0x22>
 800ab0a:	4b04      	ldr	r3, [pc, #16]	; (800ab1c <_fflush_r+0x74>)
 800ab0c:	429c      	cmp	r4, r3
 800ab0e:	bf08      	it	eq
 800ab10:	68ec      	ldreq	r4, [r5, #12]
 800ab12:	e7da      	b.n	800aaca <_fflush_r+0x22>
 800ab14:	0800c1a0 	.word	0x0800c1a0
 800ab18:	0800c1c0 	.word	0x0800c1c0
 800ab1c:	0800c180 	.word	0x0800c180

0800ab20 <_localeconv_r>:
 800ab20:	4800      	ldr	r0, [pc, #0]	; (800ab24 <_localeconv_r+0x4>)
 800ab22:	4770      	bx	lr
 800ab24:	200001b4 	.word	0x200001b4

0800ab28 <_lseek_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4d07      	ldr	r5, [pc, #28]	; (800ab48 <_lseek_r+0x20>)
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	4608      	mov	r0, r1
 800ab30:	4611      	mov	r1, r2
 800ab32:	2200      	movs	r2, #0
 800ab34:	602a      	str	r2, [r5, #0]
 800ab36:	461a      	mov	r2, r3
 800ab38:	f7f6 ff76 	bl	8001a28 <_lseek>
 800ab3c:	1c43      	adds	r3, r0, #1
 800ab3e:	d102      	bne.n	800ab46 <_lseek_r+0x1e>
 800ab40:	682b      	ldr	r3, [r5, #0]
 800ab42:	b103      	cbz	r3, 800ab46 <_lseek_r+0x1e>
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	bd38      	pop	{r3, r4, r5, pc}
 800ab48:	200045b0 	.word	0x200045b0

0800ab4c <__malloc_lock>:
 800ab4c:	4801      	ldr	r0, [pc, #4]	; (800ab54 <__malloc_lock+0x8>)
 800ab4e:	f7fe b9e6 	b.w	8008f1e <__retarget_lock_acquire_recursive>
 800ab52:	bf00      	nop
 800ab54:	200045a4 	.word	0x200045a4

0800ab58 <__malloc_unlock>:
 800ab58:	4801      	ldr	r0, [pc, #4]	; (800ab60 <__malloc_unlock+0x8>)
 800ab5a:	f7fe b9e1 	b.w	8008f20 <__retarget_lock_release_recursive>
 800ab5e:	bf00      	nop
 800ab60:	200045a4 	.word	0x200045a4

0800ab64 <_Balloc>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab68:	4604      	mov	r4, r0
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	b976      	cbnz	r6, 800ab8c <_Balloc+0x28>
 800ab6e:	2010      	movs	r0, #16
 800ab70:	f7fe f9d8 	bl	8008f24 <malloc>
 800ab74:	4602      	mov	r2, r0
 800ab76:	6260      	str	r0, [r4, #36]	; 0x24
 800ab78:	b920      	cbnz	r0, 800ab84 <_Balloc+0x20>
 800ab7a:	4b18      	ldr	r3, [pc, #96]	; (800abdc <_Balloc+0x78>)
 800ab7c:	4818      	ldr	r0, [pc, #96]	; (800abe0 <_Balloc+0x7c>)
 800ab7e:	2166      	movs	r1, #102	; 0x66
 800ab80:	f000 fcf8 	bl	800b574 <__assert_func>
 800ab84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab88:	6006      	str	r6, [r0, #0]
 800ab8a:	60c6      	str	r6, [r0, #12]
 800ab8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab8e:	68f3      	ldr	r3, [r6, #12]
 800ab90:	b183      	cbz	r3, 800abb4 <_Balloc+0x50>
 800ab92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab9a:	b9b8      	cbnz	r0, 800abcc <_Balloc+0x68>
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	fa01 f605 	lsl.w	r6, r1, r5
 800aba2:	1d72      	adds	r2, r6, #5
 800aba4:	0092      	lsls	r2, r2, #2
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 fb60 	bl	800b26c <_calloc_r>
 800abac:	b160      	cbz	r0, 800abc8 <_Balloc+0x64>
 800abae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abb2:	e00e      	b.n	800abd2 <_Balloc+0x6e>
 800abb4:	2221      	movs	r2, #33	; 0x21
 800abb6:	2104      	movs	r1, #4
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 fb57 	bl	800b26c <_calloc_r>
 800abbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abc0:	60f0      	str	r0, [r6, #12]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e4      	bne.n	800ab92 <_Balloc+0x2e>
 800abc8:	2000      	movs	r0, #0
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	6802      	ldr	r2, [r0, #0]
 800abce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abd2:	2300      	movs	r3, #0
 800abd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abd8:	e7f7      	b.n	800abca <_Balloc+0x66>
 800abda:	bf00      	nop
 800abdc:	0800c225 	.word	0x0800c225
 800abe0:	0800c2a8 	.word	0x0800c2a8

0800abe4 <_Bfree>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abe8:	4605      	mov	r5, r0
 800abea:	460c      	mov	r4, r1
 800abec:	b976      	cbnz	r6, 800ac0c <_Bfree+0x28>
 800abee:	2010      	movs	r0, #16
 800abf0:	f7fe f998 	bl	8008f24 <malloc>
 800abf4:	4602      	mov	r2, r0
 800abf6:	6268      	str	r0, [r5, #36]	; 0x24
 800abf8:	b920      	cbnz	r0, 800ac04 <_Bfree+0x20>
 800abfa:	4b09      	ldr	r3, [pc, #36]	; (800ac20 <_Bfree+0x3c>)
 800abfc:	4809      	ldr	r0, [pc, #36]	; (800ac24 <_Bfree+0x40>)
 800abfe:	218a      	movs	r1, #138	; 0x8a
 800ac00:	f000 fcb8 	bl	800b574 <__assert_func>
 800ac04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac08:	6006      	str	r6, [r0, #0]
 800ac0a:	60c6      	str	r6, [r0, #12]
 800ac0c:	b13c      	cbz	r4, 800ac1e <_Bfree+0x3a>
 800ac0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac10:	6862      	ldr	r2, [r4, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac18:	6021      	str	r1, [r4, #0]
 800ac1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	0800c225 	.word	0x0800c225
 800ac24:	0800c2a8 	.word	0x0800c2a8

0800ac28 <__multadd>:
 800ac28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2c:	690d      	ldr	r5, [r1, #16]
 800ac2e:	4607      	mov	r7, r0
 800ac30:	460c      	mov	r4, r1
 800ac32:	461e      	mov	r6, r3
 800ac34:	f101 0c14 	add.w	ip, r1, #20
 800ac38:	2000      	movs	r0, #0
 800ac3a:	f8dc 3000 	ldr.w	r3, [ip]
 800ac3e:	b299      	uxth	r1, r3
 800ac40:	fb02 6101 	mla	r1, r2, r1, r6
 800ac44:	0c1e      	lsrs	r6, r3, #16
 800ac46:	0c0b      	lsrs	r3, r1, #16
 800ac48:	fb02 3306 	mla	r3, r2, r6, r3
 800ac4c:	b289      	uxth	r1, r1
 800ac4e:	3001      	adds	r0, #1
 800ac50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac54:	4285      	cmp	r5, r0
 800ac56:	f84c 1b04 	str.w	r1, [ip], #4
 800ac5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac5e:	dcec      	bgt.n	800ac3a <__multadd+0x12>
 800ac60:	b30e      	cbz	r6, 800aca6 <__multadd+0x7e>
 800ac62:	68a3      	ldr	r3, [r4, #8]
 800ac64:	42ab      	cmp	r3, r5
 800ac66:	dc19      	bgt.n	800ac9c <__multadd+0x74>
 800ac68:	6861      	ldr	r1, [r4, #4]
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	3101      	adds	r1, #1
 800ac6e:	f7ff ff79 	bl	800ab64 <_Balloc>
 800ac72:	4680      	mov	r8, r0
 800ac74:	b928      	cbnz	r0, 800ac82 <__multadd+0x5a>
 800ac76:	4602      	mov	r2, r0
 800ac78:	4b0c      	ldr	r3, [pc, #48]	; (800acac <__multadd+0x84>)
 800ac7a:	480d      	ldr	r0, [pc, #52]	; (800acb0 <__multadd+0x88>)
 800ac7c:	21b5      	movs	r1, #181	; 0xb5
 800ac7e:	f000 fc79 	bl	800b574 <__assert_func>
 800ac82:	6922      	ldr	r2, [r4, #16]
 800ac84:	3202      	adds	r2, #2
 800ac86:	f104 010c 	add.w	r1, r4, #12
 800ac8a:	0092      	lsls	r2, r2, #2
 800ac8c:	300c      	adds	r0, #12
 800ac8e:	f7fe f951 	bl	8008f34 <memcpy>
 800ac92:	4621      	mov	r1, r4
 800ac94:	4638      	mov	r0, r7
 800ac96:	f7ff ffa5 	bl	800abe4 <_Bfree>
 800ac9a:	4644      	mov	r4, r8
 800ac9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aca0:	3501      	adds	r5, #1
 800aca2:	615e      	str	r6, [r3, #20]
 800aca4:	6125      	str	r5, [r4, #16]
 800aca6:	4620      	mov	r0, r4
 800aca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acac:	0800c297 	.word	0x0800c297
 800acb0:	0800c2a8 	.word	0x0800c2a8

0800acb4 <__hi0bits>:
 800acb4:	0c03      	lsrs	r3, r0, #16
 800acb6:	041b      	lsls	r3, r3, #16
 800acb8:	b9d3      	cbnz	r3, 800acf0 <__hi0bits+0x3c>
 800acba:	0400      	lsls	r0, r0, #16
 800acbc:	2310      	movs	r3, #16
 800acbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acc2:	bf04      	itt	eq
 800acc4:	0200      	lsleq	r0, r0, #8
 800acc6:	3308      	addeq	r3, #8
 800acc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800accc:	bf04      	itt	eq
 800acce:	0100      	lsleq	r0, r0, #4
 800acd0:	3304      	addeq	r3, #4
 800acd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acd6:	bf04      	itt	eq
 800acd8:	0080      	lsleq	r0, r0, #2
 800acda:	3302      	addeq	r3, #2
 800acdc:	2800      	cmp	r0, #0
 800acde:	db05      	blt.n	800acec <__hi0bits+0x38>
 800ace0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ace4:	f103 0301 	add.w	r3, r3, #1
 800ace8:	bf08      	it	eq
 800acea:	2320      	moveq	r3, #32
 800acec:	4618      	mov	r0, r3
 800acee:	4770      	bx	lr
 800acf0:	2300      	movs	r3, #0
 800acf2:	e7e4      	b.n	800acbe <__hi0bits+0xa>

0800acf4 <__lo0bits>:
 800acf4:	6803      	ldr	r3, [r0, #0]
 800acf6:	f013 0207 	ands.w	r2, r3, #7
 800acfa:	4601      	mov	r1, r0
 800acfc:	d00b      	beq.n	800ad16 <__lo0bits+0x22>
 800acfe:	07da      	lsls	r2, r3, #31
 800ad00:	d423      	bmi.n	800ad4a <__lo0bits+0x56>
 800ad02:	0798      	lsls	r0, r3, #30
 800ad04:	bf49      	itett	mi
 800ad06:	085b      	lsrmi	r3, r3, #1
 800ad08:	089b      	lsrpl	r3, r3, #2
 800ad0a:	2001      	movmi	r0, #1
 800ad0c:	600b      	strmi	r3, [r1, #0]
 800ad0e:	bf5c      	itt	pl
 800ad10:	600b      	strpl	r3, [r1, #0]
 800ad12:	2002      	movpl	r0, #2
 800ad14:	4770      	bx	lr
 800ad16:	b298      	uxth	r0, r3
 800ad18:	b9a8      	cbnz	r0, 800ad46 <__lo0bits+0x52>
 800ad1a:	0c1b      	lsrs	r3, r3, #16
 800ad1c:	2010      	movs	r0, #16
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	b90a      	cbnz	r2, 800ad26 <__lo0bits+0x32>
 800ad22:	3008      	adds	r0, #8
 800ad24:	0a1b      	lsrs	r3, r3, #8
 800ad26:	071a      	lsls	r2, r3, #28
 800ad28:	bf04      	itt	eq
 800ad2a:	091b      	lsreq	r3, r3, #4
 800ad2c:	3004      	addeq	r0, #4
 800ad2e:	079a      	lsls	r2, r3, #30
 800ad30:	bf04      	itt	eq
 800ad32:	089b      	lsreq	r3, r3, #2
 800ad34:	3002      	addeq	r0, #2
 800ad36:	07da      	lsls	r2, r3, #31
 800ad38:	d403      	bmi.n	800ad42 <__lo0bits+0x4e>
 800ad3a:	085b      	lsrs	r3, r3, #1
 800ad3c:	f100 0001 	add.w	r0, r0, #1
 800ad40:	d005      	beq.n	800ad4e <__lo0bits+0x5a>
 800ad42:	600b      	str	r3, [r1, #0]
 800ad44:	4770      	bx	lr
 800ad46:	4610      	mov	r0, r2
 800ad48:	e7e9      	b.n	800ad1e <__lo0bits+0x2a>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	4770      	bx	lr
 800ad4e:	2020      	movs	r0, #32
 800ad50:	4770      	bx	lr
	...

0800ad54 <__i2b>:
 800ad54:	b510      	push	{r4, lr}
 800ad56:	460c      	mov	r4, r1
 800ad58:	2101      	movs	r1, #1
 800ad5a:	f7ff ff03 	bl	800ab64 <_Balloc>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	b928      	cbnz	r0, 800ad6e <__i2b+0x1a>
 800ad62:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <__i2b+0x24>)
 800ad64:	4805      	ldr	r0, [pc, #20]	; (800ad7c <__i2b+0x28>)
 800ad66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad6a:	f000 fc03 	bl	800b574 <__assert_func>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	6144      	str	r4, [r0, #20]
 800ad72:	6103      	str	r3, [r0, #16]
 800ad74:	bd10      	pop	{r4, pc}
 800ad76:	bf00      	nop
 800ad78:	0800c297 	.word	0x0800c297
 800ad7c:	0800c2a8 	.word	0x0800c2a8

0800ad80 <__multiply>:
 800ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad84:	4691      	mov	r9, r2
 800ad86:	690a      	ldr	r2, [r1, #16]
 800ad88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	bfb8      	it	lt
 800ad90:	460b      	movlt	r3, r1
 800ad92:	460c      	mov	r4, r1
 800ad94:	bfbc      	itt	lt
 800ad96:	464c      	movlt	r4, r9
 800ad98:	4699      	movlt	r9, r3
 800ad9a:	6927      	ldr	r7, [r4, #16]
 800ad9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ada0:	68a3      	ldr	r3, [r4, #8]
 800ada2:	6861      	ldr	r1, [r4, #4]
 800ada4:	eb07 060a 	add.w	r6, r7, sl
 800ada8:	42b3      	cmp	r3, r6
 800adaa:	b085      	sub	sp, #20
 800adac:	bfb8      	it	lt
 800adae:	3101      	addlt	r1, #1
 800adb0:	f7ff fed8 	bl	800ab64 <_Balloc>
 800adb4:	b930      	cbnz	r0, 800adc4 <__multiply+0x44>
 800adb6:	4602      	mov	r2, r0
 800adb8:	4b44      	ldr	r3, [pc, #272]	; (800aecc <__multiply+0x14c>)
 800adba:	4845      	ldr	r0, [pc, #276]	; (800aed0 <__multiply+0x150>)
 800adbc:	f240 115d 	movw	r1, #349	; 0x15d
 800adc0:	f000 fbd8 	bl	800b574 <__assert_func>
 800adc4:	f100 0514 	add.w	r5, r0, #20
 800adc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adcc:	462b      	mov	r3, r5
 800adce:	2200      	movs	r2, #0
 800add0:	4543      	cmp	r3, r8
 800add2:	d321      	bcc.n	800ae18 <__multiply+0x98>
 800add4:	f104 0314 	add.w	r3, r4, #20
 800add8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800addc:	f109 0314 	add.w	r3, r9, #20
 800ade0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ade4:	9202      	str	r2, [sp, #8]
 800ade6:	1b3a      	subs	r2, r7, r4
 800ade8:	3a15      	subs	r2, #21
 800adea:	f022 0203 	bic.w	r2, r2, #3
 800adee:	3204      	adds	r2, #4
 800adf0:	f104 0115 	add.w	r1, r4, #21
 800adf4:	428f      	cmp	r7, r1
 800adf6:	bf38      	it	cc
 800adf8:	2204      	movcc	r2, #4
 800adfa:	9201      	str	r2, [sp, #4]
 800adfc:	9a02      	ldr	r2, [sp, #8]
 800adfe:	9303      	str	r3, [sp, #12]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d80c      	bhi.n	800ae1e <__multiply+0x9e>
 800ae04:	2e00      	cmp	r6, #0
 800ae06:	dd03      	ble.n	800ae10 <__multiply+0x90>
 800ae08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d05a      	beq.n	800aec6 <__multiply+0x146>
 800ae10:	6106      	str	r6, [r0, #16]
 800ae12:	b005      	add	sp, #20
 800ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae18:	f843 2b04 	str.w	r2, [r3], #4
 800ae1c:	e7d8      	b.n	800add0 <__multiply+0x50>
 800ae1e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae22:	f1ba 0f00 	cmp.w	sl, #0
 800ae26:	d024      	beq.n	800ae72 <__multiply+0xf2>
 800ae28:	f104 0e14 	add.w	lr, r4, #20
 800ae2c:	46a9      	mov	r9, r5
 800ae2e:	f04f 0c00 	mov.w	ip, #0
 800ae32:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae36:	f8d9 1000 	ldr.w	r1, [r9]
 800ae3a:	fa1f fb82 	uxth.w	fp, r2
 800ae3e:	b289      	uxth	r1, r1
 800ae40:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae48:	f8d9 2000 	ldr.w	r2, [r9]
 800ae4c:	4461      	add	r1, ip
 800ae4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae52:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae5a:	b289      	uxth	r1, r1
 800ae5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae60:	4577      	cmp	r7, lr
 800ae62:	f849 1b04 	str.w	r1, [r9], #4
 800ae66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae6a:	d8e2      	bhi.n	800ae32 <__multiply+0xb2>
 800ae6c:	9a01      	ldr	r2, [sp, #4]
 800ae6e:	f845 c002 	str.w	ip, [r5, r2]
 800ae72:	9a03      	ldr	r2, [sp, #12]
 800ae74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	f1b9 0f00 	cmp.w	r9, #0
 800ae7e:	d020      	beq.n	800aec2 <__multiply+0x142>
 800ae80:	6829      	ldr	r1, [r5, #0]
 800ae82:	f104 0c14 	add.w	ip, r4, #20
 800ae86:	46ae      	mov	lr, r5
 800ae88:	f04f 0a00 	mov.w	sl, #0
 800ae8c:	f8bc b000 	ldrh.w	fp, [ip]
 800ae90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae94:	fb09 220b 	mla	r2, r9, fp, r2
 800ae98:	4492      	add	sl, r2
 800ae9a:	b289      	uxth	r1, r1
 800ae9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aea0:	f84e 1b04 	str.w	r1, [lr], #4
 800aea4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aea8:	f8be 1000 	ldrh.w	r1, [lr]
 800aeac:	0c12      	lsrs	r2, r2, #16
 800aeae:	fb09 1102 	mla	r1, r9, r2, r1
 800aeb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aeb6:	4567      	cmp	r7, ip
 800aeb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aebc:	d8e6      	bhi.n	800ae8c <__multiply+0x10c>
 800aebe:	9a01      	ldr	r2, [sp, #4]
 800aec0:	50a9      	str	r1, [r5, r2]
 800aec2:	3504      	adds	r5, #4
 800aec4:	e79a      	b.n	800adfc <__multiply+0x7c>
 800aec6:	3e01      	subs	r6, #1
 800aec8:	e79c      	b.n	800ae04 <__multiply+0x84>
 800aeca:	bf00      	nop
 800aecc:	0800c297 	.word	0x0800c297
 800aed0:	0800c2a8 	.word	0x0800c2a8

0800aed4 <__pow5mult>:
 800aed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed8:	4615      	mov	r5, r2
 800aeda:	f012 0203 	ands.w	r2, r2, #3
 800aede:	4606      	mov	r6, r0
 800aee0:	460f      	mov	r7, r1
 800aee2:	d007      	beq.n	800aef4 <__pow5mult+0x20>
 800aee4:	4c25      	ldr	r4, [pc, #148]	; (800af7c <__pow5mult+0xa8>)
 800aee6:	3a01      	subs	r2, #1
 800aee8:	2300      	movs	r3, #0
 800aeea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeee:	f7ff fe9b 	bl	800ac28 <__multadd>
 800aef2:	4607      	mov	r7, r0
 800aef4:	10ad      	asrs	r5, r5, #2
 800aef6:	d03d      	beq.n	800af74 <__pow5mult+0xa0>
 800aef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aefa:	b97c      	cbnz	r4, 800af1c <__pow5mult+0x48>
 800aefc:	2010      	movs	r0, #16
 800aefe:	f7fe f811 	bl	8008f24 <malloc>
 800af02:	4602      	mov	r2, r0
 800af04:	6270      	str	r0, [r6, #36]	; 0x24
 800af06:	b928      	cbnz	r0, 800af14 <__pow5mult+0x40>
 800af08:	4b1d      	ldr	r3, [pc, #116]	; (800af80 <__pow5mult+0xac>)
 800af0a:	481e      	ldr	r0, [pc, #120]	; (800af84 <__pow5mult+0xb0>)
 800af0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af10:	f000 fb30 	bl	800b574 <__assert_func>
 800af14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af18:	6004      	str	r4, [r0, #0]
 800af1a:	60c4      	str	r4, [r0, #12]
 800af1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af24:	b94c      	cbnz	r4, 800af3a <__pow5mult+0x66>
 800af26:	f240 2171 	movw	r1, #625	; 0x271
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7ff ff12 	bl	800ad54 <__i2b>
 800af30:	2300      	movs	r3, #0
 800af32:	f8c8 0008 	str.w	r0, [r8, #8]
 800af36:	4604      	mov	r4, r0
 800af38:	6003      	str	r3, [r0, #0]
 800af3a:	f04f 0900 	mov.w	r9, #0
 800af3e:	07eb      	lsls	r3, r5, #31
 800af40:	d50a      	bpl.n	800af58 <__pow5mult+0x84>
 800af42:	4639      	mov	r1, r7
 800af44:	4622      	mov	r2, r4
 800af46:	4630      	mov	r0, r6
 800af48:	f7ff ff1a 	bl	800ad80 <__multiply>
 800af4c:	4639      	mov	r1, r7
 800af4e:	4680      	mov	r8, r0
 800af50:	4630      	mov	r0, r6
 800af52:	f7ff fe47 	bl	800abe4 <_Bfree>
 800af56:	4647      	mov	r7, r8
 800af58:	106d      	asrs	r5, r5, #1
 800af5a:	d00b      	beq.n	800af74 <__pow5mult+0xa0>
 800af5c:	6820      	ldr	r0, [r4, #0]
 800af5e:	b938      	cbnz	r0, 800af70 <__pow5mult+0x9c>
 800af60:	4622      	mov	r2, r4
 800af62:	4621      	mov	r1, r4
 800af64:	4630      	mov	r0, r6
 800af66:	f7ff ff0b 	bl	800ad80 <__multiply>
 800af6a:	6020      	str	r0, [r4, #0]
 800af6c:	f8c0 9000 	str.w	r9, [r0]
 800af70:	4604      	mov	r4, r0
 800af72:	e7e4      	b.n	800af3e <__pow5mult+0x6a>
 800af74:	4638      	mov	r0, r7
 800af76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7a:	bf00      	nop
 800af7c:	0800c3f8 	.word	0x0800c3f8
 800af80:	0800c225 	.word	0x0800c225
 800af84:	0800c2a8 	.word	0x0800c2a8

0800af88 <__lshift>:
 800af88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8c:	460c      	mov	r4, r1
 800af8e:	6849      	ldr	r1, [r1, #4]
 800af90:	6923      	ldr	r3, [r4, #16]
 800af92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	4607      	mov	r7, r0
 800af9a:	4691      	mov	r9, r2
 800af9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afa0:	f108 0601 	add.w	r6, r8, #1
 800afa4:	42b3      	cmp	r3, r6
 800afa6:	db0b      	blt.n	800afc0 <__lshift+0x38>
 800afa8:	4638      	mov	r0, r7
 800afaa:	f7ff fddb 	bl	800ab64 <_Balloc>
 800afae:	4605      	mov	r5, r0
 800afb0:	b948      	cbnz	r0, 800afc6 <__lshift+0x3e>
 800afb2:	4602      	mov	r2, r0
 800afb4:	4b2a      	ldr	r3, [pc, #168]	; (800b060 <__lshift+0xd8>)
 800afb6:	482b      	ldr	r0, [pc, #172]	; (800b064 <__lshift+0xdc>)
 800afb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afbc:	f000 fada 	bl	800b574 <__assert_func>
 800afc0:	3101      	adds	r1, #1
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	e7ee      	b.n	800afa4 <__lshift+0x1c>
 800afc6:	2300      	movs	r3, #0
 800afc8:	f100 0114 	add.w	r1, r0, #20
 800afcc:	f100 0210 	add.w	r2, r0, #16
 800afd0:	4618      	mov	r0, r3
 800afd2:	4553      	cmp	r3, sl
 800afd4:	db37      	blt.n	800b046 <__lshift+0xbe>
 800afd6:	6920      	ldr	r0, [r4, #16]
 800afd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afdc:	f104 0314 	add.w	r3, r4, #20
 800afe0:	f019 091f 	ands.w	r9, r9, #31
 800afe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800afec:	d02f      	beq.n	800b04e <__lshift+0xc6>
 800afee:	f1c9 0e20 	rsb	lr, r9, #32
 800aff2:	468a      	mov	sl, r1
 800aff4:	f04f 0c00 	mov.w	ip, #0
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	fa02 f209 	lsl.w	r2, r2, r9
 800affe:	ea42 020c 	orr.w	r2, r2, ip
 800b002:	f84a 2b04 	str.w	r2, [sl], #4
 800b006:	f853 2b04 	ldr.w	r2, [r3], #4
 800b00a:	4298      	cmp	r0, r3
 800b00c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b010:	d8f2      	bhi.n	800aff8 <__lshift+0x70>
 800b012:	1b03      	subs	r3, r0, r4
 800b014:	3b15      	subs	r3, #21
 800b016:	f023 0303 	bic.w	r3, r3, #3
 800b01a:	3304      	adds	r3, #4
 800b01c:	f104 0215 	add.w	r2, r4, #21
 800b020:	4290      	cmp	r0, r2
 800b022:	bf38      	it	cc
 800b024:	2304      	movcc	r3, #4
 800b026:	f841 c003 	str.w	ip, [r1, r3]
 800b02a:	f1bc 0f00 	cmp.w	ip, #0
 800b02e:	d001      	beq.n	800b034 <__lshift+0xac>
 800b030:	f108 0602 	add.w	r6, r8, #2
 800b034:	3e01      	subs	r6, #1
 800b036:	4638      	mov	r0, r7
 800b038:	612e      	str	r6, [r5, #16]
 800b03a:	4621      	mov	r1, r4
 800b03c:	f7ff fdd2 	bl	800abe4 <_Bfree>
 800b040:	4628      	mov	r0, r5
 800b042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b046:	f842 0f04 	str.w	r0, [r2, #4]!
 800b04a:	3301      	adds	r3, #1
 800b04c:	e7c1      	b.n	800afd2 <__lshift+0x4a>
 800b04e:	3904      	subs	r1, #4
 800b050:	f853 2b04 	ldr.w	r2, [r3], #4
 800b054:	f841 2f04 	str.w	r2, [r1, #4]!
 800b058:	4298      	cmp	r0, r3
 800b05a:	d8f9      	bhi.n	800b050 <__lshift+0xc8>
 800b05c:	e7ea      	b.n	800b034 <__lshift+0xac>
 800b05e:	bf00      	nop
 800b060:	0800c297 	.word	0x0800c297
 800b064:	0800c2a8 	.word	0x0800c2a8

0800b068 <__mcmp>:
 800b068:	b530      	push	{r4, r5, lr}
 800b06a:	6902      	ldr	r2, [r0, #16]
 800b06c:	690c      	ldr	r4, [r1, #16]
 800b06e:	1b12      	subs	r2, r2, r4
 800b070:	d10e      	bne.n	800b090 <__mcmp+0x28>
 800b072:	f100 0314 	add.w	r3, r0, #20
 800b076:	3114      	adds	r1, #20
 800b078:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b07c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b080:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b084:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b088:	42a5      	cmp	r5, r4
 800b08a:	d003      	beq.n	800b094 <__mcmp+0x2c>
 800b08c:	d305      	bcc.n	800b09a <__mcmp+0x32>
 800b08e:	2201      	movs	r2, #1
 800b090:	4610      	mov	r0, r2
 800b092:	bd30      	pop	{r4, r5, pc}
 800b094:	4283      	cmp	r3, r0
 800b096:	d3f3      	bcc.n	800b080 <__mcmp+0x18>
 800b098:	e7fa      	b.n	800b090 <__mcmp+0x28>
 800b09a:	f04f 32ff 	mov.w	r2, #4294967295
 800b09e:	e7f7      	b.n	800b090 <__mcmp+0x28>

0800b0a0 <__mdiff>:
 800b0a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	4690      	mov	r8, r2
 800b0ae:	f7ff ffdb 	bl	800b068 <__mcmp>
 800b0b2:	1e05      	subs	r5, r0, #0
 800b0b4:	d110      	bne.n	800b0d8 <__mdiff+0x38>
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff fd53 	bl	800ab64 <_Balloc>
 800b0be:	b930      	cbnz	r0, 800b0ce <__mdiff+0x2e>
 800b0c0:	4b3a      	ldr	r3, [pc, #232]	; (800b1ac <__mdiff+0x10c>)
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	f240 2132 	movw	r1, #562	; 0x232
 800b0c8:	4839      	ldr	r0, [pc, #228]	; (800b1b0 <__mdiff+0x110>)
 800b0ca:	f000 fa53 	bl	800b574 <__assert_func>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d8:	bfa4      	itt	ge
 800b0da:	4643      	movge	r3, r8
 800b0dc:	46a0      	movge	r8, r4
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b0e4:	bfa6      	itte	ge
 800b0e6:	461c      	movge	r4, r3
 800b0e8:	2500      	movge	r5, #0
 800b0ea:	2501      	movlt	r5, #1
 800b0ec:	f7ff fd3a 	bl	800ab64 <_Balloc>
 800b0f0:	b920      	cbnz	r0, 800b0fc <__mdiff+0x5c>
 800b0f2:	4b2e      	ldr	r3, [pc, #184]	; (800b1ac <__mdiff+0x10c>)
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b0fa:	e7e5      	b.n	800b0c8 <__mdiff+0x28>
 800b0fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b100:	6926      	ldr	r6, [r4, #16]
 800b102:	60c5      	str	r5, [r0, #12]
 800b104:	f104 0914 	add.w	r9, r4, #20
 800b108:	f108 0514 	add.w	r5, r8, #20
 800b10c:	f100 0e14 	add.w	lr, r0, #20
 800b110:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b114:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b118:	f108 0210 	add.w	r2, r8, #16
 800b11c:	46f2      	mov	sl, lr
 800b11e:	2100      	movs	r1, #0
 800b120:	f859 3b04 	ldr.w	r3, [r9], #4
 800b124:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b128:	fa1f f883 	uxth.w	r8, r3
 800b12c:	fa11 f18b 	uxtah	r1, r1, fp
 800b130:	0c1b      	lsrs	r3, r3, #16
 800b132:	eba1 0808 	sub.w	r8, r1, r8
 800b136:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b13a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b13e:	fa1f f888 	uxth.w	r8, r8
 800b142:	1419      	asrs	r1, r3, #16
 800b144:	454e      	cmp	r6, r9
 800b146:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b14a:	f84a 3b04 	str.w	r3, [sl], #4
 800b14e:	d8e7      	bhi.n	800b120 <__mdiff+0x80>
 800b150:	1b33      	subs	r3, r6, r4
 800b152:	3b15      	subs	r3, #21
 800b154:	f023 0303 	bic.w	r3, r3, #3
 800b158:	3304      	adds	r3, #4
 800b15a:	3415      	adds	r4, #21
 800b15c:	42a6      	cmp	r6, r4
 800b15e:	bf38      	it	cc
 800b160:	2304      	movcc	r3, #4
 800b162:	441d      	add	r5, r3
 800b164:	4473      	add	r3, lr
 800b166:	469e      	mov	lr, r3
 800b168:	462e      	mov	r6, r5
 800b16a:	4566      	cmp	r6, ip
 800b16c:	d30e      	bcc.n	800b18c <__mdiff+0xec>
 800b16e:	f10c 0203 	add.w	r2, ip, #3
 800b172:	1b52      	subs	r2, r2, r5
 800b174:	f022 0203 	bic.w	r2, r2, #3
 800b178:	3d03      	subs	r5, #3
 800b17a:	45ac      	cmp	ip, r5
 800b17c:	bf38      	it	cc
 800b17e:	2200      	movcc	r2, #0
 800b180:	441a      	add	r2, r3
 800b182:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b186:	b17b      	cbz	r3, 800b1a8 <__mdiff+0x108>
 800b188:	6107      	str	r7, [r0, #16]
 800b18a:	e7a3      	b.n	800b0d4 <__mdiff+0x34>
 800b18c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b190:	fa11 f288 	uxtah	r2, r1, r8
 800b194:	1414      	asrs	r4, r2, #16
 800b196:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b19a:	b292      	uxth	r2, r2
 800b19c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1a0:	f84e 2b04 	str.w	r2, [lr], #4
 800b1a4:	1421      	asrs	r1, r4, #16
 800b1a6:	e7e0      	b.n	800b16a <__mdiff+0xca>
 800b1a8:	3f01      	subs	r7, #1
 800b1aa:	e7ea      	b.n	800b182 <__mdiff+0xe2>
 800b1ac:	0800c297 	.word	0x0800c297
 800b1b0:	0800c2a8 	.word	0x0800c2a8

0800b1b4 <__d2b>:
 800b1b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1b8:	4689      	mov	r9, r1
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	ec57 6b10 	vmov	r6, r7, d0
 800b1c0:	4690      	mov	r8, r2
 800b1c2:	f7ff fccf 	bl	800ab64 <_Balloc>
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	b930      	cbnz	r0, 800b1d8 <__d2b+0x24>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	4b25      	ldr	r3, [pc, #148]	; (800b264 <__d2b+0xb0>)
 800b1ce:	4826      	ldr	r0, [pc, #152]	; (800b268 <__d2b+0xb4>)
 800b1d0:	f240 310a 	movw	r1, #778	; 0x30a
 800b1d4:	f000 f9ce 	bl	800b574 <__assert_func>
 800b1d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b1dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1e0:	bb35      	cbnz	r5, 800b230 <__d2b+0x7c>
 800b1e2:	2e00      	cmp	r6, #0
 800b1e4:	9301      	str	r3, [sp, #4]
 800b1e6:	d028      	beq.n	800b23a <__d2b+0x86>
 800b1e8:	4668      	mov	r0, sp
 800b1ea:	9600      	str	r6, [sp, #0]
 800b1ec:	f7ff fd82 	bl	800acf4 <__lo0bits>
 800b1f0:	9900      	ldr	r1, [sp, #0]
 800b1f2:	b300      	cbz	r0, 800b236 <__d2b+0x82>
 800b1f4:	9a01      	ldr	r2, [sp, #4]
 800b1f6:	f1c0 0320 	rsb	r3, r0, #32
 800b1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fe:	430b      	orrs	r3, r1
 800b200:	40c2      	lsrs	r2, r0
 800b202:	6163      	str	r3, [r4, #20]
 800b204:	9201      	str	r2, [sp, #4]
 800b206:	9b01      	ldr	r3, [sp, #4]
 800b208:	61a3      	str	r3, [r4, #24]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	bf14      	ite	ne
 800b20e:	2202      	movne	r2, #2
 800b210:	2201      	moveq	r2, #1
 800b212:	6122      	str	r2, [r4, #16]
 800b214:	b1d5      	cbz	r5, 800b24c <__d2b+0x98>
 800b216:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b21a:	4405      	add	r5, r0
 800b21c:	f8c9 5000 	str.w	r5, [r9]
 800b220:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b224:	f8c8 0000 	str.w	r0, [r8]
 800b228:	4620      	mov	r0, r4
 800b22a:	b003      	add	sp, #12
 800b22c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b234:	e7d5      	b.n	800b1e2 <__d2b+0x2e>
 800b236:	6161      	str	r1, [r4, #20]
 800b238:	e7e5      	b.n	800b206 <__d2b+0x52>
 800b23a:	a801      	add	r0, sp, #4
 800b23c:	f7ff fd5a 	bl	800acf4 <__lo0bits>
 800b240:	9b01      	ldr	r3, [sp, #4]
 800b242:	6163      	str	r3, [r4, #20]
 800b244:	2201      	movs	r2, #1
 800b246:	6122      	str	r2, [r4, #16]
 800b248:	3020      	adds	r0, #32
 800b24a:	e7e3      	b.n	800b214 <__d2b+0x60>
 800b24c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b250:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b254:	f8c9 0000 	str.w	r0, [r9]
 800b258:	6918      	ldr	r0, [r3, #16]
 800b25a:	f7ff fd2b 	bl	800acb4 <__hi0bits>
 800b25e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b262:	e7df      	b.n	800b224 <__d2b+0x70>
 800b264:	0800c297 	.word	0x0800c297
 800b268:	0800c2a8 	.word	0x0800c2a8

0800b26c <_calloc_r>:
 800b26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b26e:	fba1 2402 	umull	r2, r4, r1, r2
 800b272:	b94c      	cbnz	r4, 800b288 <_calloc_r+0x1c>
 800b274:	4611      	mov	r1, r2
 800b276:	9201      	str	r2, [sp, #4]
 800b278:	f7fd fede 	bl	8009038 <_malloc_r>
 800b27c:	9a01      	ldr	r2, [sp, #4]
 800b27e:	4605      	mov	r5, r0
 800b280:	b930      	cbnz	r0, 800b290 <_calloc_r+0x24>
 800b282:	4628      	mov	r0, r5
 800b284:	b003      	add	sp, #12
 800b286:	bd30      	pop	{r4, r5, pc}
 800b288:	220c      	movs	r2, #12
 800b28a:	6002      	str	r2, [r0, #0]
 800b28c:	2500      	movs	r5, #0
 800b28e:	e7f8      	b.n	800b282 <_calloc_r+0x16>
 800b290:	4621      	mov	r1, r4
 800b292:	f7fd fe5d 	bl	8008f50 <memset>
 800b296:	e7f4      	b.n	800b282 <_calloc_r+0x16>

0800b298 <__ssputs_r>:
 800b298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b29c:	688e      	ldr	r6, [r1, #8]
 800b29e:	429e      	cmp	r6, r3
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	4690      	mov	r8, r2
 800b2a6:	461f      	mov	r7, r3
 800b2a8:	d838      	bhi.n	800b31c <__ssputs_r+0x84>
 800b2aa:	898a      	ldrh	r2, [r1, #12]
 800b2ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2b0:	d032      	beq.n	800b318 <__ssputs_r+0x80>
 800b2b2:	6825      	ldr	r5, [r4, #0]
 800b2b4:	6909      	ldr	r1, [r1, #16]
 800b2b6:	eba5 0901 	sub.w	r9, r5, r1
 800b2ba:	6965      	ldr	r5, [r4, #20]
 800b2bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	444b      	add	r3, r9
 800b2c8:	106d      	asrs	r5, r5, #1
 800b2ca:	429d      	cmp	r5, r3
 800b2cc:	bf38      	it	cc
 800b2ce:	461d      	movcc	r5, r3
 800b2d0:	0553      	lsls	r3, r2, #21
 800b2d2:	d531      	bpl.n	800b338 <__ssputs_r+0xa0>
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	f7fd feaf 	bl	8009038 <_malloc_r>
 800b2da:	4606      	mov	r6, r0
 800b2dc:	b950      	cbnz	r0, 800b2f4 <__ssputs_r+0x5c>
 800b2de:	230c      	movs	r3, #12
 800b2e0:	f8ca 3000 	str.w	r3, [sl]
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ea:	81a3      	strh	r3, [r4, #12]
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f4:	6921      	ldr	r1, [r4, #16]
 800b2f6:	464a      	mov	r2, r9
 800b2f8:	f7fd fe1c 	bl	8008f34 <memcpy>
 800b2fc:	89a3      	ldrh	r3, [r4, #12]
 800b2fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b306:	81a3      	strh	r3, [r4, #12]
 800b308:	6126      	str	r6, [r4, #16]
 800b30a:	6165      	str	r5, [r4, #20]
 800b30c:	444e      	add	r6, r9
 800b30e:	eba5 0509 	sub.w	r5, r5, r9
 800b312:	6026      	str	r6, [r4, #0]
 800b314:	60a5      	str	r5, [r4, #8]
 800b316:	463e      	mov	r6, r7
 800b318:	42be      	cmp	r6, r7
 800b31a:	d900      	bls.n	800b31e <__ssputs_r+0x86>
 800b31c:	463e      	mov	r6, r7
 800b31e:	6820      	ldr	r0, [r4, #0]
 800b320:	4632      	mov	r2, r6
 800b322:	4641      	mov	r1, r8
 800b324:	f000 f968 	bl	800b5f8 <memmove>
 800b328:	68a3      	ldr	r3, [r4, #8]
 800b32a:	1b9b      	subs	r3, r3, r6
 800b32c:	60a3      	str	r3, [r4, #8]
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	4433      	add	r3, r6
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	2000      	movs	r0, #0
 800b336:	e7db      	b.n	800b2f0 <__ssputs_r+0x58>
 800b338:	462a      	mov	r2, r5
 800b33a:	f000 f977 	bl	800b62c <_realloc_r>
 800b33e:	4606      	mov	r6, r0
 800b340:	2800      	cmp	r0, #0
 800b342:	d1e1      	bne.n	800b308 <__ssputs_r+0x70>
 800b344:	6921      	ldr	r1, [r4, #16]
 800b346:	4650      	mov	r0, sl
 800b348:	f7fd fe0a 	bl	8008f60 <_free_r>
 800b34c:	e7c7      	b.n	800b2de <__ssputs_r+0x46>
	...

0800b350 <_svfiprintf_r>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	4698      	mov	r8, r3
 800b356:	898b      	ldrh	r3, [r1, #12]
 800b358:	061b      	lsls	r3, r3, #24
 800b35a:	b09d      	sub	sp, #116	; 0x74
 800b35c:	4607      	mov	r7, r0
 800b35e:	460d      	mov	r5, r1
 800b360:	4614      	mov	r4, r2
 800b362:	d50e      	bpl.n	800b382 <_svfiprintf_r+0x32>
 800b364:	690b      	ldr	r3, [r1, #16]
 800b366:	b963      	cbnz	r3, 800b382 <_svfiprintf_r+0x32>
 800b368:	2140      	movs	r1, #64	; 0x40
 800b36a:	f7fd fe65 	bl	8009038 <_malloc_r>
 800b36e:	6028      	str	r0, [r5, #0]
 800b370:	6128      	str	r0, [r5, #16]
 800b372:	b920      	cbnz	r0, 800b37e <_svfiprintf_r+0x2e>
 800b374:	230c      	movs	r3, #12
 800b376:	603b      	str	r3, [r7, #0]
 800b378:	f04f 30ff 	mov.w	r0, #4294967295
 800b37c:	e0d1      	b.n	800b522 <_svfiprintf_r+0x1d2>
 800b37e:	2340      	movs	r3, #64	; 0x40
 800b380:	616b      	str	r3, [r5, #20]
 800b382:	2300      	movs	r3, #0
 800b384:	9309      	str	r3, [sp, #36]	; 0x24
 800b386:	2320      	movs	r3, #32
 800b388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b38c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b390:	2330      	movs	r3, #48	; 0x30
 800b392:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b53c <_svfiprintf_r+0x1ec>
 800b396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b39a:	f04f 0901 	mov.w	r9, #1
 800b39e:	4623      	mov	r3, r4
 800b3a0:	469a      	mov	sl, r3
 800b3a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3a6:	b10a      	cbz	r2, 800b3ac <_svfiprintf_r+0x5c>
 800b3a8:	2a25      	cmp	r2, #37	; 0x25
 800b3aa:	d1f9      	bne.n	800b3a0 <_svfiprintf_r+0x50>
 800b3ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b3b0:	d00b      	beq.n	800b3ca <_svfiprintf_r+0x7a>
 800b3b2:	465b      	mov	r3, fp
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	f7ff ff6d 	bl	800b298 <__ssputs_r>
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f000 80aa 	beq.w	800b518 <_svfiprintf_r+0x1c8>
 800b3c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3c6:	445a      	add	r2, fp
 800b3c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 80a2 	beq.w	800b518 <_svfiprintf_r+0x1c8>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3de:	f10a 0a01 	add.w	sl, sl, #1
 800b3e2:	9304      	str	r3, [sp, #16]
 800b3e4:	9307      	str	r3, [sp, #28]
 800b3e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b3ec:	4654      	mov	r4, sl
 800b3ee:	2205      	movs	r2, #5
 800b3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f4:	4851      	ldr	r0, [pc, #324]	; (800b53c <_svfiprintf_r+0x1ec>)
 800b3f6:	f7f4 fefb 	bl	80001f0 <memchr>
 800b3fa:	9a04      	ldr	r2, [sp, #16]
 800b3fc:	b9d8      	cbnz	r0, 800b436 <_svfiprintf_r+0xe6>
 800b3fe:	06d0      	lsls	r0, r2, #27
 800b400:	bf44      	itt	mi
 800b402:	2320      	movmi	r3, #32
 800b404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b408:	0711      	lsls	r1, r2, #28
 800b40a:	bf44      	itt	mi
 800b40c:	232b      	movmi	r3, #43	; 0x2b
 800b40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b412:	f89a 3000 	ldrb.w	r3, [sl]
 800b416:	2b2a      	cmp	r3, #42	; 0x2a
 800b418:	d015      	beq.n	800b446 <_svfiprintf_r+0xf6>
 800b41a:	9a07      	ldr	r2, [sp, #28]
 800b41c:	4654      	mov	r4, sl
 800b41e:	2000      	movs	r0, #0
 800b420:	f04f 0c0a 	mov.w	ip, #10
 800b424:	4621      	mov	r1, r4
 800b426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b42a:	3b30      	subs	r3, #48	; 0x30
 800b42c:	2b09      	cmp	r3, #9
 800b42e:	d94e      	bls.n	800b4ce <_svfiprintf_r+0x17e>
 800b430:	b1b0      	cbz	r0, 800b460 <_svfiprintf_r+0x110>
 800b432:	9207      	str	r2, [sp, #28]
 800b434:	e014      	b.n	800b460 <_svfiprintf_r+0x110>
 800b436:	eba0 0308 	sub.w	r3, r0, r8
 800b43a:	fa09 f303 	lsl.w	r3, r9, r3
 800b43e:	4313      	orrs	r3, r2
 800b440:	9304      	str	r3, [sp, #16]
 800b442:	46a2      	mov	sl, r4
 800b444:	e7d2      	b.n	800b3ec <_svfiprintf_r+0x9c>
 800b446:	9b03      	ldr	r3, [sp, #12]
 800b448:	1d19      	adds	r1, r3, #4
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	9103      	str	r1, [sp, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	bfbb      	ittet	lt
 800b452:	425b      	neglt	r3, r3
 800b454:	f042 0202 	orrlt.w	r2, r2, #2
 800b458:	9307      	strge	r3, [sp, #28]
 800b45a:	9307      	strlt	r3, [sp, #28]
 800b45c:	bfb8      	it	lt
 800b45e:	9204      	strlt	r2, [sp, #16]
 800b460:	7823      	ldrb	r3, [r4, #0]
 800b462:	2b2e      	cmp	r3, #46	; 0x2e
 800b464:	d10c      	bne.n	800b480 <_svfiprintf_r+0x130>
 800b466:	7863      	ldrb	r3, [r4, #1]
 800b468:	2b2a      	cmp	r3, #42	; 0x2a
 800b46a:	d135      	bne.n	800b4d8 <_svfiprintf_r+0x188>
 800b46c:	9b03      	ldr	r3, [sp, #12]
 800b46e:	1d1a      	adds	r2, r3, #4
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	9203      	str	r2, [sp, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	bfb8      	it	lt
 800b478:	f04f 33ff 	movlt.w	r3, #4294967295
 800b47c:	3402      	adds	r4, #2
 800b47e:	9305      	str	r3, [sp, #20]
 800b480:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b54c <_svfiprintf_r+0x1fc>
 800b484:	7821      	ldrb	r1, [r4, #0]
 800b486:	2203      	movs	r2, #3
 800b488:	4650      	mov	r0, sl
 800b48a:	f7f4 feb1 	bl	80001f0 <memchr>
 800b48e:	b140      	cbz	r0, 800b4a2 <_svfiprintf_r+0x152>
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	eba0 000a 	sub.w	r0, r0, sl
 800b496:	fa03 f000 	lsl.w	r0, r3, r0
 800b49a:	9b04      	ldr	r3, [sp, #16]
 800b49c:	4303      	orrs	r3, r0
 800b49e:	3401      	adds	r4, #1
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a6:	4826      	ldr	r0, [pc, #152]	; (800b540 <_svfiprintf_r+0x1f0>)
 800b4a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ac:	2206      	movs	r2, #6
 800b4ae:	f7f4 fe9f 	bl	80001f0 <memchr>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d038      	beq.n	800b528 <_svfiprintf_r+0x1d8>
 800b4b6:	4b23      	ldr	r3, [pc, #140]	; (800b544 <_svfiprintf_r+0x1f4>)
 800b4b8:	bb1b      	cbnz	r3, 800b502 <_svfiprintf_r+0x1b2>
 800b4ba:	9b03      	ldr	r3, [sp, #12]
 800b4bc:	3307      	adds	r3, #7
 800b4be:	f023 0307 	bic.w	r3, r3, #7
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	9303      	str	r3, [sp, #12]
 800b4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c8:	4433      	add	r3, r6
 800b4ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b4cc:	e767      	b.n	800b39e <_svfiprintf_r+0x4e>
 800b4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	2001      	movs	r0, #1
 800b4d6:	e7a5      	b.n	800b424 <_svfiprintf_r+0xd4>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	3401      	adds	r4, #1
 800b4dc:	9305      	str	r3, [sp, #20]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	f04f 0c0a 	mov.w	ip, #10
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4ea:	3a30      	subs	r2, #48	; 0x30
 800b4ec:	2a09      	cmp	r2, #9
 800b4ee:	d903      	bls.n	800b4f8 <_svfiprintf_r+0x1a8>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d0c5      	beq.n	800b480 <_svfiprintf_r+0x130>
 800b4f4:	9105      	str	r1, [sp, #20]
 800b4f6:	e7c3      	b.n	800b480 <_svfiprintf_r+0x130>
 800b4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	2301      	movs	r3, #1
 800b500:	e7f0      	b.n	800b4e4 <_svfiprintf_r+0x194>
 800b502:	ab03      	add	r3, sp, #12
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	462a      	mov	r2, r5
 800b508:	4b0f      	ldr	r3, [pc, #60]	; (800b548 <_svfiprintf_r+0x1f8>)
 800b50a:	a904      	add	r1, sp, #16
 800b50c:	4638      	mov	r0, r7
 800b50e:	f7fd fea7 	bl	8009260 <_printf_float>
 800b512:	1c42      	adds	r2, r0, #1
 800b514:	4606      	mov	r6, r0
 800b516:	d1d6      	bne.n	800b4c6 <_svfiprintf_r+0x176>
 800b518:	89ab      	ldrh	r3, [r5, #12]
 800b51a:	065b      	lsls	r3, r3, #25
 800b51c:	f53f af2c 	bmi.w	800b378 <_svfiprintf_r+0x28>
 800b520:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b522:	b01d      	add	sp, #116	; 0x74
 800b524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b528:	ab03      	add	r3, sp, #12
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	462a      	mov	r2, r5
 800b52e:	4b06      	ldr	r3, [pc, #24]	; (800b548 <_svfiprintf_r+0x1f8>)
 800b530:	a904      	add	r1, sp, #16
 800b532:	4638      	mov	r0, r7
 800b534:	f7fe f938 	bl	80097a8 <_printf_i>
 800b538:	e7eb      	b.n	800b512 <_svfiprintf_r+0x1c2>
 800b53a:	bf00      	nop
 800b53c:	0800c404 	.word	0x0800c404
 800b540:	0800c40e 	.word	0x0800c40e
 800b544:	08009261 	.word	0x08009261
 800b548:	0800b299 	.word	0x0800b299
 800b54c:	0800c40a 	.word	0x0800c40a

0800b550 <_read_r>:
 800b550:	b538      	push	{r3, r4, r5, lr}
 800b552:	4d07      	ldr	r5, [pc, #28]	; (800b570 <_read_r+0x20>)
 800b554:	4604      	mov	r4, r0
 800b556:	4608      	mov	r0, r1
 800b558:	4611      	mov	r1, r2
 800b55a:	2200      	movs	r2, #0
 800b55c:	602a      	str	r2, [r5, #0]
 800b55e:	461a      	mov	r2, r3
 800b560:	f7f6 fa02 	bl	8001968 <_read>
 800b564:	1c43      	adds	r3, r0, #1
 800b566:	d102      	bne.n	800b56e <_read_r+0x1e>
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	b103      	cbz	r3, 800b56e <_read_r+0x1e>
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	200045b0 	.word	0x200045b0

0800b574 <__assert_func>:
 800b574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b576:	4614      	mov	r4, r2
 800b578:	461a      	mov	r2, r3
 800b57a:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <__assert_func+0x2c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4605      	mov	r5, r0
 800b580:	68d8      	ldr	r0, [r3, #12]
 800b582:	b14c      	cbz	r4, 800b598 <__assert_func+0x24>
 800b584:	4b07      	ldr	r3, [pc, #28]	; (800b5a4 <__assert_func+0x30>)
 800b586:	9100      	str	r1, [sp, #0]
 800b588:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b58c:	4906      	ldr	r1, [pc, #24]	; (800b5a8 <__assert_func+0x34>)
 800b58e:	462b      	mov	r3, r5
 800b590:	f000 f80e 	bl	800b5b0 <fiprintf>
 800b594:	f000 faa0 	bl	800bad8 <abort>
 800b598:	4b04      	ldr	r3, [pc, #16]	; (800b5ac <__assert_func+0x38>)
 800b59a:	461c      	mov	r4, r3
 800b59c:	e7f3      	b.n	800b586 <__assert_func+0x12>
 800b59e:	bf00      	nop
 800b5a0:	20000060 	.word	0x20000060
 800b5a4:	0800c415 	.word	0x0800c415
 800b5a8:	0800c422 	.word	0x0800c422
 800b5ac:	0800c450 	.word	0x0800c450

0800b5b0 <fiprintf>:
 800b5b0:	b40e      	push	{r1, r2, r3}
 800b5b2:	b503      	push	{r0, r1, lr}
 800b5b4:	4601      	mov	r1, r0
 800b5b6:	ab03      	add	r3, sp, #12
 800b5b8:	4805      	ldr	r0, [pc, #20]	; (800b5d0 <fiprintf+0x20>)
 800b5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5be:	6800      	ldr	r0, [r0, #0]
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	f000 f88b 	bl	800b6dc <_vfiprintf_r>
 800b5c6:	b002      	add	sp, #8
 800b5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5cc:	b003      	add	sp, #12
 800b5ce:	4770      	bx	lr
 800b5d0:	20000060 	.word	0x20000060

0800b5d4 <__ascii_mbtowc>:
 800b5d4:	b082      	sub	sp, #8
 800b5d6:	b901      	cbnz	r1, 800b5da <__ascii_mbtowc+0x6>
 800b5d8:	a901      	add	r1, sp, #4
 800b5da:	b142      	cbz	r2, 800b5ee <__ascii_mbtowc+0x1a>
 800b5dc:	b14b      	cbz	r3, 800b5f2 <__ascii_mbtowc+0x1e>
 800b5de:	7813      	ldrb	r3, [r2, #0]
 800b5e0:	600b      	str	r3, [r1, #0]
 800b5e2:	7812      	ldrb	r2, [r2, #0]
 800b5e4:	1e10      	subs	r0, r2, #0
 800b5e6:	bf18      	it	ne
 800b5e8:	2001      	movne	r0, #1
 800b5ea:	b002      	add	sp, #8
 800b5ec:	4770      	bx	lr
 800b5ee:	4610      	mov	r0, r2
 800b5f0:	e7fb      	b.n	800b5ea <__ascii_mbtowc+0x16>
 800b5f2:	f06f 0001 	mvn.w	r0, #1
 800b5f6:	e7f8      	b.n	800b5ea <__ascii_mbtowc+0x16>

0800b5f8 <memmove>:
 800b5f8:	4288      	cmp	r0, r1
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	eb01 0402 	add.w	r4, r1, r2
 800b600:	d902      	bls.n	800b608 <memmove+0x10>
 800b602:	4284      	cmp	r4, r0
 800b604:	4623      	mov	r3, r4
 800b606:	d807      	bhi.n	800b618 <memmove+0x20>
 800b608:	1e43      	subs	r3, r0, #1
 800b60a:	42a1      	cmp	r1, r4
 800b60c:	d008      	beq.n	800b620 <memmove+0x28>
 800b60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b612:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b616:	e7f8      	b.n	800b60a <memmove+0x12>
 800b618:	4402      	add	r2, r0
 800b61a:	4601      	mov	r1, r0
 800b61c:	428a      	cmp	r2, r1
 800b61e:	d100      	bne.n	800b622 <memmove+0x2a>
 800b620:	bd10      	pop	{r4, pc}
 800b622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b62a:	e7f7      	b.n	800b61c <memmove+0x24>

0800b62c <_realloc_r>:
 800b62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b630:	4680      	mov	r8, r0
 800b632:	4614      	mov	r4, r2
 800b634:	460e      	mov	r6, r1
 800b636:	b921      	cbnz	r1, 800b642 <_realloc_r+0x16>
 800b638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b63c:	4611      	mov	r1, r2
 800b63e:	f7fd bcfb 	b.w	8009038 <_malloc_r>
 800b642:	b92a      	cbnz	r2, 800b650 <_realloc_r+0x24>
 800b644:	f7fd fc8c 	bl	8008f60 <_free_r>
 800b648:	4625      	mov	r5, r4
 800b64a:	4628      	mov	r0, r5
 800b64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b650:	f000 faae 	bl	800bbb0 <_malloc_usable_size_r>
 800b654:	4284      	cmp	r4, r0
 800b656:	4607      	mov	r7, r0
 800b658:	d802      	bhi.n	800b660 <_realloc_r+0x34>
 800b65a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b65e:	d812      	bhi.n	800b686 <_realloc_r+0x5a>
 800b660:	4621      	mov	r1, r4
 800b662:	4640      	mov	r0, r8
 800b664:	f7fd fce8 	bl	8009038 <_malloc_r>
 800b668:	4605      	mov	r5, r0
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d0ed      	beq.n	800b64a <_realloc_r+0x1e>
 800b66e:	42bc      	cmp	r4, r7
 800b670:	4622      	mov	r2, r4
 800b672:	4631      	mov	r1, r6
 800b674:	bf28      	it	cs
 800b676:	463a      	movcs	r2, r7
 800b678:	f7fd fc5c 	bl	8008f34 <memcpy>
 800b67c:	4631      	mov	r1, r6
 800b67e:	4640      	mov	r0, r8
 800b680:	f7fd fc6e 	bl	8008f60 <_free_r>
 800b684:	e7e1      	b.n	800b64a <_realloc_r+0x1e>
 800b686:	4635      	mov	r5, r6
 800b688:	e7df      	b.n	800b64a <_realloc_r+0x1e>

0800b68a <__sfputc_r>:
 800b68a:	6893      	ldr	r3, [r2, #8]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	b410      	push	{r4}
 800b692:	6093      	str	r3, [r2, #8]
 800b694:	da08      	bge.n	800b6a8 <__sfputc_r+0x1e>
 800b696:	6994      	ldr	r4, [r2, #24]
 800b698:	42a3      	cmp	r3, r4
 800b69a:	db01      	blt.n	800b6a0 <__sfputc_r+0x16>
 800b69c:	290a      	cmp	r1, #10
 800b69e:	d103      	bne.n	800b6a8 <__sfputc_r+0x1e>
 800b6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6a4:	f000 b94a 	b.w	800b93c <__swbuf_r>
 800b6a8:	6813      	ldr	r3, [r2, #0]
 800b6aa:	1c58      	adds	r0, r3, #1
 800b6ac:	6010      	str	r0, [r2, #0]
 800b6ae:	7019      	strb	r1, [r3, #0]
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <__sfputs_r>:
 800b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	460f      	mov	r7, r1
 800b6be:	4614      	mov	r4, r2
 800b6c0:	18d5      	adds	r5, r2, r3
 800b6c2:	42ac      	cmp	r4, r5
 800b6c4:	d101      	bne.n	800b6ca <__sfputs_r+0x12>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	e007      	b.n	800b6da <__sfputs_r+0x22>
 800b6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ce:	463a      	mov	r2, r7
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f7ff ffda 	bl	800b68a <__sfputc_r>
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	d1f3      	bne.n	800b6c2 <__sfputs_r+0xa>
 800b6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6dc <_vfiprintf_r>:
 800b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	460d      	mov	r5, r1
 800b6e2:	b09d      	sub	sp, #116	; 0x74
 800b6e4:	4614      	mov	r4, r2
 800b6e6:	4698      	mov	r8, r3
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	b118      	cbz	r0, 800b6f4 <_vfiprintf_r+0x18>
 800b6ec:	6983      	ldr	r3, [r0, #24]
 800b6ee:	b90b      	cbnz	r3, 800b6f4 <_vfiprintf_r+0x18>
 800b6f0:	f7fd fb52 	bl	8008d98 <__sinit>
 800b6f4:	4b89      	ldr	r3, [pc, #548]	; (800b91c <_vfiprintf_r+0x240>)
 800b6f6:	429d      	cmp	r5, r3
 800b6f8:	d11b      	bne.n	800b732 <_vfiprintf_r+0x56>
 800b6fa:	6875      	ldr	r5, [r6, #4]
 800b6fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6fe:	07d9      	lsls	r1, r3, #31
 800b700:	d405      	bmi.n	800b70e <_vfiprintf_r+0x32>
 800b702:	89ab      	ldrh	r3, [r5, #12]
 800b704:	059a      	lsls	r2, r3, #22
 800b706:	d402      	bmi.n	800b70e <_vfiprintf_r+0x32>
 800b708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b70a:	f7fd fc08 	bl	8008f1e <__retarget_lock_acquire_recursive>
 800b70e:	89ab      	ldrh	r3, [r5, #12]
 800b710:	071b      	lsls	r3, r3, #28
 800b712:	d501      	bpl.n	800b718 <_vfiprintf_r+0x3c>
 800b714:	692b      	ldr	r3, [r5, #16]
 800b716:	b9eb      	cbnz	r3, 800b754 <_vfiprintf_r+0x78>
 800b718:	4629      	mov	r1, r5
 800b71a:	4630      	mov	r0, r6
 800b71c:	f000 f96e 	bl	800b9fc <__swsetup_r>
 800b720:	b1c0      	cbz	r0, 800b754 <_vfiprintf_r+0x78>
 800b722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b724:	07dc      	lsls	r4, r3, #31
 800b726:	d50e      	bpl.n	800b746 <_vfiprintf_r+0x6a>
 800b728:	f04f 30ff 	mov.w	r0, #4294967295
 800b72c:	b01d      	add	sp, #116	; 0x74
 800b72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b732:	4b7b      	ldr	r3, [pc, #492]	; (800b920 <_vfiprintf_r+0x244>)
 800b734:	429d      	cmp	r5, r3
 800b736:	d101      	bne.n	800b73c <_vfiprintf_r+0x60>
 800b738:	68b5      	ldr	r5, [r6, #8]
 800b73a:	e7df      	b.n	800b6fc <_vfiprintf_r+0x20>
 800b73c:	4b79      	ldr	r3, [pc, #484]	; (800b924 <_vfiprintf_r+0x248>)
 800b73e:	429d      	cmp	r5, r3
 800b740:	bf08      	it	eq
 800b742:	68f5      	ldreq	r5, [r6, #12]
 800b744:	e7da      	b.n	800b6fc <_vfiprintf_r+0x20>
 800b746:	89ab      	ldrh	r3, [r5, #12]
 800b748:	0598      	lsls	r0, r3, #22
 800b74a:	d4ed      	bmi.n	800b728 <_vfiprintf_r+0x4c>
 800b74c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b74e:	f7fd fbe7 	bl	8008f20 <__retarget_lock_release_recursive>
 800b752:	e7e9      	b.n	800b728 <_vfiprintf_r+0x4c>
 800b754:	2300      	movs	r3, #0
 800b756:	9309      	str	r3, [sp, #36]	; 0x24
 800b758:	2320      	movs	r3, #32
 800b75a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b75e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b762:	2330      	movs	r3, #48	; 0x30
 800b764:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b928 <_vfiprintf_r+0x24c>
 800b768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b76c:	f04f 0901 	mov.w	r9, #1
 800b770:	4623      	mov	r3, r4
 800b772:	469a      	mov	sl, r3
 800b774:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b778:	b10a      	cbz	r2, 800b77e <_vfiprintf_r+0xa2>
 800b77a:	2a25      	cmp	r2, #37	; 0x25
 800b77c:	d1f9      	bne.n	800b772 <_vfiprintf_r+0x96>
 800b77e:	ebba 0b04 	subs.w	fp, sl, r4
 800b782:	d00b      	beq.n	800b79c <_vfiprintf_r+0xc0>
 800b784:	465b      	mov	r3, fp
 800b786:	4622      	mov	r2, r4
 800b788:	4629      	mov	r1, r5
 800b78a:	4630      	mov	r0, r6
 800b78c:	f7ff ff94 	bl	800b6b8 <__sfputs_r>
 800b790:	3001      	adds	r0, #1
 800b792:	f000 80aa 	beq.w	800b8ea <_vfiprintf_r+0x20e>
 800b796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b798:	445a      	add	r2, fp
 800b79a:	9209      	str	r2, [sp, #36]	; 0x24
 800b79c:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f000 80a2 	beq.w	800b8ea <_vfiprintf_r+0x20e>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7b0:	f10a 0a01 	add.w	sl, sl, #1
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	9307      	str	r3, [sp, #28]
 800b7b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b7be:	4654      	mov	r4, sl
 800b7c0:	2205      	movs	r2, #5
 800b7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c6:	4858      	ldr	r0, [pc, #352]	; (800b928 <_vfiprintf_r+0x24c>)
 800b7c8:	f7f4 fd12 	bl	80001f0 <memchr>
 800b7cc:	9a04      	ldr	r2, [sp, #16]
 800b7ce:	b9d8      	cbnz	r0, 800b808 <_vfiprintf_r+0x12c>
 800b7d0:	06d1      	lsls	r1, r2, #27
 800b7d2:	bf44      	itt	mi
 800b7d4:	2320      	movmi	r3, #32
 800b7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7da:	0713      	lsls	r3, r2, #28
 800b7dc:	bf44      	itt	mi
 800b7de:	232b      	movmi	r3, #43	; 0x2b
 800b7e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ea:	d015      	beq.n	800b818 <_vfiprintf_r+0x13c>
 800b7ec:	9a07      	ldr	r2, [sp, #28]
 800b7ee:	4654      	mov	r4, sl
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	f04f 0c0a 	mov.w	ip, #10
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7fc:	3b30      	subs	r3, #48	; 0x30
 800b7fe:	2b09      	cmp	r3, #9
 800b800:	d94e      	bls.n	800b8a0 <_vfiprintf_r+0x1c4>
 800b802:	b1b0      	cbz	r0, 800b832 <_vfiprintf_r+0x156>
 800b804:	9207      	str	r2, [sp, #28]
 800b806:	e014      	b.n	800b832 <_vfiprintf_r+0x156>
 800b808:	eba0 0308 	sub.w	r3, r0, r8
 800b80c:	fa09 f303 	lsl.w	r3, r9, r3
 800b810:	4313      	orrs	r3, r2
 800b812:	9304      	str	r3, [sp, #16]
 800b814:	46a2      	mov	sl, r4
 800b816:	e7d2      	b.n	800b7be <_vfiprintf_r+0xe2>
 800b818:	9b03      	ldr	r3, [sp, #12]
 800b81a:	1d19      	adds	r1, r3, #4
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	9103      	str	r1, [sp, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	bfbb      	ittet	lt
 800b824:	425b      	neglt	r3, r3
 800b826:	f042 0202 	orrlt.w	r2, r2, #2
 800b82a:	9307      	strge	r3, [sp, #28]
 800b82c:	9307      	strlt	r3, [sp, #28]
 800b82e:	bfb8      	it	lt
 800b830:	9204      	strlt	r2, [sp, #16]
 800b832:	7823      	ldrb	r3, [r4, #0]
 800b834:	2b2e      	cmp	r3, #46	; 0x2e
 800b836:	d10c      	bne.n	800b852 <_vfiprintf_r+0x176>
 800b838:	7863      	ldrb	r3, [r4, #1]
 800b83a:	2b2a      	cmp	r3, #42	; 0x2a
 800b83c:	d135      	bne.n	800b8aa <_vfiprintf_r+0x1ce>
 800b83e:	9b03      	ldr	r3, [sp, #12]
 800b840:	1d1a      	adds	r2, r3, #4
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	9203      	str	r2, [sp, #12]
 800b846:	2b00      	cmp	r3, #0
 800b848:	bfb8      	it	lt
 800b84a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b84e:	3402      	adds	r4, #2
 800b850:	9305      	str	r3, [sp, #20]
 800b852:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b938 <_vfiprintf_r+0x25c>
 800b856:	7821      	ldrb	r1, [r4, #0]
 800b858:	2203      	movs	r2, #3
 800b85a:	4650      	mov	r0, sl
 800b85c:	f7f4 fcc8 	bl	80001f0 <memchr>
 800b860:	b140      	cbz	r0, 800b874 <_vfiprintf_r+0x198>
 800b862:	2340      	movs	r3, #64	; 0x40
 800b864:	eba0 000a 	sub.w	r0, r0, sl
 800b868:	fa03 f000 	lsl.w	r0, r3, r0
 800b86c:	9b04      	ldr	r3, [sp, #16]
 800b86e:	4303      	orrs	r3, r0
 800b870:	3401      	adds	r4, #1
 800b872:	9304      	str	r3, [sp, #16]
 800b874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b878:	482c      	ldr	r0, [pc, #176]	; (800b92c <_vfiprintf_r+0x250>)
 800b87a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b87e:	2206      	movs	r2, #6
 800b880:	f7f4 fcb6 	bl	80001f0 <memchr>
 800b884:	2800      	cmp	r0, #0
 800b886:	d03f      	beq.n	800b908 <_vfiprintf_r+0x22c>
 800b888:	4b29      	ldr	r3, [pc, #164]	; (800b930 <_vfiprintf_r+0x254>)
 800b88a:	bb1b      	cbnz	r3, 800b8d4 <_vfiprintf_r+0x1f8>
 800b88c:	9b03      	ldr	r3, [sp, #12]
 800b88e:	3307      	adds	r3, #7
 800b890:	f023 0307 	bic.w	r3, r3, #7
 800b894:	3308      	adds	r3, #8
 800b896:	9303      	str	r3, [sp, #12]
 800b898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b89a:	443b      	add	r3, r7
 800b89c:	9309      	str	r3, [sp, #36]	; 0x24
 800b89e:	e767      	b.n	800b770 <_vfiprintf_r+0x94>
 800b8a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	2001      	movs	r0, #1
 800b8a8:	e7a5      	b.n	800b7f6 <_vfiprintf_r+0x11a>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	3401      	adds	r4, #1
 800b8ae:	9305      	str	r3, [sp, #20]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	f04f 0c0a 	mov.w	ip, #10
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8bc:	3a30      	subs	r2, #48	; 0x30
 800b8be:	2a09      	cmp	r2, #9
 800b8c0:	d903      	bls.n	800b8ca <_vfiprintf_r+0x1ee>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0c5      	beq.n	800b852 <_vfiprintf_r+0x176>
 800b8c6:	9105      	str	r1, [sp, #20]
 800b8c8:	e7c3      	b.n	800b852 <_vfiprintf_r+0x176>
 800b8ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e7f0      	b.n	800b8b6 <_vfiprintf_r+0x1da>
 800b8d4:	ab03      	add	r3, sp, #12
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	462a      	mov	r2, r5
 800b8da:	4b16      	ldr	r3, [pc, #88]	; (800b934 <_vfiprintf_r+0x258>)
 800b8dc:	a904      	add	r1, sp, #16
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f7fd fcbe 	bl	8009260 <_printf_float>
 800b8e4:	4607      	mov	r7, r0
 800b8e6:	1c78      	adds	r0, r7, #1
 800b8e8:	d1d6      	bne.n	800b898 <_vfiprintf_r+0x1bc>
 800b8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ec:	07d9      	lsls	r1, r3, #31
 800b8ee:	d405      	bmi.n	800b8fc <_vfiprintf_r+0x220>
 800b8f0:	89ab      	ldrh	r3, [r5, #12]
 800b8f2:	059a      	lsls	r2, r3, #22
 800b8f4:	d402      	bmi.n	800b8fc <_vfiprintf_r+0x220>
 800b8f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8f8:	f7fd fb12 	bl	8008f20 <__retarget_lock_release_recursive>
 800b8fc:	89ab      	ldrh	r3, [r5, #12]
 800b8fe:	065b      	lsls	r3, r3, #25
 800b900:	f53f af12 	bmi.w	800b728 <_vfiprintf_r+0x4c>
 800b904:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b906:	e711      	b.n	800b72c <_vfiprintf_r+0x50>
 800b908:	ab03      	add	r3, sp, #12
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	462a      	mov	r2, r5
 800b90e:	4b09      	ldr	r3, [pc, #36]	; (800b934 <_vfiprintf_r+0x258>)
 800b910:	a904      	add	r1, sp, #16
 800b912:	4630      	mov	r0, r6
 800b914:	f7fd ff48 	bl	80097a8 <_printf_i>
 800b918:	e7e4      	b.n	800b8e4 <_vfiprintf_r+0x208>
 800b91a:	bf00      	nop
 800b91c:	0800c1a0 	.word	0x0800c1a0
 800b920:	0800c1c0 	.word	0x0800c1c0
 800b924:	0800c180 	.word	0x0800c180
 800b928:	0800c404 	.word	0x0800c404
 800b92c:	0800c40e 	.word	0x0800c40e
 800b930:	08009261 	.word	0x08009261
 800b934:	0800b6b9 	.word	0x0800b6b9
 800b938:	0800c40a 	.word	0x0800c40a

0800b93c <__swbuf_r>:
 800b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93e:	460e      	mov	r6, r1
 800b940:	4614      	mov	r4, r2
 800b942:	4605      	mov	r5, r0
 800b944:	b118      	cbz	r0, 800b94e <__swbuf_r+0x12>
 800b946:	6983      	ldr	r3, [r0, #24]
 800b948:	b90b      	cbnz	r3, 800b94e <__swbuf_r+0x12>
 800b94a:	f7fd fa25 	bl	8008d98 <__sinit>
 800b94e:	4b21      	ldr	r3, [pc, #132]	; (800b9d4 <__swbuf_r+0x98>)
 800b950:	429c      	cmp	r4, r3
 800b952:	d12b      	bne.n	800b9ac <__swbuf_r+0x70>
 800b954:	686c      	ldr	r4, [r5, #4]
 800b956:	69a3      	ldr	r3, [r4, #24]
 800b958:	60a3      	str	r3, [r4, #8]
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	071a      	lsls	r2, r3, #28
 800b95e:	d52f      	bpl.n	800b9c0 <__swbuf_r+0x84>
 800b960:	6923      	ldr	r3, [r4, #16]
 800b962:	b36b      	cbz	r3, 800b9c0 <__swbuf_r+0x84>
 800b964:	6923      	ldr	r3, [r4, #16]
 800b966:	6820      	ldr	r0, [r4, #0]
 800b968:	1ac0      	subs	r0, r0, r3
 800b96a:	6963      	ldr	r3, [r4, #20]
 800b96c:	b2f6      	uxtb	r6, r6
 800b96e:	4283      	cmp	r3, r0
 800b970:	4637      	mov	r7, r6
 800b972:	dc04      	bgt.n	800b97e <__swbuf_r+0x42>
 800b974:	4621      	mov	r1, r4
 800b976:	4628      	mov	r0, r5
 800b978:	f7ff f896 	bl	800aaa8 <_fflush_r>
 800b97c:	bb30      	cbnz	r0, 800b9cc <__swbuf_r+0x90>
 800b97e:	68a3      	ldr	r3, [r4, #8]
 800b980:	3b01      	subs	r3, #1
 800b982:	60a3      	str	r3, [r4, #8]
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	1c5a      	adds	r2, r3, #1
 800b988:	6022      	str	r2, [r4, #0]
 800b98a:	701e      	strb	r6, [r3, #0]
 800b98c:	6963      	ldr	r3, [r4, #20]
 800b98e:	3001      	adds	r0, #1
 800b990:	4283      	cmp	r3, r0
 800b992:	d004      	beq.n	800b99e <__swbuf_r+0x62>
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	07db      	lsls	r3, r3, #31
 800b998:	d506      	bpl.n	800b9a8 <__swbuf_r+0x6c>
 800b99a:	2e0a      	cmp	r6, #10
 800b99c:	d104      	bne.n	800b9a8 <__swbuf_r+0x6c>
 800b99e:	4621      	mov	r1, r4
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	f7ff f881 	bl	800aaa8 <_fflush_r>
 800b9a6:	b988      	cbnz	r0, 800b9cc <__swbuf_r+0x90>
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ac:	4b0a      	ldr	r3, [pc, #40]	; (800b9d8 <__swbuf_r+0x9c>)
 800b9ae:	429c      	cmp	r4, r3
 800b9b0:	d101      	bne.n	800b9b6 <__swbuf_r+0x7a>
 800b9b2:	68ac      	ldr	r4, [r5, #8]
 800b9b4:	e7cf      	b.n	800b956 <__swbuf_r+0x1a>
 800b9b6:	4b09      	ldr	r3, [pc, #36]	; (800b9dc <__swbuf_r+0xa0>)
 800b9b8:	429c      	cmp	r4, r3
 800b9ba:	bf08      	it	eq
 800b9bc:	68ec      	ldreq	r4, [r5, #12]
 800b9be:	e7ca      	b.n	800b956 <__swbuf_r+0x1a>
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	f000 f81a 	bl	800b9fc <__swsetup_r>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d0cb      	beq.n	800b964 <__swbuf_r+0x28>
 800b9cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b9d0:	e7ea      	b.n	800b9a8 <__swbuf_r+0x6c>
 800b9d2:	bf00      	nop
 800b9d4:	0800c1a0 	.word	0x0800c1a0
 800b9d8:	0800c1c0 	.word	0x0800c1c0
 800b9dc:	0800c180 	.word	0x0800c180

0800b9e0 <__ascii_wctomb>:
 800b9e0:	b149      	cbz	r1, 800b9f6 <__ascii_wctomb+0x16>
 800b9e2:	2aff      	cmp	r2, #255	; 0xff
 800b9e4:	bf85      	ittet	hi
 800b9e6:	238a      	movhi	r3, #138	; 0x8a
 800b9e8:	6003      	strhi	r3, [r0, #0]
 800b9ea:	700a      	strbls	r2, [r1, #0]
 800b9ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9f0:	bf98      	it	ls
 800b9f2:	2001      	movls	r0, #1
 800b9f4:	4770      	bx	lr
 800b9f6:	4608      	mov	r0, r1
 800b9f8:	4770      	bx	lr
	...

0800b9fc <__swsetup_r>:
 800b9fc:	4b32      	ldr	r3, [pc, #200]	; (800bac8 <__swsetup_r+0xcc>)
 800b9fe:	b570      	push	{r4, r5, r6, lr}
 800ba00:	681d      	ldr	r5, [r3, #0]
 800ba02:	4606      	mov	r6, r0
 800ba04:	460c      	mov	r4, r1
 800ba06:	b125      	cbz	r5, 800ba12 <__swsetup_r+0x16>
 800ba08:	69ab      	ldr	r3, [r5, #24]
 800ba0a:	b913      	cbnz	r3, 800ba12 <__swsetup_r+0x16>
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	f7fd f9c3 	bl	8008d98 <__sinit>
 800ba12:	4b2e      	ldr	r3, [pc, #184]	; (800bacc <__swsetup_r+0xd0>)
 800ba14:	429c      	cmp	r4, r3
 800ba16:	d10f      	bne.n	800ba38 <__swsetup_r+0x3c>
 800ba18:	686c      	ldr	r4, [r5, #4]
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba20:	0719      	lsls	r1, r3, #28
 800ba22:	d42c      	bmi.n	800ba7e <__swsetup_r+0x82>
 800ba24:	06dd      	lsls	r5, r3, #27
 800ba26:	d411      	bmi.n	800ba4c <__swsetup_r+0x50>
 800ba28:	2309      	movs	r3, #9
 800ba2a:	6033      	str	r3, [r6, #0]
 800ba2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba30:	81a3      	strh	r3, [r4, #12]
 800ba32:	f04f 30ff 	mov.w	r0, #4294967295
 800ba36:	e03e      	b.n	800bab6 <__swsetup_r+0xba>
 800ba38:	4b25      	ldr	r3, [pc, #148]	; (800bad0 <__swsetup_r+0xd4>)
 800ba3a:	429c      	cmp	r4, r3
 800ba3c:	d101      	bne.n	800ba42 <__swsetup_r+0x46>
 800ba3e:	68ac      	ldr	r4, [r5, #8]
 800ba40:	e7eb      	b.n	800ba1a <__swsetup_r+0x1e>
 800ba42:	4b24      	ldr	r3, [pc, #144]	; (800bad4 <__swsetup_r+0xd8>)
 800ba44:	429c      	cmp	r4, r3
 800ba46:	bf08      	it	eq
 800ba48:	68ec      	ldreq	r4, [r5, #12]
 800ba4a:	e7e6      	b.n	800ba1a <__swsetup_r+0x1e>
 800ba4c:	0758      	lsls	r0, r3, #29
 800ba4e:	d512      	bpl.n	800ba76 <__swsetup_r+0x7a>
 800ba50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba52:	b141      	cbz	r1, 800ba66 <__swsetup_r+0x6a>
 800ba54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba58:	4299      	cmp	r1, r3
 800ba5a:	d002      	beq.n	800ba62 <__swsetup_r+0x66>
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	f7fd fa7f 	bl	8008f60 <_free_r>
 800ba62:	2300      	movs	r3, #0
 800ba64:	6363      	str	r3, [r4, #52]	; 0x34
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba6c:	81a3      	strh	r3, [r4, #12]
 800ba6e:	2300      	movs	r3, #0
 800ba70:	6063      	str	r3, [r4, #4]
 800ba72:	6923      	ldr	r3, [r4, #16]
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	f043 0308 	orr.w	r3, r3, #8
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	b94b      	cbnz	r3, 800ba96 <__swsetup_r+0x9a>
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba8c:	d003      	beq.n	800ba96 <__swsetup_r+0x9a>
 800ba8e:	4621      	mov	r1, r4
 800ba90:	4630      	mov	r0, r6
 800ba92:	f000 f84d 	bl	800bb30 <__smakebuf_r>
 800ba96:	89a0      	ldrh	r0, [r4, #12]
 800ba98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba9c:	f010 0301 	ands.w	r3, r0, #1
 800baa0:	d00a      	beq.n	800bab8 <__swsetup_r+0xbc>
 800baa2:	2300      	movs	r3, #0
 800baa4:	60a3      	str	r3, [r4, #8]
 800baa6:	6963      	ldr	r3, [r4, #20]
 800baa8:	425b      	negs	r3, r3
 800baaa:	61a3      	str	r3, [r4, #24]
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	b943      	cbnz	r3, 800bac2 <__swsetup_r+0xc6>
 800bab0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bab4:	d1ba      	bne.n	800ba2c <__swsetup_r+0x30>
 800bab6:	bd70      	pop	{r4, r5, r6, pc}
 800bab8:	0781      	lsls	r1, r0, #30
 800baba:	bf58      	it	pl
 800babc:	6963      	ldrpl	r3, [r4, #20]
 800babe:	60a3      	str	r3, [r4, #8]
 800bac0:	e7f4      	b.n	800baac <__swsetup_r+0xb0>
 800bac2:	2000      	movs	r0, #0
 800bac4:	e7f7      	b.n	800bab6 <__swsetup_r+0xba>
 800bac6:	bf00      	nop
 800bac8:	20000060 	.word	0x20000060
 800bacc:	0800c1a0 	.word	0x0800c1a0
 800bad0:	0800c1c0 	.word	0x0800c1c0
 800bad4:	0800c180 	.word	0x0800c180

0800bad8 <abort>:
 800bad8:	b508      	push	{r3, lr}
 800bada:	2006      	movs	r0, #6
 800badc:	f000 f898 	bl	800bc10 <raise>
 800bae0:	2001      	movs	r0, #1
 800bae2:	f7f5 ff37 	bl	8001954 <_exit>

0800bae6 <__swhatbuf_r>:
 800bae6:	b570      	push	{r4, r5, r6, lr}
 800bae8:	460e      	mov	r6, r1
 800baea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baee:	2900      	cmp	r1, #0
 800baf0:	b096      	sub	sp, #88	; 0x58
 800baf2:	4614      	mov	r4, r2
 800baf4:	461d      	mov	r5, r3
 800baf6:	da08      	bge.n	800bb0a <__swhatbuf_r+0x24>
 800baf8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	602a      	str	r2, [r5, #0]
 800bb00:	061a      	lsls	r2, r3, #24
 800bb02:	d410      	bmi.n	800bb26 <__swhatbuf_r+0x40>
 800bb04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb08:	e00e      	b.n	800bb28 <__swhatbuf_r+0x42>
 800bb0a:	466a      	mov	r2, sp
 800bb0c:	f000 f89c 	bl	800bc48 <_fstat_r>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	dbf1      	blt.n	800baf8 <__swhatbuf_r+0x12>
 800bb14:	9a01      	ldr	r2, [sp, #4]
 800bb16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb1e:	425a      	negs	r2, r3
 800bb20:	415a      	adcs	r2, r3
 800bb22:	602a      	str	r2, [r5, #0]
 800bb24:	e7ee      	b.n	800bb04 <__swhatbuf_r+0x1e>
 800bb26:	2340      	movs	r3, #64	; 0x40
 800bb28:	2000      	movs	r0, #0
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	b016      	add	sp, #88	; 0x58
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}

0800bb30 <__smakebuf_r>:
 800bb30:	898b      	ldrh	r3, [r1, #12]
 800bb32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb34:	079d      	lsls	r5, r3, #30
 800bb36:	4606      	mov	r6, r0
 800bb38:	460c      	mov	r4, r1
 800bb3a:	d507      	bpl.n	800bb4c <__smakebuf_r+0x1c>
 800bb3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	6123      	str	r3, [r4, #16]
 800bb44:	2301      	movs	r3, #1
 800bb46:	6163      	str	r3, [r4, #20]
 800bb48:	b002      	add	sp, #8
 800bb4a:	bd70      	pop	{r4, r5, r6, pc}
 800bb4c:	ab01      	add	r3, sp, #4
 800bb4e:	466a      	mov	r2, sp
 800bb50:	f7ff ffc9 	bl	800bae6 <__swhatbuf_r>
 800bb54:	9900      	ldr	r1, [sp, #0]
 800bb56:	4605      	mov	r5, r0
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7fd fa6d 	bl	8009038 <_malloc_r>
 800bb5e:	b948      	cbnz	r0, 800bb74 <__smakebuf_r+0x44>
 800bb60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb64:	059a      	lsls	r2, r3, #22
 800bb66:	d4ef      	bmi.n	800bb48 <__smakebuf_r+0x18>
 800bb68:	f023 0303 	bic.w	r3, r3, #3
 800bb6c:	f043 0302 	orr.w	r3, r3, #2
 800bb70:	81a3      	strh	r3, [r4, #12]
 800bb72:	e7e3      	b.n	800bb3c <__smakebuf_r+0xc>
 800bb74:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <__smakebuf_r+0x7c>)
 800bb76:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	6020      	str	r0, [r4, #0]
 800bb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb80:	81a3      	strh	r3, [r4, #12]
 800bb82:	9b00      	ldr	r3, [sp, #0]
 800bb84:	6163      	str	r3, [r4, #20]
 800bb86:	9b01      	ldr	r3, [sp, #4]
 800bb88:	6120      	str	r0, [r4, #16]
 800bb8a:	b15b      	cbz	r3, 800bba4 <__smakebuf_r+0x74>
 800bb8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb90:	4630      	mov	r0, r6
 800bb92:	f000 f86b 	bl	800bc6c <_isatty_r>
 800bb96:	b128      	cbz	r0, 800bba4 <__smakebuf_r+0x74>
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	f023 0303 	bic.w	r3, r3, #3
 800bb9e:	f043 0301 	orr.w	r3, r3, #1
 800bba2:	81a3      	strh	r3, [r4, #12]
 800bba4:	89a0      	ldrh	r0, [r4, #12]
 800bba6:	4305      	orrs	r5, r0
 800bba8:	81a5      	strh	r5, [r4, #12]
 800bbaa:	e7cd      	b.n	800bb48 <__smakebuf_r+0x18>
 800bbac:	08008d31 	.word	0x08008d31

0800bbb0 <_malloc_usable_size_r>:
 800bbb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbb4:	1f18      	subs	r0, r3, #4
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	bfbc      	itt	lt
 800bbba:	580b      	ldrlt	r3, [r1, r0]
 800bbbc:	18c0      	addlt	r0, r0, r3
 800bbbe:	4770      	bx	lr

0800bbc0 <_raise_r>:
 800bbc0:	291f      	cmp	r1, #31
 800bbc2:	b538      	push	{r3, r4, r5, lr}
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	460d      	mov	r5, r1
 800bbc8:	d904      	bls.n	800bbd4 <_raise_r+0x14>
 800bbca:	2316      	movs	r3, #22
 800bbcc:	6003      	str	r3, [r0, #0]
 800bbce:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd2:	bd38      	pop	{r3, r4, r5, pc}
 800bbd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbd6:	b112      	cbz	r2, 800bbde <_raise_r+0x1e>
 800bbd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbdc:	b94b      	cbnz	r3, 800bbf2 <_raise_r+0x32>
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f000 f830 	bl	800bc44 <_getpid_r>
 800bbe4:	462a      	mov	r2, r5
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	4620      	mov	r0, r4
 800bbea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbee:	f000 b817 	b.w	800bc20 <_kill_r>
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d00a      	beq.n	800bc0c <_raise_r+0x4c>
 800bbf6:	1c59      	adds	r1, r3, #1
 800bbf8:	d103      	bne.n	800bc02 <_raise_r+0x42>
 800bbfa:	2316      	movs	r3, #22
 800bbfc:	6003      	str	r3, [r0, #0]
 800bbfe:	2001      	movs	r0, #1
 800bc00:	e7e7      	b.n	800bbd2 <_raise_r+0x12>
 800bc02:	2400      	movs	r4, #0
 800bc04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc08:	4628      	mov	r0, r5
 800bc0a:	4798      	blx	r3
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	e7e0      	b.n	800bbd2 <_raise_r+0x12>

0800bc10 <raise>:
 800bc10:	4b02      	ldr	r3, [pc, #8]	; (800bc1c <raise+0xc>)
 800bc12:	4601      	mov	r1, r0
 800bc14:	6818      	ldr	r0, [r3, #0]
 800bc16:	f7ff bfd3 	b.w	800bbc0 <_raise_r>
 800bc1a:	bf00      	nop
 800bc1c:	20000060 	.word	0x20000060

0800bc20 <_kill_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d07      	ldr	r5, [pc, #28]	; (800bc40 <_kill_r+0x20>)
 800bc24:	2300      	movs	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	602b      	str	r3, [r5, #0]
 800bc2e:	f7f5 fe81 	bl	8001934 <_kill>
 800bc32:	1c43      	adds	r3, r0, #1
 800bc34:	d102      	bne.n	800bc3c <_kill_r+0x1c>
 800bc36:	682b      	ldr	r3, [r5, #0]
 800bc38:	b103      	cbz	r3, 800bc3c <_kill_r+0x1c>
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	bd38      	pop	{r3, r4, r5, pc}
 800bc3e:	bf00      	nop
 800bc40:	200045b0 	.word	0x200045b0

0800bc44 <_getpid_r>:
 800bc44:	f7f5 be6e 	b.w	8001924 <_getpid>

0800bc48 <_fstat_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4d07      	ldr	r5, [pc, #28]	; (800bc68 <_fstat_r+0x20>)
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	4604      	mov	r4, r0
 800bc50:	4608      	mov	r0, r1
 800bc52:	4611      	mov	r1, r2
 800bc54:	602b      	str	r3, [r5, #0]
 800bc56:	f7f5 fecc 	bl	80019f2 <_fstat>
 800bc5a:	1c43      	adds	r3, r0, #1
 800bc5c:	d102      	bne.n	800bc64 <_fstat_r+0x1c>
 800bc5e:	682b      	ldr	r3, [r5, #0]
 800bc60:	b103      	cbz	r3, 800bc64 <_fstat_r+0x1c>
 800bc62:	6023      	str	r3, [r4, #0]
 800bc64:	bd38      	pop	{r3, r4, r5, pc}
 800bc66:	bf00      	nop
 800bc68:	200045b0 	.word	0x200045b0

0800bc6c <_isatty_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4d06      	ldr	r5, [pc, #24]	; (800bc88 <_isatty_r+0x1c>)
 800bc70:	2300      	movs	r3, #0
 800bc72:	4604      	mov	r4, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	602b      	str	r3, [r5, #0]
 800bc78:	f7f5 fecb 	bl	8001a12 <_isatty>
 800bc7c:	1c43      	adds	r3, r0, #1
 800bc7e:	d102      	bne.n	800bc86 <_isatty_r+0x1a>
 800bc80:	682b      	ldr	r3, [r5, #0]
 800bc82:	b103      	cbz	r3, 800bc86 <_isatty_r+0x1a>
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	bd38      	pop	{r3, r4, r5, pc}
 800bc88:	200045b0 	.word	0x200045b0

0800bc8c <_init>:
 800bc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8e:	bf00      	nop
 800bc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc92:	bc08      	pop	{r3}
 800bc94:	469e      	mov	lr, r3
 800bc96:	4770      	bx	lr

0800bc98 <_fini>:
 800bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9a:	bf00      	nop
 800bc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9e:	bc08      	pop	{r3}
 800bca0:	469e      	mov	lr, r3
 800bca2:	4770      	bx	lr
