
HMS_TRY_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  0800b888  0800b888  0001b888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2ac  0800c2ac  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2ac  0800c2ac  0001c2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2b4  0800c2b4  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2b4  0800c2b4  0001c2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2b8  0800c2b8  0001c2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800c2bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000234  0800c4f0  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  0800c4f0  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eda3  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258a  00000000  00000000  0002f007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00031598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00032270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196c7  00000000  00000000  00032e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ce3  00000000  00000000  0004c4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000958bb  00000000  00000000  0005d1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2a9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004900  00000000  00000000  000f2af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000234 	.word	0x20000234
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b870 	.word	0x0800b870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000238 	.word	0x20000238
 80001dc:	0800b870 	.word	0x0800b870

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b0b4      	sub	sp, #208	; 0xd0
 8000f60:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f62:	f001 fa77 	bl	8002454 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f66:	f000 fb3b 	bl	80015e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f6a:	f000 fc25 	bl	80017b8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000f6e:	f000 fbf5 	bl	800175c <MX_I2C1_Init>
	MX_ADC1_Init();
 8000f72:	f000 fba1 	bl	80016b8 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	uart_print_config(9600);
 8000f76:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000f7a:	f004 fd03 	bl	8005984 <uart_print_config>
	USART_INIT(USART6, PORTA, PORTA, 11, 12, 115200);
 8000f7e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	230c      	movs	r3, #12
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	230b      	movs	r3, #11
 8000f8a:	4ab3      	ldr	r2, [pc, #716]	; (8001258 <main+0x2fc>)
 8000f8c:	49b2      	ldr	r1, [pc, #712]	; (8001258 <main+0x2fc>)
 8000f8e:	48b3      	ldr	r0, [pc, #716]	; (800125c <main+0x300>)
 8000f90:	f004 fb8e 	bl	80056b0 <USART_INIT>
//  USART_IT_EN(USART6, 0, 1, 0);
	print("Working\r\n");
 8000f94:	48b2      	ldr	r0, [pc, #712]	; (8001260 <main+0x304>)
 8000f96:	f004 fcd1 	bl	800593c <print>

	LCD_Begin();
 8000f9a:	f005 ff35 	bl	8006e08 <LCD_Begin>
	LCD_SetRotation(0);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f007 f860 	bl	8008064 <LCD_SetRotation>
	//	LCD_FillScreen(BLACK);
	colorgradient(0, 0, TFTWIDTH, TFTHEIGHT, 50);
 8000fa4:	2332      	movs	r3, #50	; 0x32
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fac:	22f0      	movs	r2, #240	; 0xf0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f007 f9da 	bl	800836a <colorgradient>
	HMS_bgdisplay();
 8000fb6:	f000 fc6d 	bl	8001894 <HMS_bgdisplay>

	gpio_config(PORTC, 9, INPUT_MODE, LOW_SPEED, EN_PU, PHPL);
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2109      	movs	r1, #9
 8000fc8:	48a6      	ldr	r0, [pc, #664]	; (8001264 <main+0x308>)
 8000fca:	f004 f809 	bl	8004fe0 <gpio_config>
	gpio_IT_config(PORTC, 9, FALLING_EDGE);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2109      	movs	r1, #9
 8000fd2:	48a4      	ldr	r0, [pc, #656]	; (8001264 <main+0x308>)
 8000fd4:	f004 f904 	bl	80051e0 <gpio_IT_config>
	gpio_IT_EN(9, EXTI9_5_IRQn);
 8000fd8:	2117      	movs	r1, #23
 8000fda:	2009      	movs	r0, #9
 8000fdc:	f004 fb1e 	bl	800561c <gpio_IT_EN>

	uint8_t mlx90614_workingFlag = 1, mlx90614_status = 0;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

	char print_char[PRINT_CHAR_LEN] = { 0 };
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff4:	2260      	movs	r2, #96	; 0x60
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f007 fa1b 	bl	8008434 <memset>

	if (!(mlx90614_init())) {
 8000ffe:	f005 fcb5 	bl	800696c <mlx90614_init>
 8001002:	4603      	mov	r3, r0
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <main+0xbe>
		print("Error in MLX90614 INIT\n");
 800100e:	4896      	ldr	r0, [pc, #600]	; (8001268 <main+0x30c>)
 8001010:	f004 fc94 	bl	800593c <print>
		mlx90614_workingFlag = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	}

	uint32_t max30100_startTime = HAL_GetTick(), max30100_lapsedTime = 500;
 800101a:	f001 fa81 	bl	8002520 <HAL_GetTick>
 800101e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8001022:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001026:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t temp_startTime = HAL_GetTick(), temp_lapsedTime = 500;
 800102a:	f001 fa79 	bl	8002520 <HAL_GetTick>
 800102e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8001032:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint32_t ecg_startTime = HAL_GetTick(), ecg_lapsedTime = 60000;
 800103a:	f001 fa71 	bl	8002520 <HAL_GetTick>
 800103e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8001042:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	uint32_t wifi_startTime = HAL_GetTick(), wifi_lapsedTime = 2000;
 800104a:	f001 fa69 	bl	8002520 <HAL_GetTick>
 800104e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8001052:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	max30100_data_t result = { };
 800105a:	463b      	mov	r3, r7
 800105c:	2224      	movs	r2, #36	; 0x24
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f007 f9e7 	bl	8008434 <memset>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (menu_select_flag == 0) {
 8001066:	4b81      	ldr	r3, [pc, #516]	; (800126c <main+0x310>)
 8001068:	f993 3000 	ldrsb.w	r3, [r3]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d16f      	bne.n	8001150 <main+0x1f4>
			if (mlx90614_workingFlag == 1) {
 8001070:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001074:	2b01      	cmp	r3, #1
 8001076:	d152      	bne.n	800111e <main+0x1c2>
				mlx90614_status = mlx90614_getObject1(&temp);
 8001078:	487d      	ldr	r0, [pc, #500]	; (8001270 <main+0x314>)
 800107a:	f005 fd81 	bl	8006b80 <mlx90614_getObject1>
 800107e:	4603      	mov	r3, r0
 8001080:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
				if ((mlx90614_status == true)
 8001084:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001088:	2b01      	cmp	r3, #1
 800108a:	d144      	bne.n	8001116 <main+0x1ba>
						&& ((HAL_GetTick() - temp_startTime) > temp_lapsedTime)) {
 800108c:	f001 fa48 	bl	8002520 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800109c:	429a      	cmp	r2, r3
 800109e:	d23a      	bcs.n	8001116 <main+0x1ba>
					print("Temp in Celsius: = %0.2f\n", temp);
 80010a0:	4b73      	ldr	r3, [pc, #460]	; (8001270 <main+0x314>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa57 	bl	8000558 <__aeabi_f2d>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4871      	ldr	r0, [pc, #452]	; (8001274 <main+0x318>)
 80010b0:	f004 fc44 	bl	800593c <print>
					if ((temp > 0) && (temp < 100)) {
 80010b4:	4b6e      	ldr	r3, [pc, #440]	; (8001270 <main+0x314>)
 80010b6:	edd3 7a00 	vldr	s15, [r3]
 80010ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	dd23      	ble.n	800110c <main+0x1b0>
 80010c4:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <main+0x314>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001278 <main+0x31c>
 80010ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	d519      	bpl.n	800110c <main+0x1b0>
						LCD_SetTextColor(WHITE, BLUE);
 80010d8:	211f      	movs	r1, #31
 80010da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010de:	f006 ffa9 	bl	8008034 <LCD_SetTextColor>
						LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 80010e2:	21ba      	movs	r1, #186	; 0xba
 80010e4:	2082      	movs	r0, #130	; 0x82
 80010e6:	f006 ff77 	bl	8007fd8 <LCD_SetCursor>
						LCD_SetTextSize(2);
 80010ea:	2002      	movs	r0, #2
 80010ec:	f006 ff8c 	bl	8008008 <LCD_SetTextSize>
						LCD_Printf("%0.2f'C", temp);
 80010f0:	4b5f      	ldr	r3, [pc, #380]	; (8001270 <main+0x314>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa2f 	bl	8000558 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	485f      	ldr	r0, [pc, #380]	; (800127c <main+0x320>)
 8001100:	f006 fe82 	bl	8007e08 <LCD_Printf>
						globalTemp = temp;
 8001104:	4b5a      	ldr	r3, [pc, #360]	; (8001270 <main+0x314>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a5d      	ldr	r2, [pc, #372]	; (8001280 <main+0x324>)
 800110a:	6013      	str	r3, [r2, #0]
					}
					temp_startTime = HAL_GetTick();
 800110c:	f001 fa08 	bl	8002520 <HAL_GetTick>
 8001110:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8001114:	e1fd      	b.n	8001512 <main+0x5b6>
//					Delay(500);
				} else {
					mlx90614_workingFlag = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800111c:	e1f9      	b.n	8001512 <main+0x5b6>
				}
			} else {
				if (!(mlx90614_init())) {
 800111e:	f005 fc25 	bl	800696c <mlx90614_init>
 8001122:	4603      	mov	r3, r0
 8001124:	f083 0301 	eor.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00c      	beq.n	8001148 <main+0x1ec>
					print("Error in MLX90614 INIT\n");
 800112e:	484e      	ldr	r0, [pc, #312]	; (8001268 <main+0x30c>)
 8001130:	f004 fc04 	bl	800593c <print>
					MX_I2C1_Init();
 8001134:	f000 fb12 	bl	800175c <MX_I2C1_Init>
					Delay(500);
 8001138:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800113c:	f001 f9fc 	bl	8002538 <HAL_Delay>
					mlx90614_workingFlag = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8001146:	e1e4      	b.n	8001512 <main+0x5b6>
				} else {
					mlx90614_workingFlag = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800114e:	e1e0      	b.n	8001512 <main+0x5b6>
				}
			}
		} else if (menu_select_flag == 1) {
 8001150:	4b46      	ldr	r3, [pc, #280]	; (800126c <main+0x310>)
 8001152:	f993 3000 	ldrsb.w	r3, [r3]
 8001156:	2b01      	cmp	r3, #1
 8001158:	f040 811a 	bne.w	8001390 <main+0x434>
			if (max30100_update(&max30100, &result) != HAL_OK) {
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4848      	ldr	r0, [pc, #288]	; (8001284 <main+0x328>)
 8001162:	f004 fd3b 	bl	8005bdc <max30100_update>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d01d      	beq.n	80011a8 <main+0x24c>
				print("Error Reading...Retrying\n");
 800116c:	4846      	ldr	r0, [pc, #280]	; (8001288 <main+0x32c>)
 800116e:	f004 fbe5 	bl	800593c <print>
				MX_I2C1_Init();
 8001172:	f000 faf3 	bl	800175c <MX_I2C1_Init>
				max30100_init(&max30100, &hi2c1,
 8001176:	2300      	movs	r3, #0
 8001178:	9306      	str	r3, [sp, #24]
 800117a:	2301      	movs	r3, #1
 800117c:	9305      	str	r3, [sp, #20]
 800117e:	2332      	movs	r3, #50	; 0x32
 8001180:	9304      	str	r3, [sp, #16]
 8001182:	230f      	movs	r3, #15
 8001184:	9303      	str	r3, [sp, #12]
 8001186:	2303      	movs	r3, #3
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2308      	movs	r3, #8
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	2303      	movs	r3, #3
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	493d      	ldr	r1, [pc, #244]	; (800128c <main+0x330>)
 8001198:	483a      	ldr	r0, [pc, #232]	; (8001284 <main+0x328>)
 800119a:	f004 fc09 	bl	80059b0 <max30100_init>
				MAX30100_DEFAULT_MEAN_FILTER_SIZE,
				MAX30100_DEFAULT_PULSE_BPM_SAMPLE_SIZE,
				true,
				false);
//				max30100_resume(&max30100);
				Delay(1000);
 800119e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a2:	f001 f9c9 	bl	8002538 <HAL_Delay>
 80011a6:	e1b4      	b.n	8001512 <main+0x5b6>
			} else {
				if (max30100_off) {
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <main+0x334>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <main+0x266>
					max30100_resume(&max30100);
 80011b0:	4834      	ldr	r0, [pc, #208]	; (8001284 <main+0x328>)
 80011b2:	f005 f983 	bl	80064bc <max30100_resume>
					max30100_off = false;
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <main+0x334>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
					max30100_on = true;
 80011bc:	4b35      	ldr	r3, [pc, #212]	; (8001294 <main+0x338>)
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
				}
				hrBeatTimer = HAL_GetTick();
 80011c2:	f001 f9ad 	bl	8002520 <HAL_GetTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <main+0x33c>)
 80011cc:	801a      	strh	r2, [r3, #0]
				if (result.pulse_detected) {
 80011ce:	783b      	ldrb	r3, [r7, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d009      	beq.n	80011e8 <main+0x28c>
					print("BEAT: %d\n", beatCounter++);
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <main+0x340>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	b2d1      	uxtb	r1, r2
 80011dc:	4a2f      	ldr	r2, [pc, #188]	; (800129c <main+0x340>)
 80011de:	7011      	strb	r1, [r2, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	482f      	ldr	r0, [pc, #188]	; (80012a0 <main+0x344>)
 80011e4:	f004 fbaa 	bl	800593c <print>
				}
				if (HAL_GetTick() - max30100_startTime > max30100_lapsedTime) {
 80011e8:	f001 f99a 	bl	8002520 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f080 80c5 	bcs.w	8001388 <main+0x42c>
					if (result.ir_dc_value < 10000.00) {
 80011fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001202:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80012a4 <main+0x348>
 8001206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d50b      	bpl.n	8001228 <main+0x2cc>
						print("No finger Detected\n");
 8001210:	4825      	ldr	r0, [pc, #148]	; (80012a8 <main+0x34c>)
 8001212:	f004 fb93 	bl	800593c <print>
						max30100.current_bpm = 0.0;
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <main+0x328>)
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
						max30100.current_spO2 = 0.0;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <main+0x328>)
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	679a      	str	r2, [r3, #120]	; 0x78
 8001226:	e0ab      	b.n	8001380 <main+0x424>
					} else {
						if (beatCounter < BEAT_COUNTER_LIMIT) {
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <main+0x340>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b18      	cmp	r3, #24
 800122e:	d83f      	bhi.n	80012b0 <main+0x354>
							print("BPM: %0.2f | SpO2: %0.2f%%\n",
									result.heart_bpm, result.spO2);
 8001230:	687b      	ldr	r3, [r7, #4]
							print("BPM: %0.2f | SpO2: %0.2f%%\n",
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f990 	bl	8000558 <__aeabi_f2d>
 8001238:	4604      	mov	r4, r0
 800123a:	460d      	mov	r5, r1
									result.heart_bpm, result.spO2);
 800123c:	697b      	ldr	r3, [r7, #20]
							print("BPM: %0.2f | SpO2: %0.2f%%\n",
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f98a 	bl	8000558 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9cd 2300 	strd	r2, r3, [sp]
 800124c:	4622      	mov	r2, r4
 800124e:	462b      	mov	r3, r5
 8001250:	4816      	ldr	r0, [pc, #88]	; (80012ac <main+0x350>)
 8001252:	f004 fb73 	bl	800593c <print>
 8001256:	e093      	b.n	8001380 <main+0x424>
 8001258:	40020000 	.word	0x40020000
 800125c:	40011400 	.word	0x40011400
 8001260:	0800b888 	.word	0x0800b888
 8001264:	40020800 	.word	0x40020800
 8001268:	0800b894 	.word	0x0800b894
 800126c:	20000010 	.word	0x20000010
 8001270:	20000308 	.word	0x20000308
 8001274:	0800b8ac 	.word	0x0800b8ac
 8001278:	42c80000 	.word	0x42c80000
 800127c:	0800b8c8 	.word	0x0800b8c8
 8001280:	20000000 	.word	0x20000000
 8001284:	20000314 	.word	0x20000314
 8001288:	0800b8d0 	.word	0x0800b8d0
 800128c:	20000298 	.word	0x20000298
 8001290:	20000011 	.word	0x20000011
 8001294:	2000039c 	.word	0x2000039c
 8001298:	2000039a 	.word	0x2000039a
 800129c:	20000394 	.word	0x20000394
 80012a0:	0800b8ec 	.word	0x0800b8ec
 80012a4:	461c4000 	.word	0x461c4000
 80012a8:	0800b8f8 	.word	0x0800b8f8
 80012ac:	0800b90c 	.word	0x0800b90c
						} else if (beatCounter > BEAT_COUNTER_LIMIT) {
 80012b0:	4bae      	ldr	r3, [pc, #696]	; (800156c <main+0x610>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b19      	cmp	r3, #25
 80012b6:	d963      	bls.n	8001380 <main+0x424>
							finalHR = result.heart_bpm;
 80012b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c0:	ee17 3a90 	vmov	r3, s15
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4baa      	ldr	r3, [pc, #680]	; (8001570 <main+0x614>)
 80012c8:	801a      	strh	r2, [r3, #0]
							finalSpO2 = result.spO2;
 80012ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d2:	ee17 3a90 	vmov	r3, s15
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	4ba6      	ldr	r3, [pc, #664]	; (8001574 <main+0x618>)
 80012da:	801a      	strh	r2, [r3, #0]
							print(
 80012dc:	4ba4      	ldr	r3, [pc, #656]	; (8001570 <main+0x614>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4ba3      	ldr	r3, [pc, #652]	; (8001574 <main+0x618>)
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	461a      	mov	r2, r3
 80012ec:	48a2      	ldr	r0, [pc, #648]	; (8001578 <main+0x61c>)
 80012ee:	f004 fb25 	bl	800593c <print>
									"//===============| Final HR: %d | SpO2: %d%%|==============//\n",
									finalHR, finalSpO2);
							beatCounter = 0;
 80012f2:	4b9e      	ldr	r3, [pc, #632]	; (800156c <main+0x610>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]

							if ((finalHR > 0) && (finalHR < 100)) {
 80012f8:	4b9d      	ldr	r3, [pc, #628]	; (8001570 <main+0x614>)
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dd1d      	ble.n	800133e <main+0x3e2>
 8001302:	4b9b      	ldr	r3, [pc, #620]	; (8001570 <main+0x614>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	2b63      	cmp	r3, #99	; 0x63
 800130a:	dc18      	bgt.n	800133e <main+0x3e2>
								globalHR = finalHR;
 800130c:	4b98      	ldr	r3, [pc, #608]	; (8001570 <main+0x614>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	461a      	mov	r2, r3
 8001314:	4b99      	ldr	r3, [pc, #612]	; (800157c <main+0x620>)
 8001316:	601a      	str	r2, [r3, #0]
								LCD_SetTextColor(WHITE, RED);
 8001318:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800131c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001320:	f006 fe88 	bl	8008034 <LCD_SetTextColor>
								LCD_SetCursor(155, (TFTHEIGHT / 3) + 20);
 8001324:	217e      	movs	r1, #126	; 0x7e
 8001326:	209b      	movs	r0, #155	; 0x9b
 8001328:	f006 fe56 	bl	8007fd8 <LCD_SetCursor>
								LCD_SetTextSize(2);
 800132c:	2002      	movs	r0, #2
 800132e:	f006 fe6b 	bl	8008008 <LCD_SetTextSize>
								LCD_Printf("%dBPM", globalHR);
 8001332:	4b92      	ldr	r3, [pc, #584]	; (800157c <main+0x620>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4619      	mov	r1, r3
 8001338:	4891      	ldr	r0, [pc, #580]	; (8001580 <main+0x624>)
 800133a:	f006 fd65 	bl	8007e08 <LCD_Printf>
							}
							if ((finalSpO2 > 0) && (finalSpO2 < 100)) {
 800133e:	4b8d      	ldr	r3, [pc, #564]	; (8001574 <main+0x618>)
 8001340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001344:	2b00      	cmp	r3, #0
 8001346:	dd1b      	ble.n	8001380 <main+0x424>
 8001348:	4b8a      	ldr	r3, [pc, #552]	; (8001574 <main+0x618>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	2b63      	cmp	r3, #99	; 0x63
 8001350:	dc16      	bgt.n	8001380 <main+0x424>
								globalSpO2 = finalSpO2;
 8001352:	4b88      	ldr	r3, [pc, #544]	; (8001574 <main+0x618>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	461a      	mov	r2, r3
 800135a:	4b8a      	ldr	r3, [pc, #552]	; (8001584 <main+0x628>)
 800135c:	601a      	str	r2, [r3, #0]
								LCD_SetTextColor(WHITE, GREEN);
 800135e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001362:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001366:	f006 fe65 	bl	8008034 <LCD_SetTextColor>
								LCD_SetCursor(175, (TFTHEIGHT / 3) + 50);
 800136a:	219c      	movs	r1, #156	; 0x9c
 800136c:	20af      	movs	r0, #175	; 0xaf
 800136e:	f006 fe33 	bl	8007fd8 <LCD_SetCursor>
								LCD_Printf("%d%%", finalSpO2);
 8001372:	4b80      	ldr	r3, [pc, #512]	; (8001574 <main+0x618>)
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001378:	4619      	mov	r1, r3
 800137a:	4883      	ldr	r0, [pc, #524]	; (8001588 <main+0x62c>)
 800137c:	f006 fd44 	bl	8007e08 <LCD_Printf>
//							print("Please reposition your finger\n\r");
//						}

					}

					max30100_startTime = HAL_GetTick();
 8001380:	f001 f8ce 	bl	8002520 <HAL_GetTick>
 8001384:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				}
				HAL_Delay(10);
 8001388:	200a      	movs	r0, #10
 800138a:	f001 f8d5 	bl	8002538 <HAL_Delay>
 800138e:	e0c0      	b.n	8001512 <main+0x5b6>

//				print("%0.2f, %0.2f\n", result.dc_filtered_ir,
//						result.dc_filtered_red);
			}
		} else if (menu_select_flag == 2) {
 8001390:	4b7e      	ldr	r3, [pc, #504]	; (800158c <main+0x630>)
 8001392:	f993 3000 	ldrsb.w	r3, [r3]
 8001396:	2b02      	cmp	r3, #2
 8001398:	f040 809f 	bne.w	80014da <main+0x57e>
			if (max30100_on) {
 800139c:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <main+0x634>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <main+0x460>
				max30100_shutdown(&max30100);
 80013a4:	487b      	ldr	r0, [pc, #492]	; (8001594 <main+0x638>)
 80013a6:	f005 f869 	bl	800647c <max30100_shutdown>
				HAL_I2C_DeInit(&hi2c1);
 80013aa:	487b      	ldr	r0, [pc, #492]	; (8001598 <main+0x63c>)
 80013ac:	f002 f942 	bl	8003634 <HAL_I2C_DeInit>
				max30100_off = true;
 80013b0:	4b7a      	ldr	r3, [pc, #488]	; (800159c <main+0x640>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
				max30100_on = false;
 80013b6:	4b76      	ldr	r3, [pc, #472]	; (8001590 <main+0x634>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
			}
			adcDataPrev = adcData;
 80013bc:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <main+0x644>)
 80013be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013c2:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <main+0x648>)
 80013c4:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Start(&hadc1);
 80013c6:	4878      	ldr	r0, [pc, #480]	; (80015a8 <main+0x64c>)
 80013c8:	f001 f91e 	bl	8002608 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80013cc:	2164      	movs	r1, #100	; 0x64
 80013ce:	4876      	ldr	r0, [pc, #472]	; (80015a8 <main+0x64c>)
 80013d0:	f001 f9ce 	bl	8002770 <HAL_ADC_PollForConversion>
			adcData = (uint16_t) HAL_ADC_GetValue(&hadc1);
 80013d4:	4874      	ldr	r0, [pc, #464]	; (80015a8 <main+0x64c>)
 80013d6:	f001 fa56 	bl	8002886 <HAL_ADC_GetValue>
 80013da:	4603      	mov	r3, r0
 80013dc:	b21a      	sxth	r2, r3
 80013de:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <main+0x644>)
 80013e0:	801a      	strh	r2, [r3, #0]
			sprintf(print_char, "Analog Val: %d\n", adcData);
 80013e2:	4b6f      	ldr	r3, [pc, #444]	; (80015a0 <main+0x644>)
 80013e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e8:	461a      	mov	r2, r3
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	496f      	ldr	r1, [pc, #444]	; (80015ac <main+0x650>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 fd81 	bl	8008ef8 <siprintf>
			USART_WRITE(USART2, print_char, strlen(print_char), 10);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe fef0 	bl	80001e0 <strlen>
 8001400:	4602      	mov	r2, r0
 8001402:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001406:	230a      	movs	r3, #10
 8001408:	4869      	ldr	r0, [pc, #420]	; (80015b0 <main+0x654>)
 800140a:	f004 fa67 	bl	80058dc <USART_WRITE>

			if ((adcData - adcDataPrev) > 800) {
 800140e:	4b64      	ldr	r3, [pc, #400]	; (80015a0 <main+0x644>)
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	461a      	mov	r2, r3
 8001416:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <main+0x648>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001422:	dd04      	ble.n	800142e <main+0x4d2>
				ECG_HR += 1;
 8001424:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <main+0x658>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a62      	ldr	r2, [pc, #392]	; (80015b4 <main+0x658>)
 800142c:	6013      	str	r3, [r2, #0]
			}

//			LCD_ECGAnimation();

			if ((HAL_GetTick() - ecg_startTime) > ecg_lapsedTime) {
 800142e:	f001 f877 	bl	8002520 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800143e:	429a      	cmp	r2, r3
 8001440:	d267      	bcs.n	8001512 <main+0x5b6>
				if ((ECG_HR > 0) && (ECG_HR < 100))
 8001442:	4b5c      	ldr	r3, [pc, #368]	; (80015b4 <main+0x658>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dd07      	ble.n	800145a <main+0x4fe>
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <main+0x658>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b63      	cmp	r3, #99	; 0x63
 8001450:	dc03      	bgt.n	800145a <main+0x4fe>
					globalECG = ECG_HR;
 8001452:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <main+0x658>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <main+0x65c>)
 8001458:	6013      	str	r3, [r2, #0]

				sprintf(print_char,
 800145a:	4b56      	ldr	r3, [pc, #344]	; (80015b4 <main+0x658>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4956      	ldr	r1, [pc, #344]	; (80015bc <main+0x660>)
 8001464:	4618      	mov	r0, r3
 8001466:	f007 fd47 	bl	8008ef8 <siprintf>
						"<===========|The ECG Heart Rate is: %d|=========>\r\n",
						ECG_HR);
				USART_WRITE(USART2, print_char, strlen(print_char), 10);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe feb6 	bl	80001e0 <strlen>
 8001474:	4602      	mov	r2, r0
 8001476:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800147a:	230a      	movs	r3, #10
 800147c:	484c      	ldr	r0, [pc, #304]	; (80015b0 <main+0x654>)
 800147e:	f004 fa2d 	bl	80058dc <USART_WRITE>
				LCD_SetTextColor(BLACK, WHITE);
 8001482:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001486:	2000      	movs	r0, #0
 8001488:	f006 fdd4 	bl	8008034 <LCD_SetTextColor>
				LCD_SetCursor(190, 270);
 800148c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001490:	20be      	movs	r0, #190	; 0xbe
 8001492:	f006 fda1 	bl	8007fd8 <LCD_SetCursor>
				LCD_SetTextSize(2);
 8001496:	2002      	movs	r0, #2
 8001498:	f006 fdb6 	bl	8008008 <LCD_SetTextSize>
				if (globalECG < 10)
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <main+0x65c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b09      	cmp	r3, #9
 80014a2:	dc06      	bgt.n	80014b2 <main+0x556>
					LCD_Printf(" %d", globalECG);
 80014a4:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <main+0x65c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4845      	ldr	r0, [pc, #276]	; (80015c0 <main+0x664>)
 80014ac:	f006 fcac 	bl	8007e08 <LCD_Printf>
 80014b0:	e009      	b.n	80014c6 <main+0x56a>
				else if(globalECG < 100)
 80014b2:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <main+0x65c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b63      	cmp	r3, #99	; 0x63
 80014b8:	dc05      	bgt.n	80014c6 <main+0x56a>
					LCD_Printf("%d", globalECG);
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <main+0x65c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	4840      	ldr	r0, [pc, #256]	; (80015c4 <main+0x668>)
 80014c2:	f006 fca1 	bl	8007e08 <LCD_Printf>
				ECG_HR = 0;
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <main+0x658>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
				LCD_ECGAnimation();
 80014cc:	f000 fd60 	bl	8001f90 <LCD_ECGAnimation>
				ecg_startTime = HAL_GetTick();
 80014d0:	f001 f826 	bl	8002520 <HAL_GetTick>
 80014d4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80014d8:	e01b      	b.n	8001512 <main+0x5b6>
			}

		} else if ((menu_select_flag < -1) && (menu_select_flag > 3)) {
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <main+0x630>)
 80014dc:	f993 3000 	ldrsb.w	r3, [r3]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	da15      	bge.n	8001512 <main+0x5b6>
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <main+0x630>)
 80014e8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	dd10      	ble.n	8001512 <main+0x5b6>
			menu_select_flag = -1;
 80014f0:	4b26      	ldr	r3, [pc, #152]	; (800158c <main+0x630>)
 80014f2:	22ff      	movs	r2, #255	; 0xff
 80014f4:	701a      	strb	r2, [r3, #0]
			print("Oh no, a Glitch!!\n\r");
 80014f6:	4834      	ldr	r0, [pc, #208]	; (80015c8 <main+0x66c>)
 80014f8:	f004 fa20 	bl	800593c <print>
			Delay(500);
 80014fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001500:	f001 f81a 	bl	8002538 <HAL_Delay>
			print("We're good\n\r");
 8001504:	4831      	ldr	r0, [pc, #196]	; (80015cc <main+0x670>)
 8001506:	f004 fa19 	bl	800593c <print>
			Delay(500);
 800150a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150e:	f001 f813 	bl	8002538 <HAL_Delay>
		}

		if ((HAL_GetTick() - wifi_startTime) > wifi_lapsedTime) {
 8001512:	f001 f805 	bl	8002520 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001522:	429a      	cmp	r2, r3
 8001524:	f4bf ad9f 	bcs.w	8001066 <main+0x10a>
			sprintf(globalStr, "T:%0.2f|H:%d|S:%d|E:%d\r\n", globalTemp,
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <main+0x674>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f813 	bl	8000558 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4911      	ldr	r1, [pc, #68]	; (800157c <main+0x620>)
 8001538:	6809      	ldr	r1, [r1, #0]
 800153a:	4812      	ldr	r0, [pc, #72]	; (8001584 <main+0x628>)
 800153c:	6800      	ldr	r0, [r0, #0]
 800153e:	4c1e      	ldr	r4, [pc, #120]	; (80015b8 <main+0x65c>)
 8001540:	6824      	ldr	r4, [r4, #0]
 8001542:	9402      	str	r4, [sp, #8]
 8001544:	9001      	str	r0, [sp, #4]
 8001546:	9100      	str	r1, [sp, #0]
 8001548:	4922      	ldr	r1, [pc, #136]	; (80015d4 <main+0x678>)
 800154a:	4823      	ldr	r0, [pc, #140]	; (80015d8 <main+0x67c>)
 800154c:	f007 fcd4 	bl	8008ef8 <siprintf>
					globalHR, globalSpO2, globalECG);
			USART_WRITE(USART6, globalStr, strlen(globalStr), 10);
 8001550:	4821      	ldr	r0, [pc, #132]	; (80015d8 <main+0x67c>)
 8001552:	f7fe fe45 	bl	80001e0 <strlen>
 8001556:	4602      	mov	r2, r0
 8001558:	230a      	movs	r3, #10
 800155a:	491f      	ldr	r1, [pc, #124]	; (80015d8 <main+0x67c>)
 800155c:	481f      	ldr	r0, [pc, #124]	; (80015dc <main+0x680>)
 800155e:	f004 f9bd 	bl	80058dc <USART_WRITE>
			wifi_startTime = HAL_GetTick();
 8001562:	f000 ffdd 	bl	8002520 <HAL_GetTick>
 8001566:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		if (menu_select_flag == 0) {
 800156a:	e57c      	b.n	8001066 <main+0x10a>
 800156c:	20000394 	.word	0x20000394
 8001570:	20000396 	.word	0x20000396
 8001574:	20000398 	.word	0x20000398
 8001578:	0800b928 	.word	0x0800b928
 800157c:	20000004 	.word	0x20000004
 8001580:	0800b968 	.word	0x0800b968
 8001584:	20000008 	.word	0x20000008
 8001588:	0800b970 	.word	0x0800b970
 800158c:	20000010 	.word	0x20000010
 8001590:	2000039c 	.word	0x2000039c
 8001594:	20000314 	.word	0x20000314
 8001598:	20000298 	.word	0x20000298
 800159c:	20000011 	.word	0x20000011
 80015a0:	2000030c 	.word	0x2000030c
 80015a4:	2000030e 	.word	0x2000030e
 80015a8:	20000250 	.word	0x20000250
 80015ac:	0800b978 	.word	0x0800b978
 80015b0:	40004400 	.word	0x40004400
 80015b4:	20000310 	.word	0x20000310
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	0800b988 	.word	0x0800b988
 80015c0:	0800b9bc 	.word	0x0800b9bc
 80015c4:	0800b9c0 	.word	0x0800b9c0
 80015c8:	0800b9c4 	.word	0x0800b9c4
 80015cc:	0800b9d8 	.word	0x0800b9d8
 80015d0:	20000000 	.word	0x20000000
 80015d4:	0800b9e8 	.word	0x0800b9e8
 80015d8:	200002ec 	.word	0x200002ec
 80015dc:	40011400 	.word	0x40011400

080015e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	; 0x50
 80015e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	2230      	movs	r2, #48	; 0x30
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f006 ff20 	bl	8008434 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <SystemClock_Config+0xd0>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a28      	ldr	r2, [pc, #160]	; (80016b0 <SystemClock_Config+0xd0>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <SystemClock_Config+0xd0>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <SystemClock_Config+0xd4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800162c:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <SystemClock_Config+0xd4>)
 800162e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <SystemClock_Config+0xd4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	2301      	movs	r3, #1
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001648:	2310      	movs	r3, #16
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164c:	2302      	movs	r3, #2
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001650:	2300      	movs	r3, #0
 8001652:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001654:	2310      	movs	r3, #16
 8001656:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001658:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800165c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800165e:	2304      	movs	r3, #4
 8001660:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001662:	2307      	movs	r3, #7
 8001664:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	4618      	mov	r0, r3
 800166c:	f002 ffac 	bl	80045c8 <HAL_RCC_OscConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x9a>
		Error_Handler();
 8001676:	f000 fce3 	bl	8002040 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800167a:	230f      	movs	r3, #15
 800167c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167e:	2302      	movs	r3, #2
 8001680:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2102      	movs	r1, #2
 8001696:	4618      	mov	r0, r3
 8001698:	f003 fa0e 	bl	8004ab8 <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0xc6>
		Error_Handler();
 80016a2:	f000 fccd 	bl	8002040 <Error_Handler>
	}
}
 80016a6:	bf00      	nop
 80016a8:	3750      	adds	r7, #80	; 0x50
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000

080016b8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_ADC1_Init+0x98>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016ce:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_ADC1_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_ADC1_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_ADC1_Init+0x98>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_ADC1_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_ADC1_Init+0x98>)
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <MX_ADC1_Init+0xa0>)
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_ADC1_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_ADC1_Init+0x98>)
 8001706:	2201      	movs	r2, #1
 8001708:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_ADC1_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_ADC1_Init+0x98>)
 8001714:	2201      	movs	r2, #1
 8001716:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <MX_ADC1_Init+0x98>)
 800171a:	f000 ff31 	bl	8002580 <HAL_ADC_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001724:	f000 fc8c 	bl	8002040 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001728:	230e      	movs	r3, #14
 800172a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800172c:	2301      	movs	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_ADC1_Init+0x98>)
 800173a:	f001 f8b1 	bl	80028a0 <HAL_ADC_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001744:	f000 fc7c 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000250 	.word	0x20000250
 8001754:	40012000 	.word	0x40012000
 8001758:	0f000001 	.word	0x0f000001

0800175c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_I2C1_Init+0x50>)
 8001762:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <MX_I2C1_Init+0x54>)
 8001764:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_I2C1_Init+0x50>)
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <MX_I2C1_Init+0x58>)
 800176a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_I2C1_Init+0x50>)
 800177a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <MX_I2C1_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_I2C1_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <MX_I2C1_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_I2C1_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_I2C1_Init+0x50>)
 800179a:	f001 fe07 	bl	80033ac <HAL_I2C_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80017a4:	f000 fc4c 	bl	8002040 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000298 	.word	0x20000298
 80017b0:	40005400 	.word	0x40005400
 80017b4:	000186a0 	.word	0x000186a0

080017b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <MX_GPIO_Init+0xd0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a2c      	ldr	r2, [pc, #176]	; (8001888 <MX_GPIO_Init+0xd0>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <MX_GPIO_Init+0xd0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <MX_GPIO_Init+0xd0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a25      	ldr	r2, [pc, #148]	; (8001888 <MX_GPIO_Init+0xd0>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <MX_GPIO_Init+0xd0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MX_GPIO_Init+0xd0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <MX_GPIO_Init+0xd0>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <MX_GPIO_Init+0xd0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_GPIO_Init+0xd0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <MX_GPIO_Init+0xd0>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_GPIO_Init+0xd0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2120      	movs	r1, #32
 8001842:	4812      	ldr	r0, [pc, #72]	; (800188c <MX_GPIO_Init+0xd4>)
 8001844:	f001 fd98 	bl	8003378 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800184e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001852:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	480c      	ldr	r0, [pc, #48]	; (8001890 <MX_GPIO_Init+0xd8>)
 8001860:	f001 fb22 	bl	8002ea8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001864:	2320      	movs	r3, #32
 8001866:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_GPIO_Init+0xd4>)
 800187c:	f001 fb14 	bl	8002ea8 <HAL_GPIO_Init>

}
 8001880:	bf00      	nop
 8001882:	3728      	adds	r7, #40	; 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020800 	.word	0x40020800

08001894 <HMS_bgdisplay>:

/* USER CODE BEGIN 4 */

void HMS_bgdisplay(void) {
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af08      	add	r7, sp, #32

	//===================== | Border |===============================//
	for (uint16_t i = 5; i > 0; i--) {
 800189a:	2305      	movs	r3, #5
 800189c:	80fb      	strh	r3, [r7, #6]
 800189e:	e019      	b.n	80018d4 <HMS_bgdisplay+0x40>
		LCD_DrawRect(i, i, TFTWIDTH - 2 * i, TFTHEIGHT - 2 * i, WHITE);
 80018a0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80018a4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80018bc:	b29b      	uxth	r3, r3
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80018c8:	9400      	str	r4, [sp, #0]
 80018ca:	f005 fcde 	bl	800728a <LCD_DrawRect>
	for (uint16_t i = 5; i > 0; i--) {
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	80fb      	strh	r3, [r7, #6]
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1e2      	bne.n	80018a0 <HMS_bgdisplay+0xc>
	}

	LCD_DrawHBorder(0, TFTHEIGHT / 3, TFTWIDTH, WHITE, 5);
 80018da:	2305      	movs	r3, #5
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e2:	22f0      	movs	r2, #240	; 0xf0
 80018e4:	216a      	movs	r1, #106	; 0x6a
 80018e6:	2000      	movs	r0, #0
 80018e8:	f005 f9da 	bl	8006ca0 <LCD_DrawHBorder>
	LCD_DrawHBorder(0, 2 * (TFTHEIGHT / 3), TFTWIDTH, WHITE, 5);
 80018ec:	2305      	movs	r3, #5
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f4:	22f0      	movs	r2, #240	; 0xf0
 80018f6:	21d4      	movs	r1, #212	; 0xd4
 80018f8:	2000      	movs	r0, #0
 80018fa:	f005 f9d1 	bl	8006ca0 <LCD_DrawHBorder>
	//===============================================================//

	//===================== | Box 1 |===============================//

	LCD_DrawButton1(" ", 20, 20, TFTWIDTH - 40, (TFTHEIGHT / 3) - 40, 10, CYAN,
 80018fe:	2302      	movs	r3, #2
 8001900:	9307      	str	r3, [sp, #28]
 8001902:	2302      	movs	r3, #2
 8001904:	9306      	str	r3, [sp, #24]
 8001906:	2302      	movs	r3, #2
 8001908:	9305      	str	r3, [sp, #20]
 800190a:	2300      	movs	r3, #0
 800190c:	9304      	str	r3, [sp, #16]
 800190e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001912:	9303      	str	r3, [sp, #12]
 8001914:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001918:	9302      	str	r3, [sp, #8]
 800191a:	230a      	movs	r3, #10
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	2342      	movs	r3, #66	; 0x42
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	23c8      	movs	r3, #200	; 0xc8
 8001924:	2214      	movs	r2, #20
 8001926:	2114      	movs	r1, #20
 8001928:	484b      	ldr	r0, [pc, #300]	; (8001a58 <HMS_bgdisplay+0x1c4>)
 800192a:	f005 f955 	bl	8006bd8 <LCD_DrawButton1>
	WHITE, 0, 2, 2, 2);

	LCD_SetTextSize(2);
 800192e:	2002      	movs	r0, #2
 8001930:	f006 fb6a 	bl	8008008 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, CYAN);
 8001934:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001938:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800193c:	f006 fb7a 	bl	8008034 <LCD_SetTextColor>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 25);
 8001940:	2119      	movs	r1, #25
 8001942:	2058      	movs	r0, #88	; 0x58
 8001944:	f006 fb48 	bl	8007fd8 <LCD_SetCursor>
	LCD_Printf("Health");
 8001948:	4844      	ldr	r0, [pc, #272]	; (8001a5c <HMS_bgdisplay+0x1c8>)
 800194a:	f006 fa5d 	bl	8007e08 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) - 10, 45);
 800194e:	212d      	movs	r1, #45	; 0x2d
 8001950:	203f      	movs	r0, #63	; 0x3f
 8001952:	f006 fb41 	bl	8007fd8 <LCD_SetCursor>
	LCD_Printf("Monitoring");
 8001956:	4842      	ldr	r0, [pc, #264]	; (8001a60 <HMS_bgdisplay+0x1cc>)
 8001958:	f006 fa56 	bl	8007e08 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 65);
 800195c:	2141      	movs	r1, #65	; 0x41
 800195e:	2058      	movs	r0, #88	; 0x58
 8001960:	f006 fb3a 	bl	8007fd8 <LCD_SetCursor>
	LCD_Printf("System");
 8001964:	483f      	ldr	r0, [pc, #252]	; (8001a64 <HMS_bgdisplay+0x1d0>)
 8001966:	f006 fa4f 	bl	8007e08 <LCD_Printf>

	//===============================================================//

	//===================== | Box 2 |===============================//

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 15, TFTWIDTH - 35, 25, 5, RED);
 800196a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2305      	movs	r3, #5
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2319      	movs	r3, #25
 8001976:	22cd      	movs	r2, #205	; 0xcd
 8001978:	2179      	movs	r1, #121	; 0x79
 800197a:	200f      	movs	r0, #15
 800197c:	f006 f8a0 	bl	8007ac0 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, RED);
 8001980:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001984:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001988:	f006 fb54 	bl	8008034 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 20);
 800198c:	217e      	movs	r1, #126	; 0x7e
 800198e:	2014      	movs	r0, #20
 8001990:	f006 fb22 	bl	8007fd8 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8001994:	2002      	movs	r0, #2
 8001996:	f006 fb37 	bl	8008008 <LCD_SetTextSize>
	LCD_Printf("H.Rate: ");
 800199a:	4833      	ldr	r0, [pc, #204]	; (8001a68 <HMS_bgdisplay+0x1d4>)
 800199c:	f006 fa34 	bl	8007e08 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 45, TFTWIDTH - 35, 25, 5, GREEN);
 80019a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	2305      	movs	r3, #5
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2319      	movs	r3, #25
 80019ac:	22cd      	movs	r2, #205	; 0xcd
 80019ae:	2197      	movs	r1, #151	; 0x97
 80019b0:	200f      	movs	r0, #15
 80019b2:	f006 f885 	bl	8007ac0 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, GREEN);
 80019b6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80019ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019be:	f006 fb39 	bl	8008034 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 50);
 80019c2:	219c      	movs	r1, #156	; 0x9c
 80019c4:	2014      	movs	r0, #20
 80019c6:	f006 fb07 	bl	8007fd8 <LCD_SetCursor>
	LCD_SetTextSize(2);
 80019ca:	2002      	movs	r0, #2
 80019cc:	f006 fb1c 	bl	8008008 <LCD_SetTextSize>
	LCD_Printf("SpO2: ");
 80019d0:	4826      	ldr	r0, [pc, #152]	; (8001a6c <HMS_bgdisplay+0x1d8>)
 80019d2:	f006 fa19 	bl	8007e08 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 75, TFTWIDTH - 35, 25, 5, BLUE);
 80019d6:	231f      	movs	r3, #31
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	2305      	movs	r3, #5
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2319      	movs	r3, #25
 80019e0:	22cd      	movs	r2, #205	; 0xcd
 80019e2:	21b5      	movs	r1, #181	; 0xb5
 80019e4:	200f      	movs	r0, #15
 80019e6:	f006 f86b 	bl	8007ac0 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, BLUE);
 80019ea:	211f      	movs	r1, #31
 80019ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019f0:	f006 fb20 	bl	8008034 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 80);
 80019f4:	21ba      	movs	r1, #186	; 0xba
 80019f6:	2014      	movs	r0, #20
 80019f8:	f006 faee 	bl	8007fd8 <LCD_SetCursor>
	LCD_SetTextSize(2);
 80019fc:	2002      	movs	r0, #2
 80019fe:	f006 fb03 	bl	8008008 <LCD_SetTextSize>
	LCD_Printf("Temp: ");
 8001a02:	481b      	ldr	r0, [pc, #108]	; (8001a70 <HMS_bgdisplay+0x1dc>)
 8001a04:	f006 fa00 	bl	8007e08 <LCD_Printf>

	//===============================================================//

	//========================= | Box 3 |============================//

	LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 35, 70, WHITE);
 8001a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2346      	movs	r3, #70	; 0x46
 8001a10:	22cd      	movs	r2, #205	; 0xcd
 8001a12:	21e8      	movs	r1, #232	; 0xe8
 8001a14:	2014      	movs	r0, #20
 8001a16:	f005 ffab 	bl	8007970 <LCD_FillRect>

	//===============================================================//

	for(int i = 4; i > 0; i--)
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	e004      	b.n	8001a2a <HMS_bgdisplay+0x196>
		LCD_ECGAnimation();
 8001a20:	f000 fab6 	bl	8001f90 <LCD_ECGAnimation>
	for(int i = 4; i > 0; i--)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	dcf7      	bgt.n	8001a20 <HMS_bgdisplay+0x18c>

	LCD_SetTextColor(BLACK, WHITE);
 8001a30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a34:	2000      	movs	r0, #0
 8001a36:	f006 fafd 	bl	8008034 <LCD_SetTextColor>
	LCD_SetCursor(180, 240);
 8001a3a:	21f0      	movs	r1, #240	; 0xf0
 8001a3c:	20b4      	movs	r0, #180	; 0xb4
 8001a3e:	f006 facb 	bl	8007fd8 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8001a42:	2002      	movs	r0, #2
 8001a44:	f006 fae0 	bl	8008008 <LCD_SetTextSize>
	LCD_Printf("ECG");
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <HMS_bgdisplay+0x1e0>)
 8001a4a:	f006 f9dd 	bl	8007e08 <LCD_Printf>

}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd90      	pop	{r4, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	0800ba04 	.word	0x0800ba04
 8001a5c:	0800ba08 	.word	0x0800ba08
 8001a60:	0800ba10 	.word	0x0800ba10
 8001a64:	0800ba1c 	.word	0x0800ba1c
 8001a68:	0800ba24 	.word	0x0800ba24
 8001a6c:	0800ba30 	.word	0x0800ba30
 8001a70:	0800ba38 	.word	0x0800ba38
 8001a74:	0800ba40 	.word	0x0800ba40

08001a78 <ecgPeak>:

void ecgPeak() {
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af02      	add	r7, sp, #8
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001a7e:	4b9b      	ldr	r3, [pc, #620]	; (8001cec <ecgPeak+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b218      	sxth	r0, r3
 8001a84:	23f2      	movs	r3, #242	; 0xf2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3319      	adds	r3, #25
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	b219      	sxth	r1, r3
 8001a8e:	4b97      	ldr	r3, [pc, #604]	; (8001cec <ecgPeak+0x274>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3302      	adds	r3, #2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8001a9a:	23f2      	movs	r3, #242	; 0xf2
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3319      	adds	r3, #25
 8001aa0:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001aa8:	9400      	str	r4, [sp, #0]
 8001aaa:	f005 fab1 	bl	8007010 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001aae:	4b8f      	ldr	r3, [pc, #572]	; (8001cec <ecgPeak+0x274>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b218      	sxth	r0, r3
 8001ab4:	23f2      	movs	r3, #242	; 0xf2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	331a      	adds	r3, #26
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b219      	sxth	r1, r3
 8001abe:	4b8b      	ldr	r3, [pc, #556]	; (8001cec <ecgPeak+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8001aca:	23f2      	movs	r3, #242	; 0xf2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	331a      	adds	r3, #26
 8001ad0:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001ad8:	9400      	str	r4, [sp, #0]
 8001ada:	f005 fa99 	bl	8007010 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8001ade:	4b83      	ldr	r3, [pc, #524]	; (8001cec <ecgPeak+0x274>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	4a81      	ldr	r2, [pc, #516]	; (8001cec <ecgPeak+0x274>)
 8001ae6:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001ae8:	4b80      	ldr	r3, [pc, #512]	; (8001cec <ecgPeak+0x274>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b218      	sxth	r0, r3
 8001aee:	23f2      	movs	r3, #242	; 0xf2
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3319      	adds	r3, #25
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	b219      	sxth	r1, r3
 8001af8:	4b7c      	ldr	r3, [pc, #496]	; (8001cec <ecgPeak+0x274>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3302      	adds	r3, #2
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8001b04:	23f2      	movs	r3, #242	; 0xf2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3319      	adds	r3, #25
 8001b0a:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001b12:	9400      	str	r4, [sp, #0]
 8001b14:	f005 fa7c 	bl	8007010 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001b18:	4b74      	ldr	r3, [pc, #464]	; (8001cec <ecgPeak+0x274>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b218      	sxth	r0, r3
 8001b1e:	23f2      	movs	r3, #242	; 0xf2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	331a      	adds	r3, #26
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	b219      	sxth	r1, r3
 8001b28:	4b70      	ldr	r3, [pc, #448]	; (8001cec <ecgPeak+0x274>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3302      	adds	r3, #2
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8001b34:	23f2      	movs	r3, #242	; 0xf2
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	331a      	adds	r3, #26
 8001b3a:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001b42:	9400      	str	r4, [sp, #0]
 8001b44:	f005 fa64 	bl	8007010 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <ecgPeak+0x274>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	4a67      	ldr	r2, [pc, #412]	; (8001cec <ecgPeak+0x274>)
 8001b50:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001b52:	4b66      	ldr	r3, [pc, #408]	; (8001cec <ecgPeak+0x274>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b218      	sxth	r0, r3
 8001b58:	23f2      	movs	r3, #242	; 0xf2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3319      	adds	r3, #25
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	b219      	sxth	r1, r3
 8001b62:	4b62      	ldr	r3, [pc, #392]	; (8001cec <ecgPeak+0x274>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3302      	adds	r3, #2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8001b6e:	23f2      	movs	r3, #242	; 0xf2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3319      	adds	r3, #25
 8001b74:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001b7c:	9400      	str	r4, [sp, #0]
 8001b7e:	f005 fa47 	bl	8007010 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001b82:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <ecgPeak+0x274>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b218      	sxth	r0, r3
 8001b88:	23f2      	movs	r3, #242	; 0xf2
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	331a      	adds	r3, #26
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	b219      	sxth	r1, r3
 8001b92:	4b56      	ldr	r3, [pc, #344]	; (8001cec <ecgPeak+0x274>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3302      	adds	r3, #2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8001b9e:	23f2      	movs	r3, #242	; 0xf2
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	331a      	adds	r3, #26
 8001ba4:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001bac:	9400      	str	r4, [sp, #0]
 8001bae:	f005 fa2f 	bl	8007010 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8001bb2:	4b4e      	ldr	r3, [pc, #312]	; (8001cec <ecgPeak+0x274>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	; (8001cec <ecgPeak+0x274>)
 8001bba:	6013      	str	r3, [r2, #0]

	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <ecgPeak+0x274>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b218      	sxth	r0, r3
 8001bc2:	23f2      	movs	r3, #242	; 0xf2
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3319      	adds	r3, #25
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	b219      	sxth	r1, r3
 8001bcc:	4b47      	ldr	r3, [pc, #284]	; (8001cec <ecgPeak+0x274>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
			graph_y0 + 40, RED);
 8001bd8:	23f2      	movs	r3, #242	; 0xf2
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3328      	adds	r3, #40	; 0x28
 8001bde:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001be6:	9400      	str	r4, [sp, #0]
 8001be8:	f005 fa12 	bl	8007010 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001bec:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <ecgPeak+0x274>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b218      	sxth	r0, r3
 8001bf2:	23f2      	movs	r3, #242	; 0xf2
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	331a      	adds	r3, #26
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	b219      	sxth	r1, r3
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <ecgPeak+0x274>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3302      	adds	r3, #2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	b21a      	sxth	r2, r3
			graph_y0 + 41, RED);
 8001c08:	23f2      	movs	r3, #242	; 0xf2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3329      	adds	r3, #41	; 0x29
 8001c0e:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001c16:	9400      	str	r4, [sp, #0]
 8001c18:	f005 f9fa 	bl	8007010 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8001c1c:	4b33      	ldr	r3, [pc, #204]	; (8001cec <ecgPeak+0x274>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3302      	adds	r3, #2
 8001c22:	4a32      	ldr	r2, [pc, #200]	; (8001cec <ecgPeak+0x274>)
 8001c24:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 40, graph_x + graphRefreshRate_peak,
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <ecgPeak+0x274>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b218      	sxth	r0, r3
 8001c2c:	23f2      	movs	r3, #242	; 0xf2
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3328      	adds	r3, #40	; 0x28
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b219      	sxth	r1, r3
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <ecgPeak+0x274>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	23f2      	movs	r3, #242	; 0xf2
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001c4a:	9400      	str	r4, [sp, #0]
 8001c4c:	f005 f9e0 	bl	8007010 <LCD_DrawLine>
			graph_y0, RED);
	LCD_DrawLine(graph_x, graph_y0 + 41, graph_x + graphRefreshRate_peak,
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <ecgPeak+0x274>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b218      	sxth	r0, r3
 8001c56:	23f2      	movs	r3, #242	; 0xf2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3329      	adds	r3, #41	; 0x29
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b219      	sxth	r1, r3
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <ecgPeak+0x274>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3302      	adds	r3, #2
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b21a      	sxth	r2, r3
			graph_y0 + 1, RED);
 8001c6c:	23f2      	movs	r3, #242	; 0xf2
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 41, graph_x + graphRefreshRate_peak,
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001c7a:	9400      	str	r4, [sp, #0]
 8001c7c:	f005 f9c8 	bl	8007010 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <ecgPeak+0x274>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3302      	adds	r3, #2
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <ecgPeak+0x274>)
 8001c88:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0, graph_x + graphRefreshRate_peak,
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <ecgPeak+0x274>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	b218      	sxth	r0, r3
 8001c90:	23f2      	movs	r3, #242	; 0xf2
 8001c92:	b219      	sxth	r1, r3
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <ecgPeak+0x274>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8001ca0:	23f2      	movs	r3, #242	; 0xf2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3319      	adds	r3, #25
 8001ca6:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0, graph_x + graphRefreshRate_peak,
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001cae:	9400      	str	r4, [sp, #0]
 8001cb0:	f005 f9ae 	bl	8007010 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 1, graph_x + graphRefreshRate_peak,
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <ecgPeak+0x274>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	b218      	sxth	r0, r3
 8001cba:	23f2      	movs	r3, #242	; 0xf2
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	b219      	sxth	r1, r3
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <ecgPeak+0x274>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3302      	adds	r3, #2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8001cd0:	23f2      	movs	r3, #242	; 0xf2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	331a      	adds	r3, #26
 8001cd6:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 1, graph_x + graphRefreshRate_peak,
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001cde:	9400      	str	r4, [sp, #0]
 8001ce0:	f005 f996 	bl	8007010 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8001ce4:	4b01      	ldr	r3, [pc, #4]	; (8001cec <ecgPeak+0x274>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3302      	adds	r3, #2
 8001cea:	e001      	b.n	8001cf0 <ecgPeak+0x278>
 8001cec:	20000014 	.word	0x20000014
 8001cf0:	4a4f      	ldr	r2, [pc, #316]	; (8001e30 <ecgPeak+0x3b8>)
 8001cf2:	6013      	str	r3, [r2, #0]

	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001cf4:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <ecgPeak+0x3b8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b218      	sxth	r0, r3
 8001cfa:	23f2      	movs	r3, #242	; 0xf2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3319      	adds	r3, #25
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	b219      	sxth	r1, r3
 8001d04:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <ecgPeak+0x3b8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8001d10:	23f2      	movs	r3, #242	; 0xf2
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3319      	adds	r3, #25
 8001d16:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001d1e:	9400      	str	r4, [sp, #0]
 8001d20:	f005 f976 	bl	8007010 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001d24:	4b42      	ldr	r3, [pc, #264]	; (8001e30 <ecgPeak+0x3b8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b218      	sxth	r0, r3
 8001d2a:	23f2      	movs	r3, #242	; 0xf2
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	331a      	adds	r3, #26
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b219      	sxth	r1, r3
 8001d34:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <ecgPeak+0x3b8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8001d40:	23f2      	movs	r3, #242	; 0xf2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	331a      	adds	r3, #26
 8001d46:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001d4e:	9400      	str	r4, [sp, #0]
 8001d50:	f005 f95e 	bl	8007010 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8001d54:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <ecgPeak+0x3b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3302      	adds	r3, #2
 8001d5a:	4a35      	ldr	r2, [pc, #212]	; (8001e30 <ecgPeak+0x3b8>)
 8001d5c:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <ecgPeak+0x3b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b218      	sxth	r0, r3
 8001d64:	23f2      	movs	r3, #242	; 0xf2
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3319      	adds	r3, #25
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	b219      	sxth	r1, r3
 8001d6e:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <ecgPeak+0x3b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3302      	adds	r3, #2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8001d7a:	23f2      	movs	r3, #242	; 0xf2
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3319      	adds	r3, #25
 8001d80:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001d88:	9400      	str	r4, [sp, #0]
 8001d8a:	f005 f941 	bl	8007010 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001d8e:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <ecgPeak+0x3b8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b218      	sxth	r0, r3
 8001d94:	23f2      	movs	r3, #242	; 0xf2
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	331a      	adds	r3, #26
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b219      	sxth	r1, r3
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <ecgPeak+0x3b8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3302      	adds	r3, #2
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8001daa:	23f2      	movs	r3, #242	; 0xf2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	331a      	adds	r3, #26
 8001db0:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001db8:	9400      	str	r4, [sp, #0]
 8001dba:	f005 f929 	bl	8007010 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <ecgPeak+0x3b8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <ecgPeak+0x3b8>)
 8001dc6:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <ecgPeak+0x3b8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b218      	sxth	r0, r3
 8001dce:	23f2      	movs	r3, #242	; 0xf2
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3319      	adds	r3, #25
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	b219      	sxth	r1, r3
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <ecgPeak+0x3b8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3302      	adds	r3, #2
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8001de4:	23f2      	movs	r3, #242	; 0xf2
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3319      	adds	r3, #25
 8001dea:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001df2:	9400      	str	r4, [sp, #0]
 8001df4:	f005 f90c 	bl	8007010 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <ecgPeak+0x3b8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	b218      	sxth	r0, r3
 8001dfe:	23f2      	movs	r3, #242	; 0xf2
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	331a      	adds	r3, #26
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b219      	sxth	r1, r3
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <ecgPeak+0x3b8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3302      	adds	r3, #2
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8001e14:	23f2      	movs	r3, #242	; 0xf2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	331a      	adds	r3, #26
 8001e1a:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001e22:	9400      	str	r4, [sp, #0]
 8001e24:	f005 f8f4 	bl	8007010 <LCD_DrawLine>
}
 8001e28:	bf00      	nop
 8001e2a:	3704      	adds	r7, #4
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	20000014 	.word	0x20000014

08001e34 <ecgLine>:

void ecgLine() {
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < 3; i++) {
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	71fb      	strb	r3, [r7, #7]
 8001e3e:	e09c      	b.n	8001f7a <ecgLine+0x146>
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001e40:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <ecgLine+0x158>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b218      	sxth	r0, r3
 8001e46:	23f2      	movs	r3, #242	; 0xf2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3319      	adds	r3, #25
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	b219      	sxth	r1, r3
 8001e50:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <ecgLine+0x158>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3302      	adds	r3, #2
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 8001e5c:	23f2      	movs	r3, #242	; 0xf2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3319      	adds	r3, #25
 8001e62:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001e6a:	9400      	str	r4, [sp, #0]
 8001e6c:	f005 f8d0 	bl	8007010 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001e70:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <ecgLine+0x158>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b218      	sxth	r0, r3
 8001e76:	23f2      	movs	r3, #242	; 0xf2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	331a      	adds	r3, #26
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b219      	sxth	r1, r3
 8001e80:	4b42      	ldr	r3, [pc, #264]	; (8001f8c <ecgLine+0x158>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3302      	adds	r3, #2
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 8001e8c:	23f2      	movs	r3, #242	; 0xf2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	331a      	adds	r3, #26
 8001e92:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001e9a:	9400      	str	r4, [sp, #0]
 8001e9c:	f005 f8b8 	bl	8007010 <LCD_DrawLine>
		graph_x += graphRefreshRate_peak;
 8001ea0:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <ecgLine+0x158>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	4a39      	ldr	r2, [pc, #228]	; (8001f8c <ecgLine+0x158>)
 8001ea8:	6013      	str	r3, [r2, #0]
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001eaa:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <ecgLine+0x158>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b218      	sxth	r0, r3
 8001eb0:	23f2      	movs	r3, #242	; 0xf2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3319      	adds	r3, #25
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	b219      	sxth	r1, r3
 8001eba:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <ecgLine+0x158>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 8001ec6:	23f2      	movs	r3, #242	; 0xf2
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3319      	adds	r3, #25
 8001ecc:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001ed4:	9400      	str	r4, [sp, #0]
 8001ed6:	f005 f89b 	bl	8007010 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001eda:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <ecgLine+0x158>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b218      	sxth	r0, r3
 8001ee0:	23f2      	movs	r3, #242	; 0xf2
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	331a      	adds	r3, #26
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	b219      	sxth	r1, r3
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <ecgLine+0x158>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 8001ef6:	23f2      	movs	r3, #242	; 0xf2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	331a      	adds	r3, #26
 8001efc:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001f04:	9400      	str	r4, [sp, #0]
 8001f06:	f005 f883 	bl	8007010 <LCD_DrawLine>
		graph_x += graphRefreshRate_peak;
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <ecgLine+0x158>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3302      	adds	r3, #2
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <ecgLine+0x158>)
 8001f12:	6013      	str	r3, [r2, #0]
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <ecgLine+0x158>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b218      	sxth	r0, r3
 8001f1a:	23f2      	movs	r3, #242	; 0xf2
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3319      	adds	r3, #25
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	b219      	sxth	r1, r3
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <ecgLine+0x158>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 8001f30:	23f2      	movs	r3, #242	; 0xf2
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3319      	adds	r3, #25
 8001f36:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001f3e:	9400      	str	r4, [sp, #0]
 8001f40:	f005 f866 	bl	8007010 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <ecgLine+0x158>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b218      	sxth	r0, r3
 8001f4a:	23f2      	movs	r3, #242	; 0xf2
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	331a      	adds	r3, #26
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	b219      	sxth	r1, r3
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <ecgLine+0x158>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 8001f60:	23f2      	movs	r3, #242	; 0xf2
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	331a      	adds	r3, #26
 8001f66:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001f6e:	9400      	str	r4, [sp, #0]
 8001f70:	f005 f84e 	bl	8007010 <LCD_DrawLine>
	for (uint8_t i = 0; i < 3; i++) {
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	3301      	adds	r3, #1
 8001f78:	71fb      	strb	r3, [r7, #7]
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	f67f af5f 	bls.w	8001e40 <ecgLine+0xc>
	}
}
 8001f82:	bf00      	nop
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	20000014 	.word	0x20000014

08001f90 <LCD_ECGAnimation>:

void LCD_ECGAnimation() {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af02      	add	r7, sp, #8
	ecgLine();
 8001f96:	f7ff ff4d 	bl	8001e34 <ecgLine>

	int a = graph_x;
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <LCD_ECGAnimation+0x4c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	607b      	str	r3, [r7, #4]
	if (a + graphRefreshRate_peak >= graph_x2 - 25) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1c9a      	adds	r2, r3, #2
 8001fa4:	23af      	movs	r3, #175	; 0xaf
 8001fa6:	3b19      	subs	r3, #25
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	db0c      	blt.n	8001fc6 <LCD_ECGAnimation+0x36>
		LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 80, 70, WHITE);
 8001fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2346      	movs	r3, #70	; 0x46
 8001fb4:	22a0      	movs	r2, #160	; 0xa0
 8001fb6:	21e8      	movs	r1, #232	; 0xe8
 8001fb8:	2014      	movs	r0, #20
 8001fba:	f005 fcd9 	bl	8007970 <LCD_FillRect>
		graph_x = graph_x0;
 8001fbe:	221e      	movs	r2, #30
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <LCD_ECGAnimation+0x4c>)
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e004      	b.n	8001fd0 <LCD_ECGAnimation+0x40>
	} else {
		graph_x += graphRefreshRate_peak;
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <LCD_ECGAnimation+0x4c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3302      	adds	r3, #2
 8001fcc:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <LCD_ECGAnimation+0x4c>)
 8001fce:	6013      	str	r3, [r2, #0]
	}

	ecgPeak();
 8001fd0:	f7ff fd52 	bl	8001a78 <ecgPeak>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000014 	.word	0x20000014

08001fe0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler() {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
	if (gpio_IT_CHK(9)) {
 8001fe6:	2009      	movs	r0, #9
 8001fe8:	f003 fb36 	bl	8005658 <gpio_IT_CHK>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01b      	beq.n	800202a <EXTI9_5_IRQHandler+0x4a>
		for (int i = 2000000; i > 0; i--)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <EXTI9_5_IRQHandler+0x54>)
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	e002      	b.n	8001ffe <EXTI9_5_IRQHandler+0x1e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	dcf9      	bgt.n	8001ff8 <EXTI9_5_IRQHandler+0x18>
			;
		menu_select_flag = (menu_select_flag + 1) % 3;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <EXTI9_5_IRQHandler+0x58>)
 8002006:	f993 3000 	ldrsb.w	r3, [r3]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <EXTI9_5_IRQHandler+0x5c>)
 800200e:	fb83 3102 	smull	r3, r1, r3, r2
 8002012:	17d3      	asrs	r3, r2, #31
 8002014:	1ac9      	subs	r1, r1, r3
 8002016:	460b      	mov	r3, r1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	440b      	add	r3, r1
 800201c:	1ad1      	subs	r1, r2, r3
 800201e:	b24a      	sxtb	r2, r1
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <EXTI9_5_IRQHandler+0x58>)
 8002022:	701a      	strb	r2, [r3, #0]
		gpio_IT_CLR(9);
 8002024:	2009      	movs	r0, #9
 8002026:	f003 fb31 	bl	800568c <gpio_IT_CLR>
	}
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	001e8480 	.word	0x001e8480
 8002038:	20000010 	.word	0x20000010
 800203c:	55555556 	.word	0x55555556

08002040 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002044:	b672      	cpsid	i
}
 8002046:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002048:	e7fe      	b.n	8002048 <Error_Handler+0x8>
	...

0800204c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_MspInit+0x4c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <HAL_MspInit+0x4c>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_MspInit+0x4c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_MspInit+0x4c>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a08      	ldr	r2, [pc, #32]	; (8002098 <HAL_MspInit+0x4c>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_MspInit+0x4c>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800208a:	2007      	movs	r0, #7
 800208c:	f000 fed8 	bl	8002e40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40023800 	.word	0x40023800

0800209c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a17      	ldr	r2, [pc, #92]	; (8002118 <HAL_ADC_MspInit+0x7c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d127      	bne.n	800210e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_ADC_MspInit+0x80>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a15      	ldr	r2, [pc, #84]	; (800211c <HAL_ADC_MspInit+0x80>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_ADC_MspInit+0x80>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_ADC_MspInit+0x80>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a0e      	ldr	r2, [pc, #56]	; (800211c <HAL_ADC_MspInit+0x80>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_ADC_MspInit+0x80>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020f6:	2310      	movs	r3, #16
 80020f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020fa:	2303      	movs	r3, #3
 80020fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <HAL_ADC_MspInit+0x84>)
 800210a:	f000 fecd 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40012000 	.word	0x40012000
 800211c:	40023800 	.word	0x40023800
 8002120:	40020800 	.word	0x40020800

08002124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <HAL_I2C_MspInit+0x84>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d12c      	bne.n	80021a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_I2C_MspInit+0x88>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_I2C_MspInit+0x88>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_I2C_MspInit+0x88>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002162:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002168:	2312      	movs	r3, #18
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216c:	2301      	movs	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002174:	2304      	movs	r3, #4
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	480c      	ldr	r0, [pc, #48]	; (80021b0 <HAL_I2C_MspInit+0x8c>)
 8002180:	f000 fe92 	bl	8002ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_I2C_MspInit+0x88>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_I2C_MspInit+0x88>)
 800218e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002192:	6413      	str	r3, [r2, #64]	; 0x40
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_I2C_MspInit+0x88>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021a0:	bf00      	nop
 80021a2:	3728      	adds	r7, #40	; 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40005400 	.word	0x40005400
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020400 	.word	0x40020400

080021b4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <HAL_I2C_MspDeInit+0x3c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d10f      	bne.n	80021e6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_I2C_MspDeInit+0x40>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_I2C_MspDeInit+0x40>)
 80021cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80021d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d6:	4808      	ldr	r0, [pc, #32]	; (80021f8 <HAL_I2C_MspDeInit+0x44>)
 80021d8:	f000 ffea 	bl	80031b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80021dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_I2C_MspDeInit+0x44>)
 80021e2:	f000 ffe5 	bl	80031b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40005400 	.word	0x40005400
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020400 	.word	0x40020400

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <NMI_Handler+0x4>

08002202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <HardFault_Handler+0x4>

08002208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <MemManage_Handler+0x4>

0800220e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <UsageFault_Handler+0x4>

0800221a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002248:	f000 f956 	bl	80024f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}

08002250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
	return 1;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_kill>:

int _kill(int pid, int sig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800226a:	f006 f8b1 	bl	80083d0 <__errno>
 800226e:	4603      	mov	r3, r0
 8002270:	2216      	movs	r2, #22
 8002272:	601a      	str	r2, [r3, #0]
	return -1;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_exit>:

void _exit (int status)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe7 	bl	8002260 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002292:	e7fe      	b.n	8002292 <_exit+0x12>

08002294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e00a      	b.n	80022bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a6:	f3af 8000 	nop.w
 80022aa:	4601      	mov	r1, r0
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf0      	blt.n	80022a6 <_read+0x12>
	}

return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e009      	b.n	80022f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbf1      	blt.n	80022e0 <_write+0x12>
	}
	return len;
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_close>:

int _close(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	return -1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232e:	605a      	str	r2, [r3, #4]
	return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <_isatty>:

int _isatty(int file)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
	return 1;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <_sbrk+0x5c>)
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <_sbrk+0x60>)
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <_sbrk+0x64>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <_sbrk+0x68>)
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	429a      	cmp	r2, r3
 800239e:	d207      	bcs.n	80023b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a0:	f006 f816 	bl	80083d0 <__errno>
 80023a4:	4603      	mov	r3, r0
 80023a6:	220c      	movs	r2, #12
 80023a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	e009      	b.n	80023c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <_sbrk+0x64>)
 80023c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20018000 	.word	0x20018000
 80023d0:	00000400 	.word	0x00000400
 80023d4:	200003a0 	.word	0x200003a0
 80023d8:	20000610 	.word	0x20000610

080023dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <SystemInit+0x20>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <SystemInit+0x20>)
 80023e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002438 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002404:	480d      	ldr	r0, [pc, #52]	; (800243c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002406:	490e      	ldr	r1, [pc, #56]	; (8002440 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002408:	4a0e      	ldr	r2, [pc, #56]	; (8002444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800240c:	e002      	b.n	8002414 <LoopCopyDataInit>

0800240e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002412:	3304      	adds	r3, #4

08002414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002418:	d3f9      	bcc.n	800240e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800241c:	4c0b      	ldr	r4, [pc, #44]	; (800244c <LoopFillZerobss+0x26>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002420:	e001      	b.n	8002426 <LoopFillZerobss>

08002422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002424:	3204      	adds	r2, #4

08002426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002428:	d3fb      	bcc.n	8002422 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800242a:	f7ff ffd7 	bl	80023dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242e:	f005 ffd5 	bl	80083dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002432:	f7fe fd93 	bl	8000f5c <main>
  bx  lr    
 8002436:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002438:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800243c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002440:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002444:	0800c2bc 	.word	0x0800c2bc
  ldr r2, =_sbss
 8002448:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 800244c:	2000060c 	.word	0x2000060c

08002450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC_IRQHandler>
	...

08002454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <HAL_Init+0x40>)
 800245e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <HAL_Init+0x40>)
 800246a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_Init+0x40>)
 8002476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247c:	2003      	movs	r0, #3
 800247e:	f000 fcdf 	bl	8002e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002482:	2000      	movs	r0, #0
 8002484:	f000 f808 	bl	8002498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002488:	f7ff fde0 	bl	800204c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023c00 	.word	0x40023c00

08002498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x54>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_InitTick+0x58>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fce9 	bl	8002e8e <HAL_SYSTICK_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00e      	b.n	80024e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	d80a      	bhi.n	80024e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024cc:	2200      	movs	r2, #0
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f000 fcbf 	bl	8002e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d8:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <HAL_InitTick+0x5c>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000018 	.word	0x20000018
 80024f0:	20000020 	.word	0x20000020
 80024f4:	2000001c 	.word	0x2000001c

080024f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x20>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x24>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <HAL_IncTick+0x24>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000020 	.word	0x20000020
 800251c:	200003a4 	.word	0x200003a4

08002520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200003a4 	.word	0x200003a4

08002538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff ffee 	bl	8002520 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d005      	beq.n	800255e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_Delay+0x44>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800255e:	bf00      	nop
 8002560:	f7ff ffde 	bl	8002520 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	429a      	cmp	r2, r3
 800256e:	d8f7      	bhi.n	8002560 <HAL_Delay+0x28>
  {
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000020 	.word	0x20000020

08002580 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e033      	b.n	80025fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fd7c 	bl	800209c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d118      	bne.n	80025f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025c6:	f023 0302 	bic.w	r3, r3, #2
 80025ca:	f043 0202 	orr.w	r2, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fa86 	bl	8002ae4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f023 0303 	bic.w	r3, r3, #3
 80025e6:	f043 0201 	orr.w	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
 80025ee:	e001      	b.n	80025f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_ADC_Start+0x1a>
 800261e:	2302      	movs	r3, #2
 8002620:	e097      	b.n	8002752 <HAL_ADC_Start+0x14a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d018      	beq.n	800266a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002648:	4b45      	ldr	r3, [pc, #276]	; (8002760 <HAL_ADC_Start+0x158>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a45      	ldr	r2, [pc, #276]	; (8002764 <HAL_ADC_Start+0x15c>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9a      	lsrs	r2, r3, #18
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800265c:	e002      	b.n	8002664 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	3b01      	subs	r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f9      	bne.n	800265e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d15f      	bne.n	8002738 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b6:	d106      	bne.n	80026c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f023 0206 	bic.w	r2, r3, #6
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	645a      	str	r2, [r3, #68]	; 0x44
 80026c4:	e002      	b.n	80026cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_ADC_Start+0x160>)
 80026d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d129      	bne.n	8002750 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	e020      	b.n	8002750 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_ADC_Start+0x164>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d11b      	bne.n	8002750 <HAL_ADC_Start+0x148>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d114      	bne.n	8002750 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	e00b      	b.n	8002750 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000018 	.word	0x20000018
 8002764:	431bde83 	.word	0x431bde83
 8002768:	40012300 	.word	0x40012300
 800276c:	40012000 	.word	0x40012000

08002770 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278c:	d113      	bne.n	80027b6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279c:	d10b      	bne.n	80027b6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e063      	b.n	800287e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80027b6:	f7ff feb3 	bl	8002520 <HAL_GetTick>
 80027ba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027bc:	e021      	b.n	8002802 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d01d      	beq.n	8002802 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_ADC_PollForConversion+0x6c>
 80027cc:	f7ff fea8 	bl	8002520 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d212      	bcs.n	8002802 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d00b      	beq.n	8002802 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f043 0204 	orr.w	r2, r3, #4
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e03d      	b.n	800287e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b02      	cmp	r3, #2
 800280e:	d1d6      	bne.n	80027be <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0212 	mvn.w	r2, #18
 8002818:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d123      	bne.n	800287c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11f      	bne.n	800287c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002854:	2b00      	cmp	r3, #0
 8002856:	d111      	bne.n	800287c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1c>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e105      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x228>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b09      	cmp	r3, #9
 80028ca:	d925      	bls.n	8002918 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68d9      	ldr	r1, [r3, #12]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	3b1e      	subs	r3, #30
 80028e2:	2207      	movs	r2, #7
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43da      	mvns	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	400a      	ands	r2, r1
 80028f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68d9      	ldr	r1, [r3, #12]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	4618      	mov	r0, r3
 8002904:	4603      	mov	r3, r0
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4403      	add	r3, r0
 800290a:	3b1e      	subs	r3, #30
 800290c:	409a      	lsls	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	e022      	b.n	800295e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6919      	ldr	r1, [r3, #16]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	2207      	movs	r2, #7
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	400a      	ands	r2, r1
 800293a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6919      	ldr	r1, [r3, #16]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	4618      	mov	r0, r3
 800294e:	4603      	mov	r3, r0
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4403      	add	r3, r0
 8002954:	409a      	lsls	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b06      	cmp	r3, #6
 8002964:	d824      	bhi.n	80029b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	3b05      	subs	r3, #5
 8002978:	221f      	movs	r2, #31
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	400a      	ands	r2, r1
 8002986:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	4618      	mov	r0, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	3b05      	subs	r3, #5
 80029a2:	fa00 f203 	lsl.w	r2, r0, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	635a      	str	r2, [r3, #52]	; 0x34
 80029ae:	e04c      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d824      	bhi.n	8002a02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	3b23      	subs	r3, #35	; 0x23
 80029ca:	221f      	movs	r2, #31
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43da      	mvns	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	400a      	ands	r2, r1
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	3b23      	subs	r3, #35	; 0x23
 80029f4:	fa00 f203 	lsl.w	r2, r0, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002a00:	e023      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	3b41      	subs	r3, #65	; 0x41
 8002a14:	221f      	movs	r2, #31
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	400a      	ands	r2, r1
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b41      	subs	r3, #65	; 0x41
 8002a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a4a:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <HAL_ADC_ConfigChannel+0x234>)
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <HAL_ADC_ConfigChannel+0x238>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d109      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x1cc>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b12      	cmp	r3, #18
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_ADC_ConfigChannel+0x238>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d123      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x21e>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d003      	beq.n	8002a86 <HAL_ADC_ConfigChannel+0x1e6>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b11      	cmp	r3, #17
 8002a84:	d11b      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d111      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <HAL_ADC_ConfigChannel+0x23c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a10      	ldr	r2, [pc, #64]	; (8002ae0 <HAL_ADC_ConfigChannel+0x240>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	0c9a      	lsrs	r2, r3, #18
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ab0:	e002      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f9      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40012300 	.word	0x40012300
 8002ad8:	40012000 	.word	0x40012000
 8002adc:	20000018 	.word	0x20000018
 8002ae0:	431bde83 	.word	0x431bde83

08002ae4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aec:	4b79      	ldr	r3, [pc, #484]	; (8002cd4 <ADC_Init+0x1f0>)
 8002aee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	021a      	lsls	r2, r3, #8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6899      	ldr	r1, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <ADC_Init+0x1f4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d022      	beq.n	8002bc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6899      	ldr	r1, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6899      	ldr	r1, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	e00f      	b.n	8002be2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002be0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0202 	bic.w	r2, r2, #2
 8002bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6899      	ldr	r1, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7e1b      	ldrb	r3, [r3, #24]
 8002bfc:	005a      	lsls	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	035a      	lsls	r2, r3, #13
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	e007      	b.n	8002c58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	051a      	lsls	r2, r3, #20
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6899      	ldr	r1, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c9a:	025a      	lsls	r2, r3, #9
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6899      	ldr	r1, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	029a      	lsls	r2, r3, #10
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40012300 	.word	0x40012300
 8002cd8:	0f000001 	.word	0x0f000001

08002cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0e:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	60d3      	str	r3, [r2, #12]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <__NVIC_GetPriorityGrouping+0x18>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 0307 	and.w	r3, r3, #7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db0a      	blt.n	8002d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	490c      	ldr	r1, [pc, #48]	; (8002d8c <__NVIC_SetPriority+0x4c>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d68:	e00a      	b.n	8002d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4908      	ldr	r1, [pc, #32]	; (8002d90 <__NVIC_SetPriority+0x50>)
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3b04      	subs	r3, #4
 8002d78:	0112      	lsls	r2, r2, #4
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	761a      	strb	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf28      	it	cs
 8002db2:	2304      	movcs	r3, #4
 8002db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d902      	bls.n	8002dc4 <NVIC_EncodePriority+0x30>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b03      	subs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <NVIC_EncodePriority+0x32>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
         );
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e0c:	d301      	bcc.n	8002e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00f      	b.n	8002e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <SysTick_Config+0x40>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1a:	210f      	movs	r1, #15
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e20:	f7ff ff8e 	bl	8002d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <SysTick_Config+0x40>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2a:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <SysTick_Config+0x40>)
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	e000e010 	.word	0xe000e010

08002e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ff47 	bl	8002cdc <__NVIC_SetPriorityGrouping>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e68:	f7ff ff5c 	bl	8002d24 <__NVIC_GetPriorityGrouping>
 8002e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	6978      	ldr	r0, [r7, #20]
 8002e74:	f7ff ff8e 	bl	8002d94 <NVIC_EncodePriority>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff5d 	bl	8002d40 <__NVIC_SetPriority>
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ffb0 	bl	8002dfc <SysTick_Config>
 8002e9c:	4603      	mov	r3, r0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	e159      	b.n	8003178 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f040 8148 	bne.w	8003172 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d005      	beq.n	8002efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d130      	bne.n	8002f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	2203      	movs	r2, #3
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f30:	2201      	movs	r2, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f003 0201 	and.w	r2, r3, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d017      	beq.n	8002f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d123      	bne.n	8002fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	08da      	lsrs	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3208      	adds	r2, #8
 8002fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	220f      	movs	r2, #15
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	08da      	lsrs	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3208      	adds	r2, #8
 8002fe6:	69b9      	ldr	r1, [r7, #24]
 8002fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0203 	and.w	r2, r3, #3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80a2 	beq.w	8003172 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	4b57      	ldr	r3, [pc, #348]	; (8003190 <HAL_GPIO_Init+0x2e8>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	4a56      	ldr	r2, [pc, #344]	; (8003190 <HAL_GPIO_Init+0x2e8>)
 8003038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303c:	6453      	str	r3, [r2, #68]	; 0x44
 800303e:	4b54      	ldr	r3, [pc, #336]	; (8003190 <HAL_GPIO_Init+0x2e8>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800304a:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_GPIO_Init+0x2ec>)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	3302      	adds	r3, #2
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_GPIO_Init+0x2f0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d019      	beq.n	80030aa <HAL_GPIO_Init+0x202>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a48      	ldr	r2, [pc, #288]	; (800319c <HAL_GPIO_Init+0x2f4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_GPIO_Init+0x1fe>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a47      	ldr	r2, [pc, #284]	; (80031a0 <HAL_GPIO_Init+0x2f8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00d      	beq.n	80030a2 <HAL_GPIO_Init+0x1fa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a46      	ldr	r2, [pc, #280]	; (80031a4 <HAL_GPIO_Init+0x2fc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d007      	beq.n	800309e <HAL_GPIO_Init+0x1f6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a45      	ldr	r2, [pc, #276]	; (80031a8 <HAL_GPIO_Init+0x300>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_GPIO_Init+0x1f2>
 8003096:	2304      	movs	r3, #4
 8003098:	e008      	b.n	80030ac <HAL_GPIO_Init+0x204>
 800309a:	2307      	movs	r3, #7
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x204>
 800309e:	2303      	movs	r3, #3
 80030a0:	e004      	b.n	80030ac <HAL_GPIO_Init+0x204>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e002      	b.n	80030ac <HAL_GPIO_Init+0x204>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_GPIO_Init+0x204>
 80030aa:	2300      	movs	r3, #0
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	f002 0203 	and.w	r2, r2, #3
 80030b2:	0092      	lsls	r2, r2, #2
 80030b4:	4093      	lsls	r3, r2
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030bc:	4935      	ldr	r1, [pc, #212]	; (8003194 <HAL_GPIO_Init+0x2ec>)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	3302      	adds	r3, #2
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ca:	4b38      	ldr	r3, [pc, #224]	; (80031ac <HAL_GPIO_Init+0x304>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ee:	4a2f      	ldr	r2, [pc, #188]	; (80031ac <HAL_GPIO_Init+0x304>)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f4:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_GPIO_Init+0x304>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003118:	4a24      	ldr	r2, [pc, #144]	; (80031ac <HAL_GPIO_Init+0x304>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <HAL_GPIO_Init+0x304>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003142:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <HAL_GPIO_Init+0x304>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003148:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_GPIO_Init+0x304>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800316c:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_GPIO_Init+0x304>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3301      	adds	r3, #1
 8003176:	61fb      	str	r3, [r7, #28]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b0f      	cmp	r3, #15
 800317c:	f67f aea2 	bls.w	8002ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	40013800 	.word	0x40013800
 8003198:	40020000 	.word	0x40020000
 800319c:	40020400 	.word	0x40020400
 80031a0:	40020800 	.word	0x40020800
 80031a4:	40020c00 	.word	0x40020c00
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40013c00 	.word	0x40013c00

080031b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	e0bb      	b.n	8003344 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031cc:	2201      	movs	r2, #1
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	f040 80ab 	bne.w	800333e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80031e8:	4a5c      	ldr	r2, [pc, #368]	; (800335c <HAL_GPIO_DeInit+0x1ac>)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	089b      	lsrs	r3, r3, #2
 80031ee:	3302      	adds	r3, #2
 80031f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a54      	ldr	r2, [pc, #336]	; (8003360 <HAL_GPIO_DeInit+0x1b0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d019      	beq.n	8003246 <HAL_GPIO_DeInit+0x96>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a53      	ldr	r2, [pc, #332]	; (8003364 <HAL_GPIO_DeInit+0x1b4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_DeInit+0x92>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_GPIO_DeInit+0x1b8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00d      	beq.n	800323e <HAL_GPIO_DeInit+0x8e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a51      	ldr	r2, [pc, #324]	; (800336c <HAL_GPIO_DeInit+0x1bc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <HAL_GPIO_DeInit+0x8a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a50      	ldr	r2, [pc, #320]	; (8003370 <HAL_GPIO_DeInit+0x1c0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_GPIO_DeInit+0x86>
 8003232:	2304      	movs	r3, #4
 8003234:	e008      	b.n	8003248 <HAL_GPIO_DeInit+0x98>
 8003236:	2307      	movs	r3, #7
 8003238:	e006      	b.n	8003248 <HAL_GPIO_DeInit+0x98>
 800323a:	2303      	movs	r3, #3
 800323c:	e004      	b.n	8003248 <HAL_GPIO_DeInit+0x98>
 800323e:	2302      	movs	r3, #2
 8003240:	e002      	b.n	8003248 <HAL_GPIO_DeInit+0x98>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_GPIO_DeInit+0x98>
 8003246:	2300      	movs	r3, #0
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	f002 0203 	and.w	r2, r2, #3
 800324e:	0092      	lsls	r2, r2, #2
 8003250:	4093      	lsls	r3, r2
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	d132      	bne.n	80032be <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003258:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_GPIO_DeInit+0x1c4>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	43db      	mvns	r3, r3
 8003260:	4944      	ldr	r1, [pc, #272]	; (8003374 <HAL_GPIO_DeInit+0x1c4>)
 8003262:	4013      	ands	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003266:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_GPIO_DeInit+0x1c4>)
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	4941      	ldr	r1, [pc, #260]	; (8003374 <HAL_GPIO_DeInit+0x1c4>)
 8003270:	4013      	ands	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <HAL_GPIO_DeInit+0x1c4>)
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	43db      	mvns	r3, r3
 800327c:	493d      	ldr	r1, [pc, #244]	; (8003374 <HAL_GPIO_DeInit+0x1c4>)
 800327e:	4013      	ands	r3, r2
 8003280:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003282:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <HAL_GPIO_DeInit+0x1c4>)
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	43db      	mvns	r3, r3
 800328a:	493a      	ldr	r1, [pc, #232]	; (8003374 <HAL_GPIO_DeInit+0x1c4>)
 800328c:	4013      	ands	r3, r2
 800328e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80032a0:	4a2e      	ldr	r2, [pc, #184]	; (800335c <HAL_GPIO_DeInit+0x1ac>)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	3302      	adds	r3, #2
 80032a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	43da      	mvns	r2, r3
 80032b0:	482a      	ldr	r0, [pc, #168]	; (800335c <HAL_GPIO_DeInit+0x1ac>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	400a      	ands	r2, r1
 80032b8:	3302      	adds	r3, #2
 80032ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2103      	movs	r1, #3
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	401a      	ands	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	08da      	lsrs	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3208      	adds	r2, #8
 80032dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	08d2      	lsrs	r2, r2, #3
 80032f4:	4019      	ands	r1, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2103      	movs	r1, #3
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	401a      	ands	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	2101      	movs	r1, #1
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	401a      	ands	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2103      	movs	r1, #3
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	401a      	ands	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	3301      	adds	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b0f      	cmp	r3, #15
 8003348:	f67f af40 	bls.w	80031cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40013800 	.word	0x40013800
 8003360:	40020000 	.word	0x40020000
 8003364:	40020400 	.word	0x40020400
 8003368:	40020800 	.word	0x40020800
 800336c:	40020c00 	.word	0x40020c00
 8003370:	40021000 	.word	0x40021000
 8003374:	40013c00 	.word	0x40013c00

08003378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
 8003384:	4613      	mov	r3, r2
 8003386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003394:	e003      	b.n	800339e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	619a      	str	r2, [r3, #24]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e12b      	b.n	8003616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe fea6 	bl	8002124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	; 0x24
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800340e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003410:	f001 fd4a 	bl	8004ea8 <HAL_RCC_GetPCLK1Freq>
 8003414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4a81      	ldr	r2, [pc, #516]	; (8003620 <HAL_I2C_Init+0x274>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d807      	bhi.n	8003430 <HAL_I2C_Init+0x84>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a80      	ldr	r2, [pc, #512]	; (8003624 <HAL_I2C_Init+0x278>)
 8003424:	4293      	cmp	r3, r2
 8003426:	bf94      	ite	ls
 8003428:	2301      	movls	r3, #1
 800342a:	2300      	movhi	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e006      	b.n	800343e <HAL_I2C_Init+0x92>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a7d      	ldr	r2, [pc, #500]	; (8003628 <HAL_I2C_Init+0x27c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	bf94      	ite	ls
 8003438:	2301      	movls	r3, #1
 800343a:	2300      	movhi	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0e7      	b.n	8003616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a78      	ldr	r2, [pc, #480]	; (800362c <HAL_I2C_Init+0x280>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0c9b      	lsrs	r3, r3, #18
 8003450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a6a      	ldr	r2, [pc, #424]	; (8003620 <HAL_I2C_Init+0x274>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d802      	bhi.n	8003480 <HAL_I2C_Init+0xd4>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3301      	adds	r3, #1
 800347e:	e009      	b.n	8003494 <HAL_I2C_Init+0xe8>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	4a69      	ldr	r2, [pc, #420]	; (8003630 <HAL_I2C_Init+0x284>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	3301      	adds	r3, #1
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	430b      	orrs	r3, r1
 800349a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	495c      	ldr	r1, [pc, #368]	; (8003620 <HAL_I2C_Init+0x274>)
 80034b0:	428b      	cmp	r3, r1
 80034b2:	d819      	bhi.n	80034e8 <HAL_I2C_Init+0x13c>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e59      	subs	r1, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c2:	1c59      	adds	r1, r3, #1
 80034c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034c8:	400b      	ands	r3, r1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_I2C_Init+0x138>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1e59      	subs	r1, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e2:	e051      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 80034e4:	2304      	movs	r3, #4
 80034e6:	e04f      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d111      	bne.n	8003514 <HAL_I2C_Init+0x168>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e58      	subs	r0, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	440b      	add	r3, r1
 80034fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e012      	b.n	800353a <HAL_I2C_Init+0x18e>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1e58      	subs	r0, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	0099      	lsls	r1, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	fbb0 f3f3 	udiv	r3, r0, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Init+0x196>
 800353e:	2301      	movs	r3, #1
 8003540:	e022      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10e      	bne.n	8003568 <HAL_I2C_Init+0x1bc>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1e58      	subs	r0, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	440b      	add	r3, r1
 8003558:	fbb0 f3f3 	udiv	r3, r0, r3
 800355c:	3301      	adds	r3, #1
 800355e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003566:	e00f      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1e58      	subs	r0, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	0099      	lsls	r1, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	fbb0 f3f3 	udiv	r3, r0, r3
 800357e:	3301      	adds	r3, #1
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	6809      	ldr	r1, [r1, #0]
 800358c:	4313      	orrs	r3, r2
 800358e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6911      	ldr	r1, [r2, #16]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68d2      	ldr	r2, [r2, #12]
 80035c2:	4311      	orrs	r1, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	000186a0 	.word	0x000186a0
 8003624:	001e847f 	.word	0x001e847f
 8003628:	003d08ff 	.word	0x003d08ff
 800362c:	431bde83 	.word	0x431bde83
 8003630:	10624dd3 	.word	0x10624dd3

08003634 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e021      	b.n	800368a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2224      	movs	r2, #36	; 0x24
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe fda8 	bl	80021b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	461a      	mov	r2, r3
 80036a0:	460b      	mov	r3, r1
 80036a2:	817b      	strh	r3, [r7, #10]
 80036a4:	4613      	mov	r3, r2
 80036a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036a8:	f7fe ff3a 	bl	8002520 <HAL_GetTick>
 80036ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	f040 80e0 	bne.w	800387c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2319      	movs	r3, #25
 80036c2:	2201      	movs	r2, #1
 80036c4:	4970      	ldr	r1, [pc, #448]	; (8003888 <HAL_I2C_Master_Transmit+0x1f4>)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fda0 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
 80036d4:	e0d3      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_I2C_Master_Transmit+0x50>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e0cc      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d007      	beq.n	800370a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003718:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2221      	movs	r2, #33	; 0x21
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2210      	movs	r2, #16
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	893a      	ldrh	r2, [r7, #8]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a50      	ldr	r2, [pc, #320]	; (800388c <HAL_I2C_Master_Transmit+0x1f8>)
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800374c:	8979      	ldrh	r1, [r7, #10]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fbf0 	bl	8003f38 <I2C_MasterRequestWrite>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e08d      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003778:	e066      	b.n	8003848 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	6a39      	ldr	r1, [r7, #32]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fe1a 	bl	80043b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00d      	beq.n	80037a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2b04      	cmp	r3, #4
 8003790:	d107      	bne.n	80037a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e06b      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d11b      	bne.n	800381c <HAL_I2C_Master_Transmit+0x188>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d017      	beq.n	800381c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	6a39      	ldr	r1, [r7, #32]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fe0a 	bl	800443a <I2C_WaitOnBTFFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00d      	beq.n	8003848 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	2b04      	cmp	r3, #4
 8003832:	d107      	bne.n	8003844 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003842:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e01a      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	d194      	bne.n	800377a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	e000      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800387c:	2302      	movs	r3, #2
  }
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	00100002 	.word	0x00100002
 800388c:	ffff0000 	.word	0xffff0000

08003890 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08c      	sub	sp, #48	; 0x30
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	817b      	strh	r3, [r7, #10]
 80038a2:	460b      	mov	r3, r1
 80038a4:	813b      	strh	r3, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038aa:	f7fe fe39 	bl	8002520 <HAL_GetTick>
 80038ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	f040 8208 	bne.w	8003cce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	2319      	movs	r3, #25
 80038c4:	2201      	movs	r2, #1
 80038c6:	497b      	ldr	r1, [pc, #492]	; (8003ab4 <HAL_I2C_Mem_Read+0x224>)
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fc9f 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
 80038d6:	e1fb      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_I2C_Mem_Read+0x56>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e1f4      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x440>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d007      	beq.n	800390c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2222      	movs	r2, #34	; 0x22
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a5b      	ldr	r2, [pc, #364]	; (8003ab8 <HAL_I2C_Mem_Read+0x228>)
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800394e:	88f8      	ldrh	r0, [r7, #6]
 8003950:	893a      	ldrh	r2, [r7, #8]
 8003952:	8979      	ldrh	r1, [r7, #10]
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4603      	mov	r3, r0
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fb6c 	bl	800403c <I2C_RequestMemoryRead>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e1b0      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	d113      	bne.n	800399e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	623b      	str	r3, [r7, #32]
 800398a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e184      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d11b      	bne.n	80039de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e164      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d11b      	bne.n	8003a1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	e144      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a34:	e138      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	f200 80f1 	bhi.w	8003c22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d123      	bne.n	8003a90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fd35 	bl	80044bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e139      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a8e:	e10b      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d14e      	bne.n	8003b36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	4906      	ldr	r1, [pc, #24]	; (8003abc <HAL_I2C_Mem_Read+0x22c>)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fbb2 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e10e      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x440>
 8003ab2:	bf00      	nop
 8003ab4:	00100002 	.word	0x00100002
 8003ab8:	ffff0000 	.word	0xffff0000
 8003abc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b34:	e0b8      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4966      	ldr	r1, [pc, #408]	; (8003cd8 <HAL_I2C_Mem_Read+0x448>)
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fb63 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0bf      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	2200      	movs	r2, #0
 8003b9a:	494f      	ldr	r1, [pc, #316]	; (8003cd8 <HAL_I2C_Mem_Read+0x448>)
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fb35 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e091      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c20:	e042      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fc48 	bl	80044bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e04c      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d118      	bne.n	8003ca8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f47f aec2 	bne.w	8003a36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
  }
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3728      	adds	r7, #40	; 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	00010004 	.word	0x00010004

08003cdc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	; 0x28
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7fe fc18 	bl	8002520 <HAL_GetTick>
 8003cf0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	f040 8111 	bne.w	8003f26 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2319      	movs	r3, #25
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4988      	ldr	r1, [pc, #544]	; (8003f30 <HAL_I2C_IsDeviceReady+0x254>)
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fa7c 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e104      	b.n	8003f28 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_I2C_IsDeviceReady+0x50>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e0fd      	b.n	8003f28 <HAL_I2C_IsDeviceReady+0x24c>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d007      	beq.n	8003d52 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2224      	movs	r2, #36	; 0x24
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a70      	ldr	r2, [pc, #448]	; (8003f34 <HAL_I2C_IsDeviceReady+0x258>)
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d84:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fa3a 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dac:	d103      	bne.n	8003db6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0b6      	b.n	8003f28 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dc8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003dca:	f7fe fba9 	bl	8002520 <HAL_GetTick>
 8003dce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dfe:	e025      	b.n	8003e4c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e00:	f7fe fb8e 	bl	8002520 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d302      	bcc.n	8003e16 <HAL_I2C_IsDeviceReady+0x13a>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	22a0      	movs	r2, #160	; 0xa0
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2ba0      	cmp	r3, #160	; 0xa0
 8003e56:	d005      	beq.n	8003e64 <HAL_I2C_IsDeviceReady+0x188>
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <HAL_I2C_IsDeviceReady+0x188>
 8003e5e:	7dbb      	ldrb	r3, [r7, #22]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0cd      	beq.n	8003e00 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d129      	bne.n	8003ece <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e88:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2319      	movs	r3, #25
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4921      	ldr	r1, [pc, #132]	; (8003f30 <HAL_I2C_IsDeviceReady+0x254>)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f9ae 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e036      	b.n	8003f28 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e02c      	b.n	8003f28 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003edc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ee6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2319      	movs	r3, #25
 8003eee:	2201      	movs	r2, #1
 8003ef0:	490f      	ldr	r1, [pc, #60]	; (8003f30 <HAL_I2C_IsDeviceReady+0x254>)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f98a 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e012      	b.n	8003f28 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	f4ff af32 	bcc.w	8003d76 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
  }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	00100002 	.word	0x00100002
 8003f34:	ffff0000 	.word	0xffff0000

08003f38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	460b      	mov	r3, r1
 8003f46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d006      	beq.n	8003f62 <I2C_MasterRequestWrite+0x2a>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d003      	beq.n	8003f62 <I2C_MasterRequestWrite+0x2a>
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f60:	d108      	bne.n	8003f74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e00b      	b.n	8003f8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	2b12      	cmp	r3, #18
 8003f7a:	d107      	bne.n	8003f8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f937 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00d      	beq.n	8003fc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb2:	d103      	bne.n	8003fbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e035      	b.n	800402c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc8:	d108      	bne.n	8003fdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fca:	897b      	ldrh	r3, [r7, #10]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fd8:	611a      	str	r2, [r3, #16]
 8003fda:	e01b      	b.n	8004014 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fdc:	897b      	ldrh	r3, [r7, #10]
 8003fde:	11db      	asrs	r3, r3, #7
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f003 0306 	and.w	r3, r3, #6
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f063 030f 	orn	r3, r3, #15
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	490e      	ldr	r1, [pc, #56]	; (8004034 <I2C_MasterRequestWrite+0xfc>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f95d 	bl	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e010      	b.n	800402c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800400a:	897b      	ldrh	r3, [r7, #10]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4907      	ldr	r1, [pc, #28]	; (8004038 <I2C_MasterRequestWrite+0x100>)
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f94d 	bl	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	00010008 	.word	0x00010008
 8004038:	00010002 	.word	0x00010002

0800403c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	4608      	mov	r0, r1
 8004046:	4611      	mov	r1, r2
 8004048:	461a      	mov	r2, r3
 800404a:	4603      	mov	r3, r0
 800404c:	817b      	strh	r3, [r7, #10]
 800404e:	460b      	mov	r3, r1
 8004050:	813b      	strh	r3, [r7, #8]
 8004052:	4613      	mov	r3, r2
 8004054:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004064:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004074:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	2200      	movs	r2, #0
 800407e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f8c2 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409c:	d103      	bne.n	80040a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0aa      	b.n	8004200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	4952      	ldr	r1, [pc, #328]	; (8004208 <I2C_RequestMemoryRead+0x1cc>)
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f8fa 	bl	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e097      	b.n	8004200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e8:	6a39      	ldr	r1, [r7, #32]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f964 	bl	80043b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d107      	bne.n	800410e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e076      	b.n	8004200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d105      	bne.n	8004124 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004118:	893b      	ldrh	r3, [r7, #8]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]
 8004122:	e021      	b.n	8004168 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004124:	893b      	ldrh	r3, [r7, #8]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	b29b      	uxth	r3, r3
 800412a:	b2da      	uxtb	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	6a39      	ldr	r1, [r7, #32]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f93e 	bl	80043b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2b04      	cmp	r3, #4
 8004148:	d107      	bne.n	800415a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004158:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e050      	b.n	8004200 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415e:	893b      	ldrh	r3, [r7, #8]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	6a39      	ldr	r1, [r7, #32]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f923 	bl	80043b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00d      	beq.n	8004194 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	2b04      	cmp	r3, #4
 800417e:	d107      	bne.n	8004190 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e035      	b.n	8004200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f82b 	bl	800420c <I2C_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ca:	d103      	bne.n	80041d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e013      	b.n	8004200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041d8:	897b      	ldrh	r3, [r7, #10]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	6a3a      	ldr	r2, [r7, #32]
 80041ec:	4906      	ldr	r1, [pc, #24]	; (8004208 <I2C_RequestMemoryRead+0x1cc>)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f863 	bl	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	00010002 	.word	0x00010002

0800420c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800421c:	e025      	b.n	800426a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d021      	beq.n	800426a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004226:	f7fe f97b 	bl	8002520 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d116      	bne.n	800426a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e023      	b.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d10d      	bne.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	e00c      	b.n	80042aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d0b6      	beq.n	800421e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042c8:	e051      	b.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d8:	d123      	bne.n	8004322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f043 0204 	orr.w	r2, r3, #4
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e046      	b.n	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d021      	beq.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432a:	f7fe f8f9 	bl	8002520 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d116      	bne.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f043 0220 	orr.w	r2, r3, #32
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e020      	b.n	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d10c      	bne.n	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	43da      	mvns	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	e00b      	b.n	80043aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	43da      	mvns	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d18d      	bne.n	80042ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c4:	e02d      	b.n	8004422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f8ce 	bl	8004568 <I2C_IsAcknowledgeFailed>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e02d      	b.n	8004432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d021      	beq.n	8004422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fe f89f 	bl	8002520 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d116      	bne.n	8004422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0220 	orr.w	r2, r3, #32
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e007      	b.n	8004432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d1ca      	bne.n	80043c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004446:	e02d      	b.n	80044a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f88d 	bl	8004568 <I2C_IsAcknowledgeFailed>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e02d      	b.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d021      	beq.n	80044a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004460:	f7fe f85e 	bl	8002520 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	429a      	cmp	r2, r3
 800446e:	d302      	bcc.n	8004476 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e007      	b.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d1ca      	bne.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044c8:	e042      	b.n	8004550 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d119      	bne.n	800450c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0210 	mvn.w	r2, #16
 80044e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e029      	b.n	8004560 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450c:	f7fe f808 	bl	8002520 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	d302      	bcc.n	8004522 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d116      	bne.n	8004550 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e007      	b.n	8004560 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d1b5      	bne.n	80044ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457e:	d11b      	bne.n	80045b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004588:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f043 0204 	orr.w	r2, r3, #4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e267      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d075      	beq.n	80046d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045e6:	4b88      	ldr	r3, [pc, #544]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d00c      	beq.n	800460c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045f2:	4b85      	ldr	r3, [pc, #532]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d112      	bne.n	8004624 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fe:	4b82      	ldr	r3, [pc, #520]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800460a:	d10b      	bne.n	8004624 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460c:	4b7e      	ldr	r3, [pc, #504]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d05b      	beq.n	80046d0 <HAL_RCC_OscConfig+0x108>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d157      	bne.n	80046d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e242      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462c:	d106      	bne.n	800463c <HAL_RCC_OscConfig+0x74>
 800462e:	4b76      	ldr	r3, [pc, #472]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a75      	ldr	r2, [pc, #468]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e01d      	b.n	8004678 <HAL_RCC_OscConfig+0xb0>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004644:	d10c      	bne.n	8004660 <HAL_RCC_OscConfig+0x98>
 8004646:	4b70      	ldr	r3, [pc, #448]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a6f      	ldr	r2, [pc, #444]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 800464c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4b6d      	ldr	r3, [pc, #436]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a6c      	ldr	r2, [pc, #432]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e00b      	b.n	8004678 <HAL_RCC_OscConfig+0xb0>
 8004660:	4b69      	ldr	r3, [pc, #420]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a68      	ldr	r2, [pc, #416]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b66      	ldr	r3, [pc, #408]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a65      	ldr	r2, [pc, #404]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d013      	beq.n	80046a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004680:	f7fd ff4e 	bl	8002520 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004688:	f7fd ff4a 	bl	8002520 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b64      	cmp	r3, #100	; 0x64
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e207      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469a:	4b5b      	ldr	r3, [pc, #364]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f0      	beq.n	8004688 <HAL_RCC_OscConfig+0xc0>
 80046a6:	e014      	b.n	80046d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fd ff3a 	bl	8002520 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fd ff36 	bl	8002520 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e1f3      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c2:	4b51      	ldr	r3, [pc, #324]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0xe8>
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d063      	beq.n	80047a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046de:	4b4a      	ldr	r3, [pc, #296]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ea:	4b47      	ldr	r3, [pc, #284]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d11c      	bne.n	8004730 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f6:	4b44      	ldr	r3, [pc, #272]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d116      	bne.n	8004730 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004702:	4b41      	ldr	r3, [pc, #260]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_RCC_OscConfig+0x152>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d001      	beq.n	800471a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e1c7      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471a:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4937      	ldr	r1, [pc, #220]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 800472a:	4313      	orrs	r3, r2
 800472c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472e:	e03a      	b.n	80047a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d020      	beq.n	800477a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004738:	4b34      	ldr	r3, [pc, #208]	; (800480c <HAL_RCC_OscConfig+0x244>)
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fd feef 	bl	8002520 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004746:	f7fd feeb 	bl	8002520 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e1a8      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004758:	4b2b      	ldr	r3, [pc, #172]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004764:	4b28      	ldr	r3, [pc, #160]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4925      	ldr	r1, [pc, #148]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 8004774:	4313      	orrs	r3, r2
 8004776:	600b      	str	r3, [r1, #0]
 8004778:	e015      	b.n	80047a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <HAL_RCC_OscConfig+0x244>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fd fece 	bl	8002520 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004788:	f7fd feca 	bl	8002520 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e187      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479a:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d036      	beq.n	8004820 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d016      	beq.n	80047e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <HAL_RCC_OscConfig+0x248>)
 80047bc:	2201      	movs	r2, #1
 80047be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c0:	f7fd feae 	bl	8002520 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c8:	f7fd feaa 	bl	8002520 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e167      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047da:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_OscConfig+0x240>)
 80047dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x200>
 80047e6:	e01b      	b.n	8004820 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_OscConfig+0x248>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ee:	f7fd fe97 	bl	8002520 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f4:	e00e      	b.n	8004814 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f6:	f7fd fe93 	bl	8002520 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d907      	bls.n	8004814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e150      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
 8004808:	40023800 	.word	0x40023800
 800480c:	42470000 	.word	0x42470000
 8004810:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004814:	4b88      	ldr	r3, [pc, #544]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ea      	bne.n	80047f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8097 	beq.w	800495c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004832:	4b81      	ldr	r3, [pc, #516]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10f      	bne.n	800485e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	4b7d      	ldr	r3, [pc, #500]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	4a7c      	ldr	r2, [pc, #496]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484c:	6413      	str	r3, [r2, #64]	; 0x40
 800484e:	4b7a      	ldr	r3, [pc, #488]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004856:	60bb      	str	r3, [r7, #8]
 8004858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485e:	4b77      	ldr	r3, [pc, #476]	; (8004a3c <HAL_RCC_OscConfig+0x474>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d118      	bne.n	800489c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800486a:	4b74      	ldr	r3, [pc, #464]	; (8004a3c <HAL_RCC_OscConfig+0x474>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a73      	ldr	r2, [pc, #460]	; (8004a3c <HAL_RCC_OscConfig+0x474>)
 8004870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004876:	f7fd fe53 	bl	8002520 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487e:	f7fd fe4f 	bl	8002520 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e10c      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004890:	4b6a      	ldr	r3, [pc, #424]	; (8004a3c <HAL_RCC_OscConfig+0x474>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d106      	bne.n	80048b2 <HAL_RCC_OscConfig+0x2ea>
 80048a4:	4b64      	ldr	r3, [pc, #400]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a8:	4a63      	ldr	r2, [pc, #396]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	6713      	str	r3, [r2, #112]	; 0x70
 80048b0:	e01c      	b.n	80048ec <HAL_RCC_OscConfig+0x324>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d10c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x30c>
 80048ba:	4b5f      	ldr	r3, [pc, #380]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	4a5e      	ldr	r2, [pc, #376]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80048c0:	f043 0304 	orr.w	r3, r3, #4
 80048c4:	6713      	str	r3, [r2, #112]	; 0x70
 80048c6:	4b5c      	ldr	r3, [pc, #368]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	4a5b      	ldr	r2, [pc, #364]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	6713      	str	r3, [r2, #112]	; 0x70
 80048d2:	e00b      	b.n	80048ec <HAL_RCC_OscConfig+0x324>
 80048d4:	4b58      	ldr	r3, [pc, #352]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	4a57      	ldr	r2, [pc, #348]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	6713      	str	r3, [r2, #112]	; 0x70
 80048e0:	4b55      	ldr	r3, [pc, #340]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	4a54      	ldr	r2, [pc, #336]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80048e6:	f023 0304 	bic.w	r3, r3, #4
 80048ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d015      	beq.n	8004920 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fd fe14 	bl	8002520 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fc:	f7fd fe10 	bl	8002520 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e0cb      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004912:	4b49      	ldr	r3, [pc, #292]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0ee      	beq.n	80048fc <HAL_RCC_OscConfig+0x334>
 800491e:	e014      	b.n	800494a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004920:	f7fd fdfe 	bl	8002520 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004926:	e00a      	b.n	800493e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004928:	f7fd fdfa 	bl	8002520 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	; 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e0b5      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493e:	4b3e      	ldr	r3, [pc, #248]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1ee      	bne.n	8004928 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800494a:	7dfb      	ldrb	r3, [r7, #23]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d105      	bne.n	800495c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004950:	4b39      	ldr	r3, [pc, #228]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	4a38      	ldr	r2, [pc, #224]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80a1 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004966:	4b34      	ldr	r3, [pc, #208]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b08      	cmp	r3, #8
 8004970:	d05c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d141      	bne.n	80049fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497a:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <HAL_RCC_OscConfig+0x478>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fd fdce 	bl	8002520 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004988:	f7fd fdca 	bl	8002520 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e087      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499a:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69da      	ldr	r2, [r3, #28]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	019b      	lsls	r3, r3, #6
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	3b01      	subs	r3, #1
 80049c0:	041b      	lsls	r3, r3, #16
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	491b      	ldr	r1, [pc, #108]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <HAL_RCC_OscConfig+0x478>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d6:	f7fd fda3 	bl	8002520 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049de:	f7fd fd9f 	bl	8002520 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e05c      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f0:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x416>
 80049fc:	e054      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <HAL_RCC_OscConfig+0x478>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7fd fd8c 	bl	8002520 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fd fd88 	bl	8002520 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e045      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_RCC_OscConfig+0x470>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x444>
 8004a2a:	e03d      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e038      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40007000 	.word	0x40007000
 8004a40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a44:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <HAL_RCC_OscConfig+0x4ec>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d028      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d121      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d11a      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a74:	4013      	ands	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d111      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d107      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800

08004ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0cc      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	4b68      	ldr	r3, [pc, #416]	; (8004c70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d90c      	bls.n	8004af4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b65      	ldr	r3, [pc, #404]	; (8004c70 <HAL_RCC_ClockConfig+0x1b8>)
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae2:	4b63      	ldr	r3, [pc, #396]	; (8004c70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0b8      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d020      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b0c:	4b59      	ldr	r3, [pc, #356]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a58      	ldr	r2, [pc, #352]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b24:	4b53      	ldr	r3, [pc, #332]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a52      	ldr	r2, [pc, #328]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b30:	4b50      	ldr	r3, [pc, #320]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	494d      	ldr	r1, [pc, #308]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d044      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d107      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	4b47      	ldr	r3, [pc, #284]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d119      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e07f      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d003      	beq.n	8004b76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d107      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b76:	4b3f      	ldr	r3, [pc, #252]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e06f      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b86:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e067      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b96:	4b37      	ldr	r3, [pc, #220]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f023 0203 	bic.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4934      	ldr	r1, [pc, #208]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba8:	f7fd fcba 	bl	8002520 <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb0:	f7fd fcb6 	bl	8002520 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e04f      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 020c 	and.w	r2, r3, #12
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d1eb      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <HAL_RCC_ClockConfig+0x1b8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d20c      	bcs.n	8004c00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be6:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b20      	ldr	r3, [pc, #128]	; (8004c70 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e032      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0c:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4916      	ldr	r1, [pc, #88]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	490e      	ldr	r1, [pc, #56]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c3e:	f000 f821 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8004c42:	4602      	mov	r2, r0
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	490a      	ldr	r1, [pc, #40]	; (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004c50:	5ccb      	ldrb	r3, [r1, r3]
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <HAL_RCC_ClockConfig+0x1c8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fd fc1a 	bl	8002498 <HAL_InitTick>

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40023c00 	.word	0x40023c00
 8004c74:	40023800 	.word	0x40023800
 8004c78:	0800bb30 	.word	0x0800bb30
 8004c7c:	20000018 	.word	0x20000018
 8004c80:	2000001c 	.word	0x2000001c

08004c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c88:	b094      	sub	sp, #80	; 0x50
 8004c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c90:	2300      	movs	r3, #0
 8004c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c94:	2300      	movs	r3, #0
 8004c96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c9c:	4b79      	ldr	r3, [pc, #484]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 030c 	and.w	r3, r3, #12
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d00d      	beq.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	f200 80e1 	bhi.w	8004e70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0x3a>
 8004cb6:	e0db      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb8:	4b73      	ldr	r3, [pc, #460]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004cbc:	e0db      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cbe:	4b73      	ldr	r3, [pc, #460]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x208>)
 8004cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cc2:	e0d8      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cc4:	4b6f      	ldr	r3, [pc, #444]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ccc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cce:	4b6d      	ldr	r3, [pc, #436]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d063      	beq.n	8004da2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cda:	4b6a      	ldr	r3, [pc, #424]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	099b      	lsrs	r3, r3, #6
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ce4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cec:	633b      	str	r3, [r7, #48]	; 0x30
 8004cee:	2300      	movs	r3, #0
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	462b      	mov	r3, r5
 8004cfa:	f04f 0000 	mov.w	r0, #0
 8004cfe:	f04f 0100 	mov.w	r1, #0
 8004d02:	0159      	lsls	r1, r3, #5
 8004d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d08:	0150      	lsls	r0, r2, #5
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4621      	mov	r1, r4
 8004d10:	1a51      	subs	r1, r2, r1
 8004d12:	6139      	str	r1, [r7, #16]
 8004d14:	4629      	mov	r1, r5
 8004d16:	eb63 0301 	sbc.w	r3, r3, r1
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d28:	4659      	mov	r1, fp
 8004d2a:	018b      	lsls	r3, r1, #6
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d32:	4651      	mov	r1, sl
 8004d34:	018a      	lsls	r2, r1, #6
 8004d36:	4651      	mov	r1, sl
 8004d38:	ebb2 0801 	subs.w	r8, r2, r1
 8004d3c:	4659      	mov	r1, fp
 8004d3e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d56:	4690      	mov	r8, r2
 8004d58:	4699      	mov	r9, r3
 8004d5a:	4623      	mov	r3, r4
 8004d5c:	eb18 0303 	adds.w	r3, r8, r3
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	462b      	mov	r3, r5
 8004d64:	eb49 0303 	adc.w	r3, r9, r3
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d76:	4629      	mov	r1, r5
 8004d78:	024b      	lsls	r3, r1, #9
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d80:	4621      	mov	r1, r4
 8004d82:	024a      	lsls	r2, r1, #9
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d94:	f7fb ff60 	bl	8000c58 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da0:	e058      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da2:	4b38      	ldr	r3, [pc, #224]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	099b      	lsrs	r3, r3, #6
 8004da8:	2200      	movs	r2, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	4611      	mov	r1, r2
 8004dae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	2300      	movs	r3, #0
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
 8004db8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	f04f 0000 	mov.w	r0, #0
 8004dc4:	f04f 0100 	mov.w	r1, #0
 8004dc8:	0159      	lsls	r1, r3, #5
 8004dca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dce:	0150      	lsls	r0, r2, #5
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dda:	4649      	mov	r1, r9
 8004ddc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004df0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004df4:	ebb2 040a 	subs.w	r4, r2, sl
 8004df8:	eb63 050b 	sbc.w	r5, r3, fp
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	00eb      	lsls	r3, r5, #3
 8004e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e0a:	00e2      	lsls	r2, r4, #3
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	461d      	mov	r5, r3
 8004e10:	4643      	mov	r3, r8
 8004e12:	18e3      	adds	r3, r4, r3
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	464b      	mov	r3, r9
 8004e18:	eb45 0303 	adc.w	r3, r5, r3
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	028b      	lsls	r3, r1, #10
 8004e2e:	4621      	mov	r1, r4
 8004e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e34:	4621      	mov	r1, r4
 8004e36:	028a      	lsls	r2, r1, #10
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e3e:	2200      	movs	r2, #0
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	61fa      	str	r2, [r7, #28]
 8004e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e48:	f7fb ff06 	bl	8000c58 <__aeabi_uldivmod>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4613      	mov	r3, r2
 8004e52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	0c1b      	lsrs	r3, r3, #16
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e6e:	e002      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3750      	adds	r7, #80	; 0x50
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e82:	bf00      	nop
 8004e84:	40023800 	.word	0x40023800
 8004e88:	00f42400 	.word	0x00f42400
 8004e8c:	007a1200 	.word	0x007a1200

08004e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e96:	681b      	ldr	r3, [r3, #0]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000018 	.word	0x20000018

08004ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004eac:	f7ff fff0 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	0a9b      	lsrs	r3, r3, #10
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4903      	ldr	r1, [pc, #12]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	0800bb40 	.word	0x0800bb40

08004ed0 <__NVIC_EnableIRQ>:
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	db0b      	blt.n	8004efa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	f003 021f 	and.w	r2, r3, #31
 8004ee8:	4907      	ldr	r1, [pc, #28]	; (8004f08 <__NVIC_EnableIRQ+0x38>)
 8004eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	e000e100 	.word	0xe000e100

08004f0c <map>:
		(0x07), (0x08), (0x09), (0x10), (0x11), (0x12), (0x13), (0x14), (0x015) };



uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 8004f0c:	b490      	push	{r4, r7}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4604      	mov	r4, r0
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	80fb      	strh	r3, [r7, #6]
 8004f1e:	4603      	mov	r3, r0
 8004f20:	80bb      	strh	r3, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	807b      	strh	r3, [r7, #2]
 8004f26:	4613      	mov	r3, r2
 8004f28:	803b      	strh	r3, [r7, #0]
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	88bb      	ldrh	r3, [r7, #4]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	8a39      	ldrh	r1, [r7, #16]
 8004f32:	883a      	ldrh	r2, [r7, #0]
 8004f34:	1a8a      	subs	r2, r1, r2
 8004f36:	fb03 f202 	mul.w	r2, r3, r2
 8004f3a:	8879      	ldrh	r1, [r7, #2]
 8004f3c:	88bb      	ldrh	r3, [r7, #4]
 8004f3e:	1ac9      	subs	r1, r1, r3
 8004f40:	883b      	ldrh	r3, [r7, #0]
 8004f42:	440b      	add	r3, r1
 8004f44:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f48:	b29b      	uxth	r3, r3
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc90      	pop	{r4, r7}
 8004f52:	4770      	bx	lr

08004f54 <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <gpio_clk_en+0x78>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d106      	bne.n	8004f72 <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 8004f64:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <gpio_clk_en+0x7c>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <gpio_clk_en+0x7c>)
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 8004f70:	e026      	b.n	8004fc0 <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <gpio_clk_en+0x80>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d106      	bne.n	8004f88 <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <gpio_clk_en+0x7c>)
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <gpio_clk_en+0x7c>)
 8004f80:	f043 0302 	orr.w	r3, r3, #2
 8004f84:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004f86:	e01b      	b.n	8004fc0 <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <gpio_clk_en+0x84>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d106      	bne.n	8004f9e <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 8004f90:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <gpio_clk_en+0x7c>)
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	4a0e      	ldr	r2, [pc, #56]	; (8004fd0 <gpio_clk_en+0x7c>)
 8004f96:	f043 0304 	orr.w	r3, r3, #4
 8004f9a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004f9c:	e010      	b.n	8004fc0 <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a0e      	ldr	r2, [pc, #56]	; (8004fdc <gpio_clk_en+0x88>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d106      	bne.n	8004fb4 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <gpio_clk_en+0x7c>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <gpio_clk_en+0x7c>)
 8004fac:	f043 0308 	orr.w	r3, r3, #8
 8004fb0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004fb2:	e005      	b.n	8004fc0 <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8004fb4:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <gpio_clk_en+0x7c>)
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	4a05      	ldr	r2, [pc, #20]	; (8004fd0 <gpio_clk_en+0x7c>)
 8004fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	40020000 	.word	0x40020000
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40020400 	.word	0x40020400
 8004fd8:	40020800 	.word	0x40020800
 8004fdc:	40020c00 	.word	0x40020c00

08004fe0 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d117      	bne.n	8005024 <gpio_config+0x44>
		gpio_clk_en(port);
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff ffad 	bl	8004f54 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f846 	bl	8005090 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f85b 	bl	80050c4 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f870 	bl	80050f8 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f885 	bl	800512c <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 8005022:	e031      	b.n	8005088 <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10d      	bne.n	8005046 <gpio_config+0x66>
		gpio_clk_en(port);
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff ff92 	bl	8004f54 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f82b 	bl	8005090 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f85a 	bl	80050f8 <gpio_PUPD>
}
 8005044:	e020      	b.n	8005088 <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d112      	bne.n	8005072 <gpio_config+0x92>
		gpio_clk_en(port);
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f7ff ff81 	bl	8004f54 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f81a 	bl	8005090 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f849 	bl	80050f8 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f85e 	bl	800512c <gpio_PHPL_OD>
}
 8005070:	e00a      	b.n	8005088 <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d107      	bne.n	8005088 <gpio_config+0xa8>
		gpio_clk_en(port);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff ff6b 	bl	8004f54 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f804 	bl	8005090 <gpio_moder>
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4907      	ldr	r1, [pc, #28]	; (80050c0 <gpio_moder+0x30>)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	431a      	orrs	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	601a      	str	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	20000024 	.word	0x20000024

080050c4 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	4907      	ldr	r1, [pc, #28]	; (80050f4 <gpio_speed+0x30>)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	fa01 f303 	lsl.w	r3, r1, r3
 80050e2:	431a      	orrs	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	609a      	str	r2, [r3, #8]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	20000024 	.word	0x20000024

080050f8 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	4907      	ldr	r1, [pc, #28]	; (8005128 <gpio_PUPD+0x30>)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	fa01 f303 	lsl.w	r3, r1, r3
 8005116:	431a      	orrs	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	60da      	str	r2, [r3, #12]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	20000024 	.word	0x20000024

0800512c <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	605a      	str	r2, [r3, #4]
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b07      	cmp	r3, #7
 8005166:	d80a      	bhi.n	800517e <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a1a      	ldr	r2, [r3, #32]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	431a      	orrs	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 800517c:	e00a      	b.n	8005194 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	3b08      	subs	r3, #8
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	fa01 f303 	lsl.w	r3, r1, r3
 800518e:	431a      	orrs	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	71fb      	strb	r3, [r7, #7]
	if (state) {
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <gpio_write+0x24>
		port->BSRR = (1 << pinNumber);
 80051b4:	2201      	movs	r2, #1
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 80051c2:	e007      	b.n	80051d4 <gpio_write+0x34>
		port->BSRR = (1 << (pinNumber + 16));
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	3310      	adds	r3, #16
 80051c8:	2201      	movs	r2, #1
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	619a      	str	r2, [r3, #24]
}
 80051d4:	bf00      	nop
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <gpio_IT_config>:
	return flag;
}
/**************************************************************************************/

/*******************************INTERRUPT CONFIGURATION*********************************/
void gpio_IT_config(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t edge) {
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71fb      	strb	r3, [r7, #7]
	SYSCFG_CLK_EN;
 80051ee:	4baa      	ldr	r3, [pc, #680]	; (8005498 <gpio_IT_config+0x2b8>)
 80051f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f2:	4aa9      	ldr	r2, [pc, #676]	; (8005498 <gpio_IT_config+0x2b8>)
 80051f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051f8:	6453      	str	r3, [r2, #68]	; 0x44
	if (port == GPIOA) {
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4aa7      	ldr	r2, [pc, #668]	; (800549c <gpio_IT_config+0x2bc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d166      	bne.n	80052d0 <gpio_IT_config+0xf0>
		switch (pinNumber) {
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b0f      	cmp	r3, #15
 8005206:	f200 81ca 	bhi.w	800559e <gpio_IT_config+0x3be>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <gpio_IT_config+0x30>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005251 	.word	0x08005251
 8005214:	08005259 	.word	0x08005259
 8005218:	08005261 	.word	0x08005261
 800521c:	08005269 	.word	0x08005269
 8005220:	08005271 	.word	0x08005271
 8005224:	08005279 	.word	0x08005279
 8005228:	08005281 	.word	0x08005281
 800522c:	08005289 	.word	0x08005289
 8005230:	08005291 	.word	0x08005291
 8005234:	08005299 	.word	0x08005299
 8005238:	080052a1 	.word	0x080052a1
 800523c:	080052a9 	.word	0x080052a9
 8005240:	080052b1 	.word	0x080052b1
 8005244:	080052b9 	.word	0x080052b9
 8005248:	080052c1 	.word	0x080052c1
 800524c:	080052c9 	.word	0x080052c9
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8005250:	4b93      	ldr	r3, [pc, #588]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005252:	2200      	movs	r2, #0
 8005254:	609a      	str	r2, [r3, #8]
			break;
 8005256:	e1a2      	b.n	800559e <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 8005258:	4b91      	ldr	r3, [pc, #580]	; (80054a0 <gpio_IT_config+0x2c0>)
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
			break;
 800525e:	e19e      	b.n	800559e <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 8005260:	4b8f      	ldr	r3, [pc, #572]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005262:	2200      	movs	r2, #0
 8005264:	609a      	str	r2, [r3, #8]
			break;
 8005266:	e19a      	b.n	800559e <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 8005268:	4b8d      	ldr	r3, [pc, #564]	; (80054a0 <gpio_IT_config+0x2c0>)
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
			break;
 800526e:	e196      	b.n	800559e <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA;
 8005270:	4b8b      	ldr	r3, [pc, #556]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005272:	2200      	movs	r2, #0
 8005274:	60da      	str	r2, [r3, #12]
			break;
 8005276:	e192      	b.n	800559e <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PA;
 8005278:	4b89      	ldr	r3, [pc, #548]	; (80054a0 <gpio_IT_config+0x2c0>)
 800527a:	2200      	movs	r2, #0
 800527c:	60da      	str	r2, [r3, #12]
			break;
 800527e:	e18e      	b.n	800559e <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PA;
 8005280:	4b87      	ldr	r3, [pc, #540]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005282:	2200      	movs	r2, #0
 8005284:	60da      	str	r2, [r3, #12]
			break;
 8005286:	e18a      	b.n	800559e <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PA;
 8005288:	4b85      	ldr	r3, [pc, #532]	; (80054a0 <gpio_IT_config+0x2c0>)
 800528a:	2200      	movs	r2, #0
 800528c:	60da      	str	r2, [r3, #12]
			break;
 800528e:	e186      	b.n	800559e <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PA;
 8005290:	4b83      	ldr	r3, [pc, #524]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005292:	2200      	movs	r2, #0
 8005294:	611a      	str	r2, [r3, #16]
			break;
 8005296:	e182      	b.n	800559e <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PA;
 8005298:	4b81      	ldr	r3, [pc, #516]	; (80054a0 <gpio_IT_config+0x2c0>)
 800529a:	2200      	movs	r2, #0
 800529c:	611a      	str	r2, [r3, #16]
			break;
 800529e:	e17e      	b.n	800559e <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PA;
 80052a0:	4b7f      	ldr	r3, [pc, #508]	; (80054a0 <gpio_IT_config+0x2c0>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	611a      	str	r2, [r3, #16]
			break;
 80052a6:	e17a      	b.n	800559e <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PA;
 80052a8:	4b7d      	ldr	r3, [pc, #500]	; (80054a0 <gpio_IT_config+0x2c0>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	611a      	str	r2, [r3, #16]
			break;
 80052ae:	e176      	b.n	800559e <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PA;
 80052b0:	4b7b      	ldr	r3, [pc, #492]	; (80054a0 <gpio_IT_config+0x2c0>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	615a      	str	r2, [r3, #20]
			break;
 80052b6:	e172      	b.n	800559e <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PA;
 80052b8:	4b79      	ldr	r3, [pc, #484]	; (80054a0 <gpio_IT_config+0x2c0>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	615a      	str	r2, [r3, #20]
			break;
 80052be:	e16e      	b.n	800559e <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PA;
 80052c0:	4b77      	ldr	r3, [pc, #476]	; (80054a0 <gpio_IT_config+0x2c0>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	615a      	str	r2, [r3, #20]
			break;
 80052c6:	e16a      	b.n	800559e <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PA;
 80052c8:	4b75      	ldr	r3, [pc, #468]	; (80054a0 <gpio_IT_config+0x2c0>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	615a      	str	r2, [r3, #20]
			break;
 80052ce:	e166      	b.n	800559e <gpio_IT_config+0x3be>
		}	// end of Port A
	} else if (port == GPIOB) {
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a74      	ldr	r2, [pc, #464]	; (80054a4 <gpio_IT_config+0x2c4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d16f      	bne.n	80053b8 <gpio_IT_config+0x1d8>
		switch (pinNumber) {
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b0f      	cmp	r3, #15
 80052dc:	f200 815f 	bhi.w	800559e <gpio_IT_config+0x3be>
 80052e0:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <gpio_IT_config+0x108>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	08005329 	.word	0x08005329
 80052ec:	08005331 	.word	0x08005331
 80052f0:	08005339 	.word	0x08005339
 80052f4:	08005343 	.word	0x08005343
 80052f8:	0800534d 	.word	0x0800534d
 80052fc:	08005355 	.word	0x08005355
 8005300:	0800535d 	.word	0x0800535d
 8005304:	08005367 	.word	0x08005367
 8005308:	08005371 	.word	0x08005371
 800530c:	08005379 	.word	0x08005379
 8005310:	08005381 	.word	0x08005381
 8005314:	0800538b 	.word	0x0800538b
 8005318:	08005395 	.word	0x08005395
 800531c:	0800539d 	.word	0x0800539d
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053af 	.word	0x080053af
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 8005328:	4b5d      	ldr	r3, [pc, #372]	; (80054a0 <gpio_IT_config+0x2c0>)
 800532a:	2201      	movs	r2, #1
 800532c:	609a      	str	r2, [r3, #8]
			break;
 800532e:	e136      	b.n	800559e <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 8005330:	4b5b      	ldr	r3, [pc, #364]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005332:	2210      	movs	r2, #16
 8005334:	609a      	str	r2, [r3, #8]
			break;
 8005336:	e132      	b.n	800559e <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 8005338:	4b59      	ldr	r3, [pc, #356]	; (80054a0 <gpio_IT_config+0x2c0>)
 800533a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800533e:	609a      	str	r2, [r3, #8]
			break;
 8005340:	e12d      	b.n	800559e <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 8005342:	4b57      	ldr	r3, [pc, #348]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005348:	609a      	str	r2, [r3, #8]
			break;
 800534a:	e128      	b.n	800559e <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PB;
 800534c:	4b54      	ldr	r3, [pc, #336]	; (80054a0 <gpio_IT_config+0x2c0>)
 800534e:	2201      	movs	r2, #1
 8005350:	60da      	str	r2, [r3, #12]
			break;
 8005352:	e124      	b.n	800559e <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PB;
 8005354:	4b52      	ldr	r3, [pc, #328]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005356:	2210      	movs	r2, #16
 8005358:	60da      	str	r2, [r3, #12]
			break;
 800535a:	e120      	b.n	800559e <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PB;
 800535c:	4b50      	ldr	r3, [pc, #320]	; (80054a0 <gpio_IT_config+0x2c0>)
 800535e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005362:	60da      	str	r2, [r3, #12]
			break;
 8005364:	e11b      	b.n	800559e <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PB;
 8005366:	4b4e      	ldr	r3, [pc, #312]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800536c:	60da      	str	r2, [r3, #12]
			break;
 800536e:	e116      	b.n	800559e <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PB;
 8005370:	4b4b      	ldr	r3, [pc, #300]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005372:	2201      	movs	r2, #1
 8005374:	611a      	str	r2, [r3, #16]
			break;
 8005376:	e112      	b.n	800559e <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PB;
 8005378:	4b49      	ldr	r3, [pc, #292]	; (80054a0 <gpio_IT_config+0x2c0>)
 800537a:	2210      	movs	r2, #16
 800537c:	611a      	str	r2, [r3, #16]
			break;
 800537e:	e10e      	b.n	800559e <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PB;
 8005380:	4b47      	ldr	r3, [pc, #284]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005386:	611a      	str	r2, [r3, #16]
			break;
 8005388:	e109      	b.n	800559e <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PB;
 800538a:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <gpio_IT_config+0x2c0>)
 800538c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005390:	611a      	str	r2, [r3, #16]
			break;
 8005392:	e104      	b.n	800559e <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PB;
 8005394:	4b42      	ldr	r3, [pc, #264]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005396:	2201      	movs	r2, #1
 8005398:	615a      	str	r2, [r3, #20]
			break;
 800539a:	e100      	b.n	800559e <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PB;
 800539c:	4b40      	ldr	r3, [pc, #256]	; (80054a0 <gpio_IT_config+0x2c0>)
 800539e:	2210      	movs	r2, #16
 80053a0:	615a      	str	r2, [r3, #20]
			break;
 80053a2:	e0fc      	b.n	800559e <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PB;
 80053a4:	4b3e      	ldr	r3, [pc, #248]	; (80054a0 <gpio_IT_config+0x2c0>)
 80053a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053aa:	615a      	str	r2, [r3, #20]
			break;
 80053ac:	e0f7      	b.n	800559e <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PB;
 80053ae:	4b3c      	ldr	r3, [pc, #240]	; (80054a0 <gpio_IT_config+0x2c0>)
 80053b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053b4:	615a      	str	r2, [r3, #20]
			break;
 80053b6:	e0f2      	b.n	800559e <gpio_IT_config+0x3be>
		}	// end of Port B
	} else if (port == GPIOC) {
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4a3b      	ldr	r2, [pc, #236]	; (80054a8 <gpio_IT_config+0x2c8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d17a      	bne.n	80054b6 <gpio_IT_config+0x2d6>
		switch (pinNumber) {
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	f200 80eb 	bhi.w	800559e <gpio_IT_config+0x3be>
 80053c8:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <gpio_IT_config+0x1f0>)
 80053ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ce:	bf00      	nop
 80053d0:	08005411 	.word	0x08005411
 80053d4:	08005419 	.word	0x08005419
 80053d8:	08005421 	.word	0x08005421
 80053dc:	0800542b 	.word	0x0800542b
 80053e0:	08005435 	.word	0x08005435
 80053e4:	0800543d 	.word	0x0800543d
 80053e8:	08005445 	.word	0x08005445
 80053ec:	0800544f 	.word	0x0800544f
 80053f0:	08005459 	.word	0x08005459
 80053f4:	08005461 	.word	0x08005461
 80053f8:	08005469 	.word	0x08005469
 80053fc:	08005473 	.word	0x08005473
 8005400:	0800547d 	.word	0x0800547d
 8005404:	08005485 	.word	0x08005485
 8005408:	0800548d 	.word	0x0800548d
 800540c:	080054ad 	.word	0x080054ad
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 8005410:	4b23      	ldr	r3, [pc, #140]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005412:	2202      	movs	r2, #2
 8005414:	609a      	str	r2, [r3, #8]
			break;
 8005416:	e0c2      	b.n	800559e <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <gpio_IT_config+0x2c0>)
 800541a:	2220      	movs	r2, #32
 800541c:	609a      	str	r2, [r3, #8]
			break;
 800541e:	e0be      	b.n	800559e <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 8005420:	4b1f      	ldr	r3, [pc, #124]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005426:	609a      	str	r2, [r3, #8]
			break;
 8005428:	e0b9      	b.n	800559e <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 800542a:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <gpio_IT_config+0x2c0>)
 800542c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005430:	609a      	str	r2, [r3, #8]
			break;
 8005432:	e0b4      	b.n	800559e <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PC;
 8005434:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005436:	2202      	movs	r2, #2
 8005438:	60da      	str	r2, [r3, #12]
			break;
 800543a:	e0b0      	b.n	800559e <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PC;
 800543c:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <gpio_IT_config+0x2c0>)
 800543e:	2220      	movs	r2, #32
 8005440:	60da      	str	r2, [r3, #12]
			break;
 8005442:	e0ac      	b.n	800559e <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PC;
 8005444:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800544a:	60da      	str	r2, [r3, #12]
			break;
 800544c:	e0a7      	b.n	800559e <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PC;
 800544e:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005450:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005454:	60da      	str	r2, [r3, #12]
			break;
 8005456:	e0a2      	b.n	800559e <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PC;
 8005458:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <gpio_IT_config+0x2c0>)
 800545a:	2202      	movs	r2, #2
 800545c:	611a      	str	r2, [r3, #16]
			break;
 800545e:	e09e      	b.n	800559e <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PC;
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005462:	2220      	movs	r2, #32
 8005464:	611a      	str	r2, [r3, #16]
			break;
 8005466:	e09a      	b.n	800559e <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PC;
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <gpio_IT_config+0x2c0>)
 800546a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800546e:	611a      	str	r2, [r3, #16]
			break;
 8005470:	e095      	b.n	800559e <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PC;
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005474:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005478:	611a      	str	r2, [r3, #16]
			break;
 800547a:	e090      	b.n	800559e <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PC;
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <gpio_IT_config+0x2c0>)
 800547e:	2202      	movs	r2, #2
 8005480:	615a      	str	r2, [r3, #20]
			break;
 8005482:	e08c      	b.n	800559e <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PC;
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <gpio_IT_config+0x2c0>)
 8005486:	2220      	movs	r2, #32
 8005488:	615a      	str	r2, [r3, #20]
			break;
 800548a:	e088      	b.n	800559e <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PC;
 800548c:	4b04      	ldr	r3, [pc, #16]	; (80054a0 <gpio_IT_config+0x2c0>)
 800548e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005492:	615a      	str	r2, [r3, #20]
			break;
 8005494:	e083      	b.n	800559e <gpio_IT_config+0x3be>
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800
 800549c:	40020000 	.word	0x40020000
 80054a0:	40013800 	.word	0x40013800
 80054a4:	40020400 	.word	0x40020400
 80054a8:	40020800 	.word	0x40020800
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PC;
 80054ac:	4b58      	ldr	r3, [pc, #352]	; (8005610 <gpio_IT_config+0x430>)
 80054ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054b2:	615a      	str	r2, [r3, #20]
			break;
 80054b4:	e073      	b.n	800559e <gpio_IT_config+0x3be>
		}	// end of Port C
	} else if (port == GPIOD) {
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4a56      	ldr	r2, [pc, #344]	; (8005614 <gpio_IT_config+0x434>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d16e      	bne.n	800559c <gpio_IT_config+0x3bc>
		switch (pinNumber) {
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b0f      	cmp	r3, #15
 80054c2:	d86c      	bhi.n	800559e <gpio_IT_config+0x3be>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <gpio_IT_config+0x2ec>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	0800550d 	.word	0x0800550d
 80054d0:	08005515 	.word	0x08005515
 80054d4:	0800551d 	.word	0x0800551d
 80054d8:	08005527 	.word	0x08005527
 80054dc:	08005531 	.word	0x08005531
 80054e0:	08005539 	.word	0x08005539
 80054e4:	08005541 	.word	0x08005541
 80054e8:	0800554b 	.word	0x0800554b
 80054ec:	08005555 	.word	0x08005555
 80054f0:	0800555d 	.word	0x0800555d
 80054f4:	08005565 	.word	0x08005565
 80054f8:	0800556f 	.word	0x0800556f
 80054fc:	08005579 	.word	0x08005579
 8005500:	08005581 	.word	0x08005581
 8005504:	08005589 	.word	0x08005589
 8005508:	08005593 	.word	0x08005593
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 800550c:	4b40      	ldr	r3, [pc, #256]	; (8005610 <gpio_IT_config+0x430>)
 800550e:	2203      	movs	r2, #3
 8005510:	609a      	str	r2, [r3, #8]
			break;
 8005512:	e044      	b.n	800559e <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8005514:	4b3e      	ldr	r3, [pc, #248]	; (8005610 <gpio_IT_config+0x430>)
 8005516:	2230      	movs	r2, #48	; 0x30
 8005518:	609a      	str	r2, [r3, #8]
			break;
 800551a:	e040      	b.n	800559e <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 800551c:	4b3c      	ldr	r3, [pc, #240]	; (8005610 <gpio_IT_config+0x430>)
 800551e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005522:	609a      	str	r2, [r3, #8]
			break;
 8005524:	e03b      	b.n	800559e <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 8005526:	4b3a      	ldr	r3, [pc, #232]	; (8005610 <gpio_IT_config+0x430>)
 8005528:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800552c:	609a      	str	r2, [r3, #8]
			break;
 800552e:	e036      	b.n	800559e <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PD;
 8005530:	4b37      	ldr	r3, [pc, #220]	; (8005610 <gpio_IT_config+0x430>)
 8005532:	2203      	movs	r2, #3
 8005534:	60da      	str	r2, [r3, #12]
			break;
 8005536:	e032      	b.n	800559e <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PD;
 8005538:	4b35      	ldr	r3, [pc, #212]	; (8005610 <gpio_IT_config+0x430>)
 800553a:	2230      	movs	r2, #48	; 0x30
 800553c:	60da      	str	r2, [r3, #12]
			break;
 800553e:	e02e      	b.n	800559e <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PD;
 8005540:	4b33      	ldr	r3, [pc, #204]	; (8005610 <gpio_IT_config+0x430>)
 8005542:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005546:	60da      	str	r2, [r3, #12]
			break;
 8005548:	e029      	b.n	800559e <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PD;
 800554a:	4b31      	ldr	r3, [pc, #196]	; (8005610 <gpio_IT_config+0x430>)
 800554c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005550:	60da      	str	r2, [r3, #12]
			break;
 8005552:	e024      	b.n	800559e <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PD;
 8005554:	4b2e      	ldr	r3, [pc, #184]	; (8005610 <gpio_IT_config+0x430>)
 8005556:	2203      	movs	r2, #3
 8005558:	611a      	str	r2, [r3, #16]
			break;
 800555a:	e020      	b.n	800559e <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PD;
 800555c:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <gpio_IT_config+0x430>)
 800555e:	2230      	movs	r2, #48	; 0x30
 8005560:	611a      	str	r2, [r3, #16]
			break;
 8005562:	e01c      	b.n	800559e <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PD;
 8005564:	4b2a      	ldr	r3, [pc, #168]	; (8005610 <gpio_IT_config+0x430>)
 8005566:	f44f 7240 	mov.w	r2, #768	; 0x300
 800556a:	611a      	str	r2, [r3, #16]
			break;
 800556c:	e017      	b.n	800559e <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PD;
 800556e:	4b28      	ldr	r3, [pc, #160]	; (8005610 <gpio_IT_config+0x430>)
 8005570:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005574:	611a      	str	r2, [r3, #16]
			break;
 8005576:	e012      	b.n	800559e <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PD;
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <gpio_IT_config+0x430>)
 800557a:	2203      	movs	r2, #3
 800557c:	615a      	str	r2, [r3, #20]
			break;
 800557e:	e00e      	b.n	800559e <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PD;
 8005580:	4b23      	ldr	r3, [pc, #140]	; (8005610 <gpio_IT_config+0x430>)
 8005582:	2230      	movs	r2, #48	; 0x30
 8005584:	615a      	str	r2, [r3, #20]
			break;
 8005586:	e00a      	b.n	800559e <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PD;
 8005588:	4b21      	ldr	r3, [pc, #132]	; (8005610 <gpio_IT_config+0x430>)
 800558a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800558e:	615a      	str	r2, [r3, #20]
			break;
 8005590:	e005      	b.n	800559e <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PD;
 8005592:	4b1f      	ldr	r3, [pc, #124]	; (8005610 <gpio_IT_config+0x430>)
 8005594:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005598:	615a      	str	r2, [r3, #20]
			break;
 800559a:	e000      	b.n	800559e <gpio_IT_config+0x3be>
		}	// end of Port D
	}
 800559c:	bf00      	nop

	if (edge == RISING_EDGE) {
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <gpio_IT_config+0x3da>
		EXTI->RTSR |= 1 << pinNumber;
 80055a4:	4b1c      	ldr	r3, [pc, #112]	; (8005618 <gpio_IT_config+0x438>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2101      	movs	r1, #1
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	fa01 f202 	lsl.w	r2, r1, r2
 80055b0:	4611      	mov	r1, r2
 80055b2:	4a19      	ldr	r2, [pc, #100]	; (8005618 <gpio_IT_config+0x438>)
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1 << pinNumber;
	} else if (edge == RISING_FALLING_EDGE) {
		EXTI->RTSR |= 1 << pinNumber;
		EXTI->FTSR |= 1 << pinNumber;
	}
}
 80055b8:	e024      	b.n	8005604 <gpio_IT_config+0x424>
	} else if (edge == FALLING_EDGE) {
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d10a      	bne.n	80055d6 <gpio_IT_config+0x3f6>
		EXTI->FTSR |= 1 << pinNumber;
 80055c0:	4b15      	ldr	r3, [pc, #84]	; (8005618 <gpio_IT_config+0x438>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2101      	movs	r1, #1
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	fa01 f202 	lsl.w	r2, r1, r2
 80055cc:	4611      	mov	r1, r2
 80055ce:	4a12      	ldr	r2, [pc, #72]	; (8005618 <gpio_IT_config+0x438>)
 80055d0:	430b      	orrs	r3, r1
 80055d2:	60d3      	str	r3, [r2, #12]
}
 80055d4:	e016      	b.n	8005604 <gpio_IT_config+0x424>
	} else if (edge == RISING_FALLING_EDGE) {
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d113      	bne.n	8005604 <gpio_IT_config+0x424>
		EXTI->RTSR |= 1 << pinNumber;
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <gpio_IT_config+0x438>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2101      	movs	r1, #1
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	fa01 f202 	lsl.w	r2, r1, r2
 80055e8:	4611      	mov	r1, r2
 80055ea:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <gpio_IT_config+0x438>)
 80055ec:	430b      	orrs	r3, r1
 80055ee:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1 << pinNumber;
 80055f0:	4b09      	ldr	r3, [pc, #36]	; (8005618 <gpio_IT_config+0x438>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2101      	movs	r1, #1
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	fa01 f202 	lsl.w	r2, r1, r2
 80055fc:	4611      	mov	r1, r2
 80055fe:	4a06      	ldr	r2, [pc, #24]	; (8005618 <gpio_IT_config+0x438>)
 8005600:	430b      	orrs	r3, r1
 8005602:	60d3      	str	r3, [r2, #12]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40013800 	.word	0x40013800
 8005614:	40020c00 	.word	0x40020c00
 8005618:	40013c00 	.word	0x40013c00

0800561c <gpio_IT_EN>:

void gpio_IT_EN(uint8_t pinNumber, IRQn_Type irqNumber) {//Interrupt Enable Function
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	460a      	mov	r2, r1
 8005626:	71fb      	strb	r3, [r7, #7]
 8005628:	4613      	mov	r3, r2
 800562a:	71bb      	strb	r3, [r7, #6]
	EXTI->IMR |= 1 << pinNumber;	//enable interrupt in EXTI
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <gpio_IT_EN+0x38>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	79fa      	ldrb	r2, [r7, #7]
 8005632:	2101      	movs	r1, #1
 8005634:	fa01 f202 	lsl.w	r2, r1, r2
 8005638:	4611      	mov	r1, r2
 800563a:	4a06      	ldr	r2, [pc, #24]	; (8005654 <gpio_IT_EN+0x38>)
 800563c:	430b      	orrs	r3, r1
 800563e:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irqNumber);		//enable interrupt in NVIC
 8005640:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff fc43 	bl	8004ed0 <__NVIC_EnableIRQ>
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40013c00 	.word	0x40013c00

08005658 <gpio_IT_CHK>:

void gpio_IT_SW(uint8_t pinNumber) {			//Interrupt Software generate
	EXTI->SWIER |= 1 << pinNumber;				//TODO: Not Done for now
}

uint8_t gpio_IT_CHK(uint8_t pinNumber) {			//Interrupt check function
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	71fb      	strb	r3, [r7, #7]
	if ((EXTI->PR) & (1 << pinNumber)) {				//Check pending register
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <gpio_IT_CHK+0x30>)
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	79fa      	ldrb	r2, [r7, #7]
 8005668:	2101      	movs	r1, #1
 800566a:	fa01 f202 	lsl.w	r2, r1, r2
 800566e:	4013      	ands	r3, r2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <gpio_IT_CHK+0x20>
		return 1;
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <gpio_IT_CHK+0x22>
	} else {
		return 0;
 8005678:	2300      	movs	r3, #0
	}
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40013c00 	.word	0x40013c00

0800568c <gpio_IT_CLR>:

void gpio_IT_CLR(uint8_t pinNumber) {				//Interrupt clear function
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
	EXTI->PR = 1 << pinNumber;		//clear pending register
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2201      	movs	r2, #1
 800569a:	409a      	lsls	r2, r3
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <gpio_IT_CLR+0x20>)
 800569e:	615a      	str	r2, [r3, #20]
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	40013c00 	.word	0x40013c00

080056b0 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f818 	bl	80056f4 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f842 	bl	8005758 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 80056d4:	69f9      	ldr	r1, [r7, #28]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f8d8 	bl	800588c <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056e4:	f043 030c 	orr.w	r3, r3, #12
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	60d3      	str	r3, [r2, #12]

}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a12      	ldr	r2, [pc, #72]	; (8005748 <USART_CLK_EN+0x54>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d106      	bne.n	8005712 <USART_CLK_EN+0x1e>
		USART1_CLK_EN;
 8005704:	4b11      	ldr	r3, [pc, #68]	; (800574c <USART_CLK_EN+0x58>)
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	4a10      	ldr	r2, [pc, #64]	; (800574c <USART_CLK_EN+0x58>)
 800570a:	f043 0310 	orr.w	r3, r3, #16
 800570e:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (usart == USART2) {
		USART2_CLK_EN;
	} else if (usart == USART6) {
		USART6_CLK_EN;
	}
}
 8005710:	e014      	b.n	800573c <USART_CLK_EN+0x48>
	} else if (usart == USART2) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a0e      	ldr	r2, [pc, #56]	; (8005750 <USART_CLK_EN+0x5c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d106      	bne.n	8005728 <USART_CLK_EN+0x34>
		USART2_CLK_EN;
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <USART_CLK_EN+0x58>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	4a0b      	ldr	r2, [pc, #44]	; (800574c <USART_CLK_EN+0x58>)
 8005720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005724:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005726:	e009      	b.n	800573c <USART_CLK_EN+0x48>
	} else if (usart == USART6) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a0a      	ldr	r2, [pc, #40]	; (8005754 <USART_CLK_EN+0x60>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d105      	bne.n	800573c <USART_CLK_EN+0x48>
		USART6_CLK_EN;
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <USART_CLK_EN+0x58>)
 8005732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005734:	4a05      	ldr	r2, [pc, #20]	; (800574c <USART_CLK_EN+0x58>)
 8005736:	f043 0320 	orr.w	r3, r3, #32
 800573a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40011000 	.word	0x40011000
 800574c:	40023800 	.word	0x40023800
 8005750:	40004400 	.word	0x40004400
 8005754:	40011400 	.word	0x40011400

08005758 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005766:	2300      	movs	r3, #0
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	2300      	movs	r3, #0
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	2302      	movs	r3, #2
 8005770:	2202      	movs	r2, #2
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	68b8      	ldr	r0, [r7, #8]
 8005776:	f7ff fc33 	bl	8004fe0 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800577a:	2300      	movs	r3, #0
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	2300      	movs	r3, #0
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2302      	movs	r3, #2
 8005784:	2202      	movs	r2, #2
 8005786:	69b9      	ldr	r1, [r7, #24]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fc29 	bl	8004fe0 <gpio_config>

	if (usart == USART1) {
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a39      	ldr	r2, [pc, #228]	; (8005878 <USART_PIN_CONFIG+0x120>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d118      	bne.n	80057c8 <USART_PIN_CONFIG+0x70>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4a38      	ldr	r2, [pc, #224]	; (800587c <USART_PIN_CONFIG+0x124>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d107      	bne.n	80057ae <USART_PIN_CONFIG+0x56>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b09      	cmp	r3, #9
 80057a2:	d104      	bne.n	80057ae <USART_PIN_CONFIG+0x56>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 80057a4:	2207      	movs	r2, #7
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	68b8      	ldr	r0, [r7, #8]
 80057aa:	f7ff fcd4 	bl	8005156 <gpio_altfn>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
//			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a32      	ldr	r2, [pc, #200]	; (800587c <USART_PIN_CONFIG+0x124>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d15b      	bne.n	800586e <USART_PIN_CONFIG+0x116>
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b0a      	cmp	r3, #10
 80057ba:	d158      	bne.n	800586e <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 80057bc:	2207      	movs	r2, #7
 80057be:	69b9      	ldr	r1, [r7, #24]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fcc8 	bl	8005156 <gpio_altfn>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PA12);
		} else if (rx_port == PORTC && rx_pinNumber == 7) {
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PC7);
		}
	}
}
 80057c6:	e052      	b.n	800586e <USART_PIN_CONFIG+0x116>
	} else if (usart == USART2) {
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4a2d      	ldr	r2, [pc, #180]	; (8005880 <USART_PIN_CONFIG+0x128>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d118      	bne.n	8005802 <USART_PIN_CONFIG+0xaa>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a2a      	ldr	r2, [pc, #168]	; (800587c <USART_PIN_CONFIG+0x124>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d107      	bne.n	80057e8 <USART_PIN_CONFIG+0x90>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d104      	bne.n	80057e8 <USART_PIN_CONFIG+0x90>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 80057de:	2207      	movs	r2, #7
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	68b8      	ldr	r0, [r7, #8]
 80057e4:	f7ff fcb7 	bl	8005156 <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a24      	ldr	r2, [pc, #144]	; (800587c <USART_PIN_CONFIG+0x124>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d13e      	bne.n	800586e <USART_PIN_CONFIG+0x116>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d13b      	bne.n	800586e <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 80057f6:	2207      	movs	r2, #7
 80057f8:	69b9      	ldr	r1, [r7, #24]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fcab 	bl	8005156 <gpio_altfn>
}
 8005800:	e035      	b.n	800586e <USART_PIN_CONFIG+0x116>
	} else if (usart == USART6) {
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <USART_PIN_CONFIG+0x12c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d131      	bne.n	800586e <USART_PIN_CONFIG+0x116>
		if (tx_port == PORTA && tx_pinNumber == 11) {
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a1b      	ldr	r2, [pc, #108]	; (800587c <USART_PIN_CONFIG+0x124>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d108      	bne.n	8005824 <USART_PIN_CONFIG+0xcc>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b0b      	cmp	r3, #11
 8005816:	d105      	bne.n	8005824 <USART_PIN_CONFIG+0xcc>
			gpio_altfn(tx_port, tx_pinNumber, USART6_TX_PA11);
 8005818:	2208      	movs	r2, #8
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	68b8      	ldr	r0, [r7, #8]
 800581e:	f7ff fc9a 	bl	8005156 <gpio_altfn>
 8005822:	e00b      	b.n	800583c <USART_PIN_CONFIG+0xe4>
		} else if (tx_port == PORTC && tx_pinNumber == 6) {
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4a18      	ldr	r2, [pc, #96]	; (8005888 <USART_PIN_CONFIG+0x130>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d107      	bne.n	800583c <USART_PIN_CONFIG+0xe4>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b06      	cmp	r3, #6
 8005830:	d104      	bne.n	800583c <USART_PIN_CONFIG+0xe4>
			gpio_altfn(tx_port, tx_pinNumber, USART6_TX_PC6);
 8005832:	2208      	movs	r2, #8
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	68b8      	ldr	r0, [r7, #8]
 8005838:	f7ff fc8d 	bl	8005156 <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 12) {
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a0f      	ldr	r2, [pc, #60]	; (800587c <USART_PIN_CONFIG+0x124>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d108      	bne.n	8005856 <USART_PIN_CONFIG+0xfe>
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	2b0c      	cmp	r3, #12
 8005848:	d105      	bne.n	8005856 <USART_PIN_CONFIG+0xfe>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PA12);
 800584a:	2208      	movs	r2, #8
 800584c:	69b9      	ldr	r1, [r7, #24]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fc81 	bl	8005156 <gpio_altfn>
}
 8005854:	e00b      	b.n	800586e <USART_PIN_CONFIG+0x116>
		} else if (rx_port == PORTC && rx_pinNumber == 7) {
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a0b      	ldr	r2, [pc, #44]	; (8005888 <USART_PIN_CONFIG+0x130>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d107      	bne.n	800586e <USART_PIN_CONFIG+0x116>
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b07      	cmp	r3, #7
 8005862:	d104      	bne.n	800586e <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PC7);
 8005864:	2208      	movs	r2, #8
 8005866:	69b9      	ldr	r1, [r7, #24]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff fc74 	bl	8005156 <gpio_altfn>
}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40011000 	.word	0x40011000
 800587c:	40020000 	.word	0x40020000
 8005880:	40004400 	.word	0x40004400
 8005884:	40011400 	.word	0x40011400
 8005888:	40020800 	.word	0x40020800

0800588c <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 8005896:	4b0f      	ldr	r3, [pc, #60]	; (80058d4 <USART_BDR_SEL+0x48>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	60fb      	str	r3, [r7, #12]
	if(usart == USART2){
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <USART_BDR_SEL+0x4c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d107      	bne.n	80058ba <USART_BDR_SEL+0x2e>
		usart->BRR |= baud / 2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	085b      	lsrs	r3, r3, #1
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	609a      	str	r2, [r3, #8]
	}
	else{
		usart->BRR |= baud;
	}

}
 80058b8:	e005      	b.n	80058c6 <USART_BDR_SEL+0x3a>
		usart->BRR |= baud;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	609a      	str	r2, [r3, #8]
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000018 	.word	0x20000018
 80058d8:	40004400 	.word	0x40004400

080058dc <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 80058ea:	887b      	ldrh	r3, [r7, #2]
 80058ec:	82bb      	strh	r3, [r7, #20]
	for (uint16_t i = 0; i < len; i++) {
 80058ee:	2300      	movs	r3, #0
 80058f0:	82fb      	strh	r3, [r7, #22]
 80058f2:	e017      	b.n	8005924 <USART_WRITE+0x48>
		if (len == 1) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d103      	bne.n	8005902 <USART_WRITE+0x26>
			usart->DR = ch;
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	e006      	b.n	8005910 <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 8005902:	8afb      	ldrh	r3, [r7, #22]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	4413      	add	r3, r2
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 8005910:	bf00      	nop
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f9      	beq.n	8005912 <USART_WRITE+0x36>
	for (uint16_t i = 0; i < len; i++) {
 800591e:	8afb      	ldrh	r3, [r7, #22]
 8005920:	3301      	adds	r3, #1
 8005922:	82fb      	strh	r3, [r7, #22]
 8005924:	8afb      	ldrh	r3, [r7, #22]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d8e3      	bhi.n	80058f4 <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <print>:
//}


//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 800593c:	b40f      	push	{r0, r1, r2, r3}
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005952:	480a      	ldr	r0, [pc, #40]	; (800597c <print+0x40>)
 8005954:	f003 fb1c 	bl	8008f90 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8005958:	4808      	ldr	r0, [pc, #32]	; (800597c <print+0x40>)
 800595a:	f7fa fc41 	bl	80001e0 <strlen>
 800595e:	4603      	mov	r3, r0
 8005960:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 8005962:	88fa      	ldrh	r2, [r7, #6]
 8005964:	2364      	movs	r3, #100	; 0x64
 8005966:	4905      	ldr	r1, [pc, #20]	; (800597c <print+0x40>)
 8005968:	4805      	ldr	r0, [pc, #20]	; (8005980 <print+0x44>)
 800596a:	f7ff ffb7 	bl	80058dc <USART_WRITE>

}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005978:	b004      	add	sp, #16
 800597a:	4770      	bx	lr
 800597c:	200003a8 	.word	0x200003a8
 8005980:	40004400 	.word	0x40004400

08005984 <uart_print_config>:
	USART_WRITE(UART_TYPE, buffer, len, 100);
	USART_WRITE(UART_TYPE, '\n', 1, 100);

}

void uart_print_config(uint32_t baudRate) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af02      	add	r7, sp, #8
 800598a:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	2303      	movs	r3, #3
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	2302      	movs	r3, #2
 8005996:	4a04      	ldr	r2, [pc, #16]	; (80059a8 <uart_print_config+0x24>)
 8005998:	4903      	ldr	r1, [pc, #12]	; (80059a8 <uart_print_config+0x24>)
 800599a:	4804      	ldr	r0, [pc, #16]	; (80059ac <uart_print_config+0x28>)
 800599c:	f7ff fe88 	bl	80056b0 <USART_INIT>
}
 80059a0:	bf00      	nop
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40020000 	.word	0x40020000
 80059ac:	40004400 	.word	0x40004400

080059b0 <max30100_init>:
		max30100_mode_t mode, max30100_sampling_rate_t sampling_rate,
		max30100_pulse_width_t pulse_width, max30100_current_t ir_current,
		max30100_current_t start_red_current, uint8_t mean_filter_size,
		uint8_t pulse_bpm_sample_size,
		bool high_res_mode,
		bool debug) {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4611      	mov	r1, r2
 80059bc:	461a      	mov	r2, r3
 80059be:	460b      	mov	r3, r1
 80059c0:	71fb      	strb	r3, [r7, #7]
 80059c2:	4613      	mov	r3, r2
 80059c4:	71bb      	strb	r3, [r7, #6]
	this->_ui2c = hi2c;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	601a      	str	r2, [r3, #0]
	if (HAL_I2C_IsDeviceReady(this->_ui2c, MAX30100_DEVICE, 2, 100) != HAL_OK) {
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	2364      	movs	r3, #100	; 0x64
 80059d2:	2202      	movs	r2, #2
 80059d4:	21ae      	movs	r1, #174	; 0xae
 80059d6:	f7fe f981 	bl	8003cdc <HAL_I2C_IsDeviceReady>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <max30100_init+0x34>
			return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0f2      	b.n	8005bca <max30100_init+0x21a>
		}

	this->acceptable_intense_diff = MAX30100_DEFAULT_ACCEPTABLE_INTENSITY_DIFF;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a7b      	ldr	r2, [pc, #492]	; (8005bd4 <max30100_init+0x224>)
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24
	this->red_current_adj_ms = MAX30100_DEFAULT_RED_LED_CURRENT_ADJUSTMENT_MS;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80059f0:	629a      	str	r2, [r3, #40]	; 0x28
	this->reset_spo2_pulse_n = MAX30100_DEFAULT_RESET_SPO2_EVERY_N_PULSES;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2204      	movs	r2, #4
 80059f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	this->dc_alpha = MAX30100_DEFAULT_ALPHA;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4a76      	ldr	r2, [pc, #472]	; (8005bd8 <max30100_init+0x228>)
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
	this->pulse_min_threshold = MAX30100_DEFAULT_PULSE_MIN_THRESHOLD;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2264      	movs	r2, #100	; 0x64
 8005a04:	869a      	strh	r2, [r3, #52]	; 0x34
	this->pulse_max_threshold = MAX30100_DEFAULT_PULSE_MAX_THRESHOLD;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005a0c:	86da      	strh	r2, [r3, #54]	; 0x36

	this->mean_filter_size = mean_filter_size;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	this->pulse_bpm_sample_size = pulse_bpm_sample_size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	this->debug = debug;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a28:	711a      	strb	r2, [r3, #4]
	this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	731a      	strb	r2, [r3, #12]

	this->mean_diff_ir.values = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	65da      	str	r2, [r3, #92]	; 0x5c
	this->values_bpm = NULL;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	615a      	str	r2, [r3, #20]
	this->mean_diff_ir.values = malloc(sizeof(float) * mean_filter_size);
 8005a3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f002 fcee 	bl	8008424 <malloc>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	65da      	str	r2, [r3, #92]	; 0x5c
	this->values_bpm = malloc(sizeof(float) * pulse_bpm_sample_size);
 8005a50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f002 fce4 	bl	8008424 <malloc>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	615a      	str	r2, [r3, #20]

	if (!(this->values_bpm) || !(this->mean_diff_ir.values))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <max30100_init+0xc4>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <max30100_init+0xc8>
		return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0a8      	b.n	8005bca <max30100_init+0x21a>

	HAL_StatusTypeDef ret = max30100_set_mode(this, mode);
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 fcd5 	bl	800642c <max30100_set_mode>
 8005a82:	4603      	mov	r3, r0
 8005a84:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <max30100_init+0xe0>
		return ret;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	e09c      	b.n	8005bca <max30100_init+0x21a>

	ret = max30100_set_sampling_rate(this, sampling_rate);
 8005a90:	79bb      	ldrb	r3, [r7, #6]
 8005a92:	4619      	mov	r1, r3
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fd63 	bl	8006560 <max30100_set_sampling_rate>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <max30100_init+0xf8>
		return ret;
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	e090      	b.n	8005bca <max30100_init+0x21a>
	ret = max30100_set_pulse_width(this, pulse_width);
 8005aa8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005aac:	4619      	mov	r1, r3
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fd7f 	bl	80065b2 <max30100_set_pulse_width>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <max30100_init+0x112>
		return ret;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	e083      	b.n	8005bca <max30100_init+0x21a>

	this->red_current = (uint8_t) start_red_current;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005ac8:	715a      	strb	r2, [r3, #5]
	this->last_red_current_check = 0;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	609a      	str	r2, [r3, #8]

	this->ir_current = ir_current;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005ad6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	ret = max30100_set_led_current(this, this->red_current, ir_current);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	795b      	ldrb	r3, [r3, #5]
 8005ade:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fd8c 	bl	8006602 <max30100_set_led_current>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <max30100_init+0x148>
		return ret;
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	e068      	b.n	8005bca <max30100_init+0x21a>
	ret = max30100_set_high_res(this, high_res_mode);
 8005af8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005afc:	4619      	mov	r1, r3
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fcfe 	bl	8006500 <max30100_set_high_res>
 8005b04:	4603      	mov	r3, r0
 8005b06:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <max30100_init+0x162>
		return ret;
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	e05b      	b.n	8005bca <max30100_init+0x21a>

	this->dc_filter_ir.w = 0;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
	this->dc_filter_ir.result = 0;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	645a      	str	r2, [r3, #68]	; 0x44

	this->dc_filter_red.w = 0;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	649a      	str	r2, [r3, #72]	; 0x48
	this->dc_filter_red.result = 0;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	64da      	str	r2, [r3, #76]	; 0x4c

	this->lpb_filter_ir.v[0] = 0;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	651a      	str	r2, [r3, #80]	; 0x50
	this->lpb_filter_ir.v[1] = 0;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	655a      	str	r2, [r3, #84]	; 0x54
	this->lpb_filter_ir.result = 0;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	659a      	str	r2, [r3, #88]	; 0x58

	memset(this->mean_diff_ir.values, 0, sizeof(float) * mean_filter_size);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005b4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	461a      	mov	r2, r3
 8005b56:	2100      	movs	r1, #0
 8005b58:	f002 fc6c 	bl	8008434 <memset>
	this->mean_diff_ir.index = 0;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	this->mean_diff_ir.sum = 0;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	665a      	str	r2, [r3, #100]	; 0x64
	this->mean_diff_ir.count = 0;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	memset(this->values_bpm, 0, sizeof(float) * pulse_bpm_sample_size);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6958      	ldr	r0, [r3, #20]
 8005b78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2100      	movs	r1, #0
 8005b82:	f002 fc57 	bl	8008434 <memset>
	this->values_bpm_sum = 0;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	619a      	str	r2, [r3, #24]
	this->values_bpm_count = 0;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
	this->bpm_index = 0;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	775a      	strb	r2, [r3, #29]

	this->ir_ac_sq_sum = 0;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	66da      	str	r2, [r3, #108]	; 0x6c
	this->red_ac_sq_sum = 0;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	671a      	str	r2, [r3, #112]	; 0x70
	this->samples_recorded = 0;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	this->pulses_detected = 0;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	this->current_spO2 = 0;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	679a      	str	r2, [r3, #120]	; 0x78

	this->last_beat_threshold = 0;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	621a      	str	r2, [r3, #32]
	return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	00017318 	.word	0x00017318
 8005bd8:	3f733333 	.word	0x3f733333

08005bdc <max30100_update>:

HAL_StatusTypeDef max30100_update(max30100_config_t *this,
		max30100_data_t *data) {
 8005bdc:	b5b0      	push	{r4, r5, r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
	data->pulse_detected = false;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2200      	movs	r2, #0
 8005bea:	701a      	strb	r2, [r3, #0]
	data->heart_bpm = 0.0;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	605a      	str	r2, [r3, #4]
	data->ir_cardiogram = 0.0;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	609a      	str	r2, [r3, #8]
	data->ir_dc_value = 0.0;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	60da      	str	r2, [r3, #12]
	data->red_dc_value = 0.0;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	611a      	str	r2, [r3, #16]
	data->spO2 = this->current_spO2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	615a      	str	r2, [r3, #20]
	data->last_beat_threshold = 0;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2200      	movs	r2, #0
 8005c18:	619a      	str	r2, [r3, #24]
	data->dc_filtered_ir = 0.0;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	621a      	str	r2, [r3, #32]
	data->dc_filtered_red = 0.0;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	61da      	str	r2, [r3, #28]

	max30100_fifo_t raw_data;
	HAL_StatusTypeDef ret = max30100_read_fifo(this, &raw_data);
 8005c2a:	f107 0308 	add.w	r3, r7, #8
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fd00 	bl	8006636 <max30100_read_fifo>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]
//=================================================
//	print("IR: %d, Red: %d\n", raw_data.raw_ir, raw_data.raw_red);
//=================================================
	if (ret != HAL_OK)
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <max30100_update+0x68>
		return ret;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	e14f      	b.n	8005ee4 <max30100_update+0x308>

	this->dc_filter_ir = max30100_dc_removal((float) raw_data.raw_ir,
 8005c44:	893b      	ldrh	r3, [r7, #8]
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005c5a:	687c      	ldr	r4, [r7, #4]
 8005c5c:	eeb0 1a66 	vmov.f32	s2, s13
 8005c60:	eef0 0a47 	vmov.f32	s1, s14
 8005c64:	eeb0 0a67 	vmov.f32	s0, s15
 8005c68:	f000 fd11 	bl	800668e <max30100_dc_removal>
 8005c6c:	eeb0 7a40 	vmov.f32	s14, s0
 8005c70:	eef0 7a60 	vmov.f32	s15, s1
 8005c74:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 8005c78:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
			this->dc_filter_ir.w, this->dc_alpha);
	this->dc_filter_red = max30100_dc_removal((float) raw_data.raw_red,
 8005c7c:	897b      	ldrh	r3, [r7, #10]
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005c92:	687c      	ldr	r4, [r7, #4]
 8005c94:	eeb0 1a66 	vmov.f32	s2, s13
 8005c98:	eef0 0a47 	vmov.f32	s1, s14
 8005c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8005ca0:	f000 fcf5 	bl	800668e <max30100_dc_removal>
 8005ca4:	eeb0 7a40 	vmov.f32	s14, s0
 8005ca8:	eef0 7a60 	vmov.f32	s15, s1
 8005cac:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 8005cb0:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
			this->dc_filter_red.w, this->dc_alpha);

	float mean_diff_res_ir = max30100_mean_diff(this,
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005cba:	eeb0 0a67 	vmov.f32	s0, s15
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fd66 	bl	8006790 <max30100_mean_diff>
 8005cc4:	ed87 0a04 	vstr	s0, [r7, #16]
			this->dc_filter_ir.result);
	//=================================================
//	print("IR mean difference: %f\n", mean_diff_res_ir);
	//=================================================

	max30100_lpb_filter(this, mean_diff_res_ir/*-dcFilterIR.result*/);
 8005cc8:	ed97 0a04 	vldr	s0, [r7, #16]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fd17 	bl	8006700 <max30100_lpb_filter>

	//=================================================
//	print("lpb_filter_ir: %f\n", this->lpb_filter_ir.result);
	//=================================================

	this->ir_ac_sq_sum += this->dc_filter_ir.result * this->dc_filter_ir.result;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	this->red_ac_sq_sum += this->dc_filter_red.result * this->dc_filter_red.result;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005d04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	this->samples_recorded++;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8005d18:	3301      	adds	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	if (max30100_detect_pulse(this, this->lpb_filter_ir.result) && this->samples_recorded) {
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005d28:	eeb0 0a67 	vmov.f32	s0, s15
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f8e3 	bl	8005ef8 <max30100_detect_pulse>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80a4 	beq.w	8005e82 <max30100_update+0x2a6>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 809e 	beq.w	8005e82 <max30100_update+0x2a6>
		data->pulse_detected = true;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
		this->pulses_detected++;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8005d52:	3301      	adds	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

		float ratio_rms = log(sqrt(this->red_ac_sq_sum / (float) this->samples_recorded))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d74:	ee16 0a90 	vmov	r0, s13
 8005d78:	f7fa fbee 	bl	8000558 <__aeabi_f2d>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	ec43 2b10 	vmov	d0, r2, r3
 8005d84:	f005 fad2 	bl	800b32c <sqrt>
 8005d88:	eeb0 7a40 	vmov.f32	s14, s0
 8005d8c:	eef0 7a60 	vmov.f32	s15, s1
 8005d90:	eeb0 0a47 	vmov.f32	s0, s14
 8005d94:	eef0 0a67 	vmov.f32	s1, s15
 8005d98:	f005 fa8a 	bl	800b2b0 <log>
 8005d9c:	ec55 4b10 	vmov	r4, r5, d0
				/ log(sqrt(this->ir_ac_sq_sum / (float) this->samples_recorded));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005db8:	ee16 0a90 	vmov	r0, s13
 8005dbc:	f7fa fbcc 	bl	8000558 <__aeabi_f2d>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	ec43 2b10 	vmov	d0, r2, r3
 8005dc8:	f005 fab0 	bl	800b32c <sqrt>
 8005dcc:	eeb0 7a40 	vmov.f32	s14, s0
 8005dd0:	eef0 7a60 	vmov.f32	s15, s1
 8005dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8005dd8:	eef0 0a67 	vmov.f32	s1, s15
 8005ddc:	f005 fa68 	bl	800b2b0 <log>
 8005de0:	ec53 2b10 	vmov	r2, r3, d0
 8005de4:	4620      	mov	r0, r4
 8005de6:	4629      	mov	r1, r5
 8005de8:	f7fa fd38 	bl	800085c <__aeabi_ddiv>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
		float ratio_rms = log(sqrt(this->red_ac_sq_sum / (float) this->samples_recorded))
 8005df0:	4610      	mov	r0, r2
 8005df2:	4619      	mov	r1, r3
 8005df4:	f7fa fee0 	bl	8000bb8 <__aeabi_d2f>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	60fb      	str	r3, [r7, #12]

		if (this->debug)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	791b      	ldrb	r3, [r3, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <max30100_update+0x23c>
			print("RMS Ratio: %f\n", ratio_rms);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7fa fba7 	bl	8000558 <__aeabi_f2d>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	ec43 2b10 	vmov	d0, r2, r3
 8005e12:	4836      	ldr	r0, [pc, #216]	; (8005eec <max30100_update+0x310>)
 8005e14:	f7ff fd92 	bl	800593c <print>

		//This is my adjusted standard model, so it shows 0.89 as 94% saturation.
		//It is probably far from correct, requires proper empircal calibration.
		this->current_spO2 = 110.0 - 16.0 * ratio_rms;
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7fa fb9d 	bl	8000558 <__aeabi_f2d>
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <max30100_update+0x314>)
 8005e24:	f7fa fbf0 	bl	8000608 <__aeabi_dmul>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	f04f 0000 	mov.w	r0, #0
 8005e30:	4930      	ldr	r1, [pc, #192]	; (8005ef4 <max30100_update+0x318>)
 8005e32:	f7fa fa31 	bl	8000298 <__aeabi_dsub>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f7fa febb 	bl	8000bb8 <__aeabi_d2f>
 8005e42:	4602      	mov	r2, r0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	679a      	str	r2, [r3, #120]	; 0x78
		data->spO2 = this->current_spO2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	615a      	str	r2, [r3, #20]

		if (!(this->pulses_detected % this->reset_spo2_pulse_n)) {
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005e5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8005e60:	fb01 f202 	mul.w	r2, r1, r2
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <max30100_update+0x2a6>
			this->ir_ac_sq_sum = 0;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	66da      	str	r2, [r3, #108]	; 0x6c
			this->red_ac_sq_sum = 0;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	671a      	str	r2, [r3, #112]	; 0x70
			this->samples_recorded = 0;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		}
	}

	ret = max30100_balance_intensities(this, this->dc_filter_red.w,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005e8e:	eef0 0a47 	vmov.f32	s1, s14
 8005e92:	eeb0 0a67 	vmov.f32	s0, s15
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f9e8 	bl	800626c <max30100_balance_intensities>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	75fb      	strb	r3, [r7, #23]
			this->dc_filter_ir.w);
	if (ret != HAL_OK)
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <max30100_update+0x2ce>
		return ret;
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	e01c      	b.n	8005ee4 <max30100_update+0x308>

	data->heart_bpm = this->current_bpm;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	605a      	str	r2, [r3, #4]
	data->ir_cardiogram = this->lpb_filter_ir.result;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	609a      	str	r2, [r3, #8]
	data->ir_dc_value = this->dc_filter_ir.w;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	60da      	str	r2, [r3, #12]
	data->red_dc_value = this->dc_filter_red.w;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	611a      	str	r2, [r3, #16]
	data->last_beat_threshold = this->last_beat_threshold;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1a      	ldr	r2, [r3, #32]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	619a      	str	r2, [r3, #24]
	data->dc_filtered_ir = this->dc_filter_ir.result;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	621a      	str	r2, [r3, #32]
	data->dc_filtered_red = this->dc_filter_red.result;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bdb0      	pop	{r4, r5, r7, pc}
 8005eec:	0800ba44 	.word	0x0800ba44
 8005ef0:	40300000 	.word	0x40300000
 8005ef4:	405b8000 	.word	0x405b8000

08005ef8 <max30100_detect_pulse>:

bool max30100_detect_pulse(max30100_config_t *this, float sensor_value) {
 8005ef8:	b5b0      	push	{r4, r5, r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	ed87 0a00 	vstr	s0, [r7]
	static float prev_sensor_value = 0;
	static uint8_t values_went_down = 0;
	static uint32_t current_beat = 0;
	static uint32_t last_beat = 0;

	if (sensor_value > this->pulse_max_threshold) {
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f10:	ed97 7a00 	vldr	s14, [r7]
 8005f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1c:	dd14      	ble.n	8005f48 <max30100_detect_pulse+0x50>
		this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	731a      	strb	r2, [r3, #12]
		prev_sensor_value = 0;
 8005f24:	4baa      	ldr	r3, [pc, #680]	; (80061d0 <max30100_detect_pulse+0x2d8>)
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
		last_beat = 0;
 8005f2c:	4ba9      	ldr	r3, [pc, #676]	; (80061d4 <max30100_detect_pulse+0x2dc>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
		current_beat = 0;
 8005f32:	4ba9      	ldr	r3, [pc, #676]	; (80061d8 <max30100_detect_pulse+0x2e0>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
		values_went_down = 0;
 8005f38:	4ba8      	ldr	r3, [pc, #672]	; (80061dc <max30100_detect_pulse+0x2e4>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
		this->last_beat_threshold = 0;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	621a      	str	r2, [r3, #32]
		return false;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e189      	b.n	800625c <max30100_detect_pulse+0x364>
	}

	switch (this->current_pulse_detector_state) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7b1b      	ldrb	r3, [r3, #12]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	f000 815f 	beq.w	8006210 <max30100_detect_pulse+0x318>
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	f300 817e 	bgt.w	8006254 <max30100_detect_pulse+0x35c>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <max30100_detect_pulse+0x6a>
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d015      	beq.n	8005f8c <max30100_detect_pulse+0x94>
 8005f60:	e178      	b.n	8006254 <max30100_detect_pulse+0x35c>
	case MAX30100_PULSE_IDLE:
		if (sensor_value >= this->pulse_min_threshold) {
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f6e:	ed97 7a00 	vldr	s14, [r7]
 8005f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f7a:	da00      	bge.n	8005f7e <max30100_detect_pulse+0x86>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_UP;
			values_went_down = 0;
		}
		break;
 8005f7c:	e16a      	b.n	8006254 <max30100_detect_pulse+0x35c>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_UP;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	731a      	strb	r2, [r3, #12]
			values_went_down = 0;
 8005f84:	4b95      	ldr	r3, [pc, #596]	; (80061dc <max30100_detect_pulse+0x2e4>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
		break;
 8005f8a:	e163      	b.n	8006254 <max30100_detect_pulse+0x35c>
	case MAX30100_PULSE_TRACE_UP:
		if (sensor_value > prev_sensor_value) {
 8005f8c:	4b90      	ldr	r3, [pc, #576]	; (80061d0 <max30100_detect_pulse+0x2d8>)
 8005f8e:	edd3 7a00 	vldr	s15, [r3]
 8005f92:	ed97 7a00 	vldr	s14, [r7]
 8005f96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9e:	dd0d      	ble.n	8005fbc <max30100_detect_pulse+0xc4>
			current_beat = HAL_GetTick();
 8005fa0:	f7fc fabe 	bl	8002520 <HAL_GetTick>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	4a8c      	ldr	r2, [pc, #560]	; (80061d8 <max30100_detect_pulse+0x2e0>)
 8005fa8:	6013      	str	r3, [r2, #0]
			this->last_beat_threshold = sensor_value;
 8005faa:	edd7 7a00 	vldr	s15, [r7]
 8005fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb2:	ee17 2a90 	vmov	r2, s15
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	621a      	str	r2, [r3, #32]
				print("AVg. BPM: %f\n", this->current_bpm);
			}

			return true;
		}
		break;
 8005fba:	e14b      	b.n	8006254 <max30100_detect_pulse+0x35c>
			if (this->debug) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	791b      	ldrb	r3, [r3, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d012      	beq.n	8005fea <max30100_detect_pulse+0xf2>
				print("Peak reached: %f %f\n", sensor_value, prev_sensor_value);
 8005fc4:	6838      	ldr	r0, [r7, #0]
 8005fc6:	f7fa fac7 	bl	8000558 <__aeabi_f2d>
 8005fca:	4604      	mov	r4, r0
 8005fcc:	460d      	mov	r5, r1
 8005fce:	4b80      	ldr	r3, [pc, #512]	; (80061d0 <max30100_detect_pulse+0x2d8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fa fac0 	bl	8000558 <__aeabi_f2d>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	ec43 2b11 	vmov	d1, r2, r3
 8005fe0:	ec45 4b10 	vmov	d0, r4, r5
 8005fe4:	487e      	ldr	r0, [pc, #504]	; (80061e0 <max30100_detect_pulse+0x2e8>)
 8005fe6:	f7ff fca9 	bl	800593c <print>
			uint32_t beat_duration = current_beat - last_beat;
 8005fea:	4b7b      	ldr	r3, [pc, #492]	; (80061d8 <max30100_detect_pulse+0x2e0>)
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4b79      	ldr	r3, [pc, #484]	; (80061d4 <max30100_detect_pulse+0x2dc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	60fb      	str	r3, [r7, #12]
			last_beat = current_beat;
 8005ff6:	4b78      	ldr	r3, [pc, #480]	; (80061d8 <max30100_detect_pulse+0x2e0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a76      	ldr	r2, [pc, #472]	; (80061d4 <max30100_detect_pulse+0x2dc>)
 8005ffc:	6013      	str	r3, [r2, #0]
			float raw_bpm = 0;
 8005ffe:	f04f 0300 	mov.w	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
			if (beat_duration)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <max30100_detect_pulse+0x128>
				raw_bpm = 60000.0 / (float) beat_duration;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006014:	eddf 6a73 	vldr	s13, [pc, #460]	; 80061e4 <max30100_detect_pulse+0x2ec>
 8006018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800601c:	edc7 7a05 	vstr	s15, [r7, #20]
			if (this->debug) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	791b      	ldrb	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00d      	beq.n	8006044 <max30100_detect_pulse+0x14c>
				print("Beat duration: %u\n", beat_duration);
 8006028:	68f9      	ldr	r1, [r7, #12]
 800602a:	486f      	ldr	r0, [pc, #444]	; (80061e8 <max30100_detect_pulse+0x2f0>)
 800602c:	f7ff fc86 	bl	800593c <print>
				print("Raw BPM: %f\n", raw_bpm);
 8006030:	6978      	ldr	r0, [r7, #20]
 8006032:	f7fa fa91 	bl	8000558 <__aeabi_f2d>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	ec43 2b10 	vmov	d0, r2, r3
 800603e:	486b      	ldr	r0, [pc, #428]	; (80061ec <max30100_detect_pulse+0x2f4>)
 8006040:	f7ff fc7c 	bl	800593c <print>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_DOWN;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	731a      	strb	r2, [r3, #12]
			if (beat_duration > 2500) { // 2.5 seconds
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006050:	4293      	cmp	r3, r2
 8006052:	d91a      	bls.n	800608a <max30100_detect_pulse+0x192>
				memset(this->values_bpm, 0,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6958      	ldr	r0, [r3, #20]
						sizeof(float) * this->pulse_bpm_sample_size);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				memset(this->values_bpm, 0,
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	461a      	mov	r2, r3
 8006062:	2100      	movs	r1, #0
 8006064:	f002 f9e6 	bl	8008434 <memset>
				this->values_bpm_sum = 0;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	619a      	str	r2, [r3, #24]
				this->values_bpm_count = 0;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	771a      	strb	r2, [r3, #28]
				this->bpm_index = 0;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	775a      	strb	r2, [r3, #29]
				if (this->debug)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	791b      	ldrb	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <max30100_detect_pulse+0x192>
					print("Moving avg. reseted\n");
 8006084:	485a      	ldr	r0, [pc, #360]	; (80061f0 <max30100_detect_pulse+0x2f8>)
 8006086:	f7ff fc59 	bl	800593c <print>
			if (raw_bpm < 50 || raw_bpm > 220) {
 800608a:	edd7 7a05 	vldr	s15, [r7, #20]
 800608e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80061f4 <max30100_detect_pulse+0x2fc>
 8006092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609a:	d408      	bmi.n	80060ae <max30100_detect_pulse+0x1b6>
 800609c:	edd7 7a05 	vldr	s15, [r7, #20]
 80060a0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80061f8 <max30100_detect_pulse+0x300>
 80060a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ac:	dd08      	ble.n	80060c0 <max30100_detect_pulse+0x1c8>
				if (this->debug)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	791b      	ldrb	r3, [r3, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <max30100_detect_pulse+0x1c4>
					print("BPM out of bounds. Not adding to Moving Avg.\n");
 80060b6:	4851      	ldr	r0, [pc, #324]	; (80061fc <max30100_detect_pulse+0x304>)
 80060b8:	f7ff fc40 	bl	800593c <print>
				return false;
 80060bc:	2300      	movs	r3, #0
 80060be:	e0cd      	b.n	800625c <max30100_detect_pulse+0x364>
			this->values_bpm_sum -= this->values_bpm[this->bpm_index];
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7f5b      	ldrb	r3, [r3, #29]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	edd3 7a00 	vldr	s15, [r3]
 80060d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	edc3 7a06 	vstr	s15, [r3, #24]
			this->values_bpm[this->bpm_index] = raw_bpm;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	7f5b      	ldrb	r3, [r3, #29]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	601a      	str	r2, [r3, #0]
			this->values_bpm_sum += this->values_bpm[this->bpm_index++];
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	695a      	ldr	r2, [r3, #20]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	7f5b      	ldrb	r3, [r3, #29]
 80060f8:	1c59      	adds	r1, r3, #1
 80060fa:	b2c8      	uxtb	r0, r1
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	7748      	strb	r0, [r1, #29]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	ed93 7a00 	vldr	s14, [r3]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	edd3 7a06 	vldr	s15, [r3, #24]
 800610e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	edc3 7a06 	vstr	s15, [r3, #24]
			this->bpm_index %= this->pulse_bpm_sample_size;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	7f5b      	ldrb	r3, [r3, #29]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8006122:	fbb3 f1f2 	udiv	r1, r3, r2
 8006126:	fb01 f202 	mul.w	r2, r1, r2
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	775a      	strb	r2, [r3, #29]
			if (this->values_bpm_count < this->pulse_bpm_sample_size)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7f1a      	ldrb	r2, [r3, #28]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800613c:	429a      	cmp	r2, r3
 800613e:	d205      	bcs.n	800614c <max30100_detect_pulse+0x254>
				this->values_bpm_count++;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	7f1b      	ldrb	r3, [r3, #28]
 8006144:	3301      	adds	r3, #1
 8006146:	b2da      	uxtb	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	771a      	strb	r2, [r3, #28]
			this->current_bpm = this->values_bpm_sum / this->values_bpm_count;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	edd3 6a06 	vldr	s13, [r3, #24]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	7f1b      	ldrb	r3, [r3, #28]
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800615e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	edc3 7a04 	vstr	s15, [r3, #16]
			if (this->debug) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	791b      	ldrb	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d02d      	beq.n	80061cc <max30100_detect_pulse+0x2d4>
				print("CurrentMoving Avg: ");
 8006170:	4823      	ldr	r0, [pc, #140]	; (8006200 <max30100_detect_pulse+0x308>)
 8006172:	f7ff fbe3 	bl	800593c <print>
				for (int i = 0; i < this->values_bpm_count; i++)
 8006176:	2300      	movs	r3, #0
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	e012      	b.n	80061a2 <max30100_detect_pulse+0x2aa>
					print("%f ", this->values_bpm[i]);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695a      	ldr	r2, [r3, #20]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f7fa f9e5 	bl	8000558 <__aeabi_f2d>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	ec43 2b10 	vmov	d0, r2, r3
 8006196:	481b      	ldr	r0, [pc, #108]	; (8006204 <max30100_detect_pulse+0x30c>)
 8006198:	f7ff fbd0 	bl	800593c <print>
				for (int i = 0; i < this->values_bpm_count; i++)
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	3301      	adds	r3, #1
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	7f1b      	ldrb	r3, [r3, #28]
 80061a6:	461a      	mov	r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4293      	cmp	r3, r2
 80061ac:	dbe6      	blt.n	800617c <max30100_detect_pulse+0x284>
				print(" \n");
 80061ae:	4816      	ldr	r0, [pc, #88]	; (8006208 <max30100_detect_pulse+0x310>)
 80061b0:	f7ff fbc4 	bl	800593c <print>
				print("AVg. BPM: %f\n", this->current_bpm);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fa f9cd 	bl	8000558 <__aeabi_f2d>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	ec43 2b10 	vmov	d0, r2, r3
 80061c6:	4811      	ldr	r0, [pc, #68]	; (800620c <max30100_detect_pulse+0x314>)
 80061c8:	f7ff fbb8 	bl	800593c <print>
			return true;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e045      	b.n	800625c <max30100_detect_pulse+0x364>
 80061d0:	200004a8 	.word	0x200004a8
 80061d4:	200004ac 	.word	0x200004ac
 80061d8:	200004b0 	.word	0x200004b0
 80061dc:	200004b4 	.word	0x200004b4
 80061e0:	0800ba54 	.word	0x0800ba54
 80061e4:	476a6000 	.word	0x476a6000
 80061e8:	0800ba6c 	.word	0x0800ba6c
 80061ec:	0800ba80 	.word	0x0800ba80
 80061f0:	0800ba90 	.word	0x0800ba90
 80061f4:	42480000 	.word	0x42480000
 80061f8:	435c0000 	.word	0x435c0000
 80061fc:	0800baa8 	.word	0x0800baa8
 8006200:	0800bad8 	.word	0x0800bad8
 8006204:	0800baec 	.word	0x0800baec
 8006208:	0800baf0 	.word	0x0800baf0
 800620c:	0800baf4 	.word	0x0800baf4
	case MAX30100_PULSE_TRACE_DOWN:
		if (sensor_value < prev_sensor_value)
 8006210:	4b14      	ldr	r3, [pc, #80]	; (8006264 <max30100_detect_pulse+0x36c>)
 8006212:	edd3 7a00 	vldr	s15, [r3]
 8006216:	ed97 7a00 	vldr	s14, [r7]
 800621a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800621e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006222:	d505      	bpl.n	8006230 <max30100_detect_pulse+0x338>
			values_went_down++;
 8006224:	4b10      	ldr	r3, [pc, #64]	; (8006268 <max30100_detect_pulse+0x370>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	3301      	adds	r3, #1
 800622a:	b2da      	uxtb	r2, r3
 800622c:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <max30100_detect_pulse+0x370>)
 800622e:	701a      	strb	r2, [r3, #0]

		if (sensor_value < this->pulse_min_threshold)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006234:	ee07 3a90 	vmov	s15, r3
 8006238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800623c:	ed97 7a00 	vldr	s14, [r7]
 8006240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006248:	d400      	bmi.n	800624c <max30100_detect_pulse+0x354>
			this->current_pulse_detector_state = MAX30100_PULSE_IDLE;

		break;
 800624a:	e002      	b.n	8006252 <max30100_detect_pulse+0x35a>
			this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	731a      	strb	r2, [r3, #12]
		break;
 8006252:	bf00      	nop
	}

	prev_sensor_value = sensor_value;
 8006254:	4a03      	ldr	r2, [pc, #12]	; (8006264 <max30100_detect_pulse+0x36c>)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6013      	str	r3, [r2, #0]
	return false;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bdb0      	pop	{r4, r5, r7, pc}
 8006264:	200004a8 	.word	0x200004a8
 8006268:	200004b4 	.word	0x200004b4

0800626c <max30100_balance_intensities>:

HAL_StatusTypeDef max30100_balance_intensities(max30100_config_t *this,
		float red_dc, float ir_dc) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	ed87 0a02 	vstr	s0, [r7, #8]
 8006278:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((uint32_t) (HAL_GetTick()) - this->last_red_current_check
 800627c:	f7fc f950 	bl	8002520 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	1ad2      	subs	r2, r2, r3
			>= this->red_current_adj_ms) {
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((uint32_t) (HAL_GetTick()) - this->last_red_current_check
 800628c:	429a      	cmp	r2, r3
 800628e:	d36b      	bcc.n	8006368 <max30100_balance_intensities+0xfc>
		//print("%f\n", red_dc - ir_dc);
		if (ir_dc - red_dc > this->acceptable_intense_diff
 8006290:	ed97 7a01 	vldr	s14, [r7, #4]
 8006294:	edd7 7a02 	vldr	s15, [r7, #8]
 8006298:	ee37 7a67 	vsub.f32	s14, s14, s15
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b0:	dd21      	ble.n	80062f6 <max30100_balance_intensities+0x8a>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	795b      	ldrb	r3, [r3, #5]
 80062b6:	2b0e      	cmp	r3, #14
 80062b8:	d81d      	bhi.n	80062f6 <max30100_balance_intensities+0x8a>
			this->red_current++;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	795b      	ldrb	r3, [r3, #5]
 80062be:	3301      	adds	r3, #1
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	715a      	strb	r2, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
					this->red_current, this->ir_current);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	7959      	ldrb	r1, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80062d0:	461a      	mov	r2, r3
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f995 	bl	8006602 <max30100_set_led_current>
 80062d8:	4603      	mov	r3, r0
 80062da:	75fb      	strb	r3, [r7, #23]
			if (ret != HAL_OK)
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <max30100_balance_intensities+0x7a>
				return ret;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
 80062e4:	e041      	b.n	800636a <max30100_balance_intensities+0xfe>
			if (this->debug)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	791b      	ldrb	r3, [r3, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d036      	beq.n	800635c <max30100_balance_intensities+0xf0>
				print("RED LED Current +\n");
 80062ee:	4821      	ldr	r0, [pc, #132]	; (8006374 <max30100_balance_intensities+0x108>)
 80062f0:	f7ff fb24 	bl	800593c <print>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 80062f4:	e032      	b.n	800635c <max30100_balance_intensities+0xf0>

		} else if (red_dc - ir_dc > this->acceptable_intense_diff
 80062f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80062fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80062fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006316:	dd22      	ble.n	800635e <max30100_balance_intensities+0xf2>
				&& this->red_current > 0) {
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	795b      	ldrb	r3, [r3, #5]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01e      	beq.n	800635e <max30100_balance_intensities+0xf2>
			this->red_current--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	795b      	ldrb	r3, [r3, #5]
 8006324:	3b01      	subs	r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	715a      	strb	r2, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
					this->red_current, this->ir_current);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	7959      	ldrb	r1, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006336:	461a      	mov	r2, r3
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 f962 	bl	8006602 <max30100_set_led_current>
 800633e:	4603      	mov	r3, r0
 8006340:	75bb      	strb	r3, [r7, #22]
			if (ret != HAL_OK)
 8006342:	7dbb      	ldrb	r3, [r7, #22]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <max30100_balance_intensities+0xe0>
				return ret;
 8006348:	7dbb      	ldrb	r3, [r7, #22]
 800634a:	e00e      	b.n	800636a <max30100_balance_intensities+0xfe>
			if (this->debug)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	791b      	ldrb	r3, [r3, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <max30100_balance_intensities+0xf2>
				print("RED LED Current -\n");
 8006354:	4808      	ldr	r0, [pc, #32]	; (8006378 <max30100_balance_intensities+0x10c>)
 8006356:	f7ff faf1 	bl	800593c <print>
 800635a:	e000      	b.n	800635e <max30100_balance_intensities+0xf2>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 800635c:	bf00      	nop
		}

		this->last_red_current_check = (uint32_t) (HAL_GetTick());
 800635e:	f7fc f8df 	bl	8002520 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	609a      	str	r2, [r3, #8]

	}
	return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	0800bb04 	.word	0x0800bb04
 8006378:	0800bb18 	.word	0x0800bb18

0800637c <max30100_write_register>:

// Writes val to address register on device
HAL_StatusTypeDef max30100_write_register(max30100_config_t *this,
		uint8_t address, uint8_t val) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af02      	add	r7, sp, #8
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
 8006388:	4613      	mov	r3, r2
 800638a:	70bb      	strb	r3, [r7, #2]
	// start transmission to device
//	uint8_t *pVal = &val;
//	return HAL_I2C_Mem_Write(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, pVal, 1, 10);

	uint8_t pVal[2] = {address, val};
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	733b      	strb	r3, [r7, #12]
 8006390:	78bb      	ldrb	r3, [r7, #2]
 8006392:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(this->_ui2c, MAX30100_DEVICE, pVal, 2, 100);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	f107 020c 	add.w	r2, r7, #12
 800639c:	2364      	movs	r3, #100	; 0x64
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	2302      	movs	r3, #2
 80063a2:	21ae      	movs	r1, #174	; 0xae
 80063a4:	f7fd f976 	bl	8003694 <HAL_I2C_Master_Transmit>
 80063a8:	4603      	mov	r3, r0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <max30100_read_register>:

HAL_StatusTypeDef max30100_read_register(max30100_config_t *this,
		uint8_t address, uint8_t *reg) {
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b088      	sub	sp, #32
 80063b6:	af04      	add	r7, sp, #16
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	460b      	mov	r3, r1
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	72fb      	strb	r3, [r7, #11]
//	return I2C_MasterByteRead(this->_ui2c, MAX30100_DEVICE, address, reg,
//			100);
	return HAL_I2C_Mem_Read(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, reg, 1, 100);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	7afb      	ldrb	r3, [r7, #11]
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	2364      	movs	r3, #100	; 0x64
 80063ca:	9302      	str	r3, [sp, #8]
 80063cc:	2301      	movs	r3, #1
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2301      	movs	r3, #1
 80063d6:	21ae      	movs	r1, #174	; 0xae
 80063d8:	f7fd fa5a 	bl	8003890 <HAL_I2C_Mem_Read>
 80063dc:	4603      	mov	r3, r0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <max30100_read_from>:

// Reads num bytes starting from address register on device in to _buff array
HAL_StatusTypeDef max30100_read_from(max30100_config_t *this, uint8_t address,
		uint8_t *reg, uint8_t size) {
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b088      	sub	sp, #32
 80063ea:	af04      	add	r7, sp, #16
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	461a      	mov	r2, r3
 80063f2:	460b      	mov	r3, r1
 80063f4:	72fb      	strb	r3, [r7, #11]
 80063f6:	4613      	mov	r3, r2
 80063f8:	72bb      	strb	r3, [r7, #10]
	if (!size)
 80063fa:	7abb      	ldrb	r3, [r7, #10]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <max30100_read_from+0x1e>
		return HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	e00f      	b.n	8006424 <max30100_read_from+0x3e>

//	return I2C_MasterMultiRead(this->_ui2c, MAX30100_DEVICE, address, size,
//			reg, 100);
	return HAL_I2C_Mem_Read(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, reg, size, 100);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	7afb      	ldrb	r3, [r7, #11]
 800640a:	b29a      	uxth	r2, r3
 800640c:	7abb      	ldrb	r3, [r7, #10]
 800640e:	b29b      	uxth	r3, r3
 8006410:	2164      	movs	r1, #100	; 0x64
 8006412:	9102      	str	r1, [sp, #8]
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	2301      	movs	r3, #1
 800641c:	21ae      	movs	r1, #174	; 0xae
 800641e:	f7fd fa37 	bl	8003890 <HAL_I2C_Mem_Read>
 8006422:	4603      	mov	r3, r0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <max30100_set_mode>:

HAL_StatusTypeDef max30100_set_mode(max30100_config_t *this,
		max30100_mode_t mode) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
	uint8_t current_mode_reg;
	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_MODE_CONF,
 8006438:	f107 030e 	add.w	r3, r7, #14
 800643c:	461a      	mov	r2, r3
 800643e:	2106      	movs	r1, #6
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff ffb6 	bl	80063b2 <max30100_read_register>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
			&current_mode_reg);
	if (ret != HAL_OK)
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <max30100_set_mode+0x28>
		return ret;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	e00f      	b.n	8006474 <max30100_set_mode+0x48>
	return max30100_write_register(this, MAX30100_MODE_CONF,
			(current_mode_reg & 0xF8) | mode);
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	b25b      	sxtb	r3, r3
 8006458:	f023 0307 	bic.w	r3, r3, #7
 800645c:	b25a      	sxtb	r2, r3
 800645e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006462:	4313      	orrs	r3, r2
 8006464:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_MODE_CONF,
 8006466:	b2db      	uxtb	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	2106      	movs	r1, #6
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ff85 	bl	800637c <max30100_write_register>
 8006472:	4603      	mov	r3, r0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <max30100_shutdown>:

HAL_StatusTypeDef max30100_shutdown(max30100_config_t *this) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	uint8_t current_mode_reg;

	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_MODE_CONF,
 8006484:	f107 030e 	add.w	r3, r7, #14
 8006488:	461a      	mov	r2, r3
 800648a:	2106      	movs	r1, #6
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff ff90 	bl	80063b2 <max30100_read_register>
 8006492:	4603      	mov	r3, r0
 8006494:	73fb      	strb	r3, [r7, #15]
			&current_mode_reg);
	if (ret != HAL_OK)
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <max30100_shutdown+0x24>
		return ret;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	e009      	b.n	80064b4 <max30100_shutdown+0x38>
	return max30100_write_register(this, MAX30100_MODE_CONF,
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	2106      	movs	r1, #6
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff ff65 	bl	800637c <max30100_write_register>
 80064b2:	4603      	mov	r3, r0
			(current_mode_reg) | MAX30100_MODE_SHDN);
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <max30100_resume>:

HAL_StatusTypeDef max30100_resume(max30100_config_t *this) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	uint8_t current_mode_reg;

	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_MODE_CONF,
 80064c4:	f107 030e 	add.w	r3, r7, #14
 80064c8:	461a      	mov	r2, r3
 80064ca:	2106      	movs	r1, #6
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff ff70 	bl	80063b2 <max30100_read_register>
 80064d2:	4603      	mov	r3, r0
 80064d4:	73fb      	strb	r3, [r7, #15]
			&current_mode_reg);
	if (ret != HAL_OK)
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <max30100_resume+0x24>
		return ret;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	e00b      	b.n	80064f8 <max30100_resume+0x3c>
	current_mode_reg &= ~MAX30100_MODE_SHDN;
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	73bb      	strb	r3, [r7, #14]
	return max30100_write_register(this, MAX30100_MODE_CONF,
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	461a      	mov	r2, r3
 80064ee:	2106      	movs	r1, #6
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff43 	bl	800637c <max30100_write_register>
 80064f6:	4603      	mov	r3, r0
			(current_mode_reg));
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <max30100_set_high_res>:

HAL_StatusTypeDef max30100_set_high_res(max30100_config_t *this, bool enabled) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
	uint8_t previous;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 800650c:	f107 030e 	add.w	r3, r7, #14
 8006510:	461a      	mov	r2, r3
 8006512:	2107      	movs	r1, #7
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff ff4c 	bl	80063b2 <max30100_read_register>
 800651a:	4603      	mov	r3, r0
 800651c:	73fb      	strb	r3, [r7, #15]
			&previous);
	if (ret != HAL_OK)
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <max30100_set_high_res+0x28>
		return ret;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	e017      	b.n	8006558 <max30100_set_high_res+0x58>
	if (enabled) {
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <max30100_set_high_res+0x44>
		return max30100_write_register(this, MAX30100_SPO2_CONF,
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	2107      	movs	r1, #7
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff ff1e 	bl	800637c <max30100_write_register>
 8006540:	4603      	mov	r3, r0
 8006542:	e009      	b.n	8006558 <max30100_set_high_res+0x58>
				previous | MAX30100_SPO2_HI_RES_EN);
	} else {
		return max30100_write_register(this, MAX30100_SPO2_CONF,
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800654a:	b2db      	uxtb	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	2107      	movs	r1, #7
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ff13 	bl	800637c <max30100_write_register>
 8006556:	4603      	mov	r3, r0
				previous & ~MAX30100_SPO2_HI_RES_EN);
	}
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <max30100_set_sampling_rate>:

HAL_StatusTypeDef max30100_set_sampling_rate(max30100_config_t *this,
		max30100_sampling_rate_t rate) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
	uint8_t current_spO2_reg;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 800656c:	f107 030e 	add.w	r3, r7, #14
 8006570:	461a      	mov	r2, r3
 8006572:	2107      	movs	r1, #7
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff ff1c 	bl	80063b2 <max30100_read_register>
 800657a:	4603      	mov	r3, r0
 800657c:	73fb      	strb	r3, [r7, #15]
			&current_spO2_reg);
	if (ret != HAL_OK)
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <max30100_set_sampling_rate+0x28>
		return ret;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	e010      	b.n	80065aa <max30100_set_sampling_rate+0x4a>
	return max30100_write_register(this, MAX30100_SPO2_CONF,
			(current_spO2_reg & 0xE3) | (rate << 2));
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	b25b      	sxtb	r3, r3
 800658c:	f023 031c 	bic.w	r3, r3, #28
 8006590:	b25a      	sxtb	r2, r3
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	b25b      	sxtb	r3, r3
 8006598:	4313      	orrs	r3, r2
 800659a:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_SPO2_CONF,
 800659c:	b2db      	uxtb	r3, r3
 800659e:	461a      	mov	r2, r3
 80065a0:	2107      	movs	r1, #7
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff feea 	bl	800637c <max30100_write_register>
 80065a8:	4603      	mov	r3, r0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <max30100_set_pulse_width>:

HAL_StatusTypeDef max30100_set_pulse_width(max30100_config_t *this,
		max30100_pulse_width_t pw) {
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	70fb      	strb	r3, [r7, #3]
	uint8_t current_spO2_reg;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 80065be:	f107 030e 	add.w	r3, r7, #14
 80065c2:	461a      	mov	r2, r3
 80065c4:	2107      	movs	r1, #7
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff fef3 	bl	80063b2 <max30100_read_register>
 80065cc:	4603      	mov	r3, r0
 80065ce:	73fb      	strb	r3, [r7, #15]
			&current_spO2_reg);
	if (ret != HAL_OK)
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <max30100_set_pulse_width+0x28>
		return ret;
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	e00f      	b.n	80065fa <max30100_set_pulse_width+0x48>
	return max30100_write_register(this, MAX30100_SPO2_CONF,
			(current_spO2_reg & 0xFC) | pw);
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	b25b      	sxtb	r3, r3
 80065de:	f023 0303 	bic.w	r3, r3, #3
 80065e2:	b25a      	sxtb	r2, r3
 80065e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_SPO2_CONF,
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	2107      	movs	r1, #7
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff fec2 	bl	800637c <max30100_write_register>
 80065f8:	4603      	mov	r3, r0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <max30100_set_led_current>:

HAL_StatusTypeDef max30100_set_led_current(max30100_config_t *this,
		max30100_current_t red_current, max30100_current_t ir_current) {
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	70fb      	strb	r3, [r7, #3]
 800660e:	4613      	mov	r3, r2
 8006610:	70bb      	strb	r3, [r7, #2]
	//Tratar erros
	return max30100_write_register(this, MAX30100_LED_CONF,
			(red_current << 4) | ir_current);
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	b25a      	sxtb	r2, r3
 8006618:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800661c:	4313      	orrs	r3, r2
 800661e:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_LED_CONF,
 8006620:	b2db      	uxtb	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	2109      	movs	r1, #9
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff fea8 	bl	800637c <max30100_write_register>
 800662c:	4603      	mov	r3, r0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <max30100_read_fifo>:
	*temperature = (float) temp + temp_fraction;
	return HAL_OK;
}

HAL_StatusTypeDef max30100_read_fifo(max30100_config_t *this,
		max30100_fifo_t *fifo) {
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	6039      	str	r1, [r7, #0]
	uint8_t buffer[4];
	//Testar erros
	HAL_StatusTypeDef ret = max30100_read_from(this, MAX30100_FIFO_DATA, buffer,
 8006640:	f107 0208 	add.w	r2, r7, #8
 8006644:	2304      	movs	r3, #4
 8006646:	2105      	movs	r1, #5
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff fecc 	bl	80063e6 <max30100_read_from>
 800664e:	4603      	mov	r3, r0
 8006650:	73fb      	strb	r3, [r7, #15]
			4);
	if (ret != HAL_OK)
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <max30100_read_fifo+0x26>
		return ret;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	e014      	b.n	8006686 <max30100_read_fifo+0x50>
	fifo->raw_ir = ((uint16_t) buffer[0] << 8) | buffer[1];
 800665c:	7a3b      	ldrb	r3, [r7, #8]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	b21a      	sxth	r2, r3
 8006662:	7a7b      	ldrb	r3, [r7, #9]
 8006664:	b21b      	sxth	r3, r3
 8006666:	4313      	orrs	r3, r2
 8006668:	b21b      	sxth	r3, r3
 800666a:	b29a      	uxth	r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	801a      	strh	r2, [r3, #0]
	fifo->raw_red = ((uint16_t) buffer[2] << 8) | buffer[3];
 8006670:	7abb      	ldrb	r3, [r7, #10]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	b21a      	sxth	r2, r3
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	b21b      	sxth	r3, r3
 800667a:	4313      	orrs	r3, r2
 800667c:	b21b      	sxth	r3, r3
 800667e:	b29a      	uxth	r2, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	805a      	strh	r2, [r3, #2]

	return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <max30100_dc_removal>:

max30100_dc_filter_t max30100_dc_removal(float x, float prev_w, float alpha) {
 800668e:	b480      	push	{r7}
 8006690:	b08b      	sub	sp, #44	; 0x2c
 8006692:	af00      	add	r7, sp, #0
 8006694:	ed87 0a05 	vstr	s0, [r7, #20]
 8006698:	edc7 0a04 	vstr	s1, [r7, #16]
 800669c:	ed87 1a03 	vstr	s2, [r7, #12]
	max30100_dc_filter_t filtered = { };
 80066a0:	f107 0318 	add.w	r3, r7, #24
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	605a      	str	r2, [r3, #4]
	filtered.w = x + alpha * prev_w;
 80066aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80066ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80066b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80066ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066be:	edc7 7a06 	vstr	s15, [r7, #24]
	filtered.result = filtered.w - prev_w;
 80066c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80066c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80066ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066ce:	edc7 7a07 	vstr	s15, [r7, #28]

	return filtered;
 80066d2:	f107 0320 	add.w	r3, r7, #32
 80066d6:	f107 0218 	add.w	r2, r7, #24
 80066da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066de:	e883 0003 	stmia.w	r3, {r0, r1}
 80066e2:	6a3a      	ldr	r2, [r7, #32]
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	ee07 2a10 	vmov	s14, r2
 80066ea:	ee07 3a90 	vmov	s15, r3
}
 80066ee:	eeb0 0a47 	vmov.f32	s0, s14
 80066f2:	eef0 0a67 	vmov.f32	s1, s15
 80066f6:	372c      	adds	r7, #44	; 0x2c
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <max30100_lpb_filter>:

void max30100_lpb_filter(max30100_config_t *this, float x) {
 8006700:	b5b0      	push	{r4, r5, r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	ed87 0a00 	vstr	s0, [r7]
	this->lpb_filter_ir.v[0] = this->lpb_filter_ir.v[1];
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	651a      	str	r2, [r3, #80]	; 0x50

	//Fs = 100Hz and Fc = 10Hz
	this->lpb_filter_ir.v[1] = (2.452372752527856026e-1 * x)
 8006714:	6838      	ldr	r0, [r7, #0]
 8006716:	f7f9 ff1f 	bl	8000558 <__aeabi_f2d>
 800671a:	a319      	add	r3, pc, #100	; (adr r3, 8006780 <max30100_lpb_filter+0x80>)
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	f7f9 ff72 	bl	8000608 <__aeabi_dmul>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4614      	mov	r4, r2
 800672a:	461d      	mov	r5, r3
			+ (0.50952544949442879485 * this->lpb_filter_ir.v[0]);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006730:	4618      	mov	r0, r3
 8006732:	f7f9 ff11 	bl	8000558 <__aeabi_f2d>
 8006736:	a314      	add	r3, pc, #80	; (adr r3, 8006788 <max30100_lpb_filter+0x88>)
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f7f9 ff64 	bl	8000608 <__aeabi_dmul>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	f7f9 fda8 	bl	800029c <__adddf3>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4610      	mov	r0, r2
 8006752:	4619      	mov	r1, r3
 8006754:	f7fa fa30 	bl	8000bb8 <__aeabi_d2f>
 8006758:	4602      	mov	r2, r0
	this->lpb_filter_ir.v[1] = (2.452372752527856026e-1 * x)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	655a      	str	r2, [r3, #84]	; 0x54
	//Fs = 100Hz and Fc = 4Hz
	//this->lpb_filter_ir.v[1] = (1.367287359973195227e-1 * x)
	//                   + (0.72654252800536101020 * this->lpb_filter_ir.v[0]);
	//Very precise butterworth filter

	this->lpb_filter_ir.result = this->lpb_filter_ir.v[0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
			+ this->lpb_filter_ir.v[1];
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800676a:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->lpb_filter_ir.result = this->lpb_filter_ir.v[0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bdb0      	pop	{r4, r5, r7, pc}
 800677c:	f3af 8000 	nop.w
 8006780:	5e7c4548 	.word	0x5e7c4548
 8006784:	3fcf63ef 	.word	0x3fcf63ef
 8006788:	50c1dd5c 	.word	0x50c1dd5c
 800678c:	3fe04e08 	.word	0x3fe04e08

08006790 <max30100_mean_diff>:

float max30100_mean_diff(max30100_config_t *this, float M) {
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	ed87 0a00 	vstr	s0, [r7]
	float avg = 0;
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]

	this->mean_diff_ir.sum -=
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
			this->mean_diff_ir.values[this->mean_diff_ir.index];
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	edd3 7a00 	vldr	s15, [r3]
	this->mean_diff_ir.sum -=
 80067ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	this->mean_diff_ir.values[this->mean_diff_ir.index] = M;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	601a      	str	r2, [r3, #0]
	this->mean_diff_ir.sum +=
			this->mean_diff_ir.values[this->mean_diff_ir.index++];
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80067e0:	1c59      	adds	r1, r3, #1
 80067e2:	b2c8      	uxtb	r0, r1
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	ed93 7a00 	vldr	s14, [r3]
	this->mean_diff_ir.sum +=
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80067f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	this->mean_diff_ir.index = this->mean_diff_ir.index
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
			% this->mean_filter_size;
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
	this->mean_diff_ir.index = this->mean_diff_ir.index
 800680e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006812:	fb01 f202 	mul.w	r2, r1, r2
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	b2da      	uxtb	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	if (this->mean_diff_ir.count < this->mean_filter_size)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800682c:	429a      	cmp	r2, r3
 800682e:	d207      	bcs.n	8006840 <max30100_mean_diff+0xb0>
		this->mean_diff_ir.count++;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006836:	3301      	adds	r3, #1
 8006838:	b2da      	uxtb	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	avg = this->mean_diff_ir.sum / this->mean_diff_ir.count;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800684c:	ee07 3a90 	vmov	s15, r3
 8006850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006858:	edc7 7a03 	vstr	s15, [r7, #12]
	return avg - M;
 800685c:	ed97 7a03 	vldr	s14, [r7, #12]
 8006860:	edd7 7a00 	vldr	s15, [r7]
 8006864:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8006868:	eeb0 0a67 	vmov.f32	s0, s15
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
	...

08006878 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af04      	add	r7, sp, #16
 800687e:	4603      	mov	r3, r0
 8006880:	6039      	str	r1, [r7, #0]
 8006882:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	b29a      	uxth	r2, r3
 8006888:	2364      	movs	r3, #100	; 0x64
 800688a:	9302      	str	r3, [sp, #8]
 800688c:	2303      	movs	r3, #3
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	f107 030c 	add.w	r3, r7, #12
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	2301      	movs	r3, #1
 8006898:	21b4      	movs	r1, #180	; 0xb4
 800689a:	480b      	ldr	r0, [pc, #44]	; (80068c8 <mlx90614_read16+0x50>)
 800689c:	f7fc fff8 	bl	8003890 <HAL_I2C_Mem_Read>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <mlx90614_read16+0x32>
    return false;
 80068a6:	2300      	movs	r3, #0
 80068a8:	e009      	b.n	80068be <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 80068aa:	7b3b      	ldrb	r3, [r7, #12]
 80068ac:	b21a      	sxth	r2, r3
 80068ae:	7b7b      	ldrb	r3, [r7, #13]
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	b21b      	sxth	r3, r3
 80068b4:	4313      	orrs	r3, r2
 80068b6:	b21a      	sxth	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	801a      	strh	r2, [r3, #0]
  return true;
 80068bc:	2301      	movs	r3, #1
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000298 	.word	0x20000298

080068cc <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 80068d6:	4b21      	ldr	r3, [pc, #132]	; (800695c <mlx90614_calcTemperature+0x90>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d108      	bne.n	80068f0 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 80068de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068ea:	edc7 7a03 	vstr	s15, [r7, #12]
 80068ee:	e02b      	b.n	8006948 <mlx90614_calcTemperature+0x7c>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 80068f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068f4:	ee07 3a90 	vmov	s15, r3
 80068f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068fc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006960 <mlx90614_calcTemperature+0x94>
 8006900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006904:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 8006908:	4b14      	ldr	r3, [pc, #80]	; (800695c <mlx90614_calcTemperature+0x90>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d01b      	beq.n	8006948 <mlx90614_calcTemperature+0x7c>
		{
			retTemp -= 273.15f;
 8006910:	edd7 7a03 	vldr	s15, [r7, #12]
 8006914:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8006964 <mlx90614_calcTemperature+0x98>
 8006918:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800691c:	edc7 7a03 	vstr	s15, [r7, #12]
			if(mlx90614.unit == MLX90614_UNIT_F)
 8006920:	4b0e      	ldr	r3, [pc, #56]	; (800695c <mlx90614_calcTemperature+0x90>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b03      	cmp	r3, #3
 8006926:	d10f      	bne.n	8006948 <mlx90614_calcTemperature+0x7c>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8006928:	edd7 7a03 	vldr	s15, [r7, #12]
 800692c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8006930:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006934:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8006938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800693c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006968 <mlx90614_calcTemperature+0x9c>
 8006940:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006944:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}
	return retTemp;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	ee07 3a90 	vmov	s15, r3
}
 800694e:	eeb0 0a67 	vmov.f32	s0, s15
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	200004b8 	.word	0x200004b8
 8006960:	3ca3d70a 	.word	0x3ca3d70a
 8006964:	43889333 	.word	0x43889333
 8006968:	42000000 	.word	0x42000000

0800696c <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 8006970:	2234      	movs	r2, #52	; 0x34
 8006972:	2100      	movs	r1, #0
 8006974:	4821      	ldr	r0, [pc, #132]	; (80069fc <mlx90614_init+0x90>)
 8006976:	f001 fd5d 	bl	8008434 <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 800697a:	4b20      	ldr	r3, [pc, #128]	; (80069fc <mlx90614_init+0x90>)
 800697c:	2202      	movs	r2, #2
 800697e:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 8006980:	2364      	movs	r3, #100	; 0x64
 8006982:	2201      	movs	r2, #1
 8006984:	21b4      	movs	r1, #180	; 0xb4
 8006986:	481e      	ldr	r0, [pc, #120]	; (8006a00 <mlx90614_init+0x94>)
 8006988:	f7fd f9a8 	bl	8003cdc <HAL_I2C_IsDeviceReady>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <mlx90614_init+0x2a>
    return false;
 8006992:	2300      	movs	r3, #0
 8006994:	e030      	b.n	80069f8 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 8006996:	491b      	ldr	r1, [pc, #108]	; (8006a04 <mlx90614_init+0x98>)
 8006998:	2025      	movs	r0, #37	; 0x25
 800699a:	f7ff ff6d 	bl	8006878 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 800699e:	2000      	movs	r0, #0
 80069a0:	f000 f832 	bl	8006a08 <mlx90614_readID>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f083 0301 	eor.w	r3, r3, #1
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <mlx90614_init+0x48>
    return false;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e021      	b.n	80069f8 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 80069b4:	2000      	movs	r0, #0
 80069b6:	f000 f861 	bl	8006a7c <mlx90614_getEmissivity>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f083 0301 	eor.w	r3, r3, #1
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <mlx90614_init+0x5e>
    return false;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e016      	b.n	80069f8 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 80069ca:	2000      	movs	r0, #0
 80069cc:	f000 f890 	bl	8006af0 <mlx90614_getMax>
 80069d0:	4603      	mov	r3, r0
 80069d2:	f083 0301 	eor.w	r3, r3, #1
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <mlx90614_init+0x74>
    return false;
 80069dc:	2300      	movs	r3, #0
 80069de:	e00b      	b.n	80069f8 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 80069e0:	2000      	movs	r0, #0
 80069e2:	f000 f8a9 	bl	8006b38 <mlx90614_getMin>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f083 0301 	eor.w	r3, r3, #1
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <mlx90614_init+0x8a>
    return false;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e000      	b.n	80069f8 <mlx90614_init+0x8c>

  return true;
 80069f6:	2301      	movs	r3, #1
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	200004b8 	.word	0x200004b8
 8006a00:	20000298 	.word	0x20000298
 8006a04:	200004e8 	.word	0x200004e8

08006a08 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e028      	b.n	8006a68 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	333c      	adds	r3, #60	; 0x3c
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f107 020a 	add.w	r2, r7, #10
 8006a26:	4611      	mov	r1, r2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff ff25 	bl	8006878 <mlx90614_read16>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f083 0301 	eor.w	r3, r3, #1
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <mlx90614_readID+0x36>
			return false;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e018      	b.n	8006a70 <mlx90614_readID+0x68>
    if(id != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d006      	beq.n	8006a52 <mlx90614_readID+0x4a>
      id[i] = (uint16_t)temp;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006a50:	801a      	strh	r2, [r3, #0]
    mlx90614.id[i] = (uint16_t)temp;
 8006a52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a56:	b299      	uxth	r1, r3
 8006a58:	4a07      	ldr	r2, [pc, #28]	; (8006a78 <mlx90614_readID+0x70>)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	ddd3      	ble.n	8006a16 <mlx90614_readID+0xe>
	}
	return true;
 8006a6e:	2301      	movs	r3, #1
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	200004b8 	.word	0x200004b8

08006a7c <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 8006a84:	4917      	ldr	r1, [pc, #92]	; (8006ae4 <mlx90614_getEmissivity+0x68>)
 8006a86:	2024      	movs	r0, #36	; 0x24
 8006a88:	f7ff fef6 	bl	8006878 <mlx90614_read16>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d022      	beq.n	8006ad8 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8006a92:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <mlx90614_getEmissivity+0x6c>)
 8006a94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006aa2:	eddf 6a12 	vldr	s13, [pc, #72]	; 8006aec <mlx90614_getEmissivity+0x70>
 8006aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <mlx90614_getEmissivity+0x6c>)
 8006aac:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00e      	beq.n	8006ad4 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8006ab6:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <mlx90614_getEmissivity+0x6c>)
 8006ab8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ac6:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006aec <mlx90614_getEmissivity+0x70>
 8006aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <mlx90614_getEmissivity+0x5e>
	}
	return false;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200004ba 	.word	0x200004ba
 8006ae8:	200004b8 	.word	0x200004b8
 8006aec:	477fff00 	.word	0x477fff00

08006af0 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 8006af8:	490d      	ldr	r1, [pc, #52]	; (8006b30 <mlx90614_getMax+0x40>)
 8006afa:	2020      	movs	r0, #32
 8006afc:	f7ff febc 	bl	8006878 <mlx90614_read16>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00e      	beq.n	8006b24 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <mlx90614_getMax+0x44>)
 8006b0e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <mlx90614_getMax+0x36>
	}
	return false;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	200004c2 	.word	0x200004c2
 8006b34:	200004b8 	.word	0x200004b8

08006b38 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 8006b40:	490d      	ldr	r1, [pc, #52]	; (8006b78 <mlx90614_getMin+0x40>)
 8006b42:	2021      	movs	r0, #33	; 0x21
 8006b44:	f7ff fe98 	bl	8006878 <mlx90614_read16>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00e      	beq.n	8006b6c <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d009      	beq.n	8006b68 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 8006b54:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <mlx90614_getMin+0x44>)
 8006b56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e000      	b.n	8006b6e <mlx90614_getMin+0x36>
	}
	return false;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200004c4 	.word	0x200004c4
 8006b7c:	200004b8 	.word	0x200004b8

08006b80 <mlx90614_getObject1>:
	}
	return false;
}
//###################################################################################################
bool mlx90614_getObject1(float *objectTemp)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOBJ1, &mlx90614.rawObject1))
 8006b88:	4911      	ldr	r1, [pc, #68]	; (8006bd0 <mlx90614_getObject1+0x50>)
 8006b8a:	2007      	movs	r0, #7
 8006b8c:	f7ff fe74 	bl	8006878 <mlx90614_read16>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d016      	beq.n	8006bc4 <mlx90614_getObject1+0x44>
	{
		if(mlx90614.rawObject1 & 0x8000)
 8006b96:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <mlx90614_getObject1+0x54>)
 8006b98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	da01      	bge.n	8006ba4 <mlx90614_getObject1+0x24>
			return false;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e010      	b.n	8006bc6 <mlx90614_getObject1+0x46>
		if(objectTemp != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <mlx90614_getObject1+0x40>
      *objectTemp =  mlx90614_calcTemperature(mlx90614.rawObject1);
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <mlx90614_getObject1+0x54>)
 8006bac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff fe8b 	bl	80068cc <mlx90614_calcTemperature>
 8006bb6:	eef0 7a40 	vmov.f32	s15, s0
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e000      	b.n	8006bc6 <mlx90614_getObject1+0x46>
	}
	return false;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	200004be 	.word	0x200004be
 8006bd4:	200004b8 	.word	0x200004b8

08006bd8 <LCD_DrawButton1>:

#include "graphics.h"
#include "Pictures.h"

void LCD_DrawButton1(char *c, int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, uint16_t bgColor, uint16_t textColor, uint8_t bg_draw, uint16_t xPadding, uint16_t yPadding, uint8_t textSize) {
 8006bd8:	b590      	push	{r4, r7, lr}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	4608      	mov	r0, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	461a      	mov	r2, r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	817b      	strh	r3, [r7, #10]
 8006bea:	460b      	mov	r3, r1
 8006bec:	813b      	strh	r3, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	80fb      	strh	r3, [r7, #6]

	if (bg_draw == 1)
 8006bf2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d113      	bne.n	8006c22 <LCD_DrawButton1+0x4a>
		LCD_FillRoundRect(x + 5, y + 5, w, h, r, textColor);
 8006bfa:	897b      	ldrh	r3, [r7, #10]
 8006bfc:	3305      	adds	r3, #5
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	b218      	sxth	r0, r3
 8006c02:	893b      	ldrh	r3, [r7, #8]
 8006c04:	3305      	adds	r3, #5
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	b219      	sxth	r1, r3
 8006c0a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006c0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	f000 ff4f 	bl	8007ac0 <LCD_FillRoundRect>

	LCD_FillRoundRect(x, y, w, h, r, bgColor);
 8006c22:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006c26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c2a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8006c2e:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8006c32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	4623      	mov	r3, r4
 8006c3e:	f000 ff3f 	bl	8007ac0 <LCD_FillRoundRect>
	LCD_DrawRoundRect(x, y, w, h, r, WHITE);
 8006c42:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006c46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c4a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8006c4e:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8006c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	4623      	mov	r3, r4
 8006c60:	f000 fb54 	bl	800730c <LCD_DrawRoundRect>
	LCD_SetCursor(x + xPadding, y + yPadding);
 8006c64:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006c68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c6a:	4413      	add	r3, r2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006c72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006c74:	4413      	add	r3, r2
 8006c76:	4619      	mov	r1, r3
 8006c78:	f001 f9ae 	bl	8007fd8 <LCD_SetCursor>
	LCD_SetTextSize(textSize);
 8006c7c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006c80:	4618      	mov	r0, r3
 8006c82:	f001 f9c1 	bl	8008008 <LCD_SetTextSize>
	LCD_SetTextColor(textColor, bgColor);
 8006c86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 f9d1 	bl	8008034 <LCD_SetTextColor>
	LCD_Printf(c);
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f001 f8b8 	bl	8007e08 <LCD_Printf>

}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd90      	pop	{r4, r7, pc}

08006ca0 <LCD_DrawHBorder>:

void LCD_DrawHBorder(int16_t x, int16_t y, int16_t w, uint16_t color, int16_t BorderSize){
 8006ca0:	b590      	push	{r4, r7, lr}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4611      	mov	r1, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4623      	mov	r3, r4
 8006cb0:	80fb      	strh	r3, [r7, #6]
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	80bb      	strh	r3, [r7, #4]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	807b      	strh	r3, [r7, #2]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	803b      	strh	r3, [r7, #0]

	for(uint8_t i = 0; i < BorderSize; i++){
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	e00f      	b.n	8006ce4 <LCD_DrawHBorder+0x44>
		LCD_DrawFastHLine(x, y + i, w, color);
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	88bb      	ldrh	r3, [r7, #4]
 8006cca:	4413      	add	r3, r2
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	b219      	sxth	r1, r3
 8006cd0:	883b      	ldrh	r3, [r7, #0]
 8006cd2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006cd6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006cda:	f000 fa3b 	bl	8007154 <LCD_DrawFastHLine>
	for(uint8_t i = 0; i < BorderSize; i++){
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
 8006ce4:	7bfa      	ldrb	r2, [r7, #15]
 8006ce6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	dbea      	blt.n	8006cc4 <LCD_DrawHBorder+0x24>
	}

}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd90      	pop	{r4, r7, pc}

08006cf8 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	t *= 20;
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	607b      	str	r3, [r7, #4]
	for (; t > 0; t--) {
 8006d0c:	e003      	b.n	8006d16 <delay+0x1e>
		__asm("nop");
 8006d0e:	bf00      	nop
	for (; t > 0; t--) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f8      	bne.n	8006d0e <delay+0x16>
	}
}
 8006d1c:	bf00      	nop
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <GPIO_Init>:
 * \param 
 * 
 * \return void
 */

static void GPIO_Init(void) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;
	gpio_clk_en(PORTB);
 8006d32:	4832      	ldr	r0, [pc, #200]	; (8006dfc <GPIO_Init+0xd0>)
 8006d34:	f7fe f90e 	bl	8004f54 <gpio_clk_en>
	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2300      	movs	r3, #0
 8006d42:	2201      	movs	r2, #1
 8006d44:	2101      	movs	r1, #1
 8006d46:	482e      	ldr	r0, [pc, #184]	; (8006e00 <GPIO_Init+0xd4>)
 8006d48:	f7fe f94a 	bl	8004fe0 <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	2300      	movs	r3, #0
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	2300      	movs	r3, #0
 8006d56:	2201      	movs	r2, #1
 8006d58:	2107      	movs	r1, #7
 8006d5a:	4829      	ldr	r0, [pc, #164]	; (8006e00 <GPIO_Init+0xd4>)
 8006d5c:	f7fe f940 	bl	8004fe0 <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8006d60:	2300      	movs	r3, #0
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	2300      	movs	r3, #0
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4825      	ldr	r0, [pc, #148]	; (8006e04 <GPIO_Init+0xd8>)
 8006d70:	f7fe f936 	bl	8004fe0 <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8006d74:	2300      	movs	r3, #0
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2201      	movs	r2, #1
 8006d80:	2101      	movs	r1, #1
 8006d82:	4820      	ldr	r0, [pc, #128]	; (8006e04 <GPIO_Init+0xd8>)
 8006d84:	f7fe f92c 	bl	8004fe0 <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	2300      	movs	r3, #0
 8006d92:	2201      	movs	r2, #1
 8006d94:	2104      	movs	r1, #4
 8006d96:	481b      	ldr	r0, [pc, #108]	; (8006e04 <GPIO_Init+0xd8>)
 8006d98:	f7fe f922 	bl	8004fe0 <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9301      	str	r3, [sp, #4]
 8006da0:	2300      	movs	r3, #0
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	2300      	movs	r3, #0
 8006da6:	2201      	movs	r2, #1
 8006da8:	2108      	movs	r1, #8
 8006daa:	4816      	ldr	r0, [pc, #88]	; (8006e04 <GPIO_Init+0xd8>)
 8006dac:	f7fe f918 	bl	8004fe0 <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8006db0:	2300      	movs	r3, #0
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	2300      	movs	r3, #0
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	2300      	movs	r3, #0
 8006dba:	2201      	movs	r2, #1
 8006dbc:	2109      	movs	r1, #9
 8006dbe:	4811      	ldr	r0, [pc, #68]	; (8006e04 <GPIO_Init+0xd8>)
 8006dc0:	f7fe f90e 	bl	8004fe0 <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2201      	movs	r2, #1
 8006dd0:	210a      	movs	r1, #10
 8006dd2:	480c      	ldr	r0, [pc, #48]	; (8006e04 <GPIO_Init+0xd8>)
 8006dd4:	f7fe f904 	bl	8004fe0 <gpio_config>
//	gpio_config(PORTB, 3, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 5, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
	/*Configure GPIO pins : PB0 PB10 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_10 | GPIO_PIN_4
 8006dd8:	f240 4339 	movw	r3, #1081	; 0x439
 8006ddc:	607b      	str	r3, [r7, #4]
			| GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dde:	2301      	movs	r3, #1
 8006de0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8006de6:	2300      	movs	r3, #0
 8006de8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dea:	1d3b      	adds	r3, r7, #4
 8006dec:	4619      	mov	r1, r3
 8006dee:	4803      	ldr	r0, [pc, #12]	; (8006dfc <GPIO_Init+0xd0>)
 8006df0:	f7fc f85a 	bl	8002ea8 <HAL_GPIO_Init>
	//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8006df4:	bf00      	nop
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40020400 	.word	0x40020400
 8006e00:	40020800 	.word	0x40020800
 8006e04:	40020000 	.word	0x40020000

08006e08 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8006e0e:	4b2e      	ldr	r3, [pc, #184]	; (8006ec8 <LCD_Begin+0xc0>)
 8006e10:	22f0      	movs	r2, #240	; 0xf0
 8006e12:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8006e14:	4b2d      	ldr	r3, [pc, #180]	; (8006ecc <LCD_Begin+0xc4>)
 8006e16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006e1a:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8006e1c:	4b2c      	ldr	r3, [pc, #176]	; (8006ed0 <LCD_Begin+0xc8>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8006e22:	4b2c      	ldr	r3, [pc, #176]	; (8006ed4 <LCD_Begin+0xcc>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	801a      	strh	r2, [r3, #0]
 8006e28:	4b2a      	ldr	r3, [pc, #168]	; (8006ed4 <LCD_Begin+0xcc>)
 8006e2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e2e:	4b2a      	ldr	r3, [pc, #168]	; (8006ed8 <LCD_Begin+0xd0>)
 8006e30:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8006e32:	4b2a      	ldr	r3, [pc, #168]	; (8006edc <LCD_Begin+0xd4>)
 8006e34:	2204      	movs	r2, #4
 8006e36:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8006e38:	4b29      	ldr	r3, [pc, #164]	; (8006ee0 <LCD_Begin+0xd8>)
 8006e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <LCD_Begin+0xd8>)
 8006e42:	881a      	ldrh	r2, [r3, #0]
 8006e44:	4b27      	ldr	r3, [pc, #156]	; (8006ee4 <LCD_Begin+0xdc>)
 8006e46:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8006e48:	4b27      	ldr	r3, [pc, #156]	; (8006ee8 <LCD_Begin+0xe0>)
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;

	GPIO_Init();
 8006e52:	f7ff ff6b 	bl	8006d2c <GPIO_Init>

	LCD_Reset();
 8006e56:	f001 f86b 	bl	8007f30 <LCD_Reset>

	LCD_CS_LOW();
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4823      	ldr	r0, [pc, #140]	; (8006eec <LCD_Begin+0xe4>)
 8006e60:	f7fe f99e 	bl	80051a0 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8006e64:	e01d      	b.n	8006ea2 <LCD_Begin+0x9a>
		a = ST7781_regValues[i++];
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	71fa      	strb	r2, [r7, #7]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <LCD_Begin+0xe8>)
 8006e70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e74:	80bb      	strh	r3, [r7, #4]
		d = ST7781_regValues[i++];
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	71fa      	strb	r2, [r7, #7]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4b1c      	ldr	r3, [pc, #112]	; (8006ef0 <LCD_Begin+0xe8>)
 8006e80:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e84:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8006e86:	88bb      	ldrh	r3, [r7, #4]
 8006e88:	2bff      	cmp	r3, #255	; 0xff
 8006e8a:	d104      	bne.n	8006e96 <LCD_Begin+0x8e>
			delay(d);
 8006e8c:	887b      	ldrh	r3, [r7, #2]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff ff32 	bl	8006cf8 <delay>
 8006e94:	e005      	b.n	8006ea2 <LCD_Begin+0x9a>
		} else {
			LCD_WriteRegister16(a, d);
 8006e96:	887a      	ldrh	r2, [r7, #2]
 8006e98:	88bb      	ldrh	r3, [r7, #4]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 fa03 	bl	80082a8 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	2b83      	cmp	r3, #131	; 0x83
 8006ea6:	d9de      	bls.n	8006e66 <LCD_Begin+0x5e>
		}
	}

	LCD_SetRotation(m_rotation);
 8006ea8:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <LCD_Begin+0xc8>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 f8d9 	bl	8008064 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8006eb2:	f240 133f 	movw	r3, #319	; 0x13f
 8006eb6:	22ef      	movs	r2, #239	; 0xef
 8006eb8:	2100      	movs	r1, #0
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f001 f908 	bl	80080d0 <LCD_SetAddrWindow>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	200004ec 	.word	0x200004ec
 8006ecc:	200004ee 	.word	0x200004ee
 8006ed0:	200004f9 	.word	0x200004f9
 8006ed4:	200004f0 	.word	0x200004f0
 8006ed8:	200004f2 	.word	0x200004f2
 8006edc:	200004f8 	.word	0x200004f8
 8006ee0:	200004f6 	.word	0x200004f6
 8006ee4:	200004f4 	.word	0x200004f4
 8006ee8:	200004fa 	.word	0x200004fa
 8006eec:	40020400 	.word	0x40020400
 8006ef0:	0800bdc8 	.word	0x0800bdc8

08006ef4 <LCD_Color565>:
 * \param g	Green
 * \param b	Blue
 * 
 * \return uint16_t	16Bit-RGB
 */
uint16_t LCD_Color565(uint8_t r, uint8_t g, uint8_t b) {
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	71fb      	strb	r3, [r7, #7]
 8006efe:	460b      	mov	r3, r1
 8006f00:	71bb      	strb	r3, [r7, #6]
 8006f02:	4613      	mov	r3, r2
 8006f04:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	b21b      	sxth	r3, r3
 8006f0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f10:	f023 0307 	bic.w	r3, r3, #7
 8006f14:	b21a      	sxth	r2, r3
 8006f16:	79bb      	ldrb	r3, [r7, #6]
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	b21b      	sxth	r3, r3
 8006f1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8006f20:	b21b      	sxth	r3, r3
 8006f22:	4313      	orrs	r3, r2
 8006f24:	b21a      	sxth	r2, r3
 8006f26:	797b      	ldrb	r3, [r7, #5]
 8006f28:	08db      	lsrs	r3, r3, #3
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	b21b      	sxth	r3, r3
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	b21b      	sxth	r3, r3
 8006f32:	b29b      	uxth	r3, r3
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	80fb      	strh	r3, [r7, #6]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	80bb      	strh	r3, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 8006f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	db52      	blt.n	8007000 <LCD_DrawPixel+0xc0>
 8006f5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	db4e      	blt.n	8007000 <LCD_DrawPixel+0xc0>
 8006f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f66:	2bef      	cmp	r3, #239	; 0xef
 8006f68:	dc4a      	bgt.n	8007000 <LCD_DrawPixel+0xc0>
 8006f6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f6e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006f72:	da45      	bge.n	8007000 <LCD_DrawPixel+0xc0>
		return;

	LCD_CS_LOW();
 8006f74:	2200      	movs	r2, #0
 8006f76:	2100      	movs	r1, #0
 8006f78:	4823      	ldr	r0, [pc, #140]	; (8007008 <LCD_DrawPixel+0xc8>)
 8006f7a:	f7fe f911 	bl	80051a0 <gpio_write>

	int16_t t;
	switch (m_rotation) {
 8006f7e:	4b23      	ldr	r3, [pc, #140]	; (800700c <LCD_DrawPixel+0xcc>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d01c      	beq.n	8006fc0 <LCD_DrawPixel+0x80>
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	dc25      	bgt.n	8006fd6 <LCD_DrawPixel+0x96>
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d002      	beq.n	8006f94 <LCD_DrawPixel+0x54>
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d00a      	beq.n	8006fa8 <LCD_DrawPixel+0x68>
 8006f92:	e020      	b.n	8006fd6 <LCD_DrawPixel+0x96>
	case 1:
		t = x;
 8006f94:	88fb      	ldrh	r3, [r7, #6]
 8006f96:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 8006f98:	88bb      	ldrh	r3, [r7, #4]
 8006f9a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	80fb      	strh	r3, [r7, #6]
		y = t;
 8006fa2:	89fb      	ldrh	r3, [r7, #14]
 8006fa4:	80bb      	strh	r3, [r7, #4]
		break;
 8006fa6:	e016      	b.n	8006fd6 <LCD_DrawPixel+0x96>
	case 2:
		x = TFTWIDTH - 1 - x;
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8006fb2:	88bb      	ldrh	r3, [r7, #4]
 8006fb4:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8006fb8:	3301      	adds	r3, #1
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	80bb      	strh	r3, [r7, #4]
		break;
 8006fbe:	e00a      	b.n	8006fd6 <LCD_DrawPixel+0x96>
	case 3:
		t = x;
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	81fb      	strh	r3, [r7, #14]
		x = y;
 8006fc4:	88bb      	ldrh	r3, [r7, #4]
 8006fc6:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 8006fc8:	89fb      	ldrh	r3, [r7, #14]
 8006fca:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8006fce:	3301      	adds	r3, #1
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	80bb      	strh	r3, [r7, #4]
		break;
 8006fd4:	bf00      	nop
	}

	LCD_WriteRegister16(0x0020, x);
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	2020      	movs	r0, #32
 8006fdc:	f001 f964 	bl	80082a8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8006fe0:	88bb      	ldrh	r3, [r7, #4]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	2021      	movs	r0, #33	; 0x21
 8006fe6:	f001 f95f 	bl	80082a8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 8006fea:	887b      	ldrh	r3, [r7, #2]
 8006fec:	4619      	mov	r1, r3
 8006fee:	2022      	movs	r0, #34	; 0x22
 8006ff0:	f001 f95a 	bl	80082a8 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	4803      	ldr	r0, [pc, #12]	; (8007008 <LCD_DrawPixel+0xc8>)
 8006ffa:	f7fe f8d1 	bl	80051a0 <gpio_write>
 8006ffe:	e000      	b.n	8007002 <LCD_DrawPixel+0xc2>
		return;
 8007000:	bf00      	nop
}
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40020400 	.word	0x40020400
 800700c:	200004f9 	.word	0x200004f9

08007010 <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b089      	sub	sp, #36	; 0x24
 8007014:	af00      	add	r7, sp, #0
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	4611      	mov	r1, r2
 800701c:	461a      	mov	r2, r3
 800701e:	4623      	mov	r3, r4
 8007020:	80fb      	strh	r3, [r7, #6]
 8007022:	4603      	mov	r3, r0
 8007024:	80bb      	strh	r3, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	807b      	strh	r3, [r7, #2]
 800702a:	4613      	mov	r3, r2
 800702c:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 800702e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800703c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8007040:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8007044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007048:	1acb      	subs	r3, r1, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	bfb8      	it	lt
 800704e:	425b      	neglt	r3, r3
 8007050:	429a      	cmp	r2, r3
 8007052:	bfcc      	ite	gt
 8007054:	2301      	movgt	r3, #1
 8007056:	2300      	movle	r3, #0
 8007058:	b2db      	uxtb	r3, r3
 800705a:	837b      	strh	r3, [r7, #26]
	if (steep) {
 800705c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <LCD_DrawLine+0x6c>
		swap(x1, y1);
 8007064:	88fb      	ldrh	r3, [r7, #6]
 8007066:	833b      	strh	r3, [r7, #24]
 8007068:	88bb      	ldrh	r3, [r7, #4]
 800706a:	80fb      	strh	r3, [r7, #6]
 800706c:	8b3b      	ldrh	r3, [r7, #24]
 800706e:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8007070:	887b      	ldrh	r3, [r7, #2]
 8007072:	82fb      	strh	r3, [r7, #22]
 8007074:	883b      	ldrh	r3, [r7, #0]
 8007076:	807b      	strh	r3, [r7, #2]
 8007078:	8afb      	ldrh	r3, [r7, #22]
 800707a:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2) {
 800707c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007080:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007084:	429a      	cmp	r2, r3
 8007086:	dd0b      	ble.n	80070a0 <LCD_DrawLine+0x90>
		swap(x1, x2);
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	82bb      	strh	r3, [r7, #20]
 800708c:	887b      	ldrh	r3, [r7, #2]
 800708e:	80fb      	strh	r3, [r7, #6]
 8007090:	8abb      	ldrh	r3, [r7, #20]
 8007092:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8007094:	88bb      	ldrh	r3, [r7, #4]
 8007096:	827b      	strh	r3, [r7, #18]
 8007098:	883b      	ldrh	r3, [r7, #0]
 800709a:	80bb      	strh	r3, [r7, #4]
 800709c:	8a7b      	ldrh	r3, [r7, #18]
 800709e:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 80070a0:	887a      	ldrh	r2, [r7, #2]
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 80070aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80070ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bfb8      	it	lt
 80070b8:	425b      	neglt	r3, r3
 80070ba:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 80070bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80070c0:	0fda      	lsrs	r2, r3, #31
 80070c2:	4413      	add	r3, r2
 80070c4:	105b      	asrs	r3, r3, #1
 80070c6:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2) {
 80070c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80070cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	da02      	bge.n	80070da <LCD_DrawLine+0xca>
		ystep = 1;
 80070d4:	2301      	movs	r3, #1
 80070d6:	83bb      	strh	r3, [r7, #28]
 80070d8:	e031      	b.n	800713e <LCD_DrawLine+0x12e>
	} else {
		ystep = -1;
 80070da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070de:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++) {
 80070e0:	e02d      	b.n	800713e <LCD_DrawLine+0x12e>
		if (steep) {
 80070e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <LCD_DrawLine+0xec>
			LCD_DrawPixel(y1, x1, color);
 80070ea:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80070ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80070f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff ff23 	bl	8006f40 <LCD_DrawPixel>
 80070fa:	e007      	b.n	800710c <LCD_DrawLine+0xfc>
		} else {
			LCD_DrawPixel(x1, y1, color);
 80070fc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80070fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff ff1a 	bl	8006f40 <LCD_DrawPixel>
		}
		err -= dy;
 800710c:	8bfa      	ldrh	r2, [r7, #30]
 800710e:	89fb      	ldrh	r3, [r7, #14]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	b29b      	uxth	r3, r3
 8007114:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8007116:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800711a:	2b00      	cmp	r3, #0
 800711c:	da09      	bge.n	8007132 <LCD_DrawLine+0x122>
			y1 += ystep;
 800711e:	88ba      	ldrh	r2, [r7, #4]
 8007120:	8bbb      	ldrh	r3, [r7, #28]
 8007122:	4413      	add	r3, r2
 8007124:	b29b      	uxth	r3, r3
 8007126:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8007128:	8bfa      	ldrh	r2, [r7, #30]
 800712a:	8a3b      	ldrh	r3, [r7, #16]
 800712c:	4413      	add	r3, r2
 800712e:	b29b      	uxth	r3, r3
 8007130:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++) {
 8007132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007136:	b29b      	uxth	r3, r3
 8007138:	3301      	adds	r3, #1
 800713a:	b29b      	uxth	r3, r3
 800713c:	80fb      	strh	r3, [r7, #6]
 800713e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007146:	429a      	cmp	r2, r3
 8007148:	ddcb      	ble.n	80070e2 <LCD_DrawLine+0xd2>
		}
	}
}
 800714a:	bf00      	nop
 800714c:	bf00      	nop
 800714e:	3724      	adds	r7, #36	; 0x24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd90      	pop	{r4, r7, pc}

08007154 <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	4611      	mov	r1, r2
 8007160:	461a      	mov	r2, r3
 8007162:	4623      	mov	r3, r4
 8007164:	80fb      	strh	r3, [r7, #6]
 8007166:	4603      	mov	r3, r0
 8007168:	80bb      	strh	r3, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	807b      	strh	r3, [r7, #2]
 800716e:	4613      	mov	r3, r2
 8007170:	803b      	strh	r3, [r7, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8007172:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007176:	2b00      	cmp	r3, #0
 8007178:	dd5a      	ble.n	8007230 <LCD_DrawFastHLine+0xdc>
 800717a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	db56      	blt.n	8007230 <LCD_DrawFastHLine+0xdc>
 8007182:	4b2d      	ldr	r3, [pc, #180]	; (8007238 <LCD_DrawFastHLine+0xe4>)
 8007184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007188:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800718c:	429a      	cmp	r2, r3
 800718e:	da4f      	bge.n	8007230 <LCD_DrawFastHLine+0xdc>
 8007190:	4b2a      	ldr	r3, [pc, #168]	; (800723c <LCD_DrawFastHLine+0xe8>)
 8007192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007196:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800719a:	429a      	cmp	r2, r3
 800719c:	da48      	bge.n	8007230 <LCD_DrawFastHLine+0xdc>
			(x + length - 1)) < 0))
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	887b      	ldrh	r3, [r7, #2]
 80071a2:	4413      	add	r3, r2
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29b      	uxth	r3, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 80071aa:	81fb      	strh	r3, [r7, #14]
 80071ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	db3d      	blt.n	8007230 <LCD_DrawFastHLine+0xdc>
		return;

	if (x < 0) { // Clip left
 80071b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	da06      	bge.n	80071ca <LCD_DrawFastHLine+0x76>
		length += x;
 80071bc:	887a      	ldrh	r2, [r7, #2]
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	4413      	add	r3, r2
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	807b      	strh	r3, [r7, #2]
		x = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	80fb      	strh	r3, [r7, #6]
	}

	if (x2 >= m_width) { // Clip right
 80071ca:	4b1c      	ldr	r3, [pc, #112]	; (800723c <LCD_DrawFastHLine+0xe8>)
 80071cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	db0d      	blt.n	80071f4 <LCD_DrawFastHLine+0xa0>
		x2 = m_width - 1;
 80071d8:	4b18      	ldr	r3, [pc, #96]	; (800723c <LCD_DrawFastHLine+0xe8>)
 80071da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	81fb      	strh	r3, [r7, #14]
		length = x2 - x + 1;
 80071e6:	89fa      	ldrh	r2, [r7, #14]
 80071e8:	88fb      	ldrh	r3, [r7, #6]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3301      	adds	r3, #1
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	807b      	strh	r3, [r7, #2]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 80071f4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80071f8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80071fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007200:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007204:	f000 ff64 	bl	80080d0 <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 8007208:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800720c:	883b      	ldrh	r3, [r7, #0]
 800720e:	4611      	mov	r1, r2
 8007210:	4618      	mov	r0, r3
 8007212:	f000 fcbb 	bl	8007b8c <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8007216:	4b09      	ldr	r3, [pc, #36]	; (800723c <LCD_DrawFastHLine+0xe8>)
 8007218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800721c:	1e5a      	subs	r2, r3, #1
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <LCD_DrawFastHLine+0xe4>)
 8007220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007224:	3b01      	subs	r3, #1
 8007226:	2100      	movs	r1, #0
 8007228:	2000      	movs	r0, #0
 800722a:	f000 ff51 	bl	80080d0 <LCD_SetAddrWindow>
 800722e:	e000      	b.n	8007232 <LCD_DrawFastHLine+0xde>
		return;
 8007230:	bf00      	nop

}
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	bd90      	pop	{r4, r7, pc}
 8007238:	200004ee 	.word	0x200004ee
 800723c:	200004ec 	.word	0x200004ec

08007240 <LCD_DrawFastVLine>:
 * \param h		High of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8007240:	b590      	push	{r4, r7, lr}
 8007242:	b085      	sub	sp, #20
 8007244:	af02      	add	r7, sp, #8
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4623      	mov	r3, r4
 8007250:	80fb      	strh	r3, [r7, #6]
 8007252:	4603      	mov	r3, r0
 8007254:	80bb      	strh	r3, [r7, #4]
 8007256:	460b      	mov	r3, r1
 8007258:	807b      	strh	r3, [r7, #2]
 800725a:	4613      	mov	r3, r2
 800725c:	803b      	strh	r3, [r7, #0]
	// Update in subclasses if desired!
	LCD_DrawLine(x, y, x, y + h - 1, color);
 800725e:	88ba      	ldrh	r2, [r7, #4]
 8007260:	887b      	ldrh	r3, [r7, #2]
 8007262:	4413      	add	r3, r2
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29b      	uxth	r3, r3
 800726a:	b21c      	sxth	r4, r3
 800726c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007270:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007274:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007278:	883b      	ldrh	r3, [r7, #0]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	4623      	mov	r3, r4
 800727e:	f7ff fec7 	bl	8007010 <LCD_DrawLine>
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	bd90      	pop	{r4, r7, pc}

0800728a <LCD_DrawRect>:
 * \param h			Height of the rectangle to draw
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800728a:	b590      	push	{r4, r7, lr}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	4604      	mov	r4, r0
 8007292:	4608      	mov	r0, r1
 8007294:	4611      	mov	r1, r2
 8007296:	461a      	mov	r2, r3
 8007298:	4623      	mov	r3, r4
 800729a:	80fb      	strh	r3, [r7, #6]
 800729c:	4603      	mov	r3, r0
 800729e:	80bb      	strh	r3, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	807b      	strh	r3, [r7, #2]
 80072a4:	4613      	mov	r3, r2
 80072a6:	803b      	strh	r3, [r7, #0]
	LCD_DrawFastHLine(x, y, w, color);
 80072a8:	8b3b      	ldrh	r3, [r7, #24]
 80072aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80072ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80072b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80072b6:	f7ff ff4d 	bl	8007154 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x, y + h - 1, w, color);
 80072ba:	88ba      	ldrh	r2, [r7, #4]
 80072bc:	883b      	ldrh	r3, [r7, #0]
 80072be:	4413      	add	r3, r2
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	b219      	sxth	r1, r3
 80072c8:	8b3b      	ldrh	r3, [r7, #24]
 80072ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80072ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80072d2:	f7ff ff3f 	bl	8007154 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y, h, color);
 80072d6:	8b3b      	ldrh	r3, [r7, #24]
 80072d8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80072dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80072e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80072e4:	f7ff ffac 	bl	8007240 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y, h, color);
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	887b      	ldrh	r3, [r7, #2]
 80072ec:	4413      	add	r3, r2
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	b218      	sxth	r0, r3
 80072f6:	8b3b      	ldrh	r3, [r7, #24]
 80072f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80072fc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007300:	f7ff ff9e 	bl	8007240 <LCD_DrawFastVLine>
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	bd90      	pop	{r4, r7, pc}

0800730c <LCD_DrawRoundRect>:
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 800730c:	b590      	push	{r4, r7, lr}
 800730e:	b085      	sub	sp, #20
 8007310:	af02      	add	r7, sp, #8
 8007312:	4604      	mov	r4, r0
 8007314:	4608      	mov	r0, r1
 8007316:	4611      	mov	r1, r2
 8007318:	461a      	mov	r2, r3
 800731a:	4623      	mov	r3, r4
 800731c:	80fb      	strh	r3, [r7, #6]
 800731e:	4603      	mov	r3, r0
 8007320:	80bb      	strh	r3, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	807b      	strh	r3, [r7, #2]
 8007326:	4613      	mov	r3, r2
 8007328:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_DrawFastHLine(x + r, y, w - 2 * r, color); // Top
 800732a:	88fa      	ldrh	r2, [r7, #6]
 800732c:	8b3b      	ldrh	r3, [r7, #24]
 800732e:	4413      	add	r3, r2
 8007330:	b29b      	uxth	r3, r3
 8007332:	b218      	sxth	r0, r3
 8007334:	887a      	ldrh	r2, [r7, #2]
 8007336:	8b3b      	ldrh	r3, [r7, #24]
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	b29b      	uxth	r3, r3
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	b29b      	uxth	r3, r3
 8007340:	b21a      	sxth	r2, r3
 8007342:	8bbb      	ldrh	r3, [r7, #28]
 8007344:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007348:	f7ff ff04 	bl	8007154 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 800734c:	88fa      	ldrh	r2, [r7, #6]
 800734e:	8b3b      	ldrh	r3, [r7, #24]
 8007350:	4413      	add	r3, r2
 8007352:	b29b      	uxth	r3, r3
 8007354:	b218      	sxth	r0, r3
 8007356:	88ba      	ldrh	r2, [r7, #4]
 8007358:	883b      	ldrh	r3, [r7, #0]
 800735a:	4413      	add	r3, r2
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29b      	uxth	r3, r3
 8007362:	b219      	sxth	r1, r3
 8007364:	887a      	ldrh	r2, [r7, #2]
 8007366:	8b3b      	ldrh	r3, [r7, #24]
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	b29b      	uxth	r3, r3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	b29b      	uxth	r3, r3
 8007370:	b21a      	sxth	r2, r3
 8007372:	8bbb      	ldrh	r3, [r7, #28]
 8007374:	f7ff feee 	bl	8007154 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y + r, h - 2 * r, color); // Left
 8007378:	88ba      	ldrh	r2, [r7, #4]
 800737a:	8b3b      	ldrh	r3, [r7, #24]
 800737c:	4413      	add	r3, r2
 800737e:	b29b      	uxth	r3, r3
 8007380:	b219      	sxth	r1, r3
 8007382:	883a      	ldrh	r2, [r7, #0]
 8007384:	8b3b      	ldrh	r3, [r7, #24]
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	b29b      	uxth	r3, r3
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	b29b      	uxth	r3, r3
 800738e:	b21a      	sxth	r2, r3
 8007390:	8bbb      	ldrh	r3, [r7, #28]
 8007392:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007396:	f7ff ff53 	bl	8007240 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 800739a:	88fa      	ldrh	r2, [r7, #6]
 800739c:	887b      	ldrh	r3, [r7, #2]
 800739e:	4413      	add	r3, r2
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	b218      	sxth	r0, r3
 80073a8:	88ba      	ldrh	r2, [r7, #4]
 80073aa:	8b3b      	ldrh	r3, [r7, #24]
 80073ac:	4413      	add	r3, r2
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	b219      	sxth	r1, r3
 80073b2:	883a      	ldrh	r2, [r7, #0]
 80073b4:	8b3b      	ldrh	r3, [r7, #24]
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	b29b      	uxth	r3, r3
 80073be:	b21a      	sxth	r2, r3
 80073c0:	8bbb      	ldrh	r3, [r7, #28]
 80073c2:	f7ff ff3d 	bl	8007240 <LCD_DrawFastVLine>
	// draw four corners
	LCD_DrawCircleHelper(x + r, y + r, r, 1, color);
 80073c6:	88fa      	ldrh	r2, [r7, #6]
 80073c8:	8b3b      	ldrh	r3, [r7, #24]
 80073ca:	4413      	add	r3, r2
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	b218      	sxth	r0, r3
 80073d0:	88ba      	ldrh	r2, [r7, #4]
 80073d2:	8b3b      	ldrh	r3, [r7, #24]
 80073d4:	4413      	add	r3, r2
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	b219      	sxth	r1, r3
 80073da:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80073de:	8bbb      	ldrh	r3, [r7, #28]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	2301      	movs	r3, #1
 80073e4:	f000 f84b 	bl	800747e <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 80073e8:	88fa      	ldrh	r2, [r7, #6]
 80073ea:	887b      	ldrh	r3, [r7, #2]
 80073ec:	4413      	add	r3, r2
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	8b3b      	ldrh	r3, [r7, #24]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	b218      	sxth	r0, r3
 80073fc:	88ba      	ldrh	r2, [r7, #4]
 80073fe:	8b3b      	ldrh	r3, [r7, #24]
 8007400:	4413      	add	r3, r2
 8007402:	b29b      	uxth	r3, r3
 8007404:	b219      	sxth	r1, r3
 8007406:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800740a:	8bbb      	ldrh	r3, [r7, #28]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	2302      	movs	r3, #2
 8007410:	f000 f835 	bl	800747e <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	887b      	ldrh	r3, [r7, #2]
 8007418:	4413      	add	r3, r2
 800741a:	b29a      	uxth	r2, r3
 800741c:	8b3b      	ldrh	r3, [r7, #24]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29b      	uxth	r3, r3
 8007426:	b218      	sxth	r0, r3
 8007428:	88ba      	ldrh	r2, [r7, #4]
 800742a:	883b      	ldrh	r3, [r7, #0]
 800742c:	4413      	add	r3, r2
 800742e:	b29a      	uxth	r2, r3
 8007430:	8b3b      	ldrh	r3, [r7, #24]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29b      	uxth	r3, r3
 800743a:	b219      	sxth	r1, r3
 800743c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007440:	8bbb      	ldrh	r3, [r7, #28]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	2304      	movs	r3, #4
 8007446:	f000 f81a 	bl	800747e <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 800744a:	88fa      	ldrh	r2, [r7, #6]
 800744c:	8b3b      	ldrh	r3, [r7, #24]
 800744e:	4413      	add	r3, r2
 8007450:	b29b      	uxth	r3, r3
 8007452:	b218      	sxth	r0, r3
 8007454:	88ba      	ldrh	r2, [r7, #4]
 8007456:	883b      	ldrh	r3, [r7, #0]
 8007458:	4413      	add	r3, r2
 800745a:	b29a      	uxth	r2, r3
 800745c:	8b3b      	ldrh	r3, [r7, #24]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29b      	uxth	r3, r3
 8007466:	b219      	sxth	r1, r3
 8007468:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800746c:	8bbb      	ldrh	r3, [r7, #28]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	2308      	movs	r3, #8
 8007472:	f000 f804 	bl	800747e <LCD_DrawCircleHelper>
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	bd90      	pop	{r4, r7, pc}

0800747e <LCD_DrawCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 800747e:	b590      	push	{r4, r7, lr}
 8007480:	b087      	sub	sp, #28
 8007482:	af00      	add	r7, sp, #0
 8007484:	4604      	mov	r4, r0
 8007486:	4608      	mov	r0, r1
 8007488:	4611      	mov	r1, r2
 800748a:	461a      	mov	r2, r3
 800748c:	4623      	mov	r3, r4
 800748e:	80fb      	strh	r3, [r7, #6]
 8007490:	4603      	mov	r3, r0
 8007492:	80bb      	strh	r3, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	807b      	strh	r3, [r7, #2]
 8007498:	4613      	mov	r3, r2
 800749a:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800749c:	887b      	ldrh	r3, [r7, #2]
 800749e:	f1c3 0301 	rsb	r3, r3, #1
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80074a6:	2301      	movs	r3, #1
 80074a8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80074aa:	887b      	ldrh	r3, [r7, #2]
 80074ac:	461a      	mov	r2, r3
 80074ae:	03d2      	lsls	r2, r2, #15
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80074bc:	887b      	ldrh	r3, [r7, #2]
 80074be:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 80074c0:	e0a5      	b.n	800760e <LCD_DrawCircleHelper+0x190>
		if (f >= 0) {
 80074c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	db0e      	blt.n	80074e8 <LCD_DrawCircleHelper+0x6a>
			y--;
 80074ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80074d6:	8a7b      	ldrh	r3, [r7, #18]
 80074d8:	3302      	adds	r3, #2
 80074da:	b29b      	uxth	r3, r3
 80074dc:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80074de:	8afa      	ldrh	r2, [r7, #22]
 80074e0:	8a7b      	ldrh	r3, [r7, #18]
 80074e2:	4413      	add	r3, r2
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80074e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3301      	adds	r3, #1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80074f4:	8abb      	ldrh	r3, [r7, #20]
 80074f6:	3302      	adds	r3, #2
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80074fc:	8afa      	ldrh	r2, [r7, #22]
 80074fe:	8abb      	ldrh	r3, [r7, #20]
 8007500:	4413      	add	r3, r2
 8007502:	b29b      	uxth	r3, r3
 8007504:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8007506:	787b      	ldrb	r3, [r7, #1]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01b      	beq.n	8007548 <LCD_DrawCircleHelper+0xca>
			LCD_DrawPixel(x0 + x, y0 + y, color);
 8007510:	88fa      	ldrh	r2, [r7, #6]
 8007512:	8a3b      	ldrh	r3, [r7, #16]
 8007514:	4413      	add	r3, r2
 8007516:	b29b      	uxth	r3, r3
 8007518:	b218      	sxth	r0, r3
 800751a:	88ba      	ldrh	r2, [r7, #4]
 800751c:	89fb      	ldrh	r3, [r7, #14]
 800751e:	4413      	add	r3, r2
 8007520:	b29b      	uxth	r3, r3
 8007522:	b21b      	sxth	r3, r3
 8007524:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007526:	4619      	mov	r1, r3
 8007528:	f7ff fd0a 	bl	8006f40 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 + x, color);
 800752c:	88fa      	ldrh	r2, [r7, #6]
 800752e:	89fb      	ldrh	r3, [r7, #14]
 8007530:	4413      	add	r3, r2
 8007532:	b29b      	uxth	r3, r3
 8007534:	b218      	sxth	r0, r3
 8007536:	88ba      	ldrh	r2, [r7, #4]
 8007538:	8a3b      	ldrh	r3, [r7, #16]
 800753a:	4413      	add	r3, r2
 800753c:	b29b      	uxth	r3, r3
 800753e:	b21b      	sxth	r3, r3
 8007540:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007542:	4619      	mov	r1, r3
 8007544:	f7ff fcfc 	bl	8006f40 <LCD_DrawPixel>
		}
		if (cornername & 0x2) {
 8007548:	787b      	ldrb	r3, [r7, #1]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01b      	beq.n	800758a <LCD_DrawCircleHelper+0x10c>
			LCD_DrawPixel(x0 + x, y0 - y, color);
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	8a3b      	ldrh	r3, [r7, #16]
 8007556:	4413      	add	r3, r2
 8007558:	b29b      	uxth	r3, r3
 800755a:	b218      	sxth	r0, r3
 800755c:	88ba      	ldrh	r2, [r7, #4]
 800755e:	89fb      	ldrh	r3, [r7, #14]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	b29b      	uxth	r3, r3
 8007564:	b21b      	sxth	r3, r3
 8007566:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007568:	4619      	mov	r1, r3
 800756a:	f7ff fce9 	bl	8006f40 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 - x, color);
 800756e:	88fa      	ldrh	r2, [r7, #6]
 8007570:	89fb      	ldrh	r3, [r7, #14]
 8007572:	4413      	add	r3, r2
 8007574:	b29b      	uxth	r3, r3
 8007576:	b218      	sxth	r0, r3
 8007578:	88ba      	ldrh	r2, [r7, #4]
 800757a:	8a3b      	ldrh	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	b29b      	uxth	r3, r3
 8007580:	b21b      	sxth	r3, r3
 8007582:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007584:	4619      	mov	r1, r3
 8007586:	f7ff fcdb 	bl	8006f40 <LCD_DrawPixel>
		}
		if (cornername & 0x8) {
 800758a:	787b      	ldrb	r3, [r7, #1]
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01b      	beq.n	80075cc <LCD_DrawCircleHelper+0x14e>
			LCD_DrawPixel(x0 - y, y0 + x, color);
 8007594:	88fa      	ldrh	r2, [r7, #6]
 8007596:	89fb      	ldrh	r3, [r7, #14]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	b29b      	uxth	r3, r3
 800759c:	b218      	sxth	r0, r3
 800759e:	88ba      	ldrh	r2, [r7, #4]
 80075a0:	8a3b      	ldrh	r3, [r7, #16]
 80075a2:	4413      	add	r3, r2
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	b21b      	sxth	r3, r3
 80075a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80075aa:	4619      	mov	r1, r3
 80075ac:	f7ff fcc8 	bl	8006f40 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 + y, color);
 80075b0:	88fa      	ldrh	r2, [r7, #6]
 80075b2:	8a3b      	ldrh	r3, [r7, #16]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	b218      	sxth	r0, r3
 80075ba:	88ba      	ldrh	r2, [r7, #4]
 80075bc:	89fb      	ldrh	r3, [r7, #14]
 80075be:	4413      	add	r3, r2
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	b21b      	sxth	r3, r3
 80075c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80075c6:	4619      	mov	r1, r3
 80075c8:	f7ff fcba 	bl	8006f40 <LCD_DrawPixel>
		}
		if (cornername & 0x1) {
 80075cc:	787b      	ldrb	r3, [r7, #1]
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01b      	beq.n	800760e <LCD_DrawCircleHelper+0x190>
			LCD_DrawPixel(x0 - y, y0 - x, color);
 80075d6:	88fa      	ldrh	r2, [r7, #6]
 80075d8:	89fb      	ldrh	r3, [r7, #14]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	b29b      	uxth	r3, r3
 80075de:	b218      	sxth	r0, r3
 80075e0:	88ba      	ldrh	r2, [r7, #4]
 80075e2:	8a3b      	ldrh	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	b21b      	sxth	r3, r3
 80075ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80075ec:	4619      	mov	r1, r3
 80075ee:	f7ff fca7 	bl	8006f40 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 - y, color);
 80075f2:	88fa      	ldrh	r2, [r7, #6]
 80075f4:	8a3b      	ldrh	r3, [r7, #16]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	b218      	sxth	r0, r3
 80075fc:	88ba      	ldrh	r2, [r7, #4]
 80075fe:	89fb      	ldrh	r3, [r7, #14]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	b29b      	uxth	r3, r3
 8007604:	b21b      	sxth	r3, r3
 8007606:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007608:	4619      	mov	r1, r3
 800760a:	f7ff fc99 	bl	8006f40 <LCD_DrawPixel>
	while (x < y) {
 800760e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007612:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007616:	429a      	cmp	r2, r3
 8007618:	f6ff af53 	blt.w	80074c2 <LCD_DrawCircleHelper+0x44>
		}
	}
}
 800761c:	bf00      	nop
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	bd90      	pop	{r4, r7, pc}
	...

08007628 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 8007628:	b590      	push	{r4, r7, lr}
 800762a:	b087      	sub	sp, #28
 800762c:	af02      	add	r7, sp, #8
 800762e:	4604      	mov	r4, r0
 8007630:	4608      	mov	r0, r1
 8007632:	4611      	mov	r1, r2
 8007634:	461a      	mov	r2, r3
 8007636:	4623      	mov	r3, r4
 8007638:	80fb      	strh	r3, [r7, #6]
 800763a:	4603      	mov	r3, r0
 800763c:	80bb      	strh	r3, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
 8007642:	4613      	mov	r3, r2
 8007644:	803b      	strh	r3, [r7, #0]
	if ((x >= m_width) || // Clip right
 8007646:	4b6e      	ldr	r3, [pc, #440]	; (8007800 <LCD_DrawChar+0x1d8>)
 8007648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800764c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007650:	429a      	cmp	r2, r3
 8007652:	f280 80d0 	bge.w	80077f6 <LCD_DrawChar+0x1ce>
			(y >= m_height) || // Clip bottom
 8007656:	4b6b      	ldr	r3, [pc, #428]	; (8007804 <LCD_DrawChar+0x1dc>)
 8007658:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 800765c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	f280 80c8 	bge.w	80077f6 <LCD_DrawChar+0x1ce>
			((x + 6 * size - 1) < 0) || // Clip left
 8007666:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800766a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800766e:	4613      	mov	r3, r2
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	4413      	add	r3, r2
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	440b      	add	r3, r1
			(y >= m_height) || // Clip bottom
 8007678:	2b00      	cmp	r3, #0
 800767a:	f340 80bc 	ble.w	80077f6 <LCD_DrawChar+0x1ce>
			((y + 8 * size - 1) < 0))   // Clip top
 800767e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007682:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	4413      	add	r3, r2
			((x + 6 * size - 1) < 0) || // Clip left
 800768a:	2b00      	cmp	r3, #0
 800768c:	f340 80b3 	ble.w	80077f6 <LCD_DrawChar+0x1ce>
		return;

	for (int8_t i = 0; i < 6; i++) {
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	e0a9      	b.n	80077ea <LCD_DrawChar+0x1c2>
		uint8_t line;
		if (i == 5) {
 8007696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800769a:	2b05      	cmp	r3, #5
 800769c:	d102      	bne.n	80076a4 <LCD_DrawChar+0x7c>
			line = 0x0;
 800769e:	2300      	movs	r3, #0
 80076a0:	73bb      	strb	r3, [r7, #14]
 80076a2:	e09c      	b.n	80077de <LCD_DrawChar+0x1b6>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	441a      	add	r2, r3
 80076ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076b0:	4413      	add	r3, r2
 80076b2:	4a55      	ldr	r2, [pc, #340]	; (8007808 <LCD_DrawChar+0x1e0>)
 80076b4:	5cd3      	ldrb	r3, [r2, r3]
 80076b6:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 80076b8:	2300      	movs	r3, #0
 80076ba:	737b      	strb	r3, [r7, #13]
 80076bc:	e08a      	b.n	80077d4 <LCD_DrawChar+0x1ac>
				if (line & 0x1) {
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d03c      	beq.n	8007742 <LCD_DrawChar+0x11a>
					if (size == 1) { // default size
 80076c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d112      	bne.n	80076f6 <LCD_DrawChar+0xce>
						LCD_DrawPixel(x + i, y + j, color);
 80076d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	4413      	add	r3, r2
 80076da:	b29b      	uxth	r3, r3
 80076dc:	b218      	sxth	r0, r3
 80076de:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	88bb      	ldrh	r3, [r7, #4]
 80076e6:	4413      	add	r3, r2
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	b21b      	sxth	r3, r3
 80076ec:	883a      	ldrh	r2, [r7, #0]
 80076ee:	4619      	mov	r1, r3
 80076f0:	f7ff fc26 	bl	8006f40 <LCD_DrawPixel>
 80076f4:	e065      	b.n	80077c2 <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 80076f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007700:	b29b      	uxth	r3, r3
 8007702:	fb12 f303 	smulbb	r3, r2, r3
 8007706:	b29a      	uxth	r2, r3
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	4413      	add	r3, r2
 800770c:	b29b      	uxth	r3, r3
 800770e:	b218      	sxth	r0, r3
 8007710:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007714:	b29a      	uxth	r2, r3
 8007716:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800771a:	b29b      	uxth	r3, r3
 800771c:	fb12 f303 	smulbb	r3, r2, r3
 8007720:	b29a      	uxth	r2, r3
 8007722:	88bb      	ldrh	r3, [r7, #4]
 8007724:	4413      	add	r3, r2
 8007726:	b29b      	uxth	r3, r3
 8007728:	b219      	sxth	r1, r3
 800772a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800772e:	b21a      	sxth	r2, r3
 8007730:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007734:	b21c      	sxth	r4, r3
 8007736:	883b      	ldrh	r3, [r7, #0]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	4623      	mov	r3, r4
 800773c:	f000 f918 	bl	8007970 <LCD_FillRect>
 8007740:	e03f      	b.n	80077c2 <LCD_DrawChar+0x19a>
								color);
					}
				} else if (bg != color) {
 8007742:	8c3a      	ldrh	r2, [r7, #32]
 8007744:	883b      	ldrh	r3, [r7, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d03b      	beq.n	80077c2 <LCD_DrawChar+0x19a>
					if (size == 1) { // default size
 800774a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800774e:	2b01      	cmp	r3, #1
 8007750:	d112      	bne.n	8007778 <LCD_DrawChar+0x150>
						LCD_DrawPixel(x + i, y + j, bg);
 8007752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007756:	b29a      	uxth	r2, r3
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	4413      	add	r3, r2
 800775c:	b29b      	uxth	r3, r3
 800775e:	b218      	sxth	r0, r3
 8007760:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007764:	b29a      	uxth	r2, r3
 8007766:	88bb      	ldrh	r3, [r7, #4]
 8007768:	4413      	add	r3, r2
 800776a:	b29b      	uxth	r3, r3
 800776c:	b21b      	sxth	r3, r3
 800776e:	8c3a      	ldrh	r2, [r7, #32]
 8007770:	4619      	mov	r1, r3
 8007772:	f7ff fbe5 	bl	8006f40 <LCD_DrawPixel>
 8007776:	e024      	b.n	80077c2 <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 8007778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800777c:	b29a      	uxth	r2, r3
 800777e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007782:	b29b      	uxth	r3, r3
 8007784:	fb12 f303 	smulbb	r3, r2, r3
 8007788:	b29a      	uxth	r2, r3
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	4413      	add	r3, r2
 800778e:	b29b      	uxth	r3, r3
 8007790:	b218      	sxth	r0, r3
 8007792:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007796:	b29a      	uxth	r2, r3
 8007798:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800779c:	b29b      	uxth	r3, r3
 800779e:	fb12 f303 	smulbb	r3, r2, r3
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	88bb      	ldrh	r3, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	b219      	sxth	r1, r3
 80077ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80077b0:	b21a      	sxth	r2, r3
 80077b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80077b6:	b21c      	sxth	r4, r3
 80077b8:	8c3b      	ldrh	r3, [r7, #32]
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	4623      	mov	r3, r4
 80077be:	f000 f8d7 	bl	8007970 <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	085b      	lsrs	r3, r3, #1
 80077c6:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 80077c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	3301      	adds	r3, #1
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	737b      	strb	r3, [r7, #13]
 80077d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80077d8:	2b07      	cmp	r3, #7
 80077da:	f77f af70 	ble.w	80076be <LCD_DrawChar+0x96>
	for (int8_t i = 0; i < 6; i++) {
 80077de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	3301      	adds	r3, #1
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	73fb      	strb	r3, [r7, #15]
 80077ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ee:	2b05      	cmp	r3, #5
 80077f0:	f77f af51 	ble.w	8007696 <LCD_DrawChar+0x6e>
 80077f4:	e000      	b.n	80077f8 <LCD_DrawChar+0x1d0>
		return;
 80077f6:	bf00      	nop
			}
		}
	}
}
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd90      	pop	{r4, r7, pc}
 80077fe:	bf00      	nop
 8007800:	200004ec 	.word	0x200004ec
 8007804:	200004ee 	.word	0x200004ee
 8007808:	0800bb48 	.word	0x0800bb48

0800780c <LCD_FillCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		int16_t delta, uint16_t color) {
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	4611      	mov	r1, r2
 8007818:	461a      	mov	r2, r3
 800781a:	4623      	mov	r3, r4
 800781c:	80fb      	strh	r3, [r7, #6]
 800781e:	4603      	mov	r3, r0
 8007820:	80bb      	strh	r3, [r7, #4]
 8007822:	460b      	mov	r3, r1
 8007824:	807b      	strh	r3, [r7, #2]
 8007826:	4613      	mov	r3, r2
 8007828:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800782a:	887b      	ldrh	r3, [r7, #2]
 800782c:	f1c3 0301 	rsb	r3, r3, #1
 8007830:	b29b      	uxth	r3, r3
 8007832:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8007834:	2301      	movs	r3, #1
 8007836:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8007838:	887b      	ldrh	r3, [r7, #2]
 800783a:	461a      	mov	r2, r3
 800783c:	03d2      	lsls	r2, r2, #15
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	b29b      	uxth	r3, r3
 8007844:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800784a:	887b      	ldrh	r3, [r7, #2]
 800784c:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 800784e:	e083      	b.n	8007958 <LCD_FillCircleHelper+0x14c>
		if (f >= 0) {
 8007850:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007854:	2b00      	cmp	r3, #0
 8007856:	db0e      	blt.n	8007876 <LCD_FillCircleHelper+0x6a>
			y--;
 8007858:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29b      	uxth	r3, r3
 8007862:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8007864:	8a7b      	ldrh	r3, [r7, #18]
 8007866:	3302      	adds	r3, #2
 8007868:	b29b      	uxth	r3, r3
 800786a:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800786c:	8afa      	ldrh	r2, [r7, #22]
 800786e:	8a7b      	ldrh	r3, [r7, #18]
 8007870:	4413      	add	r3, r2
 8007872:	b29b      	uxth	r3, r3
 8007874:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8007876:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800787a:	b29b      	uxth	r3, r3
 800787c:	3301      	adds	r3, #1
 800787e:	b29b      	uxth	r3, r3
 8007880:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8007882:	8abb      	ldrh	r3, [r7, #20]
 8007884:	3302      	adds	r3, #2
 8007886:	b29b      	uxth	r3, r3
 8007888:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800788a:	8afa      	ldrh	r2, [r7, #22]
 800788c:	8abb      	ldrh	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	b29b      	uxth	r3, r3
 8007892:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8007894:	787b      	ldrb	r3, [r7, #1]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d02b      	beq.n	80078f6 <LCD_FillCircleHelper+0xea>
			LCD_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 800789e:	88fa      	ldrh	r2, [r7, #6]
 80078a0:	8a3b      	ldrh	r3, [r7, #16]
 80078a2:	4413      	add	r3, r2
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	b218      	sxth	r0, r3
 80078a8:	88ba      	ldrh	r2, [r7, #4]
 80078aa:	89fb      	ldrh	r3, [r7, #14]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	b219      	sxth	r1, r3
 80078b2:	89fb      	ldrh	r3, [r7, #14]
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078ba:	4413      	add	r3, r2
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3301      	adds	r3, #1
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	b21a      	sxth	r2, r3
 80078c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80078c6:	f7ff fcbb 	bl	8007240 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	89fb      	ldrh	r3, [r7, #14]
 80078ce:	4413      	add	r3, r2
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	b218      	sxth	r0, r3
 80078d4:	88ba      	ldrh	r2, [r7, #4]
 80078d6:	8a3b      	ldrh	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	b219      	sxth	r1, r3
 80078de:	8a3b      	ldrh	r3, [r7, #16]
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078e6:	4413      	add	r3, r2
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3301      	adds	r3, #1
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	b21a      	sxth	r2, r3
 80078f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80078f2:	f7ff fca5 	bl	8007240 <LCD_DrawFastVLine>
		}
		if (cornername & 0x2) {
 80078f6:	787b      	ldrb	r3, [r7, #1]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d02b      	beq.n	8007958 <LCD_FillCircleHelper+0x14c>
			LCD_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8007900:	88fa      	ldrh	r2, [r7, #6]
 8007902:	8a3b      	ldrh	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	b29b      	uxth	r3, r3
 8007908:	b218      	sxth	r0, r3
 800790a:	88ba      	ldrh	r2, [r7, #4]
 800790c:	89fb      	ldrh	r3, [r7, #14]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	b29b      	uxth	r3, r3
 8007912:	b219      	sxth	r1, r3
 8007914:	89fb      	ldrh	r3, [r7, #14]
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	b29a      	uxth	r2, r3
 800791a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800791c:	4413      	add	r3, r2
 800791e:	b29b      	uxth	r3, r3
 8007920:	3301      	adds	r3, #1
 8007922:	b29b      	uxth	r3, r3
 8007924:	b21a      	sxth	r2, r3
 8007926:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007928:	f7ff fc8a 	bl	8007240 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 800792c:	88fa      	ldrh	r2, [r7, #6]
 800792e:	89fb      	ldrh	r3, [r7, #14]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	b29b      	uxth	r3, r3
 8007934:	b218      	sxth	r0, r3
 8007936:	88ba      	ldrh	r2, [r7, #4]
 8007938:	8a3b      	ldrh	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	b29b      	uxth	r3, r3
 800793e:	b219      	sxth	r1, r3
 8007940:	8a3b      	ldrh	r3, [r7, #16]
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	b29a      	uxth	r2, r3
 8007946:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007948:	4413      	add	r3, r2
 800794a:	b29b      	uxth	r3, r3
 800794c:	3301      	adds	r3, #1
 800794e:	b29b      	uxth	r3, r3
 8007950:	b21a      	sxth	r2, r3
 8007952:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007954:	f7ff fc74 	bl	8007240 <LCD_DrawFastVLine>
	while (x < y) {
 8007958:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800795c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007960:	429a      	cmp	r2, r3
 8007962:	f6ff af75 	blt.w	8007850 <LCD_FillCircleHelper+0x44>
		}
	}
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	bd90      	pop	{r4, r7, pc}

08007970 <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 8007970:	b590      	push	{r4, r7, lr}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	4604      	mov	r4, r0
 8007978:	4608      	mov	r0, r1
 800797a:	4611      	mov	r1, r2
 800797c:	461a      	mov	r2, r3
 800797e:	4623      	mov	r3, r4
 8007980:	80fb      	strh	r3, [r7, #6]
 8007982:	4603      	mov	r3, r0
 8007984:	80bb      	strh	r3, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	807b      	strh	r3, [r7, #2]
 800798a:	4613      	mov	r3, r2
 800798c:	803b      	strh	r3, [r7, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 800798e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f340 808b 	ble.w	8007aae <LCD_FillRect+0x13e>
 8007998:	f9b7 3000 	ldrsh.w	r3, [r7]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f340 8086 	ble.w	8007aae <LCD_FillRect+0x13e>
 80079a2:	4b45      	ldr	r3, [pc, #276]	; (8007ab8 <LCD_FillRect+0x148>)
 80079a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	da7e      	bge.n	8007aae <LCD_FillRect+0x13e>
 80079b0:	4b42      	ldr	r3, [pc, #264]	; (8007abc <LCD_FillRect+0x14c>)
 80079b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	da77      	bge.n	8007aae <LCD_FillRect+0x13e>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 80079be:	88fa      	ldrh	r2, [r7, #6]
 80079c0:	887b      	ldrh	r3, [r7, #2]
 80079c2:	4413      	add	r3, r2
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	81fb      	strh	r3, [r7, #14]
 80079cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	db6c      	blt.n	8007aae <LCD_FillRect+0x13e>
 80079d4:	88ba      	ldrh	r2, [r7, #4]
 80079d6:	883b      	ldrh	r3, [r7, #0]
 80079d8:	4413      	add	r3, r2
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29b      	uxth	r3, r3
 80079e0:	81bb      	strh	r3, [r7, #12]
 80079e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	db61      	blt.n	8007aae <LCD_FillRect+0x13e>
		return;
	if (x < 0) { // Clip left
 80079ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	da06      	bge.n	8007a00 <LCD_FillRect+0x90>
		w += x;
 80079f2:	887a      	ldrh	r2, [r7, #2]
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	4413      	add	r3, r2
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	807b      	strh	r3, [r7, #2]
		x = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	80fb      	strh	r3, [r7, #6]
	}
	if (y1 < 0) { // Clip top
 8007a00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da06      	bge.n	8007a16 <LCD_FillRect+0xa6>
		h += y1;
 8007a08:	883a      	ldrh	r2, [r7, #0]
 8007a0a:	88bb      	ldrh	r3, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	803b      	strh	r3, [r7, #0]
		y1 = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	80bb      	strh	r3, [r7, #4]
	}
	if (x2 >= m_width) { // Clip right
 8007a16:	4b28      	ldr	r3, [pc, #160]	; (8007ab8 <LCD_FillRect+0x148>)
 8007a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a1c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	db0d      	blt.n	8007a40 <LCD_FillRect+0xd0>
		x2 = m_width - 1;
 8007a24:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <LCD_FillRect+0x148>)
 8007a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	81fb      	strh	r3, [r7, #14]
		w = x2 - x + 1;
 8007a32:	89fa      	ldrh	r2, [r7, #14]
 8007a34:	88fb      	ldrh	r3, [r7, #6]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	807b      	strh	r3, [r7, #2]
	}
	if (y2 >= m_height) { // Clip bottom
 8007a40:	4b1e      	ldr	r3, [pc, #120]	; (8007abc <LCD_FillRect+0x14c>)
 8007a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a46:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	db0d      	blt.n	8007a6a <LCD_FillRect+0xfa>
		y2 = m_height - 1;
 8007a4e:	4b1b      	ldr	r3, [pc, #108]	; (8007abc <LCD_FillRect+0x14c>)
 8007a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	81bb      	strh	r3, [r7, #12]
		h = y2 - y1 + 1;
 8007a5c:	89ba      	ldrh	r2, [r7, #12]
 8007a5e:	88bb      	ldrh	r3, [r7, #4]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3301      	adds	r3, #1
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	803b      	strh	r3, [r7, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 8007a6a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007a6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007a72:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007a76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007a7a:	f000 fb29 	bl	80080d0 <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 8007a7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007a86:	fb03 f202 	mul.w	r2, r3, r2
 8007a8a:	8c3b      	ldrh	r3, [r7, #32]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 f87c 	bl	8007b8c <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8007a94:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <LCD_FillRect+0x148>)
 8007a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a9a:	1e5a      	subs	r2, r3, #1
 8007a9c:	4b07      	ldr	r3, [pc, #28]	; (8007abc <LCD_FillRect+0x14c>)
 8007a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f000 fb12 	bl	80080d0 <LCD_SetAddrWindow>
 8007aac:	e000      	b.n	8007ab0 <LCD_FillRect+0x140>
		return;
 8007aae:	bf00      	nop
}
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd90      	pop	{r4, r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	200004ec 	.word	0x200004ec
 8007abc:	200004ee 	.word	0x200004ee

08007ac0 <LCD_FillRoundRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8007ac0:	b590      	push	{r4, r7, lr}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	4608      	mov	r0, r1
 8007aca:	4611      	mov	r1, r2
 8007acc:	461a      	mov	r2, r3
 8007ace:	4623      	mov	r3, r4
 8007ad0:	80fb      	strh	r3, [r7, #6]
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	80bb      	strh	r3, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	807b      	strh	r3, [r7, #2]
 8007ada:	4613      	mov	r3, r2
 8007adc:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_FillRect(x + r, y, w - 2 * r, h, color);
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	8b3b      	ldrh	r3, [r7, #24]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	b218      	sxth	r0, r3
 8007ae8:	887a      	ldrh	r2, [r7, #2]
 8007aea:	8b3b      	ldrh	r3, [r7, #24]
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	b21a      	sxth	r2, r3
 8007af6:	f9b7 4000 	ldrsh.w	r4, [r7]
 8007afa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007afe:	8bbb      	ldrh	r3, [r7, #28]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	4623      	mov	r3, r4
 8007b04:	f7ff ff34 	bl	8007970 <LCD_FillRect>

	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8007b08:	88fa      	ldrh	r2, [r7, #6]
 8007b0a:	887b      	ldrh	r3, [r7, #2]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	8b3b      	ldrh	r3, [r7, #24]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	b218      	sxth	r0, r3
 8007b1c:	88ba      	ldrh	r2, [r7, #4]
 8007b1e:	8b3b      	ldrh	r3, [r7, #24]
 8007b20:	4413      	add	r3, r2
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	b219      	sxth	r1, r3
 8007b26:	883a      	ldrh	r2, [r7, #0]
 8007b28:	8b3b      	ldrh	r3, [r7, #24]
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	b21b      	sxth	r3, r3
 8007b38:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8007b3c:	8bba      	ldrh	r2, [r7, #28]
 8007b3e:	9201      	str	r2, [sp, #4]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	2301      	movs	r3, #1
 8007b44:	4622      	mov	r2, r4
 8007b46:	f7ff fe61 	bl	800780c <LCD_FillCircleHelper>
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8007b4a:	88fa      	ldrh	r2, [r7, #6]
 8007b4c:	8b3b      	ldrh	r3, [r7, #24]
 8007b4e:	4413      	add	r3, r2
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	b218      	sxth	r0, r3
 8007b54:	88ba      	ldrh	r2, [r7, #4]
 8007b56:	8b3b      	ldrh	r3, [r7, #24]
 8007b58:	4413      	add	r3, r2
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	b219      	sxth	r1, r3
 8007b5e:	883a      	ldrh	r2, [r7, #0]
 8007b60:	8b3b      	ldrh	r3, [r7, #24]
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	b21b      	sxth	r3, r3
 8007b70:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8007b74:	8bba      	ldrh	r2, [r7, #28]
 8007b76:	9201      	str	r2, [sp, #4]
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	f7ff fe45 	bl	800780c <LCD_FillCircleHelper>
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd90      	pop	{r4, r7, pc}
	...

08007b8c <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	0a1b      	lsrs	r3, r3, #8
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	733b      	strb	r3, [r7, #12]
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	72fb      	strb	r3, [r7, #11]

	LCD_CS_LOW();
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4895      	ldr	r0, [pc, #596]	; (8007e00 <LCD_Flood+0x274>)
 8007baa:	f7fd faf9 	bl	80051a0 <gpio_write>
	LCD_CD_LOW();
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2104      	movs	r1, #4
 8007bb2:	4894      	ldr	r0, [pc, #592]	; (8007e04 <LCD_Flood+0x278>)
 8007bb4:	f7fd faf4 	bl	80051a0 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f000 fb19 	bl	80081f0 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 8007bbe:	2022      	movs	r0, #34	; 0x22
 8007bc0:	f000 fb16 	bl	80081f0 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	2104      	movs	r1, #4
 8007bc8:	488e      	ldr	r0, [pc, #568]	; (8007e04 <LCD_Flood+0x278>)
 8007bca:	f7fd fae9 	bl	80051a0 <gpio_write>
	LCD_Write8(hi);
 8007bce:	7b3b      	ldrb	r3, [r7, #12]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 fb0d 	bl	80081f0 <LCD_Write8>
	LCD_Write8(lo);
 8007bd6:	7afb      	ldrb	r3, [r7, #11]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 fb09 	bl	80081f0 <LCD_Write8>
	len--;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	099b      	lsrs	r3, r3, #6
 8007be8:	81fb      	strh	r3, [r7, #14]
	if (hi == lo) {
 8007bea:	7b3a      	ldrb	r2, [r7, #12]
 8007bec:	7afb      	ldrb	r3, [r7, #11]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	f040 80e4 	bne.w	8007dbc <LCD_Flood+0x230>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8007bf4:	e088      	b.n	8007d08 <LCD_Flood+0x17c>
			i = 16; // 64 pixels/block / 4 pixels/pass
 8007bf6:	2310      	movs	r3, #16
 8007bf8:	737b      	strb	r3, [r7, #13]
			do {
				LCD_WR_STROBE();
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	4881      	ldr	r0, [pc, #516]	; (8007e04 <LCD_Flood+0x278>)
 8007c00:	f7fd face 	bl	80051a0 <gpio_write>
 8007c04:	2001      	movs	r0, #1
 8007c06:	f7ff f877 	bl	8006cf8 <delay>
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	487d      	ldr	r0, [pc, #500]	; (8007e04 <LCD_Flood+0x278>)
 8007c10:	f7fd fac6 	bl	80051a0 <gpio_write>
 8007c14:	2001      	movs	r0, #1
 8007c16:	f7ff f86f 	bl	8006cf8 <delay>
				LCD_WR_STROBE();
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	4879      	ldr	r0, [pc, #484]	; (8007e04 <LCD_Flood+0x278>)
 8007c20:	f7fd fabe 	bl	80051a0 <gpio_write>
 8007c24:	2001      	movs	r0, #1
 8007c26:	f7ff f867 	bl	8006cf8 <delay>
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	4875      	ldr	r0, [pc, #468]	; (8007e04 <LCD_Flood+0x278>)
 8007c30:	f7fd fab6 	bl	80051a0 <gpio_write>
 8007c34:	2001      	movs	r0, #1
 8007c36:	f7ff f85f 	bl	8006cf8 <delay>
				LCD_WR_STROBE();
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	4871      	ldr	r0, [pc, #452]	; (8007e04 <LCD_Flood+0x278>)
 8007c40:	f7fd faae 	bl	80051a0 <gpio_write>
 8007c44:	2001      	movs	r0, #1
 8007c46:	f7ff f857 	bl	8006cf8 <delay>
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	486d      	ldr	r0, [pc, #436]	; (8007e04 <LCD_Flood+0x278>)
 8007c50:	f7fd faa6 	bl	80051a0 <gpio_write>
 8007c54:	2001      	movs	r0, #1
 8007c56:	f7ff f84f 	bl	8006cf8 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	4869      	ldr	r0, [pc, #420]	; (8007e04 <LCD_Flood+0x278>)
 8007c60:	f7fd fa9e 	bl	80051a0 <gpio_write>
 8007c64:	2001      	movs	r0, #1
 8007c66:	f7ff f847 	bl	8006cf8 <delay>
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	4865      	ldr	r0, [pc, #404]	; (8007e04 <LCD_Flood+0x278>)
 8007c70:	f7fd fa96 	bl	80051a0 <gpio_write>
 8007c74:	2001      	movs	r0, #1
 8007c76:	f7ff f83f 	bl	8006cf8 <delay>
				LCD_WR_STROBE();
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	4861      	ldr	r0, [pc, #388]	; (8007e04 <LCD_Flood+0x278>)
 8007c80:	f7fd fa8e 	bl	80051a0 <gpio_write>
 8007c84:	2001      	movs	r0, #1
 8007c86:	f7ff f837 	bl	8006cf8 <delay>
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	485d      	ldr	r0, [pc, #372]	; (8007e04 <LCD_Flood+0x278>)
 8007c90:	f7fd fa86 	bl	80051a0 <gpio_write>
 8007c94:	2001      	movs	r0, #1
 8007c96:	f7ff f82f 	bl	8006cf8 <delay>
				LCD_WR_STROBE();
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	4859      	ldr	r0, [pc, #356]	; (8007e04 <LCD_Flood+0x278>)
 8007ca0:	f7fd fa7e 	bl	80051a0 <gpio_write>
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f7ff f827 	bl	8006cf8 <delay>
 8007caa:	2201      	movs	r2, #1
 8007cac:	2101      	movs	r1, #1
 8007cae:	4855      	ldr	r0, [pc, #340]	; (8007e04 <LCD_Flood+0x278>)
 8007cb0:	f7fd fa76 	bl	80051a0 <gpio_write>
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	f7ff f81f 	bl	8006cf8 <delay>
				LCD_WR_STROBE();
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	4851      	ldr	r0, [pc, #324]	; (8007e04 <LCD_Flood+0x278>)
 8007cc0:	f7fd fa6e 	bl	80051a0 <gpio_write>
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	f7ff f817 	bl	8006cf8 <delay>
 8007cca:	2201      	movs	r2, #1
 8007ccc:	2101      	movs	r1, #1
 8007cce:	484d      	ldr	r0, [pc, #308]	; (8007e04 <LCD_Flood+0x278>)
 8007cd0:	f7fd fa66 	bl	80051a0 <gpio_write>
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f7ff f80f 	bl	8006cf8 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2101      	movs	r1, #1
 8007cde:	4849      	ldr	r0, [pc, #292]	; (8007e04 <LCD_Flood+0x278>)
 8007ce0:	f7fd fa5e 	bl	80051a0 <gpio_write>
 8007ce4:	2001      	movs	r0, #1
 8007ce6:	f7ff f807 	bl	8006cf8 <delay>
 8007cea:	2201      	movs	r2, #1
 8007cec:	2101      	movs	r1, #1
 8007cee:	4845      	ldr	r0, [pc, #276]	; (8007e04 <LCD_Flood+0x278>)
 8007cf0:	f7fd fa56 	bl	80051a0 <gpio_write>
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	f7fe ffff 	bl	8006cf8 <delay>
			} while (--i);
 8007cfa:	7b7b      	ldrb	r3, [r7, #13]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	737b      	strb	r3, [r7, #13]
 8007d00:	7b7b      	ldrb	r3, [r7, #13]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f47f af79 	bne.w	8007bfa <LCD_Flood+0x6e>
		while (blocks--) {
 8007d08:	89fb      	ldrh	r3, [r7, #14]
 8007d0a:	1e5a      	subs	r2, r3, #1
 8007d0c:	81fa      	strh	r2, [r7, #14]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f47f af71 	bne.w	8007bf6 <LCD_Flood+0x6a>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d1c:	737b      	strb	r3, [r7, #13]
 8007d1e:	e01f      	b.n	8007d60 <LCD_Flood+0x1d4>
			LCD_WR_STROBE();
 8007d20:	2200      	movs	r2, #0
 8007d22:	2101      	movs	r1, #1
 8007d24:	4837      	ldr	r0, [pc, #220]	; (8007e04 <LCD_Flood+0x278>)
 8007d26:	f7fd fa3b 	bl	80051a0 <gpio_write>
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	f7fe ffe4 	bl	8006cf8 <delay>
 8007d30:	2201      	movs	r2, #1
 8007d32:	2101      	movs	r1, #1
 8007d34:	4833      	ldr	r0, [pc, #204]	; (8007e04 <LCD_Flood+0x278>)
 8007d36:	f7fd fa33 	bl	80051a0 <gpio_write>
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	f7fe ffdc 	bl	8006cf8 <delay>
			LCD_WR_STROBE();
 8007d40:	2200      	movs	r2, #0
 8007d42:	2101      	movs	r1, #1
 8007d44:	482f      	ldr	r0, [pc, #188]	; (8007e04 <LCD_Flood+0x278>)
 8007d46:	f7fd fa2b 	bl	80051a0 <gpio_write>
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	f7fe ffd4 	bl	8006cf8 <delay>
 8007d50:	2201      	movs	r2, #1
 8007d52:	2101      	movs	r1, #1
 8007d54:	482b      	ldr	r0, [pc, #172]	; (8007e04 <LCD_Flood+0x278>)
 8007d56:	f7fd fa23 	bl	80051a0 <gpio_write>
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	f7fe ffcc 	bl	8006cf8 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 8007d60:	7b7b      	ldrb	r3, [r7, #13]
 8007d62:	1e5a      	subs	r2, r3, #1
 8007d64:	737a      	strb	r2, [r7, #13]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1da      	bne.n	8007d20 <LCD_Flood+0x194>
 8007d6a:	e03f      	b.n	8007dec <LCD_Flood+0x260>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 8007d6c:	2310      	movs	r3, #16
 8007d6e:	737b      	strb	r3, [r7, #13]
			do {
				LCD_Write8(hi);
 8007d70:	7b3b      	ldrb	r3, [r7, #12]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fa3c 	bl	80081f0 <LCD_Write8>
				LCD_Write8(lo);
 8007d78:	7afb      	ldrb	r3, [r7, #11]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fa38 	bl	80081f0 <LCD_Write8>
				LCD_Write8(hi);
 8007d80:	7b3b      	ldrb	r3, [r7, #12]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fa34 	bl	80081f0 <LCD_Write8>
				LCD_Write8(lo);
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fa30 	bl	80081f0 <LCD_Write8>
				LCD_Write8(hi);
 8007d90:	7b3b      	ldrb	r3, [r7, #12]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fa2c 	bl	80081f0 <LCD_Write8>
				LCD_Write8(lo);
 8007d98:	7afb      	ldrb	r3, [r7, #11]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fa28 	bl	80081f0 <LCD_Write8>
				LCD_Write8(hi);
 8007da0:	7b3b      	ldrb	r3, [r7, #12]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fa24 	bl	80081f0 <LCD_Write8>
				LCD_Write8(lo);
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fa20 	bl	80081f0 <LCD_Write8>
			} while (--i);
 8007db0:	7b7b      	ldrb	r3, [r7, #13]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	737b      	strb	r3, [r7, #13]
 8007db6:	7b7b      	ldrb	r3, [r7, #13]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1d9      	bne.n	8007d70 <LCD_Flood+0x1e4>
		while (blocks--) {
 8007dbc:	89fb      	ldrh	r3, [r7, #14]
 8007dbe:	1e5a      	subs	r2, r3, #1
 8007dc0:	81fa      	strh	r2, [r7, #14]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1d2      	bne.n	8007d6c <LCD_Flood+0x1e0>
		}
		for (i = (uint8_t) len & 63; i--;) {
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dce:	737b      	strb	r3, [r7, #13]
 8007dd0:	e007      	b.n	8007de2 <LCD_Flood+0x256>
			LCD_Write8(hi);
 8007dd2:	7b3b      	ldrb	r3, [r7, #12]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fa0b 	bl	80081f0 <LCD_Write8>
			LCD_Write8(lo);
 8007dda:	7afb      	ldrb	r3, [r7, #11]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 fa07 	bl	80081f0 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 8007de2:	7b7b      	ldrb	r3, [r7, #13]
 8007de4:	1e5a      	subs	r2, r3, #1
 8007de6:	737a      	strb	r2, [r7, #13]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1f2      	bne.n	8007dd2 <LCD_Flood+0x246>
		}
	}
	LCD_CS_HIGH();
 8007dec:	2201      	movs	r2, #1
 8007dee:	2100      	movs	r1, #0
 8007df0:	4803      	ldr	r0, [pc, #12]	; (8007e00 <LCD_Flood+0x274>)
 8007df2:	f7fd f9d5 	bl	80051a0 <gpio_write>
}
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	40020400 	.word	0x40020400
 8007e04:	40020000 	.word	0x40020000

08007e08 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8007e08:	b40f      	push	{r0, r1, r2, r3}
 8007e0a:	b5b0      	push	{r4, r5, r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8007e10:	f107 031c 	add.w	r3, r7, #28
 8007e14:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	69b9      	ldr	r1, [r7, #24]
 8007e1a:	483d      	ldr	r0, [pc, #244]	; (8007f10 <LCD_Printf+0x108>)
 8007e1c:	f001 f8dc 	bl	8008fd8 <vsiprintf>
	va_end(lst);

	p = buf;
 8007e20:	4b3b      	ldr	r3, [pc, #236]	; (8007f10 <LCD_Printf+0x108>)
 8007e22:	607b      	str	r3, [r7, #4]
	while (*p) {
 8007e24:	e068      	b.n	8007ef8 <LCD_Printf+0xf0>
		if (*p == '\n') {
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b0a      	cmp	r3, #10
 8007e2c:	d111      	bne.n	8007e52 <LCD_Printf+0x4a>
			m_cursor_y += m_textsize * 8;
 8007e2e:	4b39      	ldr	r3, [pc, #228]	; (8007f14 <LCD_Printf+0x10c>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	4b37      	ldr	r3, [pc, #220]	; (8007f18 <LCD_Printf+0x110>)
 8007e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4413      	add	r3, r2
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	b21a      	sxth	r2, r3
 8007e46:	4b34      	ldr	r3, [pc, #208]	; (8007f18 <LCD_Printf+0x110>)
 8007e48:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8007e4a:	4b34      	ldr	r3, [pc, #208]	; (8007f1c <LCD_Printf+0x114>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	801a      	strh	r2, [r3, #0]
 8007e50:	e04f      	b.n	8007ef2 <LCD_Printf+0xea>
		} else if (*p == '\r') {
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	2b0d      	cmp	r3, #13
 8007e58:	d04b      	beq.n	8007ef2 <LCD_Printf+0xea>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8007e5a:	4b30      	ldr	r3, [pc, #192]	; (8007f1c <LCD_Printf+0x114>)
 8007e5c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007e60:	4b2d      	ldr	r3, [pc, #180]	; (8007f18 <LCD_Printf+0x110>)
 8007e62:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	781c      	ldrb	r4, [r3, #0]
 8007e6a:	4b2d      	ldr	r3, [pc, #180]	; (8007f20 <LCD_Printf+0x118>)
 8007e6c:	881d      	ldrh	r5, [r3, #0]
 8007e6e:	4b2d      	ldr	r3, [pc, #180]	; (8007f24 <LCD_Printf+0x11c>)
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <LCD_Printf+0x10c>)
 8007e74:	7812      	ldrb	r2, [r2, #0]
 8007e76:	9201      	str	r2, [sp, #4]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	462b      	mov	r3, r5
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	f7ff fbd3 	bl	8007628 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 8007e82:	4b24      	ldr	r3, [pc, #144]	; (8007f14 <LCD_Printf+0x10c>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	0052      	lsls	r2, r2, #1
 8007e8c:	4413      	add	r3, r2
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	4b22      	ldr	r3, [pc, #136]	; (8007f1c <LCD_Printf+0x114>)
 8007e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	4413      	add	r3, r2
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	b21a      	sxth	r2, r3
 8007ea0:	4b1e      	ldr	r3, [pc, #120]	; (8007f1c <LCD_Printf+0x114>)
 8007ea2:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 8007ea4:	4b20      	ldr	r3, [pc, #128]	; (8007f28 <LCD_Printf+0x120>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d022      	beq.n	8007ef2 <LCD_Printf+0xea>
 8007eac:	4b1b      	ldr	r3, [pc, #108]	; (8007f1c <LCD_Printf+0x114>)
 8007eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4b1d      	ldr	r3, [pc, #116]	; (8007f2c <LCD_Printf+0x124>)
 8007eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	4b15      	ldr	r3, [pc, #84]	; (8007f14 <LCD_Printf+0x10c>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	0092      	lsls	r2, r2, #2
 8007ec6:	1a9b      	subs	r3, r3, r2
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	4403      	add	r3, r0
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	dd10      	ble.n	8007ef2 <LCD_Printf+0xea>
				m_cursor_y += m_textsize * 8;
 8007ed0:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <LCD_Printf+0x10c>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	4b0f      	ldr	r3, [pc, #60]	; (8007f18 <LCD_Printf+0x110>)
 8007edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	4413      	add	r3, r2
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	b21a      	sxth	r2, r3
 8007ee8:	4b0b      	ldr	r3, [pc, #44]	; (8007f18 <LCD_Printf+0x110>)
 8007eea:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <LCD_Printf+0x114>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	607b      	str	r3, [r7, #4]
	while (*p) {
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d192      	bne.n	8007e26 <LCD_Printf+0x1e>
	}
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007f0c:	b004      	add	sp, #16
 8007f0e:	4770      	bx	lr
 8007f10:	200004fc 	.word	0x200004fc
 8007f14:	200004f8 	.word	0x200004f8
 8007f18:	200004f2 	.word	0x200004f2
 8007f1c:	200004f0 	.word	0x200004f0
 8007f20:	200004f4 	.word	0x200004f4
 8007f24:	200004f6 	.word	0x200004f6
 8007f28:	200004fa 	.word	0x200004fa
 8007f2c:	200004ec 	.word	0x200004ec

08007f30 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8007f36:	2201      	movs	r2, #1
 8007f38:	2100      	movs	r1, #0
 8007f3a:	4824      	ldr	r0, [pc, #144]	; (8007fcc <LCD_Reset+0x9c>)
 8007f3c:	f7fd f930 	bl	80051a0 <gpio_write>
	LCD_WR_HIGH();
 8007f40:	2201      	movs	r2, #1
 8007f42:	2101      	movs	r1, #1
 8007f44:	4822      	ldr	r0, [pc, #136]	; (8007fd0 <LCD_Reset+0xa0>)
 8007f46:	f7fd f92b 	bl	80051a0 <gpio_write>
	LCD_RD_HIGH();
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4820      	ldr	r0, [pc, #128]	; (8007fd0 <LCD_Reset+0xa0>)
 8007f50:	f7fd f926 	bl	80051a0 <gpio_write>

	LCD_RST_LOW();
 8007f54:	2200      	movs	r2, #0
 8007f56:	2101      	movs	r1, #1
 8007f58:	481e      	ldr	r0, [pc, #120]	; (8007fd4 <LCD_Reset+0xa4>)
 8007f5a:	f7fd f921 	bl	80051a0 <gpio_write>
	delay(100);
 8007f5e:	2064      	movs	r0, #100	; 0x64
 8007f60:	f7fe feca 	bl	8006cf8 <delay>
	LCD_RST_HIGH();
 8007f64:	2201      	movs	r2, #1
 8007f66:	2101      	movs	r1, #1
 8007f68:	481a      	ldr	r0, [pc, #104]	; (8007fd4 <LCD_Reset+0xa4>)
 8007f6a:	f7fd f919 	bl	80051a0 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2100      	movs	r1, #0
 8007f72:	4816      	ldr	r0, [pc, #88]	; (8007fcc <LCD_Reset+0x9c>)
 8007f74:	f7fd f914 	bl	80051a0 <gpio_write>

	LCD_CD_LOW();
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2104      	movs	r1, #4
 8007f7c:	4814      	ldr	r0, [pc, #80]	; (8007fd0 <LCD_Reset+0xa0>)
 8007f7e:	f7fd f90f 	bl	80051a0 <gpio_write>
	LCD_Write8(0x00);
 8007f82:	2000      	movs	r0, #0
 8007f84:	f000 f934 	bl	80081f0 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	71fb      	strb	r3, [r7, #7]
 8007f8c:	e012      	b.n	8007fb4 <LCD_Reset+0x84>
		LCD_WR_STROBE(); // Three extra 0x00s
 8007f8e:	2200      	movs	r2, #0
 8007f90:	2101      	movs	r1, #1
 8007f92:	480f      	ldr	r0, [pc, #60]	; (8007fd0 <LCD_Reset+0xa0>)
 8007f94:	f7fd f904 	bl	80051a0 <gpio_write>
 8007f98:	2001      	movs	r0, #1
 8007f9a:	f7fe fead 	bl	8006cf8 <delay>
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	480b      	ldr	r0, [pc, #44]	; (8007fd0 <LCD_Reset+0xa0>)
 8007fa4:	f7fd f8fc 	bl	80051a0 <gpio_write>
 8007fa8:	2001      	movs	r0, #1
 8007faa:	f7fe fea5 	bl	8006cf8 <delay>
	for (uint8_t i = 0; i < 3; i++)
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	71fb      	strb	r3, [r7, #7]
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d9e9      	bls.n	8007f8e <LCD_Reset+0x5e>
	LCD_CS_HIGH();
 8007fba:	2201      	movs	r2, #1
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4803      	ldr	r0, [pc, #12]	; (8007fcc <LCD_Reset+0x9c>)
 8007fc0:	f7fd f8ee 	bl	80051a0 <gpio_write>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	40020400 	.word	0x40020400
 8007fd0:	40020000 	.word	0x40020000
 8007fd4:	40020800 	.word	0x40020800

08007fd8 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	b21a      	sxth	r2, r3
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <LCD_SetCursor+0x28>)
 8007fe8:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	b21a      	sxth	r2, r3
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <LCD_SetCursor+0x2c>)
 8007ff0:	801a      	strh	r2, [r3, #0]
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	200004f0 	.word	0x200004f0
 8008004:	200004f2 	.word	0x200004f2

08008008 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	71fb      	strb	r3, [r7, #7]
	m_textsize = (s > 0) ? s : 1;
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <LCD_SetTextSize+0x14>
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	e000      	b.n	800801e <LCD_SetTextSize+0x16>
 800801c:	2301      	movs	r3, #1
 800801e:	4a04      	ldr	r2, [pc, #16]	; (8008030 <LCD_SetTextSize+0x28>)
 8008020:	7013      	strb	r3, [r2, #0]
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	200004f8 	.word	0x200004f8

08008034 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	460a      	mov	r2, r1
 800803e:	80fb      	strh	r3, [r7, #6]
 8008040:	4613      	mov	r3, r2
 8008042:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8008044:	4a05      	ldr	r2, [pc, #20]	; (800805c <LCD_SetTextColor+0x28>)
 8008046:	88fb      	ldrh	r3, [r7, #6]
 8008048:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 800804a:	4a05      	ldr	r2, [pc, #20]	; (8008060 <LCD_SetTextColor+0x2c>)
 800804c:	88bb      	ldrh	r3, [r7, #4]
 800804e:	8013      	strh	r3, [r2, #0]
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	200004f4 	.word	0x200004f4
 8008060:	200004f6 	.word	0x200004f6

08008064 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	f003 0303 	and.w	r3, r3, #3
 8008074:	b2da      	uxtb	r2, r3
 8008076:	4b13      	ldr	r3, [pc, #76]	; (80080c4 <LCD_SetRotation+0x60>)
 8008078:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 800807a:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <LCD_SetRotation+0x60>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b03      	cmp	r3, #3
 8008080:	d81a      	bhi.n	80080b8 <LCD_SetRotation+0x54>
 8008082:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <LCD_SetRotation+0x24>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	08008099 	.word	0x08008099
 800808c:	080080a9 	.word	0x080080a9
 8008090:	08008099 	.word	0x08008099
 8008094:	080080a9 	.word	0x080080a9
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8008098:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <LCD_SetRotation+0x64>)
 800809a:	22f0      	movs	r2, #240	; 0xf0
 800809c:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 800809e:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <LCD_SetRotation+0x68>)
 80080a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80080a4:	801a      	strh	r2, [r3, #0]
		break;
 80080a6:	e007      	b.n	80080b8 <LCD_SetRotation+0x54>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 80080a8:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <LCD_SetRotation+0x64>)
 80080aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80080ae:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 80080b0:	4b06      	ldr	r3, [pc, #24]	; (80080cc <LCD_SetRotation+0x68>)
 80080b2:	22f0      	movs	r2, #240	; 0xf0
 80080b4:	801a      	strh	r2, [r3, #0]
		break;
 80080b6:	bf00      	nop
	}
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	200004f9 	.word	0x200004f9
 80080c8:	200004ec 	.word	0x200004ec
 80080cc:	200004ee 	.word	0x200004ee

080080d0 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 80080de:	2200      	movs	r2, #0
 80080e0:	2100      	movs	r1, #0
 80080e2:	4841      	ldr	r0, [pc, #260]	; (80081e8 <LCD_SetAddrWindow+0x118>)
 80080e4:	f7fd f85c 	bl	80051a0 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 80080e8:	4b40      	ldr	r3, [pc, #256]	; (80081ec <LCD_SetAddrWindow+0x11c>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d038      	beq.n	8008162 <LCD_SetAddrWindow+0x92>
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	dc03      	bgt.n	80080fc <LCD_SetAddrWindow+0x2c>
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d006      	beq.n	8008106 <LCD_SetAddrWindow+0x36>
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d017      	beq.n	800812c <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	61fb      	str	r3, [r7, #28]
		y = y1;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	61bb      	str	r3, [r7, #24]
		break;
 8008104:	e042      	b.n	800818c <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	617b      	str	r3, [r7, #20]
		y1 = x1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8008114:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8008120:	607b      	str	r3, [r7, #4]
		x = x2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	61fb      	str	r3, [r7, #28]
		y = y1;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	61bb      	str	r3, [r7, #24]
		break;
 800812a:	e02f      	b.n	800818c <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8008136:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800813e:	607b      	str	r3, [r7, #4]
		t = y1;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800814a:	3301      	adds	r3, #1
 800814c:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8008154:	3301      	adds	r3, #1
 8008156:	603b      	str	r3, [r7, #0]
		x = x2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	61fb      	str	r3, [r7, #28]
		y = y2;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	61bb      	str	r3, [r7, #24]
		break;
 8008160:	e014      	b.n	800818c <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	617b      	str	r3, [r7, #20]
		x1 = y1;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8008170:	3301      	adds	r3, #1
 8008172:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800817e:	3301      	adds	r3, #1
 8008180:	603b      	str	r3, [r7, #0]
		x = x1;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	61fb      	str	r3, [r7, #28]
		y = y2;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	61bb      	str	r3, [r7, #24]
		break;
 800818a:	bf00      	nop
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	b29b      	uxth	r3, r3
 8008190:	4619      	mov	r1, r3
 8008192:	2050      	movs	r0, #80	; 0x50
 8008194:	f000 f888 	bl	80082a8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	b29b      	uxth	r3, r3
 800819c:	4619      	mov	r1, r3
 800819e:	2051      	movs	r0, #81	; 0x51
 80081a0:	f000 f882 	bl	80082a8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	4619      	mov	r1, r3
 80081aa:	2052      	movs	r0, #82	; 0x52
 80081ac:	f000 f87c 	bl	80082a8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4619      	mov	r1, r3
 80081b6:	2053      	movs	r0, #83	; 0x53
 80081b8:	f000 f876 	bl	80082a8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	4619      	mov	r1, r3
 80081c2:	2020      	movs	r0, #32
 80081c4:	f000 f870 	bl	80082a8 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	4619      	mov	r1, r3
 80081ce:	2021      	movs	r0, #33	; 0x21
 80081d0:	f000 f86a 	bl	80082a8 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 80081d4:	2201      	movs	r2, #1
 80081d6:	2100      	movs	r1, #0
 80081d8:	4803      	ldr	r0, [pc, #12]	; (80081e8 <LCD_SetAddrWindow+0x118>)
 80081da:	f7fc ffe1 	bl	80051a0 <gpio_write>
}
 80081de:	bf00      	nop
 80081e0:	3720      	adds	r7, #32
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	40020400 	.word	0x40020400
 80081ec:	200004f9 	.word	0x200004f9

080081f0 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 80081fa:	4b28      	ldr	r3, [pc, #160]	; (800829c <LCD_Write8+0xac>)
 80081fc:	695a      	ldr	r2, [r3, #20]
 80081fe:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008202:	4013      	ands	r3, r2
 8008204:	79fa      	ldrb	r2, [r7, #7]
 8008206:	0252      	lsls	r2, r2, #9
 8008208:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800820c:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	021b      	lsls	r3, r3, #8
 8008212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008216:	431a      	orrs	r2, r3
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8008220:	491e      	ldr	r1, [pc, #120]	; (800829c <LCD_Write8+0xac>)
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8008222:	4313      	orrs	r3, r2
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8008224:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8008226:	4b1e      	ldr	r3, [pc, #120]	; (80082a0 <LCD_Write8+0xb0>)
 8008228:	695a      	ldr	r2, [r3, #20]
 800822a:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 800822e:	4013      	ands	r3, r2
 8008230:	79fa      	ldrb	r2, [r7, #7]
 8008232:	f002 0208 	and.w	r2, r2, #8
 8008236:	431a      	orrs	r2, r3
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	105b      	asrs	r3, r3, #1
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	431a      	orrs	r2, r3
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8008254:	4912      	ldr	r1, [pc, #72]	; (80082a0 <LCD_Write8+0xb0>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8008256:	4313      	orrs	r3, r2
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8008258:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 800825a:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <LCD_Write8+0xb4>)
 800825c:	695a      	ldr	r2, [r3, #20]
 800825e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8008262:	4013      	ands	r3, r2
 8008264:	79fa      	ldrb	r2, [r7, #7]
 8008266:	0192      	lsls	r2, r2, #6
 8008268:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800826c:	490d      	ldr	r1, [pc, #52]	; (80082a4 <LCD_Write8+0xb4>)
 800826e:	4313      	orrs	r3, r2
 8008270:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 8008272:	2200      	movs	r2, #0
 8008274:	2101      	movs	r1, #1
 8008276:	4809      	ldr	r0, [pc, #36]	; (800829c <LCD_Write8+0xac>)
 8008278:	f7fc ff92 	bl	80051a0 <gpio_write>
 800827c:	2001      	movs	r0, #1
 800827e:	f7fe fd3b 	bl	8006cf8 <delay>
 8008282:	2201      	movs	r2, #1
 8008284:	2101      	movs	r1, #1
 8008286:	4805      	ldr	r0, [pc, #20]	; (800829c <LCD_Write8+0xac>)
 8008288:	f7fc ff8a 	bl	80051a0 <gpio_write>
 800828c:	2001      	movs	r0, #1
 800828e:	f7fe fd33 	bl	8006cf8 <delay>
}
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	40020000 	.word	0x40020000
 80082a0:	40020400 	.word	0x40020400
 80082a4:	40020800 	.word	0x40020800

080082a8 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	460a      	mov	r2, r1
 80082b2:	80fb      	strh	r3, [r7, #6]
 80082b4:	4613      	mov	r3, r2
 80082b6:	80bb      	strh	r3, [r7, #4]
	uint8_t hi, lo;
	hi = (a) >> 8;
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	0a1b      	lsrs	r3, r3, #8
 80082bc:	b29b      	uxth	r3, r3
 80082be:	73fb      	strb	r3, [r7, #15]
	lo = (a);
 80082c0:	88fb      	ldrh	r3, [r7, #6]
 80082c2:	73bb      	strb	r3, [r7, #14]
	LCD_CD_LOW();
 80082c4:	2200      	movs	r2, #0
 80082c6:	2104      	movs	r1, #4
 80082c8:	4810      	ldr	r0, [pc, #64]	; (800830c <LCD_WriteRegister16+0x64>)
 80082ca:	f7fc ff69 	bl	80051a0 <gpio_write>
	LCD_Write8(hi);
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff ff8d 	bl	80081f0 <LCD_Write8>
	LCD_Write8(lo);
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff ff89 	bl	80081f0 <LCD_Write8>
	hi = (d) >> 8;
 80082de:	88bb      	ldrh	r3, [r7, #4]
 80082e0:	0a1b      	lsrs	r3, r3, #8
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	73fb      	strb	r3, [r7, #15]
	lo = (d);
 80082e6:	88bb      	ldrh	r3, [r7, #4]
 80082e8:	73bb      	strb	r3, [r7, #14]
	LCD_CD_HIGH();
 80082ea:	2201      	movs	r2, #1
 80082ec:	2104      	movs	r1, #4
 80082ee:	4807      	ldr	r0, [pc, #28]	; (800830c <LCD_WriteRegister16+0x64>)
 80082f0:	f7fc ff56 	bl	80051a0 <gpio_write>
	LCD_Write8(hi);
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff ff7a 	bl	80081f0 <LCD_Write8>
	LCD_Write8(lo);
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff ff76 	bl	80081f0 <LCD_Write8>
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40020000 	.word	0x40020000

08008310 <temp2color>:
void printstr(uint8_t *str) {
	while (*str)
		write(*str++);
}

uint16_t temp2color(int degree, int lo, int hi) {
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af02      	add	r7, sp, #8
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
	uint8_t r, g, b;
	r = map(degree, lo, hi, 255, 0);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	b298      	uxth	r0, r3
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	b299      	uxth	r1, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	b29a      	uxth	r2, r3
 8008328:	2300      	movs	r3, #0
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	23ff      	movs	r3, #255	; 0xff
 800832e:	f7fc fded 	bl	8004f0c <map>
 8008332:	4603      	mov	r3, r0
 8008334:	75fb      	strb	r3, [r7, #23]
	g = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	75bb      	strb	r3, [r7, #22]
	b = map(degree, lo, hi, 0, 255);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	b298      	uxth	r0, r3
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	b299      	uxth	r1, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	b29a      	uxth	r2, r3
 8008346:	23ff      	movs	r3, #255	; 0xff
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	2300      	movs	r3, #0
 800834c:	f7fc fdde 	bl	8004f0c <map>
 8008350:	4603      	mov	r3, r0
 8008352:	757b      	strb	r3, [r7, #21]
	return LCD_Color565(r, g, b);
 8008354:	7d7a      	ldrb	r2, [r7, #21]
 8008356:	7db9      	ldrb	r1, [r7, #22]
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fdca 	bl	8006ef4 <LCD_Color565>
 8008360:	4603      	mov	r3, r0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <colorgradient>:

void colorgradient(int x, int y, int w, int h, int percent) {
 800836a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800836c:	b087      	sub	sp, #28
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
 8008376:	603b      	str	r3, [r7, #0]
//	LCD_DrawRect(x, y, w, h, BLACK);
	for (int row = 1; row < h - 1; row++) {
 8008378:	2301      	movs	r3, #1
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	e01e      	b.n	80083bc <colorgradient+0x52>
		LCD_DrawFastHLine(x + 1, y + row, w - 2, temp2color(row, 0, h));
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	b29b      	uxth	r3, r3
 8008382:	3301      	adds	r3, #1
 8008384:	b29b      	uxth	r3, r3
 8008386:	b21c      	sxth	r4, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	b29a      	uxth	r2, r3
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	b29b      	uxth	r3, r3
 8008390:	4413      	add	r3, r2
 8008392:	b29b      	uxth	r3, r3
 8008394:	b21d      	sxth	r5, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	b29b      	uxth	r3, r3
 800839a:	3b02      	subs	r3, #2
 800839c:	b29b      	uxth	r3, r3
 800839e:	b21e      	sxth	r6, r3
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	2100      	movs	r1, #0
 80083a4:	6978      	ldr	r0, [r7, #20]
 80083a6:	f7ff ffb3 	bl	8008310 <temp2color>
 80083aa:	4603      	mov	r3, r0
 80083ac:	4632      	mov	r2, r6
 80083ae:	4629      	mov	r1, r5
 80083b0:	4620      	mov	r0, r4
 80083b2:	f7fe fecf 	bl	8007154 <LCD_DrawFastHLine>
	for (int row = 1; row < h - 1; row++) {
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	3301      	adds	r3, #1
 80083ba:	617b      	str	r3, [r7, #20]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	3b01      	subs	r3, #1
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	dbdb      	blt.n	800837e <colorgradient+0x14>
	}
}
 80083c6:	bf00      	nop
 80083c8:	bf00      	nop
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083d0 <__errno>:
 80083d0:	4b01      	ldr	r3, [pc, #4]	; (80083d8 <__errno+0x8>)
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20000064 	.word	0x20000064

080083dc <__libc_init_array>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4d0d      	ldr	r5, [pc, #52]	; (8008414 <__libc_init_array+0x38>)
 80083e0:	4c0d      	ldr	r4, [pc, #52]	; (8008418 <__libc_init_array+0x3c>)
 80083e2:	1b64      	subs	r4, r4, r5
 80083e4:	10a4      	asrs	r4, r4, #2
 80083e6:	2600      	movs	r6, #0
 80083e8:	42a6      	cmp	r6, r4
 80083ea:	d109      	bne.n	8008400 <__libc_init_array+0x24>
 80083ec:	4d0b      	ldr	r5, [pc, #44]	; (800841c <__libc_init_array+0x40>)
 80083ee:	4c0c      	ldr	r4, [pc, #48]	; (8008420 <__libc_init_array+0x44>)
 80083f0:	f003 fa3e 	bl	800b870 <_init>
 80083f4:	1b64      	subs	r4, r4, r5
 80083f6:	10a4      	asrs	r4, r4, #2
 80083f8:	2600      	movs	r6, #0
 80083fa:	42a6      	cmp	r6, r4
 80083fc:	d105      	bne.n	800840a <__libc_init_array+0x2e>
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	f855 3b04 	ldr.w	r3, [r5], #4
 8008404:	4798      	blx	r3
 8008406:	3601      	adds	r6, #1
 8008408:	e7ee      	b.n	80083e8 <__libc_init_array+0xc>
 800840a:	f855 3b04 	ldr.w	r3, [r5], #4
 800840e:	4798      	blx	r3
 8008410:	3601      	adds	r6, #1
 8008412:	e7f2      	b.n	80083fa <__libc_init_array+0x1e>
 8008414:	0800c2b4 	.word	0x0800c2b4
 8008418:	0800c2b4 	.word	0x0800c2b4
 800841c:	0800c2b4 	.word	0x0800c2b4
 8008420:	0800c2b8 	.word	0x0800c2b8

08008424 <malloc>:
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <malloc+0xc>)
 8008426:	4601      	mov	r1, r0
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	f000 b877 	b.w	800851c <_malloc_r>
 800842e:	bf00      	nop
 8008430:	20000064 	.word	0x20000064

08008434 <memset>:
 8008434:	4402      	add	r2, r0
 8008436:	4603      	mov	r3, r0
 8008438:	4293      	cmp	r3, r2
 800843a:	d100      	bne.n	800843e <memset+0xa>
 800843c:	4770      	bx	lr
 800843e:	f803 1b01 	strb.w	r1, [r3], #1
 8008442:	e7f9      	b.n	8008438 <memset+0x4>

08008444 <_free_r>:
 8008444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008446:	2900      	cmp	r1, #0
 8008448:	d044      	beq.n	80084d4 <_free_r+0x90>
 800844a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844e:	9001      	str	r0, [sp, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	f1a1 0404 	sub.w	r4, r1, #4
 8008456:	bfb8      	it	lt
 8008458:	18e4      	addlt	r4, r4, r3
 800845a:	f001 fc55 	bl	8009d08 <__malloc_lock>
 800845e:	4a1e      	ldr	r2, [pc, #120]	; (80084d8 <_free_r+0x94>)
 8008460:	9801      	ldr	r0, [sp, #4]
 8008462:	6813      	ldr	r3, [r2, #0]
 8008464:	b933      	cbnz	r3, 8008474 <_free_r+0x30>
 8008466:	6063      	str	r3, [r4, #4]
 8008468:	6014      	str	r4, [r2, #0]
 800846a:	b003      	add	sp, #12
 800846c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008470:	f001 bc50 	b.w	8009d14 <__malloc_unlock>
 8008474:	42a3      	cmp	r3, r4
 8008476:	d908      	bls.n	800848a <_free_r+0x46>
 8008478:	6825      	ldr	r5, [r4, #0]
 800847a:	1961      	adds	r1, r4, r5
 800847c:	428b      	cmp	r3, r1
 800847e:	bf01      	itttt	eq
 8008480:	6819      	ldreq	r1, [r3, #0]
 8008482:	685b      	ldreq	r3, [r3, #4]
 8008484:	1949      	addeq	r1, r1, r5
 8008486:	6021      	streq	r1, [r4, #0]
 8008488:	e7ed      	b.n	8008466 <_free_r+0x22>
 800848a:	461a      	mov	r2, r3
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	b10b      	cbz	r3, 8008494 <_free_r+0x50>
 8008490:	42a3      	cmp	r3, r4
 8008492:	d9fa      	bls.n	800848a <_free_r+0x46>
 8008494:	6811      	ldr	r1, [r2, #0]
 8008496:	1855      	adds	r5, r2, r1
 8008498:	42a5      	cmp	r5, r4
 800849a:	d10b      	bne.n	80084b4 <_free_r+0x70>
 800849c:	6824      	ldr	r4, [r4, #0]
 800849e:	4421      	add	r1, r4
 80084a0:	1854      	adds	r4, r2, r1
 80084a2:	42a3      	cmp	r3, r4
 80084a4:	6011      	str	r1, [r2, #0]
 80084a6:	d1e0      	bne.n	800846a <_free_r+0x26>
 80084a8:	681c      	ldr	r4, [r3, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	6053      	str	r3, [r2, #4]
 80084ae:	4421      	add	r1, r4
 80084b0:	6011      	str	r1, [r2, #0]
 80084b2:	e7da      	b.n	800846a <_free_r+0x26>
 80084b4:	d902      	bls.n	80084bc <_free_r+0x78>
 80084b6:	230c      	movs	r3, #12
 80084b8:	6003      	str	r3, [r0, #0]
 80084ba:	e7d6      	b.n	800846a <_free_r+0x26>
 80084bc:	6825      	ldr	r5, [r4, #0]
 80084be:	1961      	adds	r1, r4, r5
 80084c0:	428b      	cmp	r3, r1
 80084c2:	bf04      	itt	eq
 80084c4:	6819      	ldreq	r1, [r3, #0]
 80084c6:	685b      	ldreq	r3, [r3, #4]
 80084c8:	6063      	str	r3, [r4, #4]
 80084ca:	bf04      	itt	eq
 80084cc:	1949      	addeq	r1, r1, r5
 80084ce:	6021      	streq	r1, [r4, #0]
 80084d0:	6054      	str	r4, [r2, #4]
 80084d2:	e7ca      	b.n	800846a <_free_r+0x26>
 80084d4:	b003      	add	sp, #12
 80084d6:	bd30      	pop	{r4, r5, pc}
 80084d8:	200005fc 	.word	0x200005fc

080084dc <sbrk_aligned>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4e0e      	ldr	r6, [pc, #56]	; (8008518 <sbrk_aligned+0x3c>)
 80084e0:	460c      	mov	r4, r1
 80084e2:	6831      	ldr	r1, [r6, #0]
 80084e4:	4605      	mov	r5, r0
 80084e6:	b911      	cbnz	r1, 80084ee <sbrk_aligned+0x12>
 80084e8:	f000 fcf6 	bl	8008ed8 <_sbrk_r>
 80084ec:	6030      	str	r0, [r6, #0]
 80084ee:	4621      	mov	r1, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 fcf1 	bl	8008ed8 <_sbrk_r>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d00a      	beq.n	8008510 <sbrk_aligned+0x34>
 80084fa:	1cc4      	adds	r4, r0, #3
 80084fc:	f024 0403 	bic.w	r4, r4, #3
 8008500:	42a0      	cmp	r0, r4
 8008502:	d007      	beq.n	8008514 <sbrk_aligned+0x38>
 8008504:	1a21      	subs	r1, r4, r0
 8008506:	4628      	mov	r0, r5
 8008508:	f000 fce6 	bl	8008ed8 <_sbrk_r>
 800850c:	3001      	adds	r0, #1
 800850e:	d101      	bne.n	8008514 <sbrk_aligned+0x38>
 8008510:	f04f 34ff 	mov.w	r4, #4294967295
 8008514:	4620      	mov	r0, r4
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	20000600 	.word	0x20000600

0800851c <_malloc_r>:
 800851c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008520:	1ccd      	adds	r5, r1, #3
 8008522:	f025 0503 	bic.w	r5, r5, #3
 8008526:	3508      	adds	r5, #8
 8008528:	2d0c      	cmp	r5, #12
 800852a:	bf38      	it	cc
 800852c:	250c      	movcc	r5, #12
 800852e:	2d00      	cmp	r5, #0
 8008530:	4607      	mov	r7, r0
 8008532:	db01      	blt.n	8008538 <_malloc_r+0x1c>
 8008534:	42a9      	cmp	r1, r5
 8008536:	d905      	bls.n	8008544 <_malloc_r+0x28>
 8008538:	230c      	movs	r3, #12
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	2600      	movs	r6, #0
 800853e:	4630      	mov	r0, r6
 8008540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008544:	4e2e      	ldr	r6, [pc, #184]	; (8008600 <_malloc_r+0xe4>)
 8008546:	f001 fbdf 	bl	8009d08 <__malloc_lock>
 800854a:	6833      	ldr	r3, [r6, #0]
 800854c:	461c      	mov	r4, r3
 800854e:	bb34      	cbnz	r4, 800859e <_malloc_r+0x82>
 8008550:	4629      	mov	r1, r5
 8008552:	4638      	mov	r0, r7
 8008554:	f7ff ffc2 	bl	80084dc <sbrk_aligned>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	4604      	mov	r4, r0
 800855c:	d14d      	bne.n	80085fa <_malloc_r+0xde>
 800855e:	6834      	ldr	r4, [r6, #0]
 8008560:	4626      	mov	r6, r4
 8008562:	2e00      	cmp	r6, #0
 8008564:	d140      	bne.n	80085e8 <_malloc_r+0xcc>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	4631      	mov	r1, r6
 800856a:	4638      	mov	r0, r7
 800856c:	eb04 0803 	add.w	r8, r4, r3
 8008570:	f000 fcb2 	bl	8008ed8 <_sbrk_r>
 8008574:	4580      	cmp	r8, r0
 8008576:	d13a      	bne.n	80085ee <_malloc_r+0xd2>
 8008578:	6821      	ldr	r1, [r4, #0]
 800857a:	3503      	adds	r5, #3
 800857c:	1a6d      	subs	r5, r5, r1
 800857e:	f025 0503 	bic.w	r5, r5, #3
 8008582:	3508      	adds	r5, #8
 8008584:	2d0c      	cmp	r5, #12
 8008586:	bf38      	it	cc
 8008588:	250c      	movcc	r5, #12
 800858a:	4629      	mov	r1, r5
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff ffa5 	bl	80084dc <sbrk_aligned>
 8008592:	3001      	adds	r0, #1
 8008594:	d02b      	beq.n	80085ee <_malloc_r+0xd2>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	442b      	add	r3, r5
 800859a:	6023      	str	r3, [r4, #0]
 800859c:	e00e      	b.n	80085bc <_malloc_r+0xa0>
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	1b52      	subs	r2, r2, r5
 80085a2:	d41e      	bmi.n	80085e2 <_malloc_r+0xc6>
 80085a4:	2a0b      	cmp	r2, #11
 80085a6:	d916      	bls.n	80085d6 <_malloc_r+0xba>
 80085a8:	1961      	adds	r1, r4, r5
 80085aa:	42a3      	cmp	r3, r4
 80085ac:	6025      	str	r5, [r4, #0]
 80085ae:	bf18      	it	ne
 80085b0:	6059      	strne	r1, [r3, #4]
 80085b2:	6863      	ldr	r3, [r4, #4]
 80085b4:	bf08      	it	eq
 80085b6:	6031      	streq	r1, [r6, #0]
 80085b8:	5162      	str	r2, [r4, r5]
 80085ba:	604b      	str	r3, [r1, #4]
 80085bc:	4638      	mov	r0, r7
 80085be:	f104 060b 	add.w	r6, r4, #11
 80085c2:	f001 fba7 	bl	8009d14 <__malloc_unlock>
 80085c6:	f026 0607 	bic.w	r6, r6, #7
 80085ca:	1d23      	adds	r3, r4, #4
 80085cc:	1af2      	subs	r2, r6, r3
 80085ce:	d0b6      	beq.n	800853e <_malloc_r+0x22>
 80085d0:	1b9b      	subs	r3, r3, r6
 80085d2:	50a3      	str	r3, [r4, r2]
 80085d4:	e7b3      	b.n	800853e <_malloc_r+0x22>
 80085d6:	6862      	ldr	r2, [r4, #4]
 80085d8:	42a3      	cmp	r3, r4
 80085da:	bf0c      	ite	eq
 80085dc:	6032      	streq	r2, [r6, #0]
 80085de:	605a      	strne	r2, [r3, #4]
 80085e0:	e7ec      	b.n	80085bc <_malloc_r+0xa0>
 80085e2:	4623      	mov	r3, r4
 80085e4:	6864      	ldr	r4, [r4, #4]
 80085e6:	e7b2      	b.n	800854e <_malloc_r+0x32>
 80085e8:	4634      	mov	r4, r6
 80085ea:	6876      	ldr	r6, [r6, #4]
 80085ec:	e7b9      	b.n	8008562 <_malloc_r+0x46>
 80085ee:	230c      	movs	r3, #12
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	4638      	mov	r0, r7
 80085f4:	f001 fb8e 	bl	8009d14 <__malloc_unlock>
 80085f8:	e7a1      	b.n	800853e <_malloc_r+0x22>
 80085fa:	6025      	str	r5, [r4, #0]
 80085fc:	e7de      	b.n	80085bc <_malloc_r+0xa0>
 80085fe:	bf00      	nop
 8008600:	200005fc 	.word	0x200005fc

08008604 <__cvt>:
 8008604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008608:	ec55 4b10 	vmov	r4, r5, d0
 800860c:	2d00      	cmp	r5, #0
 800860e:	460e      	mov	r6, r1
 8008610:	4619      	mov	r1, r3
 8008612:	462b      	mov	r3, r5
 8008614:	bfbb      	ittet	lt
 8008616:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800861a:	461d      	movlt	r5, r3
 800861c:	2300      	movge	r3, #0
 800861e:	232d      	movlt	r3, #45	; 0x2d
 8008620:	700b      	strb	r3, [r1, #0]
 8008622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008624:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008628:	4691      	mov	r9, r2
 800862a:	f023 0820 	bic.w	r8, r3, #32
 800862e:	bfbc      	itt	lt
 8008630:	4622      	movlt	r2, r4
 8008632:	4614      	movlt	r4, r2
 8008634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008638:	d005      	beq.n	8008646 <__cvt+0x42>
 800863a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800863e:	d100      	bne.n	8008642 <__cvt+0x3e>
 8008640:	3601      	adds	r6, #1
 8008642:	2102      	movs	r1, #2
 8008644:	e000      	b.n	8008648 <__cvt+0x44>
 8008646:	2103      	movs	r1, #3
 8008648:	ab03      	add	r3, sp, #12
 800864a:	9301      	str	r3, [sp, #4]
 800864c:	ab02      	add	r3, sp, #8
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	ec45 4b10 	vmov	d0, r4, r5
 8008654:	4653      	mov	r3, sl
 8008656:	4632      	mov	r2, r6
 8008658:	f000 fd56 	bl	8009108 <_dtoa_r>
 800865c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008660:	4607      	mov	r7, r0
 8008662:	d102      	bne.n	800866a <__cvt+0x66>
 8008664:	f019 0f01 	tst.w	r9, #1
 8008668:	d022      	beq.n	80086b0 <__cvt+0xac>
 800866a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800866e:	eb07 0906 	add.w	r9, r7, r6
 8008672:	d110      	bne.n	8008696 <__cvt+0x92>
 8008674:	783b      	ldrb	r3, [r7, #0]
 8008676:	2b30      	cmp	r3, #48	; 0x30
 8008678:	d10a      	bne.n	8008690 <__cvt+0x8c>
 800867a:	2200      	movs	r2, #0
 800867c:	2300      	movs	r3, #0
 800867e:	4620      	mov	r0, r4
 8008680:	4629      	mov	r1, r5
 8008682:	f7f8 fa29 	bl	8000ad8 <__aeabi_dcmpeq>
 8008686:	b918      	cbnz	r0, 8008690 <__cvt+0x8c>
 8008688:	f1c6 0601 	rsb	r6, r6, #1
 800868c:	f8ca 6000 	str.w	r6, [sl]
 8008690:	f8da 3000 	ldr.w	r3, [sl]
 8008694:	4499      	add	r9, r3
 8008696:	2200      	movs	r2, #0
 8008698:	2300      	movs	r3, #0
 800869a:	4620      	mov	r0, r4
 800869c:	4629      	mov	r1, r5
 800869e:	f7f8 fa1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80086a2:	b108      	cbz	r0, 80086a8 <__cvt+0xa4>
 80086a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80086a8:	2230      	movs	r2, #48	; 0x30
 80086aa:	9b03      	ldr	r3, [sp, #12]
 80086ac:	454b      	cmp	r3, r9
 80086ae:	d307      	bcc.n	80086c0 <__cvt+0xbc>
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086b4:	1bdb      	subs	r3, r3, r7
 80086b6:	4638      	mov	r0, r7
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	b004      	add	sp, #16
 80086bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c0:	1c59      	adds	r1, r3, #1
 80086c2:	9103      	str	r1, [sp, #12]
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	e7f0      	b.n	80086aa <__cvt+0xa6>

080086c8 <__exponent>:
 80086c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086ca:	4603      	mov	r3, r0
 80086cc:	2900      	cmp	r1, #0
 80086ce:	bfb8      	it	lt
 80086d0:	4249      	neglt	r1, r1
 80086d2:	f803 2b02 	strb.w	r2, [r3], #2
 80086d6:	bfb4      	ite	lt
 80086d8:	222d      	movlt	r2, #45	; 0x2d
 80086da:	222b      	movge	r2, #43	; 0x2b
 80086dc:	2909      	cmp	r1, #9
 80086de:	7042      	strb	r2, [r0, #1]
 80086e0:	dd2a      	ble.n	8008738 <__exponent+0x70>
 80086e2:	f10d 0407 	add.w	r4, sp, #7
 80086e6:	46a4      	mov	ip, r4
 80086e8:	270a      	movs	r7, #10
 80086ea:	46a6      	mov	lr, r4
 80086ec:	460a      	mov	r2, r1
 80086ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80086f2:	fb07 1516 	mls	r5, r7, r6, r1
 80086f6:	3530      	adds	r5, #48	; 0x30
 80086f8:	2a63      	cmp	r2, #99	; 0x63
 80086fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80086fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008702:	4631      	mov	r1, r6
 8008704:	dcf1      	bgt.n	80086ea <__exponent+0x22>
 8008706:	3130      	adds	r1, #48	; 0x30
 8008708:	f1ae 0502 	sub.w	r5, lr, #2
 800870c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008710:	1c44      	adds	r4, r0, #1
 8008712:	4629      	mov	r1, r5
 8008714:	4561      	cmp	r1, ip
 8008716:	d30a      	bcc.n	800872e <__exponent+0x66>
 8008718:	f10d 0209 	add.w	r2, sp, #9
 800871c:	eba2 020e 	sub.w	r2, r2, lr
 8008720:	4565      	cmp	r5, ip
 8008722:	bf88      	it	hi
 8008724:	2200      	movhi	r2, #0
 8008726:	4413      	add	r3, r2
 8008728:	1a18      	subs	r0, r3, r0
 800872a:	b003      	add	sp, #12
 800872c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800872e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008732:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008736:	e7ed      	b.n	8008714 <__exponent+0x4c>
 8008738:	2330      	movs	r3, #48	; 0x30
 800873a:	3130      	adds	r1, #48	; 0x30
 800873c:	7083      	strb	r3, [r0, #2]
 800873e:	70c1      	strb	r1, [r0, #3]
 8008740:	1d03      	adds	r3, r0, #4
 8008742:	e7f1      	b.n	8008728 <__exponent+0x60>

08008744 <_printf_float>:
 8008744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	ed2d 8b02 	vpush	{d8}
 800874c:	b08d      	sub	sp, #52	; 0x34
 800874e:	460c      	mov	r4, r1
 8008750:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008754:	4616      	mov	r6, r2
 8008756:	461f      	mov	r7, r3
 8008758:	4605      	mov	r5, r0
 800875a:	f001 fac3 	bl	8009ce4 <_localeconv_r>
 800875e:	f8d0 a000 	ldr.w	sl, [r0]
 8008762:	4650      	mov	r0, sl
 8008764:	f7f7 fd3c 	bl	80001e0 <strlen>
 8008768:	2300      	movs	r3, #0
 800876a:	930a      	str	r3, [sp, #40]	; 0x28
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	9305      	str	r3, [sp, #20]
 8008770:	f8d8 3000 	ldr.w	r3, [r8]
 8008774:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008778:	3307      	adds	r3, #7
 800877a:	f023 0307 	bic.w	r3, r3, #7
 800877e:	f103 0208 	add.w	r2, r3, #8
 8008782:	f8c8 2000 	str.w	r2, [r8]
 8008786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800878e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008792:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008796:	9307      	str	r3, [sp, #28]
 8008798:	f8cd 8018 	str.w	r8, [sp, #24]
 800879c:	ee08 0a10 	vmov	s16, r0
 80087a0:	4b9f      	ldr	r3, [pc, #636]	; (8008a20 <_printf_float+0x2dc>)
 80087a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087a6:	f04f 32ff 	mov.w	r2, #4294967295
 80087aa:	f7f8 f9c7 	bl	8000b3c <__aeabi_dcmpun>
 80087ae:	bb88      	cbnz	r0, 8008814 <_printf_float+0xd0>
 80087b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087b4:	4b9a      	ldr	r3, [pc, #616]	; (8008a20 <_printf_float+0x2dc>)
 80087b6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ba:	f7f8 f9a1 	bl	8000b00 <__aeabi_dcmple>
 80087be:	bb48      	cbnz	r0, 8008814 <_printf_float+0xd0>
 80087c0:	2200      	movs	r2, #0
 80087c2:	2300      	movs	r3, #0
 80087c4:	4640      	mov	r0, r8
 80087c6:	4649      	mov	r1, r9
 80087c8:	f7f8 f990 	bl	8000aec <__aeabi_dcmplt>
 80087cc:	b110      	cbz	r0, 80087d4 <_printf_float+0x90>
 80087ce:	232d      	movs	r3, #45	; 0x2d
 80087d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d4:	4b93      	ldr	r3, [pc, #588]	; (8008a24 <_printf_float+0x2e0>)
 80087d6:	4894      	ldr	r0, [pc, #592]	; (8008a28 <_printf_float+0x2e4>)
 80087d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80087dc:	bf94      	ite	ls
 80087de:	4698      	movls	r8, r3
 80087e0:	4680      	movhi	r8, r0
 80087e2:	2303      	movs	r3, #3
 80087e4:	6123      	str	r3, [r4, #16]
 80087e6:	9b05      	ldr	r3, [sp, #20]
 80087e8:	f023 0204 	bic.w	r2, r3, #4
 80087ec:	6022      	str	r2, [r4, #0]
 80087ee:	f04f 0900 	mov.w	r9, #0
 80087f2:	9700      	str	r7, [sp, #0]
 80087f4:	4633      	mov	r3, r6
 80087f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80087f8:	4621      	mov	r1, r4
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f9d8 	bl	8008bb0 <_printf_common>
 8008800:	3001      	adds	r0, #1
 8008802:	f040 8090 	bne.w	8008926 <_printf_float+0x1e2>
 8008806:	f04f 30ff 	mov.w	r0, #4294967295
 800880a:	b00d      	add	sp, #52	; 0x34
 800880c:	ecbd 8b02 	vpop	{d8}
 8008810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008814:	4642      	mov	r2, r8
 8008816:	464b      	mov	r3, r9
 8008818:	4640      	mov	r0, r8
 800881a:	4649      	mov	r1, r9
 800881c:	f7f8 f98e 	bl	8000b3c <__aeabi_dcmpun>
 8008820:	b140      	cbz	r0, 8008834 <_printf_float+0xf0>
 8008822:	464b      	mov	r3, r9
 8008824:	2b00      	cmp	r3, #0
 8008826:	bfbc      	itt	lt
 8008828:	232d      	movlt	r3, #45	; 0x2d
 800882a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800882e:	487f      	ldr	r0, [pc, #508]	; (8008a2c <_printf_float+0x2e8>)
 8008830:	4b7f      	ldr	r3, [pc, #508]	; (8008a30 <_printf_float+0x2ec>)
 8008832:	e7d1      	b.n	80087d8 <_printf_float+0x94>
 8008834:	6863      	ldr	r3, [r4, #4]
 8008836:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800883a:	9206      	str	r2, [sp, #24]
 800883c:	1c5a      	adds	r2, r3, #1
 800883e:	d13f      	bne.n	80088c0 <_printf_float+0x17c>
 8008840:	2306      	movs	r3, #6
 8008842:	6063      	str	r3, [r4, #4]
 8008844:	9b05      	ldr	r3, [sp, #20]
 8008846:	6861      	ldr	r1, [r4, #4]
 8008848:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800884c:	2300      	movs	r3, #0
 800884e:	9303      	str	r3, [sp, #12]
 8008850:	ab0a      	add	r3, sp, #40	; 0x28
 8008852:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008856:	ab09      	add	r3, sp, #36	; 0x24
 8008858:	ec49 8b10 	vmov	d0, r8, r9
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	6022      	str	r2, [r4, #0]
 8008860:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008864:	4628      	mov	r0, r5
 8008866:	f7ff fecd 	bl	8008604 <__cvt>
 800886a:	9b06      	ldr	r3, [sp, #24]
 800886c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800886e:	2b47      	cmp	r3, #71	; 0x47
 8008870:	4680      	mov	r8, r0
 8008872:	d108      	bne.n	8008886 <_printf_float+0x142>
 8008874:	1cc8      	adds	r0, r1, #3
 8008876:	db02      	blt.n	800887e <_printf_float+0x13a>
 8008878:	6863      	ldr	r3, [r4, #4]
 800887a:	4299      	cmp	r1, r3
 800887c:	dd41      	ble.n	8008902 <_printf_float+0x1be>
 800887e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008882:	fa5f fb8b 	uxtb.w	fp, fp
 8008886:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800888a:	d820      	bhi.n	80088ce <_printf_float+0x18a>
 800888c:	3901      	subs	r1, #1
 800888e:	465a      	mov	r2, fp
 8008890:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008894:	9109      	str	r1, [sp, #36]	; 0x24
 8008896:	f7ff ff17 	bl	80086c8 <__exponent>
 800889a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800889c:	1813      	adds	r3, r2, r0
 800889e:	2a01      	cmp	r2, #1
 80088a0:	4681      	mov	r9, r0
 80088a2:	6123      	str	r3, [r4, #16]
 80088a4:	dc02      	bgt.n	80088ac <_printf_float+0x168>
 80088a6:	6822      	ldr	r2, [r4, #0]
 80088a8:	07d2      	lsls	r2, r2, #31
 80088aa:	d501      	bpl.n	80088b0 <_printf_float+0x16c>
 80088ac:	3301      	adds	r3, #1
 80088ae:	6123      	str	r3, [r4, #16]
 80088b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d09c      	beq.n	80087f2 <_printf_float+0xae>
 80088b8:	232d      	movs	r3, #45	; 0x2d
 80088ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088be:	e798      	b.n	80087f2 <_printf_float+0xae>
 80088c0:	9a06      	ldr	r2, [sp, #24]
 80088c2:	2a47      	cmp	r2, #71	; 0x47
 80088c4:	d1be      	bne.n	8008844 <_printf_float+0x100>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1bc      	bne.n	8008844 <_printf_float+0x100>
 80088ca:	2301      	movs	r3, #1
 80088cc:	e7b9      	b.n	8008842 <_printf_float+0xfe>
 80088ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088d2:	d118      	bne.n	8008906 <_printf_float+0x1c2>
 80088d4:	2900      	cmp	r1, #0
 80088d6:	6863      	ldr	r3, [r4, #4]
 80088d8:	dd0b      	ble.n	80088f2 <_printf_float+0x1ae>
 80088da:	6121      	str	r1, [r4, #16]
 80088dc:	b913      	cbnz	r3, 80088e4 <_printf_float+0x1a0>
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	07d0      	lsls	r0, r2, #31
 80088e2:	d502      	bpl.n	80088ea <_printf_float+0x1a6>
 80088e4:	3301      	adds	r3, #1
 80088e6:	440b      	add	r3, r1
 80088e8:	6123      	str	r3, [r4, #16]
 80088ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80088ec:	f04f 0900 	mov.w	r9, #0
 80088f0:	e7de      	b.n	80088b0 <_printf_float+0x16c>
 80088f2:	b913      	cbnz	r3, 80088fa <_printf_float+0x1b6>
 80088f4:	6822      	ldr	r2, [r4, #0]
 80088f6:	07d2      	lsls	r2, r2, #31
 80088f8:	d501      	bpl.n	80088fe <_printf_float+0x1ba>
 80088fa:	3302      	adds	r3, #2
 80088fc:	e7f4      	b.n	80088e8 <_printf_float+0x1a4>
 80088fe:	2301      	movs	r3, #1
 8008900:	e7f2      	b.n	80088e8 <_printf_float+0x1a4>
 8008902:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008908:	4299      	cmp	r1, r3
 800890a:	db05      	blt.n	8008918 <_printf_float+0x1d4>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	6121      	str	r1, [r4, #16]
 8008910:	07d8      	lsls	r0, r3, #31
 8008912:	d5ea      	bpl.n	80088ea <_printf_float+0x1a6>
 8008914:	1c4b      	adds	r3, r1, #1
 8008916:	e7e7      	b.n	80088e8 <_printf_float+0x1a4>
 8008918:	2900      	cmp	r1, #0
 800891a:	bfd4      	ite	le
 800891c:	f1c1 0202 	rsble	r2, r1, #2
 8008920:	2201      	movgt	r2, #1
 8008922:	4413      	add	r3, r2
 8008924:	e7e0      	b.n	80088e8 <_printf_float+0x1a4>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	055a      	lsls	r2, r3, #21
 800892a:	d407      	bmi.n	800893c <_printf_float+0x1f8>
 800892c:	6923      	ldr	r3, [r4, #16]
 800892e:	4642      	mov	r2, r8
 8008930:	4631      	mov	r1, r6
 8008932:	4628      	mov	r0, r5
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	d12c      	bne.n	8008994 <_printf_float+0x250>
 800893a:	e764      	b.n	8008806 <_printf_float+0xc2>
 800893c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008940:	f240 80e0 	bls.w	8008b04 <_printf_float+0x3c0>
 8008944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008948:	2200      	movs	r2, #0
 800894a:	2300      	movs	r3, #0
 800894c:	f7f8 f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008950:	2800      	cmp	r0, #0
 8008952:	d034      	beq.n	80089be <_printf_float+0x27a>
 8008954:	4a37      	ldr	r2, [pc, #220]	; (8008a34 <_printf_float+0x2f0>)
 8008956:	2301      	movs	r3, #1
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	f43f af51 	beq.w	8008806 <_printf_float+0xc2>
 8008964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008968:	429a      	cmp	r2, r3
 800896a:	db02      	blt.n	8008972 <_printf_float+0x22e>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	07d8      	lsls	r0, r3, #31
 8008970:	d510      	bpl.n	8008994 <_printf_float+0x250>
 8008972:	ee18 3a10 	vmov	r3, s16
 8008976:	4652      	mov	r2, sl
 8008978:	4631      	mov	r1, r6
 800897a:	4628      	mov	r0, r5
 800897c:	47b8      	blx	r7
 800897e:	3001      	adds	r0, #1
 8008980:	f43f af41 	beq.w	8008806 <_printf_float+0xc2>
 8008984:	f04f 0800 	mov.w	r8, #0
 8008988:	f104 091a 	add.w	r9, r4, #26
 800898c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898e:	3b01      	subs	r3, #1
 8008990:	4543      	cmp	r3, r8
 8008992:	dc09      	bgt.n	80089a8 <_printf_float+0x264>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	079b      	lsls	r3, r3, #30
 8008998:	f100 8105 	bmi.w	8008ba6 <_printf_float+0x462>
 800899c:	68e0      	ldr	r0, [r4, #12]
 800899e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a0:	4298      	cmp	r0, r3
 80089a2:	bfb8      	it	lt
 80089a4:	4618      	movlt	r0, r3
 80089a6:	e730      	b.n	800880a <_printf_float+0xc6>
 80089a8:	2301      	movs	r3, #1
 80089aa:	464a      	mov	r2, r9
 80089ac:	4631      	mov	r1, r6
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b8      	blx	r7
 80089b2:	3001      	adds	r0, #1
 80089b4:	f43f af27 	beq.w	8008806 <_printf_float+0xc2>
 80089b8:	f108 0801 	add.w	r8, r8, #1
 80089bc:	e7e6      	b.n	800898c <_printf_float+0x248>
 80089be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	dc39      	bgt.n	8008a38 <_printf_float+0x2f4>
 80089c4:	4a1b      	ldr	r2, [pc, #108]	; (8008a34 <_printf_float+0x2f0>)
 80089c6:	2301      	movs	r3, #1
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f af19 	beq.w	8008806 <_printf_float+0xc2>
 80089d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089d8:	4313      	orrs	r3, r2
 80089da:	d102      	bne.n	80089e2 <_printf_float+0x29e>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	07d9      	lsls	r1, r3, #31
 80089e0:	d5d8      	bpl.n	8008994 <_printf_float+0x250>
 80089e2:	ee18 3a10 	vmov	r3, s16
 80089e6:	4652      	mov	r2, sl
 80089e8:	4631      	mov	r1, r6
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	f43f af09 	beq.w	8008806 <_printf_float+0xc2>
 80089f4:	f04f 0900 	mov.w	r9, #0
 80089f8:	f104 0a1a 	add.w	sl, r4, #26
 80089fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089fe:	425b      	negs	r3, r3
 8008a00:	454b      	cmp	r3, r9
 8008a02:	dc01      	bgt.n	8008a08 <_printf_float+0x2c4>
 8008a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a06:	e792      	b.n	800892e <_printf_float+0x1ea>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	4652      	mov	r2, sl
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b8      	blx	r7
 8008a12:	3001      	adds	r0, #1
 8008a14:	f43f aef7 	beq.w	8008806 <_printf_float+0xc2>
 8008a18:	f109 0901 	add.w	r9, r9, #1
 8008a1c:	e7ee      	b.n	80089fc <_printf_float+0x2b8>
 8008a1e:	bf00      	nop
 8008a20:	7fefffff 	.word	0x7fefffff
 8008a24:	0800bed4 	.word	0x0800bed4
 8008a28:	0800bed8 	.word	0x0800bed8
 8008a2c:	0800bee0 	.word	0x0800bee0
 8008a30:	0800bedc 	.word	0x0800bedc
 8008a34:	0800bee4 	.word	0x0800bee4
 8008a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	bfa8      	it	ge
 8008a40:	461a      	movge	r2, r3
 8008a42:	2a00      	cmp	r2, #0
 8008a44:	4691      	mov	r9, r2
 8008a46:	dc37      	bgt.n	8008ab8 <_printf_float+0x374>
 8008a48:	f04f 0b00 	mov.w	fp, #0
 8008a4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a50:	f104 021a 	add.w	r2, r4, #26
 8008a54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a56:	9305      	str	r3, [sp, #20]
 8008a58:	eba3 0309 	sub.w	r3, r3, r9
 8008a5c:	455b      	cmp	r3, fp
 8008a5e:	dc33      	bgt.n	8008ac8 <_printf_float+0x384>
 8008a60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a64:	429a      	cmp	r2, r3
 8008a66:	db3b      	blt.n	8008ae0 <_printf_float+0x39c>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	07da      	lsls	r2, r3, #31
 8008a6c:	d438      	bmi.n	8008ae0 <_printf_float+0x39c>
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a70:	9a05      	ldr	r2, [sp, #20]
 8008a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a74:	1a9a      	subs	r2, r3, r2
 8008a76:	eba3 0901 	sub.w	r9, r3, r1
 8008a7a:	4591      	cmp	r9, r2
 8008a7c:	bfa8      	it	ge
 8008a7e:	4691      	movge	r9, r2
 8008a80:	f1b9 0f00 	cmp.w	r9, #0
 8008a84:	dc35      	bgt.n	8008af2 <_printf_float+0x3ae>
 8008a86:	f04f 0800 	mov.w	r8, #0
 8008a8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a8e:	f104 0a1a 	add.w	sl, r4, #26
 8008a92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a96:	1a9b      	subs	r3, r3, r2
 8008a98:	eba3 0309 	sub.w	r3, r3, r9
 8008a9c:	4543      	cmp	r3, r8
 8008a9e:	f77f af79 	ble.w	8008994 <_printf_float+0x250>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	47b8      	blx	r7
 8008aac:	3001      	adds	r0, #1
 8008aae:	f43f aeaa 	beq.w	8008806 <_printf_float+0xc2>
 8008ab2:	f108 0801 	add.w	r8, r8, #1
 8008ab6:	e7ec      	b.n	8008a92 <_printf_float+0x34e>
 8008ab8:	4613      	mov	r3, r2
 8008aba:	4631      	mov	r1, r6
 8008abc:	4642      	mov	r2, r8
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	d1c0      	bne.n	8008a48 <_printf_float+0x304>
 8008ac6:	e69e      	b.n	8008806 <_printf_float+0xc2>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4631      	mov	r1, r6
 8008acc:	4628      	mov	r0, r5
 8008ace:	9205      	str	r2, [sp, #20]
 8008ad0:	47b8      	blx	r7
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	f43f ae97 	beq.w	8008806 <_printf_float+0xc2>
 8008ad8:	9a05      	ldr	r2, [sp, #20]
 8008ada:	f10b 0b01 	add.w	fp, fp, #1
 8008ade:	e7b9      	b.n	8008a54 <_printf_float+0x310>
 8008ae0:	ee18 3a10 	vmov	r3, s16
 8008ae4:	4652      	mov	r2, sl
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4628      	mov	r0, r5
 8008aea:	47b8      	blx	r7
 8008aec:	3001      	adds	r0, #1
 8008aee:	d1be      	bne.n	8008a6e <_printf_float+0x32a>
 8008af0:	e689      	b.n	8008806 <_printf_float+0xc2>
 8008af2:	9a05      	ldr	r2, [sp, #20]
 8008af4:	464b      	mov	r3, r9
 8008af6:	4442      	add	r2, r8
 8008af8:	4631      	mov	r1, r6
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	d1c1      	bne.n	8008a86 <_printf_float+0x342>
 8008b02:	e680      	b.n	8008806 <_printf_float+0xc2>
 8008b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b06:	2a01      	cmp	r2, #1
 8008b08:	dc01      	bgt.n	8008b0e <_printf_float+0x3ca>
 8008b0a:	07db      	lsls	r3, r3, #31
 8008b0c:	d538      	bpl.n	8008b80 <_printf_float+0x43c>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4642      	mov	r2, r8
 8008b12:	4631      	mov	r1, r6
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b8      	blx	r7
 8008b18:	3001      	adds	r0, #1
 8008b1a:	f43f ae74 	beq.w	8008806 <_printf_float+0xc2>
 8008b1e:	ee18 3a10 	vmov	r3, s16
 8008b22:	4652      	mov	r2, sl
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f ae6b 	beq.w	8008806 <_printf_float+0xc2>
 8008b30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b34:	2200      	movs	r2, #0
 8008b36:	2300      	movs	r3, #0
 8008b38:	f7f7 ffce 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b3c:	b9d8      	cbnz	r0, 8008b76 <_printf_float+0x432>
 8008b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b40:	f108 0201 	add.w	r2, r8, #1
 8008b44:	3b01      	subs	r3, #1
 8008b46:	4631      	mov	r1, r6
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b8      	blx	r7
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d10e      	bne.n	8008b6e <_printf_float+0x42a>
 8008b50:	e659      	b.n	8008806 <_printf_float+0xc2>
 8008b52:	2301      	movs	r3, #1
 8008b54:	4652      	mov	r2, sl
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	f43f ae52 	beq.w	8008806 <_printf_float+0xc2>
 8008b62:	f108 0801 	add.w	r8, r8, #1
 8008b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	4543      	cmp	r3, r8
 8008b6c:	dcf1      	bgt.n	8008b52 <_printf_float+0x40e>
 8008b6e:	464b      	mov	r3, r9
 8008b70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b74:	e6dc      	b.n	8008930 <_printf_float+0x1ec>
 8008b76:	f04f 0800 	mov.w	r8, #0
 8008b7a:	f104 0a1a 	add.w	sl, r4, #26
 8008b7e:	e7f2      	b.n	8008b66 <_printf_float+0x422>
 8008b80:	2301      	movs	r3, #1
 8008b82:	4642      	mov	r2, r8
 8008b84:	e7df      	b.n	8008b46 <_printf_float+0x402>
 8008b86:	2301      	movs	r3, #1
 8008b88:	464a      	mov	r2, r9
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b8      	blx	r7
 8008b90:	3001      	adds	r0, #1
 8008b92:	f43f ae38 	beq.w	8008806 <_printf_float+0xc2>
 8008b96:	f108 0801 	add.w	r8, r8, #1
 8008b9a:	68e3      	ldr	r3, [r4, #12]
 8008b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b9e:	1a5b      	subs	r3, r3, r1
 8008ba0:	4543      	cmp	r3, r8
 8008ba2:	dcf0      	bgt.n	8008b86 <_printf_float+0x442>
 8008ba4:	e6fa      	b.n	800899c <_printf_float+0x258>
 8008ba6:	f04f 0800 	mov.w	r8, #0
 8008baa:	f104 0919 	add.w	r9, r4, #25
 8008bae:	e7f4      	b.n	8008b9a <_printf_float+0x456>

08008bb0 <_printf_common>:
 8008bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	4699      	mov	r9, r3
 8008bb8:	688a      	ldr	r2, [r1, #8]
 8008bba:	690b      	ldr	r3, [r1, #16]
 8008bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	bfb8      	it	lt
 8008bc4:	4613      	movlt	r3, r2
 8008bc6:	6033      	str	r3, [r6, #0]
 8008bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bcc:	4607      	mov	r7, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	b10a      	cbz	r2, 8008bd6 <_printf_common+0x26>
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	0699      	lsls	r1, r3, #26
 8008bda:	bf42      	ittt	mi
 8008bdc:	6833      	ldrmi	r3, [r6, #0]
 8008bde:	3302      	addmi	r3, #2
 8008be0:	6033      	strmi	r3, [r6, #0]
 8008be2:	6825      	ldr	r5, [r4, #0]
 8008be4:	f015 0506 	ands.w	r5, r5, #6
 8008be8:	d106      	bne.n	8008bf8 <_printf_common+0x48>
 8008bea:	f104 0a19 	add.w	sl, r4, #25
 8008bee:	68e3      	ldr	r3, [r4, #12]
 8008bf0:	6832      	ldr	r2, [r6, #0]
 8008bf2:	1a9b      	subs	r3, r3, r2
 8008bf4:	42ab      	cmp	r3, r5
 8008bf6:	dc26      	bgt.n	8008c46 <_printf_common+0x96>
 8008bf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bfc:	1e13      	subs	r3, r2, #0
 8008bfe:	6822      	ldr	r2, [r4, #0]
 8008c00:	bf18      	it	ne
 8008c02:	2301      	movne	r3, #1
 8008c04:	0692      	lsls	r2, r2, #26
 8008c06:	d42b      	bmi.n	8008c60 <_printf_common+0xb0>
 8008c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	4638      	mov	r0, r7
 8008c10:	47c0      	blx	r8
 8008c12:	3001      	adds	r0, #1
 8008c14:	d01e      	beq.n	8008c54 <_printf_common+0xa4>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	68e5      	ldr	r5, [r4, #12]
 8008c1a:	6832      	ldr	r2, [r6, #0]
 8008c1c:	f003 0306 	and.w	r3, r3, #6
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	bf08      	it	eq
 8008c24:	1aad      	subeq	r5, r5, r2
 8008c26:	68a3      	ldr	r3, [r4, #8]
 8008c28:	6922      	ldr	r2, [r4, #16]
 8008c2a:	bf0c      	ite	eq
 8008c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c30:	2500      	movne	r5, #0
 8008c32:	4293      	cmp	r3, r2
 8008c34:	bfc4      	itt	gt
 8008c36:	1a9b      	subgt	r3, r3, r2
 8008c38:	18ed      	addgt	r5, r5, r3
 8008c3a:	2600      	movs	r6, #0
 8008c3c:	341a      	adds	r4, #26
 8008c3e:	42b5      	cmp	r5, r6
 8008c40:	d11a      	bne.n	8008c78 <_printf_common+0xc8>
 8008c42:	2000      	movs	r0, #0
 8008c44:	e008      	b.n	8008c58 <_printf_common+0xa8>
 8008c46:	2301      	movs	r3, #1
 8008c48:	4652      	mov	r2, sl
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	47c0      	blx	r8
 8008c50:	3001      	adds	r0, #1
 8008c52:	d103      	bne.n	8008c5c <_printf_common+0xac>
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295
 8008c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5c:	3501      	adds	r5, #1
 8008c5e:	e7c6      	b.n	8008bee <_printf_common+0x3e>
 8008c60:	18e1      	adds	r1, r4, r3
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	2030      	movs	r0, #48	; 0x30
 8008c66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c6a:	4422      	add	r2, r4
 8008c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c74:	3302      	adds	r3, #2
 8008c76:	e7c7      	b.n	8008c08 <_printf_common+0x58>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	4649      	mov	r1, r9
 8008c7e:	4638      	mov	r0, r7
 8008c80:	47c0      	blx	r8
 8008c82:	3001      	adds	r0, #1
 8008c84:	d0e6      	beq.n	8008c54 <_printf_common+0xa4>
 8008c86:	3601      	adds	r6, #1
 8008c88:	e7d9      	b.n	8008c3e <_printf_common+0x8e>
	...

08008c8c <_printf_i>:
 8008c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c90:	7e0f      	ldrb	r7, [r1, #24]
 8008c92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c94:	2f78      	cmp	r7, #120	; 0x78
 8008c96:	4691      	mov	r9, r2
 8008c98:	4680      	mov	r8, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	469a      	mov	sl, r3
 8008c9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ca2:	d807      	bhi.n	8008cb4 <_printf_i+0x28>
 8008ca4:	2f62      	cmp	r7, #98	; 0x62
 8008ca6:	d80a      	bhi.n	8008cbe <_printf_i+0x32>
 8008ca8:	2f00      	cmp	r7, #0
 8008caa:	f000 80d8 	beq.w	8008e5e <_printf_i+0x1d2>
 8008cae:	2f58      	cmp	r7, #88	; 0x58
 8008cb0:	f000 80a3 	beq.w	8008dfa <_printf_i+0x16e>
 8008cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cbc:	e03a      	b.n	8008d34 <_printf_i+0xa8>
 8008cbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cc2:	2b15      	cmp	r3, #21
 8008cc4:	d8f6      	bhi.n	8008cb4 <_printf_i+0x28>
 8008cc6:	a101      	add	r1, pc, #4	; (adr r1, 8008ccc <_printf_i+0x40>)
 8008cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ccc:	08008d25 	.word	0x08008d25
 8008cd0:	08008d39 	.word	0x08008d39
 8008cd4:	08008cb5 	.word	0x08008cb5
 8008cd8:	08008cb5 	.word	0x08008cb5
 8008cdc:	08008cb5 	.word	0x08008cb5
 8008ce0:	08008cb5 	.word	0x08008cb5
 8008ce4:	08008d39 	.word	0x08008d39
 8008ce8:	08008cb5 	.word	0x08008cb5
 8008cec:	08008cb5 	.word	0x08008cb5
 8008cf0:	08008cb5 	.word	0x08008cb5
 8008cf4:	08008cb5 	.word	0x08008cb5
 8008cf8:	08008e45 	.word	0x08008e45
 8008cfc:	08008d69 	.word	0x08008d69
 8008d00:	08008e27 	.word	0x08008e27
 8008d04:	08008cb5 	.word	0x08008cb5
 8008d08:	08008cb5 	.word	0x08008cb5
 8008d0c:	08008e67 	.word	0x08008e67
 8008d10:	08008cb5 	.word	0x08008cb5
 8008d14:	08008d69 	.word	0x08008d69
 8008d18:	08008cb5 	.word	0x08008cb5
 8008d1c:	08008cb5 	.word	0x08008cb5
 8008d20:	08008e2f 	.word	0x08008e2f
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	1d1a      	adds	r2, r3, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	602a      	str	r2, [r5, #0]
 8008d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d34:	2301      	movs	r3, #1
 8008d36:	e0a3      	b.n	8008e80 <_printf_i+0x1f4>
 8008d38:	6820      	ldr	r0, [r4, #0]
 8008d3a:	6829      	ldr	r1, [r5, #0]
 8008d3c:	0606      	lsls	r6, r0, #24
 8008d3e:	f101 0304 	add.w	r3, r1, #4
 8008d42:	d50a      	bpl.n	8008d5a <_printf_i+0xce>
 8008d44:	680e      	ldr	r6, [r1, #0]
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	2e00      	cmp	r6, #0
 8008d4a:	da03      	bge.n	8008d54 <_printf_i+0xc8>
 8008d4c:	232d      	movs	r3, #45	; 0x2d
 8008d4e:	4276      	negs	r6, r6
 8008d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d54:	485e      	ldr	r0, [pc, #376]	; (8008ed0 <_printf_i+0x244>)
 8008d56:	230a      	movs	r3, #10
 8008d58:	e019      	b.n	8008d8e <_printf_i+0x102>
 8008d5a:	680e      	ldr	r6, [r1, #0]
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d62:	bf18      	it	ne
 8008d64:	b236      	sxthne	r6, r6
 8008d66:	e7ef      	b.n	8008d48 <_printf_i+0xbc>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	6820      	ldr	r0, [r4, #0]
 8008d6c:	1d19      	adds	r1, r3, #4
 8008d6e:	6029      	str	r1, [r5, #0]
 8008d70:	0601      	lsls	r1, r0, #24
 8008d72:	d501      	bpl.n	8008d78 <_printf_i+0xec>
 8008d74:	681e      	ldr	r6, [r3, #0]
 8008d76:	e002      	b.n	8008d7e <_printf_i+0xf2>
 8008d78:	0646      	lsls	r6, r0, #25
 8008d7a:	d5fb      	bpl.n	8008d74 <_printf_i+0xe8>
 8008d7c:	881e      	ldrh	r6, [r3, #0]
 8008d7e:	4854      	ldr	r0, [pc, #336]	; (8008ed0 <_printf_i+0x244>)
 8008d80:	2f6f      	cmp	r7, #111	; 0x6f
 8008d82:	bf0c      	ite	eq
 8008d84:	2308      	moveq	r3, #8
 8008d86:	230a      	movne	r3, #10
 8008d88:	2100      	movs	r1, #0
 8008d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d8e:	6865      	ldr	r5, [r4, #4]
 8008d90:	60a5      	str	r5, [r4, #8]
 8008d92:	2d00      	cmp	r5, #0
 8008d94:	bfa2      	ittt	ge
 8008d96:	6821      	ldrge	r1, [r4, #0]
 8008d98:	f021 0104 	bicge.w	r1, r1, #4
 8008d9c:	6021      	strge	r1, [r4, #0]
 8008d9e:	b90e      	cbnz	r6, 8008da4 <_printf_i+0x118>
 8008da0:	2d00      	cmp	r5, #0
 8008da2:	d04d      	beq.n	8008e40 <_printf_i+0x1b4>
 8008da4:	4615      	mov	r5, r2
 8008da6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008daa:	fb03 6711 	mls	r7, r3, r1, r6
 8008dae:	5dc7      	ldrb	r7, [r0, r7]
 8008db0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008db4:	4637      	mov	r7, r6
 8008db6:	42bb      	cmp	r3, r7
 8008db8:	460e      	mov	r6, r1
 8008dba:	d9f4      	bls.n	8008da6 <_printf_i+0x11a>
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d10b      	bne.n	8008dd8 <_printf_i+0x14c>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	07de      	lsls	r6, r3, #31
 8008dc4:	d508      	bpl.n	8008dd8 <_printf_i+0x14c>
 8008dc6:	6923      	ldr	r3, [r4, #16]
 8008dc8:	6861      	ldr	r1, [r4, #4]
 8008dca:	4299      	cmp	r1, r3
 8008dcc:	bfde      	ittt	le
 8008dce:	2330      	movle	r3, #48	; 0x30
 8008dd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dd8:	1b52      	subs	r2, r2, r5
 8008dda:	6122      	str	r2, [r4, #16]
 8008ddc:	f8cd a000 	str.w	sl, [sp]
 8008de0:	464b      	mov	r3, r9
 8008de2:	aa03      	add	r2, sp, #12
 8008de4:	4621      	mov	r1, r4
 8008de6:	4640      	mov	r0, r8
 8008de8:	f7ff fee2 	bl	8008bb0 <_printf_common>
 8008dec:	3001      	adds	r0, #1
 8008dee:	d14c      	bne.n	8008e8a <_printf_i+0x1fe>
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	b004      	add	sp, #16
 8008df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfa:	4835      	ldr	r0, [pc, #212]	; (8008ed0 <_printf_i+0x244>)
 8008dfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e00:	6829      	ldr	r1, [r5, #0]
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e08:	6029      	str	r1, [r5, #0]
 8008e0a:	061d      	lsls	r5, r3, #24
 8008e0c:	d514      	bpl.n	8008e38 <_printf_i+0x1ac>
 8008e0e:	07df      	lsls	r7, r3, #31
 8008e10:	bf44      	itt	mi
 8008e12:	f043 0320 	orrmi.w	r3, r3, #32
 8008e16:	6023      	strmi	r3, [r4, #0]
 8008e18:	b91e      	cbnz	r6, 8008e22 <_printf_i+0x196>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	f023 0320 	bic.w	r3, r3, #32
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	2310      	movs	r3, #16
 8008e24:	e7b0      	b.n	8008d88 <_printf_i+0xfc>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	f043 0320 	orr.w	r3, r3, #32
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	2378      	movs	r3, #120	; 0x78
 8008e30:	4828      	ldr	r0, [pc, #160]	; (8008ed4 <_printf_i+0x248>)
 8008e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e36:	e7e3      	b.n	8008e00 <_printf_i+0x174>
 8008e38:	0659      	lsls	r1, r3, #25
 8008e3a:	bf48      	it	mi
 8008e3c:	b2b6      	uxthmi	r6, r6
 8008e3e:	e7e6      	b.n	8008e0e <_printf_i+0x182>
 8008e40:	4615      	mov	r5, r2
 8008e42:	e7bb      	b.n	8008dbc <_printf_i+0x130>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	6826      	ldr	r6, [r4, #0]
 8008e48:	6961      	ldr	r1, [r4, #20]
 8008e4a:	1d18      	adds	r0, r3, #4
 8008e4c:	6028      	str	r0, [r5, #0]
 8008e4e:	0635      	lsls	r5, r6, #24
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	d501      	bpl.n	8008e58 <_printf_i+0x1cc>
 8008e54:	6019      	str	r1, [r3, #0]
 8008e56:	e002      	b.n	8008e5e <_printf_i+0x1d2>
 8008e58:	0670      	lsls	r0, r6, #25
 8008e5a:	d5fb      	bpl.n	8008e54 <_printf_i+0x1c8>
 8008e5c:	8019      	strh	r1, [r3, #0]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	4615      	mov	r5, r2
 8008e64:	e7ba      	b.n	8008ddc <_printf_i+0x150>
 8008e66:	682b      	ldr	r3, [r5, #0]
 8008e68:	1d1a      	adds	r2, r3, #4
 8008e6a:	602a      	str	r2, [r5, #0]
 8008e6c:	681d      	ldr	r5, [r3, #0]
 8008e6e:	6862      	ldr	r2, [r4, #4]
 8008e70:	2100      	movs	r1, #0
 8008e72:	4628      	mov	r0, r5
 8008e74:	f7f7 f9bc 	bl	80001f0 <memchr>
 8008e78:	b108      	cbz	r0, 8008e7e <_printf_i+0x1f2>
 8008e7a:	1b40      	subs	r0, r0, r5
 8008e7c:	6060      	str	r0, [r4, #4]
 8008e7e:	6863      	ldr	r3, [r4, #4]
 8008e80:	6123      	str	r3, [r4, #16]
 8008e82:	2300      	movs	r3, #0
 8008e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e88:	e7a8      	b.n	8008ddc <_printf_i+0x150>
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	462a      	mov	r2, r5
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4640      	mov	r0, r8
 8008e92:	47d0      	blx	sl
 8008e94:	3001      	adds	r0, #1
 8008e96:	d0ab      	beq.n	8008df0 <_printf_i+0x164>
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	079b      	lsls	r3, r3, #30
 8008e9c:	d413      	bmi.n	8008ec6 <_printf_i+0x23a>
 8008e9e:	68e0      	ldr	r0, [r4, #12]
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	4298      	cmp	r0, r3
 8008ea4:	bfb8      	it	lt
 8008ea6:	4618      	movlt	r0, r3
 8008ea8:	e7a4      	b.n	8008df4 <_printf_i+0x168>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	4632      	mov	r2, r6
 8008eae:	4649      	mov	r1, r9
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	47d0      	blx	sl
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d09b      	beq.n	8008df0 <_printf_i+0x164>
 8008eb8:	3501      	adds	r5, #1
 8008eba:	68e3      	ldr	r3, [r4, #12]
 8008ebc:	9903      	ldr	r1, [sp, #12]
 8008ebe:	1a5b      	subs	r3, r3, r1
 8008ec0:	42ab      	cmp	r3, r5
 8008ec2:	dcf2      	bgt.n	8008eaa <_printf_i+0x21e>
 8008ec4:	e7eb      	b.n	8008e9e <_printf_i+0x212>
 8008ec6:	2500      	movs	r5, #0
 8008ec8:	f104 0619 	add.w	r6, r4, #25
 8008ecc:	e7f5      	b.n	8008eba <_printf_i+0x22e>
 8008ece:	bf00      	nop
 8008ed0:	0800bee6 	.word	0x0800bee6
 8008ed4:	0800bef7 	.word	0x0800bef7

08008ed8 <_sbrk_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d06      	ldr	r5, [pc, #24]	; (8008ef4 <_sbrk_r+0x1c>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7f9 fa44 	bl	8002370 <_sbrk>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_sbrk_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_sbrk_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	20000604 	.word	0x20000604

08008ef8 <siprintf>:
 8008ef8:	b40e      	push	{r1, r2, r3}
 8008efa:	b500      	push	{lr}
 8008efc:	b09c      	sub	sp, #112	; 0x70
 8008efe:	ab1d      	add	r3, sp, #116	; 0x74
 8008f00:	9002      	str	r0, [sp, #8]
 8008f02:	9006      	str	r0, [sp, #24]
 8008f04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f08:	4809      	ldr	r0, [pc, #36]	; (8008f30 <siprintf+0x38>)
 8008f0a:	9107      	str	r1, [sp, #28]
 8008f0c:	9104      	str	r1, [sp, #16]
 8008f0e:	4909      	ldr	r1, [pc, #36]	; (8008f34 <siprintf+0x3c>)
 8008f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f14:	9105      	str	r1, [sp, #20]
 8008f16:	6800      	ldr	r0, [r0, #0]
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	a902      	add	r1, sp, #8
 8008f1c:	f001 faf6 	bl	800a50c <_svfiprintf_r>
 8008f20:	9b02      	ldr	r3, [sp, #8]
 8008f22:	2200      	movs	r2, #0
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	b01c      	add	sp, #112	; 0x70
 8008f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f2c:	b003      	add	sp, #12
 8008f2e:	4770      	bx	lr
 8008f30:	20000064 	.word	0x20000064
 8008f34:	ffff0208 	.word	0xffff0208

08008f38 <_vsniprintf_r>:
 8008f38:	b530      	push	{r4, r5, lr}
 8008f3a:	4614      	mov	r4, r2
 8008f3c:	2c00      	cmp	r4, #0
 8008f3e:	b09b      	sub	sp, #108	; 0x6c
 8008f40:	4605      	mov	r5, r0
 8008f42:	461a      	mov	r2, r3
 8008f44:	da05      	bge.n	8008f52 <_vsniprintf_r+0x1a>
 8008f46:	238b      	movs	r3, #139	; 0x8b
 8008f48:	6003      	str	r3, [r0, #0]
 8008f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4e:	b01b      	add	sp, #108	; 0x6c
 8008f50:	bd30      	pop	{r4, r5, pc}
 8008f52:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f56:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008f5a:	bf14      	ite	ne
 8008f5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f60:	4623      	moveq	r3, r4
 8008f62:	9302      	str	r3, [sp, #8]
 8008f64:	9305      	str	r3, [sp, #20]
 8008f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f6a:	9100      	str	r1, [sp, #0]
 8008f6c:	9104      	str	r1, [sp, #16]
 8008f6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008f72:	4669      	mov	r1, sp
 8008f74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f76:	f001 fac9 	bl	800a50c <_svfiprintf_r>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	bfbc      	itt	lt
 8008f7e:	238b      	movlt	r3, #139	; 0x8b
 8008f80:	602b      	strlt	r3, [r5, #0]
 8008f82:	2c00      	cmp	r4, #0
 8008f84:	d0e3      	beq.n	8008f4e <_vsniprintf_r+0x16>
 8008f86:	9b00      	ldr	r3, [sp, #0]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	701a      	strb	r2, [r3, #0]
 8008f8c:	e7df      	b.n	8008f4e <_vsniprintf_r+0x16>
	...

08008f90 <vsniprintf>:
 8008f90:	b507      	push	{r0, r1, r2, lr}
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	4613      	mov	r3, r2
 8008f96:	460a      	mov	r2, r1
 8008f98:	4601      	mov	r1, r0
 8008f9a:	4803      	ldr	r0, [pc, #12]	; (8008fa8 <vsniprintf+0x18>)
 8008f9c:	6800      	ldr	r0, [r0, #0]
 8008f9e:	f7ff ffcb 	bl	8008f38 <_vsniprintf_r>
 8008fa2:	b003      	add	sp, #12
 8008fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fa8:	20000064 	.word	0x20000064

08008fac <_vsiprintf_r>:
 8008fac:	b500      	push	{lr}
 8008fae:	b09b      	sub	sp, #108	; 0x6c
 8008fb0:	9100      	str	r1, [sp, #0]
 8008fb2:	9104      	str	r1, [sp, #16]
 8008fb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fb8:	9105      	str	r1, [sp, #20]
 8008fba:	9102      	str	r1, [sp, #8]
 8008fbc:	4905      	ldr	r1, [pc, #20]	; (8008fd4 <_vsiprintf_r+0x28>)
 8008fbe:	9103      	str	r1, [sp, #12]
 8008fc0:	4669      	mov	r1, sp
 8008fc2:	f001 faa3 	bl	800a50c <_svfiprintf_r>
 8008fc6:	9b00      	ldr	r3, [sp, #0]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
 8008fcc:	b01b      	add	sp, #108	; 0x6c
 8008fce:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fd2:	bf00      	nop
 8008fd4:	ffff0208 	.word	0xffff0208

08008fd8 <vsiprintf>:
 8008fd8:	4613      	mov	r3, r2
 8008fda:	460a      	mov	r2, r1
 8008fdc:	4601      	mov	r1, r0
 8008fde:	4802      	ldr	r0, [pc, #8]	; (8008fe8 <vsiprintf+0x10>)
 8008fe0:	6800      	ldr	r0, [r0, #0]
 8008fe2:	f7ff bfe3 	b.w	8008fac <_vsiprintf_r>
 8008fe6:	bf00      	nop
 8008fe8:	20000064 	.word	0x20000064

08008fec <quorem>:
 8008fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff0:	6903      	ldr	r3, [r0, #16]
 8008ff2:	690c      	ldr	r4, [r1, #16]
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	f2c0 8081 	blt.w	80090fe <quorem+0x112>
 8008ffc:	3c01      	subs	r4, #1
 8008ffe:	f101 0814 	add.w	r8, r1, #20
 8009002:	f100 0514 	add.w	r5, r0, #20
 8009006:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009014:	3301      	adds	r3, #1
 8009016:	429a      	cmp	r2, r3
 8009018:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800901c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009020:	fbb2 f6f3 	udiv	r6, r2, r3
 8009024:	d331      	bcc.n	800908a <quorem+0x9e>
 8009026:	f04f 0e00 	mov.w	lr, #0
 800902a:	4640      	mov	r0, r8
 800902c:	46ac      	mov	ip, r5
 800902e:	46f2      	mov	sl, lr
 8009030:	f850 2b04 	ldr.w	r2, [r0], #4
 8009034:	b293      	uxth	r3, r2
 8009036:	fb06 e303 	mla	r3, r6, r3, lr
 800903a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800903e:	b29b      	uxth	r3, r3
 8009040:	ebaa 0303 	sub.w	r3, sl, r3
 8009044:	f8dc a000 	ldr.w	sl, [ip]
 8009048:	0c12      	lsrs	r2, r2, #16
 800904a:	fa13 f38a 	uxtah	r3, r3, sl
 800904e:	fb06 e202 	mla	r2, r6, r2, lr
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	9b00      	ldr	r3, [sp, #0]
 8009056:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800905a:	b292      	uxth	r2, r2
 800905c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009060:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009064:	f8bd 3000 	ldrh.w	r3, [sp]
 8009068:	4581      	cmp	r9, r0
 800906a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800906e:	f84c 3b04 	str.w	r3, [ip], #4
 8009072:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009076:	d2db      	bcs.n	8009030 <quorem+0x44>
 8009078:	f855 300b 	ldr.w	r3, [r5, fp]
 800907c:	b92b      	cbnz	r3, 800908a <quorem+0x9e>
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	3b04      	subs	r3, #4
 8009082:	429d      	cmp	r5, r3
 8009084:	461a      	mov	r2, r3
 8009086:	d32e      	bcc.n	80090e6 <quorem+0xfa>
 8009088:	613c      	str	r4, [r7, #16]
 800908a:	4638      	mov	r0, r7
 800908c:	f001 f8ca 	bl	800a224 <__mcmp>
 8009090:	2800      	cmp	r0, #0
 8009092:	db24      	blt.n	80090de <quorem+0xf2>
 8009094:	3601      	adds	r6, #1
 8009096:	4628      	mov	r0, r5
 8009098:	f04f 0c00 	mov.w	ip, #0
 800909c:	f858 2b04 	ldr.w	r2, [r8], #4
 80090a0:	f8d0 e000 	ldr.w	lr, [r0]
 80090a4:	b293      	uxth	r3, r2
 80090a6:	ebac 0303 	sub.w	r3, ip, r3
 80090aa:	0c12      	lsrs	r2, r2, #16
 80090ac:	fa13 f38e 	uxtah	r3, r3, lr
 80090b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80090b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090be:	45c1      	cmp	r9, r8
 80090c0:	f840 3b04 	str.w	r3, [r0], #4
 80090c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80090c8:	d2e8      	bcs.n	800909c <quorem+0xb0>
 80090ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090d2:	b922      	cbnz	r2, 80090de <quorem+0xf2>
 80090d4:	3b04      	subs	r3, #4
 80090d6:	429d      	cmp	r5, r3
 80090d8:	461a      	mov	r2, r3
 80090da:	d30a      	bcc.n	80090f2 <quorem+0x106>
 80090dc:	613c      	str	r4, [r7, #16]
 80090de:	4630      	mov	r0, r6
 80090e0:	b003      	add	sp, #12
 80090e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e6:	6812      	ldr	r2, [r2, #0]
 80090e8:	3b04      	subs	r3, #4
 80090ea:	2a00      	cmp	r2, #0
 80090ec:	d1cc      	bne.n	8009088 <quorem+0x9c>
 80090ee:	3c01      	subs	r4, #1
 80090f0:	e7c7      	b.n	8009082 <quorem+0x96>
 80090f2:	6812      	ldr	r2, [r2, #0]
 80090f4:	3b04      	subs	r3, #4
 80090f6:	2a00      	cmp	r2, #0
 80090f8:	d1f0      	bne.n	80090dc <quorem+0xf0>
 80090fa:	3c01      	subs	r4, #1
 80090fc:	e7eb      	b.n	80090d6 <quorem+0xea>
 80090fe:	2000      	movs	r0, #0
 8009100:	e7ee      	b.n	80090e0 <quorem+0xf4>
 8009102:	0000      	movs	r0, r0
 8009104:	0000      	movs	r0, r0
	...

08009108 <_dtoa_r>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	ed2d 8b04 	vpush	{d8-d9}
 8009110:	ec57 6b10 	vmov	r6, r7, d0
 8009114:	b093      	sub	sp, #76	; 0x4c
 8009116:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009118:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800911c:	9106      	str	r1, [sp, #24]
 800911e:	ee10 aa10 	vmov	sl, s0
 8009122:	4604      	mov	r4, r0
 8009124:	9209      	str	r2, [sp, #36]	; 0x24
 8009126:	930c      	str	r3, [sp, #48]	; 0x30
 8009128:	46bb      	mov	fp, r7
 800912a:	b975      	cbnz	r5, 800914a <_dtoa_r+0x42>
 800912c:	2010      	movs	r0, #16
 800912e:	f7ff f979 	bl	8008424 <malloc>
 8009132:	4602      	mov	r2, r0
 8009134:	6260      	str	r0, [r4, #36]	; 0x24
 8009136:	b920      	cbnz	r0, 8009142 <_dtoa_r+0x3a>
 8009138:	4ba7      	ldr	r3, [pc, #668]	; (80093d8 <_dtoa_r+0x2d0>)
 800913a:	21ea      	movs	r1, #234	; 0xea
 800913c:	48a7      	ldr	r0, [pc, #668]	; (80093dc <_dtoa_r+0x2d4>)
 800913e:	f001 fae5 	bl	800a70c <__assert_func>
 8009142:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009146:	6005      	str	r5, [r0, #0]
 8009148:	60c5      	str	r5, [r0, #12]
 800914a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800914c:	6819      	ldr	r1, [r3, #0]
 800914e:	b151      	cbz	r1, 8009166 <_dtoa_r+0x5e>
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	604a      	str	r2, [r1, #4]
 8009154:	2301      	movs	r3, #1
 8009156:	4093      	lsls	r3, r2
 8009158:	608b      	str	r3, [r1, #8]
 800915a:	4620      	mov	r0, r4
 800915c:	f000 fe20 	bl	8009da0 <_Bfree>
 8009160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	1e3b      	subs	r3, r7, #0
 8009168:	bfaa      	itet	ge
 800916a:	2300      	movge	r3, #0
 800916c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009170:	f8c8 3000 	strge.w	r3, [r8]
 8009174:	4b9a      	ldr	r3, [pc, #616]	; (80093e0 <_dtoa_r+0x2d8>)
 8009176:	bfbc      	itt	lt
 8009178:	2201      	movlt	r2, #1
 800917a:	f8c8 2000 	strlt.w	r2, [r8]
 800917e:	ea33 030b 	bics.w	r3, r3, fp
 8009182:	d11b      	bne.n	80091bc <_dtoa_r+0xb4>
 8009184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009186:	f242 730f 	movw	r3, #9999	; 0x270f
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009190:	4333      	orrs	r3, r6
 8009192:	f000 8592 	beq.w	8009cba <_dtoa_r+0xbb2>
 8009196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009198:	b963      	cbnz	r3, 80091b4 <_dtoa_r+0xac>
 800919a:	4b92      	ldr	r3, [pc, #584]	; (80093e4 <_dtoa_r+0x2dc>)
 800919c:	e022      	b.n	80091e4 <_dtoa_r+0xdc>
 800919e:	4b92      	ldr	r3, [pc, #584]	; (80093e8 <_dtoa_r+0x2e0>)
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	3308      	adds	r3, #8
 80091a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	9801      	ldr	r0, [sp, #4]
 80091aa:	b013      	add	sp, #76	; 0x4c
 80091ac:	ecbd 8b04 	vpop	{d8-d9}
 80091b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b4:	4b8b      	ldr	r3, [pc, #556]	; (80093e4 <_dtoa_r+0x2dc>)
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	3303      	adds	r3, #3
 80091ba:	e7f3      	b.n	80091a4 <_dtoa_r+0x9c>
 80091bc:	2200      	movs	r2, #0
 80091be:	2300      	movs	r3, #0
 80091c0:	4650      	mov	r0, sl
 80091c2:	4659      	mov	r1, fp
 80091c4:	f7f7 fc88 	bl	8000ad8 <__aeabi_dcmpeq>
 80091c8:	ec4b ab19 	vmov	d9, sl, fp
 80091cc:	4680      	mov	r8, r0
 80091ce:	b158      	cbz	r0, 80091e8 <_dtoa_r+0xe0>
 80091d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091d2:	2301      	movs	r3, #1
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 856b 	beq.w	8009cb4 <_dtoa_r+0xbac>
 80091de:	4883      	ldr	r0, [pc, #524]	; (80093ec <_dtoa_r+0x2e4>)
 80091e0:	6018      	str	r0, [r3, #0]
 80091e2:	1e43      	subs	r3, r0, #1
 80091e4:	9301      	str	r3, [sp, #4]
 80091e6:	e7df      	b.n	80091a8 <_dtoa_r+0xa0>
 80091e8:	ec4b ab10 	vmov	d0, sl, fp
 80091ec:	aa10      	add	r2, sp, #64	; 0x40
 80091ee:	a911      	add	r1, sp, #68	; 0x44
 80091f0:	4620      	mov	r0, r4
 80091f2:	f001 f8bd 	bl	800a370 <__d2b>
 80091f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80091fa:	ee08 0a10 	vmov	s16, r0
 80091fe:	2d00      	cmp	r5, #0
 8009200:	f000 8084 	beq.w	800930c <_dtoa_r+0x204>
 8009204:	ee19 3a90 	vmov	r3, s19
 8009208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800920c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009210:	4656      	mov	r6, sl
 8009212:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800921a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800921e:	4b74      	ldr	r3, [pc, #464]	; (80093f0 <_dtoa_r+0x2e8>)
 8009220:	2200      	movs	r2, #0
 8009222:	4630      	mov	r0, r6
 8009224:	4639      	mov	r1, r7
 8009226:	f7f7 f837 	bl	8000298 <__aeabi_dsub>
 800922a:	a365      	add	r3, pc, #404	; (adr r3, 80093c0 <_dtoa_r+0x2b8>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	f7f7 f9ea 	bl	8000608 <__aeabi_dmul>
 8009234:	a364      	add	r3, pc, #400	; (adr r3, 80093c8 <_dtoa_r+0x2c0>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f7f7 f82f 	bl	800029c <__adddf3>
 800923e:	4606      	mov	r6, r0
 8009240:	4628      	mov	r0, r5
 8009242:	460f      	mov	r7, r1
 8009244:	f7f7 f976 	bl	8000534 <__aeabi_i2d>
 8009248:	a361      	add	r3, pc, #388	; (adr r3, 80093d0 <_dtoa_r+0x2c8>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 f9db 	bl	8000608 <__aeabi_dmul>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4630      	mov	r0, r6
 8009258:	4639      	mov	r1, r7
 800925a:	f7f7 f81f 	bl	800029c <__adddf3>
 800925e:	4606      	mov	r6, r0
 8009260:	460f      	mov	r7, r1
 8009262:	f7f7 fc81 	bl	8000b68 <__aeabi_d2iz>
 8009266:	2200      	movs	r2, #0
 8009268:	9000      	str	r0, [sp, #0]
 800926a:	2300      	movs	r3, #0
 800926c:	4630      	mov	r0, r6
 800926e:	4639      	mov	r1, r7
 8009270:	f7f7 fc3c 	bl	8000aec <__aeabi_dcmplt>
 8009274:	b150      	cbz	r0, 800928c <_dtoa_r+0x184>
 8009276:	9800      	ldr	r0, [sp, #0]
 8009278:	f7f7 f95c 	bl	8000534 <__aeabi_i2d>
 800927c:	4632      	mov	r2, r6
 800927e:	463b      	mov	r3, r7
 8009280:	f7f7 fc2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009284:	b910      	cbnz	r0, 800928c <_dtoa_r+0x184>
 8009286:	9b00      	ldr	r3, [sp, #0]
 8009288:	3b01      	subs	r3, #1
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	9b00      	ldr	r3, [sp, #0]
 800928e:	2b16      	cmp	r3, #22
 8009290:	d85a      	bhi.n	8009348 <_dtoa_r+0x240>
 8009292:	9a00      	ldr	r2, [sp, #0]
 8009294:	4b57      	ldr	r3, [pc, #348]	; (80093f4 <_dtoa_r+0x2ec>)
 8009296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	ec51 0b19 	vmov	r0, r1, d9
 80092a2:	f7f7 fc23 	bl	8000aec <__aeabi_dcmplt>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d050      	beq.n	800934c <_dtoa_r+0x244>
 80092aa:	9b00      	ldr	r3, [sp, #0]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	2300      	movs	r3, #0
 80092b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80092b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092b6:	1b5d      	subs	r5, r3, r5
 80092b8:	1e6b      	subs	r3, r5, #1
 80092ba:	9305      	str	r3, [sp, #20]
 80092bc:	bf45      	ittet	mi
 80092be:	f1c5 0301 	rsbmi	r3, r5, #1
 80092c2:	9304      	strmi	r3, [sp, #16]
 80092c4:	2300      	movpl	r3, #0
 80092c6:	2300      	movmi	r3, #0
 80092c8:	bf4c      	ite	mi
 80092ca:	9305      	strmi	r3, [sp, #20]
 80092cc:	9304      	strpl	r3, [sp, #16]
 80092ce:	9b00      	ldr	r3, [sp, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	db3d      	blt.n	8009350 <_dtoa_r+0x248>
 80092d4:	9b05      	ldr	r3, [sp, #20]
 80092d6:	9a00      	ldr	r2, [sp, #0]
 80092d8:	920a      	str	r2, [sp, #40]	; 0x28
 80092da:	4413      	add	r3, r2
 80092dc:	9305      	str	r3, [sp, #20]
 80092de:	2300      	movs	r3, #0
 80092e0:	9307      	str	r3, [sp, #28]
 80092e2:	9b06      	ldr	r3, [sp, #24]
 80092e4:	2b09      	cmp	r3, #9
 80092e6:	f200 8089 	bhi.w	80093fc <_dtoa_r+0x2f4>
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	bfc4      	itt	gt
 80092ee:	3b04      	subgt	r3, #4
 80092f0:	9306      	strgt	r3, [sp, #24]
 80092f2:	9b06      	ldr	r3, [sp, #24]
 80092f4:	f1a3 0302 	sub.w	r3, r3, #2
 80092f8:	bfcc      	ite	gt
 80092fa:	2500      	movgt	r5, #0
 80092fc:	2501      	movle	r5, #1
 80092fe:	2b03      	cmp	r3, #3
 8009300:	f200 8087 	bhi.w	8009412 <_dtoa_r+0x30a>
 8009304:	e8df f003 	tbb	[pc, r3]
 8009308:	59383a2d 	.word	0x59383a2d
 800930c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009310:	441d      	add	r5, r3
 8009312:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009316:	2b20      	cmp	r3, #32
 8009318:	bfc1      	itttt	gt
 800931a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800931e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009322:	fa0b f303 	lslgt.w	r3, fp, r3
 8009326:	fa26 f000 	lsrgt.w	r0, r6, r0
 800932a:	bfda      	itte	le
 800932c:	f1c3 0320 	rsble	r3, r3, #32
 8009330:	fa06 f003 	lslle.w	r0, r6, r3
 8009334:	4318      	orrgt	r0, r3
 8009336:	f7f7 f8ed 	bl	8000514 <__aeabi_ui2d>
 800933a:	2301      	movs	r3, #1
 800933c:	4606      	mov	r6, r0
 800933e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009342:	3d01      	subs	r5, #1
 8009344:	930e      	str	r3, [sp, #56]	; 0x38
 8009346:	e76a      	b.n	800921e <_dtoa_r+0x116>
 8009348:	2301      	movs	r3, #1
 800934a:	e7b2      	b.n	80092b2 <_dtoa_r+0x1aa>
 800934c:	900b      	str	r0, [sp, #44]	; 0x2c
 800934e:	e7b1      	b.n	80092b4 <_dtoa_r+0x1ac>
 8009350:	9b04      	ldr	r3, [sp, #16]
 8009352:	9a00      	ldr	r2, [sp, #0]
 8009354:	1a9b      	subs	r3, r3, r2
 8009356:	9304      	str	r3, [sp, #16]
 8009358:	4253      	negs	r3, r2
 800935a:	9307      	str	r3, [sp, #28]
 800935c:	2300      	movs	r3, #0
 800935e:	930a      	str	r3, [sp, #40]	; 0x28
 8009360:	e7bf      	b.n	80092e2 <_dtoa_r+0x1da>
 8009362:	2300      	movs	r3, #0
 8009364:	9308      	str	r3, [sp, #32]
 8009366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009368:	2b00      	cmp	r3, #0
 800936a:	dc55      	bgt.n	8009418 <_dtoa_r+0x310>
 800936c:	2301      	movs	r3, #1
 800936e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009372:	461a      	mov	r2, r3
 8009374:	9209      	str	r2, [sp, #36]	; 0x24
 8009376:	e00c      	b.n	8009392 <_dtoa_r+0x28a>
 8009378:	2301      	movs	r3, #1
 800937a:	e7f3      	b.n	8009364 <_dtoa_r+0x25c>
 800937c:	2300      	movs	r3, #0
 800937e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009380:	9308      	str	r3, [sp, #32]
 8009382:	9b00      	ldr	r3, [sp, #0]
 8009384:	4413      	add	r3, r2
 8009386:	9302      	str	r3, [sp, #8]
 8009388:	3301      	adds	r3, #1
 800938a:	2b01      	cmp	r3, #1
 800938c:	9303      	str	r3, [sp, #12]
 800938e:	bfb8      	it	lt
 8009390:	2301      	movlt	r3, #1
 8009392:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009394:	2200      	movs	r2, #0
 8009396:	6042      	str	r2, [r0, #4]
 8009398:	2204      	movs	r2, #4
 800939a:	f102 0614 	add.w	r6, r2, #20
 800939e:	429e      	cmp	r6, r3
 80093a0:	6841      	ldr	r1, [r0, #4]
 80093a2:	d93d      	bls.n	8009420 <_dtoa_r+0x318>
 80093a4:	4620      	mov	r0, r4
 80093a6:	f000 fcbb 	bl	8009d20 <_Balloc>
 80093aa:	9001      	str	r0, [sp, #4]
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d13b      	bne.n	8009428 <_dtoa_r+0x320>
 80093b0:	4b11      	ldr	r3, [pc, #68]	; (80093f8 <_dtoa_r+0x2f0>)
 80093b2:	4602      	mov	r2, r0
 80093b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80093b8:	e6c0      	b.n	800913c <_dtoa_r+0x34>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e7df      	b.n	800937e <_dtoa_r+0x276>
 80093be:	bf00      	nop
 80093c0:	636f4361 	.word	0x636f4361
 80093c4:	3fd287a7 	.word	0x3fd287a7
 80093c8:	8b60c8b3 	.word	0x8b60c8b3
 80093cc:	3fc68a28 	.word	0x3fc68a28
 80093d0:	509f79fb 	.word	0x509f79fb
 80093d4:	3fd34413 	.word	0x3fd34413
 80093d8:	0800bf15 	.word	0x0800bf15
 80093dc:	0800bf2c 	.word	0x0800bf2c
 80093e0:	7ff00000 	.word	0x7ff00000
 80093e4:	0800bf11 	.word	0x0800bf11
 80093e8:	0800bf08 	.word	0x0800bf08
 80093ec:	0800bee5 	.word	0x0800bee5
 80093f0:	3ff80000 	.word	0x3ff80000
 80093f4:	0800c020 	.word	0x0800c020
 80093f8:	0800bf87 	.word	0x0800bf87
 80093fc:	2501      	movs	r5, #1
 80093fe:	2300      	movs	r3, #0
 8009400:	9306      	str	r3, [sp, #24]
 8009402:	9508      	str	r5, [sp, #32]
 8009404:	f04f 33ff 	mov.w	r3, #4294967295
 8009408:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800940c:	2200      	movs	r2, #0
 800940e:	2312      	movs	r3, #18
 8009410:	e7b0      	b.n	8009374 <_dtoa_r+0x26c>
 8009412:	2301      	movs	r3, #1
 8009414:	9308      	str	r3, [sp, #32]
 8009416:	e7f5      	b.n	8009404 <_dtoa_r+0x2fc>
 8009418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800941e:	e7b8      	b.n	8009392 <_dtoa_r+0x28a>
 8009420:	3101      	adds	r1, #1
 8009422:	6041      	str	r1, [r0, #4]
 8009424:	0052      	lsls	r2, r2, #1
 8009426:	e7b8      	b.n	800939a <_dtoa_r+0x292>
 8009428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800942a:	9a01      	ldr	r2, [sp, #4]
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	9b03      	ldr	r3, [sp, #12]
 8009430:	2b0e      	cmp	r3, #14
 8009432:	f200 809d 	bhi.w	8009570 <_dtoa_r+0x468>
 8009436:	2d00      	cmp	r5, #0
 8009438:	f000 809a 	beq.w	8009570 <_dtoa_r+0x468>
 800943c:	9b00      	ldr	r3, [sp, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	dd32      	ble.n	80094a8 <_dtoa_r+0x3a0>
 8009442:	4ab7      	ldr	r2, [pc, #732]	; (8009720 <_dtoa_r+0x618>)
 8009444:	f003 030f 	and.w	r3, r3, #15
 8009448:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800944c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009450:	9b00      	ldr	r3, [sp, #0]
 8009452:	05d8      	lsls	r0, r3, #23
 8009454:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009458:	d516      	bpl.n	8009488 <_dtoa_r+0x380>
 800945a:	4bb2      	ldr	r3, [pc, #712]	; (8009724 <_dtoa_r+0x61c>)
 800945c:	ec51 0b19 	vmov	r0, r1, d9
 8009460:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009464:	f7f7 f9fa 	bl	800085c <__aeabi_ddiv>
 8009468:	f007 070f 	and.w	r7, r7, #15
 800946c:	4682      	mov	sl, r0
 800946e:	468b      	mov	fp, r1
 8009470:	2503      	movs	r5, #3
 8009472:	4eac      	ldr	r6, [pc, #688]	; (8009724 <_dtoa_r+0x61c>)
 8009474:	b957      	cbnz	r7, 800948c <_dtoa_r+0x384>
 8009476:	4642      	mov	r2, r8
 8009478:	464b      	mov	r3, r9
 800947a:	4650      	mov	r0, sl
 800947c:	4659      	mov	r1, fp
 800947e:	f7f7 f9ed 	bl	800085c <__aeabi_ddiv>
 8009482:	4682      	mov	sl, r0
 8009484:	468b      	mov	fp, r1
 8009486:	e028      	b.n	80094da <_dtoa_r+0x3d2>
 8009488:	2502      	movs	r5, #2
 800948a:	e7f2      	b.n	8009472 <_dtoa_r+0x36a>
 800948c:	07f9      	lsls	r1, r7, #31
 800948e:	d508      	bpl.n	80094a2 <_dtoa_r+0x39a>
 8009490:	4640      	mov	r0, r8
 8009492:	4649      	mov	r1, r9
 8009494:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009498:	f7f7 f8b6 	bl	8000608 <__aeabi_dmul>
 800949c:	3501      	adds	r5, #1
 800949e:	4680      	mov	r8, r0
 80094a0:	4689      	mov	r9, r1
 80094a2:	107f      	asrs	r7, r7, #1
 80094a4:	3608      	adds	r6, #8
 80094a6:	e7e5      	b.n	8009474 <_dtoa_r+0x36c>
 80094a8:	f000 809b 	beq.w	80095e2 <_dtoa_r+0x4da>
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	4f9d      	ldr	r7, [pc, #628]	; (8009724 <_dtoa_r+0x61c>)
 80094b0:	425e      	negs	r6, r3
 80094b2:	4b9b      	ldr	r3, [pc, #620]	; (8009720 <_dtoa_r+0x618>)
 80094b4:	f006 020f 	and.w	r2, r6, #15
 80094b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	ec51 0b19 	vmov	r0, r1, d9
 80094c4:	f7f7 f8a0 	bl	8000608 <__aeabi_dmul>
 80094c8:	1136      	asrs	r6, r6, #4
 80094ca:	4682      	mov	sl, r0
 80094cc:	468b      	mov	fp, r1
 80094ce:	2300      	movs	r3, #0
 80094d0:	2502      	movs	r5, #2
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	d17a      	bne.n	80095cc <_dtoa_r+0x4c4>
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1d3      	bne.n	8009482 <_dtoa_r+0x37a>
 80094da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 8082 	beq.w	80095e6 <_dtoa_r+0x4de>
 80094e2:	4b91      	ldr	r3, [pc, #580]	; (8009728 <_dtoa_r+0x620>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	4650      	mov	r0, sl
 80094e8:	4659      	mov	r1, fp
 80094ea:	f7f7 faff 	bl	8000aec <__aeabi_dcmplt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d079      	beq.n	80095e6 <_dtoa_r+0x4de>
 80094f2:	9b03      	ldr	r3, [sp, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d076      	beq.n	80095e6 <_dtoa_r+0x4de>
 80094f8:	9b02      	ldr	r3, [sp, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dd36      	ble.n	800956c <_dtoa_r+0x464>
 80094fe:	9b00      	ldr	r3, [sp, #0]
 8009500:	4650      	mov	r0, sl
 8009502:	4659      	mov	r1, fp
 8009504:	1e5f      	subs	r7, r3, #1
 8009506:	2200      	movs	r2, #0
 8009508:	4b88      	ldr	r3, [pc, #544]	; (800972c <_dtoa_r+0x624>)
 800950a:	f7f7 f87d 	bl	8000608 <__aeabi_dmul>
 800950e:	9e02      	ldr	r6, [sp, #8]
 8009510:	4682      	mov	sl, r0
 8009512:	468b      	mov	fp, r1
 8009514:	3501      	adds	r5, #1
 8009516:	4628      	mov	r0, r5
 8009518:	f7f7 f80c 	bl	8000534 <__aeabi_i2d>
 800951c:	4652      	mov	r2, sl
 800951e:	465b      	mov	r3, fp
 8009520:	f7f7 f872 	bl	8000608 <__aeabi_dmul>
 8009524:	4b82      	ldr	r3, [pc, #520]	; (8009730 <_dtoa_r+0x628>)
 8009526:	2200      	movs	r2, #0
 8009528:	f7f6 feb8 	bl	800029c <__adddf3>
 800952c:	46d0      	mov	r8, sl
 800952e:	46d9      	mov	r9, fp
 8009530:	4682      	mov	sl, r0
 8009532:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009536:	2e00      	cmp	r6, #0
 8009538:	d158      	bne.n	80095ec <_dtoa_r+0x4e4>
 800953a:	4b7e      	ldr	r3, [pc, #504]	; (8009734 <_dtoa_r+0x62c>)
 800953c:	2200      	movs	r2, #0
 800953e:	4640      	mov	r0, r8
 8009540:	4649      	mov	r1, r9
 8009542:	f7f6 fea9 	bl	8000298 <__aeabi_dsub>
 8009546:	4652      	mov	r2, sl
 8009548:	465b      	mov	r3, fp
 800954a:	4680      	mov	r8, r0
 800954c:	4689      	mov	r9, r1
 800954e:	f7f7 faeb 	bl	8000b28 <__aeabi_dcmpgt>
 8009552:	2800      	cmp	r0, #0
 8009554:	f040 8295 	bne.w	8009a82 <_dtoa_r+0x97a>
 8009558:	4652      	mov	r2, sl
 800955a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800955e:	4640      	mov	r0, r8
 8009560:	4649      	mov	r1, r9
 8009562:	f7f7 fac3 	bl	8000aec <__aeabi_dcmplt>
 8009566:	2800      	cmp	r0, #0
 8009568:	f040 8289 	bne.w	8009a7e <_dtoa_r+0x976>
 800956c:	ec5b ab19 	vmov	sl, fp, d9
 8009570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009572:	2b00      	cmp	r3, #0
 8009574:	f2c0 8148 	blt.w	8009808 <_dtoa_r+0x700>
 8009578:	9a00      	ldr	r2, [sp, #0]
 800957a:	2a0e      	cmp	r2, #14
 800957c:	f300 8144 	bgt.w	8009808 <_dtoa_r+0x700>
 8009580:	4b67      	ldr	r3, [pc, #412]	; (8009720 <_dtoa_r+0x618>)
 8009582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009586:	e9d3 8900 	ldrd	r8, r9, [r3]
 800958a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	f280 80d5 	bge.w	800973c <_dtoa_r+0x634>
 8009592:	9b03      	ldr	r3, [sp, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f300 80d1 	bgt.w	800973c <_dtoa_r+0x634>
 800959a:	f040 826f 	bne.w	8009a7c <_dtoa_r+0x974>
 800959e:	4b65      	ldr	r3, [pc, #404]	; (8009734 <_dtoa_r+0x62c>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	f7f7 f82f 	bl	8000608 <__aeabi_dmul>
 80095aa:	4652      	mov	r2, sl
 80095ac:	465b      	mov	r3, fp
 80095ae:	f7f7 fab1 	bl	8000b14 <__aeabi_dcmpge>
 80095b2:	9e03      	ldr	r6, [sp, #12]
 80095b4:	4637      	mov	r7, r6
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f040 8245 	bne.w	8009a46 <_dtoa_r+0x93e>
 80095bc:	9d01      	ldr	r5, [sp, #4]
 80095be:	2331      	movs	r3, #49	; 0x31
 80095c0:	f805 3b01 	strb.w	r3, [r5], #1
 80095c4:	9b00      	ldr	r3, [sp, #0]
 80095c6:	3301      	adds	r3, #1
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	e240      	b.n	8009a4e <_dtoa_r+0x946>
 80095cc:	07f2      	lsls	r2, r6, #31
 80095ce:	d505      	bpl.n	80095dc <_dtoa_r+0x4d4>
 80095d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d4:	f7f7 f818 	bl	8000608 <__aeabi_dmul>
 80095d8:	3501      	adds	r5, #1
 80095da:	2301      	movs	r3, #1
 80095dc:	1076      	asrs	r6, r6, #1
 80095de:	3708      	adds	r7, #8
 80095e0:	e777      	b.n	80094d2 <_dtoa_r+0x3ca>
 80095e2:	2502      	movs	r5, #2
 80095e4:	e779      	b.n	80094da <_dtoa_r+0x3d2>
 80095e6:	9f00      	ldr	r7, [sp, #0]
 80095e8:	9e03      	ldr	r6, [sp, #12]
 80095ea:	e794      	b.n	8009516 <_dtoa_r+0x40e>
 80095ec:	9901      	ldr	r1, [sp, #4]
 80095ee:	4b4c      	ldr	r3, [pc, #304]	; (8009720 <_dtoa_r+0x618>)
 80095f0:	4431      	add	r1, r6
 80095f2:	910d      	str	r1, [sp, #52]	; 0x34
 80095f4:	9908      	ldr	r1, [sp, #32]
 80095f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095fe:	2900      	cmp	r1, #0
 8009600:	d043      	beq.n	800968a <_dtoa_r+0x582>
 8009602:	494d      	ldr	r1, [pc, #308]	; (8009738 <_dtoa_r+0x630>)
 8009604:	2000      	movs	r0, #0
 8009606:	f7f7 f929 	bl	800085c <__aeabi_ddiv>
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	f7f6 fe43 	bl	8000298 <__aeabi_dsub>
 8009612:	9d01      	ldr	r5, [sp, #4]
 8009614:	4682      	mov	sl, r0
 8009616:	468b      	mov	fp, r1
 8009618:	4649      	mov	r1, r9
 800961a:	4640      	mov	r0, r8
 800961c:	f7f7 faa4 	bl	8000b68 <__aeabi_d2iz>
 8009620:	4606      	mov	r6, r0
 8009622:	f7f6 ff87 	bl	8000534 <__aeabi_i2d>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4640      	mov	r0, r8
 800962c:	4649      	mov	r1, r9
 800962e:	f7f6 fe33 	bl	8000298 <__aeabi_dsub>
 8009632:	3630      	adds	r6, #48	; 0x30
 8009634:	f805 6b01 	strb.w	r6, [r5], #1
 8009638:	4652      	mov	r2, sl
 800963a:	465b      	mov	r3, fp
 800963c:	4680      	mov	r8, r0
 800963e:	4689      	mov	r9, r1
 8009640:	f7f7 fa54 	bl	8000aec <__aeabi_dcmplt>
 8009644:	2800      	cmp	r0, #0
 8009646:	d163      	bne.n	8009710 <_dtoa_r+0x608>
 8009648:	4642      	mov	r2, r8
 800964a:	464b      	mov	r3, r9
 800964c:	4936      	ldr	r1, [pc, #216]	; (8009728 <_dtoa_r+0x620>)
 800964e:	2000      	movs	r0, #0
 8009650:	f7f6 fe22 	bl	8000298 <__aeabi_dsub>
 8009654:	4652      	mov	r2, sl
 8009656:	465b      	mov	r3, fp
 8009658:	f7f7 fa48 	bl	8000aec <__aeabi_dcmplt>
 800965c:	2800      	cmp	r0, #0
 800965e:	f040 80b5 	bne.w	80097cc <_dtoa_r+0x6c4>
 8009662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009664:	429d      	cmp	r5, r3
 8009666:	d081      	beq.n	800956c <_dtoa_r+0x464>
 8009668:	4b30      	ldr	r3, [pc, #192]	; (800972c <_dtoa_r+0x624>)
 800966a:	2200      	movs	r2, #0
 800966c:	4650      	mov	r0, sl
 800966e:	4659      	mov	r1, fp
 8009670:	f7f6 ffca 	bl	8000608 <__aeabi_dmul>
 8009674:	4b2d      	ldr	r3, [pc, #180]	; (800972c <_dtoa_r+0x624>)
 8009676:	4682      	mov	sl, r0
 8009678:	468b      	mov	fp, r1
 800967a:	4640      	mov	r0, r8
 800967c:	4649      	mov	r1, r9
 800967e:	2200      	movs	r2, #0
 8009680:	f7f6 ffc2 	bl	8000608 <__aeabi_dmul>
 8009684:	4680      	mov	r8, r0
 8009686:	4689      	mov	r9, r1
 8009688:	e7c6      	b.n	8009618 <_dtoa_r+0x510>
 800968a:	4650      	mov	r0, sl
 800968c:	4659      	mov	r1, fp
 800968e:	f7f6 ffbb 	bl	8000608 <__aeabi_dmul>
 8009692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009694:	9d01      	ldr	r5, [sp, #4]
 8009696:	930f      	str	r3, [sp, #60]	; 0x3c
 8009698:	4682      	mov	sl, r0
 800969a:	468b      	mov	fp, r1
 800969c:	4649      	mov	r1, r9
 800969e:	4640      	mov	r0, r8
 80096a0:	f7f7 fa62 	bl	8000b68 <__aeabi_d2iz>
 80096a4:	4606      	mov	r6, r0
 80096a6:	f7f6 ff45 	bl	8000534 <__aeabi_i2d>
 80096aa:	3630      	adds	r6, #48	; 0x30
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4640      	mov	r0, r8
 80096b2:	4649      	mov	r1, r9
 80096b4:	f7f6 fdf0 	bl	8000298 <__aeabi_dsub>
 80096b8:	f805 6b01 	strb.w	r6, [r5], #1
 80096bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096be:	429d      	cmp	r5, r3
 80096c0:	4680      	mov	r8, r0
 80096c2:	4689      	mov	r9, r1
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	d124      	bne.n	8009714 <_dtoa_r+0x60c>
 80096ca:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <_dtoa_r+0x630>)
 80096cc:	4650      	mov	r0, sl
 80096ce:	4659      	mov	r1, fp
 80096d0:	f7f6 fde4 	bl	800029c <__adddf3>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4640      	mov	r0, r8
 80096da:	4649      	mov	r1, r9
 80096dc:	f7f7 fa24 	bl	8000b28 <__aeabi_dcmpgt>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d173      	bne.n	80097cc <_dtoa_r+0x6c4>
 80096e4:	4652      	mov	r2, sl
 80096e6:	465b      	mov	r3, fp
 80096e8:	4913      	ldr	r1, [pc, #76]	; (8009738 <_dtoa_r+0x630>)
 80096ea:	2000      	movs	r0, #0
 80096ec:	f7f6 fdd4 	bl	8000298 <__aeabi_dsub>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4640      	mov	r0, r8
 80096f6:	4649      	mov	r1, r9
 80096f8:	f7f7 f9f8 	bl	8000aec <__aeabi_dcmplt>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f43f af35 	beq.w	800956c <_dtoa_r+0x464>
 8009702:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009704:	1e6b      	subs	r3, r5, #1
 8009706:	930f      	str	r3, [sp, #60]	; 0x3c
 8009708:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800970c:	2b30      	cmp	r3, #48	; 0x30
 800970e:	d0f8      	beq.n	8009702 <_dtoa_r+0x5fa>
 8009710:	9700      	str	r7, [sp, #0]
 8009712:	e049      	b.n	80097a8 <_dtoa_r+0x6a0>
 8009714:	4b05      	ldr	r3, [pc, #20]	; (800972c <_dtoa_r+0x624>)
 8009716:	f7f6 ff77 	bl	8000608 <__aeabi_dmul>
 800971a:	4680      	mov	r8, r0
 800971c:	4689      	mov	r9, r1
 800971e:	e7bd      	b.n	800969c <_dtoa_r+0x594>
 8009720:	0800c020 	.word	0x0800c020
 8009724:	0800bff8 	.word	0x0800bff8
 8009728:	3ff00000 	.word	0x3ff00000
 800972c:	40240000 	.word	0x40240000
 8009730:	401c0000 	.word	0x401c0000
 8009734:	40140000 	.word	0x40140000
 8009738:	3fe00000 	.word	0x3fe00000
 800973c:	9d01      	ldr	r5, [sp, #4]
 800973e:	4656      	mov	r6, sl
 8009740:	465f      	mov	r7, fp
 8009742:	4642      	mov	r2, r8
 8009744:	464b      	mov	r3, r9
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	f7f7 f887 	bl	800085c <__aeabi_ddiv>
 800974e:	f7f7 fa0b 	bl	8000b68 <__aeabi_d2iz>
 8009752:	4682      	mov	sl, r0
 8009754:	f7f6 feee 	bl	8000534 <__aeabi_i2d>
 8009758:	4642      	mov	r2, r8
 800975a:	464b      	mov	r3, r9
 800975c:	f7f6 ff54 	bl	8000608 <__aeabi_dmul>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4630      	mov	r0, r6
 8009766:	4639      	mov	r1, r7
 8009768:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800976c:	f7f6 fd94 	bl	8000298 <__aeabi_dsub>
 8009770:	f805 6b01 	strb.w	r6, [r5], #1
 8009774:	9e01      	ldr	r6, [sp, #4]
 8009776:	9f03      	ldr	r7, [sp, #12]
 8009778:	1bae      	subs	r6, r5, r6
 800977a:	42b7      	cmp	r7, r6
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	d135      	bne.n	80097ee <_dtoa_r+0x6e6>
 8009782:	f7f6 fd8b 	bl	800029c <__adddf3>
 8009786:	4642      	mov	r2, r8
 8009788:	464b      	mov	r3, r9
 800978a:	4606      	mov	r6, r0
 800978c:	460f      	mov	r7, r1
 800978e:	f7f7 f9cb 	bl	8000b28 <__aeabi_dcmpgt>
 8009792:	b9d0      	cbnz	r0, 80097ca <_dtoa_r+0x6c2>
 8009794:	4642      	mov	r2, r8
 8009796:	464b      	mov	r3, r9
 8009798:	4630      	mov	r0, r6
 800979a:	4639      	mov	r1, r7
 800979c:	f7f7 f99c 	bl	8000ad8 <__aeabi_dcmpeq>
 80097a0:	b110      	cbz	r0, 80097a8 <_dtoa_r+0x6a0>
 80097a2:	f01a 0f01 	tst.w	sl, #1
 80097a6:	d110      	bne.n	80097ca <_dtoa_r+0x6c2>
 80097a8:	4620      	mov	r0, r4
 80097aa:	ee18 1a10 	vmov	r1, s16
 80097ae:	f000 faf7 	bl	8009da0 <_Bfree>
 80097b2:	2300      	movs	r3, #0
 80097b4:	9800      	ldr	r0, [sp, #0]
 80097b6:	702b      	strb	r3, [r5, #0]
 80097b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097ba:	3001      	adds	r0, #1
 80097bc:	6018      	str	r0, [r3, #0]
 80097be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f43f acf1 	beq.w	80091a8 <_dtoa_r+0xa0>
 80097c6:	601d      	str	r5, [r3, #0]
 80097c8:	e4ee      	b.n	80091a8 <_dtoa_r+0xa0>
 80097ca:	9f00      	ldr	r7, [sp, #0]
 80097cc:	462b      	mov	r3, r5
 80097ce:	461d      	mov	r5, r3
 80097d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097d4:	2a39      	cmp	r2, #57	; 0x39
 80097d6:	d106      	bne.n	80097e6 <_dtoa_r+0x6de>
 80097d8:	9a01      	ldr	r2, [sp, #4]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d1f7      	bne.n	80097ce <_dtoa_r+0x6c6>
 80097de:	9901      	ldr	r1, [sp, #4]
 80097e0:	2230      	movs	r2, #48	; 0x30
 80097e2:	3701      	adds	r7, #1
 80097e4:	700a      	strb	r2, [r1, #0]
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	3201      	adds	r2, #1
 80097ea:	701a      	strb	r2, [r3, #0]
 80097ec:	e790      	b.n	8009710 <_dtoa_r+0x608>
 80097ee:	4ba6      	ldr	r3, [pc, #664]	; (8009a88 <_dtoa_r+0x980>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	f7f6 ff09 	bl	8000608 <__aeabi_dmul>
 80097f6:	2200      	movs	r2, #0
 80097f8:	2300      	movs	r3, #0
 80097fa:	4606      	mov	r6, r0
 80097fc:	460f      	mov	r7, r1
 80097fe:	f7f7 f96b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009802:	2800      	cmp	r0, #0
 8009804:	d09d      	beq.n	8009742 <_dtoa_r+0x63a>
 8009806:	e7cf      	b.n	80097a8 <_dtoa_r+0x6a0>
 8009808:	9a08      	ldr	r2, [sp, #32]
 800980a:	2a00      	cmp	r2, #0
 800980c:	f000 80d7 	beq.w	80099be <_dtoa_r+0x8b6>
 8009810:	9a06      	ldr	r2, [sp, #24]
 8009812:	2a01      	cmp	r2, #1
 8009814:	f300 80ba 	bgt.w	800998c <_dtoa_r+0x884>
 8009818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800981a:	2a00      	cmp	r2, #0
 800981c:	f000 80b2 	beq.w	8009984 <_dtoa_r+0x87c>
 8009820:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009824:	9e07      	ldr	r6, [sp, #28]
 8009826:	9d04      	ldr	r5, [sp, #16]
 8009828:	9a04      	ldr	r2, [sp, #16]
 800982a:	441a      	add	r2, r3
 800982c:	9204      	str	r2, [sp, #16]
 800982e:	9a05      	ldr	r2, [sp, #20]
 8009830:	2101      	movs	r1, #1
 8009832:	441a      	add	r2, r3
 8009834:	4620      	mov	r0, r4
 8009836:	9205      	str	r2, [sp, #20]
 8009838:	f000 fb6a 	bl	8009f10 <__i2b>
 800983c:	4607      	mov	r7, r0
 800983e:	2d00      	cmp	r5, #0
 8009840:	dd0c      	ble.n	800985c <_dtoa_r+0x754>
 8009842:	9b05      	ldr	r3, [sp, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	dd09      	ble.n	800985c <_dtoa_r+0x754>
 8009848:	42ab      	cmp	r3, r5
 800984a:	9a04      	ldr	r2, [sp, #16]
 800984c:	bfa8      	it	ge
 800984e:	462b      	movge	r3, r5
 8009850:	1ad2      	subs	r2, r2, r3
 8009852:	9204      	str	r2, [sp, #16]
 8009854:	9a05      	ldr	r2, [sp, #20]
 8009856:	1aed      	subs	r5, r5, r3
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	9305      	str	r3, [sp, #20]
 800985c:	9b07      	ldr	r3, [sp, #28]
 800985e:	b31b      	cbz	r3, 80098a8 <_dtoa_r+0x7a0>
 8009860:	9b08      	ldr	r3, [sp, #32]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 80af 	beq.w	80099c6 <_dtoa_r+0x8be>
 8009868:	2e00      	cmp	r6, #0
 800986a:	dd13      	ble.n	8009894 <_dtoa_r+0x78c>
 800986c:	4639      	mov	r1, r7
 800986e:	4632      	mov	r2, r6
 8009870:	4620      	mov	r0, r4
 8009872:	f000 fc0d 	bl	800a090 <__pow5mult>
 8009876:	ee18 2a10 	vmov	r2, s16
 800987a:	4601      	mov	r1, r0
 800987c:	4607      	mov	r7, r0
 800987e:	4620      	mov	r0, r4
 8009880:	f000 fb5c 	bl	8009f3c <__multiply>
 8009884:	ee18 1a10 	vmov	r1, s16
 8009888:	4680      	mov	r8, r0
 800988a:	4620      	mov	r0, r4
 800988c:	f000 fa88 	bl	8009da0 <_Bfree>
 8009890:	ee08 8a10 	vmov	s16, r8
 8009894:	9b07      	ldr	r3, [sp, #28]
 8009896:	1b9a      	subs	r2, r3, r6
 8009898:	d006      	beq.n	80098a8 <_dtoa_r+0x7a0>
 800989a:	ee18 1a10 	vmov	r1, s16
 800989e:	4620      	mov	r0, r4
 80098a0:	f000 fbf6 	bl	800a090 <__pow5mult>
 80098a4:	ee08 0a10 	vmov	s16, r0
 80098a8:	2101      	movs	r1, #1
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 fb30 	bl	8009f10 <__i2b>
 80098b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	4606      	mov	r6, r0
 80098b6:	f340 8088 	ble.w	80099ca <_dtoa_r+0x8c2>
 80098ba:	461a      	mov	r2, r3
 80098bc:	4601      	mov	r1, r0
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 fbe6 	bl	800a090 <__pow5mult>
 80098c4:	9b06      	ldr	r3, [sp, #24]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	4606      	mov	r6, r0
 80098ca:	f340 8081 	ble.w	80099d0 <_dtoa_r+0x8c8>
 80098ce:	f04f 0800 	mov.w	r8, #0
 80098d2:	6933      	ldr	r3, [r6, #16]
 80098d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098d8:	6918      	ldr	r0, [r3, #16]
 80098da:	f000 fac9 	bl	8009e70 <__hi0bits>
 80098de:	f1c0 0020 	rsb	r0, r0, #32
 80098e2:	9b05      	ldr	r3, [sp, #20]
 80098e4:	4418      	add	r0, r3
 80098e6:	f010 001f 	ands.w	r0, r0, #31
 80098ea:	f000 8092 	beq.w	8009a12 <_dtoa_r+0x90a>
 80098ee:	f1c0 0320 	rsb	r3, r0, #32
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	f340 808a 	ble.w	8009a0c <_dtoa_r+0x904>
 80098f8:	f1c0 001c 	rsb	r0, r0, #28
 80098fc:	9b04      	ldr	r3, [sp, #16]
 80098fe:	4403      	add	r3, r0
 8009900:	9304      	str	r3, [sp, #16]
 8009902:	9b05      	ldr	r3, [sp, #20]
 8009904:	4403      	add	r3, r0
 8009906:	4405      	add	r5, r0
 8009908:	9305      	str	r3, [sp, #20]
 800990a:	9b04      	ldr	r3, [sp, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	dd07      	ble.n	8009920 <_dtoa_r+0x818>
 8009910:	ee18 1a10 	vmov	r1, s16
 8009914:	461a      	mov	r2, r3
 8009916:	4620      	mov	r0, r4
 8009918:	f000 fc14 	bl	800a144 <__lshift>
 800991c:	ee08 0a10 	vmov	s16, r0
 8009920:	9b05      	ldr	r3, [sp, #20]
 8009922:	2b00      	cmp	r3, #0
 8009924:	dd05      	ble.n	8009932 <_dtoa_r+0x82a>
 8009926:	4631      	mov	r1, r6
 8009928:	461a      	mov	r2, r3
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fc0a 	bl	800a144 <__lshift>
 8009930:	4606      	mov	r6, r0
 8009932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d06e      	beq.n	8009a16 <_dtoa_r+0x90e>
 8009938:	ee18 0a10 	vmov	r0, s16
 800993c:	4631      	mov	r1, r6
 800993e:	f000 fc71 	bl	800a224 <__mcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	da67      	bge.n	8009a16 <_dtoa_r+0x90e>
 8009946:	9b00      	ldr	r3, [sp, #0]
 8009948:	3b01      	subs	r3, #1
 800994a:	ee18 1a10 	vmov	r1, s16
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	220a      	movs	r2, #10
 8009952:	2300      	movs	r3, #0
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fa45 	bl	8009de4 <__multadd>
 800995a:	9b08      	ldr	r3, [sp, #32]
 800995c:	ee08 0a10 	vmov	s16, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 81b1 	beq.w	8009cc8 <_dtoa_r+0xbc0>
 8009966:	2300      	movs	r3, #0
 8009968:	4639      	mov	r1, r7
 800996a:	220a      	movs	r2, #10
 800996c:	4620      	mov	r0, r4
 800996e:	f000 fa39 	bl	8009de4 <__multadd>
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	4607      	mov	r7, r0
 8009978:	f300 808e 	bgt.w	8009a98 <_dtoa_r+0x990>
 800997c:	9b06      	ldr	r3, [sp, #24]
 800997e:	2b02      	cmp	r3, #2
 8009980:	dc51      	bgt.n	8009a26 <_dtoa_r+0x91e>
 8009982:	e089      	b.n	8009a98 <_dtoa_r+0x990>
 8009984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800998a:	e74b      	b.n	8009824 <_dtoa_r+0x71c>
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	1e5e      	subs	r6, r3, #1
 8009990:	9b07      	ldr	r3, [sp, #28]
 8009992:	42b3      	cmp	r3, r6
 8009994:	bfbf      	itttt	lt
 8009996:	9b07      	ldrlt	r3, [sp, #28]
 8009998:	9607      	strlt	r6, [sp, #28]
 800999a:	1af2      	sublt	r2, r6, r3
 800999c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800999e:	bfb6      	itet	lt
 80099a0:	189b      	addlt	r3, r3, r2
 80099a2:	1b9e      	subge	r6, r3, r6
 80099a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80099a6:	9b03      	ldr	r3, [sp, #12]
 80099a8:	bfb8      	it	lt
 80099aa:	2600      	movlt	r6, #0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	bfb7      	itett	lt
 80099b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80099b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80099b8:	1a9d      	sublt	r5, r3, r2
 80099ba:	2300      	movlt	r3, #0
 80099bc:	e734      	b.n	8009828 <_dtoa_r+0x720>
 80099be:	9e07      	ldr	r6, [sp, #28]
 80099c0:	9d04      	ldr	r5, [sp, #16]
 80099c2:	9f08      	ldr	r7, [sp, #32]
 80099c4:	e73b      	b.n	800983e <_dtoa_r+0x736>
 80099c6:	9a07      	ldr	r2, [sp, #28]
 80099c8:	e767      	b.n	800989a <_dtoa_r+0x792>
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	dc18      	bgt.n	8009a02 <_dtoa_r+0x8fa>
 80099d0:	f1ba 0f00 	cmp.w	sl, #0
 80099d4:	d115      	bne.n	8009a02 <_dtoa_r+0x8fa>
 80099d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099da:	b993      	cbnz	r3, 8009a02 <_dtoa_r+0x8fa>
 80099dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099e0:	0d1b      	lsrs	r3, r3, #20
 80099e2:	051b      	lsls	r3, r3, #20
 80099e4:	b183      	cbz	r3, 8009a08 <_dtoa_r+0x900>
 80099e6:	9b04      	ldr	r3, [sp, #16]
 80099e8:	3301      	adds	r3, #1
 80099ea:	9304      	str	r3, [sp, #16]
 80099ec:	9b05      	ldr	r3, [sp, #20]
 80099ee:	3301      	adds	r3, #1
 80099f0:	9305      	str	r3, [sp, #20]
 80099f2:	f04f 0801 	mov.w	r8, #1
 80099f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f47f af6a 	bne.w	80098d2 <_dtoa_r+0x7ca>
 80099fe:	2001      	movs	r0, #1
 8009a00:	e76f      	b.n	80098e2 <_dtoa_r+0x7da>
 8009a02:	f04f 0800 	mov.w	r8, #0
 8009a06:	e7f6      	b.n	80099f6 <_dtoa_r+0x8ee>
 8009a08:	4698      	mov	r8, r3
 8009a0a:	e7f4      	b.n	80099f6 <_dtoa_r+0x8ee>
 8009a0c:	f43f af7d 	beq.w	800990a <_dtoa_r+0x802>
 8009a10:	4618      	mov	r0, r3
 8009a12:	301c      	adds	r0, #28
 8009a14:	e772      	b.n	80098fc <_dtoa_r+0x7f4>
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	dc37      	bgt.n	8009a8c <_dtoa_r+0x984>
 8009a1c:	9b06      	ldr	r3, [sp, #24]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	dd34      	ble.n	8009a8c <_dtoa_r+0x984>
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	9302      	str	r3, [sp, #8]
 8009a26:	9b02      	ldr	r3, [sp, #8]
 8009a28:	b96b      	cbnz	r3, 8009a46 <_dtoa_r+0x93e>
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	2205      	movs	r2, #5
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f000 f9d8 	bl	8009de4 <__multadd>
 8009a34:	4601      	mov	r1, r0
 8009a36:	4606      	mov	r6, r0
 8009a38:	ee18 0a10 	vmov	r0, s16
 8009a3c:	f000 fbf2 	bl	800a224 <__mcmp>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f73f adbb 	bgt.w	80095bc <_dtoa_r+0x4b4>
 8009a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a48:	9d01      	ldr	r5, [sp, #4]
 8009a4a:	43db      	mvns	r3, r3
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	f04f 0800 	mov.w	r8, #0
 8009a52:	4631      	mov	r1, r6
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 f9a3 	bl	8009da0 <_Bfree>
 8009a5a:	2f00      	cmp	r7, #0
 8009a5c:	f43f aea4 	beq.w	80097a8 <_dtoa_r+0x6a0>
 8009a60:	f1b8 0f00 	cmp.w	r8, #0
 8009a64:	d005      	beq.n	8009a72 <_dtoa_r+0x96a>
 8009a66:	45b8      	cmp	r8, r7
 8009a68:	d003      	beq.n	8009a72 <_dtoa_r+0x96a>
 8009a6a:	4641      	mov	r1, r8
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f000 f997 	bl	8009da0 <_Bfree>
 8009a72:	4639      	mov	r1, r7
 8009a74:	4620      	mov	r0, r4
 8009a76:	f000 f993 	bl	8009da0 <_Bfree>
 8009a7a:	e695      	b.n	80097a8 <_dtoa_r+0x6a0>
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	4637      	mov	r7, r6
 8009a80:	e7e1      	b.n	8009a46 <_dtoa_r+0x93e>
 8009a82:	9700      	str	r7, [sp, #0]
 8009a84:	4637      	mov	r7, r6
 8009a86:	e599      	b.n	80095bc <_dtoa_r+0x4b4>
 8009a88:	40240000 	.word	0x40240000
 8009a8c:	9b08      	ldr	r3, [sp, #32]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 80ca 	beq.w	8009c28 <_dtoa_r+0xb20>
 8009a94:	9b03      	ldr	r3, [sp, #12]
 8009a96:	9302      	str	r3, [sp, #8]
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	dd05      	ble.n	8009aa8 <_dtoa_r+0x9a0>
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	462a      	mov	r2, r5
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 fb4f 	bl	800a144 <__lshift>
 8009aa6:	4607      	mov	r7, r0
 8009aa8:	f1b8 0f00 	cmp.w	r8, #0
 8009aac:	d05b      	beq.n	8009b66 <_dtoa_r+0xa5e>
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f000 f935 	bl	8009d20 <_Balloc>
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	b928      	cbnz	r0, 8009ac6 <_dtoa_r+0x9be>
 8009aba:	4b87      	ldr	r3, [pc, #540]	; (8009cd8 <_dtoa_r+0xbd0>)
 8009abc:	4602      	mov	r2, r0
 8009abe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ac2:	f7ff bb3b 	b.w	800913c <_dtoa_r+0x34>
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	3202      	adds	r2, #2
 8009aca:	0092      	lsls	r2, r2, #2
 8009acc:	f107 010c 	add.w	r1, r7, #12
 8009ad0:	300c      	adds	r0, #12
 8009ad2:	f000 f90b 	bl	8009cec <memcpy>
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 fb32 	bl	800a144 <__lshift>
 8009ae0:	9b01      	ldr	r3, [sp, #4]
 8009ae2:	f103 0901 	add.w	r9, r3, #1
 8009ae6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009aea:	4413      	add	r3, r2
 8009aec:	9305      	str	r3, [sp, #20]
 8009aee:	f00a 0301 	and.w	r3, sl, #1
 8009af2:	46b8      	mov	r8, r7
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	4607      	mov	r7, r0
 8009af8:	4631      	mov	r1, r6
 8009afa:	ee18 0a10 	vmov	r0, s16
 8009afe:	f7ff fa75 	bl	8008fec <quorem>
 8009b02:	4641      	mov	r1, r8
 8009b04:	9002      	str	r0, [sp, #8]
 8009b06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b0a:	ee18 0a10 	vmov	r0, s16
 8009b0e:	f000 fb89 	bl	800a224 <__mcmp>
 8009b12:	463a      	mov	r2, r7
 8009b14:	9003      	str	r0, [sp, #12]
 8009b16:	4631      	mov	r1, r6
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 fb9f 	bl	800a25c <__mdiff>
 8009b1e:	68c2      	ldr	r2, [r0, #12]
 8009b20:	f109 3bff 	add.w	fp, r9, #4294967295
 8009b24:	4605      	mov	r5, r0
 8009b26:	bb02      	cbnz	r2, 8009b6a <_dtoa_r+0xa62>
 8009b28:	4601      	mov	r1, r0
 8009b2a:	ee18 0a10 	vmov	r0, s16
 8009b2e:	f000 fb79 	bl	800a224 <__mcmp>
 8009b32:	4602      	mov	r2, r0
 8009b34:	4629      	mov	r1, r5
 8009b36:	4620      	mov	r0, r4
 8009b38:	9207      	str	r2, [sp, #28]
 8009b3a:	f000 f931 	bl	8009da0 <_Bfree>
 8009b3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009b42:	ea43 0102 	orr.w	r1, r3, r2
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	464d      	mov	r5, r9
 8009b4c:	d10f      	bne.n	8009b6e <_dtoa_r+0xa66>
 8009b4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b52:	d02a      	beq.n	8009baa <_dtoa_r+0xaa2>
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	dd02      	ble.n	8009b60 <_dtoa_r+0xa58>
 8009b5a:	9b02      	ldr	r3, [sp, #8]
 8009b5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009b60:	f88b a000 	strb.w	sl, [fp]
 8009b64:	e775      	b.n	8009a52 <_dtoa_r+0x94a>
 8009b66:	4638      	mov	r0, r7
 8009b68:	e7ba      	b.n	8009ae0 <_dtoa_r+0x9d8>
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	e7e2      	b.n	8009b34 <_dtoa_r+0xa2c>
 8009b6e:	9b03      	ldr	r3, [sp, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	db04      	blt.n	8009b7e <_dtoa_r+0xa76>
 8009b74:	9906      	ldr	r1, [sp, #24]
 8009b76:	430b      	orrs	r3, r1
 8009b78:	9904      	ldr	r1, [sp, #16]
 8009b7a:	430b      	orrs	r3, r1
 8009b7c:	d122      	bne.n	8009bc4 <_dtoa_r+0xabc>
 8009b7e:	2a00      	cmp	r2, #0
 8009b80:	ddee      	ble.n	8009b60 <_dtoa_r+0xa58>
 8009b82:	ee18 1a10 	vmov	r1, s16
 8009b86:	2201      	movs	r2, #1
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f000 fadb 	bl	800a144 <__lshift>
 8009b8e:	4631      	mov	r1, r6
 8009b90:	ee08 0a10 	vmov	s16, r0
 8009b94:	f000 fb46 	bl	800a224 <__mcmp>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	dc03      	bgt.n	8009ba4 <_dtoa_r+0xa9c>
 8009b9c:	d1e0      	bne.n	8009b60 <_dtoa_r+0xa58>
 8009b9e:	f01a 0f01 	tst.w	sl, #1
 8009ba2:	d0dd      	beq.n	8009b60 <_dtoa_r+0xa58>
 8009ba4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ba8:	d1d7      	bne.n	8009b5a <_dtoa_r+0xa52>
 8009baa:	2339      	movs	r3, #57	; 0x39
 8009bac:	f88b 3000 	strb.w	r3, [fp]
 8009bb0:	462b      	mov	r3, r5
 8009bb2:	461d      	mov	r5, r3
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009bba:	2a39      	cmp	r2, #57	; 0x39
 8009bbc:	d071      	beq.n	8009ca2 <_dtoa_r+0xb9a>
 8009bbe:	3201      	adds	r2, #1
 8009bc0:	701a      	strb	r2, [r3, #0]
 8009bc2:	e746      	b.n	8009a52 <_dtoa_r+0x94a>
 8009bc4:	2a00      	cmp	r2, #0
 8009bc6:	dd07      	ble.n	8009bd8 <_dtoa_r+0xad0>
 8009bc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bcc:	d0ed      	beq.n	8009baa <_dtoa_r+0xaa2>
 8009bce:	f10a 0301 	add.w	r3, sl, #1
 8009bd2:	f88b 3000 	strb.w	r3, [fp]
 8009bd6:	e73c      	b.n	8009a52 <_dtoa_r+0x94a>
 8009bd8:	9b05      	ldr	r3, [sp, #20]
 8009bda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009bde:	4599      	cmp	r9, r3
 8009be0:	d047      	beq.n	8009c72 <_dtoa_r+0xb6a>
 8009be2:	ee18 1a10 	vmov	r1, s16
 8009be6:	2300      	movs	r3, #0
 8009be8:	220a      	movs	r2, #10
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 f8fa 	bl	8009de4 <__multadd>
 8009bf0:	45b8      	cmp	r8, r7
 8009bf2:	ee08 0a10 	vmov	s16, r0
 8009bf6:	f04f 0300 	mov.w	r3, #0
 8009bfa:	f04f 020a 	mov.w	r2, #10
 8009bfe:	4641      	mov	r1, r8
 8009c00:	4620      	mov	r0, r4
 8009c02:	d106      	bne.n	8009c12 <_dtoa_r+0xb0a>
 8009c04:	f000 f8ee 	bl	8009de4 <__multadd>
 8009c08:	4680      	mov	r8, r0
 8009c0a:	4607      	mov	r7, r0
 8009c0c:	f109 0901 	add.w	r9, r9, #1
 8009c10:	e772      	b.n	8009af8 <_dtoa_r+0x9f0>
 8009c12:	f000 f8e7 	bl	8009de4 <__multadd>
 8009c16:	4639      	mov	r1, r7
 8009c18:	4680      	mov	r8, r0
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	220a      	movs	r2, #10
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 f8e0 	bl	8009de4 <__multadd>
 8009c24:	4607      	mov	r7, r0
 8009c26:	e7f1      	b.n	8009c0c <_dtoa_r+0xb04>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	9302      	str	r3, [sp, #8]
 8009c2c:	9d01      	ldr	r5, [sp, #4]
 8009c2e:	ee18 0a10 	vmov	r0, s16
 8009c32:	4631      	mov	r1, r6
 8009c34:	f7ff f9da 	bl	8008fec <quorem>
 8009c38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c3c:	9b01      	ldr	r3, [sp, #4]
 8009c3e:	f805 ab01 	strb.w	sl, [r5], #1
 8009c42:	1aea      	subs	r2, r5, r3
 8009c44:	9b02      	ldr	r3, [sp, #8]
 8009c46:	4293      	cmp	r3, r2
 8009c48:	dd09      	ble.n	8009c5e <_dtoa_r+0xb56>
 8009c4a:	ee18 1a10 	vmov	r1, s16
 8009c4e:	2300      	movs	r3, #0
 8009c50:	220a      	movs	r2, #10
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 f8c6 	bl	8009de4 <__multadd>
 8009c58:	ee08 0a10 	vmov	s16, r0
 8009c5c:	e7e7      	b.n	8009c2e <_dtoa_r+0xb26>
 8009c5e:	9b02      	ldr	r3, [sp, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bfc8      	it	gt
 8009c64:	461d      	movgt	r5, r3
 8009c66:	9b01      	ldr	r3, [sp, #4]
 8009c68:	bfd8      	it	le
 8009c6a:	2501      	movle	r5, #1
 8009c6c:	441d      	add	r5, r3
 8009c6e:	f04f 0800 	mov.w	r8, #0
 8009c72:	ee18 1a10 	vmov	r1, s16
 8009c76:	2201      	movs	r2, #1
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f000 fa63 	bl	800a144 <__lshift>
 8009c7e:	4631      	mov	r1, r6
 8009c80:	ee08 0a10 	vmov	s16, r0
 8009c84:	f000 face 	bl	800a224 <__mcmp>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	dc91      	bgt.n	8009bb0 <_dtoa_r+0xaa8>
 8009c8c:	d102      	bne.n	8009c94 <_dtoa_r+0xb8c>
 8009c8e:	f01a 0f01 	tst.w	sl, #1
 8009c92:	d18d      	bne.n	8009bb0 <_dtoa_r+0xaa8>
 8009c94:	462b      	mov	r3, r5
 8009c96:	461d      	mov	r5, r3
 8009c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c9c:	2a30      	cmp	r2, #48	; 0x30
 8009c9e:	d0fa      	beq.n	8009c96 <_dtoa_r+0xb8e>
 8009ca0:	e6d7      	b.n	8009a52 <_dtoa_r+0x94a>
 8009ca2:	9a01      	ldr	r2, [sp, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d184      	bne.n	8009bb2 <_dtoa_r+0xaaa>
 8009ca8:	9b00      	ldr	r3, [sp, #0]
 8009caa:	3301      	adds	r3, #1
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	2331      	movs	r3, #49	; 0x31
 8009cb0:	7013      	strb	r3, [r2, #0]
 8009cb2:	e6ce      	b.n	8009a52 <_dtoa_r+0x94a>
 8009cb4:	4b09      	ldr	r3, [pc, #36]	; (8009cdc <_dtoa_r+0xbd4>)
 8009cb6:	f7ff ba95 	b.w	80091e4 <_dtoa_r+0xdc>
 8009cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f47f aa6e 	bne.w	800919e <_dtoa_r+0x96>
 8009cc2:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <_dtoa_r+0xbd8>)
 8009cc4:	f7ff ba8e 	b.w	80091e4 <_dtoa_r+0xdc>
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dcae      	bgt.n	8009c2c <_dtoa_r+0xb24>
 8009cce:	9b06      	ldr	r3, [sp, #24]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	f73f aea8 	bgt.w	8009a26 <_dtoa_r+0x91e>
 8009cd6:	e7a9      	b.n	8009c2c <_dtoa_r+0xb24>
 8009cd8:	0800bf87 	.word	0x0800bf87
 8009cdc:	0800bee4 	.word	0x0800bee4
 8009ce0:	0800bf08 	.word	0x0800bf08

08009ce4 <_localeconv_r>:
 8009ce4:	4800      	ldr	r0, [pc, #0]	; (8009ce8 <_localeconv_r+0x4>)
 8009ce6:	4770      	bx	lr
 8009ce8:	200001b8 	.word	0x200001b8

08009cec <memcpy>:
 8009cec:	440a      	add	r2, r1
 8009cee:	4291      	cmp	r1, r2
 8009cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cf4:	d100      	bne.n	8009cf8 <memcpy+0xc>
 8009cf6:	4770      	bx	lr
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d02:	4291      	cmp	r1, r2
 8009d04:	d1f9      	bne.n	8009cfa <memcpy+0xe>
 8009d06:	bd10      	pop	{r4, pc}

08009d08 <__malloc_lock>:
 8009d08:	4801      	ldr	r0, [pc, #4]	; (8009d10 <__malloc_lock+0x8>)
 8009d0a:	f000 bd30 	b.w	800a76e <__retarget_lock_acquire_recursive>
 8009d0e:	bf00      	nop
 8009d10:	20000608 	.word	0x20000608

08009d14 <__malloc_unlock>:
 8009d14:	4801      	ldr	r0, [pc, #4]	; (8009d1c <__malloc_unlock+0x8>)
 8009d16:	f000 bd2b 	b.w	800a770 <__retarget_lock_release_recursive>
 8009d1a:	bf00      	nop
 8009d1c:	20000608 	.word	0x20000608

08009d20 <_Balloc>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d24:	4604      	mov	r4, r0
 8009d26:	460d      	mov	r5, r1
 8009d28:	b976      	cbnz	r6, 8009d48 <_Balloc+0x28>
 8009d2a:	2010      	movs	r0, #16
 8009d2c:	f7fe fb7a 	bl	8008424 <malloc>
 8009d30:	4602      	mov	r2, r0
 8009d32:	6260      	str	r0, [r4, #36]	; 0x24
 8009d34:	b920      	cbnz	r0, 8009d40 <_Balloc+0x20>
 8009d36:	4b18      	ldr	r3, [pc, #96]	; (8009d98 <_Balloc+0x78>)
 8009d38:	4818      	ldr	r0, [pc, #96]	; (8009d9c <_Balloc+0x7c>)
 8009d3a:	2166      	movs	r1, #102	; 0x66
 8009d3c:	f000 fce6 	bl	800a70c <__assert_func>
 8009d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d44:	6006      	str	r6, [r0, #0]
 8009d46:	60c6      	str	r6, [r0, #12]
 8009d48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d4a:	68f3      	ldr	r3, [r6, #12]
 8009d4c:	b183      	cbz	r3, 8009d70 <_Balloc+0x50>
 8009d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d56:	b9b8      	cbnz	r0, 8009d88 <_Balloc+0x68>
 8009d58:	2101      	movs	r1, #1
 8009d5a:	fa01 f605 	lsl.w	r6, r1, r5
 8009d5e:	1d72      	adds	r2, r6, #5
 8009d60:	0092      	lsls	r2, r2, #2
 8009d62:	4620      	mov	r0, r4
 8009d64:	f000 fb60 	bl	800a428 <_calloc_r>
 8009d68:	b160      	cbz	r0, 8009d84 <_Balloc+0x64>
 8009d6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d6e:	e00e      	b.n	8009d8e <_Balloc+0x6e>
 8009d70:	2221      	movs	r2, #33	; 0x21
 8009d72:	2104      	movs	r1, #4
 8009d74:	4620      	mov	r0, r4
 8009d76:	f000 fb57 	bl	800a428 <_calloc_r>
 8009d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d7c:	60f0      	str	r0, [r6, #12]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1e4      	bne.n	8009d4e <_Balloc+0x2e>
 8009d84:	2000      	movs	r0, #0
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	6802      	ldr	r2, [r0, #0]
 8009d8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d94:	e7f7      	b.n	8009d86 <_Balloc+0x66>
 8009d96:	bf00      	nop
 8009d98:	0800bf15 	.word	0x0800bf15
 8009d9c:	0800bf98 	.word	0x0800bf98

08009da0 <_Bfree>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009da4:	4605      	mov	r5, r0
 8009da6:	460c      	mov	r4, r1
 8009da8:	b976      	cbnz	r6, 8009dc8 <_Bfree+0x28>
 8009daa:	2010      	movs	r0, #16
 8009dac:	f7fe fb3a 	bl	8008424 <malloc>
 8009db0:	4602      	mov	r2, r0
 8009db2:	6268      	str	r0, [r5, #36]	; 0x24
 8009db4:	b920      	cbnz	r0, 8009dc0 <_Bfree+0x20>
 8009db6:	4b09      	ldr	r3, [pc, #36]	; (8009ddc <_Bfree+0x3c>)
 8009db8:	4809      	ldr	r0, [pc, #36]	; (8009de0 <_Bfree+0x40>)
 8009dba:	218a      	movs	r1, #138	; 0x8a
 8009dbc:	f000 fca6 	bl	800a70c <__assert_func>
 8009dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dc4:	6006      	str	r6, [r0, #0]
 8009dc6:	60c6      	str	r6, [r0, #12]
 8009dc8:	b13c      	cbz	r4, 8009dda <_Bfree+0x3a>
 8009dca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009dcc:	6862      	ldr	r2, [r4, #4]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dd4:	6021      	str	r1, [r4, #0]
 8009dd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	0800bf15 	.word	0x0800bf15
 8009de0:	0800bf98 	.word	0x0800bf98

08009de4 <__multadd>:
 8009de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de8:	690d      	ldr	r5, [r1, #16]
 8009dea:	4607      	mov	r7, r0
 8009dec:	460c      	mov	r4, r1
 8009dee:	461e      	mov	r6, r3
 8009df0:	f101 0c14 	add.w	ip, r1, #20
 8009df4:	2000      	movs	r0, #0
 8009df6:	f8dc 3000 	ldr.w	r3, [ip]
 8009dfa:	b299      	uxth	r1, r3
 8009dfc:	fb02 6101 	mla	r1, r2, r1, r6
 8009e00:	0c1e      	lsrs	r6, r3, #16
 8009e02:	0c0b      	lsrs	r3, r1, #16
 8009e04:	fb02 3306 	mla	r3, r2, r6, r3
 8009e08:	b289      	uxth	r1, r1
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e10:	4285      	cmp	r5, r0
 8009e12:	f84c 1b04 	str.w	r1, [ip], #4
 8009e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e1a:	dcec      	bgt.n	8009df6 <__multadd+0x12>
 8009e1c:	b30e      	cbz	r6, 8009e62 <__multadd+0x7e>
 8009e1e:	68a3      	ldr	r3, [r4, #8]
 8009e20:	42ab      	cmp	r3, r5
 8009e22:	dc19      	bgt.n	8009e58 <__multadd+0x74>
 8009e24:	6861      	ldr	r1, [r4, #4]
 8009e26:	4638      	mov	r0, r7
 8009e28:	3101      	adds	r1, #1
 8009e2a:	f7ff ff79 	bl	8009d20 <_Balloc>
 8009e2e:	4680      	mov	r8, r0
 8009e30:	b928      	cbnz	r0, 8009e3e <__multadd+0x5a>
 8009e32:	4602      	mov	r2, r0
 8009e34:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <__multadd+0x84>)
 8009e36:	480d      	ldr	r0, [pc, #52]	; (8009e6c <__multadd+0x88>)
 8009e38:	21b5      	movs	r1, #181	; 0xb5
 8009e3a:	f000 fc67 	bl	800a70c <__assert_func>
 8009e3e:	6922      	ldr	r2, [r4, #16]
 8009e40:	3202      	adds	r2, #2
 8009e42:	f104 010c 	add.w	r1, r4, #12
 8009e46:	0092      	lsls	r2, r2, #2
 8009e48:	300c      	adds	r0, #12
 8009e4a:	f7ff ff4f 	bl	8009cec <memcpy>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4638      	mov	r0, r7
 8009e52:	f7ff ffa5 	bl	8009da0 <_Bfree>
 8009e56:	4644      	mov	r4, r8
 8009e58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e5c:	3501      	adds	r5, #1
 8009e5e:	615e      	str	r6, [r3, #20]
 8009e60:	6125      	str	r5, [r4, #16]
 8009e62:	4620      	mov	r0, r4
 8009e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e68:	0800bf87 	.word	0x0800bf87
 8009e6c:	0800bf98 	.word	0x0800bf98

08009e70 <__hi0bits>:
 8009e70:	0c03      	lsrs	r3, r0, #16
 8009e72:	041b      	lsls	r3, r3, #16
 8009e74:	b9d3      	cbnz	r3, 8009eac <__hi0bits+0x3c>
 8009e76:	0400      	lsls	r0, r0, #16
 8009e78:	2310      	movs	r3, #16
 8009e7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e7e:	bf04      	itt	eq
 8009e80:	0200      	lsleq	r0, r0, #8
 8009e82:	3308      	addeq	r3, #8
 8009e84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e88:	bf04      	itt	eq
 8009e8a:	0100      	lsleq	r0, r0, #4
 8009e8c:	3304      	addeq	r3, #4
 8009e8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e92:	bf04      	itt	eq
 8009e94:	0080      	lsleq	r0, r0, #2
 8009e96:	3302      	addeq	r3, #2
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	db05      	blt.n	8009ea8 <__hi0bits+0x38>
 8009e9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ea0:	f103 0301 	add.w	r3, r3, #1
 8009ea4:	bf08      	it	eq
 8009ea6:	2320      	moveq	r3, #32
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	4770      	bx	lr
 8009eac:	2300      	movs	r3, #0
 8009eae:	e7e4      	b.n	8009e7a <__hi0bits+0xa>

08009eb0 <__lo0bits>:
 8009eb0:	6803      	ldr	r3, [r0, #0]
 8009eb2:	f013 0207 	ands.w	r2, r3, #7
 8009eb6:	4601      	mov	r1, r0
 8009eb8:	d00b      	beq.n	8009ed2 <__lo0bits+0x22>
 8009eba:	07da      	lsls	r2, r3, #31
 8009ebc:	d423      	bmi.n	8009f06 <__lo0bits+0x56>
 8009ebe:	0798      	lsls	r0, r3, #30
 8009ec0:	bf49      	itett	mi
 8009ec2:	085b      	lsrmi	r3, r3, #1
 8009ec4:	089b      	lsrpl	r3, r3, #2
 8009ec6:	2001      	movmi	r0, #1
 8009ec8:	600b      	strmi	r3, [r1, #0]
 8009eca:	bf5c      	itt	pl
 8009ecc:	600b      	strpl	r3, [r1, #0]
 8009ece:	2002      	movpl	r0, #2
 8009ed0:	4770      	bx	lr
 8009ed2:	b298      	uxth	r0, r3
 8009ed4:	b9a8      	cbnz	r0, 8009f02 <__lo0bits+0x52>
 8009ed6:	0c1b      	lsrs	r3, r3, #16
 8009ed8:	2010      	movs	r0, #16
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	b90a      	cbnz	r2, 8009ee2 <__lo0bits+0x32>
 8009ede:	3008      	adds	r0, #8
 8009ee0:	0a1b      	lsrs	r3, r3, #8
 8009ee2:	071a      	lsls	r2, r3, #28
 8009ee4:	bf04      	itt	eq
 8009ee6:	091b      	lsreq	r3, r3, #4
 8009ee8:	3004      	addeq	r0, #4
 8009eea:	079a      	lsls	r2, r3, #30
 8009eec:	bf04      	itt	eq
 8009eee:	089b      	lsreq	r3, r3, #2
 8009ef0:	3002      	addeq	r0, #2
 8009ef2:	07da      	lsls	r2, r3, #31
 8009ef4:	d403      	bmi.n	8009efe <__lo0bits+0x4e>
 8009ef6:	085b      	lsrs	r3, r3, #1
 8009ef8:	f100 0001 	add.w	r0, r0, #1
 8009efc:	d005      	beq.n	8009f0a <__lo0bits+0x5a>
 8009efe:	600b      	str	r3, [r1, #0]
 8009f00:	4770      	bx	lr
 8009f02:	4610      	mov	r0, r2
 8009f04:	e7e9      	b.n	8009eda <__lo0bits+0x2a>
 8009f06:	2000      	movs	r0, #0
 8009f08:	4770      	bx	lr
 8009f0a:	2020      	movs	r0, #32
 8009f0c:	4770      	bx	lr
	...

08009f10 <__i2b>:
 8009f10:	b510      	push	{r4, lr}
 8009f12:	460c      	mov	r4, r1
 8009f14:	2101      	movs	r1, #1
 8009f16:	f7ff ff03 	bl	8009d20 <_Balloc>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	b928      	cbnz	r0, 8009f2a <__i2b+0x1a>
 8009f1e:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <__i2b+0x24>)
 8009f20:	4805      	ldr	r0, [pc, #20]	; (8009f38 <__i2b+0x28>)
 8009f22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f26:	f000 fbf1 	bl	800a70c <__assert_func>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	6144      	str	r4, [r0, #20]
 8009f2e:	6103      	str	r3, [r0, #16]
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	bf00      	nop
 8009f34:	0800bf87 	.word	0x0800bf87
 8009f38:	0800bf98 	.word	0x0800bf98

08009f3c <__multiply>:
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	4691      	mov	r9, r2
 8009f42:	690a      	ldr	r2, [r1, #16]
 8009f44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	bfb8      	it	lt
 8009f4c:	460b      	movlt	r3, r1
 8009f4e:	460c      	mov	r4, r1
 8009f50:	bfbc      	itt	lt
 8009f52:	464c      	movlt	r4, r9
 8009f54:	4699      	movlt	r9, r3
 8009f56:	6927      	ldr	r7, [r4, #16]
 8009f58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f5c:	68a3      	ldr	r3, [r4, #8]
 8009f5e:	6861      	ldr	r1, [r4, #4]
 8009f60:	eb07 060a 	add.w	r6, r7, sl
 8009f64:	42b3      	cmp	r3, r6
 8009f66:	b085      	sub	sp, #20
 8009f68:	bfb8      	it	lt
 8009f6a:	3101      	addlt	r1, #1
 8009f6c:	f7ff fed8 	bl	8009d20 <_Balloc>
 8009f70:	b930      	cbnz	r0, 8009f80 <__multiply+0x44>
 8009f72:	4602      	mov	r2, r0
 8009f74:	4b44      	ldr	r3, [pc, #272]	; (800a088 <__multiply+0x14c>)
 8009f76:	4845      	ldr	r0, [pc, #276]	; (800a08c <__multiply+0x150>)
 8009f78:	f240 115d 	movw	r1, #349	; 0x15d
 8009f7c:	f000 fbc6 	bl	800a70c <__assert_func>
 8009f80:	f100 0514 	add.w	r5, r0, #20
 8009f84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f88:	462b      	mov	r3, r5
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	4543      	cmp	r3, r8
 8009f8e:	d321      	bcc.n	8009fd4 <__multiply+0x98>
 8009f90:	f104 0314 	add.w	r3, r4, #20
 8009f94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f98:	f109 0314 	add.w	r3, r9, #20
 8009f9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009fa0:	9202      	str	r2, [sp, #8]
 8009fa2:	1b3a      	subs	r2, r7, r4
 8009fa4:	3a15      	subs	r2, #21
 8009fa6:	f022 0203 	bic.w	r2, r2, #3
 8009faa:	3204      	adds	r2, #4
 8009fac:	f104 0115 	add.w	r1, r4, #21
 8009fb0:	428f      	cmp	r7, r1
 8009fb2:	bf38      	it	cc
 8009fb4:	2204      	movcc	r2, #4
 8009fb6:	9201      	str	r2, [sp, #4]
 8009fb8:	9a02      	ldr	r2, [sp, #8]
 8009fba:	9303      	str	r3, [sp, #12]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d80c      	bhi.n	8009fda <__multiply+0x9e>
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	dd03      	ble.n	8009fcc <__multiply+0x90>
 8009fc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d05a      	beq.n	800a082 <__multiply+0x146>
 8009fcc:	6106      	str	r6, [r0, #16]
 8009fce:	b005      	add	sp, #20
 8009fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd4:	f843 2b04 	str.w	r2, [r3], #4
 8009fd8:	e7d8      	b.n	8009f8c <__multiply+0x50>
 8009fda:	f8b3 a000 	ldrh.w	sl, [r3]
 8009fde:	f1ba 0f00 	cmp.w	sl, #0
 8009fe2:	d024      	beq.n	800a02e <__multiply+0xf2>
 8009fe4:	f104 0e14 	add.w	lr, r4, #20
 8009fe8:	46a9      	mov	r9, r5
 8009fea:	f04f 0c00 	mov.w	ip, #0
 8009fee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ff2:	f8d9 1000 	ldr.w	r1, [r9]
 8009ff6:	fa1f fb82 	uxth.w	fp, r2
 8009ffa:	b289      	uxth	r1, r1
 8009ffc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a000:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a004:	f8d9 2000 	ldr.w	r2, [r9]
 800a008:	4461      	add	r1, ip
 800a00a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a00e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a012:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a016:	b289      	uxth	r1, r1
 800a018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a01c:	4577      	cmp	r7, lr
 800a01e:	f849 1b04 	str.w	r1, [r9], #4
 800a022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a026:	d8e2      	bhi.n	8009fee <__multiply+0xb2>
 800a028:	9a01      	ldr	r2, [sp, #4]
 800a02a:	f845 c002 	str.w	ip, [r5, r2]
 800a02e:	9a03      	ldr	r2, [sp, #12]
 800a030:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a034:	3304      	adds	r3, #4
 800a036:	f1b9 0f00 	cmp.w	r9, #0
 800a03a:	d020      	beq.n	800a07e <__multiply+0x142>
 800a03c:	6829      	ldr	r1, [r5, #0]
 800a03e:	f104 0c14 	add.w	ip, r4, #20
 800a042:	46ae      	mov	lr, r5
 800a044:	f04f 0a00 	mov.w	sl, #0
 800a048:	f8bc b000 	ldrh.w	fp, [ip]
 800a04c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a050:	fb09 220b 	mla	r2, r9, fp, r2
 800a054:	4492      	add	sl, r2
 800a056:	b289      	uxth	r1, r1
 800a058:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a05c:	f84e 1b04 	str.w	r1, [lr], #4
 800a060:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a064:	f8be 1000 	ldrh.w	r1, [lr]
 800a068:	0c12      	lsrs	r2, r2, #16
 800a06a:	fb09 1102 	mla	r1, r9, r2, r1
 800a06e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a072:	4567      	cmp	r7, ip
 800a074:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a078:	d8e6      	bhi.n	800a048 <__multiply+0x10c>
 800a07a:	9a01      	ldr	r2, [sp, #4]
 800a07c:	50a9      	str	r1, [r5, r2]
 800a07e:	3504      	adds	r5, #4
 800a080:	e79a      	b.n	8009fb8 <__multiply+0x7c>
 800a082:	3e01      	subs	r6, #1
 800a084:	e79c      	b.n	8009fc0 <__multiply+0x84>
 800a086:	bf00      	nop
 800a088:	0800bf87 	.word	0x0800bf87
 800a08c:	0800bf98 	.word	0x0800bf98

0800a090 <__pow5mult>:
 800a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a094:	4615      	mov	r5, r2
 800a096:	f012 0203 	ands.w	r2, r2, #3
 800a09a:	4606      	mov	r6, r0
 800a09c:	460f      	mov	r7, r1
 800a09e:	d007      	beq.n	800a0b0 <__pow5mult+0x20>
 800a0a0:	4c25      	ldr	r4, [pc, #148]	; (800a138 <__pow5mult+0xa8>)
 800a0a2:	3a01      	subs	r2, #1
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0aa:	f7ff fe9b 	bl	8009de4 <__multadd>
 800a0ae:	4607      	mov	r7, r0
 800a0b0:	10ad      	asrs	r5, r5, #2
 800a0b2:	d03d      	beq.n	800a130 <__pow5mult+0xa0>
 800a0b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a0b6:	b97c      	cbnz	r4, 800a0d8 <__pow5mult+0x48>
 800a0b8:	2010      	movs	r0, #16
 800a0ba:	f7fe f9b3 	bl	8008424 <malloc>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	6270      	str	r0, [r6, #36]	; 0x24
 800a0c2:	b928      	cbnz	r0, 800a0d0 <__pow5mult+0x40>
 800a0c4:	4b1d      	ldr	r3, [pc, #116]	; (800a13c <__pow5mult+0xac>)
 800a0c6:	481e      	ldr	r0, [pc, #120]	; (800a140 <__pow5mult+0xb0>)
 800a0c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a0cc:	f000 fb1e 	bl	800a70c <__assert_func>
 800a0d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0d4:	6004      	str	r4, [r0, #0]
 800a0d6:	60c4      	str	r4, [r0, #12]
 800a0d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a0dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0e0:	b94c      	cbnz	r4, 800a0f6 <__pow5mult+0x66>
 800a0e2:	f240 2171 	movw	r1, #625	; 0x271
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f7ff ff12 	bl	8009f10 <__i2b>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	6003      	str	r3, [r0, #0]
 800a0f6:	f04f 0900 	mov.w	r9, #0
 800a0fa:	07eb      	lsls	r3, r5, #31
 800a0fc:	d50a      	bpl.n	800a114 <__pow5mult+0x84>
 800a0fe:	4639      	mov	r1, r7
 800a100:	4622      	mov	r2, r4
 800a102:	4630      	mov	r0, r6
 800a104:	f7ff ff1a 	bl	8009f3c <__multiply>
 800a108:	4639      	mov	r1, r7
 800a10a:	4680      	mov	r8, r0
 800a10c:	4630      	mov	r0, r6
 800a10e:	f7ff fe47 	bl	8009da0 <_Bfree>
 800a112:	4647      	mov	r7, r8
 800a114:	106d      	asrs	r5, r5, #1
 800a116:	d00b      	beq.n	800a130 <__pow5mult+0xa0>
 800a118:	6820      	ldr	r0, [r4, #0]
 800a11a:	b938      	cbnz	r0, 800a12c <__pow5mult+0x9c>
 800a11c:	4622      	mov	r2, r4
 800a11e:	4621      	mov	r1, r4
 800a120:	4630      	mov	r0, r6
 800a122:	f7ff ff0b 	bl	8009f3c <__multiply>
 800a126:	6020      	str	r0, [r4, #0]
 800a128:	f8c0 9000 	str.w	r9, [r0]
 800a12c:	4604      	mov	r4, r0
 800a12e:	e7e4      	b.n	800a0fa <__pow5mult+0x6a>
 800a130:	4638      	mov	r0, r7
 800a132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a136:	bf00      	nop
 800a138:	0800c0e8 	.word	0x0800c0e8
 800a13c:	0800bf15 	.word	0x0800bf15
 800a140:	0800bf98 	.word	0x0800bf98

0800a144 <__lshift>:
 800a144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a148:	460c      	mov	r4, r1
 800a14a:	6849      	ldr	r1, [r1, #4]
 800a14c:	6923      	ldr	r3, [r4, #16]
 800a14e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a152:	68a3      	ldr	r3, [r4, #8]
 800a154:	4607      	mov	r7, r0
 800a156:	4691      	mov	r9, r2
 800a158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a15c:	f108 0601 	add.w	r6, r8, #1
 800a160:	42b3      	cmp	r3, r6
 800a162:	db0b      	blt.n	800a17c <__lshift+0x38>
 800a164:	4638      	mov	r0, r7
 800a166:	f7ff fddb 	bl	8009d20 <_Balloc>
 800a16a:	4605      	mov	r5, r0
 800a16c:	b948      	cbnz	r0, 800a182 <__lshift+0x3e>
 800a16e:	4602      	mov	r2, r0
 800a170:	4b2a      	ldr	r3, [pc, #168]	; (800a21c <__lshift+0xd8>)
 800a172:	482b      	ldr	r0, [pc, #172]	; (800a220 <__lshift+0xdc>)
 800a174:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a178:	f000 fac8 	bl	800a70c <__assert_func>
 800a17c:	3101      	adds	r1, #1
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	e7ee      	b.n	800a160 <__lshift+0x1c>
 800a182:	2300      	movs	r3, #0
 800a184:	f100 0114 	add.w	r1, r0, #20
 800a188:	f100 0210 	add.w	r2, r0, #16
 800a18c:	4618      	mov	r0, r3
 800a18e:	4553      	cmp	r3, sl
 800a190:	db37      	blt.n	800a202 <__lshift+0xbe>
 800a192:	6920      	ldr	r0, [r4, #16]
 800a194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a198:	f104 0314 	add.w	r3, r4, #20
 800a19c:	f019 091f 	ands.w	r9, r9, #31
 800a1a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1a8:	d02f      	beq.n	800a20a <__lshift+0xc6>
 800a1aa:	f1c9 0e20 	rsb	lr, r9, #32
 800a1ae:	468a      	mov	sl, r1
 800a1b0:	f04f 0c00 	mov.w	ip, #0
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	fa02 f209 	lsl.w	r2, r2, r9
 800a1ba:	ea42 020c 	orr.w	r2, r2, ip
 800a1be:	f84a 2b04 	str.w	r2, [sl], #4
 800a1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c6:	4298      	cmp	r0, r3
 800a1c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a1cc:	d8f2      	bhi.n	800a1b4 <__lshift+0x70>
 800a1ce:	1b03      	subs	r3, r0, r4
 800a1d0:	3b15      	subs	r3, #21
 800a1d2:	f023 0303 	bic.w	r3, r3, #3
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	f104 0215 	add.w	r2, r4, #21
 800a1dc:	4290      	cmp	r0, r2
 800a1de:	bf38      	it	cc
 800a1e0:	2304      	movcc	r3, #4
 800a1e2:	f841 c003 	str.w	ip, [r1, r3]
 800a1e6:	f1bc 0f00 	cmp.w	ip, #0
 800a1ea:	d001      	beq.n	800a1f0 <__lshift+0xac>
 800a1ec:	f108 0602 	add.w	r6, r8, #2
 800a1f0:	3e01      	subs	r6, #1
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	612e      	str	r6, [r5, #16]
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	f7ff fdd2 	bl	8009da0 <_Bfree>
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	f842 0f04 	str.w	r0, [r2, #4]!
 800a206:	3301      	adds	r3, #1
 800a208:	e7c1      	b.n	800a18e <__lshift+0x4a>
 800a20a:	3904      	subs	r1, #4
 800a20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a210:	f841 2f04 	str.w	r2, [r1, #4]!
 800a214:	4298      	cmp	r0, r3
 800a216:	d8f9      	bhi.n	800a20c <__lshift+0xc8>
 800a218:	e7ea      	b.n	800a1f0 <__lshift+0xac>
 800a21a:	bf00      	nop
 800a21c:	0800bf87 	.word	0x0800bf87
 800a220:	0800bf98 	.word	0x0800bf98

0800a224 <__mcmp>:
 800a224:	b530      	push	{r4, r5, lr}
 800a226:	6902      	ldr	r2, [r0, #16]
 800a228:	690c      	ldr	r4, [r1, #16]
 800a22a:	1b12      	subs	r2, r2, r4
 800a22c:	d10e      	bne.n	800a24c <__mcmp+0x28>
 800a22e:	f100 0314 	add.w	r3, r0, #20
 800a232:	3114      	adds	r1, #20
 800a234:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a238:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a23c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a240:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a244:	42a5      	cmp	r5, r4
 800a246:	d003      	beq.n	800a250 <__mcmp+0x2c>
 800a248:	d305      	bcc.n	800a256 <__mcmp+0x32>
 800a24a:	2201      	movs	r2, #1
 800a24c:	4610      	mov	r0, r2
 800a24e:	bd30      	pop	{r4, r5, pc}
 800a250:	4283      	cmp	r3, r0
 800a252:	d3f3      	bcc.n	800a23c <__mcmp+0x18>
 800a254:	e7fa      	b.n	800a24c <__mcmp+0x28>
 800a256:	f04f 32ff 	mov.w	r2, #4294967295
 800a25a:	e7f7      	b.n	800a24c <__mcmp+0x28>

0800a25c <__mdiff>:
 800a25c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a260:	460c      	mov	r4, r1
 800a262:	4606      	mov	r6, r0
 800a264:	4611      	mov	r1, r2
 800a266:	4620      	mov	r0, r4
 800a268:	4690      	mov	r8, r2
 800a26a:	f7ff ffdb 	bl	800a224 <__mcmp>
 800a26e:	1e05      	subs	r5, r0, #0
 800a270:	d110      	bne.n	800a294 <__mdiff+0x38>
 800a272:	4629      	mov	r1, r5
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff fd53 	bl	8009d20 <_Balloc>
 800a27a:	b930      	cbnz	r0, 800a28a <__mdiff+0x2e>
 800a27c:	4b3a      	ldr	r3, [pc, #232]	; (800a368 <__mdiff+0x10c>)
 800a27e:	4602      	mov	r2, r0
 800a280:	f240 2132 	movw	r1, #562	; 0x232
 800a284:	4839      	ldr	r0, [pc, #228]	; (800a36c <__mdiff+0x110>)
 800a286:	f000 fa41 	bl	800a70c <__assert_func>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a294:	bfa4      	itt	ge
 800a296:	4643      	movge	r3, r8
 800a298:	46a0      	movge	r8, r4
 800a29a:	4630      	mov	r0, r6
 800a29c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2a0:	bfa6      	itte	ge
 800a2a2:	461c      	movge	r4, r3
 800a2a4:	2500      	movge	r5, #0
 800a2a6:	2501      	movlt	r5, #1
 800a2a8:	f7ff fd3a 	bl	8009d20 <_Balloc>
 800a2ac:	b920      	cbnz	r0, 800a2b8 <__mdiff+0x5c>
 800a2ae:	4b2e      	ldr	r3, [pc, #184]	; (800a368 <__mdiff+0x10c>)
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a2b6:	e7e5      	b.n	800a284 <__mdiff+0x28>
 800a2b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a2bc:	6926      	ldr	r6, [r4, #16]
 800a2be:	60c5      	str	r5, [r0, #12]
 800a2c0:	f104 0914 	add.w	r9, r4, #20
 800a2c4:	f108 0514 	add.w	r5, r8, #20
 800a2c8:	f100 0e14 	add.w	lr, r0, #20
 800a2cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a2d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2d4:	f108 0210 	add.w	r2, r8, #16
 800a2d8:	46f2      	mov	sl, lr
 800a2da:	2100      	movs	r1, #0
 800a2dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a2e4:	fa1f f883 	uxth.w	r8, r3
 800a2e8:	fa11 f18b 	uxtah	r1, r1, fp
 800a2ec:	0c1b      	lsrs	r3, r3, #16
 800a2ee:	eba1 0808 	sub.w	r8, r1, r8
 800a2f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a2fa:	fa1f f888 	uxth.w	r8, r8
 800a2fe:	1419      	asrs	r1, r3, #16
 800a300:	454e      	cmp	r6, r9
 800a302:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a306:	f84a 3b04 	str.w	r3, [sl], #4
 800a30a:	d8e7      	bhi.n	800a2dc <__mdiff+0x80>
 800a30c:	1b33      	subs	r3, r6, r4
 800a30e:	3b15      	subs	r3, #21
 800a310:	f023 0303 	bic.w	r3, r3, #3
 800a314:	3304      	adds	r3, #4
 800a316:	3415      	adds	r4, #21
 800a318:	42a6      	cmp	r6, r4
 800a31a:	bf38      	it	cc
 800a31c:	2304      	movcc	r3, #4
 800a31e:	441d      	add	r5, r3
 800a320:	4473      	add	r3, lr
 800a322:	469e      	mov	lr, r3
 800a324:	462e      	mov	r6, r5
 800a326:	4566      	cmp	r6, ip
 800a328:	d30e      	bcc.n	800a348 <__mdiff+0xec>
 800a32a:	f10c 0203 	add.w	r2, ip, #3
 800a32e:	1b52      	subs	r2, r2, r5
 800a330:	f022 0203 	bic.w	r2, r2, #3
 800a334:	3d03      	subs	r5, #3
 800a336:	45ac      	cmp	ip, r5
 800a338:	bf38      	it	cc
 800a33a:	2200      	movcc	r2, #0
 800a33c:	441a      	add	r2, r3
 800a33e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a342:	b17b      	cbz	r3, 800a364 <__mdiff+0x108>
 800a344:	6107      	str	r7, [r0, #16]
 800a346:	e7a3      	b.n	800a290 <__mdiff+0x34>
 800a348:	f856 8b04 	ldr.w	r8, [r6], #4
 800a34c:	fa11 f288 	uxtah	r2, r1, r8
 800a350:	1414      	asrs	r4, r2, #16
 800a352:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a356:	b292      	uxth	r2, r2
 800a358:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a35c:	f84e 2b04 	str.w	r2, [lr], #4
 800a360:	1421      	asrs	r1, r4, #16
 800a362:	e7e0      	b.n	800a326 <__mdiff+0xca>
 800a364:	3f01      	subs	r7, #1
 800a366:	e7ea      	b.n	800a33e <__mdiff+0xe2>
 800a368:	0800bf87 	.word	0x0800bf87
 800a36c:	0800bf98 	.word	0x0800bf98

0800a370 <__d2b>:
 800a370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a374:	4689      	mov	r9, r1
 800a376:	2101      	movs	r1, #1
 800a378:	ec57 6b10 	vmov	r6, r7, d0
 800a37c:	4690      	mov	r8, r2
 800a37e:	f7ff fccf 	bl	8009d20 <_Balloc>
 800a382:	4604      	mov	r4, r0
 800a384:	b930      	cbnz	r0, 800a394 <__d2b+0x24>
 800a386:	4602      	mov	r2, r0
 800a388:	4b25      	ldr	r3, [pc, #148]	; (800a420 <__d2b+0xb0>)
 800a38a:	4826      	ldr	r0, [pc, #152]	; (800a424 <__d2b+0xb4>)
 800a38c:	f240 310a 	movw	r1, #778	; 0x30a
 800a390:	f000 f9bc 	bl	800a70c <__assert_func>
 800a394:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a39c:	bb35      	cbnz	r5, 800a3ec <__d2b+0x7c>
 800a39e:	2e00      	cmp	r6, #0
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	d028      	beq.n	800a3f6 <__d2b+0x86>
 800a3a4:	4668      	mov	r0, sp
 800a3a6:	9600      	str	r6, [sp, #0]
 800a3a8:	f7ff fd82 	bl	8009eb0 <__lo0bits>
 800a3ac:	9900      	ldr	r1, [sp, #0]
 800a3ae:	b300      	cbz	r0, 800a3f2 <__d2b+0x82>
 800a3b0:	9a01      	ldr	r2, [sp, #4]
 800a3b2:	f1c0 0320 	rsb	r3, r0, #32
 800a3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ba:	430b      	orrs	r3, r1
 800a3bc:	40c2      	lsrs	r2, r0
 800a3be:	6163      	str	r3, [r4, #20]
 800a3c0:	9201      	str	r2, [sp, #4]
 800a3c2:	9b01      	ldr	r3, [sp, #4]
 800a3c4:	61a3      	str	r3, [r4, #24]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	bf14      	ite	ne
 800a3ca:	2202      	movne	r2, #2
 800a3cc:	2201      	moveq	r2, #1
 800a3ce:	6122      	str	r2, [r4, #16]
 800a3d0:	b1d5      	cbz	r5, 800a408 <__d2b+0x98>
 800a3d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3d6:	4405      	add	r5, r0
 800a3d8:	f8c9 5000 	str.w	r5, [r9]
 800a3dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3e0:	f8c8 0000 	str.w	r0, [r8]
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	b003      	add	sp, #12
 800a3e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3f0:	e7d5      	b.n	800a39e <__d2b+0x2e>
 800a3f2:	6161      	str	r1, [r4, #20]
 800a3f4:	e7e5      	b.n	800a3c2 <__d2b+0x52>
 800a3f6:	a801      	add	r0, sp, #4
 800a3f8:	f7ff fd5a 	bl	8009eb0 <__lo0bits>
 800a3fc:	9b01      	ldr	r3, [sp, #4]
 800a3fe:	6163      	str	r3, [r4, #20]
 800a400:	2201      	movs	r2, #1
 800a402:	6122      	str	r2, [r4, #16]
 800a404:	3020      	adds	r0, #32
 800a406:	e7e3      	b.n	800a3d0 <__d2b+0x60>
 800a408:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a40c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a410:	f8c9 0000 	str.w	r0, [r9]
 800a414:	6918      	ldr	r0, [r3, #16]
 800a416:	f7ff fd2b 	bl	8009e70 <__hi0bits>
 800a41a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a41e:	e7df      	b.n	800a3e0 <__d2b+0x70>
 800a420:	0800bf87 	.word	0x0800bf87
 800a424:	0800bf98 	.word	0x0800bf98

0800a428 <_calloc_r>:
 800a428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a42a:	fba1 2402 	umull	r2, r4, r1, r2
 800a42e:	b94c      	cbnz	r4, 800a444 <_calloc_r+0x1c>
 800a430:	4611      	mov	r1, r2
 800a432:	9201      	str	r2, [sp, #4]
 800a434:	f7fe f872 	bl	800851c <_malloc_r>
 800a438:	9a01      	ldr	r2, [sp, #4]
 800a43a:	4605      	mov	r5, r0
 800a43c:	b930      	cbnz	r0, 800a44c <_calloc_r+0x24>
 800a43e:	4628      	mov	r0, r5
 800a440:	b003      	add	sp, #12
 800a442:	bd30      	pop	{r4, r5, pc}
 800a444:	220c      	movs	r2, #12
 800a446:	6002      	str	r2, [r0, #0]
 800a448:	2500      	movs	r5, #0
 800a44a:	e7f8      	b.n	800a43e <_calloc_r+0x16>
 800a44c:	4621      	mov	r1, r4
 800a44e:	f7fd fff1 	bl	8008434 <memset>
 800a452:	e7f4      	b.n	800a43e <_calloc_r+0x16>

0800a454 <__ssputs_r>:
 800a454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a458:	688e      	ldr	r6, [r1, #8]
 800a45a:	429e      	cmp	r6, r3
 800a45c:	4682      	mov	sl, r0
 800a45e:	460c      	mov	r4, r1
 800a460:	4690      	mov	r8, r2
 800a462:	461f      	mov	r7, r3
 800a464:	d838      	bhi.n	800a4d8 <__ssputs_r+0x84>
 800a466:	898a      	ldrh	r2, [r1, #12]
 800a468:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a46c:	d032      	beq.n	800a4d4 <__ssputs_r+0x80>
 800a46e:	6825      	ldr	r5, [r4, #0]
 800a470:	6909      	ldr	r1, [r1, #16]
 800a472:	eba5 0901 	sub.w	r9, r5, r1
 800a476:	6965      	ldr	r5, [r4, #20]
 800a478:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a47c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a480:	3301      	adds	r3, #1
 800a482:	444b      	add	r3, r9
 800a484:	106d      	asrs	r5, r5, #1
 800a486:	429d      	cmp	r5, r3
 800a488:	bf38      	it	cc
 800a48a:	461d      	movcc	r5, r3
 800a48c:	0553      	lsls	r3, r2, #21
 800a48e:	d531      	bpl.n	800a4f4 <__ssputs_r+0xa0>
 800a490:	4629      	mov	r1, r5
 800a492:	f7fe f843 	bl	800851c <_malloc_r>
 800a496:	4606      	mov	r6, r0
 800a498:	b950      	cbnz	r0, 800a4b0 <__ssputs_r+0x5c>
 800a49a:	230c      	movs	r3, #12
 800a49c:	f8ca 3000 	str.w	r3, [sl]
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b0:	6921      	ldr	r1, [r4, #16]
 800a4b2:	464a      	mov	r2, r9
 800a4b4:	f7ff fc1a 	bl	8009cec <memcpy>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c2:	81a3      	strh	r3, [r4, #12]
 800a4c4:	6126      	str	r6, [r4, #16]
 800a4c6:	6165      	str	r5, [r4, #20]
 800a4c8:	444e      	add	r6, r9
 800a4ca:	eba5 0509 	sub.w	r5, r5, r9
 800a4ce:	6026      	str	r6, [r4, #0]
 800a4d0:	60a5      	str	r5, [r4, #8]
 800a4d2:	463e      	mov	r6, r7
 800a4d4:	42be      	cmp	r6, r7
 800a4d6:	d900      	bls.n	800a4da <__ssputs_r+0x86>
 800a4d8:	463e      	mov	r6, r7
 800a4da:	6820      	ldr	r0, [r4, #0]
 800a4dc:	4632      	mov	r2, r6
 800a4de:	4641      	mov	r1, r8
 800a4e0:	f000 f959 	bl	800a796 <memmove>
 800a4e4:	68a3      	ldr	r3, [r4, #8]
 800a4e6:	1b9b      	subs	r3, r3, r6
 800a4e8:	60a3      	str	r3, [r4, #8]
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	4433      	add	r3, r6
 800a4ee:	6023      	str	r3, [r4, #0]
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	e7db      	b.n	800a4ac <__ssputs_r+0x58>
 800a4f4:	462a      	mov	r2, r5
 800a4f6:	f000 f968 	bl	800a7ca <_realloc_r>
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d1e1      	bne.n	800a4c4 <__ssputs_r+0x70>
 800a500:	6921      	ldr	r1, [r4, #16]
 800a502:	4650      	mov	r0, sl
 800a504:	f7fd ff9e 	bl	8008444 <_free_r>
 800a508:	e7c7      	b.n	800a49a <__ssputs_r+0x46>
	...

0800a50c <_svfiprintf_r>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	4698      	mov	r8, r3
 800a512:	898b      	ldrh	r3, [r1, #12]
 800a514:	061b      	lsls	r3, r3, #24
 800a516:	b09d      	sub	sp, #116	; 0x74
 800a518:	4607      	mov	r7, r0
 800a51a:	460d      	mov	r5, r1
 800a51c:	4614      	mov	r4, r2
 800a51e:	d50e      	bpl.n	800a53e <_svfiprintf_r+0x32>
 800a520:	690b      	ldr	r3, [r1, #16]
 800a522:	b963      	cbnz	r3, 800a53e <_svfiprintf_r+0x32>
 800a524:	2140      	movs	r1, #64	; 0x40
 800a526:	f7fd fff9 	bl	800851c <_malloc_r>
 800a52a:	6028      	str	r0, [r5, #0]
 800a52c:	6128      	str	r0, [r5, #16]
 800a52e:	b920      	cbnz	r0, 800a53a <_svfiprintf_r+0x2e>
 800a530:	230c      	movs	r3, #12
 800a532:	603b      	str	r3, [r7, #0]
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	e0d1      	b.n	800a6de <_svfiprintf_r+0x1d2>
 800a53a:	2340      	movs	r3, #64	; 0x40
 800a53c:	616b      	str	r3, [r5, #20]
 800a53e:	2300      	movs	r3, #0
 800a540:	9309      	str	r3, [sp, #36]	; 0x24
 800a542:	2320      	movs	r3, #32
 800a544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a548:	f8cd 800c 	str.w	r8, [sp, #12]
 800a54c:	2330      	movs	r3, #48	; 0x30
 800a54e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a6f8 <_svfiprintf_r+0x1ec>
 800a552:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a556:	f04f 0901 	mov.w	r9, #1
 800a55a:	4623      	mov	r3, r4
 800a55c:	469a      	mov	sl, r3
 800a55e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a562:	b10a      	cbz	r2, 800a568 <_svfiprintf_r+0x5c>
 800a564:	2a25      	cmp	r2, #37	; 0x25
 800a566:	d1f9      	bne.n	800a55c <_svfiprintf_r+0x50>
 800a568:	ebba 0b04 	subs.w	fp, sl, r4
 800a56c:	d00b      	beq.n	800a586 <_svfiprintf_r+0x7a>
 800a56e:	465b      	mov	r3, fp
 800a570:	4622      	mov	r2, r4
 800a572:	4629      	mov	r1, r5
 800a574:	4638      	mov	r0, r7
 800a576:	f7ff ff6d 	bl	800a454 <__ssputs_r>
 800a57a:	3001      	adds	r0, #1
 800a57c:	f000 80aa 	beq.w	800a6d4 <_svfiprintf_r+0x1c8>
 800a580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a582:	445a      	add	r2, fp
 800a584:	9209      	str	r2, [sp, #36]	; 0x24
 800a586:	f89a 3000 	ldrb.w	r3, [sl]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 80a2 	beq.w	800a6d4 <_svfiprintf_r+0x1c8>
 800a590:	2300      	movs	r3, #0
 800a592:	f04f 32ff 	mov.w	r2, #4294967295
 800a596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a59a:	f10a 0a01 	add.w	sl, sl, #1
 800a59e:	9304      	str	r3, [sp, #16]
 800a5a0:	9307      	str	r3, [sp, #28]
 800a5a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a5a8:	4654      	mov	r4, sl
 800a5aa:	2205      	movs	r2, #5
 800a5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b0:	4851      	ldr	r0, [pc, #324]	; (800a6f8 <_svfiprintf_r+0x1ec>)
 800a5b2:	f7f5 fe1d 	bl	80001f0 <memchr>
 800a5b6:	9a04      	ldr	r2, [sp, #16]
 800a5b8:	b9d8      	cbnz	r0, 800a5f2 <_svfiprintf_r+0xe6>
 800a5ba:	06d0      	lsls	r0, r2, #27
 800a5bc:	bf44      	itt	mi
 800a5be:	2320      	movmi	r3, #32
 800a5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5c4:	0711      	lsls	r1, r2, #28
 800a5c6:	bf44      	itt	mi
 800a5c8:	232b      	movmi	r3, #43	; 0x2b
 800a5ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d4:	d015      	beq.n	800a602 <_svfiprintf_r+0xf6>
 800a5d6:	9a07      	ldr	r2, [sp, #28]
 800a5d8:	4654      	mov	r4, sl
 800a5da:	2000      	movs	r0, #0
 800a5dc:	f04f 0c0a 	mov.w	ip, #10
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5e6:	3b30      	subs	r3, #48	; 0x30
 800a5e8:	2b09      	cmp	r3, #9
 800a5ea:	d94e      	bls.n	800a68a <_svfiprintf_r+0x17e>
 800a5ec:	b1b0      	cbz	r0, 800a61c <_svfiprintf_r+0x110>
 800a5ee:	9207      	str	r2, [sp, #28]
 800a5f0:	e014      	b.n	800a61c <_svfiprintf_r+0x110>
 800a5f2:	eba0 0308 	sub.w	r3, r0, r8
 800a5f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	46a2      	mov	sl, r4
 800a600:	e7d2      	b.n	800a5a8 <_svfiprintf_r+0x9c>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	1d19      	adds	r1, r3, #4
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	9103      	str	r1, [sp, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	bfbb      	ittet	lt
 800a60e:	425b      	neglt	r3, r3
 800a610:	f042 0202 	orrlt.w	r2, r2, #2
 800a614:	9307      	strge	r3, [sp, #28]
 800a616:	9307      	strlt	r3, [sp, #28]
 800a618:	bfb8      	it	lt
 800a61a:	9204      	strlt	r2, [sp, #16]
 800a61c:	7823      	ldrb	r3, [r4, #0]
 800a61e:	2b2e      	cmp	r3, #46	; 0x2e
 800a620:	d10c      	bne.n	800a63c <_svfiprintf_r+0x130>
 800a622:	7863      	ldrb	r3, [r4, #1]
 800a624:	2b2a      	cmp	r3, #42	; 0x2a
 800a626:	d135      	bne.n	800a694 <_svfiprintf_r+0x188>
 800a628:	9b03      	ldr	r3, [sp, #12]
 800a62a:	1d1a      	adds	r2, r3, #4
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	9203      	str	r2, [sp, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	bfb8      	it	lt
 800a634:	f04f 33ff 	movlt.w	r3, #4294967295
 800a638:	3402      	adds	r4, #2
 800a63a:	9305      	str	r3, [sp, #20]
 800a63c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a708 <_svfiprintf_r+0x1fc>
 800a640:	7821      	ldrb	r1, [r4, #0]
 800a642:	2203      	movs	r2, #3
 800a644:	4650      	mov	r0, sl
 800a646:	f7f5 fdd3 	bl	80001f0 <memchr>
 800a64a:	b140      	cbz	r0, 800a65e <_svfiprintf_r+0x152>
 800a64c:	2340      	movs	r3, #64	; 0x40
 800a64e:	eba0 000a 	sub.w	r0, r0, sl
 800a652:	fa03 f000 	lsl.w	r0, r3, r0
 800a656:	9b04      	ldr	r3, [sp, #16]
 800a658:	4303      	orrs	r3, r0
 800a65a:	3401      	adds	r4, #1
 800a65c:	9304      	str	r3, [sp, #16]
 800a65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a662:	4826      	ldr	r0, [pc, #152]	; (800a6fc <_svfiprintf_r+0x1f0>)
 800a664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a668:	2206      	movs	r2, #6
 800a66a:	f7f5 fdc1 	bl	80001f0 <memchr>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d038      	beq.n	800a6e4 <_svfiprintf_r+0x1d8>
 800a672:	4b23      	ldr	r3, [pc, #140]	; (800a700 <_svfiprintf_r+0x1f4>)
 800a674:	bb1b      	cbnz	r3, 800a6be <_svfiprintf_r+0x1b2>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	3307      	adds	r3, #7
 800a67a:	f023 0307 	bic.w	r3, r3, #7
 800a67e:	3308      	adds	r3, #8
 800a680:	9303      	str	r3, [sp, #12]
 800a682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a684:	4433      	add	r3, r6
 800a686:	9309      	str	r3, [sp, #36]	; 0x24
 800a688:	e767      	b.n	800a55a <_svfiprintf_r+0x4e>
 800a68a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a68e:	460c      	mov	r4, r1
 800a690:	2001      	movs	r0, #1
 800a692:	e7a5      	b.n	800a5e0 <_svfiprintf_r+0xd4>
 800a694:	2300      	movs	r3, #0
 800a696:	3401      	adds	r4, #1
 800a698:	9305      	str	r3, [sp, #20]
 800a69a:	4619      	mov	r1, r3
 800a69c:	f04f 0c0a 	mov.w	ip, #10
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6a6:	3a30      	subs	r2, #48	; 0x30
 800a6a8:	2a09      	cmp	r2, #9
 800a6aa:	d903      	bls.n	800a6b4 <_svfiprintf_r+0x1a8>
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d0c5      	beq.n	800a63c <_svfiprintf_r+0x130>
 800a6b0:	9105      	str	r1, [sp, #20]
 800a6b2:	e7c3      	b.n	800a63c <_svfiprintf_r+0x130>
 800a6b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e7f0      	b.n	800a6a0 <_svfiprintf_r+0x194>
 800a6be:	ab03      	add	r3, sp, #12
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	462a      	mov	r2, r5
 800a6c4:	4b0f      	ldr	r3, [pc, #60]	; (800a704 <_svfiprintf_r+0x1f8>)
 800a6c6:	a904      	add	r1, sp, #16
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	f7fe f83b 	bl	8008744 <_printf_float>
 800a6ce:	1c42      	adds	r2, r0, #1
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	d1d6      	bne.n	800a682 <_svfiprintf_r+0x176>
 800a6d4:	89ab      	ldrh	r3, [r5, #12]
 800a6d6:	065b      	lsls	r3, r3, #25
 800a6d8:	f53f af2c 	bmi.w	800a534 <_svfiprintf_r+0x28>
 800a6dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6de:	b01d      	add	sp, #116	; 0x74
 800a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e4:	ab03      	add	r3, sp, #12
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	4b06      	ldr	r3, [pc, #24]	; (800a704 <_svfiprintf_r+0x1f8>)
 800a6ec:	a904      	add	r1, sp, #16
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	f7fe facc 	bl	8008c8c <_printf_i>
 800a6f4:	e7eb      	b.n	800a6ce <_svfiprintf_r+0x1c2>
 800a6f6:	bf00      	nop
 800a6f8:	0800c0f4 	.word	0x0800c0f4
 800a6fc:	0800c0fe 	.word	0x0800c0fe
 800a700:	08008745 	.word	0x08008745
 800a704:	0800a455 	.word	0x0800a455
 800a708:	0800c0fa 	.word	0x0800c0fa

0800a70c <__assert_func>:
 800a70c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a70e:	4614      	mov	r4, r2
 800a710:	461a      	mov	r2, r3
 800a712:	4b09      	ldr	r3, [pc, #36]	; (800a738 <__assert_func+0x2c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4605      	mov	r5, r0
 800a718:	68d8      	ldr	r0, [r3, #12]
 800a71a:	b14c      	cbz	r4, 800a730 <__assert_func+0x24>
 800a71c:	4b07      	ldr	r3, [pc, #28]	; (800a73c <__assert_func+0x30>)
 800a71e:	9100      	str	r1, [sp, #0]
 800a720:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a724:	4906      	ldr	r1, [pc, #24]	; (800a740 <__assert_func+0x34>)
 800a726:	462b      	mov	r3, r5
 800a728:	f000 f80e 	bl	800a748 <fiprintf>
 800a72c:	f000 faa4 	bl	800ac78 <abort>
 800a730:	4b04      	ldr	r3, [pc, #16]	; (800a744 <__assert_func+0x38>)
 800a732:	461c      	mov	r4, r3
 800a734:	e7f3      	b.n	800a71e <__assert_func+0x12>
 800a736:	bf00      	nop
 800a738:	20000064 	.word	0x20000064
 800a73c:	0800c105 	.word	0x0800c105
 800a740:	0800c112 	.word	0x0800c112
 800a744:	0800c140 	.word	0x0800c140

0800a748 <fiprintf>:
 800a748:	b40e      	push	{r1, r2, r3}
 800a74a:	b503      	push	{r0, r1, lr}
 800a74c:	4601      	mov	r1, r0
 800a74e:	ab03      	add	r3, sp, #12
 800a750:	4805      	ldr	r0, [pc, #20]	; (800a768 <fiprintf+0x20>)
 800a752:	f853 2b04 	ldr.w	r2, [r3], #4
 800a756:	6800      	ldr	r0, [r0, #0]
 800a758:	9301      	str	r3, [sp, #4]
 800a75a:	f000 f88f 	bl	800a87c <_vfiprintf_r>
 800a75e:	b002      	add	sp, #8
 800a760:	f85d eb04 	ldr.w	lr, [sp], #4
 800a764:	b003      	add	sp, #12
 800a766:	4770      	bx	lr
 800a768:	20000064 	.word	0x20000064

0800a76c <__retarget_lock_init_recursive>:
 800a76c:	4770      	bx	lr

0800a76e <__retarget_lock_acquire_recursive>:
 800a76e:	4770      	bx	lr

0800a770 <__retarget_lock_release_recursive>:
 800a770:	4770      	bx	lr

0800a772 <__ascii_mbtowc>:
 800a772:	b082      	sub	sp, #8
 800a774:	b901      	cbnz	r1, 800a778 <__ascii_mbtowc+0x6>
 800a776:	a901      	add	r1, sp, #4
 800a778:	b142      	cbz	r2, 800a78c <__ascii_mbtowc+0x1a>
 800a77a:	b14b      	cbz	r3, 800a790 <__ascii_mbtowc+0x1e>
 800a77c:	7813      	ldrb	r3, [r2, #0]
 800a77e:	600b      	str	r3, [r1, #0]
 800a780:	7812      	ldrb	r2, [r2, #0]
 800a782:	1e10      	subs	r0, r2, #0
 800a784:	bf18      	it	ne
 800a786:	2001      	movne	r0, #1
 800a788:	b002      	add	sp, #8
 800a78a:	4770      	bx	lr
 800a78c:	4610      	mov	r0, r2
 800a78e:	e7fb      	b.n	800a788 <__ascii_mbtowc+0x16>
 800a790:	f06f 0001 	mvn.w	r0, #1
 800a794:	e7f8      	b.n	800a788 <__ascii_mbtowc+0x16>

0800a796 <memmove>:
 800a796:	4288      	cmp	r0, r1
 800a798:	b510      	push	{r4, lr}
 800a79a:	eb01 0402 	add.w	r4, r1, r2
 800a79e:	d902      	bls.n	800a7a6 <memmove+0x10>
 800a7a0:	4284      	cmp	r4, r0
 800a7a2:	4623      	mov	r3, r4
 800a7a4:	d807      	bhi.n	800a7b6 <memmove+0x20>
 800a7a6:	1e43      	subs	r3, r0, #1
 800a7a8:	42a1      	cmp	r1, r4
 800a7aa:	d008      	beq.n	800a7be <memmove+0x28>
 800a7ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7b4:	e7f8      	b.n	800a7a8 <memmove+0x12>
 800a7b6:	4402      	add	r2, r0
 800a7b8:	4601      	mov	r1, r0
 800a7ba:	428a      	cmp	r2, r1
 800a7bc:	d100      	bne.n	800a7c0 <memmove+0x2a>
 800a7be:	bd10      	pop	{r4, pc}
 800a7c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7c8:	e7f7      	b.n	800a7ba <memmove+0x24>

0800a7ca <_realloc_r>:
 800a7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	460e      	mov	r6, r1
 800a7d4:	b921      	cbnz	r1, 800a7e0 <_realloc_r+0x16>
 800a7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7da:	4611      	mov	r1, r2
 800a7dc:	f7fd be9e 	b.w	800851c <_malloc_r>
 800a7e0:	b92a      	cbnz	r2, 800a7ee <_realloc_r+0x24>
 800a7e2:	f7fd fe2f 	bl	8008444 <_free_r>
 800a7e6:	4625      	mov	r5, r4
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ee:	f000 fc67 	bl	800b0c0 <_malloc_usable_size_r>
 800a7f2:	4284      	cmp	r4, r0
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	d802      	bhi.n	800a7fe <_realloc_r+0x34>
 800a7f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7fc:	d812      	bhi.n	800a824 <_realloc_r+0x5a>
 800a7fe:	4621      	mov	r1, r4
 800a800:	4640      	mov	r0, r8
 800a802:	f7fd fe8b 	bl	800851c <_malloc_r>
 800a806:	4605      	mov	r5, r0
 800a808:	2800      	cmp	r0, #0
 800a80a:	d0ed      	beq.n	800a7e8 <_realloc_r+0x1e>
 800a80c:	42bc      	cmp	r4, r7
 800a80e:	4622      	mov	r2, r4
 800a810:	4631      	mov	r1, r6
 800a812:	bf28      	it	cs
 800a814:	463a      	movcs	r2, r7
 800a816:	f7ff fa69 	bl	8009cec <memcpy>
 800a81a:	4631      	mov	r1, r6
 800a81c:	4640      	mov	r0, r8
 800a81e:	f7fd fe11 	bl	8008444 <_free_r>
 800a822:	e7e1      	b.n	800a7e8 <_realloc_r+0x1e>
 800a824:	4635      	mov	r5, r6
 800a826:	e7df      	b.n	800a7e8 <_realloc_r+0x1e>

0800a828 <__sfputc_r>:
 800a828:	6893      	ldr	r3, [r2, #8]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	b410      	push	{r4}
 800a830:	6093      	str	r3, [r2, #8]
 800a832:	da08      	bge.n	800a846 <__sfputc_r+0x1e>
 800a834:	6994      	ldr	r4, [r2, #24]
 800a836:	42a3      	cmp	r3, r4
 800a838:	db01      	blt.n	800a83e <__sfputc_r+0x16>
 800a83a:	290a      	cmp	r1, #10
 800a83c:	d103      	bne.n	800a846 <__sfputc_r+0x1e>
 800a83e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a842:	f000 b94b 	b.w	800aadc <__swbuf_r>
 800a846:	6813      	ldr	r3, [r2, #0]
 800a848:	1c58      	adds	r0, r3, #1
 800a84a:	6010      	str	r0, [r2, #0]
 800a84c:	7019      	strb	r1, [r3, #0]
 800a84e:	4608      	mov	r0, r1
 800a850:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <__sfputs_r>:
 800a856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a858:	4606      	mov	r6, r0
 800a85a:	460f      	mov	r7, r1
 800a85c:	4614      	mov	r4, r2
 800a85e:	18d5      	adds	r5, r2, r3
 800a860:	42ac      	cmp	r4, r5
 800a862:	d101      	bne.n	800a868 <__sfputs_r+0x12>
 800a864:	2000      	movs	r0, #0
 800a866:	e007      	b.n	800a878 <__sfputs_r+0x22>
 800a868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a86c:	463a      	mov	r2, r7
 800a86e:	4630      	mov	r0, r6
 800a870:	f7ff ffda 	bl	800a828 <__sfputc_r>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d1f3      	bne.n	800a860 <__sfputs_r+0xa>
 800a878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a87c <_vfiprintf_r>:
 800a87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a880:	460d      	mov	r5, r1
 800a882:	b09d      	sub	sp, #116	; 0x74
 800a884:	4614      	mov	r4, r2
 800a886:	4698      	mov	r8, r3
 800a888:	4606      	mov	r6, r0
 800a88a:	b118      	cbz	r0, 800a894 <_vfiprintf_r+0x18>
 800a88c:	6983      	ldr	r3, [r0, #24]
 800a88e:	b90b      	cbnz	r3, 800a894 <_vfiprintf_r+0x18>
 800a890:	f000 fb14 	bl	800aebc <__sinit>
 800a894:	4b89      	ldr	r3, [pc, #548]	; (800aabc <_vfiprintf_r+0x240>)
 800a896:	429d      	cmp	r5, r3
 800a898:	d11b      	bne.n	800a8d2 <_vfiprintf_r+0x56>
 800a89a:	6875      	ldr	r5, [r6, #4]
 800a89c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a89e:	07d9      	lsls	r1, r3, #31
 800a8a0:	d405      	bmi.n	800a8ae <_vfiprintf_r+0x32>
 800a8a2:	89ab      	ldrh	r3, [r5, #12]
 800a8a4:	059a      	lsls	r2, r3, #22
 800a8a6:	d402      	bmi.n	800a8ae <_vfiprintf_r+0x32>
 800a8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8aa:	f7ff ff60 	bl	800a76e <__retarget_lock_acquire_recursive>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	071b      	lsls	r3, r3, #28
 800a8b2:	d501      	bpl.n	800a8b8 <_vfiprintf_r+0x3c>
 800a8b4:	692b      	ldr	r3, [r5, #16]
 800a8b6:	b9eb      	cbnz	r3, 800a8f4 <_vfiprintf_r+0x78>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f000 f96e 	bl	800ab9c <__swsetup_r>
 800a8c0:	b1c0      	cbz	r0, 800a8f4 <_vfiprintf_r+0x78>
 800a8c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c4:	07dc      	lsls	r4, r3, #31
 800a8c6:	d50e      	bpl.n	800a8e6 <_vfiprintf_r+0x6a>
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8cc:	b01d      	add	sp, #116	; 0x74
 800a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d2:	4b7b      	ldr	r3, [pc, #492]	; (800aac0 <_vfiprintf_r+0x244>)
 800a8d4:	429d      	cmp	r5, r3
 800a8d6:	d101      	bne.n	800a8dc <_vfiprintf_r+0x60>
 800a8d8:	68b5      	ldr	r5, [r6, #8]
 800a8da:	e7df      	b.n	800a89c <_vfiprintf_r+0x20>
 800a8dc:	4b79      	ldr	r3, [pc, #484]	; (800aac4 <_vfiprintf_r+0x248>)
 800a8de:	429d      	cmp	r5, r3
 800a8e0:	bf08      	it	eq
 800a8e2:	68f5      	ldreq	r5, [r6, #12]
 800a8e4:	e7da      	b.n	800a89c <_vfiprintf_r+0x20>
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	0598      	lsls	r0, r3, #22
 800a8ea:	d4ed      	bmi.n	800a8c8 <_vfiprintf_r+0x4c>
 800a8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ee:	f7ff ff3f 	bl	800a770 <__retarget_lock_release_recursive>
 800a8f2:	e7e9      	b.n	800a8c8 <_vfiprintf_r+0x4c>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f8:	2320      	movs	r3, #32
 800a8fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800a902:	2330      	movs	r3, #48	; 0x30
 800a904:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aac8 <_vfiprintf_r+0x24c>
 800a908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a90c:	f04f 0901 	mov.w	r9, #1
 800a910:	4623      	mov	r3, r4
 800a912:	469a      	mov	sl, r3
 800a914:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a918:	b10a      	cbz	r2, 800a91e <_vfiprintf_r+0xa2>
 800a91a:	2a25      	cmp	r2, #37	; 0x25
 800a91c:	d1f9      	bne.n	800a912 <_vfiprintf_r+0x96>
 800a91e:	ebba 0b04 	subs.w	fp, sl, r4
 800a922:	d00b      	beq.n	800a93c <_vfiprintf_r+0xc0>
 800a924:	465b      	mov	r3, fp
 800a926:	4622      	mov	r2, r4
 800a928:	4629      	mov	r1, r5
 800a92a:	4630      	mov	r0, r6
 800a92c:	f7ff ff93 	bl	800a856 <__sfputs_r>
 800a930:	3001      	adds	r0, #1
 800a932:	f000 80aa 	beq.w	800aa8a <_vfiprintf_r+0x20e>
 800a936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a938:	445a      	add	r2, fp
 800a93a:	9209      	str	r2, [sp, #36]	; 0x24
 800a93c:	f89a 3000 	ldrb.w	r3, [sl]
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 80a2 	beq.w	800aa8a <_vfiprintf_r+0x20e>
 800a946:	2300      	movs	r3, #0
 800a948:	f04f 32ff 	mov.w	r2, #4294967295
 800a94c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a950:	f10a 0a01 	add.w	sl, sl, #1
 800a954:	9304      	str	r3, [sp, #16]
 800a956:	9307      	str	r3, [sp, #28]
 800a958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a95c:	931a      	str	r3, [sp, #104]	; 0x68
 800a95e:	4654      	mov	r4, sl
 800a960:	2205      	movs	r2, #5
 800a962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a966:	4858      	ldr	r0, [pc, #352]	; (800aac8 <_vfiprintf_r+0x24c>)
 800a968:	f7f5 fc42 	bl	80001f0 <memchr>
 800a96c:	9a04      	ldr	r2, [sp, #16]
 800a96e:	b9d8      	cbnz	r0, 800a9a8 <_vfiprintf_r+0x12c>
 800a970:	06d1      	lsls	r1, r2, #27
 800a972:	bf44      	itt	mi
 800a974:	2320      	movmi	r3, #32
 800a976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a97a:	0713      	lsls	r3, r2, #28
 800a97c:	bf44      	itt	mi
 800a97e:	232b      	movmi	r3, #43	; 0x2b
 800a980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a984:	f89a 3000 	ldrb.w	r3, [sl]
 800a988:	2b2a      	cmp	r3, #42	; 0x2a
 800a98a:	d015      	beq.n	800a9b8 <_vfiprintf_r+0x13c>
 800a98c:	9a07      	ldr	r2, [sp, #28]
 800a98e:	4654      	mov	r4, sl
 800a990:	2000      	movs	r0, #0
 800a992:	f04f 0c0a 	mov.w	ip, #10
 800a996:	4621      	mov	r1, r4
 800a998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a99c:	3b30      	subs	r3, #48	; 0x30
 800a99e:	2b09      	cmp	r3, #9
 800a9a0:	d94e      	bls.n	800aa40 <_vfiprintf_r+0x1c4>
 800a9a2:	b1b0      	cbz	r0, 800a9d2 <_vfiprintf_r+0x156>
 800a9a4:	9207      	str	r2, [sp, #28]
 800a9a6:	e014      	b.n	800a9d2 <_vfiprintf_r+0x156>
 800a9a8:	eba0 0308 	sub.w	r3, r0, r8
 800a9ac:	fa09 f303 	lsl.w	r3, r9, r3
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	9304      	str	r3, [sp, #16]
 800a9b4:	46a2      	mov	sl, r4
 800a9b6:	e7d2      	b.n	800a95e <_vfiprintf_r+0xe2>
 800a9b8:	9b03      	ldr	r3, [sp, #12]
 800a9ba:	1d19      	adds	r1, r3, #4
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	9103      	str	r1, [sp, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	bfbb      	ittet	lt
 800a9c4:	425b      	neglt	r3, r3
 800a9c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ca:	9307      	strge	r3, [sp, #28]
 800a9cc:	9307      	strlt	r3, [sp, #28]
 800a9ce:	bfb8      	it	lt
 800a9d0:	9204      	strlt	r2, [sp, #16]
 800a9d2:	7823      	ldrb	r3, [r4, #0]
 800a9d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9d6:	d10c      	bne.n	800a9f2 <_vfiprintf_r+0x176>
 800a9d8:	7863      	ldrb	r3, [r4, #1]
 800a9da:	2b2a      	cmp	r3, #42	; 0x2a
 800a9dc:	d135      	bne.n	800aa4a <_vfiprintf_r+0x1ce>
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	1d1a      	adds	r2, r3, #4
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	9203      	str	r2, [sp, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bfb8      	it	lt
 800a9ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9ee:	3402      	adds	r4, #2
 800a9f0:	9305      	str	r3, [sp, #20]
 800a9f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aad8 <_vfiprintf_r+0x25c>
 800a9f6:	7821      	ldrb	r1, [r4, #0]
 800a9f8:	2203      	movs	r2, #3
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	f7f5 fbf8 	bl	80001f0 <memchr>
 800aa00:	b140      	cbz	r0, 800aa14 <_vfiprintf_r+0x198>
 800aa02:	2340      	movs	r3, #64	; 0x40
 800aa04:	eba0 000a 	sub.w	r0, r0, sl
 800aa08:	fa03 f000 	lsl.w	r0, r3, r0
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	4303      	orrs	r3, r0
 800aa10:	3401      	adds	r4, #1
 800aa12:	9304      	str	r3, [sp, #16]
 800aa14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa18:	482c      	ldr	r0, [pc, #176]	; (800aacc <_vfiprintf_r+0x250>)
 800aa1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa1e:	2206      	movs	r2, #6
 800aa20:	f7f5 fbe6 	bl	80001f0 <memchr>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d03f      	beq.n	800aaa8 <_vfiprintf_r+0x22c>
 800aa28:	4b29      	ldr	r3, [pc, #164]	; (800aad0 <_vfiprintf_r+0x254>)
 800aa2a:	bb1b      	cbnz	r3, 800aa74 <_vfiprintf_r+0x1f8>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	3307      	adds	r3, #7
 800aa30:	f023 0307 	bic.w	r3, r3, #7
 800aa34:	3308      	adds	r3, #8
 800aa36:	9303      	str	r3, [sp, #12]
 800aa38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3a:	443b      	add	r3, r7
 800aa3c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3e:	e767      	b.n	800a910 <_vfiprintf_r+0x94>
 800aa40:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa44:	460c      	mov	r4, r1
 800aa46:	2001      	movs	r0, #1
 800aa48:	e7a5      	b.n	800a996 <_vfiprintf_r+0x11a>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	3401      	adds	r4, #1
 800aa4e:	9305      	str	r3, [sp, #20]
 800aa50:	4619      	mov	r1, r3
 800aa52:	f04f 0c0a 	mov.w	ip, #10
 800aa56:	4620      	mov	r0, r4
 800aa58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa5c:	3a30      	subs	r2, #48	; 0x30
 800aa5e:	2a09      	cmp	r2, #9
 800aa60:	d903      	bls.n	800aa6a <_vfiprintf_r+0x1ee>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0c5      	beq.n	800a9f2 <_vfiprintf_r+0x176>
 800aa66:	9105      	str	r1, [sp, #20]
 800aa68:	e7c3      	b.n	800a9f2 <_vfiprintf_r+0x176>
 800aa6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa6e:	4604      	mov	r4, r0
 800aa70:	2301      	movs	r3, #1
 800aa72:	e7f0      	b.n	800aa56 <_vfiprintf_r+0x1da>
 800aa74:	ab03      	add	r3, sp, #12
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	462a      	mov	r2, r5
 800aa7a:	4b16      	ldr	r3, [pc, #88]	; (800aad4 <_vfiprintf_r+0x258>)
 800aa7c:	a904      	add	r1, sp, #16
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f7fd fe60 	bl	8008744 <_printf_float>
 800aa84:	4607      	mov	r7, r0
 800aa86:	1c78      	adds	r0, r7, #1
 800aa88:	d1d6      	bne.n	800aa38 <_vfiprintf_r+0x1bc>
 800aa8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa8c:	07d9      	lsls	r1, r3, #31
 800aa8e:	d405      	bmi.n	800aa9c <_vfiprintf_r+0x220>
 800aa90:	89ab      	ldrh	r3, [r5, #12]
 800aa92:	059a      	lsls	r2, r3, #22
 800aa94:	d402      	bmi.n	800aa9c <_vfiprintf_r+0x220>
 800aa96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa98:	f7ff fe6a 	bl	800a770 <__retarget_lock_release_recursive>
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	065b      	lsls	r3, r3, #25
 800aaa0:	f53f af12 	bmi.w	800a8c8 <_vfiprintf_r+0x4c>
 800aaa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaa6:	e711      	b.n	800a8cc <_vfiprintf_r+0x50>
 800aaa8:	ab03      	add	r3, sp, #12
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	462a      	mov	r2, r5
 800aaae:	4b09      	ldr	r3, [pc, #36]	; (800aad4 <_vfiprintf_r+0x258>)
 800aab0:	a904      	add	r1, sp, #16
 800aab2:	4630      	mov	r0, r6
 800aab4:	f7fe f8ea 	bl	8008c8c <_printf_i>
 800aab8:	e7e4      	b.n	800aa84 <_vfiprintf_r+0x208>
 800aaba:	bf00      	nop
 800aabc:	0800c26c 	.word	0x0800c26c
 800aac0:	0800c28c 	.word	0x0800c28c
 800aac4:	0800c24c 	.word	0x0800c24c
 800aac8:	0800c0f4 	.word	0x0800c0f4
 800aacc:	0800c0fe 	.word	0x0800c0fe
 800aad0:	08008745 	.word	0x08008745
 800aad4:	0800a857 	.word	0x0800a857
 800aad8:	0800c0fa 	.word	0x0800c0fa

0800aadc <__swbuf_r>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	460e      	mov	r6, r1
 800aae0:	4614      	mov	r4, r2
 800aae2:	4605      	mov	r5, r0
 800aae4:	b118      	cbz	r0, 800aaee <__swbuf_r+0x12>
 800aae6:	6983      	ldr	r3, [r0, #24]
 800aae8:	b90b      	cbnz	r3, 800aaee <__swbuf_r+0x12>
 800aaea:	f000 f9e7 	bl	800aebc <__sinit>
 800aaee:	4b21      	ldr	r3, [pc, #132]	; (800ab74 <__swbuf_r+0x98>)
 800aaf0:	429c      	cmp	r4, r3
 800aaf2:	d12b      	bne.n	800ab4c <__swbuf_r+0x70>
 800aaf4:	686c      	ldr	r4, [r5, #4]
 800aaf6:	69a3      	ldr	r3, [r4, #24]
 800aaf8:	60a3      	str	r3, [r4, #8]
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	071a      	lsls	r2, r3, #28
 800aafe:	d52f      	bpl.n	800ab60 <__swbuf_r+0x84>
 800ab00:	6923      	ldr	r3, [r4, #16]
 800ab02:	b36b      	cbz	r3, 800ab60 <__swbuf_r+0x84>
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	6820      	ldr	r0, [r4, #0]
 800ab08:	1ac0      	subs	r0, r0, r3
 800ab0a:	6963      	ldr	r3, [r4, #20]
 800ab0c:	b2f6      	uxtb	r6, r6
 800ab0e:	4283      	cmp	r3, r0
 800ab10:	4637      	mov	r7, r6
 800ab12:	dc04      	bgt.n	800ab1e <__swbuf_r+0x42>
 800ab14:	4621      	mov	r1, r4
 800ab16:	4628      	mov	r0, r5
 800ab18:	f000 f93c 	bl	800ad94 <_fflush_r>
 800ab1c:	bb30      	cbnz	r0, 800ab6c <__swbuf_r+0x90>
 800ab1e:	68a3      	ldr	r3, [r4, #8]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	60a3      	str	r3, [r4, #8]
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	6022      	str	r2, [r4, #0]
 800ab2a:	701e      	strb	r6, [r3, #0]
 800ab2c:	6963      	ldr	r3, [r4, #20]
 800ab2e:	3001      	adds	r0, #1
 800ab30:	4283      	cmp	r3, r0
 800ab32:	d004      	beq.n	800ab3e <__swbuf_r+0x62>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	07db      	lsls	r3, r3, #31
 800ab38:	d506      	bpl.n	800ab48 <__swbuf_r+0x6c>
 800ab3a:	2e0a      	cmp	r6, #10
 800ab3c:	d104      	bne.n	800ab48 <__swbuf_r+0x6c>
 800ab3e:	4621      	mov	r1, r4
 800ab40:	4628      	mov	r0, r5
 800ab42:	f000 f927 	bl	800ad94 <_fflush_r>
 800ab46:	b988      	cbnz	r0, 800ab6c <__swbuf_r+0x90>
 800ab48:	4638      	mov	r0, r7
 800ab4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab4c:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <__swbuf_r+0x9c>)
 800ab4e:	429c      	cmp	r4, r3
 800ab50:	d101      	bne.n	800ab56 <__swbuf_r+0x7a>
 800ab52:	68ac      	ldr	r4, [r5, #8]
 800ab54:	e7cf      	b.n	800aaf6 <__swbuf_r+0x1a>
 800ab56:	4b09      	ldr	r3, [pc, #36]	; (800ab7c <__swbuf_r+0xa0>)
 800ab58:	429c      	cmp	r4, r3
 800ab5a:	bf08      	it	eq
 800ab5c:	68ec      	ldreq	r4, [r5, #12]
 800ab5e:	e7ca      	b.n	800aaf6 <__swbuf_r+0x1a>
 800ab60:	4621      	mov	r1, r4
 800ab62:	4628      	mov	r0, r5
 800ab64:	f000 f81a 	bl	800ab9c <__swsetup_r>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d0cb      	beq.n	800ab04 <__swbuf_r+0x28>
 800ab6c:	f04f 37ff 	mov.w	r7, #4294967295
 800ab70:	e7ea      	b.n	800ab48 <__swbuf_r+0x6c>
 800ab72:	bf00      	nop
 800ab74:	0800c26c 	.word	0x0800c26c
 800ab78:	0800c28c 	.word	0x0800c28c
 800ab7c:	0800c24c 	.word	0x0800c24c

0800ab80 <__ascii_wctomb>:
 800ab80:	b149      	cbz	r1, 800ab96 <__ascii_wctomb+0x16>
 800ab82:	2aff      	cmp	r2, #255	; 0xff
 800ab84:	bf85      	ittet	hi
 800ab86:	238a      	movhi	r3, #138	; 0x8a
 800ab88:	6003      	strhi	r3, [r0, #0]
 800ab8a:	700a      	strbls	r2, [r1, #0]
 800ab8c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab90:	bf98      	it	ls
 800ab92:	2001      	movls	r0, #1
 800ab94:	4770      	bx	lr
 800ab96:	4608      	mov	r0, r1
 800ab98:	4770      	bx	lr
	...

0800ab9c <__swsetup_r>:
 800ab9c:	4b32      	ldr	r3, [pc, #200]	; (800ac68 <__swsetup_r+0xcc>)
 800ab9e:	b570      	push	{r4, r5, r6, lr}
 800aba0:	681d      	ldr	r5, [r3, #0]
 800aba2:	4606      	mov	r6, r0
 800aba4:	460c      	mov	r4, r1
 800aba6:	b125      	cbz	r5, 800abb2 <__swsetup_r+0x16>
 800aba8:	69ab      	ldr	r3, [r5, #24]
 800abaa:	b913      	cbnz	r3, 800abb2 <__swsetup_r+0x16>
 800abac:	4628      	mov	r0, r5
 800abae:	f000 f985 	bl	800aebc <__sinit>
 800abb2:	4b2e      	ldr	r3, [pc, #184]	; (800ac6c <__swsetup_r+0xd0>)
 800abb4:	429c      	cmp	r4, r3
 800abb6:	d10f      	bne.n	800abd8 <__swsetup_r+0x3c>
 800abb8:	686c      	ldr	r4, [r5, #4]
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abc0:	0719      	lsls	r1, r3, #28
 800abc2:	d42c      	bmi.n	800ac1e <__swsetup_r+0x82>
 800abc4:	06dd      	lsls	r5, r3, #27
 800abc6:	d411      	bmi.n	800abec <__swsetup_r+0x50>
 800abc8:	2309      	movs	r3, #9
 800abca:	6033      	str	r3, [r6, #0]
 800abcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abd0:	81a3      	strh	r3, [r4, #12]
 800abd2:	f04f 30ff 	mov.w	r0, #4294967295
 800abd6:	e03e      	b.n	800ac56 <__swsetup_r+0xba>
 800abd8:	4b25      	ldr	r3, [pc, #148]	; (800ac70 <__swsetup_r+0xd4>)
 800abda:	429c      	cmp	r4, r3
 800abdc:	d101      	bne.n	800abe2 <__swsetup_r+0x46>
 800abde:	68ac      	ldr	r4, [r5, #8]
 800abe0:	e7eb      	b.n	800abba <__swsetup_r+0x1e>
 800abe2:	4b24      	ldr	r3, [pc, #144]	; (800ac74 <__swsetup_r+0xd8>)
 800abe4:	429c      	cmp	r4, r3
 800abe6:	bf08      	it	eq
 800abe8:	68ec      	ldreq	r4, [r5, #12]
 800abea:	e7e6      	b.n	800abba <__swsetup_r+0x1e>
 800abec:	0758      	lsls	r0, r3, #29
 800abee:	d512      	bpl.n	800ac16 <__swsetup_r+0x7a>
 800abf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abf2:	b141      	cbz	r1, 800ac06 <__swsetup_r+0x6a>
 800abf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abf8:	4299      	cmp	r1, r3
 800abfa:	d002      	beq.n	800ac02 <__swsetup_r+0x66>
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7fd fc21 	bl	8008444 <_free_r>
 800ac02:	2300      	movs	r3, #0
 800ac04:	6363      	str	r3, [r4, #52]	; 0x34
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac0c:	81a3      	strh	r3, [r4, #12]
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6063      	str	r3, [r4, #4]
 800ac12:	6923      	ldr	r3, [r4, #16]
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	89a3      	ldrh	r3, [r4, #12]
 800ac18:	f043 0308 	orr.w	r3, r3, #8
 800ac1c:	81a3      	strh	r3, [r4, #12]
 800ac1e:	6923      	ldr	r3, [r4, #16]
 800ac20:	b94b      	cbnz	r3, 800ac36 <__swsetup_r+0x9a>
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac2c:	d003      	beq.n	800ac36 <__swsetup_r+0x9a>
 800ac2e:	4621      	mov	r1, r4
 800ac30:	4630      	mov	r0, r6
 800ac32:	f000 fa05 	bl	800b040 <__smakebuf_r>
 800ac36:	89a0      	ldrh	r0, [r4, #12]
 800ac38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac3c:	f010 0301 	ands.w	r3, r0, #1
 800ac40:	d00a      	beq.n	800ac58 <__swsetup_r+0xbc>
 800ac42:	2300      	movs	r3, #0
 800ac44:	60a3      	str	r3, [r4, #8]
 800ac46:	6963      	ldr	r3, [r4, #20]
 800ac48:	425b      	negs	r3, r3
 800ac4a:	61a3      	str	r3, [r4, #24]
 800ac4c:	6923      	ldr	r3, [r4, #16]
 800ac4e:	b943      	cbnz	r3, 800ac62 <__swsetup_r+0xc6>
 800ac50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac54:	d1ba      	bne.n	800abcc <__swsetup_r+0x30>
 800ac56:	bd70      	pop	{r4, r5, r6, pc}
 800ac58:	0781      	lsls	r1, r0, #30
 800ac5a:	bf58      	it	pl
 800ac5c:	6963      	ldrpl	r3, [r4, #20]
 800ac5e:	60a3      	str	r3, [r4, #8]
 800ac60:	e7f4      	b.n	800ac4c <__swsetup_r+0xb0>
 800ac62:	2000      	movs	r0, #0
 800ac64:	e7f7      	b.n	800ac56 <__swsetup_r+0xba>
 800ac66:	bf00      	nop
 800ac68:	20000064 	.word	0x20000064
 800ac6c:	0800c26c 	.word	0x0800c26c
 800ac70:	0800c28c 	.word	0x0800c28c
 800ac74:	0800c24c 	.word	0x0800c24c

0800ac78 <abort>:
 800ac78:	b508      	push	{r3, lr}
 800ac7a:	2006      	movs	r0, #6
 800ac7c:	f000 fa50 	bl	800b120 <raise>
 800ac80:	2001      	movs	r0, #1
 800ac82:	f7f7 fafd 	bl	8002280 <_exit>
	...

0800ac88 <__sflush_r>:
 800ac88:	898a      	ldrh	r2, [r1, #12]
 800ac8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8e:	4605      	mov	r5, r0
 800ac90:	0710      	lsls	r0, r2, #28
 800ac92:	460c      	mov	r4, r1
 800ac94:	d458      	bmi.n	800ad48 <__sflush_r+0xc0>
 800ac96:	684b      	ldr	r3, [r1, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dc05      	bgt.n	800aca8 <__sflush_r+0x20>
 800ac9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	dc02      	bgt.n	800aca8 <__sflush_r+0x20>
 800aca2:	2000      	movs	r0, #0
 800aca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acaa:	2e00      	cmp	r6, #0
 800acac:	d0f9      	beq.n	800aca2 <__sflush_r+0x1a>
 800acae:	2300      	movs	r3, #0
 800acb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acb4:	682f      	ldr	r7, [r5, #0]
 800acb6:	602b      	str	r3, [r5, #0]
 800acb8:	d032      	beq.n	800ad20 <__sflush_r+0x98>
 800acba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	075a      	lsls	r2, r3, #29
 800acc0:	d505      	bpl.n	800acce <__sflush_r+0x46>
 800acc2:	6863      	ldr	r3, [r4, #4]
 800acc4:	1ac0      	subs	r0, r0, r3
 800acc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acc8:	b10b      	cbz	r3, 800acce <__sflush_r+0x46>
 800acca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800accc:	1ac0      	subs	r0, r0, r3
 800acce:	2300      	movs	r3, #0
 800acd0:	4602      	mov	r2, r0
 800acd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acd4:	6a21      	ldr	r1, [r4, #32]
 800acd6:	4628      	mov	r0, r5
 800acd8:	47b0      	blx	r6
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	d106      	bne.n	800acee <__sflush_r+0x66>
 800ace0:	6829      	ldr	r1, [r5, #0]
 800ace2:	291d      	cmp	r1, #29
 800ace4:	d82c      	bhi.n	800ad40 <__sflush_r+0xb8>
 800ace6:	4a2a      	ldr	r2, [pc, #168]	; (800ad90 <__sflush_r+0x108>)
 800ace8:	40ca      	lsrs	r2, r1
 800acea:	07d6      	lsls	r6, r2, #31
 800acec:	d528      	bpl.n	800ad40 <__sflush_r+0xb8>
 800acee:	2200      	movs	r2, #0
 800acf0:	6062      	str	r2, [r4, #4]
 800acf2:	04d9      	lsls	r1, r3, #19
 800acf4:	6922      	ldr	r2, [r4, #16]
 800acf6:	6022      	str	r2, [r4, #0]
 800acf8:	d504      	bpl.n	800ad04 <__sflush_r+0x7c>
 800acfa:	1c42      	adds	r2, r0, #1
 800acfc:	d101      	bne.n	800ad02 <__sflush_r+0x7a>
 800acfe:	682b      	ldr	r3, [r5, #0]
 800ad00:	b903      	cbnz	r3, 800ad04 <__sflush_r+0x7c>
 800ad02:	6560      	str	r0, [r4, #84]	; 0x54
 800ad04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad06:	602f      	str	r7, [r5, #0]
 800ad08:	2900      	cmp	r1, #0
 800ad0a:	d0ca      	beq.n	800aca2 <__sflush_r+0x1a>
 800ad0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad10:	4299      	cmp	r1, r3
 800ad12:	d002      	beq.n	800ad1a <__sflush_r+0x92>
 800ad14:	4628      	mov	r0, r5
 800ad16:	f7fd fb95 	bl	8008444 <_free_r>
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad1e:	e7c1      	b.n	800aca4 <__sflush_r+0x1c>
 800ad20:	6a21      	ldr	r1, [r4, #32]
 800ad22:	2301      	movs	r3, #1
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b0      	blx	r6
 800ad28:	1c41      	adds	r1, r0, #1
 800ad2a:	d1c7      	bne.n	800acbc <__sflush_r+0x34>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0c4      	beq.n	800acbc <__sflush_r+0x34>
 800ad32:	2b1d      	cmp	r3, #29
 800ad34:	d001      	beq.n	800ad3a <__sflush_r+0xb2>
 800ad36:	2b16      	cmp	r3, #22
 800ad38:	d101      	bne.n	800ad3e <__sflush_r+0xb6>
 800ad3a:	602f      	str	r7, [r5, #0]
 800ad3c:	e7b1      	b.n	800aca2 <__sflush_r+0x1a>
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	e7ad      	b.n	800aca4 <__sflush_r+0x1c>
 800ad48:	690f      	ldr	r7, [r1, #16]
 800ad4a:	2f00      	cmp	r7, #0
 800ad4c:	d0a9      	beq.n	800aca2 <__sflush_r+0x1a>
 800ad4e:	0793      	lsls	r3, r2, #30
 800ad50:	680e      	ldr	r6, [r1, #0]
 800ad52:	bf08      	it	eq
 800ad54:	694b      	ldreq	r3, [r1, #20]
 800ad56:	600f      	str	r7, [r1, #0]
 800ad58:	bf18      	it	ne
 800ad5a:	2300      	movne	r3, #0
 800ad5c:	eba6 0807 	sub.w	r8, r6, r7
 800ad60:	608b      	str	r3, [r1, #8]
 800ad62:	f1b8 0f00 	cmp.w	r8, #0
 800ad66:	dd9c      	ble.n	800aca2 <__sflush_r+0x1a>
 800ad68:	6a21      	ldr	r1, [r4, #32]
 800ad6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad6c:	4643      	mov	r3, r8
 800ad6e:	463a      	mov	r2, r7
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b0      	blx	r6
 800ad74:	2800      	cmp	r0, #0
 800ad76:	dc06      	bgt.n	800ad86 <__sflush_r+0xfe>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad7e:	81a3      	strh	r3, [r4, #12]
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	e78e      	b.n	800aca4 <__sflush_r+0x1c>
 800ad86:	4407      	add	r7, r0
 800ad88:	eba8 0800 	sub.w	r8, r8, r0
 800ad8c:	e7e9      	b.n	800ad62 <__sflush_r+0xda>
 800ad8e:	bf00      	nop
 800ad90:	20400001 	.word	0x20400001

0800ad94 <_fflush_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	690b      	ldr	r3, [r1, #16]
 800ad98:	4605      	mov	r5, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	b913      	cbnz	r3, 800ada4 <_fflush_r+0x10>
 800ad9e:	2500      	movs	r5, #0
 800ada0:	4628      	mov	r0, r5
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	b118      	cbz	r0, 800adae <_fflush_r+0x1a>
 800ada6:	6983      	ldr	r3, [r0, #24]
 800ada8:	b90b      	cbnz	r3, 800adae <_fflush_r+0x1a>
 800adaa:	f000 f887 	bl	800aebc <__sinit>
 800adae:	4b14      	ldr	r3, [pc, #80]	; (800ae00 <_fflush_r+0x6c>)
 800adb0:	429c      	cmp	r4, r3
 800adb2:	d11b      	bne.n	800adec <_fflush_r+0x58>
 800adb4:	686c      	ldr	r4, [r5, #4]
 800adb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0ef      	beq.n	800ad9e <_fflush_r+0xa>
 800adbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adc0:	07d0      	lsls	r0, r2, #31
 800adc2:	d404      	bmi.n	800adce <_fflush_r+0x3a>
 800adc4:	0599      	lsls	r1, r3, #22
 800adc6:	d402      	bmi.n	800adce <_fflush_r+0x3a>
 800adc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adca:	f7ff fcd0 	bl	800a76e <__retarget_lock_acquire_recursive>
 800adce:	4628      	mov	r0, r5
 800add0:	4621      	mov	r1, r4
 800add2:	f7ff ff59 	bl	800ac88 <__sflush_r>
 800add6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800add8:	07da      	lsls	r2, r3, #31
 800adda:	4605      	mov	r5, r0
 800addc:	d4e0      	bmi.n	800ada0 <_fflush_r+0xc>
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	059b      	lsls	r3, r3, #22
 800ade2:	d4dd      	bmi.n	800ada0 <_fflush_r+0xc>
 800ade4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ade6:	f7ff fcc3 	bl	800a770 <__retarget_lock_release_recursive>
 800adea:	e7d9      	b.n	800ada0 <_fflush_r+0xc>
 800adec:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <_fflush_r+0x70>)
 800adee:	429c      	cmp	r4, r3
 800adf0:	d101      	bne.n	800adf6 <_fflush_r+0x62>
 800adf2:	68ac      	ldr	r4, [r5, #8]
 800adf4:	e7df      	b.n	800adb6 <_fflush_r+0x22>
 800adf6:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <_fflush_r+0x74>)
 800adf8:	429c      	cmp	r4, r3
 800adfa:	bf08      	it	eq
 800adfc:	68ec      	ldreq	r4, [r5, #12]
 800adfe:	e7da      	b.n	800adb6 <_fflush_r+0x22>
 800ae00:	0800c26c 	.word	0x0800c26c
 800ae04:	0800c28c 	.word	0x0800c28c
 800ae08:	0800c24c 	.word	0x0800c24c

0800ae0c <std>:
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	4604      	mov	r4, r0
 800ae12:	e9c0 3300 	strd	r3, r3, [r0]
 800ae16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae1a:	6083      	str	r3, [r0, #8]
 800ae1c:	8181      	strh	r1, [r0, #12]
 800ae1e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae20:	81c2      	strh	r2, [r0, #14]
 800ae22:	6183      	str	r3, [r0, #24]
 800ae24:	4619      	mov	r1, r3
 800ae26:	2208      	movs	r2, #8
 800ae28:	305c      	adds	r0, #92	; 0x5c
 800ae2a:	f7fd fb03 	bl	8008434 <memset>
 800ae2e:	4b05      	ldr	r3, [pc, #20]	; (800ae44 <std+0x38>)
 800ae30:	6263      	str	r3, [r4, #36]	; 0x24
 800ae32:	4b05      	ldr	r3, [pc, #20]	; (800ae48 <std+0x3c>)
 800ae34:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae36:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <std+0x40>)
 800ae38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae3a:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <std+0x44>)
 800ae3c:	6224      	str	r4, [r4, #32]
 800ae3e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae40:	bd10      	pop	{r4, pc}
 800ae42:	bf00      	nop
 800ae44:	0800b159 	.word	0x0800b159
 800ae48:	0800b17b 	.word	0x0800b17b
 800ae4c:	0800b1b3 	.word	0x0800b1b3
 800ae50:	0800b1d7 	.word	0x0800b1d7

0800ae54 <_cleanup_r>:
 800ae54:	4901      	ldr	r1, [pc, #4]	; (800ae5c <_cleanup_r+0x8>)
 800ae56:	f000 b8af 	b.w	800afb8 <_fwalk_reent>
 800ae5a:	bf00      	nop
 800ae5c:	0800ad95 	.word	0x0800ad95

0800ae60 <__sfmoreglue>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	2268      	movs	r2, #104	; 0x68
 800ae64:	1e4d      	subs	r5, r1, #1
 800ae66:	4355      	muls	r5, r2
 800ae68:	460e      	mov	r6, r1
 800ae6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae6e:	f7fd fb55 	bl	800851c <_malloc_r>
 800ae72:	4604      	mov	r4, r0
 800ae74:	b140      	cbz	r0, 800ae88 <__sfmoreglue+0x28>
 800ae76:	2100      	movs	r1, #0
 800ae78:	e9c0 1600 	strd	r1, r6, [r0]
 800ae7c:	300c      	adds	r0, #12
 800ae7e:	60a0      	str	r0, [r4, #8]
 800ae80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae84:	f7fd fad6 	bl	8008434 <memset>
 800ae88:	4620      	mov	r0, r4
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}

0800ae8c <__sfp_lock_acquire>:
 800ae8c:	4801      	ldr	r0, [pc, #4]	; (800ae94 <__sfp_lock_acquire+0x8>)
 800ae8e:	f7ff bc6e 	b.w	800a76e <__retarget_lock_acquire_recursive>
 800ae92:	bf00      	nop
 800ae94:	20000609 	.word	0x20000609

0800ae98 <__sfp_lock_release>:
 800ae98:	4801      	ldr	r0, [pc, #4]	; (800aea0 <__sfp_lock_release+0x8>)
 800ae9a:	f7ff bc69 	b.w	800a770 <__retarget_lock_release_recursive>
 800ae9e:	bf00      	nop
 800aea0:	20000609 	.word	0x20000609

0800aea4 <__sinit_lock_acquire>:
 800aea4:	4801      	ldr	r0, [pc, #4]	; (800aeac <__sinit_lock_acquire+0x8>)
 800aea6:	f7ff bc62 	b.w	800a76e <__retarget_lock_acquire_recursive>
 800aeaa:	bf00      	nop
 800aeac:	2000060a 	.word	0x2000060a

0800aeb0 <__sinit_lock_release>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	; (800aeb8 <__sinit_lock_release+0x8>)
 800aeb2:	f7ff bc5d 	b.w	800a770 <__retarget_lock_release_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	2000060a 	.word	0x2000060a

0800aebc <__sinit>:
 800aebc:	b510      	push	{r4, lr}
 800aebe:	4604      	mov	r4, r0
 800aec0:	f7ff fff0 	bl	800aea4 <__sinit_lock_acquire>
 800aec4:	69a3      	ldr	r3, [r4, #24]
 800aec6:	b11b      	cbz	r3, 800aed0 <__sinit+0x14>
 800aec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aecc:	f7ff bff0 	b.w	800aeb0 <__sinit_lock_release>
 800aed0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aed4:	6523      	str	r3, [r4, #80]	; 0x50
 800aed6:	4b13      	ldr	r3, [pc, #76]	; (800af24 <__sinit+0x68>)
 800aed8:	4a13      	ldr	r2, [pc, #76]	; (800af28 <__sinit+0x6c>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	62a2      	str	r2, [r4, #40]	; 0x28
 800aede:	42a3      	cmp	r3, r4
 800aee0:	bf04      	itt	eq
 800aee2:	2301      	moveq	r3, #1
 800aee4:	61a3      	streq	r3, [r4, #24]
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 f820 	bl	800af2c <__sfp>
 800aeec:	6060      	str	r0, [r4, #4]
 800aeee:	4620      	mov	r0, r4
 800aef0:	f000 f81c 	bl	800af2c <__sfp>
 800aef4:	60a0      	str	r0, [r4, #8]
 800aef6:	4620      	mov	r0, r4
 800aef8:	f000 f818 	bl	800af2c <__sfp>
 800aefc:	2200      	movs	r2, #0
 800aefe:	60e0      	str	r0, [r4, #12]
 800af00:	2104      	movs	r1, #4
 800af02:	6860      	ldr	r0, [r4, #4]
 800af04:	f7ff ff82 	bl	800ae0c <std>
 800af08:	68a0      	ldr	r0, [r4, #8]
 800af0a:	2201      	movs	r2, #1
 800af0c:	2109      	movs	r1, #9
 800af0e:	f7ff ff7d 	bl	800ae0c <std>
 800af12:	68e0      	ldr	r0, [r4, #12]
 800af14:	2202      	movs	r2, #2
 800af16:	2112      	movs	r1, #18
 800af18:	f7ff ff78 	bl	800ae0c <std>
 800af1c:	2301      	movs	r3, #1
 800af1e:	61a3      	str	r3, [r4, #24]
 800af20:	e7d2      	b.n	800aec8 <__sinit+0xc>
 800af22:	bf00      	nop
 800af24:	0800bed0 	.word	0x0800bed0
 800af28:	0800ae55 	.word	0x0800ae55

0800af2c <__sfp>:
 800af2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2e:	4607      	mov	r7, r0
 800af30:	f7ff ffac 	bl	800ae8c <__sfp_lock_acquire>
 800af34:	4b1e      	ldr	r3, [pc, #120]	; (800afb0 <__sfp+0x84>)
 800af36:	681e      	ldr	r6, [r3, #0]
 800af38:	69b3      	ldr	r3, [r6, #24]
 800af3a:	b913      	cbnz	r3, 800af42 <__sfp+0x16>
 800af3c:	4630      	mov	r0, r6
 800af3e:	f7ff ffbd 	bl	800aebc <__sinit>
 800af42:	3648      	adds	r6, #72	; 0x48
 800af44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af48:	3b01      	subs	r3, #1
 800af4a:	d503      	bpl.n	800af54 <__sfp+0x28>
 800af4c:	6833      	ldr	r3, [r6, #0]
 800af4e:	b30b      	cbz	r3, 800af94 <__sfp+0x68>
 800af50:	6836      	ldr	r6, [r6, #0]
 800af52:	e7f7      	b.n	800af44 <__sfp+0x18>
 800af54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af58:	b9d5      	cbnz	r5, 800af90 <__sfp+0x64>
 800af5a:	4b16      	ldr	r3, [pc, #88]	; (800afb4 <__sfp+0x88>)
 800af5c:	60e3      	str	r3, [r4, #12]
 800af5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af62:	6665      	str	r5, [r4, #100]	; 0x64
 800af64:	f7ff fc02 	bl	800a76c <__retarget_lock_init_recursive>
 800af68:	f7ff ff96 	bl	800ae98 <__sfp_lock_release>
 800af6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af74:	6025      	str	r5, [r4, #0]
 800af76:	61a5      	str	r5, [r4, #24]
 800af78:	2208      	movs	r2, #8
 800af7a:	4629      	mov	r1, r5
 800af7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af80:	f7fd fa58 	bl	8008434 <memset>
 800af84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af8c:	4620      	mov	r0, r4
 800af8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af90:	3468      	adds	r4, #104	; 0x68
 800af92:	e7d9      	b.n	800af48 <__sfp+0x1c>
 800af94:	2104      	movs	r1, #4
 800af96:	4638      	mov	r0, r7
 800af98:	f7ff ff62 	bl	800ae60 <__sfmoreglue>
 800af9c:	4604      	mov	r4, r0
 800af9e:	6030      	str	r0, [r6, #0]
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d1d5      	bne.n	800af50 <__sfp+0x24>
 800afa4:	f7ff ff78 	bl	800ae98 <__sfp_lock_release>
 800afa8:	230c      	movs	r3, #12
 800afaa:	603b      	str	r3, [r7, #0]
 800afac:	e7ee      	b.n	800af8c <__sfp+0x60>
 800afae:	bf00      	nop
 800afb0:	0800bed0 	.word	0x0800bed0
 800afb4:	ffff0001 	.word	0xffff0001

0800afb8 <_fwalk_reent>:
 800afb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afbc:	4606      	mov	r6, r0
 800afbe:	4688      	mov	r8, r1
 800afc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afc4:	2700      	movs	r7, #0
 800afc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afca:	f1b9 0901 	subs.w	r9, r9, #1
 800afce:	d505      	bpl.n	800afdc <_fwalk_reent+0x24>
 800afd0:	6824      	ldr	r4, [r4, #0]
 800afd2:	2c00      	cmp	r4, #0
 800afd4:	d1f7      	bne.n	800afc6 <_fwalk_reent+0xe>
 800afd6:	4638      	mov	r0, r7
 800afd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afdc:	89ab      	ldrh	r3, [r5, #12]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d907      	bls.n	800aff2 <_fwalk_reent+0x3a>
 800afe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afe6:	3301      	adds	r3, #1
 800afe8:	d003      	beq.n	800aff2 <_fwalk_reent+0x3a>
 800afea:	4629      	mov	r1, r5
 800afec:	4630      	mov	r0, r6
 800afee:	47c0      	blx	r8
 800aff0:	4307      	orrs	r7, r0
 800aff2:	3568      	adds	r5, #104	; 0x68
 800aff4:	e7e9      	b.n	800afca <_fwalk_reent+0x12>

0800aff6 <__swhatbuf_r>:
 800aff6:	b570      	push	{r4, r5, r6, lr}
 800aff8:	460e      	mov	r6, r1
 800affa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800affe:	2900      	cmp	r1, #0
 800b000:	b096      	sub	sp, #88	; 0x58
 800b002:	4614      	mov	r4, r2
 800b004:	461d      	mov	r5, r3
 800b006:	da08      	bge.n	800b01a <__swhatbuf_r+0x24>
 800b008:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	602a      	str	r2, [r5, #0]
 800b010:	061a      	lsls	r2, r3, #24
 800b012:	d410      	bmi.n	800b036 <__swhatbuf_r+0x40>
 800b014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b018:	e00e      	b.n	800b038 <__swhatbuf_r+0x42>
 800b01a:	466a      	mov	r2, sp
 800b01c:	f000 f902 	bl	800b224 <_fstat_r>
 800b020:	2800      	cmp	r0, #0
 800b022:	dbf1      	blt.n	800b008 <__swhatbuf_r+0x12>
 800b024:	9a01      	ldr	r2, [sp, #4]
 800b026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b02a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b02e:	425a      	negs	r2, r3
 800b030:	415a      	adcs	r2, r3
 800b032:	602a      	str	r2, [r5, #0]
 800b034:	e7ee      	b.n	800b014 <__swhatbuf_r+0x1e>
 800b036:	2340      	movs	r3, #64	; 0x40
 800b038:	2000      	movs	r0, #0
 800b03a:	6023      	str	r3, [r4, #0]
 800b03c:	b016      	add	sp, #88	; 0x58
 800b03e:	bd70      	pop	{r4, r5, r6, pc}

0800b040 <__smakebuf_r>:
 800b040:	898b      	ldrh	r3, [r1, #12]
 800b042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b044:	079d      	lsls	r5, r3, #30
 800b046:	4606      	mov	r6, r0
 800b048:	460c      	mov	r4, r1
 800b04a:	d507      	bpl.n	800b05c <__smakebuf_r+0x1c>
 800b04c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	6123      	str	r3, [r4, #16]
 800b054:	2301      	movs	r3, #1
 800b056:	6163      	str	r3, [r4, #20]
 800b058:	b002      	add	sp, #8
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	ab01      	add	r3, sp, #4
 800b05e:	466a      	mov	r2, sp
 800b060:	f7ff ffc9 	bl	800aff6 <__swhatbuf_r>
 800b064:	9900      	ldr	r1, [sp, #0]
 800b066:	4605      	mov	r5, r0
 800b068:	4630      	mov	r0, r6
 800b06a:	f7fd fa57 	bl	800851c <_malloc_r>
 800b06e:	b948      	cbnz	r0, 800b084 <__smakebuf_r+0x44>
 800b070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b074:	059a      	lsls	r2, r3, #22
 800b076:	d4ef      	bmi.n	800b058 <__smakebuf_r+0x18>
 800b078:	f023 0303 	bic.w	r3, r3, #3
 800b07c:	f043 0302 	orr.w	r3, r3, #2
 800b080:	81a3      	strh	r3, [r4, #12]
 800b082:	e7e3      	b.n	800b04c <__smakebuf_r+0xc>
 800b084:	4b0d      	ldr	r3, [pc, #52]	; (800b0bc <__smakebuf_r+0x7c>)
 800b086:	62b3      	str	r3, [r6, #40]	; 0x28
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	6020      	str	r0, [r4, #0]
 800b08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	9b00      	ldr	r3, [sp, #0]
 800b094:	6163      	str	r3, [r4, #20]
 800b096:	9b01      	ldr	r3, [sp, #4]
 800b098:	6120      	str	r0, [r4, #16]
 800b09a:	b15b      	cbz	r3, 800b0b4 <__smakebuf_r+0x74>
 800b09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f000 f8d1 	bl	800b248 <_isatty_r>
 800b0a6:	b128      	cbz	r0, 800b0b4 <__smakebuf_r+0x74>
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	f023 0303 	bic.w	r3, r3, #3
 800b0ae:	f043 0301 	orr.w	r3, r3, #1
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	89a0      	ldrh	r0, [r4, #12]
 800b0b6:	4305      	orrs	r5, r0
 800b0b8:	81a5      	strh	r5, [r4, #12]
 800b0ba:	e7cd      	b.n	800b058 <__smakebuf_r+0x18>
 800b0bc:	0800ae55 	.word	0x0800ae55

0800b0c0 <_malloc_usable_size_r>:
 800b0c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0c4:	1f18      	subs	r0, r3, #4
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	bfbc      	itt	lt
 800b0ca:	580b      	ldrlt	r3, [r1, r0]
 800b0cc:	18c0      	addlt	r0, r0, r3
 800b0ce:	4770      	bx	lr

0800b0d0 <_raise_r>:
 800b0d0:	291f      	cmp	r1, #31
 800b0d2:	b538      	push	{r3, r4, r5, lr}
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	d904      	bls.n	800b0e4 <_raise_r+0x14>
 800b0da:	2316      	movs	r3, #22
 800b0dc:	6003      	str	r3, [r0, #0]
 800b0de:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
 800b0e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0e6:	b112      	cbz	r2, 800b0ee <_raise_r+0x1e>
 800b0e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0ec:	b94b      	cbnz	r3, 800b102 <_raise_r+0x32>
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 f830 	bl	800b154 <_getpid_r>
 800b0f4:	462a      	mov	r2, r5
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0fe:	f000 b817 	b.w	800b130 <_kill_r>
 800b102:	2b01      	cmp	r3, #1
 800b104:	d00a      	beq.n	800b11c <_raise_r+0x4c>
 800b106:	1c59      	adds	r1, r3, #1
 800b108:	d103      	bne.n	800b112 <_raise_r+0x42>
 800b10a:	2316      	movs	r3, #22
 800b10c:	6003      	str	r3, [r0, #0]
 800b10e:	2001      	movs	r0, #1
 800b110:	e7e7      	b.n	800b0e2 <_raise_r+0x12>
 800b112:	2400      	movs	r4, #0
 800b114:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b118:	4628      	mov	r0, r5
 800b11a:	4798      	blx	r3
 800b11c:	2000      	movs	r0, #0
 800b11e:	e7e0      	b.n	800b0e2 <_raise_r+0x12>

0800b120 <raise>:
 800b120:	4b02      	ldr	r3, [pc, #8]	; (800b12c <raise+0xc>)
 800b122:	4601      	mov	r1, r0
 800b124:	6818      	ldr	r0, [r3, #0]
 800b126:	f7ff bfd3 	b.w	800b0d0 <_raise_r>
 800b12a:	bf00      	nop
 800b12c:	20000064 	.word	0x20000064

0800b130 <_kill_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4d07      	ldr	r5, [pc, #28]	; (800b150 <_kill_r+0x20>)
 800b134:	2300      	movs	r3, #0
 800b136:	4604      	mov	r4, r0
 800b138:	4608      	mov	r0, r1
 800b13a:	4611      	mov	r1, r2
 800b13c:	602b      	str	r3, [r5, #0]
 800b13e:	f7f7 f88f 	bl	8002260 <_kill>
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	d102      	bne.n	800b14c <_kill_r+0x1c>
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	b103      	cbz	r3, 800b14c <_kill_r+0x1c>
 800b14a:	6023      	str	r3, [r4, #0]
 800b14c:	bd38      	pop	{r3, r4, r5, pc}
 800b14e:	bf00      	nop
 800b150:	20000604 	.word	0x20000604

0800b154 <_getpid_r>:
 800b154:	f7f7 b87c 	b.w	8002250 <_getpid>

0800b158 <__sread>:
 800b158:	b510      	push	{r4, lr}
 800b15a:	460c      	mov	r4, r1
 800b15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b160:	f000 f894 	bl	800b28c <_read_r>
 800b164:	2800      	cmp	r0, #0
 800b166:	bfab      	itete	ge
 800b168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b16a:	89a3      	ldrhlt	r3, [r4, #12]
 800b16c:	181b      	addge	r3, r3, r0
 800b16e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b172:	bfac      	ite	ge
 800b174:	6563      	strge	r3, [r4, #84]	; 0x54
 800b176:	81a3      	strhlt	r3, [r4, #12]
 800b178:	bd10      	pop	{r4, pc}

0800b17a <__swrite>:
 800b17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b17e:	461f      	mov	r7, r3
 800b180:	898b      	ldrh	r3, [r1, #12]
 800b182:	05db      	lsls	r3, r3, #23
 800b184:	4605      	mov	r5, r0
 800b186:	460c      	mov	r4, r1
 800b188:	4616      	mov	r6, r2
 800b18a:	d505      	bpl.n	800b198 <__swrite+0x1e>
 800b18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b190:	2302      	movs	r3, #2
 800b192:	2200      	movs	r2, #0
 800b194:	f000 f868 	bl	800b268 <_lseek_r>
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b19e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1a2:	81a3      	strh	r3, [r4, #12]
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ae:	f000 b817 	b.w	800b1e0 <_write_r>

0800b1b2 <__sseek>:
 800b1b2:	b510      	push	{r4, lr}
 800b1b4:	460c      	mov	r4, r1
 800b1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ba:	f000 f855 	bl	800b268 <_lseek_r>
 800b1be:	1c43      	adds	r3, r0, #1
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	bf15      	itete	ne
 800b1c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1ce:	81a3      	strheq	r3, [r4, #12]
 800b1d0:	bf18      	it	ne
 800b1d2:	81a3      	strhne	r3, [r4, #12]
 800b1d4:	bd10      	pop	{r4, pc}

0800b1d6 <__sclose>:
 800b1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1da:	f000 b813 	b.w	800b204 <_close_r>
	...

0800b1e0 <_write_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4d07      	ldr	r5, [pc, #28]	; (800b200 <_write_r+0x20>)
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	4608      	mov	r0, r1
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	602a      	str	r2, [r5, #0]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f7f7 f86d 	bl	80022ce <_write>
 800b1f4:	1c43      	adds	r3, r0, #1
 800b1f6:	d102      	bne.n	800b1fe <_write_r+0x1e>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	b103      	cbz	r3, 800b1fe <_write_r+0x1e>
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
 800b200:	20000604 	.word	0x20000604

0800b204 <_close_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	4d06      	ldr	r5, [pc, #24]	; (800b220 <_close_r+0x1c>)
 800b208:	2300      	movs	r3, #0
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	f7f7 f879 	bl	8002306 <_close>
 800b214:	1c43      	adds	r3, r0, #1
 800b216:	d102      	bne.n	800b21e <_close_r+0x1a>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	b103      	cbz	r3, 800b21e <_close_r+0x1a>
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	bd38      	pop	{r3, r4, r5, pc}
 800b220:	20000604 	.word	0x20000604

0800b224 <_fstat_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4d07      	ldr	r5, [pc, #28]	; (800b244 <_fstat_r+0x20>)
 800b228:	2300      	movs	r3, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	4608      	mov	r0, r1
 800b22e:	4611      	mov	r1, r2
 800b230:	602b      	str	r3, [r5, #0]
 800b232:	f7f7 f874 	bl	800231e <_fstat>
 800b236:	1c43      	adds	r3, r0, #1
 800b238:	d102      	bne.n	800b240 <_fstat_r+0x1c>
 800b23a:	682b      	ldr	r3, [r5, #0]
 800b23c:	b103      	cbz	r3, 800b240 <_fstat_r+0x1c>
 800b23e:	6023      	str	r3, [r4, #0]
 800b240:	bd38      	pop	{r3, r4, r5, pc}
 800b242:	bf00      	nop
 800b244:	20000604 	.word	0x20000604

0800b248 <_isatty_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4d06      	ldr	r5, [pc, #24]	; (800b264 <_isatty_r+0x1c>)
 800b24c:	2300      	movs	r3, #0
 800b24e:	4604      	mov	r4, r0
 800b250:	4608      	mov	r0, r1
 800b252:	602b      	str	r3, [r5, #0]
 800b254:	f7f7 f873 	bl	800233e <_isatty>
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	d102      	bne.n	800b262 <_isatty_r+0x1a>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b103      	cbz	r3, 800b262 <_isatty_r+0x1a>
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	20000604 	.word	0x20000604

0800b268 <_lseek_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4d07      	ldr	r5, [pc, #28]	; (800b288 <_lseek_r+0x20>)
 800b26c:	4604      	mov	r4, r0
 800b26e:	4608      	mov	r0, r1
 800b270:	4611      	mov	r1, r2
 800b272:	2200      	movs	r2, #0
 800b274:	602a      	str	r2, [r5, #0]
 800b276:	461a      	mov	r2, r3
 800b278:	f7f7 f86c 	bl	8002354 <_lseek>
 800b27c:	1c43      	adds	r3, r0, #1
 800b27e:	d102      	bne.n	800b286 <_lseek_r+0x1e>
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	b103      	cbz	r3, 800b286 <_lseek_r+0x1e>
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	bd38      	pop	{r3, r4, r5, pc}
 800b288:	20000604 	.word	0x20000604

0800b28c <_read_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	4d07      	ldr	r5, [pc, #28]	; (800b2ac <_read_r+0x20>)
 800b290:	4604      	mov	r4, r0
 800b292:	4608      	mov	r0, r1
 800b294:	4611      	mov	r1, r2
 800b296:	2200      	movs	r2, #0
 800b298:	602a      	str	r2, [r5, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	f7f6 fffa 	bl	8002294 <_read>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d102      	bne.n	800b2aa <_read_r+0x1e>
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	b103      	cbz	r3, 800b2aa <_read_r+0x1e>
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
 800b2ac:	20000604 	.word	0x20000604

0800b2b0 <log>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	ed2d 8b02 	vpush	{d8}
 800b2b6:	ec55 4b10 	vmov	r4, r5, d0
 800b2ba:	f000 f865 	bl	800b388 <__ieee754_log>
 800b2be:	4622      	mov	r2, r4
 800b2c0:	462b      	mov	r3, r5
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	eeb0 8a40 	vmov.f32	s16, s0
 800b2ca:	eef0 8a60 	vmov.f32	s17, s1
 800b2ce:	f7f5 fc35 	bl	8000b3c <__aeabi_dcmpun>
 800b2d2:	b998      	cbnz	r0, 800b2fc <log+0x4c>
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	4620      	mov	r0, r4
 800b2da:	4629      	mov	r1, r5
 800b2dc:	f7f5 fc24 	bl	8000b28 <__aeabi_dcmpgt>
 800b2e0:	b960      	cbnz	r0, 800b2fc <log+0x4c>
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 fbf5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2ee:	b160      	cbz	r0, 800b30a <log+0x5a>
 800b2f0:	f7fd f86e 	bl	80083d0 <__errno>
 800b2f4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b320 <log+0x70>
 800b2f8:	2322      	movs	r3, #34	; 0x22
 800b2fa:	6003      	str	r3, [r0, #0]
 800b2fc:	eeb0 0a48 	vmov.f32	s0, s16
 800b300:	eef0 0a68 	vmov.f32	s1, s17
 800b304:	ecbd 8b02 	vpop	{d8}
 800b308:	bd38      	pop	{r3, r4, r5, pc}
 800b30a:	f7fd f861 	bl	80083d0 <__errno>
 800b30e:	ecbd 8b02 	vpop	{d8}
 800b312:	2321      	movs	r3, #33	; 0x21
 800b314:	6003      	str	r3, [r0, #0]
 800b316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b31a:	4803      	ldr	r0, [pc, #12]	; (800b328 <log+0x78>)
 800b31c:	f000 baa0 	b.w	800b860 <nan>
 800b320:	00000000 	.word	0x00000000
 800b324:	fff00000 	.word	0xfff00000
 800b328:	0800c140 	.word	0x0800c140

0800b32c <sqrt>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	ed2d 8b02 	vpush	{d8}
 800b332:	ec55 4b10 	vmov	r4, r5, d0
 800b336:	f000 f9e1 	bl	800b6fc <__ieee754_sqrt>
 800b33a:	4622      	mov	r2, r4
 800b33c:	462b      	mov	r3, r5
 800b33e:	4620      	mov	r0, r4
 800b340:	4629      	mov	r1, r5
 800b342:	eeb0 8a40 	vmov.f32	s16, s0
 800b346:	eef0 8a60 	vmov.f32	s17, s1
 800b34a:	f7f5 fbf7 	bl	8000b3c <__aeabi_dcmpun>
 800b34e:	b990      	cbnz	r0, 800b376 <sqrt+0x4a>
 800b350:	2200      	movs	r2, #0
 800b352:	2300      	movs	r3, #0
 800b354:	4620      	mov	r0, r4
 800b356:	4629      	mov	r1, r5
 800b358:	f7f5 fbc8 	bl	8000aec <__aeabi_dcmplt>
 800b35c:	b158      	cbz	r0, 800b376 <sqrt+0x4a>
 800b35e:	f7fd f837 	bl	80083d0 <__errno>
 800b362:	2321      	movs	r3, #33	; 0x21
 800b364:	6003      	str	r3, [r0, #0]
 800b366:	2200      	movs	r2, #0
 800b368:	2300      	movs	r3, #0
 800b36a:	4610      	mov	r0, r2
 800b36c:	4619      	mov	r1, r3
 800b36e:	f7f5 fa75 	bl	800085c <__aeabi_ddiv>
 800b372:	ec41 0b18 	vmov	d8, r0, r1
 800b376:	eeb0 0a48 	vmov.f32	s0, s16
 800b37a:	eef0 0a68 	vmov.f32	s1, s17
 800b37e:	ecbd 8b02 	vpop	{d8}
 800b382:	bd38      	pop	{r3, r4, r5, pc}
 800b384:	0000      	movs	r0, r0
	...

0800b388 <__ieee754_log>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	ec51 0b10 	vmov	r0, r1, d0
 800b390:	ed2d 8b04 	vpush	{d8-d9}
 800b394:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b398:	b083      	sub	sp, #12
 800b39a:	460d      	mov	r5, r1
 800b39c:	da29      	bge.n	800b3f2 <__ieee754_log+0x6a>
 800b39e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b3a2:	4303      	orrs	r3, r0
 800b3a4:	ee10 2a10 	vmov	r2, s0
 800b3a8:	d10c      	bne.n	800b3c4 <__ieee754_log+0x3c>
 800b3aa:	49cf      	ldr	r1, [pc, #828]	; (800b6e8 <__ieee754_log+0x360>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	f7f5 fa53 	bl	800085c <__aeabi_ddiv>
 800b3b6:	ec41 0b10 	vmov	d0, r0, r1
 800b3ba:	b003      	add	sp, #12
 800b3bc:	ecbd 8b04 	vpop	{d8-d9}
 800b3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c4:	2900      	cmp	r1, #0
 800b3c6:	da05      	bge.n	800b3d4 <__ieee754_log+0x4c>
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	f7f4 ff65 	bl	8000298 <__aeabi_dsub>
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e7ee      	b.n	800b3b2 <__ieee754_log+0x2a>
 800b3d4:	4bc5      	ldr	r3, [pc, #788]	; (800b6ec <__ieee754_log+0x364>)
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f7f5 f916 	bl	8000608 <__aeabi_dmul>
 800b3dc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b3e0:	460d      	mov	r5, r1
 800b3e2:	4ac3      	ldr	r2, [pc, #780]	; (800b6f0 <__ieee754_log+0x368>)
 800b3e4:	4295      	cmp	r5, r2
 800b3e6:	dd06      	ble.n	800b3f6 <__ieee754_log+0x6e>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	f7f4 ff56 	bl	800029c <__adddf3>
 800b3f0:	e7e1      	b.n	800b3b6 <__ieee754_log+0x2e>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	e7f5      	b.n	800b3e2 <__ieee754_log+0x5a>
 800b3f6:	152c      	asrs	r4, r5, #20
 800b3f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b3fc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b400:	441c      	add	r4, r3
 800b402:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b406:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b40a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b40e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b412:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b416:	ea42 0105 	orr.w	r1, r2, r5
 800b41a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b41e:	2200      	movs	r2, #0
 800b420:	4bb4      	ldr	r3, [pc, #720]	; (800b6f4 <__ieee754_log+0x36c>)
 800b422:	f7f4 ff39 	bl	8000298 <__aeabi_dsub>
 800b426:	1cab      	adds	r3, r5, #2
 800b428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	4682      	mov	sl, r0
 800b430:	468b      	mov	fp, r1
 800b432:	f04f 0200 	mov.w	r2, #0
 800b436:	dc53      	bgt.n	800b4e0 <__ieee754_log+0x158>
 800b438:	2300      	movs	r3, #0
 800b43a:	f7f5 fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b43e:	b1d0      	cbz	r0, 800b476 <__ieee754_log+0xee>
 800b440:	2c00      	cmp	r4, #0
 800b442:	f000 8122 	beq.w	800b68a <__ieee754_log+0x302>
 800b446:	4620      	mov	r0, r4
 800b448:	f7f5 f874 	bl	8000534 <__aeabi_i2d>
 800b44c:	a390      	add	r3, pc, #576	; (adr r3, 800b690 <__ieee754_log+0x308>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	4606      	mov	r6, r0
 800b454:	460f      	mov	r7, r1
 800b456:	f7f5 f8d7 	bl	8000608 <__aeabi_dmul>
 800b45a:	a38f      	add	r3, pc, #572	; (adr r3, 800b698 <__ieee754_log+0x310>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	4604      	mov	r4, r0
 800b462:	460d      	mov	r5, r1
 800b464:	4630      	mov	r0, r6
 800b466:	4639      	mov	r1, r7
 800b468:	f7f5 f8ce 	bl	8000608 <__aeabi_dmul>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4620      	mov	r0, r4
 800b472:	4629      	mov	r1, r5
 800b474:	e7ba      	b.n	800b3ec <__ieee754_log+0x64>
 800b476:	a38a      	add	r3, pc, #552	; (adr r3, 800b6a0 <__ieee754_log+0x318>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	4650      	mov	r0, sl
 800b47e:	4659      	mov	r1, fp
 800b480:	f7f5 f8c2 	bl	8000608 <__aeabi_dmul>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	2000      	movs	r0, #0
 800b48a:	499b      	ldr	r1, [pc, #620]	; (800b6f8 <__ieee754_log+0x370>)
 800b48c:	f7f4 ff04 	bl	8000298 <__aeabi_dsub>
 800b490:	4652      	mov	r2, sl
 800b492:	4606      	mov	r6, r0
 800b494:	460f      	mov	r7, r1
 800b496:	465b      	mov	r3, fp
 800b498:	4650      	mov	r0, sl
 800b49a:	4659      	mov	r1, fp
 800b49c:	f7f5 f8b4 	bl	8000608 <__aeabi_dmul>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	4639      	mov	r1, r7
 800b4a8:	f7f5 f8ae 	bl	8000608 <__aeabi_dmul>
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	460f      	mov	r7, r1
 800b4b0:	b914      	cbnz	r4, 800b4b8 <__ieee754_log+0x130>
 800b4b2:	4632      	mov	r2, r6
 800b4b4:	463b      	mov	r3, r7
 800b4b6:	e0a2      	b.n	800b5fe <__ieee754_log+0x276>
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7f5 f83b 	bl	8000534 <__aeabi_i2d>
 800b4be:	a374      	add	r3, pc, #464	; (adr r3, 800b690 <__ieee754_log+0x308>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	4689      	mov	r9, r1
 800b4c8:	f7f5 f89e 	bl	8000608 <__aeabi_dmul>
 800b4cc:	a372      	add	r3, pc, #456	; (adr r3, 800b698 <__ieee754_log+0x310>)
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	460d      	mov	r5, r1
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	4649      	mov	r1, r9
 800b4da:	f7f5 f895 	bl	8000608 <__aeabi_dmul>
 800b4de:	e0a7      	b.n	800b630 <__ieee754_log+0x2a8>
 800b4e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4e4:	f7f4 feda 	bl	800029c <__adddf3>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4650      	mov	r0, sl
 800b4ee:	4659      	mov	r1, fp
 800b4f0:	f7f5 f9b4 	bl	800085c <__aeabi_ddiv>
 800b4f4:	ec41 0b18 	vmov	d8, r0, r1
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f7f5 f81b 	bl	8000534 <__aeabi_i2d>
 800b4fe:	ec53 2b18 	vmov	r2, r3, d8
 800b502:	ec41 0b19 	vmov	d9, r0, r1
 800b506:	ec51 0b18 	vmov	r0, r1, d8
 800b50a:	f7f5 f87d 	bl	8000608 <__aeabi_dmul>
 800b50e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b512:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b516:	9301      	str	r3, [sp, #4]
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	4680      	mov	r8, r0
 800b51e:	4689      	mov	r9, r1
 800b520:	f7f5 f872 	bl	8000608 <__aeabi_dmul>
 800b524:	a360      	add	r3, pc, #384	; (adr r3, 800b6a8 <__ieee754_log+0x320>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	4606      	mov	r6, r0
 800b52c:	460f      	mov	r7, r1
 800b52e:	f7f5 f86b 	bl	8000608 <__aeabi_dmul>
 800b532:	a35f      	add	r3, pc, #380	; (adr r3, 800b6b0 <__ieee754_log+0x328>)
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	f7f4 feb0 	bl	800029c <__adddf3>
 800b53c:	4632      	mov	r2, r6
 800b53e:	463b      	mov	r3, r7
 800b540:	f7f5 f862 	bl	8000608 <__aeabi_dmul>
 800b544:	a35c      	add	r3, pc, #368	; (adr r3, 800b6b8 <__ieee754_log+0x330>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	f7f4 fea7 	bl	800029c <__adddf3>
 800b54e:	4632      	mov	r2, r6
 800b550:	463b      	mov	r3, r7
 800b552:	f7f5 f859 	bl	8000608 <__aeabi_dmul>
 800b556:	a35a      	add	r3, pc, #360	; (adr r3, 800b6c0 <__ieee754_log+0x338>)
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f7f4 fe9e 	bl	800029c <__adddf3>
 800b560:	4642      	mov	r2, r8
 800b562:	464b      	mov	r3, r9
 800b564:	f7f5 f850 	bl	8000608 <__aeabi_dmul>
 800b568:	a357      	add	r3, pc, #348	; (adr r3, 800b6c8 <__ieee754_log+0x340>)
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	4680      	mov	r8, r0
 800b570:	4689      	mov	r9, r1
 800b572:	4630      	mov	r0, r6
 800b574:	4639      	mov	r1, r7
 800b576:	f7f5 f847 	bl	8000608 <__aeabi_dmul>
 800b57a:	a355      	add	r3, pc, #340	; (adr r3, 800b6d0 <__ieee754_log+0x348>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f7f4 fe8c 	bl	800029c <__adddf3>
 800b584:	4632      	mov	r2, r6
 800b586:	463b      	mov	r3, r7
 800b588:	f7f5 f83e 	bl	8000608 <__aeabi_dmul>
 800b58c:	a352      	add	r3, pc, #328	; (adr r3, 800b6d8 <__ieee754_log+0x350>)
 800b58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b592:	f7f4 fe83 	bl	800029c <__adddf3>
 800b596:	4632      	mov	r2, r6
 800b598:	463b      	mov	r3, r7
 800b59a:	f7f5 f835 	bl	8000608 <__aeabi_dmul>
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	4640      	mov	r0, r8
 800b5a6:	f7f4 fe79 	bl	800029c <__adddf3>
 800b5aa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b5ae:	9b01      	ldr	r3, [sp, #4]
 800b5b0:	3551      	adds	r5, #81	; 0x51
 800b5b2:	431d      	orrs	r5, r3
 800b5b4:	2d00      	cmp	r5, #0
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	4689      	mov	r9, r1
 800b5ba:	dd48      	ble.n	800b64e <__ieee754_log+0x2c6>
 800b5bc:	4b4e      	ldr	r3, [pc, #312]	; (800b6f8 <__ieee754_log+0x370>)
 800b5be:	2200      	movs	r2, #0
 800b5c0:	4650      	mov	r0, sl
 800b5c2:	4659      	mov	r1, fp
 800b5c4:	f7f5 f820 	bl	8000608 <__aeabi_dmul>
 800b5c8:	4652      	mov	r2, sl
 800b5ca:	465b      	mov	r3, fp
 800b5cc:	f7f5 f81c 	bl	8000608 <__aeabi_dmul>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	4640      	mov	r0, r8
 800b5da:	4649      	mov	r1, r9
 800b5dc:	f7f4 fe5e 	bl	800029c <__adddf3>
 800b5e0:	ec53 2b18 	vmov	r2, r3, d8
 800b5e4:	f7f5 f810 	bl	8000608 <__aeabi_dmul>
 800b5e8:	4680      	mov	r8, r0
 800b5ea:	4689      	mov	r9, r1
 800b5ec:	b964      	cbnz	r4, 800b608 <__ieee754_log+0x280>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	f7f4 fe4f 	bl	8000298 <__aeabi_dsub>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4650      	mov	r0, sl
 800b600:	4659      	mov	r1, fp
 800b602:	f7f4 fe49 	bl	8000298 <__aeabi_dsub>
 800b606:	e6d6      	b.n	800b3b6 <__ieee754_log+0x2e>
 800b608:	a321      	add	r3, pc, #132	; (adr r3, 800b690 <__ieee754_log+0x308>)
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	ec51 0b19 	vmov	r0, r1, d9
 800b612:	f7f4 fff9 	bl	8000608 <__aeabi_dmul>
 800b616:	a320      	add	r3, pc, #128	; (adr r3, 800b698 <__ieee754_log+0x310>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	4604      	mov	r4, r0
 800b61e:	460d      	mov	r5, r1
 800b620:	ec51 0b19 	vmov	r0, r1, d9
 800b624:	f7f4 fff0 	bl	8000608 <__aeabi_dmul>
 800b628:	4642      	mov	r2, r8
 800b62a:	464b      	mov	r3, r9
 800b62c:	f7f4 fe36 	bl	800029c <__adddf3>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4630      	mov	r0, r6
 800b636:	4639      	mov	r1, r7
 800b638:	f7f4 fe2e 	bl	8000298 <__aeabi_dsub>
 800b63c:	4652      	mov	r2, sl
 800b63e:	465b      	mov	r3, fp
 800b640:	f7f4 fe2a 	bl	8000298 <__aeabi_dsub>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4620      	mov	r0, r4
 800b64a:	4629      	mov	r1, r5
 800b64c:	e7d9      	b.n	800b602 <__ieee754_log+0x27a>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	4650      	mov	r0, sl
 800b654:	4659      	mov	r1, fp
 800b656:	f7f4 fe1f 	bl	8000298 <__aeabi_dsub>
 800b65a:	ec53 2b18 	vmov	r2, r3, d8
 800b65e:	f7f4 ffd3 	bl	8000608 <__aeabi_dmul>
 800b662:	4606      	mov	r6, r0
 800b664:	460f      	mov	r7, r1
 800b666:	2c00      	cmp	r4, #0
 800b668:	f43f af23 	beq.w	800b4b2 <__ieee754_log+0x12a>
 800b66c:	a308      	add	r3, pc, #32	; (adr r3, 800b690 <__ieee754_log+0x308>)
 800b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b672:	ec51 0b19 	vmov	r0, r1, d9
 800b676:	f7f4 ffc7 	bl	8000608 <__aeabi_dmul>
 800b67a:	a307      	add	r3, pc, #28	; (adr r3, 800b698 <__ieee754_log+0x310>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	4604      	mov	r4, r0
 800b682:	460d      	mov	r5, r1
 800b684:	ec51 0b19 	vmov	r0, r1, d9
 800b688:	e727      	b.n	800b4da <__ieee754_log+0x152>
 800b68a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b6e0 <__ieee754_log+0x358>
 800b68e:	e694      	b.n	800b3ba <__ieee754_log+0x32>
 800b690:	fee00000 	.word	0xfee00000
 800b694:	3fe62e42 	.word	0x3fe62e42
 800b698:	35793c76 	.word	0x35793c76
 800b69c:	3dea39ef 	.word	0x3dea39ef
 800b6a0:	55555555 	.word	0x55555555
 800b6a4:	3fd55555 	.word	0x3fd55555
 800b6a8:	df3e5244 	.word	0xdf3e5244
 800b6ac:	3fc2f112 	.word	0x3fc2f112
 800b6b0:	96cb03de 	.word	0x96cb03de
 800b6b4:	3fc74664 	.word	0x3fc74664
 800b6b8:	94229359 	.word	0x94229359
 800b6bc:	3fd24924 	.word	0x3fd24924
 800b6c0:	55555593 	.word	0x55555593
 800b6c4:	3fe55555 	.word	0x3fe55555
 800b6c8:	d078c69f 	.word	0xd078c69f
 800b6cc:	3fc39a09 	.word	0x3fc39a09
 800b6d0:	1d8e78af 	.word	0x1d8e78af
 800b6d4:	3fcc71c5 	.word	0x3fcc71c5
 800b6d8:	9997fa04 	.word	0x9997fa04
 800b6dc:	3fd99999 	.word	0x3fd99999
	...
 800b6e8:	c3500000 	.word	0xc3500000
 800b6ec:	43500000 	.word	0x43500000
 800b6f0:	7fefffff 	.word	0x7fefffff
 800b6f4:	3ff00000 	.word	0x3ff00000
 800b6f8:	3fe00000 	.word	0x3fe00000

0800b6fc <__ieee754_sqrt>:
 800b6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b700:	ec55 4b10 	vmov	r4, r5, d0
 800b704:	4e55      	ldr	r6, [pc, #340]	; (800b85c <__ieee754_sqrt+0x160>)
 800b706:	43ae      	bics	r6, r5
 800b708:	ee10 0a10 	vmov	r0, s0
 800b70c:	ee10 3a10 	vmov	r3, s0
 800b710:	462a      	mov	r2, r5
 800b712:	4629      	mov	r1, r5
 800b714:	d110      	bne.n	800b738 <__ieee754_sqrt+0x3c>
 800b716:	ee10 2a10 	vmov	r2, s0
 800b71a:	462b      	mov	r3, r5
 800b71c:	f7f4 ff74 	bl	8000608 <__aeabi_dmul>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4620      	mov	r0, r4
 800b726:	4629      	mov	r1, r5
 800b728:	f7f4 fdb8 	bl	800029c <__adddf3>
 800b72c:	4604      	mov	r4, r0
 800b72e:	460d      	mov	r5, r1
 800b730:	ec45 4b10 	vmov	d0, r4, r5
 800b734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b738:	2d00      	cmp	r5, #0
 800b73a:	dc10      	bgt.n	800b75e <__ieee754_sqrt+0x62>
 800b73c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b740:	4330      	orrs	r0, r6
 800b742:	d0f5      	beq.n	800b730 <__ieee754_sqrt+0x34>
 800b744:	b15d      	cbz	r5, 800b75e <__ieee754_sqrt+0x62>
 800b746:	ee10 2a10 	vmov	r2, s0
 800b74a:	462b      	mov	r3, r5
 800b74c:	ee10 0a10 	vmov	r0, s0
 800b750:	f7f4 fda2 	bl	8000298 <__aeabi_dsub>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	f7f5 f880 	bl	800085c <__aeabi_ddiv>
 800b75c:	e7e6      	b.n	800b72c <__ieee754_sqrt+0x30>
 800b75e:	1512      	asrs	r2, r2, #20
 800b760:	d074      	beq.n	800b84c <__ieee754_sqrt+0x150>
 800b762:	07d4      	lsls	r4, r2, #31
 800b764:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b768:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b76c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b770:	bf5e      	ittt	pl
 800b772:	0fda      	lsrpl	r2, r3, #31
 800b774:	005b      	lslpl	r3, r3, #1
 800b776:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b77a:	2400      	movs	r4, #0
 800b77c:	0fda      	lsrs	r2, r3, #31
 800b77e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b782:	107f      	asrs	r7, r7, #1
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	2516      	movs	r5, #22
 800b788:	4620      	mov	r0, r4
 800b78a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b78e:	1886      	adds	r6, r0, r2
 800b790:	428e      	cmp	r6, r1
 800b792:	bfde      	ittt	le
 800b794:	1b89      	suble	r1, r1, r6
 800b796:	18b0      	addle	r0, r6, r2
 800b798:	18a4      	addle	r4, r4, r2
 800b79a:	0049      	lsls	r1, r1, #1
 800b79c:	3d01      	subs	r5, #1
 800b79e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b7a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b7a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7aa:	d1f0      	bne.n	800b78e <__ieee754_sqrt+0x92>
 800b7ac:	462a      	mov	r2, r5
 800b7ae:	f04f 0e20 	mov.w	lr, #32
 800b7b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b7b6:	4281      	cmp	r1, r0
 800b7b8:	eb06 0c05 	add.w	ip, r6, r5
 800b7bc:	dc02      	bgt.n	800b7c4 <__ieee754_sqrt+0xc8>
 800b7be:	d113      	bne.n	800b7e8 <__ieee754_sqrt+0xec>
 800b7c0:	459c      	cmp	ip, r3
 800b7c2:	d811      	bhi.n	800b7e8 <__ieee754_sqrt+0xec>
 800b7c4:	f1bc 0f00 	cmp.w	ip, #0
 800b7c8:	eb0c 0506 	add.w	r5, ip, r6
 800b7cc:	da43      	bge.n	800b856 <__ieee754_sqrt+0x15a>
 800b7ce:	2d00      	cmp	r5, #0
 800b7d0:	db41      	blt.n	800b856 <__ieee754_sqrt+0x15a>
 800b7d2:	f100 0801 	add.w	r8, r0, #1
 800b7d6:	1a09      	subs	r1, r1, r0
 800b7d8:	459c      	cmp	ip, r3
 800b7da:	bf88      	it	hi
 800b7dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b7e0:	eba3 030c 	sub.w	r3, r3, ip
 800b7e4:	4432      	add	r2, r6
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b7ec:	f1be 0e01 	subs.w	lr, lr, #1
 800b7f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b7f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b7fc:	d1db      	bne.n	800b7b6 <__ieee754_sqrt+0xba>
 800b7fe:	430b      	orrs	r3, r1
 800b800:	d006      	beq.n	800b810 <__ieee754_sqrt+0x114>
 800b802:	1c50      	adds	r0, r2, #1
 800b804:	bf13      	iteet	ne
 800b806:	3201      	addne	r2, #1
 800b808:	3401      	addeq	r4, #1
 800b80a:	4672      	moveq	r2, lr
 800b80c:	f022 0201 	bicne.w	r2, r2, #1
 800b810:	1063      	asrs	r3, r4, #1
 800b812:	0852      	lsrs	r2, r2, #1
 800b814:	07e1      	lsls	r1, r4, #31
 800b816:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b81a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b81e:	bf48      	it	mi
 800b820:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b824:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b828:	4614      	mov	r4, r2
 800b82a:	e781      	b.n	800b730 <__ieee754_sqrt+0x34>
 800b82c:	0ad9      	lsrs	r1, r3, #11
 800b82e:	3815      	subs	r0, #21
 800b830:	055b      	lsls	r3, r3, #21
 800b832:	2900      	cmp	r1, #0
 800b834:	d0fa      	beq.n	800b82c <__ieee754_sqrt+0x130>
 800b836:	02cd      	lsls	r5, r1, #11
 800b838:	d50a      	bpl.n	800b850 <__ieee754_sqrt+0x154>
 800b83a:	f1c2 0420 	rsb	r4, r2, #32
 800b83e:	fa23 f404 	lsr.w	r4, r3, r4
 800b842:	1e55      	subs	r5, r2, #1
 800b844:	4093      	lsls	r3, r2
 800b846:	4321      	orrs	r1, r4
 800b848:	1b42      	subs	r2, r0, r5
 800b84a:	e78a      	b.n	800b762 <__ieee754_sqrt+0x66>
 800b84c:	4610      	mov	r0, r2
 800b84e:	e7f0      	b.n	800b832 <__ieee754_sqrt+0x136>
 800b850:	0049      	lsls	r1, r1, #1
 800b852:	3201      	adds	r2, #1
 800b854:	e7ef      	b.n	800b836 <__ieee754_sqrt+0x13a>
 800b856:	4680      	mov	r8, r0
 800b858:	e7bd      	b.n	800b7d6 <__ieee754_sqrt+0xda>
 800b85a:	bf00      	nop
 800b85c:	7ff00000 	.word	0x7ff00000

0800b860 <nan>:
 800b860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b868 <nan+0x8>
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	00000000 	.word	0x00000000
 800b86c:	7ff80000 	.word	0x7ff80000

0800b870 <_init>:
 800b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b872:	bf00      	nop
 800b874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b876:	bc08      	pop	{r3}
 800b878:	469e      	mov	lr, r3
 800b87a:	4770      	bx	lr

0800b87c <_fini>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	bf00      	nop
 800b880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b882:	bc08      	pop	{r3}
 800b884:	469e      	mov	lr, r3
 800b886:	4770      	bx	lr
