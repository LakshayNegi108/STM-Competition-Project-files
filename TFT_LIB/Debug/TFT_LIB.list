
TFT_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006940  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f4  08006ae0  08006ae0  00016ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d4  080074d4  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  080074d4  080074d4  000174d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074dc  080074dc  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074dc  080074dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  080074e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000021c  08007700  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08007700  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007180  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b8  00000000  00000000  000273cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00028c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  00029408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174be  00000000  00000000  00029ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094b0  00000000  00000000  00040f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008710e  00000000  00000000  0004a41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d152c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb4  00000000  00000000  000d157c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ac8 	.word	0x08006ac8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	08006ac8 	.word	0x08006ac8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <HMS_bgdisplay>:
void testRoundRects();
void testFilledRoundRects();
void testCase1();
void testCase2();

void HMS_bgdisplay(void) {
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b08b      	sub	sp, #44	; 0x2c
 8000ec0:	af08      	add	r7, sp, #32

	//===================== | Border |===============================//
	for (uint16_t i = 5; i > 0; i--) {
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	80fb      	strh	r3, [r7, #6]
 8000ec6:	e019      	b.n	8000efc <HMS_bgdisplay+0x40>
		LCD_DrawRect(i, i, TFTWIDTH - 2 * i, TFTHEIGHT - 2 * i, WHITE);
 8000ec8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ecc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8000ef0:	9400      	str	r4, [sp, #0]
 8000ef2:	f001 fe56 	bl	8002ba2 <LCD_DrawRect>
	for (uint16_t i = 5; i > 0; i--) {
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	80fb      	strh	r3, [r7, #6]
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1e2      	bne.n	8000ec8 <HMS_bgdisplay+0xc>
	}

	LCD_DrawHBorder(0, TFTHEIGHT / 3, TFTWIDTH, WHITE, 5);
 8000f02:	2305      	movs	r3, #5
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f0a:	22f0      	movs	r2, #240	; 0xf0
 8000f0c:	216a      	movs	r1, #106	; 0x6a
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f001 fb2c 	bl	800256c <LCD_DrawHBorder>
	LCD_DrawHBorder(0, 2 * (TFTHEIGHT / 3), TFTWIDTH, WHITE, 5);
 8000f14:	2305      	movs	r3, #5
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1c:	22f0      	movs	r2, #240	; 0xf0
 8000f1e:	21d4      	movs	r1, #212	; 0xd4
 8000f20:	2000      	movs	r0, #0
 8000f22:	f001 fb23 	bl	800256c <LCD_DrawHBorder>
	//===============================================================//

	//===================== | Box 1 |===============================//

	LCD_DrawButton1(" ", 20, 20, TFTWIDTH - 40, (TFTHEIGHT / 3) - 40, 10, CYAN,
 8000f26:	2302      	movs	r3, #2
 8000f28:	9307      	str	r3, [sp, #28]
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	9306      	str	r3, [sp, #24]
 8000f2e:	2302      	movs	r3, #2
 8000f30:	9305      	str	r3, [sp, #20]
 8000f32:	2300      	movs	r3, #0
 8000f34:	9304      	str	r3, [sp, #16]
 8000f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3a:	9303      	str	r3, [sp, #12]
 8000f3c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	230a      	movs	r3, #10
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	2342      	movs	r3, #66	; 0x42
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	23c8      	movs	r3, #200	; 0xc8
 8000f4c:	2214      	movs	r2, #20
 8000f4e:	2114      	movs	r1, #20
 8000f50:	483e      	ldr	r0, [pc, #248]	; (800104c <HMS_bgdisplay+0x190>)
 8000f52:	f001 faa7 	bl	80024a4 <LCD_DrawButton1>
	WHITE, 0, 2, 2, 2);

	LCD_SetTextSize(2);
 8000f56:	2002      	movs	r0, #2
 8000f58:	f002 fce2 	bl	8003920 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, CYAN);
 8000f5c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000f60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f64:	f002 fcf2 	bl	800394c <LCD_SetTextColor>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 25);
 8000f68:	2119      	movs	r1, #25
 8000f6a:	2058      	movs	r0, #88	; 0x58
 8000f6c:	f002 fcc0 	bl	80038f0 <LCD_SetCursor>
	LCD_Printf("Health");
 8000f70:	4837      	ldr	r0, [pc, #220]	; (8001050 <HMS_bgdisplay+0x194>)
 8000f72:	f002 fbd5 	bl	8003720 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) - 10, 45);
 8000f76:	212d      	movs	r1, #45	; 0x2d
 8000f78:	203f      	movs	r0, #63	; 0x3f
 8000f7a:	f002 fcb9 	bl	80038f0 <LCD_SetCursor>
	LCD_Printf("Monitoring");
 8000f7e:	4835      	ldr	r0, [pc, #212]	; (8001054 <HMS_bgdisplay+0x198>)
 8000f80:	f002 fbce 	bl	8003720 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 65);
 8000f84:	2141      	movs	r1, #65	; 0x41
 8000f86:	2058      	movs	r0, #88	; 0x58
 8000f88:	f002 fcb2 	bl	80038f0 <LCD_SetCursor>
	LCD_Printf("System");
 8000f8c:	4832      	ldr	r0, [pc, #200]	; (8001058 <HMS_bgdisplay+0x19c>)
 8000f8e:	f002 fbc7 	bl	8003720 <LCD_Printf>

	//===============================================================//

	//===================== | Box 2 |===============================//

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 15, TFTWIDTH - 35, 25, 5, RED);
 8000f92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	2305      	movs	r3, #5
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2319      	movs	r3, #25
 8000f9e:	22cd      	movs	r2, #205	; 0xcd
 8000fa0:	2179      	movs	r1, #121	; 0x79
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f002 fa18 	bl	80033d8 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, RED);
 8000fa8:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000fac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000fb0:	f002 fccc 	bl	800394c <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 20);
 8000fb4:	217e      	movs	r1, #126	; 0x7e
 8000fb6:	2014      	movs	r0, #20
 8000fb8:	f002 fc9a 	bl	80038f0 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f002 fcaf 	bl	8003920 <LCD_SetTextSize>
	LCD_Printf("H.Rate: ");
 8000fc2:	4826      	ldr	r0, [pc, #152]	; (800105c <HMS_bgdisplay+0x1a0>)
 8000fc4:	f002 fbac 	bl	8003720 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 45, TFTWIDTH - 35, 25, 5, GREEN);
 8000fc8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	2305      	movs	r3, #5
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2319      	movs	r3, #25
 8000fd4:	22cd      	movs	r2, #205	; 0xcd
 8000fd6:	2197      	movs	r1, #151	; 0x97
 8000fd8:	200f      	movs	r0, #15
 8000fda:	f002 f9fd 	bl	80033d8 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, GREEN);
 8000fde:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000fe2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000fe6:	f002 fcb1 	bl	800394c <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 50);
 8000fea:	219c      	movs	r1, #156	; 0x9c
 8000fec:	2014      	movs	r0, #20
 8000fee:	f002 fc7f 	bl	80038f0 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f002 fc94 	bl	8003920 <LCD_SetTextSize>
	LCD_Printf("SpO2: ");
 8000ff8:	4819      	ldr	r0, [pc, #100]	; (8001060 <HMS_bgdisplay+0x1a4>)
 8000ffa:	f002 fb91 	bl	8003720 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 75, TFTWIDTH - 35, 25, 5, BLUE);
 8000ffe:	231f      	movs	r3, #31
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2305      	movs	r3, #5
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2319      	movs	r3, #25
 8001008:	22cd      	movs	r2, #205	; 0xcd
 800100a:	21b5      	movs	r1, #181	; 0xb5
 800100c:	200f      	movs	r0, #15
 800100e:	f002 f9e3 	bl	80033d8 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, BLUE);
 8001012:	211f      	movs	r1, #31
 8001014:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001018:	f002 fc98 	bl	800394c <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 80);
 800101c:	21ba      	movs	r1, #186	; 0xba
 800101e:	2014      	movs	r0, #20
 8001020:	f002 fc66 	bl	80038f0 <LCD_SetCursor>
	LCD_SetTextSize(2);
 8001024:	2002      	movs	r0, #2
 8001026:	f002 fc7b 	bl	8003920 <LCD_SetTextSize>
	LCD_Printf("Temp: ");
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <HMS_bgdisplay+0x1a8>)
 800102c:	f002 fb78 	bl	8003720 <LCD_Printf>

	//===============================================================//

	//========================= | Box 3 |============================//

	LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 35, 70, WHITE);
 8001030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2346      	movs	r3, #70	; 0x46
 8001038:	22cd      	movs	r2, #205	; 0xcd
 800103a:	21e8      	movs	r1, #232	; 0xe8
 800103c:	2014      	movs	r0, #20
 800103e:	f002 f923 	bl	8003288 <LCD_FillRect>

	//===============================================================//

}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}
 800104a:	bf00      	nop
 800104c:	08006ae0 	.word	0x08006ae0
 8001050:	08006ae4 	.word	0x08006ae4
 8001054:	08006aec 	.word	0x08006aec
 8001058:	08006af8 	.word	0x08006af8
 800105c:	08006b00 	.word	0x08006b00
 8001060:	08006b0c 	.word	0x08006b0c
 8001064:	08006b14 	.word	0x08006b14

08001068 <temp2color>:

uint16_t temp2color(int degree, int lo, int hi) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af02      	add	r7, sp, #8
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
	uint8_t r, g, b;
	r = map(degree, lo, hi, 255, 0);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	b298      	uxth	r0, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	b299      	uxth	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	b29a      	uxth	r2, r3
 8001080:	2300      	movs	r3, #0
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	23ff      	movs	r3, #255	; 0xff
 8001086:	f000 ff1b 	bl	8001ec0 <map>
 800108a:	4603      	mov	r3, r0
 800108c:	75fb      	strb	r3, [r7, #23]
	g = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	75bb      	strb	r3, [r7, #22]
	b = map(degree, lo, hi, 0, 255);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	b298      	uxth	r0, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	b299      	uxth	r1, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	b29a      	uxth	r2, r3
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2300      	movs	r3, #0
 80010a4:	f000 ff0c 	bl	8001ec0 <map>
 80010a8:	4603      	mov	r3, r0
 80010aa:	757b      	strb	r3, [r7, #21]
	return LCD_Color565(r, g, b);
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	7db9      	ldrb	r1, [r7, #22]
 80010b0:	7d7a      	ldrb	r2, [r7, #21]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fbaa 	bl	800280c <LCD_Color565>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29b      	uxth	r3, r3
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <colorgradient>:

void colorgradient(int x, int y, int w, int h, int percent) {
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
//	LCD_DrawRect(x, y, w, h, BLACK);
	for (int row = 1; row < h - 1; row++) {
 80010d2:	2301      	movs	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e01e      	b.n	8001116 <colorgradient+0x52>
		LCD_DrawFastHLine(x + 1, y + row, w - 2, temp2color(row, 0, h));
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b21c      	sxth	r4, r3
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b21d      	sxth	r5, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	3b02      	subs	r3, #2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	b21e      	sxth	r6, r3
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	2100      	movs	r1, #0
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ffb2 	bl	8001068 <temp2color>
 8001104:	4603      	mov	r3, r0
 8001106:	4632      	mov	r2, r6
 8001108:	4629      	mov	r1, r5
 800110a:	4620      	mov	r0, r4
 800110c:	f001 fcae 	bl	8002a6c <LCD_DrawFastHLine>
	for (int row = 1; row < h - 1; row++) {
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbdb      	blt.n	80010d8 <colorgradient+0x14>
	}
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	371c      	adds	r7, #28
 8001126:	46bd      	mov	sp, r7
 8001128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800112c <main>:

int main(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af02      	add	r7, sp, #8
	RCC_CONFIG_84MHZ();
 8001132:	f001 f82f 	bl	8002194 <RCC_CONFIG_84MHZ>
	uart_print_config(9600);
 8001136:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800113a:	f001 f99d 	bl	8002478 <uart_print_config>
	print("Working\n\r");
 800113e:	4813      	ldr	r0, [pc, #76]	; (800118c <main+0x60>)
 8001140:	f001 f976 	bl	8002430 <print>
//	testRoundRects();
//	Delay(500);
//	testFilledRoundRects();
//	Delay(500);

	LCD_Begin();
 8001144:	f001 faec 	bl	8002720 <LCD_Begin>
	LCD_SetRotation(0);
 8001148:	2000      	movs	r0, #0
 800114a:	f002 fc17 	bl	800397c <LCD_SetRotation>
	//	LCD_FillScreen(BLACK);
	colorgradient(0, 0, TFTWIDTH, TFTHEIGHT, 50);
 800114e:	2332      	movs	r3, #50	; 0x32
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001156:	22f0      	movs	r2, #240	; 0xf0
 8001158:	2100      	movs	r1, #0
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff ffb2 	bl	80010c4 <colorgradient>

	LCD_SetTextSize(3);
 8001160:	2003      	movs	r0, #3
 8001162:	f002 fbdd 	bl	8003920 <LCD_SetTextSize>

	HMS_bgdisplay();
 8001166:	f7ff fea9 	bl	8000ebc <HMS_bgdisplay>

	LCD_SetTextColor(BLACK, WHITE);
 800116a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800116e:	2000      	movs	r0, #0
 8001170:	f002 fbec 	bl	800394c <LCD_SetTextColor>
	LCD_SetCursor(190, 240);
 8001174:	21f0      	movs	r1, #240	; 0xf0
 8001176:	20be      	movs	r0, #190	; 0xbe
 8001178:	f002 fbba 	bl	80038f0 <LCD_SetCursor>
	LCD_SetTextSize(2);
 800117c:	2002      	movs	r0, #2
 800117e:	f002 fbcf 	bl	8003920 <LCD_SetTextSize>
	LCD_Printf("HR");
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <main+0x64>)
 8001184:	f002 facc 	bl	8003720 <LCD_Printf>

	while (1) {
 8001188:	e7fe      	b.n	8001188 <main+0x5c>
 800118a:	bf00      	nop
 800118c:	08006b1c 	.word	0x08006b1c
 8001190:	08006b28 	.word	0x08006b28

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 f934 	bl	800144c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	return 1;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_kill>:

int _kill(int pid, int sig)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001202:	f002 fd11 	bl	8003c28 <__errno>
 8001206:	4603      	mov	r3, r0
 8001208:	2216      	movs	r2, #22
 800120a:	601a      	str	r2, [r3, #0]
	return -1;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_exit>:

void _exit (int status)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffe7 	bl	80011f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800122a:	e7fe      	b.n	800122a <_exit+0x12>

0800122c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e00a      	b.n	8001254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800123e:	f3af 8000 	nop.w
 8001242:	4601      	mov	r1, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf0      	blt.n	800123e <_read+0x12>
	}

return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e009      	b.n	800128c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf1      	blt.n	8001278 <_write+0x12>
	}
	return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_close>:

int _close(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	return -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c6:	605a      	str	r2, [r3, #4]
	return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_isatty>:

int _isatty(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	return 1;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
	return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f002 fc76 	bl	8003c28 <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20018000 	.word	0x20018000
 8001368:	00000400 	.word	0x00000400
 800136c:	20000238 	.word	0x20000238
 8001370:	20000460 	.word	0x20000460

08001374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <SystemInit+0x20>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <SystemInit+0x20>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800139e:	490e      	ldr	r1, [pc, #56]	; (80013d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013b4:	4c0b      	ldr	r4, [pc, #44]	; (80013e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013c2:	f7ff ffd7 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c6:	f002 fc35 	bl	8003c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff feaf 	bl	800112c <main>
  bx  lr    
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80013dc:	080074e4 	.word	0x080074e4
  ldr r2, =_sbss
 80013e0:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80013e4:	20000460 	.word	0x20000460

080013e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC_IRQHandler>
	...

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x54>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x58>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f8e8 	bl	80015e0 <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00e      	b.n	8001438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d80a      	bhi.n	8001436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f8be 	bl	80015a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_InitTick+0x5c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000000 	.word	0x20000000
 8001444:	20000008 	.word	0x20000008
 8001448:	20000004 	.word	0x20000004

0800144c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x20>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x24>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_IncTick+0x24>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000008 	.word	0x20000008
 8001470:	2000023c 	.word	0x2000023c

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2000023c 	.word	0x2000023c

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ba:	f7ff ff67 	bl	800148c <__NVIC_GetPriorityGrouping>
 80015be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	6978      	ldr	r0, [r7, #20]
 80015c6:	f7ff ff99 	bl	80014fc <NVIC_EncodePriority>
 80015ca:	4602      	mov	r2, r0
 80015cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff68 	bl	80014a8 <__NVIC_SetPriority>
}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ffbb 	bl	8001564 <SysTick_Config>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e267      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d075      	beq.n	8001702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001616:	4b88      	ldr	r3, [pc, #544]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d00c      	beq.n	800163c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001622:	4b85      	ldr	r3, [pc, #532]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800162a:	2b08      	cmp	r3, #8
 800162c:	d112      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162e:	4b82      	ldr	r3, [pc, #520]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d05b      	beq.n	8001700 <HAL_RCC_OscConfig+0x108>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d157      	bne.n	8001700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e242      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d106      	bne.n	800166c <HAL_RCC_OscConfig+0x74>
 800165e:	4b76      	ldr	r3, [pc, #472]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a75      	ldr	r2, [pc, #468]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e01d      	b.n	80016a8 <HAL_RCC_OscConfig+0xb0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x98>
 8001676:	4b70      	ldr	r3, [pc, #448]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6f      	ldr	r2, [pc, #444]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a6c      	ldr	r2, [pc, #432]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0xb0>
 8001690:	4b69      	ldr	r3, [pc, #420]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a68      	ldr	r2, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b66      	ldr	r3, [pc, #408]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a65      	ldr	r2, [pc, #404]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fee0 	bl	8001474 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fedc 	bl	8001474 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e207      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0xc0>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fecc 	bl	8001474 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fec8 	bl	8001474 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1f3      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	4b51      	ldr	r3, [pc, #324]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0xe8>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d063      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170e:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001722:	2b08      	cmp	r3, #8
 8001724:	d11c      	bne.n	8001760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001726:	4b44      	ldr	r3, [pc, #272]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d116      	bne.n	8001760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x152>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e1c7      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4937      	ldr	r1, [pc, #220]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	e03a      	b.n	80017d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_RCC_OscConfig+0x244>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7ff fe81 	bl	8001474 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001776:	f7ff fe7d 	bl	8001474 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e1a8      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4925      	ldr	r1, [pc, #148]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e015      	b.n	80017d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_OscConfig+0x244>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fe60 	bl	8001474 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fe5c 	bl	8001474 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e187      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d036      	beq.n	8001850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d016      	beq.n	8001818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_RCC_OscConfig+0x248>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fe40 	bl	8001474 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fe3c 	bl	8001474 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e167      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800180c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x200>
 8001816:	e01b      	b.n	8001850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_OscConfig+0x248>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff fe29 	bl	8001474 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	e00e      	b.n	8001844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001826:	f7ff fe25 	bl	8001474 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d907      	bls.n	8001844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e150      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
 8001838:	40023800 	.word	0x40023800
 800183c:	42470000 	.word	0x42470000
 8001840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	4b88      	ldr	r3, [pc, #544]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ea      	bne.n	8001826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8097 	beq.w	800198c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b81      	ldr	r3, [pc, #516]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b7d      	ldr	r3, [pc, #500]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a7c      	ldr	r2, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d118      	bne.n	80018cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189a:	4b74      	ldr	r3, [pc, #464]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a73      	ldr	r2, [pc, #460]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fde5 	bl	8001474 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7ff fde1 	bl	8001474 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e10c      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2ea>
 80018d4:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	4a63      	ldr	r2, [pc, #396]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6713      	str	r3, [r2, #112]	; 0x70
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0x324>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x30c>
 80018ea:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a5e      	ldr	r2, [pc, #376]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6713      	str	r3, [r2, #112]	; 0x70
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0x324>
 8001904:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a57      	ldr	r2, [pc, #348]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	4a54      	ldr	r2, [pc, #336]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d015      	beq.n	8001950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fda6 	bl	8001474 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff fda2 	bl	8001474 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0cb      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0ee      	beq.n	800192c <HAL_RCC_OscConfig+0x334>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fd90 	bl	8001474 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff fd8c 	bl	8001474 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0b5      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196e:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ee      	bne.n	8001958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a1 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d05c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d141      	bne.n	8001a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_RCC_OscConfig+0x478>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fd60 	bl	8001474 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff fd5c 	bl	8001474 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e087      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	3b01      	subs	r3, #1
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	491b      	ldr	r1, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x478>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fd35 	bl	8001474 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff fd31 	bl	8001474 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e05c      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x416>
 8001a2c:	e054      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_RCC_OscConfig+0x478>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fd1e 	bl	8001474 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff fd1a 	bl	8001474 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e045      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x444>
 8001a5a:	e03d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e038      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x4ec>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d028      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d121      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d11a      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d111      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	3b01      	subs	r3, #1
 8001abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0cc      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d90c      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0b8      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3c:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	494d      	ldr	r1, [pc, #308]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d044      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d119      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e07f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e067      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4934      	ldr	r1, [pc, #208]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7ff fc4c 	bl	8001474 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff fc48 	bl	8001474 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e04f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d20c      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e032      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4916      	ldr	r1, [pc, #88]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c6e:	f000 f821 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	5ccb      	ldrb	r3, [r1, r3]
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fbac 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	08006d60 	.word	0x08006d60
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb8:	b094      	sub	sp, #80	; 0x50
 8001cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ccc:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	f200 80e1 	bhi.w	8001ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0x3a>
 8001ce6:	e0db      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce8:	4b73      	ldr	r3, [pc, #460]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cec:	e0db      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cee:	4b73      	ldr	r3, [pc, #460]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8001cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf2:	e0d8      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf4:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfe:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	2200      	movs	r2, #0
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
 8001d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d26:	4622      	mov	r2, r4
 8001d28:	462b      	mov	r3, r5
 8001d2a:	f04f 0000 	mov.w	r0, #0
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	0159      	lsls	r1, r3, #5
 8001d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d38:	0150      	lsls	r0, r2, #5
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4621      	mov	r1, r4
 8001d40:	1a51      	subs	r1, r2, r1
 8001d42:	6139      	str	r1, [r7, #16]
 8001d44:	4629      	mov	r1, r5
 8001d46:	eb63 0301 	sbc.w	r3, r3, r1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d58:	4659      	mov	r1, fp
 8001d5a:	018b      	lsls	r3, r1, #6
 8001d5c:	4651      	mov	r1, sl
 8001d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d62:	4651      	mov	r1, sl
 8001d64:	018a      	lsls	r2, r1, #6
 8001d66:	4651      	mov	r1, sl
 8001d68:	ebb2 0801 	subs.w	r8, r2, r1
 8001d6c:	4659      	mov	r1, fp
 8001d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d86:	4690      	mov	r8, r2
 8001d88:	4699      	mov	r9, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	eb18 0303 	adds.w	r3, r8, r3
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	462b      	mov	r3, r5
 8001d94:	eb49 0303 	adc.w	r3, r9, r3
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001da6:	4629      	mov	r1, r5
 8001da8:	024b      	lsls	r3, r1, #9
 8001daa:	4621      	mov	r1, r4
 8001dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001db0:	4621      	mov	r1, r4
 8001db2:	024a      	lsls	r2, r1, #9
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dba:	2200      	movs	r2, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc4:	f7fe fef8 	bl	8000bb8 <__aeabi_uldivmod>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd0:	e058      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4611      	mov	r1, r2
 8001dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dec:	4642      	mov	r2, r8
 8001dee:	464b      	mov	r3, r9
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	0159      	lsls	r1, r3, #5
 8001dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfe:	0150      	lsls	r0, r2, #5
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4641      	mov	r1, r8
 8001e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e24:	ebb2 040a 	subs.w	r4, r2, sl
 8001e28:	eb63 050b 	sbc.w	r5, r3, fp
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	00eb      	lsls	r3, r5, #3
 8001e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e3a:	00e2      	lsls	r2, r4, #3
 8001e3c:	4614      	mov	r4, r2
 8001e3e:	461d      	mov	r5, r3
 8001e40:	4643      	mov	r3, r8
 8001e42:	18e3      	adds	r3, r4, r3
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	464b      	mov	r3, r9
 8001e48:	eb45 0303 	adc.w	r3, r5, r3
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	028b      	lsls	r3, r1, #10
 8001e5e:	4621      	mov	r1, r4
 8001e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e64:	4621      	mov	r1, r4
 8001e66:	028a      	lsls	r2, r1, #10
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	61fa      	str	r2, [r7, #28]
 8001e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e78:	f7fe fe9e 	bl	8000bb8 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4613      	mov	r3, r2
 8001e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3750      	adds	r7, #80	; 0x50
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <map>:
		(0x07), (0x08), (0x09), (0x10), (0x11), (0x12), (0x13), (0x14), (0x015) };



uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 8001ec0:	b490      	push	{r4, r7}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	80fb      	strh	r3, [r7, #6]
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80bb      	strh	r3, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	807b      	strh	r3, [r7, #2]
 8001eda:	4613      	mov	r3, r2
 8001edc:	803b      	strh	r3, [r7, #0]
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 8001ede:	88fa      	ldrh	r2, [r7, #6]
 8001ee0:	88bb      	ldrh	r3, [r7, #4]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	8a39      	ldrh	r1, [r7, #16]
 8001ee6:	883a      	ldrh	r2, [r7, #0]
 8001ee8:	1a8a      	subs	r2, r1, r2
 8001eea:	fb03 f202 	mul.w	r2, r3, r2
 8001eee:	8879      	ldrh	r1, [r7, #2]
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	1ac9      	subs	r1, r1, r3
 8001ef4:	883b      	ldrh	r3, [r7, #0]
 8001ef6:	440b      	add	r3, r1
 8001ef8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001efc:	b29b      	uxth	r3, r3
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc90      	pop	{r4, r7}
 8001f06:	4770      	bx	lr

08001f08 <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a1b      	ldr	r2, [pc, #108]	; (8001f80 <gpio_clk_en+0x78>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d106      	bne.n	8001f26 <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <gpio_clk_en+0x7c>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	4a19      	ldr	r2, [pc, #100]	; (8001f84 <gpio_clk_en+0x7c>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 8001f24:	e026      	b.n	8001f74 <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <gpio_clk_en+0x80>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d106      	bne.n	8001f3c <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <gpio_clk_en+0x7c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <gpio_clk_en+0x7c>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001f3a:	e01b      	b.n	8001f74 <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <gpio_clk_en+0x84>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d106      	bne.n	8001f52 <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <gpio_clk_en+0x7c>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <gpio_clk_en+0x7c>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001f50:	e010      	b.n	8001f74 <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <gpio_clk_en+0x88>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d106      	bne.n	8001f68 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <gpio_clk_en+0x7c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <gpio_clk_en+0x7c>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001f66:	e005      	b.n	8001f74 <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <gpio_clk_en+0x7c>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <gpio_clk_en+0x7c>)
 8001f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f72:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020c00 	.word	0x40020c00

08001f94 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d117      	bne.n	8001fd8 <gpio_config+0x44>
		gpio_clk_en(port);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff ffad 	bl	8001f08 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f846 	bl	8002044 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f85b 	bl	8002078 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f870 	bl	80020ac <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f885 	bl	80020e0 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 8001fd6:	e031      	b.n	800203c <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <gpio_config+0x66>
		gpio_clk_en(port);
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff ff92 	bl	8001f08 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f82b 	bl	8002044 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f85a 	bl	80020ac <gpio_PUPD>
}
 8001ff8:	e020      	b.n	800203c <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d112      	bne.n	8002026 <gpio_config+0x92>
		gpio_clk_en(port);
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7ff ff81 	bl	8001f08 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f81a 	bl	8002044 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f849 	bl	80020ac <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f85e 	bl	80020e0 <gpio_PHPL_OD>
}
 8002024:	e00a      	b.n	800203c <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d107      	bne.n	800203c <gpio_config+0xa8>
		gpio_clk_en(port);
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7ff ff6b 	bl	8001f08 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f804 	bl	8002044 <gpio_moder>
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4907      	ldr	r1, [pc, #28]	; (8002074 <gpio_moder+0x30>)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	431a      	orrs	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	2000000c 	.word	0x2000000c

08002078 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <gpio_speed+0x30>)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	431a      	orrs	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	609a      	str	r2, [r3, #8]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	2000000c 	.word	0x2000000c

080020ac <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <gpio_PUPD+0x30>)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	431a      	orrs	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	60da      	str	r2, [r3, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	2000000c 	.word	0x2000000c

080020e0 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	431a      	orrs	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	605a      	str	r2, [r3, #4]
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b07      	cmp	r3, #7
 800211a:	d80a      	bhi.n	8002132 <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	431a      	orrs	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8002130:	e00a      	b.n	8002148 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3b08      	subs	r3, #8
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	431a      	orrs	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	4613      	mov	r3, r2
 8002160:	71fb      	strb	r3, [r7, #7]
	if (state) {
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <gpio_write+0x24>
		port->BSRR = (1 << pinNumber);
 8002168:	2201      	movs	r2, #1
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	461a      	mov	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 8002176:	e007      	b.n	8002188 <gpio_write+0x34>
		port->BSRR = (1 << (pinNumber + 16));
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3310      	adds	r3, #16
 800217c:	2201      	movs	r2, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	619a      	str	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <RCC_CONFIG_84MHZ>:
 *      Author: hp
 */
#include "rcc.h"

//*****************************| RCC CLOCK FUNCTION |****************************//
BML_StatusTypeDef RCC_CONFIG_84MHZ() {
 8002194:	b580      	push	{r7, lr}
 8002196:	b094      	sub	sp, #80	; 0x50
 8002198:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219a:	f107 0320 	add.w	r3, r7, #32
 800219e:	2230      	movs	r2, #48	; 0x30
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 fd6a 	bl	8003c7c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <RCC_CONFIG_84MHZ+0xcc>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	4a27      	ldr	r2, [pc, #156]	; (8002260 <RCC_CONFIG_84MHZ+0xcc>)
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6413      	str	r3, [r2, #64]	; 0x40
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <RCC_CONFIG_84MHZ+0xcc>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <RCC_CONFIG_84MHZ+0xd0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021e0:	4a20      	ldr	r2, [pc, #128]	; (8002264 <RCC_CONFIG_84MHZ+0xd0>)
 80021e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <RCC_CONFIG_84MHZ+0xd0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021f4:	2302      	movs	r3, #2
 80021f6:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021fc:	2310      	movs	r3, #16
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002200:	2302      	movs	r3, #2
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002204:	2300      	movs	r3, #0
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 16;
 8002208:	2310      	movs	r3, #16
 800220a:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 336;
 800220c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002210:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002212:	2304      	movs	r3, #4
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002216:	2307      	movs	r3, #7
 8002218:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221a:	f107 0320 	add.w	r3, r7, #32
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f9ea 	bl	80015f8 <HAL_RCC_OscConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d000      	beq.n	800222c <RCC_CONFIG_84MHZ+0x98>
	  {
//	    Error_Handler();
		  while(1);
 800222a:	e7fe      	b.n	800222a <RCC_CONFIG_84MHZ+0x96>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222c:	230f      	movs	r3, #15
 800222e:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002230:	2302      	movs	r3, #2
 8002232:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	2102      	movs	r1, #2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fc4d 	bl	8001ae8 <HAL_RCC_ClockConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d000      	beq.n	8002256 <RCC_CONFIG_84MHZ+0xc2>
	  {
//	    Error_Handler();
		  while(1);
 8002254:	e7fe      	b.n	8002254 <RCC_CONFIG_84MHZ+0xc0>
	  }
}
 8002256:	bf00      	nop
 8002258:	4618      	mov	r0, r3
 800225a:	3750      	adds	r7, #80	; 0x50
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40023800 	.word	0x40023800
 8002264:	40007000 	.word	0x40007000

08002268 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f818 	bl	80022ac <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f842 	bl	8002310 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 800228c:	69f9      	ldr	r1, [r7, #28]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f884 	bl	800239c <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800229c:	f043 030c 	orr.w	r3, r3, #12
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	60d3      	str	r3, [r2, #12]

}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <USART_CLK_EN+0x54>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d106      	bne.n	80022ca <USART_CLK_EN+0x1e>
		USART1_CLK_EN;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <USART_CLK_EN+0x58>)
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	4a10      	ldr	r2, [pc, #64]	; (8002304 <USART_CLK_EN+0x58>)
 80022c2:	f043 0310 	orr.w	r3, r3, #16
 80022c6:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (usart == USART2) {
		USART2_CLK_EN;
	} else if (usart == USART6) {
		USART6_CLK_EN;
	}
}
 80022c8:	e014      	b.n	80022f4 <USART_CLK_EN+0x48>
	} else if (usart == USART2) {
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <USART_CLK_EN+0x5c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d106      	bne.n	80022e0 <USART_CLK_EN+0x34>
		USART2_CLK_EN;
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <USART_CLK_EN+0x58>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <USART_CLK_EN+0x58>)
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80022de:	e009      	b.n	80022f4 <USART_CLK_EN+0x48>
	} else if (usart == USART6) {
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <USART_CLK_EN+0x60>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d105      	bne.n	80022f4 <USART_CLK_EN+0x48>
		USART6_CLK_EN;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <USART_CLK_EN+0x58>)
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	4a05      	ldr	r2, [pc, #20]	; (8002304 <USART_CLK_EN+0x58>)
 80022ee:	f043 0320 	orr.w	r3, r3, #32
 80022f2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40011000 	.word	0x40011000
 8002304:	40023800 	.word	0x40023800
 8002308:	40004400 	.word	0x40004400
 800230c:	40011400 	.word	0x40011400

08002310 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800231e:	2300      	movs	r3, #0
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	2300      	movs	r3, #0
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2302      	movs	r3, #2
 8002328:	2202      	movs	r2, #2
 800232a:	6839      	ldr	r1, [r7, #0]
 800232c:	68b8      	ldr	r0, [r7, #8]
 800232e:	f7ff fe31 	bl	8001f94 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8002332:	2300      	movs	r3, #0
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	2300      	movs	r3, #0
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2302      	movs	r3, #2
 800233c:	2202      	movs	r2, #2
 800233e:	69b9      	ldr	r1, [r7, #24]
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff fe27 	bl	8001f94 <gpio_config>

	if (usart == USART1) {
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a11      	ldr	r2, [pc, #68]	; (8002390 <USART_PIN_CONFIG+0x80>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01b      	beq.n	8002386 <USART_PIN_CONFIG+0x76>
		if (rx_port == PORTA && rx_pinNumber == 10) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
//			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
		}
	} else if (usart == USART2) {
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4a10      	ldr	r2, [pc, #64]	; (8002394 <USART_PIN_CONFIG+0x84>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d117      	bne.n	8002386 <USART_PIN_CONFIG+0x76>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 2) {
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <USART_PIN_CONFIG+0x88>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d107      	bne.n	800236e <USART_PIN_CONFIG+0x5e>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d104      	bne.n	800236e <USART_PIN_CONFIG+0x5e>
			gpio_altfn(tx_port, tx_pinNumber, PA2_USART2_TX);
 8002364:	2207      	movs	r2, #7
 8002366:	6839      	ldr	r1, [r7, #0]
 8002368:	68b8      	ldr	r0, [r7, #8]
 800236a:	f7ff fece 	bl	800210a <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 3) {
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a09      	ldr	r2, [pc, #36]	; (8002398 <USART_PIN_CONFIG+0x88>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d107      	bne.n	8002386 <USART_PIN_CONFIG+0x76>
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d104      	bne.n	8002386 <USART_PIN_CONFIG+0x76>
			gpio_altfn(rx_port, rx_pinNumber, PA3_USART2_RX);
 800237c:	2207      	movs	r2, #7
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff fec2 	bl	800210a <gpio_altfn>
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
//			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
		}
	}
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40011000 	.word	0x40011000
 8002394:	40004400 	.word	0x40004400
 8002398:	40020000 	.word	0x40020000

0800239c <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <USART_BDR_SEL+0x30>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud / 2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	20000000 	.word	0x20000000

080023d0 <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
 80023e6:	e017      	b.n	8002418 <USART_WRITE+0x48>
		if (len == 1) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d103      	bne.n	80023f6 <USART_WRITE+0x26>
			usart->DR = ch;
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	e006      	b.n	8002404 <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 8002404:	bf00      	nop
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f9      	beq.n	8002406 <USART_WRITE+0x36>
	for (uint8_t i = 0; i < len; i++) {
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	3301      	adds	r3, #1
 8002416:	75fb      	strb	r3, [r7, #23]
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8e3      	bhi.n	80023e8 <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8002430:	b40f      	push	{r0, r1, r2, r3}
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002446:	480a      	ldr	r0, [pc, #40]	; (8002470 <print+0x40>)
 8002448:	f002 f8b6 	bl	80045b8 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 800244c:	4808      	ldr	r0, [pc, #32]	; (8002470 <print+0x40>)
 800244e:	f7fd fec7 	bl	80001e0 <strlen>
 8002452:	4603      	mov	r3, r0
 8002454:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	2364      	movs	r3, #100	; 0x64
 800245a:	4905      	ldr	r1, [pc, #20]	; (8002470 <print+0x40>)
 800245c:	4805      	ldr	r0, [pc, #20]	; (8002474 <print+0x44>)
 800245e:	f7ff ffb7 	bl	80023d0 <USART_WRITE>

}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800246c:	b004      	add	sp, #16
 800246e:	4770      	bx	lr
 8002470:	20000240 	.word	0x20000240
 8002474:	40004400 	.word	0x40004400

08002478 <uart_print_config>:
	USART_WRITE(UART_TYPE, buffer, len, 100);
	USART_WRITE(UART_TYPE, '\n', 1, 100);

}

void uart_print_config(uint32_t baudRate) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af02      	add	r7, sp, #8
 800247e:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2303      	movs	r3, #3
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2302      	movs	r3, #2
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <uart_print_config+0x24>)
 800248c:	4903      	ldr	r1, [pc, #12]	; (800249c <uart_print_config+0x24>)
 800248e:	4804      	ldr	r0, [pc, #16]	; (80024a0 <uart_print_config+0x28>)
 8002490:	f7ff feea 	bl	8002268 <USART_INIT>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40020000 	.word	0x40020000
 80024a0:	40004400 	.word	0x40004400

080024a4 <LCD_DrawButton1>:

#include "graphics.h"
#include "Pictures.h"

void LCD_DrawButton1(char *c, int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, uint16_t bgColor, uint16_t textColor, uint8_t bg_draw, uint16_t xPadding, uint16_t yPadding, uint8_t textSize) {
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	460b      	mov	r3, r1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]

	if (bg_draw == 1)
 80024be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d113      	bne.n	80024ee <LCD_DrawButton1+0x4a>
		LCD_FillRoundRect(x + 5, y + 5, w, h, r, textColor);
 80024c6:	897b      	ldrh	r3, [r7, #10]
 80024c8:	3305      	adds	r3, #5
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b218      	sxth	r0, r3
 80024ce:	893b      	ldrh	r3, [r7, #8]
 80024d0:	3305      	adds	r3, #5
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	b219      	sxth	r1, r3
 80024d6:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80024da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	4623      	mov	r3, r4
 80024ea:	f000 ff75 	bl	80033d8 <LCD_FillRoundRect>

	LCD_FillRoundRect(x, y, w, h, r, bgColor);
 80024ee:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80024f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024f6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80024fa:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80024fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4623      	mov	r3, r4
 800250a:	f000 ff65 	bl	80033d8 <LCD_FillRoundRect>
	LCD_DrawRoundRect(x, y, w, h, r, WHITE);
 800250e:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8002512:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002516:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800251a:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 800251e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	4623      	mov	r3, r4
 800252c:	f000 fb7a 	bl	8002c24 <LCD_DrawRoundRect>
	LCD_SetCursor(x + xPadding, y + yPadding);
 8002530:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002534:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002536:	4413      	add	r3, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800253e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002540:	4413      	add	r3, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f001 f9d4 	bl	80038f0 <LCD_SetCursor>
	LCD_SetTextSize(textSize);
 8002548:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800254c:	4618      	mov	r0, r3
 800254e:	f001 f9e7 	bl	8003920 <LCD_SetTextSize>
	LCD_SetTextColor(textColor, bgColor);
 8002552:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002554:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f001 f9f7 	bl	800394c <LCD_SetTextColor>
	LCD_Printf(c);
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f001 f8de 	bl	8003720 <LCD_Printf>

}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bd90      	pop	{r4, r7, pc}

0800256c <LCD_DrawHBorder>:

void LCD_DrawHBorder(int16_t x, int16_t y, int16_t w, uint16_t color, int16_t BorderSize){
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	4604      	mov	r4, r0
 8002574:	4608      	mov	r0, r1
 8002576:	4611      	mov	r1, r2
 8002578:	461a      	mov	r2, r3
 800257a:	4623      	mov	r3, r4
 800257c:	80fb      	strh	r3, [r7, #6]
 800257e:	4603      	mov	r3, r0
 8002580:	80bb      	strh	r3, [r7, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	807b      	strh	r3, [r7, #2]
 8002586:	4613      	mov	r3, r2
 8002588:	803b      	strh	r3, [r7, #0]

	for(uint8_t i = 0; i < BorderSize; i++){
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	e00f      	b.n	80025b0 <LCD_DrawHBorder+0x44>
		LCD_DrawFastHLine(x, y + i, w, color);
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	b29a      	uxth	r2, r3
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	4413      	add	r3, r2
 8002598:	b29b      	uxth	r3, r3
 800259a:	b219      	sxth	r1, r3
 800259c:	883b      	ldrh	r3, [r7, #0]
 800259e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80025a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80025a6:	f000 fa61 	bl	8002a6c <LCD_DrawFastHLine>
	for(uint8_t i = 0; i < BorderSize; i++){
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	3301      	adds	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	dbea      	blt.n	8002590 <LCD_DrawHBorder+0x24>
	}

}
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}

080025c4 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	t *= 12;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	607b      	str	r3, [r7, #4]
	for (; t > 0; t--) {
 80025d8:	e003      	b.n	80025e2 <delay+0x1e>
		__asm("nop");
 80025da:	bf00      	nop
	for (; t > 0; t--) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f8      	bne.n	80025da <delay+0x16>
	}
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <GPIO_Init>:
 * \param 
 * 
 * \return void
 */

static void GPIO_Init(void) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af02      	add	r7, sp, #8

	gpio_clk_en(PORTB);
 80025fe:	4845      	ldr	r0, [pc, #276]	; (8002714 <GPIO_Init+0x11c>)
 8002600:	f7ff fc82 	bl	8001f08 <gpio_clk_en>
	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8002604:	2300      	movs	r3, #0
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	2300      	movs	r3, #0
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2300      	movs	r3, #0
 800260e:	2201      	movs	r2, #1
 8002610:	2101      	movs	r1, #1
 8002612:	4841      	ldr	r0, [pc, #260]	; (8002718 <GPIO_Init+0x120>)
 8002614:	f7ff fcbe 	bl	8001f94 <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8002618:	2300      	movs	r3, #0
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	2300      	movs	r3, #0
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2300      	movs	r3, #0
 8002622:	2201      	movs	r2, #1
 8002624:	2107      	movs	r1, #7
 8002626:	483c      	ldr	r0, [pc, #240]	; (8002718 <GPIO_Init+0x120>)
 8002628:	f7ff fcb4 	bl	8001f94 <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 800262c:	2300      	movs	r3, #0
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	2300      	movs	r3, #0
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2300      	movs	r3, #0
 8002636:	2201      	movs	r2, #1
 8002638:	2100      	movs	r1, #0
 800263a:	4838      	ldr	r0, [pc, #224]	; (800271c <GPIO_Init+0x124>)
 800263c:	f7ff fcaa 	bl	8001f94 <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8002640:	2300      	movs	r3, #0
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	2300      	movs	r3, #0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2300      	movs	r3, #0
 800264a:	2201      	movs	r2, #1
 800264c:	2101      	movs	r1, #1
 800264e:	4833      	ldr	r0, [pc, #204]	; (800271c <GPIO_Init+0x124>)
 8002650:	f7ff fca0 	bl	8001f94 <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8002654:	2300      	movs	r3, #0
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	2300      	movs	r3, #0
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2300      	movs	r3, #0
 800265e:	2201      	movs	r2, #1
 8002660:	2104      	movs	r1, #4
 8002662:	482e      	ldr	r0, [pc, #184]	; (800271c <GPIO_Init+0x124>)
 8002664:	f7ff fc96 	bl	8001f94 <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8002668:	2300      	movs	r3, #0
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	2300      	movs	r3, #0
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2300      	movs	r3, #0
 8002672:	2201      	movs	r2, #1
 8002674:	2108      	movs	r1, #8
 8002676:	4829      	ldr	r0, [pc, #164]	; (800271c <GPIO_Init+0x124>)
 8002678:	f7ff fc8c 	bl	8001f94 <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 800267c:	2300      	movs	r3, #0
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	2300      	movs	r3, #0
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2300      	movs	r3, #0
 8002686:	2201      	movs	r2, #1
 8002688:	2109      	movs	r1, #9
 800268a:	4824      	ldr	r0, [pc, #144]	; (800271c <GPIO_Init+0x124>)
 800268c:	f7ff fc82 	bl	8001f94 <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8002690:	2300      	movs	r3, #0
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	2300      	movs	r3, #0
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2300      	movs	r3, #0
 800269a:	2201      	movs	r2, #1
 800269c:	210a      	movs	r1, #10
 800269e:	481f      	ldr	r0, [pc, #124]	; (800271c <GPIO_Init+0x124>)
 80026a0:	f7ff fc78 	bl	8001f94 <gpio_config>

	/*Configure GPIO pins : PB0 PB3 PB4 PB5 PB10 */
	PORTB->MODER = INPUT_MODE;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <GPIO_Init+0x11c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
	gpio_config(PORTB, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 80026aa:	2300      	movs	r3, #0
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2300      	movs	r3, #0
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2300      	movs	r3, #0
 80026b4:	2201      	movs	r2, #1
 80026b6:	2100      	movs	r1, #0
 80026b8:	4816      	ldr	r0, [pc, #88]	; (8002714 <GPIO_Init+0x11c>)
 80026ba:	f7ff fc6b 	bl	8001f94 <gpio_config>
	gpio_config(PORTB, 3, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 80026be:	2300      	movs	r3, #0
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2300      	movs	r3, #0
 80026c8:	2201      	movs	r2, #1
 80026ca:	2103      	movs	r1, #3
 80026cc:	4811      	ldr	r0, [pc, #68]	; (8002714 <GPIO_Init+0x11c>)
 80026ce:	f7ff fc61 	bl	8001f94 <gpio_config>
	gpio_config(PORTB, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 80026d2:	2300      	movs	r3, #0
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	2300      	movs	r3, #0
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2300      	movs	r3, #0
 80026dc:	2201      	movs	r2, #1
 80026de:	2104      	movs	r1, #4
 80026e0:	480c      	ldr	r0, [pc, #48]	; (8002714 <GPIO_Init+0x11c>)
 80026e2:	f7ff fc57 	bl	8001f94 <gpio_config>
	gpio_config(PORTB, 5, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 80026e6:	2300      	movs	r3, #0
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2300      	movs	r3, #0
 80026f0:	2201      	movs	r2, #1
 80026f2:	2105      	movs	r1, #5
 80026f4:	4807      	ldr	r0, [pc, #28]	; (8002714 <GPIO_Init+0x11c>)
 80026f6:	f7ff fc4d 	bl	8001f94 <gpio_config>
	gpio_config(PORTB, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 80026fa:	2300      	movs	r3, #0
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	2300      	movs	r3, #0
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2300      	movs	r3, #0
 8002704:	2201      	movs	r2, #1
 8002706:	210a      	movs	r1, #10
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <GPIO_Init+0x11c>)
 800270a:	f7ff fc43 	bl	8001f94 <gpio_config>
	//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020000 	.word	0x40020000

08002720 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8002726:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <LCD_Begin+0xc0>)
 8002728:	22f0      	movs	r2, #240	; 0xf0
 800272a:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 800272c:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <LCD_Begin+0xc4>)
 800272e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002732:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8002734:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <LCD_Begin+0xc8>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 800273a:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <LCD_Begin+0xcc>)
 800273c:	2200      	movs	r2, #0
 800273e:	801a      	strh	r2, [r3, #0]
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <LCD_Begin+0xcc>)
 8002742:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <LCD_Begin+0xd0>)
 8002748:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 800274a:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <LCD_Begin+0xd4>)
 800274c:	2204      	movs	r2, #4
 800274e:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <LCD_Begin+0xd8>)
 8002752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002756:	801a      	strh	r2, [r3, #0]
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <LCD_Begin+0xd8>)
 800275a:	881a      	ldrh	r2, [r3, #0]
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <LCD_Begin+0xdc>)
 800275e:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <LCD_Begin+0xe0>)
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;

	GPIO_Init();
 800276a:	f7ff ff45 	bl	80025f8 <GPIO_Init>

	LCD_Reset();
 800276e:	f001 f86b 	bl	8003848 <LCD_Reset>

	LCD_CS_LOW();
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	4823      	ldr	r0, [pc, #140]	; (8002804 <LCD_Begin+0xe4>)
 8002778:	f7ff fcec 	bl	8002154 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 800277c:	e01d      	b.n	80027ba <LCD_Begin+0x9a>
		a = ST7781_regValues[i++];
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	71fa      	strb	r2, [r7, #7]
 8002784:	461a      	mov	r2, r3
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <LCD_Begin+0xe8>)
 8002788:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800278c:	80bb      	strh	r3, [r7, #4]
		d = ST7781_regValues[i++];
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	71fa      	strb	r2, [r7, #7]
 8002794:	461a      	mov	r2, r3
 8002796:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <LCD_Begin+0xe8>)
 8002798:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800279c:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 800279e:	88bb      	ldrh	r3, [r7, #4]
 80027a0:	2bff      	cmp	r3, #255	; 0xff
 80027a2:	d104      	bne.n	80027ae <LCD_Begin+0x8e>
			delay(d);
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff0c 	bl	80025c4 <delay>
 80027ac:	e005      	b.n	80027ba <LCD_Begin+0x9a>
		} else {
			LCD_WriteRegister16(a, d);
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	88bb      	ldrh	r3, [r7, #4]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 fa03 	bl	8003bc0 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2b83      	cmp	r3, #131	; 0x83
 80027be:	d9de      	bls.n	800277e <LCD_Begin+0x5e>
		}
	}

	LCD_SetRotation(m_rotation);
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <LCD_Begin+0xc8>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 f8d9 	bl	800397c <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 80027ca:	f240 133f 	movw	r3, #319	; 0x13f
 80027ce:	22ef      	movs	r2, #239	; 0xef
 80027d0:	2100      	movs	r1, #0
 80027d2:	2000      	movs	r0, #0
 80027d4:	f001 f908 	bl	80039e8 <LCD_SetAddrWindow>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000340 	.word	0x20000340
 80027e4:	20000342 	.word	0x20000342
 80027e8:	2000034d 	.word	0x2000034d
 80027ec:	20000344 	.word	0x20000344
 80027f0:	20000346 	.word	0x20000346
 80027f4:	2000034c 	.word	0x2000034c
 80027f8:	2000034a 	.word	0x2000034a
 80027fc:	20000348 	.word	0x20000348
 8002800:	2000034e 	.word	0x2000034e
 8002804:	40020400 	.word	0x40020400
 8002808:	08006ff0 	.word	0x08006ff0

0800280c <LCD_Color565>:
 * \param g	Green
 * \param b	Blue
 * 
 * \return uint16_t	16Bit-RGB
 */
uint16_t LCD_Color565(uint8_t r, uint8_t g, uint8_t b) {
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
 8002816:	460b      	mov	r3, r1
 8002818:	71bb      	strb	r3, [r7, #6]
 800281a:	4613      	mov	r3, r2
 800281c:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	b21b      	sxth	r3, r3
 8002824:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002828:	f023 0307 	bic.w	r3, r3, #7
 800282c:	b21a      	sxth	r2, r3
 800282e:	79bb      	ldrb	r3, [r7, #6]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	b21b      	sxth	r3, r3
 8002834:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002838:	b21b      	sxth	r3, r3
 800283a:	4313      	orrs	r3, r2
 800283c:	b21a      	sxth	r2, r3
 800283e:	797b      	ldrb	r3, [r7, #5]
 8002840:	08db      	lsrs	r3, r3, #3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	b21b      	sxth	r3, r3
 8002846:	4313      	orrs	r3, r2
 8002848:	b21b      	sxth	r3, r3
 800284a:	b29b      	uxth	r3, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	80fb      	strh	r3, [r7, #6]
 8002862:	460b      	mov	r3, r1
 8002864:	80bb      	strh	r3, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 800286a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db52      	blt.n	8002918 <LCD_DrawPixel+0xc0>
 8002872:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db4e      	blt.n	8002918 <LCD_DrawPixel+0xc0>
 800287a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287e:	2bef      	cmp	r3, #239	; 0xef
 8002880:	dc4a      	bgt.n	8002918 <LCD_DrawPixel+0xc0>
 8002882:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002886:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800288a:	da45      	bge.n	8002918 <LCD_DrawPixel+0xc0>
		return;

	LCD_CS_LOW();
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	4823      	ldr	r0, [pc, #140]	; (8002920 <LCD_DrawPixel+0xc8>)
 8002892:	f7ff fc5f 	bl	8002154 <gpio_write>

	int16_t t;
	switch (m_rotation) {
 8002896:	4b23      	ldr	r3, [pc, #140]	; (8002924 <LCD_DrawPixel+0xcc>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d01c      	beq.n	80028d8 <LCD_DrawPixel+0x80>
 800289e:	2b03      	cmp	r3, #3
 80028a0:	dc25      	bgt.n	80028ee <LCD_DrawPixel+0x96>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d002      	beq.n	80028ac <LCD_DrawPixel+0x54>
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d00a      	beq.n	80028c0 <LCD_DrawPixel+0x68>
 80028aa:	e020      	b.n	80028ee <LCD_DrawPixel+0x96>
	case 1:
		t = x;
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 80028b0:	88bb      	ldrh	r3, [r7, #4]
 80028b2:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	80fb      	strh	r3, [r7, #6]
		y = t;
 80028ba:	89fb      	ldrh	r3, [r7, #14]
 80028bc:	80bb      	strh	r3, [r7, #4]
		break;
 80028be:	e016      	b.n	80028ee <LCD_DrawPixel+0x96>
	case 2:
		x = TFTWIDTH - 1 - x;
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 80028ca:	88bb      	ldrh	r3, [r7, #4]
 80028cc:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80028d0:	3301      	adds	r3, #1
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	80bb      	strh	r3, [r7, #4]
		break;
 80028d6:	e00a      	b.n	80028ee <LCD_DrawPixel+0x96>
	case 3:
		t = x;
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	81fb      	strh	r3, [r7, #14]
		x = y;
 80028dc:	88bb      	ldrh	r3, [r7, #4]
 80028de:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 80028e0:	89fb      	ldrh	r3, [r7, #14]
 80028e2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80028e6:	3301      	adds	r3, #1
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	80bb      	strh	r3, [r7, #4]
		break;
 80028ec:	bf00      	nop
	}

	LCD_WriteRegister16(0x0020, x);
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	4619      	mov	r1, r3
 80028f2:	2020      	movs	r0, #32
 80028f4:	f001 f964 	bl	8003bc0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 80028f8:	88bb      	ldrh	r3, [r7, #4]
 80028fa:	4619      	mov	r1, r3
 80028fc:	2021      	movs	r0, #33	; 0x21
 80028fe:	f001 f95f 	bl	8003bc0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	4619      	mov	r1, r3
 8002906:	2022      	movs	r0, #34	; 0x22
 8002908:	f001 f95a 	bl	8003bc0 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 800290c:	2201      	movs	r2, #1
 800290e:	2100      	movs	r1, #0
 8002910:	4803      	ldr	r0, [pc, #12]	; (8002920 <LCD_DrawPixel+0xc8>)
 8002912:	f7ff fc1f 	bl	8002154 <gpio_write>
 8002916:	e000      	b.n	800291a <LCD_DrawPixel+0xc2>
		return;
 8002918:	bf00      	nop
}
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40020400 	.word	0x40020400
 8002924:	2000034d 	.word	0x2000034d

08002928 <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	4604      	mov	r4, r0
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4623      	mov	r3, r4
 8002938:	80fb      	strh	r3, [r7, #6]
 800293a:	4603      	mov	r3, r0
 800293c:	80bb      	strh	r3, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	807b      	strh	r3, [r7, #2]
 8002942:	4613      	mov	r3, r2
 8002944:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8002946:	f9b7 2000 	ldrsh.w	r2, [r7]
 800294a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002954:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002958:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800295c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002960:	1acb      	subs	r3, r1, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfb8      	it	lt
 8002966:	425b      	neglt	r3, r3
 8002968:	429a      	cmp	r2, r3
 800296a:	bfcc      	ite	gt
 800296c:	2301      	movgt	r3, #1
 800296e:	2300      	movle	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8002974:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <LCD_DrawLine+0x6c>
		swap(x1, y1);
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	833b      	strh	r3, [r7, #24]
 8002980:	88bb      	ldrh	r3, [r7, #4]
 8002982:	80fb      	strh	r3, [r7, #6]
 8002984:	8b3b      	ldrh	r3, [r7, #24]
 8002986:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	82fb      	strh	r3, [r7, #22]
 800298c:	883b      	ldrh	r3, [r7, #0]
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	8afb      	ldrh	r3, [r7, #22]
 8002992:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2) {
 8002994:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800299c:	429a      	cmp	r2, r3
 800299e:	dd0b      	ble.n	80029b8 <LCD_DrawLine+0x90>
		swap(x1, x2);
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	82bb      	strh	r3, [r7, #20]
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	80fb      	strh	r3, [r7, #6]
 80029a8:	8abb      	ldrh	r3, [r7, #20]
 80029aa:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 80029ac:	88bb      	ldrh	r3, [r7, #4]
 80029ae:	827b      	strh	r3, [r7, #18]
 80029b0:	883b      	ldrh	r3, [r7, #0]
 80029b2:	80bb      	strh	r3, [r7, #4]
 80029b4:	8a7b      	ldrh	r3, [r7, #18]
 80029b6:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 80029b8:	887a      	ldrh	r2, [r7, #2]
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	b29b      	uxth	r3, r3
 80029c0:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 80029c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80029c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bfb8      	it	lt
 80029d0:	425b      	neglt	r3, r3
 80029d2:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 80029d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029d8:	0fda      	lsrs	r2, r3, #31
 80029da:	4413      	add	r3, r2
 80029dc:	105b      	asrs	r3, r3, #1
 80029de:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2) {
 80029e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80029e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	da02      	bge.n	80029f2 <LCD_DrawLine+0xca>
		ystep = 1;
 80029ec:	2301      	movs	r3, #1
 80029ee:	83bb      	strh	r3, [r7, #28]
 80029f0:	e031      	b.n	8002a56 <LCD_DrawLine+0x12e>
	} else {
		ystep = -1;
 80029f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f6:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++) {
 80029f8:	e02d      	b.n	8002a56 <LCD_DrawLine+0x12e>
		if (steep) {
 80029fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <LCD_DrawLine+0xec>
			LCD_DrawPixel(y1, x1, color);
 8002a02:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002a04:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002a08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff23 	bl	8002858 <LCD_DrawPixel>
 8002a12:	e007      	b.n	8002a24 <LCD_DrawLine+0xfc>
		} else {
			LCD_DrawPixel(x1, y1, color);
 8002a14:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002a16:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff1a 	bl	8002858 <LCD_DrawPixel>
		}
		err -= dy;
 8002a24:	8bfa      	ldrh	r2, [r7, #30]
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8002a2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	da09      	bge.n	8002a4a <LCD_DrawLine+0x122>
			y1 += ystep;
 8002a36:	88ba      	ldrh	r2, [r7, #4]
 8002a38:	8bbb      	ldrh	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8002a40:	8bfa      	ldrh	r2, [r7, #30]
 8002a42:	8a3b      	ldrh	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++) {
 8002a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	80fb      	strh	r3, [r7, #6]
 8002a56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	ddcb      	ble.n	80029fa <LCD_DrawLine+0xd2>
		}
	}
}
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
 8002a66:	3724      	adds	r7, #36	; 0x24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}

08002a6c <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4604      	mov	r4, r0
 8002a74:	4608      	mov	r0, r1
 8002a76:	4611      	mov	r1, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	80fb      	strh	r3, [r7, #6]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80bb      	strh	r3, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	807b      	strh	r3, [r7, #2]
 8002a86:	4613      	mov	r3, r2
 8002a88:	803b      	strh	r3, [r7, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8002a8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	dd5a      	ble.n	8002b48 <LCD_DrawFastHLine+0xdc>
 8002a92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db56      	blt.n	8002b48 <LCD_DrawFastHLine+0xdc>
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <LCD_DrawFastHLine+0xe4>)
 8002a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	da4f      	bge.n	8002b48 <LCD_DrawFastHLine+0xdc>
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <LCD_DrawFastHLine+0xe8>)
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	da48      	bge.n	8002b48 <LCD_DrawFastHLine+0xdc>
			(x + length - 1)) < 0))
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	4413      	add	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29b      	uxth	r3, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8002ac2:	81fb      	strh	r3, [r7, #14]
 8002ac4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db3d      	blt.n	8002b48 <LCD_DrawFastHLine+0xdc>
		return;

	if (x < 0) { // Clip left
 8002acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	da06      	bge.n	8002ae2 <LCD_DrawFastHLine+0x76>
		length += x;
 8002ad4:	887a      	ldrh	r2, [r7, #2]
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4413      	add	r3, r2
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	807b      	strh	r3, [r7, #2]
		x = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	80fb      	strh	r3, [r7, #6]
	}

	if (x2 >= m_width) { // Clip right
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <LCD_DrawFastHLine+0xe8>)
 8002ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	db0d      	blt.n	8002b0c <LCD_DrawFastHLine+0xa0>
		x2 = m_width - 1;
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <LCD_DrawFastHLine+0xe8>)
 8002af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	81fb      	strh	r3, [r7, #14]
		length = x2 - x + 1;
 8002afe:	89fa      	ldrh	r2, [r7, #14]
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	807b      	strh	r3, [r7, #2]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 8002b0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002b10:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b1c:	f000 ff64 	bl	80039e8 <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 8002b20:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002b24:	883b      	ldrh	r3, [r7, #0]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fcbb 	bl	80034a4 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <LCD_DrawFastHLine+0xe8>)
 8002b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <LCD_DrawFastHLine+0xe4>)
 8002b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	2100      	movs	r1, #0
 8002b40:	2000      	movs	r0, #0
 8002b42:	f000 ff51 	bl	80039e8 <LCD_SetAddrWindow>
 8002b46:	e000      	b.n	8002b4a <LCD_DrawFastHLine+0xde>
		return;
 8002b48:	bf00      	nop

}
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd90      	pop	{r4, r7, pc}
 8002b50:	20000342 	.word	0x20000342
 8002b54:	20000340 	.word	0x20000340

08002b58 <LCD_DrawFastVLine>:
 * \param h		High of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4623      	mov	r3, r4
 8002b68:	80fb      	strh	r3, [r7, #6]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80bb      	strh	r3, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	807b      	strh	r3, [r7, #2]
 8002b72:	4613      	mov	r3, r2
 8002b74:	803b      	strh	r3, [r7, #0]
	// Update in subclasses if desired!
	LCD_DrawLine(x, y, x, y + h - 1, color);
 8002b76:	88ba      	ldrh	r2, [r7, #4]
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	b21c      	sxth	r4, r3
 8002b84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b88:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b8c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002b90:	883b      	ldrh	r3, [r7, #0]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4623      	mov	r3, r4
 8002b96:	f7ff fec7 	bl	8002928 <LCD_DrawLine>
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}

08002ba2 <LCD_DrawRect>:
 * \param h			Height of the rectangle to draw
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8002ba2:	b590      	push	{r4, r7, lr}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4604      	mov	r4, r0
 8002baa:	4608      	mov	r0, r1
 8002bac:	4611      	mov	r1, r2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4623      	mov	r3, r4
 8002bb2:	80fb      	strh	r3, [r7, #6]
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	80bb      	strh	r3, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	803b      	strh	r3, [r7, #0]
	LCD_DrawFastHLine(x, y, w, color);
 8002bc0:	8b3b      	ldrh	r3, [r7, #24]
 8002bc2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002bc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002bca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002bce:	f7ff ff4d 	bl	8002a6c <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x, y + h - 1, w, color);
 8002bd2:	88ba      	ldrh	r2, [r7, #4]
 8002bd4:	883b      	ldrh	r3, [r7, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b219      	sxth	r1, r3
 8002be0:	8b3b      	ldrh	r3, [r7, #24]
 8002be2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002be6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002bea:	f7ff ff3f 	bl	8002a6c <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y, h, color);
 8002bee:	8b3b      	ldrh	r3, [r7, #24]
 8002bf0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002bf4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002bf8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002bfc:	f7ff ffac 	bl	8002b58 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y, h, color);
 8002c00:	88fa      	ldrh	r2, [r7, #6]
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	4413      	add	r3, r2
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	b218      	sxth	r0, r3
 8002c0e:	8b3b      	ldrh	r3, [r7, #24]
 8002c10:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002c14:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002c18:	f7ff ff9e 	bl	8002b58 <LCD_DrawFastVLine>
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}

08002c24 <LCD_DrawRoundRect>:
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	80fb      	strh	r3, [r7, #6]
 8002c36:	4603      	mov	r3, r0
 8002c38:	80bb      	strh	r3, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	807b      	strh	r3, [r7, #2]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_DrawFastHLine(x + r, y, w - 2 * r, color); // Top
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	8b3b      	ldrh	r3, [r7, #24]
 8002c46:	4413      	add	r3, r2
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	b218      	sxth	r0, r3
 8002c4c:	887a      	ldrh	r2, [r7, #2]
 8002c4e:	8b3b      	ldrh	r3, [r7, #24]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	8bbb      	ldrh	r3, [r7, #28]
 8002c5c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002c60:	f7ff ff04 	bl	8002a6c <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 8002c64:	88fa      	ldrh	r2, [r7, #6]
 8002c66:	8b3b      	ldrh	r3, [r7, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	b218      	sxth	r0, r3
 8002c6e:	88ba      	ldrh	r2, [r7, #4]
 8002c70:	883b      	ldrh	r3, [r7, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	b219      	sxth	r1, r3
 8002c7c:	887a      	ldrh	r2, [r7, #2]
 8002c7e:	8b3b      	ldrh	r3, [r7, #24]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	b21a      	sxth	r2, r3
 8002c8a:	8bbb      	ldrh	r3, [r7, #28]
 8002c8c:	f7ff feee 	bl	8002a6c <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y + r, h - 2 * r, color); // Left
 8002c90:	88ba      	ldrh	r2, [r7, #4]
 8002c92:	8b3b      	ldrh	r3, [r7, #24]
 8002c94:	4413      	add	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	b219      	sxth	r1, r3
 8002c9a:	883a      	ldrh	r2, [r7, #0]
 8002c9c:	8b3b      	ldrh	r3, [r7, #24]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	b21a      	sxth	r2, r3
 8002ca8:	8bbb      	ldrh	r3, [r7, #28]
 8002caa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002cae:	f7ff ff53 	bl	8002b58 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b218      	sxth	r0, r3
 8002cc0:	88ba      	ldrh	r2, [r7, #4]
 8002cc2:	8b3b      	ldrh	r3, [r7, #24]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	b219      	sxth	r1, r3
 8002cca:	883a      	ldrh	r2, [r7, #0]
 8002ccc:	8b3b      	ldrh	r3, [r7, #24]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	b21a      	sxth	r2, r3
 8002cd8:	8bbb      	ldrh	r3, [r7, #28]
 8002cda:	f7ff ff3d 	bl	8002b58 <LCD_DrawFastVLine>
	// draw four corners
	LCD_DrawCircleHelper(x + r, y + r, r, 1, color);
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	8b3b      	ldrh	r3, [r7, #24]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b218      	sxth	r0, r3
 8002ce8:	88ba      	ldrh	r2, [r7, #4]
 8002cea:	8b3b      	ldrh	r3, [r7, #24]
 8002cec:	4413      	add	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	b219      	sxth	r1, r3
 8002cf2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002cf6:	8bbb      	ldrh	r3, [r7, #28]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f000 f84b 	bl	8002d96 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8002d00:	88fa      	ldrh	r2, [r7, #6]
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	4413      	add	r3, r2
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	8b3b      	ldrh	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	b218      	sxth	r0, r3
 8002d14:	88ba      	ldrh	r2, [r7, #4]
 8002d16:	8b3b      	ldrh	r3, [r7, #24]
 8002d18:	4413      	add	r3, r2
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	b219      	sxth	r1, r3
 8002d1e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002d22:	8bbb      	ldrh	r3, [r7, #28]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2302      	movs	r3, #2
 8002d28:	f000 f835 	bl	8002d96 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	4413      	add	r3, r2
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	8b3b      	ldrh	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	b218      	sxth	r0, r3
 8002d40:	88ba      	ldrh	r2, [r7, #4]
 8002d42:	883b      	ldrh	r3, [r7, #0]
 8002d44:	4413      	add	r3, r2
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	8b3b      	ldrh	r3, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	b219      	sxth	r1, r3
 8002d54:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002d58:	8bbb      	ldrh	r3, [r7, #28]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	f000 f81a 	bl	8002d96 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8002d62:	88fa      	ldrh	r2, [r7, #6]
 8002d64:	8b3b      	ldrh	r3, [r7, #24]
 8002d66:	4413      	add	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b218      	sxth	r0, r3
 8002d6c:	88ba      	ldrh	r2, [r7, #4]
 8002d6e:	883b      	ldrh	r3, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	8b3b      	ldrh	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	b219      	sxth	r1, r3
 8002d80:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002d84:	8bbb      	ldrh	r3, [r7, #28]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2308      	movs	r3, #8
 8002d8a:	f000 f804 	bl	8002d96 <LCD_DrawCircleHelper>
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd90      	pop	{r4, r7, pc}

08002d96 <LCD_DrawCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 8002d96:	b590      	push	{r4, r7, lr}
 8002d98:	b087      	sub	sp, #28
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	4608      	mov	r0, r1
 8002da0:	4611      	mov	r1, r2
 8002da2:	461a      	mov	r2, r3
 8002da4:	4623      	mov	r3, r4
 8002da6:	80fb      	strh	r3, [r7, #6]
 8002da8:	4603      	mov	r3, r0
 8002daa:	80bb      	strh	r3, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	f1c3 0301 	rsb	r3, r3, #1
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	03d2      	lsls	r2, r2, #15
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8002dd8:	e0a5      	b.n	8002f26 <LCD_DrawCircleHelper+0x190>
		if (f >= 0) {
 8002dda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	db0e      	blt.n	8002e00 <LCD_DrawCircleHelper+0x6a>
			y--;
 8002de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8002dee:	8a7b      	ldrh	r3, [r7, #18]
 8002df0:	3302      	adds	r3, #2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8002df6:	8afa      	ldrh	r2, [r7, #22]
 8002df8:	8a7b      	ldrh	r3, [r7, #18]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002e00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8002e0c:	8abb      	ldrh	r3, [r7, #20]
 8002e0e:	3302      	adds	r3, #2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002e14:	8afa      	ldrh	r2, [r7, #22]
 8002e16:	8abb      	ldrh	r3, [r7, #20]
 8002e18:	4413      	add	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8002e1e:	787b      	ldrb	r3, [r7, #1]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01b      	beq.n	8002e60 <LCD_DrawCircleHelper+0xca>
			LCD_DrawPixel(x0 + x, y0 + y, color);
 8002e28:	88fa      	ldrh	r2, [r7, #6]
 8002e2a:	8a3b      	ldrh	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b218      	sxth	r0, r3
 8002e32:	88ba      	ldrh	r2, [r7, #4]
 8002e34:	89fb      	ldrh	r3, [r7, #14]
 8002e36:	4413      	add	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	b21b      	sxth	r3, r3
 8002e3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f7ff fd0a 	bl	8002858 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 + x, color);
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b218      	sxth	r0, r3
 8002e4e:	88ba      	ldrh	r2, [r7, #4]
 8002e50:	8a3b      	ldrh	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f7ff fcfc 	bl	8002858 <LCD_DrawPixel>
		}
		if (cornername & 0x2) {
 8002e60:	787b      	ldrb	r3, [r7, #1]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01b      	beq.n	8002ea2 <LCD_DrawCircleHelper+0x10c>
			LCD_DrawPixel(x0 + x, y0 - y, color);
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	8a3b      	ldrh	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	b218      	sxth	r0, r3
 8002e74:	88ba      	ldrh	r2, [r7, #4]
 8002e76:	89fb      	ldrh	r3, [r7, #14]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7ff fce9 	bl	8002858 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 - x, color);
 8002e86:	88fa      	ldrh	r2, [r7, #6]
 8002e88:	89fb      	ldrh	r3, [r7, #14]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	b218      	sxth	r0, r3
 8002e90:	88ba      	ldrh	r2, [r7, #4]
 8002e92:	8a3b      	ldrh	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7ff fcdb 	bl	8002858 <LCD_DrawPixel>
		}
		if (cornername & 0x8) {
 8002ea2:	787b      	ldrb	r3, [r7, #1]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01b      	beq.n	8002ee4 <LCD_DrawCircleHelper+0x14e>
			LCD_DrawPixel(x0 - y, y0 + x, color);
 8002eac:	88fa      	ldrh	r2, [r7, #6]
 8002eae:	89fb      	ldrh	r3, [r7, #14]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	b218      	sxth	r0, r3
 8002eb6:	88ba      	ldrh	r2, [r7, #4]
 8002eb8:	8a3b      	ldrh	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f7ff fcc8 	bl	8002858 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 + y, color);
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	8a3b      	ldrh	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b218      	sxth	r0, r3
 8002ed2:	88ba      	ldrh	r2, [r7, #4]
 8002ed4:	89fb      	ldrh	r3, [r7, #14]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f7ff fcba 	bl	8002858 <LCD_DrawPixel>
		}
		if (cornername & 0x1) {
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01b      	beq.n	8002f26 <LCD_DrawCircleHelper+0x190>
			LCD_DrawPixel(x0 - y, y0 - x, color);
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	89fb      	ldrh	r3, [r7, #14]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	b218      	sxth	r0, r3
 8002ef8:	88ba      	ldrh	r2, [r7, #4]
 8002efa:	8a3b      	ldrh	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7ff fca7 	bl	8002858 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 - y, color);
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	8a3b      	ldrh	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	b218      	sxth	r0, r3
 8002f14:	88ba      	ldrh	r2, [r7, #4]
 8002f16:	89fb      	ldrh	r3, [r7, #14]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7ff fc99 	bl	8002858 <LCD_DrawPixel>
	while (x < y) {
 8002f26:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002f2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	f6ff af53 	blt.w	8002dda <LCD_DrawCircleHelper+0x44>
		}
	}
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd90      	pop	{r4, r7, pc}
	...

08002f40 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	4604      	mov	r4, r0
 8002f48:	4608      	mov	r0, r1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4623      	mov	r3, r4
 8002f50:	80fb      	strh	r3, [r7, #6]
 8002f52:	4603      	mov	r3, r0
 8002f54:	80bb      	strh	r3, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	70fb      	strb	r3, [r7, #3]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	803b      	strh	r3, [r7, #0]
	if ((x >= m_width) || // Clip right
 8002f5e:	4b6e      	ldr	r3, [pc, #440]	; (8003118 <LCD_DrawChar+0x1d8>)
 8002f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	f280 80d0 	bge.w	800310e <LCD_DrawChar+0x1ce>
			(y >= m_height) || // Clip bottom
 8002f6e:	4b6b      	ldr	r3, [pc, #428]	; (800311c <LCD_DrawChar+0x1dc>)
 8002f70:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8002f74:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	f280 80c8 	bge.w	800310e <LCD_DrawChar+0x1ce>
			((x + 6 * size - 1) < 0) || // Clip left
 8002f7e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002f82:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002f86:	4613      	mov	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	440b      	add	r3, r1
			(y >= m_height) || // Clip bottom
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f340 80bc 	ble.w	800310e <LCD_DrawChar+0x1ce>
			((y + 8 * size - 1) < 0))   // Clip top
 8002f96:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002f9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
			((x + 6 * size - 1) < 0) || // Clip left
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f340 80b3 	ble.w	800310e <LCD_DrawChar+0x1ce>
		return;

	for (int8_t i = 0; i < 6; i++) {
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e0a9      	b.n	8003102 <LCD_DrawChar+0x1c2>
		uint8_t line;
		if (i == 5) {
 8002fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d102      	bne.n	8002fbc <LCD_DrawChar+0x7c>
			line = 0x0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73bb      	strb	r3, [r7, #14]
 8002fba:	e09c      	b.n	80030f6 <LCD_DrawChar+0x1b6>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	441a      	add	r2, r3
 8002fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc8:	4413      	add	r3, r2
 8002fca:	4a55      	ldr	r2, [pc, #340]	; (8003120 <LCD_DrawChar+0x1e0>)
 8002fcc:	5cd3      	ldrb	r3, [r2, r3]
 8002fce:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	737b      	strb	r3, [r7, #13]
 8002fd4:	e08a      	b.n	80030ec <LCD_DrawChar+0x1ac>
				if (line & 0x1) {
 8002fd6:	7bbb      	ldrb	r3, [r7, #14]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d03c      	beq.n	800305a <LCD_DrawChar+0x11a>
					if (size == 1) { // default size
 8002fe0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d112      	bne.n	800300e <LCD_DrawChar+0xce>
						LCD_DrawPixel(x + i, y + j, color);
 8002fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	b218      	sxth	r0, r3
 8002ff6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	88bb      	ldrh	r3, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	b21b      	sxth	r3, r3
 8003004:	883a      	ldrh	r2, [r7, #0]
 8003006:	4619      	mov	r1, r3
 8003008:	f7ff fc26 	bl	8002858 <LCD_DrawPixel>
 800300c:	e065      	b.n	80030da <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	b29a      	uxth	r2, r3
 8003014:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003018:	b29b      	uxth	r3, r3
 800301a:	fb12 f303 	smulbb	r3, r2, r3
 800301e:	b29a      	uxth	r2, r3
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	4413      	add	r3, r2
 8003024:	b29b      	uxth	r3, r3
 8003026:	b218      	sxth	r0, r3
 8003028:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800302c:	b29a      	uxth	r2, r3
 800302e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003032:	b29b      	uxth	r3, r3
 8003034:	fb12 f303 	smulbb	r3, r2, r3
 8003038:	b29a      	uxth	r2, r3
 800303a:	88bb      	ldrh	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	b219      	sxth	r1, r3
 8003042:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003046:	b21a      	sxth	r2, r3
 8003048:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800304c:	b21c      	sxth	r4, r3
 800304e:	883b      	ldrh	r3, [r7, #0]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	4623      	mov	r3, r4
 8003054:	f000 f918 	bl	8003288 <LCD_FillRect>
 8003058:	e03f      	b.n	80030da <LCD_DrawChar+0x19a>
								color);
					}
				} else if (bg != color) {
 800305a:	8c3a      	ldrh	r2, [r7, #32]
 800305c:	883b      	ldrh	r3, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d03b      	beq.n	80030da <LCD_DrawChar+0x19a>
					if (size == 1) { // default size
 8003062:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003066:	2b01      	cmp	r3, #1
 8003068:	d112      	bne.n	8003090 <LCD_DrawChar+0x150>
						LCD_DrawPixel(x + i, y + j, bg);
 800306a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306e:	b29a      	uxth	r2, r3
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	4413      	add	r3, r2
 8003074:	b29b      	uxth	r3, r3
 8003076:	b218      	sxth	r0, r3
 8003078:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800307c:	b29a      	uxth	r2, r3
 800307e:	88bb      	ldrh	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	b21b      	sxth	r3, r3
 8003086:	8c3a      	ldrh	r2, [r7, #32]
 8003088:	4619      	mov	r1, r3
 800308a:	f7ff fbe5 	bl	8002858 <LCD_DrawPixel>
 800308e:	e024      	b.n	80030da <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 8003090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003094:	b29a      	uxth	r2, r3
 8003096:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800309a:	b29b      	uxth	r3, r3
 800309c:	fb12 f303 	smulbb	r3, r2, r3
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	4413      	add	r3, r2
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	b218      	sxth	r0, r3
 80030aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	fb12 f303 	smulbb	r3, r2, r3
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	88bb      	ldrh	r3, [r7, #4]
 80030be:	4413      	add	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	b219      	sxth	r1, r3
 80030c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030c8:	b21a      	sxth	r2, r3
 80030ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030ce:	b21c      	sxth	r4, r3
 80030d0:	8c3b      	ldrh	r3, [r7, #32]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4623      	mov	r3, r4
 80030d6:	f000 f8d7 	bl	8003288 <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 80030da:	7bbb      	ldrb	r3, [r7, #14]
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 80030e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	737b      	strb	r3, [r7, #13]
 80030ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80030f0:	2b07      	cmp	r3, #7
 80030f2:	f77f af70 	ble.w	8002fd6 <LCD_DrawChar+0x96>
	for (int8_t i = 0; i < 6; i++) {
 80030f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	2b05      	cmp	r3, #5
 8003108:	f77f af51 	ble.w	8002fae <LCD_DrawChar+0x6e>
 800310c:	e000      	b.n	8003110 <LCD_DrawChar+0x1d0>
		return;
 800310e:	bf00      	nop
			}
		}
	}
}
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}
 8003116:	bf00      	nop
 8003118:	20000340 	.word	0x20000340
 800311c:	20000342 	.word	0x20000342
 8003120:	08006d70 	.word	0x08006d70

08003124 <LCD_FillCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		int16_t delta, uint16_t color) {
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	4604      	mov	r4, r0
 800312c:	4608      	mov	r0, r1
 800312e:	4611      	mov	r1, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	80fb      	strh	r3, [r7, #6]
 8003136:	4603      	mov	r3, r0
 8003138:	80bb      	strh	r3, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	807b      	strh	r3, [r7, #2]
 800313e:	4613      	mov	r3, r2
 8003140:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	f1c3 0301 	rsb	r3, r3, #1
 8003148:	b29b      	uxth	r3, r3
 800314a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800314c:	2301      	movs	r3, #1
 800314e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8003150:	887b      	ldrh	r3, [r7, #2]
 8003152:	461a      	mov	r2, r3
 8003154:	03d2      	lsls	r2, r2, #15
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	b29b      	uxth	r3, r3
 800315c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8003162:	887b      	ldrh	r3, [r7, #2]
 8003164:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8003166:	e083      	b.n	8003270 <LCD_FillCircleHelper+0x14c>
		if (f >= 0) {
 8003168:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0e      	blt.n	800318e <LCD_FillCircleHelper+0x6a>
			y--;
 8003170:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800317c:	8a7b      	ldrh	r3, [r7, #18]
 800317e:	3302      	adds	r3, #2
 8003180:	b29b      	uxth	r3, r3
 8003182:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8003184:	8afa      	ldrh	r2, [r7, #22]
 8003186:	8a7b      	ldrh	r3, [r7, #18]
 8003188:	4413      	add	r3, r2
 800318a:	b29b      	uxth	r3, r3
 800318c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800318e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003192:	b29b      	uxth	r3, r3
 8003194:	3301      	adds	r3, #1
 8003196:	b29b      	uxth	r3, r3
 8003198:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800319a:	8abb      	ldrh	r3, [r7, #20]
 800319c:	3302      	adds	r3, #2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80031a2:	8afa      	ldrh	r2, [r7, #22]
 80031a4:	8abb      	ldrh	r3, [r7, #20]
 80031a6:	4413      	add	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 80031ac:	787b      	ldrb	r3, [r7, #1]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d02b      	beq.n	800320e <LCD_FillCircleHelper+0xea>
			LCD_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 80031b6:	88fa      	ldrh	r2, [r7, #6]
 80031b8:	8a3b      	ldrh	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	b218      	sxth	r0, r3
 80031c0:	88ba      	ldrh	r2, [r7, #4]
 80031c2:	89fb      	ldrh	r3, [r7, #14]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	b219      	sxth	r1, r3
 80031ca:	89fb      	ldrh	r3, [r7, #14]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031d2:	4413      	add	r3, r2
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	b29b      	uxth	r3, r3
 80031da:	b21a      	sxth	r2, r3
 80031dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031de:	f7ff fcbb 	bl	8002b58 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	89fb      	ldrh	r3, [r7, #14]
 80031e6:	4413      	add	r3, r2
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	b218      	sxth	r0, r3
 80031ec:	88ba      	ldrh	r2, [r7, #4]
 80031ee:	8a3b      	ldrh	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	b219      	sxth	r1, r3
 80031f6:	8a3b      	ldrh	r3, [r7, #16]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031fe:	4413      	add	r3, r2
 8003200:	b29b      	uxth	r3, r3
 8003202:	3301      	adds	r3, #1
 8003204:	b29b      	uxth	r3, r3
 8003206:	b21a      	sxth	r2, r3
 8003208:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800320a:	f7ff fca5 	bl	8002b58 <LCD_DrawFastVLine>
		}
		if (cornername & 0x2) {
 800320e:	787b      	ldrb	r3, [r7, #1]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d02b      	beq.n	8003270 <LCD_FillCircleHelper+0x14c>
			LCD_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	8a3b      	ldrh	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	b29b      	uxth	r3, r3
 8003220:	b218      	sxth	r0, r3
 8003222:	88ba      	ldrh	r2, [r7, #4]
 8003224:	89fb      	ldrh	r3, [r7, #14]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	b29b      	uxth	r3, r3
 800322a:	b219      	sxth	r1, r3
 800322c:	89fb      	ldrh	r3, [r7, #14]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003234:	4413      	add	r3, r2
 8003236:	b29b      	uxth	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	b21a      	sxth	r2, r3
 800323e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003240:	f7ff fc8a 	bl	8002b58 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	89fb      	ldrh	r3, [r7, #14]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	b29b      	uxth	r3, r3
 800324c:	b218      	sxth	r0, r3
 800324e:	88ba      	ldrh	r2, [r7, #4]
 8003250:	8a3b      	ldrh	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	b29b      	uxth	r3, r3
 8003256:	b219      	sxth	r1, r3
 8003258:	8a3b      	ldrh	r3, [r7, #16]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003260:	4413      	add	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	3301      	adds	r3, #1
 8003266:	b29b      	uxth	r3, r3
 8003268:	b21a      	sxth	r2, r3
 800326a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800326c:	f7ff fc74 	bl	8002b58 <LCD_DrawFastVLine>
	while (x < y) {
 8003270:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003274:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003278:	429a      	cmp	r2, r3
 800327a:	f6ff af75 	blt.w	8003168 <LCD_FillCircleHelper+0x44>
		}
	}
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd90      	pop	{r4, r7, pc}

08003288 <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	4604      	mov	r4, r0
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4623      	mov	r3, r4
 8003298:	80fb      	strh	r3, [r7, #6]
 800329a:	4603      	mov	r3, r0
 800329c:	80bb      	strh	r3, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	807b      	strh	r3, [r7, #2]
 80032a2:	4613      	mov	r3, r2
 80032a4:	803b      	strh	r3, [r7, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 80032a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f340 808b 	ble.w	80033c6 <LCD_FillRect+0x13e>
 80032b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f340 8086 	ble.w	80033c6 <LCD_FillRect+0x13e>
 80032ba:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <LCD_FillRect+0x148>)
 80032bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	da7e      	bge.n	80033c6 <LCD_FillRect+0x13e>
 80032c8:	4b42      	ldr	r3, [pc, #264]	; (80033d4 <LCD_FillRect+0x14c>)
 80032ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	da77      	bge.n	80033c6 <LCD_FillRect+0x13e>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	4413      	add	r3, r2
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	81fb      	strh	r3, [r7, #14]
 80032e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	db6c      	blt.n	80033c6 <LCD_FillRect+0x13e>
 80032ec:	88ba      	ldrh	r2, [r7, #4]
 80032ee:	883b      	ldrh	r3, [r7, #0]
 80032f0:	4413      	add	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	81bb      	strh	r3, [r7, #12]
 80032fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	db61      	blt.n	80033c6 <LCD_FillRect+0x13e>
		return;
	if (x < 0) { // Clip left
 8003302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003306:	2b00      	cmp	r3, #0
 8003308:	da06      	bge.n	8003318 <LCD_FillRect+0x90>
		w += x;
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	4413      	add	r3, r2
 8003310:	b29b      	uxth	r3, r3
 8003312:	807b      	strh	r3, [r7, #2]
		x = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	80fb      	strh	r3, [r7, #6]
	}
	if (y1 < 0) { // Clip top
 8003318:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	da06      	bge.n	800332e <LCD_FillRect+0xa6>
		h += y1;
 8003320:	883a      	ldrh	r2, [r7, #0]
 8003322:	88bb      	ldrh	r3, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	803b      	strh	r3, [r7, #0]
		y1 = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	80bb      	strh	r3, [r7, #4]
	}
	if (x2 >= m_width) { // Clip right
 800332e:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <LCD_FillRect+0x148>)
 8003330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003334:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003338:	429a      	cmp	r2, r3
 800333a:	db0d      	blt.n	8003358 <LCD_FillRect+0xd0>
		x2 = m_width - 1;
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <LCD_FillRect+0x148>)
 800333e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29b      	uxth	r3, r3
 8003348:	81fb      	strh	r3, [r7, #14]
		w = x2 - x + 1;
 800334a:	89fa      	ldrh	r2, [r7, #14]
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	b29b      	uxth	r3, r3
 8003352:	3301      	adds	r3, #1
 8003354:	b29b      	uxth	r3, r3
 8003356:	807b      	strh	r3, [r7, #2]
	}
	if (y2 >= m_height) { // Clip bottom
 8003358:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <LCD_FillRect+0x14c>)
 800335a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800335e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003362:	429a      	cmp	r2, r3
 8003364:	db0d      	blt.n	8003382 <LCD_FillRect+0xfa>
		y2 = m_height - 1;
 8003366:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <LCD_FillRect+0x14c>)
 8003368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29b      	uxth	r3, r3
 8003372:	81bb      	strh	r3, [r7, #12]
		h = y2 - y1 + 1;
 8003374:	89ba      	ldrh	r2, [r7, #12]
 8003376:	88bb      	ldrh	r3, [r7, #4]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	b29b      	uxth	r3, r3
 800337c:	3301      	adds	r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	803b      	strh	r3, [r7, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 8003382:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003386:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800338a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800338e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003392:	f000 fb29 	bl	80039e8 <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 8003396:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800339a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800339e:	fb03 f202 	mul.w	r2, r3, r2
 80033a2:	8c3b      	ldrh	r3, [r7, #32]
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f87c 	bl	80034a4 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <LCD_FillRect+0x148>)
 80033ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b2:	1e5a      	subs	r2, r3, #1
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <LCD_FillRect+0x14c>)
 80033b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	2100      	movs	r1, #0
 80033be:	2000      	movs	r0, #0
 80033c0:	f000 fb12 	bl	80039e8 <LCD_SetAddrWindow>
 80033c4:	e000      	b.n	80033c8 <LCD_FillRect+0x140>
		return;
 80033c6:	bf00      	nop
}
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd90      	pop	{r4, r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000340 	.word	0x20000340
 80033d4:	20000342 	.word	0x20000342

080033d8 <LCD_FillRoundRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 80033d8:	b590      	push	{r4, r7, lr}
 80033da:	b085      	sub	sp, #20
 80033dc:	af02      	add	r7, sp, #8
 80033de:	4604      	mov	r4, r0
 80033e0:	4608      	mov	r0, r1
 80033e2:	4611      	mov	r1, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	4623      	mov	r3, r4
 80033e8:	80fb      	strh	r3, [r7, #6]
 80033ea:	4603      	mov	r3, r0
 80033ec:	80bb      	strh	r3, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	807b      	strh	r3, [r7, #2]
 80033f2:	4613      	mov	r3, r2
 80033f4:	803b      	strh	r3, [r7, #0]
	// smarter version
	LCD_FillRect(x + r, y, w - 2 * r, h, color);
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	8b3b      	ldrh	r3, [r7, #24]
 80033fa:	4413      	add	r3, r2
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	b218      	sxth	r0, r3
 8003400:	887a      	ldrh	r2, [r7, #2]
 8003402:	8b3b      	ldrh	r3, [r7, #24]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	b29b      	uxth	r3, r3
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	b29b      	uxth	r3, r3
 800340c:	b21a      	sxth	r2, r3
 800340e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003412:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003416:	8bbb      	ldrh	r3, [r7, #28]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	4623      	mov	r3, r4
 800341c:	f7ff ff34 	bl	8003288 <LCD_FillRect>

	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8003420:	88fa      	ldrh	r2, [r7, #6]
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	4413      	add	r3, r2
 8003426:	b29a      	uxth	r2, r3
 8003428:	8b3b      	ldrh	r3, [r7, #24]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29b      	uxth	r3, r3
 8003432:	b218      	sxth	r0, r3
 8003434:	88ba      	ldrh	r2, [r7, #4]
 8003436:	8b3b      	ldrh	r3, [r7, #24]
 8003438:	4413      	add	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	b219      	sxth	r1, r3
 800343e:	883a      	ldrh	r2, [r7, #0]
 8003440:	8b3b      	ldrh	r3, [r7, #24]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	b29b      	uxth	r3, r3
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29b      	uxth	r3, r3
 800344e:	b21b      	sxth	r3, r3
 8003450:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8003454:	8bba      	ldrh	r2, [r7, #28]
 8003456:	9201      	str	r2, [sp, #4]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2301      	movs	r3, #1
 800345c:	4622      	mov	r2, r4
 800345e:	f7ff fe61 	bl	8003124 <LCD_FillCircleHelper>
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	8b3b      	ldrh	r3, [r7, #24]
 8003466:	4413      	add	r3, r2
 8003468:	b29b      	uxth	r3, r3
 800346a:	b218      	sxth	r0, r3
 800346c:	88ba      	ldrh	r2, [r7, #4]
 800346e:	8b3b      	ldrh	r3, [r7, #24]
 8003470:	4413      	add	r3, r2
 8003472:	b29b      	uxth	r3, r3
 8003474:	b219      	sxth	r1, r3
 8003476:	883a      	ldrh	r2, [r7, #0]
 8003478:	8b3b      	ldrh	r3, [r7, #24]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	b29b      	uxth	r3, r3
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29b      	uxth	r3, r3
 8003486:	b21b      	sxth	r3, r3
 8003488:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800348c:	8bba      	ldrh	r2, [r7, #28]
 800348e:	9201      	str	r2, [sp, #4]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2302      	movs	r3, #2
 8003494:	4622      	mov	r2, r4
 8003496:	f7ff fe45 	bl	8003124 <LCD_FillCircleHelper>
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd90      	pop	{r4, r7, pc}
	...

080034a4 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	733b      	strb	r3, [r7, #12]
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	72fb      	strb	r3, [r7, #11]

	LCD_CS_LOW();
 80034bc:	2200      	movs	r2, #0
 80034be:	2100      	movs	r1, #0
 80034c0:	4895      	ldr	r0, [pc, #596]	; (8003718 <LCD_Flood+0x274>)
 80034c2:	f7fe fe47 	bl	8002154 <gpio_write>
	LCD_CD_LOW();
 80034c6:	2200      	movs	r2, #0
 80034c8:	2104      	movs	r1, #4
 80034ca:	4894      	ldr	r0, [pc, #592]	; (800371c <LCD_Flood+0x278>)
 80034cc:	f7fe fe42 	bl	8002154 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 80034d0:	2000      	movs	r0, #0
 80034d2:	f000 fb19 	bl	8003b08 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 80034d6:	2022      	movs	r0, #34	; 0x22
 80034d8:	f000 fb16 	bl	8003b08 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 80034dc:	2201      	movs	r2, #1
 80034de:	2104      	movs	r1, #4
 80034e0:	488e      	ldr	r0, [pc, #568]	; (800371c <LCD_Flood+0x278>)
 80034e2:	f7fe fe37 	bl	8002154 <gpio_write>
	LCD_Write8(hi);
 80034e6:	7b3b      	ldrb	r3, [r7, #12]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fb0d 	bl	8003b08 <LCD_Write8>
	LCD_Write8(lo);
 80034ee:	7afb      	ldrb	r3, [r7, #11]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fb09 	bl	8003b08 <LCD_Write8>
	len--;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	81fb      	strh	r3, [r7, #14]
	if (hi == lo) {
 8003502:	7b3a      	ldrb	r2, [r7, #12]
 8003504:	7afb      	ldrb	r3, [r7, #11]
 8003506:	429a      	cmp	r2, r3
 8003508:	f040 80e4 	bne.w	80036d4 <LCD_Flood+0x230>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 800350c:	e088      	b.n	8003620 <LCD_Flood+0x17c>
			i = 16; // 64 pixels/block / 4 pixels/pass
 800350e:	2310      	movs	r3, #16
 8003510:	737b      	strb	r3, [r7, #13]
			do {
				LCD_WR_STROBE();
 8003512:	2200      	movs	r2, #0
 8003514:	2101      	movs	r1, #1
 8003516:	4881      	ldr	r0, [pc, #516]	; (800371c <LCD_Flood+0x278>)
 8003518:	f7fe fe1c 	bl	8002154 <gpio_write>
 800351c:	2001      	movs	r0, #1
 800351e:	f7ff f851 	bl	80025c4 <delay>
 8003522:	2201      	movs	r2, #1
 8003524:	2101      	movs	r1, #1
 8003526:	487d      	ldr	r0, [pc, #500]	; (800371c <LCD_Flood+0x278>)
 8003528:	f7fe fe14 	bl	8002154 <gpio_write>
 800352c:	2001      	movs	r0, #1
 800352e:	f7ff f849 	bl	80025c4 <delay>
				LCD_WR_STROBE();
 8003532:	2200      	movs	r2, #0
 8003534:	2101      	movs	r1, #1
 8003536:	4879      	ldr	r0, [pc, #484]	; (800371c <LCD_Flood+0x278>)
 8003538:	f7fe fe0c 	bl	8002154 <gpio_write>
 800353c:	2001      	movs	r0, #1
 800353e:	f7ff f841 	bl	80025c4 <delay>
 8003542:	2201      	movs	r2, #1
 8003544:	2101      	movs	r1, #1
 8003546:	4875      	ldr	r0, [pc, #468]	; (800371c <LCD_Flood+0x278>)
 8003548:	f7fe fe04 	bl	8002154 <gpio_write>
 800354c:	2001      	movs	r0, #1
 800354e:	f7ff f839 	bl	80025c4 <delay>
				LCD_WR_STROBE();
 8003552:	2200      	movs	r2, #0
 8003554:	2101      	movs	r1, #1
 8003556:	4871      	ldr	r0, [pc, #452]	; (800371c <LCD_Flood+0x278>)
 8003558:	f7fe fdfc 	bl	8002154 <gpio_write>
 800355c:	2001      	movs	r0, #1
 800355e:	f7ff f831 	bl	80025c4 <delay>
 8003562:	2201      	movs	r2, #1
 8003564:	2101      	movs	r1, #1
 8003566:	486d      	ldr	r0, [pc, #436]	; (800371c <LCD_Flood+0x278>)
 8003568:	f7fe fdf4 	bl	8002154 <gpio_write>
 800356c:	2001      	movs	r0, #1
 800356e:	f7ff f829 	bl	80025c4 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 8003572:	2200      	movs	r2, #0
 8003574:	2101      	movs	r1, #1
 8003576:	4869      	ldr	r0, [pc, #420]	; (800371c <LCD_Flood+0x278>)
 8003578:	f7fe fdec 	bl	8002154 <gpio_write>
 800357c:	2001      	movs	r0, #1
 800357e:	f7ff f821 	bl	80025c4 <delay>
 8003582:	2201      	movs	r2, #1
 8003584:	2101      	movs	r1, #1
 8003586:	4865      	ldr	r0, [pc, #404]	; (800371c <LCD_Flood+0x278>)
 8003588:	f7fe fde4 	bl	8002154 <gpio_write>
 800358c:	2001      	movs	r0, #1
 800358e:	f7ff f819 	bl	80025c4 <delay>
				LCD_WR_STROBE();
 8003592:	2200      	movs	r2, #0
 8003594:	2101      	movs	r1, #1
 8003596:	4861      	ldr	r0, [pc, #388]	; (800371c <LCD_Flood+0x278>)
 8003598:	f7fe fddc 	bl	8002154 <gpio_write>
 800359c:	2001      	movs	r0, #1
 800359e:	f7ff f811 	bl	80025c4 <delay>
 80035a2:	2201      	movs	r2, #1
 80035a4:	2101      	movs	r1, #1
 80035a6:	485d      	ldr	r0, [pc, #372]	; (800371c <LCD_Flood+0x278>)
 80035a8:	f7fe fdd4 	bl	8002154 <gpio_write>
 80035ac:	2001      	movs	r0, #1
 80035ae:	f7ff f809 	bl	80025c4 <delay>
				LCD_WR_STROBE();
 80035b2:	2200      	movs	r2, #0
 80035b4:	2101      	movs	r1, #1
 80035b6:	4859      	ldr	r0, [pc, #356]	; (800371c <LCD_Flood+0x278>)
 80035b8:	f7fe fdcc 	bl	8002154 <gpio_write>
 80035bc:	2001      	movs	r0, #1
 80035be:	f7ff f801 	bl	80025c4 <delay>
 80035c2:	2201      	movs	r2, #1
 80035c4:	2101      	movs	r1, #1
 80035c6:	4855      	ldr	r0, [pc, #340]	; (800371c <LCD_Flood+0x278>)
 80035c8:	f7fe fdc4 	bl	8002154 <gpio_write>
 80035cc:	2001      	movs	r0, #1
 80035ce:	f7fe fff9 	bl	80025c4 <delay>
				LCD_WR_STROBE();
 80035d2:	2200      	movs	r2, #0
 80035d4:	2101      	movs	r1, #1
 80035d6:	4851      	ldr	r0, [pc, #324]	; (800371c <LCD_Flood+0x278>)
 80035d8:	f7fe fdbc 	bl	8002154 <gpio_write>
 80035dc:	2001      	movs	r0, #1
 80035de:	f7fe fff1 	bl	80025c4 <delay>
 80035e2:	2201      	movs	r2, #1
 80035e4:	2101      	movs	r1, #1
 80035e6:	484d      	ldr	r0, [pc, #308]	; (800371c <LCD_Flood+0x278>)
 80035e8:	f7fe fdb4 	bl	8002154 <gpio_write>
 80035ec:	2001      	movs	r0, #1
 80035ee:	f7fe ffe9 	bl	80025c4 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 80035f2:	2200      	movs	r2, #0
 80035f4:	2101      	movs	r1, #1
 80035f6:	4849      	ldr	r0, [pc, #292]	; (800371c <LCD_Flood+0x278>)
 80035f8:	f7fe fdac 	bl	8002154 <gpio_write>
 80035fc:	2001      	movs	r0, #1
 80035fe:	f7fe ffe1 	bl	80025c4 <delay>
 8003602:	2201      	movs	r2, #1
 8003604:	2101      	movs	r1, #1
 8003606:	4845      	ldr	r0, [pc, #276]	; (800371c <LCD_Flood+0x278>)
 8003608:	f7fe fda4 	bl	8002154 <gpio_write>
 800360c:	2001      	movs	r0, #1
 800360e:	f7fe ffd9 	bl	80025c4 <delay>
			} while (--i);
 8003612:	7b7b      	ldrb	r3, [r7, #13]
 8003614:	3b01      	subs	r3, #1
 8003616:	737b      	strb	r3, [r7, #13]
 8003618:	7b7b      	ldrb	r3, [r7, #13]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f47f af79 	bne.w	8003512 <LCD_Flood+0x6e>
		while (blocks--) {
 8003620:	89fb      	ldrh	r3, [r7, #14]
 8003622:	1e5a      	subs	r2, r3, #1
 8003624:	81fa      	strh	r2, [r7, #14]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f47f af71 	bne.w	800350e <LCD_Flood+0x6a>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003634:	737b      	strb	r3, [r7, #13]
 8003636:	e01f      	b.n	8003678 <LCD_Flood+0x1d4>
			LCD_WR_STROBE();
 8003638:	2200      	movs	r2, #0
 800363a:	2101      	movs	r1, #1
 800363c:	4837      	ldr	r0, [pc, #220]	; (800371c <LCD_Flood+0x278>)
 800363e:	f7fe fd89 	bl	8002154 <gpio_write>
 8003642:	2001      	movs	r0, #1
 8003644:	f7fe ffbe 	bl	80025c4 <delay>
 8003648:	2201      	movs	r2, #1
 800364a:	2101      	movs	r1, #1
 800364c:	4833      	ldr	r0, [pc, #204]	; (800371c <LCD_Flood+0x278>)
 800364e:	f7fe fd81 	bl	8002154 <gpio_write>
 8003652:	2001      	movs	r0, #1
 8003654:	f7fe ffb6 	bl	80025c4 <delay>
			LCD_WR_STROBE();
 8003658:	2200      	movs	r2, #0
 800365a:	2101      	movs	r1, #1
 800365c:	482f      	ldr	r0, [pc, #188]	; (800371c <LCD_Flood+0x278>)
 800365e:	f7fe fd79 	bl	8002154 <gpio_write>
 8003662:	2001      	movs	r0, #1
 8003664:	f7fe ffae 	bl	80025c4 <delay>
 8003668:	2201      	movs	r2, #1
 800366a:	2101      	movs	r1, #1
 800366c:	482b      	ldr	r0, [pc, #172]	; (800371c <LCD_Flood+0x278>)
 800366e:	f7fe fd71 	bl	8002154 <gpio_write>
 8003672:	2001      	movs	r0, #1
 8003674:	f7fe ffa6 	bl	80025c4 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 8003678:	7b7b      	ldrb	r3, [r7, #13]
 800367a:	1e5a      	subs	r2, r3, #1
 800367c:	737a      	strb	r2, [r7, #13]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1da      	bne.n	8003638 <LCD_Flood+0x194>
 8003682:	e03f      	b.n	8003704 <LCD_Flood+0x260>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 8003684:	2310      	movs	r3, #16
 8003686:	737b      	strb	r3, [r7, #13]
			do {
				LCD_Write8(hi);
 8003688:	7b3b      	ldrb	r3, [r7, #12]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fa3c 	bl	8003b08 <LCD_Write8>
				LCD_Write8(lo);
 8003690:	7afb      	ldrb	r3, [r7, #11]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fa38 	bl	8003b08 <LCD_Write8>
				LCD_Write8(hi);
 8003698:	7b3b      	ldrb	r3, [r7, #12]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fa34 	bl	8003b08 <LCD_Write8>
				LCD_Write8(lo);
 80036a0:	7afb      	ldrb	r3, [r7, #11]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fa30 	bl	8003b08 <LCD_Write8>
				LCD_Write8(hi);
 80036a8:	7b3b      	ldrb	r3, [r7, #12]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fa2c 	bl	8003b08 <LCD_Write8>
				LCD_Write8(lo);
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fa28 	bl	8003b08 <LCD_Write8>
				LCD_Write8(hi);
 80036b8:	7b3b      	ldrb	r3, [r7, #12]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fa24 	bl	8003b08 <LCD_Write8>
				LCD_Write8(lo);
 80036c0:	7afb      	ldrb	r3, [r7, #11]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fa20 	bl	8003b08 <LCD_Write8>
			} while (--i);
 80036c8:	7b7b      	ldrb	r3, [r7, #13]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	737b      	strb	r3, [r7, #13]
 80036ce:	7b7b      	ldrb	r3, [r7, #13]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1d9      	bne.n	8003688 <LCD_Flood+0x1e4>
		while (blocks--) {
 80036d4:	89fb      	ldrh	r3, [r7, #14]
 80036d6:	1e5a      	subs	r2, r3, #1
 80036d8:	81fa      	strh	r2, [r7, #14]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1d2      	bne.n	8003684 <LCD_Flood+0x1e0>
		}
		for (i = (uint8_t) len & 63; i--;) {
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e6:	737b      	strb	r3, [r7, #13]
 80036e8:	e007      	b.n	80036fa <LCD_Flood+0x256>
			LCD_Write8(hi);
 80036ea:	7b3b      	ldrb	r3, [r7, #12]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fa0b 	bl	8003b08 <LCD_Write8>
			LCD_Write8(lo);
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fa07 	bl	8003b08 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 80036fa:	7b7b      	ldrb	r3, [r7, #13]
 80036fc:	1e5a      	subs	r2, r3, #1
 80036fe:	737a      	strb	r2, [r7, #13]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f2      	bne.n	80036ea <LCD_Flood+0x246>
		}
	}
	LCD_CS_HIGH();
 8003704:	2201      	movs	r2, #1
 8003706:	2100      	movs	r1, #0
 8003708:	4803      	ldr	r0, [pc, #12]	; (8003718 <LCD_Flood+0x274>)
 800370a:	f7fe fd23 	bl	8002154 <gpio_write>
}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40020400 	.word	0x40020400
 800371c:	40020000 	.word	0x40020000

08003720 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8003720:	b40f      	push	{r0, r1, r2, r3}
 8003722:	b5b0      	push	{r4, r5, r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8003728:	f107 031c 	add.w	r3, r7, #28
 800372c:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	69b9      	ldr	r1, [r7, #24]
 8003732:	483d      	ldr	r0, [pc, #244]	; (8003828 <LCD_Printf+0x108>)
 8003734:	f000 ff64 	bl	8004600 <vsiprintf>
	va_end(lst);

	p = buf;
 8003738:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <LCD_Printf+0x108>)
 800373a:	607b      	str	r3, [r7, #4]
	while (*p) {
 800373c:	e068      	b.n	8003810 <LCD_Printf+0xf0>
		if (*p == '\n') {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b0a      	cmp	r3, #10
 8003744:	d111      	bne.n	800376a <LCD_Printf+0x4a>
			m_cursor_y += m_textsize * 8;
 8003746:	4b39      	ldr	r3, [pc, #228]	; (800382c <LCD_Printf+0x10c>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	b29a      	uxth	r2, r3
 8003750:	4b37      	ldr	r3, [pc, #220]	; (8003830 <LCD_Printf+0x110>)
 8003752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003756:	b29b      	uxth	r3, r3
 8003758:	4413      	add	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	b21a      	sxth	r2, r3
 800375e:	4b34      	ldr	r3, [pc, #208]	; (8003830 <LCD_Printf+0x110>)
 8003760:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8003762:	4b34      	ldr	r3, [pc, #208]	; (8003834 <LCD_Printf+0x114>)
 8003764:	2200      	movs	r2, #0
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	e04f      	b.n	800380a <LCD_Printf+0xea>
		} else if (*p == '\r') {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b0d      	cmp	r3, #13
 8003770:	d04b      	beq.n	800380a <LCD_Printf+0xea>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8003772:	4b30      	ldr	r3, [pc, #192]	; (8003834 <LCD_Printf+0x114>)
 8003774:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003778:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <LCD_Printf+0x110>)
 800377a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	781c      	ldrb	r4, [r3, #0]
 8003782:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <LCD_Printf+0x118>)
 8003784:	881d      	ldrh	r5, [r3, #0]
 8003786:	4b2d      	ldr	r3, [pc, #180]	; (800383c <LCD_Printf+0x11c>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	4a28      	ldr	r2, [pc, #160]	; (800382c <LCD_Printf+0x10c>)
 800378c:	7812      	ldrb	r2, [r2, #0]
 800378e:	9201      	str	r2, [sp, #4]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	462b      	mov	r3, r5
 8003794:	4622      	mov	r2, r4
 8003796:	f7ff fbd3 	bl	8002f40 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 800379a:	4b24      	ldr	r3, [pc, #144]	; (800382c <LCD_Printf+0x10c>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	0052      	lsls	r2, r2, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	4b22      	ldr	r3, [pc, #136]	; (8003834 <LCD_Printf+0x114>)
 80037ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	b21a      	sxth	r2, r3
 80037b8:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <LCD_Printf+0x114>)
 80037ba:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 80037bc:	4b20      	ldr	r3, [pc, #128]	; (8003840 <LCD_Printf+0x120>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d022      	beq.n	800380a <LCD_Printf+0xea>
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <LCD_Printf+0x114>)
 80037c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ca:	4619      	mov	r1, r3
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <LCD_Printf+0x124>)
 80037ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d2:	4618      	mov	r0, r3
 80037d4:	4b15      	ldr	r3, [pc, #84]	; (800382c <LCD_Printf+0x10c>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4613      	mov	r3, r2
 80037dc:	0092      	lsls	r2, r2, #2
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4403      	add	r3, r0
 80037e4:	4299      	cmp	r1, r3
 80037e6:	dd10      	ble.n	800380a <LCD_Printf+0xea>
				m_cursor_y += m_textsize * 8;
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <LCD_Printf+0x10c>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <LCD_Printf+0x110>)
 80037f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	b21a      	sxth	r2, r3
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <LCD_Printf+0x110>)
 8003802:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <LCD_Printf+0x114>)
 8003806:	2200      	movs	r2, #0
 8003808:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3301      	adds	r3, #1
 800380e:	607b      	str	r3, [r7, #4]
	while (*p) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d192      	bne.n	800373e <LCD_Printf+0x1e>
	}
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003824:	b004      	add	sp, #16
 8003826:	4770      	bx	lr
 8003828:	20000350 	.word	0x20000350
 800382c:	2000034c 	.word	0x2000034c
 8003830:	20000346 	.word	0x20000346
 8003834:	20000344 	.word	0x20000344
 8003838:	20000348 	.word	0x20000348
 800383c:	2000034a 	.word	0x2000034a
 8003840:	2000034e 	.word	0x2000034e
 8003844:	20000340 	.word	0x20000340

08003848 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 800384e:	2201      	movs	r2, #1
 8003850:	2100      	movs	r1, #0
 8003852:	4824      	ldr	r0, [pc, #144]	; (80038e4 <LCD_Reset+0x9c>)
 8003854:	f7fe fc7e 	bl	8002154 <gpio_write>
	LCD_WR_HIGH();
 8003858:	2201      	movs	r2, #1
 800385a:	2101      	movs	r1, #1
 800385c:	4822      	ldr	r0, [pc, #136]	; (80038e8 <LCD_Reset+0xa0>)
 800385e:	f7fe fc79 	bl	8002154 <gpio_write>
	LCD_RD_HIGH();
 8003862:	2201      	movs	r2, #1
 8003864:	2100      	movs	r1, #0
 8003866:	4820      	ldr	r0, [pc, #128]	; (80038e8 <LCD_Reset+0xa0>)
 8003868:	f7fe fc74 	bl	8002154 <gpio_write>

	LCD_RST_LOW();
 800386c:	2200      	movs	r2, #0
 800386e:	2101      	movs	r1, #1
 8003870:	481e      	ldr	r0, [pc, #120]	; (80038ec <LCD_Reset+0xa4>)
 8003872:	f7fe fc6f 	bl	8002154 <gpio_write>
	delay(100);
 8003876:	2064      	movs	r0, #100	; 0x64
 8003878:	f7fe fea4 	bl	80025c4 <delay>
	LCD_RST_HIGH();
 800387c:	2201      	movs	r2, #1
 800387e:	2101      	movs	r1, #1
 8003880:	481a      	ldr	r0, [pc, #104]	; (80038ec <LCD_Reset+0xa4>)
 8003882:	f7fe fc67 	bl	8002154 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	4816      	ldr	r0, [pc, #88]	; (80038e4 <LCD_Reset+0x9c>)
 800388c:	f7fe fc62 	bl	8002154 <gpio_write>

	LCD_CD_LOW();
 8003890:	2200      	movs	r2, #0
 8003892:	2104      	movs	r1, #4
 8003894:	4814      	ldr	r0, [pc, #80]	; (80038e8 <LCD_Reset+0xa0>)
 8003896:	f7fe fc5d 	bl	8002154 <gpio_write>
	LCD_Write8(0x00);
 800389a:	2000      	movs	r0, #0
 800389c:	f000 f934 	bl	8003b08 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 80038a0:	2300      	movs	r3, #0
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	e012      	b.n	80038cc <LCD_Reset+0x84>
		LCD_WR_STROBE(); // Three extra 0x00s
 80038a6:	2200      	movs	r2, #0
 80038a8:	2101      	movs	r1, #1
 80038aa:	480f      	ldr	r0, [pc, #60]	; (80038e8 <LCD_Reset+0xa0>)
 80038ac:	f7fe fc52 	bl	8002154 <gpio_write>
 80038b0:	2001      	movs	r0, #1
 80038b2:	f7fe fe87 	bl	80025c4 <delay>
 80038b6:	2201      	movs	r2, #1
 80038b8:	2101      	movs	r1, #1
 80038ba:	480b      	ldr	r0, [pc, #44]	; (80038e8 <LCD_Reset+0xa0>)
 80038bc:	f7fe fc4a 	bl	8002154 <gpio_write>
 80038c0:	2001      	movs	r0, #1
 80038c2:	f7fe fe7f 	bl	80025c4 <delay>
	for (uint8_t i = 0; i < 3; i++)
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	3301      	adds	r3, #1
 80038ca:	71fb      	strb	r3, [r7, #7]
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d9e9      	bls.n	80038a6 <LCD_Reset+0x5e>
	LCD_CS_HIGH();
 80038d2:	2201      	movs	r2, #1
 80038d4:	2100      	movs	r1, #0
 80038d6:	4803      	ldr	r0, [pc, #12]	; (80038e4 <LCD_Reset+0x9c>)
 80038d8:	f7fe fc3c 	bl	8002154 <gpio_write>
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40020400 	.word	0x40020400
 80038e8:	40020000 	.word	0x40020000
 80038ec:	40020800 	.word	0x40020800

080038f0 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	b21a      	sxth	r2, r3
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <LCD_SetCursor+0x28>)
 8003900:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	b21a      	sxth	r2, r3
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <LCD_SetCursor+0x2c>)
 8003908:	801a      	strh	r2, [r3, #0]
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000344 	.word	0x20000344
 800391c:	20000346 	.word	0x20000346

08003920 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
	m_textsize = (s > 0) ? s : 1;
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <LCD_SetTextSize+0x14>
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	e000      	b.n	8003936 <LCD_SetTextSize+0x16>
 8003934:	2301      	movs	r3, #1
 8003936:	4a04      	ldr	r2, [pc, #16]	; (8003948 <LCD_SetTextSize+0x28>)
 8003938:	7013      	strb	r3, [r2, #0]
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	2000034c 	.word	0x2000034c

0800394c <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	460a      	mov	r2, r1
 8003956:	80fb      	strh	r3, [r7, #6]
 8003958:	4613      	mov	r3, r2
 800395a:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 800395c:	4a05      	ldr	r2, [pc, #20]	; (8003974 <LCD_SetTextColor+0x28>)
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <LCD_SetTextColor+0x2c>)
 8003964:	88bb      	ldrh	r3, [r7, #4]
 8003966:	8013      	strh	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	20000348 	.word	0x20000348
 8003978:	2000034a 	.word	0x2000034a

0800397c <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <LCD_SetRotation+0x60>)
 8003990:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <LCD_SetRotation+0x60>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d81a      	bhi.n	80039d0 <LCD_SetRotation+0x54>
 800399a:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <LCD_SetRotation+0x24>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039b1 	.word	0x080039b1
 80039a4:	080039c1 	.word	0x080039c1
 80039a8:	080039b1 	.word	0x080039b1
 80039ac:	080039c1 	.word	0x080039c1
	case 0:
	case 2:
		m_width = TFTWIDTH;
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <LCD_SetRotation+0x64>)
 80039b2:	22f0      	movs	r2, #240	; 0xf0
 80039b4:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <LCD_SetRotation+0x68>)
 80039b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039bc:	801a      	strh	r2, [r3, #0]
		break;
 80039be:	e007      	b.n	80039d0 <LCD_SetRotation+0x54>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <LCD_SetRotation+0x64>)
 80039c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039c6:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <LCD_SetRotation+0x68>)
 80039ca:	22f0      	movs	r2, #240	; 0xf0
 80039cc:	801a      	strh	r2, [r3, #0]
		break;
 80039ce:	bf00      	nop
	}
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	2000034d 	.word	0x2000034d
 80039e0:	20000340 	.word	0x20000340
 80039e4:	20000342 	.word	0x20000342

080039e8 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 80039f6:	2200      	movs	r2, #0
 80039f8:	2100      	movs	r1, #0
 80039fa:	4841      	ldr	r0, [pc, #260]	; (8003b00 <LCD_SetAddrWindow+0x118>)
 80039fc:	f7fe fbaa 	bl	8002154 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 8003a00:	4b40      	ldr	r3, [pc, #256]	; (8003b04 <LCD_SetAddrWindow+0x11c>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d038      	beq.n	8003a7a <LCD_SetAddrWindow+0x92>
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	dc03      	bgt.n	8003a14 <LCD_SetAddrWindow+0x2c>
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d006      	beq.n	8003a1e <LCD_SetAddrWindow+0x36>
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d017      	beq.n	8003a44 <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	61fb      	str	r3, [r7, #28]
		y = y1;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	61bb      	str	r3, [r7, #24]
		break;
 8003a1c:	e042      	b.n	8003aa4 <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	617b      	str	r3, [r7, #20]
		y1 = x1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8003a2c:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8003a38:	607b      	str	r3, [r7, #4]
		x = x2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	61fb      	str	r3, [r7, #28]
		y = y1;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	61bb      	str	r3, [r7, #24]
		break;
 8003a42:	e02f      	b.n	8003aa4 <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8003a4e:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8003a56:	607b      	str	r3, [r7, #4]
		t = y1;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003a62:	3301      	adds	r3, #1
 8003a64:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	603b      	str	r3, [r7, #0]
		x = x2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	61fb      	str	r3, [r7, #28]
		y = y2;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	61bb      	str	r3, [r7, #24]
		break;
 8003a78:	e014      	b.n	8003aa4 <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	617b      	str	r3, [r7, #20]
		x1 = y1;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003a88:	3301      	adds	r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003a96:	3301      	adds	r3, #1
 8003a98:	603b      	str	r3, [r7, #0]
		x = x1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	61fb      	str	r3, [r7, #28]
		y = y2;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	61bb      	str	r3, [r7, #24]
		break;
 8003aa2:	bf00      	nop
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	2050      	movs	r0, #80	; 0x50
 8003aac:	f000 f888 	bl	8003bc0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	2051      	movs	r0, #81	; 0x51
 8003ab8:	f000 f882 	bl	8003bc0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	2052      	movs	r0, #82	; 0x52
 8003ac4:	f000 f87c 	bl	8003bc0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	4619      	mov	r1, r3
 8003ace:	2053      	movs	r0, #83	; 0x53
 8003ad0:	f000 f876 	bl	8003bc0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	4619      	mov	r1, r3
 8003ada:	2020      	movs	r0, #32
 8003adc:	f000 f870 	bl	8003bc0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	2021      	movs	r0, #33	; 0x21
 8003ae8:	f000 f86a 	bl	8003bc0 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8003aec:	2201      	movs	r2, #1
 8003aee:	2100      	movs	r1, #0
 8003af0:	4803      	ldr	r0, [pc, #12]	; (8003b00 <LCD_SetAddrWindow+0x118>)
 8003af2:	f7fe fb2f 	bl	8002154 <gpio_write>
}
 8003af6:	bf00      	nop
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40020400 	.word	0x40020400
 8003b04:	2000034d 	.word	0x2000034d

08003b08 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8003b12:	4b28      	ldr	r3, [pc, #160]	; (8003bb4 <LCD_Write8+0xac>)
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	79fa      	ldrb	r2, [r7, #7]
 8003b1e:	0252      	lsls	r2, r2, #9
 8003b20:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003b24:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8003b38:	491e      	ldr	r1, [pc, #120]	; (8003bb4 <LCD_Write8+0xac>)
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8003b3a:	4313      	orrs	r3, r2
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8003b3c:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <LCD_Write8+0xb0>)
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8003b46:	4013      	ands	r3, r2
 8003b48:	79fa      	ldrb	r2, [r7, #7]
 8003b4a:	f002 0208 	and.w	r2, r2, #8
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	105b      	asrs	r3, r3, #1
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	431a      	orrs	r2, r3
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8003b6c:	4912      	ldr	r1, [pc, #72]	; (8003bb8 <LCD_Write8+0xb0>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8003b6e:	4313      	orrs	r3, r2
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8003b70:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <LCD_Write8+0xb4>)
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	79fa      	ldrb	r2, [r7, #7]
 8003b7e:	0192      	lsls	r2, r2, #6
 8003b80:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003b84:	490d      	ldr	r1, [pc, #52]	; (8003bbc <LCD_Write8+0xb4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4809      	ldr	r0, [pc, #36]	; (8003bb4 <LCD_Write8+0xac>)
 8003b90:	f7fe fae0 	bl	8002154 <gpio_write>
 8003b94:	2001      	movs	r0, #1
 8003b96:	f7fe fd15 	bl	80025c4 <delay>
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <LCD_Write8+0xac>)
 8003ba0:	f7fe fad8 	bl	8002154 <gpio_write>
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f7fe fd0d 	bl	80025c4 <delay>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020800 	.word	0x40020800

08003bc0 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	460a      	mov	r2, r1
 8003bca:	80fb      	strh	r3, [r7, #6]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	80bb      	strh	r3, [r7, #4]
	uint8_t hi, lo;
	hi = (a) >> 8;
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	73fb      	strb	r3, [r7, #15]
	lo = (a);
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	73bb      	strb	r3, [r7, #14]
	LCD_CD_LOW();
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2104      	movs	r1, #4
 8003be0:	4810      	ldr	r0, [pc, #64]	; (8003c24 <LCD_WriteRegister16+0x64>)
 8003be2:	f7fe fab7 	bl	8002154 <gpio_write>
	LCD_Write8(hi);
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff8d 	bl	8003b08 <LCD_Write8>
	LCD_Write8(lo);
 8003bee:	7bbb      	ldrb	r3, [r7, #14]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff89 	bl	8003b08 <LCD_Write8>
	hi = (d) >> 8;
 8003bf6:	88bb      	ldrh	r3, [r7, #4]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	73fb      	strb	r3, [r7, #15]
	lo = (d);
 8003bfe:	88bb      	ldrh	r3, [r7, #4]
 8003c00:	73bb      	strb	r3, [r7, #14]
	LCD_CD_HIGH();
 8003c02:	2201      	movs	r2, #1
 8003c04:	2104      	movs	r1, #4
 8003c06:	4807      	ldr	r0, [pc, #28]	; (8003c24 <LCD_WriteRegister16+0x64>)
 8003c08:	f7fe faa4 	bl	8002154 <gpio_write>
	LCD_Write8(hi);
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ff7a 	bl	8003b08 <LCD_Write8>
	LCD_Write8(lo);
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ff76 	bl	8003b08 <LCD_Write8>
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40020000 	.word	0x40020000

08003c28 <__errno>:
 8003c28:	4b01      	ldr	r3, [pc, #4]	; (8003c30 <__errno+0x8>)
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	2000004c 	.word	0x2000004c

08003c34 <__libc_init_array>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	4d0d      	ldr	r5, [pc, #52]	; (8003c6c <__libc_init_array+0x38>)
 8003c38:	4c0d      	ldr	r4, [pc, #52]	; (8003c70 <__libc_init_array+0x3c>)
 8003c3a:	1b64      	subs	r4, r4, r5
 8003c3c:	10a4      	asrs	r4, r4, #2
 8003c3e:	2600      	movs	r6, #0
 8003c40:	42a6      	cmp	r6, r4
 8003c42:	d109      	bne.n	8003c58 <__libc_init_array+0x24>
 8003c44:	4d0b      	ldr	r5, [pc, #44]	; (8003c74 <__libc_init_array+0x40>)
 8003c46:	4c0c      	ldr	r4, [pc, #48]	; (8003c78 <__libc_init_array+0x44>)
 8003c48:	f002 ff3e 	bl	8006ac8 <_init>
 8003c4c:	1b64      	subs	r4, r4, r5
 8003c4e:	10a4      	asrs	r4, r4, #2
 8003c50:	2600      	movs	r6, #0
 8003c52:	42a6      	cmp	r6, r4
 8003c54:	d105      	bne.n	8003c62 <__libc_init_array+0x2e>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5c:	4798      	blx	r3
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7ee      	b.n	8003c40 <__libc_init_array+0xc>
 8003c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c66:	4798      	blx	r3
 8003c68:	3601      	adds	r6, #1
 8003c6a:	e7f2      	b.n	8003c52 <__libc_init_array+0x1e>
 8003c6c:	080074dc 	.word	0x080074dc
 8003c70:	080074dc 	.word	0x080074dc
 8003c74:	080074dc 	.word	0x080074dc
 8003c78:	080074e0 	.word	0x080074e0

08003c7c <memset>:
 8003c7c:	4402      	add	r2, r0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d100      	bne.n	8003c86 <memset+0xa>
 8003c84:	4770      	bx	lr
 8003c86:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8a:	e7f9      	b.n	8003c80 <memset+0x4>

08003c8c <__cvt>:
 8003c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c90:	ec55 4b10 	vmov	r4, r5, d0
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	460e      	mov	r6, r1
 8003c98:	4619      	mov	r1, r3
 8003c9a:	462b      	mov	r3, r5
 8003c9c:	bfbb      	ittet	lt
 8003c9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003ca2:	461d      	movlt	r5, r3
 8003ca4:	2300      	movge	r3, #0
 8003ca6:	232d      	movlt	r3, #45	; 0x2d
 8003ca8:	700b      	strb	r3, [r1, #0]
 8003caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003cb0:	4691      	mov	r9, r2
 8003cb2:	f023 0820 	bic.w	r8, r3, #32
 8003cb6:	bfbc      	itt	lt
 8003cb8:	4622      	movlt	r2, r4
 8003cba:	4614      	movlt	r4, r2
 8003cbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cc0:	d005      	beq.n	8003cce <__cvt+0x42>
 8003cc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003cc6:	d100      	bne.n	8003cca <__cvt+0x3e>
 8003cc8:	3601      	adds	r6, #1
 8003cca:	2102      	movs	r1, #2
 8003ccc:	e000      	b.n	8003cd0 <__cvt+0x44>
 8003cce:	2103      	movs	r1, #3
 8003cd0:	ab03      	add	r3, sp, #12
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	ab02      	add	r3, sp, #8
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	ec45 4b10 	vmov	d0, r4, r5
 8003cdc:	4653      	mov	r3, sl
 8003cde:	4632      	mov	r2, r6
 8003ce0:	f000 fd26 	bl	8004730 <_dtoa_r>
 8003ce4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ce8:	4607      	mov	r7, r0
 8003cea:	d102      	bne.n	8003cf2 <__cvt+0x66>
 8003cec:	f019 0f01 	tst.w	r9, #1
 8003cf0:	d022      	beq.n	8003d38 <__cvt+0xac>
 8003cf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cf6:	eb07 0906 	add.w	r9, r7, r6
 8003cfa:	d110      	bne.n	8003d1e <__cvt+0x92>
 8003cfc:	783b      	ldrb	r3, [r7, #0]
 8003cfe:	2b30      	cmp	r3, #48	; 0x30
 8003d00:	d10a      	bne.n	8003d18 <__cvt+0x8c>
 8003d02:	2200      	movs	r2, #0
 8003d04:	2300      	movs	r3, #0
 8003d06:	4620      	mov	r0, r4
 8003d08:	4629      	mov	r1, r5
 8003d0a:	f7fc fee5 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d0e:	b918      	cbnz	r0, 8003d18 <__cvt+0x8c>
 8003d10:	f1c6 0601 	rsb	r6, r6, #1
 8003d14:	f8ca 6000 	str.w	r6, [sl]
 8003d18:	f8da 3000 	ldr.w	r3, [sl]
 8003d1c:	4499      	add	r9, r3
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2300      	movs	r3, #0
 8003d22:	4620      	mov	r0, r4
 8003d24:	4629      	mov	r1, r5
 8003d26:	f7fc fed7 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d2a:	b108      	cbz	r0, 8003d30 <__cvt+0xa4>
 8003d2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d30:	2230      	movs	r2, #48	; 0x30
 8003d32:	9b03      	ldr	r3, [sp, #12]
 8003d34:	454b      	cmp	r3, r9
 8003d36:	d307      	bcc.n	8003d48 <__cvt+0xbc>
 8003d38:	9b03      	ldr	r3, [sp, #12]
 8003d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d3c:	1bdb      	subs	r3, r3, r7
 8003d3e:	4638      	mov	r0, r7
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	b004      	add	sp, #16
 8003d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d48:	1c59      	adds	r1, r3, #1
 8003d4a:	9103      	str	r1, [sp, #12]
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e7f0      	b.n	8003d32 <__cvt+0xa6>

08003d50 <__exponent>:
 8003d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d52:	4603      	mov	r3, r0
 8003d54:	2900      	cmp	r1, #0
 8003d56:	bfb8      	it	lt
 8003d58:	4249      	neglt	r1, r1
 8003d5a:	f803 2b02 	strb.w	r2, [r3], #2
 8003d5e:	bfb4      	ite	lt
 8003d60:	222d      	movlt	r2, #45	; 0x2d
 8003d62:	222b      	movge	r2, #43	; 0x2b
 8003d64:	2909      	cmp	r1, #9
 8003d66:	7042      	strb	r2, [r0, #1]
 8003d68:	dd2a      	ble.n	8003dc0 <__exponent+0x70>
 8003d6a:	f10d 0407 	add.w	r4, sp, #7
 8003d6e:	46a4      	mov	ip, r4
 8003d70:	270a      	movs	r7, #10
 8003d72:	46a6      	mov	lr, r4
 8003d74:	460a      	mov	r2, r1
 8003d76:	fb91 f6f7 	sdiv	r6, r1, r7
 8003d7a:	fb07 1516 	mls	r5, r7, r6, r1
 8003d7e:	3530      	adds	r5, #48	; 0x30
 8003d80:	2a63      	cmp	r2, #99	; 0x63
 8003d82:	f104 34ff 	add.w	r4, r4, #4294967295
 8003d86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003d8a:	4631      	mov	r1, r6
 8003d8c:	dcf1      	bgt.n	8003d72 <__exponent+0x22>
 8003d8e:	3130      	adds	r1, #48	; 0x30
 8003d90:	f1ae 0502 	sub.w	r5, lr, #2
 8003d94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003d98:	1c44      	adds	r4, r0, #1
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	4561      	cmp	r1, ip
 8003d9e:	d30a      	bcc.n	8003db6 <__exponent+0x66>
 8003da0:	f10d 0209 	add.w	r2, sp, #9
 8003da4:	eba2 020e 	sub.w	r2, r2, lr
 8003da8:	4565      	cmp	r5, ip
 8003daa:	bf88      	it	hi
 8003dac:	2200      	movhi	r2, #0
 8003dae:	4413      	add	r3, r2
 8003db0:	1a18      	subs	r0, r3, r0
 8003db2:	b003      	add	sp, #12
 8003db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003dbe:	e7ed      	b.n	8003d9c <__exponent+0x4c>
 8003dc0:	2330      	movs	r3, #48	; 0x30
 8003dc2:	3130      	adds	r1, #48	; 0x30
 8003dc4:	7083      	strb	r3, [r0, #2]
 8003dc6:	70c1      	strb	r1, [r0, #3]
 8003dc8:	1d03      	adds	r3, r0, #4
 8003dca:	e7f1      	b.n	8003db0 <__exponent+0x60>

08003dcc <_printf_float>:
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	ed2d 8b02 	vpush	{d8}
 8003dd4:	b08d      	sub	sp, #52	; 0x34
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ddc:	4616      	mov	r6, r2
 8003dde:	461f      	mov	r7, r3
 8003de0:	4605      	mov	r5, r0
 8003de2:	f001 fa93 	bl	800530c <_localeconv_r>
 8003de6:	f8d0 a000 	ldr.w	sl, [r0]
 8003dea:	4650      	mov	r0, sl
 8003dec:	f7fc f9f8 	bl	80001e0 <strlen>
 8003df0:	2300      	movs	r3, #0
 8003df2:	930a      	str	r3, [sp, #40]	; 0x28
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	9305      	str	r3, [sp, #20]
 8003df8:	f8d8 3000 	ldr.w	r3, [r8]
 8003dfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003e00:	3307      	adds	r3, #7
 8003e02:	f023 0307 	bic.w	r3, r3, #7
 8003e06:	f103 0208 	add.w	r2, r3, #8
 8003e0a:	f8c8 2000 	str.w	r2, [r8]
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003e1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e1e:	9307      	str	r3, [sp, #28]
 8003e20:	f8cd 8018 	str.w	r8, [sp, #24]
 8003e24:	ee08 0a10 	vmov	s16, r0
 8003e28:	4b9f      	ldr	r3, [pc, #636]	; (80040a8 <_printf_float+0x2dc>)
 8003e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e32:	f7fc fe83 	bl	8000b3c <__aeabi_dcmpun>
 8003e36:	bb88      	cbnz	r0, 8003e9c <_printf_float+0xd0>
 8003e38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e3c:	4b9a      	ldr	r3, [pc, #616]	; (80040a8 <_printf_float+0x2dc>)
 8003e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e42:	f7fc fe5d 	bl	8000b00 <__aeabi_dcmple>
 8003e46:	bb48      	cbnz	r0, 8003e9c <_printf_float+0xd0>
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	4640      	mov	r0, r8
 8003e4e:	4649      	mov	r1, r9
 8003e50:	f7fc fe4c 	bl	8000aec <__aeabi_dcmplt>
 8003e54:	b110      	cbz	r0, 8003e5c <_printf_float+0x90>
 8003e56:	232d      	movs	r3, #45	; 0x2d
 8003e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e5c:	4b93      	ldr	r3, [pc, #588]	; (80040ac <_printf_float+0x2e0>)
 8003e5e:	4894      	ldr	r0, [pc, #592]	; (80040b0 <_printf_float+0x2e4>)
 8003e60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003e64:	bf94      	ite	ls
 8003e66:	4698      	movls	r8, r3
 8003e68:	4680      	movhi	r8, r0
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	6123      	str	r3, [r4, #16]
 8003e6e:	9b05      	ldr	r3, [sp, #20]
 8003e70:	f023 0204 	bic.w	r2, r3, #4
 8003e74:	6022      	str	r2, [r4, #0]
 8003e76:	f04f 0900 	mov.w	r9, #0
 8003e7a:	9700      	str	r7, [sp, #0]
 8003e7c:	4633      	mov	r3, r6
 8003e7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003e80:	4621      	mov	r1, r4
 8003e82:	4628      	mov	r0, r5
 8003e84:	f000 f9d8 	bl	8004238 <_printf_common>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	f040 8090 	bne.w	8003fae <_printf_float+0x1e2>
 8003e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e92:	b00d      	add	sp, #52	; 0x34
 8003e94:	ecbd 8b02 	vpop	{d8}
 8003e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	4640      	mov	r0, r8
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	f7fc fe4a 	bl	8000b3c <__aeabi_dcmpun>
 8003ea8:	b140      	cbz	r0, 8003ebc <_printf_float+0xf0>
 8003eaa:	464b      	mov	r3, r9
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bfbc      	itt	lt
 8003eb0:	232d      	movlt	r3, #45	; 0x2d
 8003eb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003eb6:	487f      	ldr	r0, [pc, #508]	; (80040b4 <_printf_float+0x2e8>)
 8003eb8:	4b7f      	ldr	r3, [pc, #508]	; (80040b8 <_printf_float+0x2ec>)
 8003eba:	e7d1      	b.n	8003e60 <_printf_float+0x94>
 8003ebc:	6863      	ldr	r3, [r4, #4]
 8003ebe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003ec2:	9206      	str	r2, [sp, #24]
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	d13f      	bne.n	8003f48 <_printf_float+0x17c>
 8003ec8:	2306      	movs	r3, #6
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	9b05      	ldr	r3, [sp, #20]
 8003ece:	6861      	ldr	r1, [r4, #4]
 8003ed0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9303      	str	r3, [sp, #12]
 8003ed8:	ab0a      	add	r3, sp, #40	; 0x28
 8003eda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003ede:	ab09      	add	r3, sp, #36	; 0x24
 8003ee0:	ec49 8b10 	vmov	d0, r8, r9
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	6022      	str	r2, [r4, #0]
 8003ee8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003eec:	4628      	mov	r0, r5
 8003eee:	f7ff fecd 	bl	8003c8c <__cvt>
 8003ef2:	9b06      	ldr	r3, [sp, #24]
 8003ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ef6:	2b47      	cmp	r3, #71	; 0x47
 8003ef8:	4680      	mov	r8, r0
 8003efa:	d108      	bne.n	8003f0e <_printf_float+0x142>
 8003efc:	1cc8      	adds	r0, r1, #3
 8003efe:	db02      	blt.n	8003f06 <_printf_float+0x13a>
 8003f00:	6863      	ldr	r3, [r4, #4]
 8003f02:	4299      	cmp	r1, r3
 8003f04:	dd41      	ble.n	8003f8a <_printf_float+0x1be>
 8003f06:	f1ab 0b02 	sub.w	fp, fp, #2
 8003f0a:	fa5f fb8b 	uxtb.w	fp, fp
 8003f0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003f12:	d820      	bhi.n	8003f56 <_printf_float+0x18a>
 8003f14:	3901      	subs	r1, #1
 8003f16:	465a      	mov	r2, fp
 8003f18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f1c:	9109      	str	r1, [sp, #36]	; 0x24
 8003f1e:	f7ff ff17 	bl	8003d50 <__exponent>
 8003f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f24:	1813      	adds	r3, r2, r0
 8003f26:	2a01      	cmp	r2, #1
 8003f28:	4681      	mov	r9, r0
 8003f2a:	6123      	str	r3, [r4, #16]
 8003f2c:	dc02      	bgt.n	8003f34 <_printf_float+0x168>
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	07d2      	lsls	r2, r2, #31
 8003f32:	d501      	bpl.n	8003f38 <_printf_float+0x16c>
 8003f34:	3301      	adds	r3, #1
 8003f36:	6123      	str	r3, [r4, #16]
 8003f38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d09c      	beq.n	8003e7a <_printf_float+0xae>
 8003f40:	232d      	movs	r3, #45	; 0x2d
 8003f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f46:	e798      	b.n	8003e7a <_printf_float+0xae>
 8003f48:	9a06      	ldr	r2, [sp, #24]
 8003f4a:	2a47      	cmp	r2, #71	; 0x47
 8003f4c:	d1be      	bne.n	8003ecc <_printf_float+0x100>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1bc      	bne.n	8003ecc <_printf_float+0x100>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e7b9      	b.n	8003eca <_printf_float+0xfe>
 8003f56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003f5a:	d118      	bne.n	8003f8e <_printf_float+0x1c2>
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	6863      	ldr	r3, [r4, #4]
 8003f60:	dd0b      	ble.n	8003f7a <_printf_float+0x1ae>
 8003f62:	6121      	str	r1, [r4, #16]
 8003f64:	b913      	cbnz	r3, 8003f6c <_printf_float+0x1a0>
 8003f66:	6822      	ldr	r2, [r4, #0]
 8003f68:	07d0      	lsls	r0, r2, #31
 8003f6a:	d502      	bpl.n	8003f72 <_printf_float+0x1a6>
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	440b      	add	r3, r1
 8003f70:	6123      	str	r3, [r4, #16]
 8003f72:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f74:	f04f 0900 	mov.w	r9, #0
 8003f78:	e7de      	b.n	8003f38 <_printf_float+0x16c>
 8003f7a:	b913      	cbnz	r3, 8003f82 <_printf_float+0x1b6>
 8003f7c:	6822      	ldr	r2, [r4, #0]
 8003f7e:	07d2      	lsls	r2, r2, #31
 8003f80:	d501      	bpl.n	8003f86 <_printf_float+0x1ba>
 8003f82:	3302      	adds	r3, #2
 8003f84:	e7f4      	b.n	8003f70 <_printf_float+0x1a4>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e7f2      	b.n	8003f70 <_printf_float+0x1a4>
 8003f8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f90:	4299      	cmp	r1, r3
 8003f92:	db05      	blt.n	8003fa0 <_printf_float+0x1d4>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	6121      	str	r1, [r4, #16]
 8003f98:	07d8      	lsls	r0, r3, #31
 8003f9a:	d5ea      	bpl.n	8003f72 <_printf_float+0x1a6>
 8003f9c:	1c4b      	adds	r3, r1, #1
 8003f9e:	e7e7      	b.n	8003f70 <_printf_float+0x1a4>
 8003fa0:	2900      	cmp	r1, #0
 8003fa2:	bfd4      	ite	le
 8003fa4:	f1c1 0202 	rsble	r2, r1, #2
 8003fa8:	2201      	movgt	r2, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	e7e0      	b.n	8003f70 <_printf_float+0x1a4>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	055a      	lsls	r2, r3, #21
 8003fb2:	d407      	bmi.n	8003fc4 <_printf_float+0x1f8>
 8003fb4:	6923      	ldr	r3, [r4, #16]
 8003fb6:	4642      	mov	r2, r8
 8003fb8:	4631      	mov	r1, r6
 8003fba:	4628      	mov	r0, r5
 8003fbc:	47b8      	blx	r7
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d12c      	bne.n	800401c <_printf_float+0x250>
 8003fc2:	e764      	b.n	8003e8e <_printf_float+0xc2>
 8003fc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fc8:	f240 80e0 	bls.w	800418c <_printf_float+0x3c0>
 8003fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f7fc fd80 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d034      	beq.n	8004046 <_printf_float+0x27a>
 8003fdc:	4a37      	ldr	r2, [pc, #220]	; (80040bc <_printf_float+0x2f0>)
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	47b8      	blx	r7
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	f43f af51 	beq.w	8003e8e <_printf_float+0xc2>
 8003fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	db02      	blt.n	8003ffa <_printf_float+0x22e>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	07d8      	lsls	r0, r3, #31
 8003ff8:	d510      	bpl.n	800401c <_printf_float+0x250>
 8003ffa:	ee18 3a10 	vmov	r3, s16
 8003ffe:	4652      	mov	r2, sl
 8004000:	4631      	mov	r1, r6
 8004002:	4628      	mov	r0, r5
 8004004:	47b8      	blx	r7
 8004006:	3001      	adds	r0, #1
 8004008:	f43f af41 	beq.w	8003e8e <_printf_float+0xc2>
 800400c:	f04f 0800 	mov.w	r8, #0
 8004010:	f104 091a 	add.w	r9, r4, #26
 8004014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004016:	3b01      	subs	r3, #1
 8004018:	4543      	cmp	r3, r8
 800401a:	dc09      	bgt.n	8004030 <_printf_float+0x264>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	079b      	lsls	r3, r3, #30
 8004020:	f100 8105 	bmi.w	800422e <_printf_float+0x462>
 8004024:	68e0      	ldr	r0, [r4, #12]
 8004026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004028:	4298      	cmp	r0, r3
 800402a:	bfb8      	it	lt
 800402c:	4618      	movlt	r0, r3
 800402e:	e730      	b.n	8003e92 <_printf_float+0xc6>
 8004030:	2301      	movs	r3, #1
 8004032:	464a      	mov	r2, r9
 8004034:	4631      	mov	r1, r6
 8004036:	4628      	mov	r0, r5
 8004038:	47b8      	blx	r7
 800403a:	3001      	adds	r0, #1
 800403c:	f43f af27 	beq.w	8003e8e <_printf_float+0xc2>
 8004040:	f108 0801 	add.w	r8, r8, #1
 8004044:	e7e6      	b.n	8004014 <_printf_float+0x248>
 8004046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004048:	2b00      	cmp	r3, #0
 800404a:	dc39      	bgt.n	80040c0 <_printf_float+0x2f4>
 800404c:	4a1b      	ldr	r2, [pc, #108]	; (80040bc <_printf_float+0x2f0>)
 800404e:	2301      	movs	r3, #1
 8004050:	4631      	mov	r1, r6
 8004052:	4628      	mov	r0, r5
 8004054:	47b8      	blx	r7
 8004056:	3001      	adds	r0, #1
 8004058:	f43f af19 	beq.w	8003e8e <_printf_float+0xc2>
 800405c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004060:	4313      	orrs	r3, r2
 8004062:	d102      	bne.n	800406a <_printf_float+0x29e>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	07d9      	lsls	r1, r3, #31
 8004068:	d5d8      	bpl.n	800401c <_printf_float+0x250>
 800406a:	ee18 3a10 	vmov	r3, s16
 800406e:	4652      	mov	r2, sl
 8004070:	4631      	mov	r1, r6
 8004072:	4628      	mov	r0, r5
 8004074:	47b8      	blx	r7
 8004076:	3001      	adds	r0, #1
 8004078:	f43f af09 	beq.w	8003e8e <_printf_float+0xc2>
 800407c:	f04f 0900 	mov.w	r9, #0
 8004080:	f104 0a1a 	add.w	sl, r4, #26
 8004084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004086:	425b      	negs	r3, r3
 8004088:	454b      	cmp	r3, r9
 800408a:	dc01      	bgt.n	8004090 <_printf_float+0x2c4>
 800408c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800408e:	e792      	b.n	8003fb6 <_printf_float+0x1ea>
 8004090:	2301      	movs	r3, #1
 8004092:	4652      	mov	r2, sl
 8004094:	4631      	mov	r1, r6
 8004096:	4628      	mov	r0, r5
 8004098:	47b8      	blx	r7
 800409a:	3001      	adds	r0, #1
 800409c:	f43f aef7 	beq.w	8003e8e <_printf_float+0xc2>
 80040a0:	f109 0901 	add.w	r9, r9, #1
 80040a4:	e7ee      	b.n	8004084 <_printf_float+0x2b8>
 80040a6:	bf00      	nop
 80040a8:	7fefffff 	.word	0x7fefffff
 80040ac:	080070fc 	.word	0x080070fc
 80040b0:	08007100 	.word	0x08007100
 80040b4:	08007108 	.word	0x08007108
 80040b8:	08007104 	.word	0x08007104
 80040bc:	0800710c 	.word	0x0800710c
 80040c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040c4:	429a      	cmp	r2, r3
 80040c6:	bfa8      	it	ge
 80040c8:	461a      	movge	r2, r3
 80040ca:	2a00      	cmp	r2, #0
 80040cc:	4691      	mov	r9, r2
 80040ce:	dc37      	bgt.n	8004140 <_printf_float+0x374>
 80040d0:	f04f 0b00 	mov.w	fp, #0
 80040d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040d8:	f104 021a 	add.w	r2, r4, #26
 80040dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040de:	9305      	str	r3, [sp, #20]
 80040e0:	eba3 0309 	sub.w	r3, r3, r9
 80040e4:	455b      	cmp	r3, fp
 80040e6:	dc33      	bgt.n	8004150 <_printf_float+0x384>
 80040e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040ec:	429a      	cmp	r2, r3
 80040ee:	db3b      	blt.n	8004168 <_printf_float+0x39c>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	07da      	lsls	r2, r3, #31
 80040f4:	d438      	bmi.n	8004168 <_printf_float+0x39c>
 80040f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040f8:	9a05      	ldr	r2, [sp, #20]
 80040fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040fc:	1a9a      	subs	r2, r3, r2
 80040fe:	eba3 0901 	sub.w	r9, r3, r1
 8004102:	4591      	cmp	r9, r2
 8004104:	bfa8      	it	ge
 8004106:	4691      	movge	r9, r2
 8004108:	f1b9 0f00 	cmp.w	r9, #0
 800410c:	dc35      	bgt.n	800417a <_printf_float+0x3ae>
 800410e:	f04f 0800 	mov.w	r8, #0
 8004112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004116:	f104 0a1a 	add.w	sl, r4, #26
 800411a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	eba3 0309 	sub.w	r3, r3, r9
 8004124:	4543      	cmp	r3, r8
 8004126:	f77f af79 	ble.w	800401c <_printf_float+0x250>
 800412a:	2301      	movs	r3, #1
 800412c:	4652      	mov	r2, sl
 800412e:	4631      	mov	r1, r6
 8004130:	4628      	mov	r0, r5
 8004132:	47b8      	blx	r7
 8004134:	3001      	adds	r0, #1
 8004136:	f43f aeaa 	beq.w	8003e8e <_printf_float+0xc2>
 800413a:	f108 0801 	add.w	r8, r8, #1
 800413e:	e7ec      	b.n	800411a <_printf_float+0x34e>
 8004140:	4613      	mov	r3, r2
 8004142:	4631      	mov	r1, r6
 8004144:	4642      	mov	r2, r8
 8004146:	4628      	mov	r0, r5
 8004148:	47b8      	blx	r7
 800414a:	3001      	adds	r0, #1
 800414c:	d1c0      	bne.n	80040d0 <_printf_float+0x304>
 800414e:	e69e      	b.n	8003e8e <_printf_float+0xc2>
 8004150:	2301      	movs	r3, #1
 8004152:	4631      	mov	r1, r6
 8004154:	4628      	mov	r0, r5
 8004156:	9205      	str	r2, [sp, #20]
 8004158:	47b8      	blx	r7
 800415a:	3001      	adds	r0, #1
 800415c:	f43f ae97 	beq.w	8003e8e <_printf_float+0xc2>
 8004160:	9a05      	ldr	r2, [sp, #20]
 8004162:	f10b 0b01 	add.w	fp, fp, #1
 8004166:	e7b9      	b.n	80040dc <_printf_float+0x310>
 8004168:	ee18 3a10 	vmov	r3, s16
 800416c:	4652      	mov	r2, sl
 800416e:	4631      	mov	r1, r6
 8004170:	4628      	mov	r0, r5
 8004172:	47b8      	blx	r7
 8004174:	3001      	adds	r0, #1
 8004176:	d1be      	bne.n	80040f6 <_printf_float+0x32a>
 8004178:	e689      	b.n	8003e8e <_printf_float+0xc2>
 800417a:	9a05      	ldr	r2, [sp, #20]
 800417c:	464b      	mov	r3, r9
 800417e:	4442      	add	r2, r8
 8004180:	4631      	mov	r1, r6
 8004182:	4628      	mov	r0, r5
 8004184:	47b8      	blx	r7
 8004186:	3001      	adds	r0, #1
 8004188:	d1c1      	bne.n	800410e <_printf_float+0x342>
 800418a:	e680      	b.n	8003e8e <_printf_float+0xc2>
 800418c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800418e:	2a01      	cmp	r2, #1
 8004190:	dc01      	bgt.n	8004196 <_printf_float+0x3ca>
 8004192:	07db      	lsls	r3, r3, #31
 8004194:	d538      	bpl.n	8004208 <_printf_float+0x43c>
 8004196:	2301      	movs	r3, #1
 8004198:	4642      	mov	r2, r8
 800419a:	4631      	mov	r1, r6
 800419c:	4628      	mov	r0, r5
 800419e:	47b8      	blx	r7
 80041a0:	3001      	adds	r0, #1
 80041a2:	f43f ae74 	beq.w	8003e8e <_printf_float+0xc2>
 80041a6:	ee18 3a10 	vmov	r3, s16
 80041aa:	4652      	mov	r2, sl
 80041ac:	4631      	mov	r1, r6
 80041ae:	4628      	mov	r0, r5
 80041b0:	47b8      	blx	r7
 80041b2:	3001      	adds	r0, #1
 80041b4:	f43f ae6b 	beq.w	8003e8e <_printf_float+0xc2>
 80041b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041bc:	2200      	movs	r2, #0
 80041be:	2300      	movs	r3, #0
 80041c0:	f7fc fc8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80041c4:	b9d8      	cbnz	r0, 80041fe <_printf_float+0x432>
 80041c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041c8:	f108 0201 	add.w	r2, r8, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	4631      	mov	r1, r6
 80041d0:	4628      	mov	r0, r5
 80041d2:	47b8      	blx	r7
 80041d4:	3001      	adds	r0, #1
 80041d6:	d10e      	bne.n	80041f6 <_printf_float+0x42a>
 80041d8:	e659      	b.n	8003e8e <_printf_float+0xc2>
 80041da:	2301      	movs	r3, #1
 80041dc:	4652      	mov	r2, sl
 80041de:	4631      	mov	r1, r6
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b8      	blx	r7
 80041e4:	3001      	adds	r0, #1
 80041e6:	f43f ae52 	beq.w	8003e8e <_printf_float+0xc2>
 80041ea:	f108 0801 	add.w	r8, r8, #1
 80041ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041f0:	3b01      	subs	r3, #1
 80041f2:	4543      	cmp	r3, r8
 80041f4:	dcf1      	bgt.n	80041da <_printf_float+0x40e>
 80041f6:	464b      	mov	r3, r9
 80041f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041fc:	e6dc      	b.n	8003fb8 <_printf_float+0x1ec>
 80041fe:	f04f 0800 	mov.w	r8, #0
 8004202:	f104 0a1a 	add.w	sl, r4, #26
 8004206:	e7f2      	b.n	80041ee <_printf_float+0x422>
 8004208:	2301      	movs	r3, #1
 800420a:	4642      	mov	r2, r8
 800420c:	e7df      	b.n	80041ce <_printf_float+0x402>
 800420e:	2301      	movs	r3, #1
 8004210:	464a      	mov	r2, r9
 8004212:	4631      	mov	r1, r6
 8004214:	4628      	mov	r0, r5
 8004216:	47b8      	blx	r7
 8004218:	3001      	adds	r0, #1
 800421a:	f43f ae38 	beq.w	8003e8e <_printf_float+0xc2>
 800421e:	f108 0801 	add.w	r8, r8, #1
 8004222:	68e3      	ldr	r3, [r4, #12]
 8004224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004226:	1a5b      	subs	r3, r3, r1
 8004228:	4543      	cmp	r3, r8
 800422a:	dcf0      	bgt.n	800420e <_printf_float+0x442>
 800422c:	e6fa      	b.n	8004024 <_printf_float+0x258>
 800422e:	f04f 0800 	mov.w	r8, #0
 8004232:	f104 0919 	add.w	r9, r4, #25
 8004236:	e7f4      	b.n	8004222 <_printf_float+0x456>

08004238 <_printf_common>:
 8004238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800423c:	4616      	mov	r6, r2
 800423e:	4699      	mov	r9, r3
 8004240:	688a      	ldr	r2, [r1, #8]
 8004242:	690b      	ldr	r3, [r1, #16]
 8004244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004248:	4293      	cmp	r3, r2
 800424a:	bfb8      	it	lt
 800424c:	4613      	movlt	r3, r2
 800424e:	6033      	str	r3, [r6, #0]
 8004250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004254:	4607      	mov	r7, r0
 8004256:	460c      	mov	r4, r1
 8004258:	b10a      	cbz	r2, 800425e <_printf_common+0x26>
 800425a:	3301      	adds	r3, #1
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	0699      	lsls	r1, r3, #26
 8004262:	bf42      	ittt	mi
 8004264:	6833      	ldrmi	r3, [r6, #0]
 8004266:	3302      	addmi	r3, #2
 8004268:	6033      	strmi	r3, [r6, #0]
 800426a:	6825      	ldr	r5, [r4, #0]
 800426c:	f015 0506 	ands.w	r5, r5, #6
 8004270:	d106      	bne.n	8004280 <_printf_common+0x48>
 8004272:	f104 0a19 	add.w	sl, r4, #25
 8004276:	68e3      	ldr	r3, [r4, #12]
 8004278:	6832      	ldr	r2, [r6, #0]
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	42ab      	cmp	r3, r5
 800427e:	dc26      	bgt.n	80042ce <_printf_common+0x96>
 8004280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004284:	1e13      	subs	r3, r2, #0
 8004286:	6822      	ldr	r2, [r4, #0]
 8004288:	bf18      	it	ne
 800428a:	2301      	movne	r3, #1
 800428c:	0692      	lsls	r2, r2, #26
 800428e:	d42b      	bmi.n	80042e8 <_printf_common+0xb0>
 8004290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004294:	4649      	mov	r1, r9
 8004296:	4638      	mov	r0, r7
 8004298:	47c0      	blx	r8
 800429a:	3001      	adds	r0, #1
 800429c:	d01e      	beq.n	80042dc <_printf_common+0xa4>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	68e5      	ldr	r5, [r4, #12]
 80042a2:	6832      	ldr	r2, [r6, #0]
 80042a4:	f003 0306 	and.w	r3, r3, #6
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	bf08      	it	eq
 80042ac:	1aad      	subeq	r5, r5, r2
 80042ae:	68a3      	ldr	r3, [r4, #8]
 80042b0:	6922      	ldr	r2, [r4, #16]
 80042b2:	bf0c      	ite	eq
 80042b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042b8:	2500      	movne	r5, #0
 80042ba:	4293      	cmp	r3, r2
 80042bc:	bfc4      	itt	gt
 80042be:	1a9b      	subgt	r3, r3, r2
 80042c0:	18ed      	addgt	r5, r5, r3
 80042c2:	2600      	movs	r6, #0
 80042c4:	341a      	adds	r4, #26
 80042c6:	42b5      	cmp	r5, r6
 80042c8:	d11a      	bne.n	8004300 <_printf_common+0xc8>
 80042ca:	2000      	movs	r0, #0
 80042cc:	e008      	b.n	80042e0 <_printf_common+0xa8>
 80042ce:	2301      	movs	r3, #1
 80042d0:	4652      	mov	r2, sl
 80042d2:	4649      	mov	r1, r9
 80042d4:	4638      	mov	r0, r7
 80042d6:	47c0      	blx	r8
 80042d8:	3001      	adds	r0, #1
 80042da:	d103      	bne.n	80042e4 <_printf_common+0xac>
 80042dc:	f04f 30ff 	mov.w	r0, #4294967295
 80042e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e4:	3501      	adds	r5, #1
 80042e6:	e7c6      	b.n	8004276 <_printf_common+0x3e>
 80042e8:	18e1      	adds	r1, r4, r3
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	2030      	movs	r0, #48	; 0x30
 80042ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042f2:	4422      	add	r2, r4
 80042f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042fc:	3302      	adds	r3, #2
 80042fe:	e7c7      	b.n	8004290 <_printf_common+0x58>
 8004300:	2301      	movs	r3, #1
 8004302:	4622      	mov	r2, r4
 8004304:	4649      	mov	r1, r9
 8004306:	4638      	mov	r0, r7
 8004308:	47c0      	blx	r8
 800430a:	3001      	adds	r0, #1
 800430c:	d0e6      	beq.n	80042dc <_printf_common+0xa4>
 800430e:	3601      	adds	r6, #1
 8004310:	e7d9      	b.n	80042c6 <_printf_common+0x8e>
	...

08004314 <_printf_i>:
 8004314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004318:	7e0f      	ldrb	r7, [r1, #24]
 800431a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800431c:	2f78      	cmp	r7, #120	; 0x78
 800431e:	4691      	mov	r9, r2
 8004320:	4680      	mov	r8, r0
 8004322:	460c      	mov	r4, r1
 8004324:	469a      	mov	sl, r3
 8004326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800432a:	d807      	bhi.n	800433c <_printf_i+0x28>
 800432c:	2f62      	cmp	r7, #98	; 0x62
 800432e:	d80a      	bhi.n	8004346 <_printf_i+0x32>
 8004330:	2f00      	cmp	r7, #0
 8004332:	f000 80d8 	beq.w	80044e6 <_printf_i+0x1d2>
 8004336:	2f58      	cmp	r7, #88	; 0x58
 8004338:	f000 80a3 	beq.w	8004482 <_printf_i+0x16e>
 800433c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004344:	e03a      	b.n	80043bc <_printf_i+0xa8>
 8004346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800434a:	2b15      	cmp	r3, #21
 800434c:	d8f6      	bhi.n	800433c <_printf_i+0x28>
 800434e:	a101      	add	r1, pc, #4	; (adr r1, 8004354 <_printf_i+0x40>)
 8004350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004354:	080043ad 	.word	0x080043ad
 8004358:	080043c1 	.word	0x080043c1
 800435c:	0800433d 	.word	0x0800433d
 8004360:	0800433d 	.word	0x0800433d
 8004364:	0800433d 	.word	0x0800433d
 8004368:	0800433d 	.word	0x0800433d
 800436c:	080043c1 	.word	0x080043c1
 8004370:	0800433d 	.word	0x0800433d
 8004374:	0800433d 	.word	0x0800433d
 8004378:	0800433d 	.word	0x0800433d
 800437c:	0800433d 	.word	0x0800433d
 8004380:	080044cd 	.word	0x080044cd
 8004384:	080043f1 	.word	0x080043f1
 8004388:	080044af 	.word	0x080044af
 800438c:	0800433d 	.word	0x0800433d
 8004390:	0800433d 	.word	0x0800433d
 8004394:	080044ef 	.word	0x080044ef
 8004398:	0800433d 	.word	0x0800433d
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	0800433d 	.word	0x0800433d
 80043a4:	0800433d 	.word	0x0800433d
 80043a8:	080044b7 	.word	0x080044b7
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	1d1a      	adds	r2, r3, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	602a      	str	r2, [r5, #0]
 80043b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043bc:	2301      	movs	r3, #1
 80043be:	e0a3      	b.n	8004508 <_printf_i+0x1f4>
 80043c0:	6820      	ldr	r0, [r4, #0]
 80043c2:	6829      	ldr	r1, [r5, #0]
 80043c4:	0606      	lsls	r6, r0, #24
 80043c6:	f101 0304 	add.w	r3, r1, #4
 80043ca:	d50a      	bpl.n	80043e2 <_printf_i+0xce>
 80043cc:	680e      	ldr	r6, [r1, #0]
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	2e00      	cmp	r6, #0
 80043d2:	da03      	bge.n	80043dc <_printf_i+0xc8>
 80043d4:	232d      	movs	r3, #45	; 0x2d
 80043d6:	4276      	negs	r6, r6
 80043d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043dc:	485e      	ldr	r0, [pc, #376]	; (8004558 <_printf_i+0x244>)
 80043de:	230a      	movs	r3, #10
 80043e0:	e019      	b.n	8004416 <_printf_i+0x102>
 80043e2:	680e      	ldr	r6, [r1, #0]
 80043e4:	602b      	str	r3, [r5, #0]
 80043e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043ea:	bf18      	it	ne
 80043ec:	b236      	sxthne	r6, r6
 80043ee:	e7ef      	b.n	80043d0 <_printf_i+0xbc>
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	6820      	ldr	r0, [r4, #0]
 80043f4:	1d19      	adds	r1, r3, #4
 80043f6:	6029      	str	r1, [r5, #0]
 80043f8:	0601      	lsls	r1, r0, #24
 80043fa:	d501      	bpl.n	8004400 <_printf_i+0xec>
 80043fc:	681e      	ldr	r6, [r3, #0]
 80043fe:	e002      	b.n	8004406 <_printf_i+0xf2>
 8004400:	0646      	lsls	r6, r0, #25
 8004402:	d5fb      	bpl.n	80043fc <_printf_i+0xe8>
 8004404:	881e      	ldrh	r6, [r3, #0]
 8004406:	4854      	ldr	r0, [pc, #336]	; (8004558 <_printf_i+0x244>)
 8004408:	2f6f      	cmp	r7, #111	; 0x6f
 800440a:	bf0c      	ite	eq
 800440c:	2308      	moveq	r3, #8
 800440e:	230a      	movne	r3, #10
 8004410:	2100      	movs	r1, #0
 8004412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004416:	6865      	ldr	r5, [r4, #4]
 8004418:	60a5      	str	r5, [r4, #8]
 800441a:	2d00      	cmp	r5, #0
 800441c:	bfa2      	ittt	ge
 800441e:	6821      	ldrge	r1, [r4, #0]
 8004420:	f021 0104 	bicge.w	r1, r1, #4
 8004424:	6021      	strge	r1, [r4, #0]
 8004426:	b90e      	cbnz	r6, 800442c <_printf_i+0x118>
 8004428:	2d00      	cmp	r5, #0
 800442a:	d04d      	beq.n	80044c8 <_printf_i+0x1b4>
 800442c:	4615      	mov	r5, r2
 800442e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004432:	fb03 6711 	mls	r7, r3, r1, r6
 8004436:	5dc7      	ldrb	r7, [r0, r7]
 8004438:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800443c:	4637      	mov	r7, r6
 800443e:	42bb      	cmp	r3, r7
 8004440:	460e      	mov	r6, r1
 8004442:	d9f4      	bls.n	800442e <_printf_i+0x11a>
 8004444:	2b08      	cmp	r3, #8
 8004446:	d10b      	bne.n	8004460 <_printf_i+0x14c>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	07de      	lsls	r6, r3, #31
 800444c:	d508      	bpl.n	8004460 <_printf_i+0x14c>
 800444e:	6923      	ldr	r3, [r4, #16]
 8004450:	6861      	ldr	r1, [r4, #4]
 8004452:	4299      	cmp	r1, r3
 8004454:	bfde      	ittt	le
 8004456:	2330      	movle	r3, #48	; 0x30
 8004458:	f805 3c01 	strble.w	r3, [r5, #-1]
 800445c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004460:	1b52      	subs	r2, r2, r5
 8004462:	6122      	str	r2, [r4, #16]
 8004464:	f8cd a000 	str.w	sl, [sp]
 8004468:	464b      	mov	r3, r9
 800446a:	aa03      	add	r2, sp, #12
 800446c:	4621      	mov	r1, r4
 800446e:	4640      	mov	r0, r8
 8004470:	f7ff fee2 	bl	8004238 <_printf_common>
 8004474:	3001      	adds	r0, #1
 8004476:	d14c      	bne.n	8004512 <_printf_i+0x1fe>
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	b004      	add	sp, #16
 800447e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004482:	4835      	ldr	r0, [pc, #212]	; (8004558 <_printf_i+0x244>)
 8004484:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004488:	6829      	ldr	r1, [r5, #0]
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004490:	6029      	str	r1, [r5, #0]
 8004492:	061d      	lsls	r5, r3, #24
 8004494:	d514      	bpl.n	80044c0 <_printf_i+0x1ac>
 8004496:	07df      	lsls	r7, r3, #31
 8004498:	bf44      	itt	mi
 800449a:	f043 0320 	orrmi.w	r3, r3, #32
 800449e:	6023      	strmi	r3, [r4, #0]
 80044a0:	b91e      	cbnz	r6, 80044aa <_printf_i+0x196>
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	f023 0320 	bic.w	r3, r3, #32
 80044a8:	6023      	str	r3, [r4, #0]
 80044aa:	2310      	movs	r3, #16
 80044ac:	e7b0      	b.n	8004410 <_printf_i+0xfc>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	f043 0320 	orr.w	r3, r3, #32
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	2378      	movs	r3, #120	; 0x78
 80044b8:	4828      	ldr	r0, [pc, #160]	; (800455c <_printf_i+0x248>)
 80044ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044be:	e7e3      	b.n	8004488 <_printf_i+0x174>
 80044c0:	0659      	lsls	r1, r3, #25
 80044c2:	bf48      	it	mi
 80044c4:	b2b6      	uxthmi	r6, r6
 80044c6:	e7e6      	b.n	8004496 <_printf_i+0x182>
 80044c8:	4615      	mov	r5, r2
 80044ca:	e7bb      	b.n	8004444 <_printf_i+0x130>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	6826      	ldr	r6, [r4, #0]
 80044d0:	6961      	ldr	r1, [r4, #20]
 80044d2:	1d18      	adds	r0, r3, #4
 80044d4:	6028      	str	r0, [r5, #0]
 80044d6:	0635      	lsls	r5, r6, #24
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	d501      	bpl.n	80044e0 <_printf_i+0x1cc>
 80044dc:	6019      	str	r1, [r3, #0]
 80044de:	e002      	b.n	80044e6 <_printf_i+0x1d2>
 80044e0:	0670      	lsls	r0, r6, #25
 80044e2:	d5fb      	bpl.n	80044dc <_printf_i+0x1c8>
 80044e4:	8019      	strh	r1, [r3, #0]
 80044e6:	2300      	movs	r3, #0
 80044e8:	6123      	str	r3, [r4, #16]
 80044ea:	4615      	mov	r5, r2
 80044ec:	e7ba      	b.n	8004464 <_printf_i+0x150>
 80044ee:	682b      	ldr	r3, [r5, #0]
 80044f0:	1d1a      	adds	r2, r3, #4
 80044f2:	602a      	str	r2, [r5, #0]
 80044f4:	681d      	ldr	r5, [r3, #0]
 80044f6:	6862      	ldr	r2, [r4, #4]
 80044f8:	2100      	movs	r1, #0
 80044fa:	4628      	mov	r0, r5
 80044fc:	f7fb fe78 	bl	80001f0 <memchr>
 8004500:	b108      	cbz	r0, 8004506 <_printf_i+0x1f2>
 8004502:	1b40      	subs	r0, r0, r5
 8004504:	6060      	str	r0, [r4, #4]
 8004506:	6863      	ldr	r3, [r4, #4]
 8004508:	6123      	str	r3, [r4, #16]
 800450a:	2300      	movs	r3, #0
 800450c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004510:	e7a8      	b.n	8004464 <_printf_i+0x150>
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	462a      	mov	r2, r5
 8004516:	4649      	mov	r1, r9
 8004518:	4640      	mov	r0, r8
 800451a:	47d0      	blx	sl
 800451c:	3001      	adds	r0, #1
 800451e:	d0ab      	beq.n	8004478 <_printf_i+0x164>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	079b      	lsls	r3, r3, #30
 8004524:	d413      	bmi.n	800454e <_printf_i+0x23a>
 8004526:	68e0      	ldr	r0, [r4, #12]
 8004528:	9b03      	ldr	r3, [sp, #12]
 800452a:	4298      	cmp	r0, r3
 800452c:	bfb8      	it	lt
 800452e:	4618      	movlt	r0, r3
 8004530:	e7a4      	b.n	800447c <_printf_i+0x168>
 8004532:	2301      	movs	r3, #1
 8004534:	4632      	mov	r2, r6
 8004536:	4649      	mov	r1, r9
 8004538:	4640      	mov	r0, r8
 800453a:	47d0      	blx	sl
 800453c:	3001      	adds	r0, #1
 800453e:	d09b      	beq.n	8004478 <_printf_i+0x164>
 8004540:	3501      	adds	r5, #1
 8004542:	68e3      	ldr	r3, [r4, #12]
 8004544:	9903      	ldr	r1, [sp, #12]
 8004546:	1a5b      	subs	r3, r3, r1
 8004548:	42ab      	cmp	r3, r5
 800454a:	dcf2      	bgt.n	8004532 <_printf_i+0x21e>
 800454c:	e7eb      	b.n	8004526 <_printf_i+0x212>
 800454e:	2500      	movs	r5, #0
 8004550:	f104 0619 	add.w	r6, r4, #25
 8004554:	e7f5      	b.n	8004542 <_printf_i+0x22e>
 8004556:	bf00      	nop
 8004558:	0800710e 	.word	0x0800710e
 800455c:	0800711f 	.word	0x0800711f

08004560 <_vsniprintf_r>:
 8004560:	b530      	push	{r4, r5, lr}
 8004562:	4614      	mov	r4, r2
 8004564:	2c00      	cmp	r4, #0
 8004566:	b09b      	sub	sp, #108	; 0x6c
 8004568:	4605      	mov	r5, r0
 800456a:	461a      	mov	r2, r3
 800456c:	da05      	bge.n	800457a <_vsniprintf_r+0x1a>
 800456e:	238b      	movs	r3, #139	; 0x8b
 8004570:	6003      	str	r3, [r0, #0]
 8004572:	f04f 30ff 	mov.w	r0, #4294967295
 8004576:	b01b      	add	sp, #108	; 0x6c
 8004578:	bd30      	pop	{r4, r5, pc}
 800457a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800457e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004582:	bf14      	ite	ne
 8004584:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004588:	4623      	moveq	r3, r4
 800458a:	9302      	str	r3, [sp, #8]
 800458c:	9305      	str	r3, [sp, #20]
 800458e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004592:	9100      	str	r1, [sp, #0]
 8004594:	9104      	str	r1, [sp, #16]
 8004596:	f8ad 300e 	strh.w	r3, [sp, #14]
 800459a:	4669      	mov	r1, sp
 800459c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800459e:	f001 fba5 	bl	8005cec <_svfiprintf_r>
 80045a2:	1c43      	adds	r3, r0, #1
 80045a4:	bfbc      	itt	lt
 80045a6:	238b      	movlt	r3, #139	; 0x8b
 80045a8:	602b      	strlt	r3, [r5, #0]
 80045aa:	2c00      	cmp	r4, #0
 80045ac:	d0e3      	beq.n	8004576 <_vsniprintf_r+0x16>
 80045ae:	9b00      	ldr	r3, [sp, #0]
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e7df      	b.n	8004576 <_vsniprintf_r+0x16>
	...

080045b8 <vsniprintf>:
 80045b8:	b507      	push	{r0, r1, r2, lr}
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	460a      	mov	r2, r1
 80045c0:	4601      	mov	r1, r0
 80045c2:	4803      	ldr	r0, [pc, #12]	; (80045d0 <vsniprintf+0x18>)
 80045c4:	6800      	ldr	r0, [r0, #0]
 80045c6:	f7ff ffcb 	bl	8004560 <_vsniprintf_r>
 80045ca:	b003      	add	sp, #12
 80045cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80045d0:	2000004c 	.word	0x2000004c

080045d4 <_vsiprintf_r>:
 80045d4:	b500      	push	{lr}
 80045d6:	b09b      	sub	sp, #108	; 0x6c
 80045d8:	9100      	str	r1, [sp, #0]
 80045da:	9104      	str	r1, [sp, #16]
 80045dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045e0:	9105      	str	r1, [sp, #20]
 80045e2:	9102      	str	r1, [sp, #8]
 80045e4:	4905      	ldr	r1, [pc, #20]	; (80045fc <_vsiprintf_r+0x28>)
 80045e6:	9103      	str	r1, [sp, #12]
 80045e8:	4669      	mov	r1, sp
 80045ea:	f001 fb7f 	bl	8005cec <_svfiprintf_r>
 80045ee:	9b00      	ldr	r3, [sp, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	b01b      	add	sp, #108	; 0x6c
 80045f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80045fa:	bf00      	nop
 80045fc:	ffff0208 	.word	0xffff0208

08004600 <vsiprintf>:
 8004600:	4613      	mov	r3, r2
 8004602:	460a      	mov	r2, r1
 8004604:	4601      	mov	r1, r0
 8004606:	4802      	ldr	r0, [pc, #8]	; (8004610 <vsiprintf+0x10>)
 8004608:	6800      	ldr	r0, [r0, #0]
 800460a:	f7ff bfe3 	b.w	80045d4 <_vsiprintf_r>
 800460e:	bf00      	nop
 8004610:	2000004c 	.word	0x2000004c

08004614 <quorem>:
 8004614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004618:	6903      	ldr	r3, [r0, #16]
 800461a:	690c      	ldr	r4, [r1, #16]
 800461c:	42a3      	cmp	r3, r4
 800461e:	4607      	mov	r7, r0
 8004620:	f2c0 8081 	blt.w	8004726 <quorem+0x112>
 8004624:	3c01      	subs	r4, #1
 8004626:	f101 0814 	add.w	r8, r1, #20
 800462a:	f100 0514 	add.w	r5, r0, #20
 800462e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004638:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800463c:	3301      	adds	r3, #1
 800463e:	429a      	cmp	r2, r3
 8004640:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004644:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004648:	fbb2 f6f3 	udiv	r6, r2, r3
 800464c:	d331      	bcc.n	80046b2 <quorem+0x9e>
 800464e:	f04f 0e00 	mov.w	lr, #0
 8004652:	4640      	mov	r0, r8
 8004654:	46ac      	mov	ip, r5
 8004656:	46f2      	mov	sl, lr
 8004658:	f850 2b04 	ldr.w	r2, [r0], #4
 800465c:	b293      	uxth	r3, r2
 800465e:	fb06 e303 	mla	r3, r6, r3, lr
 8004662:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004666:	b29b      	uxth	r3, r3
 8004668:	ebaa 0303 	sub.w	r3, sl, r3
 800466c:	f8dc a000 	ldr.w	sl, [ip]
 8004670:	0c12      	lsrs	r2, r2, #16
 8004672:	fa13 f38a 	uxtah	r3, r3, sl
 8004676:	fb06 e202 	mla	r2, r6, r2, lr
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	9b00      	ldr	r3, [sp, #0]
 800467e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004682:	b292      	uxth	r2, r2
 8004684:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004688:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800468c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004690:	4581      	cmp	r9, r0
 8004692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004696:	f84c 3b04 	str.w	r3, [ip], #4
 800469a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800469e:	d2db      	bcs.n	8004658 <quorem+0x44>
 80046a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80046a4:	b92b      	cbnz	r3, 80046b2 <quorem+0x9e>
 80046a6:	9b01      	ldr	r3, [sp, #4]
 80046a8:	3b04      	subs	r3, #4
 80046aa:	429d      	cmp	r5, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	d32e      	bcc.n	800470e <quorem+0xfa>
 80046b0:	613c      	str	r4, [r7, #16]
 80046b2:	4638      	mov	r0, r7
 80046b4:	f001 f8c6 	bl	8005844 <__mcmp>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	db24      	blt.n	8004706 <quorem+0xf2>
 80046bc:	3601      	adds	r6, #1
 80046be:	4628      	mov	r0, r5
 80046c0:	f04f 0c00 	mov.w	ip, #0
 80046c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80046c8:	f8d0 e000 	ldr.w	lr, [r0]
 80046cc:	b293      	uxth	r3, r2
 80046ce:	ebac 0303 	sub.w	r3, ip, r3
 80046d2:	0c12      	lsrs	r2, r2, #16
 80046d4:	fa13 f38e 	uxtah	r3, r3, lr
 80046d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80046dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046e6:	45c1      	cmp	r9, r8
 80046e8:	f840 3b04 	str.w	r3, [r0], #4
 80046ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80046f0:	d2e8      	bcs.n	80046c4 <quorem+0xb0>
 80046f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046fa:	b922      	cbnz	r2, 8004706 <quorem+0xf2>
 80046fc:	3b04      	subs	r3, #4
 80046fe:	429d      	cmp	r5, r3
 8004700:	461a      	mov	r2, r3
 8004702:	d30a      	bcc.n	800471a <quorem+0x106>
 8004704:	613c      	str	r4, [r7, #16]
 8004706:	4630      	mov	r0, r6
 8004708:	b003      	add	sp, #12
 800470a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	3b04      	subs	r3, #4
 8004712:	2a00      	cmp	r2, #0
 8004714:	d1cc      	bne.n	80046b0 <quorem+0x9c>
 8004716:	3c01      	subs	r4, #1
 8004718:	e7c7      	b.n	80046aa <quorem+0x96>
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	3b04      	subs	r3, #4
 800471e:	2a00      	cmp	r2, #0
 8004720:	d1f0      	bne.n	8004704 <quorem+0xf0>
 8004722:	3c01      	subs	r4, #1
 8004724:	e7eb      	b.n	80046fe <quorem+0xea>
 8004726:	2000      	movs	r0, #0
 8004728:	e7ee      	b.n	8004708 <quorem+0xf4>
 800472a:	0000      	movs	r0, r0
 800472c:	0000      	movs	r0, r0
	...

08004730 <_dtoa_r>:
 8004730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004734:	ed2d 8b04 	vpush	{d8-d9}
 8004738:	ec57 6b10 	vmov	r6, r7, d0
 800473c:	b093      	sub	sp, #76	; 0x4c
 800473e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004740:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004744:	9106      	str	r1, [sp, #24]
 8004746:	ee10 aa10 	vmov	sl, s0
 800474a:	4604      	mov	r4, r0
 800474c:	9209      	str	r2, [sp, #36]	; 0x24
 800474e:	930c      	str	r3, [sp, #48]	; 0x30
 8004750:	46bb      	mov	fp, r7
 8004752:	b975      	cbnz	r5, 8004772 <_dtoa_r+0x42>
 8004754:	2010      	movs	r0, #16
 8004756:	f000 fddd 	bl	8005314 <malloc>
 800475a:	4602      	mov	r2, r0
 800475c:	6260      	str	r0, [r4, #36]	; 0x24
 800475e:	b920      	cbnz	r0, 800476a <_dtoa_r+0x3a>
 8004760:	4ba7      	ldr	r3, [pc, #668]	; (8004a00 <_dtoa_r+0x2d0>)
 8004762:	21ea      	movs	r1, #234	; 0xea
 8004764:	48a7      	ldr	r0, [pc, #668]	; (8004a04 <_dtoa_r+0x2d4>)
 8004766:	f001 fbd1 	bl	8005f0c <__assert_func>
 800476a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800476e:	6005      	str	r5, [r0, #0]
 8004770:	60c5      	str	r5, [r0, #12]
 8004772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	b151      	cbz	r1, 800478e <_dtoa_r+0x5e>
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	604a      	str	r2, [r1, #4]
 800477c:	2301      	movs	r3, #1
 800477e:	4093      	lsls	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
 8004782:	4620      	mov	r0, r4
 8004784:	f000 fe1c 	bl	80053c0 <_Bfree>
 8004788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	1e3b      	subs	r3, r7, #0
 8004790:	bfaa      	itet	ge
 8004792:	2300      	movge	r3, #0
 8004794:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004798:	f8c8 3000 	strge.w	r3, [r8]
 800479c:	4b9a      	ldr	r3, [pc, #616]	; (8004a08 <_dtoa_r+0x2d8>)
 800479e:	bfbc      	itt	lt
 80047a0:	2201      	movlt	r2, #1
 80047a2:	f8c8 2000 	strlt.w	r2, [r8]
 80047a6:	ea33 030b 	bics.w	r3, r3, fp
 80047aa:	d11b      	bne.n	80047e4 <_dtoa_r+0xb4>
 80047ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80047b8:	4333      	orrs	r3, r6
 80047ba:	f000 8592 	beq.w	80052e2 <_dtoa_r+0xbb2>
 80047be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047c0:	b963      	cbnz	r3, 80047dc <_dtoa_r+0xac>
 80047c2:	4b92      	ldr	r3, [pc, #584]	; (8004a0c <_dtoa_r+0x2dc>)
 80047c4:	e022      	b.n	800480c <_dtoa_r+0xdc>
 80047c6:	4b92      	ldr	r3, [pc, #584]	; (8004a10 <_dtoa_r+0x2e0>)
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	3308      	adds	r3, #8
 80047cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	9801      	ldr	r0, [sp, #4]
 80047d2:	b013      	add	sp, #76	; 0x4c
 80047d4:	ecbd 8b04 	vpop	{d8-d9}
 80047d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047dc:	4b8b      	ldr	r3, [pc, #556]	; (8004a0c <_dtoa_r+0x2dc>)
 80047de:	9301      	str	r3, [sp, #4]
 80047e0:	3303      	adds	r3, #3
 80047e2:	e7f3      	b.n	80047cc <_dtoa_r+0x9c>
 80047e4:	2200      	movs	r2, #0
 80047e6:	2300      	movs	r3, #0
 80047e8:	4650      	mov	r0, sl
 80047ea:	4659      	mov	r1, fp
 80047ec:	f7fc f974 	bl	8000ad8 <__aeabi_dcmpeq>
 80047f0:	ec4b ab19 	vmov	d9, sl, fp
 80047f4:	4680      	mov	r8, r0
 80047f6:	b158      	cbz	r0, 8004810 <_dtoa_r+0xe0>
 80047f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047fa:	2301      	movs	r3, #1
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 856b 	beq.w	80052dc <_dtoa_r+0xbac>
 8004806:	4883      	ldr	r0, [pc, #524]	; (8004a14 <_dtoa_r+0x2e4>)
 8004808:	6018      	str	r0, [r3, #0]
 800480a:	1e43      	subs	r3, r0, #1
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	e7df      	b.n	80047d0 <_dtoa_r+0xa0>
 8004810:	ec4b ab10 	vmov	d0, sl, fp
 8004814:	aa10      	add	r2, sp, #64	; 0x40
 8004816:	a911      	add	r1, sp, #68	; 0x44
 8004818:	4620      	mov	r0, r4
 800481a:	f001 f8b9 	bl	8005990 <__d2b>
 800481e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004822:	ee08 0a10 	vmov	s16, r0
 8004826:	2d00      	cmp	r5, #0
 8004828:	f000 8084 	beq.w	8004934 <_dtoa_r+0x204>
 800482c:	ee19 3a90 	vmov	r3, s19
 8004830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004834:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004838:	4656      	mov	r6, sl
 800483a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800483e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004842:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004846:	4b74      	ldr	r3, [pc, #464]	; (8004a18 <_dtoa_r+0x2e8>)
 8004848:	2200      	movs	r2, #0
 800484a:	4630      	mov	r0, r6
 800484c:	4639      	mov	r1, r7
 800484e:	f7fb fd23 	bl	8000298 <__aeabi_dsub>
 8004852:	a365      	add	r3, pc, #404	; (adr r3, 80049e8 <_dtoa_r+0x2b8>)
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f7fb fed6 	bl	8000608 <__aeabi_dmul>
 800485c:	a364      	add	r3, pc, #400	; (adr r3, 80049f0 <_dtoa_r+0x2c0>)
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	f7fb fd1b 	bl	800029c <__adddf3>
 8004866:	4606      	mov	r6, r0
 8004868:	4628      	mov	r0, r5
 800486a:	460f      	mov	r7, r1
 800486c:	f7fb fe62 	bl	8000534 <__aeabi_i2d>
 8004870:	a361      	add	r3, pc, #388	; (adr r3, 80049f8 <_dtoa_r+0x2c8>)
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f7fb fec7 	bl	8000608 <__aeabi_dmul>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4630      	mov	r0, r6
 8004880:	4639      	mov	r1, r7
 8004882:	f7fb fd0b 	bl	800029c <__adddf3>
 8004886:	4606      	mov	r6, r0
 8004888:	460f      	mov	r7, r1
 800488a:	f7fc f96d 	bl	8000b68 <__aeabi_d2iz>
 800488e:	2200      	movs	r2, #0
 8004890:	9000      	str	r0, [sp, #0]
 8004892:	2300      	movs	r3, #0
 8004894:	4630      	mov	r0, r6
 8004896:	4639      	mov	r1, r7
 8004898:	f7fc f928 	bl	8000aec <__aeabi_dcmplt>
 800489c:	b150      	cbz	r0, 80048b4 <_dtoa_r+0x184>
 800489e:	9800      	ldr	r0, [sp, #0]
 80048a0:	f7fb fe48 	bl	8000534 <__aeabi_i2d>
 80048a4:	4632      	mov	r2, r6
 80048a6:	463b      	mov	r3, r7
 80048a8:	f7fc f916 	bl	8000ad8 <__aeabi_dcmpeq>
 80048ac:	b910      	cbnz	r0, 80048b4 <_dtoa_r+0x184>
 80048ae:	9b00      	ldr	r3, [sp, #0]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	9b00      	ldr	r3, [sp, #0]
 80048b6:	2b16      	cmp	r3, #22
 80048b8:	d85a      	bhi.n	8004970 <_dtoa_r+0x240>
 80048ba:	9a00      	ldr	r2, [sp, #0]
 80048bc:	4b57      	ldr	r3, [pc, #348]	; (8004a1c <_dtoa_r+0x2ec>)
 80048be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	ec51 0b19 	vmov	r0, r1, d9
 80048ca:	f7fc f90f 	bl	8000aec <__aeabi_dcmplt>
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d050      	beq.n	8004974 <_dtoa_r+0x244>
 80048d2:	9b00      	ldr	r3, [sp, #0]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	2300      	movs	r3, #0
 80048da:	930b      	str	r3, [sp, #44]	; 0x2c
 80048dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80048de:	1b5d      	subs	r5, r3, r5
 80048e0:	1e6b      	subs	r3, r5, #1
 80048e2:	9305      	str	r3, [sp, #20]
 80048e4:	bf45      	ittet	mi
 80048e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80048ea:	9304      	strmi	r3, [sp, #16]
 80048ec:	2300      	movpl	r3, #0
 80048ee:	2300      	movmi	r3, #0
 80048f0:	bf4c      	ite	mi
 80048f2:	9305      	strmi	r3, [sp, #20]
 80048f4:	9304      	strpl	r3, [sp, #16]
 80048f6:	9b00      	ldr	r3, [sp, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	db3d      	blt.n	8004978 <_dtoa_r+0x248>
 80048fc:	9b05      	ldr	r3, [sp, #20]
 80048fe:	9a00      	ldr	r2, [sp, #0]
 8004900:	920a      	str	r2, [sp, #40]	; 0x28
 8004902:	4413      	add	r3, r2
 8004904:	9305      	str	r3, [sp, #20]
 8004906:	2300      	movs	r3, #0
 8004908:	9307      	str	r3, [sp, #28]
 800490a:	9b06      	ldr	r3, [sp, #24]
 800490c:	2b09      	cmp	r3, #9
 800490e:	f200 8089 	bhi.w	8004a24 <_dtoa_r+0x2f4>
 8004912:	2b05      	cmp	r3, #5
 8004914:	bfc4      	itt	gt
 8004916:	3b04      	subgt	r3, #4
 8004918:	9306      	strgt	r3, [sp, #24]
 800491a:	9b06      	ldr	r3, [sp, #24]
 800491c:	f1a3 0302 	sub.w	r3, r3, #2
 8004920:	bfcc      	ite	gt
 8004922:	2500      	movgt	r5, #0
 8004924:	2501      	movle	r5, #1
 8004926:	2b03      	cmp	r3, #3
 8004928:	f200 8087 	bhi.w	8004a3a <_dtoa_r+0x30a>
 800492c:	e8df f003 	tbb	[pc, r3]
 8004930:	59383a2d 	.word	0x59383a2d
 8004934:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004938:	441d      	add	r5, r3
 800493a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800493e:	2b20      	cmp	r3, #32
 8004940:	bfc1      	itttt	gt
 8004942:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004946:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800494a:	fa0b f303 	lslgt.w	r3, fp, r3
 800494e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004952:	bfda      	itte	le
 8004954:	f1c3 0320 	rsble	r3, r3, #32
 8004958:	fa06 f003 	lslle.w	r0, r6, r3
 800495c:	4318      	orrgt	r0, r3
 800495e:	f7fb fdd9 	bl	8000514 <__aeabi_ui2d>
 8004962:	2301      	movs	r3, #1
 8004964:	4606      	mov	r6, r0
 8004966:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800496a:	3d01      	subs	r5, #1
 800496c:	930e      	str	r3, [sp, #56]	; 0x38
 800496e:	e76a      	b.n	8004846 <_dtoa_r+0x116>
 8004970:	2301      	movs	r3, #1
 8004972:	e7b2      	b.n	80048da <_dtoa_r+0x1aa>
 8004974:	900b      	str	r0, [sp, #44]	; 0x2c
 8004976:	e7b1      	b.n	80048dc <_dtoa_r+0x1ac>
 8004978:	9b04      	ldr	r3, [sp, #16]
 800497a:	9a00      	ldr	r2, [sp, #0]
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	9304      	str	r3, [sp, #16]
 8004980:	4253      	negs	r3, r2
 8004982:	9307      	str	r3, [sp, #28]
 8004984:	2300      	movs	r3, #0
 8004986:	930a      	str	r3, [sp, #40]	; 0x28
 8004988:	e7bf      	b.n	800490a <_dtoa_r+0x1da>
 800498a:	2300      	movs	r3, #0
 800498c:	9308      	str	r3, [sp, #32]
 800498e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004990:	2b00      	cmp	r3, #0
 8004992:	dc55      	bgt.n	8004a40 <_dtoa_r+0x310>
 8004994:	2301      	movs	r3, #1
 8004996:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800499a:	461a      	mov	r2, r3
 800499c:	9209      	str	r2, [sp, #36]	; 0x24
 800499e:	e00c      	b.n	80049ba <_dtoa_r+0x28a>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e7f3      	b.n	800498c <_dtoa_r+0x25c>
 80049a4:	2300      	movs	r3, #0
 80049a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049a8:	9308      	str	r3, [sp, #32]
 80049aa:	9b00      	ldr	r3, [sp, #0]
 80049ac:	4413      	add	r3, r2
 80049ae:	9302      	str	r3, [sp, #8]
 80049b0:	3301      	adds	r3, #1
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	9303      	str	r3, [sp, #12]
 80049b6:	bfb8      	it	lt
 80049b8:	2301      	movlt	r3, #1
 80049ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80049bc:	2200      	movs	r2, #0
 80049be:	6042      	str	r2, [r0, #4]
 80049c0:	2204      	movs	r2, #4
 80049c2:	f102 0614 	add.w	r6, r2, #20
 80049c6:	429e      	cmp	r6, r3
 80049c8:	6841      	ldr	r1, [r0, #4]
 80049ca:	d93d      	bls.n	8004a48 <_dtoa_r+0x318>
 80049cc:	4620      	mov	r0, r4
 80049ce:	f000 fcb7 	bl	8005340 <_Balloc>
 80049d2:	9001      	str	r0, [sp, #4]
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d13b      	bne.n	8004a50 <_dtoa_r+0x320>
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <_dtoa_r+0x2f0>)
 80049da:	4602      	mov	r2, r0
 80049dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80049e0:	e6c0      	b.n	8004764 <_dtoa_r+0x34>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e7df      	b.n	80049a6 <_dtoa_r+0x276>
 80049e6:	bf00      	nop
 80049e8:	636f4361 	.word	0x636f4361
 80049ec:	3fd287a7 	.word	0x3fd287a7
 80049f0:	8b60c8b3 	.word	0x8b60c8b3
 80049f4:	3fc68a28 	.word	0x3fc68a28
 80049f8:	509f79fb 	.word	0x509f79fb
 80049fc:	3fd34413 	.word	0x3fd34413
 8004a00:	0800713d 	.word	0x0800713d
 8004a04:	08007154 	.word	0x08007154
 8004a08:	7ff00000 	.word	0x7ff00000
 8004a0c:	08007139 	.word	0x08007139
 8004a10:	08007130 	.word	0x08007130
 8004a14:	0800710d 	.word	0x0800710d
 8004a18:	3ff80000 	.word	0x3ff80000
 8004a1c:	08007248 	.word	0x08007248
 8004a20:	080071af 	.word	0x080071af
 8004a24:	2501      	movs	r5, #1
 8004a26:	2300      	movs	r3, #0
 8004a28:	9306      	str	r3, [sp, #24]
 8004a2a:	9508      	str	r5, [sp, #32]
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004a34:	2200      	movs	r2, #0
 8004a36:	2312      	movs	r3, #18
 8004a38:	e7b0      	b.n	800499c <_dtoa_r+0x26c>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	9308      	str	r3, [sp, #32]
 8004a3e:	e7f5      	b.n	8004a2c <_dtoa_r+0x2fc>
 8004a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004a46:	e7b8      	b.n	80049ba <_dtoa_r+0x28a>
 8004a48:	3101      	adds	r1, #1
 8004a4a:	6041      	str	r1, [r0, #4]
 8004a4c:	0052      	lsls	r2, r2, #1
 8004a4e:	e7b8      	b.n	80049c2 <_dtoa_r+0x292>
 8004a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a52:	9a01      	ldr	r2, [sp, #4]
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	9b03      	ldr	r3, [sp, #12]
 8004a58:	2b0e      	cmp	r3, #14
 8004a5a:	f200 809d 	bhi.w	8004b98 <_dtoa_r+0x468>
 8004a5e:	2d00      	cmp	r5, #0
 8004a60:	f000 809a 	beq.w	8004b98 <_dtoa_r+0x468>
 8004a64:	9b00      	ldr	r3, [sp, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	dd32      	ble.n	8004ad0 <_dtoa_r+0x3a0>
 8004a6a:	4ab7      	ldr	r2, [pc, #732]	; (8004d48 <_dtoa_r+0x618>)
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004a74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a78:	9b00      	ldr	r3, [sp, #0]
 8004a7a:	05d8      	lsls	r0, r3, #23
 8004a7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004a80:	d516      	bpl.n	8004ab0 <_dtoa_r+0x380>
 8004a82:	4bb2      	ldr	r3, [pc, #712]	; (8004d4c <_dtoa_r+0x61c>)
 8004a84:	ec51 0b19 	vmov	r0, r1, d9
 8004a88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a8c:	f7fb fee6 	bl	800085c <__aeabi_ddiv>
 8004a90:	f007 070f 	and.w	r7, r7, #15
 8004a94:	4682      	mov	sl, r0
 8004a96:	468b      	mov	fp, r1
 8004a98:	2503      	movs	r5, #3
 8004a9a:	4eac      	ldr	r6, [pc, #688]	; (8004d4c <_dtoa_r+0x61c>)
 8004a9c:	b957      	cbnz	r7, 8004ab4 <_dtoa_r+0x384>
 8004a9e:	4642      	mov	r2, r8
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	4650      	mov	r0, sl
 8004aa4:	4659      	mov	r1, fp
 8004aa6:	f7fb fed9 	bl	800085c <__aeabi_ddiv>
 8004aaa:	4682      	mov	sl, r0
 8004aac:	468b      	mov	fp, r1
 8004aae:	e028      	b.n	8004b02 <_dtoa_r+0x3d2>
 8004ab0:	2502      	movs	r5, #2
 8004ab2:	e7f2      	b.n	8004a9a <_dtoa_r+0x36a>
 8004ab4:	07f9      	lsls	r1, r7, #31
 8004ab6:	d508      	bpl.n	8004aca <_dtoa_r+0x39a>
 8004ab8:	4640      	mov	r0, r8
 8004aba:	4649      	mov	r1, r9
 8004abc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ac0:	f7fb fda2 	bl	8000608 <__aeabi_dmul>
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	4680      	mov	r8, r0
 8004ac8:	4689      	mov	r9, r1
 8004aca:	107f      	asrs	r7, r7, #1
 8004acc:	3608      	adds	r6, #8
 8004ace:	e7e5      	b.n	8004a9c <_dtoa_r+0x36c>
 8004ad0:	f000 809b 	beq.w	8004c0a <_dtoa_r+0x4da>
 8004ad4:	9b00      	ldr	r3, [sp, #0]
 8004ad6:	4f9d      	ldr	r7, [pc, #628]	; (8004d4c <_dtoa_r+0x61c>)
 8004ad8:	425e      	negs	r6, r3
 8004ada:	4b9b      	ldr	r3, [pc, #620]	; (8004d48 <_dtoa_r+0x618>)
 8004adc:	f006 020f 	and.w	r2, r6, #15
 8004ae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	ec51 0b19 	vmov	r0, r1, d9
 8004aec:	f7fb fd8c 	bl	8000608 <__aeabi_dmul>
 8004af0:	1136      	asrs	r6, r6, #4
 8004af2:	4682      	mov	sl, r0
 8004af4:	468b      	mov	fp, r1
 8004af6:	2300      	movs	r3, #0
 8004af8:	2502      	movs	r5, #2
 8004afa:	2e00      	cmp	r6, #0
 8004afc:	d17a      	bne.n	8004bf4 <_dtoa_r+0x4c4>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1d3      	bne.n	8004aaa <_dtoa_r+0x37a>
 8004b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8082 	beq.w	8004c0e <_dtoa_r+0x4de>
 8004b0a:	4b91      	ldr	r3, [pc, #580]	; (8004d50 <_dtoa_r+0x620>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4650      	mov	r0, sl
 8004b10:	4659      	mov	r1, fp
 8004b12:	f7fb ffeb 	bl	8000aec <__aeabi_dcmplt>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d079      	beq.n	8004c0e <_dtoa_r+0x4de>
 8004b1a:	9b03      	ldr	r3, [sp, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d076      	beq.n	8004c0e <_dtoa_r+0x4de>
 8004b20:	9b02      	ldr	r3, [sp, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	dd36      	ble.n	8004b94 <_dtoa_r+0x464>
 8004b26:	9b00      	ldr	r3, [sp, #0]
 8004b28:	4650      	mov	r0, sl
 8004b2a:	4659      	mov	r1, fp
 8004b2c:	1e5f      	subs	r7, r3, #1
 8004b2e:	2200      	movs	r2, #0
 8004b30:	4b88      	ldr	r3, [pc, #544]	; (8004d54 <_dtoa_r+0x624>)
 8004b32:	f7fb fd69 	bl	8000608 <__aeabi_dmul>
 8004b36:	9e02      	ldr	r6, [sp, #8]
 8004b38:	4682      	mov	sl, r0
 8004b3a:	468b      	mov	fp, r1
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f7fb fcf8 	bl	8000534 <__aeabi_i2d>
 8004b44:	4652      	mov	r2, sl
 8004b46:	465b      	mov	r3, fp
 8004b48:	f7fb fd5e 	bl	8000608 <__aeabi_dmul>
 8004b4c:	4b82      	ldr	r3, [pc, #520]	; (8004d58 <_dtoa_r+0x628>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f7fb fba4 	bl	800029c <__adddf3>
 8004b54:	46d0      	mov	r8, sl
 8004b56:	46d9      	mov	r9, fp
 8004b58:	4682      	mov	sl, r0
 8004b5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004b5e:	2e00      	cmp	r6, #0
 8004b60:	d158      	bne.n	8004c14 <_dtoa_r+0x4e4>
 8004b62:	4b7e      	ldr	r3, [pc, #504]	; (8004d5c <_dtoa_r+0x62c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	4640      	mov	r0, r8
 8004b68:	4649      	mov	r1, r9
 8004b6a:	f7fb fb95 	bl	8000298 <__aeabi_dsub>
 8004b6e:	4652      	mov	r2, sl
 8004b70:	465b      	mov	r3, fp
 8004b72:	4680      	mov	r8, r0
 8004b74:	4689      	mov	r9, r1
 8004b76:	f7fb ffd7 	bl	8000b28 <__aeabi_dcmpgt>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	f040 8295 	bne.w	80050aa <_dtoa_r+0x97a>
 8004b80:	4652      	mov	r2, sl
 8004b82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004b86:	4640      	mov	r0, r8
 8004b88:	4649      	mov	r1, r9
 8004b8a:	f7fb ffaf 	bl	8000aec <__aeabi_dcmplt>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	f040 8289 	bne.w	80050a6 <_dtoa_r+0x976>
 8004b94:	ec5b ab19 	vmov	sl, fp, d9
 8004b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f2c0 8148 	blt.w	8004e30 <_dtoa_r+0x700>
 8004ba0:	9a00      	ldr	r2, [sp, #0]
 8004ba2:	2a0e      	cmp	r2, #14
 8004ba4:	f300 8144 	bgt.w	8004e30 <_dtoa_r+0x700>
 8004ba8:	4b67      	ldr	r3, [pc, #412]	; (8004d48 <_dtoa_r+0x618>)
 8004baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f280 80d5 	bge.w	8004d64 <_dtoa_r+0x634>
 8004bba:	9b03      	ldr	r3, [sp, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f300 80d1 	bgt.w	8004d64 <_dtoa_r+0x634>
 8004bc2:	f040 826f 	bne.w	80050a4 <_dtoa_r+0x974>
 8004bc6:	4b65      	ldr	r3, [pc, #404]	; (8004d5c <_dtoa_r+0x62c>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	4640      	mov	r0, r8
 8004bcc:	4649      	mov	r1, r9
 8004bce:	f7fb fd1b 	bl	8000608 <__aeabi_dmul>
 8004bd2:	4652      	mov	r2, sl
 8004bd4:	465b      	mov	r3, fp
 8004bd6:	f7fb ff9d 	bl	8000b14 <__aeabi_dcmpge>
 8004bda:	9e03      	ldr	r6, [sp, #12]
 8004bdc:	4637      	mov	r7, r6
 8004bde:	2800      	cmp	r0, #0
 8004be0:	f040 8245 	bne.w	800506e <_dtoa_r+0x93e>
 8004be4:	9d01      	ldr	r5, [sp, #4]
 8004be6:	2331      	movs	r3, #49	; 0x31
 8004be8:	f805 3b01 	strb.w	r3, [r5], #1
 8004bec:	9b00      	ldr	r3, [sp, #0]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	e240      	b.n	8005076 <_dtoa_r+0x946>
 8004bf4:	07f2      	lsls	r2, r6, #31
 8004bf6:	d505      	bpl.n	8004c04 <_dtoa_r+0x4d4>
 8004bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bfc:	f7fb fd04 	bl	8000608 <__aeabi_dmul>
 8004c00:	3501      	adds	r5, #1
 8004c02:	2301      	movs	r3, #1
 8004c04:	1076      	asrs	r6, r6, #1
 8004c06:	3708      	adds	r7, #8
 8004c08:	e777      	b.n	8004afa <_dtoa_r+0x3ca>
 8004c0a:	2502      	movs	r5, #2
 8004c0c:	e779      	b.n	8004b02 <_dtoa_r+0x3d2>
 8004c0e:	9f00      	ldr	r7, [sp, #0]
 8004c10:	9e03      	ldr	r6, [sp, #12]
 8004c12:	e794      	b.n	8004b3e <_dtoa_r+0x40e>
 8004c14:	9901      	ldr	r1, [sp, #4]
 8004c16:	4b4c      	ldr	r3, [pc, #304]	; (8004d48 <_dtoa_r+0x618>)
 8004c18:	4431      	add	r1, r6
 8004c1a:	910d      	str	r1, [sp, #52]	; 0x34
 8004c1c:	9908      	ldr	r1, [sp, #32]
 8004c1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004c22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c26:	2900      	cmp	r1, #0
 8004c28:	d043      	beq.n	8004cb2 <_dtoa_r+0x582>
 8004c2a:	494d      	ldr	r1, [pc, #308]	; (8004d60 <_dtoa_r+0x630>)
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f7fb fe15 	bl	800085c <__aeabi_ddiv>
 8004c32:	4652      	mov	r2, sl
 8004c34:	465b      	mov	r3, fp
 8004c36:	f7fb fb2f 	bl	8000298 <__aeabi_dsub>
 8004c3a:	9d01      	ldr	r5, [sp, #4]
 8004c3c:	4682      	mov	sl, r0
 8004c3e:	468b      	mov	fp, r1
 8004c40:	4649      	mov	r1, r9
 8004c42:	4640      	mov	r0, r8
 8004c44:	f7fb ff90 	bl	8000b68 <__aeabi_d2iz>
 8004c48:	4606      	mov	r6, r0
 8004c4a:	f7fb fc73 	bl	8000534 <__aeabi_i2d>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4640      	mov	r0, r8
 8004c54:	4649      	mov	r1, r9
 8004c56:	f7fb fb1f 	bl	8000298 <__aeabi_dsub>
 8004c5a:	3630      	adds	r6, #48	; 0x30
 8004c5c:	f805 6b01 	strb.w	r6, [r5], #1
 8004c60:	4652      	mov	r2, sl
 8004c62:	465b      	mov	r3, fp
 8004c64:	4680      	mov	r8, r0
 8004c66:	4689      	mov	r9, r1
 8004c68:	f7fb ff40 	bl	8000aec <__aeabi_dcmplt>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d163      	bne.n	8004d38 <_dtoa_r+0x608>
 8004c70:	4642      	mov	r2, r8
 8004c72:	464b      	mov	r3, r9
 8004c74:	4936      	ldr	r1, [pc, #216]	; (8004d50 <_dtoa_r+0x620>)
 8004c76:	2000      	movs	r0, #0
 8004c78:	f7fb fb0e 	bl	8000298 <__aeabi_dsub>
 8004c7c:	4652      	mov	r2, sl
 8004c7e:	465b      	mov	r3, fp
 8004c80:	f7fb ff34 	bl	8000aec <__aeabi_dcmplt>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	f040 80b5 	bne.w	8004df4 <_dtoa_r+0x6c4>
 8004c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c8c:	429d      	cmp	r5, r3
 8004c8e:	d081      	beq.n	8004b94 <_dtoa_r+0x464>
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <_dtoa_r+0x624>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	4650      	mov	r0, sl
 8004c96:	4659      	mov	r1, fp
 8004c98:	f7fb fcb6 	bl	8000608 <__aeabi_dmul>
 8004c9c:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <_dtoa_r+0x624>)
 8004c9e:	4682      	mov	sl, r0
 8004ca0:	468b      	mov	fp, r1
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f7fb fcae 	bl	8000608 <__aeabi_dmul>
 8004cac:	4680      	mov	r8, r0
 8004cae:	4689      	mov	r9, r1
 8004cb0:	e7c6      	b.n	8004c40 <_dtoa_r+0x510>
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	f7fb fca7 	bl	8000608 <__aeabi_dmul>
 8004cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cbc:	9d01      	ldr	r5, [sp, #4]
 8004cbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	468b      	mov	fp, r1
 8004cc4:	4649      	mov	r1, r9
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7fb ff4e 	bl	8000b68 <__aeabi_d2iz>
 8004ccc:	4606      	mov	r6, r0
 8004cce:	f7fb fc31 	bl	8000534 <__aeabi_i2d>
 8004cd2:	3630      	adds	r6, #48	; 0x30
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4640      	mov	r0, r8
 8004cda:	4649      	mov	r1, r9
 8004cdc:	f7fb fadc 	bl	8000298 <__aeabi_dsub>
 8004ce0:	f805 6b01 	strb.w	r6, [r5], #1
 8004ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ce6:	429d      	cmp	r5, r3
 8004ce8:	4680      	mov	r8, r0
 8004cea:	4689      	mov	r9, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	d124      	bne.n	8004d3c <_dtoa_r+0x60c>
 8004cf2:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <_dtoa_r+0x630>)
 8004cf4:	4650      	mov	r0, sl
 8004cf6:	4659      	mov	r1, fp
 8004cf8:	f7fb fad0 	bl	800029c <__adddf3>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4640      	mov	r0, r8
 8004d02:	4649      	mov	r1, r9
 8004d04:	f7fb ff10 	bl	8000b28 <__aeabi_dcmpgt>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d173      	bne.n	8004df4 <_dtoa_r+0x6c4>
 8004d0c:	4652      	mov	r2, sl
 8004d0e:	465b      	mov	r3, fp
 8004d10:	4913      	ldr	r1, [pc, #76]	; (8004d60 <_dtoa_r+0x630>)
 8004d12:	2000      	movs	r0, #0
 8004d14:	f7fb fac0 	bl	8000298 <__aeabi_dsub>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	4649      	mov	r1, r9
 8004d20:	f7fb fee4 	bl	8000aec <__aeabi_dcmplt>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	f43f af35 	beq.w	8004b94 <_dtoa_r+0x464>
 8004d2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004d2c:	1e6b      	subs	r3, r5, #1
 8004d2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d34:	2b30      	cmp	r3, #48	; 0x30
 8004d36:	d0f8      	beq.n	8004d2a <_dtoa_r+0x5fa>
 8004d38:	9700      	str	r7, [sp, #0]
 8004d3a:	e049      	b.n	8004dd0 <_dtoa_r+0x6a0>
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <_dtoa_r+0x624>)
 8004d3e:	f7fb fc63 	bl	8000608 <__aeabi_dmul>
 8004d42:	4680      	mov	r8, r0
 8004d44:	4689      	mov	r9, r1
 8004d46:	e7bd      	b.n	8004cc4 <_dtoa_r+0x594>
 8004d48:	08007248 	.word	0x08007248
 8004d4c:	08007220 	.word	0x08007220
 8004d50:	3ff00000 	.word	0x3ff00000
 8004d54:	40240000 	.word	0x40240000
 8004d58:	401c0000 	.word	0x401c0000
 8004d5c:	40140000 	.word	0x40140000
 8004d60:	3fe00000 	.word	0x3fe00000
 8004d64:	9d01      	ldr	r5, [sp, #4]
 8004d66:	4656      	mov	r6, sl
 8004d68:	465f      	mov	r7, fp
 8004d6a:	4642      	mov	r2, r8
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	4630      	mov	r0, r6
 8004d70:	4639      	mov	r1, r7
 8004d72:	f7fb fd73 	bl	800085c <__aeabi_ddiv>
 8004d76:	f7fb fef7 	bl	8000b68 <__aeabi_d2iz>
 8004d7a:	4682      	mov	sl, r0
 8004d7c:	f7fb fbda 	bl	8000534 <__aeabi_i2d>
 8004d80:	4642      	mov	r2, r8
 8004d82:	464b      	mov	r3, r9
 8004d84:	f7fb fc40 	bl	8000608 <__aeabi_dmul>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	4639      	mov	r1, r7
 8004d90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004d94:	f7fb fa80 	bl	8000298 <__aeabi_dsub>
 8004d98:	f805 6b01 	strb.w	r6, [r5], #1
 8004d9c:	9e01      	ldr	r6, [sp, #4]
 8004d9e:	9f03      	ldr	r7, [sp, #12]
 8004da0:	1bae      	subs	r6, r5, r6
 8004da2:	42b7      	cmp	r7, r6
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	d135      	bne.n	8004e16 <_dtoa_r+0x6e6>
 8004daa:	f7fb fa77 	bl	800029c <__adddf3>
 8004dae:	4642      	mov	r2, r8
 8004db0:	464b      	mov	r3, r9
 8004db2:	4606      	mov	r6, r0
 8004db4:	460f      	mov	r7, r1
 8004db6:	f7fb feb7 	bl	8000b28 <__aeabi_dcmpgt>
 8004dba:	b9d0      	cbnz	r0, 8004df2 <_dtoa_r+0x6c2>
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f7fb fe88 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dc8:	b110      	cbz	r0, 8004dd0 <_dtoa_r+0x6a0>
 8004dca:	f01a 0f01 	tst.w	sl, #1
 8004dce:	d110      	bne.n	8004df2 <_dtoa_r+0x6c2>
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	ee18 1a10 	vmov	r1, s16
 8004dd6:	f000 faf3 	bl	80053c0 <_Bfree>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	9800      	ldr	r0, [sp, #0]
 8004dde:	702b      	strb	r3, [r5, #0]
 8004de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004de2:	3001      	adds	r0, #1
 8004de4:	6018      	str	r0, [r3, #0]
 8004de6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f43f acf1 	beq.w	80047d0 <_dtoa_r+0xa0>
 8004dee:	601d      	str	r5, [r3, #0]
 8004df0:	e4ee      	b.n	80047d0 <_dtoa_r+0xa0>
 8004df2:	9f00      	ldr	r7, [sp, #0]
 8004df4:	462b      	mov	r3, r5
 8004df6:	461d      	mov	r5, r3
 8004df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dfc:	2a39      	cmp	r2, #57	; 0x39
 8004dfe:	d106      	bne.n	8004e0e <_dtoa_r+0x6de>
 8004e00:	9a01      	ldr	r2, [sp, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d1f7      	bne.n	8004df6 <_dtoa_r+0x6c6>
 8004e06:	9901      	ldr	r1, [sp, #4]
 8004e08:	2230      	movs	r2, #48	; 0x30
 8004e0a:	3701      	adds	r7, #1
 8004e0c:	700a      	strb	r2, [r1, #0]
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	3201      	adds	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e790      	b.n	8004d38 <_dtoa_r+0x608>
 8004e16:	4ba6      	ldr	r3, [pc, #664]	; (80050b0 <_dtoa_r+0x980>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f7fb fbf5 	bl	8000608 <__aeabi_dmul>
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2300      	movs	r3, #0
 8004e22:	4606      	mov	r6, r0
 8004e24:	460f      	mov	r7, r1
 8004e26:	f7fb fe57 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d09d      	beq.n	8004d6a <_dtoa_r+0x63a>
 8004e2e:	e7cf      	b.n	8004dd0 <_dtoa_r+0x6a0>
 8004e30:	9a08      	ldr	r2, [sp, #32]
 8004e32:	2a00      	cmp	r2, #0
 8004e34:	f000 80d7 	beq.w	8004fe6 <_dtoa_r+0x8b6>
 8004e38:	9a06      	ldr	r2, [sp, #24]
 8004e3a:	2a01      	cmp	r2, #1
 8004e3c:	f300 80ba 	bgt.w	8004fb4 <_dtoa_r+0x884>
 8004e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e42:	2a00      	cmp	r2, #0
 8004e44:	f000 80b2 	beq.w	8004fac <_dtoa_r+0x87c>
 8004e48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e4c:	9e07      	ldr	r6, [sp, #28]
 8004e4e:	9d04      	ldr	r5, [sp, #16]
 8004e50:	9a04      	ldr	r2, [sp, #16]
 8004e52:	441a      	add	r2, r3
 8004e54:	9204      	str	r2, [sp, #16]
 8004e56:	9a05      	ldr	r2, [sp, #20]
 8004e58:	2101      	movs	r1, #1
 8004e5a:	441a      	add	r2, r3
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	9205      	str	r2, [sp, #20]
 8004e60:	f000 fb66 	bl	8005530 <__i2b>
 8004e64:	4607      	mov	r7, r0
 8004e66:	2d00      	cmp	r5, #0
 8004e68:	dd0c      	ble.n	8004e84 <_dtoa_r+0x754>
 8004e6a:	9b05      	ldr	r3, [sp, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	dd09      	ble.n	8004e84 <_dtoa_r+0x754>
 8004e70:	42ab      	cmp	r3, r5
 8004e72:	9a04      	ldr	r2, [sp, #16]
 8004e74:	bfa8      	it	ge
 8004e76:	462b      	movge	r3, r5
 8004e78:	1ad2      	subs	r2, r2, r3
 8004e7a:	9204      	str	r2, [sp, #16]
 8004e7c:	9a05      	ldr	r2, [sp, #20]
 8004e7e:	1aed      	subs	r5, r5, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	9305      	str	r3, [sp, #20]
 8004e84:	9b07      	ldr	r3, [sp, #28]
 8004e86:	b31b      	cbz	r3, 8004ed0 <_dtoa_r+0x7a0>
 8004e88:	9b08      	ldr	r3, [sp, #32]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80af 	beq.w	8004fee <_dtoa_r+0x8be>
 8004e90:	2e00      	cmp	r6, #0
 8004e92:	dd13      	ble.n	8004ebc <_dtoa_r+0x78c>
 8004e94:	4639      	mov	r1, r7
 8004e96:	4632      	mov	r2, r6
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 fc09 	bl	80056b0 <__pow5mult>
 8004e9e:	ee18 2a10 	vmov	r2, s16
 8004ea2:	4601      	mov	r1, r0
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 fb58 	bl	800555c <__multiply>
 8004eac:	ee18 1a10 	vmov	r1, s16
 8004eb0:	4680      	mov	r8, r0
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f000 fa84 	bl	80053c0 <_Bfree>
 8004eb8:	ee08 8a10 	vmov	s16, r8
 8004ebc:	9b07      	ldr	r3, [sp, #28]
 8004ebe:	1b9a      	subs	r2, r3, r6
 8004ec0:	d006      	beq.n	8004ed0 <_dtoa_r+0x7a0>
 8004ec2:	ee18 1a10 	vmov	r1, s16
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f000 fbf2 	bl	80056b0 <__pow5mult>
 8004ecc:	ee08 0a10 	vmov	s16, r0
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 fb2c 	bl	8005530 <__i2b>
 8004ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	4606      	mov	r6, r0
 8004ede:	f340 8088 	ble.w	8004ff2 <_dtoa_r+0x8c2>
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4601      	mov	r1, r0
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 fbe2 	bl	80056b0 <__pow5mult>
 8004eec:	9b06      	ldr	r3, [sp, #24]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	f340 8081 	ble.w	8004ff8 <_dtoa_r+0x8c8>
 8004ef6:	f04f 0800 	mov.w	r8, #0
 8004efa:	6933      	ldr	r3, [r6, #16]
 8004efc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004f00:	6918      	ldr	r0, [r3, #16]
 8004f02:	f000 fac5 	bl	8005490 <__hi0bits>
 8004f06:	f1c0 0020 	rsb	r0, r0, #32
 8004f0a:	9b05      	ldr	r3, [sp, #20]
 8004f0c:	4418      	add	r0, r3
 8004f0e:	f010 001f 	ands.w	r0, r0, #31
 8004f12:	f000 8092 	beq.w	800503a <_dtoa_r+0x90a>
 8004f16:	f1c0 0320 	rsb	r3, r0, #32
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	f340 808a 	ble.w	8005034 <_dtoa_r+0x904>
 8004f20:	f1c0 001c 	rsb	r0, r0, #28
 8004f24:	9b04      	ldr	r3, [sp, #16]
 8004f26:	4403      	add	r3, r0
 8004f28:	9304      	str	r3, [sp, #16]
 8004f2a:	9b05      	ldr	r3, [sp, #20]
 8004f2c:	4403      	add	r3, r0
 8004f2e:	4405      	add	r5, r0
 8004f30:	9305      	str	r3, [sp, #20]
 8004f32:	9b04      	ldr	r3, [sp, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	dd07      	ble.n	8004f48 <_dtoa_r+0x818>
 8004f38:	ee18 1a10 	vmov	r1, s16
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 fc10 	bl	8005764 <__lshift>
 8004f44:	ee08 0a10 	vmov	s16, r0
 8004f48:	9b05      	ldr	r3, [sp, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	dd05      	ble.n	8004f5a <_dtoa_r+0x82a>
 8004f4e:	4631      	mov	r1, r6
 8004f50:	461a      	mov	r2, r3
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 fc06 	bl	8005764 <__lshift>
 8004f58:	4606      	mov	r6, r0
 8004f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d06e      	beq.n	800503e <_dtoa_r+0x90e>
 8004f60:	ee18 0a10 	vmov	r0, s16
 8004f64:	4631      	mov	r1, r6
 8004f66:	f000 fc6d 	bl	8005844 <__mcmp>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	da67      	bge.n	800503e <_dtoa_r+0x90e>
 8004f6e:	9b00      	ldr	r3, [sp, #0]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	ee18 1a10 	vmov	r1, s16
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	220a      	movs	r2, #10
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f000 fa41 	bl	8005404 <__multadd>
 8004f82:	9b08      	ldr	r3, [sp, #32]
 8004f84:	ee08 0a10 	vmov	s16, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 81b1 	beq.w	80052f0 <_dtoa_r+0xbc0>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	4639      	mov	r1, r7
 8004f92:	220a      	movs	r2, #10
 8004f94:	4620      	mov	r0, r4
 8004f96:	f000 fa35 	bl	8005404 <__multadd>
 8004f9a:	9b02      	ldr	r3, [sp, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	4607      	mov	r7, r0
 8004fa0:	f300 808e 	bgt.w	80050c0 <_dtoa_r+0x990>
 8004fa4:	9b06      	ldr	r3, [sp, #24]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	dc51      	bgt.n	800504e <_dtoa_r+0x91e>
 8004faa:	e089      	b.n	80050c0 <_dtoa_r+0x990>
 8004fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004fb2:	e74b      	b.n	8004e4c <_dtoa_r+0x71c>
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	1e5e      	subs	r6, r3, #1
 8004fb8:	9b07      	ldr	r3, [sp, #28]
 8004fba:	42b3      	cmp	r3, r6
 8004fbc:	bfbf      	itttt	lt
 8004fbe:	9b07      	ldrlt	r3, [sp, #28]
 8004fc0:	9607      	strlt	r6, [sp, #28]
 8004fc2:	1af2      	sublt	r2, r6, r3
 8004fc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004fc6:	bfb6      	itet	lt
 8004fc8:	189b      	addlt	r3, r3, r2
 8004fca:	1b9e      	subge	r6, r3, r6
 8004fcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	bfb8      	it	lt
 8004fd2:	2600      	movlt	r6, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bfb7      	itett	lt
 8004fd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004fdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004fe0:	1a9d      	sublt	r5, r3, r2
 8004fe2:	2300      	movlt	r3, #0
 8004fe4:	e734      	b.n	8004e50 <_dtoa_r+0x720>
 8004fe6:	9e07      	ldr	r6, [sp, #28]
 8004fe8:	9d04      	ldr	r5, [sp, #16]
 8004fea:	9f08      	ldr	r7, [sp, #32]
 8004fec:	e73b      	b.n	8004e66 <_dtoa_r+0x736>
 8004fee:	9a07      	ldr	r2, [sp, #28]
 8004ff0:	e767      	b.n	8004ec2 <_dtoa_r+0x792>
 8004ff2:	9b06      	ldr	r3, [sp, #24]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	dc18      	bgt.n	800502a <_dtoa_r+0x8fa>
 8004ff8:	f1ba 0f00 	cmp.w	sl, #0
 8004ffc:	d115      	bne.n	800502a <_dtoa_r+0x8fa>
 8004ffe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005002:	b993      	cbnz	r3, 800502a <_dtoa_r+0x8fa>
 8005004:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005008:	0d1b      	lsrs	r3, r3, #20
 800500a:	051b      	lsls	r3, r3, #20
 800500c:	b183      	cbz	r3, 8005030 <_dtoa_r+0x900>
 800500e:	9b04      	ldr	r3, [sp, #16]
 8005010:	3301      	adds	r3, #1
 8005012:	9304      	str	r3, [sp, #16]
 8005014:	9b05      	ldr	r3, [sp, #20]
 8005016:	3301      	adds	r3, #1
 8005018:	9305      	str	r3, [sp, #20]
 800501a:	f04f 0801 	mov.w	r8, #1
 800501e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	f47f af6a 	bne.w	8004efa <_dtoa_r+0x7ca>
 8005026:	2001      	movs	r0, #1
 8005028:	e76f      	b.n	8004f0a <_dtoa_r+0x7da>
 800502a:	f04f 0800 	mov.w	r8, #0
 800502e:	e7f6      	b.n	800501e <_dtoa_r+0x8ee>
 8005030:	4698      	mov	r8, r3
 8005032:	e7f4      	b.n	800501e <_dtoa_r+0x8ee>
 8005034:	f43f af7d 	beq.w	8004f32 <_dtoa_r+0x802>
 8005038:	4618      	mov	r0, r3
 800503a:	301c      	adds	r0, #28
 800503c:	e772      	b.n	8004f24 <_dtoa_r+0x7f4>
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	dc37      	bgt.n	80050b4 <_dtoa_r+0x984>
 8005044:	9b06      	ldr	r3, [sp, #24]
 8005046:	2b02      	cmp	r3, #2
 8005048:	dd34      	ble.n	80050b4 <_dtoa_r+0x984>
 800504a:	9b03      	ldr	r3, [sp, #12]
 800504c:	9302      	str	r3, [sp, #8]
 800504e:	9b02      	ldr	r3, [sp, #8]
 8005050:	b96b      	cbnz	r3, 800506e <_dtoa_r+0x93e>
 8005052:	4631      	mov	r1, r6
 8005054:	2205      	movs	r2, #5
 8005056:	4620      	mov	r0, r4
 8005058:	f000 f9d4 	bl	8005404 <__multadd>
 800505c:	4601      	mov	r1, r0
 800505e:	4606      	mov	r6, r0
 8005060:	ee18 0a10 	vmov	r0, s16
 8005064:	f000 fbee 	bl	8005844 <__mcmp>
 8005068:	2800      	cmp	r0, #0
 800506a:	f73f adbb 	bgt.w	8004be4 <_dtoa_r+0x4b4>
 800506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005070:	9d01      	ldr	r5, [sp, #4]
 8005072:	43db      	mvns	r3, r3
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	f04f 0800 	mov.w	r8, #0
 800507a:	4631      	mov	r1, r6
 800507c:	4620      	mov	r0, r4
 800507e:	f000 f99f 	bl	80053c0 <_Bfree>
 8005082:	2f00      	cmp	r7, #0
 8005084:	f43f aea4 	beq.w	8004dd0 <_dtoa_r+0x6a0>
 8005088:	f1b8 0f00 	cmp.w	r8, #0
 800508c:	d005      	beq.n	800509a <_dtoa_r+0x96a>
 800508e:	45b8      	cmp	r8, r7
 8005090:	d003      	beq.n	800509a <_dtoa_r+0x96a>
 8005092:	4641      	mov	r1, r8
 8005094:	4620      	mov	r0, r4
 8005096:	f000 f993 	bl	80053c0 <_Bfree>
 800509a:	4639      	mov	r1, r7
 800509c:	4620      	mov	r0, r4
 800509e:	f000 f98f 	bl	80053c0 <_Bfree>
 80050a2:	e695      	b.n	8004dd0 <_dtoa_r+0x6a0>
 80050a4:	2600      	movs	r6, #0
 80050a6:	4637      	mov	r7, r6
 80050a8:	e7e1      	b.n	800506e <_dtoa_r+0x93e>
 80050aa:	9700      	str	r7, [sp, #0]
 80050ac:	4637      	mov	r7, r6
 80050ae:	e599      	b.n	8004be4 <_dtoa_r+0x4b4>
 80050b0:	40240000 	.word	0x40240000
 80050b4:	9b08      	ldr	r3, [sp, #32]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80ca 	beq.w	8005250 <_dtoa_r+0xb20>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	9302      	str	r3, [sp, #8]
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	dd05      	ble.n	80050d0 <_dtoa_r+0x9a0>
 80050c4:	4639      	mov	r1, r7
 80050c6:	462a      	mov	r2, r5
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 fb4b 	bl	8005764 <__lshift>
 80050ce:	4607      	mov	r7, r0
 80050d0:	f1b8 0f00 	cmp.w	r8, #0
 80050d4:	d05b      	beq.n	800518e <_dtoa_r+0xa5e>
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4620      	mov	r0, r4
 80050da:	f000 f931 	bl	8005340 <_Balloc>
 80050de:	4605      	mov	r5, r0
 80050e0:	b928      	cbnz	r0, 80050ee <_dtoa_r+0x9be>
 80050e2:	4b87      	ldr	r3, [pc, #540]	; (8005300 <_dtoa_r+0xbd0>)
 80050e4:	4602      	mov	r2, r0
 80050e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80050ea:	f7ff bb3b 	b.w	8004764 <_dtoa_r+0x34>
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	3202      	adds	r2, #2
 80050f2:	0092      	lsls	r2, r2, #2
 80050f4:	f107 010c 	add.w	r1, r7, #12
 80050f8:	300c      	adds	r0, #12
 80050fa:	f000 f913 	bl	8005324 <memcpy>
 80050fe:	2201      	movs	r2, #1
 8005100:	4629      	mov	r1, r5
 8005102:	4620      	mov	r0, r4
 8005104:	f000 fb2e 	bl	8005764 <__lshift>
 8005108:	9b01      	ldr	r3, [sp, #4]
 800510a:	f103 0901 	add.w	r9, r3, #1
 800510e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005112:	4413      	add	r3, r2
 8005114:	9305      	str	r3, [sp, #20]
 8005116:	f00a 0301 	and.w	r3, sl, #1
 800511a:	46b8      	mov	r8, r7
 800511c:	9304      	str	r3, [sp, #16]
 800511e:	4607      	mov	r7, r0
 8005120:	4631      	mov	r1, r6
 8005122:	ee18 0a10 	vmov	r0, s16
 8005126:	f7ff fa75 	bl	8004614 <quorem>
 800512a:	4641      	mov	r1, r8
 800512c:	9002      	str	r0, [sp, #8]
 800512e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005132:	ee18 0a10 	vmov	r0, s16
 8005136:	f000 fb85 	bl	8005844 <__mcmp>
 800513a:	463a      	mov	r2, r7
 800513c:	9003      	str	r0, [sp, #12]
 800513e:	4631      	mov	r1, r6
 8005140:	4620      	mov	r0, r4
 8005142:	f000 fb9b 	bl	800587c <__mdiff>
 8005146:	68c2      	ldr	r2, [r0, #12]
 8005148:	f109 3bff 	add.w	fp, r9, #4294967295
 800514c:	4605      	mov	r5, r0
 800514e:	bb02      	cbnz	r2, 8005192 <_dtoa_r+0xa62>
 8005150:	4601      	mov	r1, r0
 8005152:	ee18 0a10 	vmov	r0, s16
 8005156:	f000 fb75 	bl	8005844 <__mcmp>
 800515a:	4602      	mov	r2, r0
 800515c:	4629      	mov	r1, r5
 800515e:	4620      	mov	r0, r4
 8005160:	9207      	str	r2, [sp, #28]
 8005162:	f000 f92d 	bl	80053c0 <_Bfree>
 8005166:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800516a:	ea43 0102 	orr.w	r1, r3, r2
 800516e:	9b04      	ldr	r3, [sp, #16]
 8005170:	430b      	orrs	r3, r1
 8005172:	464d      	mov	r5, r9
 8005174:	d10f      	bne.n	8005196 <_dtoa_r+0xa66>
 8005176:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800517a:	d02a      	beq.n	80051d2 <_dtoa_r+0xaa2>
 800517c:	9b03      	ldr	r3, [sp, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	dd02      	ble.n	8005188 <_dtoa_r+0xa58>
 8005182:	9b02      	ldr	r3, [sp, #8]
 8005184:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005188:	f88b a000 	strb.w	sl, [fp]
 800518c:	e775      	b.n	800507a <_dtoa_r+0x94a>
 800518e:	4638      	mov	r0, r7
 8005190:	e7ba      	b.n	8005108 <_dtoa_r+0x9d8>
 8005192:	2201      	movs	r2, #1
 8005194:	e7e2      	b.n	800515c <_dtoa_r+0xa2c>
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	db04      	blt.n	80051a6 <_dtoa_r+0xa76>
 800519c:	9906      	ldr	r1, [sp, #24]
 800519e:	430b      	orrs	r3, r1
 80051a0:	9904      	ldr	r1, [sp, #16]
 80051a2:	430b      	orrs	r3, r1
 80051a4:	d122      	bne.n	80051ec <_dtoa_r+0xabc>
 80051a6:	2a00      	cmp	r2, #0
 80051a8:	ddee      	ble.n	8005188 <_dtoa_r+0xa58>
 80051aa:	ee18 1a10 	vmov	r1, s16
 80051ae:	2201      	movs	r2, #1
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 fad7 	bl	8005764 <__lshift>
 80051b6:	4631      	mov	r1, r6
 80051b8:	ee08 0a10 	vmov	s16, r0
 80051bc:	f000 fb42 	bl	8005844 <__mcmp>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	dc03      	bgt.n	80051cc <_dtoa_r+0xa9c>
 80051c4:	d1e0      	bne.n	8005188 <_dtoa_r+0xa58>
 80051c6:	f01a 0f01 	tst.w	sl, #1
 80051ca:	d0dd      	beq.n	8005188 <_dtoa_r+0xa58>
 80051cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80051d0:	d1d7      	bne.n	8005182 <_dtoa_r+0xa52>
 80051d2:	2339      	movs	r3, #57	; 0x39
 80051d4:	f88b 3000 	strb.w	r3, [fp]
 80051d8:	462b      	mov	r3, r5
 80051da:	461d      	mov	r5, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80051e2:	2a39      	cmp	r2, #57	; 0x39
 80051e4:	d071      	beq.n	80052ca <_dtoa_r+0xb9a>
 80051e6:	3201      	adds	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	e746      	b.n	800507a <_dtoa_r+0x94a>
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	dd07      	ble.n	8005200 <_dtoa_r+0xad0>
 80051f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80051f4:	d0ed      	beq.n	80051d2 <_dtoa_r+0xaa2>
 80051f6:	f10a 0301 	add.w	r3, sl, #1
 80051fa:	f88b 3000 	strb.w	r3, [fp]
 80051fe:	e73c      	b.n	800507a <_dtoa_r+0x94a>
 8005200:	9b05      	ldr	r3, [sp, #20]
 8005202:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005206:	4599      	cmp	r9, r3
 8005208:	d047      	beq.n	800529a <_dtoa_r+0xb6a>
 800520a:	ee18 1a10 	vmov	r1, s16
 800520e:	2300      	movs	r3, #0
 8005210:	220a      	movs	r2, #10
 8005212:	4620      	mov	r0, r4
 8005214:	f000 f8f6 	bl	8005404 <__multadd>
 8005218:	45b8      	cmp	r8, r7
 800521a:	ee08 0a10 	vmov	s16, r0
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	f04f 020a 	mov.w	r2, #10
 8005226:	4641      	mov	r1, r8
 8005228:	4620      	mov	r0, r4
 800522a:	d106      	bne.n	800523a <_dtoa_r+0xb0a>
 800522c:	f000 f8ea 	bl	8005404 <__multadd>
 8005230:	4680      	mov	r8, r0
 8005232:	4607      	mov	r7, r0
 8005234:	f109 0901 	add.w	r9, r9, #1
 8005238:	e772      	b.n	8005120 <_dtoa_r+0x9f0>
 800523a:	f000 f8e3 	bl	8005404 <__multadd>
 800523e:	4639      	mov	r1, r7
 8005240:	4680      	mov	r8, r0
 8005242:	2300      	movs	r3, #0
 8005244:	220a      	movs	r2, #10
 8005246:	4620      	mov	r0, r4
 8005248:	f000 f8dc 	bl	8005404 <__multadd>
 800524c:	4607      	mov	r7, r0
 800524e:	e7f1      	b.n	8005234 <_dtoa_r+0xb04>
 8005250:	9b03      	ldr	r3, [sp, #12]
 8005252:	9302      	str	r3, [sp, #8]
 8005254:	9d01      	ldr	r5, [sp, #4]
 8005256:	ee18 0a10 	vmov	r0, s16
 800525a:	4631      	mov	r1, r6
 800525c:	f7ff f9da 	bl	8004614 <quorem>
 8005260:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005264:	9b01      	ldr	r3, [sp, #4]
 8005266:	f805 ab01 	strb.w	sl, [r5], #1
 800526a:	1aea      	subs	r2, r5, r3
 800526c:	9b02      	ldr	r3, [sp, #8]
 800526e:	4293      	cmp	r3, r2
 8005270:	dd09      	ble.n	8005286 <_dtoa_r+0xb56>
 8005272:	ee18 1a10 	vmov	r1, s16
 8005276:	2300      	movs	r3, #0
 8005278:	220a      	movs	r2, #10
 800527a:	4620      	mov	r0, r4
 800527c:	f000 f8c2 	bl	8005404 <__multadd>
 8005280:	ee08 0a10 	vmov	s16, r0
 8005284:	e7e7      	b.n	8005256 <_dtoa_r+0xb26>
 8005286:	9b02      	ldr	r3, [sp, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	bfc8      	it	gt
 800528c:	461d      	movgt	r5, r3
 800528e:	9b01      	ldr	r3, [sp, #4]
 8005290:	bfd8      	it	le
 8005292:	2501      	movle	r5, #1
 8005294:	441d      	add	r5, r3
 8005296:	f04f 0800 	mov.w	r8, #0
 800529a:	ee18 1a10 	vmov	r1, s16
 800529e:	2201      	movs	r2, #1
 80052a0:	4620      	mov	r0, r4
 80052a2:	f000 fa5f 	bl	8005764 <__lshift>
 80052a6:	4631      	mov	r1, r6
 80052a8:	ee08 0a10 	vmov	s16, r0
 80052ac:	f000 faca 	bl	8005844 <__mcmp>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	dc91      	bgt.n	80051d8 <_dtoa_r+0xaa8>
 80052b4:	d102      	bne.n	80052bc <_dtoa_r+0xb8c>
 80052b6:	f01a 0f01 	tst.w	sl, #1
 80052ba:	d18d      	bne.n	80051d8 <_dtoa_r+0xaa8>
 80052bc:	462b      	mov	r3, r5
 80052be:	461d      	mov	r5, r3
 80052c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052c4:	2a30      	cmp	r2, #48	; 0x30
 80052c6:	d0fa      	beq.n	80052be <_dtoa_r+0xb8e>
 80052c8:	e6d7      	b.n	800507a <_dtoa_r+0x94a>
 80052ca:	9a01      	ldr	r2, [sp, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d184      	bne.n	80051da <_dtoa_r+0xaaa>
 80052d0:	9b00      	ldr	r3, [sp, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	2331      	movs	r3, #49	; 0x31
 80052d8:	7013      	strb	r3, [r2, #0]
 80052da:	e6ce      	b.n	800507a <_dtoa_r+0x94a>
 80052dc:	4b09      	ldr	r3, [pc, #36]	; (8005304 <_dtoa_r+0xbd4>)
 80052de:	f7ff ba95 	b.w	800480c <_dtoa_r+0xdc>
 80052e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f47f aa6e 	bne.w	80047c6 <_dtoa_r+0x96>
 80052ea:	4b07      	ldr	r3, [pc, #28]	; (8005308 <_dtoa_r+0xbd8>)
 80052ec:	f7ff ba8e 	b.w	800480c <_dtoa_r+0xdc>
 80052f0:	9b02      	ldr	r3, [sp, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	dcae      	bgt.n	8005254 <_dtoa_r+0xb24>
 80052f6:	9b06      	ldr	r3, [sp, #24]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	f73f aea8 	bgt.w	800504e <_dtoa_r+0x91e>
 80052fe:	e7a9      	b.n	8005254 <_dtoa_r+0xb24>
 8005300:	080071af 	.word	0x080071af
 8005304:	0800710c 	.word	0x0800710c
 8005308:	08007130 	.word	0x08007130

0800530c <_localeconv_r>:
 800530c:	4800      	ldr	r0, [pc, #0]	; (8005310 <_localeconv_r+0x4>)
 800530e:	4770      	bx	lr
 8005310:	200001a0 	.word	0x200001a0

08005314 <malloc>:
 8005314:	4b02      	ldr	r3, [pc, #8]	; (8005320 <malloc+0xc>)
 8005316:	4601      	mov	r1, r0
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	f000 bc17 	b.w	8005b4c <_malloc_r>
 800531e:	bf00      	nop
 8005320:	2000004c 	.word	0x2000004c

08005324 <memcpy>:
 8005324:	440a      	add	r2, r1
 8005326:	4291      	cmp	r1, r2
 8005328:	f100 33ff 	add.w	r3, r0, #4294967295
 800532c:	d100      	bne.n	8005330 <memcpy+0xc>
 800532e:	4770      	bx	lr
 8005330:	b510      	push	{r4, lr}
 8005332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800533a:	4291      	cmp	r1, r2
 800533c:	d1f9      	bne.n	8005332 <memcpy+0xe>
 800533e:	bd10      	pop	{r4, pc}

08005340 <_Balloc>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005344:	4604      	mov	r4, r0
 8005346:	460d      	mov	r5, r1
 8005348:	b976      	cbnz	r6, 8005368 <_Balloc+0x28>
 800534a:	2010      	movs	r0, #16
 800534c:	f7ff ffe2 	bl	8005314 <malloc>
 8005350:	4602      	mov	r2, r0
 8005352:	6260      	str	r0, [r4, #36]	; 0x24
 8005354:	b920      	cbnz	r0, 8005360 <_Balloc+0x20>
 8005356:	4b18      	ldr	r3, [pc, #96]	; (80053b8 <_Balloc+0x78>)
 8005358:	4818      	ldr	r0, [pc, #96]	; (80053bc <_Balloc+0x7c>)
 800535a:	2166      	movs	r1, #102	; 0x66
 800535c:	f000 fdd6 	bl	8005f0c <__assert_func>
 8005360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005364:	6006      	str	r6, [r0, #0]
 8005366:	60c6      	str	r6, [r0, #12]
 8005368:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800536a:	68f3      	ldr	r3, [r6, #12]
 800536c:	b183      	cbz	r3, 8005390 <_Balloc+0x50>
 800536e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005376:	b9b8      	cbnz	r0, 80053a8 <_Balloc+0x68>
 8005378:	2101      	movs	r1, #1
 800537a:	fa01 f605 	lsl.w	r6, r1, r5
 800537e:	1d72      	adds	r2, r6, #5
 8005380:	0092      	lsls	r2, r2, #2
 8005382:	4620      	mov	r0, r4
 8005384:	f000 fb60 	bl	8005a48 <_calloc_r>
 8005388:	b160      	cbz	r0, 80053a4 <_Balloc+0x64>
 800538a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800538e:	e00e      	b.n	80053ae <_Balloc+0x6e>
 8005390:	2221      	movs	r2, #33	; 0x21
 8005392:	2104      	movs	r1, #4
 8005394:	4620      	mov	r0, r4
 8005396:	f000 fb57 	bl	8005a48 <_calloc_r>
 800539a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800539c:	60f0      	str	r0, [r6, #12]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e4      	bne.n	800536e <_Balloc+0x2e>
 80053a4:	2000      	movs	r0, #0
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
 80053a8:	6802      	ldr	r2, [r0, #0]
 80053aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80053ae:	2300      	movs	r3, #0
 80053b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80053b4:	e7f7      	b.n	80053a6 <_Balloc+0x66>
 80053b6:	bf00      	nop
 80053b8:	0800713d 	.word	0x0800713d
 80053bc:	080071c0 	.word	0x080071c0

080053c0 <_Bfree>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80053c4:	4605      	mov	r5, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	b976      	cbnz	r6, 80053e8 <_Bfree+0x28>
 80053ca:	2010      	movs	r0, #16
 80053cc:	f7ff ffa2 	bl	8005314 <malloc>
 80053d0:	4602      	mov	r2, r0
 80053d2:	6268      	str	r0, [r5, #36]	; 0x24
 80053d4:	b920      	cbnz	r0, 80053e0 <_Bfree+0x20>
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <_Bfree+0x3c>)
 80053d8:	4809      	ldr	r0, [pc, #36]	; (8005400 <_Bfree+0x40>)
 80053da:	218a      	movs	r1, #138	; 0x8a
 80053dc:	f000 fd96 	bl	8005f0c <__assert_func>
 80053e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053e4:	6006      	str	r6, [r0, #0]
 80053e6:	60c6      	str	r6, [r0, #12]
 80053e8:	b13c      	cbz	r4, 80053fa <_Bfree+0x3a>
 80053ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053ec:	6862      	ldr	r2, [r4, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053f4:	6021      	str	r1, [r4, #0]
 80053f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	0800713d 	.word	0x0800713d
 8005400:	080071c0 	.word	0x080071c0

08005404 <__multadd>:
 8005404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005408:	690d      	ldr	r5, [r1, #16]
 800540a:	4607      	mov	r7, r0
 800540c:	460c      	mov	r4, r1
 800540e:	461e      	mov	r6, r3
 8005410:	f101 0c14 	add.w	ip, r1, #20
 8005414:	2000      	movs	r0, #0
 8005416:	f8dc 3000 	ldr.w	r3, [ip]
 800541a:	b299      	uxth	r1, r3
 800541c:	fb02 6101 	mla	r1, r2, r1, r6
 8005420:	0c1e      	lsrs	r6, r3, #16
 8005422:	0c0b      	lsrs	r3, r1, #16
 8005424:	fb02 3306 	mla	r3, r2, r6, r3
 8005428:	b289      	uxth	r1, r1
 800542a:	3001      	adds	r0, #1
 800542c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005430:	4285      	cmp	r5, r0
 8005432:	f84c 1b04 	str.w	r1, [ip], #4
 8005436:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800543a:	dcec      	bgt.n	8005416 <__multadd+0x12>
 800543c:	b30e      	cbz	r6, 8005482 <__multadd+0x7e>
 800543e:	68a3      	ldr	r3, [r4, #8]
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc19      	bgt.n	8005478 <__multadd+0x74>
 8005444:	6861      	ldr	r1, [r4, #4]
 8005446:	4638      	mov	r0, r7
 8005448:	3101      	adds	r1, #1
 800544a:	f7ff ff79 	bl	8005340 <_Balloc>
 800544e:	4680      	mov	r8, r0
 8005450:	b928      	cbnz	r0, 800545e <__multadd+0x5a>
 8005452:	4602      	mov	r2, r0
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <__multadd+0x84>)
 8005456:	480d      	ldr	r0, [pc, #52]	; (800548c <__multadd+0x88>)
 8005458:	21b5      	movs	r1, #181	; 0xb5
 800545a:	f000 fd57 	bl	8005f0c <__assert_func>
 800545e:	6922      	ldr	r2, [r4, #16]
 8005460:	3202      	adds	r2, #2
 8005462:	f104 010c 	add.w	r1, r4, #12
 8005466:	0092      	lsls	r2, r2, #2
 8005468:	300c      	adds	r0, #12
 800546a:	f7ff ff5b 	bl	8005324 <memcpy>
 800546e:	4621      	mov	r1, r4
 8005470:	4638      	mov	r0, r7
 8005472:	f7ff ffa5 	bl	80053c0 <_Bfree>
 8005476:	4644      	mov	r4, r8
 8005478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800547c:	3501      	adds	r5, #1
 800547e:	615e      	str	r6, [r3, #20]
 8005480:	6125      	str	r5, [r4, #16]
 8005482:	4620      	mov	r0, r4
 8005484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005488:	080071af 	.word	0x080071af
 800548c:	080071c0 	.word	0x080071c0

08005490 <__hi0bits>:
 8005490:	0c03      	lsrs	r3, r0, #16
 8005492:	041b      	lsls	r3, r3, #16
 8005494:	b9d3      	cbnz	r3, 80054cc <__hi0bits+0x3c>
 8005496:	0400      	lsls	r0, r0, #16
 8005498:	2310      	movs	r3, #16
 800549a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800549e:	bf04      	itt	eq
 80054a0:	0200      	lsleq	r0, r0, #8
 80054a2:	3308      	addeq	r3, #8
 80054a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80054a8:	bf04      	itt	eq
 80054aa:	0100      	lsleq	r0, r0, #4
 80054ac:	3304      	addeq	r3, #4
 80054ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80054b2:	bf04      	itt	eq
 80054b4:	0080      	lsleq	r0, r0, #2
 80054b6:	3302      	addeq	r3, #2
 80054b8:	2800      	cmp	r0, #0
 80054ba:	db05      	blt.n	80054c8 <__hi0bits+0x38>
 80054bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80054c0:	f103 0301 	add.w	r3, r3, #1
 80054c4:	bf08      	it	eq
 80054c6:	2320      	moveq	r3, #32
 80054c8:	4618      	mov	r0, r3
 80054ca:	4770      	bx	lr
 80054cc:	2300      	movs	r3, #0
 80054ce:	e7e4      	b.n	800549a <__hi0bits+0xa>

080054d0 <__lo0bits>:
 80054d0:	6803      	ldr	r3, [r0, #0]
 80054d2:	f013 0207 	ands.w	r2, r3, #7
 80054d6:	4601      	mov	r1, r0
 80054d8:	d00b      	beq.n	80054f2 <__lo0bits+0x22>
 80054da:	07da      	lsls	r2, r3, #31
 80054dc:	d423      	bmi.n	8005526 <__lo0bits+0x56>
 80054de:	0798      	lsls	r0, r3, #30
 80054e0:	bf49      	itett	mi
 80054e2:	085b      	lsrmi	r3, r3, #1
 80054e4:	089b      	lsrpl	r3, r3, #2
 80054e6:	2001      	movmi	r0, #1
 80054e8:	600b      	strmi	r3, [r1, #0]
 80054ea:	bf5c      	itt	pl
 80054ec:	600b      	strpl	r3, [r1, #0]
 80054ee:	2002      	movpl	r0, #2
 80054f0:	4770      	bx	lr
 80054f2:	b298      	uxth	r0, r3
 80054f4:	b9a8      	cbnz	r0, 8005522 <__lo0bits+0x52>
 80054f6:	0c1b      	lsrs	r3, r3, #16
 80054f8:	2010      	movs	r0, #16
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	b90a      	cbnz	r2, 8005502 <__lo0bits+0x32>
 80054fe:	3008      	adds	r0, #8
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	071a      	lsls	r2, r3, #28
 8005504:	bf04      	itt	eq
 8005506:	091b      	lsreq	r3, r3, #4
 8005508:	3004      	addeq	r0, #4
 800550a:	079a      	lsls	r2, r3, #30
 800550c:	bf04      	itt	eq
 800550e:	089b      	lsreq	r3, r3, #2
 8005510:	3002      	addeq	r0, #2
 8005512:	07da      	lsls	r2, r3, #31
 8005514:	d403      	bmi.n	800551e <__lo0bits+0x4e>
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	f100 0001 	add.w	r0, r0, #1
 800551c:	d005      	beq.n	800552a <__lo0bits+0x5a>
 800551e:	600b      	str	r3, [r1, #0]
 8005520:	4770      	bx	lr
 8005522:	4610      	mov	r0, r2
 8005524:	e7e9      	b.n	80054fa <__lo0bits+0x2a>
 8005526:	2000      	movs	r0, #0
 8005528:	4770      	bx	lr
 800552a:	2020      	movs	r0, #32
 800552c:	4770      	bx	lr
	...

08005530 <__i2b>:
 8005530:	b510      	push	{r4, lr}
 8005532:	460c      	mov	r4, r1
 8005534:	2101      	movs	r1, #1
 8005536:	f7ff ff03 	bl	8005340 <_Balloc>
 800553a:	4602      	mov	r2, r0
 800553c:	b928      	cbnz	r0, 800554a <__i2b+0x1a>
 800553e:	4b05      	ldr	r3, [pc, #20]	; (8005554 <__i2b+0x24>)
 8005540:	4805      	ldr	r0, [pc, #20]	; (8005558 <__i2b+0x28>)
 8005542:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005546:	f000 fce1 	bl	8005f0c <__assert_func>
 800554a:	2301      	movs	r3, #1
 800554c:	6144      	str	r4, [r0, #20]
 800554e:	6103      	str	r3, [r0, #16]
 8005550:	bd10      	pop	{r4, pc}
 8005552:	bf00      	nop
 8005554:	080071af 	.word	0x080071af
 8005558:	080071c0 	.word	0x080071c0

0800555c <__multiply>:
 800555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	4691      	mov	r9, r2
 8005562:	690a      	ldr	r2, [r1, #16]
 8005564:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005568:	429a      	cmp	r2, r3
 800556a:	bfb8      	it	lt
 800556c:	460b      	movlt	r3, r1
 800556e:	460c      	mov	r4, r1
 8005570:	bfbc      	itt	lt
 8005572:	464c      	movlt	r4, r9
 8005574:	4699      	movlt	r9, r3
 8005576:	6927      	ldr	r7, [r4, #16]
 8005578:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800557c:	68a3      	ldr	r3, [r4, #8]
 800557e:	6861      	ldr	r1, [r4, #4]
 8005580:	eb07 060a 	add.w	r6, r7, sl
 8005584:	42b3      	cmp	r3, r6
 8005586:	b085      	sub	sp, #20
 8005588:	bfb8      	it	lt
 800558a:	3101      	addlt	r1, #1
 800558c:	f7ff fed8 	bl	8005340 <_Balloc>
 8005590:	b930      	cbnz	r0, 80055a0 <__multiply+0x44>
 8005592:	4602      	mov	r2, r0
 8005594:	4b44      	ldr	r3, [pc, #272]	; (80056a8 <__multiply+0x14c>)
 8005596:	4845      	ldr	r0, [pc, #276]	; (80056ac <__multiply+0x150>)
 8005598:	f240 115d 	movw	r1, #349	; 0x15d
 800559c:	f000 fcb6 	bl	8005f0c <__assert_func>
 80055a0:	f100 0514 	add.w	r5, r0, #20
 80055a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80055a8:	462b      	mov	r3, r5
 80055aa:	2200      	movs	r2, #0
 80055ac:	4543      	cmp	r3, r8
 80055ae:	d321      	bcc.n	80055f4 <__multiply+0x98>
 80055b0:	f104 0314 	add.w	r3, r4, #20
 80055b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80055b8:	f109 0314 	add.w	r3, r9, #20
 80055bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80055c0:	9202      	str	r2, [sp, #8]
 80055c2:	1b3a      	subs	r2, r7, r4
 80055c4:	3a15      	subs	r2, #21
 80055c6:	f022 0203 	bic.w	r2, r2, #3
 80055ca:	3204      	adds	r2, #4
 80055cc:	f104 0115 	add.w	r1, r4, #21
 80055d0:	428f      	cmp	r7, r1
 80055d2:	bf38      	it	cc
 80055d4:	2204      	movcc	r2, #4
 80055d6:	9201      	str	r2, [sp, #4]
 80055d8:	9a02      	ldr	r2, [sp, #8]
 80055da:	9303      	str	r3, [sp, #12]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d80c      	bhi.n	80055fa <__multiply+0x9e>
 80055e0:	2e00      	cmp	r6, #0
 80055e2:	dd03      	ble.n	80055ec <__multiply+0x90>
 80055e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05a      	beq.n	80056a2 <__multiply+0x146>
 80055ec:	6106      	str	r6, [r0, #16]
 80055ee:	b005      	add	sp, #20
 80055f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f4:	f843 2b04 	str.w	r2, [r3], #4
 80055f8:	e7d8      	b.n	80055ac <__multiply+0x50>
 80055fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80055fe:	f1ba 0f00 	cmp.w	sl, #0
 8005602:	d024      	beq.n	800564e <__multiply+0xf2>
 8005604:	f104 0e14 	add.w	lr, r4, #20
 8005608:	46a9      	mov	r9, r5
 800560a:	f04f 0c00 	mov.w	ip, #0
 800560e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005612:	f8d9 1000 	ldr.w	r1, [r9]
 8005616:	fa1f fb82 	uxth.w	fp, r2
 800561a:	b289      	uxth	r1, r1
 800561c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005620:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005624:	f8d9 2000 	ldr.w	r2, [r9]
 8005628:	4461      	add	r1, ip
 800562a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800562e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005632:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005636:	b289      	uxth	r1, r1
 8005638:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800563c:	4577      	cmp	r7, lr
 800563e:	f849 1b04 	str.w	r1, [r9], #4
 8005642:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005646:	d8e2      	bhi.n	800560e <__multiply+0xb2>
 8005648:	9a01      	ldr	r2, [sp, #4]
 800564a:	f845 c002 	str.w	ip, [r5, r2]
 800564e:	9a03      	ldr	r2, [sp, #12]
 8005650:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005654:	3304      	adds	r3, #4
 8005656:	f1b9 0f00 	cmp.w	r9, #0
 800565a:	d020      	beq.n	800569e <__multiply+0x142>
 800565c:	6829      	ldr	r1, [r5, #0]
 800565e:	f104 0c14 	add.w	ip, r4, #20
 8005662:	46ae      	mov	lr, r5
 8005664:	f04f 0a00 	mov.w	sl, #0
 8005668:	f8bc b000 	ldrh.w	fp, [ip]
 800566c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005670:	fb09 220b 	mla	r2, r9, fp, r2
 8005674:	4492      	add	sl, r2
 8005676:	b289      	uxth	r1, r1
 8005678:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800567c:	f84e 1b04 	str.w	r1, [lr], #4
 8005680:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005684:	f8be 1000 	ldrh.w	r1, [lr]
 8005688:	0c12      	lsrs	r2, r2, #16
 800568a:	fb09 1102 	mla	r1, r9, r2, r1
 800568e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005692:	4567      	cmp	r7, ip
 8005694:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005698:	d8e6      	bhi.n	8005668 <__multiply+0x10c>
 800569a:	9a01      	ldr	r2, [sp, #4]
 800569c:	50a9      	str	r1, [r5, r2]
 800569e:	3504      	adds	r5, #4
 80056a0:	e79a      	b.n	80055d8 <__multiply+0x7c>
 80056a2:	3e01      	subs	r6, #1
 80056a4:	e79c      	b.n	80055e0 <__multiply+0x84>
 80056a6:	bf00      	nop
 80056a8:	080071af 	.word	0x080071af
 80056ac:	080071c0 	.word	0x080071c0

080056b0 <__pow5mult>:
 80056b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b4:	4615      	mov	r5, r2
 80056b6:	f012 0203 	ands.w	r2, r2, #3
 80056ba:	4606      	mov	r6, r0
 80056bc:	460f      	mov	r7, r1
 80056be:	d007      	beq.n	80056d0 <__pow5mult+0x20>
 80056c0:	4c25      	ldr	r4, [pc, #148]	; (8005758 <__pow5mult+0xa8>)
 80056c2:	3a01      	subs	r2, #1
 80056c4:	2300      	movs	r3, #0
 80056c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80056ca:	f7ff fe9b 	bl	8005404 <__multadd>
 80056ce:	4607      	mov	r7, r0
 80056d0:	10ad      	asrs	r5, r5, #2
 80056d2:	d03d      	beq.n	8005750 <__pow5mult+0xa0>
 80056d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80056d6:	b97c      	cbnz	r4, 80056f8 <__pow5mult+0x48>
 80056d8:	2010      	movs	r0, #16
 80056da:	f7ff fe1b 	bl	8005314 <malloc>
 80056de:	4602      	mov	r2, r0
 80056e0:	6270      	str	r0, [r6, #36]	; 0x24
 80056e2:	b928      	cbnz	r0, 80056f0 <__pow5mult+0x40>
 80056e4:	4b1d      	ldr	r3, [pc, #116]	; (800575c <__pow5mult+0xac>)
 80056e6:	481e      	ldr	r0, [pc, #120]	; (8005760 <__pow5mult+0xb0>)
 80056e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80056ec:	f000 fc0e 	bl	8005f0c <__assert_func>
 80056f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056f4:	6004      	str	r4, [r0, #0]
 80056f6:	60c4      	str	r4, [r0, #12]
 80056f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80056fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005700:	b94c      	cbnz	r4, 8005716 <__pow5mult+0x66>
 8005702:	f240 2171 	movw	r1, #625	; 0x271
 8005706:	4630      	mov	r0, r6
 8005708:	f7ff ff12 	bl	8005530 <__i2b>
 800570c:	2300      	movs	r3, #0
 800570e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005712:	4604      	mov	r4, r0
 8005714:	6003      	str	r3, [r0, #0]
 8005716:	f04f 0900 	mov.w	r9, #0
 800571a:	07eb      	lsls	r3, r5, #31
 800571c:	d50a      	bpl.n	8005734 <__pow5mult+0x84>
 800571e:	4639      	mov	r1, r7
 8005720:	4622      	mov	r2, r4
 8005722:	4630      	mov	r0, r6
 8005724:	f7ff ff1a 	bl	800555c <__multiply>
 8005728:	4639      	mov	r1, r7
 800572a:	4680      	mov	r8, r0
 800572c:	4630      	mov	r0, r6
 800572e:	f7ff fe47 	bl	80053c0 <_Bfree>
 8005732:	4647      	mov	r7, r8
 8005734:	106d      	asrs	r5, r5, #1
 8005736:	d00b      	beq.n	8005750 <__pow5mult+0xa0>
 8005738:	6820      	ldr	r0, [r4, #0]
 800573a:	b938      	cbnz	r0, 800574c <__pow5mult+0x9c>
 800573c:	4622      	mov	r2, r4
 800573e:	4621      	mov	r1, r4
 8005740:	4630      	mov	r0, r6
 8005742:	f7ff ff0b 	bl	800555c <__multiply>
 8005746:	6020      	str	r0, [r4, #0]
 8005748:	f8c0 9000 	str.w	r9, [r0]
 800574c:	4604      	mov	r4, r0
 800574e:	e7e4      	b.n	800571a <__pow5mult+0x6a>
 8005750:	4638      	mov	r0, r7
 8005752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005756:	bf00      	nop
 8005758:	08007310 	.word	0x08007310
 800575c:	0800713d 	.word	0x0800713d
 8005760:	080071c0 	.word	0x080071c0

08005764 <__lshift>:
 8005764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005768:	460c      	mov	r4, r1
 800576a:	6849      	ldr	r1, [r1, #4]
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005772:	68a3      	ldr	r3, [r4, #8]
 8005774:	4607      	mov	r7, r0
 8005776:	4691      	mov	r9, r2
 8005778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800577c:	f108 0601 	add.w	r6, r8, #1
 8005780:	42b3      	cmp	r3, r6
 8005782:	db0b      	blt.n	800579c <__lshift+0x38>
 8005784:	4638      	mov	r0, r7
 8005786:	f7ff fddb 	bl	8005340 <_Balloc>
 800578a:	4605      	mov	r5, r0
 800578c:	b948      	cbnz	r0, 80057a2 <__lshift+0x3e>
 800578e:	4602      	mov	r2, r0
 8005790:	4b2a      	ldr	r3, [pc, #168]	; (800583c <__lshift+0xd8>)
 8005792:	482b      	ldr	r0, [pc, #172]	; (8005840 <__lshift+0xdc>)
 8005794:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005798:	f000 fbb8 	bl	8005f0c <__assert_func>
 800579c:	3101      	adds	r1, #1
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	e7ee      	b.n	8005780 <__lshift+0x1c>
 80057a2:	2300      	movs	r3, #0
 80057a4:	f100 0114 	add.w	r1, r0, #20
 80057a8:	f100 0210 	add.w	r2, r0, #16
 80057ac:	4618      	mov	r0, r3
 80057ae:	4553      	cmp	r3, sl
 80057b0:	db37      	blt.n	8005822 <__lshift+0xbe>
 80057b2:	6920      	ldr	r0, [r4, #16]
 80057b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057b8:	f104 0314 	add.w	r3, r4, #20
 80057bc:	f019 091f 	ands.w	r9, r9, #31
 80057c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80057c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80057c8:	d02f      	beq.n	800582a <__lshift+0xc6>
 80057ca:	f1c9 0e20 	rsb	lr, r9, #32
 80057ce:	468a      	mov	sl, r1
 80057d0:	f04f 0c00 	mov.w	ip, #0
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	fa02 f209 	lsl.w	r2, r2, r9
 80057da:	ea42 020c 	orr.w	r2, r2, ip
 80057de:	f84a 2b04 	str.w	r2, [sl], #4
 80057e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e6:	4298      	cmp	r0, r3
 80057e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80057ec:	d8f2      	bhi.n	80057d4 <__lshift+0x70>
 80057ee:	1b03      	subs	r3, r0, r4
 80057f0:	3b15      	subs	r3, #21
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	3304      	adds	r3, #4
 80057f8:	f104 0215 	add.w	r2, r4, #21
 80057fc:	4290      	cmp	r0, r2
 80057fe:	bf38      	it	cc
 8005800:	2304      	movcc	r3, #4
 8005802:	f841 c003 	str.w	ip, [r1, r3]
 8005806:	f1bc 0f00 	cmp.w	ip, #0
 800580a:	d001      	beq.n	8005810 <__lshift+0xac>
 800580c:	f108 0602 	add.w	r6, r8, #2
 8005810:	3e01      	subs	r6, #1
 8005812:	4638      	mov	r0, r7
 8005814:	612e      	str	r6, [r5, #16]
 8005816:	4621      	mov	r1, r4
 8005818:	f7ff fdd2 	bl	80053c0 <_Bfree>
 800581c:	4628      	mov	r0, r5
 800581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005822:	f842 0f04 	str.w	r0, [r2, #4]!
 8005826:	3301      	adds	r3, #1
 8005828:	e7c1      	b.n	80057ae <__lshift+0x4a>
 800582a:	3904      	subs	r1, #4
 800582c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005830:	f841 2f04 	str.w	r2, [r1, #4]!
 8005834:	4298      	cmp	r0, r3
 8005836:	d8f9      	bhi.n	800582c <__lshift+0xc8>
 8005838:	e7ea      	b.n	8005810 <__lshift+0xac>
 800583a:	bf00      	nop
 800583c:	080071af 	.word	0x080071af
 8005840:	080071c0 	.word	0x080071c0

08005844 <__mcmp>:
 8005844:	b530      	push	{r4, r5, lr}
 8005846:	6902      	ldr	r2, [r0, #16]
 8005848:	690c      	ldr	r4, [r1, #16]
 800584a:	1b12      	subs	r2, r2, r4
 800584c:	d10e      	bne.n	800586c <__mcmp+0x28>
 800584e:	f100 0314 	add.w	r3, r0, #20
 8005852:	3114      	adds	r1, #20
 8005854:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005858:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800585c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005860:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005864:	42a5      	cmp	r5, r4
 8005866:	d003      	beq.n	8005870 <__mcmp+0x2c>
 8005868:	d305      	bcc.n	8005876 <__mcmp+0x32>
 800586a:	2201      	movs	r2, #1
 800586c:	4610      	mov	r0, r2
 800586e:	bd30      	pop	{r4, r5, pc}
 8005870:	4283      	cmp	r3, r0
 8005872:	d3f3      	bcc.n	800585c <__mcmp+0x18>
 8005874:	e7fa      	b.n	800586c <__mcmp+0x28>
 8005876:	f04f 32ff 	mov.w	r2, #4294967295
 800587a:	e7f7      	b.n	800586c <__mcmp+0x28>

0800587c <__mdiff>:
 800587c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	460c      	mov	r4, r1
 8005882:	4606      	mov	r6, r0
 8005884:	4611      	mov	r1, r2
 8005886:	4620      	mov	r0, r4
 8005888:	4690      	mov	r8, r2
 800588a:	f7ff ffdb 	bl	8005844 <__mcmp>
 800588e:	1e05      	subs	r5, r0, #0
 8005890:	d110      	bne.n	80058b4 <__mdiff+0x38>
 8005892:	4629      	mov	r1, r5
 8005894:	4630      	mov	r0, r6
 8005896:	f7ff fd53 	bl	8005340 <_Balloc>
 800589a:	b930      	cbnz	r0, 80058aa <__mdiff+0x2e>
 800589c:	4b3a      	ldr	r3, [pc, #232]	; (8005988 <__mdiff+0x10c>)
 800589e:	4602      	mov	r2, r0
 80058a0:	f240 2132 	movw	r1, #562	; 0x232
 80058a4:	4839      	ldr	r0, [pc, #228]	; (800598c <__mdiff+0x110>)
 80058a6:	f000 fb31 	bl	8005f0c <__assert_func>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80058b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b4:	bfa4      	itt	ge
 80058b6:	4643      	movge	r3, r8
 80058b8:	46a0      	movge	r8, r4
 80058ba:	4630      	mov	r0, r6
 80058bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80058c0:	bfa6      	itte	ge
 80058c2:	461c      	movge	r4, r3
 80058c4:	2500      	movge	r5, #0
 80058c6:	2501      	movlt	r5, #1
 80058c8:	f7ff fd3a 	bl	8005340 <_Balloc>
 80058cc:	b920      	cbnz	r0, 80058d8 <__mdiff+0x5c>
 80058ce:	4b2e      	ldr	r3, [pc, #184]	; (8005988 <__mdiff+0x10c>)
 80058d0:	4602      	mov	r2, r0
 80058d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80058d6:	e7e5      	b.n	80058a4 <__mdiff+0x28>
 80058d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80058dc:	6926      	ldr	r6, [r4, #16]
 80058de:	60c5      	str	r5, [r0, #12]
 80058e0:	f104 0914 	add.w	r9, r4, #20
 80058e4:	f108 0514 	add.w	r5, r8, #20
 80058e8:	f100 0e14 	add.w	lr, r0, #20
 80058ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80058f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80058f4:	f108 0210 	add.w	r2, r8, #16
 80058f8:	46f2      	mov	sl, lr
 80058fa:	2100      	movs	r1, #0
 80058fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8005900:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005904:	fa1f f883 	uxth.w	r8, r3
 8005908:	fa11 f18b 	uxtah	r1, r1, fp
 800590c:	0c1b      	lsrs	r3, r3, #16
 800590e:	eba1 0808 	sub.w	r8, r1, r8
 8005912:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005916:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800591a:	fa1f f888 	uxth.w	r8, r8
 800591e:	1419      	asrs	r1, r3, #16
 8005920:	454e      	cmp	r6, r9
 8005922:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005926:	f84a 3b04 	str.w	r3, [sl], #4
 800592a:	d8e7      	bhi.n	80058fc <__mdiff+0x80>
 800592c:	1b33      	subs	r3, r6, r4
 800592e:	3b15      	subs	r3, #21
 8005930:	f023 0303 	bic.w	r3, r3, #3
 8005934:	3304      	adds	r3, #4
 8005936:	3415      	adds	r4, #21
 8005938:	42a6      	cmp	r6, r4
 800593a:	bf38      	it	cc
 800593c:	2304      	movcc	r3, #4
 800593e:	441d      	add	r5, r3
 8005940:	4473      	add	r3, lr
 8005942:	469e      	mov	lr, r3
 8005944:	462e      	mov	r6, r5
 8005946:	4566      	cmp	r6, ip
 8005948:	d30e      	bcc.n	8005968 <__mdiff+0xec>
 800594a:	f10c 0203 	add.w	r2, ip, #3
 800594e:	1b52      	subs	r2, r2, r5
 8005950:	f022 0203 	bic.w	r2, r2, #3
 8005954:	3d03      	subs	r5, #3
 8005956:	45ac      	cmp	ip, r5
 8005958:	bf38      	it	cc
 800595a:	2200      	movcc	r2, #0
 800595c:	441a      	add	r2, r3
 800595e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005962:	b17b      	cbz	r3, 8005984 <__mdiff+0x108>
 8005964:	6107      	str	r7, [r0, #16]
 8005966:	e7a3      	b.n	80058b0 <__mdiff+0x34>
 8005968:	f856 8b04 	ldr.w	r8, [r6], #4
 800596c:	fa11 f288 	uxtah	r2, r1, r8
 8005970:	1414      	asrs	r4, r2, #16
 8005972:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005976:	b292      	uxth	r2, r2
 8005978:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800597c:	f84e 2b04 	str.w	r2, [lr], #4
 8005980:	1421      	asrs	r1, r4, #16
 8005982:	e7e0      	b.n	8005946 <__mdiff+0xca>
 8005984:	3f01      	subs	r7, #1
 8005986:	e7ea      	b.n	800595e <__mdiff+0xe2>
 8005988:	080071af 	.word	0x080071af
 800598c:	080071c0 	.word	0x080071c0

08005990 <__d2b>:
 8005990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005994:	4689      	mov	r9, r1
 8005996:	2101      	movs	r1, #1
 8005998:	ec57 6b10 	vmov	r6, r7, d0
 800599c:	4690      	mov	r8, r2
 800599e:	f7ff fccf 	bl	8005340 <_Balloc>
 80059a2:	4604      	mov	r4, r0
 80059a4:	b930      	cbnz	r0, 80059b4 <__d2b+0x24>
 80059a6:	4602      	mov	r2, r0
 80059a8:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <__d2b+0xb0>)
 80059aa:	4826      	ldr	r0, [pc, #152]	; (8005a44 <__d2b+0xb4>)
 80059ac:	f240 310a 	movw	r1, #778	; 0x30a
 80059b0:	f000 faac 	bl	8005f0c <__assert_func>
 80059b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80059b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80059bc:	bb35      	cbnz	r5, 8005a0c <__d2b+0x7c>
 80059be:	2e00      	cmp	r6, #0
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	d028      	beq.n	8005a16 <__d2b+0x86>
 80059c4:	4668      	mov	r0, sp
 80059c6:	9600      	str	r6, [sp, #0]
 80059c8:	f7ff fd82 	bl	80054d0 <__lo0bits>
 80059cc:	9900      	ldr	r1, [sp, #0]
 80059ce:	b300      	cbz	r0, 8005a12 <__d2b+0x82>
 80059d0:	9a01      	ldr	r2, [sp, #4]
 80059d2:	f1c0 0320 	rsb	r3, r0, #32
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	430b      	orrs	r3, r1
 80059dc:	40c2      	lsrs	r2, r0
 80059de:	6163      	str	r3, [r4, #20]
 80059e0:	9201      	str	r2, [sp, #4]
 80059e2:	9b01      	ldr	r3, [sp, #4]
 80059e4:	61a3      	str	r3, [r4, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bf14      	ite	ne
 80059ea:	2202      	movne	r2, #2
 80059ec:	2201      	moveq	r2, #1
 80059ee:	6122      	str	r2, [r4, #16]
 80059f0:	b1d5      	cbz	r5, 8005a28 <__d2b+0x98>
 80059f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80059f6:	4405      	add	r5, r0
 80059f8:	f8c9 5000 	str.w	r5, [r9]
 80059fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a00:	f8c8 0000 	str.w	r0, [r8]
 8005a04:	4620      	mov	r0, r4
 8005a06:	b003      	add	sp, #12
 8005a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a10:	e7d5      	b.n	80059be <__d2b+0x2e>
 8005a12:	6161      	str	r1, [r4, #20]
 8005a14:	e7e5      	b.n	80059e2 <__d2b+0x52>
 8005a16:	a801      	add	r0, sp, #4
 8005a18:	f7ff fd5a 	bl	80054d0 <__lo0bits>
 8005a1c:	9b01      	ldr	r3, [sp, #4]
 8005a1e:	6163      	str	r3, [r4, #20]
 8005a20:	2201      	movs	r2, #1
 8005a22:	6122      	str	r2, [r4, #16]
 8005a24:	3020      	adds	r0, #32
 8005a26:	e7e3      	b.n	80059f0 <__d2b+0x60>
 8005a28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a30:	f8c9 0000 	str.w	r0, [r9]
 8005a34:	6918      	ldr	r0, [r3, #16]
 8005a36:	f7ff fd2b 	bl	8005490 <__hi0bits>
 8005a3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a3e:	e7df      	b.n	8005a00 <__d2b+0x70>
 8005a40:	080071af 	.word	0x080071af
 8005a44:	080071c0 	.word	0x080071c0

08005a48 <_calloc_r>:
 8005a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a4a:	fba1 2402 	umull	r2, r4, r1, r2
 8005a4e:	b94c      	cbnz	r4, 8005a64 <_calloc_r+0x1c>
 8005a50:	4611      	mov	r1, r2
 8005a52:	9201      	str	r2, [sp, #4]
 8005a54:	f000 f87a 	bl	8005b4c <_malloc_r>
 8005a58:	9a01      	ldr	r2, [sp, #4]
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	b930      	cbnz	r0, 8005a6c <_calloc_r+0x24>
 8005a5e:	4628      	mov	r0, r5
 8005a60:	b003      	add	sp, #12
 8005a62:	bd30      	pop	{r4, r5, pc}
 8005a64:	220c      	movs	r2, #12
 8005a66:	6002      	str	r2, [r0, #0]
 8005a68:	2500      	movs	r5, #0
 8005a6a:	e7f8      	b.n	8005a5e <_calloc_r+0x16>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	f7fe f905 	bl	8003c7c <memset>
 8005a72:	e7f4      	b.n	8005a5e <_calloc_r+0x16>

08005a74 <_free_r>:
 8005a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a76:	2900      	cmp	r1, #0
 8005a78:	d044      	beq.n	8005b04 <_free_r+0x90>
 8005a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a7e:	9001      	str	r0, [sp, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f1a1 0404 	sub.w	r4, r1, #4
 8005a86:	bfb8      	it	lt
 8005a88:	18e4      	addlt	r4, r4, r3
 8005a8a:	f000 fa9b 	bl	8005fc4 <__malloc_lock>
 8005a8e:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <_free_r+0x94>)
 8005a90:	9801      	ldr	r0, [sp, #4]
 8005a92:	6813      	ldr	r3, [r2, #0]
 8005a94:	b933      	cbnz	r3, 8005aa4 <_free_r+0x30>
 8005a96:	6063      	str	r3, [r4, #4]
 8005a98:	6014      	str	r4, [r2, #0]
 8005a9a:	b003      	add	sp, #12
 8005a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aa0:	f000 ba96 	b.w	8005fd0 <__malloc_unlock>
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	d908      	bls.n	8005aba <_free_r+0x46>
 8005aa8:	6825      	ldr	r5, [r4, #0]
 8005aaa:	1961      	adds	r1, r4, r5
 8005aac:	428b      	cmp	r3, r1
 8005aae:	bf01      	itttt	eq
 8005ab0:	6819      	ldreq	r1, [r3, #0]
 8005ab2:	685b      	ldreq	r3, [r3, #4]
 8005ab4:	1949      	addeq	r1, r1, r5
 8005ab6:	6021      	streq	r1, [r4, #0]
 8005ab8:	e7ed      	b.n	8005a96 <_free_r+0x22>
 8005aba:	461a      	mov	r2, r3
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	b10b      	cbz	r3, 8005ac4 <_free_r+0x50>
 8005ac0:	42a3      	cmp	r3, r4
 8005ac2:	d9fa      	bls.n	8005aba <_free_r+0x46>
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	1855      	adds	r5, r2, r1
 8005ac8:	42a5      	cmp	r5, r4
 8005aca:	d10b      	bne.n	8005ae4 <_free_r+0x70>
 8005acc:	6824      	ldr	r4, [r4, #0]
 8005ace:	4421      	add	r1, r4
 8005ad0:	1854      	adds	r4, r2, r1
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	6011      	str	r1, [r2, #0]
 8005ad6:	d1e0      	bne.n	8005a9a <_free_r+0x26>
 8005ad8:	681c      	ldr	r4, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	6053      	str	r3, [r2, #4]
 8005ade:	4421      	add	r1, r4
 8005ae0:	6011      	str	r1, [r2, #0]
 8005ae2:	e7da      	b.n	8005a9a <_free_r+0x26>
 8005ae4:	d902      	bls.n	8005aec <_free_r+0x78>
 8005ae6:	230c      	movs	r3, #12
 8005ae8:	6003      	str	r3, [r0, #0]
 8005aea:	e7d6      	b.n	8005a9a <_free_r+0x26>
 8005aec:	6825      	ldr	r5, [r4, #0]
 8005aee:	1961      	adds	r1, r4, r5
 8005af0:	428b      	cmp	r3, r1
 8005af2:	bf04      	itt	eq
 8005af4:	6819      	ldreq	r1, [r3, #0]
 8005af6:	685b      	ldreq	r3, [r3, #4]
 8005af8:	6063      	str	r3, [r4, #4]
 8005afa:	bf04      	itt	eq
 8005afc:	1949      	addeq	r1, r1, r5
 8005afe:	6021      	streq	r1, [r4, #0]
 8005b00:	6054      	str	r4, [r2, #4]
 8005b02:	e7ca      	b.n	8005a9a <_free_r+0x26>
 8005b04:	b003      	add	sp, #12
 8005b06:	bd30      	pop	{r4, r5, pc}
 8005b08:	20000450 	.word	0x20000450

08005b0c <sbrk_aligned>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4e0e      	ldr	r6, [pc, #56]	; (8005b48 <sbrk_aligned+0x3c>)
 8005b10:	460c      	mov	r4, r1
 8005b12:	6831      	ldr	r1, [r6, #0]
 8005b14:	4605      	mov	r5, r0
 8005b16:	b911      	cbnz	r1, 8005b1e <sbrk_aligned+0x12>
 8005b18:	f000 f9e8 	bl	8005eec <_sbrk_r>
 8005b1c:	6030      	str	r0, [r6, #0]
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 f9e3 	bl	8005eec <_sbrk_r>
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	d00a      	beq.n	8005b40 <sbrk_aligned+0x34>
 8005b2a:	1cc4      	adds	r4, r0, #3
 8005b2c:	f024 0403 	bic.w	r4, r4, #3
 8005b30:	42a0      	cmp	r0, r4
 8005b32:	d007      	beq.n	8005b44 <sbrk_aligned+0x38>
 8005b34:	1a21      	subs	r1, r4, r0
 8005b36:	4628      	mov	r0, r5
 8005b38:	f000 f9d8 	bl	8005eec <_sbrk_r>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d101      	bne.n	8005b44 <sbrk_aligned+0x38>
 8005b40:	f04f 34ff 	mov.w	r4, #4294967295
 8005b44:	4620      	mov	r0, r4
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
 8005b48:	20000454 	.word	0x20000454

08005b4c <_malloc_r>:
 8005b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b50:	1ccd      	adds	r5, r1, #3
 8005b52:	f025 0503 	bic.w	r5, r5, #3
 8005b56:	3508      	adds	r5, #8
 8005b58:	2d0c      	cmp	r5, #12
 8005b5a:	bf38      	it	cc
 8005b5c:	250c      	movcc	r5, #12
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	4607      	mov	r7, r0
 8005b62:	db01      	blt.n	8005b68 <_malloc_r+0x1c>
 8005b64:	42a9      	cmp	r1, r5
 8005b66:	d905      	bls.n	8005b74 <_malloc_r+0x28>
 8005b68:	230c      	movs	r3, #12
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	4630      	mov	r0, r6
 8005b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b74:	4e2e      	ldr	r6, [pc, #184]	; (8005c30 <_malloc_r+0xe4>)
 8005b76:	f000 fa25 	bl	8005fc4 <__malloc_lock>
 8005b7a:	6833      	ldr	r3, [r6, #0]
 8005b7c:	461c      	mov	r4, r3
 8005b7e:	bb34      	cbnz	r4, 8005bce <_malloc_r+0x82>
 8005b80:	4629      	mov	r1, r5
 8005b82:	4638      	mov	r0, r7
 8005b84:	f7ff ffc2 	bl	8005b0c <sbrk_aligned>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	d14d      	bne.n	8005c2a <_malloc_r+0xde>
 8005b8e:	6834      	ldr	r4, [r6, #0]
 8005b90:	4626      	mov	r6, r4
 8005b92:	2e00      	cmp	r6, #0
 8005b94:	d140      	bne.n	8005c18 <_malloc_r+0xcc>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	4631      	mov	r1, r6
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	eb04 0803 	add.w	r8, r4, r3
 8005ba0:	f000 f9a4 	bl	8005eec <_sbrk_r>
 8005ba4:	4580      	cmp	r8, r0
 8005ba6:	d13a      	bne.n	8005c1e <_malloc_r+0xd2>
 8005ba8:	6821      	ldr	r1, [r4, #0]
 8005baa:	3503      	adds	r5, #3
 8005bac:	1a6d      	subs	r5, r5, r1
 8005bae:	f025 0503 	bic.w	r5, r5, #3
 8005bb2:	3508      	adds	r5, #8
 8005bb4:	2d0c      	cmp	r5, #12
 8005bb6:	bf38      	it	cc
 8005bb8:	250c      	movcc	r5, #12
 8005bba:	4629      	mov	r1, r5
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	f7ff ffa5 	bl	8005b0c <sbrk_aligned>
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d02b      	beq.n	8005c1e <_malloc_r+0xd2>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	442b      	add	r3, r5
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	e00e      	b.n	8005bec <_malloc_r+0xa0>
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	1b52      	subs	r2, r2, r5
 8005bd2:	d41e      	bmi.n	8005c12 <_malloc_r+0xc6>
 8005bd4:	2a0b      	cmp	r2, #11
 8005bd6:	d916      	bls.n	8005c06 <_malloc_r+0xba>
 8005bd8:	1961      	adds	r1, r4, r5
 8005bda:	42a3      	cmp	r3, r4
 8005bdc:	6025      	str	r5, [r4, #0]
 8005bde:	bf18      	it	ne
 8005be0:	6059      	strne	r1, [r3, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	bf08      	it	eq
 8005be6:	6031      	streq	r1, [r6, #0]
 8005be8:	5162      	str	r2, [r4, r5]
 8005bea:	604b      	str	r3, [r1, #4]
 8005bec:	4638      	mov	r0, r7
 8005bee:	f104 060b 	add.w	r6, r4, #11
 8005bf2:	f000 f9ed 	bl	8005fd0 <__malloc_unlock>
 8005bf6:	f026 0607 	bic.w	r6, r6, #7
 8005bfa:	1d23      	adds	r3, r4, #4
 8005bfc:	1af2      	subs	r2, r6, r3
 8005bfe:	d0b6      	beq.n	8005b6e <_malloc_r+0x22>
 8005c00:	1b9b      	subs	r3, r3, r6
 8005c02:	50a3      	str	r3, [r4, r2]
 8005c04:	e7b3      	b.n	8005b6e <_malloc_r+0x22>
 8005c06:	6862      	ldr	r2, [r4, #4]
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	bf0c      	ite	eq
 8005c0c:	6032      	streq	r2, [r6, #0]
 8005c0e:	605a      	strne	r2, [r3, #4]
 8005c10:	e7ec      	b.n	8005bec <_malloc_r+0xa0>
 8005c12:	4623      	mov	r3, r4
 8005c14:	6864      	ldr	r4, [r4, #4]
 8005c16:	e7b2      	b.n	8005b7e <_malloc_r+0x32>
 8005c18:	4634      	mov	r4, r6
 8005c1a:	6876      	ldr	r6, [r6, #4]
 8005c1c:	e7b9      	b.n	8005b92 <_malloc_r+0x46>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	603b      	str	r3, [r7, #0]
 8005c22:	4638      	mov	r0, r7
 8005c24:	f000 f9d4 	bl	8005fd0 <__malloc_unlock>
 8005c28:	e7a1      	b.n	8005b6e <_malloc_r+0x22>
 8005c2a:	6025      	str	r5, [r4, #0]
 8005c2c:	e7de      	b.n	8005bec <_malloc_r+0xa0>
 8005c2e:	bf00      	nop
 8005c30:	20000450 	.word	0x20000450

08005c34 <__ssputs_r>:
 8005c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c38:	688e      	ldr	r6, [r1, #8]
 8005c3a:	429e      	cmp	r6, r3
 8005c3c:	4682      	mov	sl, r0
 8005c3e:	460c      	mov	r4, r1
 8005c40:	4690      	mov	r8, r2
 8005c42:	461f      	mov	r7, r3
 8005c44:	d838      	bhi.n	8005cb8 <__ssputs_r+0x84>
 8005c46:	898a      	ldrh	r2, [r1, #12]
 8005c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c4c:	d032      	beq.n	8005cb4 <__ssputs_r+0x80>
 8005c4e:	6825      	ldr	r5, [r4, #0]
 8005c50:	6909      	ldr	r1, [r1, #16]
 8005c52:	eba5 0901 	sub.w	r9, r5, r1
 8005c56:	6965      	ldr	r5, [r4, #20]
 8005c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c60:	3301      	adds	r3, #1
 8005c62:	444b      	add	r3, r9
 8005c64:	106d      	asrs	r5, r5, #1
 8005c66:	429d      	cmp	r5, r3
 8005c68:	bf38      	it	cc
 8005c6a:	461d      	movcc	r5, r3
 8005c6c:	0553      	lsls	r3, r2, #21
 8005c6e:	d531      	bpl.n	8005cd4 <__ssputs_r+0xa0>
 8005c70:	4629      	mov	r1, r5
 8005c72:	f7ff ff6b 	bl	8005b4c <_malloc_r>
 8005c76:	4606      	mov	r6, r0
 8005c78:	b950      	cbnz	r0, 8005c90 <__ssputs_r+0x5c>
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	f8ca 3000 	str.w	r3, [sl]
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c90:	6921      	ldr	r1, [r4, #16]
 8005c92:	464a      	mov	r2, r9
 8005c94:	f7ff fb46 	bl	8005324 <memcpy>
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca2:	81a3      	strh	r3, [r4, #12]
 8005ca4:	6126      	str	r6, [r4, #16]
 8005ca6:	6165      	str	r5, [r4, #20]
 8005ca8:	444e      	add	r6, r9
 8005caa:	eba5 0509 	sub.w	r5, r5, r9
 8005cae:	6026      	str	r6, [r4, #0]
 8005cb0:	60a5      	str	r5, [r4, #8]
 8005cb2:	463e      	mov	r6, r7
 8005cb4:	42be      	cmp	r6, r7
 8005cb6:	d900      	bls.n	8005cba <__ssputs_r+0x86>
 8005cb8:	463e      	mov	r6, r7
 8005cba:	6820      	ldr	r0, [r4, #0]
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	f000 f966 	bl	8005f90 <memmove>
 8005cc4:	68a3      	ldr	r3, [r4, #8]
 8005cc6:	1b9b      	subs	r3, r3, r6
 8005cc8:	60a3      	str	r3, [r4, #8]
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	4433      	add	r3, r6
 8005cce:	6023      	str	r3, [r4, #0]
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	e7db      	b.n	8005c8c <__ssputs_r+0x58>
 8005cd4:	462a      	mov	r2, r5
 8005cd6:	f000 f981 	bl	8005fdc <_realloc_r>
 8005cda:	4606      	mov	r6, r0
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d1e1      	bne.n	8005ca4 <__ssputs_r+0x70>
 8005ce0:	6921      	ldr	r1, [r4, #16]
 8005ce2:	4650      	mov	r0, sl
 8005ce4:	f7ff fec6 	bl	8005a74 <_free_r>
 8005ce8:	e7c7      	b.n	8005c7a <__ssputs_r+0x46>
	...

08005cec <_svfiprintf_r>:
 8005cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	4698      	mov	r8, r3
 8005cf2:	898b      	ldrh	r3, [r1, #12]
 8005cf4:	061b      	lsls	r3, r3, #24
 8005cf6:	b09d      	sub	sp, #116	; 0x74
 8005cf8:	4607      	mov	r7, r0
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	d50e      	bpl.n	8005d1e <_svfiprintf_r+0x32>
 8005d00:	690b      	ldr	r3, [r1, #16]
 8005d02:	b963      	cbnz	r3, 8005d1e <_svfiprintf_r+0x32>
 8005d04:	2140      	movs	r1, #64	; 0x40
 8005d06:	f7ff ff21 	bl	8005b4c <_malloc_r>
 8005d0a:	6028      	str	r0, [r5, #0]
 8005d0c:	6128      	str	r0, [r5, #16]
 8005d0e:	b920      	cbnz	r0, 8005d1a <_svfiprintf_r+0x2e>
 8005d10:	230c      	movs	r3, #12
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	e0d1      	b.n	8005ebe <_svfiprintf_r+0x1d2>
 8005d1a:	2340      	movs	r3, #64	; 0x40
 8005d1c:	616b      	str	r3, [r5, #20]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	9309      	str	r3, [sp, #36]	; 0x24
 8005d22:	2320      	movs	r3, #32
 8005d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d2c:	2330      	movs	r3, #48	; 0x30
 8005d2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ed8 <_svfiprintf_r+0x1ec>
 8005d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d36:	f04f 0901 	mov.w	r9, #1
 8005d3a:	4623      	mov	r3, r4
 8005d3c:	469a      	mov	sl, r3
 8005d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d42:	b10a      	cbz	r2, 8005d48 <_svfiprintf_r+0x5c>
 8005d44:	2a25      	cmp	r2, #37	; 0x25
 8005d46:	d1f9      	bne.n	8005d3c <_svfiprintf_r+0x50>
 8005d48:	ebba 0b04 	subs.w	fp, sl, r4
 8005d4c:	d00b      	beq.n	8005d66 <_svfiprintf_r+0x7a>
 8005d4e:	465b      	mov	r3, fp
 8005d50:	4622      	mov	r2, r4
 8005d52:	4629      	mov	r1, r5
 8005d54:	4638      	mov	r0, r7
 8005d56:	f7ff ff6d 	bl	8005c34 <__ssputs_r>
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f000 80aa 	beq.w	8005eb4 <_svfiprintf_r+0x1c8>
 8005d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d62:	445a      	add	r2, fp
 8005d64:	9209      	str	r2, [sp, #36]	; 0x24
 8005d66:	f89a 3000 	ldrb.w	r3, [sl]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80a2 	beq.w	8005eb4 <_svfiprintf_r+0x1c8>
 8005d70:	2300      	movs	r3, #0
 8005d72:	f04f 32ff 	mov.w	r2, #4294967295
 8005d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d7a:	f10a 0a01 	add.w	sl, sl, #1
 8005d7e:	9304      	str	r3, [sp, #16]
 8005d80:	9307      	str	r3, [sp, #28]
 8005d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d86:	931a      	str	r3, [sp, #104]	; 0x68
 8005d88:	4654      	mov	r4, sl
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d90:	4851      	ldr	r0, [pc, #324]	; (8005ed8 <_svfiprintf_r+0x1ec>)
 8005d92:	f7fa fa2d 	bl	80001f0 <memchr>
 8005d96:	9a04      	ldr	r2, [sp, #16]
 8005d98:	b9d8      	cbnz	r0, 8005dd2 <_svfiprintf_r+0xe6>
 8005d9a:	06d0      	lsls	r0, r2, #27
 8005d9c:	bf44      	itt	mi
 8005d9e:	2320      	movmi	r3, #32
 8005da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005da4:	0711      	lsls	r1, r2, #28
 8005da6:	bf44      	itt	mi
 8005da8:	232b      	movmi	r3, #43	; 0x2b
 8005daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dae:	f89a 3000 	ldrb.w	r3, [sl]
 8005db2:	2b2a      	cmp	r3, #42	; 0x2a
 8005db4:	d015      	beq.n	8005de2 <_svfiprintf_r+0xf6>
 8005db6:	9a07      	ldr	r2, [sp, #28]
 8005db8:	4654      	mov	r4, sl
 8005dba:	2000      	movs	r0, #0
 8005dbc:	f04f 0c0a 	mov.w	ip, #10
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dc6:	3b30      	subs	r3, #48	; 0x30
 8005dc8:	2b09      	cmp	r3, #9
 8005dca:	d94e      	bls.n	8005e6a <_svfiprintf_r+0x17e>
 8005dcc:	b1b0      	cbz	r0, 8005dfc <_svfiprintf_r+0x110>
 8005dce:	9207      	str	r2, [sp, #28]
 8005dd0:	e014      	b.n	8005dfc <_svfiprintf_r+0x110>
 8005dd2:	eba0 0308 	sub.w	r3, r0, r8
 8005dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	9304      	str	r3, [sp, #16]
 8005dde:	46a2      	mov	sl, r4
 8005de0:	e7d2      	b.n	8005d88 <_svfiprintf_r+0x9c>
 8005de2:	9b03      	ldr	r3, [sp, #12]
 8005de4:	1d19      	adds	r1, r3, #4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	9103      	str	r1, [sp, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bfbb      	ittet	lt
 8005dee:	425b      	neglt	r3, r3
 8005df0:	f042 0202 	orrlt.w	r2, r2, #2
 8005df4:	9307      	strge	r3, [sp, #28]
 8005df6:	9307      	strlt	r3, [sp, #28]
 8005df8:	bfb8      	it	lt
 8005dfa:	9204      	strlt	r2, [sp, #16]
 8005dfc:	7823      	ldrb	r3, [r4, #0]
 8005dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8005e00:	d10c      	bne.n	8005e1c <_svfiprintf_r+0x130>
 8005e02:	7863      	ldrb	r3, [r4, #1]
 8005e04:	2b2a      	cmp	r3, #42	; 0x2a
 8005e06:	d135      	bne.n	8005e74 <_svfiprintf_r+0x188>
 8005e08:	9b03      	ldr	r3, [sp, #12]
 8005e0a:	1d1a      	adds	r2, r3, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	9203      	str	r2, [sp, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	bfb8      	it	lt
 8005e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e18:	3402      	adds	r4, #2
 8005e1a:	9305      	str	r3, [sp, #20]
 8005e1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ee8 <_svfiprintf_r+0x1fc>
 8005e20:	7821      	ldrb	r1, [r4, #0]
 8005e22:	2203      	movs	r2, #3
 8005e24:	4650      	mov	r0, sl
 8005e26:	f7fa f9e3 	bl	80001f0 <memchr>
 8005e2a:	b140      	cbz	r0, 8005e3e <_svfiprintf_r+0x152>
 8005e2c:	2340      	movs	r3, #64	; 0x40
 8005e2e:	eba0 000a 	sub.w	r0, r0, sl
 8005e32:	fa03 f000 	lsl.w	r0, r3, r0
 8005e36:	9b04      	ldr	r3, [sp, #16]
 8005e38:	4303      	orrs	r3, r0
 8005e3a:	3401      	adds	r4, #1
 8005e3c:	9304      	str	r3, [sp, #16]
 8005e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e42:	4826      	ldr	r0, [pc, #152]	; (8005edc <_svfiprintf_r+0x1f0>)
 8005e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e48:	2206      	movs	r2, #6
 8005e4a:	f7fa f9d1 	bl	80001f0 <memchr>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d038      	beq.n	8005ec4 <_svfiprintf_r+0x1d8>
 8005e52:	4b23      	ldr	r3, [pc, #140]	; (8005ee0 <_svfiprintf_r+0x1f4>)
 8005e54:	bb1b      	cbnz	r3, 8005e9e <_svfiprintf_r+0x1b2>
 8005e56:	9b03      	ldr	r3, [sp, #12]
 8005e58:	3307      	adds	r3, #7
 8005e5a:	f023 0307 	bic.w	r3, r3, #7
 8005e5e:	3308      	adds	r3, #8
 8005e60:	9303      	str	r3, [sp, #12]
 8005e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e64:	4433      	add	r3, r6
 8005e66:	9309      	str	r3, [sp, #36]	; 0x24
 8005e68:	e767      	b.n	8005d3a <_svfiprintf_r+0x4e>
 8005e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e6e:	460c      	mov	r4, r1
 8005e70:	2001      	movs	r0, #1
 8005e72:	e7a5      	b.n	8005dc0 <_svfiprintf_r+0xd4>
 8005e74:	2300      	movs	r3, #0
 8005e76:	3401      	adds	r4, #1
 8005e78:	9305      	str	r3, [sp, #20]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	f04f 0c0a 	mov.w	ip, #10
 8005e80:	4620      	mov	r0, r4
 8005e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e86:	3a30      	subs	r2, #48	; 0x30
 8005e88:	2a09      	cmp	r2, #9
 8005e8a:	d903      	bls.n	8005e94 <_svfiprintf_r+0x1a8>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0c5      	beq.n	8005e1c <_svfiprintf_r+0x130>
 8005e90:	9105      	str	r1, [sp, #20]
 8005e92:	e7c3      	b.n	8005e1c <_svfiprintf_r+0x130>
 8005e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e98:	4604      	mov	r4, r0
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e7f0      	b.n	8005e80 <_svfiprintf_r+0x194>
 8005e9e:	ab03      	add	r3, sp, #12
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <_svfiprintf_r+0x1f8>)
 8005ea6:	a904      	add	r1, sp, #16
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7fd ff8f 	bl	8003dcc <_printf_float>
 8005eae:	1c42      	adds	r2, r0, #1
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	d1d6      	bne.n	8005e62 <_svfiprintf_r+0x176>
 8005eb4:	89ab      	ldrh	r3, [r5, #12]
 8005eb6:	065b      	lsls	r3, r3, #25
 8005eb8:	f53f af2c 	bmi.w	8005d14 <_svfiprintf_r+0x28>
 8005ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ebe:	b01d      	add	sp, #116	; 0x74
 8005ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec4:	ab03      	add	r3, sp, #12
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	462a      	mov	r2, r5
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <_svfiprintf_r+0x1f8>)
 8005ecc:	a904      	add	r1, sp, #16
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f7fe fa20 	bl	8004314 <_printf_i>
 8005ed4:	e7eb      	b.n	8005eae <_svfiprintf_r+0x1c2>
 8005ed6:	bf00      	nop
 8005ed8:	0800731c 	.word	0x0800731c
 8005edc:	08007326 	.word	0x08007326
 8005ee0:	08003dcd 	.word	0x08003dcd
 8005ee4:	08005c35 	.word	0x08005c35
 8005ee8:	08007322 	.word	0x08007322

08005eec <_sbrk_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4d06      	ldr	r5, [pc, #24]	; (8005f08 <_sbrk_r+0x1c>)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	4608      	mov	r0, r1
 8005ef6:	602b      	str	r3, [r5, #0]
 8005ef8:	f7fb fa06 	bl	8001308 <_sbrk>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	d102      	bne.n	8005f06 <_sbrk_r+0x1a>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	b103      	cbz	r3, 8005f06 <_sbrk_r+0x1a>
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	bd38      	pop	{r3, r4, r5, pc}
 8005f08:	20000458 	.word	0x20000458

08005f0c <__assert_func>:
 8005f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f0e:	4614      	mov	r4, r2
 8005f10:	461a      	mov	r2, r3
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <__assert_func+0x2c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4605      	mov	r5, r0
 8005f18:	68d8      	ldr	r0, [r3, #12]
 8005f1a:	b14c      	cbz	r4, 8005f30 <__assert_func+0x24>
 8005f1c:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <__assert_func+0x30>)
 8005f1e:	9100      	str	r1, [sp, #0]
 8005f20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f24:	4906      	ldr	r1, [pc, #24]	; (8005f40 <__assert_func+0x34>)
 8005f26:	462b      	mov	r3, r5
 8005f28:	f000 f80e 	bl	8005f48 <fiprintf>
 8005f2c:	f000 faac 	bl	8006488 <abort>
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <__assert_func+0x38>)
 8005f32:	461c      	mov	r4, r3
 8005f34:	e7f3      	b.n	8005f1e <__assert_func+0x12>
 8005f36:	bf00      	nop
 8005f38:	2000004c 	.word	0x2000004c
 8005f3c:	0800732d 	.word	0x0800732d
 8005f40:	0800733a 	.word	0x0800733a
 8005f44:	08007368 	.word	0x08007368

08005f48 <fiprintf>:
 8005f48:	b40e      	push	{r1, r2, r3}
 8005f4a:	b503      	push	{r0, r1, lr}
 8005f4c:	4601      	mov	r1, r0
 8005f4e:	ab03      	add	r3, sp, #12
 8005f50:	4805      	ldr	r0, [pc, #20]	; (8005f68 <fiprintf+0x20>)
 8005f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f56:	6800      	ldr	r0, [r0, #0]
 8005f58:	9301      	str	r3, [sp, #4]
 8005f5a:	f000 f897 	bl	800608c <_vfiprintf_r>
 8005f5e:	b002      	add	sp, #8
 8005f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f64:	b003      	add	sp, #12
 8005f66:	4770      	bx	lr
 8005f68:	2000004c 	.word	0x2000004c

08005f6c <__ascii_mbtowc>:
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	b901      	cbnz	r1, 8005f72 <__ascii_mbtowc+0x6>
 8005f70:	a901      	add	r1, sp, #4
 8005f72:	b142      	cbz	r2, 8005f86 <__ascii_mbtowc+0x1a>
 8005f74:	b14b      	cbz	r3, 8005f8a <__ascii_mbtowc+0x1e>
 8005f76:	7813      	ldrb	r3, [r2, #0]
 8005f78:	600b      	str	r3, [r1, #0]
 8005f7a:	7812      	ldrb	r2, [r2, #0]
 8005f7c:	1e10      	subs	r0, r2, #0
 8005f7e:	bf18      	it	ne
 8005f80:	2001      	movne	r0, #1
 8005f82:	b002      	add	sp, #8
 8005f84:	4770      	bx	lr
 8005f86:	4610      	mov	r0, r2
 8005f88:	e7fb      	b.n	8005f82 <__ascii_mbtowc+0x16>
 8005f8a:	f06f 0001 	mvn.w	r0, #1
 8005f8e:	e7f8      	b.n	8005f82 <__ascii_mbtowc+0x16>

08005f90 <memmove>:
 8005f90:	4288      	cmp	r0, r1
 8005f92:	b510      	push	{r4, lr}
 8005f94:	eb01 0402 	add.w	r4, r1, r2
 8005f98:	d902      	bls.n	8005fa0 <memmove+0x10>
 8005f9a:	4284      	cmp	r4, r0
 8005f9c:	4623      	mov	r3, r4
 8005f9e:	d807      	bhi.n	8005fb0 <memmove+0x20>
 8005fa0:	1e43      	subs	r3, r0, #1
 8005fa2:	42a1      	cmp	r1, r4
 8005fa4:	d008      	beq.n	8005fb8 <memmove+0x28>
 8005fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fae:	e7f8      	b.n	8005fa2 <memmove+0x12>
 8005fb0:	4402      	add	r2, r0
 8005fb2:	4601      	mov	r1, r0
 8005fb4:	428a      	cmp	r2, r1
 8005fb6:	d100      	bne.n	8005fba <memmove+0x2a>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fc2:	e7f7      	b.n	8005fb4 <memmove+0x24>

08005fc4 <__malloc_lock>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	; (8005fcc <__malloc_lock+0x8>)
 8005fc6:	f000 bc1f 	b.w	8006808 <__retarget_lock_acquire_recursive>
 8005fca:	bf00      	nop
 8005fcc:	2000045c 	.word	0x2000045c

08005fd0 <__malloc_unlock>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	; (8005fd8 <__malloc_unlock+0x8>)
 8005fd2:	f000 bc1a 	b.w	800680a <__retarget_lock_release_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	2000045c 	.word	0x2000045c

08005fdc <_realloc_r>:
 8005fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	4614      	mov	r4, r2
 8005fe4:	460e      	mov	r6, r1
 8005fe6:	b921      	cbnz	r1, 8005ff2 <_realloc_r+0x16>
 8005fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fec:	4611      	mov	r1, r2
 8005fee:	f7ff bdad 	b.w	8005b4c <_malloc_r>
 8005ff2:	b92a      	cbnz	r2, 8006000 <_realloc_r+0x24>
 8005ff4:	f7ff fd3e 	bl	8005a74 <_free_r>
 8005ff8:	4625      	mov	r5, r4
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006000:	f000 fc6a 	bl	80068d8 <_malloc_usable_size_r>
 8006004:	4284      	cmp	r4, r0
 8006006:	4607      	mov	r7, r0
 8006008:	d802      	bhi.n	8006010 <_realloc_r+0x34>
 800600a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800600e:	d812      	bhi.n	8006036 <_realloc_r+0x5a>
 8006010:	4621      	mov	r1, r4
 8006012:	4640      	mov	r0, r8
 8006014:	f7ff fd9a 	bl	8005b4c <_malloc_r>
 8006018:	4605      	mov	r5, r0
 800601a:	2800      	cmp	r0, #0
 800601c:	d0ed      	beq.n	8005ffa <_realloc_r+0x1e>
 800601e:	42bc      	cmp	r4, r7
 8006020:	4622      	mov	r2, r4
 8006022:	4631      	mov	r1, r6
 8006024:	bf28      	it	cs
 8006026:	463a      	movcs	r2, r7
 8006028:	f7ff f97c 	bl	8005324 <memcpy>
 800602c:	4631      	mov	r1, r6
 800602e:	4640      	mov	r0, r8
 8006030:	f7ff fd20 	bl	8005a74 <_free_r>
 8006034:	e7e1      	b.n	8005ffa <_realloc_r+0x1e>
 8006036:	4635      	mov	r5, r6
 8006038:	e7df      	b.n	8005ffa <_realloc_r+0x1e>

0800603a <__sfputc_r>:
 800603a:	6893      	ldr	r3, [r2, #8]
 800603c:	3b01      	subs	r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	b410      	push	{r4}
 8006042:	6093      	str	r3, [r2, #8]
 8006044:	da08      	bge.n	8006058 <__sfputc_r+0x1e>
 8006046:	6994      	ldr	r4, [r2, #24]
 8006048:	42a3      	cmp	r3, r4
 800604a:	db01      	blt.n	8006050 <__sfputc_r+0x16>
 800604c:	290a      	cmp	r1, #10
 800604e:	d103      	bne.n	8006058 <__sfputc_r+0x1e>
 8006050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006054:	f000 b94a 	b.w	80062ec <__swbuf_r>
 8006058:	6813      	ldr	r3, [r2, #0]
 800605a:	1c58      	adds	r0, r3, #1
 800605c:	6010      	str	r0, [r2, #0]
 800605e:	7019      	strb	r1, [r3, #0]
 8006060:	4608      	mov	r0, r1
 8006062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006066:	4770      	bx	lr

08006068 <__sfputs_r>:
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	4606      	mov	r6, r0
 800606c:	460f      	mov	r7, r1
 800606e:	4614      	mov	r4, r2
 8006070:	18d5      	adds	r5, r2, r3
 8006072:	42ac      	cmp	r4, r5
 8006074:	d101      	bne.n	800607a <__sfputs_r+0x12>
 8006076:	2000      	movs	r0, #0
 8006078:	e007      	b.n	800608a <__sfputs_r+0x22>
 800607a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607e:	463a      	mov	r2, r7
 8006080:	4630      	mov	r0, r6
 8006082:	f7ff ffda 	bl	800603a <__sfputc_r>
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	d1f3      	bne.n	8006072 <__sfputs_r+0xa>
 800608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800608c <_vfiprintf_r>:
 800608c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006090:	460d      	mov	r5, r1
 8006092:	b09d      	sub	sp, #116	; 0x74
 8006094:	4614      	mov	r4, r2
 8006096:	4698      	mov	r8, r3
 8006098:	4606      	mov	r6, r0
 800609a:	b118      	cbz	r0, 80060a4 <_vfiprintf_r+0x18>
 800609c:	6983      	ldr	r3, [r0, #24]
 800609e:	b90b      	cbnz	r3, 80060a4 <_vfiprintf_r+0x18>
 80060a0:	f000 fb14 	bl	80066cc <__sinit>
 80060a4:	4b89      	ldr	r3, [pc, #548]	; (80062cc <_vfiprintf_r+0x240>)
 80060a6:	429d      	cmp	r5, r3
 80060a8:	d11b      	bne.n	80060e2 <_vfiprintf_r+0x56>
 80060aa:	6875      	ldr	r5, [r6, #4]
 80060ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060ae:	07d9      	lsls	r1, r3, #31
 80060b0:	d405      	bmi.n	80060be <_vfiprintf_r+0x32>
 80060b2:	89ab      	ldrh	r3, [r5, #12]
 80060b4:	059a      	lsls	r2, r3, #22
 80060b6:	d402      	bmi.n	80060be <_vfiprintf_r+0x32>
 80060b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ba:	f000 fba5 	bl	8006808 <__retarget_lock_acquire_recursive>
 80060be:	89ab      	ldrh	r3, [r5, #12]
 80060c0:	071b      	lsls	r3, r3, #28
 80060c2:	d501      	bpl.n	80060c8 <_vfiprintf_r+0x3c>
 80060c4:	692b      	ldr	r3, [r5, #16]
 80060c6:	b9eb      	cbnz	r3, 8006104 <_vfiprintf_r+0x78>
 80060c8:	4629      	mov	r1, r5
 80060ca:	4630      	mov	r0, r6
 80060cc:	f000 f96e 	bl	80063ac <__swsetup_r>
 80060d0:	b1c0      	cbz	r0, 8006104 <_vfiprintf_r+0x78>
 80060d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060d4:	07dc      	lsls	r4, r3, #31
 80060d6:	d50e      	bpl.n	80060f6 <_vfiprintf_r+0x6a>
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	b01d      	add	sp, #116	; 0x74
 80060de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e2:	4b7b      	ldr	r3, [pc, #492]	; (80062d0 <_vfiprintf_r+0x244>)
 80060e4:	429d      	cmp	r5, r3
 80060e6:	d101      	bne.n	80060ec <_vfiprintf_r+0x60>
 80060e8:	68b5      	ldr	r5, [r6, #8]
 80060ea:	e7df      	b.n	80060ac <_vfiprintf_r+0x20>
 80060ec:	4b79      	ldr	r3, [pc, #484]	; (80062d4 <_vfiprintf_r+0x248>)
 80060ee:	429d      	cmp	r5, r3
 80060f0:	bf08      	it	eq
 80060f2:	68f5      	ldreq	r5, [r6, #12]
 80060f4:	e7da      	b.n	80060ac <_vfiprintf_r+0x20>
 80060f6:	89ab      	ldrh	r3, [r5, #12]
 80060f8:	0598      	lsls	r0, r3, #22
 80060fa:	d4ed      	bmi.n	80060d8 <_vfiprintf_r+0x4c>
 80060fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060fe:	f000 fb84 	bl	800680a <__retarget_lock_release_recursive>
 8006102:	e7e9      	b.n	80060d8 <_vfiprintf_r+0x4c>
 8006104:	2300      	movs	r3, #0
 8006106:	9309      	str	r3, [sp, #36]	; 0x24
 8006108:	2320      	movs	r3, #32
 800610a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800610e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006112:	2330      	movs	r3, #48	; 0x30
 8006114:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062d8 <_vfiprintf_r+0x24c>
 8006118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800611c:	f04f 0901 	mov.w	r9, #1
 8006120:	4623      	mov	r3, r4
 8006122:	469a      	mov	sl, r3
 8006124:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006128:	b10a      	cbz	r2, 800612e <_vfiprintf_r+0xa2>
 800612a:	2a25      	cmp	r2, #37	; 0x25
 800612c:	d1f9      	bne.n	8006122 <_vfiprintf_r+0x96>
 800612e:	ebba 0b04 	subs.w	fp, sl, r4
 8006132:	d00b      	beq.n	800614c <_vfiprintf_r+0xc0>
 8006134:	465b      	mov	r3, fp
 8006136:	4622      	mov	r2, r4
 8006138:	4629      	mov	r1, r5
 800613a:	4630      	mov	r0, r6
 800613c:	f7ff ff94 	bl	8006068 <__sfputs_r>
 8006140:	3001      	adds	r0, #1
 8006142:	f000 80aa 	beq.w	800629a <_vfiprintf_r+0x20e>
 8006146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006148:	445a      	add	r2, fp
 800614a:	9209      	str	r2, [sp, #36]	; 0x24
 800614c:	f89a 3000 	ldrb.w	r3, [sl]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80a2 	beq.w	800629a <_vfiprintf_r+0x20e>
 8006156:	2300      	movs	r3, #0
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006160:	f10a 0a01 	add.w	sl, sl, #1
 8006164:	9304      	str	r3, [sp, #16]
 8006166:	9307      	str	r3, [sp, #28]
 8006168:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800616c:	931a      	str	r3, [sp, #104]	; 0x68
 800616e:	4654      	mov	r4, sl
 8006170:	2205      	movs	r2, #5
 8006172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006176:	4858      	ldr	r0, [pc, #352]	; (80062d8 <_vfiprintf_r+0x24c>)
 8006178:	f7fa f83a 	bl	80001f0 <memchr>
 800617c:	9a04      	ldr	r2, [sp, #16]
 800617e:	b9d8      	cbnz	r0, 80061b8 <_vfiprintf_r+0x12c>
 8006180:	06d1      	lsls	r1, r2, #27
 8006182:	bf44      	itt	mi
 8006184:	2320      	movmi	r3, #32
 8006186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800618a:	0713      	lsls	r3, r2, #28
 800618c:	bf44      	itt	mi
 800618e:	232b      	movmi	r3, #43	; 0x2b
 8006190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006194:	f89a 3000 	ldrb.w	r3, [sl]
 8006198:	2b2a      	cmp	r3, #42	; 0x2a
 800619a:	d015      	beq.n	80061c8 <_vfiprintf_r+0x13c>
 800619c:	9a07      	ldr	r2, [sp, #28]
 800619e:	4654      	mov	r4, sl
 80061a0:	2000      	movs	r0, #0
 80061a2:	f04f 0c0a 	mov.w	ip, #10
 80061a6:	4621      	mov	r1, r4
 80061a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061ac:	3b30      	subs	r3, #48	; 0x30
 80061ae:	2b09      	cmp	r3, #9
 80061b0:	d94e      	bls.n	8006250 <_vfiprintf_r+0x1c4>
 80061b2:	b1b0      	cbz	r0, 80061e2 <_vfiprintf_r+0x156>
 80061b4:	9207      	str	r2, [sp, #28]
 80061b6:	e014      	b.n	80061e2 <_vfiprintf_r+0x156>
 80061b8:	eba0 0308 	sub.w	r3, r0, r8
 80061bc:	fa09 f303 	lsl.w	r3, r9, r3
 80061c0:	4313      	orrs	r3, r2
 80061c2:	9304      	str	r3, [sp, #16]
 80061c4:	46a2      	mov	sl, r4
 80061c6:	e7d2      	b.n	800616e <_vfiprintf_r+0xe2>
 80061c8:	9b03      	ldr	r3, [sp, #12]
 80061ca:	1d19      	adds	r1, r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	9103      	str	r1, [sp, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bfbb      	ittet	lt
 80061d4:	425b      	neglt	r3, r3
 80061d6:	f042 0202 	orrlt.w	r2, r2, #2
 80061da:	9307      	strge	r3, [sp, #28]
 80061dc:	9307      	strlt	r3, [sp, #28]
 80061de:	bfb8      	it	lt
 80061e0:	9204      	strlt	r2, [sp, #16]
 80061e2:	7823      	ldrb	r3, [r4, #0]
 80061e4:	2b2e      	cmp	r3, #46	; 0x2e
 80061e6:	d10c      	bne.n	8006202 <_vfiprintf_r+0x176>
 80061e8:	7863      	ldrb	r3, [r4, #1]
 80061ea:	2b2a      	cmp	r3, #42	; 0x2a
 80061ec:	d135      	bne.n	800625a <_vfiprintf_r+0x1ce>
 80061ee:	9b03      	ldr	r3, [sp, #12]
 80061f0:	1d1a      	adds	r2, r3, #4
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	9203      	str	r2, [sp, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bfb8      	it	lt
 80061fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80061fe:	3402      	adds	r4, #2
 8006200:	9305      	str	r3, [sp, #20]
 8006202:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062e8 <_vfiprintf_r+0x25c>
 8006206:	7821      	ldrb	r1, [r4, #0]
 8006208:	2203      	movs	r2, #3
 800620a:	4650      	mov	r0, sl
 800620c:	f7f9 fff0 	bl	80001f0 <memchr>
 8006210:	b140      	cbz	r0, 8006224 <_vfiprintf_r+0x198>
 8006212:	2340      	movs	r3, #64	; 0x40
 8006214:	eba0 000a 	sub.w	r0, r0, sl
 8006218:	fa03 f000 	lsl.w	r0, r3, r0
 800621c:	9b04      	ldr	r3, [sp, #16]
 800621e:	4303      	orrs	r3, r0
 8006220:	3401      	adds	r4, #1
 8006222:	9304      	str	r3, [sp, #16]
 8006224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006228:	482c      	ldr	r0, [pc, #176]	; (80062dc <_vfiprintf_r+0x250>)
 800622a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800622e:	2206      	movs	r2, #6
 8006230:	f7f9 ffde 	bl	80001f0 <memchr>
 8006234:	2800      	cmp	r0, #0
 8006236:	d03f      	beq.n	80062b8 <_vfiprintf_r+0x22c>
 8006238:	4b29      	ldr	r3, [pc, #164]	; (80062e0 <_vfiprintf_r+0x254>)
 800623a:	bb1b      	cbnz	r3, 8006284 <_vfiprintf_r+0x1f8>
 800623c:	9b03      	ldr	r3, [sp, #12]
 800623e:	3307      	adds	r3, #7
 8006240:	f023 0307 	bic.w	r3, r3, #7
 8006244:	3308      	adds	r3, #8
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624a:	443b      	add	r3, r7
 800624c:	9309      	str	r3, [sp, #36]	; 0x24
 800624e:	e767      	b.n	8006120 <_vfiprintf_r+0x94>
 8006250:	fb0c 3202 	mla	r2, ip, r2, r3
 8006254:	460c      	mov	r4, r1
 8006256:	2001      	movs	r0, #1
 8006258:	e7a5      	b.n	80061a6 <_vfiprintf_r+0x11a>
 800625a:	2300      	movs	r3, #0
 800625c:	3401      	adds	r4, #1
 800625e:	9305      	str	r3, [sp, #20]
 8006260:	4619      	mov	r1, r3
 8006262:	f04f 0c0a 	mov.w	ip, #10
 8006266:	4620      	mov	r0, r4
 8006268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800626c:	3a30      	subs	r2, #48	; 0x30
 800626e:	2a09      	cmp	r2, #9
 8006270:	d903      	bls.n	800627a <_vfiprintf_r+0x1ee>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0c5      	beq.n	8006202 <_vfiprintf_r+0x176>
 8006276:	9105      	str	r1, [sp, #20]
 8006278:	e7c3      	b.n	8006202 <_vfiprintf_r+0x176>
 800627a:	fb0c 2101 	mla	r1, ip, r1, r2
 800627e:	4604      	mov	r4, r0
 8006280:	2301      	movs	r3, #1
 8006282:	e7f0      	b.n	8006266 <_vfiprintf_r+0x1da>
 8006284:	ab03      	add	r3, sp, #12
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	462a      	mov	r2, r5
 800628a:	4b16      	ldr	r3, [pc, #88]	; (80062e4 <_vfiprintf_r+0x258>)
 800628c:	a904      	add	r1, sp, #16
 800628e:	4630      	mov	r0, r6
 8006290:	f7fd fd9c 	bl	8003dcc <_printf_float>
 8006294:	4607      	mov	r7, r0
 8006296:	1c78      	adds	r0, r7, #1
 8006298:	d1d6      	bne.n	8006248 <_vfiprintf_r+0x1bc>
 800629a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800629c:	07d9      	lsls	r1, r3, #31
 800629e:	d405      	bmi.n	80062ac <_vfiprintf_r+0x220>
 80062a0:	89ab      	ldrh	r3, [r5, #12]
 80062a2:	059a      	lsls	r2, r3, #22
 80062a4:	d402      	bmi.n	80062ac <_vfiprintf_r+0x220>
 80062a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062a8:	f000 faaf 	bl	800680a <__retarget_lock_release_recursive>
 80062ac:	89ab      	ldrh	r3, [r5, #12]
 80062ae:	065b      	lsls	r3, r3, #25
 80062b0:	f53f af12 	bmi.w	80060d8 <_vfiprintf_r+0x4c>
 80062b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062b6:	e711      	b.n	80060dc <_vfiprintf_r+0x50>
 80062b8:	ab03      	add	r3, sp, #12
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	462a      	mov	r2, r5
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <_vfiprintf_r+0x258>)
 80062c0:	a904      	add	r1, sp, #16
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7fe f826 	bl	8004314 <_printf_i>
 80062c8:	e7e4      	b.n	8006294 <_vfiprintf_r+0x208>
 80062ca:	bf00      	nop
 80062cc:	08007494 	.word	0x08007494
 80062d0:	080074b4 	.word	0x080074b4
 80062d4:	08007474 	.word	0x08007474
 80062d8:	0800731c 	.word	0x0800731c
 80062dc:	08007326 	.word	0x08007326
 80062e0:	08003dcd 	.word	0x08003dcd
 80062e4:	08006069 	.word	0x08006069
 80062e8:	08007322 	.word	0x08007322

080062ec <__swbuf_r>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	460e      	mov	r6, r1
 80062f0:	4614      	mov	r4, r2
 80062f2:	4605      	mov	r5, r0
 80062f4:	b118      	cbz	r0, 80062fe <__swbuf_r+0x12>
 80062f6:	6983      	ldr	r3, [r0, #24]
 80062f8:	b90b      	cbnz	r3, 80062fe <__swbuf_r+0x12>
 80062fa:	f000 f9e7 	bl	80066cc <__sinit>
 80062fe:	4b21      	ldr	r3, [pc, #132]	; (8006384 <__swbuf_r+0x98>)
 8006300:	429c      	cmp	r4, r3
 8006302:	d12b      	bne.n	800635c <__swbuf_r+0x70>
 8006304:	686c      	ldr	r4, [r5, #4]
 8006306:	69a3      	ldr	r3, [r4, #24]
 8006308:	60a3      	str	r3, [r4, #8]
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	071a      	lsls	r2, r3, #28
 800630e:	d52f      	bpl.n	8006370 <__swbuf_r+0x84>
 8006310:	6923      	ldr	r3, [r4, #16]
 8006312:	b36b      	cbz	r3, 8006370 <__swbuf_r+0x84>
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	6820      	ldr	r0, [r4, #0]
 8006318:	1ac0      	subs	r0, r0, r3
 800631a:	6963      	ldr	r3, [r4, #20]
 800631c:	b2f6      	uxtb	r6, r6
 800631e:	4283      	cmp	r3, r0
 8006320:	4637      	mov	r7, r6
 8006322:	dc04      	bgt.n	800632e <__swbuf_r+0x42>
 8006324:	4621      	mov	r1, r4
 8006326:	4628      	mov	r0, r5
 8006328:	f000 f93c 	bl	80065a4 <_fflush_r>
 800632c:	bb30      	cbnz	r0, 800637c <__swbuf_r+0x90>
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	3b01      	subs	r3, #1
 8006332:	60a3      	str	r3, [r4, #8]
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	6022      	str	r2, [r4, #0]
 800633a:	701e      	strb	r6, [r3, #0]
 800633c:	6963      	ldr	r3, [r4, #20]
 800633e:	3001      	adds	r0, #1
 8006340:	4283      	cmp	r3, r0
 8006342:	d004      	beq.n	800634e <__swbuf_r+0x62>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	07db      	lsls	r3, r3, #31
 8006348:	d506      	bpl.n	8006358 <__swbuf_r+0x6c>
 800634a:	2e0a      	cmp	r6, #10
 800634c:	d104      	bne.n	8006358 <__swbuf_r+0x6c>
 800634e:	4621      	mov	r1, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f000 f927 	bl	80065a4 <_fflush_r>
 8006356:	b988      	cbnz	r0, 800637c <__swbuf_r+0x90>
 8006358:	4638      	mov	r0, r7
 800635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <__swbuf_r+0x9c>)
 800635e:	429c      	cmp	r4, r3
 8006360:	d101      	bne.n	8006366 <__swbuf_r+0x7a>
 8006362:	68ac      	ldr	r4, [r5, #8]
 8006364:	e7cf      	b.n	8006306 <__swbuf_r+0x1a>
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <__swbuf_r+0xa0>)
 8006368:	429c      	cmp	r4, r3
 800636a:	bf08      	it	eq
 800636c:	68ec      	ldreq	r4, [r5, #12]
 800636e:	e7ca      	b.n	8006306 <__swbuf_r+0x1a>
 8006370:	4621      	mov	r1, r4
 8006372:	4628      	mov	r0, r5
 8006374:	f000 f81a 	bl	80063ac <__swsetup_r>
 8006378:	2800      	cmp	r0, #0
 800637a:	d0cb      	beq.n	8006314 <__swbuf_r+0x28>
 800637c:	f04f 37ff 	mov.w	r7, #4294967295
 8006380:	e7ea      	b.n	8006358 <__swbuf_r+0x6c>
 8006382:	bf00      	nop
 8006384:	08007494 	.word	0x08007494
 8006388:	080074b4 	.word	0x080074b4
 800638c:	08007474 	.word	0x08007474

08006390 <__ascii_wctomb>:
 8006390:	b149      	cbz	r1, 80063a6 <__ascii_wctomb+0x16>
 8006392:	2aff      	cmp	r2, #255	; 0xff
 8006394:	bf85      	ittet	hi
 8006396:	238a      	movhi	r3, #138	; 0x8a
 8006398:	6003      	strhi	r3, [r0, #0]
 800639a:	700a      	strbls	r2, [r1, #0]
 800639c:	f04f 30ff 	movhi.w	r0, #4294967295
 80063a0:	bf98      	it	ls
 80063a2:	2001      	movls	r0, #1
 80063a4:	4770      	bx	lr
 80063a6:	4608      	mov	r0, r1
 80063a8:	4770      	bx	lr
	...

080063ac <__swsetup_r>:
 80063ac:	4b32      	ldr	r3, [pc, #200]	; (8006478 <__swsetup_r+0xcc>)
 80063ae:	b570      	push	{r4, r5, r6, lr}
 80063b0:	681d      	ldr	r5, [r3, #0]
 80063b2:	4606      	mov	r6, r0
 80063b4:	460c      	mov	r4, r1
 80063b6:	b125      	cbz	r5, 80063c2 <__swsetup_r+0x16>
 80063b8:	69ab      	ldr	r3, [r5, #24]
 80063ba:	b913      	cbnz	r3, 80063c2 <__swsetup_r+0x16>
 80063bc:	4628      	mov	r0, r5
 80063be:	f000 f985 	bl	80066cc <__sinit>
 80063c2:	4b2e      	ldr	r3, [pc, #184]	; (800647c <__swsetup_r+0xd0>)
 80063c4:	429c      	cmp	r4, r3
 80063c6:	d10f      	bne.n	80063e8 <__swsetup_r+0x3c>
 80063c8:	686c      	ldr	r4, [r5, #4]
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063d0:	0719      	lsls	r1, r3, #28
 80063d2:	d42c      	bmi.n	800642e <__swsetup_r+0x82>
 80063d4:	06dd      	lsls	r5, r3, #27
 80063d6:	d411      	bmi.n	80063fc <__swsetup_r+0x50>
 80063d8:	2309      	movs	r3, #9
 80063da:	6033      	str	r3, [r6, #0]
 80063dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063e0:	81a3      	strh	r3, [r4, #12]
 80063e2:	f04f 30ff 	mov.w	r0, #4294967295
 80063e6:	e03e      	b.n	8006466 <__swsetup_r+0xba>
 80063e8:	4b25      	ldr	r3, [pc, #148]	; (8006480 <__swsetup_r+0xd4>)
 80063ea:	429c      	cmp	r4, r3
 80063ec:	d101      	bne.n	80063f2 <__swsetup_r+0x46>
 80063ee:	68ac      	ldr	r4, [r5, #8]
 80063f0:	e7eb      	b.n	80063ca <__swsetup_r+0x1e>
 80063f2:	4b24      	ldr	r3, [pc, #144]	; (8006484 <__swsetup_r+0xd8>)
 80063f4:	429c      	cmp	r4, r3
 80063f6:	bf08      	it	eq
 80063f8:	68ec      	ldreq	r4, [r5, #12]
 80063fa:	e7e6      	b.n	80063ca <__swsetup_r+0x1e>
 80063fc:	0758      	lsls	r0, r3, #29
 80063fe:	d512      	bpl.n	8006426 <__swsetup_r+0x7a>
 8006400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006402:	b141      	cbz	r1, 8006416 <__swsetup_r+0x6a>
 8006404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006408:	4299      	cmp	r1, r3
 800640a:	d002      	beq.n	8006412 <__swsetup_r+0x66>
 800640c:	4630      	mov	r0, r6
 800640e:	f7ff fb31 	bl	8005a74 <_free_r>
 8006412:	2300      	movs	r3, #0
 8006414:	6363      	str	r3, [r4, #52]	; 0x34
 8006416:	89a3      	ldrh	r3, [r4, #12]
 8006418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800641c:	81a3      	strh	r3, [r4, #12]
 800641e:	2300      	movs	r3, #0
 8006420:	6063      	str	r3, [r4, #4]
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	f043 0308 	orr.w	r3, r3, #8
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	b94b      	cbnz	r3, 8006446 <__swsetup_r+0x9a>
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643c:	d003      	beq.n	8006446 <__swsetup_r+0x9a>
 800643e:	4621      	mov	r1, r4
 8006440:	4630      	mov	r0, r6
 8006442:	f000 fa09 	bl	8006858 <__smakebuf_r>
 8006446:	89a0      	ldrh	r0, [r4, #12]
 8006448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800644c:	f010 0301 	ands.w	r3, r0, #1
 8006450:	d00a      	beq.n	8006468 <__swsetup_r+0xbc>
 8006452:	2300      	movs	r3, #0
 8006454:	60a3      	str	r3, [r4, #8]
 8006456:	6963      	ldr	r3, [r4, #20]
 8006458:	425b      	negs	r3, r3
 800645a:	61a3      	str	r3, [r4, #24]
 800645c:	6923      	ldr	r3, [r4, #16]
 800645e:	b943      	cbnz	r3, 8006472 <__swsetup_r+0xc6>
 8006460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006464:	d1ba      	bne.n	80063dc <__swsetup_r+0x30>
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	0781      	lsls	r1, r0, #30
 800646a:	bf58      	it	pl
 800646c:	6963      	ldrpl	r3, [r4, #20]
 800646e:	60a3      	str	r3, [r4, #8]
 8006470:	e7f4      	b.n	800645c <__swsetup_r+0xb0>
 8006472:	2000      	movs	r0, #0
 8006474:	e7f7      	b.n	8006466 <__swsetup_r+0xba>
 8006476:	bf00      	nop
 8006478:	2000004c 	.word	0x2000004c
 800647c:	08007494 	.word	0x08007494
 8006480:	080074b4 	.word	0x080074b4
 8006484:	08007474 	.word	0x08007474

08006488 <abort>:
 8006488:	b508      	push	{r3, lr}
 800648a:	2006      	movs	r0, #6
 800648c:	f000 fa54 	bl	8006938 <raise>
 8006490:	2001      	movs	r0, #1
 8006492:	f7fa fec1 	bl	8001218 <_exit>
	...

08006498 <__sflush_r>:
 8006498:	898a      	ldrh	r2, [r1, #12]
 800649a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649e:	4605      	mov	r5, r0
 80064a0:	0710      	lsls	r0, r2, #28
 80064a2:	460c      	mov	r4, r1
 80064a4:	d458      	bmi.n	8006558 <__sflush_r+0xc0>
 80064a6:	684b      	ldr	r3, [r1, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	dc05      	bgt.n	80064b8 <__sflush_r+0x20>
 80064ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	dc02      	bgt.n	80064b8 <__sflush_r+0x20>
 80064b2:	2000      	movs	r0, #0
 80064b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ba:	2e00      	cmp	r6, #0
 80064bc:	d0f9      	beq.n	80064b2 <__sflush_r+0x1a>
 80064be:	2300      	movs	r3, #0
 80064c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064c4:	682f      	ldr	r7, [r5, #0]
 80064c6:	602b      	str	r3, [r5, #0]
 80064c8:	d032      	beq.n	8006530 <__sflush_r+0x98>
 80064ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	075a      	lsls	r2, r3, #29
 80064d0:	d505      	bpl.n	80064de <__sflush_r+0x46>
 80064d2:	6863      	ldr	r3, [r4, #4]
 80064d4:	1ac0      	subs	r0, r0, r3
 80064d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064d8:	b10b      	cbz	r3, 80064de <__sflush_r+0x46>
 80064da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064dc:	1ac0      	subs	r0, r0, r3
 80064de:	2300      	movs	r3, #0
 80064e0:	4602      	mov	r2, r0
 80064e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064e4:	6a21      	ldr	r1, [r4, #32]
 80064e6:	4628      	mov	r0, r5
 80064e8:	47b0      	blx	r6
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	d106      	bne.n	80064fe <__sflush_r+0x66>
 80064f0:	6829      	ldr	r1, [r5, #0]
 80064f2:	291d      	cmp	r1, #29
 80064f4:	d82c      	bhi.n	8006550 <__sflush_r+0xb8>
 80064f6:	4a2a      	ldr	r2, [pc, #168]	; (80065a0 <__sflush_r+0x108>)
 80064f8:	40ca      	lsrs	r2, r1
 80064fa:	07d6      	lsls	r6, r2, #31
 80064fc:	d528      	bpl.n	8006550 <__sflush_r+0xb8>
 80064fe:	2200      	movs	r2, #0
 8006500:	6062      	str	r2, [r4, #4]
 8006502:	04d9      	lsls	r1, r3, #19
 8006504:	6922      	ldr	r2, [r4, #16]
 8006506:	6022      	str	r2, [r4, #0]
 8006508:	d504      	bpl.n	8006514 <__sflush_r+0x7c>
 800650a:	1c42      	adds	r2, r0, #1
 800650c:	d101      	bne.n	8006512 <__sflush_r+0x7a>
 800650e:	682b      	ldr	r3, [r5, #0]
 8006510:	b903      	cbnz	r3, 8006514 <__sflush_r+0x7c>
 8006512:	6560      	str	r0, [r4, #84]	; 0x54
 8006514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006516:	602f      	str	r7, [r5, #0]
 8006518:	2900      	cmp	r1, #0
 800651a:	d0ca      	beq.n	80064b2 <__sflush_r+0x1a>
 800651c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006520:	4299      	cmp	r1, r3
 8006522:	d002      	beq.n	800652a <__sflush_r+0x92>
 8006524:	4628      	mov	r0, r5
 8006526:	f7ff faa5 	bl	8005a74 <_free_r>
 800652a:	2000      	movs	r0, #0
 800652c:	6360      	str	r0, [r4, #52]	; 0x34
 800652e:	e7c1      	b.n	80064b4 <__sflush_r+0x1c>
 8006530:	6a21      	ldr	r1, [r4, #32]
 8006532:	2301      	movs	r3, #1
 8006534:	4628      	mov	r0, r5
 8006536:	47b0      	blx	r6
 8006538:	1c41      	adds	r1, r0, #1
 800653a:	d1c7      	bne.n	80064cc <__sflush_r+0x34>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0c4      	beq.n	80064cc <__sflush_r+0x34>
 8006542:	2b1d      	cmp	r3, #29
 8006544:	d001      	beq.n	800654a <__sflush_r+0xb2>
 8006546:	2b16      	cmp	r3, #22
 8006548:	d101      	bne.n	800654e <__sflush_r+0xb6>
 800654a:	602f      	str	r7, [r5, #0]
 800654c:	e7b1      	b.n	80064b2 <__sflush_r+0x1a>
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006554:	81a3      	strh	r3, [r4, #12]
 8006556:	e7ad      	b.n	80064b4 <__sflush_r+0x1c>
 8006558:	690f      	ldr	r7, [r1, #16]
 800655a:	2f00      	cmp	r7, #0
 800655c:	d0a9      	beq.n	80064b2 <__sflush_r+0x1a>
 800655e:	0793      	lsls	r3, r2, #30
 8006560:	680e      	ldr	r6, [r1, #0]
 8006562:	bf08      	it	eq
 8006564:	694b      	ldreq	r3, [r1, #20]
 8006566:	600f      	str	r7, [r1, #0]
 8006568:	bf18      	it	ne
 800656a:	2300      	movne	r3, #0
 800656c:	eba6 0807 	sub.w	r8, r6, r7
 8006570:	608b      	str	r3, [r1, #8]
 8006572:	f1b8 0f00 	cmp.w	r8, #0
 8006576:	dd9c      	ble.n	80064b2 <__sflush_r+0x1a>
 8006578:	6a21      	ldr	r1, [r4, #32]
 800657a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800657c:	4643      	mov	r3, r8
 800657e:	463a      	mov	r2, r7
 8006580:	4628      	mov	r0, r5
 8006582:	47b0      	blx	r6
 8006584:	2800      	cmp	r0, #0
 8006586:	dc06      	bgt.n	8006596 <__sflush_r+0xfe>
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	e78e      	b.n	80064b4 <__sflush_r+0x1c>
 8006596:	4407      	add	r7, r0
 8006598:	eba8 0800 	sub.w	r8, r8, r0
 800659c:	e7e9      	b.n	8006572 <__sflush_r+0xda>
 800659e:	bf00      	nop
 80065a0:	20400001 	.word	0x20400001

080065a4 <_fflush_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	690b      	ldr	r3, [r1, #16]
 80065a8:	4605      	mov	r5, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	b913      	cbnz	r3, 80065b4 <_fflush_r+0x10>
 80065ae:	2500      	movs	r5, #0
 80065b0:	4628      	mov	r0, r5
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	b118      	cbz	r0, 80065be <_fflush_r+0x1a>
 80065b6:	6983      	ldr	r3, [r0, #24]
 80065b8:	b90b      	cbnz	r3, 80065be <_fflush_r+0x1a>
 80065ba:	f000 f887 	bl	80066cc <__sinit>
 80065be:	4b14      	ldr	r3, [pc, #80]	; (8006610 <_fflush_r+0x6c>)
 80065c0:	429c      	cmp	r4, r3
 80065c2:	d11b      	bne.n	80065fc <_fflush_r+0x58>
 80065c4:	686c      	ldr	r4, [r5, #4]
 80065c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0ef      	beq.n	80065ae <_fflush_r+0xa>
 80065ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065d0:	07d0      	lsls	r0, r2, #31
 80065d2:	d404      	bmi.n	80065de <_fflush_r+0x3a>
 80065d4:	0599      	lsls	r1, r3, #22
 80065d6:	d402      	bmi.n	80065de <_fflush_r+0x3a>
 80065d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065da:	f000 f915 	bl	8006808 <__retarget_lock_acquire_recursive>
 80065de:	4628      	mov	r0, r5
 80065e0:	4621      	mov	r1, r4
 80065e2:	f7ff ff59 	bl	8006498 <__sflush_r>
 80065e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065e8:	07da      	lsls	r2, r3, #31
 80065ea:	4605      	mov	r5, r0
 80065ec:	d4e0      	bmi.n	80065b0 <_fflush_r+0xc>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	059b      	lsls	r3, r3, #22
 80065f2:	d4dd      	bmi.n	80065b0 <_fflush_r+0xc>
 80065f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065f6:	f000 f908 	bl	800680a <__retarget_lock_release_recursive>
 80065fa:	e7d9      	b.n	80065b0 <_fflush_r+0xc>
 80065fc:	4b05      	ldr	r3, [pc, #20]	; (8006614 <_fflush_r+0x70>)
 80065fe:	429c      	cmp	r4, r3
 8006600:	d101      	bne.n	8006606 <_fflush_r+0x62>
 8006602:	68ac      	ldr	r4, [r5, #8]
 8006604:	e7df      	b.n	80065c6 <_fflush_r+0x22>
 8006606:	4b04      	ldr	r3, [pc, #16]	; (8006618 <_fflush_r+0x74>)
 8006608:	429c      	cmp	r4, r3
 800660a:	bf08      	it	eq
 800660c:	68ec      	ldreq	r4, [r5, #12]
 800660e:	e7da      	b.n	80065c6 <_fflush_r+0x22>
 8006610:	08007494 	.word	0x08007494
 8006614:	080074b4 	.word	0x080074b4
 8006618:	08007474 	.word	0x08007474

0800661c <std>:
 800661c:	2300      	movs	r3, #0
 800661e:	b510      	push	{r4, lr}
 8006620:	4604      	mov	r4, r0
 8006622:	e9c0 3300 	strd	r3, r3, [r0]
 8006626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800662a:	6083      	str	r3, [r0, #8]
 800662c:	8181      	strh	r1, [r0, #12]
 800662e:	6643      	str	r3, [r0, #100]	; 0x64
 8006630:	81c2      	strh	r2, [r0, #14]
 8006632:	6183      	str	r3, [r0, #24]
 8006634:	4619      	mov	r1, r3
 8006636:	2208      	movs	r2, #8
 8006638:	305c      	adds	r0, #92	; 0x5c
 800663a:	f7fd fb1f 	bl	8003c7c <memset>
 800663e:	4b05      	ldr	r3, [pc, #20]	; (8006654 <std+0x38>)
 8006640:	6263      	str	r3, [r4, #36]	; 0x24
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <std+0x3c>)
 8006644:	62a3      	str	r3, [r4, #40]	; 0x28
 8006646:	4b05      	ldr	r3, [pc, #20]	; (800665c <std+0x40>)
 8006648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <std+0x44>)
 800664c:	6224      	str	r4, [r4, #32]
 800664e:	6323      	str	r3, [r4, #48]	; 0x30
 8006650:	bd10      	pop	{r4, pc}
 8006652:	bf00      	nop
 8006654:	08006971 	.word	0x08006971
 8006658:	08006993 	.word	0x08006993
 800665c:	080069cb 	.word	0x080069cb
 8006660:	080069ef 	.word	0x080069ef

08006664 <_cleanup_r>:
 8006664:	4901      	ldr	r1, [pc, #4]	; (800666c <_cleanup_r+0x8>)
 8006666:	f000 b8af 	b.w	80067c8 <_fwalk_reent>
 800666a:	bf00      	nop
 800666c:	080065a5 	.word	0x080065a5

08006670 <__sfmoreglue>:
 8006670:	b570      	push	{r4, r5, r6, lr}
 8006672:	2268      	movs	r2, #104	; 0x68
 8006674:	1e4d      	subs	r5, r1, #1
 8006676:	4355      	muls	r5, r2
 8006678:	460e      	mov	r6, r1
 800667a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800667e:	f7ff fa65 	bl	8005b4c <_malloc_r>
 8006682:	4604      	mov	r4, r0
 8006684:	b140      	cbz	r0, 8006698 <__sfmoreglue+0x28>
 8006686:	2100      	movs	r1, #0
 8006688:	e9c0 1600 	strd	r1, r6, [r0]
 800668c:	300c      	adds	r0, #12
 800668e:	60a0      	str	r0, [r4, #8]
 8006690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006694:	f7fd faf2 	bl	8003c7c <memset>
 8006698:	4620      	mov	r0, r4
 800669a:	bd70      	pop	{r4, r5, r6, pc}

0800669c <__sfp_lock_acquire>:
 800669c:	4801      	ldr	r0, [pc, #4]	; (80066a4 <__sfp_lock_acquire+0x8>)
 800669e:	f000 b8b3 	b.w	8006808 <__retarget_lock_acquire_recursive>
 80066a2:	bf00      	nop
 80066a4:	2000045d 	.word	0x2000045d

080066a8 <__sfp_lock_release>:
 80066a8:	4801      	ldr	r0, [pc, #4]	; (80066b0 <__sfp_lock_release+0x8>)
 80066aa:	f000 b8ae 	b.w	800680a <__retarget_lock_release_recursive>
 80066ae:	bf00      	nop
 80066b0:	2000045d 	.word	0x2000045d

080066b4 <__sinit_lock_acquire>:
 80066b4:	4801      	ldr	r0, [pc, #4]	; (80066bc <__sinit_lock_acquire+0x8>)
 80066b6:	f000 b8a7 	b.w	8006808 <__retarget_lock_acquire_recursive>
 80066ba:	bf00      	nop
 80066bc:	2000045e 	.word	0x2000045e

080066c0 <__sinit_lock_release>:
 80066c0:	4801      	ldr	r0, [pc, #4]	; (80066c8 <__sinit_lock_release+0x8>)
 80066c2:	f000 b8a2 	b.w	800680a <__retarget_lock_release_recursive>
 80066c6:	bf00      	nop
 80066c8:	2000045e 	.word	0x2000045e

080066cc <__sinit>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	4604      	mov	r4, r0
 80066d0:	f7ff fff0 	bl	80066b4 <__sinit_lock_acquire>
 80066d4:	69a3      	ldr	r3, [r4, #24]
 80066d6:	b11b      	cbz	r3, 80066e0 <__sinit+0x14>
 80066d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066dc:	f7ff bff0 	b.w	80066c0 <__sinit_lock_release>
 80066e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066e4:	6523      	str	r3, [r4, #80]	; 0x50
 80066e6:	4b13      	ldr	r3, [pc, #76]	; (8006734 <__sinit+0x68>)
 80066e8:	4a13      	ldr	r2, [pc, #76]	; (8006738 <__sinit+0x6c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80066ee:	42a3      	cmp	r3, r4
 80066f0:	bf04      	itt	eq
 80066f2:	2301      	moveq	r3, #1
 80066f4:	61a3      	streq	r3, [r4, #24]
 80066f6:	4620      	mov	r0, r4
 80066f8:	f000 f820 	bl	800673c <__sfp>
 80066fc:	6060      	str	r0, [r4, #4]
 80066fe:	4620      	mov	r0, r4
 8006700:	f000 f81c 	bl	800673c <__sfp>
 8006704:	60a0      	str	r0, [r4, #8]
 8006706:	4620      	mov	r0, r4
 8006708:	f000 f818 	bl	800673c <__sfp>
 800670c:	2200      	movs	r2, #0
 800670e:	60e0      	str	r0, [r4, #12]
 8006710:	2104      	movs	r1, #4
 8006712:	6860      	ldr	r0, [r4, #4]
 8006714:	f7ff ff82 	bl	800661c <std>
 8006718:	68a0      	ldr	r0, [r4, #8]
 800671a:	2201      	movs	r2, #1
 800671c:	2109      	movs	r1, #9
 800671e:	f7ff ff7d 	bl	800661c <std>
 8006722:	68e0      	ldr	r0, [r4, #12]
 8006724:	2202      	movs	r2, #2
 8006726:	2112      	movs	r1, #18
 8006728:	f7ff ff78 	bl	800661c <std>
 800672c:	2301      	movs	r3, #1
 800672e:	61a3      	str	r3, [r4, #24]
 8006730:	e7d2      	b.n	80066d8 <__sinit+0xc>
 8006732:	bf00      	nop
 8006734:	080070f8 	.word	0x080070f8
 8006738:	08006665 	.word	0x08006665

0800673c <__sfp>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	4607      	mov	r7, r0
 8006740:	f7ff ffac 	bl	800669c <__sfp_lock_acquire>
 8006744:	4b1e      	ldr	r3, [pc, #120]	; (80067c0 <__sfp+0x84>)
 8006746:	681e      	ldr	r6, [r3, #0]
 8006748:	69b3      	ldr	r3, [r6, #24]
 800674a:	b913      	cbnz	r3, 8006752 <__sfp+0x16>
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff ffbd 	bl	80066cc <__sinit>
 8006752:	3648      	adds	r6, #72	; 0x48
 8006754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006758:	3b01      	subs	r3, #1
 800675a:	d503      	bpl.n	8006764 <__sfp+0x28>
 800675c:	6833      	ldr	r3, [r6, #0]
 800675e:	b30b      	cbz	r3, 80067a4 <__sfp+0x68>
 8006760:	6836      	ldr	r6, [r6, #0]
 8006762:	e7f7      	b.n	8006754 <__sfp+0x18>
 8006764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006768:	b9d5      	cbnz	r5, 80067a0 <__sfp+0x64>
 800676a:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <__sfp+0x88>)
 800676c:	60e3      	str	r3, [r4, #12]
 800676e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006772:	6665      	str	r5, [r4, #100]	; 0x64
 8006774:	f000 f847 	bl	8006806 <__retarget_lock_init_recursive>
 8006778:	f7ff ff96 	bl	80066a8 <__sfp_lock_release>
 800677c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006784:	6025      	str	r5, [r4, #0]
 8006786:	61a5      	str	r5, [r4, #24]
 8006788:	2208      	movs	r2, #8
 800678a:	4629      	mov	r1, r5
 800678c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006790:	f7fd fa74 	bl	8003c7c <memset>
 8006794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800679c:	4620      	mov	r0, r4
 800679e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a0:	3468      	adds	r4, #104	; 0x68
 80067a2:	e7d9      	b.n	8006758 <__sfp+0x1c>
 80067a4:	2104      	movs	r1, #4
 80067a6:	4638      	mov	r0, r7
 80067a8:	f7ff ff62 	bl	8006670 <__sfmoreglue>
 80067ac:	4604      	mov	r4, r0
 80067ae:	6030      	str	r0, [r6, #0]
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d1d5      	bne.n	8006760 <__sfp+0x24>
 80067b4:	f7ff ff78 	bl	80066a8 <__sfp_lock_release>
 80067b8:	230c      	movs	r3, #12
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	e7ee      	b.n	800679c <__sfp+0x60>
 80067be:	bf00      	nop
 80067c0:	080070f8 	.word	0x080070f8
 80067c4:	ffff0001 	.word	0xffff0001

080067c8 <_fwalk_reent>:
 80067c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067cc:	4606      	mov	r6, r0
 80067ce:	4688      	mov	r8, r1
 80067d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067d4:	2700      	movs	r7, #0
 80067d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067da:	f1b9 0901 	subs.w	r9, r9, #1
 80067de:	d505      	bpl.n	80067ec <_fwalk_reent+0x24>
 80067e0:	6824      	ldr	r4, [r4, #0]
 80067e2:	2c00      	cmp	r4, #0
 80067e4:	d1f7      	bne.n	80067d6 <_fwalk_reent+0xe>
 80067e6:	4638      	mov	r0, r7
 80067e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ec:	89ab      	ldrh	r3, [r5, #12]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d907      	bls.n	8006802 <_fwalk_reent+0x3a>
 80067f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067f6:	3301      	adds	r3, #1
 80067f8:	d003      	beq.n	8006802 <_fwalk_reent+0x3a>
 80067fa:	4629      	mov	r1, r5
 80067fc:	4630      	mov	r0, r6
 80067fe:	47c0      	blx	r8
 8006800:	4307      	orrs	r7, r0
 8006802:	3568      	adds	r5, #104	; 0x68
 8006804:	e7e9      	b.n	80067da <_fwalk_reent+0x12>

08006806 <__retarget_lock_init_recursive>:
 8006806:	4770      	bx	lr

08006808 <__retarget_lock_acquire_recursive>:
 8006808:	4770      	bx	lr

0800680a <__retarget_lock_release_recursive>:
 800680a:	4770      	bx	lr

0800680c <__swhatbuf_r>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	460e      	mov	r6, r1
 8006810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006814:	2900      	cmp	r1, #0
 8006816:	b096      	sub	sp, #88	; 0x58
 8006818:	4614      	mov	r4, r2
 800681a:	461d      	mov	r5, r3
 800681c:	da08      	bge.n	8006830 <__swhatbuf_r+0x24>
 800681e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	602a      	str	r2, [r5, #0]
 8006826:	061a      	lsls	r2, r3, #24
 8006828:	d410      	bmi.n	800684c <__swhatbuf_r+0x40>
 800682a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800682e:	e00e      	b.n	800684e <__swhatbuf_r+0x42>
 8006830:	466a      	mov	r2, sp
 8006832:	f000 f903 	bl	8006a3c <_fstat_r>
 8006836:	2800      	cmp	r0, #0
 8006838:	dbf1      	blt.n	800681e <__swhatbuf_r+0x12>
 800683a:	9a01      	ldr	r2, [sp, #4]
 800683c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006840:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006844:	425a      	negs	r2, r3
 8006846:	415a      	adcs	r2, r3
 8006848:	602a      	str	r2, [r5, #0]
 800684a:	e7ee      	b.n	800682a <__swhatbuf_r+0x1e>
 800684c:	2340      	movs	r3, #64	; 0x40
 800684e:	2000      	movs	r0, #0
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	b016      	add	sp, #88	; 0x58
 8006854:	bd70      	pop	{r4, r5, r6, pc}
	...

08006858 <__smakebuf_r>:
 8006858:	898b      	ldrh	r3, [r1, #12]
 800685a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800685c:	079d      	lsls	r5, r3, #30
 800685e:	4606      	mov	r6, r0
 8006860:	460c      	mov	r4, r1
 8006862:	d507      	bpl.n	8006874 <__smakebuf_r+0x1c>
 8006864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	6123      	str	r3, [r4, #16]
 800686c:	2301      	movs	r3, #1
 800686e:	6163      	str	r3, [r4, #20]
 8006870:	b002      	add	sp, #8
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	ab01      	add	r3, sp, #4
 8006876:	466a      	mov	r2, sp
 8006878:	f7ff ffc8 	bl	800680c <__swhatbuf_r>
 800687c:	9900      	ldr	r1, [sp, #0]
 800687e:	4605      	mov	r5, r0
 8006880:	4630      	mov	r0, r6
 8006882:	f7ff f963 	bl	8005b4c <_malloc_r>
 8006886:	b948      	cbnz	r0, 800689c <__smakebuf_r+0x44>
 8006888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800688c:	059a      	lsls	r2, r3, #22
 800688e:	d4ef      	bmi.n	8006870 <__smakebuf_r+0x18>
 8006890:	f023 0303 	bic.w	r3, r3, #3
 8006894:	f043 0302 	orr.w	r3, r3, #2
 8006898:	81a3      	strh	r3, [r4, #12]
 800689a:	e7e3      	b.n	8006864 <__smakebuf_r+0xc>
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <__smakebuf_r+0x7c>)
 800689e:	62b3      	str	r3, [r6, #40]	; 0x28
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	6020      	str	r0, [r4, #0]
 80068a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	6163      	str	r3, [r4, #20]
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	6120      	str	r0, [r4, #16]
 80068b2:	b15b      	cbz	r3, 80068cc <__smakebuf_r+0x74>
 80068b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068b8:	4630      	mov	r0, r6
 80068ba:	f000 f8d1 	bl	8006a60 <_isatty_r>
 80068be:	b128      	cbz	r0, 80068cc <__smakebuf_r+0x74>
 80068c0:	89a3      	ldrh	r3, [r4, #12]
 80068c2:	f023 0303 	bic.w	r3, r3, #3
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	81a3      	strh	r3, [r4, #12]
 80068cc:	89a0      	ldrh	r0, [r4, #12]
 80068ce:	4305      	orrs	r5, r0
 80068d0:	81a5      	strh	r5, [r4, #12]
 80068d2:	e7cd      	b.n	8006870 <__smakebuf_r+0x18>
 80068d4:	08006665 	.word	0x08006665

080068d8 <_malloc_usable_size_r>:
 80068d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068dc:	1f18      	subs	r0, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bfbc      	itt	lt
 80068e2:	580b      	ldrlt	r3, [r1, r0]
 80068e4:	18c0      	addlt	r0, r0, r3
 80068e6:	4770      	bx	lr

080068e8 <_raise_r>:
 80068e8:	291f      	cmp	r1, #31
 80068ea:	b538      	push	{r3, r4, r5, lr}
 80068ec:	4604      	mov	r4, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	d904      	bls.n	80068fc <_raise_r+0x14>
 80068f2:	2316      	movs	r3, #22
 80068f4:	6003      	str	r3, [r0, #0]
 80068f6:	f04f 30ff 	mov.w	r0, #4294967295
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80068fe:	b112      	cbz	r2, 8006906 <_raise_r+0x1e>
 8006900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006904:	b94b      	cbnz	r3, 800691a <_raise_r+0x32>
 8006906:	4620      	mov	r0, r4
 8006908:	f000 f830 	bl	800696c <_getpid_r>
 800690c:	462a      	mov	r2, r5
 800690e:	4601      	mov	r1, r0
 8006910:	4620      	mov	r0, r4
 8006912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006916:	f000 b817 	b.w	8006948 <_kill_r>
 800691a:	2b01      	cmp	r3, #1
 800691c:	d00a      	beq.n	8006934 <_raise_r+0x4c>
 800691e:	1c59      	adds	r1, r3, #1
 8006920:	d103      	bne.n	800692a <_raise_r+0x42>
 8006922:	2316      	movs	r3, #22
 8006924:	6003      	str	r3, [r0, #0]
 8006926:	2001      	movs	r0, #1
 8006928:	e7e7      	b.n	80068fa <_raise_r+0x12>
 800692a:	2400      	movs	r4, #0
 800692c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006930:	4628      	mov	r0, r5
 8006932:	4798      	blx	r3
 8006934:	2000      	movs	r0, #0
 8006936:	e7e0      	b.n	80068fa <_raise_r+0x12>

08006938 <raise>:
 8006938:	4b02      	ldr	r3, [pc, #8]	; (8006944 <raise+0xc>)
 800693a:	4601      	mov	r1, r0
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	f7ff bfd3 	b.w	80068e8 <_raise_r>
 8006942:	bf00      	nop
 8006944:	2000004c 	.word	0x2000004c

08006948 <_kill_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d07      	ldr	r5, [pc, #28]	; (8006968 <_kill_r+0x20>)
 800694c:	2300      	movs	r3, #0
 800694e:	4604      	mov	r4, r0
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	602b      	str	r3, [r5, #0]
 8006956:	f7fa fc4f 	bl	80011f8 <_kill>
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	d102      	bne.n	8006964 <_kill_r+0x1c>
 800695e:	682b      	ldr	r3, [r5, #0]
 8006960:	b103      	cbz	r3, 8006964 <_kill_r+0x1c>
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	bd38      	pop	{r3, r4, r5, pc}
 8006966:	bf00      	nop
 8006968:	20000458 	.word	0x20000458

0800696c <_getpid_r>:
 800696c:	f7fa bc3c 	b.w	80011e8 <_getpid>

08006970 <__sread>:
 8006970:	b510      	push	{r4, lr}
 8006972:	460c      	mov	r4, r1
 8006974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006978:	f000 f894 	bl	8006aa4 <_read_r>
 800697c:	2800      	cmp	r0, #0
 800697e:	bfab      	itete	ge
 8006980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006982:	89a3      	ldrhlt	r3, [r4, #12]
 8006984:	181b      	addge	r3, r3, r0
 8006986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800698a:	bfac      	ite	ge
 800698c:	6563      	strge	r3, [r4, #84]	; 0x54
 800698e:	81a3      	strhlt	r3, [r4, #12]
 8006990:	bd10      	pop	{r4, pc}

08006992 <__swrite>:
 8006992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006996:	461f      	mov	r7, r3
 8006998:	898b      	ldrh	r3, [r1, #12]
 800699a:	05db      	lsls	r3, r3, #23
 800699c:	4605      	mov	r5, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	4616      	mov	r6, r2
 80069a2:	d505      	bpl.n	80069b0 <__swrite+0x1e>
 80069a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a8:	2302      	movs	r3, #2
 80069aa:	2200      	movs	r2, #0
 80069ac:	f000 f868 	bl	8006a80 <_lseek_r>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069ba:	81a3      	strh	r3, [r4, #12]
 80069bc:	4632      	mov	r2, r6
 80069be:	463b      	mov	r3, r7
 80069c0:	4628      	mov	r0, r5
 80069c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069c6:	f000 b817 	b.w	80069f8 <_write_r>

080069ca <__sseek>:
 80069ca:	b510      	push	{r4, lr}
 80069cc:	460c      	mov	r4, r1
 80069ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d2:	f000 f855 	bl	8006a80 <_lseek_r>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	bf15      	itete	ne
 80069dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80069de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069e6:	81a3      	strheq	r3, [r4, #12]
 80069e8:	bf18      	it	ne
 80069ea:	81a3      	strhne	r3, [r4, #12]
 80069ec:	bd10      	pop	{r4, pc}

080069ee <__sclose>:
 80069ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f2:	f000 b813 	b.w	8006a1c <_close_r>
	...

080069f8 <_write_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d07      	ldr	r5, [pc, #28]	; (8006a18 <_write_r+0x20>)
 80069fc:	4604      	mov	r4, r0
 80069fe:	4608      	mov	r0, r1
 8006a00:	4611      	mov	r1, r2
 8006a02:	2200      	movs	r2, #0
 8006a04:	602a      	str	r2, [r5, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f7fa fc2d 	bl	8001266 <_write>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_write_r+0x1e>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_write_r+0x1e>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	20000458 	.word	0x20000458

08006a1c <_close_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d06      	ldr	r5, [pc, #24]	; (8006a38 <_close_r+0x1c>)
 8006a20:	2300      	movs	r3, #0
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7fa fc39 	bl	800129e <_close>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_close_r+0x1a>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_close_r+0x1a>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	20000458 	.word	0x20000458

08006a3c <_fstat_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4d07      	ldr	r5, [pc, #28]	; (8006a5c <_fstat_r+0x20>)
 8006a40:	2300      	movs	r3, #0
 8006a42:	4604      	mov	r4, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	f7fa fc34 	bl	80012b6 <_fstat>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d102      	bne.n	8006a58 <_fstat_r+0x1c>
 8006a52:	682b      	ldr	r3, [r5, #0]
 8006a54:	b103      	cbz	r3, 8006a58 <_fstat_r+0x1c>
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	bd38      	pop	{r3, r4, r5, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000458 	.word	0x20000458

08006a60 <_isatty_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d06      	ldr	r5, [pc, #24]	; (8006a7c <_isatty_r+0x1c>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	f7fa fc33 	bl	80012d6 <_isatty>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_isatty_r+0x1a>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_isatty_r+0x1a>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	20000458 	.word	0x20000458

08006a80 <_lseek_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4d07      	ldr	r5, [pc, #28]	; (8006aa0 <_lseek_r+0x20>)
 8006a84:	4604      	mov	r4, r0
 8006a86:	4608      	mov	r0, r1
 8006a88:	4611      	mov	r1, r2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	602a      	str	r2, [r5, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f7fa fc2c 	bl	80012ec <_lseek>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	d102      	bne.n	8006a9e <_lseek_r+0x1e>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	b103      	cbz	r3, 8006a9e <_lseek_r+0x1e>
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	20000458 	.word	0x20000458

08006aa4 <_read_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d07      	ldr	r5, [pc, #28]	; (8006ac4 <_read_r+0x20>)
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	4608      	mov	r0, r1
 8006aac:	4611      	mov	r1, r2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	602a      	str	r2, [r5, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f7fa fbba 	bl	800122c <_read>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d102      	bne.n	8006ac2 <_read_r+0x1e>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	b103      	cbz	r3, 8006ac2 <_read_r+0x1e>
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	20000458 	.word	0x20000458

08006ac8 <_init>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr

08006ad4 <_fini>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	bf00      	nop
 8006ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ada:	bc08      	pop	{r3}
 8006adc:	469e      	mov	lr, r3
 8006ade:	4770      	bx	lr
