
HMS_TRY_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eec  0800fea0  0800fea0  0001fea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d8c  08010d8c  0003024c  2**0
                  CONTENTS
  4 .ARM          00000008  08010d8c  08010d8c  00020d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d94  08010d94  0003024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d94  08010d94  00020d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d98  08010d98  00020d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08010d9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000968  2000024c  08010fe8  0003024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  08010fe8  00030bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e96b  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000419d  00000000  00000000  0004ebe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  00052d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  00054828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d570  00000000  00000000  00056128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f66  00000000  00000000  00073698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4101  00000000  00000000  000965fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a6ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008548  00000000  00000000  0013a750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000024c 	.word	0x2000024c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fe88 	.word	0x0800fe88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000250 	.word	0x20000250
 80001dc:	0800fe88 	.word	0x0800fe88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b0b6      	sub	sp, #216	; 0xd8
 8000f60:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f001 f961 	bl	8002228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 fbf1 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f000 fce9 	bl	8001940 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6e:	f000 fcbd 	bl	80018ec <MX_USART2_UART_Init>
//  MX_ADC1_Init();
  MX_I2C1_Init();
 8000f72:	f000 fc57 	bl	8001824 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f76:	f000 fc83 	bl	8001880 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000f7a:	f004 ff11 	bl	8005da0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	uart_print_config(9600);
 8000f7e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000f82:	f006 f991 	bl	80072a8 <uart_print_config>
	USART_INIT(USART6, PORTA, PORTA, 11, 12, 115200);
 8000f86:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	230b      	movs	r3, #11
 8000f92:	4ac0      	ldr	r2, [pc, #768]	; (8001294 <main+0x338>)
 8000f94:	49bf      	ldr	r1, [pc, #764]	; (8001294 <main+0x338>)
 8000f96:	48c0      	ldr	r0, [pc, #768]	; (8001298 <main+0x33c>)
 8000f98:	f006 f81c 	bl	8006fd4 <USART_INIT>
//  USART_IT_EN(USART6, 0, 1, 0);
	print("Working\r\n");
 8000f9c:	48bf      	ldr	r0, [pc, #764]	; (800129c <main+0x340>)
 8000f9e:	f006 f95f 	bl	8007260 <print>

	gpio_write(PORTB, 6, LOW);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2106      	movs	r1, #6
 8000fa6:	48be      	ldr	r0, [pc, #760]	; (80012a0 <main+0x344>)
 8000fa8:	f005 fd8c 	bl	8006ac4 <gpio_write>

	sd_mount();
 8000fac:	f007 fdbc 	bl	8008b28 <sd_mount>
	Delay(500);
 8000fb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb4:	f001 f97a 	bl	80022ac <HAL_Delay>
	sd_space();
 8000fb8:	f007 fdda 	bl	8008b70 <sd_space>

	LCD_Begin();
 8000fbc:	f008 f8ee 	bl	800919c <LCD_Begin>
	LCD_SetRotation(0);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f008 ff1f 	bl	8009e04 <LCD_SetRotation>
	LCD_FillScreen(BLACK);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f008 fc28 	bl	800981c <LCD_FillScreen>
	displayPic24bit("hmsbg.bmp", 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	48b4      	ldr	r0, [pc, #720]	; (80012a4 <main+0x348>)
 8000fd2:	f007 fedd 	bl	8008d90 <displayPic24bit>

	HMS_bgdisplay();
 8000fd6:	f006 f97d 	bl	80072d4 <HMS_bgdisplay>

	sd_deMount();
 8000fda:	f007 fecd 	bl	8008d78 <sd_deMount>

	for (int i = 4; i > 0; i--)
 8000fde:	2304      	movs	r3, #4
 8000fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000fe4:	e006      	b.n	8000ff4 <main+0x98>
		LCD_ECGAnimation();
 8000fe6:	f006 fc61 	bl	80078ac <LCD_ECGAnimation>
	for (int i = 4; i > 0; i--)
 8000fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	dcf4      	bgt.n	8000fe6 <main+0x8a>

	gpio_config(PORTC, 9, INPUT_MODE, LOW_SPEED, EN_PU, PHPL);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	2301      	movs	r3, #1
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2300      	movs	r3, #0
 8001006:	2200      	movs	r2, #0
 8001008:	2109      	movs	r1, #9
 800100a:	48a7      	ldr	r0, [pc, #668]	; (80012a8 <main+0x34c>)
 800100c:	f005 fc7a 	bl	8006904 <gpio_config>
	gpio_IT_config(PORTC, 9, FALLING_EDGE);
 8001010:	2201      	movs	r2, #1
 8001012:	2109      	movs	r1, #9
 8001014:	48a4      	ldr	r0, [pc, #656]	; (80012a8 <main+0x34c>)
 8001016:	f005 fd75 	bl	8006b04 <gpio_IT_config>
	gpio_IT_EN(9, EXTI9_5_IRQn);
 800101a:	2117      	movs	r1, #23
 800101c:	2009      	movs	r0, #9
 800101e:	f005 ff8f 	bl	8006f40 <gpio_IT_EN>

	uint8_t mlx90614_workingFlag = 1, mlx90614_status = 0;
 8001022:	2301      	movs	r3, #1
 8001024:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8001028:	2300      	movs	r3, #0
 800102a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	char print_char[PRINT_CHAR_LEN] = { 0 };
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
 8001032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001036:	2260      	movs	r2, #96	; 0x60
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f00b fcf6 	bl	800ca2c <memset>

	if (!(mlx90614_init())) {
 8001040:	f007 fc3c 	bl	80088bc <mlx90614_init>
 8001044:	4603      	mov	r3, r0
 8001046:	f083 0301 	eor.w	r3, r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <main+0x100>
		print("Error in MLX90614 INIT\n");
 8001050:	4896      	ldr	r0, [pc, #600]	; (80012ac <main+0x350>)
 8001052:	f006 f905 	bl	8007260 <print>
		mlx90614_workingFlag = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	}

	uint32_t max30100_startTime = HAL_GetTick(), max30100_lapsedTime = 500;
 800105c:	f001 f91a 	bl	8002294 <HAL_GetTick>
 8001060:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8001064:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint32_t temp_startTime = HAL_GetTick(), temp_lapsedTime = 500;
 800106c:	f001 f912 	bl	8002294 <HAL_GetTick>
 8001070:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8001074:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t ecg_startTime = HAL_GetTick(), ecg_lapsedTime = 60000;
 800107c:	f001 f90a 	bl	8002294 <HAL_GetTick>
 8001080:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8001084:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001088:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint32_t wifi_startTime = HAL_GetTick(), wifi_lapsedTime = 2000;
 800108c:	f001 f902 	bl	8002294 <HAL_GetTick>
 8001090:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8001094:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	max30100_data_t result = { };
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2224      	movs	r2, #36	; 0x24
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00b fcc2 	bl	800ca2c <memset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (menu_select_flag == 0) {
 80010a8:	4b81      	ldr	r3, [pc, #516]	; (80012b0 <main+0x354>)
 80010aa:	f993 3000 	ldrsb.w	r3, [r3]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 80c4 	bne.w	800123c <main+0x2e0>
			if (mlx90614_workingFlag == 1) {
 80010b4:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f040 8094 	bne.w	80011e6 <main+0x28a>
				mlx90614_status = mlx90614_getObject1(&temp);
 80010be:	487d      	ldr	r0, [pc, #500]	; (80012b4 <main+0x358>)
 80010c0:	f007 fd06 	bl	8008ad0 <mlx90614_getObject1>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				if ((mlx90614_status == true)
 80010ca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	f040 8085 	bne.w	80011de <main+0x282>
						&& ((HAL_GetTick() - temp_startTime) > temp_lapsedTime)) {
 80010d4:	f001 f8de 	bl	8002294 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d27a      	bcs.n	80011de <main+0x282>
					print("Temp in Celsius: = %0.2f\n", temp);
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <main+0x358>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa33 	bl	8000558 <__aeabi_f2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4870      	ldr	r0, [pc, #448]	; (80012b8 <main+0x35c>)
 80010f8:	f006 f8b2 	bl	8007260 <print>
					if ((temp > 0) && (temp < 100)) {
 80010fc:	4b6d      	ldr	r3, [pc, #436]	; (80012b4 <main+0x358>)
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	dd2a      	ble.n	8001162 <main+0x206>
 800110c:	4b69      	ldr	r3, [pc, #420]	; (80012b4 <main+0x358>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80012bc <main+0x360>
 8001116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	d520      	bpl.n	8001162 <main+0x206>
						LCD_SetTextColor(WHITE, LCD_Color565(30, 35, 247));
 8001120:	22f7      	movs	r2, #247	; 0xf7
 8001122:	2123      	movs	r1, #35	; 0x23
 8001124:	201e      	movs	r0, #30
 8001126:	f008 f8af 	bl	8009288 <LCD_Color565>
 800112a:	4603      	mov	r3, r0
 800112c:	b29b      	uxth	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001134:	f008 fe4e 	bl	8009dd4 <LCD_SetTextColor>
						LCD_SetTextSize(2);
 8001138:	2002      	movs	r0, #2
 800113a:	f008 fe35 	bl	8009da8 <LCD_SetTextSize>
						LCD_SetCursor(30, 145);
 800113e:	2191      	movs	r1, #145	; 0x91
 8001140:	201e      	movs	r0, #30
 8001142:	f008 fe19 	bl	8009d78 <LCD_SetCursor>
						LCD_Printf("%0.1f", temp);
 8001146:	4b5b      	ldr	r3, [pc, #364]	; (80012b4 <main+0x358>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fa04 	bl	8000558 <__aeabi_f2d>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	485a      	ldr	r0, [pc, #360]	; (80012c0 <main+0x364>)
 8001156:	f008 fd27 	bl	8009ba8 <LCD_Printf>
						globalTemp = temp;
 800115a:	4b56      	ldr	r3, [pc, #344]	; (80012b4 <main+0x358>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a59      	ldr	r2, [pc, #356]	; (80012c4 <main+0x368>)
 8001160:	6013      	str	r3, [r2, #0]
					}
					if(CJMCU_EN == false){
 8001162:	4b59      	ldr	r3, [pc, #356]	; (80012c8 <main+0x36c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f083 0301 	eor.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <main+0x224>
						MY_ADC1_Init_CJMCU();
 8001170:	f000 fc74 	bl	8001a5c <MY_ADC1_Init_CJMCU>
						CJMCU_EN = true;
 8001174:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <main+0x36c>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
						ECG_EN = false;
 800117a:	4b54      	ldr	r3, [pc, #336]	; (80012cc <main+0x370>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
					}
					HAL_ADC_Start(&hadc1);
 8001180:	4853      	ldr	r0, [pc, #332]	; (80012d0 <main+0x374>)
 8001182:	f001 f8fb 	bl	800237c <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, 100);
 8001186:	2164      	movs	r1, #100	; 0x64
 8001188:	4851      	ldr	r0, [pc, #324]	; (80012d0 <main+0x374>)
 800118a:	f001 f9de 	bl	800254a <HAL_ADC_PollForConversion>
					adcData = (uint16_t) HAL_ADC_GetValue(&hadc1);
 800118e:	4850      	ldr	r0, [pc, #320]	; (80012d0 <main+0x374>)
 8001190:	f001 fa66 	bl	8002660 <HAL_ADC_GetValue>
 8001194:	4603      	mov	r3, r0
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b4e      	ldr	r3, [pc, #312]	; (80012d4 <main+0x378>)
 800119a:	801a      	strh	r2, [r3, #0]
					print("ADC12: %d\r\n", adcData);
 800119c:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <main+0x378>)
 800119e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a2:	4619      	mov	r1, r3
 80011a4:	484c      	ldr	r0, [pc, #304]	; (80012d8 <main+0x37c>)
 80011a6:	f006 f85b 	bl	8007260 <print>
					HAL_ADC_PollForConversion(&hadc1, 100);
 80011aa:	2164      	movs	r1, #100	; 0x64
 80011ac:	4848      	ldr	r0, [pc, #288]	; (80012d0 <main+0x374>)
 80011ae:	f001 f9cc 	bl	800254a <HAL_ADC_PollForConversion>
					adcData = (uint16_t) HAL_ADC_GetValue(&hadc1);
 80011b2:	4847      	ldr	r0, [pc, #284]	; (80012d0 <main+0x374>)
 80011b4:	f001 fa54 	bl	8002660 <HAL_ADC_GetValue>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b45      	ldr	r3, [pc, #276]	; (80012d4 <main+0x378>)
 80011be:	801a      	strh	r2, [r3, #0]
					print("ADC13: %d\r\n", adcData);
 80011c0:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <main+0x378>)
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4844      	ldr	r0, [pc, #272]	; (80012dc <main+0x380>)
 80011ca:	f006 f849 	bl	8007260 <print>
					HAL_ADC_Stop(&hadc1);
 80011ce:	4840      	ldr	r0, [pc, #256]	; (80012d0 <main+0x374>)
 80011d0:	f001 f988 	bl	80024e4 <HAL_ADC_Stop>
					temp_startTime = HAL_GetTick();
 80011d4:	f001 f85e 	bl	8002294 <HAL_GetTick>
 80011d8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80011dc:	e256      	b.n	800168c <main+0x730>
					//					Delay(500);
				} else {
					mlx90614_workingFlag = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80011e4:	e252      	b.n	800168c <main+0x730>
				}
			} else {
				if (!(mlx90614_init())) {
 80011e6:	f007 fb69 	bl	80088bc <mlx90614_init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f083 0301 	eor.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d01e      	beq.n	8001234 <main+0x2d8>
					print("Error in MLX90614 INIT\n");
 80011f6:	482d      	ldr	r0, [pc, #180]	; (80012ac <main+0x350>)
 80011f8:	f006 f832 	bl	8007260 <print>
					LCD_SetTextColor(WHITE, LCD_Color565(30, 35, 247));
 80011fc:	22f7      	movs	r2, #247	; 0xf7
 80011fe:	2123      	movs	r1, #35	; 0x23
 8001200:	201e      	movs	r0, #30
 8001202:	f008 f841 	bl	8009288 <LCD_Color565>
 8001206:	4603      	mov	r3, r0
 8001208:	b29b      	uxth	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001210:	f008 fde0 	bl	8009dd4 <LCD_SetTextColor>
					LCD_SetTextSize(2);
 8001214:	2002      	movs	r0, #2
 8001216:	f008 fdc7 	bl	8009da8 <LCD_SetTextSize>
					LCD_SetCursor(30, 145);
 800121a:	2191      	movs	r1, #145	; 0x91
 800121c:	201e      	movs	r0, #30
 800121e:	f008 fdab 	bl	8009d78 <LCD_SetCursor>
					LCD_Printf("....");
 8001222:	482f      	ldr	r0, [pc, #188]	; (80012e0 <main+0x384>)
 8001224:	f008 fcc0 	bl	8009ba8 <LCD_Printf>
					MX_I2C1_Init();
 8001228:	f000 fafc 	bl	8001824 <MX_I2C1_Init>
//					Delay(500);
					mlx90614_workingFlag = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8001232:	e22b      	b.n	800168c <main+0x730>
				} else {
					mlx90614_workingFlag = 1;
 8001234:	2301      	movs	r3, #1
 8001236:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800123a:	e227      	b.n	800168c <main+0x730>
				}
			}
		} else if (menu_select_flag == 1) {
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <main+0x354>)
 800123e:	f993 3000 	ldrsb.w	r3, [r3]
 8001242:	2b01      	cmp	r3, #1
 8001244:	f040 8152 	bne.w	80014ec <main+0x590>
			if (max30100_update(&max30100, &result) != HAL_OK) {
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	4825      	ldr	r0, [pc, #148]	; (80012e4 <main+0x388>)
 800124e:	f006 fc6b 	bl	8007b28 <max30100_update>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d04b      	beq.n	80012f0 <main+0x394>
				print("Error Reading...Retrying\n");
 8001258:	4823      	ldr	r0, [pc, #140]	; (80012e8 <main+0x38c>)
 800125a:	f006 f801 	bl	8007260 <print>
				MX_I2C1_Init();
 800125e:	f000 fae1 	bl	8001824 <MX_I2C1_Init>
				max30100_init(&max30100, &hi2c1,
 8001262:	2300      	movs	r3, #0
 8001264:	9306      	str	r3, [sp, #24]
 8001266:	2301      	movs	r3, #1
 8001268:	9305      	str	r3, [sp, #20]
 800126a:	2332      	movs	r3, #50	; 0x32
 800126c:	9304      	str	r3, [sp, #16]
 800126e:	230f      	movs	r3, #15
 8001270:	9303      	str	r3, [sp, #12]
 8001272:	2303      	movs	r3, #3
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2308      	movs	r3, #8
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2303      	movs	r3, #3
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	491a      	ldr	r1, [pc, #104]	; (80012ec <main+0x390>)
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <main+0x388>)
 8001286:	f006 fb39 	bl	80078fc <max30100_init>
				MAX30100_DEFAULT_MEAN_FILTER_SIZE,
				MAX30100_DEFAULT_PULSE_BPM_SAMPLE_SIZE,
				true,
				false);
				//				max30100_resume(&max30100);
				Delay(1000);
 800128a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128e:	f001 f80d 	bl	80022ac <HAL_Delay>
 8001292:	e1fb      	b.n	800168c <main+0x730>
 8001294:	40020000 	.word	0x40020000
 8001298:	40011400 	.word	0x40011400
 800129c:	0800fea0 	.word	0x0800fea0
 80012a0:	40020400 	.word	0x40020400
 80012a4:	0800feac 	.word	0x0800feac
 80012a8:	40020800 	.word	0x40020800
 80012ac:	0800feb8 	.word	0x0800feb8
 80012b0:	20000010 	.word	0x20000010
 80012b4:	200003bc 	.word	0x200003bc
 80012b8:	0800fed0 	.word	0x0800fed0
 80012bc:	42c80000 	.word	0x42c80000
 80012c0:	0800feec 	.word	0x0800feec
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000450 	.word	0x20000450
 80012cc:	2000044f 	.word	0x2000044f
 80012d0:	20000268 	.word	0x20000268
 80012d4:	200003c0 	.word	0x200003c0
 80012d8:	0800fef4 	.word	0x0800fef4
 80012dc:	0800ff00 	.word	0x0800ff00
 80012e0:	0800ff0c 	.word	0x0800ff0c
 80012e4:	200003c8 	.word	0x200003c8
 80012e8:	0800ff14 	.word	0x0800ff14
 80012ec:	200002b0 	.word	0x200002b0
			} else {
				if (max30100_off) {
 80012f0:	4b6e      	ldr	r3, [pc, #440]	; (80014ac <main+0x550>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <main+0x3ae>
					max30100_resume(&max30100);
 80012f8:	486d      	ldr	r0, [pc, #436]	; (80014b0 <main+0x554>)
 80012fa:	f007 f885 	bl	8008408 <max30100_resume>
					max30100_off = false;
 80012fe:	4b6b      	ldr	r3, [pc, #428]	; (80014ac <main+0x550>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
					max30100_on = true;
 8001304:	4b6b      	ldr	r3, [pc, #428]	; (80014b4 <main+0x558>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
				}
				hrBeatTimer = HAL_GetTick();
 800130a:	f000 ffc3 	bl	8002294 <HAL_GetTick>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b69      	ldr	r3, [pc, #420]	; (80014b8 <main+0x55c>)
 8001314:	801a      	strh	r2, [r3, #0]
				if (result.pulse_detected) {
 8001316:	793b      	ldrb	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d009      	beq.n	8001330 <main+0x3d4>
					print("BEAT: %d\n", beatCounter++);
 800131c:	4b67      	ldr	r3, [pc, #412]	; (80014bc <main+0x560>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	b2d1      	uxtb	r1, r2
 8001324:	4a65      	ldr	r2, [pc, #404]	; (80014bc <main+0x560>)
 8001326:	7011      	strb	r1, [r2, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	4865      	ldr	r0, [pc, #404]	; (80014c0 <main+0x564>)
 800132c:	f005 ff98 	bl	8007260 <print>
				}
				if (HAL_GetTick() - max30100_startTime > max30100_lapsedTime) {
 8001330:	f000 ffb0 	bl	8002294 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001340:	429a      	cmp	r2, r3
 8001342:	f080 80af 	bcs.w	80014a4 <main+0x548>
					if (result.ir_dc_value < 10000.00) {
 8001346:	edd7 7a04 	vldr	s15, [r7, #16]
 800134a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80014c4 <main+0x568>
 800134e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	d50b      	bpl.n	8001370 <main+0x414>
						print("No finger Detected\n");
 8001358:	485b      	ldr	r0, [pc, #364]	; (80014c8 <main+0x56c>)
 800135a:	f005 ff81 	bl	8007260 <print>
						max30100.current_bpm = 0.0;
 800135e:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <main+0x554>)
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
						max30100.current_spO2 = 0.0;
 8001366:	4b52      	ldr	r3, [pc, #328]	; (80014b0 <main+0x554>)
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	679a      	str	r2, [r3, #120]	; 0x78
 800136e:	e095      	b.n	800149c <main+0x540>
					} else {
						if (beatCounter < BEAT_COUNTER_LIMIT) {
 8001370:	4b52      	ldr	r3, [pc, #328]	; (80014bc <main+0x560>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b09      	cmp	r3, #9
 8001376:	d813      	bhi.n	80013a0 <main+0x444>
							print("BPM: %0.2f | SpO2: %0.2f%%\n",
									result.heart_bpm, result.spO2);
 8001378:	68bb      	ldr	r3, [r7, #8]
							print("BPM: %0.2f | SpO2: %0.2f%%\n",
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f8ec 	bl	8000558 <__aeabi_f2d>
 8001380:	4604      	mov	r4, r0
 8001382:	460d      	mov	r5, r1
									result.heart_bpm, result.spO2);
 8001384:	69bb      	ldr	r3, [r7, #24]
							print("BPM: %0.2f | SpO2: %0.2f%%\n",
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8e6 	bl	8000558 <__aeabi_f2d>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	e9cd 2300 	strd	r2, r3, [sp]
 8001394:	4622      	mov	r2, r4
 8001396:	462b      	mov	r3, r5
 8001398:	484c      	ldr	r0, [pc, #304]	; (80014cc <main+0x570>)
 800139a:	f005 ff61 	bl	8007260 <print>
 800139e:	e07d      	b.n	800149c <main+0x540>
						} else if (beatCounter >= BEAT_COUNTER_LIMIT) {
 80013a0:	4b46      	ldr	r3, [pc, #280]	; (80014bc <main+0x560>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	d979      	bls.n	800149c <main+0x540>
							finalHR = result.heart_bpm;
 80013a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b0:	ee17 3a90 	vmov	r3, s15
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	4b46      	ldr	r3, [pc, #280]	; (80014d0 <main+0x574>)
 80013b8:	801a      	strh	r2, [r3, #0]
							finalSpO2 = result.spO2;
 80013ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80013be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c2:	ee17 3a90 	vmov	r3, s15
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <main+0x578>)
 80013ca:	801a      	strh	r2, [r3, #0]
							finalSpO2++;
 80013cc:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <main+0x578>)
 80013ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21a      	sxth	r2, r3
 80013da:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <main+0x578>)
 80013dc:	801a      	strh	r2, [r3, #0]
							print(
 80013de:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <main+0x574>)
 80013e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <main+0x578>)
 80013e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ec:	461a      	mov	r2, r3
 80013ee:	483a      	ldr	r0, [pc, #232]	; (80014d8 <main+0x57c>)
 80013f0:	f005 ff36 	bl	8007260 <print>
									"//===============| Final HR: %d | SpO2: %d%%|==============//\n",
									finalHR, finalSpO2);
							beatCounter = 0;
 80013f4:	4b31      	ldr	r3, [pc, #196]	; (80014bc <main+0x560>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]

							if (finalHR > 0) {
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <main+0x574>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd24      	ble.n	800144e <main+0x4f2>
								globalHR = finalHR;
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <main+0x574>)
 8001406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140a:	461a      	mov	r2, r3
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <main+0x580>)
 800140e:	601a      	str	r2, [r3, #0]
								LCD_SetTextColor(WHITE, RED);
 8001410:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001414:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001418:	f008 fcdc 	bl	8009dd4 <LCD_SetTextColor>
								LCD_SetTextSize(2);
 800141c:	2002      	movs	r0, #2
 800141e:	f008 fcc3 	bl	8009da8 <LCD_SetTextSize>
								LCD_SetCursor(38, 70);
 8001422:	2146      	movs	r1, #70	; 0x46
 8001424:	2026      	movs	r0, #38	; 0x26
 8001426:	f008 fca7 	bl	8009d78 <LCD_SetCursor>
								if (finalHR < 100)
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <main+0x574>)
 800142c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001430:	2b63      	cmp	r3, #99	; 0x63
 8001432:	dc06      	bgt.n	8001442 <main+0x4e6>
									LCD_Printf("%d ", globalHR);
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <main+0x580>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4829      	ldr	r0, [pc, #164]	; (80014e0 <main+0x584>)
 800143c:	f008 fbb4 	bl	8009ba8 <LCD_Printf>
 8001440:	e005      	b.n	800144e <main+0x4f2>
								else
									LCD_Printf("%d", globalHR);
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <main+0x580>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	4826      	ldr	r0, [pc, #152]	; (80014e4 <main+0x588>)
 800144a:	f008 fbad 	bl	8009ba8 <LCD_Printf>
							}
							if ((finalSpO2 > 0) && (finalSpO2 < 100)) {
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <main+0x578>)
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	2b00      	cmp	r3, #0
 8001456:	dd21      	ble.n	800149c <main+0x540>
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <main+0x578>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	2b63      	cmp	r3, #99	; 0x63
 8001460:	dc1c      	bgt.n	800149c <main+0x540>
								globalSpO2 = finalSpO2;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <main+0x578>)
 8001464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001468:	461a      	mov	r2, r3
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <main+0x58c>)
 800146c:	601a      	str	r2, [r3, #0]
								LCD_SetTextColor(WHITE,
										LCD_Color565(16, 220, 21));
 800146e:	2215      	movs	r2, #21
 8001470:	21dc      	movs	r1, #220	; 0xdc
 8001472:	2010      	movs	r0, #16
 8001474:	f007 ff08 	bl	8009288 <LCD_Color565>
 8001478:	4603      	mov	r3, r0
								LCD_SetTextColor(WHITE,
 800147a:	b29b      	uxth	r3, r3
 800147c:	4619      	mov	r1, r3
 800147e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001482:	f008 fca7 	bl	8009dd4 <LCD_SetTextColor>
								LCD_SetCursor(160, 70);
 8001486:	2146      	movs	r1, #70	; 0x46
 8001488:	20a0      	movs	r0, #160	; 0xa0
 800148a:	f008 fc75 	bl	8009d78 <LCD_SetCursor>
								LCD_Printf("%d", finalSpO2);
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <main+0x578>)
 8001490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001494:	4619      	mov	r1, r3
 8001496:	4813      	ldr	r0, [pc, #76]	; (80014e4 <main+0x588>)
 8001498:	f008 fb86 	bl	8009ba8 <LCD_Printf>
							}
						}
					}

					max30100_startTime = HAL_GetTick();
 800149c:	f000 fefa 	bl	8002294 <HAL_GetTick>
 80014a0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
				}
				HAL_Delay(10);
 80014a4:	200a      	movs	r0, #10
 80014a6:	f000 ff01 	bl	80022ac <HAL_Delay>
 80014aa:	e0ef      	b.n	800168c <main+0x730>
 80014ac:	20000012 	.word	0x20000012
 80014b0:	200003c8 	.word	0x200003c8
 80014b4:	2000044e 	.word	0x2000044e
 80014b8:	2000044c 	.word	0x2000044c
 80014bc:	20000011 	.word	0x20000011
 80014c0:	0800ff30 	.word	0x0800ff30
 80014c4:	461c4000 	.word	0x461c4000
 80014c8:	0800ff3c 	.word	0x0800ff3c
 80014cc:	0800ff50 	.word	0x0800ff50
 80014d0:	20000448 	.word	0x20000448
 80014d4:	2000044a 	.word	0x2000044a
 80014d8:	0800ff6c 	.word	0x0800ff6c
 80014dc:	20000004 	.word	0x20000004
 80014e0:	0800ffac 	.word	0x0800ffac
 80014e4:	0800ffb0 	.word	0x0800ffb0
 80014e8:	20000008 	.word	0x20000008

				//				print("%0.2f, %0.2f\n", result.dc_filtered_ir,
				//						result.dc_filtered_red);
			}
		} else if (menu_select_flag == 2) {
 80014ec:	4b7e      	ldr	r3, [pc, #504]	; (80016e8 <main+0x78c>)
 80014ee:	f993 3000 	ldrsb.w	r3, [r3]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	f040 80ae 	bne.w	8001654 <main+0x6f8>
			if (max30100_on) {
 80014f8:	4b7c      	ldr	r3, [pc, #496]	; (80016ec <main+0x790>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <main+0x5bc>
				max30100_shutdown(&max30100);
 8001500:	487b      	ldr	r0, [pc, #492]	; (80016f0 <main+0x794>)
 8001502:	f006 ff61 	bl	80083c8 <max30100_shutdown>
				HAL_I2C_DeInit(&hi2c1);
 8001506:	487b      	ldr	r0, [pc, #492]	; (80016f4 <main+0x798>)
 8001508:	f001 ff7e 	bl	8003408 <HAL_I2C_DeInit>
				max30100_off = true;
 800150c:	4b7a      	ldr	r3, [pc, #488]	; (80016f8 <main+0x79c>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
				max30100_on = false;
 8001512:	4b76      	ldr	r3, [pc, #472]	; (80016ec <main+0x790>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
			}
			if(ECG_EN == false){
 8001518:	4b78      	ldr	r3, [pc, #480]	; (80016fc <main+0x7a0>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	f083 0301 	eor.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <main+0x5da>
				MY_ADC1_Init_ECG();
 8001526:	f000 fb07 	bl	8001b38 <MY_ADC1_Init_ECG>
				ECG_EN = true;
 800152a:	4b74      	ldr	r3, [pc, #464]	; (80016fc <main+0x7a0>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
				CJMCU_EN = false;
 8001530:	4b73      	ldr	r3, [pc, #460]	; (8001700 <main+0x7a4>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
			}
			adcDataPrev = adcData;
 8001536:	4b73      	ldr	r3, [pc, #460]	; (8001704 <main+0x7a8>)
 8001538:	f9b3 2000 	ldrsh.w	r2, [r3]
 800153c:	4b72      	ldr	r3, [pc, #456]	; (8001708 <main+0x7ac>)
 800153e:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Start(&hadc1);
 8001540:	4872      	ldr	r0, [pc, #456]	; (800170c <main+0x7b0>)
 8001542:	f000 ff1b 	bl	800237c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8001546:	2164      	movs	r1, #100	; 0x64
 8001548:	4870      	ldr	r0, [pc, #448]	; (800170c <main+0x7b0>)
 800154a:	f000 fffe 	bl	800254a <HAL_ADC_PollForConversion>
			adcData = (uint16_t) HAL_ADC_GetValue(&hadc1);
 800154e:	486f      	ldr	r0, [pc, #444]	; (800170c <main+0x7b0>)
 8001550:	f001 f886 	bl	8002660 <HAL_ADC_GetValue>
 8001554:	4603      	mov	r3, r0
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b6a      	ldr	r3, [pc, #424]	; (8001704 <main+0x7a8>)
 800155a:	801a      	strh	r2, [r3, #0]
			sprintf(print_char, "Analog Val: %d\n", adcData);
 800155c:	4b69      	ldr	r3, [pc, #420]	; (8001704 <main+0x7a8>)
 800155e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001562:	461a      	mov	r2, r3
 8001564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001568:	4969      	ldr	r1, [pc, #420]	; (8001710 <main+0x7b4>)
 800156a:	4618      	mov	r0, r3
 800156c:	f00b ffc0 	bl	800d4f0 <siprintf>
			USART_WRITE(USART2, print_char, strlen(print_char), 10);
 8001570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fe33 	bl	80001e0 <strlen>
 800157a:	4602      	mov	r2, r0
 800157c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001580:	230a      	movs	r3, #10
 8001582:	4864      	ldr	r0, [pc, #400]	; (8001714 <main+0x7b8>)
 8001584:	f005 fe3c 	bl	8007200 <USART_WRITE>

			if ((adcData - adcDataPrev) > 800) {
 8001588:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <main+0x7a8>)
 800158a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158e:	461a      	mov	r2, r3
 8001590:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <main+0x7ac>)
 8001592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800159c:	dd04      	ble.n	80015a8 <main+0x64c>
				ECG_HR += 1;
 800159e:	4b5e      	ldr	r3, [pc, #376]	; (8001718 <main+0x7bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a5c      	ldr	r2, [pc, #368]	; (8001718 <main+0x7bc>)
 80015a6:	6013      	str	r3, [r2, #0]
			}

			//			LCD_ECGAnimation();

			if ((HAL_GetTick() - ecg_startTime) > ecg_lapsedTime) {
 80015a8:	f000 fe74 	bl	8002294 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d267      	bcs.n	800168c <main+0x730>
				if ((ECG_HR > 0) && (ECG_HR < 100))
 80015bc:	4b56      	ldr	r3, [pc, #344]	; (8001718 <main+0x7bc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	dd07      	ble.n	80015d4 <main+0x678>
 80015c4:	4b54      	ldr	r3, [pc, #336]	; (8001718 <main+0x7bc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b63      	cmp	r3, #99	; 0x63
 80015ca:	dc03      	bgt.n	80015d4 <main+0x678>
					globalECG = ECG_HR;
 80015cc:	4b52      	ldr	r3, [pc, #328]	; (8001718 <main+0x7bc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <main+0x7c0>)
 80015d2:	6013      	str	r3, [r2, #0]

				sprintf(print_char,
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <main+0x7bc>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015dc:	4950      	ldr	r1, [pc, #320]	; (8001720 <main+0x7c4>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f00b ff86 	bl	800d4f0 <siprintf>
						"<===========|The ECG Heart Rate is: %d|=========>\r\n",
						ECG_HR);
				USART_WRITE(USART2, print_char, strlen(print_char), 10);
 80015e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fdf9 	bl	80001e0 <strlen>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015f4:	230a      	movs	r3, #10
 80015f6:	4847      	ldr	r0, [pc, #284]	; (8001714 <main+0x7b8>)
 80015f8:	f005 fe02 	bl	8007200 <USART_WRITE>
				LCD_SetTextColor(BLACK, WHITE);
 80015fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001600:	2000      	movs	r0, #0
 8001602:	f008 fbe7 	bl	8009dd4 <LCD_SetTextColor>
				LCD_SetCursor(180, 270);
 8001606:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800160a:	20b4      	movs	r0, #180	; 0xb4
 800160c:	f008 fbb4 	bl	8009d78 <LCD_SetCursor>
				LCD_SetTextSize(2);
 8001610:	2002      	movs	r0, #2
 8001612:	f008 fbc9 	bl	8009da8 <LCD_SetTextSize>
				if (globalECG < 10)
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <main+0x7c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b09      	cmp	r3, #9
 800161c:	dc06      	bgt.n	800162c <main+0x6d0>
					LCD_Printf(" %d", globalECG);
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <main+0x7c0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	483f      	ldr	r0, [pc, #252]	; (8001724 <main+0x7c8>)
 8001626:	f008 fabf 	bl	8009ba8 <LCD_Printf>
 800162a:	e009      	b.n	8001640 <main+0x6e4>
				else if (globalECG < 100)
 800162c:	4b3b      	ldr	r3, [pc, #236]	; (800171c <main+0x7c0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b63      	cmp	r3, #99	; 0x63
 8001632:	dc05      	bgt.n	8001640 <main+0x6e4>
					LCD_Printf("%d", globalECG);
 8001634:	4b39      	ldr	r3, [pc, #228]	; (800171c <main+0x7c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	483b      	ldr	r0, [pc, #236]	; (8001728 <main+0x7cc>)
 800163c:	f008 fab4 	bl	8009ba8 <LCD_Printf>
				ECG_HR = 0;
 8001640:	4b35      	ldr	r3, [pc, #212]	; (8001718 <main+0x7bc>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
				LCD_ECGAnimation();
 8001646:	f006 f931 	bl	80078ac <LCD_ECGAnimation>
				ecg_startTime = HAL_GetTick();
 800164a:	f000 fe23 	bl	8002294 <HAL_GetTick>
 800164e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8001652:	e01b      	b.n	800168c <main+0x730>
			}

		} else if ((menu_select_flag < -1) && (menu_select_flag > 3)) {
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <main+0x78c>)
 8001656:	f993 3000 	ldrsb.w	r3, [r3]
 800165a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165e:	da15      	bge.n	800168c <main+0x730>
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <main+0x78c>)
 8001662:	f993 3000 	ldrsb.w	r3, [r3]
 8001666:	2b03      	cmp	r3, #3
 8001668:	dd10      	ble.n	800168c <main+0x730>
			menu_select_flag = -1;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <main+0x78c>)
 800166c:	22ff      	movs	r2, #255	; 0xff
 800166e:	701a      	strb	r2, [r3, #0]
			print("Oh no, a Glitch!!\n\r");
 8001670:	482e      	ldr	r0, [pc, #184]	; (800172c <main+0x7d0>)
 8001672:	f005 fdf5 	bl	8007260 <print>
			Delay(500);
 8001676:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800167a:	f000 fe17 	bl	80022ac <HAL_Delay>
			print("We're good\n\r");
 800167e:	482c      	ldr	r0, [pc, #176]	; (8001730 <main+0x7d4>)
 8001680:	f005 fdee 	bl	8007260 <print>
			Delay(500);
 8001684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001688:	f000 fe10 	bl	80022ac <HAL_Delay>
		}

		if ((HAL_GetTick() - wifi_startTime) > wifi_lapsedTime) {
 800168c:	f000 fe02 	bl	8002294 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800169c:	429a      	cmp	r2, r3
 800169e:	f4bf ad03 	bcs.w	80010a8 <main+0x14c>
			sprintf(globalStr, "T:%0.2f|H:%d|S:%d|E:%d\r\n", globalTemp,
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <main+0x7d8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff56 	bl	8000558 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4921      	ldr	r1, [pc, #132]	; (8001738 <main+0x7dc>)
 80016b2:	6809      	ldr	r1, [r1, #0]
 80016b4:	4821      	ldr	r0, [pc, #132]	; (800173c <main+0x7e0>)
 80016b6:	6800      	ldr	r0, [r0, #0]
 80016b8:	4c18      	ldr	r4, [pc, #96]	; (800171c <main+0x7c0>)
 80016ba:	6824      	ldr	r4, [r4, #0]
 80016bc:	9402      	str	r4, [sp, #8]
 80016be:	9001      	str	r0, [sp, #4]
 80016c0:	9100      	str	r1, [sp, #0]
 80016c2:	491f      	ldr	r1, [pc, #124]	; (8001740 <main+0x7e4>)
 80016c4:	481f      	ldr	r0, [pc, #124]	; (8001744 <main+0x7e8>)
 80016c6:	f00b ff13 	bl	800d4f0 <siprintf>
					globalHR, globalSpO2, globalECG);
			USART_WRITE(USART6, globalStr, strlen(globalStr), 10);
 80016ca:	481e      	ldr	r0, [pc, #120]	; (8001744 <main+0x7e8>)
 80016cc:	f7fe fd88 	bl	80001e0 <strlen>
 80016d0:	4602      	mov	r2, r0
 80016d2:	230a      	movs	r3, #10
 80016d4:	491b      	ldr	r1, [pc, #108]	; (8001744 <main+0x7e8>)
 80016d6:	481c      	ldr	r0, [pc, #112]	; (8001748 <main+0x7ec>)
 80016d8:	f005 fd92 	bl	8007200 <USART_WRITE>
			wifi_startTime = HAL_GetTick();
 80016dc:	f000 fdda 	bl	8002294 <HAL_GetTick>
 80016e0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		if (menu_select_flag == 0) {
 80016e4:	e4e0      	b.n	80010a8 <main+0x14c>
 80016e6:	bf00      	nop
 80016e8:	20000010 	.word	0x20000010
 80016ec:	2000044e 	.word	0x2000044e
 80016f0:	200003c8 	.word	0x200003c8
 80016f4:	200002b0 	.word	0x200002b0
 80016f8:	20000012 	.word	0x20000012
 80016fc:	2000044f 	.word	0x2000044f
 8001700:	20000450 	.word	0x20000450
 8001704:	200003c0 	.word	0x200003c0
 8001708:	200003c2 	.word	0x200003c2
 800170c:	20000268 	.word	0x20000268
 8001710:	0800ffb4 	.word	0x0800ffb4
 8001714:	40004400 	.word	0x40004400
 8001718:	200003c4 	.word	0x200003c4
 800171c:	2000000c 	.word	0x2000000c
 8001720:	0800ffc4 	.word	0x0800ffc4
 8001724:	0800fff8 	.word	0x0800fff8
 8001728:	0800ffb0 	.word	0x0800ffb0
 800172c:	0800fffc 	.word	0x0800fffc
 8001730:	08010010 	.word	0x08010010
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004
 800173c:	20000008 	.word	0x20000008
 8001740:	08010020 	.word	0x08010020
 8001744:	200003a0 	.word	0x200003a0
 8001748:	40011400 	.word	0x40011400

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b094      	sub	sp, #80	; 0x50
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 0320 	add.w	r3, r7, #32
 8001756:	2230      	movs	r2, #48	; 0x30
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f00b f966 	bl	800ca2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <SystemClock_Config+0xd0>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	4a28      	ldr	r2, [pc, #160]	; (800181c <SystemClock_Config+0xd0>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177e:	6413      	str	r3, [r2, #64]	; 0x40
 8001780:	4b26      	ldr	r3, [pc, #152]	; (800181c <SystemClock_Config+0xd0>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <SystemClock_Config+0xd4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001798:	4a21      	ldr	r2, [pc, #132]	; (8001820 <SystemClock_Config+0xd4>)
 800179a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <SystemClock_Config+0xd4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ac:	2302      	movs	r3, #2
 80017ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	2301      	movs	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b4:	2310      	movs	r3, #16
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b8:	2302      	movs	r3, #2
 80017ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017bc:	2300      	movs	r3, #0
 80017be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017c0:	2310      	movs	r3, #16
 80017c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017ca:	2304      	movs	r3, #4
 80017cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017ce:	2307      	movs	r3, #7
 80017d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fde0 	bl	800439c <HAL_RCC_OscConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017e2:	f000 fa09 	bl	8001bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e6:	230f      	movs	r3, #15
 80017e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ea:	2302      	movs	r3, #2
 80017ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2102      	movs	r1, #2
 8001802:	4618      	mov	r0, r3
 8001804:	f003 f842 	bl	800488c <HAL_RCC_ClockConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800180e:	f000 f9f3 	bl	8001bf8 <Error_Handler>
  }
}
 8001812:	bf00      	nop
 8001814:	3750      	adds	r7, #80	; 0x50
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40007000 	.word	0x40007000

08001824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <MX_I2C1_Init+0x50>)
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <MX_I2C1_Init+0x54>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_I2C1_Init+0x50>)
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <MX_I2C1_Init+0x58>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_I2C1_Init+0x50>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_I2C1_Init+0x50>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_I2C1_Init+0x50>)
 8001842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <MX_I2C1_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_I2C1_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <MX_I2C1_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_I2C1_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_I2C1_Init+0x50>)
 8001862:	f001 fc8d 	bl	8003180 <HAL_I2C_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800186c:	f000 f9c4 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200002b0 	.word	0x200002b0
 8001878:	40005400 	.word	0x40005400
 800187c:	000186a0 	.word	0x000186a0

08001880 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <MX_SPI1_Init+0x64>)
 8001886:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <MX_SPI1_Init+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_SPI1_Init+0x64>)
 800188c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001890:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_SPI1_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_SPI1_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_SPI1_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_SPI1_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_SPI1_Init+0x64>)
 80018ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_SPI1_Init+0x64>)
 80018b4:	2230      	movs	r2, #48	; 0x30
 80018b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <MX_SPI1_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_SPI1_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <MX_SPI1_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_SPI1_Init+0x64>)
 80018cc:	220a      	movs	r2, #10
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_SPI1_Init+0x64>)
 80018d2:	f003 fa2d 	bl	8004d30 <HAL_SPI_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018dc:	f000 f98c 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000304 	.word	0x20000304
 80018e8:	40013000 	.word	0x40013000

080018ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <MX_USART2_UART_Init+0x50>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001924:	f003 ff7a 	bl	800581c <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800192e:	f000 f963 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000035c 	.word	0x2000035c
 800193c:	40004400 	.word	0x40004400

08001940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <MX_GPIO_Init+0xb4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <MX_GPIO_Init+0xb4>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <MX_GPIO_Init+0xb4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_GPIO_Init+0xb4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <MX_GPIO_Init+0xb4>)
 800197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_GPIO_Init+0xb4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <MX_GPIO_Init+0xb4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <MX_GPIO_Init+0xb4>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <MX_GPIO_Init+0xb4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_GPIO_Init+0xb4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <MX_GPIO_Init+0xb4>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_GPIO_Init+0xb4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2140      	movs	r1, #64	; 0x40
 80019ca:	480b      	ldr	r0, [pc, #44]	; (80019f8 <MX_GPIO_Init+0xb8>)
 80019cc:	f001 fbbe 	bl	800314c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80019d0:	2340      	movs	r3, #64	; 0x40
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_GPIO_Init+0xb8>)
 80019e8:	f001 f948 	bl	8002c7c <HAL_GPIO_Init>

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020400 	.word	0x40020400

080019fc <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI9_5_IRQHandler() {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
	if (gpio_IT_CHK(9)) {
 8001a02:	2009      	movs	r0, #9
 8001a04:	f005 faba 	bl	8006f7c <gpio_IT_CHK>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01b      	beq.n	8001a46 <EXTI9_5_IRQHandler+0x4a>
		for (int i = 2000000; i > 0; i--)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <EXTI9_5_IRQHandler+0x54>)
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	e002      	b.n	8001a1a <EXTI9_5_IRQHandler+0x1e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	dcf9      	bgt.n	8001a14 <EXTI9_5_IRQHandler+0x18>
			;
		menu_select_flag = (menu_select_flag + 1) % 3;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <EXTI9_5_IRQHandler+0x58>)
 8001a22:	f993 3000 	ldrsb.w	r3, [r3]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <EXTI9_5_IRQHandler+0x5c>)
 8001a2a:	fb83 3102 	smull	r3, r1, r3, r2
 8001a2e:	17d3      	asrs	r3, r2, #31
 8001a30:	1ac9      	subs	r1, r1, r3
 8001a32:	460b      	mov	r3, r1
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	440b      	add	r3, r1
 8001a38:	1ad1      	subs	r1, r2, r3
 8001a3a:	b24a      	sxtb	r2, r1
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <EXTI9_5_IRQHandler+0x58>)
 8001a3e:	701a      	strb	r2, [r3, #0]

//		print("interrupt: %d\r\n", menu_select_flag);
		gpio_IT_CLR(9);
 8001a40:	2009      	movs	r0, #9
 8001a42:	f005 fab5 	bl	8006fb0 <gpio_IT_CLR>
	}
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	001e8480 	.word	0x001e8480
 8001a54:	20000010 	.word	0x20000010
 8001a58:	55555556 	.word	0x55555556

08001a5c <MY_ADC1_Init_CJMCU>:

static void MY_ADC1_Init_CJMCU(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a62:	463b      	mov	r3, r7
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a6e:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001a70:	4a2f      	ldr	r2, [pc, #188]	; (8001b30 <MY_ADC1_Init_CJMCU+0xd4>)
 8001a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a74:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a82:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001a9e:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <MY_ADC1_Init_CJMCU+0xd8>)
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001aaa:	2202      	movs	r2, #2
 8001aac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001abc:	481b      	ldr	r0, [pc, #108]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001abe:	f000 fc19 	bl	80022f4 <HAL_ADC_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MY_ADC1_Init_CJMCU+0x70>
  {
    Error_Handler();
 8001ac8:	f000 f896 	bl	8001bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001acc:	230c      	movs	r3, #12
 8001ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4813      	ldr	r0, [pc, #76]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001ade:	f000 fdcd 	bl	800267c <HAL_ADC_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MY_ADC1_Init_CJMCU+0x90>
  {
    Error_Handler();
 8001ae8:	f000 f886 	bl	8001bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001aec:	230d      	movs	r3, #13
 8001aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af4:	463b      	mov	r3, r7
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001afa:	f000 fdbf 	bl	800267c <HAL_ADC_ConfigChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MY_ADC1_Init_CJMCU+0xac>
  {
    Error_Handler();
 8001b04:	f000 f878 	bl	8001bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001b08:	230e      	movs	r3, #14
 8001b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MY_ADC1_Init_CJMCU+0xd0>)
 8001b16:	f000 fdb1 	bl	800267c <HAL_ADC_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MY_ADC1_Init_CJMCU+0xc8>
  {
    Error_Handler();
 8001b20:	f000 f86a 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000268 	.word	0x20000268
 8001b30:	40012000 	.word	0x40012000
 8001b34:	0f000001 	.word	0x0f000001

08001b38 <MY_ADC1_Init_ECG>:

static void MY_ADC1_Init_ECG(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b3e:	463b      	mov	r3, r7
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b4c:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <MY_ADC1_Init_ECG+0x94>)
 8001b4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <MY_ADC1_Init_ECG+0x98>)
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b98:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001b9a:	f000 fbab 	bl	80022f4 <HAL_ADC_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MY_ADC1_Init_ECG+0x70>
  {
    Error_Handler();
 8001ba4:	f000 f828 	bl	8001bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001ba8:	230e      	movs	r3, #14
 8001baa:	603b      	str	r3, [r7, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bac:	463b      	mov	r3, r7
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MY_ADC1_Init_ECG+0x90>)
 8001bb2:	f000 fd63 	bl	800267c <HAL_ADC_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MY_ADC1_Init_ECG+0x88>
  {
    Error_Handler();
 8001bbc:	f000 f81c 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000268 	.word	0x20000268
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	0f000001 	.word	0x0f000001

08001bd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001be6:	f000 fb41 	bl	800226c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40014800 	.word	0x40014800

08001bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
}
 8001bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c00:	e7fe      	b.n	8001c00 <Error_Handler+0x8>
	...

08001c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <HAL_ADC_MspInit+0x7c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d127      	bne.n	8001cc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_ADC_MspInit+0x80>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <HAL_ADC_MspInit+0x80>)
 8001c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_ADC_MspInit+0x80>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_ADC_MspInit+0x80>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_ADC_MspInit+0x80>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_ADC_MspInit+0x80>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001cae:	231c      	movs	r3, #28
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_ADC_MspInit+0x84>)
 8001cc2:	f000 ffdb 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40012000 	.word	0x40012000
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020800 	.word	0x40020800

08001cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_I2C_MspInit+0x84>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d12c      	bne.n	8001d58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d20:	2312      	movs	r3, #18
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	480c      	ldr	r0, [pc, #48]	; (8001d68 <HAL_I2C_MspInit+0x8c>)
 8001d38:	f000 ffa0 	bl	8002c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40005400 	.word	0x40005400
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020400 	.word	0x40020400

08001d6c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <HAL_I2C_MspDeInit+0x3c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10f      	bne.n	8001d9e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_I2C_MspDeInit+0x40>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_I2C_MspDeInit+0x40>)
 8001d84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8e:	4808      	ldr	r0, [pc, #32]	; (8001db0 <HAL_I2C_MspDeInit+0x44>)
 8001d90:	f001 f8f8 	bl	8002f84 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <HAL_I2C_MspDeInit+0x44>)
 8001d9a:	f001 f8f3 	bl	8002f84 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40005400 	.word	0x40005400
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020400 	.word	0x40020400

08001db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <HAL_SPI_MspInit+0x84>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d12b      	bne.n	8001e2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_SPI_MspInit+0x88>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <HAL_SPI_MspInit+0x88>)
 8001de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_SPI_MspInit+0x88>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_SPI_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a10      	ldr	r2, [pc, #64]	; (8001e3c <HAL_SPI_MspInit+0x88>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_SPI_MspInit+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001e0e:	23e0      	movs	r3, #224	; 0xe0
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <HAL_SPI_MspInit+0x8c>)
 8001e2a:	f000 ff27 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	; 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40013000 	.word	0x40013000
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000

08001e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_UART_MspInit+0x84>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d12b      	bne.n	8001ebe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eae:	2307      	movs	r3, #7
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_UART_MspInit+0x8c>)
 8001eba:	f000 fedf 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	; 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40004400 	.word	0x40004400
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_InitTick+0xd0>)
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <HAL_InitTick+0xd0>)
 8001eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_InitTick+0xd0>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f00:	f107 020c 	add.w	r2, r7, #12
 8001f04:	f107 0310 	add.w	r3, r7, #16
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fede 	bl	8004ccc <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f10:	f002 fec8 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8001f14:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <HAL_InitTick+0xd4>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0c9b      	lsrs	r3, r3, #18
 8001f20:	3b01      	subs	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_InitTick+0xd8>)
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_InitTick+0xdc>)
 8001f28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_InitTick+0xd8>)
 8001f2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f30:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001f32:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <HAL_InitTick+0xd8>)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_InitTick+0xd8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_InitTick+0xd8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_InitTick+0xd8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001f4a:	4818      	ldr	r0, [pc, #96]	; (8001fac <HAL_InitTick+0xd8>)
 8001f4c:	f003 f9e6 	bl	800531c <HAL_TIM_Base_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d11b      	bne.n	8001f96 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001f5e:	4813      	ldr	r0, [pc, #76]	; (8001fac <HAL_InitTick+0xd8>)
 8001f60:	f003 fa36 	bl	80053d0 <HAL_TIM_Base_Start_IT>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d111      	bne.n	8001f96 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f72:	201a      	movs	r0, #26
 8001f74:	f000 fe74 	bl	8002c60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	d808      	bhi.n	8001f90 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	201a      	movs	r0, #26
 8001f84:	f000 fe50 	bl	8002c28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f88:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_InitTick+0xe0>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e002      	b.n	8001f96 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3730      	adds	r7, #48	; 0x30
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	431bde83 	.word	0x431bde83
 8001fac:	20000454 	.word	0x20000454
 8001fb0:	40014800 	.word	0x40014800
 8001fb4:	20000018 	.word	0x20000018

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <NMI_Handler+0x4>

08001fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler+0x4>

08001fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <MemManage_Handler+0x4>

08001fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002016:	f003 fa3d 	bl	8005494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000454 	.word	0x20000454

08002024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
	return 1;
 8002028:	2301      	movs	r3, #1
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_kill>:

int _kill(int pid, int sig)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800203e:	f00a fcc3 	bl	800c9c8 <__errno>
 8002042:	4603      	mov	r3, r0
 8002044:	2216      	movs	r2, #22
 8002046:	601a      	str	r2, [r3, #0]
	return -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_exit>:

void _exit (int status)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ffe7 	bl	8002034 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002066:	e7fe      	b.n	8002066 <_exit+0x12>

08002068 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	e00a      	b.n	8002090 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800207a:	f3af 8000 	nop.w
 800207e:	4601      	mov	r1, r0
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	60ba      	str	r2, [r7, #8]
 8002086:	b2ca      	uxtb	r2, r1
 8002088:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	dbf0      	blt.n	800207a <_read+0x12>
	}

return len;
 8002098:	687b      	ldr	r3, [r7, #4]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e009      	b.n	80020c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	60ba      	str	r2, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dbf1      	blt.n	80020b4 <_write+0x12>
	}
	return len;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <_close>:

int _close(int file)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
	return -1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002102:	605a      	str	r2, [r3, #4]
	return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_isatty>:

int _isatty(int file)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
	return 1;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
	return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <_sbrk+0x5c>)
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <_sbrk+0x60>)
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <_sbrk+0x64>)
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <_sbrk+0x68>)
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d207      	bcs.n	8002184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002174:	f00a fc28 	bl	800c9c8 <__errno>
 8002178:	4603      	mov	r3, r0
 800217a:	220c      	movs	r2, #12
 800217c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	e009      	b.n	8002198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <_sbrk+0x64>)
 8002194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20018000 	.word	0x20018000
 80021a4:	00000400 	.word	0x00000400
 80021a8:	2000049c 	.word	0x2000049c
 80021ac:	20000bb8 	.word	0x20000bb8

080021b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <SystemInit+0x20>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <SystemInit+0x20>)
 80021bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800220c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d8:	480d      	ldr	r0, [pc, #52]	; (8002210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021da:	490e      	ldr	r1, [pc, #56]	; (8002214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0b      	ldr	r2, [pc, #44]	; (800221c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021f0:	4c0b      	ldr	r4, [pc, #44]	; (8002220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021fe:	f7ff ffd7 	bl	80021b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002202:	f00a fbe7 	bl	800c9d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002206:	f7fe fea9 	bl	8000f5c <main>
  bx  lr    
 800220a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800220c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002214:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8002218:	08010d9c 	.word	0x08010d9c
  ldr r2, =_sbss
 800221c:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8002220:	20000bb4 	.word	0x20000bb4

08002224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC_IRQHandler>
	...

08002228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <HAL_Init+0x40>)
 8002232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <HAL_Init+0x40>)
 800223e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_Init+0x40>)
 800224a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 fcde 	bl	8002c12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002256:	200f      	movs	r0, #15
 8002258:	f7ff fe3c 	bl	8001ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800225c:	f7ff fcd2 	bl	8001c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023c00 	.word	0x40023c00

0800226c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x20>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x24>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_IncTick+0x24>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	2000001c 	.word	0x2000001c
 8002290:	200004a0 	.word	0x200004a0

08002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_GetTick+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	200004a0 	.word	0x200004a0

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff ffee 	bl	8002294 <HAL_GetTick>
 80022b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d005      	beq.n	80022d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_Delay+0x44>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022d2:	bf00      	nop
 80022d4:	f7ff ffde 	bl	8002294 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8f7      	bhi.n	80022d4 <HAL_Delay+0x28>
  {
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000001c 	.word	0x2000001c

080022f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e033      	b.n	8002372 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff fc9e 	bl	8001c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d118      	bne.n	8002364 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800233a:	f023 0302 	bic.w	r3, r3, #2
 800233e:	f043 0202 	orr.w	r2, r3, #2
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 faba 	bl	80028c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
 8002362:	e001      	b.n	8002368 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002370:	7bfb      	ldrb	r3, [r7, #15]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADC_Start+0x1a>
 8002392:	2302      	movs	r3, #2
 8002394:	e097      	b.n	80024c6 <HAL_ADC_Start+0x14a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d018      	beq.n	80023de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023bc:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <HAL_ADC_Start+0x158>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a45      	ldr	r2, [pc, #276]	; (80024d8 <HAL_ADC_Start+0x15c>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0c9a      	lsrs	r2, r3, #18
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d15f      	bne.n	80024ac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002416:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242a:	d106      	bne.n	800243a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	f023 0206 	bic.w	r2, r3, #6
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	645a      	str	r2, [r3, #68]	; 0x44
 8002438:	e002      	b.n	8002440 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002448:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_ADC_Start+0x160>)
 800244a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002454:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d129      	bne.n	80024c4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	e020      	b.n	80024c4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <HAL_ADC_Start+0x164>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d11b      	bne.n	80024c4 <HAL_ADC_Start+0x148>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d114      	bne.n	80024c4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	e00b      	b.n	80024c4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f043 0210 	orr.w	r2, r3, #16
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000014 	.word	0x20000014
 80024d8:	431bde83 	.word	0x431bde83
 80024dc:	40012300 	.word	0x40012300
 80024e0:	40012000 	.word	0x40012000

080024e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_Stop+0x16>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e021      	b.n	800253e <HAL_ADC_Stop+0x5a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002566:	d113      	bne.n	8002590 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002576:	d10b      	bne.n	8002590 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e063      	b.n	8002658 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002590:	f7ff fe80 	bl	8002294 <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002596:	e021      	b.n	80025dc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d01d      	beq.n	80025dc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_ADC_PollForConversion+0x6c>
 80025a6:	f7ff fe75 	bl	8002294 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d212      	bcs.n	80025dc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d00b      	beq.n	80025dc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e03d      	b.n	8002658 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d1d6      	bne.n	8002598 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f06f 0212 	mvn.w	r2, #18
 80025f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d123      	bne.n	8002656 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002612:	2b00      	cmp	r3, #0
 8002614:	d11f      	bne.n	8002656 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800262e:	2b00      	cmp	r3, #0
 8002630:	d111      	bne.n	8002656 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d105      	bne.n	8002656 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x1c>
 8002694:	2302      	movs	r3, #2
 8002696:	e105      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x228>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	d925      	bls.n	80026f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68d9      	ldr	r1, [r3, #12]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	3b1e      	subs	r3, #30
 80026be:	2207      	movs	r2, #7
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43da      	mvns	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	400a      	ands	r2, r1
 80026cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68d9      	ldr	r1, [r3, #12]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4403      	add	r3, r0
 80026e6:	3b1e      	subs	r3, #30
 80026e8:	409a      	lsls	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	e022      	b.n	800273a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6919      	ldr	r1, [r3, #16]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	2207      	movs	r2, #7
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	4603      	mov	r3, r0
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4403      	add	r3, r0
 8002730:	409a      	lsls	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b06      	cmp	r3, #6
 8002740:	d824      	bhi.n	800278c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	3b05      	subs	r3, #5
 8002754:	221f      	movs	r2, #31
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	400a      	ands	r2, r1
 8002762:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	3b05      	subs	r3, #5
 800277e:	fa00 f203 	lsl.w	r2, r0, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	635a      	str	r2, [r3, #52]	; 0x34
 800278a:	e04c      	b.n	8002826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b0c      	cmp	r3, #12
 8002792:	d824      	bhi.n	80027de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	3b23      	subs	r3, #35	; 0x23
 80027a6:	221f      	movs	r2, #31
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43da      	mvns	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	400a      	ands	r2, r1
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b23      	subs	r3, #35	; 0x23
 80027d0:	fa00 f203 	lsl.w	r2, r0, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
 80027dc:	e023      	b.n	8002826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	3b41      	subs	r3, #65	; 0x41
 80027f0:	221f      	movs	r2, #31
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	400a      	ands	r2, r1
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	4618      	mov	r0, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	3b41      	subs	r3, #65	; 0x41
 800281a:	fa00 f203 	lsl.w	r2, r0, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_ADC_ConfigChannel+0x234>)
 8002828:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <HAL_ADC_ConfigChannel+0x238>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d109      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1cc>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b12      	cmp	r3, #18
 800283a:	d105      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_ADC_ConfigChannel+0x238>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d123      	bne.n	800289a <HAL_ADC_ConfigChannel+0x21e>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b10      	cmp	r3, #16
 8002858:	d003      	beq.n	8002862 <HAL_ADC_ConfigChannel+0x1e6>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b11      	cmp	r3, #17
 8002860:	d11b      	bne.n	800289a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b10      	cmp	r3, #16
 8002874:	d111      	bne.n	800289a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_ADC_ConfigChannel+0x23c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_ADC_ConfigChannel+0x240>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	0c9a      	lsrs	r2, r3, #18
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800288c:	e002      	b.n	8002894 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3b01      	subs	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40012300 	.word	0x40012300
 80028b4:	40012000 	.word	0x40012000
 80028b8:	20000014 	.word	0x20000014
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c8:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <ADC_Init+0x1f0>)
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	021a      	lsls	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <ADC_Init+0x1f4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002966:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e00f      	b.n	80029be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0202 	bic.w	r2, r2, #2
 80029cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7e1b      	ldrb	r3, [r3, #24]
 80029d8:	005a      	lsls	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	3b01      	subs	r3, #1
 8002a18:	035a      	lsls	r2, r3, #13
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	e007      	b.n	8002a34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	051a      	lsls	r2, r3, #20
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a76:	025a      	lsls	r2, r3, #9
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	029a      	lsls	r2, r3, #10
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40012300 	.word	0x40012300
 8002ab4:	0f000001 	.word	0x0f000001

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ff4c 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3a:	f7ff ff61 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	6978      	ldr	r0, [r7, #20]
 8002c46:	f7ff ffb1 	bl	8002bac <NVIC_EncodePriority>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff80 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c58:	bf00      	nop
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff ff54 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e159      	b.n	8002f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 8148 	bne.w	8002f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d005      	beq.n	8002cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d130      	bne.n	8002d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 0201 	and.w	r2, r3, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d017      	beq.n	8002d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d123      	bne.n	8002dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0203 	and.w	r2, r3, #3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80a2 	beq.w	8002f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a56      	ldr	r2, [pc, #344]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e1e:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_GPIO_Init+0x2ec>)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a49      	ldr	r2, [pc, #292]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0x202>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a48      	ldr	r2, [pc, #288]	; (8002f70 <HAL_GPIO_Init+0x2f4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0x1fe>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <HAL_GPIO_Init+0x2f8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_Init+0x1fa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <HAL_GPIO_Init+0x2fc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_Init+0x1f6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a45      	ldr	r2, [pc, #276]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_Init+0x1f2>
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	e008      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e72:	2303      	movs	r3, #3
 8002e74:	e004      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f002 0203 	and.w	r2, r2, #3
 8002e86:	0092      	lsls	r2, r2, #2
 8002e88:	4093      	lsls	r3, r2
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e90:	4935      	ldr	r1, [pc, #212]	; (8002f68 <HAL_GPIO_Init+0x2ec>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e9e:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec2:	4a2f      	ldr	r2, [pc, #188]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eec:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef2:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f16:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f40:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	f67f aea2 	bls.w	8002c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3724      	adds	r7, #36	; 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40020000 	.word	0x40020000
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020c00 	.word	0x40020c00
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40013c00 	.word	0x40013c00

08002f84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e0bb      	b.n	8003118 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	f040 80ab 	bne.w	8003112 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002fbc:	4a5c      	ldr	r2, [pc, #368]	; (8003130 <HAL_GPIO_DeInit+0x1ac>)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_GPIO_DeInit+0x1b0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d019      	beq.n	800301a <HAL_GPIO_DeInit+0x96>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a53      	ldr	r2, [pc, #332]	; (8003138 <HAL_GPIO_DeInit+0x1b4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_GPIO_DeInit+0x92>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_GPIO_DeInit+0x1b8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00d      	beq.n	8003012 <HAL_GPIO_DeInit+0x8e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a51      	ldr	r2, [pc, #324]	; (8003140 <HAL_GPIO_DeInit+0x1bc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <HAL_GPIO_DeInit+0x8a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_GPIO_DeInit+0x1c0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <HAL_GPIO_DeInit+0x86>
 8003006:	2304      	movs	r3, #4
 8003008:	e008      	b.n	800301c <HAL_GPIO_DeInit+0x98>
 800300a:	2307      	movs	r3, #7
 800300c:	e006      	b.n	800301c <HAL_GPIO_DeInit+0x98>
 800300e:	2303      	movs	r3, #3
 8003010:	e004      	b.n	800301c <HAL_GPIO_DeInit+0x98>
 8003012:	2302      	movs	r3, #2
 8003014:	e002      	b.n	800301c <HAL_GPIO_DeInit+0x98>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_GPIO_DeInit+0x98>
 800301a:	2300      	movs	r3, #0
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	f002 0203 	and.w	r2, r2, #3
 8003022:	0092      	lsls	r2, r2, #2
 8003024:	4093      	lsls	r3, r2
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	429a      	cmp	r2, r3
 800302a:	d132      	bne.n	8003092 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800302c:	4b46      	ldr	r3, [pc, #280]	; (8003148 <HAL_GPIO_DeInit+0x1c4>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	43db      	mvns	r3, r3
 8003034:	4944      	ldr	r1, [pc, #272]	; (8003148 <HAL_GPIO_DeInit+0x1c4>)
 8003036:	4013      	ands	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800303a:	4b43      	ldr	r3, [pc, #268]	; (8003148 <HAL_GPIO_DeInit+0x1c4>)
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43db      	mvns	r3, r3
 8003042:	4941      	ldr	r1, [pc, #260]	; (8003148 <HAL_GPIO_DeInit+0x1c4>)
 8003044:	4013      	ands	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003048:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <HAL_GPIO_DeInit+0x1c4>)
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43db      	mvns	r3, r3
 8003050:	493d      	ldr	r1, [pc, #244]	; (8003148 <HAL_GPIO_DeInit+0x1c4>)
 8003052:	4013      	ands	r3, r2
 8003054:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003056:	4b3c      	ldr	r3, [pc, #240]	; (8003148 <HAL_GPIO_DeInit+0x1c4>)
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	43db      	mvns	r3, r3
 800305e:	493a      	ldr	r1, [pc, #232]	; (8003148 <HAL_GPIO_DeInit+0x1c4>)
 8003060:	4013      	ands	r3, r2
 8003062:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003074:	4a2e      	ldr	r2, [pc, #184]	; (8003130 <HAL_GPIO_DeInit+0x1ac>)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	3302      	adds	r3, #2
 800307c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	43da      	mvns	r2, r3
 8003084:	482a      	ldr	r0, [pc, #168]	; (8003130 <HAL_GPIO_DeInit+0x1ac>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	400a      	ands	r2, r1
 800308c:	3302      	adds	r3, #2
 800308e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2103      	movs	r1, #3
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	401a      	ands	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	08da      	lsrs	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3208      	adds	r2, #8
 80030b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	220f      	movs	r2, #15
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	08d2      	lsrs	r2, r2, #3
 80030c8:	4019      	ands	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2103      	movs	r1, #3
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	401a      	ands	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	2101      	movs	r1, #1
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	2103      	movs	r1, #3
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	401a      	ands	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	f67f af40 	bls.w	8002fa0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40013c00 	.word	0x40013c00

0800314c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
 8003158:	4613      	mov	r3, r2
 800315a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800315c:	787b      	ldrb	r3, [r7, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003168:	e003      	b.n	8003172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800316a:	887b      	ldrh	r3, [r7, #2]
 800316c:	041a      	lsls	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	619a      	str	r2, [r3, #24]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e12b      	b.n	80033ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe fd98 	bl	8001cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031e4:	f001 fd4a 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 80031e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4a81      	ldr	r2, [pc, #516]	; (80033f4 <HAL_I2C_Init+0x274>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d807      	bhi.n	8003204 <HAL_I2C_Init+0x84>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a80      	ldr	r2, [pc, #512]	; (80033f8 <HAL_I2C_Init+0x278>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	bf94      	ite	ls
 80031fc:	2301      	movls	r3, #1
 80031fe:	2300      	movhi	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e006      	b.n	8003212 <HAL_I2C_Init+0x92>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a7d      	ldr	r2, [pc, #500]	; (80033fc <HAL_I2C_Init+0x27c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	bf94      	ite	ls
 800320c:	2301      	movls	r3, #1
 800320e:	2300      	movhi	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0e7      	b.n	80033ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a78      	ldr	r2, [pc, #480]	; (8003400 <HAL_I2C_Init+0x280>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0c9b      	lsrs	r3, r3, #18
 8003224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a6a      	ldr	r2, [pc, #424]	; (80033f4 <HAL_I2C_Init+0x274>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d802      	bhi.n	8003254 <HAL_I2C_Init+0xd4>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3301      	adds	r3, #1
 8003252:	e009      	b.n	8003268 <HAL_I2C_Init+0xe8>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	4a69      	ldr	r2, [pc, #420]	; (8003404 <HAL_I2C_Init+0x284>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	3301      	adds	r3, #1
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	430b      	orrs	r3, r1
 800326e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800327a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	495c      	ldr	r1, [pc, #368]	; (80033f4 <HAL_I2C_Init+0x274>)
 8003284:	428b      	cmp	r3, r1
 8003286:	d819      	bhi.n	80032bc <HAL_I2C_Init+0x13c>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e59      	subs	r1, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	fbb1 f3f3 	udiv	r3, r1, r3
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	f640 73fc 	movw	r3, #4092	; 0xffc
 800329c:	400b      	ands	r3, r1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_I2C_Init+0x138>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1e59      	subs	r1, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b0:	3301      	adds	r3, #1
 80032b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b6:	e051      	b.n	800335c <HAL_I2C_Init+0x1dc>
 80032b8:	2304      	movs	r3, #4
 80032ba:	e04f      	b.n	800335c <HAL_I2C_Init+0x1dc>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d111      	bne.n	80032e8 <HAL_I2C_Init+0x168>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e58      	subs	r0, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	440b      	add	r3, r1
 80032d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e012      	b.n	800330e <HAL_I2C_Init+0x18e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e58      	subs	r0, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	0099      	lsls	r1, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Init+0x196>
 8003312:	2301      	movs	r3, #1
 8003314:	e022      	b.n	800335c <HAL_I2C_Init+0x1dc>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10e      	bne.n	800333c <HAL_I2C_Init+0x1bc>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1e58      	subs	r0, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	440b      	add	r3, r1
 800332c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333a:	e00f      	b.n	800335c <HAL_I2C_Init+0x1dc>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1e58      	subs	r0, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	0099      	lsls	r1, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003352:	3301      	adds	r3, #1
 8003354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	6809      	ldr	r1, [r1, #0]
 8003360:	4313      	orrs	r3, r2
 8003362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800338a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6911      	ldr	r1, [r2, #16]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68d2      	ldr	r2, [r2, #12]
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	430b      	orrs	r3, r1
 800339e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	000186a0 	.word	0x000186a0
 80033f8:	001e847f 	.word	0x001e847f
 80033fc:	003d08ff 	.word	0x003d08ff
 8003400:	431bde83 	.word	0x431bde83
 8003404:	10624dd3 	.word	0x10624dd3

08003408 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e021      	b.n	800345e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2224      	movs	r2, #36	; 0x24
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe fc9a 	bl	8001d6c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	461a      	mov	r2, r3
 8003474:	460b      	mov	r3, r1
 8003476:	817b      	strh	r3, [r7, #10]
 8003478:	4613      	mov	r3, r2
 800347a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800347c:	f7fe ff0a 	bl	8002294 <HAL_GetTick>
 8003480:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b20      	cmp	r3, #32
 800348c:	f040 80e0 	bne.w	8003650 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2319      	movs	r3, #25
 8003496:	2201      	movs	r2, #1
 8003498:	4970      	ldr	r1, [pc, #448]	; (800365c <HAL_I2C_Master_Transmit+0x1f4>)
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fda0 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
 80034a8:	e0d3      	b.n	8003652 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_I2C_Master_Transmit+0x50>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e0cc      	b.n	8003652 <HAL_I2C_Master_Transmit+0x1ea>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d007      	beq.n	80034de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2221      	movs	r2, #33	; 0x21
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2210      	movs	r2, #16
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	893a      	ldrh	r2, [r7, #8]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a50      	ldr	r2, [pc, #320]	; (8003660 <HAL_I2C_Master_Transmit+0x1f8>)
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003520:	8979      	ldrh	r1, [r7, #10]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	6a3a      	ldr	r2, [r7, #32]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fbf0 	bl	8003d0c <I2C_MasterRequestWrite>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e08d      	b.n	8003652 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800354c:	e066      	b.n	800361c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	6a39      	ldr	r1, [r7, #32]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fe1a 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b04      	cmp	r3, #4
 8003564:	d107      	bne.n	8003576 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003574:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e06b      	b.n	8003652 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d11b      	bne.n	80035f0 <HAL_I2C_Master_Transmit+0x188>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d017      	beq.n	80035f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	6a39      	ldr	r1, [r7, #32]
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fe0a 	bl	800420e <I2C_WaitOnBTFFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	2b04      	cmp	r3, #4
 8003606:	d107      	bne.n	8003618 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003616:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e01a      	b.n	8003652 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	d194      	bne.n	800354e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	00100002 	.word	0x00100002
 8003660:	ffff0000 	.word	0xffff0000

08003664 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08c      	sub	sp, #48	; 0x30
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	4603      	mov	r3, r0
 8003674:	817b      	strh	r3, [r7, #10]
 8003676:	460b      	mov	r3, r1
 8003678:	813b      	strh	r3, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800367e:	f7fe fe09 	bl	8002294 <HAL_GetTick>
 8003682:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b20      	cmp	r3, #32
 800368e:	f040 8208 	bne.w	8003aa2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2319      	movs	r3, #25
 8003698:	2201      	movs	r2, #1
 800369a:	497b      	ldr	r1, [pc, #492]	; (8003888 <HAL_I2C_Mem_Read+0x224>)
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fc9f 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
 80036aa:	e1fb      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_I2C_Mem_Read+0x56>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e1f4      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x440>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d007      	beq.n	80036e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2222      	movs	r2, #34	; 0x22
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2240      	movs	r2, #64	; 0x40
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003710:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a5b      	ldr	r2, [pc, #364]	; (800388c <HAL_I2C_Mem_Read+0x228>)
 8003720:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003722:	88f8      	ldrh	r0, [r7, #6]
 8003724:	893a      	ldrh	r2, [r7, #8]
 8003726:	8979      	ldrh	r1, [r7, #10]
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4603      	mov	r3, r0
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fb6c 	bl	8003e10 <I2C_RequestMemoryRead>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e1b0      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	d113      	bne.n	8003772 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	623b      	str	r3, [r7, #32]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	623b      	str	r3, [r7, #32]
 800375e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e184      	b.n	8003a7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003776:	2b01      	cmp	r3, #1
 8003778:	d11b      	bne.n	80037b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003788:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e164      	b.n	8003a7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d11b      	bne.n	80037f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037da:	2300      	movs	r3, #0
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	e144      	b.n	8003a7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003808:	e138      	b.n	8003a7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	2b03      	cmp	r3, #3
 8003810:	f200 80f1 	bhi.w	80039f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	2b01      	cmp	r3, #1
 800381a:	d123      	bne.n	8003864 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fd35 	bl	8004290 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e139      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003862:	e10b      	b.n	8003a7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	2b02      	cmp	r3, #2
 800386a:	d14e      	bne.n	800390a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	2200      	movs	r2, #0
 8003874:	4906      	ldr	r1, [pc, #24]	; (8003890 <HAL_I2C_Mem_Read+0x22c>)
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fbb2 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e10e      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x440>
 8003886:	bf00      	nop
 8003888:	00100002 	.word	0x00100002
 800388c:	ffff0000 	.word	0xffff0000
 8003890:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003908:	e0b8      	b.n	8003a7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	2200      	movs	r2, #0
 8003912:	4966      	ldr	r1, [pc, #408]	; (8003aac <HAL_I2C_Mem_Read+0x448>)
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fb63 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0bf      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	2200      	movs	r2, #0
 800396e:	494f      	ldr	r1, [pc, #316]	; (8003aac <HAL_I2C_Mem_Read+0x448>)
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fb35 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e091      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039f4:	e042      	b.n	8003a7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fc48 	bl	8004290 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e04c      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d118      	bne.n	8003a7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f47f aec2 	bne.w	800380a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e000      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
  }
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3728      	adds	r7, #40	; 0x28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	00010004 	.word	0x00010004

08003ab0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	607a      	str	r2, [r7, #4]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	460b      	mov	r3, r1
 8003abe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ac0:	f7fe fbe8 	bl	8002294 <HAL_GetTick>
 8003ac4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	f040 8111 	bne.w	8003cfa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2319      	movs	r3, #25
 8003ade:	2201      	movs	r2, #1
 8003ae0:	4988      	ldr	r1, [pc, #544]	; (8003d04 <HAL_I2C_IsDeviceReady+0x254>)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fa7c 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
 8003af0:	e104      	b.n	8003cfc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_I2C_IsDeviceReady+0x50>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e0fd      	b.n	8003cfc <HAL_I2C_IsDeviceReady+0x24c>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d007      	beq.n	8003b26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2224      	movs	r2, #36	; 0x24
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a70      	ldr	r2, [pc, #448]	; (8003d08 <HAL_I2C_IsDeviceReady+0x258>)
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fa3a 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b80:	d103      	bne.n	8003b8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e0b6      	b.n	8003cfc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b8e:	897b      	ldrh	r3, [r7, #10]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b9e:	f7fe fb79 	bl	8002294 <HAL_GetTick>
 8003ba2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2301      	moveq	r3, #1
 8003bb4:	2300      	movne	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bd2:	e025      	b.n	8003c20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bd4:	f7fe fb5e 	bl	8002294 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d302      	bcc.n	8003bea <HAL_I2C_IsDeviceReady+0x13a>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	22a0      	movs	r2, #160	; 0xa0
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2ba0      	cmp	r3, #160	; 0xa0
 8003c2a:	d005      	beq.n	8003c38 <HAL_I2C_IsDeviceReady+0x188>
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <HAL_I2C_IsDeviceReady+0x188>
 8003c32:	7dbb      	ldrb	r3, [r7, #22]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0cd      	beq.n	8003bd4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d129      	bne.n	8003ca2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2319      	movs	r3, #25
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4921      	ldr	r1, [pc, #132]	; (8003d04 <HAL_I2C_IsDeviceReady+0x254>)
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f9ae 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e036      	b.n	8003cfc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e02c      	b.n	8003cfc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2319      	movs	r3, #25
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	490f      	ldr	r1, [pc, #60]	; (8003d04 <HAL_I2C_IsDeviceReady+0x254>)
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f98a 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e012      	b.n	8003cfc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	f4ff af32 	bcc.w	8003b4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cfa:	2302      	movs	r3, #2
  }
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	00100002 	.word	0x00100002
 8003d08:	ffff0000 	.word	0xffff0000

08003d0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d006      	beq.n	8003d36 <I2C_MasterRequestWrite+0x2a>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d003      	beq.n	8003d36 <I2C_MasterRequestWrite+0x2a>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d34:	d108      	bne.n	8003d48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e00b      	b.n	8003d60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	2b12      	cmp	r3, #18
 8003d4e:	d107      	bne.n	8003d60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f937 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00d      	beq.n	8003d94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d86:	d103      	bne.n	8003d90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e035      	b.n	8003e00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9c:	d108      	bne.n	8003db0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d9e:	897b      	ldrh	r3, [r7, #10]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dac:	611a      	str	r2, [r3, #16]
 8003dae:	e01b      	b.n	8003de8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003db0:	897b      	ldrh	r3, [r7, #10]
 8003db2:	11db      	asrs	r3, r3, #7
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f003 0306 	and.w	r3, r3, #6
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f063 030f 	orn	r3, r3, #15
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	490e      	ldr	r1, [pc, #56]	; (8003e08 <I2C_MasterRequestWrite+0xfc>)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f95d 	bl	800408e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e010      	b.n	8003e00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dde:	897b      	ldrh	r3, [r7, #10]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4907      	ldr	r1, [pc, #28]	; (8003e0c <I2C_MasterRequestWrite+0x100>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f94d 	bl	800408e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	00010008 	.word	0x00010008
 8003e0c:	00010002 	.word	0x00010002

08003e10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	460b      	mov	r3, r1
 8003e24:	813b      	strh	r3, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f8c2 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e70:	d103      	bne.n	8003e7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e0aa      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e7e:	897b      	ldrh	r3, [r7, #10]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	4952      	ldr	r1, [pc, #328]	; (8003fdc <I2C_RequestMemoryRead+0x1cc>)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f8fa 	bl	800408e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e097      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	6a39      	ldr	r1, [r7, #32]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f964 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d107      	bne.n	8003ee2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e076      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eec:	893b      	ldrh	r3, [r7, #8]
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]
 8003ef6:	e021      	b.n	8003f3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef8:	893b      	ldrh	r3, [r7, #8]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f08:	6a39      	ldr	r1, [r7, #32]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f93e 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00d      	beq.n	8003f32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d107      	bne.n	8003f2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e050      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f32:	893b      	ldrh	r3, [r7, #8]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3e:	6a39      	ldr	r1, [r7, #32]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f923 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00d      	beq.n	8003f68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d107      	bne.n	8003f64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e035      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f82b 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9e:	d103      	bne.n	8003fa8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e013      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fac:	897b      	ldrh	r3, [r7, #10]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	6a3a      	ldr	r2, [r7, #32]
 8003fc0:	4906      	ldr	r1, [pc, #24]	; (8003fdc <I2C_RequestMemoryRead+0x1cc>)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f863 	bl	800408e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	00010002 	.word	0x00010002

08003fe0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff0:	e025      	b.n	800403e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d021      	beq.n	800403e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffa:	f7fe f94b 	bl	8002294 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d302      	bcc.n	8004010 <I2C_WaitOnFlagUntilTimeout+0x30>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d116      	bne.n	800403e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f043 0220 	orr.w	r2, r3, #32
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e023      	b.n	8004086 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	0c1b      	lsrs	r3, r3, #16
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d10d      	bne.n	8004064 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	43da      	mvns	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	e00c      	b.n	800407e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	43da      	mvns	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	429a      	cmp	r2, r3
 8004082:	d0b6      	beq.n	8003ff2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800409c:	e051      	b.n	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ac:	d123      	bne.n	80040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e046      	b.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d021      	beq.n	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7fe f8c9 	bl	8002294 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d116      	bne.n	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e020      	b.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	d10c      	bne.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	43da      	mvns	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	bf14      	ite	ne
 800415e:	2301      	movne	r3, #1
 8004160:	2300      	moveq	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	e00b      	b.n	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	43da      	mvns	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4013      	ands	r3, r2
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf14      	ite	ne
 8004178:	2301      	movne	r3, #1
 800417a:	2300      	moveq	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d18d      	bne.n	800409e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004198:	e02d      	b.n	80041f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f8ce 	bl	800433c <I2C_IsAcknowledgeFailed>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e02d      	b.n	8004206 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d021      	beq.n	80041f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7fe f86f 	bl	8002294 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d116      	bne.n	80041f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e007      	b.n	8004206 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b80      	cmp	r3, #128	; 0x80
 8004202:	d1ca      	bne.n	800419a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800421a:	e02d      	b.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f88d 	bl	800433c <I2C_IsAcknowledgeFailed>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e02d      	b.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d021      	beq.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004234:	f7fe f82e 	bl	8002294 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d116      	bne.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e007      	b.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b04      	cmp	r3, #4
 8004284:	d1ca      	bne.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800429c:	e042      	b.n	8004324 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d119      	bne.n	80042e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0210 	mvn.w	r2, #16
 80042b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e029      	b.n	8004334 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e0:	f7fd ffd8 	bl	8002294 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d116      	bne.n	8004324 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f043 0220 	orr.w	r2, r3, #32
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e007      	b.n	8004334 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d1b5      	bne.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004352:	d11b      	bne.n	800438c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800435c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	f043 0204 	orr.w	r2, r3, #4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e267      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d075      	beq.n	80044a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ba:	4b88      	ldr	r3, [pc, #544]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d00c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c6:	4b85      	ldr	r3, [pc, #532]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d112      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b82      	ldr	r3, [pc, #520]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043de:	d10b      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	4b7e      	ldr	r3, [pc, #504]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d05b      	beq.n	80044a4 <HAL_RCC_OscConfig+0x108>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d157      	bne.n	80044a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e242      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d106      	bne.n	8004410 <HAL_RCC_OscConfig+0x74>
 8004402:	4b76      	ldr	r3, [pc, #472]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a75      	ldr	r2, [pc, #468]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e01d      	b.n	800444c <HAL_RCC_OscConfig+0xb0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0x98>
 800441a:	4b70      	ldr	r3, [pc, #448]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6f      	ldr	r2, [pc, #444]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b6d      	ldr	r3, [pc, #436]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6c      	ldr	r2, [pc, #432]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0xb0>
 8004434:	4b69      	ldr	r3, [pc, #420]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a68      	ldr	r2, [pc, #416]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 800443a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b66      	ldr	r3, [pc, #408]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a65      	ldr	r2, [pc, #404]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd ff1e 	bl	8002294 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd ff1a 	bl	8002294 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e207      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b5b      	ldr	r3, [pc, #364]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0xc0>
 800447a:	e014      	b.n	80044a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fd ff0a 	bl	8002294 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004484:	f7fd ff06 	bl	8002294 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	; 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e1f3      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	4b51      	ldr	r3, [pc, #324]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0xe8>
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d063      	beq.n	800457a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044b2:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d11c      	bne.n	8004504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b44      	ldr	r3, [pc, #272]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d116      	bne.n	8004504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	4b41      	ldr	r3, [pc, #260]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_RCC_OscConfig+0x152>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e1c7      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4937      	ldr	r1, [pc, #220]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004502:	e03a      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800450c:	4b34      	ldr	r3, [pc, #208]	; (80045e0 <HAL_RCC_OscConfig+0x244>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fd febf 	bl	8002294 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451a:	f7fd febb 	bl	8002294 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e1a8      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452c:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b28      	ldr	r3, [pc, #160]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4925      	ldr	r1, [pc, #148]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]
 800454c:	e015      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_RCC_OscConfig+0x244>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd fe9e 	bl	8002294 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455c:	f7fd fe9a 	bl	8002294 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e187      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d036      	beq.n	80045f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <HAL_RCC_OscConfig+0x248>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd fe7e 	bl	8002294 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459c:	f7fd fe7a 	bl	8002294 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e167      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80045b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x200>
 80045ba:	e01b      	b.n	80045f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_RCC_OscConfig+0x248>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fd fe67 	bl	8002294 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	e00e      	b.n	80045e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ca:	f7fd fe63 	bl	8002294 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d907      	bls.n	80045e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e150      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
 80045dc:	40023800 	.word	0x40023800
 80045e0:	42470000 	.word	0x42470000
 80045e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e8:	4b88      	ldr	r3, [pc, #544]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80045ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ea      	bne.n	80045ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8097 	beq.w	8004730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004606:	4b81      	ldr	r3, [pc, #516]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	4b7d      	ldr	r3, [pc, #500]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a7c      	ldr	r2, [pc, #496]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800461c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
 8004622:	4b7a      	ldr	r3, [pc, #488]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004632:	4b77      	ldr	r3, [pc, #476]	; (8004810 <HAL_RCC_OscConfig+0x474>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d118      	bne.n	8004670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463e:	4b74      	ldr	r3, [pc, #464]	; (8004810 <HAL_RCC_OscConfig+0x474>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a73      	ldr	r2, [pc, #460]	; (8004810 <HAL_RCC_OscConfig+0x474>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464a:	f7fd fe23 	bl	8002294 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004652:	f7fd fe1f 	bl	8002294 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e10c      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004664:	4b6a      	ldr	r3, [pc, #424]	; (8004810 <HAL_RCC_OscConfig+0x474>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d106      	bne.n	8004686 <HAL_RCC_OscConfig+0x2ea>
 8004678:	4b64      	ldr	r3, [pc, #400]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4a63      	ldr	r2, [pc, #396]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6713      	str	r3, [r2, #112]	; 0x70
 8004684:	e01c      	b.n	80046c0 <HAL_RCC_OscConfig+0x324>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b05      	cmp	r3, #5
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x30c>
 800468e:	4b5f      	ldr	r3, [pc, #380]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a5e      	ldr	r2, [pc, #376]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004694:	f043 0304 	orr.w	r3, r3, #4
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
 800469a:	4b5c      	ldr	r3, [pc, #368]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a5b      	ldr	r2, [pc, #364]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	e00b      	b.n	80046c0 <HAL_RCC_OscConfig+0x324>
 80046a8:	4b58      	ldr	r3, [pc, #352]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	4a57      	ldr	r2, [pc, #348]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	6713      	str	r3, [r2, #112]	; 0x70
 80046b4:	4b55      	ldr	r3, [pc, #340]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	4a54      	ldr	r2, [pc, #336]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046ba:	f023 0304 	bic.w	r3, r3, #4
 80046be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d015      	beq.n	80046f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fd fde4 	bl	8002294 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d0:	f7fd fde0 	bl	8002294 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	; 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0cb      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e6:	4b49      	ldr	r3, [pc, #292]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0ee      	beq.n	80046d0 <HAL_RCC_OscConfig+0x334>
 80046f2:	e014      	b.n	800471e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f4:	f7fd fdce 	bl	8002294 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fc:	f7fd fdca 	bl	8002294 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0b5      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004712:	4b3e      	ldr	r3, [pc, #248]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1ee      	bne.n	80046fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471e:	7dfb      	ldrb	r3, [r7, #23]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004724:	4b39      	ldr	r3, [pc, #228]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	4a38      	ldr	r2, [pc, #224]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800472a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 80a1 	beq.w	800487c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800473a:	4b34      	ldr	r3, [pc, #208]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b08      	cmp	r3, #8
 8004744:	d05c      	beq.n	8004800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d141      	bne.n	80047d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474e:	4b31      	ldr	r3, [pc, #196]	; (8004814 <HAL_RCC_OscConfig+0x478>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fd fd9e 	bl	8002294 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475c:	f7fd fd9a 	bl	8002294 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e087      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	4b27      	ldr	r3, [pc, #156]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	019b      	lsls	r3, r3, #6
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	3b01      	subs	r3, #1
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	491b      	ldr	r1, [pc, #108]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_RCC_OscConfig+0x478>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fd fd73 	bl	8002294 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fd fd6f 	bl	8002294 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e05c      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x416>
 80047d0:	e054      	b.n	800487c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <HAL_RCC_OscConfig+0x478>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fd fd5c 	bl	8002294 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fd fd58 	bl	8002294 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e045      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x444>
 80047fe:	e03d      	b.n	800487c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d107      	bne.n	8004818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e038      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
 800480c:	40023800 	.word	0x40023800
 8004810:	40007000 	.word	0x40007000
 8004814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCC_OscConfig+0x4ec>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d028      	beq.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d121      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d11a      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800484e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004850:	4293      	cmp	r3, r2
 8004852:	d111      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	3b01      	subs	r3, #1
 8004862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d107      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800

0800488c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0cc      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	4b68      	ldr	r3, [pc, #416]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d90c      	bls.n	80048c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b65      	ldr	r3, [pc, #404]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0b8      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d020      	beq.n	8004916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e0:	4b59      	ldr	r3, [pc, #356]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a58      	ldr	r2, [pc, #352]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f8:	4b53      	ldr	r3, [pc, #332]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4a52      	ldr	r2, [pc, #328]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004904:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	494d      	ldr	r1, [pc, #308]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d044      	beq.n	80049ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d119      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e07f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d003      	beq.n	800494a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	2b03      	cmp	r3, #3
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494a:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e06f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495a:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e067      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496a:	4b37      	ldr	r3, [pc, #220]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 0203 	bic.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4934      	ldr	r1, [pc, #208]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800497c:	f7fd fc8a 	bl	8002294 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	e00a      	b.n	800499a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fd fc86 	bl	8002294 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e04f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 020c 	and.w	r2, r3, #12
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1eb      	bne.n	8004984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ac:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d20c      	bcs.n	80049d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e032      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e0:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4916      	ldr	r1, [pc, #88]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	490e      	ldr	r1, [pc, #56]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a12:	f000 f821 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004a16:	4602      	mov	r2, r0
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	490a      	ldr	r1, [pc, #40]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 8004a24:	5ccb      	ldrb	r3, [r1, r3]
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd fa4e 	bl	8001ed4 <HAL_InitTick>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023c00 	.word	0x40023c00
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	08010590 	.word	0x08010590
 8004a50:	20000014 	.word	0x20000014
 8004a54:	20000018 	.word	0x20000018

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b094      	sub	sp, #80	; 0x50
 8004a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	647b      	str	r3, [r7, #68]	; 0x44
 8004a64:	2300      	movs	r3, #0
 8004a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a68:	2300      	movs	r3, #0
 8004a6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a70:	4b79      	ldr	r3, [pc, #484]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d00d      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x40>
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	f200 80e1 	bhi.w	8004c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x34>
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d003      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a8a:	e0db      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a8c:	4b73      	ldr	r3, [pc, #460]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a90:	e0db      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a92:	4b73      	ldr	r3, [pc, #460]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a96:	e0d8      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a98:	4b6f      	ldr	r3, [pc, #444]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa2:	4b6d      	ldr	r3, [pc, #436]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d063      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aae:	4b6a      	ldr	r3, [pc, #424]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004aca:	4622      	mov	r2, r4
 8004acc:	462b      	mov	r3, r5
 8004ace:	f04f 0000 	mov.w	r0, #0
 8004ad2:	f04f 0100 	mov.w	r1, #0
 8004ad6:	0159      	lsls	r1, r3, #5
 8004ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004adc:	0150      	lsls	r0, r2, #5
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	1a51      	subs	r1, r2, r1
 8004ae6:	6139      	str	r1, [r7, #16]
 8004ae8:	4629      	mov	r1, r5
 8004aea:	eb63 0301 	sbc.w	r3, r3, r1
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004afc:	4659      	mov	r1, fp
 8004afe:	018b      	lsls	r3, r1, #6
 8004b00:	4651      	mov	r1, sl
 8004b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b06:	4651      	mov	r1, sl
 8004b08:	018a      	lsls	r2, r1, #6
 8004b0a:	4651      	mov	r1, sl
 8004b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b10:	4659      	mov	r1, fp
 8004b12:	eb63 0901 	sbc.w	r9, r3, r1
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b2a:	4690      	mov	r8, r2
 8004b2c:	4699      	mov	r9, r3
 8004b2e:	4623      	mov	r3, r4
 8004b30:	eb18 0303 	adds.w	r3, r8, r3
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	462b      	mov	r3, r5
 8004b38:	eb49 0303 	adc.w	r3, r9, r3
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	024b      	lsls	r3, r1, #9
 8004b4e:	4621      	mov	r1, r4
 8004b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b54:	4621      	mov	r1, r4
 8004b56:	024a      	lsls	r2, r1, #9
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5e:	2200      	movs	r2, #0
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b68:	f7fc f876 	bl	8000c58 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4613      	mov	r3, r2
 8004b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b74:	e058      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b76:	4b38      	ldr	r3, [pc, #224]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	099b      	lsrs	r3, r3, #6
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	4611      	mov	r1, r2
 8004b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b90:	4642      	mov	r2, r8
 8004b92:	464b      	mov	r3, r9
 8004b94:	f04f 0000 	mov.w	r0, #0
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	0159      	lsls	r1, r3, #5
 8004b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba2:	0150      	lsls	r0, r2, #5
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4641      	mov	r1, r8
 8004baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bae:	4649      	mov	r1, r9
 8004bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8004bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	00eb      	lsls	r3, r5, #3
 8004bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bde:	00e2      	lsls	r2, r4, #3
 8004be0:	4614      	mov	r4, r2
 8004be2:	461d      	mov	r5, r3
 8004be4:	4643      	mov	r3, r8
 8004be6:	18e3      	adds	r3, r4, r3
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	464b      	mov	r3, r9
 8004bec:	eb45 0303 	adc.w	r3, r5, r3
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bfe:	4629      	mov	r1, r5
 8004c00:	028b      	lsls	r3, r1, #10
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c08:	4621      	mov	r1, r4
 8004c0a:	028a      	lsls	r2, r1, #10
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c12:	2200      	movs	r2, #0
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	61fa      	str	r2, [r7, #28]
 8004c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c1c:	f7fc f81c 	bl	8000c58 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4613      	mov	r3, r2
 8004c26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	3301      	adds	r3, #1
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c42:	e002      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3750      	adds	r7, #80	; 0x50
 8004c50:	46bd      	mov	sp, r7
 8004c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	00f42400 	.word	0x00f42400
 8004c60:	007a1200 	.word	0x007a1200

08004c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000014 	.word	0x20000014

08004c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c80:	f7ff fff0 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0a9b      	lsrs	r3, r3, #10
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4903      	ldr	r1, [pc, #12]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	080105a0 	.word	0x080105a0

08004ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ca8:	f7ff ffdc 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	0b5b      	lsrs	r3, r3, #13
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	4903      	ldr	r1, [pc, #12]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	080105a0 	.word	0x080105a0

08004ccc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	220f      	movs	r2, #15
 8004cda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cdc:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <HAL_RCC_GetClockConfig+0x5c>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 0203 	and.w	r2, r3, #3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <HAL_RCC_GetClockConfig+0x5c>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <HAL_RCC_GetClockConfig+0x5c>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCC_GetClockConfig+0x5c>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	08db      	lsrs	r3, r3, #3
 8004d06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d0e:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <HAL_RCC_GetClockConfig+0x60>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0207 	and.w	r2, r3, #7
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	601a      	str	r2, [r3, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40023c00 	.word	0x40023c00

08004d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e07b      	b.n	8004e3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d52:	d009      	beq.n	8004d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	61da      	str	r2, [r3, #28]
 8004d5a:	e005      	b.n	8004d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fd f816 	bl	8001db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	ea42 0103 	orr.w	r1, r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	0c1b      	lsrs	r3, r3, #16
 8004e06:	f003 0104 	and.w	r1, r3, #4
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	f003 0210 	and.w	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b08c      	sub	sp, #48	; 0x30
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
 8004e4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e50:	2301      	movs	r3, #1
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x26>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e18a      	b.n	800517e <HAL_SPI_TransmitReceive+0x33c>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e70:	f7fd fa10 	bl	8002294 <HAL_GetTick>
 8004e74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e86:	887b      	ldrh	r3, [r7, #2]
 8004e88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d00f      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x70>
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e98:	d107      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d103      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x68>
 8004ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d003      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eb0:	e15b      	b.n	800516a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0x82>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0x82>
 8004ebe:	887b      	ldrh	r3, [r7, #2]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eca:	e14e      	b.n	800516a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d003      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2205      	movs	r2, #5
 8004edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	887a      	ldrh	r2, [r7, #2]
 8004ef6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	887a      	ldrh	r2, [r7, #2]
 8004f02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	887a      	ldrh	r2, [r7, #2]
 8004f08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f20:	2b40      	cmp	r3, #64	; 0x40
 8004f22:	d007      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3c:	d178      	bne.n	8005030 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_SPI_TransmitReceive+0x10a>
 8004f46:	8b7b      	ldrh	r3, [r7, #26]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d166      	bne.n	800501a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	881a      	ldrh	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	1c9a      	adds	r2, r3, #2
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f70:	e053      	b.n	800501a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x176>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_SPI_TransmitReceive+0x176>
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d113      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	881a      	ldrh	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d119      	bne.n	8004ffa <HAL_SPI_TransmitReceive+0x1b8>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d014      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	b292      	uxth	r2, r2
 8004fdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	1c9a      	adds	r2, r3, #2
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ffa:	f7fd f94b 	bl	8002294 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005006:	429a      	cmp	r2, r3
 8005008:	d807      	bhi.n	800501a <HAL_SPI_TransmitReceive+0x1d8>
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d003      	beq.n	800501a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005018:	e0a7      	b.n	800516a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1a6      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x130>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1a1      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x130>
 800502e:	e07c      	b.n	800512a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_SPI_TransmitReceive+0x1fc>
 8005038:	8b7b      	ldrh	r3, [r7, #26]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d16b      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005064:	e057      	b.n	8005116 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b02      	cmp	r3, #2
 8005072:	d11c      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x26c>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d017      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x26c>
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d114      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	7812      	ldrb	r2, [r2, #0]
 8005090:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d119      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x2ae>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d014      	beq.n	80050f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050ec:	2301      	movs	r3, #1
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050f0:	f7fd f8d0 	bl	8002294 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d803      	bhi.n	8005108 <HAL_SPI_TransmitReceive+0x2c6>
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d102      	bne.n	800510e <HAL_SPI_TransmitReceive+0x2cc>
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005114:	e029      	b.n	800516a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1a2      	bne.n	8005066 <HAL_SPI_TransmitReceive+0x224>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d19d      	bne.n	8005066 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800512a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f8b2 	bl	8005298 <SPI_EndRxTxTransaction>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d006      	beq.n	8005148 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005146:	e010      	b.n	800516a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	e000      	b.n	800516a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005168:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800517a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800517e:	4618      	mov	r0, r3
 8005180:	3730      	adds	r7, #48	; 0x30
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005198:	f7fd f87c 	bl	8002294 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051a8:	f7fd f874 	bl	8002294 <HAL_GetTick>
 80051ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051ae:	4b39      	ldr	r3, [pc, #228]	; (8005294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	015b      	lsls	r3, r3, #5
 80051b4:	0d1b      	lsrs	r3, r3, #20
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	fb02 f303 	mul.w	r3, r2, r3
 80051bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051be:	e054      	b.n	800526a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d050      	beq.n	800526a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051c8:	f7fd f864 	bl	8002294 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d902      	bls.n	80051de <SPI_WaitFlagStateUntilTimeout+0x56>
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d13d      	bne.n	800525a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f6:	d111      	bne.n	800521c <SPI_WaitFlagStateUntilTimeout+0x94>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005200:	d004      	beq.n	800520c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520a:	d107      	bne.n	800521c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005224:	d10f      	bne.n	8005246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e017      	b.n	800528a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	3b01      	subs	r3, #1
 8005268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4013      	ands	r3, r2
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	429a      	cmp	r2, r3
 8005278:	bf0c      	ite	eq
 800527a:	2301      	moveq	r3, #1
 800527c:	2300      	movne	r3, #0
 800527e:	b2db      	uxtb	r3, r3
 8005280:	461a      	mov	r2, r3
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	429a      	cmp	r2, r3
 8005286:	d19b      	bne.n	80051c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000014 	.word	0x20000014

08005298 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <SPI_EndRxTxTransaction+0x7c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <SPI_EndRxTxTransaction+0x80>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	0d5b      	lsrs	r3, r3, #21
 80052b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052b4:	fb02 f303 	mul.w	r3, r2, r3
 80052b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c2:	d112      	bne.n	80052ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2200      	movs	r2, #0
 80052cc:	2180      	movs	r1, #128	; 0x80
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f7ff ff5a 	bl	8005188 <SPI_WaitFlagStateUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d016      	beq.n	8005308 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	f043 0220 	orr.w	r2, r3, #32
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e00f      	b.n	800530a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b80      	cmp	r3, #128	; 0x80
 8005302:	d0f2      	beq.n	80052ea <SPI_EndRxTxTransaction+0x52>
 8005304:	e000      	b.n	8005308 <SPI_EndRxTxTransaction+0x70>
        break;
 8005306:	bf00      	nop
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000014 	.word	0x20000014
 8005318:	165e9f81 	.word	0x165e9f81

0800531c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e041      	b.n	80053b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f839 	bl	80053ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f000 f9ca 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d001      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e044      	b.n	8005472 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <HAL_TIM_Base_Start_IT+0xb0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d018      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x6c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005412:	d013      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x6c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <HAL_TIM_Base_Start_IT+0xb4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00e      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x6c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a19      	ldr	r2, [pc, #100]	; (8005488 <HAL_TIM_Base_Start_IT+0xb8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d009      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x6c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a17      	ldr	r2, [pc, #92]	; (800548c <HAL_TIM_Base_Start_IT+0xbc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x6c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a16      	ldr	r2, [pc, #88]	; (8005490 <HAL_TIM_Base_Start_IT+0xc0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d111      	bne.n	8005460 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b06      	cmp	r3, #6
 800544c:	d010      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	e007      	b.n	8005470 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40014000 	.word	0x40014000

08005494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0202 	mvn.w	r2, #2
 80054c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f8ee 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f8e0 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f8f1 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d122      	bne.n	8005544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b04      	cmp	r3, #4
 800550a:	d11b      	bne.n	8005544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0204 	mvn.w	r2, #4
 8005514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8c4 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f8b6 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f8c7 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b08      	cmp	r3, #8
 8005550:	d122      	bne.n	8005598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b08      	cmp	r3, #8
 800555e:	d11b      	bne.n	8005598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0208 	mvn.w	r2, #8
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2204      	movs	r2, #4
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f89a 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f88c 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f89d 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d122      	bne.n	80055ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d11b      	bne.n	80055ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0210 	mvn.w	r2, #16
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2208      	movs	r2, #8
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f870 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f862 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f873 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d10e      	bne.n	8005618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d107      	bne.n	8005618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0201 	mvn.w	r2, #1
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc fade 	bl	8001bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b80      	cmp	r3, #128	; 0x80
 8005624:	d10e      	bne.n	8005644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d107      	bne.n	8005644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800563c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8e2 	bl	8005808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d10e      	bne.n	8005670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d107      	bne.n	8005670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f838 	bl	80056e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b20      	cmp	r3, #32
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b20      	cmp	r3, #32
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0220 	mvn.w	r2, #32
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8ac 	bl	80057f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a34      	ldr	r2, [pc, #208]	; (80057d8 <TIM_Base_SetConfig+0xe4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00f      	beq.n	800572c <TIM_Base_SetConfig+0x38>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005712:	d00b      	beq.n	800572c <TIM_Base_SetConfig+0x38>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a31      	ldr	r2, [pc, #196]	; (80057dc <TIM_Base_SetConfig+0xe8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <TIM_Base_SetConfig+0x38>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a30      	ldr	r2, [pc, #192]	; (80057e0 <TIM_Base_SetConfig+0xec>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_Base_SetConfig+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a2f      	ldr	r2, [pc, #188]	; (80057e4 <TIM_Base_SetConfig+0xf0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d108      	bne.n	800573e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <TIM_Base_SetConfig+0xe4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01b      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574c:	d017      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a22      	ldr	r2, [pc, #136]	; (80057dc <TIM_Base_SetConfig+0xe8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a21      	ldr	r2, [pc, #132]	; (80057e0 <TIM_Base_SetConfig+0xec>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00f      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a20      	ldr	r2, [pc, #128]	; (80057e4 <TIM_Base_SetConfig+0xf0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00b      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1f      	ldr	r2, [pc, #124]	; (80057e8 <TIM_Base_SetConfig+0xf4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d007      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1e      	ldr	r2, [pc, #120]	; (80057ec <TIM_Base_SetConfig+0xf8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <TIM_Base_SetConfig+0xfc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d108      	bne.n	8005790 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a08      	ldr	r2, [pc, #32]	; (80057d8 <TIM_Base_SetConfig+0xe4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d103      	bne.n	80057c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	615a      	str	r2, [r3, #20]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800

080057f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e03f      	b.n	80058ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fafe 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2224      	movs	r2, #36	; 0x24
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800585e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f829 	bl	80058b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058bc:	b0c0      	sub	sp, #256	; 0x100
 80058be:	af00      	add	r7, sp, #0
 80058c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	68d9      	ldr	r1, [r3, #12]
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	ea40 0301 	orr.w	r3, r0, r1
 80058e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005910:	f021 010c 	bic.w	r1, r1, #12
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800591e:	430b      	orrs	r3, r1
 8005920:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005932:	6999      	ldr	r1, [r3, #24]
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	ea40 0301 	orr.w	r3, r0, r1
 800593e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4b8f      	ldr	r3, [pc, #572]	; (8005b84 <UART_SetConfig+0x2cc>)
 8005948:	429a      	cmp	r2, r3
 800594a:	d005      	beq.n	8005958 <UART_SetConfig+0xa0>
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b8d      	ldr	r3, [pc, #564]	; (8005b88 <UART_SetConfig+0x2d0>)
 8005954:	429a      	cmp	r2, r3
 8005956:	d104      	bne.n	8005962 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005958:	f7ff f9a4 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 800595c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005960:	e003      	b.n	800596a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005962:	f7ff f98b 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 8005966:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005974:	f040 810c 	bne.w	8005b90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800597c:	2200      	movs	r2, #0
 800597e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005982:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005986:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800598a:	4622      	mov	r2, r4
 800598c:	462b      	mov	r3, r5
 800598e:	1891      	adds	r1, r2, r2
 8005990:	65b9      	str	r1, [r7, #88]	; 0x58
 8005992:	415b      	adcs	r3, r3
 8005994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005996:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800599a:	4621      	mov	r1, r4
 800599c:	eb12 0801 	adds.w	r8, r2, r1
 80059a0:	4629      	mov	r1, r5
 80059a2:	eb43 0901 	adc.w	r9, r3, r1
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ba:	4690      	mov	r8, r2
 80059bc:	4699      	mov	r9, r3
 80059be:	4623      	mov	r3, r4
 80059c0:	eb18 0303 	adds.w	r3, r8, r3
 80059c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059c8:	462b      	mov	r3, r5
 80059ca:	eb49 0303 	adc.w	r3, r9, r3
 80059ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059e6:	460b      	mov	r3, r1
 80059e8:	18db      	adds	r3, r3, r3
 80059ea:	653b      	str	r3, [r7, #80]	; 0x50
 80059ec:	4613      	mov	r3, r2
 80059ee:	eb42 0303 	adc.w	r3, r2, r3
 80059f2:	657b      	str	r3, [r7, #84]	; 0x54
 80059f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059fc:	f7fb f92c 	bl	8000c58 <__aeabi_uldivmod>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4b61      	ldr	r3, [pc, #388]	; (8005b8c <UART_SetConfig+0x2d4>)
 8005a06:	fba3 2302 	umull	r2, r3, r3, r2
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	011c      	lsls	r4, r3, #4
 8005a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	1891      	adds	r1, r2, r2
 8005a26:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a28:	415b      	adcs	r3, r3
 8005a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a30:	4641      	mov	r1, r8
 8005a32:	eb12 0a01 	adds.w	sl, r2, r1
 8005a36:	4649      	mov	r1, r9
 8005a38:	eb43 0b01 	adc.w	fp, r3, r1
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a50:	4692      	mov	sl, r2
 8005a52:	469b      	mov	fp, r3
 8005a54:	4643      	mov	r3, r8
 8005a56:	eb1a 0303 	adds.w	r3, sl, r3
 8005a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a5e:	464b      	mov	r3, r9
 8005a60:	eb4b 0303 	adc.w	r3, fp, r3
 8005a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	18db      	adds	r3, r3, r3
 8005a80:	643b      	str	r3, [r7, #64]	; 0x40
 8005a82:	4613      	mov	r3, r2
 8005a84:	eb42 0303 	adc.w	r3, r2, r3
 8005a88:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a92:	f7fb f8e1 	bl	8000c58 <__aeabi_uldivmod>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4b3b      	ldr	r3, [pc, #236]	; (8005b8c <UART_SetConfig+0x2d4>)
 8005a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	2264      	movs	r2, #100	; 0x64
 8005aa6:	fb02 f303 	mul.w	r3, r2, r3
 8005aaa:	1acb      	subs	r3, r1, r3
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ab2:	4b36      	ldr	r3, [pc, #216]	; (8005b8c <UART_SetConfig+0x2d4>)
 8005ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ac0:	441c      	add	r4, r3
 8005ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005acc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ad0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	1891      	adds	r1, r2, r2
 8005ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8005adc:	415b      	adcs	r3, r3
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	1851      	adds	r1, r2, r1
 8005ae8:	6339      	str	r1, [r7, #48]	; 0x30
 8005aea:	4649      	mov	r1, r9
 8005aec:	414b      	adcs	r3, r1
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005afc:	4659      	mov	r1, fp
 8005afe:	00cb      	lsls	r3, r1, #3
 8005b00:	4651      	mov	r1, sl
 8005b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b06:	4651      	mov	r1, sl
 8005b08:	00ca      	lsls	r2, r1, #3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4642      	mov	r2, r8
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b18:	464b      	mov	r3, r9
 8005b1a:	460a      	mov	r2, r1
 8005b1c:	eb42 0303 	adc.w	r3, r2, r3
 8005b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b38:	460b      	mov	r3, r1
 8005b3a:	18db      	adds	r3, r3, r3
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3e:	4613      	mov	r3, r2
 8005b40:	eb42 0303 	adc.w	r3, r2, r3
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b4e:	f7fb f883 	bl	8000c58 <__aeabi_uldivmod>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <UART_SetConfig+0x2d4>)
 8005b58:	fba3 1302 	umull	r1, r3, r3, r2
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	2164      	movs	r1, #100	; 0x64
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	3332      	adds	r3, #50	; 0x32
 8005b6a:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <UART_SetConfig+0x2d4>)
 8005b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	f003 0207 	and.w	r2, r3, #7
 8005b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4422      	add	r2, r4
 8005b7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b80:	e105      	b.n	8005d8e <UART_SetConfig+0x4d6>
 8005b82:	bf00      	nop
 8005b84:	40011000 	.word	0x40011000
 8005b88:	40011400 	.word	0x40011400
 8005b8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ba2:	4642      	mov	r2, r8
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	1891      	adds	r1, r2, r2
 8005ba8:	6239      	str	r1, [r7, #32]
 8005baa:	415b      	adcs	r3, r3
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
 8005bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	1854      	adds	r4, r2, r1
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	eb43 0501 	adc.w	r5, r3, r1
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	00eb      	lsls	r3, r5, #3
 8005bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bca:	00e2      	lsls	r2, r4, #3
 8005bcc:	4614      	mov	r4, r2
 8005bce:	461d      	mov	r5, r3
 8005bd0:	4643      	mov	r3, r8
 8005bd2:	18e3      	adds	r3, r4, r3
 8005bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bd8:	464b      	mov	r3, r9
 8005bda:	eb45 0303 	adc.w	r3, r5, r3
 8005bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bfe:	4629      	mov	r1, r5
 8005c00:	008b      	lsls	r3, r1, #2
 8005c02:	4621      	mov	r1, r4
 8005c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c08:	4621      	mov	r1, r4
 8005c0a:	008a      	lsls	r2, r1, #2
 8005c0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c10:	f7fb f822 	bl	8000c58 <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4b60      	ldr	r3, [pc, #384]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	011c      	lsls	r4, r3, #4
 8005c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	1891      	adds	r1, r2, r2
 8005c3a:	61b9      	str	r1, [r7, #24]
 8005c3c:	415b      	adcs	r3, r3
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c44:	4641      	mov	r1, r8
 8005c46:	1851      	adds	r1, r2, r1
 8005c48:	6139      	str	r1, [r7, #16]
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	414b      	adcs	r3, r1
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	00cb      	lsls	r3, r1, #3
 8005c60:	4651      	mov	r1, sl
 8005c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c66:	4651      	mov	r1, sl
 8005c68:	00ca      	lsls	r2, r1, #3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4642      	mov	r2, r8
 8005c72:	189b      	adds	r3, r3, r2
 8005c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c78:	464b      	mov	r3, r9
 8005c7a:	460a      	mov	r2, r1
 8005c7c:	eb42 0303 	adc.w	r3, r2, r3
 8005c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	008b      	lsls	r3, r1, #2
 8005ca0:	4641      	mov	r1, r8
 8005ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ca6:	4641      	mov	r1, r8
 8005ca8:	008a      	lsls	r2, r1, #2
 8005caa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cae:	f7fa ffd3 	bl	8000c58 <__aeabi_uldivmod>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4b39      	ldr	r3, [pc, #228]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	2164      	movs	r1, #100	; 0x64
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	3332      	adds	r3, #50	; 0x32
 8005cca:	4a34      	ldr	r2, [pc, #208]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cd6:	441c      	add	r4, r3
 8005cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cdc:	2200      	movs	r2, #0
 8005cde:	673b      	str	r3, [r7, #112]	; 0x70
 8005ce0:	677a      	str	r2, [r7, #116]	; 0x74
 8005ce2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	464b      	mov	r3, r9
 8005cea:	1891      	adds	r1, r2, r2
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	415b      	adcs	r3, r3
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	1851      	adds	r1, r2, r1
 8005cfa:	6039      	str	r1, [r7, #0]
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	414b      	adcs	r3, r1
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d0e:	4659      	mov	r1, fp
 8005d10:	00cb      	lsls	r3, r1, #3
 8005d12:	4651      	mov	r1, sl
 8005d14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d18:	4651      	mov	r1, sl
 8005d1a:	00ca      	lsls	r2, r1, #3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	4642      	mov	r2, r8
 8005d24:	189b      	adds	r3, r3, r2
 8005d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d28:	464b      	mov	r3, r9
 8005d2a:	460a      	mov	r2, r1
 8005d2c:	eb42 0303 	adc.w	r3, r2, r3
 8005d30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d3c:	667a      	str	r2, [r7, #100]	; 0x64
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	008b      	lsls	r3, r1, #2
 8005d4e:	4641      	mov	r1, r8
 8005d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d54:	4641      	mov	r1, r8
 8005d56:	008a      	lsls	r2, r1, #2
 8005d58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d5c:	f7fa ff7c 	bl	8000c58 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005d66:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2164      	movs	r1, #100	; 0x64
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	3332      	adds	r3, #50	; 0x32
 8005d78:	4a08      	ldr	r2, [pc, #32]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4422      	add	r2, r4
 8005d8c:	609a      	str	r2, [r3, #8]
}
 8005d8e:	bf00      	nop
 8005d90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d94:	46bd      	mov	sp, r7
 8005d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d9a:	bf00      	nop
 8005d9c:	51eb851f 	.word	0x51eb851f

08005da0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005da4:	4904      	ldr	r1, [pc, #16]	; (8005db8 <MX_FATFS_Init+0x18>)
 8005da6:	4805      	ldr	r0, [pc, #20]	; (8005dbc <MX_FATFS_Init+0x1c>)
 8005da8:	f006 fdfe 	bl	800c9a8 <FATFS_LinkDriver>
 8005dac:	4603      	mov	r3, r0
 8005dae:	461a      	mov	r2, r3
 8005db0:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <MX_FATFS_Init+0x20>)
 8005db2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005db4:	bf00      	nop
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	200004a8 	.word	0x200004a8
 8005dbc:	20000020 	.word	0x20000020
 8005dc0:	200004a4 	.word	0x200004a4

08005dc4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005dc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 f9d9 	bl	8006198 <USER_SPI_initialize>
 8005de6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fab5 	bl	800636c <USER_SPI_status>
 8005e02:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8005e1c:	7bf8      	ldrb	r0, [r7, #15]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	f000 fab8 	bl	8006398 <USER_SPI_read>
 8005e28:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4603      	mov	r3, r0
 8005e40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8005e42:	7bf8      	ldrb	r0, [r7, #15]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	f000 fb0b 	bl	8006464 <USER_SPI_write>
 8005e4e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	603a      	str	r2, [r7, #0]
 8005e62:	71fb      	strb	r3, [r7, #7]
 8005e64:	460b      	mov	r3, r1
 8005e66:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005e68:	79b9      	ldrb	r1, [r7, #6]
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fb74 	bl	800655c <USER_SPI_ioctl>
 8005e74:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <SPI_Timer_On>:
static BYTE CardType; /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 8005e88:	f7fc fa04 	bl	8002294 <HAL_GetTick>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <SPI_Timer_On+0x20>)
 8005e90:	6013      	str	r3, [r2, #0]
	spiTimerTickDelay = waitTicks;
 8005e92:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <SPI_Timer_On+0x24>)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6013      	str	r3, [r2, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	200004b0 	.word	0x200004b0
 8005ea4:	200004b4 	.word	0x200004b4

08005ea8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005eac:	f7fc f9f2 	bl	8002294 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <SPI_Timer_Status+0x24>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <SPI_Timer_Status+0x28>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	bf34      	ite	cc
 8005ec0:	2301      	movcc	r3, #1
 8005ec2:	2300      	movcs	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	200004b0 	.word	0x200004b0
 8005ed0:	200004b4 	.word	0x200004b4

08005ed4 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi(BYTE dat /* Data to send */
) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	4603      	mov	r3, r0
 8005edc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005ede:	f107 020f 	add.w	r2, r7, #15
 8005ee2:	1df9      	adds	r1, r7, #7
 8005ee4:	2332      	movs	r3, #50	; 0x32
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4804      	ldr	r0, [pc, #16]	; (8005efc <xchg_spi+0x28>)
 8005eec:	f7fe ffa9 	bl	8004e42 <HAL_SPI_TransmitReceive>
	return rxDat;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000304 	.word	0x20000304

08005f00 <rcvr_spi_multi>:

/* Receive multiple byte */
static
void rcvr_spi_multi(BYTE *buff, /* Pointer to data buffer */
UINT btr /* Number of bytes to receive (even number) */
) {
 8005f00:	b590      	push	{r4, r7, lr}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btr; i++) {
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	e00a      	b.n	8005f26 <rcvr_spi_multi+0x26>
		*(buff + i) = xchg_spi(0xFF);
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	18d4      	adds	r4, r2, r3
 8005f16:	20ff      	movs	r0, #255	; 0xff
 8005f18:	f7ff ffdc 	bl	8005ed4 <xchg_spi>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	7023      	strb	r3, [r4, #0]
	for (UINT i = 0; i < btr; i++) {
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3301      	adds	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d3f0      	bcc.n	8005f10 <rcvr_spi_multi+0x10>
	}
}
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd90      	pop	{r4, r7, pc}

08005f38 <xmit_spi_multi>:
#if _USE_WRITE
/* Send multiple byte */
static
void xmit_spi_multi(const BYTE *buff, /* Pointer to the data */
UINT btx /* Number of bytes to send (even number) */
) {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btx; i++) {
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	e009      	b.n	8005f5c <xmit_spi_multi+0x24>
		xchg_spi(*(buff + i));
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff ffbf 	bl	8005ed4 <xchg_spi>
	for (UINT i = 0; i < btx; i++) {
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d3f1      	bcc.n	8005f48 <xmit_spi_multi+0x10>
	}
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready( /* 1:Ready, 0:Timeout */
UINT wt /* Timeout [ms] */
) {
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b086      	sub	sp, #24
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005f76:	f7fc f98d 	bl	8002294 <HAL_GetTick>
 8005f7a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t) wt;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005f80:	20ff      	movs	r0, #255	; 0xff
 8005f82:	f7ff ffa7 	bl	8005ed4 <xchg_spi>
 8005f86:	4603      	mov	r3, r0
 8005f88:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF
			&& ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	2bff      	cmp	r3, #255	; 0xff
 8005f8e:	d007      	beq.n	8005fa0 <wait_ready+0x32>
 8005f90:	f7fc f980 	bl	8002294 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d8ef      	bhi.n	8005f80 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2bff      	cmp	r3, #255	; 0xff
 8005fa4:	bf0c      	ite	eq
 8005fa6:	2301      	moveq	r3, #1
 8005fa8:	2300      	movne	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect(void) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
	CS_HIGH(); /* Set CS# high */
 8005fb8:	2201      	movs	r2, #1
 8005fba:	2140      	movs	r1, #64	; 0x40
 8005fbc:	4803      	ldr	r0, [pc, #12]	; (8005fcc <despiselect+0x18>)
 8005fbe:	f000 fd81 	bl	8006ac4 <gpio_write>
	xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005fc2:	20ff      	movs	r0, #255	; 0xff
 8005fc4:	f7ff ff86 	bl	8005ed4 <xchg_spi>

}
 8005fc8:	bf00      	nop
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40020400 	.word	0x40020400

08005fd0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect(void) /* 1:OK, 0:Timeout */
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
	CS_LOW(); /* Set CS# low */
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2140      	movs	r1, #64	; 0x40
 8005fd8:	4809      	ldr	r0, [pc, #36]	; (8006000 <spiselect+0x30>)
 8005fda:	f000 fd73 	bl	8006ac4 <gpio_write>
	xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 8005fde:	20ff      	movs	r0, #255	; 0xff
 8005fe0:	f7ff ff78 	bl	8005ed4 <xchg_spi>
	if (wait_ready(500))
 8005fe4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fe8:	f7ff ffc1 	bl	8005f6e <wait_ready>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <spiselect+0x26>
		return 1; /* Wait for card ready */
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e002      	b.n	8005ffc <spiselect+0x2c>

	despiselect();
 8005ff6:	f7ff ffdd 	bl	8005fb4 <despiselect>
	return 0; /* Timeout */
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40020400 	.word	0x40020400

08006004 <rcvr_datablock>:

static
int rcvr_datablock( /* 1:OK, 0:Error */
BYTE *buff, /* Data buffer */
UINT btr /* Data block length (byte) */
) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
	BYTE token;

	SPI_Timer_On(200);
 800600e:	20c8      	movs	r0, #200	; 0xc8
 8006010:	f7ff ff36 	bl	8005e80 <SPI_Timer_On>
	do { /* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006014:	20ff      	movs	r0, #255	; 0xff
 8006016:	f7ff ff5d 	bl	8005ed4 <xchg_spi>
 800601a:	4603      	mov	r3, r0
 800601c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	2bff      	cmp	r3, #255	; 0xff
 8006022:	d104      	bne.n	800602e <rcvr_datablock+0x2a>
 8006024:	f7ff ff40 	bl	8005ea8 <SPI_Timer_Status>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1f2      	bne.n	8006014 <rcvr_datablock+0x10>
	if (token != 0xFE)
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	2bfe      	cmp	r3, #254	; 0xfe
 8006032:	d001      	beq.n	8006038 <rcvr_datablock+0x34>
		return 0; /* Function fails if invalid DataStart token or timeout */
 8006034:	2300      	movs	r3, #0
 8006036:	e00a      	b.n	800604e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ff60 	bl	8005f00 <rcvr_spi_multi>
	xchg_spi(0xFF);
 8006040:	20ff      	movs	r0, #255	; 0xff
 8006042:	f7ff ff47 	bl	8005ed4 <xchg_spi>
	xchg_spi(0xFF); /* Discard CRC */
 8006046:	20ff      	movs	r0, #255	; 0xff
 8006048:	f7ff ff44 	bl	8005ed4 <xchg_spi>

	return 1; /* Function succeeded */
 800604c:	2301      	movs	r3, #1
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <xmit_datablock>:
#if _USE_WRITE
static
int xmit_datablock( /* 1:OK, 0:Failed */
const BYTE *buff, /* Ponter to 512 byte data to be sent */
BYTE token /* Token */
) {
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	70fb      	strb	r3, [r7, #3]
	BYTE resp;

	if (!wait_ready(500))
 8006062:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006066:	f7ff ff82 	bl	8005f6e <wait_ready>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <xmit_datablock+0x1e>
		return 0; /* Wait for card ready */
 8006070:	2300      	movs	r3, #0
 8006072:	e01e      	b.n	80060b2 <xmit_datablock+0x5c>

	xchg_spi(token); /* Send token */
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff ff2c 	bl	8005ed4 <xchg_spi>
	if (token != 0xFD) { /* Send data if token is other than StopTran */
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	2bfd      	cmp	r3, #253	; 0xfd
 8006080:	d016      	beq.n	80060b0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512); /* Data */
 8006082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff ff56 	bl	8005f38 <xmit_spi_multi>
		xchg_spi(0xFF);
 800608c:	20ff      	movs	r0, #255	; 0xff
 800608e:	f7ff ff21 	bl	8005ed4 <xchg_spi>
		xchg_spi(0xFF); /* Dummy CRC */
 8006092:	20ff      	movs	r0, #255	; 0xff
 8006094:	f7ff ff1e 	bl	8005ed4 <xchg_spi>

		resp = xchg_spi(0xFF); /* Receive data resp */
 8006098:	20ff      	movs	r0, #255	; 0xff
 800609a:	f7ff ff1b 	bl	8005ed4 <xchg_spi>
 800609e:	4603      	mov	r3, r0
 80060a0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05)
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	f003 031f 	and.w	r3, r3, #31
 80060a8:	2b05      	cmp	r3, #5
 80060aa:	d001      	beq.n	80060b0 <xmit_datablock+0x5a>
			return 0; /* Function fails if the data packet was not accepted */
 80060ac:	2300      	movs	r3, #0
 80060ae:	e000      	b.n	80060b2 <xmit_datablock+0x5c>
	}
	return 1;
 80060b0:	2301      	movs	r3, #1
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd( /* Return value: R1 resp (bit7==1:Failed to send) */
BYTE cmd, /* Command index */
DWORD arg /* Argument */
) {
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	4603      	mov	r3, r0
 80060c2:	6039      	str	r1, [r7, #0]
 80060c4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 80060c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	da0e      	bge.n	80060ec <send_cmd+0x32>
		cmd &= 0x7F;
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80060d6:	2100      	movs	r1, #0
 80060d8:	2037      	movs	r0, #55	; 0x37
 80060da:	f7ff ffee 	bl	80060ba <send_cmd>
 80060de:	4603      	mov	r3, r0
 80060e0:	73bb      	strb	r3, [r7, #14]
		if (res > 1)
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d901      	bls.n	80060ec <send_cmd+0x32>
			return res;
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	e051      	b.n	8006190 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	2b0c      	cmp	r3, #12
 80060f0:	d008      	beq.n	8006104 <send_cmd+0x4a>
		despiselect();
 80060f2:	f7ff ff5f 	bl	8005fb4 <despiselect>
		if (!spiselect())
 80060f6:	f7ff ff6b 	bl	8005fd0 <spiselect>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <send_cmd+0x4a>
			return 0xFF;
 8006100:	23ff      	movs	r3, #255	; 0xff
 8006102:	e045      	b.n	8006190 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd); /* Start + command index */
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800610a:	b2db      	uxtb	r3, r3
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fee1 	bl	8005ed4 <xchg_spi>
	xchg_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	0e1b      	lsrs	r3, r3, #24
 8006116:	b2db      	uxtb	r3, r3
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fedb 	bl	8005ed4 <xchg_spi>
	xchg_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	0c1b      	lsrs	r3, r3, #16
 8006122:	b2db      	uxtb	r3, r3
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fed5 	bl	8005ed4 <xchg_spi>
	xchg_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	0a1b      	lsrs	r3, r3, #8
 800612e:	b2db      	uxtb	r3, r3
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fecf 	bl	8005ed4 <xchg_spi>
	xchg_spi((BYTE) arg); /* Argument[7..0] */
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff feca 	bl	8005ed4 <xchg_spi>
	n = 0x01; /* Dummy CRC + Stop */
 8006140:	2301      	movs	r3, #1
 8006142:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <send_cmd+0x94>
		n = 0x95; /* Valid CRC for CMD0(0) */
 800614a:	2395      	movs	r3, #149	; 0x95
 800614c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	2b08      	cmp	r3, #8
 8006152:	d101      	bne.n	8006158 <send_cmd+0x9e>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
 8006154:	2387      	movs	r3, #135	; 0x87
 8006156:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff feba 	bl	8005ed4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12)
 8006160:	79fb      	ldrb	r3, [r7, #7]
 8006162:	2b0c      	cmp	r3, #12
 8006164:	d102      	bne.n	800616c <send_cmd+0xb2>
		xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 8006166:	20ff      	movs	r0, #255	; 0xff
 8006168:	f7ff feb4 	bl	8005ed4 <xchg_spi>
	n = 10; /* Wait for response (10 bytes max) */
 800616c:	230a      	movs	r3, #10
 800616e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006170:	20ff      	movs	r0, #255	; 0xff
 8006172:	f7ff feaf 	bl	8005ed4 <xchg_spi>
 8006176:	4603      	mov	r3, r0
 8006178:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800617a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800617e:	2b00      	cmp	r3, #0
 8006180:	da05      	bge.n	800618e <send_cmd+0xd4>
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	3b01      	subs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <send_cmd+0xb6>

	return res; /* Return received response */
 800618e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize(BYTE drv /* Physical drive number (0) */
) {
 8006198:	b590      	push	{r4, r7, lr}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0)
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <USER_SPI_initialize+0x14>
		return STA_NOINIT; /* Supports only drive 0 */
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0d4      	b.n	8006356 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK)
 80061ac:	4b6c      	ldr	r3, [pc, #432]	; (8006360 <USER_SPI_initialize+0x1c8>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <USER_SPI_initialize+0x2a>
		return Stat; /* Is card existing in the soket? */
 80061ba:	4b69      	ldr	r3, [pc, #420]	; (8006360 <USER_SPI_initialize+0x1c8>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	e0c9      	b.n	8006356 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 80061c2:	4b68      	ldr	r3, [pc, #416]	; (8006364 <USER_SPI_initialize+0x1cc>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80061cc:	4b65      	ldr	r3, [pc, #404]	; (8006364 <USER_SPI_initialize+0x1cc>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80061d4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--)
 80061d6:	230a      	movs	r3, #10
 80061d8:	73fb      	strb	r3, [r7, #15]
 80061da:	e005      	b.n	80061e8 <USER_SPI_initialize+0x50>
		xchg_spi(0xFF); /* Send 80 dummy clocks */
 80061dc:	20ff      	movs	r0, #255	; 0xff
 80061de:	f7ff fe79 	bl	8005ed4 <xchg_spi>
	for (n = 10; n; n--)
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f6      	bne.n	80061dc <USER_SPI_initialize+0x44>

	ty = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) { /* Put the card SPI/Idle state */
 80061f2:	2100      	movs	r1, #0
 80061f4:	2000      	movs	r0, #0
 80061f6:	f7ff ff60 	bl	80060ba <send_cmd>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f040 808b 	bne.w	8006318 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000); /* Initialization timeout = 1 sec */
 8006202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006206:	f7ff fe3b 	bl	8005e80 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 800620a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800620e:	2008      	movs	r0, #8
 8006210:	f7ff ff53 	bl	80060ba <send_cmd>
 8006214:	4603      	mov	r3, r0
 8006216:	2b01      	cmp	r3, #1
 8006218:	d151      	bne.n	80062be <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++)
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]
 800621e:	e00d      	b.n	800623c <USER_SPI_initialize+0xa4>
				ocr[n] = xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 8006220:	7bfc      	ldrb	r4, [r7, #15]
 8006222:	20ff      	movs	r0, #255	; 0xff
 8006224:	f7ff fe56 	bl	8005ed4 <xchg_spi>
 8006228:	4603      	mov	r3, r0
 800622a:	461a      	mov	r2, r3
 800622c:	f104 0310 	add.w	r3, r4, #16
 8006230:	443b      	add	r3, r7
 8006232:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	3301      	adds	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	2b03      	cmp	r3, #3
 8006240:	d9ee      	bls.n	8006220 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* Is the card supports vcc of 2.7-3.6V? */
 8006242:	7abb      	ldrb	r3, [r7, #10]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d167      	bne.n	8006318 <USER_SPI_initialize+0x180>
 8006248:	7afb      	ldrb	r3, [r7, #11]
 800624a:	2baa      	cmp	r3, #170	; 0xaa
 800624c:	d164      	bne.n	8006318 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30))
 800624e:	bf00      	nop
 8006250:	f7ff fe2a 	bl	8005ea8 <SPI_Timer_Status>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <USER_SPI_initialize+0xd2>
 800625a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800625e:	20a9      	movs	r0, #169	; 0xa9
 8006260:	f7ff ff2b 	bl	80060ba <send_cmd>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f2      	bne.n	8006250 <USER_SPI_initialize+0xb8>
					; /* Wait for end of initialization with ACMD41(HCS) */
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 800626a:	f7ff fe1d 	bl	8005ea8 <SPI_Timer_Status>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d051      	beq.n	8006318 <USER_SPI_initialize+0x180>
 8006274:	2100      	movs	r1, #0
 8006276:	203a      	movs	r0, #58	; 0x3a
 8006278:	f7ff ff1f 	bl	80060ba <send_cmd>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d14a      	bne.n	8006318 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++)
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
 8006286:	e00d      	b.n	80062a4 <USER_SPI_initialize+0x10c>
						ocr[n] = xchg_spi(0xFF);
 8006288:	7bfc      	ldrb	r4, [r7, #15]
 800628a:	20ff      	movs	r0, #255	; 0xff
 800628c:	f7ff fe22 	bl	8005ed4 <xchg_spi>
 8006290:	4603      	mov	r3, r0
 8006292:	461a      	mov	r2, r3
 8006294:	f104 0310 	add.w	r3, r4, #16
 8006298:	443b      	add	r3, r7
 800629a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	3301      	adds	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d9ee      	bls.n	8006288 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 80062aa:	7a3b      	ldrb	r3, [r7, #8]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <USER_SPI_initialize+0x120>
 80062b4:	230c      	movs	r3, #12
 80062b6:	e000      	b.n	80062ba <USER_SPI_initialize+0x122>
 80062b8:	2304      	movs	r3, #4
 80062ba:	737b      	strb	r3, [r7, #13]
 80062bc:	e02c      	b.n	8006318 <USER_SPI_initialize+0x180>
				}
			}
		} else { /* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) { /* SDv1 or MMC? */
 80062be:	2100      	movs	r1, #0
 80062c0:	20a9      	movs	r0, #169	; 0xa9
 80062c2:	f7ff fefa 	bl	80060ba <send_cmd>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d804      	bhi.n	80062d6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1;
 80062cc:	2302      	movs	r3, #2
 80062ce:	737b      	strb	r3, [r7, #13]
				cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 80062d0:	23a9      	movs	r3, #169	; 0xa9
 80062d2:	73bb      	strb	r3, [r7, #14]
 80062d4:	e003      	b.n	80062de <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC;
 80062d6:	2301      	movs	r3, #1
 80062d8:	737b      	strb	r3, [r7, #13]
				cmd = CMD1; /* MMCv3 (CMD1(0)) */
 80062da:	2301      	movs	r3, #1
 80062dc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0))
 80062de:	bf00      	nop
 80062e0:	f7ff fde2 	bl	8005ea8 <SPI_Timer_Status>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <USER_SPI_initialize+0x162>
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	2100      	movs	r1, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fee3 	bl	80060ba <send_cmd>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f2      	bne.n	80062e0 <USER_SPI_initialize+0x148>
				; /* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 80062fa:	f7ff fdd5 	bl	8005ea8 <SPI_Timer_Status>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <USER_SPI_initialize+0x17c>
 8006304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006308:	2010      	movs	r0, #16
 800630a:	f7ff fed6 	bl	80060ba <send_cmd>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <USER_SPI_initialize+0x180>
				ty = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty; /* Card type */
 8006318:	4a13      	ldr	r2, [pc, #76]	; (8006368 <USER_SPI_initialize+0x1d0>)
 800631a:	7b7b      	ldrb	r3, [r7, #13]
 800631c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800631e:	f7ff fe49 	bl	8005fb4 <despiselect>

	if (ty) { /* OK */
 8006322:	7b7b      	ldrb	r3, [r7, #13]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d010      	beq.n	800634a <USER_SPI_initialize+0x1b2>
		FCLK_FAST(); /* Set fast clock */
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <USER_SPI_initialize+0x1cc>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <USER_SPI_initialize+0x1cc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006336:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT flag */
 8006338:	4b09      	ldr	r3, [pc, #36]	; (8006360 <USER_SPI_initialize+0x1c8>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f023 0301 	bic.w	r3, r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <USER_SPI_initialize+0x1c8>)
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e002      	b.n	8006350 <USER_SPI_initialize+0x1b8>
	} else { /* Failed */
		Stat = STA_NOINIT;
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <USER_SPI_initialize+0x1c8>)
 800634c:	2201      	movs	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006350:	4b03      	ldr	r3, [pc, #12]	; (8006360 <USER_SPI_initialize+0x1c8>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	b2db      	uxtb	r3, r3
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bd90      	pop	{r4, r7, pc}
 800635e:	bf00      	nop
 8006360:	20000034 	.word	0x20000034
 8006364:	20000304 	.word	0x20000304
 8006368:	200004ac 	.word	0x200004ac

0800636c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/
/* Get disk status                                                       */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status(BYTE drv /* Physical drive number (0) */
) {
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <USER_SPI_status+0x14>
		return STA_NOINIT; /* Supports only drive 0 */
 800637c:	2301      	movs	r3, #1
 800637e:	e002      	b.n	8006386 <USER_SPI_status+0x1a>

	return Stat; /* Return disk status */
 8006380:	4b04      	ldr	r3, [pc, #16]	; (8006394 <USER_SPI_status+0x28>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	b2db      	uxtb	r3, r3
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000034 	.word	0x20000034

08006398 <USER_SPI_read>:

inline DRESULT USER_SPI_read(BYTE drv, /* Physical drive number (0) */
BYTE *buff, /* Pointer to the data buffer to store read data */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to read (1..128) */
) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	607a      	str	r2, [r7, #4]
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <USER_SPI_read+0x1c>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <USER_SPI_read+0x20>
		return RES_PARERR; /* Check parameter */
 80063b4:	2304      	movs	r3, #4
 80063b6:	e04d      	b.n	8006454 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT)
 80063b8:	4b28      	ldr	r3, [pc, #160]	; (800645c <USER_SPI_read+0xc4>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <USER_SPI_read+0x32>
		return RES_NOTRDY; /* Check if drive is ready */
 80063c6:	2303      	movs	r3, #3
 80063c8:	e044      	b.n	8006454 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK))
 80063ca:	4b25      	ldr	r3, [pc, #148]	; (8006460 <USER_SPI_read+0xc8>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <USER_SPI_read+0x44>
		sector *= 512; /* LBA ot BA conversion (byte addressing cards) */
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	025b      	lsls	r3, r3, #9
 80063da:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector read */
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d111      	bne.n	8006406 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	2011      	movs	r0, #17
 80063e6:	f7ff fe68 	bl	80060ba <send_cmd>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d129      	bne.n	8006444 <USER_SPI_read+0xac>
		&& rcvr_datablock(buff, 512)) {
 80063f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063f4:	68b8      	ldr	r0, [r7, #8]
 80063f6:	f7ff fe05 	bl	8006004 <rcvr_datablock>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d021      	beq.n	8006444 <USER_SPI_read+0xac>
			count = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	e01e      	b.n	8006444 <USER_SPI_read+0xac>
		}
	} else { /* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	2012      	movs	r0, #18
 800640a:	f7ff fe56 	bl	80060ba <send_cmd>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d117      	bne.n	8006444 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512))
 8006414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006418:	68b8      	ldr	r0, [r7, #8]
 800641a:	f7ff fdf3 	bl	8006004 <rcvr_datablock>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <USER_SPI_read+0xa2>
					break;
				buff += 512;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800642a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	3b01      	subs	r3, #1
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1ed      	bne.n	8006414 <USER_SPI_read+0x7c>
 8006438:	e000      	b.n	800643c <USER_SPI_read+0xa4>
					break;
 800643a:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 800643c:	2100      	movs	r1, #0
 800643e:	200c      	movs	r0, #12
 8006440:	f7ff fe3b 	bl	80060ba <send_cmd>
		}
	}
	despiselect();
 8006444:	f7ff fdb6 	bl	8005fb4 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000034 	.word	0x20000034
 8006460:	200004ac 	.word	0x200004ac

08006464 <USER_SPI_write>:
#if _USE_WRITE
inline DRESULT USER_SPI_write(BYTE drv, /* Physical drive number (0) */
const BYTE *buff, /* Ponter to the data to write */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to write (1..128) */
) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	607a      	str	r2, [r7, #4]
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <USER_SPI_write+0x1c>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <USER_SPI_write+0x20>
		return RES_PARERR; /* Check parameter */
 8006480:	2304      	movs	r3, #4
 8006482:	e063      	b.n	800654c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT)
 8006484:	4b33      	ldr	r3, [pc, #204]	; (8006554 <USER_SPI_write+0xf0>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <USER_SPI_write+0x32>
		return RES_NOTRDY; /* Check drive status */
 8006492:	2303      	movs	r3, #3
 8006494:	e05a      	b.n	800654c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT)
 8006496:	4b2f      	ldr	r3, [pc, #188]	; (8006554 <USER_SPI_write+0xf0>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <USER_SPI_write+0x44>
		return RES_WRPRT; /* Check write protect */
 80064a4:	2302      	movs	r3, #2
 80064a6:	e051      	b.n	800654c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK))
 80064a8:	4b2b      	ldr	r3, [pc, #172]	; (8006558 <USER_SPI_write+0xf4>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d102      	bne.n	80064ba <USER_SPI_write+0x56>
		sector *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	025b      	lsls	r3, r3, #9
 80064b8:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector write */
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d110      	bne.n	80064e2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	2018      	movs	r0, #24
 80064c4:	f7ff fdf9 	bl	80060ba <send_cmd>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d136      	bne.n	800653c <USER_SPI_write+0xd8>
		&& xmit_datablock(buff, 0xFE)) {
 80064ce:	21fe      	movs	r1, #254	; 0xfe
 80064d0:	68b8      	ldr	r0, [r7, #8]
 80064d2:	f7ff fdc0 	bl	8006056 <xmit_datablock>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d02f      	beq.n	800653c <USER_SPI_write+0xd8>
			count = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	e02c      	b.n	800653c <USER_SPI_write+0xd8>
		}
	} else { /* Multiple sector write */
		if (CardType & CT_SDC)
 80064e2:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <USER_SPI_write+0xf4>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f003 0306 	and.w	r3, r3, #6
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <USER_SPI_write+0x92>
			send_cmd(ACMD23, count); /* Predefine number of sectors */
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	2097      	movs	r0, #151	; 0x97
 80064f2:	f7ff fde2 	bl	80060ba <send_cmd>
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	2019      	movs	r0, #25
 80064fa:	f7ff fdde 	bl	80060ba <send_cmd>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d11b      	bne.n	800653c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8006504:	21fc      	movs	r1, #252	; 0xfc
 8006506:	68b8      	ldr	r0, [r7, #8]
 8006508:	f7ff fda5 	bl	8006056 <xmit_datablock>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <USER_SPI_write+0xc4>
					break;
				buff += 512;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006518:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	3b01      	subs	r3, #1
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1ee      	bne.n	8006504 <USER_SPI_write+0xa0>
 8006526:	e000      	b.n	800652a <USER_SPI_write+0xc6>
					break;
 8006528:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))
 800652a:	21fd      	movs	r1, #253	; 0xfd
 800652c:	2000      	movs	r0, #0
 800652e:	f7ff fd92 	bl	8006056 <xmit_datablock>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <USER_SPI_write+0xd8>
				count = 1; /* STOP_TRAN token */
 8006538:	2301      	movs	r3, #1
 800653a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800653c:	f7ff fd3a 	bl	8005fb4 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	bf14      	ite	ne
 8006546:	2301      	movne	r3, #1
 8006548:	2300      	moveq	r3, #0
 800654a:	b2db      	uxtb	r3, r3
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000034 	.word	0x20000034
 8006558:	200004ac 	.word	0x200004ac

0800655c <USER_SPI_ioctl>:

#if _USE_IOCTL
inline DRESULT USER_SPI_ioctl(BYTE drv, /* Physical drive number (0) */
BYTE cmd, /* Control command code */
void *buff /* Pointer to the conrtol data */
) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b08c      	sub	sp, #48	; 0x30
 8006560:	af00      	add	r7, sp, #0
 8006562:	4603      	mov	r3, r0
 8006564:	603a      	str	r2, [r7, #0]
 8006566:	71fb      	strb	r3, [r7, #7]
 8006568:	460b      	mov	r3, r1
 800656a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drv)
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <USER_SPI_ioctl+0x1a>
		return RES_PARERR; /* Check parameter */
 8006572:	2304      	movs	r3, #4
 8006574:	e15a      	b.n	800682c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT)
 8006576:	4baf      	ldr	r3, [pc, #700]	; (8006834 <USER_SPI_ioctl+0x2d8>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <USER_SPI_ioctl+0x2c>
		return RES_NOTRDY; /* Check if drive is ready */
 8006584:	2303      	movs	r3, #3
 8006586:	e151      	b.n	800682c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800658e:	79bb      	ldrb	r3, [r7, #6]
 8006590:	2b04      	cmp	r3, #4
 8006592:	f200 8136 	bhi.w	8006802 <USER_SPI_ioctl+0x2a6>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <USER_SPI_ioctl+0x40>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065b1 	.word	0x080065b1
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	08006803 	.word	0x08006803
 80065a8:	08006671 	.word	0x08006671
 80065ac:	08006767 	.word	0x08006767
	case CTRL_SYNC: /* Wait for end of internal write process of the drive */
		if (spiselect())
 80065b0:	f7ff fd0e 	bl	8005fd0 <spiselect>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8127 	beq.w	800680a <USER_SPI_ioctl+0x2ae>
			res = RES_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80065c2:	e122      	b.n	800680a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80065c4:	2100      	movs	r1, #0
 80065c6:	2009      	movs	r0, #9
 80065c8:	f7ff fd77 	bl	80060ba <send_cmd>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 811d 	bne.w	800680e <USER_SPI_ioctl+0x2b2>
 80065d4:	f107 030c 	add.w	r3, r7, #12
 80065d8:	2110      	movs	r1, #16
 80065da:	4618      	mov	r0, r3
 80065dc:	f7ff fd12 	bl	8006004 <rcvr_datablock>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 8113 	beq.w	800680e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 80065e8:	7b3b      	ldrb	r3, [r7, #12]
 80065ea:	099b      	lsrs	r3, r3, #6
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d111      	bne.n	8006616 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD) csd[8] << 8)
 80065f2:	7d7b      	ldrb	r3, [r7, #21]
 80065f4:	461a      	mov	r2, r3
 80065f6:	7d3b      	ldrb	r3, [r7, #20]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	4413      	add	r3, r2
 80065fc:	461a      	mov	r2, r3
						+ ((DWORD) (csd[7] & 63) << 16) + 1;
 80065fe:	7cfb      	ldrb	r3, [r7, #19]
 8006600:	041b      	lsls	r3, r3, #16
 8006602:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006606:	4413      	add	r3, r2
				csize = csd[9] + ((WORD) csd[8] << 8)
 8006608:	3301      	adds	r3, #1
 800660a:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << 10;
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	029a      	lsls	r2, r3, #10
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e028      	b.n	8006668 <USER_SPI_ioctl+0x10c>
			} else { /* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1)
 8006616:	7c7b      	ldrb	r3, [r7, #17]
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	b2da      	uxtb	r2, r3
 800661e:	7dbb      	ldrb	r3, [r7, #22]
 8006620:	09db      	lsrs	r3, r3, #7
 8006622:	b2db      	uxtb	r3, r3
 8006624:	4413      	add	r3, r2
 8006626:	b2da      	uxtb	r2, r3
 8006628:	7d7b      	ldrb	r3, [r7, #21]
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	f003 0306 	and.w	r3, r3, #6
 8006632:	b2db      	uxtb	r3, r3
 8006634:	4413      	add	r3, r2
 8006636:	b2db      	uxtb	r3, r3
 8006638:	3302      	adds	r3, #2
 800663a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						+ 2;
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800663e:	7d3b      	ldrb	r3, [r7, #20]
 8006640:	099b      	lsrs	r3, r3, #6
 8006642:	b2db      	uxtb	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	7cfb      	ldrb	r3, [r7, #19]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
						+ ((WORD) (csd[6] & 3) << 10) + 1;
 800664c:	7cbb      	ldrb	r3, [r7, #18]
 800664e:	029b      	lsls	r3, r3, #10
 8006650:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006654:	4413      	add	r3, r2
 8006656:	3301      	adds	r3, #1
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8006658:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << (n - 9);
 800665a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800665e:	3b09      	subs	r3, #9
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	409a      	lsls	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800666e:	e0ce      	b.n	800680e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) { /* SDC ver 2.00 */
 8006670:	4b71      	ldr	r3, [pc, #452]	; (8006838 <USER_SPI_ioctl+0x2dc>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d031      	beq.n	80066e0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 800667c:	2100      	movs	r1, #0
 800667e:	208d      	movs	r0, #141	; 0x8d
 8006680:	f7ff fd1b 	bl	80060ba <send_cmd>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	f040 80c3 	bne.w	8006812 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800668c:	20ff      	movs	r0, #255	; 0xff
 800668e:	f7ff fc21 	bl	8005ed4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) { /* Read partial block */
 8006692:	f107 030c 	add.w	r3, r7, #12
 8006696:	2110      	movs	r1, #16
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fcb3 	bl	8006004 <rcvr_datablock>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80b6 	beq.w	8006812 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--)
 80066a6:	2330      	movs	r3, #48	; 0x30
 80066a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80066ac:	e007      	b.n	80066be <USER_SPI_ioctl+0x162>
						xchg_spi(0xFF); /* Purge trailing data */
 80066ae:	20ff      	movs	r0, #255	; 0xff
 80066b0:	f7ff fc10 	bl	8005ed4 <xchg_spi>
					for (n = 64 - 16; n; n--)
 80066b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80066b8:	3b01      	subs	r3, #1
 80066ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80066be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f3      	bne.n	80066ae <USER_SPI_ioctl+0x152>
					*(DWORD*) buff = 16UL << (csd[10] >> 4);
 80066c6:	7dbb      	ldrb	r3, [r7, #22]
 80066c8:	091b      	lsrs	r3, r3, #4
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	2310      	movs	r3, #16
 80066d0:	fa03 f202 	lsl.w	r2, r3, r2
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
											+ ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80066de:	e098      	b.n	8006812 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) { /* Read CSD */
 80066e0:	2100      	movs	r1, #0
 80066e2:	2009      	movs	r0, #9
 80066e4:	f7ff fce9 	bl	80060ba <send_cmd>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f040 8091 	bne.w	8006812 <USER_SPI_ioctl+0x2b6>
 80066f0:	f107 030c 	add.w	r3, r7, #12
 80066f4:	2110      	movs	r1, #16
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fc84 	bl	8006004 <rcvr_datablock>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 8087 	beq.w	8006812 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) { /* SDC ver 1.XX */
 8006704:	4b4c      	ldr	r3, [pc, #304]	; (8006838 <USER_SPI_ioctl+0x2dc>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d012      	beq.n	8006736 <USER_SPI_ioctl+0x1da>
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8006710:	7dbb      	ldrb	r3, [r7, #22]
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	f003 037e 	and.w	r3, r3, #126	; 0x7e
							+ ((WORD) (csd[11] & 128) >> 7) + 1)
 8006718:	7dfa      	ldrb	r2, [r7, #23]
 800671a:	09d2      	lsrs	r2, r2, #7
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	4413      	add	r3, r2
 8006720:	1c5a      	adds	r2, r3, #1
							<< ((csd[13] >> 6) - 1);
 8006722:	7e7b      	ldrb	r3, [r7, #25]
 8006724:	099b      	lsrs	r3, r3, #6
 8006726:	b2db      	uxtb	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	461a      	mov	r2, r3
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e013      	b.n	800675e <USER_SPI_ioctl+0x202>
							((WORD) ((csd[10] & 124) >> 2) + 1)
 8006736:	7dbb      	ldrb	r3, [r7, #22]
 8006738:	109b      	asrs	r3, r3, #2
 800673a:	b29b      	uxth	r3, r3
 800673c:	f003 031f 	and.w	r3, r3, #31
 8006740:	3301      	adds	r3, #1
									* (((csd[11] & 3) << 3)
 8006742:	7dfa      	ldrb	r2, [r7, #23]
 8006744:	00d2      	lsls	r2, r2, #3
 8006746:	f002 0218 	and.w	r2, r2, #24
											+ ((csd[11] & 224) >> 5) + 1);
 800674a:	7df9      	ldrb	r1, [r7, #23]
 800674c:	0949      	lsrs	r1, r1, #5
 800674e:	b2c9      	uxtb	r1, r1
 8006750:	440a      	add	r2, r1
 8006752:	3201      	adds	r2, #1
									* (((csd[11] & 3) << 3)
 8006754:	fb02 f303 	mul.w	r3, r2, r3
 8006758:	461a      	mov	r2, r3
					*(DWORD*) buff =
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006764:	e055      	b.n	8006812 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC))
 8006766:	4b34      	ldr	r3, [pc, #208]	; (8006838 <USER_SPI_ioctl+0x2dc>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	f003 0306 	and.w	r3, r3, #6
 800676e:	2b00      	cmp	r3, #0
 8006770:	d051      	beq.n	8006816 <USER_SPI_ioctl+0x2ba>
			break; /* Check if the card is SDC */
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd))
 8006772:	f107 020c 	add.w	r2, r7, #12
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	210b      	movs	r1, #11
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff feee 	bl	800655c <USER_SPI_ioctl>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d149      	bne.n	800681a <USER_SPI_ioctl+0x2be>
			break; /* Get CSD */
		if (!(csd[0] >> 6) && !(csd[10] & 0x40))
 8006786:	7b3b      	ldrb	r3, [r7, #12]
 8006788:	099b      	lsrs	r3, r3, #6
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d104      	bne.n	800679a <USER_SPI_ioctl+0x23e>
 8006790:	7dbb      	ldrb	r3, [r7, #22]
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d041      	beq.n	800681e <USER_SPI_ioctl+0x2c2>
			break; /* Check if sector erase can be applied to the card */
		dp = buff;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	623b      	str	r3, [r7, #32]
		st = dp[0];
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28
		ed = dp[1]; /* Load sector block */
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80067aa:	4b23      	ldr	r3, [pc, #140]	; (8006838 <USER_SPI_ioctl+0x2dc>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d105      	bne.n	80067c2 <USER_SPI_ioctl+0x266>
			st *= 512;
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	025b      	lsls	r3, r3, #9
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28
			ed *= 512;
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	025b      	lsls	r3, r3, #9
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0
 80067c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067c4:	2020      	movs	r0, #32
 80067c6:	f7ff fc78 	bl	80060ba <send_cmd>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d128      	bne.n	8006822 <USER_SPI_ioctl+0x2c6>
 80067d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067d2:	2021      	movs	r0, #33	; 0x21
 80067d4:	f7ff fc71 	bl	80060ba <send_cmd>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d121      	bne.n	8006822 <USER_SPI_ioctl+0x2c6>
				&& send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 80067de:	2100      	movs	r1, #0
 80067e0:	2026      	movs	r0, #38	; 0x26
 80067e2:	f7ff fc6a 	bl	80060ba <send_cmd>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d11a      	bne.n	8006822 <USER_SPI_ioctl+0x2c6>
 80067ec:	f247 5030 	movw	r0, #30000	; 0x7530
 80067f0:	f7ff fbbd 	bl	8005f6e <wait_ready>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d013      	beq.n	8006822 <USER_SPI_ioctl+0x2c6>
			res = RES_OK; /* FatFs does not check result of this command */
 80067fa:	2300      	movs	r3, #0
 80067fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006800:	e00f      	b.n	8006822 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006802:	2304      	movs	r3, #4
 8006804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006808:	e00c      	b.n	8006824 <USER_SPI_ioctl+0x2c8>
		break;
 800680a:	bf00      	nop
 800680c:	e00a      	b.n	8006824 <USER_SPI_ioctl+0x2c8>
		break;
 800680e:	bf00      	nop
 8006810:	e008      	b.n	8006824 <USER_SPI_ioctl+0x2c8>
		break;
 8006812:	bf00      	nop
 8006814:	e006      	b.n	8006824 <USER_SPI_ioctl+0x2c8>
			break; /* Check if the card is SDC */
 8006816:	bf00      	nop
 8006818:	e004      	b.n	8006824 <USER_SPI_ioctl+0x2c8>
			break; /* Get CSD */
 800681a:	bf00      	nop
 800681c:	e002      	b.n	8006824 <USER_SPI_ioctl+0x2c8>
			break; /* Check if sector erase can be applied to the card */
 800681e:	bf00      	nop
 8006820:	e000      	b.n	8006824 <USER_SPI_ioctl+0x2c8>
		break;
 8006822:	bf00      	nop
	}

	despiselect();
 8006824:	f7ff fbc6 	bl	8005fb4 <despiselect>

	return res;
 8006828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800682c:	4618      	mov	r0, r3
 800682e:	3730      	adds	r7, #48	; 0x30
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000034 	.word	0x20000034
 8006838:	200004ac 	.word	0x200004ac

0800683c <__NVIC_EnableIRQ>:
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684a:	2b00      	cmp	r3, #0
 800684c:	db0b      	blt.n	8006866 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	f003 021f 	and.w	r2, r3, #31
 8006854:	4907      	ldr	r1, [pc, #28]	; (8006874 <__NVIC_EnableIRQ+0x38>)
 8006856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2001      	movs	r0, #1
 800685e:	fa00 f202 	lsl.w	r2, r0, r2
 8006862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	e000e100 	.word	0xe000e100

08006878 <gpio_clk_en>:
		uint16_t out_max) {
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
}

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a1b      	ldr	r2, [pc, #108]	; (80068f0 <gpio_clk_en+0x78>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d106      	bne.n	8006896 <gpio_clk_en+0x1e>
		GPIOA_CLK_EN;
 8006888:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <gpio_clk_en+0x7c>)
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	4a19      	ldr	r2, [pc, #100]	; (80068f4 <gpio_clk_en+0x7c>)
 800688e:	f043 0301 	orr.w	r3, r3, #1
 8006892:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOH_CLK_EN;
	}
}
 8006894:	e026      	b.n	80068e4 <gpio_clk_en+0x6c>
	} else if (port == GPIOB) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <gpio_clk_en+0x80>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d106      	bne.n	80068ac <gpio_clk_en+0x34>
		GPIOB_CLK_EN;
 800689e:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <gpio_clk_en+0x7c>)
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	4a14      	ldr	r2, [pc, #80]	; (80068f4 <gpio_clk_en+0x7c>)
 80068a4:	f043 0302 	orr.w	r3, r3, #2
 80068a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80068aa:	e01b      	b.n	80068e4 <gpio_clk_en+0x6c>
	} else if (port == GPIOC) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a13      	ldr	r2, [pc, #76]	; (80068fc <gpio_clk_en+0x84>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d106      	bne.n	80068c2 <gpio_clk_en+0x4a>
		GPIOC_CLK_EN;
 80068b4:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <gpio_clk_en+0x7c>)
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	4a0e      	ldr	r2, [pc, #56]	; (80068f4 <gpio_clk_en+0x7c>)
 80068ba:	f043 0304 	orr.w	r3, r3, #4
 80068be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80068c0:	e010      	b.n	80068e4 <gpio_clk_en+0x6c>
	} else if (port == GPIOD) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a0e      	ldr	r2, [pc, #56]	; (8006900 <gpio_clk_en+0x88>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d106      	bne.n	80068d8 <gpio_clk_en+0x60>
		GPIOD_CLK_EN;
 80068ca:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <gpio_clk_en+0x7c>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <gpio_clk_en+0x7c>)
 80068d0:	f043 0308 	orr.w	r3, r3, #8
 80068d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80068d6:	e005      	b.n	80068e4 <gpio_clk_en+0x6c>
		GPIOH_CLK_EN;
 80068d8:	4b06      	ldr	r3, [pc, #24]	; (80068f4 <gpio_clk_en+0x7c>)
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	4a05      	ldr	r2, [pc, #20]	; (80068f4 <gpio_clk_en+0x7c>)
 80068de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	40020000 	.word	0x40020000
 80068f4:	40023800 	.word	0x40023800
 80068f8:	40020400 	.word	0x40020400
 80068fc:	40020800 	.word	0x40020800
 8006900:	40020c00 	.word	0x40020c00

08006904 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d117      	bne.n	8006948 <gpio_config+0x44>
		gpio_clk_en(port);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ffad 	bl	8006878 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f846 	bl	80069b4 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f85b 	bl	80069e8 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f870 	bl	8006a1c <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f885 	bl	8006a50 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
//		adc_chsel(port, pinNumber);
	}
}
 8006946:	e031      	b.n	80069ac <gpio_config+0xa8>
	} else if (pinMode == INPUT_MODE) {
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10d      	bne.n	800696a <gpio_config+0x66>
		gpio_clk_en(port);
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff ff92 	bl	8006878 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f82b 	bl	80069b4 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f85a 	bl	8006a1c <gpio_PUPD>
}
 8006968:	e020      	b.n	80069ac <gpio_config+0xa8>
	} else if (pinMode == ALT_MODE) {
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d112      	bne.n	8006996 <gpio_config+0x92>
		gpio_clk_en(port);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff ff81 	bl	8006878 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 f81a 	bl	80069b4 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f849 	bl	8006a1c <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f85e 	bl	8006a50 <gpio_PHPL_OD>
}
 8006994:	e00a      	b.n	80069ac <gpio_config+0xa8>
	} else if (pinMode == ANALOG_MODE) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b03      	cmp	r3, #3
 800699a:	d107      	bne.n	80069ac <gpio_config+0xa8>
		gpio_clk_en(port);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff ff6b 	bl	8006878 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f804 	bl	80069b4 <gpio_moder>
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	4907      	ldr	r1, [pc, #28]	; (80069e4 <gpio_moder+0x30>)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	fa01 f303 	lsl.w	r3, r1, r3
 80069d2:	431a      	orrs	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	601a      	str	r2, [r3, #0]
}
 80069d8:	bf00      	nop
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	20000038 	.word	0x20000038

080069e8 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH/VERYHIGH
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	4907      	ldr	r1, [pc, #28]	; (8006a18 <gpio_speed+0x30>)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	fa01 f303 	lsl.w	r3, r1, r3
 8006a06:	431a      	orrs	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	20000038 	.word	0x20000038

08006a1c <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	4907      	ldr	r1, [pc, #28]	; (8006a4c <gpio_PUPD+0x30>)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	60da      	str	r2, [r3, #12]
}
 8006a40:	bf00      	nop
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	20000038 	.word	0x20000038

08006a50 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	fa01 f303 	lsl.w	r3, r1, r3
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	605a      	str	r2, [r3, #4]
}
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b07      	cmp	r3, #7
 8006a8a:	d80a      	bhi.n	8006aa2 <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8006aa0:	e00a      	b.n	8006ab8 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	3b08      	subs	r3, #8
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006ab8:	bf00      	nop
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	71fb      	strb	r3, [r7, #7]
	if (state) {
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <gpio_write+0x24>
		port->BSRR = (1 << pinNumber);
 8006ad8:	2201      	movs	r2, #1
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 8006ae6:	e007      	b.n	8006af8 <gpio_write+0x34>
		port->BSRR = (1 << (pinNumber + 16));
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	3310      	adds	r3, #16
 8006aec:	2201      	movs	r2, #1
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	619a      	str	r2, [r3, #24]
}
 8006af8:	bf00      	nop
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <gpio_IT_config>:
	return flag;
}
/**************************************************************************************/

/*******************************INTERRUPT CONFIGURATION*********************************/
void gpio_IT_config(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t edge) {
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	71fb      	strb	r3, [r7, #7]
	SYSCFG_CLK_EN;
 8006b12:	4baa      	ldr	r3, [pc, #680]	; (8006dbc <gpio_IT_config+0x2b8>)
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	4aa9      	ldr	r2, [pc, #676]	; (8006dbc <gpio_IT_config+0x2b8>)
 8006b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b1c:	6453      	str	r3, [r2, #68]	; 0x44
	if (port == GPIOA) {
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4aa7      	ldr	r2, [pc, #668]	; (8006dc0 <gpio_IT_config+0x2bc>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d166      	bne.n	8006bf4 <gpio_IT_config+0xf0>
		switch (pinNumber) {
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b0f      	cmp	r3, #15
 8006b2a:	f200 81ca 	bhi.w	8006ec2 <gpio_IT_config+0x3be>
 8006b2e:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <gpio_IT_config+0x30>)
 8006b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b34:	08006b75 	.word	0x08006b75
 8006b38:	08006b7d 	.word	0x08006b7d
 8006b3c:	08006b85 	.word	0x08006b85
 8006b40:	08006b8d 	.word	0x08006b8d
 8006b44:	08006b95 	.word	0x08006b95
 8006b48:	08006b9d 	.word	0x08006b9d
 8006b4c:	08006ba5 	.word	0x08006ba5
 8006b50:	08006bad 	.word	0x08006bad
 8006b54:	08006bb5 	.word	0x08006bb5
 8006b58:	08006bbd 	.word	0x08006bbd
 8006b5c:	08006bc5 	.word	0x08006bc5
 8006b60:	08006bcd 	.word	0x08006bcd
 8006b64:	08006bd5 	.word	0x08006bd5
 8006b68:	08006bdd 	.word	0x08006bdd
 8006b6c:	08006be5 	.word	0x08006be5
 8006b70:	08006bed 	.word	0x08006bed
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8006b74:	4b93      	ldr	r3, [pc, #588]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	609a      	str	r2, [r3, #8]
			break;
 8006b7a:	e1a2      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 8006b7c:	4b91      	ldr	r3, [pc, #580]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	609a      	str	r2, [r3, #8]
			break;
 8006b82:	e19e      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 8006b84:	4b8f      	ldr	r3, [pc, #572]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
			break;
 8006b8a:	e19a      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 8006b8c:	4b8d      	ldr	r3, [pc, #564]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	609a      	str	r2, [r3, #8]
			break;
 8006b92:	e196      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA;
 8006b94:	4b8b      	ldr	r3, [pc, #556]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	60da      	str	r2, [r3, #12]
			break;
 8006b9a:	e192      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PA;
 8006b9c:	4b89      	ldr	r3, [pc, #548]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	60da      	str	r2, [r3, #12]
			break;
 8006ba2:	e18e      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PA;
 8006ba4:	4b87      	ldr	r3, [pc, #540]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	60da      	str	r2, [r3, #12]
			break;
 8006baa:	e18a      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PA;
 8006bac:	4b85      	ldr	r3, [pc, #532]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	60da      	str	r2, [r3, #12]
			break;
 8006bb2:	e186      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PA;
 8006bb4:	4b83      	ldr	r3, [pc, #524]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	611a      	str	r2, [r3, #16]
			break;
 8006bba:	e182      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PA;
 8006bbc:	4b81      	ldr	r3, [pc, #516]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	611a      	str	r2, [r3, #16]
			break;
 8006bc2:	e17e      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PA;
 8006bc4:	4b7f      	ldr	r3, [pc, #508]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	611a      	str	r2, [r3, #16]
			break;
 8006bca:	e17a      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PA;
 8006bcc:	4b7d      	ldr	r3, [pc, #500]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	611a      	str	r2, [r3, #16]
			break;
 8006bd2:	e176      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PA;
 8006bd4:	4b7b      	ldr	r3, [pc, #492]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	615a      	str	r2, [r3, #20]
			break;
 8006bda:	e172      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PA;
 8006bdc:	4b79      	ldr	r3, [pc, #484]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	615a      	str	r2, [r3, #20]
			break;
 8006be2:	e16e      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PA;
 8006be4:	4b77      	ldr	r3, [pc, #476]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	615a      	str	r2, [r3, #20]
			break;
 8006bea:	e16a      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PA;
 8006bec:	4b75      	ldr	r3, [pc, #468]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	615a      	str	r2, [r3, #20]
			break;
 8006bf2:	e166      	b.n	8006ec2 <gpio_IT_config+0x3be>
		}	// end of Port A
	} else if (port == GPIOB) {
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4a74      	ldr	r2, [pc, #464]	; (8006dc8 <gpio_IT_config+0x2c4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d16f      	bne.n	8006cdc <gpio_IT_config+0x1d8>
		switch (pinNumber) {
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b0f      	cmp	r3, #15
 8006c00:	f200 815f 	bhi.w	8006ec2 <gpio_IT_config+0x3be>
 8006c04:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <gpio_IT_config+0x108>)
 8006c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006c4d 	.word	0x08006c4d
 8006c10:	08006c55 	.word	0x08006c55
 8006c14:	08006c5d 	.word	0x08006c5d
 8006c18:	08006c67 	.word	0x08006c67
 8006c1c:	08006c71 	.word	0x08006c71
 8006c20:	08006c79 	.word	0x08006c79
 8006c24:	08006c81 	.word	0x08006c81
 8006c28:	08006c8b 	.word	0x08006c8b
 8006c2c:	08006c95 	.word	0x08006c95
 8006c30:	08006c9d 	.word	0x08006c9d
 8006c34:	08006ca5 	.word	0x08006ca5
 8006c38:	08006caf 	.word	0x08006caf
 8006c3c:	08006cb9 	.word	0x08006cb9
 8006c40:	08006cc1 	.word	0x08006cc1
 8006c44:	08006cc9 	.word	0x08006cc9
 8006c48:	08006cd3 	.word	0x08006cd3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 8006c4c:	4b5d      	ldr	r3, [pc, #372]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	609a      	str	r2, [r3, #8]
			break;
 8006c52:	e136      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 8006c54:	4b5b      	ldr	r3, [pc, #364]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006c56:	2210      	movs	r2, #16
 8006c58:	609a      	str	r2, [r3, #8]
			break;
 8006c5a:	e132      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 8006c5c:	4b59      	ldr	r3, [pc, #356]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c62:	609a      	str	r2, [r3, #8]
			break;
 8006c64:	e12d      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 8006c66:	4b57      	ldr	r3, [pc, #348]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c6c:	609a      	str	r2, [r3, #8]
			break;
 8006c6e:	e128      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PB;
 8006c70:	4b54      	ldr	r3, [pc, #336]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	60da      	str	r2, [r3, #12]
			break;
 8006c76:	e124      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PB;
 8006c78:	4b52      	ldr	r3, [pc, #328]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006c7a:	2210      	movs	r2, #16
 8006c7c:	60da      	str	r2, [r3, #12]
			break;
 8006c7e:	e120      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PB;
 8006c80:	4b50      	ldr	r3, [pc, #320]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c86:	60da      	str	r2, [r3, #12]
			break;
 8006c88:	e11b      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PB;
 8006c8a:	4b4e      	ldr	r3, [pc, #312]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006c8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c90:	60da      	str	r2, [r3, #12]
			break;
 8006c92:	e116      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PB;
 8006c94:	4b4b      	ldr	r3, [pc, #300]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	611a      	str	r2, [r3, #16]
			break;
 8006c9a:	e112      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PB;
 8006c9c:	4b49      	ldr	r3, [pc, #292]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006c9e:	2210      	movs	r2, #16
 8006ca0:	611a      	str	r2, [r3, #16]
			break;
 8006ca2:	e10e      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PB;
 8006ca4:	4b47      	ldr	r3, [pc, #284]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006caa:	611a      	str	r2, [r3, #16]
			break;
 8006cac:	e109      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PB;
 8006cae:	4b45      	ldr	r3, [pc, #276]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006cb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cb4:	611a      	str	r2, [r3, #16]
			break;
 8006cb6:	e104      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PB;
 8006cb8:	4b42      	ldr	r3, [pc, #264]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	615a      	str	r2, [r3, #20]
			break;
 8006cbe:	e100      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PB;
 8006cc0:	4b40      	ldr	r3, [pc, #256]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	615a      	str	r2, [r3, #20]
			break;
 8006cc6:	e0fc      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PB;
 8006cc8:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cce:	615a      	str	r2, [r3, #20]
			break;
 8006cd0:	e0f7      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PB;
 8006cd2:	4b3c      	ldr	r3, [pc, #240]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cd8:	615a      	str	r2, [r3, #20]
			break;
 8006cda:	e0f2      	b.n	8006ec2 <gpio_IT_config+0x3be>
		}	// end of Port B
	} else if (port == GPIOC) {
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a3b      	ldr	r2, [pc, #236]	; (8006dcc <gpio_IT_config+0x2c8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d17a      	bne.n	8006dda <gpio_IT_config+0x2d6>
		switch (pinNumber) {
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b0f      	cmp	r3, #15
 8006ce8:	f200 80eb 	bhi.w	8006ec2 <gpio_IT_config+0x3be>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <gpio_IT_config+0x1f0>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d35 	.word	0x08006d35
 8006cf8:	08006d3d 	.word	0x08006d3d
 8006cfc:	08006d45 	.word	0x08006d45
 8006d00:	08006d4f 	.word	0x08006d4f
 8006d04:	08006d59 	.word	0x08006d59
 8006d08:	08006d61 	.word	0x08006d61
 8006d0c:	08006d69 	.word	0x08006d69
 8006d10:	08006d73 	.word	0x08006d73
 8006d14:	08006d7d 	.word	0x08006d7d
 8006d18:	08006d85 	.word	0x08006d85
 8006d1c:	08006d8d 	.word	0x08006d8d
 8006d20:	08006d97 	.word	0x08006d97
 8006d24:	08006da1 	.word	0x08006da1
 8006d28:	08006da9 	.word	0x08006da9
 8006d2c:	08006db1 	.word	0x08006db1
 8006d30:	08006dd1 	.word	0x08006dd1
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 8006d34:	4b23      	ldr	r3, [pc, #140]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d36:	2202      	movs	r2, #2
 8006d38:	609a      	str	r2, [r3, #8]
			break;
 8006d3a:	e0c2      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 8006d3c:	4b21      	ldr	r3, [pc, #132]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d3e:	2220      	movs	r2, #32
 8006d40:	609a      	str	r2, [r3, #8]
			break;
 8006d42:	e0be      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 8006d44:	4b1f      	ldr	r3, [pc, #124]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d4a:	609a      	str	r2, [r3, #8]
			break;
 8006d4c:	e0b9      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 8006d4e:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d54:	609a      	str	r2, [r3, #8]
			break;
 8006d56:	e0b4      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PC;
 8006d58:	4b1a      	ldr	r3, [pc, #104]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	60da      	str	r2, [r3, #12]
			break;
 8006d5e:	e0b0      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PC;
 8006d60:	4b18      	ldr	r3, [pc, #96]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d62:	2220      	movs	r2, #32
 8006d64:	60da      	str	r2, [r3, #12]
			break;
 8006d66:	e0ac      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PC;
 8006d68:	4b16      	ldr	r3, [pc, #88]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d6e:	60da      	str	r2, [r3, #12]
			break;
 8006d70:	e0a7      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PC;
 8006d72:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d78:	60da      	str	r2, [r3, #12]
			break;
 8006d7a:	e0a2      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PC;
 8006d7c:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d7e:	2202      	movs	r2, #2
 8006d80:	611a      	str	r2, [r3, #16]
			break;
 8006d82:	e09e      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PC;
 8006d84:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d86:	2220      	movs	r2, #32
 8006d88:	611a      	str	r2, [r3, #16]
			break;
 8006d8a:	e09a      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PC;
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d92:	611a      	str	r2, [r3, #16]
			break;
 8006d94:	e095      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PC;
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d9c:	611a      	str	r2, [r3, #16]
			break;
 8006d9e:	e090      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PC;
 8006da0:	4b08      	ldr	r3, [pc, #32]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006da2:	2202      	movs	r2, #2
 8006da4:	615a      	str	r2, [r3, #20]
			break;
 8006da6:	e08c      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PC;
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006daa:	2220      	movs	r2, #32
 8006dac:	615a      	str	r2, [r3, #20]
			break;
 8006dae:	e088      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PC;
 8006db0:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <gpio_IT_config+0x2c0>)
 8006db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006db6:	615a      	str	r2, [r3, #20]
			break;
 8006db8:	e083      	b.n	8006ec2 <gpio_IT_config+0x3be>
 8006dba:	bf00      	nop
 8006dbc:	40023800 	.word	0x40023800
 8006dc0:	40020000 	.word	0x40020000
 8006dc4:	40013800 	.word	0x40013800
 8006dc8:	40020400 	.word	0x40020400
 8006dcc:	40020800 	.word	0x40020800
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PC;
 8006dd0:	4b58      	ldr	r3, [pc, #352]	; (8006f34 <gpio_IT_config+0x430>)
 8006dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006dd6:	615a      	str	r2, [r3, #20]
			break;
 8006dd8:	e073      	b.n	8006ec2 <gpio_IT_config+0x3be>
		}	// end of Port C
	} else if (port == GPIOD) {
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4a56      	ldr	r2, [pc, #344]	; (8006f38 <gpio_IT_config+0x434>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d16e      	bne.n	8006ec0 <gpio_IT_config+0x3bc>
		switch (pinNumber) {
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b0f      	cmp	r3, #15
 8006de6:	d86c      	bhi.n	8006ec2 <gpio_IT_config+0x3be>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <gpio_IT_config+0x2ec>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e31 	.word	0x08006e31
 8006df4:	08006e39 	.word	0x08006e39
 8006df8:	08006e41 	.word	0x08006e41
 8006dfc:	08006e4b 	.word	0x08006e4b
 8006e00:	08006e55 	.word	0x08006e55
 8006e04:	08006e5d 	.word	0x08006e5d
 8006e08:	08006e65 	.word	0x08006e65
 8006e0c:	08006e6f 	.word	0x08006e6f
 8006e10:	08006e79 	.word	0x08006e79
 8006e14:	08006e81 	.word	0x08006e81
 8006e18:	08006e89 	.word	0x08006e89
 8006e1c:	08006e93 	.word	0x08006e93
 8006e20:	08006e9d 	.word	0x08006e9d
 8006e24:	08006ea5 	.word	0x08006ea5
 8006e28:	08006ead 	.word	0x08006ead
 8006e2c:	08006eb7 	.word	0x08006eb7
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 8006e30:	4b40      	ldr	r3, [pc, #256]	; (8006f34 <gpio_IT_config+0x430>)
 8006e32:	2203      	movs	r2, #3
 8006e34:	609a      	str	r2, [r3, #8]
			break;
 8006e36:	e044      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8006e38:	4b3e      	ldr	r3, [pc, #248]	; (8006f34 <gpio_IT_config+0x430>)
 8006e3a:	2230      	movs	r2, #48	; 0x30
 8006e3c:	609a      	str	r2, [r3, #8]
			break;
 8006e3e:	e040      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 8006e40:	4b3c      	ldr	r3, [pc, #240]	; (8006f34 <gpio_IT_config+0x430>)
 8006e42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006e46:	609a      	str	r2, [r3, #8]
			break;
 8006e48:	e03b      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 8006e4a:	4b3a      	ldr	r3, [pc, #232]	; (8006f34 <gpio_IT_config+0x430>)
 8006e4c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006e50:	609a      	str	r2, [r3, #8]
			break;
 8006e52:	e036      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PD;
 8006e54:	4b37      	ldr	r3, [pc, #220]	; (8006f34 <gpio_IT_config+0x430>)
 8006e56:	2203      	movs	r2, #3
 8006e58:	60da      	str	r2, [r3, #12]
			break;
 8006e5a:	e032      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PD;
 8006e5c:	4b35      	ldr	r3, [pc, #212]	; (8006f34 <gpio_IT_config+0x430>)
 8006e5e:	2230      	movs	r2, #48	; 0x30
 8006e60:	60da      	str	r2, [r3, #12]
			break;
 8006e62:	e02e      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PD;
 8006e64:	4b33      	ldr	r3, [pc, #204]	; (8006f34 <gpio_IT_config+0x430>)
 8006e66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006e6a:	60da      	str	r2, [r3, #12]
			break;
 8006e6c:	e029      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PD;
 8006e6e:	4b31      	ldr	r3, [pc, #196]	; (8006f34 <gpio_IT_config+0x430>)
 8006e70:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006e74:	60da      	str	r2, [r3, #12]
			break;
 8006e76:	e024      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PD;
 8006e78:	4b2e      	ldr	r3, [pc, #184]	; (8006f34 <gpio_IT_config+0x430>)
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	611a      	str	r2, [r3, #16]
			break;
 8006e7e:	e020      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PD;
 8006e80:	4b2c      	ldr	r3, [pc, #176]	; (8006f34 <gpio_IT_config+0x430>)
 8006e82:	2230      	movs	r2, #48	; 0x30
 8006e84:	611a      	str	r2, [r3, #16]
			break;
 8006e86:	e01c      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PD;
 8006e88:	4b2a      	ldr	r3, [pc, #168]	; (8006f34 <gpio_IT_config+0x430>)
 8006e8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006e8e:	611a      	str	r2, [r3, #16]
			break;
 8006e90:	e017      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PD;
 8006e92:	4b28      	ldr	r3, [pc, #160]	; (8006f34 <gpio_IT_config+0x430>)
 8006e94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006e98:	611a      	str	r2, [r3, #16]
			break;
 8006e9a:	e012      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PD;
 8006e9c:	4b25      	ldr	r3, [pc, #148]	; (8006f34 <gpio_IT_config+0x430>)
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	615a      	str	r2, [r3, #20]
			break;
 8006ea2:	e00e      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PD;
 8006ea4:	4b23      	ldr	r3, [pc, #140]	; (8006f34 <gpio_IT_config+0x430>)
 8006ea6:	2230      	movs	r2, #48	; 0x30
 8006ea8:	615a      	str	r2, [r3, #20]
			break;
 8006eaa:	e00a      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PD;
 8006eac:	4b21      	ldr	r3, [pc, #132]	; (8006f34 <gpio_IT_config+0x430>)
 8006eae:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006eb2:	615a      	str	r2, [r3, #20]
			break;
 8006eb4:	e005      	b.n	8006ec2 <gpio_IT_config+0x3be>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PD;
 8006eb6:	4b1f      	ldr	r3, [pc, #124]	; (8006f34 <gpio_IT_config+0x430>)
 8006eb8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006ebc:	615a      	str	r2, [r3, #20]
			break;
 8006ebe:	e000      	b.n	8006ec2 <gpio_IT_config+0x3be>
		}	// end of Port D
	}
 8006ec0:	bf00      	nop

	if (edge == RISING_EDGE) {
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <gpio_IT_config+0x3da>
		EXTI->RTSR |= 1 << pinNumber;
 8006ec8:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <gpio_IT_config+0x438>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2101      	movs	r1, #1
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	4a19      	ldr	r2, [pc, #100]	; (8006f3c <gpio_IT_config+0x438>)
 8006ed8:	430b      	orrs	r3, r1
 8006eda:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1 << pinNumber;
	} else if (edge == RISING_FALLING_EDGE) {
		EXTI->RTSR |= 1 << pinNumber;
		EXTI->FTSR |= 1 << pinNumber;
	}
}
 8006edc:	e024      	b.n	8006f28 <gpio_IT_config+0x424>
	} else if (edge == FALLING_EDGE) {
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d10a      	bne.n	8006efa <gpio_IT_config+0x3f6>
		EXTI->FTSR |= 1 << pinNumber;
 8006ee4:	4b15      	ldr	r3, [pc, #84]	; (8006f3c <gpio_IT_config+0x438>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2101      	movs	r1, #1
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	fa01 f202 	lsl.w	r2, r1, r2
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4a12      	ldr	r2, [pc, #72]	; (8006f3c <gpio_IT_config+0x438>)
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	60d3      	str	r3, [r2, #12]
}
 8006ef8:	e016      	b.n	8006f28 <gpio_IT_config+0x424>
	} else if (edge == RISING_FALLING_EDGE) {
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d113      	bne.n	8006f28 <gpio_IT_config+0x424>
		EXTI->RTSR |= 1 << pinNumber;
 8006f00:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <gpio_IT_config+0x438>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2101      	movs	r1, #1
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	fa01 f202 	lsl.w	r2, r1, r2
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	4a0b      	ldr	r2, [pc, #44]	; (8006f3c <gpio_IT_config+0x438>)
 8006f10:	430b      	orrs	r3, r1
 8006f12:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1 << pinNumber;
 8006f14:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <gpio_IT_config+0x438>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	2101      	movs	r1, #1
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f20:	4611      	mov	r1, r2
 8006f22:	4a06      	ldr	r2, [pc, #24]	; (8006f3c <gpio_IT_config+0x438>)
 8006f24:	430b      	orrs	r3, r1
 8006f26:	60d3      	str	r3, [r2, #12]
}
 8006f28:	bf00      	nop
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	40013800 	.word	0x40013800
 8006f38:	40020c00 	.word	0x40020c00
 8006f3c:	40013c00 	.word	0x40013c00

08006f40 <gpio_IT_EN>:

void gpio_IT_EN(uint8_t pinNumber, IRQn_Type irqNumber) {//Interrupt Enable Function
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	460a      	mov	r2, r1
 8006f4a:	71fb      	strb	r3, [r7, #7]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	71bb      	strb	r3, [r7, #6]
	EXTI->IMR |= 1 << pinNumber;	//enable interrupt in EXTI
 8006f50:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <gpio_IT_EN+0x38>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	79fa      	ldrb	r2, [r7, #7]
 8006f56:	2101      	movs	r1, #1
 8006f58:	fa01 f202 	lsl.w	r2, r1, r2
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4a06      	ldr	r2, [pc, #24]	; (8006f78 <gpio_IT_EN+0x38>)
 8006f60:	430b      	orrs	r3, r1
 8006f62:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irqNumber);		//enable interrupt in NVIC
 8006f64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fc67 	bl	800683c <__NVIC_EnableIRQ>
}
 8006f6e:	bf00      	nop
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	40013c00 	.word	0x40013c00

08006f7c <gpio_IT_CHK>:

void gpio_IT_SW(uint8_t pinNumber) {			//Interrupt Software generate
	EXTI->SWIER |= 1 << pinNumber;				//TODO: Not Done for now
}

uint8_t gpio_IT_CHK(uint8_t pinNumber) {			//Interrupt check function
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
	if ((EXTI->PR) & (1 << pinNumber)) {				//Check pending register
 8006f86:	4b09      	ldr	r3, [pc, #36]	; (8006fac <gpio_IT_CHK+0x30>)
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	79fa      	ldrb	r2, [r7, #7]
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8006f92:	4013      	ands	r3, r2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <gpio_IT_CHK+0x20>
		return 1;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e000      	b.n	8006f9e <gpio_IT_CHK+0x22>
	} else {
		return 0;
 8006f9c:	2300      	movs	r3, #0
	}
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40013c00 	.word	0x40013c00

08006fb0 <gpio_IT_CLR>:

void gpio_IT_CLR(uint8_t pinNumber) {				//Interrupt clear function
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
	EXTI->PR = 1 << pinNumber;		//clear pending register
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <gpio_IT_CLR+0x20>)
 8006fc2:	615a      	str	r2, [r3, #20]
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	40013c00 	.word	0x40013c00

08006fd4 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f818 	bl	8007018 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f842 	bl	800707c <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8006ff8:	69f9      	ldr	r1, [r7, #28]
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 f8d8 	bl	80071b0 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007008:	f043 030c 	orr.w	r3, r3, #12
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	60d3      	str	r3, [r2, #12]

}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a12      	ldr	r2, [pc, #72]	; (800706c <USART_CLK_EN+0x54>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d106      	bne.n	8007036 <USART_CLK_EN+0x1e>
		USART1_CLK_EN;
 8007028:	4b11      	ldr	r3, [pc, #68]	; (8007070 <USART_CLK_EN+0x58>)
 800702a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702c:	4a10      	ldr	r2, [pc, #64]	; (8007070 <USART_CLK_EN+0x58>)
 800702e:	f043 0310 	orr.w	r3, r3, #16
 8007032:	6453      	str	r3, [r2, #68]	; 0x44
	} else if (usart == USART2) {
		USART2_CLK_EN;
	} else if (usart == USART6) {
		USART6_CLK_EN;
	}
}
 8007034:	e014      	b.n	8007060 <USART_CLK_EN+0x48>
	} else if (usart == USART2) {
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a0e      	ldr	r2, [pc, #56]	; (8007074 <USART_CLK_EN+0x5c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d106      	bne.n	800704c <USART_CLK_EN+0x34>
		USART2_CLK_EN;
 800703e:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <USART_CLK_EN+0x58>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	4a0b      	ldr	r2, [pc, #44]	; (8007070 <USART_CLK_EN+0x58>)
 8007044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007048:	6413      	str	r3, [r2, #64]	; 0x40
}
 800704a:	e009      	b.n	8007060 <USART_CLK_EN+0x48>
	} else if (usart == USART6) {
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <USART_CLK_EN+0x60>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d105      	bne.n	8007060 <USART_CLK_EN+0x48>
		USART6_CLK_EN;
 8007054:	4b06      	ldr	r3, [pc, #24]	; (8007070 <USART_CLK_EN+0x58>)
 8007056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007058:	4a05      	ldr	r2, [pc, #20]	; (8007070 <USART_CLK_EN+0x58>)
 800705a:	f043 0320 	orr.w	r3, r3, #32
 800705e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	40011000 	.word	0x40011000
 8007070:	40023800 	.word	0x40023800
 8007074:	40004400 	.word	0x40004400
 8007078:	40011400 	.word	0x40011400

0800707c <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af02      	add	r7, sp, #8
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800708a:	2300      	movs	r3, #0
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	2300      	movs	r3, #0
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	2302      	movs	r3, #2
 8007094:	2202      	movs	r2, #2
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	68b8      	ldr	r0, [r7, #8]
 800709a:	f7ff fc33 	bl	8006904 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800709e:	2300      	movs	r3, #0
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	2300      	movs	r3, #0
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	2302      	movs	r3, #2
 80070a8:	2202      	movs	r2, #2
 80070aa:	69b9      	ldr	r1, [r7, #24]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff fc29 	bl	8006904 <gpio_config>

	if (usart == USART1) {
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a39      	ldr	r2, [pc, #228]	; (800719c <USART_PIN_CONFIG+0x120>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d118      	bne.n	80070ec <USART_PIN_CONFIG+0x70>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4a38      	ldr	r2, [pc, #224]	; (80071a0 <USART_PIN_CONFIG+0x124>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d107      	bne.n	80070d2 <USART_PIN_CONFIG+0x56>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b09      	cmp	r3, #9
 80070c6:	d104      	bne.n	80070d2 <USART_PIN_CONFIG+0x56>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 80070c8:	2207      	movs	r2, #7
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	68b8      	ldr	r0, [r7, #8]
 80070ce:	f7ff fcd4 	bl	8006a7a <gpio_altfn>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
//			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a32      	ldr	r2, [pc, #200]	; (80071a0 <USART_PIN_CONFIG+0x124>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d15b      	bne.n	8007192 <USART_PIN_CONFIG+0x116>
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	2b0a      	cmp	r3, #10
 80070de:	d158      	bne.n	8007192 <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 80070e0:	2207      	movs	r2, #7
 80070e2:	69b9      	ldr	r1, [r7, #24]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff fcc8 	bl	8006a7a <gpio_altfn>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PA12);
		} else if (rx_port == PORTC && rx_pinNumber == 7) {
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PC7);
		}
	}
}
 80070ea:	e052      	b.n	8007192 <USART_PIN_CONFIG+0x116>
	} else if (usart == USART2) {
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <USART_PIN_CONFIG+0x128>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d118      	bne.n	8007126 <USART_PIN_CONFIG+0xaa>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4a2a      	ldr	r2, [pc, #168]	; (80071a0 <USART_PIN_CONFIG+0x124>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d107      	bne.n	800710c <USART_PIN_CONFIG+0x90>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d104      	bne.n	800710c <USART_PIN_CONFIG+0x90>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 8007102:	2207      	movs	r2, #7
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	68b8      	ldr	r0, [r7, #8]
 8007108:	f7ff fcb7 	bl	8006a7a <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a24      	ldr	r2, [pc, #144]	; (80071a0 <USART_PIN_CONFIG+0x124>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d13e      	bne.n	8007192 <USART_PIN_CONFIG+0x116>
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2b03      	cmp	r3, #3
 8007118:	d13b      	bne.n	8007192 <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 800711a:	2207      	movs	r2, #7
 800711c:	69b9      	ldr	r1, [r7, #24]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff fcab 	bl	8006a7a <gpio_altfn>
}
 8007124:	e035      	b.n	8007192 <USART_PIN_CONFIG+0x116>
	} else if (usart == USART6) {
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a1f      	ldr	r2, [pc, #124]	; (80071a8 <USART_PIN_CONFIG+0x12c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d131      	bne.n	8007192 <USART_PIN_CONFIG+0x116>
		if (tx_port == PORTA && tx_pinNumber == 11) {
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4a1b      	ldr	r2, [pc, #108]	; (80071a0 <USART_PIN_CONFIG+0x124>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d108      	bne.n	8007148 <USART_PIN_CONFIG+0xcc>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b0b      	cmp	r3, #11
 800713a:	d105      	bne.n	8007148 <USART_PIN_CONFIG+0xcc>
			gpio_altfn(tx_port, tx_pinNumber, USART6_TX_PA11);
 800713c:	2208      	movs	r2, #8
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	68b8      	ldr	r0, [r7, #8]
 8007142:	f7ff fc9a 	bl	8006a7a <gpio_altfn>
 8007146:	e00b      	b.n	8007160 <USART_PIN_CONFIG+0xe4>
		} else if (tx_port == PORTC && tx_pinNumber == 6) {
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4a18      	ldr	r2, [pc, #96]	; (80071ac <USART_PIN_CONFIG+0x130>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d107      	bne.n	8007160 <USART_PIN_CONFIG+0xe4>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b06      	cmp	r3, #6
 8007154:	d104      	bne.n	8007160 <USART_PIN_CONFIG+0xe4>
			gpio_altfn(tx_port, tx_pinNumber, USART6_TX_PC6);
 8007156:	2208      	movs	r2, #8
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	68b8      	ldr	r0, [r7, #8]
 800715c:	f7ff fc8d 	bl	8006a7a <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 12) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a0f      	ldr	r2, [pc, #60]	; (80071a0 <USART_PIN_CONFIG+0x124>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d108      	bne.n	800717a <USART_PIN_CONFIG+0xfe>
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b0c      	cmp	r3, #12
 800716c:	d105      	bne.n	800717a <USART_PIN_CONFIG+0xfe>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PA12);
 800716e:	2208      	movs	r2, #8
 8007170:	69b9      	ldr	r1, [r7, #24]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff fc81 	bl	8006a7a <gpio_altfn>
}
 8007178:	e00b      	b.n	8007192 <USART_PIN_CONFIG+0x116>
		} else if (rx_port == PORTC && rx_pinNumber == 7) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a0b      	ldr	r2, [pc, #44]	; (80071ac <USART_PIN_CONFIG+0x130>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d107      	bne.n	8007192 <USART_PIN_CONFIG+0x116>
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b07      	cmp	r3, #7
 8007186:	d104      	bne.n	8007192 <USART_PIN_CONFIG+0x116>
			gpio_altfn(rx_port, rx_pinNumber, USART6_RX_PC7);
 8007188:	2208      	movs	r2, #8
 800718a:	69b9      	ldr	r1, [r7, #24]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fc74 	bl	8006a7a <gpio_altfn>
}
 8007192:	bf00      	nop
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40011000 	.word	0x40011000
 80071a0:	40020000 	.word	0x40020000
 80071a4:	40004400 	.word	0x40004400
 80071a8:	40011400 	.word	0x40011400
 80071ac:	40020800 	.word	0x40020800

080071b0 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 80071ba:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <USART_BDR_SEL+0x48>)
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c4:	60fb      	str	r3, [r7, #12]
	if(usart == USART2){
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a0c      	ldr	r2, [pc, #48]	; (80071fc <USART_BDR_SEL+0x4c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d107      	bne.n	80071de <USART_BDR_SEL+0x2e>
		usart->BRR |= baud / 2;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689a      	ldr	r2, [r3, #8]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	085b      	lsrs	r3, r3, #1
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	609a      	str	r2, [r3, #8]
	}
	else{
		usart->BRR |= baud;
	}

}
 80071dc:	e005      	b.n	80071ea <USART_BDR_SEL+0x3a>
		usart->BRR |= baud;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689a      	ldr	r2, [r3, #8]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	609a      	str	r2, [r3, #8]
}
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	20000014 	.word	0x20000014
 80071fc:	40004400 	.word	0x40004400

08007200 <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 800720e:	887b      	ldrh	r3, [r7, #2]
 8007210:	82bb      	strh	r3, [r7, #20]
	for (uint16_t i = 0; i < len; i++) {
 8007212:	2300      	movs	r3, #0
 8007214:	82fb      	strh	r3, [r7, #22]
 8007216:	e017      	b.n	8007248 <USART_WRITE+0x48>
		if (len == 1) {
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d103      	bne.n	8007226 <USART_WRITE+0x26>
			usart->DR = ch;
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	605a      	str	r2, [r3, #4]
 8007224:	e006      	b.n	8007234 <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 8007226:	8afb      	ldrh	r3, [r7, #22]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	4413      	add	r3, r2
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 8007234:	bf00      	nop
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0f9      	beq.n	8007236 <USART_WRITE+0x36>
	for (uint16_t i = 0; i < len; i++) {
 8007242:	8afb      	ldrh	r3, [r7, #22]
 8007244:	3301      	adds	r3, #1
 8007246:	82fb      	strh	r3, [r7, #22]
 8007248:	8afb      	ldrh	r3, [r7, #22]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	429a      	cmp	r2, r3
 800724e:	d8e3      	bhi.n	8007218 <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <print>:
//}


//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8007260:	b40f      	push	{r0, r1, r2, r3}
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8007268:	f107 0314 	add.w	r3, r7, #20
 800726c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007276:	480a      	ldr	r0, [pc, #40]	; (80072a0 <print+0x40>)
 8007278:	f006 f998 	bl	800d5ac <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 800727c:	4808      	ldr	r0, [pc, #32]	; (80072a0 <print+0x40>)
 800727e:	f7f8 ffaf 	bl	80001e0 <strlen>
 8007282:	4603      	mov	r3, r0
 8007284:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 8007286:	88fa      	ldrh	r2, [r7, #6]
 8007288:	2364      	movs	r3, #100	; 0x64
 800728a:	4905      	ldr	r1, [pc, #20]	; (80072a0 <print+0x40>)
 800728c:	4805      	ldr	r0, [pc, #20]	; (80072a4 <print+0x44>)
 800728e:	f7ff ffb7 	bl	8007200 <USART_WRITE>

}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800729c:	b004      	add	sp, #16
 800729e:	4770      	bx	lr
 80072a0:	200004b8 	.word	0x200004b8
 80072a4:	40004400 	.word	0x40004400

080072a8 <uart_print_config>:
	USART_WRITE(UART_TYPE, buffer, len, 100);
	USART_WRITE(UART_TYPE, '\n', 1, 100);

}

void uart_print_config(uint32_t baudRate) {
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	2303      	movs	r3, #3
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	2302      	movs	r3, #2
 80072ba:	4a04      	ldr	r2, [pc, #16]	; (80072cc <uart_print_config+0x24>)
 80072bc:	4903      	ldr	r1, [pc, #12]	; (80072cc <uart_print_config+0x24>)
 80072be:	4804      	ldr	r0, [pc, #16]	; (80072d0 <uart_print_config+0x28>)
 80072c0:	f7ff fe88 	bl	8006fd4 <USART_INIT>
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40020000 	.word	0x40020000
 80072d0:	40004400 	.word	0x40004400

080072d4 <HMS_bgdisplay>:
int graph_x = graph_x0;
int graph_y = 0;
int graph_y_prevVal = 0;
int graph_refresh_x = graph_x0;

void HMS_bgdisplay(void) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0

	LCD_SetTextColor(WHITE, RED);
 80072d8:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80072dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80072e0:	f002 fd78 	bl	8009dd4 <LCD_SetTextColor>
	LCD_SetTextSize(2);
 80072e4:	2002      	movs	r0, #2
 80072e6:	f002 fd5f 	bl	8009da8 <LCD_SetTextSize>
	LCD_SetCursor(38, 70);
 80072ea:	2146      	movs	r1, #70	; 0x46
 80072ec:	2026      	movs	r0, #38	; 0x26
 80072ee:	f002 fd43 	bl	8009d78 <LCD_SetCursor>
	LCD_Printf("__");
 80072f2:	4827      	ldr	r0, [pc, #156]	; (8007390 <HMS_bgdisplay+0xbc>)
 80072f4:	f002 fc58 	bl	8009ba8 <LCD_Printf>

	LCD_SetTextColor(WHITE, LCD_Color565(16, 220, 21));
 80072f8:	2215      	movs	r2, #21
 80072fa:	21dc      	movs	r1, #220	; 0xdc
 80072fc:	2010      	movs	r0, #16
 80072fe:	f001 ffc3 	bl	8009288 <LCD_Color565>
 8007302:	4603      	mov	r3, r0
 8007304:	b29b      	uxth	r3, r3
 8007306:	4619      	mov	r1, r3
 8007308:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800730c:	f002 fd62 	bl	8009dd4 <LCD_SetTextColor>
	LCD_SetTextSize(2);
 8007310:	2002      	movs	r0, #2
 8007312:	f002 fd49 	bl	8009da8 <LCD_SetTextSize>
	LCD_SetCursor(160, 70);
 8007316:	2146      	movs	r1, #70	; 0x46
 8007318:	20a0      	movs	r0, #160	; 0xa0
 800731a:	f002 fd2d 	bl	8009d78 <LCD_SetCursor>
	LCD_Printf("__");
 800731e:	481c      	ldr	r0, [pc, #112]	; (8007390 <HMS_bgdisplay+0xbc>)
 8007320:	f002 fc42 	bl	8009ba8 <LCD_Printf>

	LCD_SetTextColor(WHITE, LCD_Color565(30, 35, 247));
 8007324:	22f7      	movs	r2, #247	; 0xf7
 8007326:	2123      	movs	r1, #35	; 0x23
 8007328:	201e      	movs	r0, #30
 800732a:	f001 ffad 	bl	8009288 <LCD_Color565>
 800732e:	4603      	mov	r3, r0
 8007330:	b29b      	uxth	r3, r3
 8007332:	4619      	mov	r1, r3
 8007334:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007338:	f002 fd4c 	bl	8009dd4 <LCD_SetTextColor>
	LCD_SetTextSize(2);
 800733c:	2002      	movs	r0, #2
 800733e:	f002 fd33 	bl	8009da8 <LCD_SetTextSize>
	LCD_SetCursor(30, 145);
 8007342:	2191      	movs	r1, #145	; 0x91
 8007344:	201e      	movs	r0, #30
 8007346:	f002 fd17 	bl	8009d78 <LCD_SetCursor>
	LCD_Printf("__");
 800734a:	4811      	ldr	r0, [pc, #68]	; (8007390 <HMS_bgdisplay+0xbc>)
 800734c:	f002 fc2c 	bl	8009ba8 <LCD_Printf>

	LCD_SetTextColor(BLACK, WHITE);
 8007350:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007354:	2000      	movs	r0, #0
 8007356:	f002 fd3d 	bl	8009dd4 <LCD_SetTextColor>
	LCD_SetTextSize(2);
 800735a:	2002      	movs	r0, #2
 800735c:	f002 fd24 	bl	8009da8 <LCD_SetTextSize>
	LCD_SetCursor(145, 130);
 8007360:	2182      	movs	r1, #130	; 0x82
 8007362:	2091      	movs	r0, #145	; 0x91
 8007364:	f002 fd08 	bl	8009d78 <LCD_SetCursor>
	LCD_Printf("__");
 8007368:	4809      	ldr	r0, [pc, #36]	; (8007390 <HMS_bgdisplay+0xbc>)
 800736a:	f002 fc1d 	bl	8009ba8 <LCD_Printf>

	LCD_SetTextColor(BLACK, WHITE);
 800736e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007372:	2000      	movs	r0, #0
 8007374:	f002 fd2e 	bl	8009dd4 <LCD_SetTextColor>
	LCD_SetTextSize(2);
 8007378:	2002      	movs	r0, #2
 800737a:	f002 fd15 	bl	8009da8 <LCD_SetTextSize>
	LCD_SetCursor(145, 170);
 800737e:	21aa      	movs	r1, #170	; 0xaa
 8007380:	2091      	movs	r0, #145	; 0x91
 8007382:	f002 fcf9 	bl	8009d78 <LCD_SetCursor>
	LCD_Printf("__");
 8007386:	4802      	ldr	r0, [pc, #8]	; (8007390 <HMS_bgdisplay+0xbc>)
 8007388:	f002 fc0e 	bl	8009ba8 <LCD_Printf>

}
 800738c:	bf00      	nop
 800738e:	bd80      	pop	{r7, pc}
 8007390:	0801003c 	.word	0x0801003c

08007394 <ecgPeak>:

void ecgPeak() {
 8007394:	b590      	push	{r4, r7, lr}
 8007396:	b083      	sub	sp, #12
 8007398:	af02      	add	r7, sp, #8
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800739a:	4b9b      	ldr	r3, [pc, #620]	; (8007608 <ecgPeak+0x274>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	b218      	sxth	r0, r3
 80073a0:	23f2      	movs	r3, #242	; 0xf2
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	3319      	adds	r3, #25
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	b219      	sxth	r1, r3
 80073aa:	4b97      	ldr	r3, [pc, #604]	; (8007608 <ecgPeak+0x274>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3302      	adds	r3, #2
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 80073b6:	23f2      	movs	r3, #242	; 0xf2
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3319      	adds	r3, #25
 80073bc:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80073be:	b21b      	sxth	r3, r3
 80073c0:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80073c4:	9400      	str	r4, [sp, #0]
 80073c6:	f001 ffed 	bl	80093a4 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80073ca:	4b8f      	ldr	r3, [pc, #572]	; (8007608 <ecgPeak+0x274>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	b218      	sxth	r0, r3
 80073d0:	23f2      	movs	r3, #242	; 0xf2
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	331a      	adds	r3, #26
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	b219      	sxth	r1, r3
 80073da:	4b8b      	ldr	r3, [pc, #556]	; (8007608 <ecgPeak+0x274>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3302      	adds	r3, #2
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 80073e6:	23f2      	movs	r3, #242	; 0xf2
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	331a      	adds	r3, #26
 80073ec:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80073ee:	b21b      	sxth	r3, r3
 80073f0:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80073f4:	9400      	str	r4, [sp, #0]
 80073f6:	f001 ffd5 	bl	80093a4 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 80073fa:	4b83      	ldr	r3, [pc, #524]	; (8007608 <ecgPeak+0x274>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3302      	adds	r3, #2
 8007400:	4a81      	ldr	r2, [pc, #516]	; (8007608 <ecgPeak+0x274>)
 8007402:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007404:	4b80      	ldr	r3, [pc, #512]	; (8007608 <ecgPeak+0x274>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	b218      	sxth	r0, r3
 800740a:	23f2      	movs	r3, #242	; 0xf2
 800740c:	b29b      	uxth	r3, r3
 800740e:	3319      	adds	r3, #25
 8007410:	b29b      	uxth	r3, r3
 8007412:	b219      	sxth	r1, r3
 8007414:	4b7c      	ldr	r3, [pc, #496]	; (8007608 <ecgPeak+0x274>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	b29b      	uxth	r3, r3
 800741a:	3302      	adds	r3, #2
 800741c:	b29b      	uxth	r3, r3
 800741e:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8007420:	23f2      	movs	r3, #242	; 0xf2
 8007422:	b29b      	uxth	r3, r3
 8007424:	3319      	adds	r3, #25
 8007426:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007428:	b21b      	sxth	r3, r3
 800742a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800742e:	9400      	str	r4, [sp, #0]
 8007430:	f001 ffb8 	bl	80093a4 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007434:	4b74      	ldr	r3, [pc, #464]	; (8007608 <ecgPeak+0x274>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	b218      	sxth	r0, r3
 800743a:	23f2      	movs	r3, #242	; 0xf2
 800743c:	b29b      	uxth	r3, r3
 800743e:	331a      	adds	r3, #26
 8007440:	b29b      	uxth	r3, r3
 8007442:	b219      	sxth	r1, r3
 8007444:	4b70      	ldr	r3, [pc, #448]	; (8007608 <ecgPeak+0x274>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	3302      	adds	r3, #2
 800744c:	b29b      	uxth	r3, r3
 800744e:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8007450:	23f2      	movs	r3, #242	; 0xf2
 8007452:	b29b      	uxth	r3, r3
 8007454:	331a      	adds	r3, #26
 8007456:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007458:	b21b      	sxth	r3, r3
 800745a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800745e:	9400      	str	r4, [sp, #0]
 8007460:	f001 ffa0 	bl	80093a4 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8007464:	4b68      	ldr	r3, [pc, #416]	; (8007608 <ecgPeak+0x274>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3302      	adds	r3, #2
 800746a:	4a67      	ldr	r2, [pc, #412]	; (8007608 <ecgPeak+0x274>)
 800746c:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800746e:	4b66      	ldr	r3, [pc, #408]	; (8007608 <ecgPeak+0x274>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	b218      	sxth	r0, r3
 8007474:	23f2      	movs	r3, #242	; 0xf2
 8007476:	b29b      	uxth	r3, r3
 8007478:	3319      	adds	r3, #25
 800747a:	b29b      	uxth	r3, r3
 800747c:	b219      	sxth	r1, r3
 800747e:	4b62      	ldr	r3, [pc, #392]	; (8007608 <ecgPeak+0x274>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	3302      	adds	r3, #2
 8007486:	b29b      	uxth	r3, r3
 8007488:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 800748a:	23f2      	movs	r3, #242	; 0xf2
 800748c:	b29b      	uxth	r3, r3
 800748e:	3319      	adds	r3, #25
 8007490:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007492:	b21b      	sxth	r3, r3
 8007494:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007498:	9400      	str	r4, [sp, #0]
 800749a:	f001 ff83 	bl	80093a4 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800749e:	4b5a      	ldr	r3, [pc, #360]	; (8007608 <ecgPeak+0x274>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	b218      	sxth	r0, r3
 80074a4:	23f2      	movs	r3, #242	; 0xf2
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	331a      	adds	r3, #26
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	b219      	sxth	r1, r3
 80074ae:	4b56      	ldr	r3, [pc, #344]	; (8007608 <ecgPeak+0x274>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3302      	adds	r3, #2
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 80074ba:	23f2      	movs	r3, #242	; 0xf2
 80074bc:	b29b      	uxth	r3, r3
 80074be:	331a      	adds	r3, #26
 80074c0:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80074c2:	b21b      	sxth	r3, r3
 80074c4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80074c8:	9400      	str	r4, [sp, #0]
 80074ca:	f001 ff6b 	bl	80093a4 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 80074ce:	4b4e      	ldr	r3, [pc, #312]	; (8007608 <ecgPeak+0x274>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3302      	adds	r3, #2
 80074d4:	4a4c      	ldr	r2, [pc, #304]	; (8007608 <ecgPeak+0x274>)
 80074d6:	6013      	str	r3, [r2, #0]

	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80074d8:	4b4b      	ldr	r3, [pc, #300]	; (8007608 <ecgPeak+0x274>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	b218      	sxth	r0, r3
 80074de:	23f2      	movs	r3, #242	; 0xf2
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3319      	adds	r3, #25
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	b219      	sxth	r1, r3
 80074e8:	4b47      	ldr	r3, [pc, #284]	; (8007608 <ecgPeak+0x274>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3302      	adds	r3, #2
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	b21a      	sxth	r2, r3
			graph_y0 + 40, RED);
 80074f4:	23f2      	movs	r3, #242	; 0xf2
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	3328      	adds	r3, #40	; 0x28
 80074fa:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80074fc:	b21b      	sxth	r3, r3
 80074fe:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007502:	9400      	str	r4, [sp, #0]
 8007504:	f001 ff4e 	bl	80093a4 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007508:	4b3f      	ldr	r3, [pc, #252]	; (8007608 <ecgPeak+0x274>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	b218      	sxth	r0, r3
 800750e:	23f2      	movs	r3, #242	; 0xf2
 8007510:	b29b      	uxth	r3, r3
 8007512:	331a      	adds	r3, #26
 8007514:	b29b      	uxth	r3, r3
 8007516:	b219      	sxth	r1, r3
 8007518:	4b3b      	ldr	r3, [pc, #236]	; (8007608 <ecgPeak+0x274>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	3302      	adds	r3, #2
 8007520:	b29b      	uxth	r3, r3
 8007522:	b21a      	sxth	r2, r3
			graph_y0 + 41, RED);
 8007524:	23f2      	movs	r3, #242	; 0xf2
 8007526:	b29b      	uxth	r3, r3
 8007528:	3329      	adds	r3, #41	; 0x29
 800752a:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800752c:	b21b      	sxth	r3, r3
 800752e:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007532:	9400      	str	r4, [sp, #0]
 8007534:	f001 ff36 	bl	80093a4 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8007538:	4b33      	ldr	r3, [pc, #204]	; (8007608 <ecgPeak+0x274>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3302      	adds	r3, #2
 800753e:	4a32      	ldr	r2, [pc, #200]	; (8007608 <ecgPeak+0x274>)
 8007540:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 40, graph_x + graphRefreshRate_peak,
 8007542:	4b31      	ldr	r3, [pc, #196]	; (8007608 <ecgPeak+0x274>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	b218      	sxth	r0, r3
 8007548:	23f2      	movs	r3, #242	; 0xf2
 800754a:	b29b      	uxth	r3, r3
 800754c:	3328      	adds	r3, #40	; 0x28
 800754e:	b29b      	uxth	r3, r3
 8007550:	b219      	sxth	r1, r3
 8007552:	4b2d      	ldr	r3, [pc, #180]	; (8007608 <ecgPeak+0x274>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	3302      	adds	r3, #2
 800755a:	b29b      	uxth	r3, r3
 800755c:	b21a      	sxth	r2, r3
 800755e:	23f2      	movs	r3, #242	; 0xf2
 8007560:	b21b      	sxth	r3, r3
 8007562:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007566:	9400      	str	r4, [sp, #0]
 8007568:	f001 ff1c 	bl	80093a4 <LCD_DrawLine>
			graph_y0, RED);
	LCD_DrawLine(graph_x, graph_y0 + 41, graph_x + graphRefreshRate_peak,
 800756c:	4b26      	ldr	r3, [pc, #152]	; (8007608 <ecgPeak+0x274>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	b218      	sxth	r0, r3
 8007572:	23f2      	movs	r3, #242	; 0xf2
 8007574:	b29b      	uxth	r3, r3
 8007576:	3329      	adds	r3, #41	; 0x29
 8007578:	b29b      	uxth	r3, r3
 800757a:	b219      	sxth	r1, r3
 800757c:	4b22      	ldr	r3, [pc, #136]	; (8007608 <ecgPeak+0x274>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	3302      	adds	r3, #2
 8007584:	b29b      	uxth	r3, r3
 8007586:	b21a      	sxth	r2, r3
			graph_y0 + 1, RED);
 8007588:	23f2      	movs	r3, #242	; 0xf2
 800758a:	b29b      	uxth	r3, r3
 800758c:	3301      	adds	r3, #1
 800758e:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 41, graph_x + graphRefreshRate_peak,
 8007590:	b21b      	sxth	r3, r3
 8007592:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007596:	9400      	str	r4, [sp, #0]
 8007598:	f001 ff04 	bl	80093a4 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 800759c:	4b1a      	ldr	r3, [pc, #104]	; (8007608 <ecgPeak+0x274>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3302      	adds	r3, #2
 80075a2:	4a19      	ldr	r2, [pc, #100]	; (8007608 <ecgPeak+0x274>)
 80075a4:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0, graph_x + graphRefreshRate_peak,
 80075a6:	4b18      	ldr	r3, [pc, #96]	; (8007608 <ecgPeak+0x274>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	b218      	sxth	r0, r3
 80075ac:	23f2      	movs	r3, #242	; 0xf2
 80075ae:	b219      	sxth	r1, r3
 80075b0:	4b15      	ldr	r3, [pc, #84]	; (8007608 <ecgPeak+0x274>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	3302      	adds	r3, #2
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 80075bc:	23f2      	movs	r3, #242	; 0xf2
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3319      	adds	r3, #25
 80075c2:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0, graph_x + graphRefreshRate_peak,
 80075c4:	b21b      	sxth	r3, r3
 80075c6:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80075ca:	9400      	str	r4, [sp, #0]
 80075cc:	f001 feea 	bl	80093a4 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 1, graph_x + graphRefreshRate_peak,
 80075d0:	4b0d      	ldr	r3, [pc, #52]	; (8007608 <ecgPeak+0x274>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	b218      	sxth	r0, r3
 80075d6:	23f2      	movs	r3, #242	; 0xf2
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3301      	adds	r3, #1
 80075dc:	b29b      	uxth	r3, r3
 80075de:	b219      	sxth	r1, r3
 80075e0:	4b09      	ldr	r3, [pc, #36]	; (8007608 <ecgPeak+0x274>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3302      	adds	r3, #2
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 80075ec:	23f2      	movs	r3, #242	; 0xf2
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	331a      	adds	r3, #26
 80075f2:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 1, graph_x + graphRefreshRate_peak,
 80075f4:	b21b      	sxth	r3, r3
 80075f6:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80075fa:	9400      	str	r4, [sp, #0]
 80075fc:	f001 fed2 	bl	80093a4 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8007600:	4b01      	ldr	r3, [pc, #4]	; (8007608 <ecgPeak+0x274>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3302      	adds	r3, #2
 8007606:	e001      	b.n	800760c <ecgPeak+0x278>
 8007608:	20000078 	.word	0x20000078
 800760c:	4a4f      	ldr	r2, [pc, #316]	; (800774c <ecgPeak+0x3b8>)
 800760e:	6013      	str	r3, [r2, #0]

	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007610:	4b4e      	ldr	r3, [pc, #312]	; (800774c <ecgPeak+0x3b8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	b218      	sxth	r0, r3
 8007616:	23f2      	movs	r3, #242	; 0xf2
 8007618:	b29b      	uxth	r3, r3
 800761a:	3319      	adds	r3, #25
 800761c:	b29b      	uxth	r3, r3
 800761e:	b219      	sxth	r1, r3
 8007620:	4b4a      	ldr	r3, [pc, #296]	; (800774c <ecgPeak+0x3b8>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	3302      	adds	r3, #2
 8007628:	b29b      	uxth	r3, r3
 800762a:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 800762c:	23f2      	movs	r3, #242	; 0xf2
 800762e:	b29b      	uxth	r3, r3
 8007630:	3319      	adds	r3, #25
 8007632:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007634:	b21b      	sxth	r3, r3
 8007636:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800763a:	9400      	str	r4, [sp, #0]
 800763c:	f001 feb2 	bl	80093a4 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007640:	4b42      	ldr	r3, [pc, #264]	; (800774c <ecgPeak+0x3b8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	b218      	sxth	r0, r3
 8007646:	23f2      	movs	r3, #242	; 0xf2
 8007648:	b29b      	uxth	r3, r3
 800764a:	331a      	adds	r3, #26
 800764c:	b29b      	uxth	r3, r3
 800764e:	b219      	sxth	r1, r3
 8007650:	4b3e      	ldr	r3, [pc, #248]	; (800774c <ecgPeak+0x3b8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	3302      	adds	r3, #2
 8007658:	b29b      	uxth	r3, r3
 800765a:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 800765c:	23f2      	movs	r3, #242	; 0xf2
 800765e:	b29b      	uxth	r3, r3
 8007660:	331a      	adds	r3, #26
 8007662:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007664:	b21b      	sxth	r3, r3
 8007666:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800766a:	9400      	str	r4, [sp, #0]
 800766c:	f001 fe9a 	bl	80093a4 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8007670:	4b36      	ldr	r3, [pc, #216]	; (800774c <ecgPeak+0x3b8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3302      	adds	r3, #2
 8007676:	4a35      	ldr	r2, [pc, #212]	; (800774c <ecgPeak+0x3b8>)
 8007678:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800767a:	4b34      	ldr	r3, [pc, #208]	; (800774c <ecgPeak+0x3b8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	b218      	sxth	r0, r3
 8007680:	23f2      	movs	r3, #242	; 0xf2
 8007682:	b29b      	uxth	r3, r3
 8007684:	3319      	adds	r3, #25
 8007686:	b29b      	uxth	r3, r3
 8007688:	b219      	sxth	r1, r3
 800768a:	4b30      	ldr	r3, [pc, #192]	; (800774c <ecgPeak+0x3b8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	3302      	adds	r3, #2
 8007692:	b29b      	uxth	r3, r3
 8007694:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8007696:	23f2      	movs	r3, #242	; 0xf2
 8007698:	b29b      	uxth	r3, r3
 800769a:	3319      	adds	r3, #25
 800769c:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800769e:	b21b      	sxth	r3, r3
 80076a0:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80076a4:	9400      	str	r4, [sp, #0]
 80076a6:	f001 fe7d 	bl	80093a4 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80076aa:	4b28      	ldr	r3, [pc, #160]	; (800774c <ecgPeak+0x3b8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	b218      	sxth	r0, r3
 80076b0:	23f2      	movs	r3, #242	; 0xf2
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	331a      	adds	r3, #26
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	b219      	sxth	r1, r3
 80076ba:	4b24      	ldr	r3, [pc, #144]	; (800774c <ecgPeak+0x3b8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3302      	adds	r3, #2
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 80076c6:	23f2      	movs	r3, #242	; 0xf2
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	331a      	adds	r3, #26
 80076cc:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80076ce:	b21b      	sxth	r3, r3
 80076d0:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80076d4:	9400      	str	r4, [sp, #0]
 80076d6:	f001 fe65 	bl	80093a4 <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 80076da:	4b1c      	ldr	r3, [pc, #112]	; (800774c <ecgPeak+0x3b8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3302      	adds	r3, #2
 80076e0:	4a1a      	ldr	r2, [pc, #104]	; (800774c <ecgPeak+0x3b8>)
 80076e2:	6013      	str	r3, [r2, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80076e4:	4b19      	ldr	r3, [pc, #100]	; (800774c <ecgPeak+0x3b8>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	b218      	sxth	r0, r3
 80076ea:	23f2      	movs	r3, #242	; 0xf2
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	3319      	adds	r3, #25
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	b219      	sxth	r1, r3
 80076f4:	4b15      	ldr	r3, [pc, #84]	; (800774c <ecgPeak+0x3b8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	3302      	adds	r3, #2
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8007700:	23f2      	movs	r3, #242	; 0xf2
 8007702:	b29b      	uxth	r3, r3
 8007704:	3319      	adds	r3, #25
 8007706:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007708:	b21b      	sxth	r3, r3
 800770a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800770e:	9400      	str	r4, [sp, #0]
 8007710:	f001 fe48 	bl	80093a4 <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <ecgPeak+0x3b8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	b218      	sxth	r0, r3
 800771a:	23f2      	movs	r3, #242	; 0xf2
 800771c:	b29b      	uxth	r3, r3
 800771e:	331a      	adds	r3, #26
 8007720:	b29b      	uxth	r3, r3
 8007722:	b219      	sxth	r1, r3
 8007724:	4b09      	ldr	r3, [pc, #36]	; (800774c <ecgPeak+0x3b8>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	3302      	adds	r3, #2
 800772c:	b29b      	uxth	r3, r3
 800772e:	b21a      	sxth	r2, r3
			graph_y0 + 26, RED);
 8007730:	23f2      	movs	r3, #242	; 0xf2
 8007732:	b29b      	uxth	r3, r3
 8007734:	331a      	adds	r3, #26
 8007736:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007738:	b21b      	sxth	r3, r3
 800773a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800773e:	9400      	str	r4, [sp, #0]
 8007740:	f001 fe30 	bl	80093a4 <LCD_DrawLine>
}
 8007744:	bf00      	nop
 8007746:	3704      	adds	r7, #4
 8007748:	46bd      	mov	sp, r7
 800774a:	bd90      	pop	{r4, r7, pc}
 800774c:	20000078 	.word	0x20000078

08007750 <ecgLine>:

void ecgLine() {
 8007750:	b590      	push	{r4, r7, lr}
 8007752:	b085      	sub	sp, #20
 8007754:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < 3; i++) {
 8007756:	2300      	movs	r3, #0
 8007758:	71fb      	strb	r3, [r7, #7]
 800775a:	e09c      	b.n	8007896 <ecgLine+0x146>
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 800775c:	4b52      	ldr	r3, [pc, #328]	; (80078a8 <ecgLine+0x158>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	b218      	sxth	r0, r3
 8007762:	23f2      	movs	r3, #242	; 0xf2
 8007764:	b29b      	uxth	r3, r3
 8007766:	3319      	adds	r3, #25
 8007768:	b29b      	uxth	r3, r3
 800776a:	b219      	sxth	r1, r3
 800776c:	4b4e      	ldr	r3, [pc, #312]	; (80078a8 <ecgLine+0x158>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	3302      	adds	r3, #2
 8007774:	b29b      	uxth	r3, r3
 8007776:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 8007778:	23f2      	movs	r3, #242	; 0xf2
 800777a:	b29b      	uxth	r3, r3
 800777c:	3319      	adds	r3, #25
 800777e:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007780:	b21b      	sxth	r3, r3
 8007782:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007786:	9400      	str	r4, [sp, #0]
 8007788:	f001 fe0c 	bl	80093a4 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800778c:	4b46      	ldr	r3, [pc, #280]	; (80078a8 <ecgLine+0x158>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	b218      	sxth	r0, r3
 8007792:	23f2      	movs	r3, #242	; 0xf2
 8007794:	b29b      	uxth	r3, r3
 8007796:	331a      	adds	r3, #26
 8007798:	b29b      	uxth	r3, r3
 800779a:	b219      	sxth	r1, r3
 800779c:	4b42      	ldr	r3, [pc, #264]	; (80078a8 <ecgLine+0x158>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3302      	adds	r3, #2
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 80077a8:	23f2      	movs	r3, #242	; 0xf2
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	331a      	adds	r3, #26
 80077ae:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80077b0:	b21b      	sxth	r3, r3
 80077b2:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80077b6:	9400      	str	r4, [sp, #0]
 80077b8:	f001 fdf4 	bl	80093a4 <LCD_DrawLine>
		graph_x += graphRefreshRate_peak;
 80077bc:	4b3a      	ldr	r3, [pc, #232]	; (80078a8 <ecgLine+0x158>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3302      	adds	r3, #2
 80077c2:	4a39      	ldr	r2, [pc, #228]	; (80078a8 <ecgLine+0x158>)
 80077c4:	6013      	str	r3, [r2, #0]
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80077c6:	4b38      	ldr	r3, [pc, #224]	; (80078a8 <ecgLine+0x158>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	b218      	sxth	r0, r3
 80077cc:	23f2      	movs	r3, #242	; 0xf2
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3319      	adds	r3, #25
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	b219      	sxth	r1, r3
 80077d6:	4b34      	ldr	r3, [pc, #208]	; (80078a8 <ecgLine+0x158>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3302      	adds	r3, #2
 80077de:	b29b      	uxth	r3, r3
 80077e0:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 80077e2:	23f2      	movs	r3, #242	; 0xf2
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3319      	adds	r3, #25
 80077e8:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 80077ea:	b21b      	sxth	r3, r3
 80077ec:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80077f0:	9400      	str	r4, [sp, #0]
 80077f2:	f001 fdd7 	bl	80093a4 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 80077f6:	4b2c      	ldr	r3, [pc, #176]	; (80078a8 <ecgLine+0x158>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	b218      	sxth	r0, r3
 80077fc:	23f2      	movs	r3, #242	; 0xf2
 80077fe:	b29b      	uxth	r3, r3
 8007800:	331a      	adds	r3, #26
 8007802:	b29b      	uxth	r3, r3
 8007804:	b219      	sxth	r1, r3
 8007806:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <ecgLine+0x158>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	3302      	adds	r3, #2
 800780e:	b29b      	uxth	r3, r3
 8007810:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 8007812:	23f2      	movs	r3, #242	; 0xf2
 8007814:	b29b      	uxth	r3, r3
 8007816:	331a      	adds	r3, #26
 8007818:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 800781a:	b21b      	sxth	r3, r3
 800781c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8007820:	9400      	str	r4, [sp, #0]
 8007822:	f001 fdbf 	bl	80093a4 <LCD_DrawLine>
		graph_x += graphRefreshRate_peak;
 8007826:	4b20      	ldr	r3, [pc, #128]	; (80078a8 <ecgLine+0x158>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3302      	adds	r3, #2
 800782c:	4a1e      	ldr	r2, [pc, #120]	; (80078a8 <ecgLine+0x158>)
 800782e:	6013      	str	r3, [r2, #0]
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007830:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <ecgLine+0x158>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	b218      	sxth	r0, r3
 8007836:	23f2      	movs	r3, #242	; 0xf2
 8007838:	b29b      	uxth	r3, r3
 800783a:	3319      	adds	r3, #25
 800783c:	b29b      	uxth	r3, r3
 800783e:	b219      	sxth	r1, r3
 8007840:	4b19      	ldr	r3, [pc, #100]	; (80078a8 <ecgLine+0x158>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	3302      	adds	r3, #2
 8007848:	b29b      	uxth	r3, r3
 800784a:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 800784c:	23f2      	movs	r3, #242	; 0xf2
 800784e:	b29b      	uxth	r3, r3
 8007850:	3319      	adds	r3, #25
 8007852:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8007854:	b21b      	sxth	r3, r3
 8007856:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800785a:	9400      	str	r4, [sp, #0]
 800785c:	f001 fda2 	bl	80093a4 <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007860:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <ecgLine+0x158>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	b218      	sxth	r0, r3
 8007866:	23f2      	movs	r3, #242	; 0xf2
 8007868:	b29b      	uxth	r3, r3
 800786a:	331a      	adds	r3, #26
 800786c:	b29b      	uxth	r3, r3
 800786e:	b219      	sxth	r1, r3
 8007870:	4b0d      	ldr	r3, [pc, #52]	; (80078a8 <ecgLine+0x158>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	3302      	adds	r3, #2
 8007878:	b29b      	uxth	r3, r3
 800787a:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 800787c:	23f2      	movs	r3, #242	; 0xf2
 800787e:	b29b      	uxth	r3, r3
 8007880:	331a      	adds	r3, #26
 8007882:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8007884:	b21b      	sxth	r3, r3
 8007886:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800788a:	9400      	str	r4, [sp, #0]
 800788c:	f001 fd8a 	bl	80093a4 <LCD_DrawLine>
	for (uint8_t i = 0; i < 3; i++) {
 8007890:	79fb      	ldrb	r3, [r7, #7]
 8007892:	3301      	adds	r3, #1
 8007894:	71fb      	strb	r3, [r7, #7]
 8007896:	79fb      	ldrb	r3, [r7, #7]
 8007898:	2b02      	cmp	r3, #2
 800789a:	f67f af5f 	bls.w	800775c <ecgLine+0xc>
	}
}
 800789e:	bf00      	nop
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd90      	pop	{r4, r7, pc}
 80078a8:	20000078 	.word	0x20000078

080078ac <LCD_ECGAnimation>:

void LCD_ECGAnimation() {
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af02      	add	r7, sp, #8

	int a = graph_x;
 80078b2:	4b11      	ldr	r3, [pc, #68]	; (80078f8 <LCD_ECGAnimation+0x4c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	607b      	str	r3, [r7, #4]
	if (a + graphRefreshRate_peak >= graph_x2 - 25) {
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	1c9a      	adds	r2, r3, #2
 80078bc:	23af      	movs	r3, #175	; 0xaf
 80078be:	3b19      	subs	r3, #25
 80078c0:	429a      	cmp	r2, r3
 80078c2:	db0c      	blt.n	80078de <LCD_ECGAnimation+0x32>
		LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 25, TFTWIDTH - 105, 55, WHITE);
 80078c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	2337      	movs	r3, #55	; 0x37
 80078cc:	2287      	movs	r2, #135	; 0x87
 80078ce:	21ed      	movs	r1, #237	; 0xed
 80078d0:	2014      	movs	r0, #20
 80078d2:	f001 fefb 	bl	80096cc <LCD_FillRect>
		graph_x = graph_x0;
 80078d6:	221e      	movs	r2, #30
 80078d8:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <LCD_ECGAnimation+0x4c>)
 80078da:	601a      	str	r2, [r3, #0]
		ecgPeak();
		ecgLine();
		graph_x += graphRefreshRate_peak;
	}
//	ecgLine();
}
 80078dc:	e008      	b.n	80078f0 <LCD_ECGAnimation+0x44>
		ecgPeak();
 80078de:	f7ff fd59 	bl	8007394 <ecgPeak>
		ecgLine();
 80078e2:	f7ff ff35 	bl	8007750 <ecgLine>
		graph_x += graphRefreshRate_peak;
 80078e6:	4b04      	ldr	r3, [pc, #16]	; (80078f8 <LCD_ECGAnimation+0x4c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3302      	adds	r3, #2
 80078ec:	4a02      	ldr	r2, [pc, #8]	; (80078f8 <LCD_ECGAnimation+0x4c>)
 80078ee:	6013      	str	r3, [r2, #0]
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000078 	.word	0x20000078

080078fc <max30100_init>:
		max30100_mode_t mode, max30100_sampling_rate_t sampling_rate,
		max30100_pulse_width_t pulse_width, max30100_current_t ir_current,
		max30100_current_t start_red_current, uint8_t mean_filter_size,
		uint8_t pulse_bpm_sample_size,
		bool high_res_mode,
		bool debug) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4611      	mov	r1, r2
 8007908:	461a      	mov	r2, r3
 800790a:	460b      	mov	r3, r1
 800790c:	71fb      	strb	r3, [r7, #7]
 800790e:	4613      	mov	r3, r2
 8007910:	71bb      	strb	r3, [r7, #6]
	this->_ui2c = hi2c;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	601a      	str	r2, [r3, #0]
	if (HAL_I2C_IsDeviceReady(this->_ui2c, MAX30100_DEVICE, 2, 100) != HAL_OK) {
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	2364      	movs	r3, #100	; 0x64
 800791e:	2202      	movs	r2, #2
 8007920:	21ae      	movs	r1, #174	; 0xae
 8007922:	f7fc f8c5 	bl	8003ab0 <HAL_I2C_IsDeviceReady>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <max30100_init+0x34>
			return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e0f2      	b.n	8007b16 <max30100_init+0x21a>
		}

	this->acceptable_intense_diff = MAX30100_DEFAULT_ACCEPTABLE_INTENSITY_DIFF;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4a7b      	ldr	r2, [pc, #492]	; (8007b20 <max30100_init+0x224>)
 8007934:	625a      	str	r2, [r3, #36]	; 0x24
	this->red_current_adj_ms = MAX30100_DEFAULT_RED_LED_CURRENT_ADJUSTMENT_MS;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800793c:	629a      	str	r2, [r3, #40]	; 0x28
	this->reset_spo2_pulse_n = MAX30100_DEFAULT_RESET_SPO2_EVERY_N_PULSES;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2204      	movs	r2, #4
 8007942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	this->dc_alpha = MAX30100_DEFAULT_ALPHA;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4a76      	ldr	r2, [pc, #472]	; (8007b24 <max30100_init+0x228>)
 800794a:	631a      	str	r2, [r3, #48]	; 0x30
	this->pulse_min_threshold = MAX30100_DEFAULT_PULSE_MIN_THRESHOLD;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2264      	movs	r2, #100	; 0x64
 8007950:	869a      	strh	r2, [r3, #52]	; 0x34
	this->pulse_max_threshold = MAX30100_DEFAULT_PULSE_MAX_THRESHOLD;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007958:	86da      	strh	r2, [r3, #54]	; 0x36

	this->mean_filter_size = mean_filter_size;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	this->pulse_bpm_sample_size = pulse_bpm_sample_size;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800796a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	this->debug = debug;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007974:	711a      	strb	r2, [r3, #4]
	this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	731a      	strb	r2, [r3, #12]

	this->mean_diff_ir.values = NULL;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	65da      	str	r2, [r3, #92]	; 0x5c
	this->values_bpm = NULL;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	615a      	str	r2, [r3, #20]
	this->mean_diff_ir.values = malloc(sizeof(float) * mean_filter_size);
 8007988:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4618      	mov	r0, r3
 8007990:	f005 f844 	bl	800ca1c <malloc>
 8007994:	4603      	mov	r3, r0
 8007996:	461a      	mov	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	65da      	str	r2, [r3, #92]	; 0x5c
	this->values_bpm = malloc(sizeof(float) * pulse_bpm_sample_size);
 800799c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f005 f83a 	bl	800ca1c <malloc>
 80079a8:	4603      	mov	r3, r0
 80079aa:	461a      	mov	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	615a      	str	r2, [r3, #20]

	if (!(this->values_bpm) || !(this->mean_diff_ir.values))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <max30100_init+0xc4>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <max30100_init+0xc8>
		return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0a8      	b.n	8007b16 <max30100_init+0x21a>

	HAL_StatusTypeDef ret = max30100_set_mode(this, mode);
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	4619      	mov	r1, r3
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fcd5 	bl	8008378 <max30100_set_mode>
 80079ce:	4603      	mov	r3, r0
 80079d0:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <max30100_init+0xe0>
		return ret;
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	e09c      	b.n	8007b16 <max30100_init+0x21a>

	ret = max30100_set_sampling_rate(this, sampling_rate);
 80079dc:	79bb      	ldrb	r3, [r7, #6]
 80079de:	4619      	mov	r1, r3
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 fd63 	bl	80084ac <max30100_set_sampling_rate>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <max30100_init+0xf8>
		return ret;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	e090      	b.n	8007b16 <max30100_init+0x21a>
	ret = max30100_set_pulse_width(this, pulse_width);
 80079f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079f8:	4619      	mov	r1, r3
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fd7f 	bl	80084fe <max30100_set_pulse_width>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <max30100_init+0x112>
		return ret;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	e083      	b.n	8007b16 <max30100_init+0x21a>

	this->red_current = (uint8_t) start_red_current;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007a14:	715a      	strb	r2, [r3, #5]
	this->last_red_current_check = 0;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	609a      	str	r2, [r3, #8]

	this->ir_current = ir_current;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007a22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	ret = max30100_set_led_current(this, this->red_current, ir_current);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	795b      	ldrb	r3, [r3, #5]
 8007a2a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fd8c 	bl	800854e <max30100_set_led_current>
 8007a36:	4603      	mov	r3, r0
 8007a38:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <max30100_init+0x148>
		return ret;
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	e068      	b.n	8007b16 <max30100_init+0x21a>
	ret = max30100_set_high_res(this, high_res_mode);
 8007a44:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007a48:	4619      	mov	r1, r3
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 fcfe 	bl	800844c <max30100_set_high_res>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK)
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <max30100_init+0x162>
		return ret;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	e05b      	b.n	8007b16 <max30100_init+0x21a>

	this->dc_filter_ir.w = 0;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	641a      	str	r2, [r3, #64]	; 0x40
	this->dc_filter_ir.result = 0;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	645a      	str	r2, [r3, #68]	; 0x44

	this->dc_filter_red.w = 0;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	649a      	str	r2, [r3, #72]	; 0x48
	this->dc_filter_red.result = 0;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	64da      	str	r2, [r3, #76]	; 0x4c

	this->lpb_filter_ir.v[0] = 0;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f04f 0200 	mov.w	r2, #0
 8007a84:	651a      	str	r2, [r3, #80]	; 0x50
	this->lpb_filter_ir.v[1] = 0;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	655a      	str	r2, [r3, #84]	; 0x54
	this->lpb_filter_ir.result = 0;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f04f 0200 	mov.w	r2, #0
 8007a94:	659a      	str	r2, [r3, #88]	; 0x58

	memset(this->mean_diff_ir.values, 0, sizeof(float) * mean_filter_size);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007a9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	f004 ffc2 	bl	800ca2c <memset>
	this->mean_diff_ir.index = 0;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	this->mean_diff_ir.sum = 0;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	665a      	str	r2, [r3, #100]	; 0x64
	this->mean_diff_ir.count = 0;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	memset(this->values_bpm, 0, sizeof(float) * pulse_bpm_sample_size);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6958      	ldr	r0, [r3, #20]
 8007ac4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	461a      	mov	r2, r3
 8007acc:	2100      	movs	r1, #0
 8007ace:	f004 ffad 	bl	800ca2c <memset>
	this->values_bpm_sum = 0;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f04f 0200 	mov.w	r2, #0
 8007ad8:	619a      	str	r2, [r3, #24]
	this->values_bpm_count = 0;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	771a      	strb	r2, [r3, #28]
	this->bpm_index = 0;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	775a      	strb	r2, [r3, #29]

	this->ir_ac_sq_sum = 0;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	66da      	str	r2, [r3, #108]	; 0x6c
	this->red_ac_sq_sum = 0;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f04f 0200 	mov.w	r2, #0
 8007af4:	671a      	str	r2, [r3, #112]	; 0x70
	this->samples_recorded = 0;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	this->pulses_detected = 0;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	this->current_spO2 = 0;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	679a      	str	r2, [r3, #120]	; 0x78

	this->last_beat_threshold = 0;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	621a      	str	r2, [r3, #32]
	return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	00017318 	.word	0x00017318
 8007b24:	3f733333 	.word	0x3f733333

08007b28 <max30100_update>:

HAL_StatusTypeDef max30100_update(max30100_config_t *this,
		max30100_data_t *data) {
 8007b28:	b5b0      	push	{r4, r5, r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
	data->pulse_detected = false;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2200      	movs	r2, #0
 8007b36:	701a      	strb	r2, [r3, #0]
	data->heart_bpm = 0.0;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	605a      	str	r2, [r3, #4]
	data->ir_cardiogram = 0.0;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f04f 0200 	mov.w	r2, #0
 8007b46:	609a      	str	r2, [r3, #8]
	data->ir_dc_value = 0.0;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	60da      	str	r2, [r3, #12]
	data->red_dc_value = 0.0;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	f04f 0200 	mov.w	r2, #0
 8007b56:	611a      	str	r2, [r3, #16]
	data->spO2 = this->current_spO2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	615a      	str	r2, [r3, #20]
	data->last_beat_threshold = 0;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	619a      	str	r2, [r3, #24]
	data->dc_filtered_ir = 0.0;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	621a      	str	r2, [r3, #32]
	data->dc_filtered_red = 0.0;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	61da      	str	r2, [r3, #28]

	max30100_fifo_t raw_data;
	HAL_StatusTypeDef ret = max30100_read_fifo(this, &raw_data);
 8007b76:	f107 0308 	add.w	r3, r7, #8
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fd00 	bl	8008582 <max30100_read_fifo>
 8007b82:	4603      	mov	r3, r0
 8007b84:	75fb      	strb	r3, [r7, #23]
//=================================================
//	print("IR: %d, Red: %d\n", raw_data.raw_ir, raw_data.raw_red);
//=================================================
	if (ret != HAL_OK)
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <max30100_update+0x68>
		return ret;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	e14f      	b.n	8007e30 <max30100_update+0x308>

	this->dc_filter_ir = max30100_dc_removal((float) raw_data.raw_ir,
 8007b90:	893b      	ldrh	r3, [r7, #8]
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8007ba6:	687c      	ldr	r4, [r7, #4]
 8007ba8:	eeb0 1a66 	vmov.f32	s2, s13
 8007bac:	eef0 0a47 	vmov.f32	s1, s14
 8007bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8007bb4:	f000 fd11 	bl	80085da <max30100_dc_removal>
 8007bb8:	eeb0 7a40 	vmov.f32	s14, s0
 8007bbc:	eef0 7a60 	vmov.f32	s15, s1
 8007bc0:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 8007bc4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
			this->dc_filter_ir.w, this->dc_alpha);
	this->dc_filter_red = max30100_dc_removal((float) raw_data.raw_red,
 8007bc8:	897b      	ldrh	r3, [r7, #10]
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8007bde:	687c      	ldr	r4, [r7, #4]
 8007be0:	eeb0 1a66 	vmov.f32	s2, s13
 8007be4:	eef0 0a47 	vmov.f32	s1, s14
 8007be8:	eeb0 0a67 	vmov.f32	s0, s15
 8007bec:	f000 fcf5 	bl	80085da <max30100_dc_removal>
 8007bf0:	eeb0 7a40 	vmov.f32	s14, s0
 8007bf4:	eef0 7a60 	vmov.f32	s15, s1
 8007bf8:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 8007bfc:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
			this->dc_filter_red.w, this->dc_alpha);

	float mean_diff_res_ir = max30100_mean_diff(this,
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007c06:	eeb0 0a67 	vmov.f32	s0, s15
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fd68 	bl	80086e0 <max30100_mean_diff>
 8007c10:	ed87 0a04 	vstr	s0, [r7, #16]
			this->dc_filter_ir.result);
	//=================================================
//	print("IR mean difference: %f\n", mean_diff_res_ir);
	//=================================================

	max30100_lpb_filter(this, mean_diff_res_ir/*-dcFilterIR.result*/);
 8007c14:	ed97 0a04 	vldr	s0, [r7, #16]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fd19 	bl	8008650 <max30100_lpb_filter>

	//=================================================
//	print("lpb_filter_ir: %f\n", this->lpb_filter_ir.result);
	//=================================================

	this->ir_ac_sq_sum += this->dc_filter_ir.result * this->dc_filter_ir.result;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	this->red_ac_sq_sum += this->dc_filter_red.result * this->dc_filter_red.result;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	this->samples_recorded++;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8007c64:	3301      	adds	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	if (max30100_detect_pulse(this, this->lpb_filter_ir.result) && this->samples_recorded) {
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007c74:	eeb0 0a67 	vmov.f32	s0, s15
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f8e3 	bl	8007e44 <max30100_detect_pulse>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80a4 	beq.w	8007dce <max30100_update+0x2a6>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 809e 	beq.w	8007dce <max30100_update+0x2a6>
		data->pulse_detected = true;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2201      	movs	r2, #1
 8007c96:	701a      	strb	r2, [r3, #0]
		this->pulses_detected++;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

		float ratio_rms = log(sqrt(this->red_ac_sq_sum / (float) this->samples_recorded))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8007cb4:	ee07 3a90 	vmov	s15, r3
 8007cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cbc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007cc0:	ee16 0a90 	vmov	r0, s13
 8007cc4:	f7f8 fc48 	bl	8000558 <__aeabi_f2d>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	ec43 2b10 	vmov	d0, r2, r3
 8007cd0:	f007 fe38 	bl	800f944 <sqrt>
 8007cd4:	eeb0 7a40 	vmov.f32	s14, s0
 8007cd8:	eef0 7a60 	vmov.f32	s15, s1
 8007cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8007ce0:	eef0 0a67 	vmov.f32	s1, s15
 8007ce4:	f007 fdf0 	bl	800f8c8 <log>
 8007ce8:	ec55 4b10 	vmov	r4, r5, d0
				/ log(sqrt(this->ir_ac_sq_sum / (float) this->samples_recorded));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007d04:	ee16 0a90 	vmov	r0, s13
 8007d08:	f7f8 fc26 	bl	8000558 <__aeabi_f2d>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	ec43 2b10 	vmov	d0, r2, r3
 8007d14:	f007 fe16 	bl	800f944 <sqrt>
 8007d18:	eeb0 7a40 	vmov.f32	s14, s0
 8007d1c:	eef0 7a60 	vmov.f32	s15, s1
 8007d20:	eeb0 0a47 	vmov.f32	s0, s14
 8007d24:	eef0 0a67 	vmov.f32	s1, s15
 8007d28:	f007 fdce 	bl	800f8c8 <log>
 8007d2c:	ec53 2b10 	vmov	r2, r3, d0
 8007d30:	4620      	mov	r0, r4
 8007d32:	4629      	mov	r1, r5
 8007d34:	f7f8 fd92 	bl	800085c <__aeabi_ddiv>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
		float ratio_rms = log(sqrt(this->red_ac_sq_sum / (float) this->samples_recorded))
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4619      	mov	r1, r3
 8007d40:	f7f8 ff3a 	bl	8000bb8 <__aeabi_d2f>
 8007d44:	4603      	mov	r3, r0
 8007d46:	60fb      	str	r3, [r7, #12]

		if (this->debug)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	791b      	ldrb	r3, [r3, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d009      	beq.n	8007d64 <max30100_update+0x23c>
			print("RMS Ratio: %f\n", ratio_rms);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7f8 fc01 	bl	8000558 <__aeabi_f2d>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	ec43 2b10 	vmov	d0, r2, r3
 8007d5e:	4836      	ldr	r0, [pc, #216]	; (8007e38 <max30100_update+0x310>)
 8007d60:	f7ff fa7e 	bl	8007260 <print>

		//This is my adjusted standard model, so it shows 0.89 as 94% saturation.
		//It is probably far from correct, requires proper empircal calibration.
		this->current_spO2 = 110.0 - 16.0 * ratio_rms;
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7f8 fbf7 	bl	8000558 <__aeabi_f2d>
 8007d6a:	f04f 0200 	mov.w	r2, #0
 8007d6e:	4b33      	ldr	r3, [pc, #204]	; (8007e3c <max30100_update+0x314>)
 8007d70:	f7f8 fc4a 	bl	8000608 <__aeabi_dmul>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	f04f 0000 	mov.w	r0, #0
 8007d7c:	4930      	ldr	r1, [pc, #192]	; (8007e40 <max30100_update+0x318>)
 8007d7e:	f7f8 fa8b 	bl	8000298 <__aeabi_dsub>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	f7f8 ff15 	bl	8000bb8 <__aeabi_d2f>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	679a      	str	r2, [r3, #120]	; 0x78
		data->spO2 = this->current_spO2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	615a      	str	r2, [r3, #20]

		if (!(this->pulses_detected % this->reset_spo2_pulse_n)) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007da8:	fb93 f1f2 	sdiv	r1, r3, r2
 8007dac:	fb01 f202 	mul.w	r2, r1, r2
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10b      	bne.n	8007dce <max30100_update+0x2a6>
			this->ir_ac_sq_sum = 0;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	66da      	str	r2, [r3, #108]	; 0x6c
			this->red_ac_sq_sum = 0;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	671a      	str	r2, [r3, #112]	; 0x70
			this->samples_recorded = 0;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		}
	}

	ret = max30100_balance_intensities(this, this->dc_filter_red.w,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8007dda:	eef0 0a47 	vmov.f32	s1, s14
 8007dde:	eeb0 0a67 	vmov.f32	s0, s15
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f9e8 	bl	80081b8 <max30100_balance_intensities>
 8007de8:	4603      	mov	r3, r0
 8007dea:	75fb      	strb	r3, [r7, #23]
			this->dc_filter_ir.w);
	if (ret != HAL_OK)
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <max30100_update+0x2ce>
		return ret;
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	e01c      	b.n	8007e30 <max30100_update+0x308>

	data->heart_bpm = this->current_bpm;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	605a      	str	r2, [r3, #4]
	data->ir_cardiogram = this->lpb_filter_ir.result;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	609a      	str	r2, [r3, #8]
	data->ir_dc_value = this->dc_filter_ir.w;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	60da      	str	r2, [r3, #12]
	data->red_dc_value = this->dc_filter_red.w;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	611a      	str	r2, [r3, #16]
	data->last_beat_threshold = this->last_beat_threshold;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1a      	ldr	r2, [r3, #32]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	619a      	str	r2, [r3, #24]
	data->dc_filtered_ir = this->dc_filter_ir.result;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	621a      	str	r2, [r3, #32]
	data->dc_filtered_red = this->dc_filter_red.result;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bdb0      	pop	{r4, r5, r7, pc}
 8007e38:	08010040 	.word	0x08010040
 8007e3c:	40300000 	.word	0x40300000
 8007e40:	405b8000 	.word	0x405b8000

08007e44 <max30100_detect_pulse>:

bool max30100_detect_pulse(max30100_config_t *this, float sensor_value) {
 8007e44:	b5b0      	push	{r4, r5, r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	ed87 0a00 	vstr	s0, [r7]
	static float prev_sensor_value = 0;
	static uint8_t values_went_down = 0;
	static uint32_t current_beat = 0;
	static uint32_t last_beat = 0;

	if (sensor_value > this->pulse_max_threshold) {
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e54:	ee07 3a90 	vmov	s15, r3
 8007e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e5c:	ed97 7a00 	vldr	s14, [r7]
 8007e60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e68:	dd14      	ble.n	8007e94 <max30100_detect_pulse+0x50>
		this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	731a      	strb	r2, [r3, #12]
		prev_sensor_value = 0;
 8007e70:	4baa      	ldr	r3, [pc, #680]	; (800811c <max30100_detect_pulse+0x2d8>)
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]
		last_beat = 0;
 8007e78:	4ba9      	ldr	r3, [pc, #676]	; (8008120 <max30100_detect_pulse+0x2dc>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
		current_beat = 0;
 8007e7e:	4ba9      	ldr	r3, [pc, #676]	; (8008124 <max30100_detect_pulse+0x2e0>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
		values_went_down = 0;
 8007e84:	4ba8      	ldr	r3, [pc, #672]	; (8008128 <max30100_detect_pulse+0x2e4>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
		this->last_beat_threshold = 0;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	621a      	str	r2, [r3, #32]
		return false;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e189      	b.n	80081a8 <max30100_detect_pulse+0x364>
	}

	switch (this->current_pulse_detector_state) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	7b1b      	ldrb	r3, [r3, #12]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	f000 815f 	beq.w	800815c <max30100_detect_pulse+0x318>
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	f300 817e 	bgt.w	80081a0 <max30100_detect_pulse+0x35c>
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <max30100_detect_pulse+0x6a>
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d015      	beq.n	8007ed8 <max30100_detect_pulse+0x94>
 8007eac:	e178      	b.n	80081a0 <max30100_detect_pulse+0x35c>
	case MAX30100_PULSE_IDLE:
		if (sensor_value >= this->pulse_min_threshold) {
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eba:	ed97 7a00 	vldr	s14, [r7]
 8007ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec6:	da00      	bge.n	8007eca <max30100_detect_pulse+0x86>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_UP;
			values_went_down = 0;
		}
		break;
 8007ec8:	e16a      	b.n	80081a0 <max30100_detect_pulse+0x35c>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_UP;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	731a      	strb	r2, [r3, #12]
			values_went_down = 0;
 8007ed0:	4b95      	ldr	r3, [pc, #596]	; (8008128 <max30100_detect_pulse+0x2e4>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
		break;
 8007ed6:	e163      	b.n	80081a0 <max30100_detect_pulse+0x35c>
	case MAX30100_PULSE_TRACE_UP:
		if (sensor_value > prev_sensor_value) {
 8007ed8:	4b90      	ldr	r3, [pc, #576]	; (800811c <max30100_detect_pulse+0x2d8>)
 8007eda:	edd3 7a00 	vldr	s15, [r3]
 8007ede:	ed97 7a00 	vldr	s14, [r7]
 8007ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eea:	dd0d      	ble.n	8007f08 <max30100_detect_pulse+0xc4>
			current_beat = HAL_GetTick();
 8007eec:	f7fa f9d2 	bl	8002294 <HAL_GetTick>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	4a8c      	ldr	r2, [pc, #560]	; (8008124 <max30100_detect_pulse+0x2e0>)
 8007ef4:	6013      	str	r3, [r2, #0]
			this->last_beat_threshold = sensor_value;
 8007ef6:	edd7 7a00 	vldr	s15, [r7]
 8007efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007efe:	ee17 2a90 	vmov	r2, s15
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	621a      	str	r2, [r3, #32]
				print("AVg. BPM: %f\n", this->current_bpm);
			}

			return true;
		}
		break;
 8007f06:	e14b      	b.n	80081a0 <max30100_detect_pulse+0x35c>
			if (this->debug) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	791b      	ldrb	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d012      	beq.n	8007f36 <max30100_detect_pulse+0xf2>
				print("Peak reached: %f %f\n", sensor_value, prev_sensor_value);
 8007f10:	6838      	ldr	r0, [r7, #0]
 8007f12:	f7f8 fb21 	bl	8000558 <__aeabi_f2d>
 8007f16:	4604      	mov	r4, r0
 8007f18:	460d      	mov	r5, r1
 8007f1a:	4b80      	ldr	r3, [pc, #512]	; (800811c <max30100_detect_pulse+0x2d8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7f8 fb1a 	bl	8000558 <__aeabi_f2d>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	ec43 2b11 	vmov	d1, r2, r3
 8007f2c:	ec45 4b10 	vmov	d0, r4, r5
 8007f30:	487e      	ldr	r0, [pc, #504]	; (800812c <max30100_detect_pulse+0x2e8>)
 8007f32:	f7ff f995 	bl	8007260 <print>
			uint32_t beat_duration = current_beat - last_beat;
 8007f36:	4b7b      	ldr	r3, [pc, #492]	; (8008124 <max30100_detect_pulse+0x2e0>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4b79      	ldr	r3, [pc, #484]	; (8008120 <max30100_detect_pulse+0x2dc>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	60fb      	str	r3, [r7, #12]
			last_beat = current_beat;
 8007f42:	4b78      	ldr	r3, [pc, #480]	; (8008124 <max30100_detect_pulse+0x2e0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a76      	ldr	r2, [pc, #472]	; (8008120 <max30100_detect_pulse+0x2dc>)
 8007f48:	6013      	str	r3, [r2, #0]
			float raw_bpm = 0;
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
			if (beat_duration)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <max30100_detect_pulse+0x128>
				raw_bpm = 60000.0 / (float) beat_duration;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	ee07 3a90 	vmov	s15, r3
 8007f5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f60:	eddf 6a73 	vldr	s13, [pc, #460]	; 8008130 <max30100_detect_pulse+0x2ec>
 8007f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f68:	edc7 7a05 	vstr	s15, [r7, #20]
			if (this->debug) {
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	791b      	ldrb	r3, [r3, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00d      	beq.n	8007f90 <max30100_detect_pulse+0x14c>
				print("Beat duration: %u\n", beat_duration);
 8007f74:	68f9      	ldr	r1, [r7, #12]
 8007f76:	486f      	ldr	r0, [pc, #444]	; (8008134 <max30100_detect_pulse+0x2f0>)
 8007f78:	f7ff f972 	bl	8007260 <print>
				print("Raw BPM: %f\n", raw_bpm);
 8007f7c:	6978      	ldr	r0, [r7, #20]
 8007f7e:	f7f8 faeb 	bl	8000558 <__aeabi_f2d>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	ec43 2b10 	vmov	d0, r2, r3
 8007f8a:	486b      	ldr	r0, [pc, #428]	; (8008138 <max30100_detect_pulse+0x2f4>)
 8007f8c:	f7ff f968 	bl	8007260 <print>
			this->current_pulse_detector_state = MAX30100_PULSE_TRACE_DOWN;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	731a      	strb	r2, [r3, #12]
			if (beat_duration > 2500) { // 2.5 seconds
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d91a      	bls.n	8007fd6 <max30100_detect_pulse+0x192>
				memset(this->values_bpm, 0,
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6958      	ldr	r0, [r3, #20]
						sizeof(float) * this->pulse_bpm_sample_size);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				memset(this->values_bpm, 0,
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	461a      	mov	r2, r3
 8007fae:	2100      	movs	r1, #0
 8007fb0:	f004 fd3c 	bl	800ca2c <memset>
				this->values_bpm_sum = 0;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f04f 0200 	mov.w	r2, #0
 8007fba:	619a      	str	r2, [r3, #24]
				this->values_bpm_count = 0;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	771a      	strb	r2, [r3, #28]
				this->bpm_index = 0;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	775a      	strb	r2, [r3, #29]
				if (this->debug)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	791b      	ldrb	r3, [r3, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <max30100_detect_pulse+0x192>
					print("Moving avg. reseted\n");
 8007fd0:	485a      	ldr	r0, [pc, #360]	; (800813c <max30100_detect_pulse+0x2f8>)
 8007fd2:	f7ff f945 	bl	8007260 <print>
			if (raw_bpm < 50 || raw_bpm > 220) {
 8007fd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8007fda:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8008140 <max30100_detect_pulse+0x2fc>
 8007fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe6:	d408      	bmi.n	8007ffa <max30100_detect_pulse+0x1b6>
 8007fe8:	edd7 7a05 	vldr	s15, [r7, #20]
 8007fec:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8008144 <max30100_detect_pulse+0x300>
 8007ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff8:	dd08      	ble.n	800800c <max30100_detect_pulse+0x1c8>
				if (this->debug)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	791b      	ldrb	r3, [r3, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <max30100_detect_pulse+0x1c4>
					print("BPM out of bounds. Not adding to Moving Avg.\n");
 8008002:	4851      	ldr	r0, [pc, #324]	; (8008148 <max30100_detect_pulse+0x304>)
 8008004:	f7ff f92c 	bl	8007260 <print>
				return false;
 8008008:	2300      	movs	r3, #0
 800800a:	e0cd      	b.n	80081a8 <max30100_detect_pulse+0x364>
			this->values_bpm_sum -= this->values_bpm[this->bpm_index];
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	ed93 7a06 	vldr	s14, [r3, #24]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695a      	ldr	r2, [r3, #20]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	7f5b      	ldrb	r3, [r3, #29]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	edd3 7a00 	vldr	s15, [r3]
 8008022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	edc3 7a06 	vstr	s15, [r3, #24]
			this->values_bpm[this->bpm_index] = raw_bpm;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	695a      	ldr	r2, [r3, #20]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	7f5b      	ldrb	r3, [r3, #29]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	601a      	str	r2, [r3, #0]
			this->values_bpm_sum += this->values_bpm[this->bpm_index++];
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	695a      	ldr	r2, [r3, #20]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	7f5b      	ldrb	r3, [r3, #29]
 8008044:	1c59      	adds	r1, r3, #1
 8008046:	b2c8      	uxtb	r0, r1
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	7748      	strb	r0, [r1, #29]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	ed93 7a00 	vldr	s14, [r3]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	edd3 7a06 	vldr	s15, [r3, #24]
 800805a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	edc3 7a06 	vstr	s15, [r3, #24]
			this->bpm_index %= this->pulse_bpm_sample_size;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	7f5b      	ldrb	r3, [r3, #29]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800806e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008072:	fb01 f202 	mul.w	r2, r1, r2
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	b2da      	uxtb	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	775a      	strb	r2, [r3, #29]
			if (this->values_bpm_count < this->pulse_bpm_sample_size)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	7f1a      	ldrb	r2, [r3, #28]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008088:	429a      	cmp	r2, r3
 800808a:	d205      	bcs.n	8008098 <max30100_detect_pulse+0x254>
				this->values_bpm_count++;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	7f1b      	ldrb	r3, [r3, #28]
 8008090:	3301      	adds	r3, #1
 8008092:	b2da      	uxtb	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	771a      	strb	r2, [r3, #28]
			this->current_bpm = this->values_bpm_sum / this->values_bpm_count;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	edd3 6a06 	vldr	s13, [r3, #24]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	7f1b      	ldrb	r3, [r3, #28]
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	edc3 7a04 	vstr	s15, [r3, #16]
			if (this->debug) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	791b      	ldrb	r3, [r3, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d02d      	beq.n	8008118 <max30100_detect_pulse+0x2d4>
				print("CurrentMoving Avg: ");
 80080bc:	4823      	ldr	r0, [pc, #140]	; (800814c <max30100_detect_pulse+0x308>)
 80080be:	f7ff f8cf 	bl	8007260 <print>
				for (int i = 0; i < this->values_bpm_count; i++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	e012      	b.n	80080ee <max30100_detect_pulse+0x2aa>
					print("%f ", this->values_bpm[i]);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	695a      	ldr	r2, [r3, #20]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7f8 fa3f 	bl	8000558 <__aeabi_f2d>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	ec43 2b10 	vmov	d0, r2, r3
 80080e2:	481b      	ldr	r0, [pc, #108]	; (8008150 <max30100_detect_pulse+0x30c>)
 80080e4:	f7ff f8bc 	bl	8007260 <print>
				for (int i = 0; i < this->values_bpm_count; i++)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	3301      	adds	r3, #1
 80080ec:	613b      	str	r3, [r7, #16]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	7f1b      	ldrb	r3, [r3, #28]
 80080f2:	461a      	mov	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4293      	cmp	r3, r2
 80080f8:	dbe6      	blt.n	80080c8 <max30100_detect_pulse+0x284>
				print(" \n");
 80080fa:	4816      	ldr	r0, [pc, #88]	; (8008154 <max30100_detect_pulse+0x310>)
 80080fc:	f7ff f8b0 	bl	8007260 <print>
				print("AVg. BPM: %f\n", this->current_bpm);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	4618      	mov	r0, r3
 8008106:	f7f8 fa27 	bl	8000558 <__aeabi_f2d>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	ec43 2b10 	vmov	d0, r2, r3
 8008112:	4811      	ldr	r0, [pc, #68]	; (8008158 <max30100_detect_pulse+0x314>)
 8008114:	f7ff f8a4 	bl	8007260 <print>
			return true;
 8008118:	2301      	movs	r3, #1
 800811a:	e045      	b.n	80081a8 <max30100_detect_pulse+0x364>
 800811c:	200005b8 	.word	0x200005b8
 8008120:	200005bc 	.word	0x200005bc
 8008124:	200005c0 	.word	0x200005c0
 8008128:	200005c4 	.word	0x200005c4
 800812c:	08010050 	.word	0x08010050
 8008130:	476a6000 	.word	0x476a6000
 8008134:	08010068 	.word	0x08010068
 8008138:	0801007c 	.word	0x0801007c
 800813c:	0801008c 	.word	0x0801008c
 8008140:	42480000 	.word	0x42480000
 8008144:	435c0000 	.word	0x435c0000
 8008148:	080100a4 	.word	0x080100a4
 800814c:	080100d4 	.word	0x080100d4
 8008150:	080100e8 	.word	0x080100e8
 8008154:	080100ec 	.word	0x080100ec
 8008158:	080100f0 	.word	0x080100f0
	case MAX30100_PULSE_TRACE_DOWN:
		if (sensor_value < prev_sensor_value)
 800815c:	4b14      	ldr	r3, [pc, #80]	; (80081b0 <max30100_detect_pulse+0x36c>)
 800815e:	edd3 7a00 	vldr	s15, [r3]
 8008162:	ed97 7a00 	vldr	s14, [r7]
 8008166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800816a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800816e:	d505      	bpl.n	800817c <max30100_detect_pulse+0x338>
			values_went_down++;
 8008170:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <max30100_detect_pulse+0x370>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	b2da      	uxtb	r2, r3
 8008178:	4b0e      	ldr	r3, [pc, #56]	; (80081b4 <max30100_detect_pulse+0x370>)
 800817a:	701a      	strb	r2, [r3, #0]

		if (sensor_value < this->pulse_min_threshold)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008180:	ee07 3a90 	vmov	s15, r3
 8008184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008188:	ed97 7a00 	vldr	s14, [r7]
 800818c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008194:	d400      	bmi.n	8008198 <max30100_detect_pulse+0x354>
			this->current_pulse_detector_state = MAX30100_PULSE_IDLE;

		break;
 8008196:	e002      	b.n	800819e <max30100_detect_pulse+0x35a>
			this->current_pulse_detector_state = MAX30100_PULSE_IDLE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	731a      	strb	r2, [r3, #12]
		break;
 800819e:	bf00      	nop
	}

	prev_sensor_value = sensor_value;
 80081a0:	4a03      	ldr	r2, [pc, #12]	; (80081b0 <max30100_detect_pulse+0x36c>)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	6013      	str	r3, [r2, #0]
	return false;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bdb0      	pop	{r4, r5, r7, pc}
 80081b0:	200005b8 	.word	0x200005b8
 80081b4:	200005c4 	.word	0x200005c4

080081b8 <max30100_balance_intensities>:

HAL_StatusTypeDef max30100_balance_intensities(max30100_config_t *this,
		float red_dc, float ir_dc) {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80081c4:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((uint32_t) (HAL_GetTick()) - this->last_red_current_check
 80081c8:	f7fa f864 	bl	8002294 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	1ad2      	subs	r2, r2, r3
			>= this->red_current_adj_ms) {
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((uint32_t) (HAL_GetTick()) - this->last_red_current_check
 80081d8:	429a      	cmp	r2, r3
 80081da:	d36b      	bcc.n	80082b4 <max30100_balance_intensities+0xfc>
		//print("%f\n", red_dc - ir_dc);
		if (ir_dc - red_dc > this->acceptable_intense_diff
 80081dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80081e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80081e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80081f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fc:	dd21      	ble.n	8008242 <max30100_balance_intensities+0x8a>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	795b      	ldrb	r3, [r3, #5]
 8008202:	2b0e      	cmp	r3, #14
 8008204:	d81d      	bhi.n	8008242 <max30100_balance_intensities+0x8a>
			this->red_current++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	795b      	ldrb	r3, [r3, #5]
 800820a:	3301      	adds	r3, #1
 800820c:	b2da      	uxtb	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	715a      	strb	r2, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
					this->red_current, this->ir_current);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	7959      	ldrb	r1, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800821c:	461a      	mov	r2, r3
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 f995 	bl	800854e <max30100_set_led_current>
 8008224:	4603      	mov	r3, r0
 8008226:	75fb      	strb	r3, [r7, #23]
			if (ret != HAL_OK)
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <max30100_balance_intensities+0x7a>
				return ret;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	e041      	b.n	80082b6 <max30100_balance_intensities+0xfe>
			if (this->debug)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	791b      	ldrb	r3, [r3, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d036      	beq.n	80082a8 <max30100_balance_intensities+0xf0>
				print("RED LED Current +\n");
 800823a:	4821      	ldr	r0, [pc, #132]	; (80082c0 <max30100_balance_intensities+0x108>)
 800823c:	f7ff f810 	bl	8007260 <print>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 8008240:	e032      	b.n	80082a8 <max30100_balance_intensities+0xf0>

		} else if (red_dc - ir_dc > this->acceptable_intense_diff
 8008242:	ed97 7a02 	vldr	s14, [r7, #8]
 8008246:	edd7 7a01 	vldr	s15, [r7, #4]
 800824a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800825e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008262:	dd22      	ble.n	80082aa <max30100_balance_intensities+0xf2>
				&& this->red_current > 0) {
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	795b      	ldrb	r3, [r3, #5]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01e      	beq.n	80082aa <max30100_balance_intensities+0xf2>
			this->red_current--;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	795b      	ldrb	r3, [r3, #5]
 8008270:	3b01      	subs	r3, #1
 8008272:	b2da      	uxtb	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	715a      	strb	r2, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
					this->red_current, this->ir_current);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	7959      	ldrb	r1, [r3, #5]
			HAL_StatusTypeDef ret = max30100_set_led_current(this,
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008282:	461a      	mov	r2, r3
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 f962 	bl	800854e <max30100_set_led_current>
 800828a:	4603      	mov	r3, r0
 800828c:	75bb      	strb	r3, [r7, #22]
			if (ret != HAL_OK)
 800828e:	7dbb      	ldrb	r3, [r7, #22]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <max30100_balance_intensities+0xe0>
				return ret;
 8008294:	7dbb      	ldrb	r3, [r7, #22]
 8008296:	e00e      	b.n	80082b6 <max30100_balance_intensities+0xfe>
			if (this->debug)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	791b      	ldrb	r3, [r3, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <max30100_balance_intensities+0xf2>
				print("RED LED Current -\n");
 80082a0:	4808      	ldr	r0, [pc, #32]	; (80082c4 <max30100_balance_intensities+0x10c>)
 80082a2:	f7fe ffdd 	bl	8007260 <print>
 80082a6:	e000      	b.n	80082aa <max30100_balance_intensities+0xf2>
				&& this->red_current < MAX30100_LED_CURRENT_50MA) {
 80082a8:	bf00      	nop
		}

		this->last_red_current_check = (uint32_t) (HAL_GetTick());
 80082aa:	f7f9 fff3 	bl	8002294 <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	609a      	str	r2, [r3, #8]

	}
	return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	08010100 	.word	0x08010100
 80082c4:	08010114 	.word	0x08010114

080082c8 <max30100_write_register>:

// Writes val to address register on device
HAL_StatusTypeDef max30100_write_register(max30100_config_t *this,
		uint8_t address, uint8_t val) {
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70fb      	strb	r3, [r7, #3]
 80082d4:	4613      	mov	r3, r2
 80082d6:	70bb      	strb	r3, [r7, #2]
	// start transmission to device
//	uint8_t *pVal = &val;
//	return HAL_I2C_Mem_Write(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, pVal, 1, 10);

	uint8_t pVal[2] = {address, val};
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	733b      	strb	r3, [r7, #12]
 80082dc:	78bb      	ldrb	r3, [r7, #2]
 80082de:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(this->_ui2c, MAX30100_DEVICE, pVal, 2, 100);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	f107 020c 	add.w	r2, r7, #12
 80082e8:	2364      	movs	r3, #100	; 0x64
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	2302      	movs	r3, #2
 80082ee:	21ae      	movs	r1, #174	; 0xae
 80082f0:	f7fb f8ba 	bl	8003468 <HAL_I2C_Master_Transmit>
 80082f4:	4603      	mov	r3, r0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <max30100_read_register>:

HAL_StatusTypeDef max30100_read_register(max30100_config_t *this,
		uint8_t address, uint8_t *reg) {
 80082fe:	b580      	push	{r7, lr}
 8008300:	b088      	sub	sp, #32
 8008302:	af04      	add	r7, sp, #16
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	460b      	mov	r3, r1
 8008308:	607a      	str	r2, [r7, #4]
 800830a:	72fb      	strb	r3, [r7, #11]
//	return I2C_MasterByteRead(this->_ui2c, MAX30100_DEVICE, address, reg,
//			100);
	return HAL_I2C_Mem_Read(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, reg, 1, 100);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	7afb      	ldrb	r3, [r7, #11]
 8008312:	b29a      	uxth	r2, r3
 8008314:	2364      	movs	r3, #100	; 0x64
 8008316:	9302      	str	r3, [sp, #8]
 8008318:	2301      	movs	r3, #1
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	2301      	movs	r3, #1
 8008322:	21ae      	movs	r1, #174	; 0xae
 8008324:	f7fb f99e 	bl	8003664 <HAL_I2C_Mem_Read>
 8008328:	4603      	mov	r3, r0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <max30100_read_from>:

// Reads num bytes starting from address register on device in to _buff array
HAL_StatusTypeDef max30100_read_from(max30100_config_t *this, uint8_t address,
		uint8_t *reg, uint8_t size) {
 8008332:	b580      	push	{r7, lr}
 8008334:	b088      	sub	sp, #32
 8008336:	af04      	add	r7, sp, #16
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	461a      	mov	r2, r3
 800833e:	460b      	mov	r3, r1
 8008340:	72fb      	strb	r3, [r7, #11]
 8008342:	4613      	mov	r3, r2
 8008344:	72bb      	strb	r3, [r7, #10]
	if (!size)
 8008346:	7abb      	ldrb	r3, [r7, #10]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <max30100_read_from+0x1e>
		return HAL_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	e00f      	b.n	8008370 <max30100_read_from+0x3e>

//	return I2C_MasterMultiRead(this->_ui2c, MAX30100_DEVICE, address, size,
//			reg, 100);
	return HAL_I2C_Mem_Read(this->_ui2c, MAX30100_DEVICE, address, I2C_MEMADD_SIZE_8BIT, reg, size, 100);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	b29a      	uxth	r2, r3
 8008358:	7abb      	ldrb	r3, [r7, #10]
 800835a:	b29b      	uxth	r3, r3
 800835c:	2164      	movs	r1, #100	; 0x64
 800835e:	9102      	str	r1, [sp, #8]
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	2301      	movs	r3, #1
 8008368:	21ae      	movs	r1, #174	; 0xae
 800836a:	f7fb f97b 	bl	8003664 <HAL_I2C_Mem_Read>
 800836e:	4603      	mov	r3, r0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <max30100_set_mode>:

HAL_StatusTypeDef max30100_set_mode(max30100_config_t *this,
		max30100_mode_t mode) {
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
	uint8_t current_mode_reg;
	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_MODE_CONF,
 8008384:	f107 030e 	add.w	r3, r7, #14
 8008388:	461a      	mov	r2, r3
 800838a:	2106      	movs	r1, #6
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff ffb6 	bl	80082fe <max30100_read_register>
 8008392:	4603      	mov	r3, r0
 8008394:	73fb      	strb	r3, [r7, #15]
			&current_mode_reg);
	if (ret != HAL_OK)
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <max30100_set_mode+0x28>
		return ret;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	e00f      	b.n	80083c0 <max30100_set_mode+0x48>
	return max30100_write_register(this, MAX30100_MODE_CONF,
			(current_mode_reg & 0xF8) | mode);
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	b25b      	sxtb	r3, r3
 80083a4:	f023 0307 	bic.w	r3, r3, #7
 80083a8:	b25a      	sxtb	r2, r3
 80083aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_MODE_CONF,
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	2106      	movs	r1, #6
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff ff85 	bl	80082c8 <max30100_write_register>
 80083be:	4603      	mov	r3, r0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <max30100_shutdown>:

HAL_StatusTypeDef max30100_shutdown(max30100_config_t *this) {
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	uint8_t current_mode_reg;

	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_MODE_CONF,
 80083d0:	f107 030e 	add.w	r3, r7, #14
 80083d4:	461a      	mov	r2, r3
 80083d6:	2106      	movs	r1, #6
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff ff90 	bl	80082fe <max30100_read_register>
 80083de:	4603      	mov	r3, r0
 80083e0:	73fb      	strb	r3, [r7, #15]
			&current_mode_reg);
	if (ret != HAL_OK)
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <max30100_shutdown+0x24>
		return ret;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	e009      	b.n	8008400 <max30100_shutdown+0x38>
	return max30100_write_register(this, MAX30100_MODE_CONF,
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	461a      	mov	r2, r3
 80083f6:	2106      	movs	r1, #6
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff ff65 	bl	80082c8 <max30100_write_register>
 80083fe:	4603      	mov	r3, r0
			(current_mode_reg) | MAX30100_MODE_SHDN);
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <max30100_resume>:

HAL_StatusTypeDef max30100_resume(max30100_config_t *this) {
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	uint8_t current_mode_reg;

	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_MODE_CONF,
 8008410:	f107 030e 	add.w	r3, r7, #14
 8008414:	461a      	mov	r2, r3
 8008416:	2106      	movs	r1, #6
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff ff70 	bl	80082fe <max30100_read_register>
 800841e:	4603      	mov	r3, r0
 8008420:	73fb      	strb	r3, [r7, #15]
			&current_mode_reg);
	if (ret != HAL_OK)
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <max30100_resume+0x24>
		return ret;
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	e00b      	b.n	8008444 <max30100_resume+0x3c>
	current_mode_reg &= ~MAX30100_MODE_SHDN;
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008432:	b2db      	uxtb	r3, r3
 8008434:	73bb      	strb	r3, [r7, #14]
	return max30100_write_register(this, MAX30100_MODE_CONF,
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	461a      	mov	r2, r3
 800843a:	2106      	movs	r1, #6
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff ff43 	bl	80082c8 <max30100_write_register>
 8008442:	4603      	mov	r3, r0
			(current_mode_reg));
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <max30100_set_high_res>:

HAL_StatusTypeDef max30100_set_high_res(max30100_config_t *this, bool enabled) {
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
	uint8_t previous;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 8008458:	f107 030e 	add.w	r3, r7, #14
 800845c:	461a      	mov	r2, r3
 800845e:	2107      	movs	r1, #7
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff ff4c 	bl	80082fe <max30100_read_register>
 8008466:	4603      	mov	r3, r0
 8008468:	73fb      	strb	r3, [r7, #15]
			&previous);
	if (ret != HAL_OK)
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <max30100_set_high_res+0x28>
		return ret;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	e017      	b.n	80084a4 <max30100_set_high_res+0x58>
	if (enabled) {
 8008474:	78fb      	ldrb	r3, [r7, #3]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <max30100_set_high_res+0x44>
		return max30100_write_register(this, MAX30100_SPO2_CONF,
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008480:	b2db      	uxtb	r3, r3
 8008482:	461a      	mov	r2, r3
 8008484:	2107      	movs	r1, #7
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff ff1e 	bl	80082c8 <max30100_write_register>
 800848c:	4603      	mov	r3, r0
 800848e:	e009      	b.n	80084a4 <max30100_set_high_res+0x58>
				previous | MAX30100_SPO2_HI_RES_EN);
	} else {
		return max30100_write_register(this, MAX30100_SPO2_CONF,
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008496:	b2db      	uxtb	r3, r3
 8008498:	461a      	mov	r2, r3
 800849a:	2107      	movs	r1, #7
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff ff13 	bl	80082c8 <max30100_write_register>
 80084a2:	4603      	mov	r3, r0
				previous & ~MAX30100_SPO2_HI_RES_EN);
	}
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <max30100_set_sampling_rate>:

HAL_StatusTypeDef max30100_set_sampling_rate(max30100_config_t *this,
		max30100_sampling_rate_t rate) {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
	uint8_t current_spO2_reg;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 80084b8:	f107 030e 	add.w	r3, r7, #14
 80084bc:	461a      	mov	r2, r3
 80084be:	2107      	movs	r1, #7
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff ff1c 	bl	80082fe <max30100_read_register>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73fb      	strb	r3, [r7, #15]
			&current_spO2_reg);
	if (ret != HAL_OK)
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <max30100_set_sampling_rate+0x28>
		return ret;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	e010      	b.n	80084f6 <max30100_set_sampling_rate+0x4a>
	return max30100_write_register(this, MAX30100_SPO2_CONF,
			(current_spO2_reg & 0xE3) | (rate << 2));
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	b25b      	sxtb	r3, r3
 80084d8:	f023 031c 	bic.w	r3, r3, #28
 80084dc:	b25a      	sxtb	r2, r3
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	b25b      	sxtb	r3, r3
 80084e4:	4313      	orrs	r3, r2
 80084e6:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_SPO2_CONF,
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	2107      	movs	r1, #7
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff feea 	bl	80082c8 <max30100_write_register>
 80084f4:	4603      	mov	r3, r0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <max30100_set_pulse_width>:

HAL_StatusTypeDef max30100_set_pulse_width(max30100_config_t *this,
		max30100_pulse_width_t pw) {
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
	uint8_t current_spO2_reg;

	//Tratar erros
	HAL_StatusTypeDef ret = max30100_read_register(this, MAX30100_SPO2_CONF,
 800850a:	f107 030e 	add.w	r3, r7, #14
 800850e:	461a      	mov	r2, r3
 8008510:	2107      	movs	r1, #7
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff fef3 	bl	80082fe <max30100_read_register>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]
			&current_spO2_reg);
	if (ret != HAL_OK)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <max30100_set_pulse_width+0x28>
		return ret;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	e00f      	b.n	8008546 <max30100_set_pulse_width+0x48>
	return max30100_write_register(this, MAX30100_SPO2_CONF,
			(current_spO2_reg & 0xFC) | pw);
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	b25b      	sxtb	r3, r3
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	b25a      	sxtb	r2, r3
 8008530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008534:	4313      	orrs	r3, r2
 8008536:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_SPO2_CONF,
 8008538:	b2db      	uxtb	r3, r3
 800853a:	461a      	mov	r2, r3
 800853c:	2107      	movs	r1, #7
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff fec2 	bl	80082c8 <max30100_write_register>
 8008544:	4603      	mov	r3, r0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <max30100_set_led_current>:

HAL_StatusTypeDef max30100_set_led_current(max30100_config_t *this,
		max30100_current_t red_current, max30100_current_t ir_current) {
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
 800855a:	4613      	mov	r3, r2
 800855c:	70bb      	strb	r3, [r7, #2]
	//Tratar erros
	return max30100_write_register(this, MAX30100_LED_CONF,
			(red_current << 4) | ir_current);
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	b25a      	sxtb	r2, r3
 8008564:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008568:	4313      	orrs	r3, r2
 800856a:	b25b      	sxtb	r3, r3
	return max30100_write_register(this, MAX30100_LED_CONF,
 800856c:	b2db      	uxtb	r3, r3
 800856e:	461a      	mov	r2, r3
 8008570:	2109      	movs	r1, #9
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7ff fea8 	bl	80082c8 <max30100_write_register>
 8008578:	4603      	mov	r3, r0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <max30100_read_fifo>:
	*temperature = (float) temp + temp_fraction;
	return HAL_OK;
}

HAL_StatusTypeDef max30100_read_fifo(max30100_config_t *this,
		max30100_fifo_t *fifo) {
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
	uint8_t buffer[4];
	//Testar erros
	HAL_StatusTypeDef ret = max30100_read_from(this, MAX30100_FIFO_DATA, buffer,
 800858c:	f107 0208 	add.w	r2, r7, #8
 8008590:	2304      	movs	r3, #4
 8008592:	2105      	movs	r1, #5
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff fecc 	bl	8008332 <max30100_read_from>
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
			4);
	if (ret != HAL_OK)
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <max30100_read_fifo+0x26>
		return ret;
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	e014      	b.n	80085d2 <max30100_read_fifo+0x50>
	fifo->raw_ir = ((uint16_t) buffer[0] << 8) | buffer[1];
 80085a8:	7a3b      	ldrb	r3, [r7, #8]
 80085aa:	021b      	lsls	r3, r3, #8
 80085ac:	b21a      	sxth	r2, r3
 80085ae:	7a7b      	ldrb	r3, [r7, #9]
 80085b0:	b21b      	sxth	r3, r3
 80085b2:	4313      	orrs	r3, r2
 80085b4:	b21b      	sxth	r3, r3
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	801a      	strh	r2, [r3, #0]
	fifo->raw_red = ((uint16_t) buffer[2] << 8) | buffer[3];
 80085bc:	7abb      	ldrb	r3, [r7, #10]
 80085be:	021b      	lsls	r3, r3, #8
 80085c0:	b21a      	sxth	r2, r3
 80085c2:	7afb      	ldrb	r3, [r7, #11]
 80085c4:	b21b      	sxth	r3, r3
 80085c6:	4313      	orrs	r3, r2
 80085c8:	b21b      	sxth	r3, r3
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	805a      	strh	r2, [r3, #2]

	return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <max30100_dc_removal>:

max30100_dc_filter_t max30100_dc_removal(float x, float prev_w, float alpha) {
 80085da:	b480      	push	{r7}
 80085dc:	b08b      	sub	sp, #44	; 0x2c
 80085de:	af00      	add	r7, sp, #0
 80085e0:	ed87 0a05 	vstr	s0, [r7, #20]
 80085e4:	edc7 0a04 	vstr	s1, [r7, #16]
 80085e8:	ed87 1a03 	vstr	s2, [r7, #12]
	max30100_dc_filter_t filtered = { };
 80085ec:	f107 0318 	add.w	r3, r7, #24
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	605a      	str	r2, [r3, #4]
	filtered.w = x + alpha * prev_w;
 80085f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80085fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80085fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008602:	edd7 7a05 	vldr	s15, [r7, #20]
 8008606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800860a:	edc7 7a06 	vstr	s15, [r7, #24]
	filtered.result = filtered.w - prev_w;
 800860e:	ed97 7a06 	vldr	s14, [r7, #24]
 8008612:	edd7 7a04 	vldr	s15, [r7, #16]
 8008616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800861a:	edc7 7a07 	vstr	s15, [r7, #28]

	return filtered;
 800861e:	f107 0320 	add.w	r3, r7, #32
 8008622:	f107 0218 	add.w	r2, r7, #24
 8008626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800862a:	e883 0003 	stmia.w	r3, {r0, r1}
 800862e:	6a3a      	ldr	r2, [r7, #32]
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	ee07 2a10 	vmov	s14, r2
 8008636:	ee07 3a90 	vmov	s15, r3
}
 800863a:	eeb0 0a47 	vmov.f32	s0, s14
 800863e:	eef0 0a67 	vmov.f32	s1, s15
 8008642:	372c      	adds	r7, #44	; 0x2c
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	0000      	movs	r0, r0
	...

08008650 <max30100_lpb_filter>:

void max30100_lpb_filter(max30100_config_t *this, float x) {
 8008650:	b5b0      	push	{r4, r5, r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	ed87 0a00 	vstr	s0, [r7]
	this->lpb_filter_ir.v[0] = this->lpb_filter_ir.v[1];
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	651a      	str	r2, [r3, #80]	; 0x50

	//Fs = 100Hz and Fc = 10Hz
	this->lpb_filter_ir.v[1] = (2.452372752527856026e-1 * x)
 8008664:	6838      	ldr	r0, [r7, #0]
 8008666:	f7f7 ff77 	bl	8000558 <__aeabi_f2d>
 800866a:	a319      	add	r3, pc, #100	; (adr r3, 80086d0 <max30100_lpb_filter+0x80>)
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	f7f7 ffca 	bl	8000608 <__aeabi_dmul>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4614      	mov	r4, r2
 800867a:	461d      	mov	r5, r3
			+ (0.50952544949442879485 * this->lpb_filter_ir.v[0]);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008680:	4618      	mov	r0, r3
 8008682:	f7f7 ff69 	bl	8000558 <__aeabi_f2d>
 8008686:	a314      	add	r3, pc, #80	; (adr r3, 80086d8 <max30100_lpb_filter+0x88>)
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f7f7 ffbc 	bl	8000608 <__aeabi_dmul>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4620      	mov	r0, r4
 8008696:	4629      	mov	r1, r5
 8008698:	f7f7 fe00 	bl	800029c <__adddf3>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4610      	mov	r0, r2
 80086a2:	4619      	mov	r1, r3
 80086a4:	f7f8 fa88 	bl	8000bb8 <__aeabi_d2f>
 80086a8:	4602      	mov	r2, r0
	this->lpb_filter_ir.v[1] = (2.452372752527856026e-1 * x)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	655a      	str	r2, [r3, #84]	; 0x54
	//Fs = 100Hz and Fc = 4Hz
	//this->lpb_filter_ir.v[1] = (1.367287359973195227e-1 * x)
	//                   + (0.72654252800536101020 * this->lpb_filter_ir.v[0]);
	//Very precise butterworth filter

	this->lpb_filter_ir.result = this->lpb_filter_ir.v[0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
			+ this->lpb_filter_ir.v[1];
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80086ba:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->lpb_filter_ir.result = this->lpb_filter_ir.v[0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bdb0      	pop	{r4, r5, r7, pc}
 80086cc:	f3af 8000 	nop.w
 80086d0:	5e7c4548 	.word	0x5e7c4548
 80086d4:	3fcf63ef 	.word	0x3fcf63ef
 80086d8:	50c1dd5c 	.word	0x50c1dd5c
 80086dc:	3fe04e08 	.word	0x3fe04e08

080086e0 <max30100_mean_diff>:

float max30100_mean_diff(max30100_config_t *this, float M) {
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	ed87 0a00 	vstr	s0, [r7]
	float avg = 0;
 80086ec:	f04f 0300 	mov.w	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]

	this->mean_diff_ir.sum -=
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
			this->mean_diff_ir.values[this->mean_diff_ir.index];
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	edd3 7a00 	vldr	s15, [r3]
	this->mean_diff_ir.sum -=
 800870a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	this->mean_diff_ir.values[this->mean_diff_ir.index] = M;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	601a      	str	r2, [r3, #0]
	this->mean_diff_ir.sum +=
			this->mean_diff_ir.values[this->mean_diff_ir.index++];
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008730:	1c59      	adds	r1, r3, #1
 8008732:	b2c8      	uxtb	r0, r1
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	ed93 7a00 	vldr	s14, [r3]
	this->mean_diff_ir.sum +=
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	this->mean_diff_ir.index = this->mean_diff_ir.index
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
			% this->mean_filter_size;
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
	this->mean_diff_ir.index = this->mean_diff_ir.index
 800875e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008762:	fb01 f202 	mul.w	r2, r1, r2
 8008766:	1a9b      	subs	r3, r3, r2
 8008768:	b2da      	uxtb	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	if (this->mean_diff_ir.count < this->mean_filter_size)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800877c:	429a      	cmp	r2, r3
 800877e:	d207      	bcs.n	8008790 <max30100_mean_diff+0xb0>
		this->mean_diff_ir.count++;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8008786:	3301      	adds	r3, #1
 8008788:	b2da      	uxtb	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	avg = this->mean_diff_ir.sum / this->mean_diff_ir.count;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a8:	edc7 7a03 	vstr	s15, [r7, #12]
	return avg - M;
 80087ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80087b0:	edd7 7a00 	vldr	s15, [r7]
 80087b4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80087b8:	eeb0 0a67 	vmov.f32	s0, s15
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
	...

080087c8 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af04      	add	r7, sp, #16
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	2364      	movs	r3, #100	; 0x64
 80087da:	9302      	str	r3, [sp, #8]
 80087dc:	2303      	movs	r3, #3
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	f107 030c 	add.w	r3, r7, #12
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	2301      	movs	r3, #1
 80087e8:	21b4      	movs	r1, #180	; 0xb4
 80087ea:	480b      	ldr	r0, [pc, #44]	; (8008818 <mlx90614_read16+0x50>)
 80087ec:	f7fa ff3a 	bl	8003664 <HAL_I2C_Mem_Read>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <mlx90614_read16+0x32>
    return false;
 80087f6:	2300      	movs	r3, #0
 80087f8:	e009      	b.n	800880e <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 80087fa:	7b3b      	ldrb	r3, [r7, #12]
 80087fc:	b21a      	sxth	r2, r3
 80087fe:	7b7b      	ldrb	r3, [r7, #13]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	b21b      	sxth	r3, r3
 8008804:	4313      	orrs	r3, r2
 8008806:	b21a      	sxth	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	801a      	strh	r2, [r3, #0]
  return true;
 800880c:	2301      	movs	r3, #1
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	200002b0 	.word	0x200002b0

0800881c <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 8008826:	4b21      	ldr	r3, [pc, #132]	; (80088ac <mlx90614_calcTemperature+0x90>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d108      	bne.n	8008840 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 800882e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800883a:	edc7 7a03 	vstr	s15, [r7, #12]
 800883e:	e02b      	b.n	8008898 <mlx90614_calcTemperature+0x7c>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 8008840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008844:	ee07 3a90 	vmov	s15, r3
 8008848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800884c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80088b0 <mlx90614_calcTemperature+0x94>
 8008850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008854:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 8008858:	4b14      	ldr	r3, [pc, #80]	; (80088ac <mlx90614_calcTemperature+0x90>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d01b      	beq.n	8008898 <mlx90614_calcTemperature+0x7c>
		{
			retTemp -= 273.15f;
 8008860:	edd7 7a03 	vldr	s15, [r7, #12]
 8008864:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80088b4 <mlx90614_calcTemperature+0x98>
 8008868:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800886c:	edc7 7a03 	vstr	s15, [r7, #12]
			if(mlx90614.unit == MLX90614_UNIT_F)
 8008870:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <mlx90614_calcTemperature+0x90>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b03      	cmp	r3, #3
 8008876:	d10f      	bne.n	8008898 <mlx90614_calcTemperature+0x7c>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8008878:	edd7 7a03 	vldr	s15, [r7, #12]
 800887c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8008880:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008884:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8008888:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800888c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80088b8 <mlx90614_calcTemperature+0x9c>
 8008890:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008894:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}
	return retTemp;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	ee07 3a90 	vmov	s15, r3
}
 800889e:	eeb0 0a67 	vmov.f32	s0, s15
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	200005c8 	.word	0x200005c8
 80088b0:	3ca3d70a 	.word	0x3ca3d70a
 80088b4:	43889333 	.word	0x43889333
 80088b8:	42000000 	.word	0x42000000

080088bc <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 80088c0:	2234      	movs	r2, #52	; 0x34
 80088c2:	2100      	movs	r1, #0
 80088c4:	4821      	ldr	r0, [pc, #132]	; (800894c <mlx90614_init+0x90>)
 80088c6:	f004 f8b1 	bl	800ca2c <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 80088ca:	4b20      	ldr	r3, [pc, #128]	; (800894c <mlx90614_init+0x90>)
 80088cc:	2202      	movs	r2, #2
 80088ce:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 80088d0:	2364      	movs	r3, #100	; 0x64
 80088d2:	2201      	movs	r2, #1
 80088d4:	21b4      	movs	r1, #180	; 0xb4
 80088d6:	481e      	ldr	r0, [pc, #120]	; (8008950 <mlx90614_init+0x94>)
 80088d8:	f7fb f8ea 	bl	8003ab0 <HAL_I2C_IsDeviceReady>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <mlx90614_init+0x2a>
    return false;
 80088e2:	2300      	movs	r3, #0
 80088e4:	e030      	b.n	8008948 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 80088e6:	491b      	ldr	r1, [pc, #108]	; (8008954 <mlx90614_init+0x98>)
 80088e8:	2025      	movs	r0, #37	; 0x25
 80088ea:	f7ff ff6d 	bl	80087c8 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 80088ee:	2000      	movs	r0, #0
 80088f0:	f000 f832 	bl	8008958 <mlx90614_readID>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f083 0301 	eor.w	r3, r3, #1
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <mlx90614_init+0x48>
    return false;
 8008900:	2300      	movs	r3, #0
 8008902:	e021      	b.n	8008948 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 8008904:	2000      	movs	r0, #0
 8008906:	f000 f861 	bl	80089cc <mlx90614_getEmissivity>
 800890a:	4603      	mov	r3, r0
 800890c:	f083 0301 	eor.w	r3, r3, #1
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <mlx90614_init+0x5e>
    return false;
 8008916:	2300      	movs	r3, #0
 8008918:	e016      	b.n	8008948 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 800891a:	2000      	movs	r0, #0
 800891c:	f000 f890 	bl	8008a40 <mlx90614_getMax>
 8008920:	4603      	mov	r3, r0
 8008922:	f083 0301 	eor.w	r3, r3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <mlx90614_init+0x74>
    return false;
 800892c:	2300      	movs	r3, #0
 800892e:	e00b      	b.n	8008948 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 8008930:	2000      	movs	r0, #0
 8008932:	f000 f8a9 	bl	8008a88 <mlx90614_getMin>
 8008936:	4603      	mov	r3, r0
 8008938:	f083 0301 	eor.w	r3, r3, #1
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <mlx90614_init+0x8a>
    return false;
 8008942:	2300      	movs	r3, #0
 8008944:	e000      	b.n	8008948 <mlx90614_init+0x8c>

  return true;
 8008946:	2301      	movs	r3, #1
}
 8008948:	4618      	mov	r0, r3
 800894a:	bd80      	pop	{r7, pc}
 800894c:	200005c8 	.word	0x200005c8
 8008950:	200002b0 	.word	0x200002b0
 8008954:	200005f8 	.word	0x200005f8

08008958 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 8008960:	2300      	movs	r3, #0
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	e028      	b.n	80089b8 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	333c      	adds	r3, #60	; 0x3c
 8008970:	b2db      	uxtb	r3, r3
 8008972:	f107 020a 	add.w	r2, r7, #10
 8008976:	4611      	mov	r1, r2
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff ff25 	bl	80087c8 <mlx90614_read16>
 800897e:	4603      	mov	r3, r0
 8008980:	f083 0301 	eor.w	r3, r3, #1
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <mlx90614_readID+0x36>
			return false;
 800898a:	2300      	movs	r3, #0
 800898c:	e018      	b.n	80089c0 <mlx90614_readID+0x68>
    if(id != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <mlx90614_readID+0x4a>
      id[i] = (uint16_t)temp;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	005b      	lsls	r3, r3, #1
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	4413      	add	r3, r2
 800899c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80089a0:	801a      	strh	r2, [r3, #0]
    mlx90614.id[i] = (uint16_t)temp;
 80089a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80089a6:	b299      	uxth	r1, r3
 80089a8:	4a07      	ldr	r2, [pc, #28]	; (80089c8 <mlx90614_readID+0x70>)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3314      	adds	r3, #20
 80089ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3301      	adds	r3, #1
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	ddd3      	ble.n	8008966 <mlx90614_readID+0xe>
	}
	return true;
 80089be:	2301      	movs	r3, #1
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	200005c8 	.word	0x200005c8

080089cc <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 80089d4:	4917      	ldr	r1, [pc, #92]	; (8008a34 <mlx90614_getEmissivity+0x68>)
 80089d6:	2024      	movs	r0, #36	; 0x24
 80089d8:	f7ff fef6 	bl	80087c8 <mlx90614_read16>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d022      	beq.n	8008a28 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 80089e2:	4b15      	ldr	r3, [pc, #84]	; (8008a38 <mlx90614_getEmissivity+0x6c>)
 80089e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089f2:	eddf 6a12 	vldr	s13, [pc, #72]	; 8008a3c <mlx90614_getEmissivity+0x70>
 80089f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80089fa:	4b0f      	ldr	r3, [pc, #60]	; (8008a38 <mlx90614_getEmissivity+0x6c>)
 80089fc:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00e      	beq.n	8008a24 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8008a06:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <mlx90614_getEmissivity+0x6c>)
 8008a08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a16:	eddf 6a09 	vldr	s13, [pc, #36]	; 8008a3c <mlx90614_getEmissivity+0x70>
 8008a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e000      	b.n	8008a2a <mlx90614_getEmissivity+0x5e>
	}
	return false;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	200005ca 	.word	0x200005ca
 8008a38:	200005c8 	.word	0x200005c8
 8008a3c:	477fff00 	.word	0x477fff00

08008a40 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 8008a48:	490d      	ldr	r1, [pc, #52]	; (8008a80 <mlx90614_getMax+0x40>)
 8008a4a:	2020      	movs	r0, #32
 8008a4c:	f7ff febc 	bl	80087c8 <mlx90614_read16>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00e      	beq.n	8008a74 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 8008a5c:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <mlx90614_getMax+0x44>)
 8008a5e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <mlx90614_getMax+0x36>
	}
	return false;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	200005d2 	.word	0x200005d2
 8008a84:	200005c8 	.word	0x200005c8

08008a88 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 8008a90:	490d      	ldr	r1, [pc, #52]	; (8008ac8 <mlx90614_getMin+0x40>)
 8008a92:	2021      	movs	r0, #33	; 0x21
 8008a94:	f7ff fe98 	bl	80087c8 <mlx90614_read16>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00e      	beq.n	8008abc <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d009      	beq.n	8008ab8 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 8008aa4:	4b09      	ldr	r3, [pc, #36]	; (8008acc <mlx90614_getMin+0x44>)
 8008aa6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <mlx90614_getMin+0x36>
	}
	return false;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	200005d4 	.word	0x200005d4
 8008acc:	200005c8 	.word	0x200005c8

08008ad0 <mlx90614_getObject1>:
	}
	return false;
}
//###################################################################################################
bool mlx90614_getObject1(float *objectTemp)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOBJ1, &mlx90614.rawObject1))
 8008ad8:	4911      	ldr	r1, [pc, #68]	; (8008b20 <mlx90614_getObject1+0x50>)
 8008ada:	2007      	movs	r0, #7
 8008adc:	f7ff fe74 	bl	80087c8 <mlx90614_read16>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d016      	beq.n	8008b14 <mlx90614_getObject1+0x44>
	{
		if(mlx90614.rawObject1 & 0x8000)
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	; (8008b24 <mlx90614_getObject1+0x54>)
 8008ae8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	da01      	bge.n	8008af4 <mlx90614_getObject1+0x24>
			return false;
 8008af0:	2300      	movs	r3, #0
 8008af2:	e010      	b.n	8008b16 <mlx90614_getObject1+0x46>
		if(objectTemp != NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <mlx90614_getObject1+0x40>
      *objectTemp =  mlx90614_calcTemperature(mlx90614.rawObject1);
 8008afa:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <mlx90614_getObject1+0x54>)
 8008afc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff fe8b 	bl	800881c <mlx90614_calcTemperature>
 8008b06:	eef0 7a40 	vmov.f32	s15, s0
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <mlx90614_getObject1+0x46>
	}
	return false;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	200005ce 	.word	0x200005ce
 8008b24:	200005c8 	.word	0x200005c8

08008b28 <sd_mount>:

//Read 30 bytes from "test.txt" on the SD card
BYTE readBuf[100];
uint8_t b;

void sd_mount() {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	490b      	ldr	r1, [pc, #44]	; (8008b5c <sd_mount+0x34>)
 8008b30:	480b      	ldr	r0, [pc, #44]	; (8008b60 <sd_mount+0x38>)
 8008b32:	f003 f807 	bl	800bb44 <f_mount>
 8008b36:	4603      	mov	r3, r0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <sd_mount+0x3c>)
 8008b3c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8008b3e:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <sd_mount+0x3c>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d008      	beq.n	8008b58 <sd_mount+0x30>
		print("Error in Mounting --- ");
 8008b46:	4808      	ldr	r0, [pc, #32]	; (8008b68 <sd_mount+0x40>)
 8008b48:	f7fe fb8a 	bl	8007260 <print>
		print("f_mount error (%i)\r\n", fres);
 8008b4c:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <sd_mount+0x3c>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	4619      	mov	r1, r3
 8008b52:	4806      	ldr	r0, [pc, #24]	; (8008b6c <sd_mount+0x44>)
 8008b54:	f7fe fb84 	bl	8007260 <print>
//		while (1)
//			;
	}
}
 8008b58:	bf00      	nop
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	0801012c 	.word	0x0801012c
 8008b60:	200005fc 	.word	0x200005fc
 8008b64:	20000a5c 	.word	0x20000a5c
 8008b68:	08010130 	.word	0x08010130
 8008b6c:	08010148 	.word	0x08010148

08008b70 <sd_space>:

void sd_space() {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS *getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8008b76:	463a      	mov	r2, r7
 8008b78:	1d3b      	adds	r3, r7, #4
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4817      	ldr	r0, [pc, #92]	; (8008bdc <sd_space+0x6c>)
 8008b7e:	f003 fdd5 	bl	800c72c <f_getfree>
 8008b82:	4603      	mov	r3, r0
 8008b84:	461a      	mov	r2, r3
 8008b86:	4b16      	ldr	r3, [pc, #88]	; (8008be0 <sd_space+0x70>)
 8008b88:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8008b8a:	4b15      	ldr	r3, [pc, #84]	; (8008be0 <sd_space+0x70>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d008      	beq.n	8008ba4 <sd_space+0x34>
		print("Error in fetching space data --- ");
 8008b92:	4814      	ldr	r0, [pc, #80]	; (8008be4 <sd_space+0x74>)
 8008b94:	f7fe fb64 	bl	8007260 <print>
		print("f_getfree error (%i)\r\n", fres);
 8008b98:	4b11      	ldr	r3, [pc, #68]	; (8008be0 <sd_space+0x70>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4812      	ldr	r0, [pc, #72]	; (8008be8 <sd_space+0x78>)
 8008ba0:	f7fe fb5e 	bl	8007260 <print>
//		while (1)
//			;
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	3b02      	subs	r3, #2
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	8952      	ldrh	r2, [r2, #10]
 8008bae:	fb02 f303 	mul.w	r3, r2, r3
 8008bb2:	60fb      	str	r3, [r7, #12]
	free_sectors = free_clusters * getFreeFs->csize;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	895b      	ldrh	r3, [r3, #10]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	fb02 f303 	mul.w	r3, r2, r3
 8008bc0:	60bb      	str	r3, [r7, #8]

	print(
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	0859      	lsrs	r1, r3, #1
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	085b      	lsrs	r3, r3, #1
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4807      	ldr	r0, [pc, #28]	; (8008bec <sd_space+0x7c>)
 8008bce:	f7fe fb47 	bl	8007260 <print>
			"SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n",
			total_sectors / 2, free_sectors / 2);
}
 8008bd2:	bf00      	nop
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	0801012c 	.word	0x0801012c
 8008be0:	20000a5c 	.word	0x20000a5c
 8008be4:	08010160 	.word	0x08010160
 8008be8:	08010184 	.word	0x08010184
 8008bec:	0801019c 	.word	0x0801019c

08008bf0 <sd_openFile>:

int sd_openFile(char *c) {
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08a      	sub	sp, #40	; 0x28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
	BYTE fileName[30];
	strncpy((char*) fileName, c, 30);
 8008bf8:	f107 0308 	add.w	r3, r7, #8
 8008bfc:	221e      	movs	r2, #30
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f004 fc95 	bl	800d530 <strncpy>
	fres = f_open(&fil, c, FA_READ);
 8008c06:	2201      	movs	r2, #1
 8008c08:	6879      	ldr	r1, [r7, #4]
 8008c0a:	480f      	ldr	r0, [pc, #60]	; (8008c48 <sd_openFile+0x58>)
 8008c0c:	f002 ffe0 	bl	800bbd0 <f_open>
 8008c10:	4603      	mov	r3, r0
 8008c12:	461a      	mov	r2, r3
 8008c14:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <sd_openFile+0x5c>)
 8008c16:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <sd_openFile+0x5c>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00d      	beq.n	8008c3c <sd_openFile+0x4c>
		print("Could not open '%s'", fileName);
 8008c20:	f107 0308 	add.w	r3, r7, #8
 8008c24:	4619      	mov	r1, r3
 8008c26:	480a      	ldr	r0, [pc, #40]	; (8008c50 <sd_openFile+0x60>)
 8008c28:	f7fe fb1a 	bl	8007260 <print>
		print("f_open error (%i)\r\n", fres);
 8008c2c:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <sd_openFile+0x5c>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	4619      	mov	r1, r3
 8008c32:	4808      	ldr	r0, [pc, #32]	; (8008c54 <sd_openFile+0x64>)
 8008c34:	f7fe fb14 	bl	8007260 <print>
		return 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e000      	b.n	8008c3e <sd_openFile+0x4e>
	}
	return 1;
 8008c3c:	2301      	movs	r3, #1
//	print("I was able to open '%s' for reading!\r\n", fileName);
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3728      	adds	r7, #40	; 0x28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	2000082c 	.word	0x2000082c
 8008c4c:	20000a5c 	.word	0x20000a5c
 8008c50:	080101e4 	.word	0x080101e4
 8008c54:	080101f8 	.word	0x080101f8

08008c58 <sd_closeFile>:
		print("f_open error (%i).\r\n", fres);
		return 0;
	}
}

uint8_t sd_closeFile() {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
	fres = f_close(&fil);
 8008c5c:	480c      	ldr	r0, [pc, #48]	; (8008c90 <sd_closeFile+0x38>)
 8008c5e:	f003 fb32 	bl	800c2c6 <f_close>
 8008c62:	4603      	mov	r3, r0
 8008c64:	461a      	mov	r2, r3
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <sd_closeFile+0x3c>)
 8008c68:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8008c6a:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <sd_closeFile+0x3c>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <sd_closeFile+0x1e>
		return 1;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e009      	b.n	8008c8a <sd_closeFile+0x32>
	} else {
		print("Could not close the file.");
 8008c76:	4808      	ldr	r0, [pc, #32]	; (8008c98 <sd_closeFile+0x40>)
 8008c78:	f7fe faf2 	bl	8007260 <print>
		print("f_close error (%i).\r\n", fres);
 8008c7c:	4b05      	ldr	r3, [pc, #20]	; (8008c94 <sd_closeFile+0x3c>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	4619      	mov	r1, r3
 8008c82:	4806      	ldr	r0, [pc, #24]	; (8008c9c <sd_closeFile+0x44>)
 8008c84:	f7fe faec 	bl	8007260 <print>
		return 0;
 8008c88:	2300      	movs	r3, #0
	}
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	2000082c 	.word	0x2000082c
 8008c94:	20000a5c 	.word	0x20000a5c
 8008c98:	0801023c 	.word	0x0801023c
 8008c9c:	08010258 	.word	0x08010258

08008ca0 <sd_read8bits>:
		print("f_lseek error (%i).\r\n", fres);
		return 0;
	}
}

char sd_read8bits(char *c, int offset) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08c      	sub	sp, #48	; 0x30
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
	BYTE fileName[30];
	strncpy((char*) fileName, c, 30);
 8008caa:	f107 030c 	add.w	r3, r7, #12
 8008cae:	221e      	movs	r2, #30
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f004 fc3c 	bl	800d530 <strncpy>
	char data_buf[2];
	fres = f_lseek(&fil, offset);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4810      	ldr	r0, [pc, #64]	; (8008d00 <sd_read8bits+0x60>)
 8008cbe:	f003 fb2c 	bl	800c31a <f_lseek>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <sd_read8bits+0x64>)
 8008cc8:	701a      	strb	r2, [r3, #0]

	TCHAR *rres = f_gets(data_buf, 2, &fil);
 8008cca:	f107 0308 	add.w	r3, r7, #8
 8008cce:	4a0c      	ldr	r2, [pc, #48]	; (8008d00 <sd_read8bits+0x60>)
 8008cd0:	2102      	movs	r1, #2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f003 fddf 	bl	800c896 <f_gets>
 8008cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (rres != 0) {
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <sd_read8bits+0x44>
//		print("Read string from '%s' contents: %c\r\n", fileName, data_buf[0]);
//		print("Read string from '%s' contents: %c\r\n", fileName, data_buf[1]);
		return data_buf[0];
 8008ce0:	7a3b      	ldrb	r3, [r7, #8]
 8008ce2:	e009      	b.n	8008cf8 <sd_read8bits+0x58>
	} else {
		print("Error in read8 --- ");
 8008ce4:	4808      	ldr	r0, [pc, #32]	; (8008d08 <sd_read8bits+0x68>)
 8008ce6:	f7fe fabb 	bl	8007260 <print>
		print("f_gets error (%i)\r\n", fres);
 8008cea:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <sd_read8bits+0x64>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4806      	ldr	r0, [pc, #24]	; (8008d0c <sd_read8bits+0x6c>)
 8008cf2:	f7fe fab5 	bl	8007260 <print>
		return '\0';
 8008cf6:	2300      	movs	r3, #0
	}
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3730      	adds	r7, #48	; 0x30
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	2000082c 	.word	0x2000082c
 8008d04:	20000a5c 	.word	0x20000a5c
 8008d08:	080102a8 	.word	0x080102a8
 8008d0c:	080102bc 	.word	0x080102bc

08008d10 <sd_read32bits>:
	result = sd_read24bits(c, offset);
	sd_closeFile();
	return result;
}

uint32_t sd_read32bits(char *c, int offset) {
 8008d10:	b590      	push	{r4, r7, lr}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
	uint32_t result;
	((uint8_t*) &result)[0] = sd_read8bits(c, offset);
 8008d1a:	f107 040c 	add.w	r4, r7, #12
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff ffbd 	bl	8008ca0 <sd_read8bits>
 8008d26:	4603      	mov	r3, r0
 8008d28:	7023      	strb	r3, [r4, #0]
	((uint8_t*) &result)[1] = sd_read8bits(c, offset + 1);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	f107 040c 	add.w	r4, r7, #12
 8008d32:	3401      	adds	r4, #1
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff ffb2 	bl	8008ca0 <sd_read8bits>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	7023      	strb	r3, [r4, #0]
	((uint8_t*) &result)[2] = sd_read8bits(c, offset + 2);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	3302      	adds	r3, #2
 8008d44:	f107 040c 	add.w	r4, r7, #12
 8008d48:	3402      	adds	r4, #2
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff ffa7 	bl	8008ca0 <sd_read8bits>
 8008d52:	4603      	mov	r3, r0
 8008d54:	7023      	strb	r3, [r4, #0]
	((uint8_t*) &result)[3] = sd_read8bits(c, offset + 3);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	3303      	adds	r3, #3
 8008d5a:	f107 040c 	add.w	r4, r7, #12
 8008d5e:	3403      	adds	r4, #3
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff ff9c 	bl	8008ca0 <sd_read8bits>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	7023      	strb	r3, [r4, #0]
	return result;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd90      	pop	{r4, r7, pc}
	...

08008d78 <sd_deMount>:

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
}

void sd_deMount() {
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	4903      	ldr	r1, [pc, #12]	; (8008d8c <sd_deMount+0x14>)
 8008d80:	2000      	movs	r0, #0
 8008d82:	f002 fedf 	bl	800bb44 <f_mount>
}
 8008d86:	bf00      	nop
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	0801012c 	.word	0x0801012c

08008d90 <displayPic24bit>:
	offset += 4;
//	sd_closeFile();
	f_close(&fil);
}

void displayPic24bit(char *c, uint16_t row, uint16_t col) {
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	b099      	sub	sp, #100	; 0x64
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6178      	str	r0, [r7, #20]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	827b      	strh	r3, [r7, #18]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	823b      	strh	r3, [r7, #16]
 8008da2:	466b      	mov	r3, sp
 8008da4:	607b      	str	r3, [r7, #4]

	sd_openFile(c);
 8008da6:	6978      	ldr	r0, [r7, #20]
 8008da8:	f7ff ff22 	bl	8008bf0 <sd_openFile>

	uint32_t picWidth, picHeight;
	uint32_t k = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	657b      	str	r3, [r7, #84]	; 0x54
	bool drawFlag = true;
 8008db0:	2301      	movs	r3, #1
 8008db2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	uint8_t r, b, g;
	uint16_t color_buf_val = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t row_pt = row, col_pt = col;
 8008dbc:	8a7b      	ldrh	r3, [r7, #18]
 8008dbe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008dc0:	8a3b      	ldrh	r3, [r7, #16]
 8008dc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
	bool ft = true;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t rotation = LCD_getRotation();
 8008dca:	f001 f851 	bl	8009e70 <LCD_getRotation>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t coordR1 = 0, coordC1 = 0, coordR2 = 0, coordC2 = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8008de0:	2300      	movs	r3, #0
 8008de2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008de6:	2300      	movs	r3, #0
 8008de8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	uint32_t offsetPointer = sd_read8bits(c, 10);
 8008dec:	210a      	movs	r1, #10
 8008dee:	6978      	ldr	r0, [r7, #20]
 8008df0:	f7ff ff56 	bl	8008ca0 <sd_read8bits>
 8008df4:	4603      	mov	r3, r0
 8008df6:	64bb      	str	r3, [r7, #72]	; 0x48
	print("Offset: %d\n", offsetPointer);
 8008df8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008dfa:	48a0      	ldr	r0, [pc, #640]	; (800907c <displayPic24bit+0x2ec>)
 8008dfc:	f7fe fa30 	bl	8007260 <print>
	picWidth = sd_read32bits(c, 18);
 8008e00:	2112      	movs	r1, #18
 8008e02:	6978      	ldr	r0, [r7, #20]
 8008e04:	f7ff ff84 	bl	8008d10 <sd_read32bits>
 8008e08:	6378      	str	r0, [r7, #52]	; 0x34
	print("Width: %d\n", picWidth);
 8008e0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e0c:	489c      	ldr	r0, [pc, #624]	; (8009080 <displayPic24bit+0x2f0>)
 8008e0e:	f7fe fa27 	bl	8007260 <print>
	picHeight = sd_read32bits(c, 22);
 8008e12:	2116      	movs	r1, #22
 8008e14:	6978      	ldr	r0, [r7, #20]
 8008e16:	f7ff ff7b 	bl	8008d10 <sd_read32bits>
 8008e1a:	6338      	str	r0, [r7, #48]	; 0x30
	print("Height: %d\n", picHeight);
 8008e1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e1e:	4899      	ldr	r0, [pc, #612]	; (8009084 <displayPic24bit+0x2f4>)
 8008e20:	f7fe fa1e 	bl	8007260 <print>
	uint8_t color_buf[3 * picWidth];
 8008e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e26:	4613      	mov	r3, r2
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	189e      	adds	r6, r3, r2
 8008e2c:	4633      	mov	r3, r6
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e32:	2300      	movs	r3, #0
 8008e34:	60be      	str	r6, [r7, #8]
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	f04f 0200 	mov.w	r2, #0
 8008e3c:	f04f 0300 	mov.w	r3, #0
 8008e40:	68f9      	ldr	r1, [r7, #12]
 8008e42:	00cb      	lsls	r3, r1, #3
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	00ca      	lsls	r2, r1, #3
 8008e4e:	2300      	movs	r3, #0
 8008e50:	46b2      	mov	sl, r6
 8008e52:	469b      	mov	fp, r3
 8008e54:	f04f 0200 	mov.w	r2, #0
 8008e58:	f04f 0300 	mov.w	r3, #0
 8008e5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e68:	1df3      	adds	r3, r6, #7
 8008e6a:	08db      	lsrs	r3, r3, #3
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	ebad 0d03 	sub.w	sp, sp, r3
 8008e72:	466b      	mov	r3, sp
 8008e74:	3300      	adds	r3, #0
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t pixel_buf[picWidth];
 8008e78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e80:	2300      	movs	r3, #0
 8008e82:	4688      	mov	r8, r1
 8008e84:	4699      	mov	r9, r3
 8008e86:	f04f 0200 	mov.w	r2, #0
 8008e8a:	f04f 0300 	mov.w	r3, #0
 8008e8e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8008e92:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8008e96:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	461d      	mov	r5, r3
 8008ea0:	f04f 0200 	mov.w	r2, #0
 8008ea4:	f04f 0300 	mov.w	r3, #0
 8008ea8:	012b      	lsls	r3, r5, #4
 8008eaa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8008eae:	0122      	lsls	r2, r4, #4
 8008eb0:	004b      	lsls	r3, r1, #1
 8008eb2:	3307      	adds	r3, #7
 8008eb4:	08db      	lsrs	r3, r3, #3
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	ebad 0d03 	sub.w	sp, sp, r3
 8008ebc:	466b      	mov	r3, sp
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	085b      	lsrs	r3, r3, #1
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	623b      	str	r3, [r7, #32]

	if (picWidth + row > 240) {
 8008ec6:	8a7a      	ldrh	r2, [r7, #18]
 8008ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eca:	4413      	add	r3, r2
 8008ecc:	2bf0      	cmp	r3, #240	; 0xf0
 8008ece:	d901      	bls.n	8008ed4 <displayPic24bit+0x144>
		row = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	827b      	strh	r3, [r7, #18]
	}
	if (picHeight + col > 320) {
 8008ed4:	8a3a      	ldrh	r2, [r7, #16]
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	4413      	add	r3, r2
 8008eda:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008ede:	d901      	bls.n	8008ee4 <displayPic24bit+0x154>
		col = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	823b      	strh	r3, [r7, #16]
	}

	if ((rotation & 0x01) == 0) {
 8008ee4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d116      	bne.n	8008f1e <displayPic24bit+0x18e>
		coordR1 = row;
 8008ef0:	8a7b      	ldrh	r3, [r7, #18]
 8008ef2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		coordC1 = col;
 8008ef6:	8a3b      	ldrh	r3, [r7, #16]
 8008ef8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		coordR2 = (row + picWidth - 1);
 8008efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	8a7b      	ldrh	r3, [r7, #18]
 8008f02:	4413      	add	r3, r2
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	3b01      	subs	r3, #1
 8008f08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		coordC2 = (col + picHeight - 1);
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	8a3b      	ldrh	r3, [r7, #16]
 8008f12:	4413      	add	r3, r2
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008f1c:	e01b      	b.n	8008f56 <displayPic24bit+0x1c6>
	} else if ((rotation & 0x01) == 1) {
 8008f1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d015      	beq.n	8008f56 <displayPic24bit+0x1c6>
		coordR1 = col;
 8008f2a:	8a3b      	ldrh	r3, [r7, #16]
 8008f2c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		coordC1 = row;
 8008f30:	8a7b      	ldrh	r3, [r7, #18]
 8008f32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		coordR2 = (col + picHeight - 1);
 8008f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	8a3b      	ldrh	r3, [r7, #16]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	3b01      	subs	r3, #1
 8008f42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		coordC2 = (row + picWidth - 1);
 8008f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	8a7b      	ldrh	r3, [r7, #18]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	3b01      	subs	r3, #1
 8008f52:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}
	LCD_SetAddrWindow(coordR1, coordC1, coordR2, coordC2);
 8008f56:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 8008f5a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008f5e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008f62:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008f66:	f000 ff8f 	bl	8009e88 <LCD_SetAddrWindow>
//	f_lseek(&fil, offsetPointer);
	for (uint32_t i = row + 0; i < row + picHeight; i++) {
 8008f6a:	8a7b      	ldrh	r3, [r7, #18]
 8008f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f6e:	e06f      	b.n	8009050 <displayPic24bit+0x2c0>
		k = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	657b      	str	r3, [r7, #84]	; 0x54
		ft = true;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		color_buf_val = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		for (uint32_t j = col + 0; j < col + picWidth; j++) {
 8008f80:	8a3b      	ldrh	r3, [r7, #16]
 8008f82:	643b      	str	r3, [r7, #64]	; 0x40
 8008f84:	e045      	b.n	8009012 <displayPic24bit+0x282>
			uint8_t *bufPtr;
			if (ft == true) {
 8008f86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d014      	beq.n	8008fb8 <displayPic24bit+0x228>
				f_lseek(&fil, offsetPointer);
 8008f8e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008f90:	483d      	ldr	r0, [pc, #244]	; (8009088 <displayPic24bit+0x2f8>)
 8008f92:	f003 f9c2 	bl	800c31a <f_lseek>
				bufPtr = f_gets(color_buf, sizeof(color_buf), &fil);
 8008f96:	4633      	mov	r3, r6
 8008f98:	4a3b      	ldr	r2, [pc, #236]	; (8009088 <displayPic24bit+0x2f8>)
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f9e:	f003 fc7a 	bl	800c896 <f_gets>
 8008fa2:	61f8      	str	r0, [r7, #28]
				offsetPointer += (3 * picWidth);
 8008fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	4413      	add	r3, r2
 8008fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fae:	4413      	add	r3, r2
 8008fb0:	64bb      	str	r3, [r7, #72]	; 0x48
				ft = false;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			r = color_buf[color_buf_val++];
 8008fb8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	f8a7 205c 	strh.w	r2, [r7, #92]	; 0x5c
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	5c9b      	ldrb	r3, [r3, r2]
 8008fc8:	76fb      	strb	r3, [r7, #27]
			b = color_buf[color_buf_val++];
 8008fca:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	f8a7 205c 	strh.w	r2, [r7, #92]	; 0x5c
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	5c9b      	ldrb	r3, [r3, r2]
 8008fda:	76bb      	strb	r3, [r7, #26]
			g = color_buf[color_buf_val++];
 8008fdc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	f8a7 205c 	strh.w	r2, [r7, #92]	; 0x5c
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	5c9b      	ldrb	r3, [r3, r2]
 8008fec:	767b      	strb	r3, [r7, #25]
//			color_buf_val++;
//			g = *(bufPtr + color_buf_val);
//			color_buf_val++;
//===========================================================//

			pixel_buf[k] = LCD_Color565(g, b, r);
 8008fee:	7e7b      	ldrb	r3, [r7, #25]
 8008ff0:	7eb9      	ldrb	r1, [r7, #26]
 8008ff2:	7efa      	ldrb	r2, [r7, #27]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 f947 	bl	8009288 <LCD_Color565>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	b299      	uxth	r1, r3
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009002:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k++;
 8009006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009008:	3301      	adds	r3, #1
 800900a:	657b      	str	r3, [r7, #84]	; 0x54
		for (uint32_t j = col + 0; j < col + picWidth; j++) {
 800900c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800900e:	3301      	adds	r3, #1
 8009010:	643b      	str	r3, [r7, #64]	; 0x40
 8009012:	8a3a      	ldrh	r2, [r7, #16]
 8009014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009016:	4413      	add	r3, r2
 8009018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800901a:	429a      	cmp	r2, r3
 800901c:	d3b3      	bcc.n	8008f86 <displayPic24bit+0x1f6>
		}
		if (drawFlag == true) {
 800901e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00a      	beq.n	800903c <displayPic24bit+0x2ac>
			LCD_pushColors(pixel_buf, picWidth, drawFlag);
 8009026:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800902a:	461a      	mov	r2, r3
 800902c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800902e:	6a38      	ldr	r0, [r7, #32]
 8009030:	f000 fd74 	bl	8009b1c <LCD_pushColors>
			drawFlag = false;
 8009034:	2300      	movs	r3, #0
 8009036:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800903a:	e006      	b.n	800904a <displayPic24bit+0x2ba>
		} else {
			LCD_pushColors(pixel_buf, picWidth, drawFlag);
 800903c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009040:	461a      	mov	r2, r3
 8009042:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009044:	6a38      	ldr	r0, [r7, #32]
 8009046:	f000 fd69 	bl	8009b1c <LCD_pushColors>
	for (uint32_t i = row + 0; i < row + picHeight; i++) {
 800904a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904c:	3301      	adds	r3, #1
 800904e:	647b      	str	r3, [r7, #68]	; 0x44
 8009050:	8a7a      	ldrh	r2, [r7, #18]
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	4413      	add	r3, r2
 8009056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009058:	429a      	cmp	r2, r3
 800905a:	d389      	bcc.n	8008f70 <displayPic24bit+0x1e0>
		}
	}
	sd_closeFile();
 800905c:	f7ff fdfc 	bl	8008c58 <sd_closeFile>
	LCD_SetAddrWindow(0, 0, 240, 320);
 8009060:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009064:	22f0      	movs	r2, #240	; 0xf0
 8009066:	2100      	movs	r1, #0
 8009068:	2000      	movs	r0, #0
 800906a:	f000 ff0d 	bl	8009e88 <LCD_SetAddrWindow>
 800906e:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8009072:	bf00      	nop
 8009074:	3764      	adds	r7, #100	; 0x64
 8009076:	46bd      	mov	sp, r7
 8009078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907c:	08010528 	.word	0x08010528
 8009080:	08010534 	.word	0x08010534
 8009084:	08010540 	.word	0x08010540
 8009088:	2000082c 	.word	0x2000082c

0800908c <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
	t *= 20;
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	4613      	mov	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4413      	add	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	607b      	str	r3, [r7, #4]
	for (; t > 0; t--) {
 80090a0:	e003      	b.n	80090aa <delay+0x1e>
		__asm("nop");
 80090a2:	bf00      	nop
	for (; t > 0; t--) {
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	607b      	str	r3, [r7, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1f8      	bne.n	80090a2 <delay+0x16>
	}
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
	...

080090c0 <GPIO_Init>:
 * \param 
 * 
 * \return void
 */

static void GPIO_Init(void) {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;
	gpio_clk_en(PORTB);
 80090c6:	4832      	ldr	r0, [pc, #200]	; (8009190 <GPIO_Init+0xd0>)
 80090c8:	f7fd fbd6 	bl	8006878 <gpio_clk_en>
	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 80090cc:	2300      	movs	r3, #0
 80090ce:	9301      	str	r3, [sp, #4]
 80090d0:	2300      	movs	r3, #0
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	2300      	movs	r3, #0
 80090d6:	2201      	movs	r2, #1
 80090d8:	2101      	movs	r1, #1
 80090da:	482e      	ldr	r0, [pc, #184]	; (8009194 <GPIO_Init+0xd4>)
 80090dc:	f7fd fc12 	bl	8006904 <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 80090e0:	2300      	movs	r3, #0
 80090e2:	9301      	str	r3, [sp, #4]
 80090e4:	2300      	movs	r3, #0
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	2300      	movs	r3, #0
 80090ea:	2201      	movs	r2, #1
 80090ec:	2107      	movs	r1, #7
 80090ee:	4829      	ldr	r0, [pc, #164]	; (8009194 <GPIO_Init+0xd4>)
 80090f0:	f7fd fc08 	bl	8006904 <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 80090f4:	2300      	movs	r3, #0
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	2300      	movs	r3, #0
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	2300      	movs	r3, #0
 80090fe:	2201      	movs	r2, #1
 8009100:	2100      	movs	r1, #0
 8009102:	4825      	ldr	r0, [pc, #148]	; (8009198 <GPIO_Init+0xd8>)
 8009104:	f7fd fbfe 	bl	8006904 <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8009108:	2300      	movs	r3, #0
 800910a:	9301      	str	r3, [sp, #4]
 800910c:	2300      	movs	r3, #0
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	2300      	movs	r3, #0
 8009112:	2201      	movs	r2, #1
 8009114:	2101      	movs	r1, #1
 8009116:	4820      	ldr	r0, [pc, #128]	; (8009198 <GPIO_Init+0xd8>)
 8009118:	f7fd fbf4 	bl	8006904 <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 800911c:	2300      	movs	r3, #0
 800911e:	9301      	str	r3, [sp, #4]
 8009120:	2300      	movs	r3, #0
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	2201      	movs	r2, #1
 8009128:	2104      	movs	r1, #4
 800912a:	481b      	ldr	r0, [pc, #108]	; (8009198 <GPIO_Init+0xd8>)
 800912c:	f7fd fbea 	bl	8006904 <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8009130:	2300      	movs	r3, #0
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	2300      	movs	r3, #0
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	2300      	movs	r3, #0
 800913a:	2201      	movs	r2, #1
 800913c:	2108      	movs	r1, #8
 800913e:	4816      	ldr	r0, [pc, #88]	; (8009198 <GPIO_Init+0xd8>)
 8009140:	f7fd fbe0 	bl	8006904 <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8009144:	2300      	movs	r3, #0
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	2300      	movs	r3, #0
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	2300      	movs	r3, #0
 800914e:	2201      	movs	r2, #1
 8009150:	2109      	movs	r1, #9
 8009152:	4811      	ldr	r0, [pc, #68]	; (8009198 <GPIO_Init+0xd8>)
 8009154:	f7fd fbd6 	bl	8006904 <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8009158:	2300      	movs	r3, #0
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	2300      	movs	r3, #0
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	2300      	movs	r3, #0
 8009162:	2201      	movs	r2, #1
 8009164:	210a      	movs	r1, #10
 8009166:	480c      	ldr	r0, [pc, #48]	; (8009198 <GPIO_Init+0xd8>)
 8009168:	f7fd fbcc 	bl	8006904 <gpio_config>
//	gpio_config(PORTB, 3, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 4, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 5, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 10, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
	/*Configure GPIO pins : PB0 PB10 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_10 | GPIO_PIN_4
 800916c:	f240 4339 	movw	r3, #1081	; 0x439
 8009170:	607b      	str	r3, [r7, #4]
			| GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009172:	2301      	movs	r3, #1
 8009174:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800917a:	2300      	movs	r3, #0
 800917c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800917e:	1d3b      	adds	r3, r7, #4
 8009180:	4619      	mov	r1, r3
 8009182:	4803      	ldr	r0, [pc, #12]	; (8009190 <GPIO_Init+0xd0>)
 8009184:	f7f9 fd7a 	bl	8002c7c <HAL_GPIO_Init>
	//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8009188:	bf00      	nop
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	40020400 	.word	0x40020400
 8009194:	40020800 	.word	0x40020800
 8009198:	40020000 	.word	0x40020000

0800919c <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 80091a2:	4b2e      	ldr	r3, [pc, #184]	; (800925c <LCD_Begin+0xc0>)
 80091a4:	22f0      	movs	r2, #240	; 0xf0
 80091a6:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 80091a8:	4b2d      	ldr	r3, [pc, #180]	; (8009260 <LCD_Begin+0xc4>)
 80091aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80091ae:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 80091b0:	4b2c      	ldr	r3, [pc, #176]	; (8009264 <LCD_Begin+0xc8>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 80091b6:	4b2c      	ldr	r3, [pc, #176]	; (8009268 <LCD_Begin+0xcc>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	4b2a      	ldr	r3, [pc, #168]	; (8009268 <LCD_Begin+0xcc>)
 80091be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80091c2:	4b2a      	ldr	r3, [pc, #168]	; (800926c <LCD_Begin+0xd0>)
 80091c4:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 80091c6:	4b2a      	ldr	r3, [pc, #168]	; (8009270 <LCD_Begin+0xd4>)
 80091c8:	2204      	movs	r2, #4
 80091ca:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 80091cc:	4b29      	ldr	r3, [pc, #164]	; (8009274 <LCD_Begin+0xd8>)
 80091ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091d2:	801a      	strh	r2, [r3, #0]
 80091d4:	4b27      	ldr	r3, [pc, #156]	; (8009274 <LCD_Begin+0xd8>)
 80091d6:	881a      	ldrh	r2, [r3, #0]
 80091d8:	4b27      	ldr	r3, [pc, #156]	; (8009278 <LCD_Begin+0xdc>)
 80091da:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 80091dc:	4b27      	ldr	r3, [pc, #156]	; (800927c <LCD_Begin+0xe0>)
 80091de:	2201      	movs	r2, #1
 80091e0:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;

	GPIO_Init();
 80091e6:	f7ff ff6b 	bl	80090c0 <GPIO_Init>

	LCD_Reset();
 80091ea:	f000 fd71 	bl	8009cd0 <LCD_Reset>

	LCD_CS_LOW();
 80091ee:	2200      	movs	r2, #0
 80091f0:	2100      	movs	r1, #0
 80091f2:	4823      	ldr	r0, [pc, #140]	; (8009280 <LCD_Begin+0xe4>)
 80091f4:	f7fd fc66 	bl	8006ac4 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 80091f8:	e01d      	b.n	8009236 <LCD_Begin+0x9a>
		a = ST7781_regValues[i++];
 80091fa:	79fb      	ldrb	r3, [r7, #7]
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	71fa      	strb	r2, [r7, #7]
 8009200:	461a      	mov	r2, r3
 8009202:	4b20      	ldr	r3, [pc, #128]	; (8009284 <LCD_Begin+0xe8>)
 8009204:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009208:	80bb      	strh	r3, [r7, #4]
		d = ST7781_regValues[i++];
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	71fa      	strb	r2, [r7, #7]
 8009210:	461a      	mov	r2, r3
 8009212:	4b1c      	ldr	r3, [pc, #112]	; (8009284 <LCD_Begin+0xe8>)
 8009214:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009218:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 800921a:	88bb      	ldrh	r3, [r7, #4]
 800921c:	2bff      	cmp	r3, #255	; 0xff
 800921e:	d104      	bne.n	800922a <LCD_Begin+0x8e>
			delay(d);
 8009220:	887b      	ldrh	r3, [r7, #2]
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff ff32 	bl	800908c <delay>
 8009228:	e005      	b.n	8009236 <LCD_Begin+0x9a>
		} else {
			LCD_WriteRegister16(a, d);
 800922a:	887a      	ldrh	r2, [r7, #2]
 800922c:	88bb      	ldrh	r3, [r7, #4]
 800922e:	4611      	mov	r1, r2
 8009230:	4618      	mov	r0, r3
 8009232:	f000 ff15 	bl	800a060 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	2b83      	cmp	r3, #131	; 0x83
 800923a:	d9de      	bls.n	80091fa <LCD_Begin+0x5e>
		}
	}

	LCD_SetRotation(m_rotation);
 800923c:	4b09      	ldr	r3, [pc, #36]	; (8009264 <LCD_Begin+0xc8>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fddf 	bl	8009e04 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8009246:	f240 133f 	movw	r3, #319	; 0x13f
 800924a:	22ef      	movs	r2, #239	; 0xef
 800924c:	2100      	movs	r1, #0
 800924e:	2000      	movs	r0, #0
 8009250:	f000 fe1a 	bl	8009e88 <LCD_SetAddrWindow>
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	20000a5e 	.word	0x20000a5e
 8009260:	20000a60 	.word	0x20000a60
 8009264:	20000a6b 	.word	0x20000a6b
 8009268:	20000a62 	.word	0x20000a62
 800926c:	20000a64 	.word	0x20000a64
 8009270:	20000a6a 	.word	0x20000a6a
 8009274:	20000a68 	.word	0x20000a68
 8009278:	20000a66 	.word	0x20000a66
 800927c:	20000a6c 	.word	0x20000a6c
 8009280:	40020400 	.word	0x40020400
 8009284:	08010828 	.word	0x08010828

08009288 <LCD_Color565>:
 * \param g	Green
 * \param b	Blue
 * 
 * \return uint16_t	16Bit-RGB
 */
uint16_t LCD_Color565(uint8_t r, uint8_t g, uint8_t b) {
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	71fb      	strb	r3, [r7, #7]
 8009292:	460b      	mov	r3, r1
 8009294:	71bb      	strb	r3, [r7, #6]
 8009296:	4613      	mov	r3, r2
 8009298:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	b21b      	sxth	r3, r3
 80092a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80092a4:	f023 0307 	bic.w	r3, r3, #7
 80092a8:	b21a      	sxth	r2, r3
 80092aa:	79bb      	ldrb	r3, [r7, #6]
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	b21b      	sxth	r3, r3
 80092b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80092b4:	b21b      	sxth	r3, r3
 80092b6:	4313      	orrs	r3, r2
 80092b8:	b21a      	sxth	r2, r3
 80092ba:	797b      	ldrb	r3, [r7, #5]
 80092bc:	08db      	lsrs	r3, r3, #3
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	b21b      	sxth	r3, r3
 80092c2:	4313      	orrs	r3, r2
 80092c4:	b21b      	sxth	r3, r3
 80092c6:	b29b      	uxth	r3, r3
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	80fb      	strh	r3, [r7, #6]
 80092de:	460b      	mov	r3, r1
 80092e0:	80bb      	strh	r3, [r7, #4]
 80092e2:	4613      	mov	r3, r2
 80092e4:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 80092e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	db52      	blt.n	8009394 <LCD_DrawPixel+0xc0>
 80092ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	db4e      	blt.n	8009394 <LCD_DrawPixel+0xc0>
 80092f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092fa:	2bef      	cmp	r3, #239	; 0xef
 80092fc:	dc4a      	bgt.n	8009394 <LCD_DrawPixel+0xc0>
 80092fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009302:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009306:	da45      	bge.n	8009394 <LCD_DrawPixel+0xc0>
		return;

	LCD_CS_LOW();
 8009308:	2200      	movs	r2, #0
 800930a:	2100      	movs	r1, #0
 800930c:	4823      	ldr	r0, [pc, #140]	; (800939c <LCD_DrawPixel+0xc8>)
 800930e:	f7fd fbd9 	bl	8006ac4 <gpio_write>

	int16_t t;
	switch (m_rotation) {
 8009312:	4b23      	ldr	r3, [pc, #140]	; (80093a0 <LCD_DrawPixel+0xcc>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2b03      	cmp	r3, #3
 8009318:	d01c      	beq.n	8009354 <LCD_DrawPixel+0x80>
 800931a:	2b03      	cmp	r3, #3
 800931c:	dc25      	bgt.n	800936a <LCD_DrawPixel+0x96>
 800931e:	2b01      	cmp	r3, #1
 8009320:	d002      	beq.n	8009328 <LCD_DrawPixel+0x54>
 8009322:	2b02      	cmp	r3, #2
 8009324:	d00a      	beq.n	800933c <LCD_DrawPixel+0x68>
 8009326:	e020      	b.n	800936a <LCD_DrawPixel+0x96>
	case 1:
		t = x;
 8009328:	88fb      	ldrh	r3, [r7, #6]
 800932a:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 800932c:	88bb      	ldrh	r3, [r7, #4]
 800932e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009332:	b29b      	uxth	r3, r3
 8009334:	80fb      	strh	r3, [r7, #6]
		y = t;
 8009336:	89fb      	ldrh	r3, [r7, #14]
 8009338:	80bb      	strh	r3, [r7, #4]
		break;
 800933a:	e016      	b.n	800936a <LCD_DrawPixel+0x96>
	case 2:
		x = TFTWIDTH - 1 - x;
 800933c:	88fb      	ldrh	r3, [r7, #6]
 800933e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009342:	b29b      	uxth	r3, r3
 8009344:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8009346:	88bb      	ldrh	r3, [r7, #4]
 8009348:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800934c:	3301      	adds	r3, #1
 800934e:	b29b      	uxth	r3, r3
 8009350:	80bb      	strh	r3, [r7, #4]
		break;
 8009352:	e00a      	b.n	800936a <LCD_DrawPixel+0x96>
	case 3:
		t = x;
 8009354:	88fb      	ldrh	r3, [r7, #6]
 8009356:	81fb      	strh	r3, [r7, #14]
		x = y;
 8009358:	88bb      	ldrh	r3, [r7, #4]
 800935a:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 800935c:	89fb      	ldrh	r3, [r7, #14]
 800935e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8009362:	3301      	adds	r3, #1
 8009364:	b29b      	uxth	r3, r3
 8009366:	80bb      	strh	r3, [r7, #4]
		break;
 8009368:	bf00      	nop
	}

	LCD_WriteRegister16(0x0020, x);
 800936a:	88fb      	ldrh	r3, [r7, #6]
 800936c:	4619      	mov	r1, r3
 800936e:	2020      	movs	r0, #32
 8009370:	f000 fe76 	bl	800a060 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8009374:	88bb      	ldrh	r3, [r7, #4]
 8009376:	4619      	mov	r1, r3
 8009378:	2021      	movs	r0, #33	; 0x21
 800937a:	f000 fe71 	bl	800a060 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 800937e:	887b      	ldrh	r3, [r7, #2]
 8009380:	4619      	mov	r1, r3
 8009382:	2022      	movs	r0, #34	; 0x22
 8009384:	f000 fe6c 	bl	800a060 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8009388:	2201      	movs	r2, #1
 800938a:	2100      	movs	r1, #0
 800938c:	4803      	ldr	r0, [pc, #12]	; (800939c <LCD_DrawPixel+0xc8>)
 800938e:	f7fd fb99 	bl	8006ac4 <gpio_write>
 8009392:	e000      	b.n	8009396 <LCD_DrawPixel+0xc2>
		return;
 8009394:	bf00      	nop
}
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40020400 	.word	0x40020400
 80093a0:	20000a6b 	.word	0x20000a6b

080093a4 <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 80093a4:	b590      	push	{r4, r7, lr}
 80093a6:	b089      	sub	sp, #36	; 0x24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	4611      	mov	r1, r2
 80093b0:	461a      	mov	r2, r3
 80093b2:	4623      	mov	r3, r4
 80093b4:	80fb      	strh	r3, [r7, #6]
 80093b6:	4603      	mov	r3, r0
 80093b8:	80bb      	strh	r3, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	807b      	strh	r3, [r7, #2]
 80093be:	4613      	mov	r3, r2
 80093c0:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 80093c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80093c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80093d0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80093d4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80093d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80093dc:	1acb      	subs	r3, r1, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bfb8      	it	lt
 80093e2:	425b      	neglt	r3, r3
 80093e4:	429a      	cmp	r2, r3
 80093e6:	bfcc      	ite	gt
 80093e8:	2301      	movgt	r3, #1
 80093ea:	2300      	movle	r3, #0
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	837b      	strh	r3, [r7, #26]
	if (steep) {
 80093f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <LCD_DrawLine+0x6c>
		swap(x1, y1);
 80093f8:	88fb      	ldrh	r3, [r7, #6]
 80093fa:	833b      	strh	r3, [r7, #24]
 80093fc:	88bb      	ldrh	r3, [r7, #4]
 80093fe:	80fb      	strh	r3, [r7, #6]
 8009400:	8b3b      	ldrh	r3, [r7, #24]
 8009402:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8009404:	887b      	ldrh	r3, [r7, #2]
 8009406:	82fb      	strh	r3, [r7, #22]
 8009408:	883b      	ldrh	r3, [r7, #0]
 800940a:	807b      	strh	r3, [r7, #2]
 800940c:	8afb      	ldrh	r3, [r7, #22]
 800940e:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2) {
 8009410:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009414:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009418:	429a      	cmp	r2, r3
 800941a:	dd0b      	ble.n	8009434 <LCD_DrawLine+0x90>
		swap(x1, x2);
 800941c:	88fb      	ldrh	r3, [r7, #6]
 800941e:	82bb      	strh	r3, [r7, #20]
 8009420:	887b      	ldrh	r3, [r7, #2]
 8009422:	80fb      	strh	r3, [r7, #6]
 8009424:	8abb      	ldrh	r3, [r7, #20]
 8009426:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8009428:	88bb      	ldrh	r3, [r7, #4]
 800942a:	827b      	strh	r3, [r7, #18]
 800942c:	883b      	ldrh	r3, [r7, #0]
 800942e:	80bb      	strh	r3, [r7, #4]
 8009430:	8a7b      	ldrh	r3, [r7, #18]
 8009432:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8009434:	887a      	ldrh	r2, [r7, #2]
 8009436:	88fb      	ldrh	r3, [r7, #6]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	b29b      	uxth	r3, r3
 800943c:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 800943e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009442:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	bfb8      	it	lt
 800944c:	425b      	neglt	r3, r3
 800944e:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8009450:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009454:	0fda      	lsrs	r2, r3, #31
 8009456:	4413      	add	r3, r2
 8009458:	105b      	asrs	r3, r3, #1
 800945a:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2) {
 800945c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009460:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009464:	429a      	cmp	r2, r3
 8009466:	da02      	bge.n	800946e <LCD_DrawLine+0xca>
		ystep = 1;
 8009468:	2301      	movs	r3, #1
 800946a:	83bb      	strh	r3, [r7, #28]
 800946c:	e031      	b.n	80094d2 <LCD_DrawLine+0x12e>
	} else {
		ystep = -1;
 800946e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009472:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++) {
 8009474:	e02d      	b.n	80094d2 <LCD_DrawLine+0x12e>
		if (steep) {
 8009476:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d008      	beq.n	8009490 <LCD_DrawLine+0xec>
			LCD_DrawPixel(y1, x1, color);
 800947e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009480:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8009484:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff ff23 	bl	80092d4 <LCD_DrawPixel>
 800948e:	e007      	b.n	80094a0 <LCD_DrawLine+0xfc>
		} else {
			LCD_DrawPixel(x1, y1, color);
 8009490:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009492:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff ff1a 	bl	80092d4 <LCD_DrawPixel>
		}
		err -= dy;
 80094a0:	8bfa      	ldrh	r2, [r7, #30]
 80094a2:	89fb      	ldrh	r3, [r7, #14]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 80094aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	da09      	bge.n	80094c6 <LCD_DrawLine+0x122>
			y1 += ystep;
 80094b2:	88ba      	ldrh	r2, [r7, #4]
 80094b4:	8bbb      	ldrh	r3, [r7, #28]
 80094b6:	4413      	add	r3, r2
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80094bc:	8bfa      	ldrh	r2, [r7, #30]
 80094be:	8a3b      	ldrh	r3, [r7, #16]
 80094c0:	4413      	add	r3, r2
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++) {
 80094c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	3301      	adds	r3, #1
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	80fb      	strh	r3, [r7, #6]
 80094d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80094d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80094da:	429a      	cmp	r2, r3
 80094dc:	ddcb      	ble.n	8009476 <LCD_DrawLine+0xd2>
		}
	}
}
 80094de:	bf00      	nop
 80094e0:	bf00      	nop
 80094e2:	3724      	adds	r7, #36	; 0x24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd90      	pop	{r4, r7, pc}

080094e8 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af02      	add	r7, sp, #8
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	461a      	mov	r2, r3
 80094f6:	4623      	mov	r3, r4
 80094f8:	80fb      	strh	r3, [r7, #6]
 80094fa:	4603      	mov	r3, r0
 80094fc:	80bb      	strh	r3, [r7, #4]
 80094fe:	460b      	mov	r3, r1
 8009500:	70fb      	strb	r3, [r7, #3]
 8009502:	4613      	mov	r3, r2
 8009504:	803b      	strh	r3, [r7, #0]
	if ((x >= m_width) || // Clip right
 8009506:	4b6e      	ldr	r3, [pc, #440]	; (80096c0 <LCD_DrawChar+0x1d8>)
 8009508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800950c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009510:	429a      	cmp	r2, r3
 8009512:	f280 80d0 	bge.w	80096b6 <LCD_DrawChar+0x1ce>
			(y >= m_height) || // Clip bottom
 8009516:	4b6b      	ldr	r3, [pc, #428]	; (80096c4 <LCD_DrawChar+0x1dc>)
 8009518:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 800951c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009520:	429a      	cmp	r2, r3
 8009522:	f280 80c8 	bge.w	80096b6 <LCD_DrawChar+0x1ce>
			((x + 6 * size - 1) < 0) || // Clip left
 8009526:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800952a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800952e:	4613      	mov	r3, r2
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	4413      	add	r3, r2
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	440b      	add	r3, r1
			(y >= m_height) || // Clip bottom
 8009538:	2b00      	cmp	r3, #0
 800953a:	f340 80bc 	ble.w	80096b6 <LCD_DrawChar+0x1ce>
			((y + 8 * size - 1) < 0))   // Clip top
 800953e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009542:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	4413      	add	r3, r2
			((x + 6 * size - 1) < 0) || // Clip left
 800954a:	2b00      	cmp	r3, #0
 800954c:	f340 80b3 	ble.w	80096b6 <LCD_DrawChar+0x1ce>
		return;

	for (int8_t i = 0; i < 6; i++) {
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]
 8009554:	e0a9      	b.n	80096aa <LCD_DrawChar+0x1c2>
		uint8_t line;
		if (i == 5) {
 8009556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800955a:	2b05      	cmp	r3, #5
 800955c:	d102      	bne.n	8009564 <LCD_DrawChar+0x7c>
			line = 0x0;
 800955e:	2300      	movs	r3, #0
 8009560:	73bb      	strb	r3, [r7, #14]
 8009562:	e09c      	b.n	800969e <LCD_DrawChar+0x1b6>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 8009564:	78fa      	ldrb	r2, [r7, #3]
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009570:	4413      	add	r3, r2
 8009572:	4a55      	ldr	r2, [pc, #340]	; (80096c8 <LCD_DrawChar+0x1e0>)
 8009574:	5cd3      	ldrb	r3, [r2, r3]
 8009576:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8009578:	2300      	movs	r3, #0
 800957a:	737b      	strb	r3, [r7, #13]
 800957c:	e08a      	b.n	8009694 <LCD_DrawChar+0x1ac>
				if (line & 0x1) {
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	2b00      	cmp	r3, #0
 8009586:	d03c      	beq.n	8009602 <LCD_DrawChar+0x11a>
					if (size == 1) { // default size
 8009588:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800958c:	2b01      	cmp	r3, #1
 800958e:	d112      	bne.n	80095b6 <LCD_DrawChar+0xce>
						LCD_DrawPixel(x + i, y + j, color);
 8009590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009594:	b29a      	uxth	r2, r3
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	4413      	add	r3, r2
 800959a:	b29b      	uxth	r3, r3
 800959c:	b218      	sxth	r0, r3
 800959e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	88bb      	ldrh	r3, [r7, #4]
 80095a6:	4413      	add	r3, r2
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	b21b      	sxth	r3, r3
 80095ac:	883a      	ldrh	r2, [r7, #0]
 80095ae:	4619      	mov	r1, r3
 80095b0:	f7ff fe90 	bl	80092d4 <LCD_DrawPixel>
 80095b4:	e065      	b.n	8009682 <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 80095b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	fb12 f303 	smulbb	r3, r2, r3
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	88fb      	ldrh	r3, [r7, #6]
 80095ca:	4413      	add	r3, r2
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	b218      	sxth	r0, r3
 80095d0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095da:	b29b      	uxth	r3, r3
 80095dc:	fb12 f303 	smulbb	r3, r2, r3
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	88bb      	ldrh	r3, [r7, #4]
 80095e4:	4413      	add	r3, r2
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	b219      	sxth	r1, r3
 80095ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095ee:	b21a      	sxth	r2, r3
 80095f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095f4:	b21c      	sxth	r4, r3
 80095f6:	883b      	ldrh	r3, [r7, #0]
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	4623      	mov	r3, r4
 80095fc:	f000 f866 	bl	80096cc <LCD_FillRect>
 8009600:	e03f      	b.n	8009682 <LCD_DrawChar+0x19a>
								color);
					}
				} else if (bg != color) {
 8009602:	8c3a      	ldrh	r2, [r7, #32]
 8009604:	883b      	ldrh	r3, [r7, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d03b      	beq.n	8009682 <LCD_DrawChar+0x19a>
					if (size == 1) { // default size
 800960a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800960e:	2b01      	cmp	r3, #1
 8009610:	d112      	bne.n	8009638 <LCD_DrawChar+0x150>
						LCD_DrawPixel(x + i, y + j, bg);
 8009612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009616:	b29a      	uxth	r2, r3
 8009618:	88fb      	ldrh	r3, [r7, #6]
 800961a:	4413      	add	r3, r2
 800961c:	b29b      	uxth	r3, r3
 800961e:	b218      	sxth	r0, r3
 8009620:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009624:	b29a      	uxth	r2, r3
 8009626:	88bb      	ldrh	r3, [r7, #4]
 8009628:	4413      	add	r3, r2
 800962a:	b29b      	uxth	r3, r3
 800962c:	b21b      	sxth	r3, r3
 800962e:	8c3a      	ldrh	r2, [r7, #32]
 8009630:	4619      	mov	r1, r3
 8009632:	f7ff fe4f 	bl	80092d4 <LCD_DrawPixel>
 8009636:	e024      	b.n	8009682 <LCD_DrawChar+0x19a>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 8009638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800963c:	b29a      	uxth	r2, r3
 800963e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009642:	b29b      	uxth	r3, r3
 8009644:	fb12 f303 	smulbb	r3, r2, r3
 8009648:	b29a      	uxth	r2, r3
 800964a:	88fb      	ldrh	r3, [r7, #6]
 800964c:	4413      	add	r3, r2
 800964e:	b29b      	uxth	r3, r3
 8009650:	b218      	sxth	r0, r3
 8009652:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009656:	b29a      	uxth	r2, r3
 8009658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800965c:	b29b      	uxth	r3, r3
 800965e:	fb12 f303 	smulbb	r3, r2, r3
 8009662:	b29a      	uxth	r2, r3
 8009664:	88bb      	ldrh	r3, [r7, #4]
 8009666:	4413      	add	r3, r2
 8009668:	b29b      	uxth	r3, r3
 800966a:	b219      	sxth	r1, r3
 800966c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009670:	b21a      	sxth	r2, r3
 8009672:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009676:	b21c      	sxth	r4, r3
 8009678:	8c3b      	ldrh	r3, [r7, #32]
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	4623      	mov	r3, r4
 800967e:	f000 f825 	bl	80096cc <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	085b      	lsrs	r3, r3, #1
 8009686:	73bb      	strb	r3, [r7, #14]
			for (int8_t j = 0; j < 8; j++) {
 8009688:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	3301      	adds	r3, #1
 8009690:	b2db      	uxtb	r3, r3
 8009692:	737b      	strb	r3, [r7, #13]
 8009694:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009698:	2b07      	cmp	r3, #7
 800969a:	f77f af70 	ble.w	800957e <LCD_DrawChar+0x96>
	for (int8_t i = 0; i < 6; i++) {
 800969e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	3301      	adds	r3, #1
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	73fb      	strb	r3, [r7, #15]
 80096aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	f77f af51 	ble.w	8009556 <LCD_DrawChar+0x6e>
 80096b4:	e000      	b.n	80096b8 <LCD_DrawChar+0x1d0>
		return;
 80096b6:	bf00      	nop
			}
		}
	}
}
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd90      	pop	{r4, r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000a5e 	.word	0x20000a5e
 80096c4:	20000a60 	.word	0x20000a60
 80096c8:	080105a8 	.word	0x080105a8

080096cc <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 80096cc:	b590      	push	{r4, r7, lr}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	4611      	mov	r1, r2
 80096d8:	461a      	mov	r2, r3
 80096da:	4623      	mov	r3, r4
 80096dc:	80fb      	strh	r3, [r7, #6]
 80096de:	4603      	mov	r3, r0
 80096e0:	80bb      	strh	r3, [r7, #4]
 80096e2:	460b      	mov	r3, r1
 80096e4:	807b      	strh	r3, [r7, #2]
 80096e6:	4613      	mov	r3, r2
 80096e8:	803b      	strh	r3, [r7, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 80096ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f340 808b 	ble.w	800980a <LCD_FillRect+0x13e>
 80096f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f340 8086 	ble.w	800980a <LCD_FillRect+0x13e>
 80096fe:	4b45      	ldr	r3, [pc, #276]	; (8009814 <LCD_FillRect+0x148>)
 8009700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009704:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009708:	429a      	cmp	r2, r3
 800970a:	da7e      	bge.n	800980a <LCD_FillRect+0x13e>
 800970c:	4b42      	ldr	r3, [pc, #264]	; (8009818 <LCD_FillRect+0x14c>)
 800970e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009712:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009716:	429a      	cmp	r2, r3
 8009718:	da77      	bge.n	800980a <LCD_FillRect+0x13e>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800971a:	88fa      	ldrh	r2, [r7, #6]
 800971c:	887b      	ldrh	r3, [r7, #2]
 800971e:	4413      	add	r3, r2
 8009720:	b29b      	uxth	r3, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	b29b      	uxth	r3, r3
 8009726:	81fb      	strh	r3, [r7, #14]
 8009728:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800972c:	2b00      	cmp	r3, #0
 800972e:	db6c      	blt.n	800980a <LCD_FillRect+0x13e>
 8009730:	88ba      	ldrh	r2, [r7, #4]
 8009732:	883b      	ldrh	r3, [r7, #0]
 8009734:	4413      	add	r3, r2
 8009736:	b29b      	uxth	r3, r3
 8009738:	3b01      	subs	r3, #1
 800973a:	b29b      	uxth	r3, r3
 800973c:	81bb      	strh	r3, [r7, #12]
 800973e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	db61      	blt.n	800980a <LCD_FillRect+0x13e>
		return;
	if (x < 0) { // Clip left
 8009746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800974a:	2b00      	cmp	r3, #0
 800974c:	da06      	bge.n	800975c <LCD_FillRect+0x90>
		w += x;
 800974e:	887a      	ldrh	r2, [r7, #2]
 8009750:	88fb      	ldrh	r3, [r7, #6]
 8009752:	4413      	add	r3, r2
 8009754:	b29b      	uxth	r3, r3
 8009756:	807b      	strh	r3, [r7, #2]
		x = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	80fb      	strh	r3, [r7, #6]
	}
	if (y1 < 0) { // Clip top
 800975c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	da06      	bge.n	8009772 <LCD_FillRect+0xa6>
		h += y1;
 8009764:	883a      	ldrh	r2, [r7, #0]
 8009766:	88bb      	ldrh	r3, [r7, #4]
 8009768:	4413      	add	r3, r2
 800976a:	b29b      	uxth	r3, r3
 800976c:	803b      	strh	r3, [r7, #0]
		y1 = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	80bb      	strh	r3, [r7, #4]
	}
	if (x2 >= m_width) { // Clip right
 8009772:	4b28      	ldr	r3, [pc, #160]	; (8009814 <LCD_FillRect+0x148>)
 8009774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009778:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800977c:	429a      	cmp	r2, r3
 800977e:	db0d      	blt.n	800979c <LCD_FillRect+0xd0>
		x2 = m_width - 1;
 8009780:	4b24      	ldr	r3, [pc, #144]	; (8009814 <LCD_FillRect+0x148>)
 8009782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009786:	b29b      	uxth	r3, r3
 8009788:	3b01      	subs	r3, #1
 800978a:	b29b      	uxth	r3, r3
 800978c:	81fb      	strh	r3, [r7, #14]
		w = x2 - x + 1;
 800978e:	89fa      	ldrh	r2, [r7, #14]
 8009790:	88fb      	ldrh	r3, [r7, #6]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	b29b      	uxth	r3, r3
 8009796:	3301      	adds	r3, #1
 8009798:	b29b      	uxth	r3, r3
 800979a:	807b      	strh	r3, [r7, #2]
	}
	if (y2 >= m_height) { // Clip bottom
 800979c:	4b1e      	ldr	r3, [pc, #120]	; (8009818 <LCD_FillRect+0x14c>)
 800979e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	db0d      	blt.n	80097c6 <LCD_FillRect+0xfa>
		y2 = m_height - 1;
 80097aa:	4b1b      	ldr	r3, [pc, #108]	; (8009818 <LCD_FillRect+0x14c>)
 80097ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	81bb      	strh	r3, [r7, #12]
		h = y2 - y1 + 1;
 80097b8:	89ba      	ldrh	r2, [r7, #12]
 80097ba:	88bb      	ldrh	r3, [r7, #4]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	b29b      	uxth	r3, r3
 80097c0:	3301      	adds	r3, #1
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	803b      	strh	r3, [r7, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 80097c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80097ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80097ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80097d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80097d6:	f000 fb57 	bl	8009e88 <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 80097da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80097de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80097e2:	fb03 f202 	mul.w	r2, r3, r2
 80097e6:	8c3b      	ldrh	r3, [r7, #32]
 80097e8:	4611      	mov	r1, r2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 f858 	bl	80098a0 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80097f0:	4b08      	ldr	r3, [pc, #32]	; (8009814 <LCD_FillRect+0x148>)
 80097f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097f6:	1e5a      	subs	r2, r3, #1
 80097f8:	4b07      	ldr	r3, [pc, #28]	; (8009818 <LCD_FillRect+0x14c>)
 80097fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097fe:	3b01      	subs	r3, #1
 8009800:	2100      	movs	r1, #0
 8009802:	2000      	movs	r0, #0
 8009804:	f000 fb40 	bl	8009e88 <LCD_SetAddrWindow>
 8009808:	e000      	b.n	800980c <LCD_FillRect+0x140>
		return;
 800980a:	bf00      	nop
}
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	bd90      	pop	{r4, r7, pc}
 8009812:	bf00      	nop
 8009814:	20000a5e 	.word	0x20000a5e
 8009818:	20000a60 	.word	0x20000a60

0800981c <LCD_FillScreen>:
 * 
 * \param color	Color
 * 
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	80fb      	strh	r3, [r7, #6]
	// state, just need to set the address pointer to the top-left corner.
	// Although we could fill in any direction, the code uses the current
	// screen rotation because some users find it disconcerting when a
	// fill does not occur top-to-bottom.
	uint16_t x, y;
	switch (m_rotation) {
 8009826:	4b1c      	ldr	r3, [pc, #112]	; (8009898 <LCD_FillScreen+0x7c>)
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b03      	cmp	r3, #3
 800982c:	d015      	beq.n	800985a <LCD_FillScreen+0x3e>
 800982e:	2b03      	cmp	r3, #3
 8009830:	dc03      	bgt.n	800983a <LCD_FillScreen+0x1e>
 8009832:	2b01      	cmp	r3, #1
 8009834:	d006      	beq.n	8009844 <LCD_FillScreen+0x28>
 8009836:	2b02      	cmp	r3, #2
 8009838:	d009      	beq.n	800984e <LCD_FillScreen+0x32>
	default:
		x = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	81fb      	strh	r3, [r7, #14]
		y = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	81bb      	strh	r3, [r7, #12]
		break;
 8009842:	e010      	b.n	8009866 <LCD_FillScreen+0x4a>
	case 1:
		x = TFTWIDTH - 1;
 8009844:	23ef      	movs	r3, #239	; 0xef
 8009846:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8009848:	2300      	movs	r3, #0
 800984a:	81bb      	strh	r3, [r7, #12]
		break;
 800984c:	e00b      	b.n	8009866 <LCD_FillScreen+0x4a>
	case 2:
		x = TFTWIDTH - 1;
 800984e:	23ef      	movs	r3, #239	; 0xef
 8009850:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8009852:	f240 133f 	movw	r3, #319	; 0x13f
 8009856:	81bb      	strh	r3, [r7, #12]
		break;
 8009858:	e005      	b.n	8009866 <LCD_FillScreen+0x4a>
	case 3:
		x = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 800985e:	f240 133f 	movw	r3, #319	; 0x13f
 8009862:	81bb      	strh	r3, [r7, #12]
		break;
 8009864:	bf00      	nop
	}
	LCD_CS_LOW();
 8009866:	2200      	movs	r2, #0
 8009868:	2100      	movs	r1, #0
 800986a:	480c      	ldr	r0, [pc, #48]	; (800989c <LCD_FillScreen+0x80>)
 800986c:	f7fd f92a 	bl	8006ac4 <gpio_write>
	LCD_WriteRegister16(0x0020, x);
 8009870:	89fb      	ldrh	r3, [r7, #14]
 8009872:	4619      	mov	r1, r3
 8009874:	2020      	movs	r0, #32
 8009876:	f000 fbf3 	bl	800a060 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 800987a:	89bb      	ldrh	r3, [r7, #12]
 800987c:	4619      	mov	r1, r3
 800987e:	2021      	movs	r0, #33	; 0x21
 8009880:	f000 fbee 	bl	800a060 <LCD_WriteRegister16>

	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8009884:	88fb      	ldrh	r3, [r7, #6]
 8009886:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 800988a:	4618      	mov	r0, r3
 800988c:	f000 f808 	bl	80098a0 <LCD_Flood>
}
 8009890:	bf00      	nop
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20000a6b 	.word	0x20000a6b
 800989c:	40020400 	.word	0x40020400

080098a0 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	6039      	str	r1, [r7, #0]
 80098aa:	80fb      	strh	r3, [r7, #6]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 80098ac:	88fb      	ldrh	r3, [r7, #6]
 80098ae:	0a1b      	lsrs	r3, r3, #8
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	733b      	strb	r3, [r7, #12]
 80098b4:	88fb      	ldrh	r3, [r7, #6]
 80098b6:	72fb      	strb	r3, [r7, #11]

	LCD_CS_LOW();
 80098b8:	2200      	movs	r2, #0
 80098ba:	2100      	movs	r1, #0
 80098bc:	4895      	ldr	r0, [pc, #596]	; (8009b14 <LCD_Flood+0x274>)
 80098be:	f7fd f901 	bl	8006ac4 <gpio_write>
	LCD_CD_LOW();
 80098c2:	2200      	movs	r2, #0
 80098c4:	2104      	movs	r1, #4
 80098c6:	4894      	ldr	r0, [pc, #592]	; (8009b18 <LCD_Flood+0x278>)
 80098c8:	f7fd f8fc 	bl	8006ac4 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 80098cc:	2000      	movs	r0, #0
 80098ce:	f000 fb6b 	bl	8009fa8 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 80098d2:	2022      	movs	r0, #34	; 0x22
 80098d4:	f000 fb68 	bl	8009fa8 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 80098d8:	2201      	movs	r2, #1
 80098da:	2104      	movs	r1, #4
 80098dc:	488e      	ldr	r0, [pc, #568]	; (8009b18 <LCD_Flood+0x278>)
 80098de:	f7fd f8f1 	bl	8006ac4 <gpio_write>
	LCD_Write8(hi);
 80098e2:	7b3b      	ldrb	r3, [r7, #12]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fb5f 	bl	8009fa8 <LCD_Write8>
	LCD_Write8(lo);
 80098ea:	7afb      	ldrb	r3, [r7, #11]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 fb5b 	bl	8009fa8 <LCD_Write8>
	len--;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	099b      	lsrs	r3, r3, #6
 80098fc:	81fb      	strh	r3, [r7, #14]
	if (hi == lo) {
 80098fe:	7b3a      	ldrb	r2, [r7, #12]
 8009900:	7afb      	ldrb	r3, [r7, #11]
 8009902:	429a      	cmp	r2, r3
 8009904:	f040 80e4 	bne.w	8009ad0 <LCD_Flood+0x230>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8009908:	e088      	b.n	8009a1c <LCD_Flood+0x17c>
			i = 16; // 64 pixels/block / 4 pixels/pass
 800990a:	2310      	movs	r3, #16
 800990c:	737b      	strb	r3, [r7, #13]
			do {
				LCD_WR_STROBE();
 800990e:	2200      	movs	r2, #0
 8009910:	2101      	movs	r1, #1
 8009912:	4881      	ldr	r0, [pc, #516]	; (8009b18 <LCD_Flood+0x278>)
 8009914:	f7fd f8d6 	bl	8006ac4 <gpio_write>
 8009918:	2001      	movs	r0, #1
 800991a:	f7ff fbb7 	bl	800908c <delay>
 800991e:	2201      	movs	r2, #1
 8009920:	2101      	movs	r1, #1
 8009922:	487d      	ldr	r0, [pc, #500]	; (8009b18 <LCD_Flood+0x278>)
 8009924:	f7fd f8ce 	bl	8006ac4 <gpio_write>
 8009928:	2001      	movs	r0, #1
 800992a:	f7ff fbaf 	bl	800908c <delay>
				LCD_WR_STROBE();
 800992e:	2200      	movs	r2, #0
 8009930:	2101      	movs	r1, #1
 8009932:	4879      	ldr	r0, [pc, #484]	; (8009b18 <LCD_Flood+0x278>)
 8009934:	f7fd f8c6 	bl	8006ac4 <gpio_write>
 8009938:	2001      	movs	r0, #1
 800993a:	f7ff fba7 	bl	800908c <delay>
 800993e:	2201      	movs	r2, #1
 8009940:	2101      	movs	r1, #1
 8009942:	4875      	ldr	r0, [pc, #468]	; (8009b18 <LCD_Flood+0x278>)
 8009944:	f7fd f8be 	bl	8006ac4 <gpio_write>
 8009948:	2001      	movs	r0, #1
 800994a:	f7ff fb9f 	bl	800908c <delay>
				LCD_WR_STROBE();
 800994e:	2200      	movs	r2, #0
 8009950:	2101      	movs	r1, #1
 8009952:	4871      	ldr	r0, [pc, #452]	; (8009b18 <LCD_Flood+0x278>)
 8009954:	f7fd f8b6 	bl	8006ac4 <gpio_write>
 8009958:	2001      	movs	r0, #1
 800995a:	f7ff fb97 	bl	800908c <delay>
 800995e:	2201      	movs	r2, #1
 8009960:	2101      	movs	r1, #1
 8009962:	486d      	ldr	r0, [pc, #436]	; (8009b18 <LCD_Flood+0x278>)
 8009964:	f7fd f8ae 	bl	8006ac4 <gpio_write>
 8009968:	2001      	movs	r0, #1
 800996a:	f7ff fb8f 	bl	800908c <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 800996e:	2200      	movs	r2, #0
 8009970:	2101      	movs	r1, #1
 8009972:	4869      	ldr	r0, [pc, #420]	; (8009b18 <LCD_Flood+0x278>)
 8009974:	f7fd f8a6 	bl	8006ac4 <gpio_write>
 8009978:	2001      	movs	r0, #1
 800997a:	f7ff fb87 	bl	800908c <delay>
 800997e:	2201      	movs	r2, #1
 8009980:	2101      	movs	r1, #1
 8009982:	4865      	ldr	r0, [pc, #404]	; (8009b18 <LCD_Flood+0x278>)
 8009984:	f7fd f89e 	bl	8006ac4 <gpio_write>
 8009988:	2001      	movs	r0, #1
 800998a:	f7ff fb7f 	bl	800908c <delay>
				LCD_WR_STROBE();
 800998e:	2200      	movs	r2, #0
 8009990:	2101      	movs	r1, #1
 8009992:	4861      	ldr	r0, [pc, #388]	; (8009b18 <LCD_Flood+0x278>)
 8009994:	f7fd f896 	bl	8006ac4 <gpio_write>
 8009998:	2001      	movs	r0, #1
 800999a:	f7ff fb77 	bl	800908c <delay>
 800999e:	2201      	movs	r2, #1
 80099a0:	2101      	movs	r1, #1
 80099a2:	485d      	ldr	r0, [pc, #372]	; (8009b18 <LCD_Flood+0x278>)
 80099a4:	f7fd f88e 	bl	8006ac4 <gpio_write>
 80099a8:	2001      	movs	r0, #1
 80099aa:	f7ff fb6f 	bl	800908c <delay>
				LCD_WR_STROBE();
 80099ae:	2200      	movs	r2, #0
 80099b0:	2101      	movs	r1, #1
 80099b2:	4859      	ldr	r0, [pc, #356]	; (8009b18 <LCD_Flood+0x278>)
 80099b4:	f7fd f886 	bl	8006ac4 <gpio_write>
 80099b8:	2001      	movs	r0, #1
 80099ba:	f7ff fb67 	bl	800908c <delay>
 80099be:	2201      	movs	r2, #1
 80099c0:	2101      	movs	r1, #1
 80099c2:	4855      	ldr	r0, [pc, #340]	; (8009b18 <LCD_Flood+0x278>)
 80099c4:	f7fd f87e 	bl	8006ac4 <gpio_write>
 80099c8:	2001      	movs	r0, #1
 80099ca:	f7ff fb5f 	bl	800908c <delay>
				LCD_WR_STROBE();
 80099ce:	2200      	movs	r2, #0
 80099d0:	2101      	movs	r1, #1
 80099d2:	4851      	ldr	r0, [pc, #324]	; (8009b18 <LCD_Flood+0x278>)
 80099d4:	f7fd f876 	bl	8006ac4 <gpio_write>
 80099d8:	2001      	movs	r0, #1
 80099da:	f7ff fb57 	bl	800908c <delay>
 80099de:	2201      	movs	r2, #1
 80099e0:	2101      	movs	r1, #1
 80099e2:	484d      	ldr	r0, [pc, #308]	; (8009b18 <LCD_Flood+0x278>)
 80099e4:	f7fd f86e 	bl	8006ac4 <gpio_write>
 80099e8:	2001      	movs	r0, #1
 80099ea:	f7ff fb4f 	bl	800908c <delay>
				LCD_WR_STROBE(); // x 4 pixels
 80099ee:	2200      	movs	r2, #0
 80099f0:	2101      	movs	r1, #1
 80099f2:	4849      	ldr	r0, [pc, #292]	; (8009b18 <LCD_Flood+0x278>)
 80099f4:	f7fd f866 	bl	8006ac4 <gpio_write>
 80099f8:	2001      	movs	r0, #1
 80099fa:	f7ff fb47 	bl	800908c <delay>
 80099fe:	2201      	movs	r2, #1
 8009a00:	2101      	movs	r1, #1
 8009a02:	4845      	ldr	r0, [pc, #276]	; (8009b18 <LCD_Flood+0x278>)
 8009a04:	f7fd f85e 	bl	8006ac4 <gpio_write>
 8009a08:	2001      	movs	r0, #1
 8009a0a:	f7ff fb3f 	bl	800908c <delay>
			} while (--i);
 8009a0e:	7b7b      	ldrb	r3, [r7, #13]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	737b      	strb	r3, [r7, #13]
 8009a14:	7b7b      	ldrb	r3, [r7, #13]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f47f af79 	bne.w	800990e <LCD_Flood+0x6e>
		while (blocks--) {
 8009a1c:	89fb      	ldrh	r3, [r7, #14]
 8009a1e:	1e5a      	subs	r2, r3, #1
 8009a20:	81fa      	strh	r2, [r7, #14]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f47f af71 	bne.w	800990a <LCD_Flood+0x6a>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a30:	737b      	strb	r3, [r7, #13]
 8009a32:	e01f      	b.n	8009a74 <LCD_Flood+0x1d4>
			LCD_WR_STROBE();
 8009a34:	2200      	movs	r2, #0
 8009a36:	2101      	movs	r1, #1
 8009a38:	4837      	ldr	r0, [pc, #220]	; (8009b18 <LCD_Flood+0x278>)
 8009a3a:	f7fd f843 	bl	8006ac4 <gpio_write>
 8009a3e:	2001      	movs	r0, #1
 8009a40:	f7ff fb24 	bl	800908c <delay>
 8009a44:	2201      	movs	r2, #1
 8009a46:	2101      	movs	r1, #1
 8009a48:	4833      	ldr	r0, [pc, #204]	; (8009b18 <LCD_Flood+0x278>)
 8009a4a:	f7fd f83b 	bl	8006ac4 <gpio_write>
 8009a4e:	2001      	movs	r0, #1
 8009a50:	f7ff fb1c 	bl	800908c <delay>
			LCD_WR_STROBE();
 8009a54:	2200      	movs	r2, #0
 8009a56:	2101      	movs	r1, #1
 8009a58:	482f      	ldr	r0, [pc, #188]	; (8009b18 <LCD_Flood+0x278>)
 8009a5a:	f7fd f833 	bl	8006ac4 <gpio_write>
 8009a5e:	2001      	movs	r0, #1
 8009a60:	f7ff fb14 	bl	800908c <delay>
 8009a64:	2201      	movs	r2, #1
 8009a66:	2101      	movs	r1, #1
 8009a68:	482b      	ldr	r0, [pc, #172]	; (8009b18 <LCD_Flood+0x278>)
 8009a6a:	f7fd f82b 	bl	8006ac4 <gpio_write>
 8009a6e:	2001      	movs	r0, #1
 8009a70:	f7ff fb0c 	bl	800908c <delay>
		for (i = (uint8_t) len & 63; i--;) {
 8009a74:	7b7b      	ldrb	r3, [r7, #13]
 8009a76:	1e5a      	subs	r2, r3, #1
 8009a78:	737a      	strb	r2, [r7, #13]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1da      	bne.n	8009a34 <LCD_Flood+0x194>
 8009a7e:	e03f      	b.n	8009b00 <LCD_Flood+0x260>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 8009a80:	2310      	movs	r3, #16
 8009a82:	737b      	strb	r3, [r7, #13]
			do {
				LCD_Write8(hi);
 8009a84:	7b3b      	ldrb	r3, [r7, #12]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 fa8e 	bl	8009fa8 <LCD_Write8>
				LCD_Write8(lo);
 8009a8c:	7afb      	ldrb	r3, [r7, #11]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fa8a 	bl	8009fa8 <LCD_Write8>
				LCD_Write8(hi);
 8009a94:	7b3b      	ldrb	r3, [r7, #12]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fa86 	bl	8009fa8 <LCD_Write8>
				LCD_Write8(lo);
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 fa82 	bl	8009fa8 <LCD_Write8>
				LCD_Write8(hi);
 8009aa4:	7b3b      	ldrb	r3, [r7, #12]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fa7e 	bl	8009fa8 <LCD_Write8>
				LCD_Write8(lo);
 8009aac:	7afb      	ldrb	r3, [r7, #11]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 fa7a 	bl	8009fa8 <LCD_Write8>
				LCD_Write8(hi);
 8009ab4:	7b3b      	ldrb	r3, [r7, #12]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fa76 	bl	8009fa8 <LCD_Write8>
				LCD_Write8(lo);
 8009abc:	7afb      	ldrb	r3, [r7, #11]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 fa72 	bl	8009fa8 <LCD_Write8>
			} while (--i);
 8009ac4:	7b7b      	ldrb	r3, [r7, #13]
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	737b      	strb	r3, [r7, #13]
 8009aca:	7b7b      	ldrb	r3, [r7, #13]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1d9      	bne.n	8009a84 <LCD_Flood+0x1e4>
		while (blocks--) {
 8009ad0:	89fb      	ldrh	r3, [r7, #14]
 8009ad2:	1e5a      	subs	r2, r3, #1
 8009ad4:	81fa      	strh	r2, [r7, #14]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1d2      	bne.n	8009a80 <LCD_Flood+0x1e0>
		}
		for (i = (uint8_t) len & 63; i--;) {
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ae2:	737b      	strb	r3, [r7, #13]
 8009ae4:	e007      	b.n	8009af6 <LCD_Flood+0x256>
			LCD_Write8(hi);
 8009ae6:	7b3b      	ldrb	r3, [r7, #12]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 fa5d 	bl	8009fa8 <LCD_Write8>
			LCD_Write8(lo);
 8009aee:	7afb      	ldrb	r3, [r7, #11]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 fa59 	bl	8009fa8 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 8009af6:	7b7b      	ldrb	r3, [r7, #13]
 8009af8:	1e5a      	subs	r2, r3, #1
 8009afa:	737a      	strb	r2, [r7, #13]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1f2      	bne.n	8009ae6 <LCD_Flood+0x246>
		}
	}
	LCD_CS_HIGH();
 8009b00:	2201      	movs	r2, #1
 8009b02:	2100      	movs	r1, #0
 8009b04:	4803      	ldr	r0, [pc, #12]	; (8009b14 <LCD_Flood+0x274>)
 8009b06:	f7fc ffdd 	bl	8006ac4 <gpio_write>
}
 8009b0a:	bf00      	nop
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	40020400 	.word	0x40020400
 8009b18:	40020000 	.word	0x40020000

08009b1c <LCD_pushColors>:

void LCD_pushColors(uint16_t *data, uint8_t len, bool first) {
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	70fb      	strb	r3, [r7, #3]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	70bb      	strb	r3, [r7, #2]
	uint16_t color;
	uint8_t hi, lo;
	LCD_CS_LOW();
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2100      	movs	r1, #0
 8009b30:	481b      	ldr	r0, [pc, #108]	; (8009ba0 <LCD_pushColors+0x84>)
 8009b32:	f7fc ffc7 	bl	8006ac4 <gpio_write>

	if (first == true) {
 8009b36:	78bb      	ldrb	r3, [r7, #2]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00a      	beq.n	8009b52 <LCD_pushColors+0x36>
		LCD_CD_LOW();
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2104      	movs	r1, #4
 8009b40:	4818      	ldr	r0, [pc, #96]	; (8009ba4 <LCD_pushColors+0x88>)
 8009b42:	f7fc ffbf 	bl	8006ac4 <gpio_write>
		LCD_Write8(0x00); // High byte of GRAM register...
 8009b46:	2000      	movs	r0, #0
 8009b48:	f000 fa2e 	bl	8009fa8 <LCD_Write8>
		LCD_Write8(0x22); // Write data to GRAM
 8009b4c:	2022      	movs	r0, #34	; 0x22
 8009b4e:	f000 fa2b 	bl	8009fa8 <LCD_Write8>
	}

	LCD_CD_HIGH();
 8009b52:	2201      	movs	r2, #1
 8009b54:	2104      	movs	r1, #4
 8009b56:	4813      	ldr	r0, [pc, #76]	; (8009ba4 <LCD_pushColors+0x88>)
 8009b58:	f7fc ffb4 	bl	8006ac4 <gpio_write>
	while (len--) {
 8009b5c:	e012      	b.n	8009b84 <LCD_pushColors+0x68>
		color = *data++;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	1c9a      	adds	r2, r3, #2
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	81fb      	strh	r3, [r7, #14]
		hi = color >> 8; // Don't simplify or merge these
 8009b68:	89fb      	ldrh	r3, [r7, #14]
 8009b6a:	0a1b      	lsrs	r3, r3, #8
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	737b      	strb	r3, [r7, #13]
		lo = color;      // lines, there's macro shenanigans
 8009b70:	89fb      	ldrh	r3, [r7, #14]
 8009b72:	733b      	strb	r3, [r7, #12]
		LCD_Write8(hi);		//going on
 8009b74:	7b7b      	ldrb	r3, [r7, #13]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 fa16 	bl	8009fa8 <LCD_Write8>
		LCD_Write8(lo);
 8009b7c:	7b3b      	ldrb	r3, [r7, #12]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fa12 	bl	8009fa8 <LCD_Write8>
	while (len--) {
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	1e5a      	subs	r2, r3, #1
 8009b88:	70fa      	strb	r2, [r7, #3]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e7      	bne.n	8009b5e <LCD_pushColors+0x42>
	}
	LCD_CS_HIGH();
 8009b8e:	2201      	movs	r2, #1
 8009b90:	2100      	movs	r1, #0
 8009b92:	4803      	ldr	r0, [pc, #12]	; (8009ba0 <LCD_pushColors+0x84>)
 8009b94:	f7fc ff96 	bl	8006ac4 <gpio_write>
}
 8009b98:	bf00      	nop
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	40020400 	.word	0x40020400
 8009ba4:	40020000 	.word	0x40020000

08009ba8 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8009ba8:	b40f      	push	{r0, r1, r2, r3}
 8009baa:	b5b0      	push	{r4, r5, r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8009bb0:	f107 031c 	add.w	r3, r7, #28
 8009bb4:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	69b9      	ldr	r1, [r7, #24]
 8009bba:	483d      	ldr	r0, [pc, #244]	; (8009cb0 <LCD_Printf+0x108>)
 8009bbc:	f003 fd1a 	bl	800d5f4 <vsiprintf>
	va_end(lst);

	p = buf;
 8009bc0:	4b3b      	ldr	r3, [pc, #236]	; (8009cb0 <LCD_Printf+0x108>)
 8009bc2:	607b      	str	r3, [r7, #4]
	while (*p) {
 8009bc4:	e068      	b.n	8009c98 <LCD_Printf+0xf0>
		if (*p == '\n') {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b0a      	cmp	r3, #10
 8009bcc:	d111      	bne.n	8009bf2 <LCD_Printf+0x4a>
			m_cursor_y += m_textsize * 8;
 8009bce:	4b39      	ldr	r3, [pc, #228]	; (8009cb4 <LCD_Printf+0x10c>)
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	00db      	lsls	r3, r3, #3
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	4b37      	ldr	r3, [pc, #220]	; (8009cb8 <LCD_Printf+0x110>)
 8009bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	4413      	add	r3, r2
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	b21a      	sxth	r2, r3
 8009be6:	4b34      	ldr	r3, [pc, #208]	; (8009cb8 <LCD_Printf+0x110>)
 8009be8:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8009bea:	4b34      	ldr	r3, [pc, #208]	; (8009cbc <LCD_Printf+0x114>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	801a      	strh	r2, [r3, #0]
 8009bf0:	e04f      	b.n	8009c92 <LCD_Printf+0xea>
		} else if (*p == '\r') {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	2b0d      	cmp	r3, #13
 8009bf8:	d04b      	beq.n	8009c92 <LCD_Printf+0xea>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8009bfa:	4b30      	ldr	r3, [pc, #192]	; (8009cbc <LCD_Printf+0x114>)
 8009bfc:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009c00:	4b2d      	ldr	r3, [pc, #180]	; (8009cb8 <LCD_Printf+0x110>)
 8009c02:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	781c      	ldrb	r4, [r3, #0]
 8009c0a:	4b2d      	ldr	r3, [pc, #180]	; (8009cc0 <LCD_Printf+0x118>)
 8009c0c:	881d      	ldrh	r5, [r3, #0]
 8009c0e:	4b2d      	ldr	r3, [pc, #180]	; (8009cc4 <LCD_Printf+0x11c>)
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	4a28      	ldr	r2, [pc, #160]	; (8009cb4 <LCD_Printf+0x10c>)
 8009c14:	7812      	ldrb	r2, [r2, #0]
 8009c16:	9201      	str	r2, [sp, #4]
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	462b      	mov	r3, r5
 8009c1c:	4622      	mov	r2, r4
 8009c1e:	f7ff fc63 	bl	80094e8 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 8009c22:	4b24      	ldr	r3, [pc, #144]	; (8009cb4 <LCD_Printf+0x10c>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	461a      	mov	r2, r3
 8009c2a:	0052      	lsls	r2, r2, #1
 8009c2c:	4413      	add	r3, r2
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	4b22      	ldr	r3, [pc, #136]	; (8009cbc <LCD_Printf+0x114>)
 8009c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	4413      	add	r3, r2
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	b21a      	sxth	r2, r3
 8009c40:	4b1e      	ldr	r3, [pc, #120]	; (8009cbc <LCD_Printf+0x114>)
 8009c42:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 8009c44:	4b20      	ldr	r3, [pc, #128]	; (8009cc8 <LCD_Printf+0x120>)
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d022      	beq.n	8009c92 <LCD_Printf+0xea>
 8009c4c:	4b1b      	ldr	r3, [pc, #108]	; (8009cbc <LCD_Printf+0x114>)
 8009c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c52:	4619      	mov	r1, r3
 8009c54:	4b1d      	ldr	r3, [pc, #116]	; (8009ccc <LCD_Printf+0x124>)
 8009c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	4b15      	ldr	r3, [pc, #84]	; (8009cb4 <LCD_Printf+0x10c>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	4613      	mov	r3, r2
 8009c64:	0092      	lsls	r2, r2, #2
 8009c66:	1a9b      	subs	r3, r3, r2
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	4403      	add	r3, r0
 8009c6c:	4299      	cmp	r1, r3
 8009c6e:	dd10      	ble.n	8009c92 <LCD_Printf+0xea>
				m_cursor_y += m_textsize * 8;
 8009c70:	4b10      	ldr	r3, [pc, #64]	; (8009cb4 <LCD_Printf+0x10c>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <LCD_Printf+0x110>)
 8009c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	4413      	add	r3, r2
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	b21a      	sxth	r2, r3
 8009c88:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <LCD_Printf+0x110>)
 8009c8a:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8009c8c:	4b0b      	ldr	r3, [pc, #44]	; (8009cbc <LCD_Printf+0x114>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	3301      	adds	r3, #1
 8009c96:	607b      	str	r3, [r7, #4]
	while (*p) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d192      	bne.n	8009bc6 <LCD_Printf+0x1e>
	}
}
 8009ca0:	bf00      	nop
 8009ca2:	bf00      	nop
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009cac:	b004      	add	sp, #16
 8009cae:	4770      	bx	lr
 8009cb0:	20000a70 	.word	0x20000a70
 8009cb4:	20000a6a 	.word	0x20000a6a
 8009cb8:	20000a64 	.word	0x20000a64
 8009cbc:	20000a62 	.word	0x20000a62
 8009cc0:	20000a66 	.word	0x20000a66
 8009cc4:	20000a68 	.word	0x20000a68
 8009cc8:	20000a6c 	.word	0x20000a6c
 8009ccc:	20000a5e 	.word	0x20000a5e

08009cd0 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4824      	ldr	r0, [pc, #144]	; (8009d6c <LCD_Reset+0x9c>)
 8009cdc:	f7fc fef2 	bl	8006ac4 <gpio_write>
	LCD_WR_HIGH();
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	4822      	ldr	r0, [pc, #136]	; (8009d70 <LCD_Reset+0xa0>)
 8009ce6:	f7fc feed 	bl	8006ac4 <gpio_write>
	LCD_RD_HIGH();
 8009cea:	2201      	movs	r2, #1
 8009cec:	2100      	movs	r1, #0
 8009cee:	4820      	ldr	r0, [pc, #128]	; (8009d70 <LCD_Reset+0xa0>)
 8009cf0:	f7fc fee8 	bl	8006ac4 <gpio_write>

	LCD_RST_LOW();
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	481e      	ldr	r0, [pc, #120]	; (8009d74 <LCD_Reset+0xa4>)
 8009cfa:	f7fc fee3 	bl	8006ac4 <gpio_write>
	delay(100);
 8009cfe:	2064      	movs	r0, #100	; 0x64
 8009d00:	f7ff f9c4 	bl	800908c <delay>
	LCD_RST_HIGH();
 8009d04:	2201      	movs	r2, #1
 8009d06:	2101      	movs	r1, #1
 8009d08:	481a      	ldr	r0, [pc, #104]	; (8009d74 <LCD_Reset+0xa4>)
 8009d0a:	f7fc fedb 	bl	8006ac4 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2100      	movs	r1, #0
 8009d12:	4816      	ldr	r0, [pc, #88]	; (8009d6c <LCD_Reset+0x9c>)
 8009d14:	f7fc fed6 	bl	8006ac4 <gpio_write>

	LCD_CD_LOW();
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2104      	movs	r1, #4
 8009d1c:	4814      	ldr	r0, [pc, #80]	; (8009d70 <LCD_Reset+0xa0>)
 8009d1e:	f7fc fed1 	bl	8006ac4 <gpio_write>
	LCD_Write8(0x00);
 8009d22:	2000      	movs	r0, #0
 8009d24:	f000 f940 	bl	8009fa8 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 8009d28:	2300      	movs	r3, #0
 8009d2a:	71fb      	strb	r3, [r7, #7]
 8009d2c:	e012      	b.n	8009d54 <LCD_Reset+0x84>
		LCD_WR_STROBE(); // Three extra 0x00s
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2101      	movs	r1, #1
 8009d32:	480f      	ldr	r0, [pc, #60]	; (8009d70 <LCD_Reset+0xa0>)
 8009d34:	f7fc fec6 	bl	8006ac4 <gpio_write>
 8009d38:	2001      	movs	r0, #1
 8009d3a:	f7ff f9a7 	bl	800908c <delay>
 8009d3e:	2201      	movs	r2, #1
 8009d40:	2101      	movs	r1, #1
 8009d42:	480b      	ldr	r0, [pc, #44]	; (8009d70 <LCD_Reset+0xa0>)
 8009d44:	f7fc febe 	bl	8006ac4 <gpio_write>
 8009d48:	2001      	movs	r0, #1
 8009d4a:	f7ff f99f 	bl	800908c <delay>
	for (uint8_t i = 0; i < 3; i++)
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	3301      	adds	r3, #1
 8009d52:	71fb      	strb	r3, [r7, #7]
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d9e9      	bls.n	8009d2e <LCD_Reset+0x5e>
	LCD_CS_HIGH();
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	4803      	ldr	r0, [pc, #12]	; (8009d6c <LCD_Reset+0x9c>)
 8009d60:	f7fc feb0 	bl	8006ac4 <gpio_write>
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	40020400 	.word	0x40020400
 8009d70:	40020000 	.word	0x40020000
 8009d74:	40020800 	.word	0x40020800

08009d78 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	b21a      	sxth	r2, r3
 8009d86:	4b06      	ldr	r3, [pc, #24]	; (8009da0 <LCD_SetCursor+0x28>)
 8009d88:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	b21a      	sxth	r2, r3
 8009d8e:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <LCD_SetCursor+0x2c>)
 8009d90:	801a      	strh	r2, [r3, #0]
}
 8009d92:	bf00      	nop
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	20000a62 	.word	0x20000a62
 8009da4:	20000a64 	.word	0x20000a64

08009da8 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	71fb      	strb	r3, [r7, #7]
	m_textsize = (s > 0) ? s : 1;
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <LCD_SetTextSize+0x14>
 8009db8:	79fb      	ldrb	r3, [r7, #7]
 8009dba:	e000      	b.n	8009dbe <LCD_SetTextSize+0x16>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4a04      	ldr	r2, [pc, #16]	; (8009dd0 <LCD_SetTextSize+0x28>)
 8009dc0:	7013      	strb	r3, [r2, #0]
}
 8009dc2:	bf00      	nop
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	20000a6a 	.word	0x20000a6a

08009dd4 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	460a      	mov	r2, r1
 8009dde:	80fb      	strh	r3, [r7, #6]
 8009de0:	4613      	mov	r3, r2
 8009de2:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8009de4:	4a05      	ldr	r2, [pc, #20]	; (8009dfc <LCD_SetTextColor+0x28>)
 8009de6:	88fb      	ldrh	r3, [r7, #6]
 8009de8:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 8009dea:	4a05      	ldr	r2, [pc, #20]	; (8009e00 <LCD_SetTextColor+0x2c>)
 8009dec:	88bb      	ldrh	r3, [r7, #4]
 8009dee:	8013      	strh	r3, [r2, #0]
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	20000a66 	.word	0x20000a66
 8009e00:	20000a68 	.word	0x20000a68

08009e04 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 8009e0e:	79fb      	ldrb	r3, [r7, #7]
 8009e10:	f003 0303 	and.w	r3, r3, #3
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	4b13      	ldr	r3, [pc, #76]	; (8009e64 <LCD_SetRotation+0x60>)
 8009e18:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8009e1a:	4b12      	ldr	r3, [pc, #72]	; (8009e64 <LCD_SetRotation+0x60>)
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d81a      	bhi.n	8009e58 <LCD_SetRotation+0x54>
 8009e22:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <LCD_SetRotation+0x24>)
 8009e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e28:	08009e39 	.word	0x08009e39
 8009e2c:	08009e49 	.word	0x08009e49
 8009e30:	08009e39 	.word	0x08009e39
 8009e34:	08009e49 	.word	0x08009e49
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8009e38:	4b0b      	ldr	r3, [pc, #44]	; (8009e68 <LCD_SetRotation+0x64>)
 8009e3a:	22f0      	movs	r2, #240	; 0xf0
 8009e3c:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 8009e3e:	4b0b      	ldr	r3, [pc, #44]	; (8009e6c <LCD_SetRotation+0x68>)
 8009e40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009e44:	801a      	strh	r2, [r3, #0]
		break;
 8009e46:	e007      	b.n	8009e58 <LCD_SetRotation+0x54>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8009e48:	4b07      	ldr	r3, [pc, #28]	; (8009e68 <LCD_SetRotation+0x64>)
 8009e4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009e4e:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8009e50:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <LCD_SetRotation+0x68>)
 8009e52:	22f0      	movs	r2, #240	; 0xf0
 8009e54:	801a      	strh	r2, [r3, #0]
		break;
 8009e56:	bf00      	nop
	}
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	20000a6b 	.word	0x20000a6b
 8009e68:	20000a5e 	.word	0x20000a5e
 8009e6c:	20000a60 	.word	0x20000a60

08009e70 <LCD_getRotation>:
 *
 * \param None
 *
 * \return uint8_t
 */
uint8_t LCD_getRotation(void) {
 8009e70:	b480      	push	{r7}
 8009e72:	af00      	add	r7, sp, #0
	return m_rotation;
 8009e74:	4b03      	ldr	r3, [pc, #12]	; (8009e84 <LCD_getRotation+0x14>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000a6b 	.word	0x20000a6b

08009e88 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b088      	sub	sp, #32
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 8009e96:	2200      	movs	r2, #0
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4841      	ldr	r0, [pc, #260]	; (8009fa0 <LCD_SetAddrWindow+0x118>)
 8009e9c:	f7fc fe12 	bl	8006ac4 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 8009ea0:	4b40      	ldr	r3, [pc, #256]	; (8009fa4 <LCD_SetAddrWindow+0x11c>)
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d038      	beq.n	8009f1a <LCD_SetAddrWindow+0x92>
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	dc03      	bgt.n	8009eb4 <LCD_SetAddrWindow+0x2c>
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d006      	beq.n	8009ebe <LCD_SetAddrWindow+0x36>
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d017      	beq.n	8009ee4 <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	61fb      	str	r3, [r7, #28]
		y = y1;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	61bb      	str	r3, [r7, #24]
		break;
 8009ebc:	e042      	b.n	8009f44 <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	617b      	str	r3, [r7, #20]
		y1 = x1;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009ecc:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009ed8:	607b      	str	r3, [r7, #4]
		x = x2;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	61fb      	str	r3, [r7, #28]
		y = y1;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	61bb      	str	r3, [r7, #24]
		break;
 8009ee2:	e02f      	b.n	8009f44 <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009eee:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009ef6:	607b      	str	r3, [r7, #4]
		t = y1;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8009f02:	3301      	adds	r3, #1
 8009f04:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	603b      	str	r3, [r7, #0]
		x = x2;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	61fb      	str	r3, [r7, #28]
		y = y2;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	61bb      	str	r3, [r7, #24]
		break;
 8009f18:	e014      	b.n	8009f44 <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	617b      	str	r3, [r7, #20]
		x1 = y1;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8009f28:	3301      	adds	r3, #1
 8009f2a:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8009f36:	3301      	adds	r3, #1
 8009f38:	603b      	str	r3, [r7, #0]
		x = x1;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	61fb      	str	r3, [r7, #28]
		y = y2;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	61bb      	str	r3, [r7, #24]
		break;
 8009f42:	bf00      	nop
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	4619      	mov	r1, r3
 8009f4a:	2050      	movs	r0, #80	; 0x50
 8009f4c:	f000 f888 	bl	800a060 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	4619      	mov	r1, r3
 8009f56:	2051      	movs	r0, #81	; 0x51
 8009f58:	f000 f882 	bl	800a060 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	4619      	mov	r1, r3
 8009f62:	2052      	movs	r0, #82	; 0x52
 8009f64:	f000 f87c 	bl	800a060 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	2053      	movs	r0, #83	; 0x53
 8009f70:	f000 f876 	bl	800a060 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	4619      	mov	r1, r3
 8009f7a:	2020      	movs	r0, #32
 8009f7c:	f000 f870 	bl	800a060 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	4619      	mov	r1, r3
 8009f86:	2021      	movs	r0, #33	; 0x21
 8009f88:	f000 f86a 	bl	800a060 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	2100      	movs	r1, #0
 8009f90:	4803      	ldr	r0, [pc, #12]	; (8009fa0 <LCD_SetAddrWindow+0x118>)
 8009f92:	f7fc fd97 	bl	8006ac4 <gpio_write>
}
 8009f96:	bf00      	nop
 8009f98:	3720      	adds	r7, #32
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	40020400 	.word	0x40020400
 8009fa4:	20000a6b 	.word	0x20000a6b

08009fa8 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8009fb2:	4b28      	ldr	r3, [pc, #160]	; (800a054 <LCD_Write8+0xac>)
 8009fb4:	695a      	ldr	r2, [r3, #20]
 8009fb6:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009fba:	4013      	ands	r3, r2
 8009fbc:	79fa      	ldrb	r2, [r7, #7]
 8009fbe:	0252      	lsls	r2, r2, #9
 8009fc0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8009fc4:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	021b      	lsls	r3, r3, #8
 8009fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	79fb      	ldrb	r3, [r7, #7]
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8009fd8:	491e      	ldr	r1, [pc, #120]	; (800a054 <LCD_Write8+0xac>)
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8009fda:	4313      	orrs	r3, r2
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8009fdc:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8009fde:	4b1e      	ldr	r3, [pc, #120]	; (800a058 <LCD_Write8+0xb0>)
 8009fe0:	695a      	ldr	r2, [r3, #20]
 8009fe2:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	79fa      	ldrb	r2, [r7, #7]
 8009fea:	f002 0208 	and.w	r2, r2, #8
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	f003 0320 	and.w	r3, r3, #32
 8009ff8:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	105b      	asrs	r3, r3, #1
 8009ffe:	f003 0310 	and.w	r3, r3, #16
 800a002:	431a      	orrs	r2, r3
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	011b      	lsls	r3, r3, #4
 800a008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800a00c:	4912      	ldr	r1, [pc, #72]	; (800a058 <LCD_Write8+0xb0>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800a00e:	4313      	orrs	r3, r2
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800a010:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 800a012:	4b12      	ldr	r3, [pc, #72]	; (800a05c <LCD_Write8+0xb4>)
 800a014:	695a      	ldr	r2, [r3, #20]
 800a016:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800a01a:	4013      	ands	r3, r2
 800a01c:	79fa      	ldrb	r2, [r7, #7]
 800a01e:	0192      	lsls	r2, r2, #6
 800a020:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a024:	490d      	ldr	r1, [pc, #52]	; (800a05c <LCD_Write8+0xb4>)
 800a026:	4313      	orrs	r3, r2
 800a028:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 800a02a:	2200      	movs	r2, #0
 800a02c:	2101      	movs	r1, #1
 800a02e:	4809      	ldr	r0, [pc, #36]	; (800a054 <LCD_Write8+0xac>)
 800a030:	f7fc fd48 	bl	8006ac4 <gpio_write>
 800a034:	2001      	movs	r0, #1
 800a036:	f7ff f829 	bl	800908c <delay>
 800a03a:	2201      	movs	r2, #1
 800a03c:	2101      	movs	r1, #1
 800a03e:	4805      	ldr	r0, [pc, #20]	; (800a054 <LCD_Write8+0xac>)
 800a040:	f7fc fd40 	bl	8006ac4 <gpio_write>
 800a044:	2001      	movs	r0, #1
 800a046:	f7ff f821 	bl	800908c <delay>
}
 800a04a:	bf00      	nop
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	40020000 	.word	0x40020000
 800a058:	40020400 	.word	0x40020400
 800a05c:	40020800 	.word	0x40020800

0800a060 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	4603      	mov	r3, r0
 800a068:	460a      	mov	r2, r1
 800a06a:	80fb      	strh	r3, [r7, #6]
 800a06c:	4613      	mov	r3, r2
 800a06e:	80bb      	strh	r3, [r7, #4]
	uint8_t hi, lo;
	hi = (a) >> 8;
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	b29b      	uxth	r3, r3
 800a076:	73fb      	strb	r3, [r7, #15]
	lo = (a);
 800a078:	88fb      	ldrh	r3, [r7, #6]
 800a07a:	73bb      	strb	r3, [r7, #14]
	LCD_CD_LOW();
 800a07c:	2200      	movs	r2, #0
 800a07e:	2104      	movs	r1, #4
 800a080:	4810      	ldr	r0, [pc, #64]	; (800a0c4 <LCD_WriteRegister16+0x64>)
 800a082:	f7fc fd1f 	bl	8006ac4 <gpio_write>
	LCD_Write8(hi);
 800a086:	7bfb      	ldrb	r3, [r7, #15]
 800a088:	4618      	mov	r0, r3
 800a08a:	f7ff ff8d 	bl	8009fa8 <LCD_Write8>
	LCD_Write8(lo);
 800a08e:	7bbb      	ldrb	r3, [r7, #14]
 800a090:	4618      	mov	r0, r3
 800a092:	f7ff ff89 	bl	8009fa8 <LCD_Write8>
	hi = (d) >> 8;
 800a096:	88bb      	ldrh	r3, [r7, #4]
 800a098:	0a1b      	lsrs	r3, r3, #8
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	73fb      	strb	r3, [r7, #15]
	lo = (d);
 800a09e:	88bb      	ldrh	r3, [r7, #4]
 800a0a0:	73bb      	strb	r3, [r7, #14]
	LCD_CD_HIGH();
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	2104      	movs	r1, #4
 800a0a6:	4807      	ldr	r0, [pc, #28]	; (800a0c4 <LCD_WriteRegister16+0x64>)
 800a0a8:	f7fc fd0c 	bl	8006ac4 <gpio_write>
	LCD_Write8(hi);
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff ff7a 	bl	8009fa8 <LCD_Write8>
	LCD_Write8(lo);
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff ff76 	bl	8009fa8 <LCD_Write8>
}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	40020000 	.word	0x40020000

0800a0c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	4a08      	ldr	r2, [pc, #32]	; (800a0f8 <disk_status+0x30>)
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	79fa      	ldrb	r2, [r7, #7]
 800a0e0:	4905      	ldr	r1, [pc, #20]	; (800a0f8 <disk_status+0x30>)
 800a0e2:	440a      	add	r2, r1
 800a0e4:	7a12      	ldrb	r2, [r2, #8]
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	4798      	blx	r3
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	20000b98 	.word	0x20000b98

0800a0fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	4603      	mov	r3, r0
 800a104:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a10a:	79fb      	ldrb	r3, [r7, #7]
 800a10c:	4a0d      	ldr	r2, [pc, #52]	; (800a144 <disk_initialize+0x48>)
 800a10e:	5cd3      	ldrb	r3, [r2, r3]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d111      	bne.n	800a138 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	4a0b      	ldr	r2, [pc, #44]	; (800a144 <disk_initialize+0x48>)
 800a118:	2101      	movs	r1, #1
 800a11a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	4a09      	ldr	r2, [pc, #36]	; (800a144 <disk_initialize+0x48>)
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4413      	add	r3, r2
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	79fa      	ldrb	r2, [r7, #7]
 800a12a:	4906      	ldr	r1, [pc, #24]	; (800a144 <disk_initialize+0x48>)
 800a12c:	440a      	add	r2, r1
 800a12e:	7a12      	ldrb	r2, [r2, #8]
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
 800a134:	4603      	mov	r3, r0
 800a136:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a138:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20000b98 	.word	0x20000b98

0800a148 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a148:	b590      	push	{r4, r7, lr}
 800a14a:	b087      	sub	sp, #28
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	4603      	mov	r3, r0
 800a156:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	4a0a      	ldr	r2, [pc, #40]	; (800a184 <disk_read+0x3c>)
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	689c      	ldr	r4, [r3, #8]
 800a164:	7bfb      	ldrb	r3, [r7, #15]
 800a166:	4a07      	ldr	r2, [pc, #28]	; (800a184 <disk_read+0x3c>)
 800a168:	4413      	add	r3, r2
 800a16a:	7a18      	ldrb	r0, [r3, #8]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	68b9      	ldr	r1, [r7, #8]
 800a172:	47a0      	blx	r4
 800a174:	4603      	mov	r3, r0
 800a176:	75fb      	strb	r3, [r7, #23]
  return res;
 800a178:	7dfb      	ldrb	r3, [r7, #23]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	371c      	adds	r7, #28
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd90      	pop	{r4, r7, pc}
 800a182:	bf00      	nop
 800a184:	20000b98 	.word	0x20000b98

0800a188 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a188:	b590      	push	{r4, r7, lr}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60b9      	str	r1, [r7, #8]
 800a190:	607a      	str	r2, [r7, #4]
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	4603      	mov	r3, r0
 800a196:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a198:	7bfb      	ldrb	r3, [r7, #15]
 800a19a:	4a0a      	ldr	r2, [pc, #40]	; (800a1c4 <disk_write+0x3c>)
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4413      	add	r3, r2
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	68dc      	ldr	r4, [r3, #12]
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
 800a1a6:	4a07      	ldr	r2, [pc, #28]	; (800a1c4 <disk_write+0x3c>)
 800a1a8:	4413      	add	r3, r2
 800a1aa:	7a18      	ldrb	r0, [r3, #8]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	68b9      	ldr	r1, [r7, #8]
 800a1b2:	47a0      	blx	r4
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	371c      	adds	r7, #28
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd90      	pop	{r4, r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000b98 	.word	0x20000b98

0800a1c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	603a      	str	r2, [r7, #0]
 800a1d2:	71fb      	strb	r3, [r7, #7]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	4a09      	ldr	r2, [pc, #36]	; (800a200 <disk_ioctl+0x38>)
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	79fa      	ldrb	r2, [r7, #7]
 800a1e6:	4906      	ldr	r1, [pc, #24]	; (800a200 <disk_ioctl+0x38>)
 800a1e8:	440a      	add	r2, r1
 800a1ea:	7a10      	ldrb	r0, [r2, #8]
 800a1ec:	79b9      	ldrb	r1, [r7, #6]
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	4798      	blx	r3
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  return res;
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20000b98 	.word	0x20000b98

0800a204 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	3301      	adds	r3, #1
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a214:	89fb      	ldrh	r3, [r7, #14]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	b21a      	sxth	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	b21b      	sxth	r3, r3
 800a220:	4313      	orrs	r3, r2
 800a222:	b21b      	sxth	r3, r3
 800a224:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a226:	89fb      	ldrh	r3, [r7, #14]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3303      	adds	r3, #3
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	021b      	lsls	r3, r3, #8
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	3202      	adds	r2, #2
 800a24c:	7812      	ldrb	r2, [r2, #0]
 800a24e:	4313      	orrs	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	021b      	lsls	r3, r3, #8
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	3201      	adds	r2, #1
 800a25a:	7812      	ldrb	r2, [r2, #0]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	021b      	lsls	r3, r3, #8
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	7812      	ldrb	r2, [r2, #0]
 800a268:	4313      	orrs	r3, r2
 800a26a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a26c:	68fb      	ldr	r3, [r7, #12]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	460b      	mov	r3, r1
 800a284:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	1c5a      	adds	r2, r3, #1
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	887a      	ldrh	r2, [r7, #2]
 800a28e:	b2d2      	uxtb	r2, r2
 800a290:	701a      	strb	r2, [r3, #0]
 800a292:	887b      	ldrh	r3, [r7, #2]
 800a294:	0a1b      	lsrs	r3, r3, #8
 800a296:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	1c5a      	adds	r2, r3, #1
 800a29c:	607a      	str	r2, [r7, #4]
 800a29e:	887a      	ldrh	r2, [r7, #2]
 800a2a0:	b2d2      	uxtb	r2, r2
 800a2a2:	701a      	strb	r2, [r3, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	b2d2      	uxtb	r2, r2
 800a2c4:	701a      	strb	r2, [r3, #0]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	0a1b      	lsrs	r3, r3, #8
 800a2ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	1c5a      	adds	r2, r3, #1
 800a2d0:	607a      	str	r2, [r7, #4]
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	b2d2      	uxtb	r2, r2
 800a2d6:	701a      	strb	r2, [r3, #0]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	0a1b      	lsrs	r3, r3, #8
 800a2dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	1c5a      	adds	r2, r3, #1
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	0a1b      	lsrs	r3, r3, #8
 800a2ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	1c5a      	adds	r2, r3, #1
 800a2f4:	607a      	str	r2, [r7, #4]
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	b2d2      	uxtb	r2, r2
 800a2fa:	701a      	strb	r2, [r3, #0]
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a308:	b480      	push	{r7}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00d      	beq.n	800a33e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	1c53      	adds	r3, r2, #1
 800a326:	613b      	str	r3, [r7, #16]
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	1c59      	adds	r1, r3, #1
 800a32c:	6179      	str	r1, [r7, #20]
 800a32e:	7812      	ldrb	r2, [r2, #0]
 800a330:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	3b01      	subs	r3, #1
 800a336:	607b      	str	r3, [r7, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1f1      	bne.n	800a322 <mem_cpy+0x1a>
	}
}
 800a33e:	bf00      	nop
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a34a:	b480      	push	{r7}
 800a34c:	b087      	sub	sp, #28
 800a34e:	af00      	add	r7, sp, #0
 800a350:	60f8      	str	r0, [r7, #12]
 800a352:	60b9      	str	r1, [r7, #8]
 800a354:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	617a      	str	r2, [r7, #20]
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	b2d2      	uxtb	r2, r2
 800a364:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	3b01      	subs	r3, #1
 800a36a:	607b      	str	r3, [r7, #4]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1f3      	bne.n	800a35a <mem_set+0x10>
}
 800a372:	bf00      	nop
 800a374:	bf00      	nop
 800a376:	371c      	adds	r7, #28
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a380:	b480      	push	{r7}
 800a382:	b089      	sub	sp, #36	; 0x24
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	61fb      	str	r3, [r7, #28]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	1c5a      	adds	r2, r3, #1
 800a39c:	61fa      	str	r2, [r7, #28]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	61ba      	str	r2, [r7, #24]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	1acb      	subs	r3, r1, r3
 800a3ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	607b      	str	r3, [r7, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d002      	beq.n	800a3c0 <mem_cmp+0x40>
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0eb      	beq.n	800a398 <mem_cmp+0x18>

	return r;
 800a3c0:	697b      	ldr	r3, [r7, #20]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3724      	adds	r7, #36	; 0x24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a3d8:	e002      	b.n	800a3e0 <chk_chr+0x12>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	607b      	str	r3, [r7, #4]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d005      	beq.n	800a3f4 <chk_chr+0x26>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d1f2      	bne.n	800a3da <chk_chr+0xc>
	return *str;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a40e:	2300      	movs	r3, #0
 800a410:	60bb      	str	r3, [r7, #8]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	60fb      	str	r3, [r7, #12]
 800a416:	e029      	b.n	800a46c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a418:	4a27      	ldr	r2, [pc, #156]	; (800a4b8 <chk_lock+0xb4>)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	011b      	lsls	r3, r3, #4
 800a41e:	4413      	add	r3, r2
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01d      	beq.n	800a462 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a426:	4a24      	ldr	r2, [pc, #144]	; (800a4b8 <chk_lock+0xb4>)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	011b      	lsls	r3, r3, #4
 800a42c:	4413      	add	r3, r2
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	429a      	cmp	r2, r3
 800a436:	d116      	bne.n	800a466 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a438:	4a1f      	ldr	r2, [pc, #124]	; (800a4b8 <chk_lock+0xb4>)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	011b      	lsls	r3, r3, #4
 800a43e:	4413      	add	r3, r2
 800a440:	3304      	adds	r3, #4
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a448:	429a      	cmp	r2, r3
 800a44a:	d10c      	bne.n	800a466 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a44c:	4a1a      	ldr	r2, [pc, #104]	; (800a4b8 <chk_lock+0xb4>)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	011b      	lsls	r3, r3, #4
 800a452:	4413      	add	r3, r2
 800a454:	3308      	adds	r3, #8
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d102      	bne.n	800a466 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a460:	e007      	b.n	800a472 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a462:	2301      	movs	r3, #1
 800a464:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3301      	adds	r3, #1
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d9d2      	bls.n	800a418 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b02      	cmp	r3, #2
 800a476:	d109      	bne.n	800a48c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d102      	bne.n	800a484 <chk_lock+0x80>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b02      	cmp	r3, #2
 800a482:	d101      	bne.n	800a488 <chk_lock+0x84>
 800a484:	2300      	movs	r3, #0
 800a486:	e010      	b.n	800a4aa <chk_lock+0xa6>
 800a488:	2312      	movs	r3, #18
 800a48a:	e00e      	b.n	800a4aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d108      	bne.n	800a4a4 <chk_lock+0xa0>
 800a492:	4a09      	ldr	r2, [pc, #36]	; (800a4b8 <chk_lock+0xb4>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	011b      	lsls	r3, r3, #4
 800a498:	4413      	add	r3, r2
 800a49a:	330c      	adds	r3, #12
 800a49c:	881b      	ldrh	r3, [r3, #0]
 800a49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4a2:	d101      	bne.n	800a4a8 <chk_lock+0xa4>
 800a4a4:	2310      	movs	r3, #16
 800a4a6:	e000      	b.n	800a4aa <chk_lock+0xa6>
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	20000b78 	.word	0x20000b78

0800a4bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	607b      	str	r3, [r7, #4]
 800a4c6:	e002      	b.n	800a4ce <enq_lock+0x12>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	607b      	str	r3, [r7, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d806      	bhi.n	800a4e2 <enq_lock+0x26>
 800a4d4:	4a09      	ldr	r2, [pc, #36]	; (800a4fc <enq_lock+0x40>)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	4413      	add	r3, r2
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1f2      	bne.n	800a4c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	bf14      	ite	ne
 800a4e8:	2301      	movne	r3, #1
 800a4ea:	2300      	moveq	r3, #0
 800a4ec:	b2db      	uxtb	r3, r3
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20000b78 	.word	0x20000b78

0800a500 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a50a:	2300      	movs	r3, #0
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	e01f      	b.n	800a550 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a510:	4a41      	ldr	r2, [pc, #260]	; (800a618 <inc_lock+0x118>)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	011b      	lsls	r3, r3, #4
 800a516:	4413      	add	r3, r2
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d113      	bne.n	800a54a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a522:	4a3d      	ldr	r2, [pc, #244]	; (800a618 <inc_lock+0x118>)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	011b      	lsls	r3, r3, #4
 800a528:	4413      	add	r3, r2
 800a52a:	3304      	adds	r3, #4
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a532:	429a      	cmp	r2, r3
 800a534:	d109      	bne.n	800a54a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a536:	4a38      	ldr	r2, [pc, #224]	; (800a618 <inc_lock+0x118>)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	011b      	lsls	r3, r3, #4
 800a53c:	4413      	add	r3, r2
 800a53e:	3308      	adds	r3, #8
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a546:	429a      	cmp	r2, r3
 800a548:	d006      	beq.n	800a558 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3301      	adds	r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b01      	cmp	r3, #1
 800a554:	d9dc      	bls.n	800a510 <inc_lock+0x10>
 800a556:	e000      	b.n	800a55a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a558:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d132      	bne.n	800a5c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a560:	2300      	movs	r3, #0
 800a562:	60fb      	str	r3, [r7, #12]
 800a564:	e002      	b.n	800a56c <inc_lock+0x6c>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3301      	adds	r3, #1
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d806      	bhi.n	800a580 <inc_lock+0x80>
 800a572:	4a29      	ldr	r2, [pc, #164]	; (800a618 <inc_lock+0x118>)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	011b      	lsls	r3, r3, #4
 800a578:	4413      	add	r3, r2
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1f2      	bne.n	800a566 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b02      	cmp	r3, #2
 800a584:	d101      	bne.n	800a58a <inc_lock+0x8a>
 800a586:	2300      	movs	r3, #0
 800a588:	e040      	b.n	800a60c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	4922      	ldr	r1, [pc, #136]	; (800a618 <inc_lock+0x118>)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	440b      	add	r3, r1
 800a596:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689a      	ldr	r2, [r3, #8]
 800a59c:	491e      	ldr	r1, [pc, #120]	; (800a618 <inc_lock+0x118>)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	011b      	lsls	r3, r3, #4
 800a5a2:	440b      	add	r3, r1
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	695a      	ldr	r2, [r3, #20]
 800a5ac:	491a      	ldr	r1, [pc, #104]	; (800a618 <inc_lock+0x118>)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	011b      	lsls	r3, r3, #4
 800a5b2:	440b      	add	r3, r1
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a5b8:	4a17      	ldr	r2, [pc, #92]	; (800a618 <inc_lock+0x118>)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	011b      	lsls	r3, r3, #4
 800a5be:	4413      	add	r3, r2
 800a5c0:	330c      	adds	r3, #12
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d009      	beq.n	800a5e0 <inc_lock+0xe0>
 800a5cc:	4a12      	ldr	r2, [pc, #72]	; (800a618 <inc_lock+0x118>)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	011b      	lsls	r3, r3, #4
 800a5d2:	4413      	add	r3, r2
 800a5d4:	330c      	adds	r3, #12
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <inc_lock+0xe0>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e015      	b.n	800a60c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d108      	bne.n	800a5f8 <inc_lock+0xf8>
 800a5e6:	4a0c      	ldr	r2, [pc, #48]	; (800a618 <inc_lock+0x118>)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	4413      	add	r3, r2
 800a5ee:	330c      	adds	r3, #12
 800a5f0:	881b      	ldrh	r3, [r3, #0]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	e001      	b.n	800a5fc <inc_lock+0xfc>
 800a5f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5fc:	4906      	ldr	r1, [pc, #24]	; (800a618 <inc_lock+0x118>)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	011b      	lsls	r3, r3, #4
 800a602:	440b      	add	r3, r1
 800a604:	330c      	adds	r3, #12
 800a606:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3301      	adds	r3, #1
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	20000b78 	.word	0x20000b78

0800a61c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	3b01      	subs	r3, #1
 800a628:	607b      	str	r3, [r7, #4]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d825      	bhi.n	800a67c <dec_lock+0x60>
		n = Files[i].ctr;
 800a630:	4a17      	ldr	r2, [pc, #92]	; (800a690 <dec_lock+0x74>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	011b      	lsls	r3, r3, #4
 800a636:	4413      	add	r3, r2
 800a638:	330c      	adds	r3, #12
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a63e:	89fb      	ldrh	r3, [r7, #14]
 800a640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a644:	d101      	bne.n	800a64a <dec_lock+0x2e>
 800a646:	2300      	movs	r3, #0
 800a648:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a64a:	89fb      	ldrh	r3, [r7, #14]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <dec_lock+0x3a>
 800a650:	89fb      	ldrh	r3, [r7, #14]
 800a652:	3b01      	subs	r3, #1
 800a654:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a656:	4a0e      	ldr	r2, [pc, #56]	; (800a690 <dec_lock+0x74>)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	4413      	add	r3, r2
 800a65e:	330c      	adds	r3, #12
 800a660:	89fa      	ldrh	r2, [r7, #14]
 800a662:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a664:	89fb      	ldrh	r3, [r7, #14]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d105      	bne.n	800a676 <dec_lock+0x5a>
 800a66a:	4a09      	ldr	r2, [pc, #36]	; (800a690 <dec_lock+0x74>)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	011b      	lsls	r3, r3, #4
 800a670:	4413      	add	r3, r2
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	737b      	strb	r3, [r7, #13]
 800a67a:	e001      	b.n	800a680 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a67c:	2302      	movs	r3, #2
 800a67e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a680:	7b7b      	ldrb	r3, [r7, #13]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	20000b78 	.word	0x20000b78

0800a694 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a69c:	2300      	movs	r3, #0
 800a69e:	60fb      	str	r3, [r7, #12]
 800a6a0:	e010      	b.n	800a6c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a6a2:	4a0d      	ldr	r2, [pc, #52]	; (800a6d8 <clear_lock+0x44>)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	011b      	lsls	r3, r3, #4
 800a6a8:	4413      	add	r3, r2
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d105      	bne.n	800a6be <clear_lock+0x2a>
 800a6b2:	4a09      	ldr	r2, [pc, #36]	; (800a6d8 <clear_lock+0x44>)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	011b      	lsls	r3, r3, #4
 800a6b8:	4413      	add	r3, r2
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d9eb      	bls.n	800a6a2 <clear_lock+0xe>
	}
}
 800a6ca:	bf00      	nop
 800a6cc:	bf00      	nop
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	20000b78 	.word	0x20000b78

0800a6dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	78db      	ldrb	r3, [r3, #3]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d034      	beq.n	800a75a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	7858      	ldrb	r0, [r3, #1]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a700:	2301      	movs	r3, #1
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	f7ff fd40 	bl	800a188 <disk_write>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a70e:	2301      	movs	r3, #1
 800a710:	73fb      	strb	r3, [r7, #15]
 800a712:	e022      	b.n	800a75a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	1ad2      	subs	r2, r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	429a      	cmp	r2, r3
 800a728:	d217      	bcs.n	800a75a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	789b      	ldrb	r3, [r3, #2]
 800a72e:	613b      	str	r3, [r7, #16]
 800a730:	e010      	b.n	800a754 <sync_window+0x78>
					wsect += fs->fsize;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	4413      	add	r3, r2
 800a73a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	7858      	ldrb	r0, [r3, #1]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a746:	2301      	movs	r3, #1
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	f7ff fd1d 	bl	800a188 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	3b01      	subs	r3, #1
 800a752:	613b      	str	r3, [r7, #16]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d8eb      	bhi.n	800a732 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d01b      	beq.n	800a7b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff ffad 	bl	800a6dc <sync_window>
 800a782:	4603      	mov	r3, r0
 800a784:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a786:	7bfb      	ldrb	r3, [r7, #15]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d113      	bne.n	800a7b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	7858      	ldrb	r0, [r3, #1]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a796:	2301      	movs	r3, #1
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	f7ff fcd5 	bl	800a148 <disk_read>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d004      	beq.n	800a7ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7ff ff87 	bl	800a6dc <sync_window>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d158      	bne.n	800a88a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d148      	bne.n	800a872 <sync_fs+0xb2>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	791b      	ldrb	r3, [r3, #4]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d144      	bne.n	800a872 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3330      	adds	r3, #48	; 0x30
 800a7ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff fda9 	bl	800a34a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3330      	adds	r3, #48	; 0x30
 800a7fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a800:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff fd38 	bl	800a27a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	3330      	adds	r3, #48	; 0x30
 800a80e:	4921      	ldr	r1, [pc, #132]	; (800a894 <sync_fs+0xd4>)
 800a810:	4618      	mov	r0, r3
 800a812:	f7ff fd4d 	bl	800a2b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	3330      	adds	r3, #48	; 0x30
 800a81a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a81e:	491e      	ldr	r1, [pc, #120]	; (800a898 <sync_fs+0xd8>)
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff fd45 	bl	800a2b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3330      	adds	r3, #48	; 0x30
 800a82a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	4619      	mov	r1, r3
 800a834:	4610      	mov	r0, r2
 800a836:	f7ff fd3b 	bl	800a2b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3330      	adds	r3, #48	; 0x30
 800a83e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	4619      	mov	r1, r3
 800a848:	4610      	mov	r0, r2
 800a84a:	f7ff fd31 	bl	800a2b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	7858      	ldrb	r0, [r3, #1]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a866:	2301      	movs	r3, #1
 800a868:	f7ff fc8e 	bl	800a188 <disk_write>
			fs->fsi_flag = 0;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	785b      	ldrb	r3, [r3, #1]
 800a876:	2200      	movs	r2, #0
 800a878:	2100      	movs	r1, #0
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fca4 	bl	800a1c8 <disk_ioctl>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <sync_fs+0xca>
 800a886:	2301      	movs	r3, #1
 800a888:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	41615252 	.word	0x41615252
 800a898:	61417272 	.word	0x61417272

0800a89c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	3b02      	subs	r3, #2
 800a8aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	695b      	ldr	r3, [r3, #20]
 800a8b0:	3b02      	subs	r3, #2
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d301      	bcc.n	800a8bc <clust2sect+0x20>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	e008      	b.n	800a8ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	895b      	ldrh	r3, [r3, #10]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	fb03 f202 	mul.w	r2, r3, r2
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8cc:	4413      	add	r3, r2
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b086      	sub	sp, #24
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d904      	bls.n	800a8fa <get_fat+0x20>
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d302      	bcc.n	800a900 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	617b      	str	r3, [r7, #20]
 800a8fe:	e08f      	b.n	800aa20 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a900:	f04f 33ff 	mov.w	r3, #4294967295
 800a904:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d062      	beq.n	800a9d4 <get_fat+0xfa>
 800a90e:	2b03      	cmp	r3, #3
 800a910:	dc7c      	bgt.n	800aa0c <get_fat+0x132>
 800a912:	2b01      	cmp	r3, #1
 800a914:	d002      	beq.n	800a91c <get_fat+0x42>
 800a916:	2b02      	cmp	r3, #2
 800a918:	d042      	beq.n	800a9a0 <get_fat+0xc6>
 800a91a:	e077      	b.n	800aa0c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	60fb      	str	r3, [r7, #12]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	085b      	lsrs	r3, r3, #1
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4413      	add	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	6a1a      	ldr	r2, [r3, #32]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	0a5b      	lsrs	r3, r3, #9
 800a932:	4413      	add	r3, r2
 800a934:	4619      	mov	r1, r3
 800a936:	6938      	ldr	r0, [r7, #16]
 800a938:	f7ff ff14 	bl	800a764 <move_window>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d167      	bne.n	800aa12 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	60fa      	str	r2, [r7, #12]
 800a948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	4413      	add	r3, r2
 800a950:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a954:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	6a1a      	ldr	r2, [r3, #32]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	0a5b      	lsrs	r3, r3, #9
 800a95e:	4413      	add	r3, r2
 800a960:	4619      	mov	r1, r3
 800a962:	6938      	ldr	r0, [r7, #16]
 800a964:	f7ff fefe 	bl	800a764 <move_window>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d153      	bne.n	800aa16 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	4413      	add	r3, r2
 800a978:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a97c:	021b      	lsls	r3, r3, #8
 800a97e:	461a      	mov	r2, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	4313      	orrs	r3, r2
 800a984:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <get_fat+0xbc>
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	091b      	lsrs	r3, r3, #4
 800a994:	e002      	b.n	800a99c <get_fat+0xc2>
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a99c:	617b      	str	r3, [r7, #20]
			break;
 800a99e:	e03f      	b.n	800aa20 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	6a1a      	ldr	r2, [r3, #32]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	0a1b      	lsrs	r3, r3, #8
 800a9a8:	4413      	add	r3, r2
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6938      	ldr	r0, [r7, #16]
 800a9ae:	f7ff fed9 	bl	800a764 <move_window>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d130      	bne.n	800aa1a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a9c6:	4413      	add	r3, r2
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7ff fc1b 	bl	800a204 <ld_word>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	617b      	str	r3, [r7, #20]
			break;
 800a9d2:	e025      	b.n	800aa20 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	6a1a      	ldr	r2, [r3, #32]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	09db      	lsrs	r3, r3, #7
 800a9dc:	4413      	add	r3, r2
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6938      	ldr	r0, [r7, #16]
 800a9e2:	f7ff febf 	bl	800a764 <move_window>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d118      	bne.n	800aa1e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a9fa:	4413      	add	r3, r2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7ff fc19 	bl	800a234 <ld_dword>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800aa08:	617b      	str	r3, [r7, #20]
			break;
 800aa0a:	e009      	b.n	800aa20 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	617b      	str	r3, [r7, #20]
 800aa10:	e006      	b.n	800aa20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa12:	bf00      	nop
 800aa14:	e004      	b.n	800aa20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa16:	bf00      	nop
 800aa18:	e002      	b.n	800aa20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aa1a:	bf00      	nop
 800aa1c:	e000      	b.n	800aa20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa1e:	bf00      	nop
		}
	}

	return val;
 800aa20:	697b      	ldr	r3, [r7, #20]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3718      	adds	r7, #24
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aa2a:	b590      	push	{r4, r7, lr}
 800aa2c:	b089      	sub	sp, #36	; 0x24
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	60f8      	str	r0, [r7, #12]
 800aa32:	60b9      	str	r1, [r7, #8]
 800aa34:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aa36:	2302      	movs	r3, #2
 800aa38:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	f240 80d2 	bls.w	800abe6 <put_fat+0x1bc>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	f080 80cc 	bcs.w	800abe6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	f000 8096 	beq.w	800ab84 <put_fat+0x15a>
 800aa58:	2b03      	cmp	r3, #3
 800aa5a:	f300 80cd 	bgt.w	800abf8 <put_fat+0x1ce>
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d002      	beq.n	800aa68 <put_fat+0x3e>
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d06e      	beq.n	800ab44 <put_fat+0x11a>
 800aa66:	e0c7      	b.n	800abf8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	61bb      	str	r3, [r7, #24]
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	085b      	lsrs	r3, r3, #1
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	4413      	add	r3, r2
 800aa74:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6a1a      	ldr	r2, [r3, #32]
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	0a5b      	lsrs	r3, r3, #9
 800aa7e:	4413      	add	r3, r2
 800aa80:	4619      	mov	r1, r3
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7ff fe6e 	bl	800a764 <move_window>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa8c:	7ffb      	ldrb	r3, [r7, #31]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	f040 80ab 	bne.w	800abea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	1c59      	adds	r1, r3, #1
 800aa9e:	61b9      	str	r1, [r7, #24]
 800aaa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa4:	4413      	add	r3, r2
 800aaa6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00d      	beq.n	800aace <put_fat+0xa4>
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	b25b      	sxtb	r3, r3
 800aab8:	f003 030f 	and.w	r3, r3, #15
 800aabc:	b25a      	sxtb	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	011b      	lsls	r3, r3, #4
 800aac4:	b25b      	sxtb	r3, r3
 800aac6:	4313      	orrs	r3, r2
 800aac8:	b25b      	sxtb	r3, r3
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	e001      	b.n	800aad2 <put_fat+0xa8>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2201      	movs	r2, #1
 800aada:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6a1a      	ldr	r2, [r3, #32]
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	0a5b      	lsrs	r3, r3, #9
 800aae4:	4413      	add	r3, r2
 800aae6:	4619      	mov	r1, r3
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f7ff fe3b 	bl	800a764 <move_window>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aaf2:	7ffb      	ldrb	r3, [r7, #31]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d17a      	bne.n	800abee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab04:	4413      	add	r3, r2
 800ab06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	f003 0301 	and.w	r3, r3, #1
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d003      	beq.n	800ab1a <put_fat+0xf0>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	091b      	lsrs	r3, r3, #4
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	e00e      	b.n	800ab38 <put_fat+0x10e>
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	b25b      	sxtb	r3, r3
 800ab20:	f023 030f 	bic.w	r3, r3, #15
 800ab24:	b25a      	sxtb	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	0a1b      	lsrs	r3, r3, #8
 800ab2a:	b25b      	sxtb	r3, r3
 800ab2c:	f003 030f 	and.w	r3, r3, #15
 800ab30:	b25b      	sxtb	r3, r3
 800ab32:	4313      	orrs	r3, r2
 800ab34:	b25b      	sxtb	r3, r3
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	70da      	strb	r2, [r3, #3]
			break;
 800ab42:	e059      	b.n	800abf8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6a1a      	ldr	r2, [r3, #32]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	0a1b      	lsrs	r3, r3, #8
 800ab4c:	4413      	add	r3, r2
 800ab4e:	4619      	mov	r1, r3
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7ff fe07 	bl	800a764 <move_window>
 800ab56:	4603      	mov	r3, r0
 800ab58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab5a:	7ffb      	ldrb	r3, [r7, #31]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d148      	bne.n	800abf2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ab6e:	4413      	add	r3, r2
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	b292      	uxth	r2, r2
 800ab74:	4611      	mov	r1, r2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff fb7f 	bl	800a27a <st_word>
			fs->wflag = 1;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	70da      	strb	r2, [r3, #3]
			break;
 800ab82:	e039      	b.n	800abf8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6a1a      	ldr	r2, [r3, #32]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	09db      	lsrs	r3, r3, #7
 800ab8c:	4413      	add	r3, r2
 800ab8e:	4619      	mov	r1, r3
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f7ff fde7 	bl	800a764 <move_window>
 800ab96:	4603      	mov	r3, r0
 800ab98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab9a:	7ffb      	ldrb	r3, [r7, #31]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d12a      	bne.n	800abf6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800abb4:	4413      	add	r3, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff fb3c 	bl	800a234 <ld_dword>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800abc2:	4323      	orrs	r3, r4
 800abc4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800abd4:	4413      	add	r3, r2
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	4618      	mov	r0, r3
 800abda:	f7ff fb69 	bl	800a2b0 <st_dword>
			fs->wflag = 1;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2201      	movs	r2, #1
 800abe2:	70da      	strb	r2, [r3, #3]
			break;
 800abe4:	e008      	b.n	800abf8 <put_fat+0x1ce>
		}
	}
 800abe6:	bf00      	nop
 800abe8:	e006      	b.n	800abf8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800abea:	bf00      	nop
 800abec:	e004      	b.n	800abf8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800abee:	bf00      	nop
 800abf0:	e002      	b.n	800abf8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800abf2:	bf00      	nop
 800abf4:	e000      	b.n	800abf8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800abf6:	bf00      	nop
	return res;
 800abf8:	7ffb      	ldrb	r3, [r7, #31]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3724      	adds	r7, #36	; 0x24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd90      	pop	{r4, r7, pc}

0800ac02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b088      	sub	sp, #32
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d904      	bls.n	800ac28 <remove_chain+0x26>
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d301      	bcc.n	800ac2c <remove_chain+0x2a>
 800ac28:	2302      	movs	r3, #2
 800ac2a:	e04b      	b.n	800acc4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00c      	beq.n	800ac4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ac32:	f04f 32ff 	mov.w	r2, #4294967295
 800ac36:	6879      	ldr	r1, [r7, #4]
 800ac38:	69b8      	ldr	r0, [r7, #24]
 800ac3a:	f7ff fef6 	bl	800aa2a <put_fat>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ac42:	7ffb      	ldrb	r3, [r7, #31]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <remove_chain+0x4a>
 800ac48:	7ffb      	ldrb	r3, [r7, #31]
 800ac4a:	e03b      	b.n	800acc4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ac4c:	68b9      	ldr	r1, [r7, #8]
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7ff fe43 	bl	800a8da <get_fat>
 800ac54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d031      	beq.n	800acc0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d101      	bne.n	800ac66 <remove_chain+0x64>
 800ac62:	2302      	movs	r3, #2
 800ac64:	e02e      	b.n	800acc4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6c:	d101      	bne.n	800ac72 <remove_chain+0x70>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e028      	b.n	800acc4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ac72:	2200      	movs	r2, #0
 800ac74:	68b9      	ldr	r1, [r7, #8]
 800ac76:	69b8      	ldr	r0, [r7, #24]
 800ac78:	f7ff fed7 	bl	800aa2a <put_fat>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ac80:	7ffb      	ldrb	r3, [r7, #31]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <remove_chain+0x88>
 800ac86:	7ffb      	ldrb	r3, [r7, #31]
 800ac88:	e01c      	b.n	800acc4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	691a      	ldr	r2, [r3, #16]
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	695b      	ldr	r3, [r3, #20]
 800ac92:	3b02      	subs	r3, #2
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d20b      	bcs.n	800acb0 <remove_chain+0xae>
			fs->free_clst++;
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	1c5a      	adds	r2, r3, #1
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	791b      	ldrb	r3, [r3, #4]
 800aca6:	f043 0301 	orr.w	r3, r3, #1
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	695b      	ldr	r3, [r3, #20]
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d3c6      	bcc.n	800ac4c <remove_chain+0x4a>
 800acbe:	e000      	b.n	800acc2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800acc0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3720      	adds	r7, #32
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10d      	bne.n	800acfe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d004      	beq.n	800acf8 <create_chain+0x2c>
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d31b      	bcc.n	800ad30 <create_chain+0x64>
 800acf8:	2301      	movs	r3, #1
 800acfa:	61bb      	str	r3, [r7, #24]
 800acfc:	e018      	b.n	800ad30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff fdea 	bl	800a8da <get_fat>
 800ad06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d801      	bhi.n	800ad12 <create_chain+0x46>
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e070      	b.n	800adf4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad18:	d101      	bne.n	800ad1e <create_chain+0x52>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	e06a      	b.n	800adf4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	695b      	ldr	r3, [r3, #20]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d201      	bcs.n	800ad2c <create_chain+0x60>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	e063      	b.n	800adf4 <create_chain+0x128>
		scl = clst;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	3301      	adds	r3, #1
 800ad38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	69fa      	ldr	r2, [r7, #28]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d307      	bcc.n	800ad54 <create_chain+0x88>
				ncl = 2;
 800ad44:	2302      	movs	r3, #2
 800ad46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ad48:	69fa      	ldr	r2, [r7, #28]
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d901      	bls.n	800ad54 <create_chain+0x88>
 800ad50:	2300      	movs	r3, #0
 800ad52:	e04f      	b.n	800adf4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ad54:	69f9      	ldr	r1, [r7, #28]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7ff fdbf 	bl	800a8da <get_fat>
 800ad5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00e      	beq.n	800ad82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d003      	beq.n	800ad72 <create_chain+0xa6>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad70:	d101      	bne.n	800ad76 <create_chain+0xaa>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	e03e      	b.n	800adf4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ad76:	69fa      	ldr	r2, [r7, #28]
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d1da      	bne.n	800ad34 <create_chain+0x68>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e038      	b.n	800adf4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ad82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ad84:	f04f 32ff 	mov.w	r2, #4294967295
 800ad88:	69f9      	ldr	r1, [r7, #28]
 800ad8a:	6938      	ldr	r0, [r7, #16]
 800ad8c:	f7ff fe4d 	bl	800aa2a <put_fat>
 800ad90:	4603      	mov	r3, r0
 800ad92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ad94:	7dfb      	ldrb	r3, [r7, #23]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d109      	bne.n	800adae <create_chain+0xe2>
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d006      	beq.n	800adae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ada0:	69fa      	ldr	r2, [r7, #28]
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6938      	ldr	r0, [r7, #16]
 800ada6:	f7ff fe40 	bl	800aa2a <put_fat>
 800adaa:	4603      	mov	r3, r0
 800adac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d116      	bne.n	800ade2 <create_chain+0x116>
		fs->last_clst = ncl;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	69fa      	ldr	r2, [r7, #28]
 800adb8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	691a      	ldr	r2, [r3, #16]
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	3b02      	subs	r3, #2
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d804      	bhi.n	800add2 <create_chain+0x106>
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	1e5a      	subs	r2, r3, #1
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	791b      	ldrb	r3, [r3, #4]
 800add6:	f043 0301 	orr.w	r3, r3, #1
 800adda:	b2da      	uxtb	r2, r3
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	711a      	strb	r2, [r3, #4]
 800ade0:	e007      	b.n	800adf2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d102      	bne.n	800adee <create_chain+0x122>
 800ade8:	f04f 33ff 	mov.w	r3, #4294967295
 800adec:	e000      	b.n	800adf0 <create_chain+0x124>
 800adee:	2301      	movs	r3, #1
 800adf0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800adf2:	69fb      	ldr	r3, [r7, #28]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3720      	adds	r7, #32
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae10:	3304      	adds	r3, #4
 800ae12:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	0a5b      	lsrs	r3, r3, #9
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	8952      	ldrh	r2, [r2, #10]
 800ae1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	1d1a      	adds	r2, r3, #4
 800ae26:	613a      	str	r2, [r7, #16]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d101      	bne.n	800ae36 <clmt_clust+0x3a>
 800ae32:	2300      	movs	r3, #0
 800ae34:	e010      	b.n	800ae58 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d307      	bcc.n	800ae4e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	617b      	str	r3, [r7, #20]
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ae4c:	e7e9      	b.n	800ae22 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ae4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	4413      	add	r3, r2
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	371c      	adds	r7, #28
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae7a:	d204      	bcs.n	800ae86 <dir_sdi+0x22>
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	f003 031f 	and.w	r3, r3, #31
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <dir_sdi+0x26>
		return FR_INT_ERR;
 800ae86:	2302      	movs	r3, #2
 800ae88:	e063      	b.n	800af52 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d106      	bne.n	800aeaa <dir_sdi+0x46>
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d902      	bls.n	800aeaa <dir_sdi+0x46>
		clst = fs->dirbase;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10c      	bne.n	800aeca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	095b      	lsrs	r3, r3, #5
 800aeb4:	693a      	ldr	r2, [r7, #16]
 800aeb6:	8912      	ldrh	r2, [r2, #8]
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d301      	bcc.n	800aec0 <dir_sdi+0x5c>
 800aebc:	2302      	movs	r3, #2
 800aebe:	e048      	b.n	800af52 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	61da      	str	r2, [r3, #28]
 800aec8:	e029      	b.n	800af1e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	895b      	ldrh	r3, [r3, #10]
 800aece:	025b      	lsls	r3, r3, #9
 800aed0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aed2:	e019      	b.n	800af08 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6979      	ldr	r1, [r7, #20]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7ff fcfe 	bl	800a8da <get_fat>
 800aede:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee6:	d101      	bne.n	800aeec <dir_sdi+0x88>
 800aee8:	2301      	movs	r3, #1
 800aeea:	e032      	b.n	800af52 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d904      	bls.n	800aefc <dir_sdi+0x98>
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d301      	bcc.n	800af00 <dir_sdi+0x9c>
 800aefc:	2302      	movs	r3, #2
 800aefe:	e028      	b.n	800af52 <dir_sdi+0xee>
			ofs -= csz;
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d2e1      	bcs.n	800aed4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800af10:	6979      	ldr	r1, [r7, #20]
 800af12:	6938      	ldr	r0, [r7, #16]
 800af14:	f7ff fcc2 	bl	800a89c <clust2sect>
 800af18:	4602      	mov	r2, r0
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <dir_sdi+0xcc>
 800af2c:	2302      	movs	r3, #2
 800af2e:	e010      	b.n	800af52 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	69da      	ldr	r2, [r3, #28]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	0a5b      	lsrs	r3, r3, #9
 800af38:	441a      	add	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4a:	441a      	add	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b086      	sub	sp, #24
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	3320      	adds	r3, #32
 800af70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	69db      	ldr	r3, [r3, #28]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d003      	beq.n	800af82 <dir_next+0x28>
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af80:	d301      	bcc.n	800af86 <dir_next+0x2c>
 800af82:	2304      	movs	r3, #4
 800af84:	e0aa      	b.n	800b0dc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f040 8098 	bne.w	800b0c2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	69db      	ldr	r3, [r3, #28]
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10b      	bne.n	800afbc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	095b      	lsrs	r3, r3, #5
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	8912      	ldrh	r2, [r2, #8]
 800afac:	4293      	cmp	r3, r2
 800afae:	f0c0 8088 	bcc.w	800b0c2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	61da      	str	r2, [r3, #28]
 800afb8:	2304      	movs	r3, #4
 800afba:	e08f      	b.n	800b0dc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	0a5b      	lsrs	r3, r3, #9
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	8952      	ldrh	r2, [r2, #10]
 800afc4:	3a01      	subs	r2, #1
 800afc6:	4013      	ands	r3, r2
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d17a      	bne.n	800b0c2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	4619      	mov	r1, r3
 800afd4:	4610      	mov	r0, r2
 800afd6:	f7ff fc80 	bl	800a8da <get_fat>
 800afda:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d801      	bhi.n	800afe6 <dir_next+0x8c>
 800afe2:	2302      	movs	r3, #2
 800afe4:	e07a      	b.n	800b0dc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afec:	d101      	bne.n	800aff2 <dir_next+0x98>
 800afee:	2301      	movs	r3, #1
 800aff0:	e074      	b.n	800b0dc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d358      	bcc.n	800b0ae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d104      	bne.n	800b00c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	61da      	str	r2, [r3, #28]
 800b008:	2304      	movs	r3, #4
 800b00a:	e067      	b.n	800b0dc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	4619      	mov	r1, r3
 800b014:	4610      	mov	r0, r2
 800b016:	f7ff fe59 	bl	800accc <create_chain>
 800b01a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <dir_next+0xcc>
 800b022:	2307      	movs	r3, #7
 800b024:	e05a      	b.n	800b0dc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d101      	bne.n	800b030 <dir_next+0xd6>
 800b02c:	2302      	movs	r3, #2
 800b02e:	e055      	b.n	800b0dc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b036:	d101      	bne.n	800b03c <dir_next+0xe2>
 800b038:	2301      	movs	r3, #1
 800b03a:	e04f      	b.n	800b0dc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff fb4d 	bl	800a6dc <sync_window>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <dir_next+0xf2>
 800b048:	2301      	movs	r3, #1
 800b04a:	e047      	b.n	800b0dc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	3330      	adds	r3, #48	; 0x30
 800b050:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b054:	2100      	movs	r1, #0
 800b056:	4618      	mov	r0, r3
 800b058:	f7ff f977 	bl	800a34a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b05c:	2300      	movs	r3, #0
 800b05e:	613b      	str	r3, [r7, #16]
 800b060:	6979      	ldr	r1, [r7, #20]
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff fc1a 	bl	800a89c <clust2sect>
 800b068:	4602      	mov	r2, r0
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	62da      	str	r2, [r3, #44]	; 0x2c
 800b06e:	e012      	b.n	800b096 <dir_next+0x13c>
						fs->wflag = 1;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2201      	movs	r2, #1
 800b074:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f7ff fb30 	bl	800a6dc <sync_window>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <dir_next+0x12c>
 800b082:	2301      	movs	r3, #1
 800b084:	e02a      	b.n	800b0dc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	3301      	adds	r3, #1
 800b08a:	613b      	str	r3, [r7, #16]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	1c5a      	adds	r2, r3, #1
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	62da      	str	r2, [r3, #44]	; 0x2c
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	895b      	ldrh	r3, [r3, #10]
 800b09a:	461a      	mov	r2, r3
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d3e6      	bcc.n	800b070 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	1ad2      	subs	r2, r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b0b4:	6979      	ldr	r1, [r7, #20]
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f7ff fbf0 	bl	800a89c <clust2sect>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d4:	441a      	add	r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff feb4 	bl	800ae64 <dir_sdi>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b100:	7dfb      	ldrb	r3, [r7, #23]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d12b      	bne.n	800b15e <dir_alloc+0x7a>
		n = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	4619      	mov	r1, r3
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f7ff fb27 	bl	800a764 <move_window>
 800b116:	4603      	mov	r3, r0
 800b118:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d11d      	bne.n	800b15c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a1b      	ldr	r3, [r3, #32]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2be5      	cmp	r3, #229	; 0xe5
 800b128:	d004      	beq.n	800b134 <dir_alloc+0x50>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d107      	bne.n	800b144 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	3301      	adds	r3, #1
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d102      	bne.n	800b148 <dir_alloc+0x64>
 800b142:	e00c      	b.n	800b15e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b144:	2300      	movs	r3, #0
 800b146:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b148:	2101      	movs	r1, #1
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7ff ff05 	bl	800af5a <dir_next>
 800b150:	4603      	mov	r3, r0
 800b152:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b154:	7dfb      	ldrb	r3, [r7, #23]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0d7      	beq.n	800b10a <dir_alloc+0x26>
 800b15a:	e000      	b.n	800b15e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b15c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b15e:	7dfb      	ldrb	r3, [r7, #23]
 800b160:	2b04      	cmp	r3, #4
 800b162:	d101      	bne.n	800b168 <dir_alloc+0x84>
 800b164:	2307      	movs	r3, #7
 800b166:	75fb      	strb	r3, [r7, #23]
	return res;
 800b168:	7dfb      	ldrb	r3, [r7, #23]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	331a      	adds	r3, #26
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff f83f 	bl	800a204 <ld_word>
 800b186:	4603      	mov	r3, r0
 800b188:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b03      	cmp	r3, #3
 800b190:	d109      	bne.n	800b1a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	3314      	adds	r3, #20
 800b196:	4618      	mov	r0, r3
 800b198:	f7ff f834 	bl	800a204 <ld_word>
 800b19c:	4603      	mov	r3, r0
 800b19e:	041b      	lsls	r3, r3, #16
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	331a      	adds	r3, #26
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	b292      	uxth	r2, r2
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7ff f857 	bl	800a27a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d109      	bne.n	800b1e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f103 0214 	add.w	r2, r3, #20
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	0c1b      	lsrs	r3, r3, #16
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	f7ff f849 	bl	800a27a <st_word>
	}
}
 800b1e8:	bf00      	nop
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b1fe:	2100      	movs	r1, #0
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7ff fe2f 	bl	800ae64 <dir_sdi>
 800b206:	4603      	mov	r3, r0
 800b208:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <dir_find+0x24>
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	e03e      	b.n	800b292 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	69db      	ldr	r3, [r3, #28]
 800b218:	4619      	mov	r1, r3
 800b21a:	6938      	ldr	r0, [r7, #16]
 800b21c:	f7ff faa2 	bl	800a764 <move_window>
 800b220:	4603      	mov	r3, r0
 800b222:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d12f      	bne.n	800b28a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b232:	7bfb      	ldrb	r3, [r7, #15]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d102      	bne.n	800b23e <dir_find+0x4e>
 800b238:	2304      	movs	r3, #4
 800b23a:	75fb      	strb	r3, [r7, #23]
 800b23c:	e028      	b.n	800b290 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a1b      	ldr	r3, [r3, #32]
 800b242:	330b      	adds	r3, #11
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b24a:	b2da      	uxtb	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a1b      	ldr	r3, [r3, #32]
 800b254:	330b      	adds	r3, #11
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	f003 0308 	and.w	r3, r3, #8
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <dir_find+0x86>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a18      	ldr	r0, [r3, #32]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3324      	adds	r3, #36	; 0x24
 800b268:	220b      	movs	r2, #11
 800b26a:	4619      	mov	r1, r3
 800b26c:	f7ff f888 	bl	800a380 <mem_cmp>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00b      	beq.n	800b28e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b276:	2100      	movs	r1, #0
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7ff fe6e 	bl	800af5a <dir_next>
 800b27e:	4603      	mov	r3, r0
 800b280:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b282:	7dfb      	ldrb	r3, [r7, #23]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d0c5      	beq.n	800b214 <dir_find+0x24>
 800b288:	e002      	b.n	800b290 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b28a:	bf00      	nop
 800b28c:	e000      	b.n	800b290 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b28e:	bf00      	nop

	return res;
 800b290:	7dfb      	ldrb	r3, [r7, #23]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b2a8:	2101      	movs	r1, #1
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff ff1a 	bl	800b0e4 <dir_alloc>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d11c      	bne.n	800b2f4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68b8      	ldr	r0, [r7, #8]
 800b2c2:	f7ff fa4f 	bl	800a764 <move_window>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b2ca:	7bfb      	ldrb	r3, [r7, #15]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d111      	bne.n	800b2f4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a1b      	ldr	r3, [r3, #32]
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7ff f836 	bl	800a34a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a18      	ldr	r0, [r3, #32]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3324      	adds	r3, #36	; 0x24
 800b2e6:	220b      	movs	r2, #11
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	f7ff f80d 	bl	800a308 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b088      	sub	sp, #32
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3324      	adds	r3, #36	; 0x24
 800b314:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b316:	220b      	movs	r2, #11
 800b318:	2120      	movs	r1, #32
 800b31a:	68b8      	ldr	r0, [r7, #8]
 800b31c:	f7ff f815 	bl	800a34a <mem_set>
	si = i = 0; ni = 8;
 800b320:	2300      	movs	r3, #0
 800b322:	613b      	str	r3, [r7, #16]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	61fb      	str	r3, [r7, #28]
 800b328:	2308      	movs	r3, #8
 800b32a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	61fa      	str	r2, [r7, #28]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	4413      	add	r3, r2
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b33a:	7efb      	ldrb	r3, [r7, #27]
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	d94e      	bls.n	800b3de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b340:	7efb      	ldrb	r3, [r7, #27]
 800b342:	2b2f      	cmp	r3, #47	; 0x2f
 800b344:	d006      	beq.n	800b354 <create_name+0x54>
 800b346:	7efb      	ldrb	r3, [r7, #27]
 800b348:	2b5c      	cmp	r3, #92	; 0x5c
 800b34a:	d110      	bne.n	800b36e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b34c:	e002      	b.n	800b354 <create_name+0x54>
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	3301      	adds	r3, #1
 800b352:	61fb      	str	r3, [r7, #28]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	4413      	add	r3, r2
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	2b2f      	cmp	r3, #47	; 0x2f
 800b35e:	d0f6      	beq.n	800b34e <create_name+0x4e>
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	4413      	add	r3, r2
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	2b5c      	cmp	r3, #92	; 0x5c
 800b36a:	d0f0      	beq.n	800b34e <create_name+0x4e>
			break;
 800b36c:	e038      	b.n	800b3e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b36e:	7efb      	ldrb	r3, [r7, #27]
 800b370:	2b2e      	cmp	r3, #46	; 0x2e
 800b372:	d003      	beq.n	800b37c <create_name+0x7c>
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d30c      	bcc.n	800b396 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	2b0b      	cmp	r3, #11
 800b380:	d002      	beq.n	800b388 <create_name+0x88>
 800b382:	7efb      	ldrb	r3, [r7, #27]
 800b384:	2b2e      	cmp	r3, #46	; 0x2e
 800b386:	d001      	beq.n	800b38c <create_name+0x8c>
 800b388:	2306      	movs	r3, #6
 800b38a:	e044      	b.n	800b416 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b38c:	2308      	movs	r3, #8
 800b38e:	613b      	str	r3, [r7, #16]
 800b390:	230b      	movs	r3, #11
 800b392:	617b      	str	r3, [r7, #20]
			continue;
 800b394:	e022      	b.n	800b3dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b396:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	da04      	bge.n	800b3a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b39e:	7efb      	ldrb	r3, [r7, #27]
 800b3a0:	3b80      	subs	r3, #128	; 0x80
 800b3a2:	4a1f      	ldr	r2, [pc, #124]	; (800b420 <create_name+0x120>)
 800b3a4:	5cd3      	ldrb	r3, [r2, r3]
 800b3a6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b3a8:	7efb      	ldrb	r3, [r7, #27]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	481d      	ldr	r0, [pc, #116]	; (800b424 <create_name+0x124>)
 800b3ae:	f7ff f80e 	bl	800a3ce <chk_chr>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <create_name+0xbc>
 800b3b8:	2306      	movs	r3, #6
 800b3ba:	e02c      	b.n	800b416 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b3bc:	7efb      	ldrb	r3, [r7, #27]
 800b3be:	2b60      	cmp	r3, #96	; 0x60
 800b3c0:	d905      	bls.n	800b3ce <create_name+0xce>
 800b3c2:	7efb      	ldrb	r3, [r7, #27]
 800b3c4:	2b7a      	cmp	r3, #122	; 0x7a
 800b3c6:	d802      	bhi.n	800b3ce <create_name+0xce>
 800b3c8:	7efb      	ldrb	r3, [r7, #27]
 800b3ca:	3b20      	subs	r3, #32
 800b3cc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	613a      	str	r2, [r7, #16]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	7efa      	ldrb	r2, [r7, #27]
 800b3da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b3dc:	e7a6      	b.n	800b32c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b3de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	441a      	add	r2, r3
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d101      	bne.n	800b3f4 <create_name+0xf4>
 800b3f0:	2306      	movs	r3, #6
 800b3f2:	e010      	b.n	800b416 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	2be5      	cmp	r3, #229	; 0xe5
 800b3fa:	d102      	bne.n	800b402 <create_name+0x102>
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	2205      	movs	r2, #5
 800b400:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b402:	7efb      	ldrb	r3, [r7, #27]
 800b404:	2b20      	cmp	r3, #32
 800b406:	d801      	bhi.n	800b40c <create_name+0x10c>
 800b408:	2204      	movs	r2, #4
 800b40a:	e000      	b.n	800b40e <create_name+0x10e>
 800b40c:	2200      	movs	r2, #0
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	330b      	adds	r3, #11
 800b412:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b414:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b416:	4618      	mov	r0, r3
 800b418:	3720      	adds	r7, #32
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	08010930 	.word	0x08010930
 800b424:	0801054c 	.word	0x0801054c

0800b428 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b43c:	e002      	b.n	800b444 <follow_path+0x1c>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	3301      	adds	r3, #1
 800b442:	603b      	str	r3, [r7, #0]
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b2f      	cmp	r3, #47	; 0x2f
 800b44a:	d0f8      	beq.n	800b43e <follow_path+0x16>
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b5c      	cmp	r3, #92	; 0x5c
 800b452:	d0f4      	beq.n	800b43e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	2200      	movs	r2, #0
 800b458:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b1f      	cmp	r3, #31
 800b460:	d80a      	bhi.n	800b478 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2280      	movs	r2, #128	; 0x80
 800b466:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b46a:	2100      	movs	r1, #0
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f7ff fcf9 	bl	800ae64 <dir_sdi>
 800b472:	4603      	mov	r3, r0
 800b474:	75fb      	strb	r3, [r7, #23]
 800b476:	e043      	b.n	800b500 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b478:	463b      	mov	r3, r7
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff ff3f 	bl	800b300 <create_name>
 800b482:	4603      	mov	r3, r0
 800b484:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b486:	7dfb      	ldrb	r3, [r7, #23]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d134      	bne.n	800b4f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff feaf 	bl	800b1f0 <dir_find>
 800b492:	4603      	mov	r3, r0
 800b494:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b49c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00a      	beq.n	800b4ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	d127      	bne.n	800b4fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b4aa:	7afb      	ldrb	r3, [r7, #11]
 800b4ac:	f003 0304 	and.w	r3, r3, #4
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d122      	bne.n	800b4fa <follow_path+0xd2>
 800b4b4:	2305      	movs	r3, #5
 800b4b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b4b8:	e01f      	b.n	800b4fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b4ba:	7afb      	ldrb	r3, [r7, #11]
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d11c      	bne.n	800b4fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	799b      	ldrb	r3, [r3, #6]
 800b4c8:	f003 0310 	and.w	r3, r3, #16
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d102      	bne.n	800b4d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b4d0:	2305      	movs	r3, #5
 800b4d2:	75fb      	strb	r3, [r7, #23]
 800b4d4:	e014      	b.n	800b500 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e4:	4413      	add	r3, r2
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff fe42 	bl	800b172 <ld_clust>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b4f4:	e7c0      	b.n	800b478 <follow_path+0x50>
			if (res != FR_OK) break;
 800b4f6:	bf00      	nop
 800b4f8:	e002      	b.n	800b500 <follow_path+0xd8>
				break;
 800b4fa:	bf00      	nop
 800b4fc:	e000      	b.n	800b500 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b4fe:	bf00      	nop
			}
		}
	}

	return res;
 800b500:	7dfb      	ldrb	r3, [r7, #23]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3718      	adds	r7, #24
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b087      	sub	sp, #28
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b512:	f04f 33ff 	mov.w	r3, #4294967295
 800b516:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d031      	beq.n	800b584 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	617b      	str	r3, [r7, #20]
 800b526:	e002      	b.n	800b52e <get_ldnumber+0x24>
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	3301      	adds	r3, #1
 800b52c:	617b      	str	r3, [r7, #20]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	2b20      	cmp	r3, #32
 800b534:	d903      	bls.n	800b53e <get_ldnumber+0x34>
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b3a      	cmp	r3, #58	; 0x3a
 800b53c:	d1f4      	bne.n	800b528 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2b3a      	cmp	r3, #58	; 0x3a
 800b544:	d11c      	bne.n	800b580 <get_ldnumber+0x76>
			tp = *path;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	60fa      	str	r2, [r7, #12]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	3b30      	subs	r3, #48	; 0x30
 800b556:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2b09      	cmp	r3, #9
 800b55c:	d80e      	bhi.n	800b57c <get_ldnumber+0x72>
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	429a      	cmp	r2, r3
 800b564:	d10a      	bne.n	800b57c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d107      	bne.n	800b57c <get_ldnumber+0x72>
					vol = (int)i;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	3301      	adds	r3, #1
 800b574:	617b      	str	r3, [r7, #20]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	e002      	b.n	800b586 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b580:	2300      	movs	r3, #0
 800b582:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b584:	693b      	ldr	r3, [r7, #16]
}
 800b586:	4618      	mov	r0, r3
 800b588:	371c      	adds	r7, #28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
	...

0800b594 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	70da      	strb	r2, [r3, #3]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5aa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff f8d8 	bl	800a764 <move_window>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <check_fs+0x2a>
 800b5ba:	2304      	movs	r3, #4
 800b5bc:	e038      	b.n	800b630 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	3330      	adds	r3, #48	; 0x30
 800b5c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fe fe1c 	bl	800a204 <ld_word>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d001      	beq.n	800b5dc <check_fs+0x48>
 800b5d8:	2303      	movs	r3, #3
 800b5da:	e029      	b.n	800b630 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5e2:	2be9      	cmp	r3, #233	; 0xe9
 800b5e4:	d009      	beq.n	800b5fa <check_fs+0x66>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5ec:	2beb      	cmp	r3, #235	; 0xeb
 800b5ee:	d11e      	bne.n	800b62e <check_fs+0x9a>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b5f6:	2b90      	cmp	r3, #144	; 0x90
 800b5f8:	d119      	bne.n	800b62e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	3330      	adds	r3, #48	; 0x30
 800b5fe:	3336      	adds	r3, #54	; 0x36
 800b600:	4618      	mov	r0, r3
 800b602:	f7fe fe17 	bl	800a234 <ld_dword>
 800b606:	4603      	mov	r3, r0
 800b608:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b60c:	4a0a      	ldr	r2, [pc, #40]	; (800b638 <check_fs+0xa4>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d101      	bne.n	800b616 <check_fs+0x82>
 800b612:	2300      	movs	r3, #0
 800b614:	e00c      	b.n	800b630 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3330      	adds	r3, #48	; 0x30
 800b61a:	3352      	adds	r3, #82	; 0x52
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe fe09 	bl	800a234 <ld_dword>
 800b622:	4603      	mov	r3, r0
 800b624:	4a05      	ldr	r2, [pc, #20]	; (800b63c <check_fs+0xa8>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d101      	bne.n	800b62e <check_fs+0x9a>
 800b62a:	2300      	movs	r3, #0
 800b62c:	e000      	b.n	800b630 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b62e:	2302      	movs	r3, #2
}
 800b630:	4618      	mov	r0, r3
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	00544146 	.word	0x00544146
 800b63c:	33544146 	.word	0x33544146

0800b640 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b096      	sub	sp, #88	; 0x58
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	4613      	mov	r3, r2
 800b64c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	2200      	movs	r2, #0
 800b652:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff ff58 	bl	800b50a <get_ldnumber>
 800b65a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65e:	2b00      	cmp	r3, #0
 800b660:	da01      	bge.n	800b666 <find_volume+0x26>
 800b662:	230b      	movs	r3, #11
 800b664:	e22d      	b.n	800bac2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b666:	4aa1      	ldr	r2, [pc, #644]	; (800b8ec <find_volume+0x2ac>)
 800b668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b66e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <find_volume+0x3a>
 800b676:	230c      	movs	r3, #12
 800b678:	e223      	b.n	800bac2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b67e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b680:	79fb      	ldrb	r3, [r7, #7]
 800b682:	f023 0301 	bic.w	r3, r3, #1
 800b686:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d01a      	beq.n	800b6c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	785b      	ldrb	r3, [r3, #1]
 800b694:	4618      	mov	r0, r3
 800b696:	f7fe fd17 	bl	800a0c8 <disk_status>
 800b69a:	4603      	mov	r3, r0
 800b69c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b6a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10c      	bne.n	800b6c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d007      	beq.n	800b6c2 <find_volume+0x82>
 800b6b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6b6:	f003 0304 	and.w	r3, r3, #4
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d001      	beq.n	800b6c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b6be:	230a      	movs	r3, #10
 800b6c0:	e1ff      	b.n	800bac2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e1fd      	b.n	800bac2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d6:	785b      	ldrb	r3, [r3, #1]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fe fd0f 	bl	800a0fc <disk_initialize>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b6e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6e8:	f003 0301 	and.w	r3, r3, #1
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d001      	beq.n	800b6f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e1e6      	b.n	800bac2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b6f4:	79fb      	ldrb	r3, [r7, #7]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d007      	beq.n	800b70a <find_volume+0xca>
 800b6fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6fe:	f003 0304 	and.w	r3, r3, #4
 800b702:	2b00      	cmp	r3, #0
 800b704:	d001      	beq.n	800b70a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b706:	230a      	movs	r3, #10
 800b708:	e1db      	b.n	800bac2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b70e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b712:	f7ff ff3f 	bl	800b594 <check_fs>
 800b716:	4603      	mov	r3, r0
 800b718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b71c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b720:	2b02      	cmp	r3, #2
 800b722:	d149      	bne.n	800b7b8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b724:	2300      	movs	r3, #0
 800b726:	643b      	str	r3, [r7, #64]	; 0x40
 800b728:	e01e      	b.n	800b768 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b732:	011b      	lsls	r3, r3, #4
 800b734:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b738:	4413      	add	r3, r2
 800b73a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73e:	3304      	adds	r3, #4
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d006      	beq.n	800b754 <find_volume+0x114>
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	3308      	adds	r3, #8
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe fd72 	bl	800a234 <ld_dword>
 800b750:	4602      	mov	r2, r0
 800b752:	e000      	b.n	800b756 <find_volume+0x116>
 800b754:	2200      	movs	r2, #0
 800b756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	3358      	adds	r3, #88	; 0x58
 800b75c:	443b      	add	r3, r7
 800b75e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b764:	3301      	adds	r3, #1
 800b766:	643b      	str	r3, [r7, #64]	; 0x40
 800b768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d9dd      	bls.n	800b72a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b76e:	2300      	movs	r3, #0
 800b770:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <find_volume+0x13e>
 800b778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b77a:	3b01      	subs	r3, #1
 800b77c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	3358      	adds	r3, #88	; 0x58
 800b784:	443b      	add	r3, r7
 800b786:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b78a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d005      	beq.n	800b79e <find_volume+0x15e>
 800b792:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b796:	f7ff fefd 	bl	800b594 <check_fs>
 800b79a:	4603      	mov	r3, r0
 800b79c:	e000      	b.n	800b7a0 <find_volume+0x160>
 800b79e:	2303      	movs	r3, #3
 800b7a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b7a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d905      	bls.n	800b7b8 <find_volume+0x178>
 800b7ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	643b      	str	r3, [r7, #64]	; 0x40
 800b7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d9e2      	bls.n	800b77e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b7b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7bc:	2b04      	cmp	r3, #4
 800b7be:	d101      	bne.n	800b7c4 <find_volume+0x184>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e17e      	b.n	800bac2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b7c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d901      	bls.n	800b7d0 <find_volume+0x190>
 800b7cc:	230d      	movs	r3, #13
 800b7ce:	e178      	b.n	800bac2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d2:	3330      	adds	r3, #48	; 0x30
 800b7d4:	330b      	adds	r3, #11
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fd14 	bl	800a204 <ld_word>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7e2:	d001      	beq.n	800b7e8 <find_volume+0x1a8>
 800b7e4:	230d      	movs	r3, #13
 800b7e6:	e16c      	b.n	800bac2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	3330      	adds	r3, #48	; 0x30
 800b7ec:	3316      	adds	r3, #22
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fe fd08 	bl	800a204 <ld_word>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d106      	bne.n	800b80c <find_volume+0x1cc>
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b800:	3330      	adds	r3, #48	; 0x30
 800b802:	3324      	adds	r3, #36	; 0x24
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe fd15 	bl	800a234 <ld_dword>
 800b80a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b810:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b814:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	789b      	ldrb	r3, [r3, #2]
 800b820:	2b01      	cmp	r3, #1
 800b822:	d005      	beq.n	800b830 <find_volume+0x1f0>
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	789b      	ldrb	r3, [r3, #2]
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d001      	beq.n	800b830 <find_volume+0x1f0>
 800b82c:	230d      	movs	r3, #13
 800b82e:	e148      	b.n	800bac2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b832:	789b      	ldrb	r3, [r3, #2]
 800b834:	461a      	mov	r2, r3
 800b836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b838:	fb02 f303 	mul.w	r3, r2, r3
 800b83c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b844:	b29a      	uxth	r2, r3
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84c:	895b      	ldrh	r3, [r3, #10]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d008      	beq.n	800b864 <find_volume+0x224>
 800b852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b854:	895b      	ldrh	r3, [r3, #10]
 800b856:	461a      	mov	r2, r3
 800b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85a:	895b      	ldrh	r3, [r3, #10]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	4013      	ands	r3, r2
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <find_volume+0x228>
 800b864:	230d      	movs	r3, #13
 800b866:	e12c      	b.n	800bac2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	3330      	adds	r3, #48	; 0x30
 800b86c:	3311      	adds	r3, #17
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fe fcc8 	bl	800a204 <ld_word>
 800b874:	4603      	mov	r3, r0
 800b876:	461a      	mov	r2, r3
 800b878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87e:	891b      	ldrh	r3, [r3, #8]
 800b880:	f003 030f 	and.w	r3, r3, #15
 800b884:	b29b      	uxth	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <find_volume+0x24e>
 800b88a:	230d      	movs	r3, #13
 800b88c:	e119      	b.n	800bac2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b890:	3330      	adds	r3, #48	; 0x30
 800b892:	3313      	adds	r3, #19
 800b894:	4618      	mov	r0, r3
 800b896:	f7fe fcb5 	bl	800a204 <ld_word>
 800b89a:	4603      	mov	r3, r0
 800b89c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b89e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d106      	bne.n	800b8b2 <find_volume+0x272>
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	3330      	adds	r3, #48	; 0x30
 800b8a8:	3320      	adds	r3, #32
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe fcc2 	bl	800a234 <ld_dword>
 800b8b0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b4:	3330      	adds	r3, #48	; 0x30
 800b8b6:	330e      	adds	r3, #14
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fe fca3 	bl	800a204 <ld_word>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b8c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <find_volume+0x28c>
 800b8c8:	230d      	movs	r3, #13
 800b8ca:	e0fa      	b.n	800bac2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b8cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8d0:	4413      	add	r3, r2
 800b8d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8d4:	8912      	ldrh	r2, [r2, #8]
 800b8d6:	0912      	lsrs	r2, r2, #4
 800b8d8:	b292      	uxth	r2, r2
 800b8da:	4413      	add	r3, r2
 800b8dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b8de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d204      	bcs.n	800b8f0 <find_volume+0x2b0>
 800b8e6:	230d      	movs	r3, #13
 800b8e8:	e0eb      	b.n	800bac2 <find_volume+0x482>
 800b8ea:	bf00      	nop
 800b8ec:	20000b70 	.word	0x20000b70
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b8f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8f8:	8952      	ldrh	r2, [r2, #10]
 800b8fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <find_volume+0x2ca>
 800b906:	230d      	movs	r3, #13
 800b908:	e0db      	b.n	800bac2 <find_volume+0x482>
		fmt = FS_FAT32;
 800b90a:	2303      	movs	r3, #3
 800b90c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b916:	4293      	cmp	r3, r2
 800b918:	d802      	bhi.n	800b920 <find_volume+0x2e0>
 800b91a:	2302      	movs	r3, #2
 800b91c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b926:	4293      	cmp	r3, r2
 800b928:	d802      	bhi.n	800b930 <find_volume+0x2f0>
 800b92a:	2301      	movs	r3, #1
 800b92c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	1c9a      	adds	r2, r3, #2
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b93c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b93e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b942:	441a      	add	r2, r3
 800b944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b946:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b948:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94c:	441a      	add	r2, r3
 800b94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b950:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b952:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b956:	2b03      	cmp	r3, #3
 800b958:	d11e      	bne.n	800b998 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95c:	3330      	adds	r3, #48	; 0x30
 800b95e:	332a      	adds	r3, #42	; 0x2a
 800b960:	4618      	mov	r0, r3
 800b962:	f7fe fc4f 	bl	800a204 <ld_word>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <find_volume+0x330>
 800b96c:	230d      	movs	r3, #13
 800b96e:	e0a8      	b.n	800bac2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	891b      	ldrh	r3, [r3, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <find_volume+0x33c>
 800b978:	230d      	movs	r3, #13
 800b97a:	e0a2      	b.n	800bac2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97e:	3330      	adds	r3, #48	; 0x30
 800b980:	332c      	adds	r3, #44	; 0x2c
 800b982:	4618      	mov	r0, r3
 800b984:	f7fe fc56 	bl	800a234 <ld_dword>
 800b988:	4602      	mov	r2, r0
 800b98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	695b      	ldr	r3, [r3, #20]
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	647b      	str	r3, [r7, #68]	; 0x44
 800b996:	e01f      	b.n	800b9d8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99a:	891b      	ldrh	r3, [r3, #8]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <find_volume+0x364>
 800b9a0:	230d      	movs	r3, #13
 800b9a2:	e08e      	b.n	800bac2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a6:	6a1a      	ldr	r2, [r3, #32]
 800b9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9aa:	441a      	add	r2, r3
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b9b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d103      	bne.n	800b9c0 <find_volume+0x380>
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	005b      	lsls	r3, r3, #1
 800b9be:	e00a      	b.n	800b9d6 <find_volume+0x396>
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	695a      	ldr	r2, [r3, #20]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	4413      	add	r3, r2
 800b9ca:	085a      	lsrs	r2, r3, #1
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b9d6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9da:	699a      	ldr	r2, [r3, #24]
 800b9dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9de:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b9e2:	0a5b      	lsrs	r3, r3, #9
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d201      	bcs.n	800b9ec <find_volume+0x3ac>
 800b9e8:	230d      	movs	r3, #13
 800b9ea:	e06a      	b.n	800bac2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f2:	611a      	str	r2, [r3, #16]
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	691a      	ldr	r2, [r3, #16]
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	2280      	movs	r2, #128	; 0x80
 800ba00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ba02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d149      	bne.n	800ba9e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0c:	3330      	adds	r3, #48	; 0x30
 800ba0e:	3330      	adds	r3, #48	; 0x30
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fbf7 	bl	800a204 <ld_word>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d140      	bne.n	800ba9e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ba1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba1e:	3301      	adds	r3, #1
 800ba20:	4619      	mov	r1, r3
 800ba22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba24:	f7fe fe9e 	bl	800a764 <move_window>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d137      	bne.n	800ba9e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ba2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba30:	2200      	movs	r2, #0
 800ba32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ba34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba36:	3330      	adds	r3, #48	; 0x30
 800ba38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe fbe1 	bl	800a204 <ld_word>
 800ba42:	4603      	mov	r3, r0
 800ba44:	461a      	mov	r2, r3
 800ba46:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d127      	bne.n	800ba9e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba50:	3330      	adds	r3, #48	; 0x30
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fbee 	bl	800a234 <ld_dword>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	4a1c      	ldr	r2, [pc, #112]	; (800bacc <find_volume+0x48c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d11e      	bne.n	800ba9e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ba60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba62:	3330      	adds	r3, #48	; 0x30
 800ba64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fe fbe3 	bl	800a234 <ld_dword>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	4a17      	ldr	r2, [pc, #92]	; (800bad0 <find_volume+0x490>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d113      	bne.n	800ba9e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	3330      	adds	r3, #48	; 0x30
 800ba7a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fe fbd8 	bl	800a234 <ld_dword>
 800ba84:	4602      	mov	r2, r0
 800ba86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba88:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	3330      	adds	r3, #48	; 0x30
 800ba8e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe fbce 	bl	800a234 <ld_dword>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800baa4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800baa6:	4b0b      	ldr	r3, [pc, #44]	; (800bad4 <find_volume+0x494>)
 800baa8:	881b      	ldrh	r3, [r3, #0]
 800baaa:	3301      	adds	r3, #1
 800baac:	b29a      	uxth	r2, r3
 800baae:	4b09      	ldr	r3, [pc, #36]	; (800bad4 <find_volume+0x494>)
 800bab0:	801a      	strh	r2, [r3, #0]
 800bab2:	4b08      	ldr	r3, [pc, #32]	; (800bad4 <find_volume+0x494>)
 800bab4:	881a      	ldrh	r2, [r3, #0]
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800baba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800babc:	f7fe fdea 	bl	800a694 <clear_lock>
#endif
	return FR_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3758      	adds	r7, #88	; 0x58
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	41615252 	.word	0x41615252
 800bad0:	61417272 	.word	0x61417272
 800bad4:	20000b74 	.word	0x20000b74

0800bad8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bae2:	2309      	movs	r3, #9
 800bae4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d01c      	beq.n	800bb26 <validate+0x4e>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d018      	beq.n	800bb26 <validate+0x4e>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d013      	beq.n	800bb26 <validate+0x4e>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	889a      	ldrh	r2, [r3, #4]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	88db      	ldrh	r3, [r3, #6]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d10c      	bne.n	800bb26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	785b      	ldrb	r3, [r3, #1]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fe fad8 	bl	800a0c8 <disk_status>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f003 0301 	and.w	r3, r3, #1
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d101      	bne.n	800bb26 <validate+0x4e>
			res = FR_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d102      	bne.n	800bb32 <validate+0x5a>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	e000      	b.n	800bb34 <validate+0x5c>
 800bb32:	2300      	movs	r3, #0
 800bb34:	683a      	ldr	r2, [r7, #0]
 800bb36:	6013      	str	r3, [r2, #0]
	return res;
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
	...

0800bb44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b088      	sub	sp, #32
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bb56:	f107 0310 	add.w	r3, r7, #16
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7ff fcd5 	bl	800b50a <get_ldnumber>
 800bb60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	da01      	bge.n	800bb6c <f_mount+0x28>
 800bb68:	230b      	movs	r3, #11
 800bb6a:	e02b      	b.n	800bbc4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bb6c:	4a17      	ldr	r2, [pc, #92]	; (800bbcc <f_mount+0x88>)
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d005      	beq.n	800bb88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bb7c:	69b8      	ldr	r0, [r7, #24]
 800bb7e:	f7fe fd89 	bl	800a694 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	490d      	ldr	r1, [pc, #52]	; (800bbcc <f_mount+0x88>)
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <f_mount+0x66>
 800bba4:	79fb      	ldrb	r3, [r7, #7]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d001      	beq.n	800bbae <f_mount+0x6a>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	e00a      	b.n	800bbc4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bbae:	f107 010c 	add.w	r1, r7, #12
 800bbb2:	f107 0308 	add.w	r3, r7, #8
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7ff fd41 	bl	800b640 <find_volume>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3720      	adds	r7, #32
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	20000b70 	.word	0x20000b70

0800bbd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b098      	sub	sp, #96	; 0x60
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <f_open+0x18>
 800bbe4:	2309      	movs	r3, #9
 800bbe6:	e1ad      	b.n	800bf44 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bbe8:	79fb      	ldrb	r3, [r7, #7]
 800bbea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bbf0:	79fa      	ldrb	r2, [r7, #7]
 800bbf2:	f107 0110 	add.w	r1, r7, #16
 800bbf6:	f107 0308 	add.w	r3, r7, #8
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff fd20 	bl	800b640 <find_volume>
 800bc00:	4603      	mov	r3, r0
 800bc02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bc06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f040 8191 	bne.w	800bf32 <f_open+0x362>
		dj.obj.fs = fs;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	f107 0314 	add.w	r3, r7, #20
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff fc03 	bl	800b428 <follow_path>
 800bc22:	4603      	mov	r3, r0
 800bc24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bc28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d11a      	bne.n	800bc66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bc30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bc34:	b25b      	sxtb	r3, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	da03      	bge.n	800bc42 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bc3a:	2306      	movs	r3, #6
 800bc3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bc40:	e011      	b.n	800bc66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bc42:	79fb      	ldrb	r3, [r7, #7]
 800bc44:	f023 0301 	bic.w	r3, r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	bf14      	ite	ne
 800bc4c:	2301      	movne	r3, #1
 800bc4e:	2300      	moveq	r3, #0
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	461a      	mov	r2, r3
 800bc54:	f107 0314 	add.w	r3, r7, #20
 800bc58:	4611      	mov	r1, r2
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fbd2 	bl	800a404 <chk_lock>
 800bc60:	4603      	mov	r3, r0
 800bc62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bc66:	79fb      	ldrb	r3, [r7, #7]
 800bc68:	f003 031c 	and.w	r3, r3, #28
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d07f      	beq.n	800bd70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bc70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d017      	beq.n	800bca8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bc78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc7c:	2b04      	cmp	r3, #4
 800bc7e:	d10e      	bne.n	800bc9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bc80:	f7fe fc1c 	bl	800a4bc <enq_lock>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d006      	beq.n	800bc98 <f_open+0xc8>
 800bc8a:	f107 0314 	add.w	r3, r7, #20
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff fb03 	bl	800b29a <dir_register>
 800bc94:	4603      	mov	r3, r0
 800bc96:	e000      	b.n	800bc9a <f_open+0xca>
 800bc98:	2312      	movs	r3, #18
 800bc9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	f043 0308 	orr.w	r3, r3, #8
 800bca4:	71fb      	strb	r3, [r7, #7]
 800bca6:	e010      	b.n	800bcca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bca8:	7ebb      	ldrb	r3, [r7, #26]
 800bcaa:	f003 0311 	and.w	r3, r3, #17
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d003      	beq.n	800bcba <f_open+0xea>
					res = FR_DENIED;
 800bcb2:	2307      	movs	r3, #7
 800bcb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bcb8:	e007      	b.n	800bcca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bcba:	79fb      	ldrb	r3, [r7, #7]
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d002      	beq.n	800bcca <f_open+0xfa>
 800bcc4:	2308      	movs	r3, #8
 800bcc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bcca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d168      	bne.n	800bda4 <f_open+0x1d4>
 800bcd2:	79fb      	ldrb	r3, [r7, #7]
 800bcd4:	f003 0308 	and.w	r3, r3, #8
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d063      	beq.n	800bda4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bcdc:	f7fa f872 	bl	8005dc4 <get_fattime>
 800bce0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce4:	330e      	adds	r3, #14
 800bce6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe fae1 	bl	800a2b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf0:	3316      	adds	r3, #22
 800bcf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fe fadb 	bl	800a2b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bcfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcfc:	330b      	adds	r3, #11
 800bcfe:	2220      	movs	r2, #32
 800bd00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd06:	4611      	mov	r1, r2
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff fa32 	bl	800b172 <ld_clust>
 800bd0e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bd14:	2200      	movs	r2, #0
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff fa4a 	bl	800b1b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd1e:	331c      	adds	r3, #28
 800bd20:	2100      	movs	r1, #0
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fe fac4 	bl	800a2b0 <st_dword>
					fs->wflag = 1;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d037      	beq.n	800bda4 <f_open+0x1d4>
						dw = fs->winsect;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd38:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bd3a:	f107 0314 	add.w	r3, r7, #20
 800bd3e:	2200      	movs	r2, #0
 800bd40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fe ff5d 	bl	800ac02 <remove_chain>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800bd4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d126      	bne.n	800bda4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe fd02 	bl	800a764 <move_window>
 800bd60:	4603      	mov	r3, r0
 800bd62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd6a:	3a01      	subs	r2, #1
 800bd6c:	60da      	str	r2, [r3, #12]
 800bd6e:	e019      	b.n	800bda4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bd70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d115      	bne.n	800bda4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bd78:	7ebb      	ldrb	r3, [r7, #26]
 800bd7a:	f003 0310 	and.w	r3, r3, #16
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <f_open+0x1ba>
					res = FR_NO_FILE;
 800bd82:	2304      	movs	r3, #4
 800bd84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bd88:	e00c      	b.n	800bda4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bd8a:	79fb      	ldrb	r3, [r7, #7]
 800bd8c:	f003 0302 	and.w	r3, r3, #2
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d007      	beq.n	800bda4 <f_open+0x1d4>
 800bd94:	7ebb      	ldrb	r3, [r7, #26]
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <f_open+0x1d4>
						res = FR_DENIED;
 800bd9e:	2307      	movs	r3, #7
 800bda0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bda4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d128      	bne.n	800bdfe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	f003 0308 	and.w	r3, r3, #8
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d003      	beq.n	800bdbe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bdb6:	79fb      	ldrb	r3, [r7, #7]
 800bdb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bdc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	f023 0301 	bic.w	r3, r3, #1
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	bf14      	ite	ne
 800bdd6:	2301      	movne	r3, #1
 800bdd8:	2300      	moveq	r3, #0
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	461a      	mov	r2, r3
 800bdde:	f107 0314 	add.w	r3, r7, #20
 800bde2:	4611      	mov	r1, r2
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fe fb8b 	bl	800a500 <inc_lock>
 800bdea:	4602      	mov	r2, r0
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d102      	bne.n	800bdfe <f_open+0x22e>
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bdfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be02:	2b00      	cmp	r3, #0
 800be04:	f040 8095 	bne.w	800bf32 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be0c:	4611      	mov	r1, r2
 800be0e:	4618      	mov	r0, r3
 800be10:	f7ff f9af 	bl	800b172 <ld_clust>
 800be14:	4602      	mov	r2, r0
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1c:	331c      	adds	r3, #28
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fe fa08 	bl	800a234 <ld_dword>
 800be24:	4602      	mov	r2, r0
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	88da      	ldrh	r2, [r3, #6]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	79fa      	ldrb	r2, [r7, #7]
 800be42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2200      	movs	r2, #0
 800be48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3330      	adds	r3, #48	; 0x30
 800be5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be5e:	2100      	movs	r1, #0
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe fa72 	bl	800a34a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800be66:	79fb      	ldrb	r3, [r7, #7]
 800be68:	f003 0320 	and.w	r3, r3, #32
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d060      	beq.n	800bf32 <f_open+0x362>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d05c      	beq.n	800bf32 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	68da      	ldr	r2, [r3, #12]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	895b      	ldrh	r3, [r3, #10]
 800be84:	025b      	lsls	r3, r3, #9
 800be86:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	657b      	str	r3, [r7, #84]	; 0x54
 800be94:	e016      	b.n	800bec4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fe fd1d 	bl	800a8da <get_fat>
 800bea0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d802      	bhi.n	800beae <f_open+0x2de>
 800bea8:	2302      	movs	r3, #2
 800beaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800beae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800beb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb4:	d102      	bne.n	800bebc <f_open+0x2ec>
 800beb6:	2301      	movs	r3, #1
 800beb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	657b      	str	r3, [r7, #84]	; 0x54
 800bec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d103      	bne.n	800bed4 <f_open+0x304>
 800becc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d8e0      	bhi.n	800be96 <f_open+0x2c6>
				}
				fp->clust = clst;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bed8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800beda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d127      	bne.n	800bf32 <f_open+0x362>
 800bee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d022      	beq.n	800bf32 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fe fcd3 	bl	800a89c <clust2sect>
 800bef6:	6478      	str	r0, [r7, #68]	; 0x44
 800bef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800befa:	2b00      	cmp	r3, #0
 800befc:	d103      	bne.n	800bf06 <f_open+0x336>
						res = FR_INT_ERR;
 800befe:	2302      	movs	r3, #2
 800bf00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bf04:	e015      	b.n	800bf32 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bf06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf08:	0a5a      	lsrs	r2, r3, #9
 800bf0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf0c:	441a      	add	r2, r3
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	7858      	ldrb	r0, [r3, #1]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6a1a      	ldr	r2, [r3, #32]
 800bf20:	2301      	movs	r3, #1
 800bf22:	f7fe f911 	bl	800a148 <disk_read>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d002      	beq.n	800bf32 <f_open+0x362>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bf32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <f_open+0x370>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bf40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3760      	adds	r7, #96	; 0x60
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08e      	sub	sp, #56	; 0x38
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2200      	movs	r2, #0
 800bf62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f107 0214 	add.w	r2, r7, #20
 800bf6a:	4611      	mov	r1, r2
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff fdb3 	bl	800bad8 <validate>
 800bf72:	4603      	mov	r3, r0
 800bf74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bf78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d107      	bne.n	800bf90 <f_read+0x44>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	7d5b      	ldrb	r3, [r3, #21]
 800bf84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bf88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <f_read+0x4a>
 800bf90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf94:	e115      	b.n	800c1c2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	7d1b      	ldrb	r3, [r3, #20]
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <f_read+0x5a>
 800bfa2:	2307      	movs	r3, #7
 800bfa4:	e10d      	b.n	800c1c2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	68da      	ldr	r2, [r3, #12]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	6a3b      	ldr	r3, [r7, #32]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	f240 80fe 	bls.w	800c1b8 <f_read+0x26c>
 800bfbc:	6a3b      	ldr	r3, [r7, #32]
 800bfbe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bfc0:	e0fa      	b.n	800c1b8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f040 80c6 	bne.w	800c15c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	699b      	ldr	r3, [r3, #24]
 800bfd4:	0a5b      	lsrs	r3, r3, #9
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	8952      	ldrh	r2, [r2, #10]
 800bfda:	3a01      	subs	r2, #1
 800bfdc:	4013      	ands	r3, r2
 800bfde:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d12f      	bne.n	800c046 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d103      	bne.n	800bff6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	633b      	str	r3, [r7, #48]	; 0x30
 800bff4:	e013      	b.n	800c01e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d007      	beq.n	800c00e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	4619      	mov	r1, r3
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f7fe fef9 	bl	800adfc <clmt_clust>
 800c00a:	6338      	str	r0, [r7, #48]	; 0x30
 800c00c:	e007      	b.n	800c01e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	69db      	ldr	r3, [r3, #28]
 800c014:	4619      	mov	r1, r3
 800c016:	4610      	mov	r0, r2
 800c018:	f7fe fc5f 	bl	800a8da <get_fat>
 800c01c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	2b01      	cmp	r3, #1
 800c022:	d804      	bhi.n	800c02e <f_read+0xe2>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2202      	movs	r2, #2
 800c028:	755a      	strb	r2, [r3, #21]
 800c02a:	2302      	movs	r3, #2
 800c02c:	e0c9      	b.n	800c1c2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c034:	d104      	bne.n	800c040 <f_read+0xf4>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2201      	movs	r2, #1
 800c03a:	755a      	strb	r2, [r3, #21]
 800c03c:	2301      	movs	r3, #1
 800c03e:	e0c0      	b.n	800c1c2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c044:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	69db      	ldr	r3, [r3, #28]
 800c04c:	4619      	mov	r1, r3
 800c04e:	4610      	mov	r0, r2
 800c050:	f7fe fc24 	bl	800a89c <clust2sect>
 800c054:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d104      	bne.n	800c066 <f_read+0x11a>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2202      	movs	r2, #2
 800c060:	755a      	strb	r2, [r3, #21]
 800c062:	2302      	movs	r3, #2
 800c064:	e0ad      	b.n	800c1c2 <f_read+0x276>
			sect += csect;
 800c066:	69ba      	ldr	r2, [r7, #24]
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	4413      	add	r3, r2
 800c06c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	0a5b      	lsrs	r3, r3, #9
 800c072:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c076:	2b00      	cmp	r3, #0
 800c078:	d039      	beq.n	800c0ee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c07a:	69fa      	ldr	r2, [r7, #28]
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	4413      	add	r3, r2
 800c080:	697a      	ldr	r2, [r7, #20]
 800c082:	8952      	ldrh	r2, [r2, #10]
 800c084:	4293      	cmp	r3, r2
 800c086:	d905      	bls.n	800c094 <f_read+0x148>
					cc = fs->csize - csect;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	895b      	ldrh	r3, [r3, #10]
 800c08c:	461a      	mov	r2, r3
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	7858      	ldrb	r0, [r3, #1]
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	69ba      	ldr	r2, [r7, #24]
 800c09c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c09e:	f7fe f853 	bl	800a148 <disk_read>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d004      	beq.n	800c0b2 <f_read+0x166>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	755a      	strb	r2, [r3, #21]
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e087      	b.n	800c1c2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	7d1b      	ldrb	r3, [r3, #20]
 800c0b6:	b25b      	sxtb	r3, r3
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	da14      	bge.n	800c0e6 <f_read+0x19a>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6a1a      	ldr	r2, [r3, #32]
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d90d      	bls.n	800c0e6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6a1a      	ldr	r2, [r3, #32]
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	1ad3      	subs	r3, r2, r3
 800c0d2:	025b      	lsls	r3, r3, #9
 800c0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0d6:	18d0      	adds	r0, r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3330      	adds	r3, #48	; 0x30
 800c0dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	f7fe f911 	bl	800a308 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e8:	025b      	lsls	r3, r3, #9
 800c0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c0ec:	e050      	b.n	800c190 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	69ba      	ldr	r2, [r7, #24]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d02e      	beq.n	800c156 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	7d1b      	ldrb	r3, [r3, #20]
 800c0fc:	b25b      	sxtb	r3, r3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	da18      	bge.n	800c134 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	7858      	ldrb	r0, [r3, #1]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6a1a      	ldr	r2, [r3, #32]
 800c110:	2301      	movs	r3, #1
 800c112:	f7fe f839 	bl	800a188 <disk_write>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d004      	beq.n	800c126 <f_read+0x1da>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2201      	movs	r2, #1
 800c120:	755a      	strb	r2, [r3, #21]
 800c122:	2301      	movs	r3, #1
 800c124:	e04d      	b.n	800c1c2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	7d1b      	ldrb	r3, [r3, #20]
 800c12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	7858      	ldrb	r0, [r3, #1]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c13e:	2301      	movs	r3, #1
 800c140:	69ba      	ldr	r2, [r7, #24]
 800c142:	f7fe f801 	bl	800a148 <disk_read>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d004      	beq.n	800c156 <f_read+0x20a>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2201      	movs	r2, #1
 800c150:	755a      	strb	r2, [r3, #21]
 800c152:	2301      	movs	r3, #1
 800c154:	e035      	b.n	800c1c2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c164:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c168:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c16a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d901      	bls.n	800c176 <f_read+0x22a>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c184:	4413      	add	r3, r2
 800c186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c188:	4619      	mov	r1, r3
 800c18a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c18c:	f7fe f8bc 	bl	800a308 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c194:	4413      	add	r3, r2
 800c196:	627b      	str	r3, [r7, #36]	; 0x24
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	699a      	ldr	r2, [r3, #24]
 800c19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19e:	441a      	add	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	619a      	str	r2, [r3, #24]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	441a      	add	r2, r3
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	601a      	str	r2, [r3, #0]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	1ad3      	subs	r3, r2, r3
 800c1b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f47f af01 	bne.w	800bfc2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3738      	adds	r7, #56	; 0x38
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b086      	sub	sp, #24
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f107 0208 	add.w	r2, r7, #8
 800c1d8:	4611      	mov	r1, r2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7ff fc7c 	bl	800bad8 <validate>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c1e4:	7dfb      	ldrb	r3, [r7, #23]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d168      	bne.n	800c2bc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	7d1b      	ldrb	r3, [r3, #20]
 800c1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d062      	beq.n	800c2bc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	7d1b      	ldrb	r3, [r3, #20]
 800c1fa:	b25b      	sxtb	r3, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	da15      	bge.n	800c22c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	7858      	ldrb	r0, [r3, #1]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a1a      	ldr	r2, [r3, #32]
 800c20e:	2301      	movs	r3, #1
 800c210:	f7fd ffba 	bl	800a188 <disk_write>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d001      	beq.n	800c21e <f_sync+0x54>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e04f      	b.n	800c2be <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	7d1b      	ldrb	r3, [r3, #20]
 800c222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c226:	b2da      	uxtb	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c22c:	f7f9 fdca 	bl	8005dc4 <get_fattime>
 800c230:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c238:	4619      	mov	r1, r3
 800c23a:	4610      	mov	r0, r2
 800c23c:	f7fe fa92 	bl	800a764 <move_window>
 800c240:	4603      	mov	r3, r0
 800c242:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c244:	7dfb      	ldrb	r3, [r7, #23]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d138      	bne.n	800c2bc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c24e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	330b      	adds	r3, #11
 800c254:	781a      	ldrb	r2, [r3, #0]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	330b      	adds	r3, #11
 800c25a:	f042 0220 	orr.w	r2, r2, #32
 800c25e:	b2d2      	uxtb	r2, r2
 800c260:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6818      	ldr	r0, [r3, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	461a      	mov	r2, r3
 800c26c:	68f9      	ldr	r1, [r7, #12]
 800c26e:	f7fe ff9f 	bl	800b1b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f103 021c 	add.w	r2, r3, #28
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	4619      	mov	r1, r3
 800c27e:	4610      	mov	r0, r2
 800c280:	f7fe f816 	bl	800a2b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	3316      	adds	r3, #22
 800c288:	6939      	ldr	r1, [r7, #16]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fe f810 	bl	800a2b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	3312      	adds	r3, #18
 800c294:	2100      	movs	r1, #0
 800c296:	4618      	mov	r0, r3
 800c298:	f7fd ffef 	bl	800a27a <st_word>
					fs->wflag = 1;
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7fe fa8b 	bl	800a7c0 <sync_fs>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	7d1b      	ldrb	r3, [r3, #20]
 800c2b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3718      	adds	r7, #24
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b084      	sub	sp, #16
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff ff7b 	bl	800c1ca <f_sync>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d118      	bne.n	800c310 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f107 0208 	add.w	r2, r7, #8
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7ff fbf6 	bl	800bad8 <validate>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10c      	bne.n	800c310 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fe f98e 	bl	800a61c <dec_lock>
 800c300:	4603      	mov	r3, r0
 800c302:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c304:	7bfb      	ldrb	r3, [r7, #15]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d102      	bne.n	800c310 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c310:	7bfb      	ldrb	r3, [r7, #15]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b090      	sub	sp, #64	; 0x40
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
 800c322:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f107 0208 	add.w	r2, r7, #8
 800c32a:	4611      	mov	r1, r2
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff fbd3 	bl	800bad8 <validate>
 800c332:	4603      	mov	r3, r0
 800c334:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c338:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d103      	bne.n	800c348 <f_lseek+0x2e>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	7d5b      	ldrb	r3, [r3, #21]
 800c344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <f_lseek+0x3c>
 800c350:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c354:	e1e6      	b.n	800c724 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f000 80d1 	beq.w	800c502 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c366:	d15a      	bne.n	800c41e <f_lseek+0x104>
			tbl = fp->cltbl;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c370:	1d1a      	adds	r2, r3, #4
 800c372:	627a      	str	r2, [r7, #36]	; 0x24
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	617b      	str	r3, [r7, #20]
 800c378:	2302      	movs	r3, #2
 800c37a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	2b00      	cmp	r3, #0
 800c386:	d03a      	beq.n	800c3fe <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38a:	613b      	str	r3, [r7, #16]
 800c38c:	2300      	movs	r3, #0
 800c38e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c392:	3302      	adds	r3, #2
 800c394:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	60fb      	str	r3, [r7, #12]
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	3301      	adds	r3, #1
 800c39e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fa98 	bl	800a8da <get_fat>
 800c3aa:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d804      	bhi.n	800c3bc <f_lseek+0xa2>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2202      	movs	r2, #2
 800c3b6:	755a      	strb	r2, [r3, #21]
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	e1b3      	b.n	800c724 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c2:	d104      	bne.n	800c3ce <f_lseek+0xb4>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	755a      	strb	r2, [r3, #21]
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e1aa      	b.n	800c724 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d0de      	beq.n	800c396 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c3d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d809      	bhi.n	800c3f4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	1d1a      	adds	r2, r3, #4
 800c3e4:	627a      	str	r2, [r7, #36]	; 0x24
 800c3e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3e8:	601a      	str	r2, [r3, #0]
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ec:	1d1a      	adds	r2, r3, #4
 800c3ee:	627a      	str	r2, [r7, #36]	; 0x24
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d3c4      	bcc.n	800c388 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c404:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d803      	bhi.n	800c416 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c410:	2200      	movs	r2, #0
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	e184      	b.n	800c720 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c416:	2311      	movs	r3, #17
 800c418:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c41c:	e180      	b.n	800c720 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d902      	bls.n	800c42e <f_lseek+0x114>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	f000 8172 	beq.w	800c720 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	3b01      	subs	r3, #1
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7fe fcda 	bl	800adfc <clmt_clust>
 800c448:	4602      	mov	r2, r0
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	69db      	ldr	r3, [r3, #28]
 800c454:	4619      	mov	r1, r3
 800c456:	4610      	mov	r0, r2
 800c458:	f7fe fa20 	bl	800a89c <clust2sect>
 800c45c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d104      	bne.n	800c46e <f_lseek+0x154>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2202      	movs	r2, #2
 800c468:	755a      	strb	r2, [r3, #21]
 800c46a:	2302      	movs	r3, #2
 800c46c:	e15a      	b.n	800c724 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	3b01      	subs	r3, #1
 800c472:	0a5b      	lsrs	r3, r3, #9
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	8952      	ldrh	r2, [r2, #10]
 800c478:	3a01      	subs	r2, #1
 800c47a:	4013      	ands	r3, r2
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	4413      	add	r3, r2
 800c480:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	699b      	ldr	r3, [r3, #24]
 800c486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 8148 	beq.w	800c720 <f_lseek+0x406>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a1b      	ldr	r3, [r3, #32]
 800c494:	69ba      	ldr	r2, [r7, #24]
 800c496:	429a      	cmp	r2, r3
 800c498:	f000 8142 	beq.w	800c720 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	7d1b      	ldrb	r3, [r3, #20]
 800c4a0:	b25b      	sxtb	r3, r3
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	da18      	bge.n	800c4d8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	7858      	ldrb	r0, [r3, #1]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a1a      	ldr	r2, [r3, #32]
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	f7fd fe67 	bl	800a188 <disk_write>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <f_lseek+0x1b0>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	755a      	strb	r2, [r3, #21]
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e12c      	b.n	800c724 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	7d1b      	ldrb	r3, [r3, #20]
 800c4ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	7858      	ldrb	r0, [r3, #1]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	69ba      	ldr	r2, [r7, #24]
 800c4e6:	f7fd fe2f 	bl	800a148 <disk_read>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d004      	beq.n	800c4fa <f_lseek+0x1e0>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	755a      	strb	r2, [r3, #21]
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e114      	b.n	800c724 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	621a      	str	r2, [r3, #32]
 800c500:	e10e      	b.n	800c720 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d908      	bls.n	800c51e <f_lseek+0x204>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	7d1b      	ldrb	r3, [r3, #20]
 800c510:	f003 0302 	and.w	r3, r3, #2
 800c514:	2b00      	cmp	r3, #0
 800c516:	d102      	bne.n	800c51e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c524:	2300      	movs	r3, #0
 800c526:	637b      	str	r3, [r7, #52]	; 0x34
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c52c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 80a7 	beq.w	800c684 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	895b      	ldrh	r3, [r3, #10]
 800c53a:	025b      	lsls	r3, r3, #9
 800c53c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c53e:	6a3b      	ldr	r3, [r7, #32]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d01b      	beq.n	800c57c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	1e5a      	subs	r2, r3, #1
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	fbb2 f2f3 	udiv	r2, r2, r3
 800c54e:	6a3b      	ldr	r3, [r7, #32]
 800c550:	1e59      	subs	r1, r3, #1
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c558:	429a      	cmp	r2, r3
 800c55a:	d30f      	bcc.n	800c57c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c55c:	6a3b      	ldr	r3, [r7, #32]
 800c55e:	1e5a      	subs	r2, r3, #1
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	425b      	negs	r3, r3
 800c564:	401a      	ands	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	699b      	ldr	r3, [r3, #24]
 800c56e:	683a      	ldr	r2, [r7, #0]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	69db      	ldr	r3, [r3, #28]
 800c578:	63bb      	str	r3, [r7, #56]	; 0x38
 800c57a:	e022      	b.n	800c5c2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	2b00      	cmp	r3, #0
 800c586:	d119      	bne.n	800c5bc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2100      	movs	r1, #0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fe fb9d 	bl	800accc <create_chain>
 800c592:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c596:	2b01      	cmp	r3, #1
 800c598:	d104      	bne.n	800c5a4 <f_lseek+0x28a>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2202      	movs	r2, #2
 800c59e:	755a      	strb	r2, [r3, #21]
 800c5a0:	2302      	movs	r3, #2
 800c5a2:	e0bf      	b.n	800c724 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5aa:	d104      	bne.n	800c5b6 <f_lseek+0x29c>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	755a      	strb	r2, [r3, #21]
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e0b6      	b.n	800c724 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5ba:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5c0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d05d      	beq.n	800c684 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c5c8:	e03a      	b.n	800c640 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	603b      	str	r3, [r7, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	699a      	ldr	r2, [r3, #24]
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	441a      	add	r2, r3
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	7d1b      	ldrb	r3, [r3, #20]
 800c5e2:	f003 0302 	and.w	r3, r3, #2
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00b      	beq.n	800c602 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fe fb6c 	bl	800accc <create_chain>
 800c5f4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d108      	bne.n	800c60e <f_lseek+0x2f4>
							ofs = 0; break;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	603b      	str	r3, [r7, #0]
 800c600:	e022      	b.n	800c648 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c606:	4618      	mov	r0, r3
 800c608:	f7fe f967 	bl	800a8da <get_fat>
 800c60c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c614:	d104      	bne.n	800c620 <f_lseek+0x306>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	755a      	strb	r2, [r3, #21]
 800c61c:	2301      	movs	r3, #1
 800c61e:	e081      	b.n	800c724 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c622:	2b01      	cmp	r3, #1
 800c624:	d904      	bls.n	800c630 <f_lseek+0x316>
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d304      	bcc.n	800c63a <f_lseek+0x320>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2202      	movs	r2, #2
 800c634:	755a      	strb	r2, [r3, #21]
 800c636:	2302      	movs	r3, #2
 800c638:	e074      	b.n	800c724 <f_lseek+0x40a>
					fp->clust = clst;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c63e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c640:	683a      	ldr	r2, [r7, #0]
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	429a      	cmp	r2, r3
 800c646:	d8c0      	bhi.n	800c5ca <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	699a      	ldr	r2, [r3, #24]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	441a      	add	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d012      	beq.n	800c684 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c662:	4618      	mov	r0, r3
 800c664:	f7fe f91a 	bl	800a89c <clust2sect>
 800c668:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d104      	bne.n	800c67a <f_lseek+0x360>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2202      	movs	r2, #2
 800c674:	755a      	strb	r2, [r3, #21]
 800c676:	2302      	movs	r3, #2
 800c678:	e054      	b.n	800c724 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	0a5b      	lsrs	r3, r3, #9
 800c67e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c680:	4413      	add	r3, r2
 800c682:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	699a      	ldr	r2, [r3, #24]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d90a      	bls.n	800c6a6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	699a      	ldr	r2, [r3, #24]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	7d1b      	ldrb	r3, [r3, #20]
 800c69c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a0:	b2da      	uxtb	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d036      	beq.n	800c720 <f_lseek+0x406>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d031      	beq.n	800c720 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	7d1b      	ldrb	r3, [r3, #20]
 800c6c0:	b25b      	sxtb	r3, r3
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	da18      	bge.n	800c6f8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	7858      	ldrb	r0, [r3, #1]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6a1a      	ldr	r2, [r3, #32]
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	f7fd fd57 	bl	800a188 <disk_write>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d004      	beq.n	800c6ea <f_lseek+0x3d0>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	755a      	strb	r2, [r3, #21]
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e01c      	b.n	800c724 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	7d1b      	ldrb	r3, [r3, #20]
 800c6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	7858      	ldrb	r0, [r3, #1]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c702:	2301      	movs	r3, #1
 800c704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c706:	f7fd fd1f 	bl	800a148 <disk_read>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d004      	beq.n	800c71a <f_lseek+0x400>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	755a      	strb	r2, [r3, #21]
 800c716:	2301      	movs	r3, #1
 800c718:	e004      	b.n	800c724 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c71e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c720:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c724:	4618      	mov	r0, r3
 800c726:	3740      	adds	r7, #64	; 0x40
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b092      	sub	sp, #72	; 0x48
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c738:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c73c:	f107 030c 	add.w	r3, r7, #12
 800c740:	2200      	movs	r2, #0
 800c742:	4618      	mov	r0, r3
 800c744:	f7fe ff7c 	bl	800b640 <find_volume>
 800c748:	4603      	mov	r3, r0
 800c74a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800c74e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c752:	2b00      	cmp	r3, #0
 800c754:	f040 8099 	bne.w	800c88a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c760:	691a      	ldr	r2, [r3, #16]
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	695b      	ldr	r3, [r3, #20]
 800c766:	3b02      	subs	r3, #2
 800c768:	429a      	cmp	r2, r3
 800c76a:	d804      	bhi.n	800c776 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	691a      	ldr	r2, [r3, #16]
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	e089      	b.n	800c88a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d128      	bne.n	800c7d4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c782:	2302      	movs	r3, #2
 800c784:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c788:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c78a:	f107 0314 	add.w	r3, r7, #20
 800c78e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c790:	4618      	mov	r0, r3
 800c792:	f7fe f8a2 	bl	800a8da <get_fat>
 800c796:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c79e:	d103      	bne.n	800c7a8 <f_getfree+0x7c>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c7a6:	e063      	b.n	800c870 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d103      	bne.n	800c7b6 <f_getfree+0x8a>
 800c7ae:	2302      	movs	r3, #2
 800c7b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c7b4:	e05c      	b.n	800c870 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d102      	bne.n	800c7c2 <f_getfree+0x96>
 800c7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7be:	3301      	adds	r3, #1
 800c7c0:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800c7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d3db      	bcc.n	800c78a <f_getfree+0x5e>
 800c7d2:	e04d      	b.n	800c870 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	695b      	ldr	r3, [r3, #20]
 800c7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	637b      	str	r3, [r7, #52]	; 0x34
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d113      	bne.n	800c816 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c7ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	63ba      	str	r2, [r7, #56]	; 0x38
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	f7fd ffb4 	bl	800a764 <move_window>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800c802:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c806:	2b00      	cmp	r3, #0
 800c808:	d131      	bne.n	800c86e <f_getfree+0x142>
							p = fs->win;
 800c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80c:	3330      	adds	r3, #48	; 0x30
 800c80e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800c810:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d10f      	bne.n	800c83e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c81e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c820:	f7fd fcf0 	bl	800a204 <ld_word>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d102      	bne.n	800c830 <f_getfree+0x104>
 800c82a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c82c:	3301      	adds	r3, #1
 800c82e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	3302      	adds	r3, #2
 800c834:	633b      	str	r3, [r7, #48]	; 0x30
 800c836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c838:	3b02      	subs	r3, #2
 800c83a:	637b      	str	r3, [r7, #52]	; 0x34
 800c83c:	e010      	b.n	800c860 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c83e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c840:	f7fd fcf8 	bl	800a234 <ld_dword>
 800c844:	4603      	mov	r3, r0
 800c846:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d102      	bne.n	800c854 <f_getfree+0x128>
 800c84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c850:	3301      	adds	r3, #1
 800c852:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800c854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c856:	3304      	adds	r3, #4
 800c858:	633b      	str	r3, [r7, #48]	; 0x30
 800c85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85c:	3b04      	subs	r3, #4
 800c85e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800c860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c862:	3b01      	subs	r3, #1
 800c864:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1bd      	bne.n	800c7e8 <f_getfree+0xbc>
 800c86c:	e000      	b.n	800c870 <f_getfree+0x144>
							if (res != FR_OK) break;
 800c86e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c874:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c878:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c87a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	791a      	ldrb	r2, [r3, #4]
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	f042 0201 	orr.w	r2, r2, #1
 800c886:	b2d2      	uxtb	r2, r2
 800c888:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c88a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3748      	adds	r7, #72	; 0x48
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b088      	sub	sp, #32
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	60f8      	str	r0, [r7, #12]
 800c89e:	60b9      	str	r1, [r7, #8]
 800c8a0:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c8aa:	e01b      	b.n	800c8e4 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c8ac:	f107 0310 	add.w	r3, r7, #16
 800c8b0:	f107 0114 	add.w	r1, r7, #20
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7ff fb48 	bl	800bf4c <f_read>
		if (rc != 1) break;
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d116      	bne.n	800c8f0 <f_gets+0x5a>
		c = s[0];
 800c8c2:	7d3b      	ldrb	r3, [r7, #20]
 800c8c4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	2b0d      	cmp	r3, #13
 800c8ca:	d100      	bne.n	800c8ce <f_gets+0x38>
 800c8cc:	e00a      	b.n	800c8e4 <f_gets+0x4e>
		*p++ = c;
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	1c5a      	adds	r2, r3, #1
 800c8d2:	61ba      	str	r2, [r7, #24]
 800c8d4:	7dfa      	ldrb	r2, [r7, #23]
 800c8d6:	701a      	strb	r2, [r3, #0]
		n++;
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
 800c8e0:	2b0a      	cmp	r3, #10
 800c8e2:	d007      	beq.n	800c8f4 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	69fa      	ldr	r2, [r7, #28]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	dbde      	blt.n	800c8ac <f_gets+0x16>
 800c8ee:	e002      	b.n	800c8f6 <f_gets+0x60>
		if (rc != 1) break;
 800c8f0:	bf00      	nop
 800c8f2:	e000      	b.n	800c8f6 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800c8f4:	bf00      	nop
	}
	*p = 0;
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <f_gets+0x70>
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	e000      	b.n	800c908 <f_gets+0x72>
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3720      	adds	r7, #32
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c910:	b480      	push	{r7}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	4613      	mov	r3, r2
 800c91c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c91e:	2301      	movs	r3, #1
 800c920:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c926:	4b1f      	ldr	r3, [pc, #124]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c928:	7a5b      	ldrb	r3, [r3, #9]
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d131      	bne.n	800c994 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c930:	4b1c      	ldr	r3, [pc, #112]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c932:	7a5b      	ldrb	r3, [r3, #9]
 800c934:	b2db      	uxtb	r3, r3
 800c936:	461a      	mov	r2, r3
 800c938:	4b1a      	ldr	r3, [pc, #104]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c93a:	2100      	movs	r1, #0
 800c93c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c93e:	4b19      	ldr	r3, [pc, #100]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c940:	7a5b      	ldrb	r3, [r3, #9]
 800c942:	b2db      	uxtb	r3, r3
 800c944:	4a17      	ldr	r2, [pc, #92]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c94e:	4b15      	ldr	r3, [pc, #84]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c950:	7a5b      	ldrb	r3, [r3, #9]
 800c952:	b2db      	uxtb	r3, r3
 800c954:	461a      	mov	r2, r3
 800c956:	4b13      	ldr	r3, [pc, #76]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c958:	4413      	add	r3, r2
 800c95a:	79fa      	ldrb	r2, [r7, #7]
 800c95c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c95e:	4b11      	ldr	r3, [pc, #68]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c960:	7a5b      	ldrb	r3, [r3, #9]
 800c962:	b2db      	uxtb	r3, r3
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	b2d1      	uxtb	r1, r2
 800c968:	4a0e      	ldr	r2, [pc, #56]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c96a:	7251      	strb	r1, [r2, #9]
 800c96c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c96e:	7dbb      	ldrb	r3, [r7, #22]
 800c970:	3330      	adds	r3, #48	; 0x30
 800c972:	b2da      	uxtb	r2, r3
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	3301      	adds	r3, #1
 800c97c:	223a      	movs	r2, #58	; 0x3a
 800c97e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	3302      	adds	r3, #2
 800c984:	222f      	movs	r2, #47	; 0x2f
 800c986:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	3303      	adds	r3, #3
 800c98c:	2200      	movs	r2, #0
 800c98e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c990:	2300      	movs	r3, #0
 800c992:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c994:	7dfb      	ldrb	r3, [r7, #23]
}
 800c996:	4618      	mov	r0, r3
 800c998:	371c      	adds	r7, #28
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	20000b98 	.word	0x20000b98

0800c9a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	6839      	ldr	r1, [r7, #0]
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7ff ffaa 	bl	800c910 <FATFS_LinkDriverEx>
 800c9bc:	4603      	mov	r3, r0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
	...

0800c9c8 <__errno>:
 800c9c8:	4b01      	ldr	r3, [pc, #4]	; (800c9d0 <__errno+0x8>)
 800c9ca:	6818      	ldr	r0, [r3, #0]
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	2000007c 	.word	0x2000007c

0800c9d4 <__libc_init_array>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	4d0d      	ldr	r5, [pc, #52]	; (800ca0c <__libc_init_array+0x38>)
 800c9d8:	4c0d      	ldr	r4, [pc, #52]	; (800ca10 <__libc_init_array+0x3c>)
 800c9da:	1b64      	subs	r4, r4, r5
 800c9dc:	10a4      	asrs	r4, r4, #2
 800c9de:	2600      	movs	r6, #0
 800c9e0:	42a6      	cmp	r6, r4
 800c9e2:	d109      	bne.n	800c9f8 <__libc_init_array+0x24>
 800c9e4:	4d0b      	ldr	r5, [pc, #44]	; (800ca14 <__libc_init_array+0x40>)
 800c9e6:	4c0c      	ldr	r4, [pc, #48]	; (800ca18 <__libc_init_array+0x44>)
 800c9e8:	f003 fa4e 	bl	800fe88 <_init>
 800c9ec:	1b64      	subs	r4, r4, r5
 800c9ee:	10a4      	asrs	r4, r4, #2
 800c9f0:	2600      	movs	r6, #0
 800c9f2:	42a6      	cmp	r6, r4
 800c9f4:	d105      	bne.n	800ca02 <__libc_init_array+0x2e>
 800c9f6:	bd70      	pop	{r4, r5, r6, pc}
 800c9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9fc:	4798      	blx	r3
 800c9fe:	3601      	adds	r6, #1
 800ca00:	e7ee      	b.n	800c9e0 <__libc_init_array+0xc>
 800ca02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca06:	4798      	blx	r3
 800ca08:	3601      	adds	r6, #1
 800ca0a:	e7f2      	b.n	800c9f2 <__libc_init_array+0x1e>
 800ca0c:	08010d94 	.word	0x08010d94
 800ca10:	08010d94 	.word	0x08010d94
 800ca14:	08010d94 	.word	0x08010d94
 800ca18:	08010d98 	.word	0x08010d98

0800ca1c <malloc>:
 800ca1c:	4b02      	ldr	r3, [pc, #8]	; (800ca28 <malloc+0xc>)
 800ca1e:	4601      	mov	r1, r0
 800ca20:	6818      	ldr	r0, [r3, #0]
 800ca22:	f000 b877 	b.w	800cb14 <_malloc_r>
 800ca26:	bf00      	nop
 800ca28:	2000007c 	.word	0x2000007c

0800ca2c <memset>:
 800ca2c:	4402      	add	r2, r0
 800ca2e:	4603      	mov	r3, r0
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d100      	bne.n	800ca36 <memset+0xa>
 800ca34:	4770      	bx	lr
 800ca36:	f803 1b01 	strb.w	r1, [r3], #1
 800ca3a:	e7f9      	b.n	800ca30 <memset+0x4>

0800ca3c <_free_r>:
 800ca3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca3e:	2900      	cmp	r1, #0
 800ca40:	d044      	beq.n	800cacc <_free_r+0x90>
 800ca42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca46:	9001      	str	r0, [sp, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ca4e:	bfb8      	it	lt
 800ca50:	18e4      	addlt	r4, r4, r3
 800ca52:	f001 fc65 	bl	800e320 <__malloc_lock>
 800ca56:	4a1e      	ldr	r2, [pc, #120]	; (800cad0 <_free_r+0x94>)
 800ca58:	9801      	ldr	r0, [sp, #4]
 800ca5a:	6813      	ldr	r3, [r2, #0]
 800ca5c:	b933      	cbnz	r3, 800ca6c <_free_r+0x30>
 800ca5e:	6063      	str	r3, [r4, #4]
 800ca60:	6014      	str	r4, [r2, #0]
 800ca62:	b003      	add	sp, #12
 800ca64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca68:	f001 bc60 	b.w	800e32c <__malloc_unlock>
 800ca6c:	42a3      	cmp	r3, r4
 800ca6e:	d908      	bls.n	800ca82 <_free_r+0x46>
 800ca70:	6825      	ldr	r5, [r4, #0]
 800ca72:	1961      	adds	r1, r4, r5
 800ca74:	428b      	cmp	r3, r1
 800ca76:	bf01      	itttt	eq
 800ca78:	6819      	ldreq	r1, [r3, #0]
 800ca7a:	685b      	ldreq	r3, [r3, #4]
 800ca7c:	1949      	addeq	r1, r1, r5
 800ca7e:	6021      	streq	r1, [r4, #0]
 800ca80:	e7ed      	b.n	800ca5e <_free_r+0x22>
 800ca82:	461a      	mov	r2, r3
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	b10b      	cbz	r3, 800ca8c <_free_r+0x50>
 800ca88:	42a3      	cmp	r3, r4
 800ca8a:	d9fa      	bls.n	800ca82 <_free_r+0x46>
 800ca8c:	6811      	ldr	r1, [r2, #0]
 800ca8e:	1855      	adds	r5, r2, r1
 800ca90:	42a5      	cmp	r5, r4
 800ca92:	d10b      	bne.n	800caac <_free_r+0x70>
 800ca94:	6824      	ldr	r4, [r4, #0]
 800ca96:	4421      	add	r1, r4
 800ca98:	1854      	adds	r4, r2, r1
 800ca9a:	42a3      	cmp	r3, r4
 800ca9c:	6011      	str	r1, [r2, #0]
 800ca9e:	d1e0      	bne.n	800ca62 <_free_r+0x26>
 800caa0:	681c      	ldr	r4, [r3, #0]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	6053      	str	r3, [r2, #4]
 800caa6:	4421      	add	r1, r4
 800caa8:	6011      	str	r1, [r2, #0]
 800caaa:	e7da      	b.n	800ca62 <_free_r+0x26>
 800caac:	d902      	bls.n	800cab4 <_free_r+0x78>
 800caae:	230c      	movs	r3, #12
 800cab0:	6003      	str	r3, [r0, #0]
 800cab2:	e7d6      	b.n	800ca62 <_free_r+0x26>
 800cab4:	6825      	ldr	r5, [r4, #0]
 800cab6:	1961      	adds	r1, r4, r5
 800cab8:	428b      	cmp	r3, r1
 800caba:	bf04      	itt	eq
 800cabc:	6819      	ldreq	r1, [r3, #0]
 800cabe:	685b      	ldreq	r3, [r3, #4]
 800cac0:	6063      	str	r3, [r4, #4]
 800cac2:	bf04      	itt	eq
 800cac4:	1949      	addeq	r1, r1, r5
 800cac6:	6021      	streq	r1, [r4, #0]
 800cac8:	6054      	str	r4, [r2, #4]
 800caca:	e7ca      	b.n	800ca62 <_free_r+0x26>
 800cacc:	b003      	add	sp, #12
 800cace:	bd30      	pop	{r4, r5, pc}
 800cad0:	20000ba4 	.word	0x20000ba4

0800cad4 <sbrk_aligned>:
 800cad4:	b570      	push	{r4, r5, r6, lr}
 800cad6:	4e0e      	ldr	r6, [pc, #56]	; (800cb10 <sbrk_aligned+0x3c>)
 800cad8:	460c      	mov	r4, r1
 800cada:	6831      	ldr	r1, [r6, #0]
 800cadc:	4605      	mov	r5, r0
 800cade:	b911      	cbnz	r1, 800cae6 <sbrk_aligned+0x12>
 800cae0:	f000 fcf6 	bl	800d4d0 <_sbrk_r>
 800cae4:	6030      	str	r0, [r6, #0]
 800cae6:	4621      	mov	r1, r4
 800cae8:	4628      	mov	r0, r5
 800caea:	f000 fcf1 	bl	800d4d0 <_sbrk_r>
 800caee:	1c43      	adds	r3, r0, #1
 800caf0:	d00a      	beq.n	800cb08 <sbrk_aligned+0x34>
 800caf2:	1cc4      	adds	r4, r0, #3
 800caf4:	f024 0403 	bic.w	r4, r4, #3
 800caf8:	42a0      	cmp	r0, r4
 800cafa:	d007      	beq.n	800cb0c <sbrk_aligned+0x38>
 800cafc:	1a21      	subs	r1, r4, r0
 800cafe:	4628      	mov	r0, r5
 800cb00:	f000 fce6 	bl	800d4d0 <_sbrk_r>
 800cb04:	3001      	adds	r0, #1
 800cb06:	d101      	bne.n	800cb0c <sbrk_aligned+0x38>
 800cb08:	f04f 34ff 	mov.w	r4, #4294967295
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	bd70      	pop	{r4, r5, r6, pc}
 800cb10:	20000ba8 	.word	0x20000ba8

0800cb14 <_malloc_r>:
 800cb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb18:	1ccd      	adds	r5, r1, #3
 800cb1a:	f025 0503 	bic.w	r5, r5, #3
 800cb1e:	3508      	adds	r5, #8
 800cb20:	2d0c      	cmp	r5, #12
 800cb22:	bf38      	it	cc
 800cb24:	250c      	movcc	r5, #12
 800cb26:	2d00      	cmp	r5, #0
 800cb28:	4607      	mov	r7, r0
 800cb2a:	db01      	blt.n	800cb30 <_malloc_r+0x1c>
 800cb2c:	42a9      	cmp	r1, r5
 800cb2e:	d905      	bls.n	800cb3c <_malloc_r+0x28>
 800cb30:	230c      	movs	r3, #12
 800cb32:	603b      	str	r3, [r7, #0]
 800cb34:	2600      	movs	r6, #0
 800cb36:	4630      	mov	r0, r6
 800cb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3c:	4e2e      	ldr	r6, [pc, #184]	; (800cbf8 <_malloc_r+0xe4>)
 800cb3e:	f001 fbef 	bl	800e320 <__malloc_lock>
 800cb42:	6833      	ldr	r3, [r6, #0]
 800cb44:	461c      	mov	r4, r3
 800cb46:	bb34      	cbnz	r4, 800cb96 <_malloc_r+0x82>
 800cb48:	4629      	mov	r1, r5
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	f7ff ffc2 	bl	800cad4 <sbrk_aligned>
 800cb50:	1c43      	adds	r3, r0, #1
 800cb52:	4604      	mov	r4, r0
 800cb54:	d14d      	bne.n	800cbf2 <_malloc_r+0xde>
 800cb56:	6834      	ldr	r4, [r6, #0]
 800cb58:	4626      	mov	r6, r4
 800cb5a:	2e00      	cmp	r6, #0
 800cb5c:	d140      	bne.n	800cbe0 <_malloc_r+0xcc>
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	4631      	mov	r1, r6
 800cb62:	4638      	mov	r0, r7
 800cb64:	eb04 0803 	add.w	r8, r4, r3
 800cb68:	f000 fcb2 	bl	800d4d0 <_sbrk_r>
 800cb6c:	4580      	cmp	r8, r0
 800cb6e:	d13a      	bne.n	800cbe6 <_malloc_r+0xd2>
 800cb70:	6821      	ldr	r1, [r4, #0]
 800cb72:	3503      	adds	r5, #3
 800cb74:	1a6d      	subs	r5, r5, r1
 800cb76:	f025 0503 	bic.w	r5, r5, #3
 800cb7a:	3508      	adds	r5, #8
 800cb7c:	2d0c      	cmp	r5, #12
 800cb7e:	bf38      	it	cc
 800cb80:	250c      	movcc	r5, #12
 800cb82:	4629      	mov	r1, r5
 800cb84:	4638      	mov	r0, r7
 800cb86:	f7ff ffa5 	bl	800cad4 <sbrk_aligned>
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d02b      	beq.n	800cbe6 <_malloc_r+0xd2>
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	442b      	add	r3, r5
 800cb92:	6023      	str	r3, [r4, #0]
 800cb94:	e00e      	b.n	800cbb4 <_malloc_r+0xa0>
 800cb96:	6822      	ldr	r2, [r4, #0]
 800cb98:	1b52      	subs	r2, r2, r5
 800cb9a:	d41e      	bmi.n	800cbda <_malloc_r+0xc6>
 800cb9c:	2a0b      	cmp	r2, #11
 800cb9e:	d916      	bls.n	800cbce <_malloc_r+0xba>
 800cba0:	1961      	adds	r1, r4, r5
 800cba2:	42a3      	cmp	r3, r4
 800cba4:	6025      	str	r5, [r4, #0]
 800cba6:	bf18      	it	ne
 800cba8:	6059      	strne	r1, [r3, #4]
 800cbaa:	6863      	ldr	r3, [r4, #4]
 800cbac:	bf08      	it	eq
 800cbae:	6031      	streq	r1, [r6, #0]
 800cbb0:	5162      	str	r2, [r4, r5]
 800cbb2:	604b      	str	r3, [r1, #4]
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	f104 060b 	add.w	r6, r4, #11
 800cbba:	f001 fbb7 	bl	800e32c <__malloc_unlock>
 800cbbe:	f026 0607 	bic.w	r6, r6, #7
 800cbc2:	1d23      	adds	r3, r4, #4
 800cbc4:	1af2      	subs	r2, r6, r3
 800cbc6:	d0b6      	beq.n	800cb36 <_malloc_r+0x22>
 800cbc8:	1b9b      	subs	r3, r3, r6
 800cbca:	50a3      	str	r3, [r4, r2]
 800cbcc:	e7b3      	b.n	800cb36 <_malloc_r+0x22>
 800cbce:	6862      	ldr	r2, [r4, #4]
 800cbd0:	42a3      	cmp	r3, r4
 800cbd2:	bf0c      	ite	eq
 800cbd4:	6032      	streq	r2, [r6, #0]
 800cbd6:	605a      	strne	r2, [r3, #4]
 800cbd8:	e7ec      	b.n	800cbb4 <_malloc_r+0xa0>
 800cbda:	4623      	mov	r3, r4
 800cbdc:	6864      	ldr	r4, [r4, #4]
 800cbde:	e7b2      	b.n	800cb46 <_malloc_r+0x32>
 800cbe0:	4634      	mov	r4, r6
 800cbe2:	6876      	ldr	r6, [r6, #4]
 800cbe4:	e7b9      	b.n	800cb5a <_malloc_r+0x46>
 800cbe6:	230c      	movs	r3, #12
 800cbe8:	603b      	str	r3, [r7, #0]
 800cbea:	4638      	mov	r0, r7
 800cbec:	f001 fb9e 	bl	800e32c <__malloc_unlock>
 800cbf0:	e7a1      	b.n	800cb36 <_malloc_r+0x22>
 800cbf2:	6025      	str	r5, [r4, #0]
 800cbf4:	e7de      	b.n	800cbb4 <_malloc_r+0xa0>
 800cbf6:	bf00      	nop
 800cbf8:	20000ba4 	.word	0x20000ba4

0800cbfc <__cvt>:
 800cbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc00:	ec55 4b10 	vmov	r4, r5, d0
 800cc04:	2d00      	cmp	r5, #0
 800cc06:	460e      	mov	r6, r1
 800cc08:	4619      	mov	r1, r3
 800cc0a:	462b      	mov	r3, r5
 800cc0c:	bfbb      	ittet	lt
 800cc0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cc12:	461d      	movlt	r5, r3
 800cc14:	2300      	movge	r3, #0
 800cc16:	232d      	movlt	r3, #45	; 0x2d
 800cc18:	700b      	strb	r3, [r1, #0]
 800cc1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cc20:	4691      	mov	r9, r2
 800cc22:	f023 0820 	bic.w	r8, r3, #32
 800cc26:	bfbc      	itt	lt
 800cc28:	4622      	movlt	r2, r4
 800cc2a:	4614      	movlt	r4, r2
 800cc2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc30:	d005      	beq.n	800cc3e <__cvt+0x42>
 800cc32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cc36:	d100      	bne.n	800cc3a <__cvt+0x3e>
 800cc38:	3601      	adds	r6, #1
 800cc3a:	2102      	movs	r1, #2
 800cc3c:	e000      	b.n	800cc40 <__cvt+0x44>
 800cc3e:	2103      	movs	r1, #3
 800cc40:	ab03      	add	r3, sp, #12
 800cc42:	9301      	str	r3, [sp, #4]
 800cc44:	ab02      	add	r3, sp, #8
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	ec45 4b10 	vmov	d0, r4, r5
 800cc4c:	4653      	mov	r3, sl
 800cc4e:	4632      	mov	r2, r6
 800cc50:	f000 fd66 	bl	800d720 <_dtoa_r>
 800cc54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cc58:	4607      	mov	r7, r0
 800cc5a:	d102      	bne.n	800cc62 <__cvt+0x66>
 800cc5c:	f019 0f01 	tst.w	r9, #1
 800cc60:	d022      	beq.n	800cca8 <__cvt+0xac>
 800cc62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc66:	eb07 0906 	add.w	r9, r7, r6
 800cc6a:	d110      	bne.n	800cc8e <__cvt+0x92>
 800cc6c:	783b      	ldrb	r3, [r7, #0]
 800cc6e:	2b30      	cmp	r3, #48	; 0x30
 800cc70:	d10a      	bne.n	800cc88 <__cvt+0x8c>
 800cc72:	2200      	movs	r2, #0
 800cc74:	2300      	movs	r3, #0
 800cc76:	4620      	mov	r0, r4
 800cc78:	4629      	mov	r1, r5
 800cc7a:	f7f3 ff2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc7e:	b918      	cbnz	r0, 800cc88 <__cvt+0x8c>
 800cc80:	f1c6 0601 	rsb	r6, r6, #1
 800cc84:	f8ca 6000 	str.w	r6, [sl]
 800cc88:	f8da 3000 	ldr.w	r3, [sl]
 800cc8c:	4499      	add	r9, r3
 800cc8e:	2200      	movs	r2, #0
 800cc90:	2300      	movs	r3, #0
 800cc92:	4620      	mov	r0, r4
 800cc94:	4629      	mov	r1, r5
 800cc96:	f7f3 ff1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc9a:	b108      	cbz	r0, 800cca0 <__cvt+0xa4>
 800cc9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cca0:	2230      	movs	r2, #48	; 0x30
 800cca2:	9b03      	ldr	r3, [sp, #12]
 800cca4:	454b      	cmp	r3, r9
 800cca6:	d307      	bcc.n	800ccb8 <__cvt+0xbc>
 800cca8:	9b03      	ldr	r3, [sp, #12]
 800ccaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccac:	1bdb      	subs	r3, r3, r7
 800ccae:	4638      	mov	r0, r7
 800ccb0:	6013      	str	r3, [r2, #0]
 800ccb2:	b004      	add	sp, #16
 800ccb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb8:	1c59      	adds	r1, r3, #1
 800ccba:	9103      	str	r1, [sp, #12]
 800ccbc:	701a      	strb	r2, [r3, #0]
 800ccbe:	e7f0      	b.n	800cca2 <__cvt+0xa6>

0800ccc0 <__exponent>:
 800ccc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2900      	cmp	r1, #0
 800ccc6:	bfb8      	it	lt
 800ccc8:	4249      	neglt	r1, r1
 800ccca:	f803 2b02 	strb.w	r2, [r3], #2
 800ccce:	bfb4      	ite	lt
 800ccd0:	222d      	movlt	r2, #45	; 0x2d
 800ccd2:	222b      	movge	r2, #43	; 0x2b
 800ccd4:	2909      	cmp	r1, #9
 800ccd6:	7042      	strb	r2, [r0, #1]
 800ccd8:	dd2a      	ble.n	800cd30 <__exponent+0x70>
 800ccda:	f10d 0407 	add.w	r4, sp, #7
 800ccde:	46a4      	mov	ip, r4
 800cce0:	270a      	movs	r7, #10
 800cce2:	46a6      	mov	lr, r4
 800cce4:	460a      	mov	r2, r1
 800cce6:	fb91 f6f7 	sdiv	r6, r1, r7
 800ccea:	fb07 1516 	mls	r5, r7, r6, r1
 800ccee:	3530      	adds	r5, #48	; 0x30
 800ccf0:	2a63      	cmp	r2, #99	; 0x63
 800ccf2:	f104 34ff 	add.w	r4, r4, #4294967295
 800ccf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	dcf1      	bgt.n	800cce2 <__exponent+0x22>
 800ccfe:	3130      	adds	r1, #48	; 0x30
 800cd00:	f1ae 0502 	sub.w	r5, lr, #2
 800cd04:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cd08:	1c44      	adds	r4, r0, #1
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	4561      	cmp	r1, ip
 800cd0e:	d30a      	bcc.n	800cd26 <__exponent+0x66>
 800cd10:	f10d 0209 	add.w	r2, sp, #9
 800cd14:	eba2 020e 	sub.w	r2, r2, lr
 800cd18:	4565      	cmp	r5, ip
 800cd1a:	bf88      	it	hi
 800cd1c:	2200      	movhi	r2, #0
 800cd1e:	4413      	add	r3, r2
 800cd20:	1a18      	subs	r0, r3, r0
 800cd22:	b003      	add	sp, #12
 800cd24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cd2e:	e7ed      	b.n	800cd0c <__exponent+0x4c>
 800cd30:	2330      	movs	r3, #48	; 0x30
 800cd32:	3130      	adds	r1, #48	; 0x30
 800cd34:	7083      	strb	r3, [r0, #2]
 800cd36:	70c1      	strb	r1, [r0, #3]
 800cd38:	1d03      	adds	r3, r0, #4
 800cd3a:	e7f1      	b.n	800cd20 <__exponent+0x60>

0800cd3c <_printf_float>:
 800cd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd40:	ed2d 8b02 	vpush	{d8}
 800cd44:	b08d      	sub	sp, #52	; 0x34
 800cd46:	460c      	mov	r4, r1
 800cd48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cd4c:	4616      	mov	r6, r2
 800cd4e:	461f      	mov	r7, r3
 800cd50:	4605      	mov	r5, r0
 800cd52:	f001 fad3 	bl	800e2fc <_localeconv_r>
 800cd56:	f8d0 a000 	ldr.w	sl, [r0]
 800cd5a:	4650      	mov	r0, sl
 800cd5c:	f7f3 fa40 	bl	80001e0 <strlen>
 800cd60:	2300      	movs	r3, #0
 800cd62:	930a      	str	r3, [sp, #40]	; 0x28
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	9305      	str	r3, [sp, #20]
 800cd68:	f8d8 3000 	ldr.w	r3, [r8]
 800cd6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cd70:	3307      	adds	r3, #7
 800cd72:	f023 0307 	bic.w	r3, r3, #7
 800cd76:	f103 0208 	add.w	r2, r3, #8
 800cd7a:	f8c8 2000 	str.w	r2, [r8]
 800cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cd86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cd8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd8e:	9307      	str	r3, [sp, #28]
 800cd90:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd94:	ee08 0a10 	vmov	s16, r0
 800cd98:	4b9f      	ldr	r3, [pc, #636]	; (800d018 <_printf_float+0x2dc>)
 800cd9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cda2:	f7f3 fecb 	bl	8000b3c <__aeabi_dcmpun>
 800cda6:	bb88      	cbnz	r0, 800ce0c <_printf_float+0xd0>
 800cda8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdac:	4b9a      	ldr	r3, [pc, #616]	; (800d018 <_printf_float+0x2dc>)
 800cdae:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb2:	f7f3 fea5 	bl	8000b00 <__aeabi_dcmple>
 800cdb6:	bb48      	cbnz	r0, 800ce0c <_printf_float+0xd0>
 800cdb8:	2200      	movs	r2, #0
 800cdba:	2300      	movs	r3, #0
 800cdbc:	4640      	mov	r0, r8
 800cdbe:	4649      	mov	r1, r9
 800cdc0:	f7f3 fe94 	bl	8000aec <__aeabi_dcmplt>
 800cdc4:	b110      	cbz	r0, 800cdcc <_printf_float+0x90>
 800cdc6:	232d      	movs	r3, #45	; 0x2d
 800cdc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdcc:	4b93      	ldr	r3, [pc, #588]	; (800d01c <_printf_float+0x2e0>)
 800cdce:	4894      	ldr	r0, [pc, #592]	; (800d020 <_printf_float+0x2e4>)
 800cdd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cdd4:	bf94      	ite	ls
 800cdd6:	4698      	movls	r8, r3
 800cdd8:	4680      	movhi	r8, r0
 800cdda:	2303      	movs	r3, #3
 800cddc:	6123      	str	r3, [r4, #16]
 800cdde:	9b05      	ldr	r3, [sp, #20]
 800cde0:	f023 0204 	bic.w	r2, r3, #4
 800cde4:	6022      	str	r2, [r4, #0]
 800cde6:	f04f 0900 	mov.w	r9, #0
 800cdea:	9700      	str	r7, [sp, #0]
 800cdec:	4633      	mov	r3, r6
 800cdee:	aa0b      	add	r2, sp, #44	; 0x2c
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	f000 f9d8 	bl	800d1a8 <_printf_common>
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	f040 8090 	bne.w	800cf1e <_printf_float+0x1e2>
 800cdfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ce02:	b00d      	add	sp, #52	; 0x34
 800ce04:	ecbd 8b02 	vpop	{d8}
 800ce08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0c:	4642      	mov	r2, r8
 800ce0e:	464b      	mov	r3, r9
 800ce10:	4640      	mov	r0, r8
 800ce12:	4649      	mov	r1, r9
 800ce14:	f7f3 fe92 	bl	8000b3c <__aeabi_dcmpun>
 800ce18:	b140      	cbz	r0, 800ce2c <_printf_float+0xf0>
 800ce1a:	464b      	mov	r3, r9
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	bfbc      	itt	lt
 800ce20:	232d      	movlt	r3, #45	; 0x2d
 800ce22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ce26:	487f      	ldr	r0, [pc, #508]	; (800d024 <_printf_float+0x2e8>)
 800ce28:	4b7f      	ldr	r3, [pc, #508]	; (800d028 <_printf_float+0x2ec>)
 800ce2a:	e7d1      	b.n	800cdd0 <_printf_float+0x94>
 800ce2c:	6863      	ldr	r3, [r4, #4]
 800ce2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ce32:	9206      	str	r2, [sp, #24]
 800ce34:	1c5a      	adds	r2, r3, #1
 800ce36:	d13f      	bne.n	800ceb8 <_printf_float+0x17c>
 800ce38:	2306      	movs	r3, #6
 800ce3a:	6063      	str	r3, [r4, #4]
 800ce3c:	9b05      	ldr	r3, [sp, #20]
 800ce3e:	6861      	ldr	r1, [r4, #4]
 800ce40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ce44:	2300      	movs	r3, #0
 800ce46:	9303      	str	r3, [sp, #12]
 800ce48:	ab0a      	add	r3, sp, #40	; 0x28
 800ce4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ce4e:	ab09      	add	r3, sp, #36	; 0x24
 800ce50:	ec49 8b10 	vmov	d0, r8, r9
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	6022      	str	r2, [r4, #0]
 800ce58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	f7ff fecd 	bl	800cbfc <__cvt>
 800ce62:	9b06      	ldr	r3, [sp, #24]
 800ce64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce66:	2b47      	cmp	r3, #71	; 0x47
 800ce68:	4680      	mov	r8, r0
 800ce6a:	d108      	bne.n	800ce7e <_printf_float+0x142>
 800ce6c:	1cc8      	adds	r0, r1, #3
 800ce6e:	db02      	blt.n	800ce76 <_printf_float+0x13a>
 800ce70:	6863      	ldr	r3, [r4, #4]
 800ce72:	4299      	cmp	r1, r3
 800ce74:	dd41      	ble.n	800cefa <_printf_float+0x1be>
 800ce76:	f1ab 0b02 	sub.w	fp, fp, #2
 800ce7a:	fa5f fb8b 	uxtb.w	fp, fp
 800ce7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce82:	d820      	bhi.n	800cec6 <_printf_float+0x18a>
 800ce84:	3901      	subs	r1, #1
 800ce86:	465a      	mov	r2, fp
 800ce88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce8c:	9109      	str	r1, [sp, #36]	; 0x24
 800ce8e:	f7ff ff17 	bl	800ccc0 <__exponent>
 800ce92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce94:	1813      	adds	r3, r2, r0
 800ce96:	2a01      	cmp	r2, #1
 800ce98:	4681      	mov	r9, r0
 800ce9a:	6123      	str	r3, [r4, #16]
 800ce9c:	dc02      	bgt.n	800cea4 <_printf_float+0x168>
 800ce9e:	6822      	ldr	r2, [r4, #0]
 800cea0:	07d2      	lsls	r2, r2, #31
 800cea2:	d501      	bpl.n	800cea8 <_printf_float+0x16c>
 800cea4:	3301      	adds	r3, #1
 800cea6:	6123      	str	r3, [r4, #16]
 800cea8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d09c      	beq.n	800cdea <_printf_float+0xae>
 800ceb0:	232d      	movs	r3, #45	; 0x2d
 800ceb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ceb6:	e798      	b.n	800cdea <_printf_float+0xae>
 800ceb8:	9a06      	ldr	r2, [sp, #24]
 800ceba:	2a47      	cmp	r2, #71	; 0x47
 800cebc:	d1be      	bne.n	800ce3c <_printf_float+0x100>
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1bc      	bne.n	800ce3c <_printf_float+0x100>
 800cec2:	2301      	movs	r3, #1
 800cec4:	e7b9      	b.n	800ce3a <_printf_float+0xfe>
 800cec6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ceca:	d118      	bne.n	800cefe <_printf_float+0x1c2>
 800cecc:	2900      	cmp	r1, #0
 800cece:	6863      	ldr	r3, [r4, #4]
 800ced0:	dd0b      	ble.n	800ceea <_printf_float+0x1ae>
 800ced2:	6121      	str	r1, [r4, #16]
 800ced4:	b913      	cbnz	r3, 800cedc <_printf_float+0x1a0>
 800ced6:	6822      	ldr	r2, [r4, #0]
 800ced8:	07d0      	lsls	r0, r2, #31
 800ceda:	d502      	bpl.n	800cee2 <_printf_float+0x1a6>
 800cedc:	3301      	adds	r3, #1
 800cede:	440b      	add	r3, r1
 800cee0:	6123      	str	r3, [r4, #16]
 800cee2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cee4:	f04f 0900 	mov.w	r9, #0
 800cee8:	e7de      	b.n	800cea8 <_printf_float+0x16c>
 800ceea:	b913      	cbnz	r3, 800cef2 <_printf_float+0x1b6>
 800ceec:	6822      	ldr	r2, [r4, #0]
 800ceee:	07d2      	lsls	r2, r2, #31
 800cef0:	d501      	bpl.n	800cef6 <_printf_float+0x1ba>
 800cef2:	3302      	adds	r3, #2
 800cef4:	e7f4      	b.n	800cee0 <_printf_float+0x1a4>
 800cef6:	2301      	movs	r3, #1
 800cef8:	e7f2      	b.n	800cee0 <_printf_float+0x1a4>
 800cefa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf00:	4299      	cmp	r1, r3
 800cf02:	db05      	blt.n	800cf10 <_printf_float+0x1d4>
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	6121      	str	r1, [r4, #16]
 800cf08:	07d8      	lsls	r0, r3, #31
 800cf0a:	d5ea      	bpl.n	800cee2 <_printf_float+0x1a6>
 800cf0c:	1c4b      	adds	r3, r1, #1
 800cf0e:	e7e7      	b.n	800cee0 <_printf_float+0x1a4>
 800cf10:	2900      	cmp	r1, #0
 800cf12:	bfd4      	ite	le
 800cf14:	f1c1 0202 	rsble	r2, r1, #2
 800cf18:	2201      	movgt	r2, #1
 800cf1a:	4413      	add	r3, r2
 800cf1c:	e7e0      	b.n	800cee0 <_printf_float+0x1a4>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	055a      	lsls	r2, r3, #21
 800cf22:	d407      	bmi.n	800cf34 <_printf_float+0x1f8>
 800cf24:	6923      	ldr	r3, [r4, #16]
 800cf26:	4642      	mov	r2, r8
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	47b8      	blx	r7
 800cf2e:	3001      	adds	r0, #1
 800cf30:	d12c      	bne.n	800cf8c <_printf_float+0x250>
 800cf32:	e764      	b.n	800cdfe <_printf_float+0xc2>
 800cf34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf38:	f240 80e0 	bls.w	800d0fc <_printf_float+0x3c0>
 800cf3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf40:	2200      	movs	r2, #0
 800cf42:	2300      	movs	r3, #0
 800cf44:	f7f3 fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d034      	beq.n	800cfb6 <_printf_float+0x27a>
 800cf4c:	4a37      	ldr	r2, [pc, #220]	; (800d02c <_printf_float+0x2f0>)
 800cf4e:	2301      	movs	r3, #1
 800cf50:	4631      	mov	r1, r6
 800cf52:	4628      	mov	r0, r5
 800cf54:	47b8      	blx	r7
 800cf56:	3001      	adds	r0, #1
 800cf58:	f43f af51 	beq.w	800cdfe <_printf_float+0xc2>
 800cf5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf60:	429a      	cmp	r2, r3
 800cf62:	db02      	blt.n	800cf6a <_printf_float+0x22e>
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	07d8      	lsls	r0, r3, #31
 800cf68:	d510      	bpl.n	800cf8c <_printf_float+0x250>
 800cf6a:	ee18 3a10 	vmov	r3, s16
 800cf6e:	4652      	mov	r2, sl
 800cf70:	4631      	mov	r1, r6
 800cf72:	4628      	mov	r0, r5
 800cf74:	47b8      	blx	r7
 800cf76:	3001      	adds	r0, #1
 800cf78:	f43f af41 	beq.w	800cdfe <_printf_float+0xc2>
 800cf7c:	f04f 0800 	mov.w	r8, #0
 800cf80:	f104 091a 	add.w	r9, r4, #26
 800cf84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf86:	3b01      	subs	r3, #1
 800cf88:	4543      	cmp	r3, r8
 800cf8a:	dc09      	bgt.n	800cfa0 <_printf_float+0x264>
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	079b      	lsls	r3, r3, #30
 800cf90:	f100 8105 	bmi.w	800d19e <_printf_float+0x462>
 800cf94:	68e0      	ldr	r0, [r4, #12]
 800cf96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf98:	4298      	cmp	r0, r3
 800cf9a:	bfb8      	it	lt
 800cf9c:	4618      	movlt	r0, r3
 800cf9e:	e730      	b.n	800ce02 <_printf_float+0xc6>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	464a      	mov	r2, r9
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	47b8      	blx	r7
 800cfaa:	3001      	adds	r0, #1
 800cfac:	f43f af27 	beq.w	800cdfe <_printf_float+0xc2>
 800cfb0:	f108 0801 	add.w	r8, r8, #1
 800cfb4:	e7e6      	b.n	800cf84 <_printf_float+0x248>
 800cfb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	dc39      	bgt.n	800d030 <_printf_float+0x2f4>
 800cfbc:	4a1b      	ldr	r2, [pc, #108]	; (800d02c <_printf_float+0x2f0>)
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	4631      	mov	r1, r6
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	47b8      	blx	r7
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	f43f af19 	beq.w	800cdfe <_printf_float+0xc2>
 800cfcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	d102      	bne.n	800cfda <_printf_float+0x29e>
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	07d9      	lsls	r1, r3, #31
 800cfd8:	d5d8      	bpl.n	800cf8c <_printf_float+0x250>
 800cfda:	ee18 3a10 	vmov	r3, s16
 800cfde:	4652      	mov	r2, sl
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	47b8      	blx	r7
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	f43f af09 	beq.w	800cdfe <_printf_float+0xc2>
 800cfec:	f04f 0900 	mov.w	r9, #0
 800cff0:	f104 0a1a 	add.w	sl, r4, #26
 800cff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff6:	425b      	negs	r3, r3
 800cff8:	454b      	cmp	r3, r9
 800cffa:	dc01      	bgt.n	800d000 <_printf_float+0x2c4>
 800cffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cffe:	e792      	b.n	800cf26 <_printf_float+0x1ea>
 800d000:	2301      	movs	r3, #1
 800d002:	4652      	mov	r2, sl
 800d004:	4631      	mov	r1, r6
 800d006:	4628      	mov	r0, r5
 800d008:	47b8      	blx	r7
 800d00a:	3001      	adds	r0, #1
 800d00c:	f43f aef7 	beq.w	800cdfe <_printf_float+0xc2>
 800d010:	f109 0901 	add.w	r9, r9, #1
 800d014:	e7ee      	b.n	800cff4 <_printf_float+0x2b8>
 800d016:	bf00      	nop
 800d018:	7fefffff 	.word	0x7fefffff
 800d01c:	080109b4 	.word	0x080109b4
 800d020:	080109b8 	.word	0x080109b8
 800d024:	080109c0 	.word	0x080109c0
 800d028:	080109bc 	.word	0x080109bc
 800d02c:	080109c4 	.word	0x080109c4
 800d030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d034:	429a      	cmp	r2, r3
 800d036:	bfa8      	it	ge
 800d038:	461a      	movge	r2, r3
 800d03a:	2a00      	cmp	r2, #0
 800d03c:	4691      	mov	r9, r2
 800d03e:	dc37      	bgt.n	800d0b0 <_printf_float+0x374>
 800d040:	f04f 0b00 	mov.w	fp, #0
 800d044:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d048:	f104 021a 	add.w	r2, r4, #26
 800d04c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d04e:	9305      	str	r3, [sp, #20]
 800d050:	eba3 0309 	sub.w	r3, r3, r9
 800d054:	455b      	cmp	r3, fp
 800d056:	dc33      	bgt.n	800d0c0 <_printf_float+0x384>
 800d058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d05c:	429a      	cmp	r2, r3
 800d05e:	db3b      	blt.n	800d0d8 <_printf_float+0x39c>
 800d060:	6823      	ldr	r3, [r4, #0]
 800d062:	07da      	lsls	r2, r3, #31
 800d064:	d438      	bmi.n	800d0d8 <_printf_float+0x39c>
 800d066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d068:	9a05      	ldr	r2, [sp, #20]
 800d06a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d06c:	1a9a      	subs	r2, r3, r2
 800d06e:	eba3 0901 	sub.w	r9, r3, r1
 800d072:	4591      	cmp	r9, r2
 800d074:	bfa8      	it	ge
 800d076:	4691      	movge	r9, r2
 800d078:	f1b9 0f00 	cmp.w	r9, #0
 800d07c:	dc35      	bgt.n	800d0ea <_printf_float+0x3ae>
 800d07e:	f04f 0800 	mov.w	r8, #0
 800d082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d086:	f104 0a1a 	add.w	sl, r4, #26
 800d08a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d08e:	1a9b      	subs	r3, r3, r2
 800d090:	eba3 0309 	sub.w	r3, r3, r9
 800d094:	4543      	cmp	r3, r8
 800d096:	f77f af79 	ble.w	800cf8c <_printf_float+0x250>
 800d09a:	2301      	movs	r3, #1
 800d09c:	4652      	mov	r2, sl
 800d09e:	4631      	mov	r1, r6
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b8      	blx	r7
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	f43f aeaa 	beq.w	800cdfe <_printf_float+0xc2>
 800d0aa:	f108 0801 	add.w	r8, r8, #1
 800d0ae:	e7ec      	b.n	800d08a <_printf_float+0x34e>
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	4631      	mov	r1, r6
 800d0b4:	4642      	mov	r2, r8
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	47b8      	blx	r7
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	d1c0      	bne.n	800d040 <_printf_float+0x304>
 800d0be:	e69e      	b.n	800cdfe <_printf_float+0xc2>
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	4631      	mov	r1, r6
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	9205      	str	r2, [sp, #20]
 800d0c8:	47b8      	blx	r7
 800d0ca:	3001      	adds	r0, #1
 800d0cc:	f43f ae97 	beq.w	800cdfe <_printf_float+0xc2>
 800d0d0:	9a05      	ldr	r2, [sp, #20]
 800d0d2:	f10b 0b01 	add.w	fp, fp, #1
 800d0d6:	e7b9      	b.n	800d04c <_printf_float+0x310>
 800d0d8:	ee18 3a10 	vmov	r3, s16
 800d0dc:	4652      	mov	r2, sl
 800d0de:	4631      	mov	r1, r6
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	47b8      	blx	r7
 800d0e4:	3001      	adds	r0, #1
 800d0e6:	d1be      	bne.n	800d066 <_printf_float+0x32a>
 800d0e8:	e689      	b.n	800cdfe <_printf_float+0xc2>
 800d0ea:	9a05      	ldr	r2, [sp, #20]
 800d0ec:	464b      	mov	r3, r9
 800d0ee:	4442      	add	r2, r8
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	47b8      	blx	r7
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	d1c1      	bne.n	800d07e <_printf_float+0x342>
 800d0fa:	e680      	b.n	800cdfe <_printf_float+0xc2>
 800d0fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0fe:	2a01      	cmp	r2, #1
 800d100:	dc01      	bgt.n	800d106 <_printf_float+0x3ca>
 800d102:	07db      	lsls	r3, r3, #31
 800d104:	d538      	bpl.n	800d178 <_printf_float+0x43c>
 800d106:	2301      	movs	r3, #1
 800d108:	4642      	mov	r2, r8
 800d10a:	4631      	mov	r1, r6
 800d10c:	4628      	mov	r0, r5
 800d10e:	47b8      	blx	r7
 800d110:	3001      	adds	r0, #1
 800d112:	f43f ae74 	beq.w	800cdfe <_printf_float+0xc2>
 800d116:	ee18 3a10 	vmov	r3, s16
 800d11a:	4652      	mov	r2, sl
 800d11c:	4631      	mov	r1, r6
 800d11e:	4628      	mov	r0, r5
 800d120:	47b8      	blx	r7
 800d122:	3001      	adds	r0, #1
 800d124:	f43f ae6b 	beq.w	800cdfe <_printf_float+0xc2>
 800d128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d12c:	2200      	movs	r2, #0
 800d12e:	2300      	movs	r3, #0
 800d130:	f7f3 fcd2 	bl	8000ad8 <__aeabi_dcmpeq>
 800d134:	b9d8      	cbnz	r0, 800d16e <_printf_float+0x432>
 800d136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d138:	f108 0201 	add.w	r2, r8, #1
 800d13c:	3b01      	subs	r3, #1
 800d13e:	4631      	mov	r1, r6
 800d140:	4628      	mov	r0, r5
 800d142:	47b8      	blx	r7
 800d144:	3001      	adds	r0, #1
 800d146:	d10e      	bne.n	800d166 <_printf_float+0x42a>
 800d148:	e659      	b.n	800cdfe <_printf_float+0xc2>
 800d14a:	2301      	movs	r3, #1
 800d14c:	4652      	mov	r2, sl
 800d14e:	4631      	mov	r1, r6
 800d150:	4628      	mov	r0, r5
 800d152:	47b8      	blx	r7
 800d154:	3001      	adds	r0, #1
 800d156:	f43f ae52 	beq.w	800cdfe <_printf_float+0xc2>
 800d15a:	f108 0801 	add.w	r8, r8, #1
 800d15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d160:	3b01      	subs	r3, #1
 800d162:	4543      	cmp	r3, r8
 800d164:	dcf1      	bgt.n	800d14a <_printf_float+0x40e>
 800d166:	464b      	mov	r3, r9
 800d168:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d16c:	e6dc      	b.n	800cf28 <_printf_float+0x1ec>
 800d16e:	f04f 0800 	mov.w	r8, #0
 800d172:	f104 0a1a 	add.w	sl, r4, #26
 800d176:	e7f2      	b.n	800d15e <_printf_float+0x422>
 800d178:	2301      	movs	r3, #1
 800d17a:	4642      	mov	r2, r8
 800d17c:	e7df      	b.n	800d13e <_printf_float+0x402>
 800d17e:	2301      	movs	r3, #1
 800d180:	464a      	mov	r2, r9
 800d182:	4631      	mov	r1, r6
 800d184:	4628      	mov	r0, r5
 800d186:	47b8      	blx	r7
 800d188:	3001      	adds	r0, #1
 800d18a:	f43f ae38 	beq.w	800cdfe <_printf_float+0xc2>
 800d18e:	f108 0801 	add.w	r8, r8, #1
 800d192:	68e3      	ldr	r3, [r4, #12]
 800d194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d196:	1a5b      	subs	r3, r3, r1
 800d198:	4543      	cmp	r3, r8
 800d19a:	dcf0      	bgt.n	800d17e <_printf_float+0x442>
 800d19c:	e6fa      	b.n	800cf94 <_printf_float+0x258>
 800d19e:	f04f 0800 	mov.w	r8, #0
 800d1a2:	f104 0919 	add.w	r9, r4, #25
 800d1a6:	e7f4      	b.n	800d192 <_printf_float+0x456>

0800d1a8 <_printf_common>:
 800d1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1ac:	4616      	mov	r6, r2
 800d1ae:	4699      	mov	r9, r3
 800d1b0:	688a      	ldr	r2, [r1, #8]
 800d1b2:	690b      	ldr	r3, [r1, #16]
 800d1b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	bfb8      	it	lt
 800d1bc:	4613      	movlt	r3, r2
 800d1be:	6033      	str	r3, [r6, #0]
 800d1c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1c4:	4607      	mov	r7, r0
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	b10a      	cbz	r2, 800d1ce <_printf_common+0x26>
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	6033      	str	r3, [r6, #0]
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	0699      	lsls	r1, r3, #26
 800d1d2:	bf42      	ittt	mi
 800d1d4:	6833      	ldrmi	r3, [r6, #0]
 800d1d6:	3302      	addmi	r3, #2
 800d1d8:	6033      	strmi	r3, [r6, #0]
 800d1da:	6825      	ldr	r5, [r4, #0]
 800d1dc:	f015 0506 	ands.w	r5, r5, #6
 800d1e0:	d106      	bne.n	800d1f0 <_printf_common+0x48>
 800d1e2:	f104 0a19 	add.w	sl, r4, #25
 800d1e6:	68e3      	ldr	r3, [r4, #12]
 800d1e8:	6832      	ldr	r2, [r6, #0]
 800d1ea:	1a9b      	subs	r3, r3, r2
 800d1ec:	42ab      	cmp	r3, r5
 800d1ee:	dc26      	bgt.n	800d23e <_printf_common+0x96>
 800d1f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1f4:	1e13      	subs	r3, r2, #0
 800d1f6:	6822      	ldr	r2, [r4, #0]
 800d1f8:	bf18      	it	ne
 800d1fa:	2301      	movne	r3, #1
 800d1fc:	0692      	lsls	r2, r2, #26
 800d1fe:	d42b      	bmi.n	800d258 <_printf_common+0xb0>
 800d200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d204:	4649      	mov	r1, r9
 800d206:	4638      	mov	r0, r7
 800d208:	47c0      	blx	r8
 800d20a:	3001      	adds	r0, #1
 800d20c:	d01e      	beq.n	800d24c <_printf_common+0xa4>
 800d20e:	6823      	ldr	r3, [r4, #0]
 800d210:	68e5      	ldr	r5, [r4, #12]
 800d212:	6832      	ldr	r2, [r6, #0]
 800d214:	f003 0306 	and.w	r3, r3, #6
 800d218:	2b04      	cmp	r3, #4
 800d21a:	bf08      	it	eq
 800d21c:	1aad      	subeq	r5, r5, r2
 800d21e:	68a3      	ldr	r3, [r4, #8]
 800d220:	6922      	ldr	r2, [r4, #16]
 800d222:	bf0c      	ite	eq
 800d224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d228:	2500      	movne	r5, #0
 800d22a:	4293      	cmp	r3, r2
 800d22c:	bfc4      	itt	gt
 800d22e:	1a9b      	subgt	r3, r3, r2
 800d230:	18ed      	addgt	r5, r5, r3
 800d232:	2600      	movs	r6, #0
 800d234:	341a      	adds	r4, #26
 800d236:	42b5      	cmp	r5, r6
 800d238:	d11a      	bne.n	800d270 <_printf_common+0xc8>
 800d23a:	2000      	movs	r0, #0
 800d23c:	e008      	b.n	800d250 <_printf_common+0xa8>
 800d23e:	2301      	movs	r3, #1
 800d240:	4652      	mov	r2, sl
 800d242:	4649      	mov	r1, r9
 800d244:	4638      	mov	r0, r7
 800d246:	47c0      	blx	r8
 800d248:	3001      	adds	r0, #1
 800d24a:	d103      	bne.n	800d254 <_printf_common+0xac>
 800d24c:	f04f 30ff 	mov.w	r0, #4294967295
 800d250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d254:	3501      	adds	r5, #1
 800d256:	e7c6      	b.n	800d1e6 <_printf_common+0x3e>
 800d258:	18e1      	adds	r1, r4, r3
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	2030      	movs	r0, #48	; 0x30
 800d25e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d262:	4422      	add	r2, r4
 800d264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d26c:	3302      	adds	r3, #2
 800d26e:	e7c7      	b.n	800d200 <_printf_common+0x58>
 800d270:	2301      	movs	r3, #1
 800d272:	4622      	mov	r2, r4
 800d274:	4649      	mov	r1, r9
 800d276:	4638      	mov	r0, r7
 800d278:	47c0      	blx	r8
 800d27a:	3001      	adds	r0, #1
 800d27c:	d0e6      	beq.n	800d24c <_printf_common+0xa4>
 800d27e:	3601      	adds	r6, #1
 800d280:	e7d9      	b.n	800d236 <_printf_common+0x8e>
	...

0800d284 <_printf_i>:
 800d284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d288:	7e0f      	ldrb	r7, [r1, #24]
 800d28a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d28c:	2f78      	cmp	r7, #120	; 0x78
 800d28e:	4691      	mov	r9, r2
 800d290:	4680      	mov	r8, r0
 800d292:	460c      	mov	r4, r1
 800d294:	469a      	mov	sl, r3
 800d296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d29a:	d807      	bhi.n	800d2ac <_printf_i+0x28>
 800d29c:	2f62      	cmp	r7, #98	; 0x62
 800d29e:	d80a      	bhi.n	800d2b6 <_printf_i+0x32>
 800d2a0:	2f00      	cmp	r7, #0
 800d2a2:	f000 80d8 	beq.w	800d456 <_printf_i+0x1d2>
 800d2a6:	2f58      	cmp	r7, #88	; 0x58
 800d2a8:	f000 80a3 	beq.w	800d3f2 <_printf_i+0x16e>
 800d2ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2b4:	e03a      	b.n	800d32c <_printf_i+0xa8>
 800d2b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2ba:	2b15      	cmp	r3, #21
 800d2bc:	d8f6      	bhi.n	800d2ac <_printf_i+0x28>
 800d2be:	a101      	add	r1, pc, #4	; (adr r1, 800d2c4 <_printf_i+0x40>)
 800d2c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2c4:	0800d31d 	.word	0x0800d31d
 800d2c8:	0800d331 	.word	0x0800d331
 800d2cc:	0800d2ad 	.word	0x0800d2ad
 800d2d0:	0800d2ad 	.word	0x0800d2ad
 800d2d4:	0800d2ad 	.word	0x0800d2ad
 800d2d8:	0800d2ad 	.word	0x0800d2ad
 800d2dc:	0800d331 	.word	0x0800d331
 800d2e0:	0800d2ad 	.word	0x0800d2ad
 800d2e4:	0800d2ad 	.word	0x0800d2ad
 800d2e8:	0800d2ad 	.word	0x0800d2ad
 800d2ec:	0800d2ad 	.word	0x0800d2ad
 800d2f0:	0800d43d 	.word	0x0800d43d
 800d2f4:	0800d361 	.word	0x0800d361
 800d2f8:	0800d41f 	.word	0x0800d41f
 800d2fc:	0800d2ad 	.word	0x0800d2ad
 800d300:	0800d2ad 	.word	0x0800d2ad
 800d304:	0800d45f 	.word	0x0800d45f
 800d308:	0800d2ad 	.word	0x0800d2ad
 800d30c:	0800d361 	.word	0x0800d361
 800d310:	0800d2ad 	.word	0x0800d2ad
 800d314:	0800d2ad 	.word	0x0800d2ad
 800d318:	0800d427 	.word	0x0800d427
 800d31c:	682b      	ldr	r3, [r5, #0]
 800d31e:	1d1a      	adds	r2, r3, #4
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	602a      	str	r2, [r5, #0]
 800d324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d32c:	2301      	movs	r3, #1
 800d32e:	e0a3      	b.n	800d478 <_printf_i+0x1f4>
 800d330:	6820      	ldr	r0, [r4, #0]
 800d332:	6829      	ldr	r1, [r5, #0]
 800d334:	0606      	lsls	r6, r0, #24
 800d336:	f101 0304 	add.w	r3, r1, #4
 800d33a:	d50a      	bpl.n	800d352 <_printf_i+0xce>
 800d33c:	680e      	ldr	r6, [r1, #0]
 800d33e:	602b      	str	r3, [r5, #0]
 800d340:	2e00      	cmp	r6, #0
 800d342:	da03      	bge.n	800d34c <_printf_i+0xc8>
 800d344:	232d      	movs	r3, #45	; 0x2d
 800d346:	4276      	negs	r6, r6
 800d348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d34c:	485e      	ldr	r0, [pc, #376]	; (800d4c8 <_printf_i+0x244>)
 800d34e:	230a      	movs	r3, #10
 800d350:	e019      	b.n	800d386 <_printf_i+0x102>
 800d352:	680e      	ldr	r6, [r1, #0]
 800d354:	602b      	str	r3, [r5, #0]
 800d356:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d35a:	bf18      	it	ne
 800d35c:	b236      	sxthne	r6, r6
 800d35e:	e7ef      	b.n	800d340 <_printf_i+0xbc>
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	6820      	ldr	r0, [r4, #0]
 800d364:	1d19      	adds	r1, r3, #4
 800d366:	6029      	str	r1, [r5, #0]
 800d368:	0601      	lsls	r1, r0, #24
 800d36a:	d501      	bpl.n	800d370 <_printf_i+0xec>
 800d36c:	681e      	ldr	r6, [r3, #0]
 800d36e:	e002      	b.n	800d376 <_printf_i+0xf2>
 800d370:	0646      	lsls	r6, r0, #25
 800d372:	d5fb      	bpl.n	800d36c <_printf_i+0xe8>
 800d374:	881e      	ldrh	r6, [r3, #0]
 800d376:	4854      	ldr	r0, [pc, #336]	; (800d4c8 <_printf_i+0x244>)
 800d378:	2f6f      	cmp	r7, #111	; 0x6f
 800d37a:	bf0c      	ite	eq
 800d37c:	2308      	moveq	r3, #8
 800d37e:	230a      	movne	r3, #10
 800d380:	2100      	movs	r1, #0
 800d382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d386:	6865      	ldr	r5, [r4, #4]
 800d388:	60a5      	str	r5, [r4, #8]
 800d38a:	2d00      	cmp	r5, #0
 800d38c:	bfa2      	ittt	ge
 800d38e:	6821      	ldrge	r1, [r4, #0]
 800d390:	f021 0104 	bicge.w	r1, r1, #4
 800d394:	6021      	strge	r1, [r4, #0]
 800d396:	b90e      	cbnz	r6, 800d39c <_printf_i+0x118>
 800d398:	2d00      	cmp	r5, #0
 800d39a:	d04d      	beq.n	800d438 <_printf_i+0x1b4>
 800d39c:	4615      	mov	r5, r2
 800d39e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3a2:	fb03 6711 	mls	r7, r3, r1, r6
 800d3a6:	5dc7      	ldrb	r7, [r0, r7]
 800d3a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3ac:	4637      	mov	r7, r6
 800d3ae:	42bb      	cmp	r3, r7
 800d3b0:	460e      	mov	r6, r1
 800d3b2:	d9f4      	bls.n	800d39e <_printf_i+0x11a>
 800d3b4:	2b08      	cmp	r3, #8
 800d3b6:	d10b      	bne.n	800d3d0 <_printf_i+0x14c>
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	07de      	lsls	r6, r3, #31
 800d3bc:	d508      	bpl.n	800d3d0 <_printf_i+0x14c>
 800d3be:	6923      	ldr	r3, [r4, #16]
 800d3c0:	6861      	ldr	r1, [r4, #4]
 800d3c2:	4299      	cmp	r1, r3
 800d3c4:	bfde      	ittt	le
 800d3c6:	2330      	movle	r3, #48	; 0x30
 800d3c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3d0:	1b52      	subs	r2, r2, r5
 800d3d2:	6122      	str	r2, [r4, #16]
 800d3d4:	f8cd a000 	str.w	sl, [sp]
 800d3d8:	464b      	mov	r3, r9
 800d3da:	aa03      	add	r2, sp, #12
 800d3dc:	4621      	mov	r1, r4
 800d3de:	4640      	mov	r0, r8
 800d3e0:	f7ff fee2 	bl	800d1a8 <_printf_common>
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	d14c      	bne.n	800d482 <_printf_i+0x1fe>
 800d3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ec:	b004      	add	sp, #16
 800d3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3f2:	4835      	ldr	r0, [pc, #212]	; (800d4c8 <_printf_i+0x244>)
 800d3f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d3f8:	6829      	ldr	r1, [r5, #0]
 800d3fa:	6823      	ldr	r3, [r4, #0]
 800d3fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d400:	6029      	str	r1, [r5, #0]
 800d402:	061d      	lsls	r5, r3, #24
 800d404:	d514      	bpl.n	800d430 <_printf_i+0x1ac>
 800d406:	07df      	lsls	r7, r3, #31
 800d408:	bf44      	itt	mi
 800d40a:	f043 0320 	orrmi.w	r3, r3, #32
 800d40e:	6023      	strmi	r3, [r4, #0]
 800d410:	b91e      	cbnz	r6, 800d41a <_printf_i+0x196>
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	f023 0320 	bic.w	r3, r3, #32
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	2310      	movs	r3, #16
 800d41c:	e7b0      	b.n	800d380 <_printf_i+0xfc>
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	f043 0320 	orr.w	r3, r3, #32
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	2378      	movs	r3, #120	; 0x78
 800d428:	4828      	ldr	r0, [pc, #160]	; (800d4cc <_printf_i+0x248>)
 800d42a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d42e:	e7e3      	b.n	800d3f8 <_printf_i+0x174>
 800d430:	0659      	lsls	r1, r3, #25
 800d432:	bf48      	it	mi
 800d434:	b2b6      	uxthmi	r6, r6
 800d436:	e7e6      	b.n	800d406 <_printf_i+0x182>
 800d438:	4615      	mov	r5, r2
 800d43a:	e7bb      	b.n	800d3b4 <_printf_i+0x130>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	6826      	ldr	r6, [r4, #0]
 800d440:	6961      	ldr	r1, [r4, #20]
 800d442:	1d18      	adds	r0, r3, #4
 800d444:	6028      	str	r0, [r5, #0]
 800d446:	0635      	lsls	r5, r6, #24
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	d501      	bpl.n	800d450 <_printf_i+0x1cc>
 800d44c:	6019      	str	r1, [r3, #0]
 800d44e:	e002      	b.n	800d456 <_printf_i+0x1d2>
 800d450:	0670      	lsls	r0, r6, #25
 800d452:	d5fb      	bpl.n	800d44c <_printf_i+0x1c8>
 800d454:	8019      	strh	r1, [r3, #0]
 800d456:	2300      	movs	r3, #0
 800d458:	6123      	str	r3, [r4, #16]
 800d45a:	4615      	mov	r5, r2
 800d45c:	e7ba      	b.n	800d3d4 <_printf_i+0x150>
 800d45e:	682b      	ldr	r3, [r5, #0]
 800d460:	1d1a      	adds	r2, r3, #4
 800d462:	602a      	str	r2, [r5, #0]
 800d464:	681d      	ldr	r5, [r3, #0]
 800d466:	6862      	ldr	r2, [r4, #4]
 800d468:	2100      	movs	r1, #0
 800d46a:	4628      	mov	r0, r5
 800d46c:	f7f2 fec0 	bl	80001f0 <memchr>
 800d470:	b108      	cbz	r0, 800d476 <_printf_i+0x1f2>
 800d472:	1b40      	subs	r0, r0, r5
 800d474:	6060      	str	r0, [r4, #4]
 800d476:	6863      	ldr	r3, [r4, #4]
 800d478:	6123      	str	r3, [r4, #16]
 800d47a:	2300      	movs	r3, #0
 800d47c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d480:	e7a8      	b.n	800d3d4 <_printf_i+0x150>
 800d482:	6923      	ldr	r3, [r4, #16]
 800d484:	462a      	mov	r2, r5
 800d486:	4649      	mov	r1, r9
 800d488:	4640      	mov	r0, r8
 800d48a:	47d0      	blx	sl
 800d48c:	3001      	adds	r0, #1
 800d48e:	d0ab      	beq.n	800d3e8 <_printf_i+0x164>
 800d490:	6823      	ldr	r3, [r4, #0]
 800d492:	079b      	lsls	r3, r3, #30
 800d494:	d413      	bmi.n	800d4be <_printf_i+0x23a>
 800d496:	68e0      	ldr	r0, [r4, #12]
 800d498:	9b03      	ldr	r3, [sp, #12]
 800d49a:	4298      	cmp	r0, r3
 800d49c:	bfb8      	it	lt
 800d49e:	4618      	movlt	r0, r3
 800d4a0:	e7a4      	b.n	800d3ec <_printf_i+0x168>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	4632      	mov	r2, r6
 800d4a6:	4649      	mov	r1, r9
 800d4a8:	4640      	mov	r0, r8
 800d4aa:	47d0      	blx	sl
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	d09b      	beq.n	800d3e8 <_printf_i+0x164>
 800d4b0:	3501      	adds	r5, #1
 800d4b2:	68e3      	ldr	r3, [r4, #12]
 800d4b4:	9903      	ldr	r1, [sp, #12]
 800d4b6:	1a5b      	subs	r3, r3, r1
 800d4b8:	42ab      	cmp	r3, r5
 800d4ba:	dcf2      	bgt.n	800d4a2 <_printf_i+0x21e>
 800d4bc:	e7eb      	b.n	800d496 <_printf_i+0x212>
 800d4be:	2500      	movs	r5, #0
 800d4c0:	f104 0619 	add.w	r6, r4, #25
 800d4c4:	e7f5      	b.n	800d4b2 <_printf_i+0x22e>
 800d4c6:	bf00      	nop
 800d4c8:	080109c6 	.word	0x080109c6
 800d4cc:	080109d7 	.word	0x080109d7

0800d4d0 <_sbrk_r>:
 800d4d0:	b538      	push	{r3, r4, r5, lr}
 800d4d2:	4d06      	ldr	r5, [pc, #24]	; (800d4ec <_sbrk_r+0x1c>)
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	4608      	mov	r0, r1
 800d4da:	602b      	str	r3, [r5, #0]
 800d4dc:	f7f4 fe32 	bl	8002144 <_sbrk>
 800d4e0:	1c43      	adds	r3, r0, #1
 800d4e2:	d102      	bne.n	800d4ea <_sbrk_r+0x1a>
 800d4e4:	682b      	ldr	r3, [r5, #0]
 800d4e6:	b103      	cbz	r3, 800d4ea <_sbrk_r+0x1a>
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	bd38      	pop	{r3, r4, r5, pc}
 800d4ec:	20000bac 	.word	0x20000bac

0800d4f0 <siprintf>:
 800d4f0:	b40e      	push	{r1, r2, r3}
 800d4f2:	b500      	push	{lr}
 800d4f4:	b09c      	sub	sp, #112	; 0x70
 800d4f6:	ab1d      	add	r3, sp, #116	; 0x74
 800d4f8:	9002      	str	r0, [sp, #8]
 800d4fa:	9006      	str	r0, [sp, #24]
 800d4fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d500:	4809      	ldr	r0, [pc, #36]	; (800d528 <siprintf+0x38>)
 800d502:	9107      	str	r1, [sp, #28]
 800d504:	9104      	str	r1, [sp, #16]
 800d506:	4909      	ldr	r1, [pc, #36]	; (800d52c <siprintf+0x3c>)
 800d508:	f853 2b04 	ldr.w	r2, [r3], #4
 800d50c:	9105      	str	r1, [sp, #20]
 800d50e:	6800      	ldr	r0, [r0, #0]
 800d510:	9301      	str	r3, [sp, #4]
 800d512:	a902      	add	r1, sp, #8
 800d514:	f001 fb06 	bl	800eb24 <_svfiprintf_r>
 800d518:	9b02      	ldr	r3, [sp, #8]
 800d51a:	2200      	movs	r2, #0
 800d51c:	701a      	strb	r2, [r3, #0]
 800d51e:	b01c      	add	sp, #112	; 0x70
 800d520:	f85d eb04 	ldr.w	lr, [sp], #4
 800d524:	b003      	add	sp, #12
 800d526:	4770      	bx	lr
 800d528:	2000007c 	.word	0x2000007c
 800d52c:	ffff0208 	.word	0xffff0208

0800d530 <strncpy>:
 800d530:	b510      	push	{r4, lr}
 800d532:	3901      	subs	r1, #1
 800d534:	4603      	mov	r3, r0
 800d536:	b132      	cbz	r2, 800d546 <strncpy+0x16>
 800d538:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d53c:	f803 4b01 	strb.w	r4, [r3], #1
 800d540:	3a01      	subs	r2, #1
 800d542:	2c00      	cmp	r4, #0
 800d544:	d1f7      	bne.n	800d536 <strncpy+0x6>
 800d546:	441a      	add	r2, r3
 800d548:	2100      	movs	r1, #0
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d100      	bne.n	800d550 <strncpy+0x20>
 800d54e:	bd10      	pop	{r4, pc}
 800d550:	f803 1b01 	strb.w	r1, [r3], #1
 800d554:	e7f9      	b.n	800d54a <strncpy+0x1a>

0800d556 <_vsniprintf_r>:
 800d556:	b530      	push	{r4, r5, lr}
 800d558:	4614      	mov	r4, r2
 800d55a:	2c00      	cmp	r4, #0
 800d55c:	b09b      	sub	sp, #108	; 0x6c
 800d55e:	4605      	mov	r5, r0
 800d560:	461a      	mov	r2, r3
 800d562:	da05      	bge.n	800d570 <_vsniprintf_r+0x1a>
 800d564:	238b      	movs	r3, #139	; 0x8b
 800d566:	6003      	str	r3, [r0, #0]
 800d568:	f04f 30ff 	mov.w	r0, #4294967295
 800d56c:	b01b      	add	sp, #108	; 0x6c
 800d56e:	bd30      	pop	{r4, r5, pc}
 800d570:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d574:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d578:	bf14      	ite	ne
 800d57a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d57e:	4623      	moveq	r3, r4
 800d580:	9302      	str	r3, [sp, #8]
 800d582:	9305      	str	r3, [sp, #20]
 800d584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d588:	9100      	str	r1, [sp, #0]
 800d58a:	9104      	str	r1, [sp, #16]
 800d58c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d590:	4669      	mov	r1, sp
 800d592:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d594:	f001 fac6 	bl	800eb24 <_svfiprintf_r>
 800d598:	1c43      	adds	r3, r0, #1
 800d59a:	bfbc      	itt	lt
 800d59c:	238b      	movlt	r3, #139	; 0x8b
 800d59e:	602b      	strlt	r3, [r5, #0]
 800d5a0:	2c00      	cmp	r4, #0
 800d5a2:	d0e3      	beq.n	800d56c <_vsniprintf_r+0x16>
 800d5a4:	9b00      	ldr	r3, [sp, #0]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	701a      	strb	r2, [r3, #0]
 800d5aa:	e7df      	b.n	800d56c <_vsniprintf_r+0x16>

0800d5ac <vsniprintf>:
 800d5ac:	b507      	push	{r0, r1, r2, lr}
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	460a      	mov	r2, r1
 800d5b4:	4601      	mov	r1, r0
 800d5b6:	4803      	ldr	r0, [pc, #12]	; (800d5c4 <vsniprintf+0x18>)
 800d5b8:	6800      	ldr	r0, [r0, #0]
 800d5ba:	f7ff ffcc 	bl	800d556 <_vsniprintf_r>
 800d5be:	b003      	add	sp, #12
 800d5c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5c4:	2000007c 	.word	0x2000007c

0800d5c8 <_vsiprintf_r>:
 800d5c8:	b500      	push	{lr}
 800d5ca:	b09b      	sub	sp, #108	; 0x6c
 800d5cc:	9100      	str	r1, [sp, #0]
 800d5ce:	9104      	str	r1, [sp, #16]
 800d5d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5d4:	9105      	str	r1, [sp, #20]
 800d5d6:	9102      	str	r1, [sp, #8]
 800d5d8:	4905      	ldr	r1, [pc, #20]	; (800d5f0 <_vsiprintf_r+0x28>)
 800d5da:	9103      	str	r1, [sp, #12]
 800d5dc:	4669      	mov	r1, sp
 800d5de:	f001 faa1 	bl	800eb24 <_svfiprintf_r>
 800d5e2:	9b00      	ldr	r3, [sp, #0]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	701a      	strb	r2, [r3, #0]
 800d5e8:	b01b      	add	sp, #108	; 0x6c
 800d5ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5ee:	bf00      	nop
 800d5f0:	ffff0208 	.word	0xffff0208

0800d5f4 <vsiprintf>:
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	460a      	mov	r2, r1
 800d5f8:	4601      	mov	r1, r0
 800d5fa:	4802      	ldr	r0, [pc, #8]	; (800d604 <vsiprintf+0x10>)
 800d5fc:	6800      	ldr	r0, [r0, #0]
 800d5fe:	f7ff bfe3 	b.w	800d5c8 <_vsiprintf_r>
 800d602:	bf00      	nop
 800d604:	2000007c 	.word	0x2000007c

0800d608 <quorem>:
 800d608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60c:	6903      	ldr	r3, [r0, #16]
 800d60e:	690c      	ldr	r4, [r1, #16]
 800d610:	42a3      	cmp	r3, r4
 800d612:	4607      	mov	r7, r0
 800d614:	f2c0 8081 	blt.w	800d71a <quorem+0x112>
 800d618:	3c01      	subs	r4, #1
 800d61a:	f101 0814 	add.w	r8, r1, #20
 800d61e:	f100 0514 	add.w	r5, r0, #20
 800d622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d626:	9301      	str	r3, [sp, #4]
 800d628:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d62c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d630:	3301      	adds	r3, #1
 800d632:	429a      	cmp	r2, r3
 800d634:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d638:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d63c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d640:	d331      	bcc.n	800d6a6 <quorem+0x9e>
 800d642:	f04f 0e00 	mov.w	lr, #0
 800d646:	4640      	mov	r0, r8
 800d648:	46ac      	mov	ip, r5
 800d64a:	46f2      	mov	sl, lr
 800d64c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d650:	b293      	uxth	r3, r2
 800d652:	fb06 e303 	mla	r3, r6, r3, lr
 800d656:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	ebaa 0303 	sub.w	r3, sl, r3
 800d660:	f8dc a000 	ldr.w	sl, [ip]
 800d664:	0c12      	lsrs	r2, r2, #16
 800d666:	fa13 f38a 	uxtah	r3, r3, sl
 800d66a:	fb06 e202 	mla	r2, r6, r2, lr
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	9b00      	ldr	r3, [sp, #0]
 800d672:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d676:	b292      	uxth	r2, r2
 800d678:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d67c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d680:	f8bd 3000 	ldrh.w	r3, [sp]
 800d684:	4581      	cmp	r9, r0
 800d686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d68a:	f84c 3b04 	str.w	r3, [ip], #4
 800d68e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d692:	d2db      	bcs.n	800d64c <quorem+0x44>
 800d694:	f855 300b 	ldr.w	r3, [r5, fp]
 800d698:	b92b      	cbnz	r3, 800d6a6 <quorem+0x9e>
 800d69a:	9b01      	ldr	r3, [sp, #4]
 800d69c:	3b04      	subs	r3, #4
 800d69e:	429d      	cmp	r5, r3
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	d32e      	bcc.n	800d702 <quorem+0xfa>
 800d6a4:	613c      	str	r4, [r7, #16]
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	f001 f8c8 	bl	800e83c <__mcmp>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	db24      	blt.n	800d6fa <quorem+0xf2>
 800d6b0:	3601      	adds	r6, #1
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f04f 0c00 	mov.w	ip, #0
 800d6b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6bc:	f8d0 e000 	ldr.w	lr, [r0]
 800d6c0:	b293      	uxth	r3, r2
 800d6c2:	ebac 0303 	sub.w	r3, ip, r3
 800d6c6:	0c12      	lsrs	r2, r2, #16
 800d6c8:	fa13 f38e 	uxtah	r3, r3, lr
 800d6cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6da:	45c1      	cmp	r9, r8
 800d6dc:	f840 3b04 	str.w	r3, [r0], #4
 800d6e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6e4:	d2e8      	bcs.n	800d6b8 <quorem+0xb0>
 800d6e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6ee:	b922      	cbnz	r2, 800d6fa <quorem+0xf2>
 800d6f0:	3b04      	subs	r3, #4
 800d6f2:	429d      	cmp	r5, r3
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	d30a      	bcc.n	800d70e <quorem+0x106>
 800d6f8:	613c      	str	r4, [r7, #16]
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	b003      	add	sp, #12
 800d6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d702:	6812      	ldr	r2, [r2, #0]
 800d704:	3b04      	subs	r3, #4
 800d706:	2a00      	cmp	r2, #0
 800d708:	d1cc      	bne.n	800d6a4 <quorem+0x9c>
 800d70a:	3c01      	subs	r4, #1
 800d70c:	e7c7      	b.n	800d69e <quorem+0x96>
 800d70e:	6812      	ldr	r2, [r2, #0]
 800d710:	3b04      	subs	r3, #4
 800d712:	2a00      	cmp	r2, #0
 800d714:	d1f0      	bne.n	800d6f8 <quorem+0xf0>
 800d716:	3c01      	subs	r4, #1
 800d718:	e7eb      	b.n	800d6f2 <quorem+0xea>
 800d71a:	2000      	movs	r0, #0
 800d71c:	e7ee      	b.n	800d6fc <quorem+0xf4>
	...

0800d720 <_dtoa_r>:
 800d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	ed2d 8b04 	vpush	{d8-d9}
 800d728:	ec57 6b10 	vmov	r6, r7, d0
 800d72c:	b093      	sub	sp, #76	; 0x4c
 800d72e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d730:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d734:	9106      	str	r1, [sp, #24]
 800d736:	ee10 aa10 	vmov	sl, s0
 800d73a:	4604      	mov	r4, r0
 800d73c:	9209      	str	r2, [sp, #36]	; 0x24
 800d73e:	930c      	str	r3, [sp, #48]	; 0x30
 800d740:	46bb      	mov	fp, r7
 800d742:	b975      	cbnz	r5, 800d762 <_dtoa_r+0x42>
 800d744:	2010      	movs	r0, #16
 800d746:	f7ff f969 	bl	800ca1c <malloc>
 800d74a:	4602      	mov	r2, r0
 800d74c:	6260      	str	r0, [r4, #36]	; 0x24
 800d74e:	b920      	cbnz	r0, 800d75a <_dtoa_r+0x3a>
 800d750:	4ba7      	ldr	r3, [pc, #668]	; (800d9f0 <_dtoa_r+0x2d0>)
 800d752:	21ea      	movs	r1, #234	; 0xea
 800d754:	48a7      	ldr	r0, [pc, #668]	; (800d9f4 <_dtoa_r+0x2d4>)
 800d756:	f001 fae5 	bl	800ed24 <__assert_func>
 800d75a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d75e:	6005      	str	r5, [r0, #0]
 800d760:	60c5      	str	r5, [r0, #12]
 800d762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d764:	6819      	ldr	r1, [r3, #0]
 800d766:	b151      	cbz	r1, 800d77e <_dtoa_r+0x5e>
 800d768:	685a      	ldr	r2, [r3, #4]
 800d76a:	604a      	str	r2, [r1, #4]
 800d76c:	2301      	movs	r3, #1
 800d76e:	4093      	lsls	r3, r2
 800d770:	608b      	str	r3, [r1, #8]
 800d772:	4620      	mov	r0, r4
 800d774:	f000 fe20 	bl	800e3b8 <_Bfree>
 800d778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d77a:	2200      	movs	r2, #0
 800d77c:	601a      	str	r2, [r3, #0]
 800d77e:	1e3b      	subs	r3, r7, #0
 800d780:	bfaa      	itet	ge
 800d782:	2300      	movge	r3, #0
 800d784:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d788:	f8c8 3000 	strge.w	r3, [r8]
 800d78c:	4b9a      	ldr	r3, [pc, #616]	; (800d9f8 <_dtoa_r+0x2d8>)
 800d78e:	bfbc      	itt	lt
 800d790:	2201      	movlt	r2, #1
 800d792:	f8c8 2000 	strlt.w	r2, [r8]
 800d796:	ea33 030b 	bics.w	r3, r3, fp
 800d79a:	d11b      	bne.n	800d7d4 <_dtoa_r+0xb4>
 800d79c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d79e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d7a2:	6013      	str	r3, [r2, #0]
 800d7a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7a8:	4333      	orrs	r3, r6
 800d7aa:	f000 8592 	beq.w	800e2d2 <_dtoa_r+0xbb2>
 800d7ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7b0:	b963      	cbnz	r3, 800d7cc <_dtoa_r+0xac>
 800d7b2:	4b92      	ldr	r3, [pc, #584]	; (800d9fc <_dtoa_r+0x2dc>)
 800d7b4:	e022      	b.n	800d7fc <_dtoa_r+0xdc>
 800d7b6:	4b92      	ldr	r3, [pc, #584]	; (800da00 <_dtoa_r+0x2e0>)
 800d7b8:	9301      	str	r3, [sp, #4]
 800d7ba:	3308      	adds	r3, #8
 800d7bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	9801      	ldr	r0, [sp, #4]
 800d7c2:	b013      	add	sp, #76	; 0x4c
 800d7c4:	ecbd 8b04 	vpop	{d8-d9}
 800d7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7cc:	4b8b      	ldr	r3, [pc, #556]	; (800d9fc <_dtoa_r+0x2dc>)
 800d7ce:	9301      	str	r3, [sp, #4]
 800d7d0:	3303      	adds	r3, #3
 800d7d2:	e7f3      	b.n	800d7bc <_dtoa_r+0x9c>
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	4650      	mov	r0, sl
 800d7da:	4659      	mov	r1, fp
 800d7dc:	f7f3 f97c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7e0:	ec4b ab19 	vmov	d9, sl, fp
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	b158      	cbz	r0, 800d800 <_dtoa_r+0xe0>
 800d7e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	6013      	str	r3, [r2, #0]
 800d7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f000 856b 	beq.w	800e2cc <_dtoa_r+0xbac>
 800d7f6:	4883      	ldr	r0, [pc, #524]	; (800da04 <_dtoa_r+0x2e4>)
 800d7f8:	6018      	str	r0, [r3, #0]
 800d7fa:	1e43      	subs	r3, r0, #1
 800d7fc:	9301      	str	r3, [sp, #4]
 800d7fe:	e7df      	b.n	800d7c0 <_dtoa_r+0xa0>
 800d800:	ec4b ab10 	vmov	d0, sl, fp
 800d804:	aa10      	add	r2, sp, #64	; 0x40
 800d806:	a911      	add	r1, sp, #68	; 0x44
 800d808:	4620      	mov	r0, r4
 800d80a:	f001 f8bd 	bl	800e988 <__d2b>
 800d80e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d812:	ee08 0a10 	vmov	s16, r0
 800d816:	2d00      	cmp	r5, #0
 800d818:	f000 8084 	beq.w	800d924 <_dtoa_r+0x204>
 800d81c:	ee19 3a90 	vmov	r3, s19
 800d820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d824:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d828:	4656      	mov	r6, sl
 800d82a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d82e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d832:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d836:	4b74      	ldr	r3, [pc, #464]	; (800da08 <_dtoa_r+0x2e8>)
 800d838:	2200      	movs	r2, #0
 800d83a:	4630      	mov	r0, r6
 800d83c:	4639      	mov	r1, r7
 800d83e:	f7f2 fd2b 	bl	8000298 <__aeabi_dsub>
 800d842:	a365      	add	r3, pc, #404	; (adr r3, 800d9d8 <_dtoa_r+0x2b8>)
 800d844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d848:	f7f2 fede 	bl	8000608 <__aeabi_dmul>
 800d84c:	a364      	add	r3, pc, #400	; (adr r3, 800d9e0 <_dtoa_r+0x2c0>)
 800d84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d852:	f7f2 fd23 	bl	800029c <__adddf3>
 800d856:	4606      	mov	r6, r0
 800d858:	4628      	mov	r0, r5
 800d85a:	460f      	mov	r7, r1
 800d85c:	f7f2 fe6a 	bl	8000534 <__aeabi_i2d>
 800d860:	a361      	add	r3, pc, #388	; (adr r3, 800d9e8 <_dtoa_r+0x2c8>)
 800d862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d866:	f7f2 fecf 	bl	8000608 <__aeabi_dmul>
 800d86a:	4602      	mov	r2, r0
 800d86c:	460b      	mov	r3, r1
 800d86e:	4630      	mov	r0, r6
 800d870:	4639      	mov	r1, r7
 800d872:	f7f2 fd13 	bl	800029c <__adddf3>
 800d876:	4606      	mov	r6, r0
 800d878:	460f      	mov	r7, r1
 800d87a:	f7f3 f975 	bl	8000b68 <__aeabi_d2iz>
 800d87e:	2200      	movs	r2, #0
 800d880:	9000      	str	r0, [sp, #0]
 800d882:	2300      	movs	r3, #0
 800d884:	4630      	mov	r0, r6
 800d886:	4639      	mov	r1, r7
 800d888:	f7f3 f930 	bl	8000aec <__aeabi_dcmplt>
 800d88c:	b150      	cbz	r0, 800d8a4 <_dtoa_r+0x184>
 800d88e:	9800      	ldr	r0, [sp, #0]
 800d890:	f7f2 fe50 	bl	8000534 <__aeabi_i2d>
 800d894:	4632      	mov	r2, r6
 800d896:	463b      	mov	r3, r7
 800d898:	f7f3 f91e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d89c:	b910      	cbnz	r0, 800d8a4 <_dtoa_r+0x184>
 800d89e:	9b00      	ldr	r3, [sp, #0]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	9b00      	ldr	r3, [sp, #0]
 800d8a6:	2b16      	cmp	r3, #22
 800d8a8:	d85a      	bhi.n	800d960 <_dtoa_r+0x240>
 800d8aa:	9a00      	ldr	r2, [sp, #0]
 800d8ac:	4b57      	ldr	r3, [pc, #348]	; (800da0c <_dtoa_r+0x2ec>)
 800d8ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	ec51 0b19 	vmov	r0, r1, d9
 800d8ba:	f7f3 f917 	bl	8000aec <__aeabi_dcmplt>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d050      	beq.n	800d964 <_dtoa_r+0x244>
 800d8c2:	9b00      	ldr	r3, [sp, #0]
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	9300      	str	r3, [sp, #0]
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8ce:	1b5d      	subs	r5, r3, r5
 800d8d0:	1e6b      	subs	r3, r5, #1
 800d8d2:	9305      	str	r3, [sp, #20]
 800d8d4:	bf45      	ittet	mi
 800d8d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d8da:	9304      	strmi	r3, [sp, #16]
 800d8dc:	2300      	movpl	r3, #0
 800d8de:	2300      	movmi	r3, #0
 800d8e0:	bf4c      	ite	mi
 800d8e2:	9305      	strmi	r3, [sp, #20]
 800d8e4:	9304      	strpl	r3, [sp, #16]
 800d8e6:	9b00      	ldr	r3, [sp, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	db3d      	blt.n	800d968 <_dtoa_r+0x248>
 800d8ec:	9b05      	ldr	r3, [sp, #20]
 800d8ee:	9a00      	ldr	r2, [sp, #0]
 800d8f0:	920a      	str	r2, [sp, #40]	; 0x28
 800d8f2:	4413      	add	r3, r2
 800d8f4:	9305      	str	r3, [sp, #20]
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	9307      	str	r3, [sp, #28]
 800d8fa:	9b06      	ldr	r3, [sp, #24]
 800d8fc:	2b09      	cmp	r3, #9
 800d8fe:	f200 8089 	bhi.w	800da14 <_dtoa_r+0x2f4>
 800d902:	2b05      	cmp	r3, #5
 800d904:	bfc4      	itt	gt
 800d906:	3b04      	subgt	r3, #4
 800d908:	9306      	strgt	r3, [sp, #24]
 800d90a:	9b06      	ldr	r3, [sp, #24]
 800d90c:	f1a3 0302 	sub.w	r3, r3, #2
 800d910:	bfcc      	ite	gt
 800d912:	2500      	movgt	r5, #0
 800d914:	2501      	movle	r5, #1
 800d916:	2b03      	cmp	r3, #3
 800d918:	f200 8087 	bhi.w	800da2a <_dtoa_r+0x30a>
 800d91c:	e8df f003 	tbb	[pc, r3]
 800d920:	59383a2d 	.word	0x59383a2d
 800d924:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d928:	441d      	add	r5, r3
 800d92a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d92e:	2b20      	cmp	r3, #32
 800d930:	bfc1      	itttt	gt
 800d932:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d936:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d93a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d93e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d942:	bfda      	itte	le
 800d944:	f1c3 0320 	rsble	r3, r3, #32
 800d948:	fa06 f003 	lslle.w	r0, r6, r3
 800d94c:	4318      	orrgt	r0, r3
 800d94e:	f7f2 fde1 	bl	8000514 <__aeabi_ui2d>
 800d952:	2301      	movs	r3, #1
 800d954:	4606      	mov	r6, r0
 800d956:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d95a:	3d01      	subs	r5, #1
 800d95c:	930e      	str	r3, [sp, #56]	; 0x38
 800d95e:	e76a      	b.n	800d836 <_dtoa_r+0x116>
 800d960:	2301      	movs	r3, #1
 800d962:	e7b2      	b.n	800d8ca <_dtoa_r+0x1aa>
 800d964:	900b      	str	r0, [sp, #44]	; 0x2c
 800d966:	e7b1      	b.n	800d8cc <_dtoa_r+0x1ac>
 800d968:	9b04      	ldr	r3, [sp, #16]
 800d96a:	9a00      	ldr	r2, [sp, #0]
 800d96c:	1a9b      	subs	r3, r3, r2
 800d96e:	9304      	str	r3, [sp, #16]
 800d970:	4253      	negs	r3, r2
 800d972:	9307      	str	r3, [sp, #28]
 800d974:	2300      	movs	r3, #0
 800d976:	930a      	str	r3, [sp, #40]	; 0x28
 800d978:	e7bf      	b.n	800d8fa <_dtoa_r+0x1da>
 800d97a:	2300      	movs	r3, #0
 800d97c:	9308      	str	r3, [sp, #32]
 800d97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d980:	2b00      	cmp	r3, #0
 800d982:	dc55      	bgt.n	800da30 <_dtoa_r+0x310>
 800d984:	2301      	movs	r3, #1
 800d986:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d98a:	461a      	mov	r2, r3
 800d98c:	9209      	str	r2, [sp, #36]	; 0x24
 800d98e:	e00c      	b.n	800d9aa <_dtoa_r+0x28a>
 800d990:	2301      	movs	r3, #1
 800d992:	e7f3      	b.n	800d97c <_dtoa_r+0x25c>
 800d994:	2300      	movs	r3, #0
 800d996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d998:	9308      	str	r3, [sp, #32]
 800d99a:	9b00      	ldr	r3, [sp, #0]
 800d99c:	4413      	add	r3, r2
 800d99e:	9302      	str	r3, [sp, #8]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	9303      	str	r3, [sp, #12]
 800d9a6:	bfb8      	it	lt
 800d9a8:	2301      	movlt	r3, #1
 800d9aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	6042      	str	r2, [r0, #4]
 800d9b0:	2204      	movs	r2, #4
 800d9b2:	f102 0614 	add.w	r6, r2, #20
 800d9b6:	429e      	cmp	r6, r3
 800d9b8:	6841      	ldr	r1, [r0, #4]
 800d9ba:	d93d      	bls.n	800da38 <_dtoa_r+0x318>
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f000 fcbb 	bl	800e338 <_Balloc>
 800d9c2:	9001      	str	r0, [sp, #4]
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d13b      	bne.n	800da40 <_dtoa_r+0x320>
 800d9c8:	4b11      	ldr	r3, [pc, #68]	; (800da10 <_dtoa_r+0x2f0>)
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d9d0:	e6c0      	b.n	800d754 <_dtoa_r+0x34>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e7df      	b.n	800d996 <_dtoa_r+0x276>
 800d9d6:	bf00      	nop
 800d9d8:	636f4361 	.word	0x636f4361
 800d9dc:	3fd287a7 	.word	0x3fd287a7
 800d9e0:	8b60c8b3 	.word	0x8b60c8b3
 800d9e4:	3fc68a28 	.word	0x3fc68a28
 800d9e8:	509f79fb 	.word	0x509f79fb
 800d9ec:	3fd34413 	.word	0x3fd34413
 800d9f0:	080109f5 	.word	0x080109f5
 800d9f4:	08010a0c 	.word	0x08010a0c
 800d9f8:	7ff00000 	.word	0x7ff00000
 800d9fc:	080109f1 	.word	0x080109f1
 800da00:	080109e8 	.word	0x080109e8
 800da04:	080109c5 	.word	0x080109c5
 800da08:	3ff80000 	.word	0x3ff80000
 800da0c:	08010b00 	.word	0x08010b00
 800da10:	08010a67 	.word	0x08010a67
 800da14:	2501      	movs	r5, #1
 800da16:	2300      	movs	r3, #0
 800da18:	9306      	str	r3, [sp, #24]
 800da1a:	9508      	str	r5, [sp, #32]
 800da1c:	f04f 33ff 	mov.w	r3, #4294967295
 800da20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da24:	2200      	movs	r2, #0
 800da26:	2312      	movs	r3, #18
 800da28:	e7b0      	b.n	800d98c <_dtoa_r+0x26c>
 800da2a:	2301      	movs	r3, #1
 800da2c:	9308      	str	r3, [sp, #32]
 800da2e:	e7f5      	b.n	800da1c <_dtoa_r+0x2fc>
 800da30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da36:	e7b8      	b.n	800d9aa <_dtoa_r+0x28a>
 800da38:	3101      	adds	r1, #1
 800da3a:	6041      	str	r1, [r0, #4]
 800da3c:	0052      	lsls	r2, r2, #1
 800da3e:	e7b8      	b.n	800d9b2 <_dtoa_r+0x292>
 800da40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da42:	9a01      	ldr	r2, [sp, #4]
 800da44:	601a      	str	r2, [r3, #0]
 800da46:	9b03      	ldr	r3, [sp, #12]
 800da48:	2b0e      	cmp	r3, #14
 800da4a:	f200 809d 	bhi.w	800db88 <_dtoa_r+0x468>
 800da4e:	2d00      	cmp	r5, #0
 800da50:	f000 809a 	beq.w	800db88 <_dtoa_r+0x468>
 800da54:	9b00      	ldr	r3, [sp, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	dd32      	ble.n	800dac0 <_dtoa_r+0x3a0>
 800da5a:	4ab7      	ldr	r2, [pc, #732]	; (800dd38 <_dtoa_r+0x618>)
 800da5c:	f003 030f 	and.w	r3, r3, #15
 800da60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da68:	9b00      	ldr	r3, [sp, #0]
 800da6a:	05d8      	lsls	r0, r3, #23
 800da6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800da70:	d516      	bpl.n	800daa0 <_dtoa_r+0x380>
 800da72:	4bb2      	ldr	r3, [pc, #712]	; (800dd3c <_dtoa_r+0x61c>)
 800da74:	ec51 0b19 	vmov	r0, r1, d9
 800da78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da7c:	f7f2 feee 	bl	800085c <__aeabi_ddiv>
 800da80:	f007 070f 	and.w	r7, r7, #15
 800da84:	4682      	mov	sl, r0
 800da86:	468b      	mov	fp, r1
 800da88:	2503      	movs	r5, #3
 800da8a:	4eac      	ldr	r6, [pc, #688]	; (800dd3c <_dtoa_r+0x61c>)
 800da8c:	b957      	cbnz	r7, 800daa4 <_dtoa_r+0x384>
 800da8e:	4642      	mov	r2, r8
 800da90:	464b      	mov	r3, r9
 800da92:	4650      	mov	r0, sl
 800da94:	4659      	mov	r1, fp
 800da96:	f7f2 fee1 	bl	800085c <__aeabi_ddiv>
 800da9a:	4682      	mov	sl, r0
 800da9c:	468b      	mov	fp, r1
 800da9e:	e028      	b.n	800daf2 <_dtoa_r+0x3d2>
 800daa0:	2502      	movs	r5, #2
 800daa2:	e7f2      	b.n	800da8a <_dtoa_r+0x36a>
 800daa4:	07f9      	lsls	r1, r7, #31
 800daa6:	d508      	bpl.n	800daba <_dtoa_r+0x39a>
 800daa8:	4640      	mov	r0, r8
 800daaa:	4649      	mov	r1, r9
 800daac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dab0:	f7f2 fdaa 	bl	8000608 <__aeabi_dmul>
 800dab4:	3501      	adds	r5, #1
 800dab6:	4680      	mov	r8, r0
 800dab8:	4689      	mov	r9, r1
 800daba:	107f      	asrs	r7, r7, #1
 800dabc:	3608      	adds	r6, #8
 800dabe:	e7e5      	b.n	800da8c <_dtoa_r+0x36c>
 800dac0:	f000 809b 	beq.w	800dbfa <_dtoa_r+0x4da>
 800dac4:	9b00      	ldr	r3, [sp, #0]
 800dac6:	4f9d      	ldr	r7, [pc, #628]	; (800dd3c <_dtoa_r+0x61c>)
 800dac8:	425e      	negs	r6, r3
 800daca:	4b9b      	ldr	r3, [pc, #620]	; (800dd38 <_dtoa_r+0x618>)
 800dacc:	f006 020f 	and.w	r2, r6, #15
 800dad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad8:	ec51 0b19 	vmov	r0, r1, d9
 800dadc:	f7f2 fd94 	bl	8000608 <__aeabi_dmul>
 800dae0:	1136      	asrs	r6, r6, #4
 800dae2:	4682      	mov	sl, r0
 800dae4:	468b      	mov	fp, r1
 800dae6:	2300      	movs	r3, #0
 800dae8:	2502      	movs	r5, #2
 800daea:	2e00      	cmp	r6, #0
 800daec:	d17a      	bne.n	800dbe4 <_dtoa_r+0x4c4>
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1d3      	bne.n	800da9a <_dtoa_r+0x37a>
 800daf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f000 8082 	beq.w	800dbfe <_dtoa_r+0x4de>
 800dafa:	4b91      	ldr	r3, [pc, #580]	; (800dd40 <_dtoa_r+0x620>)
 800dafc:	2200      	movs	r2, #0
 800dafe:	4650      	mov	r0, sl
 800db00:	4659      	mov	r1, fp
 800db02:	f7f2 fff3 	bl	8000aec <__aeabi_dcmplt>
 800db06:	2800      	cmp	r0, #0
 800db08:	d079      	beq.n	800dbfe <_dtoa_r+0x4de>
 800db0a:	9b03      	ldr	r3, [sp, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d076      	beq.n	800dbfe <_dtoa_r+0x4de>
 800db10:	9b02      	ldr	r3, [sp, #8]
 800db12:	2b00      	cmp	r3, #0
 800db14:	dd36      	ble.n	800db84 <_dtoa_r+0x464>
 800db16:	9b00      	ldr	r3, [sp, #0]
 800db18:	4650      	mov	r0, sl
 800db1a:	4659      	mov	r1, fp
 800db1c:	1e5f      	subs	r7, r3, #1
 800db1e:	2200      	movs	r2, #0
 800db20:	4b88      	ldr	r3, [pc, #544]	; (800dd44 <_dtoa_r+0x624>)
 800db22:	f7f2 fd71 	bl	8000608 <__aeabi_dmul>
 800db26:	9e02      	ldr	r6, [sp, #8]
 800db28:	4682      	mov	sl, r0
 800db2a:	468b      	mov	fp, r1
 800db2c:	3501      	adds	r5, #1
 800db2e:	4628      	mov	r0, r5
 800db30:	f7f2 fd00 	bl	8000534 <__aeabi_i2d>
 800db34:	4652      	mov	r2, sl
 800db36:	465b      	mov	r3, fp
 800db38:	f7f2 fd66 	bl	8000608 <__aeabi_dmul>
 800db3c:	4b82      	ldr	r3, [pc, #520]	; (800dd48 <_dtoa_r+0x628>)
 800db3e:	2200      	movs	r2, #0
 800db40:	f7f2 fbac 	bl	800029c <__adddf3>
 800db44:	46d0      	mov	r8, sl
 800db46:	46d9      	mov	r9, fp
 800db48:	4682      	mov	sl, r0
 800db4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800db4e:	2e00      	cmp	r6, #0
 800db50:	d158      	bne.n	800dc04 <_dtoa_r+0x4e4>
 800db52:	4b7e      	ldr	r3, [pc, #504]	; (800dd4c <_dtoa_r+0x62c>)
 800db54:	2200      	movs	r2, #0
 800db56:	4640      	mov	r0, r8
 800db58:	4649      	mov	r1, r9
 800db5a:	f7f2 fb9d 	bl	8000298 <__aeabi_dsub>
 800db5e:	4652      	mov	r2, sl
 800db60:	465b      	mov	r3, fp
 800db62:	4680      	mov	r8, r0
 800db64:	4689      	mov	r9, r1
 800db66:	f7f2 ffdf 	bl	8000b28 <__aeabi_dcmpgt>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	f040 8295 	bne.w	800e09a <_dtoa_r+0x97a>
 800db70:	4652      	mov	r2, sl
 800db72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800db76:	4640      	mov	r0, r8
 800db78:	4649      	mov	r1, r9
 800db7a:	f7f2 ffb7 	bl	8000aec <__aeabi_dcmplt>
 800db7e:	2800      	cmp	r0, #0
 800db80:	f040 8289 	bne.w	800e096 <_dtoa_r+0x976>
 800db84:	ec5b ab19 	vmov	sl, fp, d9
 800db88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f2c0 8148 	blt.w	800de20 <_dtoa_r+0x700>
 800db90:	9a00      	ldr	r2, [sp, #0]
 800db92:	2a0e      	cmp	r2, #14
 800db94:	f300 8144 	bgt.w	800de20 <_dtoa_r+0x700>
 800db98:	4b67      	ldr	r3, [pc, #412]	; (800dd38 <_dtoa_r+0x618>)
 800db9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f280 80d5 	bge.w	800dd54 <_dtoa_r+0x634>
 800dbaa:	9b03      	ldr	r3, [sp, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f300 80d1 	bgt.w	800dd54 <_dtoa_r+0x634>
 800dbb2:	f040 826f 	bne.w	800e094 <_dtoa_r+0x974>
 800dbb6:	4b65      	ldr	r3, [pc, #404]	; (800dd4c <_dtoa_r+0x62c>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	4640      	mov	r0, r8
 800dbbc:	4649      	mov	r1, r9
 800dbbe:	f7f2 fd23 	bl	8000608 <__aeabi_dmul>
 800dbc2:	4652      	mov	r2, sl
 800dbc4:	465b      	mov	r3, fp
 800dbc6:	f7f2 ffa5 	bl	8000b14 <__aeabi_dcmpge>
 800dbca:	9e03      	ldr	r6, [sp, #12]
 800dbcc:	4637      	mov	r7, r6
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	f040 8245 	bne.w	800e05e <_dtoa_r+0x93e>
 800dbd4:	9d01      	ldr	r5, [sp, #4]
 800dbd6:	2331      	movs	r3, #49	; 0x31
 800dbd8:	f805 3b01 	strb.w	r3, [r5], #1
 800dbdc:	9b00      	ldr	r3, [sp, #0]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	e240      	b.n	800e066 <_dtoa_r+0x946>
 800dbe4:	07f2      	lsls	r2, r6, #31
 800dbe6:	d505      	bpl.n	800dbf4 <_dtoa_r+0x4d4>
 800dbe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbec:	f7f2 fd0c 	bl	8000608 <__aeabi_dmul>
 800dbf0:	3501      	adds	r5, #1
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	1076      	asrs	r6, r6, #1
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	e777      	b.n	800daea <_dtoa_r+0x3ca>
 800dbfa:	2502      	movs	r5, #2
 800dbfc:	e779      	b.n	800daf2 <_dtoa_r+0x3d2>
 800dbfe:	9f00      	ldr	r7, [sp, #0]
 800dc00:	9e03      	ldr	r6, [sp, #12]
 800dc02:	e794      	b.n	800db2e <_dtoa_r+0x40e>
 800dc04:	9901      	ldr	r1, [sp, #4]
 800dc06:	4b4c      	ldr	r3, [pc, #304]	; (800dd38 <_dtoa_r+0x618>)
 800dc08:	4431      	add	r1, r6
 800dc0a:	910d      	str	r1, [sp, #52]	; 0x34
 800dc0c:	9908      	ldr	r1, [sp, #32]
 800dc0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc16:	2900      	cmp	r1, #0
 800dc18:	d043      	beq.n	800dca2 <_dtoa_r+0x582>
 800dc1a:	494d      	ldr	r1, [pc, #308]	; (800dd50 <_dtoa_r+0x630>)
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	f7f2 fe1d 	bl	800085c <__aeabi_ddiv>
 800dc22:	4652      	mov	r2, sl
 800dc24:	465b      	mov	r3, fp
 800dc26:	f7f2 fb37 	bl	8000298 <__aeabi_dsub>
 800dc2a:	9d01      	ldr	r5, [sp, #4]
 800dc2c:	4682      	mov	sl, r0
 800dc2e:	468b      	mov	fp, r1
 800dc30:	4649      	mov	r1, r9
 800dc32:	4640      	mov	r0, r8
 800dc34:	f7f2 ff98 	bl	8000b68 <__aeabi_d2iz>
 800dc38:	4606      	mov	r6, r0
 800dc3a:	f7f2 fc7b 	bl	8000534 <__aeabi_i2d>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	460b      	mov	r3, r1
 800dc42:	4640      	mov	r0, r8
 800dc44:	4649      	mov	r1, r9
 800dc46:	f7f2 fb27 	bl	8000298 <__aeabi_dsub>
 800dc4a:	3630      	adds	r6, #48	; 0x30
 800dc4c:	f805 6b01 	strb.w	r6, [r5], #1
 800dc50:	4652      	mov	r2, sl
 800dc52:	465b      	mov	r3, fp
 800dc54:	4680      	mov	r8, r0
 800dc56:	4689      	mov	r9, r1
 800dc58:	f7f2 ff48 	bl	8000aec <__aeabi_dcmplt>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d163      	bne.n	800dd28 <_dtoa_r+0x608>
 800dc60:	4642      	mov	r2, r8
 800dc62:	464b      	mov	r3, r9
 800dc64:	4936      	ldr	r1, [pc, #216]	; (800dd40 <_dtoa_r+0x620>)
 800dc66:	2000      	movs	r0, #0
 800dc68:	f7f2 fb16 	bl	8000298 <__aeabi_dsub>
 800dc6c:	4652      	mov	r2, sl
 800dc6e:	465b      	mov	r3, fp
 800dc70:	f7f2 ff3c 	bl	8000aec <__aeabi_dcmplt>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	f040 80b5 	bne.w	800dde4 <_dtoa_r+0x6c4>
 800dc7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc7c:	429d      	cmp	r5, r3
 800dc7e:	d081      	beq.n	800db84 <_dtoa_r+0x464>
 800dc80:	4b30      	ldr	r3, [pc, #192]	; (800dd44 <_dtoa_r+0x624>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	4650      	mov	r0, sl
 800dc86:	4659      	mov	r1, fp
 800dc88:	f7f2 fcbe 	bl	8000608 <__aeabi_dmul>
 800dc8c:	4b2d      	ldr	r3, [pc, #180]	; (800dd44 <_dtoa_r+0x624>)
 800dc8e:	4682      	mov	sl, r0
 800dc90:	468b      	mov	fp, r1
 800dc92:	4640      	mov	r0, r8
 800dc94:	4649      	mov	r1, r9
 800dc96:	2200      	movs	r2, #0
 800dc98:	f7f2 fcb6 	bl	8000608 <__aeabi_dmul>
 800dc9c:	4680      	mov	r8, r0
 800dc9e:	4689      	mov	r9, r1
 800dca0:	e7c6      	b.n	800dc30 <_dtoa_r+0x510>
 800dca2:	4650      	mov	r0, sl
 800dca4:	4659      	mov	r1, fp
 800dca6:	f7f2 fcaf 	bl	8000608 <__aeabi_dmul>
 800dcaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcac:	9d01      	ldr	r5, [sp, #4]
 800dcae:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcb0:	4682      	mov	sl, r0
 800dcb2:	468b      	mov	fp, r1
 800dcb4:	4649      	mov	r1, r9
 800dcb6:	4640      	mov	r0, r8
 800dcb8:	f7f2 ff56 	bl	8000b68 <__aeabi_d2iz>
 800dcbc:	4606      	mov	r6, r0
 800dcbe:	f7f2 fc39 	bl	8000534 <__aeabi_i2d>
 800dcc2:	3630      	adds	r6, #48	; 0x30
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	4640      	mov	r0, r8
 800dcca:	4649      	mov	r1, r9
 800dccc:	f7f2 fae4 	bl	8000298 <__aeabi_dsub>
 800dcd0:	f805 6b01 	strb.w	r6, [r5], #1
 800dcd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcd6:	429d      	cmp	r5, r3
 800dcd8:	4680      	mov	r8, r0
 800dcda:	4689      	mov	r9, r1
 800dcdc:	f04f 0200 	mov.w	r2, #0
 800dce0:	d124      	bne.n	800dd2c <_dtoa_r+0x60c>
 800dce2:	4b1b      	ldr	r3, [pc, #108]	; (800dd50 <_dtoa_r+0x630>)
 800dce4:	4650      	mov	r0, sl
 800dce6:	4659      	mov	r1, fp
 800dce8:	f7f2 fad8 	bl	800029c <__adddf3>
 800dcec:	4602      	mov	r2, r0
 800dcee:	460b      	mov	r3, r1
 800dcf0:	4640      	mov	r0, r8
 800dcf2:	4649      	mov	r1, r9
 800dcf4:	f7f2 ff18 	bl	8000b28 <__aeabi_dcmpgt>
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	d173      	bne.n	800dde4 <_dtoa_r+0x6c4>
 800dcfc:	4652      	mov	r2, sl
 800dcfe:	465b      	mov	r3, fp
 800dd00:	4913      	ldr	r1, [pc, #76]	; (800dd50 <_dtoa_r+0x630>)
 800dd02:	2000      	movs	r0, #0
 800dd04:	f7f2 fac8 	bl	8000298 <__aeabi_dsub>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4640      	mov	r0, r8
 800dd0e:	4649      	mov	r1, r9
 800dd10:	f7f2 feec 	bl	8000aec <__aeabi_dcmplt>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	f43f af35 	beq.w	800db84 <_dtoa_r+0x464>
 800dd1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dd1c:	1e6b      	subs	r3, r5, #1
 800dd1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd24:	2b30      	cmp	r3, #48	; 0x30
 800dd26:	d0f8      	beq.n	800dd1a <_dtoa_r+0x5fa>
 800dd28:	9700      	str	r7, [sp, #0]
 800dd2a:	e049      	b.n	800ddc0 <_dtoa_r+0x6a0>
 800dd2c:	4b05      	ldr	r3, [pc, #20]	; (800dd44 <_dtoa_r+0x624>)
 800dd2e:	f7f2 fc6b 	bl	8000608 <__aeabi_dmul>
 800dd32:	4680      	mov	r8, r0
 800dd34:	4689      	mov	r9, r1
 800dd36:	e7bd      	b.n	800dcb4 <_dtoa_r+0x594>
 800dd38:	08010b00 	.word	0x08010b00
 800dd3c:	08010ad8 	.word	0x08010ad8
 800dd40:	3ff00000 	.word	0x3ff00000
 800dd44:	40240000 	.word	0x40240000
 800dd48:	401c0000 	.word	0x401c0000
 800dd4c:	40140000 	.word	0x40140000
 800dd50:	3fe00000 	.word	0x3fe00000
 800dd54:	9d01      	ldr	r5, [sp, #4]
 800dd56:	4656      	mov	r6, sl
 800dd58:	465f      	mov	r7, fp
 800dd5a:	4642      	mov	r2, r8
 800dd5c:	464b      	mov	r3, r9
 800dd5e:	4630      	mov	r0, r6
 800dd60:	4639      	mov	r1, r7
 800dd62:	f7f2 fd7b 	bl	800085c <__aeabi_ddiv>
 800dd66:	f7f2 feff 	bl	8000b68 <__aeabi_d2iz>
 800dd6a:	4682      	mov	sl, r0
 800dd6c:	f7f2 fbe2 	bl	8000534 <__aeabi_i2d>
 800dd70:	4642      	mov	r2, r8
 800dd72:	464b      	mov	r3, r9
 800dd74:	f7f2 fc48 	bl	8000608 <__aeabi_dmul>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	4639      	mov	r1, r7
 800dd80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dd84:	f7f2 fa88 	bl	8000298 <__aeabi_dsub>
 800dd88:	f805 6b01 	strb.w	r6, [r5], #1
 800dd8c:	9e01      	ldr	r6, [sp, #4]
 800dd8e:	9f03      	ldr	r7, [sp, #12]
 800dd90:	1bae      	subs	r6, r5, r6
 800dd92:	42b7      	cmp	r7, r6
 800dd94:	4602      	mov	r2, r0
 800dd96:	460b      	mov	r3, r1
 800dd98:	d135      	bne.n	800de06 <_dtoa_r+0x6e6>
 800dd9a:	f7f2 fa7f 	bl	800029c <__adddf3>
 800dd9e:	4642      	mov	r2, r8
 800dda0:	464b      	mov	r3, r9
 800dda2:	4606      	mov	r6, r0
 800dda4:	460f      	mov	r7, r1
 800dda6:	f7f2 febf 	bl	8000b28 <__aeabi_dcmpgt>
 800ddaa:	b9d0      	cbnz	r0, 800dde2 <_dtoa_r+0x6c2>
 800ddac:	4642      	mov	r2, r8
 800ddae:	464b      	mov	r3, r9
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	4639      	mov	r1, r7
 800ddb4:	f7f2 fe90 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddb8:	b110      	cbz	r0, 800ddc0 <_dtoa_r+0x6a0>
 800ddba:	f01a 0f01 	tst.w	sl, #1
 800ddbe:	d110      	bne.n	800dde2 <_dtoa_r+0x6c2>
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	ee18 1a10 	vmov	r1, s16
 800ddc6:	f000 faf7 	bl	800e3b8 <_Bfree>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	9800      	ldr	r0, [sp, #0]
 800ddce:	702b      	strb	r3, [r5, #0]
 800ddd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	6018      	str	r0, [r3, #0]
 800ddd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	f43f acf1 	beq.w	800d7c0 <_dtoa_r+0xa0>
 800ddde:	601d      	str	r5, [r3, #0]
 800dde0:	e4ee      	b.n	800d7c0 <_dtoa_r+0xa0>
 800dde2:	9f00      	ldr	r7, [sp, #0]
 800dde4:	462b      	mov	r3, r5
 800dde6:	461d      	mov	r5, r3
 800dde8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddec:	2a39      	cmp	r2, #57	; 0x39
 800ddee:	d106      	bne.n	800ddfe <_dtoa_r+0x6de>
 800ddf0:	9a01      	ldr	r2, [sp, #4]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d1f7      	bne.n	800dde6 <_dtoa_r+0x6c6>
 800ddf6:	9901      	ldr	r1, [sp, #4]
 800ddf8:	2230      	movs	r2, #48	; 0x30
 800ddfa:	3701      	adds	r7, #1
 800ddfc:	700a      	strb	r2, [r1, #0]
 800ddfe:	781a      	ldrb	r2, [r3, #0]
 800de00:	3201      	adds	r2, #1
 800de02:	701a      	strb	r2, [r3, #0]
 800de04:	e790      	b.n	800dd28 <_dtoa_r+0x608>
 800de06:	4ba6      	ldr	r3, [pc, #664]	; (800e0a0 <_dtoa_r+0x980>)
 800de08:	2200      	movs	r2, #0
 800de0a:	f7f2 fbfd 	bl	8000608 <__aeabi_dmul>
 800de0e:	2200      	movs	r2, #0
 800de10:	2300      	movs	r3, #0
 800de12:	4606      	mov	r6, r0
 800de14:	460f      	mov	r7, r1
 800de16:	f7f2 fe5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d09d      	beq.n	800dd5a <_dtoa_r+0x63a>
 800de1e:	e7cf      	b.n	800ddc0 <_dtoa_r+0x6a0>
 800de20:	9a08      	ldr	r2, [sp, #32]
 800de22:	2a00      	cmp	r2, #0
 800de24:	f000 80d7 	beq.w	800dfd6 <_dtoa_r+0x8b6>
 800de28:	9a06      	ldr	r2, [sp, #24]
 800de2a:	2a01      	cmp	r2, #1
 800de2c:	f300 80ba 	bgt.w	800dfa4 <_dtoa_r+0x884>
 800de30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de32:	2a00      	cmp	r2, #0
 800de34:	f000 80b2 	beq.w	800df9c <_dtoa_r+0x87c>
 800de38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de3c:	9e07      	ldr	r6, [sp, #28]
 800de3e:	9d04      	ldr	r5, [sp, #16]
 800de40:	9a04      	ldr	r2, [sp, #16]
 800de42:	441a      	add	r2, r3
 800de44:	9204      	str	r2, [sp, #16]
 800de46:	9a05      	ldr	r2, [sp, #20]
 800de48:	2101      	movs	r1, #1
 800de4a:	441a      	add	r2, r3
 800de4c:	4620      	mov	r0, r4
 800de4e:	9205      	str	r2, [sp, #20]
 800de50:	f000 fb6a 	bl	800e528 <__i2b>
 800de54:	4607      	mov	r7, r0
 800de56:	2d00      	cmp	r5, #0
 800de58:	dd0c      	ble.n	800de74 <_dtoa_r+0x754>
 800de5a:	9b05      	ldr	r3, [sp, #20]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	dd09      	ble.n	800de74 <_dtoa_r+0x754>
 800de60:	42ab      	cmp	r3, r5
 800de62:	9a04      	ldr	r2, [sp, #16]
 800de64:	bfa8      	it	ge
 800de66:	462b      	movge	r3, r5
 800de68:	1ad2      	subs	r2, r2, r3
 800de6a:	9204      	str	r2, [sp, #16]
 800de6c:	9a05      	ldr	r2, [sp, #20]
 800de6e:	1aed      	subs	r5, r5, r3
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	9305      	str	r3, [sp, #20]
 800de74:	9b07      	ldr	r3, [sp, #28]
 800de76:	b31b      	cbz	r3, 800dec0 <_dtoa_r+0x7a0>
 800de78:	9b08      	ldr	r3, [sp, #32]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	f000 80af 	beq.w	800dfde <_dtoa_r+0x8be>
 800de80:	2e00      	cmp	r6, #0
 800de82:	dd13      	ble.n	800deac <_dtoa_r+0x78c>
 800de84:	4639      	mov	r1, r7
 800de86:	4632      	mov	r2, r6
 800de88:	4620      	mov	r0, r4
 800de8a:	f000 fc0d 	bl	800e6a8 <__pow5mult>
 800de8e:	ee18 2a10 	vmov	r2, s16
 800de92:	4601      	mov	r1, r0
 800de94:	4607      	mov	r7, r0
 800de96:	4620      	mov	r0, r4
 800de98:	f000 fb5c 	bl	800e554 <__multiply>
 800de9c:	ee18 1a10 	vmov	r1, s16
 800dea0:	4680      	mov	r8, r0
 800dea2:	4620      	mov	r0, r4
 800dea4:	f000 fa88 	bl	800e3b8 <_Bfree>
 800dea8:	ee08 8a10 	vmov	s16, r8
 800deac:	9b07      	ldr	r3, [sp, #28]
 800deae:	1b9a      	subs	r2, r3, r6
 800deb0:	d006      	beq.n	800dec0 <_dtoa_r+0x7a0>
 800deb2:	ee18 1a10 	vmov	r1, s16
 800deb6:	4620      	mov	r0, r4
 800deb8:	f000 fbf6 	bl	800e6a8 <__pow5mult>
 800debc:	ee08 0a10 	vmov	s16, r0
 800dec0:	2101      	movs	r1, #1
 800dec2:	4620      	mov	r0, r4
 800dec4:	f000 fb30 	bl	800e528 <__i2b>
 800dec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deca:	2b00      	cmp	r3, #0
 800decc:	4606      	mov	r6, r0
 800dece:	f340 8088 	ble.w	800dfe2 <_dtoa_r+0x8c2>
 800ded2:	461a      	mov	r2, r3
 800ded4:	4601      	mov	r1, r0
 800ded6:	4620      	mov	r0, r4
 800ded8:	f000 fbe6 	bl	800e6a8 <__pow5mult>
 800dedc:	9b06      	ldr	r3, [sp, #24]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	4606      	mov	r6, r0
 800dee2:	f340 8081 	ble.w	800dfe8 <_dtoa_r+0x8c8>
 800dee6:	f04f 0800 	mov.w	r8, #0
 800deea:	6933      	ldr	r3, [r6, #16]
 800deec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800def0:	6918      	ldr	r0, [r3, #16]
 800def2:	f000 fac9 	bl	800e488 <__hi0bits>
 800def6:	f1c0 0020 	rsb	r0, r0, #32
 800defa:	9b05      	ldr	r3, [sp, #20]
 800defc:	4418      	add	r0, r3
 800defe:	f010 001f 	ands.w	r0, r0, #31
 800df02:	f000 8092 	beq.w	800e02a <_dtoa_r+0x90a>
 800df06:	f1c0 0320 	rsb	r3, r0, #32
 800df0a:	2b04      	cmp	r3, #4
 800df0c:	f340 808a 	ble.w	800e024 <_dtoa_r+0x904>
 800df10:	f1c0 001c 	rsb	r0, r0, #28
 800df14:	9b04      	ldr	r3, [sp, #16]
 800df16:	4403      	add	r3, r0
 800df18:	9304      	str	r3, [sp, #16]
 800df1a:	9b05      	ldr	r3, [sp, #20]
 800df1c:	4403      	add	r3, r0
 800df1e:	4405      	add	r5, r0
 800df20:	9305      	str	r3, [sp, #20]
 800df22:	9b04      	ldr	r3, [sp, #16]
 800df24:	2b00      	cmp	r3, #0
 800df26:	dd07      	ble.n	800df38 <_dtoa_r+0x818>
 800df28:	ee18 1a10 	vmov	r1, s16
 800df2c:	461a      	mov	r2, r3
 800df2e:	4620      	mov	r0, r4
 800df30:	f000 fc14 	bl	800e75c <__lshift>
 800df34:	ee08 0a10 	vmov	s16, r0
 800df38:	9b05      	ldr	r3, [sp, #20]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	dd05      	ble.n	800df4a <_dtoa_r+0x82a>
 800df3e:	4631      	mov	r1, r6
 800df40:	461a      	mov	r2, r3
 800df42:	4620      	mov	r0, r4
 800df44:	f000 fc0a 	bl	800e75c <__lshift>
 800df48:	4606      	mov	r6, r0
 800df4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d06e      	beq.n	800e02e <_dtoa_r+0x90e>
 800df50:	ee18 0a10 	vmov	r0, s16
 800df54:	4631      	mov	r1, r6
 800df56:	f000 fc71 	bl	800e83c <__mcmp>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	da67      	bge.n	800e02e <_dtoa_r+0x90e>
 800df5e:	9b00      	ldr	r3, [sp, #0]
 800df60:	3b01      	subs	r3, #1
 800df62:	ee18 1a10 	vmov	r1, s16
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	220a      	movs	r2, #10
 800df6a:	2300      	movs	r3, #0
 800df6c:	4620      	mov	r0, r4
 800df6e:	f000 fa45 	bl	800e3fc <__multadd>
 800df72:	9b08      	ldr	r3, [sp, #32]
 800df74:	ee08 0a10 	vmov	s16, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f000 81b1 	beq.w	800e2e0 <_dtoa_r+0xbc0>
 800df7e:	2300      	movs	r3, #0
 800df80:	4639      	mov	r1, r7
 800df82:	220a      	movs	r2, #10
 800df84:	4620      	mov	r0, r4
 800df86:	f000 fa39 	bl	800e3fc <__multadd>
 800df8a:	9b02      	ldr	r3, [sp, #8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	4607      	mov	r7, r0
 800df90:	f300 808e 	bgt.w	800e0b0 <_dtoa_r+0x990>
 800df94:	9b06      	ldr	r3, [sp, #24]
 800df96:	2b02      	cmp	r3, #2
 800df98:	dc51      	bgt.n	800e03e <_dtoa_r+0x91e>
 800df9a:	e089      	b.n	800e0b0 <_dtoa_r+0x990>
 800df9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dfa2:	e74b      	b.n	800de3c <_dtoa_r+0x71c>
 800dfa4:	9b03      	ldr	r3, [sp, #12]
 800dfa6:	1e5e      	subs	r6, r3, #1
 800dfa8:	9b07      	ldr	r3, [sp, #28]
 800dfaa:	42b3      	cmp	r3, r6
 800dfac:	bfbf      	itttt	lt
 800dfae:	9b07      	ldrlt	r3, [sp, #28]
 800dfb0:	9607      	strlt	r6, [sp, #28]
 800dfb2:	1af2      	sublt	r2, r6, r3
 800dfb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dfb6:	bfb6      	itet	lt
 800dfb8:	189b      	addlt	r3, r3, r2
 800dfba:	1b9e      	subge	r6, r3, r6
 800dfbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dfbe:	9b03      	ldr	r3, [sp, #12]
 800dfc0:	bfb8      	it	lt
 800dfc2:	2600      	movlt	r6, #0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	bfb7      	itett	lt
 800dfc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dfcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dfd0:	1a9d      	sublt	r5, r3, r2
 800dfd2:	2300      	movlt	r3, #0
 800dfd4:	e734      	b.n	800de40 <_dtoa_r+0x720>
 800dfd6:	9e07      	ldr	r6, [sp, #28]
 800dfd8:	9d04      	ldr	r5, [sp, #16]
 800dfda:	9f08      	ldr	r7, [sp, #32]
 800dfdc:	e73b      	b.n	800de56 <_dtoa_r+0x736>
 800dfde:	9a07      	ldr	r2, [sp, #28]
 800dfe0:	e767      	b.n	800deb2 <_dtoa_r+0x792>
 800dfe2:	9b06      	ldr	r3, [sp, #24]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	dc18      	bgt.n	800e01a <_dtoa_r+0x8fa>
 800dfe8:	f1ba 0f00 	cmp.w	sl, #0
 800dfec:	d115      	bne.n	800e01a <_dtoa_r+0x8fa>
 800dfee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dff2:	b993      	cbnz	r3, 800e01a <_dtoa_r+0x8fa>
 800dff4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dff8:	0d1b      	lsrs	r3, r3, #20
 800dffa:	051b      	lsls	r3, r3, #20
 800dffc:	b183      	cbz	r3, 800e020 <_dtoa_r+0x900>
 800dffe:	9b04      	ldr	r3, [sp, #16]
 800e000:	3301      	adds	r3, #1
 800e002:	9304      	str	r3, [sp, #16]
 800e004:	9b05      	ldr	r3, [sp, #20]
 800e006:	3301      	adds	r3, #1
 800e008:	9305      	str	r3, [sp, #20]
 800e00a:	f04f 0801 	mov.w	r8, #1
 800e00e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e010:	2b00      	cmp	r3, #0
 800e012:	f47f af6a 	bne.w	800deea <_dtoa_r+0x7ca>
 800e016:	2001      	movs	r0, #1
 800e018:	e76f      	b.n	800defa <_dtoa_r+0x7da>
 800e01a:	f04f 0800 	mov.w	r8, #0
 800e01e:	e7f6      	b.n	800e00e <_dtoa_r+0x8ee>
 800e020:	4698      	mov	r8, r3
 800e022:	e7f4      	b.n	800e00e <_dtoa_r+0x8ee>
 800e024:	f43f af7d 	beq.w	800df22 <_dtoa_r+0x802>
 800e028:	4618      	mov	r0, r3
 800e02a:	301c      	adds	r0, #28
 800e02c:	e772      	b.n	800df14 <_dtoa_r+0x7f4>
 800e02e:	9b03      	ldr	r3, [sp, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	dc37      	bgt.n	800e0a4 <_dtoa_r+0x984>
 800e034:	9b06      	ldr	r3, [sp, #24]
 800e036:	2b02      	cmp	r3, #2
 800e038:	dd34      	ble.n	800e0a4 <_dtoa_r+0x984>
 800e03a:	9b03      	ldr	r3, [sp, #12]
 800e03c:	9302      	str	r3, [sp, #8]
 800e03e:	9b02      	ldr	r3, [sp, #8]
 800e040:	b96b      	cbnz	r3, 800e05e <_dtoa_r+0x93e>
 800e042:	4631      	mov	r1, r6
 800e044:	2205      	movs	r2, #5
 800e046:	4620      	mov	r0, r4
 800e048:	f000 f9d8 	bl	800e3fc <__multadd>
 800e04c:	4601      	mov	r1, r0
 800e04e:	4606      	mov	r6, r0
 800e050:	ee18 0a10 	vmov	r0, s16
 800e054:	f000 fbf2 	bl	800e83c <__mcmp>
 800e058:	2800      	cmp	r0, #0
 800e05a:	f73f adbb 	bgt.w	800dbd4 <_dtoa_r+0x4b4>
 800e05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e060:	9d01      	ldr	r5, [sp, #4]
 800e062:	43db      	mvns	r3, r3
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	f04f 0800 	mov.w	r8, #0
 800e06a:	4631      	mov	r1, r6
 800e06c:	4620      	mov	r0, r4
 800e06e:	f000 f9a3 	bl	800e3b8 <_Bfree>
 800e072:	2f00      	cmp	r7, #0
 800e074:	f43f aea4 	beq.w	800ddc0 <_dtoa_r+0x6a0>
 800e078:	f1b8 0f00 	cmp.w	r8, #0
 800e07c:	d005      	beq.n	800e08a <_dtoa_r+0x96a>
 800e07e:	45b8      	cmp	r8, r7
 800e080:	d003      	beq.n	800e08a <_dtoa_r+0x96a>
 800e082:	4641      	mov	r1, r8
 800e084:	4620      	mov	r0, r4
 800e086:	f000 f997 	bl	800e3b8 <_Bfree>
 800e08a:	4639      	mov	r1, r7
 800e08c:	4620      	mov	r0, r4
 800e08e:	f000 f993 	bl	800e3b8 <_Bfree>
 800e092:	e695      	b.n	800ddc0 <_dtoa_r+0x6a0>
 800e094:	2600      	movs	r6, #0
 800e096:	4637      	mov	r7, r6
 800e098:	e7e1      	b.n	800e05e <_dtoa_r+0x93e>
 800e09a:	9700      	str	r7, [sp, #0]
 800e09c:	4637      	mov	r7, r6
 800e09e:	e599      	b.n	800dbd4 <_dtoa_r+0x4b4>
 800e0a0:	40240000 	.word	0x40240000
 800e0a4:	9b08      	ldr	r3, [sp, #32]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f000 80ca 	beq.w	800e240 <_dtoa_r+0xb20>
 800e0ac:	9b03      	ldr	r3, [sp, #12]
 800e0ae:	9302      	str	r3, [sp, #8]
 800e0b0:	2d00      	cmp	r5, #0
 800e0b2:	dd05      	ble.n	800e0c0 <_dtoa_r+0x9a0>
 800e0b4:	4639      	mov	r1, r7
 800e0b6:	462a      	mov	r2, r5
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f000 fb4f 	bl	800e75c <__lshift>
 800e0be:	4607      	mov	r7, r0
 800e0c0:	f1b8 0f00 	cmp.w	r8, #0
 800e0c4:	d05b      	beq.n	800e17e <_dtoa_r+0xa5e>
 800e0c6:	6879      	ldr	r1, [r7, #4]
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f000 f935 	bl	800e338 <_Balloc>
 800e0ce:	4605      	mov	r5, r0
 800e0d0:	b928      	cbnz	r0, 800e0de <_dtoa_r+0x9be>
 800e0d2:	4b87      	ldr	r3, [pc, #540]	; (800e2f0 <_dtoa_r+0xbd0>)
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e0da:	f7ff bb3b 	b.w	800d754 <_dtoa_r+0x34>
 800e0de:	693a      	ldr	r2, [r7, #16]
 800e0e0:	3202      	adds	r2, #2
 800e0e2:	0092      	lsls	r2, r2, #2
 800e0e4:	f107 010c 	add.w	r1, r7, #12
 800e0e8:	300c      	adds	r0, #12
 800e0ea:	f000 f90b 	bl	800e304 <memcpy>
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f000 fb32 	bl	800e75c <__lshift>
 800e0f8:	9b01      	ldr	r3, [sp, #4]
 800e0fa:	f103 0901 	add.w	r9, r3, #1
 800e0fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e102:	4413      	add	r3, r2
 800e104:	9305      	str	r3, [sp, #20]
 800e106:	f00a 0301 	and.w	r3, sl, #1
 800e10a:	46b8      	mov	r8, r7
 800e10c:	9304      	str	r3, [sp, #16]
 800e10e:	4607      	mov	r7, r0
 800e110:	4631      	mov	r1, r6
 800e112:	ee18 0a10 	vmov	r0, s16
 800e116:	f7ff fa77 	bl	800d608 <quorem>
 800e11a:	4641      	mov	r1, r8
 800e11c:	9002      	str	r0, [sp, #8]
 800e11e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e122:	ee18 0a10 	vmov	r0, s16
 800e126:	f000 fb89 	bl	800e83c <__mcmp>
 800e12a:	463a      	mov	r2, r7
 800e12c:	9003      	str	r0, [sp, #12]
 800e12e:	4631      	mov	r1, r6
 800e130:	4620      	mov	r0, r4
 800e132:	f000 fb9f 	bl	800e874 <__mdiff>
 800e136:	68c2      	ldr	r2, [r0, #12]
 800e138:	f109 3bff 	add.w	fp, r9, #4294967295
 800e13c:	4605      	mov	r5, r0
 800e13e:	bb02      	cbnz	r2, 800e182 <_dtoa_r+0xa62>
 800e140:	4601      	mov	r1, r0
 800e142:	ee18 0a10 	vmov	r0, s16
 800e146:	f000 fb79 	bl	800e83c <__mcmp>
 800e14a:	4602      	mov	r2, r0
 800e14c:	4629      	mov	r1, r5
 800e14e:	4620      	mov	r0, r4
 800e150:	9207      	str	r2, [sp, #28]
 800e152:	f000 f931 	bl	800e3b8 <_Bfree>
 800e156:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e15a:	ea43 0102 	orr.w	r1, r3, r2
 800e15e:	9b04      	ldr	r3, [sp, #16]
 800e160:	430b      	orrs	r3, r1
 800e162:	464d      	mov	r5, r9
 800e164:	d10f      	bne.n	800e186 <_dtoa_r+0xa66>
 800e166:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e16a:	d02a      	beq.n	800e1c2 <_dtoa_r+0xaa2>
 800e16c:	9b03      	ldr	r3, [sp, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	dd02      	ble.n	800e178 <_dtoa_r+0xa58>
 800e172:	9b02      	ldr	r3, [sp, #8]
 800e174:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e178:	f88b a000 	strb.w	sl, [fp]
 800e17c:	e775      	b.n	800e06a <_dtoa_r+0x94a>
 800e17e:	4638      	mov	r0, r7
 800e180:	e7ba      	b.n	800e0f8 <_dtoa_r+0x9d8>
 800e182:	2201      	movs	r2, #1
 800e184:	e7e2      	b.n	800e14c <_dtoa_r+0xa2c>
 800e186:	9b03      	ldr	r3, [sp, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	db04      	blt.n	800e196 <_dtoa_r+0xa76>
 800e18c:	9906      	ldr	r1, [sp, #24]
 800e18e:	430b      	orrs	r3, r1
 800e190:	9904      	ldr	r1, [sp, #16]
 800e192:	430b      	orrs	r3, r1
 800e194:	d122      	bne.n	800e1dc <_dtoa_r+0xabc>
 800e196:	2a00      	cmp	r2, #0
 800e198:	ddee      	ble.n	800e178 <_dtoa_r+0xa58>
 800e19a:	ee18 1a10 	vmov	r1, s16
 800e19e:	2201      	movs	r2, #1
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f000 fadb 	bl	800e75c <__lshift>
 800e1a6:	4631      	mov	r1, r6
 800e1a8:	ee08 0a10 	vmov	s16, r0
 800e1ac:	f000 fb46 	bl	800e83c <__mcmp>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	dc03      	bgt.n	800e1bc <_dtoa_r+0xa9c>
 800e1b4:	d1e0      	bne.n	800e178 <_dtoa_r+0xa58>
 800e1b6:	f01a 0f01 	tst.w	sl, #1
 800e1ba:	d0dd      	beq.n	800e178 <_dtoa_r+0xa58>
 800e1bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1c0:	d1d7      	bne.n	800e172 <_dtoa_r+0xa52>
 800e1c2:	2339      	movs	r3, #57	; 0x39
 800e1c4:	f88b 3000 	strb.w	r3, [fp]
 800e1c8:	462b      	mov	r3, r5
 800e1ca:	461d      	mov	r5, r3
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e1d2:	2a39      	cmp	r2, #57	; 0x39
 800e1d4:	d071      	beq.n	800e2ba <_dtoa_r+0xb9a>
 800e1d6:	3201      	adds	r2, #1
 800e1d8:	701a      	strb	r2, [r3, #0]
 800e1da:	e746      	b.n	800e06a <_dtoa_r+0x94a>
 800e1dc:	2a00      	cmp	r2, #0
 800e1de:	dd07      	ble.n	800e1f0 <_dtoa_r+0xad0>
 800e1e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1e4:	d0ed      	beq.n	800e1c2 <_dtoa_r+0xaa2>
 800e1e6:	f10a 0301 	add.w	r3, sl, #1
 800e1ea:	f88b 3000 	strb.w	r3, [fp]
 800e1ee:	e73c      	b.n	800e06a <_dtoa_r+0x94a>
 800e1f0:	9b05      	ldr	r3, [sp, #20]
 800e1f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e1f6:	4599      	cmp	r9, r3
 800e1f8:	d047      	beq.n	800e28a <_dtoa_r+0xb6a>
 800e1fa:	ee18 1a10 	vmov	r1, s16
 800e1fe:	2300      	movs	r3, #0
 800e200:	220a      	movs	r2, #10
 800e202:	4620      	mov	r0, r4
 800e204:	f000 f8fa 	bl	800e3fc <__multadd>
 800e208:	45b8      	cmp	r8, r7
 800e20a:	ee08 0a10 	vmov	s16, r0
 800e20e:	f04f 0300 	mov.w	r3, #0
 800e212:	f04f 020a 	mov.w	r2, #10
 800e216:	4641      	mov	r1, r8
 800e218:	4620      	mov	r0, r4
 800e21a:	d106      	bne.n	800e22a <_dtoa_r+0xb0a>
 800e21c:	f000 f8ee 	bl	800e3fc <__multadd>
 800e220:	4680      	mov	r8, r0
 800e222:	4607      	mov	r7, r0
 800e224:	f109 0901 	add.w	r9, r9, #1
 800e228:	e772      	b.n	800e110 <_dtoa_r+0x9f0>
 800e22a:	f000 f8e7 	bl	800e3fc <__multadd>
 800e22e:	4639      	mov	r1, r7
 800e230:	4680      	mov	r8, r0
 800e232:	2300      	movs	r3, #0
 800e234:	220a      	movs	r2, #10
 800e236:	4620      	mov	r0, r4
 800e238:	f000 f8e0 	bl	800e3fc <__multadd>
 800e23c:	4607      	mov	r7, r0
 800e23e:	e7f1      	b.n	800e224 <_dtoa_r+0xb04>
 800e240:	9b03      	ldr	r3, [sp, #12]
 800e242:	9302      	str	r3, [sp, #8]
 800e244:	9d01      	ldr	r5, [sp, #4]
 800e246:	ee18 0a10 	vmov	r0, s16
 800e24a:	4631      	mov	r1, r6
 800e24c:	f7ff f9dc 	bl	800d608 <quorem>
 800e250:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e254:	9b01      	ldr	r3, [sp, #4]
 800e256:	f805 ab01 	strb.w	sl, [r5], #1
 800e25a:	1aea      	subs	r2, r5, r3
 800e25c:	9b02      	ldr	r3, [sp, #8]
 800e25e:	4293      	cmp	r3, r2
 800e260:	dd09      	ble.n	800e276 <_dtoa_r+0xb56>
 800e262:	ee18 1a10 	vmov	r1, s16
 800e266:	2300      	movs	r3, #0
 800e268:	220a      	movs	r2, #10
 800e26a:	4620      	mov	r0, r4
 800e26c:	f000 f8c6 	bl	800e3fc <__multadd>
 800e270:	ee08 0a10 	vmov	s16, r0
 800e274:	e7e7      	b.n	800e246 <_dtoa_r+0xb26>
 800e276:	9b02      	ldr	r3, [sp, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	bfc8      	it	gt
 800e27c:	461d      	movgt	r5, r3
 800e27e:	9b01      	ldr	r3, [sp, #4]
 800e280:	bfd8      	it	le
 800e282:	2501      	movle	r5, #1
 800e284:	441d      	add	r5, r3
 800e286:	f04f 0800 	mov.w	r8, #0
 800e28a:	ee18 1a10 	vmov	r1, s16
 800e28e:	2201      	movs	r2, #1
 800e290:	4620      	mov	r0, r4
 800e292:	f000 fa63 	bl	800e75c <__lshift>
 800e296:	4631      	mov	r1, r6
 800e298:	ee08 0a10 	vmov	s16, r0
 800e29c:	f000 face 	bl	800e83c <__mcmp>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	dc91      	bgt.n	800e1c8 <_dtoa_r+0xaa8>
 800e2a4:	d102      	bne.n	800e2ac <_dtoa_r+0xb8c>
 800e2a6:	f01a 0f01 	tst.w	sl, #1
 800e2aa:	d18d      	bne.n	800e1c8 <_dtoa_r+0xaa8>
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	461d      	mov	r5, r3
 800e2b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2b4:	2a30      	cmp	r2, #48	; 0x30
 800e2b6:	d0fa      	beq.n	800e2ae <_dtoa_r+0xb8e>
 800e2b8:	e6d7      	b.n	800e06a <_dtoa_r+0x94a>
 800e2ba:	9a01      	ldr	r2, [sp, #4]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d184      	bne.n	800e1ca <_dtoa_r+0xaaa>
 800e2c0:	9b00      	ldr	r3, [sp, #0]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	2331      	movs	r3, #49	; 0x31
 800e2c8:	7013      	strb	r3, [r2, #0]
 800e2ca:	e6ce      	b.n	800e06a <_dtoa_r+0x94a>
 800e2cc:	4b09      	ldr	r3, [pc, #36]	; (800e2f4 <_dtoa_r+0xbd4>)
 800e2ce:	f7ff ba95 	b.w	800d7fc <_dtoa_r+0xdc>
 800e2d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f47f aa6e 	bne.w	800d7b6 <_dtoa_r+0x96>
 800e2da:	4b07      	ldr	r3, [pc, #28]	; (800e2f8 <_dtoa_r+0xbd8>)
 800e2dc:	f7ff ba8e 	b.w	800d7fc <_dtoa_r+0xdc>
 800e2e0:	9b02      	ldr	r3, [sp, #8]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	dcae      	bgt.n	800e244 <_dtoa_r+0xb24>
 800e2e6:	9b06      	ldr	r3, [sp, #24]
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	f73f aea8 	bgt.w	800e03e <_dtoa_r+0x91e>
 800e2ee:	e7a9      	b.n	800e244 <_dtoa_r+0xb24>
 800e2f0:	08010a67 	.word	0x08010a67
 800e2f4:	080109c4 	.word	0x080109c4
 800e2f8:	080109e8 	.word	0x080109e8

0800e2fc <_localeconv_r>:
 800e2fc:	4800      	ldr	r0, [pc, #0]	; (800e300 <_localeconv_r+0x4>)
 800e2fe:	4770      	bx	lr
 800e300:	200001d0 	.word	0x200001d0

0800e304 <memcpy>:
 800e304:	440a      	add	r2, r1
 800e306:	4291      	cmp	r1, r2
 800e308:	f100 33ff 	add.w	r3, r0, #4294967295
 800e30c:	d100      	bne.n	800e310 <memcpy+0xc>
 800e30e:	4770      	bx	lr
 800e310:	b510      	push	{r4, lr}
 800e312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e31a:	4291      	cmp	r1, r2
 800e31c:	d1f9      	bne.n	800e312 <memcpy+0xe>
 800e31e:	bd10      	pop	{r4, pc}

0800e320 <__malloc_lock>:
 800e320:	4801      	ldr	r0, [pc, #4]	; (800e328 <__malloc_lock+0x8>)
 800e322:	f000 bd30 	b.w	800ed86 <__retarget_lock_acquire_recursive>
 800e326:	bf00      	nop
 800e328:	20000bb0 	.word	0x20000bb0

0800e32c <__malloc_unlock>:
 800e32c:	4801      	ldr	r0, [pc, #4]	; (800e334 <__malloc_unlock+0x8>)
 800e32e:	f000 bd2b 	b.w	800ed88 <__retarget_lock_release_recursive>
 800e332:	bf00      	nop
 800e334:	20000bb0 	.word	0x20000bb0

0800e338 <_Balloc>:
 800e338:	b570      	push	{r4, r5, r6, lr}
 800e33a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e33c:	4604      	mov	r4, r0
 800e33e:	460d      	mov	r5, r1
 800e340:	b976      	cbnz	r6, 800e360 <_Balloc+0x28>
 800e342:	2010      	movs	r0, #16
 800e344:	f7fe fb6a 	bl	800ca1c <malloc>
 800e348:	4602      	mov	r2, r0
 800e34a:	6260      	str	r0, [r4, #36]	; 0x24
 800e34c:	b920      	cbnz	r0, 800e358 <_Balloc+0x20>
 800e34e:	4b18      	ldr	r3, [pc, #96]	; (800e3b0 <_Balloc+0x78>)
 800e350:	4818      	ldr	r0, [pc, #96]	; (800e3b4 <_Balloc+0x7c>)
 800e352:	2166      	movs	r1, #102	; 0x66
 800e354:	f000 fce6 	bl	800ed24 <__assert_func>
 800e358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e35c:	6006      	str	r6, [r0, #0]
 800e35e:	60c6      	str	r6, [r0, #12]
 800e360:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e362:	68f3      	ldr	r3, [r6, #12]
 800e364:	b183      	cbz	r3, 800e388 <_Balloc+0x50>
 800e366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e36e:	b9b8      	cbnz	r0, 800e3a0 <_Balloc+0x68>
 800e370:	2101      	movs	r1, #1
 800e372:	fa01 f605 	lsl.w	r6, r1, r5
 800e376:	1d72      	adds	r2, r6, #5
 800e378:	0092      	lsls	r2, r2, #2
 800e37a:	4620      	mov	r0, r4
 800e37c:	f000 fb60 	bl	800ea40 <_calloc_r>
 800e380:	b160      	cbz	r0, 800e39c <_Balloc+0x64>
 800e382:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e386:	e00e      	b.n	800e3a6 <_Balloc+0x6e>
 800e388:	2221      	movs	r2, #33	; 0x21
 800e38a:	2104      	movs	r1, #4
 800e38c:	4620      	mov	r0, r4
 800e38e:	f000 fb57 	bl	800ea40 <_calloc_r>
 800e392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e394:	60f0      	str	r0, [r6, #12]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d1e4      	bne.n	800e366 <_Balloc+0x2e>
 800e39c:	2000      	movs	r0, #0
 800e39e:	bd70      	pop	{r4, r5, r6, pc}
 800e3a0:	6802      	ldr	r2, [r0, #0]
 800e3a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e3ac:	e7f7      	b.n	800e39e <_Balloc+0x66>
 800e3ae:	bf00      	nop
 800e3b0:	080109f5 	.word	0x080109f5
 800e3b4:	08010a78 	.word	0x08010a78

0800e3b8 <_Bfree>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e3bc:	4605      	mov	r5, r0
 800e3be:	460c      	mov	r4, r1
 800e3c0:	b976      	cbnz	r6, 800e3e0 <_Bfree+0x28>
 800e3c2:	2010      	movs	r0, #16
 800e3c4:	f7fe fb2a 	bl	800ca1c <malloc>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	6268      	str	r0, [r5, #36]	; 0x24
 800e3cc:	b920      	cbnz	r0, 800e3d8 <_Bfree+0x20>
 800e3ce:	4b09      	ldr	r3, [pc, #36]	; (800e3f4 <_Bfree+0x3c>)
 800e3d0:	4809      	ldr	r0, [pc, #36]	; (800e3f8 <_Bfree+0x40>)
 800e3d2:	218a      	movs	r1, #138	; 0x8a
 800e3d4:	f000 fca6 	bl	800ed24 <__assert_func>
 800e3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3dc:	6006      	str	r6, [r0, #0]
 800e3de:	60c6      	str	r6, [r0, #12]
 800e3e0:	b13c      	cbz	r4, 800e3f2 <_Bfree+0x3a>
 800e3e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e3e4:	6862      	ldr	r2, [r4, #4]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3ec:	6021      	str	r1, [r4, #0]
 800e3ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3f2:	bd70      	pop	{r4, r5, r6, pc}
 800e3f4:	080109f5 	.word	0x080109f5
 800e3f8:	08010a78 	.word	0x08010a78

0800e3fc <__multadd>:
 800e3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e400:	690d      	ldr	r5, [r1, #16]
 800e402:	4607      	mov	r7, r0
 800e404:	460c      	mov	r4, r1
 800e406:	461e      	mov	r6, r3
 800e408:	f101 0c14 	add.w	ip, r1, #20
 800e40c:	2000      	movs	r0, #0
 800e40e:	f8dc 3000 	ldr.w	r3, [ip]
 800e412:	b299      	uxth	r1, r3
 800e414:	fb02 6101 	mla	r1, r2, r1, r6
 800e418:	0c1e      	lsrs	r6, r3, #16
 800e41a:	0c0b      	lsrs	r3, r1, #16
 800e41c:	fb02 3306 	mla	r3, r2, r6, r3
 800e420:	b289      	uxth	r1, r1
 800e422:	3001      	adds	r0, #1
 800e424:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e428:	4285      	cmp	r5, r0
 800e42a:	f84c 1b04 	str.w	r1, [ip], #4
 800e42e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e432:	dcec      	bgt.n	800e40e <__multadd+0x12>
 800e434:	b30e      	cbz	r6, 800e47a <__multadd+0x7e>
 800e436:	68a3      	ldr	r3, [r4, #8]
 800e438:	42ab      	cmp	r3, r5
 800e43a:	dc19      	bgt.n	800e470 <__multadd+0x74>
 800e43c:	6861      	ldr	r1, [r4, #4]
 800e43e:	4638      	mov	r0, r7
 800e440:	3101      	adds	r1, #1
 800e442:	f7ff ff79 	bl	800e338 <_Balloc>
 800e446:	4680      	mov	r8, r0
 800e448:	b928      	cbnz	r0, 800e456 <__multadd+0x5a>
 800e44a:	4602      	mov	r2, r0
 800e44c:	4b0c      	ldr	r3, [pc, #48]	; (800e480 <__multadd+0x84>)
 800e44e:	480d      	ldr	r0, [pc, #52]	; (800e484 <__multadd+0x88>)
 800e450:	21b5      	movs	r1, #181	; 0xb5
 800e452:	f000 fc67 	bl	800ed24 <__assert_func>
 800e456:	6922      	ldr	r2, [r4, #16]
 800e458:	3202      	adds	r2, #2
 800e45a:	f104 010c 	add.w	r1, r4, #12
 800e45e:	0092      	lsls	r2, r2, #2
 800e460:	300c      	adds	r0, #12
 800e462:	f7ff ff4f 	bl	800e304 <memcpy>
 800e466:	4621      	mov	r1, r4
 800e468:	4638      	mov	r0, r7
 800e46a:	f7ff ffa5 	bl	800e3b8 <_Bfree>
 800e46e:	4644      	mov	r4, r8
 800e470:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e474:	3501      	adds	r5, #1
 800e476:	615e      	str	r6, [r3, #20]
 800e478:	6125      	str	r5, [r4, #16]
 800e47a:	4620      	mov	r0, r4
 800e47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e480:	08010a67 	.word	0x08010a67
 800e484:	08010a78 	.word	0x08010a78

0800e488 <__hi0bits>:
 800e488:	0c03      	lsrs	r3, r0, #16
 800e48a:	041b      	lsls	r3, r3, #16
 800e48c:	b9d3      	cbnz	r3, 800e4c4 <__hi0bits+0x3c>
 800e48e:	0400      	lsls	r0, r0, #16
 800e490:	2310      	movs	r3, #16
 800e492:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e496:	bf04      	itt	eq
 800e498:	0200      	lsleq	r0, r0, #8
 800e49a:	3308      	addeq	r3, #8
 800e49c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e4a0:	bf04      	itt	eq
 800e4a2:	0100      	lsleq	r0, r0, #4
 800e4a4:	3304      	addeq	r3, #4
 800e4a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e4aa:	bf04      	itt	eq
 800e4ac:	0080      	lsleq	r0, r0, #2
 800e4ae:	3302      	addeq	r3, #2
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	db05      	blt.n	800e4c0 <__hi0bits+0x38>
 800e4b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e4b8:	f103 0301 	add.w	r3, r3, #1
 800e4bc:	bf08      	it	eq
 800e4be:	2320      	moveq	r3, #32
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	4770      	bx	lr
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	e7e4      	b.n	800e492 <__hi0bits+0xa>

0800e4c8 <__lo0bits>:
 800e4c8:	6803      	ldr	r3, [r0, #0]
 800e4ca:	f013 0207 	ands.w	r2, r3, #7
 800e4ce:	4601      	mov	r1, r0
 800e4d0:	d00b      	beq.n	800e4ea <__lo0bits+0x22>
 800e4d2:	07da      	lsls	r2, r3, #31
 800e4d4:	d423      	bmi.n	800e51e <__lo0bits+0x56>
 800e4d6:	0798      	lsls	r0, r3, #30
 800e4d8:	bf49      	itett	mi
 800e4da:	085b      	lsrmi	r3, r3, #1
 800e4dc:	089b      	lsrpl	r3, r3, #2
 800e4de:	2001      	movmi	r0, #1
 800e4e0:	600b      	strmi	r3, [r1, #0]
 800e4e2:	bf5c      	itt	pl
 800e4e4:	600b      	strpl	r3, [r1, #0]
 800e4e6:	2002      	movpl	r0, #2
 800e4e8:	4770      	bx	lr
 800e4ea:	b298      	uxth	r0, r3
 800e4ec:	b9a8      	cbnz	r0, 800e51a <__lo0bits+0x52>
 800e4ee:	0c1b      	lsrs	r3, r3, #16
 800e4f0:	2010      	movs	r0, #16
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	b90a      	cbnz	r2, 800e4fa <__lo0bits+0x32>
 800e4f6:	3008      	adds	r0, #8
 800e4f8:	0a1b      	lsrs	r3, r3, #8
 800e4fa:	071a      	lsls	r2, r3, #28
 800e4fc:	bf04      	itt	eq
 800e4fe:	091b      	lsreq	r3, r3, #4
 800e500:	3004      	addeq	r0, #4
 800e502:	079a      	lsls	r2, r3, #30
 800e504:	bf04      	itt	eq
 800e506:	089b      	lsreq	r3, r3, #2
 800e508:	3002      	addeq	r0, #2
 800e50a:	07da      	lsls	r2, r3, #31
 800e50c:	d403      	bmi.n	800e516 <__lo0bits+0x4e>
 800e50e:	085b      	lsrs	r3, r3, #1
 800e510:	f100 0001 	add.w	r0, r0, #1
 800e514:	d005      	beq.n	800e522 <__lo0bits+0x5a>
 800e516:	600b      	str	r3, [r1, #0]
 800e518:	4770      	bx	lr
 800e51a:	4610      	mov	r0, r2
 800e51c:	e7e9      	b.n	800e4f2 <__lo0bits+0x2a>
 800e51e:	2000      	movs	r0, #0
 800e520:	4770      	bx	lr
 800e522:	2020      	movs	r0, #32
 800e524:	4770      	bx	lr
	...

0800e528 <__i2b>:
 800e528:	b510      	push	{r4, lr}
 800e52a:	460c      	mov	r4, r1
 800e52c:	2101      	movs	r1, #1
 800e52e:	f7ff ff03 	bl	800e338 <_Balloc>
 800e532:	4602      	mov	r2, r0
 800e534:	b928      	cbnz	r0, 800e542 <__i2b+0x1a>
 800e536:	4b05      	ldr	r3, [pc, #20]	; (800e54c <__i2b+0x24>)
 800e538:	4805      	ldr	r0, [pc, #20]	; (800e550 <__i2b+0x28>)
 800e53a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e53e:	f000 fbf1 	bl	800ed24 <__assert_func>
 800e542:	2301      	movs	r3, #1
 800e544:	6144      	str	r4, [r0, #20]
 800e546:	6103      	str	r3, [r0, #16]
 800e548:	bd10      	pop	{r4, pc}
 800e54a:	bf00      	nop
 800e54c:	08010a67 	.word	0x08010a67
 800e550:	08010a78 	.word	0x08010a78

0800e554 <__multiply>:
 800e554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e558:	4691      	mov	r9, r2
 800e55a:	690a      	ldr	r2, [r1, #16]
 800e55c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e560:	429a      	cmp	r2, r3
 800e562:	bfb8      	it	lt
 800e564:	460b      	movlt	r3, r1
 800e566:	460c      	mov	r4, r1
 800e568:	bfbc      	itt	lt
 800e56a:	464c      	movlt	r4, r9
 800e56c:	4699      	movlt	r9, r3
 800e56e:	6927      	ldr	r7, [r4, #16]
 800e570:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e574:	68a3      	ldr	r3, [r4, #8]
 800e576:	6861      	ldr	r1, [r4, #4]
 800e578:	eb07 060a 	add.w	r6, r7, sl
 800e57c:	42b3      	cmp	r3, r6
 800e57e:	b085      	sub	sp, #20
 800e580:	bfb8      	it	lt
 800e582:	3101      	addlt	r1, #1
 800e584:	f7ff fed8 	bl	800e338 <_Balloc>
 800e588:	b930      	cbnz	r0, 800e598 <__multiply+0x44>
 800e58a:	4602      	mov	r2, r0
 800e58c:	4b44      	ldr	r3, [pc, #272]	; (800e6a0 <__multiply+0x14c>)
 800e58e:	4845      	ldr	r0, [pc, #276]	; (800e6a4 <__multiply+0x150>)
 800e590:	f240 115d 	movw	r1, #349	; 0x15d
 800e594:	f000 fbc6 	bl	800ed24 <__assert_func>
 800e598:	f100 0514 	add.w	r5, r0, #20
 800e59c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e5a0:	462b      	mov	r3, r5
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	4543      	cmp	r3, r8
 800e5a6:	d321      	bcc.n	800e5ec <__multiply+0x98>
 800e5a8:	f104 0314 	add.w	r3, r4, #20
 800e5ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e5b0:	f109 0314 	add.w	r3, r9, #20
 800e5b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e5b8:	9202      	str	r2, [sp, #8]
 800e5ba:	1b3a      	subs	r2, r7, r4
 800e5bc:	3a15      	subs	r2, #21
 800e5be:	f022 0203 	bic.w	r2, r2, #3
 800e5c2:	3204      	adds	r2, #4
 800e5c4:	f104 0115 	add.w	r1, r4, #21
 800e5c8:	428f      	cmp	r7, r1
 800e5ca:	bf38      	it	cc
 800e5cc:	2204      	movcc	r2, #4
 800e5ce:	9201      	str	r2, [sp, #4]
 800e5d0:	9a02      	ldr	r2, [sp, #8]
 800e5d2:	9303      	str	r3, [sp, #12]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d80c      	bhi.n	800e5f2 <__multiply+0x9e>
 800e5d8:	2e00      	cmp	r6, #0
 800e5da:	dd03      	ble.n	800e5e4 <__multiply+0x90>
 800e5dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d05a      	beq.n	800e69a <__multiply+0x146>
 800e5e4:	6106      	str	r6, [r0, #16]
 800e5e6:	b005      	add	sp, #20
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ec:	f843 2b04 	str.w	r2, [r3], #4
 800e5f0:	e7d8      	b.n	800e5a4 <__multiply+0x50>
 800e5f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5f6:	f1ba 0f00 	cmp.w	sl, #0
 800e5fa:	d024      	beq.n	800e646 <__multiply+0xf2>
 800e5fc:	f104 0e14 	add.w	lr, r4, #20
 800e600:	46a9      	mov	r9, r5
 800e602:	f04f 0c00 	mov.w	ip, #0
 800e606:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e60a:	f8d9 1000 	ldr.w	r1, [r9]
 800e60e:	fa1f fb82 	uxth.w	fp, r2
 800e612:	b289      	uxth	r1, r1
 800e614:	fb0a 110b 	mla	r1, sl, fp, r1
 800e618:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e61c:	f8d9 2000 	ldr.w	r2, [r9]
 800e620:	4461      	add	r1, ip
 800e622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e626:	fb0a c20b 	mla	r2, sl, fp, ip
 800e62a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e62e:	b289      	uxth	r1, r1
 800e630:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e634:	4577      	cmp	r7, lr
 800e636:	f849 1b04 	str.w	r1, [r9], #4
 800e63a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e63e:	d8e2      	bhi.n	800e606 <__multiply+0xb2>
 800e640:	9a01      	ldr	r2, [sp, #4]
 800e642:	f845 c002 	str.w	ip, [r5, r2]
 800e646:	9a03      	ldr	r2, [sp, #12]
 800e648:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e64c:	3304      	adds	r3, #4
 800e64e:	f1b9 0f00 	cmp.w	r9, #0
 800e652:	d020      	beq.n	800e696 <__multiply+0x142>
 800e654:	6829      	ldr	r1, [r5, #0]
 800e656:	f104 0c14 	add.w	ip, r4, #20
 800e65a:	46ae      	mov	lr, r5
 800e65c:	f04f 0a00 	mov.w	sl, #0
 800e660:	f8bc b000 	ldrh.w	fp, [ip]
 800e664:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e668:	fb09 220b 	mla	r2, r9, fp, r2
 800e66c:	4492      	add	sl, r2
 800e66e:	b289      	uxth	r1, r1
 800e670:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e674:	f84e 1b04 	str.w	r1, [lr], #4
 800e678:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e67c:	f8be 1000 	ldrh.w	r1, [lr]
 800e680:	0c12      	lsrs	r2, r2, #16
 800e682:	fb09 1102 	mla	r1, r9, r2, r1
 800e686:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e68a:	4567      	cmp	r7, ip
 800e68c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e690:	d8e6      	bhi.n	800e660 <__multiply+0x10c>
 800e692:	9a01      	ldr	r2, [sp, #4]
 800e694:	50a9      	str	r1, [r5, r2]
 800e696:	3504      	adds	r5, #4
 800e698:	e79a      	b.n	800e5d0 <__multiply+0x7c>
 800e69a:	3e01      	subs	r6, #1
 800e69c:	e79c      	b.n	800e5d8 <__multiply+0x84>
 800e69e:	bf00      	nop
 800e6a0:	08010a67 	.word	0x08010a67
 800e6a4:	08010a78 	.word	0x08010a78

0800e6a8 <__pow5mult>:
 800e6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6ac:	4615      	mov	r5, r2
 800e6ae:	f012 0203 	ands.w	r2, r2, #3
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	460f      	mov	r7, r1
 800e6b6:	d007      	beq.n	800e6c8 <__pow5mult+0x20>
 800e6b8:	4c25      	ldr	r4, [pc, #148]	; (800e750 <__pow5mult+0xa8>)
 800e6ba:	3a01      	subs	r2, #1
 800e6bc:	2300      	movs	r3, #0
 800e6be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e6c2:	f7ff fe9b 	bl	800e3fc <__multadd>
 800e6c6:	4607      	mov	r7, r0
 800e6c8:	10ad      	asrs	r5, r5, #2
 800e6ca:	d03d      	beq.n	800e748 <__pow5mult+0xa0>
 800e6cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e6ce:	b97c      	cbnz	r4, 800e6f0 <__pow5mult+0x48>
 800e6d0:	2010      	movs	r0, #16
 800e6d2:	f7fe f9a3 	bl	800ca1c <malloc>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	6270      	str	r0, [r6, #36]	; 0x24
 800e6da:	b928      	cbnz	r0, 800e6e8 <__pow5mult+0x40>
 800e6dc:	4b1d      	ldr	r3, [pc, #116]	; (800e754 <__pow5mult+0xac>)
 800e6de:	481e      	ldr	r0, [pc, #120]	; (800e758 <__pow5mult+0xb0>)
 800e6e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e6e4:	f000 fb1e 	bl	800ed24 <__assert_func>
 800e6e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6ec:	6004      	str	r4, [r0, #0]
 800e6ee:	60c4      	str	r4, [r0, #12]
 800e6f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6f8:	b94c      	cbnz	r4, 800e70e <__pow5mult+0x66>
 800e6fa:	f240 2171 	movw	r1, #625	; 0x271
 800e6fe:	4630      	mov	r0, r6
 800e700:	f7ff ff12 	bl	800e528 <__i2b>
 800e704:	2300      	movs	r3, #0
 800e706:	f8c8 0008 	str.w	r0, [r8, #8]
 800e70a:	4604      	mov	r4, r0
 800e70c:	6003      	str	r3, [r0, #0]
 800e70e:	f04f 0900 	mov.w	r9, #0
 800e712:	07eb      	lsls	r3, r5, #31
 800e714:	d50a      	bpl.n	800e72c <__pow5mult+0x84>
 800e716:	4639      	mov	r1, r7
 800e718:	4622      	mov	r2, r4
 800e71a:	4630      	mov	r0, r6
 800e71c:	f7ff ff1a 	bl	800e554 <__multiply>
 800e720:	4639      	mov	r1, r7
 800e722:	4680      	mov	r8, r0
 800e724:	4630      	mov	r0, r6
 800e726:	f7ff fe47 	bl	800e3b8 <_Bfree>
 800e72a:	4647      	mov	r7, r8
 800e72c:	106d      	asrs	r5, r5, #1
 800e72e:	d00b      	beq.n	800e748 <__pow5mult+0xa0>
 800e730:	6820      	ldr	r0, [r4, #0]
 800e732:	b938      	cbnz	r0, 800e744 <__pow5mult+0x9c>
 800e734:	4622      	mov	r2, r4
 800e736:	4621      	mov	r1, r4
 800e738:	4630      	mov	r0, r6
 800e73a:	f7ff ff0b 	bl	800e554 <__multiply>
 800e73e:	6020      	str	r0, [r4, #0]
 800e740:	f8c0 9000 	str.w	r9, [r0]
 800e744:	4604      	mov	r4, r0
 800e746:	e7e4      	b.n	800e712 <__pow5mult+0x6a>
 800e748:	4638      	mov	r0, r7
 800e74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e74e:	bf00      	nop
 800e750:	08010bc8 	.word	0x08010bc8
 800e754:	080109f5 	.word	0x080109f5
 800e758:	08010a78 	.word	0x08010a78

0800e75c <__lshift>:
 800e75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e760:	460c      	mov	r4, r1
 800e762:	6849      	ldr	r1, [r1, #4]
 800e764:	6923      	ldr	r3, [r4, #16]
 800e766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e76a:	68a3      	ldr	r3, [r4, #8]
 800e76c:	4607      	mov	r7, r0
 800e76e:	4691      	mov	r9, r2
 800e770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e774:	f108 0601 	add.w	r6, r8, #1
 800e778:	42b3      	cmp	r3, r6
 800e77a:	db0b      	blt.n	800e794 <__lshift+0x38>
 800e77c:	4638      	mov	r0, r7
 800e77e:	f7ff fddb 	bl	800e338 <_Balloc>
 800e782:	4605      	mov	r5, r0
 800e784:	b948      	cbnz	r0, 800e79a <__lshift+0x3e>
 800e786:	4602      	mov	r2, r0
 800e788:	4b2a      	ldr	r3, [pc, #168]	; (800e834 <__lshift+0xd8>)
 800e78a:	482b      	ldr	r0, [pc, #172]	; (800e838 <__lshift+0xdc>)
 800e78c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e790:	f000 fac8 	bl	800ed24 <__assert_func>
 800e794:	3101      	adds	r1, #1
 800e796:	005b      	lsls	r3, r3, #1
 800e798:	e7ee      	b.n	800e778 <__lshift+0x1c>
 800e79a:	2300      	movs	r3, #0
 800e79c:	f100 0114 	add.w	r1, r0, #20
 800e7a0:	f100 0210 	add.w	r2, r0, #16
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	4553      	cmp	r3, sl
 800e7a8:	db37      	blt.n	800e81a <__lshift+0xbe>
 800e7aa:	6920      	ldr	r0, [r4, #16]
 800e7ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7b0:	f104 0314 	add.w	r3, r4, #20
 800e7b4:	f019 091f 	ands.w	r9, r9, #31
 800e7b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e7bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e7c0:	d02f      	beq.n	800e822 <__lshift+0xc6>
 800e7c2:	f1c9 0e20 	rsb	lr, r9, #32
 800e7c6:	468a      	mov	sl, r1
 800e7c8:	f04f 0c00 	mov.w	ip, #0
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	fa02 f209 	lsl.w	r2, r2, r9
 800e7d2:	ea42 020c 	orr.w	r2, r2, ip
 800e7d6:	f84a 2b04 	str.w	r2, [sl], #4
 800e7da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7de:	4298      	cmp	r0, r3
 800e7e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e7e4:	d8f2      	bhi.n	800e7cc <__lshift+0x70>
 800e7e6:	1b03      	subs	r3, r0, r4
 800e7e8:	3b15      	subs	r3, #21
 800e7ea:	f023 0303 	bic.w	r3, r3, #3
 800e7ee:	3304      	adds	r3, #4
 800e7f0:	f104 0215 	add.w	r2, r4, #21
 800e7f4:	4290      	cmp	r0, r2
 800e7f6:	bf38      	it	cc
 800e7f8:	2304      	movcc	r3, #4
 800e7fa:	f841 c003 	str.w	ip, [r1, r3]
 800e7fe:	f1bc 0f00 	cmp.w	ip, #0
 800e802:	d001      	beq.n	800e808 <__lshift+0xac>
 800e804:	f108 0602 	add.w	r6, r8, #2
 800e808:	3e01      	subs	r6, #1
 800e80a:	4638      	mov	r0, r7
 800e80c:	612e      	str	r6, [r5, #16]
 800e80e:	4621      	mov	r1, r4
 800e810:	f7ff fdd2 	bl	800e3b8 <_Bfree>
 800e814:	4628      	mov	r0, r5
 800e816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e81a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e81e:	3301      	adds	r3, #1
 800e820:	e7c1      	b.n	800e7a6 <__lshift+0x4a>
 800e822:	3904      	subs	r1, #4
 800e824:	f853 2b04 	ldr.w	r2, [r3], #4
 800e828:	f841 2f04 	str.w	r2, [r1, #4]!
 800e82c:	4298      	cmp	r0, r3
 800e82e:	d8f9      	bhi.n	800e824 <__lshift+0xc8>
 800e830:	e7ea      	b.n	800e808 <__lshift+0xac>
 800e832:	bf00      	nop
 800e834:	08010a67 	.word	0x08010a67
 800e838:	08010a78 	.word	0x08010a78

0800e83c <__mcmp>:
 800e83c:	b530      	push	{r4, r5, lr}
 800e83e:	6902      	ldr	r2, [r0, #16]
 800e840:	690c      	ldr	r4, [r1, #16]
 800e842:	1b12      	subs	r2, r2, r4
 800e844:	d10e      	bne.n	800e864 <__mcmp+0x28>
 800e846:	f100 0314 	add.w	r3, r0, #20
 800e84a:	3114      	adds	r1, #20
 800e84c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e850:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e854:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e858:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e85c:	42a5      	cmp	r5, r4
 800e85e:	d003      	beq.n	800e868 <__mcmp+0x2c>
 800e860:	d305      	bcc.n	800e86e <__mcmp+0x32>
 800e862:	2201      	movs	r2, #1
 800e864:	4610      	mov	r0, r2
 800e866:	bd30      	pop	{r4, r5, pc}
 800e868:	4283      	cmp	r3, r0
 800e86a:	d3f3      	bcc.n	800e854 <__mcmp+0x18>
 800e86c:	e7fa      	b.n	800e864 <__mcmp+0x28>
 800e86e:	f04f 32ff 	mov.w	r2, #4294967295
 800e872:	e7f7      	b.n	800e864 <__mcmp+0x28>

0800e874 <__mdiff>:
 800e874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e878:	460c      	mov	r4, r1
 800e87a:	4606      	mov	r6, r0
 800e87c:	4611      	mov	r1, r2
 800e87e:	4620      	mov	r0, r4
 800e880:	4690      	mov	r8, r2
 800e882:	f7ff ffdb 	bl	800e83c <__mcmp>
 800e886:	1e05      	subs	r5, r0, #0
 800e888:	d110      	bne.n	800e8ac <__mdiff+0x38>
 800e88a:	4629      	mov	r1, r5
 800e88c:	4630      	mov	r0, r6
 800e88e:	f7ff fd53 	bl	800e338 <_Balloc>
 800e892:	b930      	cbnz	r0, 800e8a2 <__mdiff+0x2e>
 800e894:	4b3a      	ldr	r3, [pc, #232]	; (800e980 <__mdiff+0x10c>)
 800e896:	4602      	mov	r2, r0
 800e898:	f240 2132 	movw	r1, #562	; 0x232
 800e89c:	4839      	ldr	r0, [pc, #228]	; (800e984 <__mdiff+0x110>)
 800e89e:	f000 fa41 	bl	800ed24 <__assert_func>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ac:	bfa4      	itt	ge
 800e8ae:	4643      	movge	r3, r8
 800e8b0:	46a0      	movge	r8, r4
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e8b8:	bfa6      	itte	ge
 800e8ba:	461c      	movge	r4, r3
 800e8bc:	2500      	movge	r5, #0
 800e8be:	2501      	movlt	r5, #1
 800e8c0:	f7ff fd3a 	bl	800e338 <_Balloc>
 800e8c4:	b920      	cbnz	r0, 800e8d0 <__mdiff+0x5c>
 800e8c6:	4b2e      	ldr	r3, [pc, #184]	; (800e980 <__mdiff+0x10c>)
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e8ce:	e7e5      	b.n	800e89c <__mdiff+0x28>
 800e8d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e8d4:	6926      	ldr	r6, [r4, #16]
 800e8d6:	60c5      	str	r5, [r0, #12]
 800e8d8:	f104 0914 	add.w	r9, r4, #20
 800e8dc:	f108 0514 	add.w	r5, r8, #20
 800e8e0:	f100 0e14 	add.w	lr, r0, #20
 800e8e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e8e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e8ec:	f108 0210 	add.w	r2, r8, #16
 800e8f0:	46f2      	mov	sl, lr
 800e8f2:	2100      	movs	r1, #0
 800e8f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8fc:	fa1f f883 	uxth.w	r8, r3
 800e900:	fa11 f18b 	uxtah	r1, r1, fp
 800e904:	0c1b      	lsrs	r3, r3, #16
 800e906:	eba1 0808 	sub.w	r8, r1, r8
 800e90a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e90e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e912:	fa1f f888 	uxth.w	r8, r8
 800e916:	1419      	asrs	r1, r3, #16
 800e918:	454e      	cmp	r6, r9
 800e91a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e91e:	f84a 3b04 	str.w	r3, [sl], #4
 800e922:	d8e7      	bhi.n	800e8f4 <__mdiff+0x80>
 800e924:	1b33      	subs	r3, r6, r4
 800e926:	3b15      	subs	r3, #21
 800e928:	f023 0303 	bic.w	r3, r3, #3
 800e92c:	3304      	adds	r3, #4
 800e92e:	3415      	adds	r4, #21
 800e930:	42a6      	cmp	r6, r4
 800e932:	bf38      	it	cc
 800e934:	2304      	movcc	r3, #4
 800e936:	441d      	add	r5, r3
 800e938:	4473      	add	r3, lr
 800e93a:	469e      	mov	lr, r3
 800e93c:	462e      	mov	r6, r5
 800e93e:	4566      	cmp	r6, ip
 800e940:	d30e      	bcc.n	800e960 <__mdiff+0xec>
 800e942:	f10c 0203 	add.w	r2, ip, #3
 800e946:	1b52      	subs	r2, r2, r5
 800e948:	f022 0203 	bic.w	r2, r2, #3
 800e94c:	3d03      	subs	r5, #3
 800e94e:	45ac      	cmp	ip, r5
 800e950:	bf38      	it	cc
 800e952:	2200      	movcc	r2, #0
 800e954:	441a      	add	r2, r3
 800e956:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e95a:	b17b      	cbz	r3, 800e97c <__mdiff+0x108>
 800e95c:	6107      	str	r7, [r0, #16]
 800e95e:	e7a3      	b.n	800e8a8 <__mdiff+0x34>
 800e960:	f856 8b04 	ldr.w	r8, [r6], #4
 800e964:	fa11 f288 	uxtah	r2, r1, r8
 800e968:	1414      	asrs	r4, r2, #16
 800e96a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e96e:	b292      	uxth	r2, r2
 800e970:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e974:	f84e 2b04 	str.w	r2, [lr], #4
 800e978:	1421      	asrs	r1, r4, #16
 800e97a:	e7e0      	b.n	800e93e <__mdiff+0xca>
 800e97c:	3f01      	subs	r7, #1
 800e97e:	e7ea      	b.n	800e956 <__mdiff+0xe2>
 800e980:	08010a67 	.word	0x08010a67
 800e984:	08010a78 	.word	0x08010a78

0800e988 <__d2b>:
 800e988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e98c:	4689      	mov	r9, r1
 800e98e:	2101      	movs	r1, #1
 800e990:	ec57 6b10 	vmov	r6, r7, d0
 800e994:	4690      	mov	r8, r2
 800e996:	f7ff fccf 	bl	800e338 <_Balloc>
 800e99a:	4604      	mov	r4, r0
 800e99c:	b930      	cbnz	r0, 800e9ac <__d2b+0x24>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	4b25      	ldr	r3, [pc, #148]	; (800ea38 <__d2b+0xb0>)
 800e9a2:	4826      	ldr	r0, [pc, #152]	; (800ea3c <__d2b+0xb4>)
 800e9a4:	f240 310a 	movw	r1, #778	; 0x30a
 800e9a8:	f000 f9bc 	bl	800ed24 <__assert_func>
 800e9ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e9b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e9b4:	bb35      	cbnz	r5, 800ea04 <__d2b+0x7c>
 800e9b6:	2e00      	cmp	r6, #0
 800e9b8:	9301      	str	r3, [sp, #4]
 800e9ba:	d028      	beq.n	800ea0e <__d2b+0x86>
 800e9bc:	4668      	mov	r0, sp
 800e9be:	9600      	str	r6, [sp, #0]
 800e9c0:	f7ff fd82 	bl	800e4c8 <__lo0bits>
 800e9c4:	9900      	ldr	r1, [sp, #0]
 800e9c6:	b300      	cbz	r0, 800ea0a <__d2b+0x82>
 800e9c8:	9a01      	ldr	r2, [sp, #4]
 800e9ca:	f1c0 0320 	rsb	r3, r0, #32
 800e9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e9d2:	430b      	orrs	r3, r1
 800e9d4:	40c2      	lsrs	r2, r0
 800e9d6:	6163      	str	r3, [r4, #20]
 800e9d8:	9201      	str	r2, [sp, #4]
 800e9da:	9b01      	ldr	r3, [sp, #4]
 800e9dc:	61a3      	str	r3, [r4, #24]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	bf14      	ite	ne
 800e9e2:	2202      	movne	r2, #2
 800e9e4:	2201      	moveq	r2, #1
 800e9e6:	6122      	str	r2, [r4, #16]
 800e9e8:	b1d5      	cbz	r5, 800ea20 <__d2b+0x98>
 800e9ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e9ee:	4405      	add	r5, r0
 800e9f0:	f8c9 5000 	str.w	r5, [r9]
 800e9f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e9f8:	f8c8 0000 	str.w	r0, [r8]
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	b003      	add	sp, #12
 800ea00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea08:	e7d5      	b.n	800e9b6 <__d2b+0x2e>
 800ea0a:	6161      	str	r1, [r4, #20]
 800ea0c:	e7e5      	b.n	800e9da <__d2b+0x52>
 800ea0e:	a801      	add	r0, sp, #4
 800ea10:	f7ff fd5a 	bl	800e4c8 <__lo0bits>
 800ea14:	9b01      	ldr	r3, [sp, #4]
 800ea16:	6163      	str	r3, [r4, #20]
 800ea18:	2201      	movs	r2, #1
 800ea1a:	6122      	str	r2, [r4, #16]
 800ea1c:	3020      	adds	r0, #32
 800ea1e:	e7e3      	b.n	800e9e8 <__d2b+0x60>
 800ea20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea28:	f8c9 0000 	str.w	r0, [r9]
 800ea2c:	6918      	ldr	r0, [r3, #16]
 800ea2e:	f7ff fd2b 	bl	800e488 <__hi0bits>
 800ea32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea36:	e7df      	b.n	800e9f8 <__d2b+0x70>
 800ea38:	08010a67 	.word	0x08010a67
 800ea3c:	08010a78 	.word	0x08010a78

0800ea40 <_calloc_r>:
 800ea40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea42:	fba1 2402 	umull	r2, r4, r1, r2
 800ea46:	b94c      	cbnz	r4, 800ea5c <_calloc_r+0x1c>
 800ea48:	4611      	mov	r1, r2
 800ea4a:	9201      	str	r2, [sp, #4]
 800ea4c:	f7fe f862 	bl	800cb14 <_malloc_r>
 800ea50:	9a01      	ldr	r2, [sp, #4]
 800ea52:	4605      	mov	r5, r0
 800ea54:	b930      	cbnz	r0, 800ea64 <_calloc_r+0x24>
 800ea56:	4628      	mov	r0, r5
 800ea58:	b003      	add	sp, #12
 800ea5a:	bd30      	pop	{r4, r5, pc}
 800ea5c:	220c      	movs	r2, #12
 800ea5e:	6002      	str	r2, [r0, #0]
 800ea60:	2500      	movs	r5, #0
 800ea62:	e7f8      	b.n	800ea56 <_calloc_r+0x16>
 800ea64:	4621      	mov	r1, r4
 800ea66:	f7fd ffe1 	bl	800ca2c <memset>
 800ea6a:	e7f4      	b.n	800ea56 <_calloc_r+0x16>

0800ea6c <__ssputs_r>:
 800ea6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea70:	688e      	ldr	r6, [r1, #8]
 800ea72:	429e      	cmp	r6, r3
 800ea74:	4682      	mov	sl, r0
 800ea76:	460c      	mov	r4, r1
 800ea78:	4690      	mov	r8, r2
 800ea7a:	461f      	mov	r7, r3
 800ea7c:	d838      	bhi.n	800eaf0 <__ssputs_r+0x84>
 800ea7e:	898a      	ldrh	r2, [r1, #12]
 800ea80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea84:	d032      	beq.n	800eaec <__ssputs_r+0x80>
 800ea86:	6825      	ldr	r5, [r4, #0]
 800ea88:	6909      	ldr	r1, [r1, #16]
 800ea8a:	eba5 0901 	sub.w	r9, r5, r1
 800ea8e:	6965      	ldr	r5, [r4, #20]
 800ea90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea98:	3301      	adds	r3, #1
 800ea9a:	444b      	add	r3, r9
 800ea9c:	106d      	asrs	r5, r5, #1
 800ea9e:	429d      	cmp	r5, r3
 800eaa0:	bf38      	it	cc
 800eaa2:	461d      	movcc	r5, r3
 800eaa4:	0553      	lsls	r3, r2, #21
 800eaa6:	d531      	bpl.n	800eb0c <__ssputs_r+0xa0>
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	f7fe f833 	bl	800cb14 <_malloc_r>
 800eaae:	4606      	mov	r6, r0
 800eab0:	b950      	cbnz	r0, 800eac8 <__ssputs_r+0x5c>
 800eab2:	230c      	movs	r3, #12
 800eab4:	f8ca 3000 	str.w	r3, [sl]
 800eab8:	89a3      	ldrh	r3, [r4, #12]
 800eaba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eabe:	81a3      	strh	r3, [r4, #12]
 800eac0:	f04f 30ff 	mov.w	r0, #4294967295
 800eac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac8:	6921      	ldr	r1, [r4, #16]
 800eaca:	464a      	mov	r2, r9
 800eacc:	f7ff fc1a 	bl	800e304 <memcpy>
 800ead0:	89a3      	ldrh	r3, [r4, #12]
 800ead2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ead6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eada:	81a3      	strh	r3, [r4, #12]
 800eadc:	6126      	str	r6, [r4, #16]
 800eade:	6165      	str	r5, [r4, #20]
 800eae0:	444e      	add	r6, r9
 800eae2:	eba5 0509 	sub.w	r5, r5, r9
 800eae6:	6026      	str	r6, [r4, #0]
 800eae8:	60a5      	str	r5, [r4, #8]
 800eaea:	463e      	mov	r6, r7
 800eaec:	42be      	cmp	r6, r7
 800eaee:	d900      	bls.n	800eaf2 <__ssputs_r+0x86>
 800eaf0:	463e      	mov	r6, r7
 800eaf2:	6820      	ldr	r0, [r4, #0]
 800eaf4:	4632      	mov	r2, r6
 800eaf6:	4641      	mov	r1, r8
 800eaf8:	f000 f959 	bl	800edae <memmove>
 800eafc:	68a3      	ldr	r3, [r4, #8]
 800eafe:	1b9b      	subs	r3, r3, r6
 800eb00:	60a3      	str	r3, [r4, #8]
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	4433      	add	r3, r6
 800eb06:	6023      	str	r3, [r4, #0]
 800eb08:	2000      	movs	r0, #0
 800eb0a:	e7db      	b.n	800eac4 <__ssputs_r+0x58>
 800eb0c:	462a      	mov	r2, r5
 800eb0e:	f000 f968 	bl	800ede2 <_realloc_r>
 800eb12:	4606      	mov	r6, r0
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d1e1      	bne.n	800eadc <__ssputs_r+0x70>
 800eb18:	6921      	ldr	r1, [r4, #16]
 800eb1a:	4650      	mov	r0, sl
 800eb1c:	f7fd ff8e 	bl	800ca3c <_free_r>
 800eb20:	e7c7      	b.n	800eab2 <__ssputs_r+0x46>
	...

0800eb24 <_svfiprintf_r>:
 800eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb28:	4698      	mov	r8, r3
 800eb2a:	898b      	ldrh	r3, [r1, #12]
 800eb2c:	061b      	lsls	r3, r3, #24
 800eb2e:	b09d      	sub	sp, #116	; 0x74
 800eb30:	4607      	mov	r7, r0
 800eb32:	460d      	mov	r5, r1
 800eb34:	4614      	mov	r4, r2
 800eb36:	d50e      	bpl.n	800eb56 <_svfiprintf_r+0x32>
 800eb38:	690b      	ldr	r3, [r1, #16]
 800eb3a:	b963      	cbnz	r3, 800eb56 <_svfiprintf_r+0x32>
 800eb3c:	2140      	movs	r1, #64	; 0x40
 800eb3e:	f7fd ffe9 	bl	800cb14 <_malloc_r>
 800eb42:	6028      	str	r0, [r5, #0]
 800eb44:	6128      	str	r0, [r5, #16]
 800eb46:	b920      	cbnz	r0, 800eb52 <_svfiprintf_r+0x2e>
 800eb48:	230c      	movs	r3, #12
 800eb4a:	603b      	str	r3, [r7, #0]
 800eb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb50:	e0d1      	b.n	800ecf6 <_svfiprintf_r+0x1d2>
 800eb52:	2340      	movs	r3, #64	; 0x40
 800eb54:	616b      	str	r3, [r5, #20]
 800eb56:	2300      	movs	r3, #0
 800eb58:	9309      	str	r3, [sp, #36]	; 0x24
 800eb5a:	2320      	movs	r3, #32
 800eb5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb60:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb64:	2330      	movs	r3, #48	; 0x30
 800eb66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ed10 <_svfiprintf_r+0x1ec>
 800eb6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb6e:	f04f 0901 	mov.w	r9, #1
 800eb72:	4623      	mov	r3, r4
 800eb74:	469a      	mov	sl, r3
 800eb76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb7a:	b10a      	cbz	r2, 800eb80 <_svfiprintf_r+0x5c>
 800eb7c:	2a25      	cmp	r2, #37	; 0x25
 800eb7e:	d1f9      	bne.n	800eb74 <_svfiprintf_r+0x50>
 800eb80:	ebba 0b04 	subs.w	fp, sl, r4
 800eb84:	d00b      	beq.n	800eb9e <_svfiprintf_r+0x7a>
 800eb86:	465b      	mov	r3, fp
 800eb88:	4622      	mov	r2, r4
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	4638      	mov	r0, r7
 800eb8e:	f7ff ff6d 	bl	800ea6c <__ssputs_r>
 800eb92:	3001      	adds	r0, #1
 800eb94:	f000 80aa 	beq.w	800ecec <_svfiprintf_r+0x1c8>
 800eb98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb9a:	445a      	add	r2, fp
 800eb9c:	9209      	str	r2, [sp, #36]	; 0x24
 800eb9e:	f89a 3000 	ldrb.w	r3, [sl]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f000 80a2 	beq.w	800ecec <_svfiprintf_r+0x1c8>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ebae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebb2:	f10a 0a01 	add.w	sl, sl, #1
 800ebb6:	9304      	str	r3, [sp, #16]
 800ebb8:	9307      	str	r3, [sp, #28]
 800ebba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebbe:	931a      	str	r3, [sp, #104]	; 0x68
 800ebc0:	4654      	mov	r4, sl
 800ebc2:	2205      	movs	r2, #5
 800ebc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebc8:	4851      	ldr	r0, [pc, #324]	; (800ed10 <_svfiprintf_r+0x1ec>)
 800ebca:	f7f1 fb11 	bl	80001f0 <memchr>
 800ebce:	9a04      	ldr	r2, [sp, #16]
 800ebd0:	b9d8      	cbnz	r0, 800ec0a <_svfiprintf_r+0xe6>
 800ebd2:	06d0      	lsls	r0, r2, #27
 800ebd4:	bf44      	itt	mi
 800ebd6:	2320      	movmi	r3, #32
 800ebd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebdc:	0711      	lsls	r1, r2, #28
 800ebde:	bf44      	itt	mi
 800ebe0:	232b      	movmi	r3, #43	; 0x2b
 800ebe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebe6:	f89a 3000 	ldrb.w	r3, [sl]
 800ebea:	2b2a      	cmp	r3, #42	; 0x2a
 800ebec:	d015      	beq.n	800ec1a <_svfiprintf_r+0xf6>
 800ebee:	9a07      	ldr	r2, [sp, #28]
 800ebf0:	4654      	mov	r4, sl
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	f04f 0c0a 	mov.w	ip, #10
 800ebf8:	4621      	mov	r1, r4
 800ebfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebfe:	3b30      	subs	r3, #48	; 0x30
 800ec00:	2b09      	cmp	r3, #9
 800ec02:	d94e      	bls.n	800eca2 <_svfiprintf_r+0x17e>
 800ec04:	b1b0      	cbz	r0, 800ec34 <_svfiprintf_r+0x110>
 800ec06:	9207      	str	r2, [sp, #28]
 800ec08:	e014      	b.n	800ec34 <_svfiprintf_r+0x110>
 800ec0a:	eba0 0308 	sub.w	r3, r0, r8
 800ec0e:	fa09 f303 	lsl.w	r3, r9, r3
 800ec12:	4313      	orrs	r3, r2
 800ec14:	9304      	str	r3, [sp, #16]
 800ec16:	46a2      	mov	sl, r4
 800ec18:	e7d2      	b.n	800ebc0 <_svfiprintf_r+0x9c>
 800ec1a:	9b03      	ldr	r3, [sp, #12]
 800ec1c:	1d19      	adds	r1, r3, #4
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	9103      	str	r1, [sp, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	bfbb      	ittet	lt
 800ec26:	425b      	neglt	r3, r3
 800ec28:	f042 0202 	orrlt.w	r2, r2, #2
 800ec2c:	9307      	strge	r3, [sp, #28]
 800ec2e:	9307      	strlt	r3, [sp, #28]
 800ec30:	bfb8      	it	lt
 800ec32:	9204      	strlt	r2, [sp, #16]
 800ec34:	7823      	ldrb	r3, [r4, #0]
 800ec36:	2b2e      	cmp	r3, #46	; 0x2e
 800ec38:	d10c      	bne.n	800ec54 <_svfiprintf_r+0x130>
 800ec3a:	7863      	ldrb	r3, [r4, #1]
 800ec3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ec3e:	d135      	bne.n	800ecac <_svfiprintf_r+0x188>
 800ec40:	9b03      	ldr	r3, [sp, #12]
 800ec42:	1d1a      	adds	r2, r3, #4
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	9203      	str	r2, [sp, #12]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	bfb8      	it	lt
 800ec4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec50:	3402      	adds	r4, #2
 800ec52:	9305      	str	r3, [sp, #20]
 800ec54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ed20 <_svfiprintf_r+0x1fc>
 800ec58:	7821      	ldrb	r1, [r4, #0]
 800ec5a:	2203      	movs	r2, #3
 800ec5c:	4650      	mov	r0, sl
 800ec5e:	f7f1 fac7 	bl	80001f0 <memchr>
 800ec62:	b140      	cbz	r0, 800ec76 <_svfiprintf_r+0x152>
 800ec64:	2340      	movs	r3, #64	; 0x40
 800ec66:	eba0 000a 	sub.w	r0, r0, sl
 800ec6a:	fa03 f000 	lsl.w	r0, r3, r0
 800ec6e:	9b04      	ldr	r3, [sp, #16]
 800ec70:	4303      	orrs	r3, r0
 800ec72:	3401      	adds	r4, #1
 800ec74:	9304      	str	r3, [sp, #16]
 800ec76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec7a:	4826      	ldr	r0, [pc, #152]	; (800ed14 <_svfiprintf_r+0x1f0>)
 800ec7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec80:	2206      	movs	r2, #6
 800ec82:	f7f1 fab5 	bl	80001f0 <memchr>
 800ec86:	2800      	cmp	r0, #0
 800ec88:	d038      	beq.n	800ecfc <_svfiprintf_r+0x1d8>
 800ec8a:	4b23      	ldr	r3, [pc, #140]	; (800ed18 <_svfiprintf_r+0x1f4>)
 800ec8c:	bb1b      	cbnz	r3, 800ecd6 <_svfiprintf_r+0x1b2>
 800ec8e:	9b03      	ldr	r3, [sp, #12]
 800ec90:	3307      	adds	r3, #7
 800ec92:	f023 0307 	bic.w	r3, r3, #7
 800ec96:	3308      	adds	r3, #8
 800ec98:	9303      	str	r3, [sp, #12]
 800ec9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec9c:	4433      	add	r3, r6
 800ec9e:	9309      	str	r3, [sp, #36]	; 0x24
 800eca0:	e767      	b.n	800eb72 <_svfiprintf_r+0x4e>
 800eca2:	fb0c 3202 	mla	r2, ip, r2, r3
 800eca6:	460c      	mov	r4, r1
 800eca8:	2001      	movs	r0, #1
 800ecaa:	e7a5      	b.n	800ebf8 <_svfiprintf_r+0xd4>
 800ecac:	2300      	movs	r3, #0
 800ecae:	3401      	adds	r4, #1
 800ecb0:	9305      	str	r3, [sp, #20]
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	f04f 0c0a 	mov.w	ip, #10
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecbe:	3a30      	subs	r2, #48	; 0x30
 800ecc0:	2a09      	cmp	r2, #9
 800ecc2:	d903      	bls.n	800eccc <_svfiprintf_r+0x1a8>
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d0c5      	beq.n	800ec54 <_svfiprintf_r+0x130>
 800ecc8:	9105      	str	r1, [sp, #20]
 800ecca:	e7c3      	b.n	800ec54 <_svfiprintf_r+0x130>
 800eccc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e7f0      	b.n	800ecb8 <_svfiprintf_r+0x194>
 800ecd6:	ab03      	add	r3, sp, #12
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	462a      	mov	r2, r5
 800ecdc:	4b0f      	ldr	r3, [pc, #60]	; (800ed1c <_svfiprintf_r+0x1f8>)
 800ecde:	a904      	add	r1, sp, #16
 800ece0:	4638      	mov	r0, r7
 800ece2:	f7fe f82b 	bl	800cd3c <_printf_float>
 800ece6:	1c42      	adds	r2, r0, #1
 800ece8:	4606      	mov	r6, r0
 800ecea:	d1d6      	bne.n	800ec9a <_svfiprintf_r+0x176>
 800ecec:	89ab      	ldrh	r3, [r5, #12]
 800ecee:	065b      	lsls	r3, r3, #25
 800ecf0:	f53f af2c 	bmi.w	800eb4c <_svfiprintf_r+0x28>
 800ecf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecf6:	b01d      	add	sp, #116	; 0x74
 800ecf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfc:	ab03      	add	r3, sp, #12
 800ecfe:	9300      	str	r3, [sp, #0]
 800ed00:	462a      	mov	r2, r5
 800ed02:	4b06      	ldr	r3, [pc, #24]	; (800ed1c <_svfiprintf_r+0x1f8>)
 800ed04:	a904      	add	r1, sp, #16
 800ed06:	4638      	mov	r0, r7
 800ed08:	f7fe fabc 	bl	800d284 <_printf_i>
 800ed0c:	e7eb      	b.n	800ece6 <_svfiprintf_r+0x1c2>
 800ed0e:	bf00      	nop
 800ed10:	08010bd4 	.word	0x08010bd4
 800ed14:	08010bde 	.word	0x08010bde
 800ed18:	0800cd3d 	.word	0x0800cd3d
 800ed1c:	0800ea6d 	.word	0x0800ea6d
 800ed20:	08010bda 	.word	0x08010bda

0800ed24 <__assert_func>:
 800ed24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed26:	4614      	mov	r4, r2
 800ed28:	461a      	mov	r2, r3
 800ed2a:	4b09      	ldr	r3, [pc, #36]	; (800ed50 <__assert_func+0x2c>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4605      	mov	r5, r0
 800ed30:	68d8      	ldr	r0, [r3, #12]
 800ed32:	b14c      	cbz	r4, 800ed48 <__assert_func+0x24>
 800ed34:	4b07      	ldr	r3, [pc, #28]	; (800ed54 <__assert_func+0x30>)
 800ed36:	9100      	str	r1, [sp, #0]
 800ed38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed3c:	4906      	ldr	r1, [pc, #24]	; (800ed58 <__assert_func+0x34>)
 800ed3e:	462b      	mov	r3, r5
 800ed40:	f000 f80e 	bl	800ed60 <fiprintf>
 800ed44:	f000 faa4 	bl	800f290 <abort>
 800ed48:	4b04      	ldr	r3, [pc, #16]	; (800ed5c <__assert_func+0x38>)
 800ed4a:	461c      	mov	r4, r3
 800ed4c:	e7f3      	b.n	800ed36 <__assert_func+0x12>
 800ed4e:	bf00      	nop
 800ed50:	2000007c 	.word	0x2000007c
 800ed54:	08010be5 	.word	0x08010be5
 800ed58:	08010bf2 	.word	0x08010bf2
 800ed5c:	08010c20 	.word	0x08010c20

0800ed60 <fiprintf>:
 800ed60:	b40e      	push	{r1, r2, r3}
 800ed62:	b503      	push	{r0, r1, lr}
 800ed64:	4601      	mov	r1, r0
 800ed66:	ab03      	add	r3, sp, #12
 800ed68:	4805      	ldr	r0, [pc, #20]	; (800ed80 <fiprintf+0x20>)
 800ed6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed6e:	6800      	ldr	r0, [r0, #0]
 800ed70:	9301      	str	r3, [sp, #4]
 800ed72:	f000 f88f 	bl	800ee94 <_vfiprintf_r>
 800ed76:	b002      	add	sp, #8
 800ed78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed7c:	b003      	add	sp, #12
 800ed7e:	4770      	bx	lr
 800ed80:	2000007c 	.word	0x2000007c

0800ed84 <__retarget_lock_init_recursive>:
 800ed84:	4770      	bx	lr

0800ed86 <__retarget_lock_acquire_recursive>:
 800ed86:	4770      	bx	lr

0800ed88 <__retarget_lock_release_recursive>:
 800ed88:	4770      	bx	lr

0800ed8a <__ascii_mbtowc>:
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	b901      	cbnz	r1, 800ed90 <__ascii_mbtowc+0x6>
 800ed8e:	a901      	add	r1, sp, #4
 800ed90:	b142      	cbz	r2, 800eda4 <__ascii_mbtowc+0x1a>
 800ed92:	b14b      	cbz	r3, 800eda8 <__ascii_mbtowc+0x1e>
 800ed94:	7813      	ldrb	r3, [r2, #0]
 800ed96:	600b      	str	r3, [r1, #0]
 800ed98:	7812      	ldrb	r2, [r2, #0]
 800ed9a:	1e10      	subs	r0, r2, #0
 800ed9c:	bf18      	it	ne
 800ed9e:	2001      	movne	r0, #1
 800eda0:	b002      	add	sp, #8
 800eda2:	4770      	bx	lr
 800eda4:	4610      	mov	r0, r2
 800eda6:	e7fb      	b.n	800eda0 <__ascii_mbtowc+0x16>
 800eda8:	f06f 0001 	mvn.w	r0, #1
 800edac:	e7f8      	b.n	800eda0 <__ascii_mbtowc+0x16>

0800edae <memmove>:
 800edae:	4288      	cmp	r0, r1
 800edb0:	b510      	push	{r4, lr}
 800edb2:	eb01 0402 	add.w	r4, r1, r2
 800edb6:	d902      	bls.n	800edbe <memmove+0x10>
 800edb8:	4284      	cmp	r4, r0
 800edba:	4623      	mov	r3, r4
 800edbc:	d807      	bhi.n	800edce <memmove+0x20>
 800edbe:	1e43      	subs	r3, r0, #1
 800edc0:	42a1      	cmp	r1, r4
 800edc2:	d008      	beq.n	800edd6 <memmove+0x28>
 800edc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edc8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edcc:	e7f8      	b.n	800edc0 <memmove+0x12>
 800edce:	4402      	add	r2, r0
 800edd0:	4601      	mov	r1, r0
 800edd2:	428a      	cmp	r2, r1
 800edd4:	d100      	bne.n	800edd8 <memmove+0x2a>
 800edd6:	bd10      	pop	{r4, pc}
 800edd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eddc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ede0:	e7f7      	b.n	800edd2 <memmove+0x24>

0800ede2 <_realloc_r>:
 800ede2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ede6:	4680      	mov	r8, r0
 800ede8:	4614      	mov	r4, r2
 800edea:	460e      	mov	r6, r1
 800edec:	b921      	cbnz	r1, 800edf8 <_realloc_r+0x16>
 800edee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edf2:	4611      	mov	r1, r2
 800edf4:	f7fd be8e 	b.w	800cb14 <_malloc_r>
 800edf8:	b92a      	cbnz	r2, 800ee06 <_realloc_r+0x24>
 800edfa:	f7fd fe1f 	bl	800ca3c <_free_r>
 800edfe:	4625      	mov	r5, r4
 800ee00:	4628      	mov	r0, r5
 800ee02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee06:	f000 fc67 	bl	800f6d8 <_malloc_usable_size_r>
 800ee0a:	4284      	cmp	r4, r0
 800ee0c:	4607      	mov	r7, r0
 800ee0e:	d802      	bhi.n	800ee16 <_realloc_r+0x34>
 800ee10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee14:	d812      	bhi.n	800ee3c <_realloc_r+0x5a>
 800ee16:	4621      	mov	r1, r4
 800ee18:	4640      	mov	r0, r8
 800ee1a:	f7fd fe7b 	bl	800cb14 <_malloc_r>
 800ee1e:	4605      	mov	r5, r0
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d0ed      	beq.n	800ee00 <_realloc_r+0x1e>
 800ee24:	42bc      	cmp	r4, r7
 800ee26:	4622      	mov	r2, r4
 800ee28:	4631      	mov	r1, r6
 800ee2a:	bf28      	it	cs
 800ee2c:	463a      	movcs	r2, r7
 800ee2e:	f7ff fa69 	bl	800e304 <memcpy>
 800ee32:	4631      	mov	r1, r6
 800ee34:	4640      	mov	r0, r8
 800ee36:	f7fd fe01 	bl	800ca3c <_free_r>
 800ee3a:	e7e1      	b.n	800ee00 <_realloc_r+0x1e>
 800ee3c:	4635      	mov	r5, r6
 800ee3e:	e7df      	b.n	800ee00 <_realloc_r+0x1e>

0800ee40 <__sfputc_r>:
 800ee40:	6893      	ldr	r3, [r2, #8]
 800ee42:	3b01      	subs	r3, #1
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	b410      	push	{r4}
 800ee48:	6093      	str	r3, [r2, #8]
 800ee4a:	da08      	bge.n	800ee5e <__sfputc_r+0x1e>
 800ee4c:	6994      	ldr	r4, [r2, #24]
 800ee4e:	42a3      	cmp	r3, r4
 800ee50:	db01      	blt.n	800ee56 <__sfputc_r+0x16>
 800ee52:	290a      	cmp	r1, #10
 800ee54:	d103      	bne.n	800ee5e <__sfputc_r+0x1e>
 800ee56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee5a:	f000 b94b 	b.w	800f0f4 <__swbuf_r>
 800ee5e:	6813      	ldr	r3, [r2, #0]
 800ee60:	1c58      	adds	r0, r3, #1
 800ee62:	6010      	str	r0, [r2, #0]
 800ee64:	7019      	strb	r1, [r3, #0]
 800ee66:	4608      	mov	r0, r1
 800ee68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee6c:	4770      	bx	lr

0800ee6e <__sfputs_r>:
 800ee6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee70:	4606      	mov	r6, r0
 800ee72:	460f      	mov	r7, r1
 800ee74:	4614      	mov	r4, r2
 800ee76:	18d5      	adds	r5, r2, r3
 800ee78:	42ac      	cmp	r4, r5
 800ee7a:	d101      	bne.n	800ee80 <__sfputs_r+0x12>
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	e007      	b.n	800ee90 <__sfputs_r+0x22>
 800ee80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee84:	463a      	mov	r2, r7
 800ee86:	4630      	mov	r0, r6
 800ee88:	f7ff ffda 	bl	800ee40 <__sfputc_r>
 800ee8c:	1c43      	adds	r3, r0, #1
 800ee8e:	d1f3      	bne.n	800ee78 <__sfputs_r+0xa>
 800ee90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee94 <_vfiprintf_r>:
 800ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	460d      	mov	r5, r1
 800ee9a:	b09d      	sub	sp, #116	; 0x74
 800ee9c:	4614      	mov	r4, r2
 800ee9e:	4698      	mov	r8, r3
 800eea0:	4606      	mov	r6, r0
 800eea2:	b118      	cbz	r0, 800eeac <_vfiprintf_r+0x18>
 800eea4:	6983      	ldr	r3, [r0, #24]
 800eea6:	b90b      	cbnz	r3, 800eeac <_vfiprintf_r+0x18>
 800eea8:	f000 fb14 	bl	800f4d4 <__sinit>
 800eeac:	4b89      	ldr	r3, [pc, #548]	; (800f0d4 <_vfiprintf_r+0x240>)
 800eeae:	429d      	cmp	r5, r3
 800eeb0:	d11b      	bne.n	800eeea <_vfiprintf_r+0x56>
 800eeb2:	6875      	ldr	r5, [r6, #4]
 800eeb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eeb6:	07d9      	lsls	r1, r3, #31
 800eeb8:	d405      	bmi.n	800eec6 <_vfiprintf_r+0x32>
 800eeba:	89ab      	ldrh	r3, [r5, #12]
 800eebc:	059a      	lsls	r2, r3, #22
 800eebe:	d402      	bmi.n	800eec6 <_vfiprintf_r+0x32>
 800eec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eec2:	f7ff ff60 	bl	800ed86 <__retarget_lock_acquire_recursive>
 800eec6:	89ab      	ldrh	r3, [r5, #12]
 800eec8:	071b      	lsls	r3, r3, #28
 800eeca:	d501      	bpl.n	800eed0 <_vfiprintf_r+0x3c>
 800eecc:	692b      	ldr	r3, [r5, #16]
 800eece:	b9eb      	cbnz	r3, 800ef0c <_vfiprintf_r+0x78>
 800eed0:	4629      	mov	r1, r5
 800eed2:	4630      	mov	r0, r6
 800eed4:	f000 f96e 	bl	800f1b4 <__swsetup_r>
 800eed8:	b1c0      	cbz	r0, 800ef0c <_vfiprintf_r+0x78>
 800eeda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eedc:	07dc      	lsls	r4, r3, #31
 800eede:	d50e      	bpl.n	800eefe <_vfiprintf_r+0x6a>
 800eee0:	f04f 30ff 	mov.w	r0, #4294967295
 800eee4:	b01d      	add	sp, #116	; 0x74
 800eee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeea:	4b7b      	ldr	r3, [pc, #492]	; (800f0d8 <_vfiprintf_r+0x244>)
 800eeec:	429d      	cmp	r5, r3
 800eeee:	d101      	bne.n	800eef4 <_vfiprintf_r+0x60>
 800eef0:	68b5      	ldr	r5, [r6, #8]
 800eef2:	e7df      	b.n	800eeb4 <_vfiprintf_r+0x20>
 800eef4:	4b79      	ldr	r3, [pc, #484]	; (800f0dc <_vfiprintf_r+0x248>)
 800eef6:	429d      	cmp	r5, r3
 800eef8:	bf08      	it	eq
 800eefa:	68f5      	ldreq	r5, [r6, #12]
 800eefc:	e7da      	b.n	800eeb4 <_vfiprintf_r+0x20>
 800eefe:	89ab      	ldrh	r3, [r5, #12]
 800ef00:	0598      	lsls	r0, r3, #22
 800ef02:	d4ed      	bmi.n	800eee0 <_vfiprintf_r+0x4c>
 800ef04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef06:	f7ff ff3f 	bl	800ed88 <__retarget_lock_release_recursive>
 800ef0a:	e7e9      	b.n	800eee0 <_vfiprintf_r+0x4c>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef10:	2320      	movs	r3, #32
 800ef12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef1a:	2330      	movs	r3, #48	; 0x30
 800ef1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f0e0 <_vfiprintf_r+0x24c>
 800ef20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef24:	f04f 0901 	mov.w	r9, #1
 800ef28:	4623      	mov	r3, r4
 800ef2a:	469a      	mov	sl, r3
 800ef2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef30:	b10a      	cbz	r2, 800ef36 <_vfiprintf_r+0xa2>
 800ef32:	2a25      	cmp	r2, #37	; 0x25
 800ef34:	d1f9      	bne.n	800ef2a <_vfiprintf_r+0x96>
 800ef36:	ebba 0b04 	subs.w	fp, sl, r4
 800ef3a:	d00b      	beq.n	800ef54 <_vfiprintf_r+0xc0>
 800ef3c:	465b      	mov	r3, fp
 800ef3e:	4622      	mov	r2, r4
 800ef40:	4629      	mov	r1, r5
 800ef42:	4630      	mov	r0, r6
 800ef44:	f7ff ff93 	bl	800ee6e <__sfputs_r>
 800ef48:	3001      	adds	r0, #1
 800ef4a:	f000 80aa 	beq.w	800f0a2 <_vfiprintf_r+0x20e>
 800ef4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef50:	445a      	add	r2, fp
 800ef52:	9209      	str	r2, [sp, #36]	; 0x24
 800ef54:	f89a 3000 	ldrb.w	r3, [sl]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	f000 80a2 	beq.w	800f0a2 <_vfiprintf_r+0x20e>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	f04f 32ff 	mov.w	r2, #4294967295
 800ef64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef68:	f10a 0a01 	add.w	sl, sl, #1
 800ef6c:	9304      	str	r3, [sp, #16]
 800ef6e:	9307      	str	r3, [sp, #28]
 800ef70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef74:	931a      	str	r3, [sp, #104]	; 0x68
 800ef76:	4654      	mov	r4, sl
 800ef78:	2205      	movs	r2, #5
 800ef7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef7e:	4858      	ldr	r0, [pc, #352]	; (800f0e0 <_vfiprintf_r+0x24c>)
 800ef80:	f7f1 f936 	bl	80001f0 <memchr>
 800ef84:	9a04      	ldr	r2, [sp, #16]
 800ef86:	b9d8      	cbnz	r0, 800efc0 <_vfiprintf_r+0x12c>
 800ef88:	06d1      	lsls	r1, r2, #27
 800ef8a:	bf44      	itt	mi
 800ef8c:	2320      	movmi	r3, #32
 800ef8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef92:	0713      	lsls	r3, r2, #28
 800ef94:	bf44      	itt	mi
 800ef96:	232b      	movmi	r3, #43	; 0x2b
 800ef98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef9c:	f89a 3000 	ldrb.w	r3, [sl]
 800efa0:	2b2a      	cmp	r3, #42	; 0x2a
 800efa2:	d015      	beq.n	800efd0 <_vfiprintf_r+0x13c>
 800efa4:	9a07      	ldr	r2, [sp, #28]
 800efa6:	4654      	mov	r4, sl
 800efa8:	2000      	movs	r0, #0
 800efaa:	f04f 0c0a 	mov.w	ip, #10
 800efae:	4621      	mov	r1, r4
 800efb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efb4:	3b30      	subs	r3, #48	; 0x30
 800efb6:	2b09      	cmp	r3, #9
 800efb8:	d94e      	bls.n	800f058 <_vfiprintf_r+0x1c4>
 800efba:	b1b0      	cbz	r0, 800efea <_vfiprintf_r+0x156>
 800efbc:	9207      	str	r2, [sp, #28]
 800efbe:	e014      	b.n	800efea <_vfiprintf_r+0x156>
 800efc0:	eba0 0308 	sub.w	r3, r0, r8
 800efc4:	fa09 f303 	lsl.w	r3, r9, r3
 800efc8:	4313      	orrs	r3, r2
 800efca:	9304      	str	r3, [sp, #16]
 800efcc:	46a2      	mov	sl, r4
 800efce:	e7d2      	b.n	800ef76 <_vfiprintf_r+0xe2>
 800efd0:	9b03      	ldr	r3, [sp, #12]
 800efd2:	1d19      	adds	r1, r3, #4
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	9103      	str	r1, [sp, #12]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	bfbb      	ittet	lt
 800efdc:	425b      	neglt	r3, r3
 800efde:	f042 0202 	orrlt.w	r2, r2, #2
 800efe2:	9307      	strge	r3, [sp, #28]
 800efe4:	9307      	strlt	r3, [sp, #28]
 800efe6:	bfb8      	it	lt
 800efe8:	9204      	strlt	r2, [sp, #16]
 800efea:	7823      	ldrb	r3, [r4, #0]
 800efec:	2b2e      	cmp	r3, #46	; 0x2e
 800efee:	d10c      	bne.n	800f00a <_vfiprintf_r+0x176>
 800eff0:	7863      	ldrb	r3, [r4, #1]
 800eff2:	2b2a      	cmp	r3, #42	; 0x2a
 800eff4:	d135      	bne.n	800f062 <_vfiprintf_r+0x1ce>
 800eff6:	9b03      	ldr	r3, [sp, #12]
 800eff8:	1d1a      	adds	r2, r3, #4
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	9203      	str	r2, [sp, #12]
 800effe:	2b00      	cmp	r3, #0
 800f000:	bfb8      	it	lt
 800f002:	f04f 33ff 	movlt.w	r3, #4294967295
 800f006:	3402      	adds	r4, #2
 800f008:	9305      	str	r3, [sp, #20]
 800f00a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f0f0 <_vfiprintf_r+0x25c>
 800f00e:	7821      	ldrb	r1, [r4, #0]
 800f010:	2203      	movs	r2, #3
 800f012:	4650      	mov	r0, sl
 800f014:	f7f1 f8ec 	bl	80001f0 <memchr>
 800f018:	b140      	cbz	r0, 800f02c <_vfiprintf_r+0x198>
 800f01a:	2340      	movs	r3, #64	; 0x40
 800f01c:	eba0 000a 	sub.w	r0, r0, sl
 800f020:	fa03 f000 	lsl.w	r0, r3, r0
 800f024:	9b04      	ldr	r3, [sp, #16]
 800f026:	4303      	orrs	r3, r0
 800f028:	3401      	adds	r4, #1
 800f02a:	9304      	str	r3, [sp, #16]
 800f02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f030:	482c      	ldr	r0, [pc, #176]	; (800f0e4 <_vfiprintf_r+0x250>)
 800f032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f036:	2206      	movs	r2, #6
 800f038:	f7f1 f8da 	bl	80001f0 <memchr>
 800f03c:	2800      	cmp	r0, #0
 800f03e:	d03f      	beq.n	800f0c0 <_vfiprintf_r+0x22c>
 800f040:	4b29      	ldr	r3, [pc, #164]	; (800f0e8 <_vfiprintf_r+0x254>)
 800f042:	bb1b      	cbnz	r3, 800f08c <_vfiprintf_r+0x1f8>
 800f044:	9b03      	ldr	r3, [sp, #12]
 800f046:	3307      	adds	r3, #7
 800f048:	f023 0307 	bic.w	r3, r3, #7
 800f04c:	3308      	adds	r3, #8
 800f04e:	9303      	str	r3, [sp, #12]
 800f050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f052:	443b      	add	r3, r7
 800f054:	9309      	str	r3, [sp, #36]	; 0x24
 800f056:	e767      	b.n	800ef28 <_vfiprintf_r+0x94>
 800f058:	fb0c 3202 	mla	r2, ip, r2, r3
 800f05c:	460c      	mov	r4, r1
 800f05e:	2001      	movs	r0, #1
 800f060:	e7a5      	b.n	800efae <_vfiprintf_r+0x11a>
 800f062:	2300      	movs	r3, #0
 800f064:	3401      	adds	r4, #1
 800f066:	9305      	str	r3, [sp, #20]
 800f068:	4619      	mov	r1, r3
 800f06a:	f04f 0c0a 	mov.w	ip, #10
 800f06e:	4620      	mov	r0, r4
 800f070:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f074:	3a30      	subs	r2, #48	; 0x30
 800f076:	2a09      	cmp	r2, #9
 800f078:	d903      	bls.n	800f082 <_vfiprintf_r+0x1ee>
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d0c5      	beq.n	800f00a <_vfiprintf_r+0x176>
 800f07e:	9105      	str	r1, [sp, #20]
 800f080:	e7c3      	b.n	800f00a <_vfiprintf_r+0x176>
 800f082:	fb0c 2101 	mla	r1, ip, r1, r2
 800f086:	4604      	mov	r4, r0
 800f088:	2301      	movs	r3, #1
 800f08a:	e7f0      	b.n	800f06e <_vfiprintf_r+0x1da>
 800f08c:	ab03      	add	r3, sp, #12
 800f08e:	9300      	str	r3, [sp, #0]
 800f090:	462a      	mov	r2, r5
 800f092:	4b16      	ldr	r3, [pc, #88]	; (800f0ec <_vfiprintf_r+0x258>)
 800f094:	a904      	add	r1, sp, #16
 800f096:	4630      	mov	r0, r6
 800f098:	f7fd fe50 	bl	800cd3c <_printf_float>
 800f09c:	4607      	mov	r7, r0
 800f09e:	1c78      	adds	r0, r7, #1
 800f0a0:	d1d6      	bne.n	800f050 <_vfiprintf_r+0x1bc>
 800f0a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0a4:	07d9      	lsls	r1, r3, #31
 800f0a6:	d405      	bmi.n	800f0b4 <_vfiprintf_r+0x220>
 800f0a8:	89ab      	ldrh	r3, [r5, #12]
 800f0aa:	059a      	lsls	r2, r3, #22
 800f0ac:	d402      	bmi.n	800f0b4 <_vfiprintf_r+0x220>
 800f0ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0b0:	f7ff fe6a 	bl	800ed88 <__retarget_lock_release_recursive>
 800f0b4:	89ab      	ldrh	r3, [r5, #12]
 800f0b6:	065b      	lsls	r3, r3, #25
 800f0b8:	f53f af12 	bmi.w	800eee0 <_vfiprintf_r+0x4c>
 800f0bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0be:	e711      	b.n	800eee4 <_vfiprintf_r+0x50>
 800f0c0:	ab03      	add	r3, sp, #12
 800f0c2:	9300      	str	r3, [sp, #0]
 800f0c4:	462a      	mov	r2, r5
 800f0c6:	4b09      	ldr	r3, [pc, #36]	; (800f0ec <_vfiprintf_r+0x258>)
 800f0c8:	a904      	add	r1, sp, #16
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f7fe f8da 	bl	800d284 <_printf_i>
 800f0d0:	e7e4      	b.n	800f09c <_vfiprintf_r+0x208>
 800f0d2:	bf00      	nop
 800f0d4:	08010d4c 	.word	0x08010d4c
 800f0d8:	08010d6c 	.word	0x08010d6c
 800f0dc:	08010d2c 	.word	0x08010d2c
 800f0e0:	08010bd4 	.word	0x08010bd4
 800f0e4:	08010bde 	.word	0x08010bde
 800f0e8:	0800cd3d 	.word	0x0800cd3d
 800f0ec:	0800ee6f 	.word	0x0800ee6f
 800f0f0:	08010bda 	.word	0x08010bda

0800f0f4 <__swbuf_r>:
 800f0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f6:	460e      	mov	r6, r1
 800f0f8:	4614      	mov	r4, r2
 800f0fa:	4605      	mov	r5, r0
 800f0fc:	b118      	cbz	r0, 800f106 <__swbuf_r+0x12>
 800f0fe:	6983      	ldr	r3, [r0, #24]
 800f100:	b90b      	cbnz	r3, 800f106 <__swbuf_r+0x12>
 800f102:	f000 f9e7 	bl	800f4d4 <__sinit>
 800f106:	4b21      	ldr	r3, [pc, #132]	; (800f18c <__swbuf_r+0x98>)
 800f108:	429c      	cmp	r4, r3
 800f10a:	d12b      	bne.n	800f164 <__swbuf_r+0x70>
 800f10c:	686c      	ldr	r4, [r5, #4]
 800f10e:	69a3      	ldr	r3, [r4, #24]
 800f110:	60a3      	str	r3, [r4, #8]
 800f112:	89a3      	ldrh	r3, [r4, #12]
 800f114:	071a      	lsls	r2, r3, #28
 800f116:	d52f      	bpl.n	800f178 <__swbuf_r+0x84>
 800f118:	6923      	ldr	r3, [r4, #16]
 800f11a:	b36b      	cbz	r3, 800f178 <__swbuf_r+0x84>
 800f11c:	6923      	ldr	r3, [r4, #16]
 800f11e:	6820      	ldr	r0, [r4, #0]
 800f120:	1ac0      	subs	r0, r0, r3
 800f122:	6963      	ldr	r3, [r4, #20]
 800f124:	b2f6      	uxtb	r6, r6
 800f126:	4283      	cmp	r3, r0
 800f128:	4637      	mov	r7, r6
 800f12a:	dc04      	bgt.n	800f136 <__swbuf_r+0x42>
 800f12c:	4621      	mov	r1, r4
 800f12e:	4628      	mov	r0, r5
 800f130:	f000 f93c 	bl	800f3ac <_fflush_r>
 800f134:	bb30      	cbnz	r0, 800f184 <__swbuf_r+0x90>
 800f136:	68a3      	ldr	r3, [r4, #8]
 800f138:	3b01      	subs	r3, #1
 800f13a:	60a3      	str	r3, [r4, #8]
 800f13c:	6823      	ldr	r3, [r4, #0]
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	6022      	str	r2, [r4, #0]
 800f142:	701e      	strb	r6, [r3, #0]
 800f144:	6963      	ldr	r3, [r4, #20]
 800f146:	3001      	adds	r0, #1
 800f148:	4283      	cmp	r3, r0
 800f14a:	d004      	beq.n	800f156 <__swbuf_r+0x62>
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	07db      	lsls	r3, r3, #31
 800f150:	d506      	bpl.n	800f160 <__swbuf_r+0x6c>
 800f152:	2e0a      	cmp	r6, #10
 800f154:	d104      	bne.n	800f160 <__swbuf_r+0x6c>
 800f156:	4621      	mov	r1, r4
 800f158:	4628      	mov	r0, r5
 800f15a:	f000 f927 	bl	800f3ac <_fflush_r>
 800f15e:	b988      	cbnz	r0, 800f184 <__swbuf_r+0x90>
 800f160:	4638      	mov	r0, r7
 800f162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f164:	4b0a      	ldr	r3, [pc, #40]	; (800f190 <__swbuf_r+0x9c>)
 800f166:	429c      	cmp	r4, r3
 800f168:	d101      	bne.n	800f16e <__swbuf_r+0x7a>
 800f16a:	68ac      	ldr	r4, [r5, #8]
 800f16c:	e7cf      	b.n	800f10e <__swbuf_r+0x1a>
 800f16e:	4b09      	ldr	r3, [pc, #36]	; (800f194 <__swbuf_r+0xa0>)
 800f170:	429c      	cmp	r4, r3
 800f172:	bf08      	it	eq
 800f174:	68ec      	ldreq	r4, [r5, #12]
 800f176:	e7ca      	b.n	800f10e <__swbuf_r+0x1a>
 800f178:	4621      	mov	r1, r4
 800f17a:	4628      	mov	r0, r5
 800f17c:	f000 f81a 	bl	800f1b4 <__swsetup_r>
 800f180:	2800      	cmp	r0, #0
 800f182:	d0cb      	beq.n	800f11c <__swbuf_r+0x28>
 800f184:	f04f 37ff 	mov.w	r7, #4294967295
 800f188:	e7ea      	b.n	800f160 <__swbuf_r+0x6c>
 800f18a:	bf00      	nop
 800f18c:	08010d4c 	.word	0x08010d4c
 800f190:	08010d6c 	.word	0x08010d6c
 800f194:	08010d2c 	.word	0x08010d2c

0800f198 <__ascii_wctomb>:
 800f198:	b149      	cbz	r1, 800f1ae <__ascii_wctomb+0x16>
 800f19a:	2aff      	cmp	r2, #255	; 0xff
 800f19c:	bf85      	ittet	hi
 800f19e:	238a      	movhi	r3, #138	; 0x8a
 800f1a0:	6003      	strhi	r3, [r0, #0]
 800f1a2:	700a      	strbls	r2, [r1, #0]
 800f1a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f1a8:	bf98      	it	ls
 800f1aa:	2001      	movls	r0, #1
 800f1ac:	4770      	bx	lr
 800f1ae:	4608      	mov	r0, r1
 800f1b0:	4770      	bx	lr
	...

0800f1b4 <__swsetup_r>:
 800f1b4:	4b32      	ldr	r3, [pc, #200]	; (800f280 <__swsetup_r+0xcc>)
 800f1b6:	b570      	push	{r4, r5, r6, lr}
 800f1b8:	681d      	ldr	r5, [r3, #0]
 800f1ba:	4606      	mov	r6, r0
 800f1bc:	460c      	mov	r4, r1
 800f1be:	b125      	cbz	r5, 800f1ca <__swsetup_r+0x16>
 800f1c0:	69ab      	ldr	r3, [r5, #24]
 800f1c2:	b913      	cbnz	r3, 800f1ca <__swsetup_r+0x16>
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	f000 f985 	bl	800f4d4 <__sinit>
 800f1ca:	4b2e      	ldr	r3, [pc, #184]	; (800f284 <__swsetup_r+0xd0>)
 800f1cc:	429c      	cmp	r4, r3
 800f1ce:	d10f      	bne.n	800f1f0 <__swsetup_r+0x3c>
 800f1d0:	686c      	ldr	r4, [r5, #4]
 800f1d2:	89a3      	ldrh	r3, [r4, #12]
 800f1d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1d8:	0719      	lsls	r1, r3, #28
 800f1da:	d42c      	bmi.n	800f236 <__swsetup_r+0x82>
 800f1dc:	06dd      	lsls	r5, r3, #27
 800f1de:	d411      	bmi.n	800f204 <__swsetup_r+0x50>
 800f1e0:	2309      	movs	r3, #9
 800f1e2:	6033      	str	r3, [r6, #0]
 800f1e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1e8:	81a3      	strh	r3, [r4, #12]
 800f1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ee:	e03e      	b.n	800f26e <__swsetup_r+0xba>
 800f1f0:	4b25      	ldr	r3, [pc, #148]	; (800f288 <__swsetup_r+0xd4>)
 800f1f2:	429c      	cmp	r4, r3
 800f1f4:	d101      	bne.n	800f1fa <__swsetup_r+0x46>
 800f1f6:	68ac      	ldr	r4, [r5, #8]
 800f1f8:	e7eb      	b.n	800f1d2 <__swsetup_r+0x1e>
 800f1fa:	4b24      	ldr	r3, [pc, #144]	; (800f28c <__swsetup_r+0xd8>)
 800f1fc:	429c      	cmp	r4, r3
 800f1fe:	bf08      	it	eq
 800f200:	68ec      	ldreq	r4, [r5, #12]
 800f202:	e7e6      	b.n	800f1d2 <__swsetup_r+0x1e>
 800f204:	0758      	lsls	r0, r3, #29
 800f206:	d512      	bpl.n	800f22e <__swsetup_r+0x7a>
 800f208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f20a:	b141      	cbz	r1, 800f21e <__swsetup_r+0x6a>
 800f20c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f210:	4299      	cmp	r1, r3
 800f212:	d002      	beq.n	800f21a <__swsetup_r+0x66>
 800f214:	4630      	mov	r0, r6
 800f216:	f7fd fc11 	bl	800ca3c <_free_r>
 800f21a:	2300      	movs	r3, #0
 800f21c:	6363      	str	r3, [r4, #52]	; 0x34
 800f21e:	89a3      	ldrh	r3, [r4, #12]
 800f220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f224:	81a3      	strh	r3, [r4, #12]
 800f226:	2300      	movs	r3, #0
 800f228:	6063      	str	r3, [r4, #4]
 800f22a:	6923      	ldr	r3, [r4, #16]
 800f22c:	6023      	str	r3, [r4, #0]
 800f22e:	89a3      	ldrh	r3, [r4, #12]
 800f230:	f043 0308 	orr.w	r3, r3, #8
 800f234:	81a3      	strh	r3, [r4, #12]
 800f236:	6923      	ldr	r3, [r4, #16]
 800f238:	b94b      	cbnz	r3, 800f24e <__swsetup_r+0x9a>
 800f23a:	89a3      	ldrh	r3, [r4, #12]
 800f23c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f244:	d003      	beq.n	800f24e <__swsetup_r+0x9a>
 800f246:	4621      	mov	r1, r4
 800f248:	4630      	mov	r0, r6
 800f24a:	f000 fa05 	bl	800f658 <__smakebuf_r>
 800f24e:	89a0      	ldrh	r0, [r4, #12]
 800f250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f254:	f010 0301 	ands.w	r3, r0, #1
 800f258:	d00a      	beq.n	800f270 <__swsetup_r+0xbc>
 800f25a:	2300      	movs	r3, #0
 800f25c:	60a3      	str	r3, [r4, #8]
 800f25e:	6963      	ldr	r3, [r4, #20]
 800f260:	425b      	negs	r3, r3
 800f262:	61a3      	str	r3, [r4, #24]
 800f264:	6923      	ldr	r3, [r4, #16]
 800f266:	b943      	cbnz	r3, 800f27a <__swsetup_r+0xc6>
 800f268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f26c:	d1ba      	bne.n	800f1e4 <__swsetup_r+0x30>
 800f26e:	bd70      	pop	{r4, r5, r6, pc}
 800f270:	0781      	lsls	r1, r0, #30
 800f272:	bf58      	it	pl
 800f274:	6963      	ldrpl	r3, [r4, #20]
 800f276:	60a3      	str	r3, [r4, #8]
 800f278:	e7f4      	b.n	800f264 <__swsetup_r+0xb0>
 800f27a:	2000      	movs	r0, #0
 800f27c:	e7f7      	b.n	800f26e <__swsetup_r+0xba>
 800f27e:	bf00      	nop
 800f280:	2000007c 	.word	0x2000007c
 800f284:	08010d4c 	.word	0x08010d4c
 800f288:	08010d6c 	.word	0x08010d6c
 800f28c:	08010d2c 	.word	0x08010d2c

0800f290 <abort>:
 800f290:	b508      	push	{r3, lr}
 800f292:	2006      	movs	r0, #6
 800f294:	f000 fa50 	bl	800f738 <raise>
 800f298:	2001      	movs	r0, #1
 800f29a:	f7f2 fedb 	bl	8002054 <_exit>
	...

0800f2a0 <__sflush_r>:
 800f2a0:	898a      	ldrh	r2, [r1, #12]
 800f2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a6:	4605      	mov	r5, r0
 800f2a8:	0710      	lsls	r0, r2, #28
 800f2aa:	460c      	mov	r4, r1
 800f2ac:	d458      	bmi.n	800f360 <__sflush_r+0xc0>
 800f2ae:	684b      	ldr	r3, [r1, #4]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	dc05      	bgt.n	800f2c0 <__sflush_r+0x20>
 800f2b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	dc02      	bgt.n	800f2c0 <__sflush_r+0x20>
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2c2:	2e00      	cmp	r6, #0
 800f2c4:	d0f9      	beq.n	800f2ba <__sflush_r+0x1a>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2cc:	682f      	ldr	r7, [r5, #0]
 800f2ce:	602b      	str	r3, [r5, #0]
 800f2d0:	d032      	beq.n	800f338 <__sflush_r+0x98>
 800f2d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2d4:	89a3      	ldrh	r3, [r4, #12]
 800f2d6:	075a      	lsls	r2, r3, #29
 800f2d8:	d505      	bpl.n	800f2e6 <__sflush_r+0x46>
 800f2da:	6863      	ldr	r3, [r4, #4]
 800f2dc:	1ac0      	subs	r0, r0, r3
 800f2de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2e0:	b10b      	cbz	r3, 800f2e6 <__sflush_r+0x46>
 800f2e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2e4:	1ac0      	subs	r0, r0, r3
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2ec:	6a21      	ldr	r1, [r4, #32]
 800f2ee:	4628      	mov	r0, r5
 800f2f0:	47b0      	blx	r6
 800f2f2:	1c43      	adds	r3, r0, #1
 800f2f4:	89a3      	ldrh	r3, [r4, #12]
 800f2f6:	d106      	bne.n	800f306 <__sflush_r+0x66>
 800f2f8:	6829      	ldr	r1, [r5, #0]
 800f2fa:	291d      	cmp	r1, #29
 800f2fc:	d82c      	bhi.n	800f358 <__sflush_r+0xb8>
 800f2fe:	4a2a      	ldr	r2, [pc, #168]	; (800f3a8 <__sflush_r+0x108>)
 800f300:	40ca      	lsrs	r2, r1
 800f302:	07d6      	lsls	r6, r2, #31
 800f304:	d528      	bpl.n	800f358 <__sflush_r+0xb8>
 800f306:	2200      	movs	r2, #0
 800f308:	6062      	str	r2, [r4, #4]
 800f30a:	04d9      	lsls	r1, r3, #19
 800f30c:	6922      	ldr	r2, [r4, #16]
 800f30e:	6022      	str	r2, [r4, #0]
 800f310:	d504      	bpl.n	800f31c <__sflush_r+0x7c>
 800f312:	1c42      	adds	r2, r0, #1
 800f314:	d101      	bne.n	800f31a <__sflush_r+0x7a>
 800f316:	682b      	ldr	r3, [r5, #0]
 800f318:	b903      	cbnz	r3, 800f31c <__sflush_r+0x7c>
 800f31a:	6560      	str	r0, [r4, #84]	; 0x54
 800f31c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f31e:	602f      	str	r7, [r5, #0]
 800f320:	2900      	cmp	r1, #0
 800f322:	d0ca      	beq.n	800f2ba <__sflush_r+0x1a>
 800f324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f328:	4299      	cmp	r1, r3
 800f32a:	d002      	beq.n	800f332 <__sflush_r+0x92>
 800f32c:	4628      	mov	r0, r5
 800f32e:	f7fd fb85 	bl	800ca3c <_free_r>
 800f332:	2000      	movs	r0, #0
 800f334:	6360      	str	r0, [r4, #52]	; 0x34
 800f336:	e7c1      	b.n	800f2bc <__sflush_r+0x1c>
 800f338:	6a21      	ldr	r1, [r4, #32]
 800f33a:	2301      	movs	r3, #1
 800f33c:	4628      	mov	r0, r5
 800f33e:	47b0      	blx	r6
 800f340:	1c41      	adds	r1, r0, #1
 800f342:	d1c7      	bne.n	800f2d4 <__sflush_r+0x34>
 800f344:	682b      	ldr	r3, [r5, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d0c4      	beq.n	800f2d4 <__sflush_r+0x34>
 800f34a:	2b1d      	cmp	r3, #29
 800f34c:	d001      	beq.n	800f352 <__sflush_r+0xb2>
 800f34e:	2b16      	cmp	r3, #22
 800f350:	d101      	bne.n	800f356 <__sflush_r+0xb6>
 800f352:	602f      	str	r7, [r5, #0]
 800f354:	e7b1      	b.n	800f2ba <__sflush_r+0x1a>
 800f356:	89a3      	ldrh	r3, [r4, #12]
 800f358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f35c:	81a3      	strh	r3, [r4, #12]
 800f35e:	e7ad      	b.n	800f2bc <__sflush_r+0x1c>
 800f360:	690f      	ldr	r7, [r1, #16]
 800f362:	2f00      	cmp	r7, #0
 800f364:	d0a9      	beq.n	800f2ba <__sflush_r+0x1a>
 800f366:	0793      	lsls	r3, r2, #30
 800f368:	680e      	ldr	r6, [r1, #0]
 800f36a:	bf08      	it	eq
 800f36c:	694b      	ldreq	r3, [r1, #20]
 800f36e:	600f      	str	r7, [r1, #0]
 800f370:	bf18      	it	ne
 800f372:	2300      	movne	r3, #0
 800f374:	eba6 0807 	sub.w	r8, r6, r7
 800f378:	608b      	str	r3, [r1, #8]
 800f37a:	f1b8 0f00 	cmp.w	r8, #0
 800f37e:	dd9c      	ble.n	800f2ba <__sflush_r+0x1a>
 800f380:	6a21      	ldr	r1, [r4, #32]
 800f382:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f384:	4643      	mov	r3, r8
 800f386:	463a      	mov	r2, r7
 800f388:	4628      	mov	r0, r5
 800f38a:	47b0      	blx	r6
 800f38c:	2800      	cmp	r0, #0
 800f38e:	dc06      	bgt.n	800f39e <__sflush_r+0xfe>
 800f390:	89a3      	ldrh	r3, [r4, #12]
 800f392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f396:	81a3      	strh	r3, [r4, #12]
 800f398:	f04f 30ff 	mov.w	r0, #4294967295
 800f39c:	e78e      	b.n	800f2bc <__sflush_r+0x1c>
 800f39e:	4407      	add	r7, r0
 800f3a0:	eba8 0800 	sub.w	r8, r8, r0
 800f3a4:	e7e9      	b.n	800f37a <__sflush_r+0xda>
 800f3a6:	bf00      	nop
 800f3a8:	20400001 	.word	0x20400001

0800f3ac <_fflush_r>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	690b      	ldr	r3, [r1, #16]
 800f3b0:	4605      	mov	r5, r0
 800f3b2:	460c      	mov	r4, r1
 800f3b4:	b913      	cbnz	r3, 800f3bc <_fflush_r+0x10>
 800f3b6:	2500      	movs	r5, #0
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	bd38      	pop	{r3, r4, r5, pc}
 800f3bc:	b118      	cbz	r0, 800f3c6 <_fflush_r+0x1a>
 800f3be:	6983      	ldr	r3, [r0, #24]
 800f3c0:	b90b      	cbnz	r3, 800f3c6 <_fflush_r+0x1a>
 800f3c2:	f000 f887 	bl	800f4d4 <__sinit>
 800f3c6:	4b14      	ldr	r3, [pc, #80]	; (800f418 <_fflush_r+0x6c>)
 800f3c8:	429c      	cmp	r4, r3
 800f3ca:	d11b      	bne.n	800f404 <_fflush_r+0x58>
 800f3cc:	686c      	ldr	r4, [r5, #4]
 800f3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d0ef      	beq.n	800f3b6 <_fflush_r+0xa>
 800f3d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3d8:	07d0      	lsls	r0, r2, #31
 800f3da:	d404      	bmi.n	800f3e6 <_fflush_r+0x3a>
 800f3dc:	0599      	lsls	r1, r3, #22
 800f3de:	d402      	bmi.n	800f3e6 <_fflush_r+0x3a>
 800f3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3e2:	f7ff fcd0 	bl	800ed86 <__retarget_lock_acquire_recursive>
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	f7ff ff59 	bl	800f2a0 <__sflush_r>
 800f3ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3f0:	07da      	lsls	r2, r3, #31
 800f3f2:	4605      	mov	r5, r0
 800f3f4:	d4e0      	bmi.n	800f3b8 <_fflush_r+0xc>
 800f3f6:	89a3      	ldrh	r3, [r4, #12]
 800f3f8:	059b      	lsls	r3, r3, #22
 800f3fa:	d4dd      	bmi.n	800f3b8 <_fflush_r+0xc>
 800f3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3fe:	f7ff fcc3 	bl	800ed88 <__retarget_lock_release_recursive>
 800f402:	e7d9      	b.n	800f3b8 <_fflush_r+0xc>
 800f404:	4b05      	ldr	r3, [pc, #20]	; (800f41c <_fflush_r+0x70>)
 800f406:	429c      	cmp	r4, r3
 800f408:	d101      	bne.n	800f40e <_fflush_r+0x62>
 800f40a:	68ac      	ldr	r4, [r5, #8]
 800f40c:	e7df      	b.n	800f3ce <_fflush_r+0x22>
 800f40e:	4b04      	ldr	r3, [pc, #16]	; (800f420 <_fflush_r+0x74>)
 800f410:	429c      	cmp	r4, r3
 800f412:	bf08      	it	eq
 800f414:	68ec      	ldreq	r4, [r5, #12]
 800f416:	e7da      	b.n	800f3ce <_fflush_r+0x22>
 800f418:	08010d4c 	.word	0x08010d4c
 800f41c:	08010d6c 	.word	0x08010d6c
 800f420:	08010d2c 	.word	0x08010d2c

0800f424 <std>:
 800f424:	2300      	movs	r3, #0
 800f426:	b510      	push	{r4, lr}
 800f428:	4604      	mov	r4, r0
 800f42a:	e9c0 3300 	strd	r3, r3, [r0]
 800f42e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f432:	6083      	str	r3, [r0, #8]
 800f434:	8181      	strh	r1, [r0, #12]
 800f436:	6643      	str	r3, [r0, #100]	; 0x64
 800f438:	81c2      	strh	r2, [r0, #14]
 800f43a:	6183      	str	r3, [r0, #24]
 800f43c:	4619      	mov	r1, r3
 800f43e:	2208      	movs	r2, #8
 800f440:	305c      	adds	r0, #92	; 0x5c
 800f442:	f7fd faf3 	bl	800ca2c <memset>
 800f446:	4b05      	ldr	r3, [pc, #20]	; (800f45c <std+0x38>)
 800f448:	6263      	str	r3, [r4, #36]	; 0x24
 800f44a:	4b05      	ldr	r3, [pc, #20]	; (800f460 <std+0x3c>)
 800f44c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f44e:	4b05      	ldr	r3, [pc, #20]	; (800f464 <std+0x40>)
 800f450:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f452:	4b05      	ldr	r3, [pc, #20]	; (800f468 <std+0x44>)
 800f454:	6224      	str	r4, [r4, #32]
 800f456:	6323      	str	r3, [r4, #48]	; 0x30
 800f458:	bd10      	pop	{r4, pc}
 800f45a:	bf00      	nop
 800f45c:	0800f771 	.word	0x0800f771
 800f460:	0800f793 	.word	0x0800f793
 800f464:	0800f7cb 	.word	0x0800f7cb
 800f468:	0800f7ef 	.word	0x0800f7ef

0800f46c <_cleanup_r>:
 800f46c:	4901      	ldr	r1, [pc, #4]	; (800f474 <_cleanup_r+0x8>)
 800f46e:	f000 b8af 	b.w	800f5d0 <_fwalk_reent>
 800f472:	bf00      	nop
 800f474:	0800f3ad 	.word	0x0800f3ad

0800f478 <__sfmoreglue>:
 800f478:	b570      	push	{r4, r5, r6, lr}
 800f47a:	2268      	movs	r2, #104	; 0x68
 800f47c:	1e4d      	subs	r5, r1, #1
 800f47e:	4355      	muls	r5, r2
 800f480:	460e      	mov	r6, r1
 800f482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f486:	f7fd fb45 	bl	800cb14 <_malloc_r>
 800f48a:	4604      	mov	r4, r0
 800f48c:	b140      	cbz	r0, 800f4a0 <__sfmoreglue+0x28>
 800f48e:	2100      	movs	r1, #0
 800f490:	e9c0 1600 	strd	r1, r6, [r0]
 800f494:	300c      	adds	r0, #12
 800f496:	60a0      	str	r0, [r4, #8]
 800f498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f49c:	f7fd fac6 	bl	800ca2c <memset>
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	bd70      	pop	{r4, r5, r6, pc}

0800f4a4 <__sfp_lock_acquire>:
 800f4a4:	4801      	ldr	r0, [pc, #4]	; (800f4ac <__sfp_lock_acquire+0x8>)
 800f4a6:	f7ff bc6e 	b.w	800ed86 <__retarget_lock_acquire_recursive>
 800f4aa:	bf00      	nop
 800f4ac:	20000bb1 	.word	0x20000bb1

0800f4b0 <__sfp_lock_release>:
 800f4b0:	4801      	ldr	r0, [pc, #4]	; (800f4b8 <__sfp_lock_release+0x8>)
 800f4b2:	f7ff bc69 	b.w	800ed88 <__retarget_lock_release_recursive>
 800f4b6:	bf00      	nop
 800f4b8:	20000bb1 	.word	0x20000bb1

0800f4bc <__sinit_lock_acquire>:
 800f4bc:	4801      	ldr	r0, [pc, #4]	; (800f4c4 <__sinit_lock_acquire+0x8>)
 800f4be:	f7ff bc62 	b.w	800ed86 <__retarget_lock_acquire_recursive>
 800f4c2:	bf00      	nop
 800f4c4:	20000bb2 	.word	0x20000bb2

0800f4c8 <__sinit_lock_release>:
 800f4c8:	4801      	ldr	r0, [pc, #4]	; (800f4d0 <__sinit_lock_release+0x8>)
 800f4ca:	f7ff bc5d 	b.w	800ed88 <__retarget_lock_release_recursive>
 800f4ce:	bf00      	nop
 800f4d0:	20000bb2 	.word	0x20000bb2

0800f4d4 <__sinit>:
 800f4d4:	b510      	push	{r4, lr}
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	f7ff fff0 	bl	800f4bc <__sinit_lock_acquire>
 800f4dc:	69a3      	ldr	r3, [r4, #24]
 800f4de:	b11b      	cbz	r3, 800f4e8 <__sinit+0x14>
 800f4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4e4:	f7ff bff0 	b.w	800f4c8 <__sinit_lock_release>
 800f4e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f4ec:	6523      	str	r3, [r4, #80]	; 0x50
 800f4ee:	4b13      	ldr	r3, [pc, #76]	; (800f53c <__sinit+0x68>)
 800f4f0:	4a13      	ldr	r2, [pc, #76]	; (800f540 <__sinit+0x6c>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f4f6:	42a3      	cmp	r3, r4
 800f4f8:	bf04      	itt	eq
 800f4fa:	2301      	moveq	r3, #1
 800f4fc:	61a3      	streq	r3, [r4, #24]
 800f4fe:	4620      	mov	r0, r4
 800f500:	f000 f820 	bl	800f544 <__sfp>
 800f504:	6060      	str	r0, [r4, #4]
 800f506:	4620      	mov	r0, r4
 800f508:	f000 f81c 	bl	800f544 <__sfp>
 800f50c:	60a0      	str	r0, [r4, #8]
 800f50e:	4620      	mov	r0, r4
 800f510:	f000 f818 	bl	800f544 <__sfp>
 800f514:	2200      	movs	r2, #0
 800f516:	60e0      	str	r0, [r4, #12]
 800f518:	2104      	movs	r1, #4
 800f51a:	6860      	ldr	r0, [r4, #4]
 800f51c:	f7ff ff82 	bl	800f424 <std>
 800f520:	68a0      	ldr	r0, [r4, #8]
 800f522:	2201      	movs	r2, #1
 800f524:	2109      	movs	r1, #9
 800f526:	f7ff ff7d 	bl	800f424 <std>
 800f52a:	68e0      	ldr	r0, [r4, #12]
 800f52c:	2202      	movs	r2, #2
 800f52e:	2112      	movs	r1, #18
 800f530:	f7ff ff78 	bl	800f424 <std>
 800f534:	2301      	movs	r3, #1
 800f536:	61a3      	str	r3, [r4, #24]
 800f538:	e7d2      	b.n	800f4e0 <__sinit+0xc>
 800f53a:	bf00      	nop
 800f53c:	080109b0 	.word	0x080109b0
 800f540:	0800f46d 	.word	0x0800f46d

0800f544 <__sfp>:
 800f544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f546:	4607      	mov	r7, r0
 800f548:	f7ff ffac 	bl	800f4a4 <__sfp_lock_acquire>
 800f54c:	4b1e      	ldr	r3, [pc, #120]	; (800f5c8 <__sfp+0x84>)
 800f54e:	681e      	ldr	r6, [r3, #0]
 800f550:	69b3      	ldr	r3, [r6, #24]
 800f552:	b913      	cbnz	r3, 800f55a <__sfp+0x16>
 800f554:	4630      	mov	r0, r6
 800f556:	f7ff ffbd 	bl	800f4d4 <__sinit>
 800f55a:	3648      	adds	r6, #72	; 0x48
 800f55c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f560:	3b01      	subs	r3, #1
 800f562:	d503      	bpl.n	800f56c <__sfp+0x28>
 800f564:	6833      	ldr	r3, [r6, #0]
 800f566:	b30b      	cbz	r3, 800f5ac <__sfp+0x68>
 800f568:	6836      	ldr	r6, [r6, #0]
 800f56a:	e7f7      	b.n	800f55c <__sfp+0x18>
 800f56c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f570:	b9d5      	cbnz	r5, 800f5a8 <__sfp+0x64>
 800f572:	4b16      	ldr	r3, [pc, #88]	; (800f5cc <__sfp+0x88>)
 800f574:	60e3      	str	r3, [r4, #12]
 800f576:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f57a:	6665      	str	r5, [r4, #100]	; 0x64
 800f57c:	f7ff fc02 	bl	800ed84 <__retarget_lock_init_recursive>
 800f580:	f7ff ff96 	bl	800f4b0 <__sfp_lock_release>
 800f584:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f588:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f58c:	6025      	str	r5, [r4, #0]
 800f58e:	61a5      	str	r5, [r4, #24]
 800f590:	2208      	movs	r2, #8
 800f592:	4629      	mov	r1, r5
 800f594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f598:	f7fd fa48 	bl	800ca2c <memset>
 800f59c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f5a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5a8:	3468      	adds	r4, #104	; 0x68
 800f5aa:	e7d9      	b.n	800f560 <__sfp+0x1c>
 800f5ac:	2104      	movs	r1, #4
 800f5ae:	4638      	mov	r0, r7
 800f5b0:	f7ff ff62 	bl	800f478 <__sfmoreglue>
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	6030      	str	r0, [r6, #0]
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	d1d5      	bne.n	800f568 <__sfp+0x24>
 800f5bc:	f7ff ff78 	bl	800f4b0 <__sfp_lock_release>
 800f5c0:	230c      	movs	r3, #12
 800f5c2:	603b      	str	r3, [r7, #0]
 800f5c4:	e7ee      	b.n	800f5a4 <__sfp+0x60>
 800f5c6:	bf00      	nop
 800f5c8:	080109b0 	.word	0x080109b0
 800f5cc:	ffff0001 	.word	0xffff0001

0800f5d0 <_fwalk_reent>:
 800f5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5d4:	4606      	mov	r6, r0
 800f5d6:	4688      	mov	r8, r1
 800f5d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f5dc:	2700      	movs	r7, #0
 800f5de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5e2:	f1b9 0901 	subs.w	r9, r9, #1
 800f5e6:	d505      	bpl.n	800f5f4 <_fwalk_reent+0x24>
 800f5e8:	6824      	ldr	r4, [r4, #0]
 800f5ea:	2c00      	cmp	r4, #0
 800f5ec:	d1f7      	bne.n	800f5de <_fwalk_reent+0xe>
 800f5ee:	4638      	mov	r0, r7
 800f5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5f4:	89ab      	ldrh	r3, [r5, #12]
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d907      	bls.n	800f60a <_fwalk_reent+0x3a>
 800f5fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5fe:	3301      	adds	r3, #1
 800f600:	d003      	beq.n	800f60a <_fwalk_reent+0x3a>
 800f602:	4629      	mov	r1, r5
 800f604:	4630      	mov	r0, r6
 800f606:	47c0      	blx	r8
 800f608:	4307      	orrs	r7, r0
 800f60a:	3568      	adds	r5, #104	; 0x68
 800f60c:	e7e9      	b.n	800f5e2 <_fwalk_reent+0x12>

0800f60e <__swhatbuf_r>:
 800f60e:	b570      	push	{r4, r5, r6, lr}
 800f610:	460e      	mov	r6, r1
 800f612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f616:	2900      	cmp	r1, #0
 800f618:	b096      	sub	sp, #88	; 0x58
 800f61a:	4614      	mov	r4, r2
 800f61c:	461d      	mov	r5, r3
 800f61e:	da08      	bge.n	800f632 <__swhatbuf_r+0x24>
 800f620:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f624:	2200      	movs	r2, #0
 800f626:	602a      	str	r2, [r5, #0]
 800f628:	061a      	lsls	r2, r3, #24
 800f62a:	d410      	bmi.n	800f64e <__swhatbuf_r+0x40>
 800f62c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f630:	e00e      	b.n	800f650 <__swhatbuf_r+0x42>
 800f632:	466a      	mov	r2, sp
 800f634:	f000 f902 	bl	800f83c <_fstat_r>
 800f638:	2800      	cmp	r0, #0
 800f63a:	dbf1      	blt.n	800f620 <__swhatbuf_r+0x12>
 800f63c:	9a01      	ldr	r2, [sp, #4]
 800f63e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f642:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f646:	425a      	negs	r2, r3
 800f648:	415a      	adcs	r2, r3
 800f64a:	602a      	str	r2, [r5, #0]
 800f64c:	e7ee      	b.n	800f62c <__swhatbuf_r+0x1e>
 800f64e:	2340      	movs	r3, #64	; 0x40
 800f650:	2000      	movs	r0, #0
 800f652:	6023      	str	r3, [r4, #0]
 800f654:	b016      	add	sp, #88	; 0x58
 800f656:	bd70      	pop	{r4, r5, r6, pc}

0800f658 <__smakebuf_r>:
 800f658:	898b      	ldrh	r3, [r1, #12]
 800f65a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f65c:	079d      	lsls	r5, r3, #30
 800f65e:	4606      	mov	r6, r0
 800f660:	460c      	mov	r4, r1
 800f662:	d507      	bpl.n	800f674 <__smakebuf_r+0x1c>
 800f664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f668:	6023      	str	r3, [r4, #0]
 800f66a:	6123      	str	r3, [r4, #16]
 800f66c:	2301      	movs	r3, #1
 800f66e:	6163      	str	r3, [r4, #20]
 800f670:	b002      	add	sp, #8
 800f672:	bd70      	pop	{r4, r5, r6, pc}
 800f674:	ab01      	add	r3, sp, #4
 800f676:	466a      	mov	r2, sp
 800f678:	f7ff ffc9 	bl	800f60e <__swhatbuf_r>
 800f67c:	9900      	ldr	r1, [sp, #0]
 800f67e:	4605      	mov	r5, r0
 800f680:	4630      	mov	r0, r6
 800f682:	f7fd fa47 	bl	800cb14 <_malloc_r>
 800f686:	b948      	cbnz	r0, 800f69c <__smakebuf_r+0x44>
 800f688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f68c:	059a      	lsls	r2, r3, #22
 800f68e:	d4ef      	bmi.n	800f670 <__smakebuf_r+0x18>
 800f690:	f023 0303 	bic.w	r3, r3, #3
 800f694:	f043 0302 	orr.w	r3, r3, #2
 800f698:	81a3      	strh	r3, [r4, #12]
 800f69a:	e7e3      	b.n	800f664 <__smakebuf_r+0xc>
 800f69c:	4b0d      	ldr	r3, [pc, #52]	; (800f6d4 <__smakebuf_r+0x7c>)
 800f69e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6a0:	89a3      	ldrh	r3, [r4, #12]
 800f6a2:	6020      	str	r0, [r4, #0]
 800f6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6a8:	81a3      	strh	r3, [r4, #12]
 800f6aa:	9b00      	ldr	r3, [sp, #0]
 800f6ac:	6163      	str	r3, [r4, #20]
 800f6ae:	9b01      	ldr	r3, [sp, #4]
 800f6b0:	6120      	str	r0, [r4, #16]
 800f6b2:	b15b      	cbz	r3, 800f6cc <__smakebuf_r+0x74>
 800f6b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	f000 f8d1 	bl	800f860 <_isatty_r>
 800f6be:	b128      	cbz	r0, 800f6cc <__smakebuf_r+0x74>
 800f6c0:	89a3      	ldrh	r3, [r4, #12]
 800f6c2:	f023 0303 	bic.w	r3, r3, #3
 800f6c6:	f043 0301 	orr.w	r3, r3, #1
 800f6ca:	81a3      	strh	r3, [r4, #12]
 800f6cc:	89a0      	ldrh	r0, [r4, #12]
 800f6ce:	4305      	orrs	r5, r0
 800f6d0:	81a5      	strh	r5, [r4, #12]
 800f6d2:	e7cd      	b.n	800f670 <__smakebuf_r+0x18>
 800f6d4:	0800f46d 	.word	0x0800f46d

0800f6d8 <_malloc_usable_size_r>:
 800f6d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6dc:	1f18      	subs	r0, r3, #4
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	bfbc      	itt	lt
 800f6e2:	580b      	ldrlt	r3, [r1, r0]
 800f6e4:	18c0      	addlt	r0, r0, r3
 800f6e6:	4770      	bx	lr

0800f6e8 <_raise_r>:
 800f6e8:	291f      	cmp	r1, #31
 800f6ea:	b538      	push	{r3, r4, r5, lr}
 800f6ec:	4604      	mov	r4, r0
 800f6ee:	460d      	mov	r5, r1
 800f6f0:	d904      	bls.n	800f6fc <_raise_r+0x14>
 800f6f2:	2316      	movs	r3, #22
 800f6f4:	6003      	str	r3, [r0, #0]
 800f6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f6fa:	bd38      	pop	{r3, r4, r5, pc}
 800f6fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f6fe:	b112      	cbz	r2, 800f706 <_raise_r+0x1e>
 800f700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f704:	b94b      	cbnz	r3, 800f71a <_raise_r+0x32>
 800f706:	4620      	mov	r0, r4
 800f708:	f000 f830 	bl	800f76c <_getpid_r>
 800f70c:	462a      	mov	r2, r5
 800f70e:	4601      	mov	r1, r0
 800f710:	4620      	mov	r0, r4
 800f712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f716:	f000 b817 	b.w	800f748 <_kill_r>
 800f71a:	2b01      	cmp	r3, #1
 800f71c:	d00a      	beq.n	800f734 <_raise_r+0x4c>
 800f71e:	1c59      	adds	r1, r3, #1
 800f720:	d103      	bne.n	800f72a <_raise_r+0x42>
 800f722:	2316      	movs	r3, #22
 800f724:	6003      	str	r3, [r0, #0]
 800f726:	2001      	movs	r0, #1
 800f728:	e7e7      	b.n	800f6fa <_raise_r+0x12>
 800f72a:	2400      	movs	r4, #0
 800f72c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f730:	4628      	mov	r0, r5
 800f732:	4798      	blx	r3
 800f734:	2000      	movs	r0, #0
 800f736:	e7e0      	b.n	800f6fa <_raise_r+0x12>

0800f738 <raise>:
 800f738:	4b02      	ldr	r3, [pc, #8]	; (800f744 <raise+0xc>)
 800f73a:	4601      	mov	r1, r0
 800f73c:	6818      	ldr	r0, [r3, #0]
 800f73e:	f7ff bfd3 	b.w	800f6e8 <_raise_r>
 800f742:	bf00      	nop
 800f744:	2000007c 	.word	0x2000007c

0800f748 <_kill_r>:
 800f748:	b538      	push	{r3, r4, r5, lr}
 800f74a:	4d07      	ldr	r5, [pc, #28]	; (800f768 <_kill_r+0x20>)
 800f74c:	2300      	movs	r3, #0
 800f74e:	4604      	mov	r4, r0
 800f750:	4608      	mov	r0, r1
 800f752:	4611      	mov	r1, r2
 800f754:	602b      	str	r3, [r5, #0]
 800f756:	f7f2 fc6d 	bl	8002034 <_kill>
 800f75a:	1c43      	adds	r3, r0, #1
 800f75c:	d102      	bne.n	800f764 <_kill_r+0x1c>
 800f75e:	682b      	ldr	r3, [r5, #0]
 800f760:	b103      	cbz	r3, 800f764 <_kill_r+0x1c>
 800f762:	6023      	str	r3, [r4, #0]
 800f764:	bd38      	pop	{r3, r4, r5, pc}
 800f766:	bf00      	nop
 800f768:	20000bac 	.word	0x20000bac

0800f76c <_getpid_r>:
 800f76c:	f7f2 bc5a 	b.w	8002024 <_getpid>

0800f770 <__sread>:
 800f770:	b510      	push	{r4, lr}
 800f772:	460c      	mov	r4, r1
 800f774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f778:	f000 f894 	bl	800f8a4 <_read_r>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	bfab      	itete	ge
 800f780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f782:	89a3      	ldrhlt	r3, [r4, #12]
 800f784:	181b      	addge	r3, r3, r0
 800f786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f78a:	bfac      	ite	ge
 800f78c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f78e:	81a3      	strhlt	r3, [r4, #12]
 800f790:	bd10      	pop	{r4, pc}

0800f792 <__swrite>:
 800f792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f796:	461f      	mov	r7, r3
 800f798:	898b      	ldrh	r3, [r1, #12]
 800f79a:	05db      	lsls	r3, r3, #23
 800f79c:	4605      	mov	r5, r0
 800f79e:	460c      	mov	r4, r1
 800f7a0:	4616      	mov	r6, r2
 800f7a2:	d505      	bpl.n	800f7b0 <__swrite+0x1e>
 800f7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f000 f868 	bl	800f880 <_lseek_r>
 800f7b0:	89a3      	ldrh	r3, [r4, #12]
 800f7b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f7ba:	81a3      	strh	r3, [r4, #12]
 800f7bc:	4632      	mov	r2, r6
 800f7be:	463b      	mov	r3, r7
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c6:	f000 b817 	b.w	800f7f8 <_write_r>

0800f7ca <__sseek>:
 800f7ca:	b510      	push	{r4, lr}
 800f7cc:	460c      	mov	r4, r1
 800f7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7d2:	f000 f855 	bl	800f880 <_lseek_r>
 800f7d6:	1c43      	adds	r3, r0, #1
 800f7d8:	89a3      	ldrh	r3, [r4, #12]
 800f7da:	bf15      	itete	ne
 800f7dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f7de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f7e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f7e6:	81a3      	strheq	r3, [r4, #12]
 800f7e8:	bf18      	it	ne
 800f7ea:	81a3      	strhne	r3, [r4, #12]
 800f7ec:	bd10      	pop	{r4, pc}

0800f7ee <__sclose>:
 800f7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f2:	f000 b813 	b.w	800f81c <_close_r>
	...

0800f7f8 <_write_r>:
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4d07      	ldr	r5, [pc, #28]	; (800f818 <_write_r+0x20>)
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	4608      	mov	r0, r1
 800f800:	4611      	mov	r1, r2
 800f802:	2200      	movs	r2, #0
 800f804:	602a      	str	r2, [r5, #0]
 800f806:	461a      	mov	r2, r3
 800f808:	f7f2 fc4b 	bl	80020a2 <_write>
 800f80c:	1c43      	adds	r3, r0, #1
 800f80e:	d102      	bne.n	800f816 <_write_r+0x1e>
 800f810:	682b      	ldr	r3, [r5, #0]
 800f812:	b103      	cbz	r3, 800f816 <_write_r+0x1e>
 800f814:	6023      	str	r3, [r4, #0]
 800f816:	bd38      	pop	{r3, r4, r5, pc}
 800f818:	20000bac 	.word	0x20000bac

0800f81c <_close_r>:
 800f81c:	b538      	push	{r3, r4, r5, lr}
 800f81e:	4d06      	ldr	r5, [pc, #24]	; (800f838 <_close_r+0x1c>)
 800f820:	2300      	movs	r3, #0
 800f822:	4604      	mov	r4, r0
 800f824:	4608      	mov	r0, r1
 800f826:	602b      	str	r3, [r5, #0]
 800f828:	f7f2 fc57 	bl	80020da <_close>
 800f82c:	1c43      	adds	r3, r0, #1
 800f82e:	d102      	bne.n	800f836 <_close_r+0x1a>
 800f830:	682b      	ldr	r3, [r5, #0]
 800f832:	b103      	cbz	r3, 800f836 <_close_r+0x1a>
 800f834:	6023      	str	r3, [r4, #0]
 800f836:	bd38      	pop	{r3, r4, r5, pc}
 800f838:	20000bac 	.word	0x20000bac

0800f83c <_fstat_r>:
 800f83c:	b538      	push	{r3, r4, r5, lr}
 800f83e:	4d07      	ldr	r5, [pc, #28]	; (800f85c <_fstat_r+0x20>)
 800f840:	2300      	movs	r3, #0
 800f842:	4604      	mov	r4, r0
 800f844:	4608      	mov	r0, r1
 800f846:	4611      	mov	r1, r2
 800f848:	602b      	str	r3, [r5, #0]
 800f84a:	f7f2 fc52 	bl	80020f2 <_fstat>
 800f84e:	1c43      	adds	r3, r0, #1
 800f850:	d102      	bne.n	800f858 <_fstat_r+0x1c>
 800f852:	682b      	ldr	r3, [r5, #0]
 800f854:	b103      	cbz	r3, 800f858 <_fstat_r+0x1c>
 800f856:	6023      	str	r3, [r4, #0]
 800f858:	bd38      	pop	{r3, r4, r5, pc}
 800f85a:	bf00      	nop
 800f85c:	20000bac 	.word	0x20000bac

0800f860 <_isatty_r>:
 800f860:	b538      	push	{r3, r4, r5, lr}
 800f862:	4d06      	ldr	r5, [pc, #24]	; (800f87c <_isatty_r+0x1c>)
 800f864:	2300      	movs	r3, #0
 800f866:	4604      	mov	r4, r0
 800f868:	4608      	mov	r0, r1
 800f86a:	602b      	str	r3, [r5, #0]
 800f86c:	f7f2 fc51 	bl	8002112 <_isatty>
 800f870:	1c43      	adds	r3, r0, #1
 800f872:	d102      	bne.n	800f87a <_isatty_r+0x1a>
 800f874:	682b      	ldr	r3, [r5, #0]
 800f876:	b103      	cbz	r3, 800f87a <_isatty_r+0x1a>
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	bd38      	pop	{r3, r4, r5, pc}
 800f87c:	20000bac 	.word	0x20000bac

0800f880 <_lseek_r>:
 800f880:	b538      	push	{r3, r4, r5, lr}
 800f882:	4d07      	ldr	r5, [pc, #28]	; (800f8a0 <_lseek_r+0x20>)
 800f884:	4604      	mov	r4, r0
 800f886:	4608      	mov	r0, r1
 800f888:	4611      	mov	r1, r2
 800f88a:	2200      	movs	r2, #0
 800f88c:	602a      	str	r2, [r5, #0]
 800f88e:	461a      	mov	r2, r3
 800f890:	f7f2 fc4a 	bl	8002128 <_lseek>
 800f894:	1c43      	adds	r3, r0, #1
 800f896:	d102      	bne.n	800f89e <_lseek_r+0x1e>
 800f898:	682b      	ldr	r3, [r5, #0]
 800f89a:	b103      	cbz	r3, 800f89e <_lseek_r+0x1e>
 800f89c:	6023      	str	r3, [r4, #0]
 800f89e:	bd38      	pop	{r3, r4, r5, pc}
 800f8a0:	20000bac 	.word	0x20000bac

0800f8a4 <_read_r>:
 800f8a4:	b538      	push	{r3, r4, r5, lr}
 800f8a6:	4d07      	ldr	r5, [pc, #28]	; (800f8c4 <_read_r+0x20>)
 800f8a8:	4604      	mov	r4, r0
 800f8aa:	4608      	mov	r0, r1
 800f8ac:	4611      	mov	r1, r2
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	602a      	str	r2, [r5, #0]
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	f7f2 fbd8 	bl	8002068 <_read>
 800f8b8:	1c43      	adds	r3, r0, #1
 800f8ba:	d102      	bne.n	800f8c2 <_read_r+0x1e>
 800f8bc:	682b      	ldr	r3, [r5, #0]
 800f8be:	b103      	cbz	r3, 800f8c2 <_read_r+0x1e>
 800f8c0:	6023      	str	r3, [r4, #0]
 800f8c2:	bd38      	pop	{r3, r4, r5, pc}
 800f8c4:	20000bac 	.word	0x20000bac

0800f8c8 <log>:
 800f8c8:	b538      	push	{r3, r4, r5, lr}
 800f8ca:	ed2d 8b02 	vpush	{d8}
 800f8ce:	ec55 4b10 	vmov	r4, r5, d0
 800f8d2:	f000 f865 	bl	800f9a0 <__ieee754_log>
 800f8d6:	4622      	mov	r2, r4
 800f8d8:	462b      	mov	r3, r5
 800f8da:	4620      	mov	r0, r4
 800f8dc:	4629      	mov	r1, r5
 800f8de:	eeb0 8a40 	vmov.f32	s16, s0
 800f8e2:	eef0 8a60 	vmov.f32	s17, s1
 800f8e6:	f7f1 f929 	bl	8000b3c <__aeabi_dcmpun>
 800f8ea:	b998      	cbnz	r0, 800f914 <log+0x4c>
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	4629      	mov	r1, r5
 800f8f4:	f7f1 f918 	bl	8000b28 <__aeabi_dcmpgt>
 800f8f8:	b960      	cbnz	r0, 800f914 <log+0x4c>
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	4620      	mov	r0, r4
 800f900:	4629      	mov	r1, r5
 800f902:	f7f1 f8e9 	bl	8000ad8 <__aeabi_dcmpeq>
 800f906:	b160      	cbz	r0, 800f922 <log+0x5a>
 800f908:	f7fd f85e 	bl	800c9c8 <__errno>
 800f90c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800f938 <log+0x70>
 800f910:	2322      	movs	r3, #34	; 0x22
 800f912:	6003      	str	r3, [r0, #0]
 800f914:	eeb0 0a48 	vmov.f32	s0, s16
 800f918:	eef0 0a68 	vmov.f32	s1, s17
 800f91c:	ecbd 8b02 	vpop	{d8}
 800f920:	bd38      	pop	{r3, r4, r5, pc}
 800f922:	f7fd f851 	bl	800c9c8 <__errno>
 800f926:	ecbd 8b02 	vpop	{d8}
 800f92a:	2321      	movs	r3, #33	; 0x21
 800f92c:	6003      	str	r3, [r0, #0]
 800f92e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f932:	4803      	ldr	r0, [pc, #12]	; (800f940 <log+0x78>)
 800f934:	f000 baa0 	b.w	800fe78 <nan>
 800f938:	00000000 	.word	0x00000000
 800f93c:	fff00000 	.word	0xfff00000
 800f940:	08010c20 	.word	0x08010c20

0800f944 <sqrt>:
 800f944:	b538      	push	{r3, r4, r5, lr}
 800f946:	ed2d 8b02 	vpush	{d8}
 800f94a:	ec55 4b10 	vmov	r4, r5, d0
 800f94e:	f000 f9e1 	bl	800fd14 <__ieee754_sqrt>
 800f952:	4622      	mov	r2, r4
 800f954:	462b      	mov	r3, r5
 800f956:	4620      	mov	r0, r4
 800f958:	4629      	mov	r1, r5
 800f95a:	eeb0 8a40 	vmov.f32	s16, s0
 800f95e:	eef0 8a60 	vmov.f32	s17, s1
 800f962:	f7f1 f8eb 	bl	8000b3c <__aeabi_dcmpun>
 800f966:	b990      	cbnz	r0, 800f98e <sqrt+0x4a>
 800f968:	2200      	movs	r2, #0
 800f96a:	2300      	movs	r3, #0
 800f96c:	4620      	mov	r0, r4
 800f96e:	4629      	mov	r1, r5
 800f970:	f7f1 f8bc 	bl	8000aec <__aeabi_dcmplt>
 800f974:	b158      	cbz	r0, 800f98e <sqrt+0x4a>
 800f976:	f7fd f827 	bl	800c9c8 <__errno>
 800f97a:	2321      	movs	r3, #33	; 0x21
 800f97c:	6003      	str	r3, [r0, #0]
 800f97e:	2200      	movs	r2, #0
 800f980:	2300      	movs	r3, #0
 800f982:	4610      	mov	r0, r2
 800f984:	4619      	mov	r1, r3
 800f986:	f7f0 ff69 	bl	800085c <__aeabi_ddiv>
 800f98a:	ec41 0b18 	vmov	d8, r0, r1
 800f98e:	eeb0 0a48 	vmov.f32	s0, s16
 800f992:	eef0 0a68 	vmov.f32	s1, s17
 800f996:	ecbd 8b02 	vpop	{d8}
 800f99a:	bd38      	pop	{r3, r4, r5, pc}
 800f99c:	0000      	movs	r0, r0
	...

0800f9a0 <__ieee754_log>:
 800f9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a4:	ec51 0b10 	vmov	r0, r1, d0
 800f9a8:	ed2d 8b04 	vpush	{d8-d9}
 800f9ac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f9b0:	b083      	sub	sp, #12
 800f9b2:	460d      	mov	r5, r1
 800f9b4:	da29      	bge.n	800fa0a <__ieee754_log+0x6a>
 800f9b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f9ba:	4303      	orrs	r3, r0
 800f9bc:	ee10 2a10 	vmov	r2, s0
 800f9c0:	d10c      	bne.n	800f9dc <__ieee754_log+0x3c>
 800f9c2:	49cf      	ldr	r1, [pc, #828]	; (800fd00 <__ieee754_log+0x360>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	f7f0 ff47 	bl	800085c <__aeabi_ddiv>
 800f9ce:	ec41 0b10 	vmov	d0, r0, r1
 800f9d2:	b003      	add	sp, #12
 800f9d4:	ecbd 8b04 	vpop	{d8-d9}
 800f9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9dc:	2900      	cmp	r1, #0
 800f9de:	da05      	bge.n	800f9ec <__ieee754_log+0x4c>
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	f7f0 fc59 	bl	8000298 <__aeabi_dsub>
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	e7ee      	b.n	800f9ca <__ieee754_log+0x2a>
 800f9ec:	4bc5      	ldr	r3, [pc, #788]	; (800fd04 <__ieee754_log+0x364>)
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f7f0 fe0a 	bl	8000608 <__aeabi_dmul>
 800f9f4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800f9f8:	460d      	mov	r5, r1
 800f9fa:	4ac3      	ldr	r2, [pc, #780]	; (800fd08 <__ieee754_log+0x368>)
 800f9fc:	4295      	cmp	r5, r2
 800f9fe:	dd06      	ble.n	800fa0e <__ieee754_log+0x6e>
 800fa00:	4602      	mov	r2, r0
 800fa02:	460b      	mov	r3, r1
 800fa04:	f7f0 fc4a 	bl	800029c <__adddf3>
 800fa08:	e7e1      	b.n	800f9ce <__ieee754_log+0x2e>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	e7f5      	b.n	800f9fa <__ieee754_log+0x5a>
 800fa0e:	152c      	asrs	r4, r5, #20
 800fa10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800fa14:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fa18:	441c      	add	r4, r3
 800fa1a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800fa1e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800fa22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa26:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800fa2a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800fa2e:	ea42 0105 	orr.w	r1, r2, r5
 800fa32:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800fa36:	2200      	movs	r2, #0
 800fa38:	4bb4      	ldr	r3, [pc, #720]	; (800fd0c <__ieee754_log+0x36c>)
 800fa3a:	f7f0 fc2d 	bl	8000298 <__aeabi_dsub>
 800fa3e:	1cab      	adds	r3, r5, #2
 800fa40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa44:	2b02      	cmp	r3, #2
 800fa46:	4682      	mov	sl, r0
 800fa48:	468b      	mov	fp, r1
 800fa4a:	f04f 0200 	mov.w	r2, #0
 800fa4e:	dc53      	bgt.n	800faf8 <__ieee754_log+0x158>
 800fa50:	2300      	movs	r3, #0
 800fa52:	f7f1 f841 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa56:	b1d0      	cbz	r0, 800fa8e <__ieee754_log+0xee>
 800fa58:	2c00      	cmp	r4, #0
 800fa5a:	f000 8122 	beq.w	800fca2 <__ieee754_log+0x302>
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f7f0 fd68 	bl	8000534 <__aeabi_i2d>
 800fa64:	a390      	add	r3, pc, #576	; (adr r3, 800fca8 <__ieee754_log+0x308>)
 800fa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	460f      	mov	r7, r1
 800fa6e:	f7f0 fdcb 	bl	8000608 <__aeabi_dmul>
 800fa72:	a38f      	add	r3, pc, #572	; (adr r3, 800fcb0 <__ieee754_log+0x310>)
 800fa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa78:	4604      	mov	r4, r0
 800fa7a:	460d      	mov	r5, r1
 800fa7c:	4630      	mov	r0, r6
 800fa7e:	4639      	mov	r1, r7
 800fa80:	f7f0 fdc2 	bl	8000608 <__aeabi_dmul>
 800fa84:	4602      	mov	r2, r0
 800fa86:	460b      	mov	r3, r1
 800fa88:	4620      	mov	r0, r4
 800fa8a:	4629      	mov	r1, r5
 800fa8c:	e7ba      	b.n	800fa04 <__ieee754_log+0x64>
 800fa8e:	a38a      	add	r3, pc, #552	; (adr r3, 800fcb8 <__ieee754_log+0x318>)
 800fa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa94:	4650      	mov	r0, sl
 800fa96:	4659      	mov	r1, fp
 800fa98:	f7f0 fdb6 	bl	8000608 <__aeabi_dmul>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	460b      	mov	r3, r1
 800faa0:	2000      	movs	r0, #0
 800faa2:	499b      	ldr	r1, [pc, #620]	; (800fd10 <__ieee754_log+0x370>)
 800faa4:	f7f0 fbf8 	bl	8000298 <__aeabi_dsub>
 800faa8:	4652      	mov	r2, sl
 800faaa:	4606      	mov	r6, r0
 800faac:	460f      	mov	r7, r1
 800faae:	465b      	mov	r3, fp
 800fab0:	4650      	mov	r0, sl
 800fab2:	4659      	mov	r1, fp
 800fab4:	f7f0 fda8 	bl	8000608 <__aeabi_dmul>
 800fab8:	4602      	mov	r2, r0
 800faba:	460b      	mov	r3, r1
 800fabc:	4630      	mov	r0, r6
 800fabe:	4639      	mov	r1, r7
 800fac0:	f7f0 fda2 	bl	8000608 <__aeabi_dmul>
 800fac4:	4606      	mov	r6, r0
 800fac6:	460f      	mov	r7, r1
 800fac8:	b914      	cbnz	r4, 800fad0 <__ieee754_log+0x130>
 800faca:	4632      	mov	r2, r6
 800facc:	463b      	mov	r3, r7
 800face:	e0a2      	b.n	800fc16 <__ieee754_log+0x276>
 800fad0:	4620      	mov	r0, r4
 800fad2:	f7f0 fd2f 	bl	8000534 <__aeabi_i2d>
 800fad6:	a374      	add	r3, pc, #464	; (adr r3, 800fca8 <__ieee754_log+0x308>)
 800fad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fadc:	4680      	mov	r8, r0
 800fade:	4689      	mov	r9, r1
 800fae0:	f7f0 fd92 	bl	8000608 <__aeabi_dmul>
 800fae4:	a372      	add	r3, pc, #456	; (adr r3, 800fcb0 <__ieee754_log+0x310>)
 800fae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faea:	4604      	mov	r4, r0
 800faec:	460d      	mov	r5, r1
 800faee:	4640      	mov	r0, r8
 800faf0:	4649      	mov	r1, r9
 800faf2:	f7f0 fd89 	bl	8000608 <__aeabi_dmul>
 800faf6:	e0a7      	b.n	800fc48 <__ieee754_log+0x2a8>
 800faf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fafc:	f7f0 fbce 	bl	800029c <__adddf3>
 800fb00:	4602      	mov	r2, r0
 800fb02:	460b      	mov	r3, r1
 800fb04:	4650      	mov	r0, sl
 800fb06:	4659      	mov	r1, fp
 800fb08:	f7f0 fea8 	bl	800085c <__aeabi_ddiv>
 800fb0c:	ec41 0b18 	vmov	d8, r0, r1
 800fb10:	4620      	mov	r0, r4
 800fb12:	f7f0 fd0f 	bl	8000534 <__aeabi_i2d>
 800fb16:	ec53 2b18 	vmov	r2, r3, d8
 800fb1a:	ec41 0b19 	vmov	d9, r0, r1
 800fb1e:	ec51 0b18 	vmov	r0, r1, d8
 800fb22:	f7f0 fd71 	bl	8000608 <__aeabi_dmul>
 800fb26:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800fb2a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800fb2e:	9301      	str	r3, [sp, #4]
 800fb30:	4602      	mov	r2, r0
 800fb32:	460b      	mov	r3, r1
 800fb34:	4680      	mov	r8, r0
 800fb36:	4689      	mov	r9, r1
 800fb38:	f7f0 fd66 	bl	8000608 <__aeabi_dmul>
 800fb3c:	a360      	add	r3, pc, #384	; (adr r3, 800fcc0 <__ieee754_log+0x320>)
 800fb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb42:	4606      	mov	r6, r0
 800fb44:	460f      	mov	r7, r1
 800fb46:	f7f0 fd5f 	bl	8000608 <__aeabi_dmul>
 800fb4a:	a35f      	add	r3, pc, #380	; (adr r3, 800fcc8 <__ieee754_log+0x328>)
 800fb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb50:	f7f0 fba4 	bl	800029c <__adddf3>
 800fb54:	4632      	mov	r2, r6
 800fb56:	463b      	mov	r3, r7
 800fb58:	f7f0 fd56 	bl	8000608 <__aeabi_dmul>
 800fb5c:	a35c      	add	r3, pc, #368	; (adr r3, 800fcd0 <__ieee754_log+0x330>)
 800fb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb62:	f7f0 fb9b 	bl	800029c <__adddf3>
 800fb66:	4632      	mov	r2, r6
 800fb68:	463b      	mov	r3, r7
 800fb6a:	f7f0 fd4d 	bl	8000608 <__aeabi_dmul>
 800fb6e:	a35a      	add	r3, pc, #360	; (adr r3, 800fcd8 <__ieee754_log+0x338>)
 800fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb74:	f7f0 fb92 	bl	800029c <__adddf3>
 800fb78:	4642      	mov	r2, r8
 800fb7a:	464b      	mov	r3, r9
 800fb7c:	f7f0 fd44 	bl	8000608 <__aeabi_dmul>
 800fb80:	a357      	add	r3, pc, #348	; (adr r3, 800fce0 <__ieee754_log+0x340>)
 800fb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb86:	4680      	mov	r8, r0
 800fb88:	4689      	mov	r9, r1
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	4639      	mov	r1, r7
 800fb8e:	f7f0 fd3b 	bl	8000608 <__aeabi_dmul>
 800fb92:	a355      	add	r3, pc, #340	; (adr r3, 800fce8 <__ieee754_log+0x348>)
 800fb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb98:	f7f0 fb80 	bl	800029c <__adddf3>
 800fb9c:	4632      	mov	r2, r6
 800fb9e:	463b      	mov	r3, r7
 800fba0:	f7f0 fd32 	bl	8000608 <__aeabi_dmul>
 800fba4:	a352      	add	r3, pc, #328	; (adr r3, 800fcf0 <__ieee754_log+0x350>)
 800fba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbaa:	f7f0 fb77 	bl	800029c <__adddf3>
 800fbae:	4632      	mov	r2, r6
 800fbb0:	463b      	mov	r3, r7
 800fbb2:	f7f0 fd29 	bl	8000608 <__aeabi_dmul>
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	4602      	mov	r2, r0
 800fbba:	4649      	mov	r1, r9
 800fbbc:	4640      	mov	r0, r8
 800fbbe:	f7f0 fb6d 	bl	800029c <__adddf3>
 800fbc2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800fbc6:	9b01      	ldr	r3, [sp, #4]
 800fbc8:	3551      	adds	r5, #81	; 0x51
 800fbca:	431d      	orrs	r5, r3
 800fbcc:	2d00      	cmp	r5, #0
 800fbce:	4680      	mov	r8, r0
 800fbd0:	4689      	mov	r9, r1
 800fbd2:	dd48      	ble.n	800fc66 <__ieee754_log+0x2c6>
 800fbd4:	4b4e      	ldr	r3, [pc, #312]	; (800fd10 <__ieee754_log+0x370>)
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	4650      	mov	r0, sl
 800fbda:	4659      	mov	r1, fp
 800fbdc:	f7f0 fd14 	bl	8000608 <__aeabi_dmul>
 800fbe0:	4652      	mov	r2, sl
 800fbe2:	465b      	mov	r3, fp
 800fbe4:	f7f0 fd10 	bl	8000608 <__aeabi_dmul>
 800fbe8:	4602      	mov	r2, r0
 800fbea:	460b      	mov	r3, r1
 800fbec:	4606      	mov	r6, r0
 800fbee:	460f      	mov	r7, r1
 800fbf0:	4640      	mov	r0, r8
 800fbf2:	4649      	mov	r1, r9
 800fbf4:	f7f0 fb52 	bl	800029c <__adddf3>
 800fbf8:	ec53 2b18 	vmov	r2, r3, d8
 800fbfc:	f7f0 fd04 	bl	8000608 <__aeabi_dmul>
 800fc00:	4680      	mov	r8, r0
 800fc02:	4689      	mov	r9, r1
 800fc04:	b964      	cbnz	r4, 800fc20 <__ieee754_log+0x280>
 800fc06:	4602      	mov	r2, r0
 800fc08:	460b      	mov	r3, r1
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	4639      	mov	r1, r7
 800fc0e:	f7f0 fb43 	bl	8000298 <__aeabi_dsub>
 800fc12:	4602      	mov	r2, r0
 800fc14:	460b      	mov	r3, r1
 800fc16:	4650      	mov	r0, sl
 800fc18:	4659      	mov	r1, fp
 800fc1a:	f7f0 fb3d 	bl	8000298 <__aeabi_dsub>
 800fc1e:	e6d6      	b.n	800f9ce <__ieee754_log+0x2e>
 800fc20:	a321      	add	r3, pc, #132	; (adr r3, 800fca8 <__ieee754_log+0x308>)
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	ec51 0b19 	vmov	r0, r1, d9
 800fc2a:	f7f0 fced 	bl	8000608 <__aeabi_dmul>
 800fc2e:	a320      	add	r3, pc, #128	; (adr r3, 800fcb0 <__ieee754_log+0x310>)
 800fc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc34:	4604      	mov	r4, r0
 800fc36:	460d      	mov	r5, r1
 800fc38:	ec51 0b19 	vmov	r0, r1, d9
 800fc3c:	f7f0 fce4 	bl	8000608 <__aeabi_dmul>
 800fc40:	4642      	mov	r2, r8
 800fc42:	464b      	mov	r3, r9
 800fc44:	f7f0 fb2a 	bl	800029c <__adddf3>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	4639      	mov	r1, r7
 800fc50:	f7f0 fb22 	bl	8000298 <__aeabi_dsub>
 800fc54:	4652      	mov	r2, sl
 800fc56:	465b      	mov	r3, fp
 800fc58:	f7f0 fb1e 	bl	8000298 <__aeabi_dsub>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	460b      	mov	r3, r1
 800fc60:	4620      	mov	r0, r4
 800fc62:	4629      	mov	r1, r5
 800fc64:	e7d9      	b.n	800fc1a <__ieee754_log+0x27a>
 800fc66:	4602      	mov	r2, r0
 800fc68:	460b      	mov	r3, r1
 800fc6a:	4650      	mov	r0, sl
 800fc6c:	4659      	mov	r1, fp
 800fc6e:	f7f0 fb13 	bl	8000298 <__aeabi_dsub>
 800fc72:	ec53 2b18 	vmov	r2, r3, d8
 800fc76:	f7f0 fcc7 	bl	8000608 <__aeabi_dmul>
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	460f      	mov	r7, r1
 800fc7e:	2c00      	cmp	r4, #0
 800fc80:	f43f af23 	beq.w	800faca <__ieee754_log+0x12a>
 800fc84:	a308      	add	r3, pc, #32	; (adr r3, 800fca8 <__ieee754_log+0x308>)
 800fc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8a:	ec51 0b19 	vmov	r0, r1, d9
 800fc8e:	f7f0 fcbb 	bl	8000608 <__aeabi_dmul>
 800fc92:	a307      	add	r3, pc, #28	; (adr r3, 800fcb0 <__ieee754_log+0x310>)
 800fc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc98:	4604      	mov	r4, r0
 800fc9a:	460d      	mov	r5, r1
 800fc9c:	ec51 0b19 	vmov	r0, r1, d9
 800fca0:	e727      	b.n	800faf2 <__ieee754_log+0x152>
 800fca2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800fcf8 <__ieee754_log+0x358>
 800fca6:	e694      	b.n	800f9d2 <__ieee754_log+0x32>
 800fca8:	fee00000 	.word	0xfee00000
 800fcac:	3fe62e42 	.word	0x3fe62e42
 800fcb0:	35793c76 	.word	0x35793c76
 800fcb4:	3dea39ef 	.word	0x3dea39ef
 800fcb8:	55555555 	.word	0x55555555
 800fcbc:	3fd55555 	.word	0x3fd55555
 800fcc0:	df3e5244 	.word	0xdf3e5244
 800fcc4:	3fc2f112 	.word	0x3fc2f112
 800fcc8:	96cb03de 	.word	0x96cb03de
 800fccc:	3fc74664 	.word	0x3fc74664
 800fcd0:	94229359 	.word	0x94229359
 800fcd4:	3fd24924 	.word	0x3fd24924
 800fcd8:	55555593 	.word	0x55555593
 800fcdc:	3fe55555 	.word	0x3fe55555
 800fce0:	d078c69f 	.word	0xd078c69f
 800fce4:	3fc39a09 	.word	0x3fc39a09
 800fce8:	1d8e78af 	.word	0x1d8e78af
 800fcec:	3fcc71c5 	.word	0x3fcc71c5
 800fcf0:	9997fa04 	.word	0x9997fa04
 800fcf4:	3fd99999 	.word	0x3fd99999
	...
 800fd00:	c3500000 	.word	0xc3500000
 800fd04:	43500000 	.word	0x43500000
 800fd08:	7fefffff 	.word	0x7fefffff
 800fd0c:	3ff00000 	.word	0x3ff00000
 800fd10:	3fe00000 	.word	0x3fe00000

0800fd14 <__ieee754_sqrt>:
 800fd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd18:	ec55 4b10 	vmov	r4, r5, d0
 800fd1c:	4e55      	ldr	r6, [pc, #340]	; (800fe74 <__ieee754_sqrt+0x160>)
 800fd1e:	43ae      	bics	r6, r5
 800fd20:	ee10 0a10 	vmov	r0, s0
 800fd24:	ee10 3a10 	vmov	r3, s0
 800fd28:	462a      	mov	r2, r5
 800fd2a:	4629      	mov	r1, r5
 800fd2c:	d110      	bne.n	800fd50 <__ieee754_sqrt+0x3c>
 800fd2e:	ee10 2a10 	vmov	r2, s0
 800fd32:	462b      	mov	r3, r5
 800fd34:	f7f0 fc68 	bl	8000608 <__aeabi_dmul>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	4629      	mov	r1, r5
 800fd40:	f7f0 faac 	bl	800029c <__adddf3>
 800fd44:	4604      	mov	r4, r0
 800fd46:	460d      	mov	r5, r1
 800fd48:	ec45 4b10 	vmov	d0, r4, r5
 800fd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd50:	2d00      	cmp	r5, #0
 800fd52:	dc10      	bgt.n	800fd76 <__ieee754_sqrt+0x62>
 800fd54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fd58:	4330      	orrs	r0, r6
 800fd5a:	d0f5      	beq.n	800fd48 <__ieee754_sqrt+0x34>
 800fd5c:	b15d      	cbz	r5, 800fd76 <__ieee754_sqrt+0x62>
 800fd5e:	ee10 2a10 	vmov	r2, s0
 800fd62:	462b      	mov	r3, r5
 800fd64:	ee10 0a10 	vmov	r0, s0
 800fd68:	f7f0 fa96 	bl	8000298 <__aeabi_dsub>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	460b      	mov	r3, r1
 800fd70:	f7f0 fd74 	bl	800085c <__aeabi_ddiv>
 800fd74:	e7e6      	b.n	800fd44 <__ieee754_sqrt+0x30>
 800fd76:	1512      	asrs	r2, r2, #20
 800fd78:	d074      	beq.n	800fe64 <__ieee754_sqrt+0x150>
 800fd7a:	07d4      	lsls	r4, r2, #31
 800fd7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fd80:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fd84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fd88:	bf5e      	ittt	pl
 800fd8a:	0fda      	lsrpl	r2, r3, #31
 800fd8c:	005b      	lslpl	r3, r3, #1
 800fd8e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fd92:	2400      	movs	r4, #0
 800fd94:	0fda      	lsrs	r2, r3, #31
 800fd96:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fd9a:	107f      	asrs	r7, r7, #1
 800fd9c:	005b      	lsls	r3, r3, #1
 800fd9e:	2516      	movs	r5, #22
 800fda0:	4620      	mov	r0, r4
 800fda2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fda6:	1886      	adds	r6, r0, r2
 800fda8:	428e      	cmp	r6, r1
 800fdaa:	bfde      	ittt	le
 800fdac:	1b89      	suble	r1, r1, r6
 800fdae:	18b0      	addle	r0, r6, r2
 800fdb0:	18a4      	addle	r4, r4, r2
 800fdb2:	0049      	lsls	r1, r1, #1
 800fdb4:	3d01      	subs	r5, #1
 800fdb6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fdba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fdbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fdc2:	d1f0      	bne.n	800fda6 <__ieee754_sqrt+0x92>
 800fdc4:	462a      	mov	r2, r5
 800fdc6:	f04f 0e20 	mov.w	lr, #32
 800fdca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fdce:	4281      	cmp	r1, r0
 800fdd0:	eb06 0c05 	add.w	ip, r6, r5
 800fdd4:	dc02      	bgt.n	800fddc <__ieee754_sqrt+0xc8>
 800fdd6:	d113      	bne.n	800fe00 <__ieee754_sqrt+0xec>
 800fdd8:	459c      	cmp	ip, r3
 800fdda:	d811      	bhi.n	800fe00 <__ieee754_sqrt+0xec>
 800fddc:	f1bc 0f00 	cmp.w	ip, #0
 800fde0:	eb0c 0506 	add.w	r5, ip, r6
 800fde4:	da43      	bge.n	800fe6e <__ieee754_sqrt+0x15a>
 800fde6:	2d00      	cmp	r5, #0
 800fde8:	db41      	blt.n	800fe6e <__ieee754_sqrt+0x15a>
 800fdea:	f100 0801 	add.w	r8, r0, #1
 800fdee:	1a09      	subs	r1, r1, r0
 800fdf0:	459c      	cmp	ip, r3
 800fdf2:	bf88      	it	hi
 800fdf4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800fdf8:	eba3 030c 	sub.w	r3, r3, ip
 800fdfc:	4432      	add	r2, r6
 800fdfe:	4640      	mov	r0, r8
 800fe00:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fe04:	f1be 0e01 	subs.w	lr, lr, #1
 800fe08:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fe0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe10:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fe14:	d1db      	bne.n	800fdce <__ieee754_sqrt+0xba>
 800fe16:	430b      	orrs	r3, r1
 800fe18:	d006      	beq.n	800fe28 <__ieee754_sqrt+0x114>
 800fe1a:	1c50      	adds	r0, r2, #1
 800fe1c:	bf13      	iteet	ne
 800fe1e:	3201      	addne	r2, #1
 800fe20:	3401      	addeq	r4, #1
 800fe22:	4672      	moveq	r2, lr
 800fe24:	f022 0201 	bicne.w	r2, r2, #1
 800fe28:	1063      	asrs	r3, r4, #1
 800fe2a:	0852      	lsrs	r2, r2, #1
 800fe2c:	07e1      	lsls	r1, r4, #31
 800fe2e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fe32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fe36:	bf48      	it	mi
 800fe38:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fe3c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fe40:	4614      	mov	r4, r2
 800fe42:	e781      	b.n	800fd48 <__ieee754_sqrt+0x34>
 800fe44:	0ad9      	lsrs	r1, r3, #11
 800fe46:	3815      	subs	r0, #21
 800fe48:	055b      	lsls	r3, r3, #21
 800fe4a:	2900      	cmp	r1, #0
 800fe4c:	d0fa      	beq.n	800fe44 <__ieee754_sqrt+0x130>
 800fe4e:	02cd      	lsls	r5, r1, #11
 800fe50:	d50a      	bpl.n	800fe68 <__ieee754_sqrt+0x154>
 800fe52:	f1c2 0420 	rsb	r4, r2, #32
 800fe56:	fa23 f404 	lsr.w	r4, r3, r4
 800fe5a:	1e55      	subs	r5, r2, #1
 800fe5c:	4093      	lsls	r3, r2
 800fe5e:	4321      	orrs	r1, r4
 800fe60:	1b42      	subs	r2, r0, r5
 800fe62:	e78a      	b.n	800fd7a <__ieee754_sqrt+0x66>
 800fe64:	4610      	mov	r0, r2
 800fe66:	e7f0      	b.n	800fe4a <__ieee754_sqrt+0x136>
 800fe68:	0049      	lsls	r1, r1, #1
 800fe6a:	3201      	adds	r2, #1
 800fe6c:	e7ef      	b.n	800fe4e <__ieee754_sqrt+0x13a>
 800fe6e:	4680      	mov	r8, r0
 800fe70:	e7bd      	b.n	800fdee <__ieee754_sqrt+0xda>
 800fe72:	bf00      	nop
 800fe74:	7ff00000 	.word	0x7ff00000

0800fe78 <nan>:
 800fe78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fe80 <nan+0x8>
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	00000000 	.word	0x00000000
 800fe84:	7ff80000 	.word	0x7ff80000

0800fe88 <_init>:
 800fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe8a:	bf00      	nop
 800fe8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe8e:	bc08      	pop	{r3}
 800fe90:	469e      	mov	lr, r3
 800fe92:	4770      	bx	lr

0800fe94 <_fini>:
 800fe94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe96:	bf00      	nop
 800fe98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe9a:	bc08      	pop	{r3}
 800fe9c:	469e      	mov	lr, r3
 800fe9e:	4770      	bx	lr
