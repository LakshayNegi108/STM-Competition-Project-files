
ESP_12F Interface_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009884  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af4  08009a28  08009a28  00019a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a51c  0800a51c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a51c  0800a51c  0001a51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a524  0800a524  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a524  0800a524  0001a524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a528  0800a528  0001a528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a52c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004afc  200001f0  0800a71c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cec  0800a71c  00024cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb8b  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f35  00000000  00000000  0003cdab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00040ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00042490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb29  00000000  00000000  00043b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c87a  00000000  00000000  0005f629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a735f  00000000  00000000  0007bea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075e8  00000000  00000000  00123254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a0c 	.word	0x08009a0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08009a0c 	.word	0x08009a0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <vApplicationGetIdleTaskMemory+0x30>)
 8000ed2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2000020c 	.word	0x2000020c
 8000eec:	200002c0 	.word	0x200002c0

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b09a      	sub	sp, #104	; 0x68
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fd63 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f871 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f000 f9af 	bl	8001260 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f02:	f000 f959 	bl	80011b8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000f06:	f000 f981 	bl	800120c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000f0a:	f000 f8d5 	bl	80010b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f0e:	f000 f925 	bl	800115c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	print("Working\n\r");
 8000f12:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <main+0xc4>)
 8000f14:	f003 fb00 	bl	8004518 <print>
	ESP_Init("realme GT Master Edition", "9999161397");
 8000f18:	4927      	ldr	r1, [pc, #156]	; (8000fb8 <main+0xc8>)
 8000f1a:	4828      	ldr	r0, [pc, #160]	; (8000fbc <main+0xcc>)
 8000f1c:	f003 fb20 	bl	8004560 <ESP_Init>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <main+0xd0>)
 8000f22:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000f2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 f9e5 	bl	8005302 <osMessageCreate>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <main+0xd4>)
 8000f3c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <main+0xd8>)
 8000f40:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f44:	461d      	mov	r5, r3
 8000f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 f972 	bl	8005242 <osThreadCreate>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <main+0xdc>)
 8000f62:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <main+0xe0>)
 8000f66:	f107 0420 	add.w	r4, r7, #32
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 f95f 	bl	8005242 <osThreadCreate>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <main+0xe4>)
 8000f88:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <main+0xe8>)
 8000f8c:	1d3c      	adds	r4, r7, #4
 8000f8e:	461d      	mov	r5, r3
 8000f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 f94e 	bl	8005242 <osThreadCreate>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <main+0xec>)
 8000faa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fac:	f004 f942 	bl	8005234 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fb0:	e7fe      	b.n	8000fb0 <main+0xc0>
 8000fb2:	bf00      	nop
 8000fb4:	08009a4c 	.word	0x08009a4c
 8000fb8:	08009a58 	.word	0x08009a58
 8000fbc:	08009a64 	.word	0x08009a64
 8000fc0:	08009a80 	.word	0x08009a80
 8000fc4:	200005f0 	.word	0x200005f0
 8000fc8:	08009a90 	.word	0x08009a90
 8000fcc:	200005e4 	.word	0x200005e4
 8000fd0:	08009aac 	.word	0x08009aac
 8000fd4:	200005e8 	.word	0x200005e8
 8000fd8:	08009ac8 	.word	0x08009ac8
 8000fdc:	200005ec 	.word	0x200005ec

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	; 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f005 fe75 	bl	8006cde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <SystemClock_Config+0xd0>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <SystemClock_Config+0xd0>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <SystemClock_Config+0xd0>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <SystemClock_Config+0xd4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <SystemClock_Config+0xd4>)
 800102e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <SystemClock_Config+0xd4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001048:	2310      	movs	r3, #16
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	2302      	movs	r3, #2
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001050:	2300      	movs	r3, #0
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001054:	2310      	movs	r3, #16
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001058:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800105c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800105e:	2304      	movs	r3, #4
 8001060:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001062:	2307      	movs	r3, #7
 8001064:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fbc6 	bl	80027fc <HAL_RCC_OscConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001076:	f000 f9ad 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107a:	230f      	movs	r3, #15
 800107c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107e:	2302      	movs	r3, #2
 8001080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fe28 	bl	8002cec <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010a2:	f000 f997 	bl	80013d4 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	; 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_ADC1_Init+0x98>)
 80010cc:	4a21      	ldr	r2, [pc, #132]	; (8001154 <MX_ADC1_Init+0x9c>)
 80010ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_ADC1_Init+0x98>)
 80010d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_ADC1_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_ADC1_Init+0x98>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_ADC1_Init+0x98>)
 80010fa:	4a17      	ldr	r2, [pc, #92]	; (8001158 <MX_ADC1_Init+0xa0>)
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_ADC1_Init+0x98>)
 8001106:	2201      	movs	r2, #1
 8001108:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_ADC1_Init+0x98>)
 8001114:	2201      	movs	r2, #1
 8001116:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_ADC1_Init+0x98>)
 800111a:	f000 fcb7 	bl	8001a8c <HAL_ADC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001124:	f000 f956 	bl	80013d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001128:	230e      	movs	r3, #14
 800112a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_ADC1_Init+0x98>)
 800113a:	f000 fceb 	bl	8001b14 <HAL_ADC_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001144:	f000 f946 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200004c0 	.word	0x200004c0
 8001154:	40012000 	.word	0x40012000
 8001158:	0f000001 	.word	0x0f000001

0800115c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x50>)
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <MX_I2C1_Init+0x54>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x50>)
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_I2C1_Init+0x58>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_I2C1_Init+0x50>)
 800117a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_I2C1_Init+0x50>)
 800119a:	f001 f9eb 	bl	8002574 <HAL_I2C_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 f916 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000508 	.word	0x20000508
 80011b0:	40005400 	.word	0x40005400
 80011b4:	000186a0 	.word	0x000186a0

080011b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f002 fa4e 	bl	8003690 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 f8eb 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000055c 	.word	0x2000055c
 8001208:	40004400 	.word	0x40004400

0800120c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_USART6_UART_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_USART6_UART_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_USART6_UART_Init+0x4c>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_USART6_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_USART6_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART6_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_USART6_UART_Init+0x4c>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_USART6_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_USART6_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_USART6_UART_Init+0x4c>)
 8001244:	f002 fa24 	bl	8003690 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 f8c1 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200005a0 	.word	0x200005a0
 800125c:	40011400 	.word	0x40011400

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <MX_GPIO_Init+0xd0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a2c      	ldr	r2, [pc, #176]	; (8001330 <MX_GPIO_Init+0xd0>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <MX_GPIO_Init+0xd0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a25      	ldr	r2, [pc, #148]	; (8001330 <MX_GPIO_Init+0xd0>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2120      	movs	r1, #32
 80012ea:	4812      	ldr	r0, [pc, #72]	; (8001334 <MX_GPIO_Init+0xd4>)
 80012ec:	f001 f928 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	480c      	ldr	r0, [pc, #48]	; (8001338 <MX_GPIO_Init+0xd8>)
 8001308:	f000 ff96 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800130c:	2320      	movs	r3, #32
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_GPIO_Init+0xd4>)
 8001324:	f000 ff88 	bl	8002238 <HAL_GPIO_Init>

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020800 	.word	0x40020800

0800133c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
//	ESP_Init("realme GT Master Edition", "9999161397");
//	vTaskResume(myTask02Handle);
//	vTaskResume(myTask03Handle);
	/* Infinite loop */
	for (;;) {
		Server_Start(globalTemp);
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <StartDefaultTask+0x20>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eeb0 0a67 	vmov.f32	s0, s15
 800134e:	f003 facb 	bl	80048e8 <Server_Start>
		osDelay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f003 ffc1 	bl	80052da <osDelay>
		Server_Start(globalTemp);
 8001358:	e7f4      	b.n	8001344 <StartDefaultTask+0x8>
 800135a:	bf00      	nop
 800135c:	20000000 	.word	0x20000000

08001360 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		print("Task 2 Running\r\n");
 8001368:	4808      	ldr	r0, [pc, #32]	; (800138c <StartTask02+0x2c>)
 800136a:	f003 f8d5 	bl	8004518 <print>
		globalTemp += 0.5;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <StartTask02+0x30>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001378:	ee77 7a87 	vadd.f32	s15, s15, s14
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <StartTask02+0x30>)
 800137e:	edc3 7a00 	vstr	s15, [r3]
		osDelay(500);
 8001382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001386:	f003 ffa8 	bl	80052da <osDelay>
		print("Task 2 Running\r\n");
 800138a:	e7ed      	b.n	8001368 <StartTask02+0x8>
 800138c:	08009ae4 	.word	0x08009ae4
 8001390:	20000000 	.word	0x20000000

08001394 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		print("//AAA//\r\n");
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <StartTask03+0x18>)
 800139e:	f003 f8bb 	bl	8004518 <print>
		osDelay(500);
 80013a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a6:	f003 ff98 	bl	80052da <osDelay>
		print("//AAA//\r\n");
 80013aa:	e7f7      	b.n	800139c <StartTask03+0x8>
 80013ac:	08009af8 	.word	0x08009af8

080013b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013c2:	f000 fb1f 	bl	8001a04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40014800 	.word	0x40014800

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>
	...

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_MspInit+0x54>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_MspInit+0x54>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_MspInit+0x54>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_MspInit+0x54>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_MspInit+0x54>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_MspInit+0x54>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	210f      	movs	r1, #15
 8001422:	f06f 0001 	mvn.w	r0, #1
 8001426:	f000 fe4b 	bl	80020c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_ADC_MspInit+0x7c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d127      	bne.n	80014aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_ADC_MspInit+0x80>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <HAL_ADC_MspInit+0x80>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_ADC_MspInit+0x80>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_ADC_MspInit+0x80>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_ADC_MspInit+0x80>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_ADC_MspInit+0x80>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001492:	2310      	movs	r3, #16
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001496:	2303      	movs	r3, #3
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_ADC_MspInit+0x84>)
 80014a6:	f000 fec7 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40012000 	.word	0x40012000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020800 	.word	0x40020800

080014c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_I2C_MspInit+0x84>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12c      	bne.n	800153c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_I2C_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_I2C_MspInit+0x88>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_I2C_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	2312      	movs	r3, #18
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001510:	2304      	movs	r3, #4
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <HAL_I2C_MspInit+0x8c>)
 800151c:	f000 fe8c 	bl	8002238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_I2C_MspInit+0x88>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_I2C_MspInit+0x88>)
 800152a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_I2C_MspInit+0x88>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40005400 	.word	0x40005400
 8001548:	40023800 	.word	0x40023800
 800154c:	40020400 	.word	0x40020400

08001550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	; 0x30
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a3a      	ldr	r2, [pc, #232]	; (8001658 <HAL_UART_MspInit+0x108>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d134      	bne.n	80015dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_UART_MspInit+0x10c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a38      	ldr	r2, [pc, #224]	; (800165c <HAL_UART_MspInit+0x10c>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <HAL_UART_MspInit+0x10c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	61bb      	str	r3, [r7, #24]
 800158c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_UART_MspInit+0x10c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a31      	ldr	r2, [pc, #196]	; (800165c <HAL_UART_MspInit+0x10c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <HAL_UART_MspInit+0x10c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015aa:	230c      	movs	r3, #12
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ba:	2307      	movs	r3, #7
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4826      	ldr	r0, [pc, #152]	; (8001660 <HAL_UART_MspInit+0x110>)
 80015c6:	f000 fe37 	bl	8002238 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2105      	movs	r1, #5
 80015ce:	2026      	movs	r0, #38	; 0x26
 80015d0:	f000 fd76 	bl	80020c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d4:	2026      	movs	r0, #38	; 0x26
 80015d6:	f000 fd8f 	bl	80020f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015da:	e039      	b.n	8001650 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <HAL_UART_MspInit+0x114>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d134      	bne.n	8001650 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_UART_MspInit+0x10c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_UART_MspInit+0x10c>)
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_UART_MspInit+0x10c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f003 0320 	and.w	r3, r3, #32
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_UART_MspInit+0x10c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_UART_MspInit+0x10c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_UART_MspInit+0x10c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800161e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001630:	2308      	movs	r3, #8
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4619      	mov	r1, r3
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <HAL_UART_MspInit+0x110>)
 800163c:	f000 fdfc 	bl	8002238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2105      	movs	r1, #5
 8001644:	2047      	movs	r0, #71	; 0x47
 8001646:	f000 fd3b 	bl	80020c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800164a:	2047      	movs	r0, #71	; 0x47
 800164c:	f000 fd54 	bl	80020f8 <HAL_NVIC_EnableIRQ>
}
 8001650:	bf00      	nop
 8001652:	3730      	adds	r7, #48	; 0x30
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40004400 	.word	0x40004400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000
 8001664:	40011400 	.word	0x40011400

08001668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <HAL_InitTick+0xd0>)
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <HAL_InitTick+0xd0>)
 8001682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001686:	6453      	str	r3, [r2, #68]	; 0x44
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <HAL_InitTick+0xd0>)
 800168a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001694:	f107 020c 	add.w	r2, r7, #12
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f001 fd44 	bl	800312c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016a4:	f001 fd2e 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 80016a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <HAL_InitTick+0xd4>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0c9b      	lsrs	r3, r3, #18
 80016b4:	3b01      	subs	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <HAL_InitTick+0xd8>)
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <HAL_InitTick+0xdc>)
 80016bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_InitTick+0xd8>)
 80016c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016c4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_InitTick+0xd8>)
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_InitTick+0xd8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_InitTick+0xd8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_InitTick+0xd8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80016de:	4818      	ldr	r0, [pc, #96]	; (8001740 <HAL_InitTick+0xd8>)
 80016e0:	f001 fd56 	bl	8003190 <HAL_TIM_Base_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80016ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d11b      	bne.n	800172a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80016f2:	4813      	ldr	r0, [pc, #76]	; (8001740 <HAL_InitTick+0xd8>)
 80016f4:	f001 fda6 	bl	8003244 <HAL_TIM_Base_Start_IT>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80016fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001702:	2b00      	cmp	r3, #0
 8001704:	d111      	bne.n	800172a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001706:	201a      	movs	r0, #26
 8001708:	f000 fcf6 	bl	80020f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b0f      	cmp	r3, #15
 8001710:	d808      	bhi.n	8001724 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001712:	2200      	movs	r2, #0
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	201a      	movs	r0, #26
 8001718:	f000 fcd2 	bl	80020c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800171c:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_InitTick+0xe0>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e002      	b.n	800172a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800172a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800172e:	4618      	mov	r0, r3
 8001730:	3730      	adds	r7, #48	; 0x30
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	431bde83 	.word	0x431bde83
 8001740:	200005f4 	.word	0x200005f4
 8001744:	40014800 	.word	0x40014800
 8001748:	20000008 	.word	0x20000008

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800177e:	f001 fdc3 	bl	8003308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200005f4 	.word	0x200005f4

0800178c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <USART2_IRQHandler+0x14>)
 8001792:	f003 fc89 	bl	80050a8 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001796:	4802      	ldr	r0, [pc, #8]	; (80017a0 <USART2_IRQHandler+0x14>)
 8001798:	f001 ffc8 	bl	800372c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000055c 	.word	0x2000055c

080017a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr(&huart6);
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <USART6_IRQHandler+0x14>)
 80017aa:	f003 fc7d 	bl	80050a8 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80017ae:	4802      	ldr	r0, [pc, #8]	; (80017b8 <USART6_IRQHandler+0x14>)
 80017b0:	f001 ffbc 	bl	800372c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200005a0 	.word	0x200005a0

080017bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	return 1;
 80017c0:	2301      	movs	r3, #1
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_kill>:

int _kill(int pid, int sig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017d6:	f005 f951 	bl	8006a7c <__errno>
 80017da:	4603      	mov	r3, r0
 80017dc:	2216      	movs	r2, #22
 80017de:	601a      	str	r2, [r3, #0]
	return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_exit>:

void _exit (int status)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffe7 	bl	80017cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80017fe:	e7fe      	b.n	80017fe <_exit+0x12>

08001800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e00a      	b.n	8001828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001812:	f3af 8000 	nop.w
 8001816:	4601      	mov	r1, r0
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	60ba      	str	r2, [r7, #8]
 800181e:	b2ca      	uxtb	r2, r1
 8001820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	dbf0      	blt.n	8001812 <_read+0x12>
	}

return len;
 8001830:	687b      	ldr	r3, [r7, #4]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e009      	b.n	8001860 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	dbf1      	blt.n	800184c <_write+0x12>
	}
	return len;
 8001868:	687b      	ldr	r3, [r7, #4]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_close>:

int _close(int file)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
	return -1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189a:	605a      	str	r2, [r3, #4]
	return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <_isatty>:

int _isatty(int file)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	return 1;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	return 0;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <_sbrk+0x5c>)
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <_sbrk+0x60>)
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <_sbrk+0x64>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <_sbrk+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	429a      	cmp	r2, r3
 800190a:	d207      	bcs.n	800191c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800190c:	f005 f8b6 	bl	8006a7c <__errno>
 8001910:	4603      	mov	r3, r0
 8001912:	220c      	movs	r2, #12
 8001914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	e009      	b.n	8001930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <_sbrk+0x64>)
 800192c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20018000 	.word	0x20018000
 800193c:	00000400 	.word	0x00000400
 8001940:	2000063c 	.word	0x2000063c
 8001944:	20004cf0 	.word	0x20004cf0

08001948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <SystemInit+0x20>)
 800194e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <SystemInit+0x20>)
 8001954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800196c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001972:	490e      	ldr	r1, [pc, #56]	; (80019ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001974:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001988:	4c0b      	ldr	r4, [pc, #44]	; (80019b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001996:	f7ff ffd7 	bl	8001948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199a:	f005 f96b 	bl	8006c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199e:	f7ff faa7 	bl	8000ef0 <main>
  bx  lr    
 80019a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ac:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80019b0:	0800a52c 	.word	0x0800a52c
  ldr r2, =_sbss
 80019b4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80019b8:	20004cec 	.word	0x20004cec

080019bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <HAL_Init+0x40>)
 80019ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <HAL_Init+0x40>)
 80019d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_Init+0x40>)
 80019e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e8:	2003      	movs	r0, #3
 80019ea:	f000 fb5e 	bl	80020aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ee:	200f      	movs	r0, #15
 80019f0:	f7ff fe3a 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f4:	f7ff fcf4 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	2000000c 	.word	0x2000000c
 8001a28:	20000640 	.word	0x20000640

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000640 	.word	0x20000640

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000000c 	.word	0x2000000c

08001a8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e033      	b.n	8001b0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fcc4 	bl	8001438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d118      	bne.n	8001afc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ad2:	f023 0302 	bic.w	r3, r3, #2
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f93a 	bl	8001d58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
 8001afa:	e001      	b.n	8001b00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1c>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e105      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x228>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b09      	cmp	r3, #9
 8001b3e:	d925      	bls.n	8001b8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68d9      	ldr	r1, [r3, #12]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	3b1e      	subs	r3, #30
 8001b56:	2207      	movs	r2, #7
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	400a      	ands	r2, r1
 8001b64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68d9      	ldr	r1, [r3, #12]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4403      	add	r3, r0
 8001b7e:	3b1e      	subs	r3, #30
 8001b80:	409a      	lsls	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	e022      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6919      	ldr	r1, [r3, #16]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	400a      	ands	r2, r1
 8001bae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6919      	ldr	r1, [r3, #16]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4403      	add	r3, r0
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d824      	bhi.n	8001c24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	3b05      	subs	r3, #5
 8001bec:	221f      	movs	r2, #31
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3b05      	subs	r3, #5
 8001c16:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34
 8001c22:	e04c      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	d824      	bhi.n	8001c76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b23      	subs	r3, #35	; 0x23
 8001c3e:	221f      	movs	r2, #31
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43da      	mvns	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	3b23      	subs	r3, #35	; 0x23
 8001c68:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
 8001c74:	e023      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b41      	subs	r3, #65	; 0x41
 8001c88:	221f      	movs	r2, #31
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	400a      	ands	r2, r1
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b41      	subs	r3, #65	; 0x41
 8001cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cbe:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <HAL_ADC_ConfigChannel+0x234>)
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a21      	ldr	r2, [pc, #132]	; (8001d4c <HAL_ADC_ConfigChannel+0x238>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d109      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1cc>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b12      	cmp	r3, #18
 8001cd2:	d105      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <HAL_ADC_ConfigChannel+0x238>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d123      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x21e>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d003      	beq.n	8001cfa <HAL_ADC_ConfigChannel+0x1e6>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b11      	cmp	r3, #17
 8001cf8:	d11b      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d111      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_ADC_ConfigChannel+0x23c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_ADC_ConfigChannel+0x240>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	0c9a      	lsrs	r2, r3, #18
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d24:	e002      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40012300 	.word	0x40012300
 8001d4c:	40012000 	.word	0x40012000
 8001d50:	20000004 	.word	0x20000004
 8001d54:	431bde83 	.word	0x431bde83

08001d58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d60:	4b79      	ldr	r3, [pc, #484]	; (8001f48 <ADC_Init+0x1f0>)
 8001d62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	021a      	lsls	r2, r3, #8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001db0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6899      	ldr	r1, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	4a58      	ldr	r2, [pc, #352]	; (8001f4c <ADC_Init+0x1f4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d022      	beq.n	8001e36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6899      	ldr	r1, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6899      	ldr	r1, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	e00f      	b.n	8001e56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0202 	bic.w	r2, r2, #2
 8001e64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7e1b      	ldrb	r3, [r3, #24]
 8001e70:	005a      	lsls	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01b      	beq.n	8001ebc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ea2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6859      	ldr	r1, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	035a      	lsls	r2, r3, #13
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	e007      	b.n	8001ecc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	051a      	lsls	r2, r3, #20
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6899      	ldr	r1, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f0e:	025a      	lsls	r2, r3, #9
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6899      	ldr	r1, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	029a      	lsls	r2, r3, #10
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	609a      	str	r2, [r3, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40012300 	.word	0x40012300
 8001f4c:	0f000001 	.word	0x0f000001

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0b      	blt.n	8001fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4907      	ldr	r1, [pc, #28]	; (8001fec <__NVIC_EnableIRQ+0x38>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff4c 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d2:	f7ff ff61 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 80020d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68b9      	ldr	r1, [r7, #8]
 80020dc:	6978      	ldr	r0, [r7, #20]
 80020de:	f7ff ffb1 	bl	8002044 <NVIC_EncodePriority>
 80020e2:	4602      	mov	r2, r0
 80020e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff80 	bl	8001ff0 <__NVIC_SetPriority>
}
 80020f0:	bf00      	nop
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff54 	bl	8001fb4 <__NVIC_EnableIRQ>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002122:	f7ff fc83 	bl	8001a2c <HAL_GetTick>
 8002126:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d008      	beq.n	8002146 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e052      	b.n	80021ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0216 	bic.w	r2, r2, #22
 8002154:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002164:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <HAL_DMA_Abort+0x62>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0208 	bic.w	r2, r2, #8
 8002184:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002196:	e013      	b.n	80021c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002198:	f7ff fc48 	bl	8001a2c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d90c      	bls.n	80021c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2220      	movs	r2, #32
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e015      	b.n	80021ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1e4      	bne.n	8002198 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	223f      	movs	r2, #63	; 0x3f
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00c      	b.n	800222c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2205      	movs	r2, #5
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e159      	b.n	8002508 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8148 	bne.w	8002502 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d005      	beq.n	800228a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	2b02      	cmp	r3, #2
 8002288:	d130      	bne.n	80022ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0201 	and.w	r2, r3, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d017      	beq.n	8002328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d123      	bne.n	800237c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	69b9      	ldr	r1, [r7, #24]
 8002378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0203 	and.w	r2, r3, #3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a2 	beq.w	8002502 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_GPIO_Init+0x2e8>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a56      	ldr	r2, [pc, #344]	; (8002520 <HAL_GPIO_Init+0x2e8>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b54      	ldr	r3, [pc, #336]	; (8002520 <HAL_GPIO_Init+0x2e8>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023da:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_GPIO_Init+0x2ec>)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a49      	ldr	r2, [pc, #292]	; (8002528 <HAL_GPIO_Init+0x2f0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x202>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a48      	ldr	r2, [pc, #288]	; (800252c <HAL_GPIO_Init+0x2f4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x1fe>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a47      	ldr	r2, [pc, #284]	; (8002530 <HAL_GPIO_Init+0x2f8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x1fa>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a46      	ldr	r2, [pc, #280]	; (8002534 <HAL_GPIO_Init+0x2fc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x1f6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a45      	ldr	r2, [pc, #276]	; (8002538 <HAL_GPIO_Init+0x300>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x1f2>
 8002426:	2304      	movs	r3, #4
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x204>
 800242a:	2307      	movs	r3, #7
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x204>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x204>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x204>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x204>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4935      	ldr	r1, [pc, #212]	; (8002524 <HAL_GPIO_Init+0x2ec>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245a:	4b38      	ldr	r3, [pc, #224]	; (800253c <HAL_GPIO_Init+0x304>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247e:	4a2f      	ldr	r2, [pc, #188]	; (800253c <HAL_GPIO_Init+0x304>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <HAL_GPIO_Init+0x304>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a8:	4a24      	ldr	r2, [pc, #144]	; (800253c <HAL_GPIO_Init+0x304>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_GPIO_Init+0x304>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d2:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_GPIO_Init+0x304>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_GPIO_Init+0x304>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fc:	4a0f      	ldr	r2, [pc, #60]	; (800253c <HAL_GPIO_Init+0x304>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f aea2 	bls.w	8002254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40013800 	.word	0x40013800
 8002528:	40020000 	.word	0x40020000
 800252c:	40020400 	.word	0x40020400
 8002530:	40020800 	.word	0x40020800
 8002534:	40020c00 	.word	0x40020c00
 8002538:	40021000 	.word	0x40021000
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e12b      	b.n	80027de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe ff90 	bl	80014c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	; 0x24
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025d8:	f000 fd80 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 80025dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a81      	ldr	r2, [pc, #516]	; (80027e8 <HAL_I2C_Init+0x274>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d807      	bhi.n	80025f8 <HAL_I2C_Init+0x84>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a80      	ldr	r2, [pc, #512]	; (80027ec <HAL_I2C_Init+0x278>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	bf94      	ite	ls
 80025f0:	2301      	movls	r3, #1
 80025f2:	2300      	movhi	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e006      	b.n	8002606 <HAL_I2C_Init+0x92>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a7d      	ldr	r2, [pc, #500]	; (80027f0 <HAL_I2C_Init+0x27c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf94      	ite	ls
 8002600:	2301      	movls	r3, #1
 8002602:	2300      	movhi	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0e7      	b.n	80027de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a78      	ldr	r2, [pc, #480]	; (80027f4 <HAL_I2C_Init+0x280>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0c9b      	lsrs	r3, r3, #18
 8002618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a6a      	ldr	r2, [pc, #424]	; (80027e8 <HAL_I2C_Init+0x274>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d802      	bhi.n	8002648 <HAL_I2C_Init+0xd4>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3301      	adds	r3, #1
 8002646:	e009      	b.n	800265c <HAL_I2C_Init+0xe8>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	4a69      	ldr	r2, [pc, #420]	; (80027f8 <HAL_I2C_Init+0x284>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	3301      	adds	r3, #1
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800266e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	495c      	ldr	r1, [pc, #368]	; (80027e8 <HAL_I2C_Init+0x274>)
 8002678:	428b      	cmp	r3, r1
 800267a:	d819      	bhi.n	80026b0 <HAL_I2C_Init+0x13c>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e59      	subs	r1, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fbb1 f3f3 	udiv	r3, r1, r3
 800268a:	1c59      	adds	r1, r3, #1
 800268c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002690:	400b      	ands	r3, r1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_I2C_Init+0x138>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e59      	subs	r1, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026aa:	e051      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e04f      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <HAL_I2C_Init+0x168>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e58      	subs	r0, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	e012      	b.n	8002702 <HAL_I2C_Init+0x18e>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	0099      	lsls	r1, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Init+0x196>
 8002706:	2301      	movs	r3, #1
 8002708:	e022      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10e      	bne.n	8002730 <HAL_I2C_Init+0x1bc>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1e58      	subs	r0, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	440b      	add	r3, r1
 8002720:	fbb0 f3f3 	udiv	r3, r0, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800272e:	e00f      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	0099      	lsls	r1, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6809      	ldr	r1, [r1, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800277e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6911      	ldr	r1, [r2, #16]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68d2      	ldr	r2, [r2, #12]
 800278a:	4311      	orrs	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	430b      	orrs	r3, r1
 8002792:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	000186a0 	.word	0x000186a0
 80027ec:	001e847f 	.word	0x001e847f
 80027f0:	003d08ff 	.word	0x003d08ff
 80027f4:	431bde83 	.word	0x431bde83
 80027f8:	10624dd3 	.word	0x10624dd3

080027fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e267      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d075      	beq.n	8002906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281a:	4b88      	ldr	r3, [pc, #544]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b04      	cmp	r3, #4
 8002824:	d00c      	beq.n	8002840 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002826:	4b85      	ldr	r3, [pc, #532]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800282e:	2b08      	cmp	r3, #8
 8002830:	d112      	bne.n	8002858 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002832:	4b82      	ldr	r3, [pc, #520]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283e:	d10b      	bne.n	8002858 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002840:	4b7e      	ldr	r3, [pc, #504]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d05b      	beq.n	8002904 <HAL_RCC_OscConfig+0x108>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d157      	bne.n	8002904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e242      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002860:	d106      	bne.n	8002870 <HAL_RCC_OscConfig+0x74>
 8002862:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a75      	ldr	r2, [pc, #468]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e01d      	b.n	80028ac <HAL_RCC_OscConfig+0xb0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x98>
 800287a:	4b70      	ldr	r3, [pc, #448]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6f      	ldr	r2, [pc, #444]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b6d      	ldr	r3, [pc, #436]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6c      	ldr	r2, [pc, #432]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0xb0>
 8002894:	4b69      	ldr	r3, [pc, #420]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a68      	ldr	r2, [pc, #416]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a65      	ldr	r2, [pc, #404]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7ff f8ba 	bl	8001a2c <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff f8b6 	bl	8001a2c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e207      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0xc0>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7ff f8a6 	bl	8001a2c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff f8a2 	bl	8001a2c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1f3      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0xe8>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d063      	beq.n	80029da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002926:	2b08      	cmp	r3, #8
 8002928:	d11c      	bne.n	8002964 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292a:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d116      	bne.n	8002964 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_RCC_OscConfig+0x152>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e1c7      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4937      	ldr	r1, [pc, #220]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	e03a      	b.n	80029da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296c:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_RCC_OscConfig+0x244>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7ff f85b 	bl	8001a2c <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297a:	f7ff f857 	bl	8001a2c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e1a8      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4925      	ldr	r1, [pc, #148]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	600b      	str	r3, [r1, #0]
 80029ac:	e015      	b.n	80029da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_OscConfig+0x244>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7ff f83a 	bl	8001a2c <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029bc:	f7ff f836 	bl	8001a2c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e187      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d036      	beq.n	8002a54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_RCC_OscConfig+0x248>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7ff f81a 	bl	8001a2c <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029fc:	f7ff f816 	bl	8001a2c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e167      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x200>
 8002a1a:	e01b      	b.n	8002a54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_OscConfig+0x248>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a22:	f7ff f803 	bl	8001a2c <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	e00e      	b.n	8002a48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2a:	f7fe ffff 	bl	8001a2c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d907      	bls.n	8002a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e150      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	42470000 	.word	0x42470000
 8002a44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a48:	4b88      	ldr	r3, [pc, #544]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ea      	bne.n	8002a2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8097 	beq.w	8002b90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a66:	4b81      	ldr	r3, [pc, #516]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10f      	bne.n	8002a92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	4b7d      	ldr	r3, [pc, #500]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a7c      	ldr	r2, [pc, #496]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b7a      	ldr	r3, [pc, #488]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	4b77      	ldr	r3, [pc, #476]	; (8002c70 <HAL_RCC_OscConfig+0x474>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d118      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9e:	4b74      	ldr	r3, [pc, #464]	; (8002c70 <HAL_RCC_OscConfig+0x474>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a73      	ldr	r2, [pc, #460]	; (8002c70 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe ffbf 	bl	8001a2c <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7fe ffbb 	bl	8001a2c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e10c      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <HAL_RCC_OscConfig+0x474>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x2ea>
 8002ad8:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a63      	ldr	r2, [pc, #396]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	e01c      	b.n	8002b20 <HAL_RCC_OscConfig+0x324>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x30c>
 8002aee:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a5e      	ldr	r2, [pc, #376]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	4b5c      	ldr	r3, [pc, #368]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a5b      	ldr	r2, [pc, #364]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
 8002b06:	e00b      	b.n	8002b20 <HAL_RCC_OscConfig+0x324>
 8002b08:	4b58      	ldr	r3, [pc, #352]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4a57      	ldr	r2, [pc, #348]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	6713      	str	r3, [r2, #112]	; 0x70
 8002b14:	4b55      	ldr	r3, [pc, #340]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a54      	ldr	r2, [pc, #336]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b1a:	f023 0304 	bic.w	r3, r3, #4
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d015      	beq.n	8002b54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe ff80 	bl	8001a2c <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe ff7c 	bl	8001a2c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0cb      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b46:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0ee      	beq.n	8002b30 <HAL_RCC_OscConfig+0x334>
 8002b52:	e014      	b.n	8002b7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b54:	f7fe ff6a 	bl	8001a2c <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fe ff66 	bl	8001a2c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0b5      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1ee      	bne.n	8002b5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b84:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80a1 	beq.w	8002cdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b9a:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d05c      	beq.n	8002c60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d141      	bne.n	8002c32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <HAL_RCC_OscConfig+0x478>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe ff3a 	bl	8001a2c <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe ff36 	bl	8001a2c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e087      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bce:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	019b      	lsls	r3, r3, #6
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	491b      	ldr	r1, [pc, #108]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x478>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe ff0f 	bl	8001a2c <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe ff0b 	bl	8001a2c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e05c      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x416>
 8002c30:	e054      	b.n	8002cdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <HAL_RCC_OscConfig+0x478>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe fef8 	bl	8001a2c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c40:	f7fe fef4 	bl	8001a2c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e045      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x444>
 8002c5e:	e03d      	b.n	8002cdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d107      	bne.n	8002c78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e038      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40007000 	.word	0x40007000
 8002c74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x4ec>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d028      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d121      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d11a      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ca8:	4013      	ands	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d111      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800

08002cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0cc      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d00:	4b68      	ldr	r3, [pc, #416]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d90c      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0b8      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d40:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d58:	4b53      	ldr	r3, [pc, #332]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a52      	ldr	r2, [pc, #328]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	494d      	ldr	r1, [pc, #308]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d044      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d119      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e07f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e06f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e067      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dca:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f023 0203 	bic.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4934      	ldr	r1, [pc, #208]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe fe26 	bl	8001a2c <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7fe fe22 	bl	8001a2c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e04f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 020c 	and.w	r2, r3, #12
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1eb      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d20c      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e032      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4916      	ldr	r1, [pc, #88]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	490e      	ldr	r1, [pc, #56]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e72:	f000 f821 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	490a      	ldr	r1, [pc, #40]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e84:	5ccb      	ldrb	r3, [r1, r3]
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fbe8 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023c00 	.word	0x40023c00
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	0800a12c 	.word	0x0800a12c
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	20000008 	.word	0x20000008

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ebc:	b094      	sub	sp, #80	; 0x50
 8002ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec8:	2300      	movs	r3, #0
 8002eca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed0:	4b79      	ldr	r3, [pc, #484]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d00d      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	f200 80e1 	bhi.w	80030a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x34>
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eea:	e0db      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eec:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_GetSysClockFreq+0x204>)
 8002eee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ef0:	e0db      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef2:	4b73      	ldr	r3, [pc, #460]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ef6:	e0d8      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef8:	4b6f      	ldr	r3, [pc, #444]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f02:	4b6d      	ldr	r3, [pc, #436]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d063      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0e:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	2200      	movs	r2, #0
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
 8002f22:	2300      	movs	r3, #0
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
 8002f26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	0159      	lsls	r1, r3, #5
 8002f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3c:	0150      	lsls	r0, r2, #5
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4621      	mov	r1, r4
 8002f44:	1a51      	subs	r1, r2, r1
 8002f46:	6139      	str	r1, [r7, #16]
 8002f48:	4629      	mov	r1, r5
 8002f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f5c:	4659      	mov	r1, fp
 8002f5e:	018b      	lsls	r3, r1, #6
 8002f60:	4651      	mov	r1, sl
 8002f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f66:	4651      	mov	r1, sl
 8002f68:	018a      	lsls	r2, r1, #6
 8002f6a:	4651      	mov	r1, sl
 8002f6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f70:	4659      	mov	r1, fp
 8002f72:	eb63 0901 	sbc.w	r9, r3, r1
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8a:	4690      	mov	r8, r2
 8002f8c:	4699      	mov	r9, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	eb18 0303 	adds.w	r3, r8, r3
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	462b      	mov	r3, r5
 8002f98:	eb49 0303 	adc.w	r3, r9, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002faa:	4629      	mov	r1, r5
 8002fac:	024b      	lsls	r3, r1, #9
 8002fae:	4621      	mov	r1, r4
 8002fb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	024a      	lsls	r2, r1, #9
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc8:	f7fd fdf6 	bl	8000bb8 <__aeabi_uldivmod>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd4:	e058      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	099b      	lsrs	r3, r3, #6
 8002fdc:	2200      	movs	r2, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fe6:	623b      	str	r3, [r7, #32]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
 8002fec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	0159      	lsls	r1, r3, #5
 8002ffe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003002:	0150      	lsls	r0, r2, #5
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4641      	mov	r1, r8
 800300a:	ebb2 0a01 	subs.w	sl, r2, r1
 800300e:	4649      	mov	r1, r9
 8003010:	eb63 0b01 	sbc.w	fp, r3, r1
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003020:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003024:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003028:	ebb2 040a 	subs.w	r4, r2, sl
 800302c:	eb63 050b 	sbc.w	r5, r3, fp
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	00eb      	lsls	r3, r5, #3
 800303a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800303e:	00e2      	lsls	r2, r4, #3
 8003040:	4614      	mov	r4, r2
 8003042:	461d      	mov	r5, r3
 8003044:	4643      	mov	r3, r8
 8003046:	18e3      	adds	r3, r4, r3
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	464b      	mov	r3, r9
 800304c:	eb45 0303 	adc.w	r3, r5, r3
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800305e:	4629      	mov	r1, r5
 8003060:	028b      	lsls	r3, r1, #10
 8003062:	4621      	mov	r1, r4
 8003064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003068:	4621      	mov	r1, r4
 800306a:	028a      	lsls	r2, r1, #10
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003072:	2200      	movs	r2, #0
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	61fa      	str	r2, [r7, #28]
 8003078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800307c:	f7fd fd9c 	bl	8000bb8 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4613      	mov	r3, r2
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	3301      	adds	r3, #1
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003098:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800309a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a2:	e002      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetSysClockFreq+0x204>)
 80030a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3750      	adds	r7, #80	; 0x50
 80030b0:	46bd      	mov	sp, r7
 80030b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	00f42400 	.word	0x00f42400
 80030c0:	007a1200 	.word	0x007a1200

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e0:	f7ff fff0 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	0800a13c 	.word	0x0800a13c

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003108:	f7ff ffdc 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0b5b      	lsrs	r3, r3, #13
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	0800a13c 	.word	0x0800a13c

0800312c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	220f      	movs	r2, #15
 800313a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0203 	and.w	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCC_GetClockConfig+0x5c>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_RCC_GetClockConfig+0x60>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0207 	and.w	r2, r3, #7
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	601a      	str	r2, [r3, #0]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	40023c00 	.word	0x40023c00

08003190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e041      	b.n	8003226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f839 	bl	800322e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3304      	adds	r3, #4
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f000 f9ca 	bl	8003568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d001      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e044      	b.n	80032e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d018      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x6c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003286:	d013      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_TIM_Base_Start_IT+0xb8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x6c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a17      	ldr	r2, [pc, #92]	; (8003300 <HAL_TIM_Base_Start_IT+0xbc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x6c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a16      	ldr	r2, [pc, #88]	; (8003304 <HAL_TIM_Base_Start_IT+0xc0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d111      	bne.n	80032d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d010      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d2:	e007      	b.n	80032e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800
 8003300:	40000c00 	.word	0x40000c00
 8003304:	40014000 	.word	0x40014000

08003308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d122      	bne.n	8003364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0202 	mvn.w	r2, #2
 8003334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8ee 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f8e0 	bl	8003518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f8f1 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0204 	mvn.w	r2, #4
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f8c4 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f8b6 	bl	8003518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f8c7 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0208 	mvn.w	r2, #8
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2204      	movs	r2, #4
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f89a 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f88c 	bl	8003518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f89d 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b10      	cmp	r3, #16
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b10      	cmp	r3, #16
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0210 	mvn.w	r2, #16
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2208      	movs	r2, #8
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f870 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f862 	bl	8003518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f873 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10e      	bne.n	800348c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0201 	mvn.w	r2, #1
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd ff92 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	2b80      	cmp	r3, #128	; 0x80
 8003498:	d10e      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d107      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8e2 	bl	800367c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d10e      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d107      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f838 	bl	8003554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0220 	mvn.w	r2, #32
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8ac 	bl	8003668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a34      	ldr	r2, [pc, #208]	; (800364c <TIM_Base_SetConfig+0xe4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00f      	beq.n	80035a0 <TIM_Base_SetConfig+0x38>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003586:	d00b      	beq.n	80035a0 <TIM_Base_SetConfig+0x38>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a31      	ldr	r2, [pc, #196]	; (8003650 <TIM_Base_SetConfig+0xe8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <TIM_Base_SetConfig+0x38>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a30      	ldr	r2, [pc, #192]	; (8003654 <TIM_Base_SetConfig+0xec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_Base_SetConfig+0x38>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a2f      	ldr	r2, [pc, #188]	; (8003658 <TIM_Base_SetConfig+0xf0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a25      	ldr	r2, [pc, #148]	; (800364c <TIM_Base_SetConfig+0xe4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01b      	beq.n	80035f2 <TIM_Base_SetConfig+0x8a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c0:	d017      	beq.n	80035f2 <TIM_Base_SetConfig+0x8a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a22      	ldr	r2, [pc, #136]	; (8003650 <TIM_Base_SetConfig+0xe8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <TIM_Base_SetConfig+0x8a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a21      	ldr	r2, [pc, #132]	; (8003654 <TIM_Base_SetConfig+0xec>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00f      	beq.n	80035f2 <TIM_Base_SetConfig+0x8a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a20      	ldr	r2, [pc, #128]	; (8003658 <TIM_Base_SetConfig+0xf0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <TIM_Base_SetConfig+0x8a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a1f      	ldr	r2, [pc, #124]	; (800365c <TIM_Base_SetConfig+0xf4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d007      	beq.n	80035f2 <TIM_Base_SetConfig+0x8a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <TIM_Base_SetConfig+0xf8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <TIM_Base_SetConfig+0x8a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <TIM_Base_SetConfig+0xfc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d108      	bne.n	8003604 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a08      	ldr	r2, [pc, #32]	; (800364c <TIM_Base_SetConfig+0xe4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d103      	bne.n	8003638 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	615a      	str	r2, [r3, #20]
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	40000400 	.word	0x40000400
 8003654:	40000800 	.word	0x40000800
 8003658:	40000c00 	.word	0x40000c00
 800365c:	40014000 	.word	0x40014000
 8003660:	40014400 	.word	0x40014400
 8003664:	40014800 	.word	0x40014800

08003668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e03f      	b.n	8003722 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd ff4a 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	; 0x24
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fc7b 	bl	8003fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b0ba      	sub	sp, #232	; 0xe8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003758:	2300      	movs	r3, #0
 800375a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800376a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_UART_IRQHandler+0x66>
 800377e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fb65 	bl	8003e5a <UART_Receive_IT>
      return;
 8003790:	e256      	b.n	8003c40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80de 	beq.w	8003958 <HAL_UART_IRQHandler+0x22c>
 800379c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80d1 	beq.w	8003958 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <HAL_UART_IRQHandler+0xae>
 80037c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f043 0201 	orr.w	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_UART_IRQHandler+0xd2>
 80037e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0202 	orr.w	r2, r3, #2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_UART_IRQHandler+0xf6>
 800380a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f043 0204 	orr.w	r2, r3, #4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d011      	beq.n	8003852 <HAL_UART_IRQHandler+0x126>
 800382e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800383a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f043 0208 	orr.w	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 81ed 	beq.w	8003c36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800385c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_UART_IRQHandler+0x14e>
 8003868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 faf0 	bl	8003e5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d103      	bne.n	80038a6 <HAL_UART_IRQHandler+0x17a>
 800389e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d04f      	beq.n	8003946 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f9f8 	bl	8003c9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d141      	bne.n	800393e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1d9      	bne.n	80038ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	2b00      	cmp	r3, #0
 800390c:	d013      	beq.n	8003936 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	4a7d      	ldr	r2, [pc, #500]	; (8003b08 <HAL_UART_IRQHandler+0x3dc>)
 8003914:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fc6a 	bl	80021f4 <HAL_DMA_Abort_IT>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003930:	4610      	mov	r0, r2
 8003932:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	e00e      	b.n	8003954 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f99a 	bl	8003c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393c:	e00a      	b.n	8003954 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f996 	bl	8003c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	e006      	b.n	8003954 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f992 	bl	8003c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003952:	e170      	b.n	8003c36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	bf00      	nop
    return;
 8003956:	e16e      	b.n	8003c36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	2b01      	cmp	r3, #1
 800395e:	f040 814a 	bne.w	8003bf6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8143 	beq.w	8003bf6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 813c 	beq.w	8003bf6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	f040 80b4 	bne.w	8003b0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8140 	beq.w	8003c3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039c2:	429a      	cmp	r2, r3
 80039c4:	f080 8139 	bcs.w	8003c3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039da:	f000 8088 	beq.w	8003aee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1d9      	bne.n	80039de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3314      	adds	r3, #20
 8003a30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e1      	bne.n	8003a2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3314      	adds	r3, #20
 8003a6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3314      	adds	r3, #20
 8003a86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a92:	e841 2300 	strex	r3, r2, [r1]
 8003a96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e3      	bne.n	8003a66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003abe:	f023 0310 	bic.w	r3, r3, #16
 8003ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ad0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ad2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ad6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e3      	bne.n	8003aac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fb13 	bl	8002114 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8c0 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b04:	e099      	b.n	8003c3a <HAL_UART_IRQHandler+0x50e>
 8003b06:	bf00      	nop
 8003b08:	08003d63 	.word	0x08003d63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 808b 	beq.w	8003c3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8086 	beq.w	8003c3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b56:	647a      	str	r2, [r7, #68]	; 0x44
 8003b58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e3      	bne.n	8003b32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3314      	adds	r3, #20
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	623b      	str	r3, [r7, #32]
   return(result);
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3314      	adds	r3, #20
 8003b8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b8e:	633a      	str	r2, [r7, #48]	; 0x30
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e3      	bne.n	8003b6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0310 	bic.w	r3, r3, #16
 8003bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003bd4:	61fa      	str	r2, [r7, #28]
 8003bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	617b      	str	r3, [r7, #20]
   return(result);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e3      	bne.n	8003bb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f848 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf4:	e023      	b.n	8003c3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_UART_IRQHandler+0x4ea>
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8bb 	bl	8003d8a <UART_Transmit_IT>
    return;
 8003c14:	e014      	b.n	8003c40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00e      	beq.n	8003c40 <HAL_UART_IRQHandler+0x514>
 8003c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8fb 	bl	8003e2a <UART_EndTransmit_IT>
    return;
 8003c34:	e004      	b.n	8003c40 <HAL_UART_IRQHandler+0x514>
    return;
 8003c36:	bf00      	nop
 8003c38:	e002      	b.n	8003c40 <HAL_UART_IRQHandler+0x514>
      return;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <HAL_UART_IRQHandler+0x514>
      return;
 8003c3e:	bf00      	nop
  }
}
 8003c40:	37e8      	adds	r7, #232	; 0xe8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop

08003c48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b095      	sub	sp, #84	; 0x54
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cc4:	643a      	str	r2, [r7, #64]	; 0x40
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e5      	bne.n	8003ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3314      	adds	r3, #20
 8003cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d119      	bne.n	8003d48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f023 0310 	bic.w	r3, r3, #16
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d34:	61ba      	str	r2, [r7, #24]
 8003d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6979      	ldr	r1, [r7, #20]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	613b      	str	r3, [r7, #16]
   return(result);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e5      	bne.n	8003d14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d56:	bf00      	nop
 8003d58:	3754      	adds	r7, #84	; 0x54
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7ff ff77 	bl	8003c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b21      	cmp	r3, #33	; 0x21
 8003d9c:	d13e      	bne.n	8003e1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d114      	bne.n	8003dd2 <UART_Transmit_IT+0x48>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d110      	bne.n	8003dd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	621a      	str	r2, [r3, #32]
 8003dd0:	e008      	b.n	8003de4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	1c59      	adds	r1, r3, #1
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6211      	str	r1, [r2, #32]
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4619      	mov	r1, r3
 8003df2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10f      	bne.n	8003e18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff fefc 	bl	8003c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b08c      	sub	sp, #48	; 0x30
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b22      	cmp	r3, #34	; 0x22
 8003e6c:	f040 80ab 	bne.w	8003fc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e78:	d117      	bne.n	8003eaa <UART_Receive_IT+0x50>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d113      	bne.n	8003eaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	1c9a      	adds	r2, r3, #2
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ea8:	e026      	b.n	8003ef8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d007      	beq.n	8003ece <UART_Receive_IT+0x74>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <UART_Receive_IT+0x82>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	e008      	b.n	8003eee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4619      	mov	r1, r3
 8003f06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d15a      	bne.n	8003fc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0220 	bic.w	r2, r2, #32
 8003f1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d135      	bne.n	8003fb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f023 0310 	bic.w	r3, r3, #16
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f72:	623a      	str	r2, [r7, #32]
 8003f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	69f9      	ldr	r1, [r7, #28]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e5      	bne.n	8003f52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d10a      	bne.n	8003faa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fe67 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
 8003fb6:	e002      	b.n	8003fbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff fe4f 	bl	8003c5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e002      	b.n	8003fc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e000      	b.n	8003fc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
  }
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3730      	adds	r7, #48	; 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd4:	b0c0      	sub	sp, #256	; 0x100
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	68d9      	ldr	r1, [r3, #12]
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	ea40 0301 	orr.w	r3, r0, r1
 8003ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	431a      	orrs	r2, r3
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	431a      	orrs	r2, r3
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004028:	f021 010c 	bic.w	r1, r1, #12
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004036:	430b      	orrs	r3, r1
 8004038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	6999      	ldr	r1, [r3, #24]
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	ea40 0301 	orr.w	r3, r0, r1
 8004056:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b8f      	ldr	r3, [pc, #572]	; (800429c <UART_SetConfig+0x2cc>)
 8004060:	429a      	cmp	r2, r3
 8004062:	d005      	beq.n	8004070 <UART_SetConfig+0xa0>
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b8d      	ldr	r3, [pc, #564]	; (80042a0 <UART_SetConfig+0x2d0>)
 800406c:	429a      	cmp	r2, r3
 800406e:	d104      	bne.n	800407a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004070:	f7ff f848 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8004074:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004078:	e003      	b.n	8004082 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800407a:	f7ff f82f 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 800407e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408c:	f040 810c 	bne.w	80042a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004094:	2200      	movs	r2, #0
 8004096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800409a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800409e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040a2:	4622      	mov	r2, r4
 80040a4:	462b      	mov	r3, r5
 80040a6:	1891      	adds	r1, r2, r2
 80040a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80040aa:	415b      	adcs	r3, r3
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040b2:	4621      	mov	r1, r4
 80040b4:	eb12 0801 	adds.w	r8, r2, r1
 80040b8:	4629      	mov	r1, r5
 80040ba:	eb43 0901 	adc.w	r9, r3, r1
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040d2:	4690      	mov	r8, r2
 80040d4:	4699      	mov	r9, r3
 80040d6:	4623      	mov	r3, r4
 80040d8:	eb18 0303 	adds.w	r3, r8, r3
 80040dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040e0:	462b      	mov	r3, r5
 80040e2:	eb49 0303 	adc.w	r3, r9, r3
 80040e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040fe:	460b      	mov	r3, r1
 8004100:	18db      	adds	r3, r3, r3
 8004102:	653b      	str	r3, [r7, #80]	; 0x50
 8004104:	4613      	mov	r3, r2
 8004106:	eb42 0303 	adc.w	r3, r2, r3
 800410a:	657b      	str	r3, [r7, #84]	; 0x54
 800410c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004110:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004114:	f7fc fd50 	bl	8000bb8 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4b61      	ldr	r3, [pc, #388]	; (80042a4 <UART_SetConfig+0x2d4>)
 800411e:	fba3 2302 	umull	r2, r3, r3, r2
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	011c      	lsls	r4, r3, #4
 8004126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800412a:	2200      	movs	r2, #0
 800412c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004130:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004134:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004138:	4642      	mov	r2, r8
 800413a:	464b      	mov	r3, r9
 800413c:	1891      	adds	r1, r2, r2
 800413e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004140:	415b      	adcs	r3, r3
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004148:	4641      	mov	r1, r8
 800414a:	eb12 0a01 	adds.w	sl, r2, r1
 800414e:	4649      	mov	r1, r9
 8004150:	eb43 0b01 	adc.w	fp, r3, r1
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004160:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004168:	4692      	mov	sl, r2
 800416a:	469b      	mov	fp, r3
 800416c:	4643      	mov	r3, r8
 800416e:	eb1a 0303 	adds.w	r3, sl, r3
 8004172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004176:	464b      	mov	r3, r9
 8004178:	eb4b 0303 	adc.w	r3, fp, r3
 800417c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800418c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004190:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004194:	460b      	mov	r3, r1
 8004196:	18db      	adds	r3, r3, r3
 8004198:	643b      	str	r3, [r7, #64]	; 0x40
 800419a:	4613      	mov	r3, r2
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
 80041a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041aa:	f7fc fd05 	bl	8000bb8 <__aeabi_uldivmod>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <UART_SetConfig+0x2d4>)
 80041b6:	fba3 2301 	umull	r2, r3, r3, r1
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2264      	movs	r2, #100	; 0x64
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	1acb      	subs	r3, r1, r3
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <UART_SetConfig+0x2d4>)
 80041cc:	fba3 2302 	umull	r2, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041d8:	441c      	add	r4, r3
 80041da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041ec:	4642      	mov	r2, r8
 80041ee:	464b      	mov	r3, r9
 80041f0:	1891      	adds	r1, r2, r2
 80041f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80041f4:	415b      	adcs	r3, r3
 80041f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041fc:	4641      	mov	r1, r8
 80041fe:	1851      	adds	r1, r2, r1
 8004200:	6339      	str	r1, [r7, #48]	; 0x30
 8004202:	4649      	mov	r1, r9
 8004204:	414b      	adcs	r3, r1
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004214:	4659      	mov	r1, fp
 8004216:	00cb      	lsls	r3, r1, #3
 8004218:	4651      	mov	r1, sl
 800421a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421e:	4651      	mov	r1, sl
 8004220:	00ca      	lsls	r2, r1, #3
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	4603      	mov	r3, r0
 8004228:	4642      	mov	r2, r8
 800422a:	189b      	adds	r3, r3, r2
 800422c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004230:	464b      	mov	r3, r9
 8004232:	460a      	mov	r2, r1
 8004234:	eb42 0303 	adc.w	r3, r2, r3
 8004238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004248:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800424c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004250:	460b      	mov	r3, r1
 8004252:	18db      	adds	r3, r3, r3
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
 8004256:	4613      	mov	r3, r2
 8004258:	eb42 0303 	adc.w	r3, r2, r3
 800425c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004262:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004266:	f7fc fca7 	bl	8000bb8 <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <UART_SetConfig+0x2d4>)
 8004270:	fba3 1302 	umull	r1, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	2164      	movs	r1, #100	; 0x64
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	3332      	adds	r3, #50	; 0x32
 8004282:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <UART_SetConfig+0x2d4>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	f003 0207 	and.w	r2, r3, #7
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4422      	add	r2, r4
 8004296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004298:	e105      	b.n	80044a6 <UART_SetConfig+0x4d6>
 800429a:	bf00      	nop
 800429c:	40011000 	.word	0x40011000
 80042a0:	40011400 	.word	0x40011400
 80042a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042ba:	4642      	mov	r2, r8
 80042bc:	464b      	mov	r3, r9
 80042be:	1891      	adds	r1, r2, r2
 80042c0:	6239      	str	r1, [r7, #32]
 80042c2:	415b      	adcs	r3, r3
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
 80042c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ca:	4641      	mov	r1, r8
 80042cc:	1854      	adds	r4, r2, r1
 80042ce:	4649      	mov	r1, r9
 80042d0:	eb43 0501 	adc.w	r5, r3, r1
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	00eb      	lsls	r3, r5, #3
 80042de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e2:	00e2      	lsls	r2, r4, #3
 80042e4:	4614      	mov	r4, r2
 80042e6:	461d      	mov	r5, r3
 80042e8:	4643      	mov	r3, r8
 80042ea:	18e3      	adds	r3, r4, r3
 80042ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042f0:	464b      	mov	r3, r9
 80042f2:	eb45 0303 	adc.w	r3, r5, r3
 80042f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004316:	4629      	mov	r1, r5
 8004318:	008b      	lsls	r3, r1, #2
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004320:	4621      	mov	r1, r4
 8004322:	008a      	lsls	r2, r1, #2
 8004324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004328:	f7fc fc46 	bl	8000bb8 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4b60      	ldr	r3, [pc, #384]	; (80044b4 <UART_SetConfig+0x4e4>)
 8004332:	fba3 2302 	umull	r2, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	011c      	lsls	r4, r3, #4
 800433a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800433e:	2200      	movs	r2, #0
 8004340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004344:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	1891      	adds	r1, r2, r2
 8004352:	61b9      	str	r1, [r7, #24]
 8004354:	415b      	adcs	r3, r3
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800435c:	4641      	mov	r1, r8
 800435e:	1851      	adds	r1, r2, r1
 8004360:	6139      	str	r1, [r7, #16]
 8004362:	4649      	mov	r1, r9
 8004364:	414b      	adcs	r3, r1
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004374:	4659      	mov	r1, fp
 8004376:	00cb      	lsls	r3, r1, #3
 8004378:	4651      	mov	r1, sl
 800437a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800437e:	4651      	mov	r1, sl
 8004380:	00ca      	lsls	r2, r1, #3
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	4603      	mov	r3, r0
 8004388:	4642      	mov	r2, r8
 800438a:	189b      	adds	r3, r3, r2
 800438c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004390:	464b      	mov	r3, r9
 8004392:	460a      	mov	r2, r1
 8004394:	eb42 0303 	adc.w	r3, r2, r3
 8004398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80043a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043b4:	4649      	mov	r1, r9
 80043b6:	008b      	lsls	r3, r1, #2
 80043b8:	4641      	mov	r1, r8
 80043ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043be:	4641      	mov	r1, r8
 80043c0:	008a      	lsls	r2, r1, #2
 80043c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043c6:	f7fc fbf7 	bl	8000bb8 <__aeabi_uldivmod>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <UART_SetConfig+0x4e4>)
 80043d0:	fba3 1302 	umull	r1, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	2164      	movs	r1, #100	; 0x64
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	3332      	adds	r3, #50	; 0x32
 80043e2:	4a34      	ldr	r2, [pc, #208]	; (80044b4 <UART_SetConfig+0x4e4>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ee:	441c      	add	r4, r3
 80043f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043f4:	2200      	movs	r2, #0
 80043f6:	673b      	str	r3, [r7, #112]	; 0x70
 80043f8:	677a      	str	r2, [r7, #116]	; 0x74
 80043fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043fe:	4642      	mov	r2, r8
 8004400:	464b      	mov	r3, r9
 8004402:	1891      	adds	r1, r2, r2
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	415b      	adcs	r3, r3
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800440e:	4641      	mov	r1, r8
 8004410:	1851      	adds	r1, r2, r1
 8004412:	6039      	str	r1, [r7, #0]
 8004414:	4649      	mov	r1, r9
 8004416:	414b      	adcs	r3, r1
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004426:	4659      	mov	r1, fp
 8004428:	00cb      	lsls	r3, r1, #3
 800442a:	4651      	mov	r1, sl
 800442c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004430:	4651      	mov	r1, sl
 8004432:	00ca      	lsls	r2, r1, #3
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	4603      	mov	r3, r0
 800443a:	4642      	mov	r2, r8
 800443c:	189b      	adds	r3, r3, r2
 800443e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004440:	464b      	mov	r3, r9
 8004442:	460a      	mov	r2, r1
 8004444:	eb42 0303 	adc.w	r3, r2, r3
 8004448:	66fb      	str	r3, [r7, #108]	; 0x6c
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	663b      	str	r3, [r7, #96]	; 0x60
 8004454:	667a      	str	r2, [r7, #100]	; 0x64
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004462:	4649      	mov	r1, r9
 8004464:	008b      	lsls	r3, r1, #2
 8004466:	4641      	mov	r1, r8
 8004468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800446c:	4641      	mov	r1, r8
 800446e:	008a      	lsls	r2, r1, #2
 8004470:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004474:	f7fc fba0 	bl	8000bb8 <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <UART_SetConfig+0x4e4>)
 800447e:	fba3 1302 	umull	r1, r3, r3, r2
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	2164      	movs	r1, #100	; 0x64
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	3332      	adds	r3, #50	; 0x32
 8004490:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <UART_SetConfig+0x4e4>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	f003 020f 	and.w	r2, r3, #15
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4422      	add	r2, r4
 80044a4:	609a      	str	r2, [r3, #8]
}
 80044a6:	bf00      	nop
 80044a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044ac:	46bd      	mov	sp, r7
 80044ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b2:	bf00      	nop
 80044b4:	51eb851f 	.word	0x51eb851f

080044b8 <USART_WRITE>:
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
	usart->BRR |= baud / 2;
}

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	807b      	strh	r3, [r7, #2]
	uint16_t i = timeout;
 80044c6:	887b      	ldrh	r3, [r7, #2]
 80044c8:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]
 80044ce:	e017      	b.n	8004500 <USART_WRITE+0x48>
		if (len == 1) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d103      	bne.n	80044de <USART_WRITE+0x26>
			usart->DR = ch;
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	e006      	b.n	80044ec <USART_WRITE+0x34>
		} else {
			usart->DR = ch[i];
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	4413      	add	r3, r2
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	605a      	str	r2, [r3, #4]
		}
		while (!(usart->SR & USART_SR_TXE)){
 80044ec:	bf00      	nop
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f9      	beq.n	80044ee <USART_WRITE+0x36>
	for (uint8_t i = 0; i < len; i++) {
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	3301      	adds	r3, #1
 80044fe:	75fb      	strb	r3, [r7, #23]
 8004500:	7dfb      	ldrb	r3, [r7, #23]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	d8e3      	bhi.n	80044d0 <USART_WRITE+0x18>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8004518:	b40f      	push	{r0, r1, r2, r3}
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800452e:	480a      	ldr	r0, [pc, #40]	; (8004558 <print+0x40>)
 8004530:	f003 f9f4 	bl	800791c <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8004534:	4808      	ldr	r0, [pc, #32]	; (8004558 <print+0x40>)
 8004536:	f7fb fe53 	bl	80001e0 <strlen>
 800453a:	4603      	mov	r3, r0
 800453c:	80fb      	strh	r3, [r7, #6]
	USART_WRITE(UART_TYPE, buffer, len, 100);
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	2364      	movs	r3, #100	; 0x64
 8004542:	4905      	ldr	r1, [pc, #20]	; (8004558 <print+0x40>)
 8004544:	4805      	ldr	r0, [pc, #20]	; (800455c <print+0x44>)
 8004546:	f7ff ffb7 	bl	80044b8 <USART_WRITE>

}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004554:	b004      	add	sp, #16
 8004556:	4770      	bx	lr
 8004558:	20000644 	.word	0x20000644
 800455c:	40004400 	.word	0x40004400

08004560 <ESP_Init>:
		"<a class=\"button button-on\" href=\"/hms\">Refresh</a>";
char *Terminate = "</body></html>";

/*****************************************************************************************************************************************/

void ESP_Init(char *SSID, char *PASSWD) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b098      	sub	sp, #96	; 0x60
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800456a:	f000 fa3b 	bl	80049e4 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 800456e:	4966      	ldr	r1, [pc, #408]	; (8004708 <ESP_Init+0x1a8>)
 8004570:	4866      	ldr	r0, [pc, #408]	; (800470c <ESP_Init+0x1ac>)
 8004572:	f000 fca8 	bl	8004ec6 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 8004576:	4966      	ldr	r1, [pc, #408]	; (8004710 <ESP_Init+0x1b0>)
 8004578:	4866      	ldr	r0, [pc, #408]	; (8004714 <ESP_Init+0x1b4>)
 800457a:	f000 fca4 	bl	8004ec6 <Uart_sendstring>
	for (int i = 0; i < 5; i++) {
 800457e:	2300      	movs	r3, #0
 8004580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004582:	e00a      	b.n	800459a <ESP_Init+0x3a>
		Uart_sendstring(".", pc_uart);
 8004584:	4962      	ldr	r1, [pc, #392]	; (8004710 <ESP_Init+0x1b0>)
 8004586:	4864      	ldr	r0, [pc, #400]	; (8004718 <ESP_Init+0x1b8>)
 8004588:	f000 fc9d 	bl	8004ec6 <Uart_sendstring>
		HAL_Delay(1000);
 800458c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004590:	f7fd fa58 	bl	8001a44 <HAL_Delay>
	for (int i = 0; i < 5; i++) {
 8004594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004596:	3301      	adds	r3, #1
 8004598:	65fb      	str	r3, [r7, #92]	; 0x5c
 800459a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800459c:	2b04      	cmp	r3, #4
 800459e:	ddf1      	ble.n	8004584 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_flush(wifi_uart);
 80045a0:	4859      	ldr	r0, [pc, #356]	; (8004708 <ESP_Init+0x1a8>)
 80045a2:	f000 fadd 	bl	8004b60 <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 80045a6:	4958      	ldr	r1, [pc, #352]	; (8004708 <ESP_Init+0x1a8>)
 80045a8:	485c      	ldr	r0, [pc, #368]	; (800471c <ESP_Init+0x1bc>)
 80045aa:	f000 fc8c 	bl	8004ec6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80045ae:	bf00      	nop
 80045b0:	4955      	ldr	r1, [pc, #340]	; (8004708 <ESP_Init+0x1a8>)
 80045b2:	485b      	ldr	r0, [pc, #364]	; (8004720 <ESP_Init+0x1c0>)
 80045b4:	f000 fd1c 	bl	8004ff0 <Wait_for>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f8      	beq.n	80045b0 <ESP_Init+0x50>
		;
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 80045be:	4954      	ldr	r1, [pc, #336]	; (8004710 <ESP_Init+0x1b0>)
 80045c0:	4858      	ldr	r0, [pc, #352]	; (8004724 <ESP_Init+0x1c4>)
 80045c2:	f000 fc80 	bl	8004ec6 <Uart_sendstring>

	/********* AT+CWMODE=1 **********/
	Uart_flush(wifi_uart);
 80045c6:	4850      	ldr	r0, [pc, #320]	; (8004708 <ESP_Init+0x1a8>)
 80045c8:	f000 faca 	bl	8004b60 <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 80045cc:	494e      	ldr	r1, [pc, #312]	; (8004708 <ESP_Init+0x1a8>)
 80045ce:	4856      	ldr	r0, [pc, #344]	; (8004728 <ESP_Init+0x1c8>)
 80045d0:	f000 fc79 	bl	8004ec6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80045d4:	bf00      	nop
 80045d6:	494c      	ldr	r1, [pc, #304]	; (8004708 <ESP_Init+0x1a8>)
 80045d8:	4851      	ldr	r0, [pc, #324]	; (8004720 <ESP_Init+0x1c0>)
 80045da:	f000 fd09 	bl	8004ff0 <Wait_for>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f8      	beq.n	80045d6 <ESP_Init+0x76>
		;
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 80045e4:	494a      	ldr	r1, [pc, #296]	; (8004710 <ESP_Init+0x1b0>)
 80045e6:	4851      	ldr	r0, [pc, #324]	; (800472c <ESP_Init+0x1cc>)
 80045e8:	f000 fc6d 	bl	8004ec6 <Uart_sendstring>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush(wifi_uart);
 80045ec:	4846      	ldr	r0, [pc, #280]	; (8004708 <ESP_Init+0x1a8>)
 80045ee:	f000 fab7 	bl	8004b60 <Uart_flush>
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 80045f2:	4947      	ldr	r1, [pc, #284]	; (8004710 <ESP_Init+0x1b0>)
 80045f4:	484e      	ldr	r0, [pc, #312]	; (8004730 <ESP_Init+0x1d0>)
 80045f6:	f000 fc66 	bl	8004ec6 <Uart_sendstring>
	sprintf(data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80045fa:	f107 0008 	add.w	r0, r7, #8
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	494c      	ldr	r1, [pc, #304]	; (8004734 <ESP_Init+0x1d4>)
 8004604:	f003 f8ec 	bl	80077e0 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8004608:	f107 0308 	add.w	r3, r7, #8
 800460c:	493e      	ldr	r1, [pc, #248]	; (8004708 <ESP_Init+0x1a8>)
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fc59 	bl	8004ec6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8004614:	bf00      	nop
 8004616:	493c      	ldr	r1, [pc, #240]	; (8004708 <ESP_Init+0x1a8>)
 8004618:	4841      	ldr	r0, [pc, #260]	; (8004720 <ESP_Init+0x1c0>)
 800461a:	f000 fce9 	bl	8004ff0 <Wait_for>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f8      	beq.n	8004616 <ESP_Init+0xb6>
		;
	sprintf(data, "Connected to,\"%s\"\n\n", SSID);
 8004624:	f107 0308 	add.w	r3, r7, #8
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4943      	ldr	r1, [pc, #268]	; (8004738 <ESP_Init+0x1d8>)
 800462c:	4618      	mov	r0, r3
 800462e:	f003 f8d7 	bl	80077e0 <siprintf>
	Uart_sendstring(data, pc_uart);
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	4936      	ldr	r1, [pc, #216]	; (8004710 <ESP_Init+0x1b0>)
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fc44 	bl	8004ec6 <Uart_sendstring>

	/********* AT+CIFSR **********/
	Uart_flush(wifi_uart);
 800463e:	4832      	ldr	r0, [pc, #200]	; (8004708 <ESP_Init+0x1a8>)
 8004640:	f000 fa8e 	bl	8004b60 <Uart_flush>
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 8004644:	4930      	ldr	r1, [pc, #192]	; (8004708 <ESP_Init+0x1a8>)
 8004646:	483d      	ldr	r0, [pc, #244]	; (800473c <ESP_Init+0x1dc>)
 8004648:	f000 fc3d 	bl	8004ec6 <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)))
 800464c:	bf00      	nop
 800464e:	492e      	ldr	r1, [pc, #184]	; (8004708 <ESP_Init+0x1a8>)
 8004650:	483b      	ldr	r0, [pc, #236]	; (8004740 <ESP_Init+0x1e0>)
 8004652:	f000 fccd 	bl	8004ff0 <Wait_for>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f8      	beq.n	800464e <ESP_Init+0xee>
		;
	while (!(Copy_upto("\"", buffer, wifi_uart)))
 800465c:	bf00      	nop
 800465e:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <ESP_Init+0x1a8>)
 8004660:	4938      	ldr	r1, [pc, #224]	; (8004744 <ESP_Init+0x1e4>)
 8004662:	4839      	ldr	r0, [pc, #228]	; (8004748 <ESP_Init+0x1e8>)
 8004664:	f000 fc46 	bl	8004ef4 <Copy_upto>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f7      	beq.n	800465e <ESP_Init+0xfe>
		;
	while (!(Wait_for("OK\r\n", wifi_uart)))
 800466e:	bf00      	nop
 8004670:	4925      	ldr	r1, [pc, #148]	; (8004708 <ESP_Init+0x1a8>)
 8004672:	482b      	ldr	r0, [pc, #172]	; (8004720 <ESP_Init+0x1c0>)
 8004674:	f000 fcbc 	bl	8004ff0 <Wait_for>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f8      	beq.n	8004670 <ESP_Init+0x110>
		;
	int len = strlen(buffer);
 800467e:	4831      	ldr	r0, [pc, #196]	; (8004744 <ESP_Init+0x1e4>)
 8004680:	f7fb fdae 	bl	80001e0 <strlen>
 8004684:	4603      	mov	r3, r0
 8004686:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len - 1] = '\0';
 8004688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800468a:	3b01      	subs	r3, #1
 800468c:	4a2d      	ldr	r2, [pc, #180]	; (8004744 <ESP_Init+0x1e4>)
 800468e:	2100      	movs	r1, #0
 8004690:	54d1      	strb	r1, [r2, r3]
	sprintf(data, "IP ADDR: %s\n\n", buffer);
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <ESP_Init+0x1e4>)
 8004698:	492c      	ldr	r1, [pc, #176]	; (800474c <ESP_Init+0x1ec>)
 800469a:	4618      	mov	r0, r3
 800469c:	f003 f8a0 	bl	80077e0 <siprintf>
	Uart_sendstring(data, pc_uart);
 80046a0:	f107 0308 	add.w	r3, r7, #8
 80046a4:	491a      	ldr	r1, [pc, #104]	; (8004710 <ESP_Init+0x1b0>)
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fc0d 	bl	8004ec6 <Uart_sendstring>

	/********* AT+CIPMUX **********/
	Uart_flush(wifi_uart);
 80046ac:	4816      	ldr	r0, [pc, #88]	; (8004708 <ESP_Init+0x1a8>)
 80046ae:	f000 fa57 	bl	8004b60 <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80046b2:	4915      	ldr	r1, [pc, #84]	; (8004708 <ESP_Init+0x1a8>)
 80046b4:	4826      	ldr	r0, [pc, #152]	; (8004750 <ESP_Init+0x1f0>)
 80046b6:	f000 fc06 	bl	8004ec6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80046ba:	bf00      	nop
 80046bc:	4912      	ldr	r1, [pc, #72]	; (8004708 <ESP_Init+0x1a8>)
 80046be:	4818      	ldr	r0, [pc, #96]	; (8004720 <ESP_Init+0x1c0>)
 80046c0:	f000 fc96 	bl	8004ff0 <Wait_for>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f8      	beq.n	80046bc <ESP_Init+0x15c>
		;
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 80046ca:	4911      	ldr	r1, [pc, #68]	; (8004710 <ESP_Init+0x1b0>)
 80046cc:	4821      	ldr	r0, [pc, #132]	; (8004754 <ESP_Init+0x1f4>)
 80046ce:	f000 fbfa 	bl	8004ec6 <Uart_sendstring>

	/********* AT+CIPSERVER **********/
	Uart_flush(wifi_uart);
 80046d2:	480d      	ldr	r0, [pc, #52]	; (8004708 <ESP_Init+0x1a8>)
 80046d4:	f000 fa44 	bl	8004b60 <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 80046d8:	490b      	ldr	r1, [pc, #44]	; (8004708 <ESP_Init+0x1a8>)
 80046da:	481f      	ldr	r0, [pc, #124]	; (8004758 <ESP_Init+0x1f8>)
 80046dc:	f000 fbf3 	bl	8004ec6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80046e0:	bf00      	nop
 80046e2:	4909      	ldr	r1, [pc, #36]	; (8004708 <ESP_Init+0x1a8>)
 80046e4:	480e      	ldr	r0, [pc, #56]	; (8004720 <ESP_Init+0x1c0>)
 80046e6:	f000 fc83 	bl	8004ff0 <Wait_for>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f8      	beq.n	80046e2 <ESP_Init+0x182>
		;
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 80046f0:	4907      	ldr	r1, [pc, #28]	; (8004710 <ESP_Init+0x1b0>)
 80046f2:	481a      	ldr	r0, [pc, #104]	; (800475c <ESP_Init+0x1fc>)
 80046f4:	f000 fbe7 	bl	8004ec6 <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 80046f8:	4905      	ldr	r1, [pc, #20]	; (8004710 <ESP_Init+0x1b0>)
 80046fa:	4819      	ldr	r0, [pc, #100]	; (8004760 <ESP_Init+0x200>)
 80046fc:	f000 fbe3 	bl	8004ec6 <Uart_sendstring>

}
 8004700:	bf00      	nop
 8004702:	3760      	adds	r7, #96	; 0x60
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	200005a0 	.word	0x200005a0
 800470c:	08009f50 	.word	0x08009f50
 8004710:	2000055c 	.word	0x2000055c
 8004714:	08009f5c 	.word	0x08009f5c
 8004718:	08009f68 	.word	0x08009f68
 800471c:	08009f6c 	.word	0x08009f6c
 8004720:	08009f74 	.word	0x08009f74
 8004724:	08009f7c 	.word	0x08009f7c
 8004728:	08009f88 	.word	0x08009f88
 800472c:	08009f98 	.word	0x08009f98
 8004730:	08009fa8 	.word	0x08009fa8
 8004734:	08009fcc 	.word	0x08009fcc
 8004738:	08009fe4 	.word	0x08009fe4
 800473c:	08009ff8 	.word	0x08009ff8
 8004740:	0800a004 	.word	0x0800a004
 8004744:	20000744 	.word	0x20000744
 8004748:	0800a014 	.word	0x0800a014
 800474c:	0800a018 	.word	0x0800a018
 8004750:	0800a028 	.word	0x0800a028
 8004754:	0800a038 	.word	0x0800a038
 8004758:	0800a048 	.word	0x0800a048
 800475c:	0800a05c 	.word	0x0800a05c
 8004760:	0800a070 	.word	0x0800a070

08004764 <Server_Send>:

int Server_Send(char *str, int Link_ID) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b098      	sub	sp, #96	; 0x60
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
	int len = strlen(str);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fb fd36 	bl	80001e0 <strlen>
 8004774:	4603      	mov	r3, r0
 8004776:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf(data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8004778:	f107 000c 	add.w	r0, r7, #12
 800477c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	491a      	ldr	r1, [pc, #104]	; (80047ec <Server_Send+0x88>)
 8004782:	f003 f82d 	bl	80077e0 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8004786:	f107 030c 	add.w	r3, r7, #12
 800478a:	4919      	ldr	r1, [pc, #100]	; (80047f0 <Server_Send+0x8c>)
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fb9a 	bl	8004ec6 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)))
 8004792:	bf00      	nop
 8004794:	4916      	ldr	r1, [pc, #88]	; (80047f0 <Server_Send+0x8c>)
 8004796:	4817      	ldr	r0, [pc, #92]	; (80047f4 <Server_Send+0x90>)
 8004798:	f000 fc2a 	bl	8004ff0 <Wait_for>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f8      	beq.n	8004794 <Server_Send+0x30>
		;
	Uart_sendstring(str, wifi_uart);
 80047a2:	4913      	ldr	r1, [pc, #76]	; (80047f0 <Server_Send+0x8c>)
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fb8e 	bl	8004ec6 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)))
 80047aa:	bf00      	nop
 80047ac:	4910      	ldr	r1, [pc, #64]	; (80047f0 <Server_Send+0x8c>)
 80047ae:	4812      	ldr	r0, [pc, #72]	; (80047f8 <Server_Send+0x94>)
 80047b0:	f000 fc1e 	bl	8004ff0 <Wait_for>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f8      	beq.n	80047ac <Server_Send+0x48>
		;
	sprintf(data, "AT+CIPCLOSE=5\r\n");
 80047ba:	f107 030c 	add.w	r3, r7, #12
 80047be:	490f      	ldr	r1, [pc, #60]	; (80047fc <Server_Send+0x98>)
 80047c0:	4618      	mov	r0, r3
 80047c2:	f003 f80d 	bl	80077e0 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80047c6:	f107 030c 	add.w	r3, r7, #12
 80047ca:	4909      	ldr	r1, [pc, #36]	; (80047f0 <Server_Send+0x8c>)
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fb7a 	bl	8004ec6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80047d2:	bf00      	nop
 80047d4:	4906      	ldr	r1, [pc, #24]	; (80047f0 <Server_Send+0x8c>)
 80047d6:	480a      	ldr	r0, [pc, #40]	; (8004800 <Server_Send+0x9c>)
 80047d8:	f000 fc0a 	bl	8004ff0 <Wait_for>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f8      	beq.n	80047d4 <Server_Send+0x70>
		;
	return 1;
 80047e2:	2301      	movs	r3, #1
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3760      	adds	r7, #96	; 0x60
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	0800a090 	.word	0x0800a090
 80047f0:	200005a0 	.word	0x200005a0
 80047f4:	0800a0a4 	.word	0x0800a0a4
 80047f8:	0800a0a8 	.word	0x0800a0a8
 80047fc:	0800a0b0 	.word	0x0800a0b0
 8004800:	08009f74 	.word	0x08009f74

08004804 <Server_Handle>:

void Server_Handle(char *str, int Link_ID, float temp) {
 8004804:	b580      	push	{r7, lr}
 8004806:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 800480a:	af00      	add	r7, sp, #0
 800480c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004810:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004814:	6018      	str	r0, [r3, #0]
 8004816:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800481a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800481e:	6019      	str	r1, [r3, #0]
 8004820:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004824:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8004828:	ed83 0a00 	vstr	s0, [r3]
	char datatosend[1024] = { 0 };
 800482c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004830:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	3304      	adds	r3, #4
 800483a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f002 fa4c 	bl	8006cde <memset>
	char tempData[50] = { 0 };
 8004846:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800484a:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	3304      	adds	r3, #4
 8004854:	222e      	movs	r2, #46	; 0x2e
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f002 fa40 	bl	8006cde <memset>
	sprintf(tempData, "<p><h2>Temp: %0.2f</h2><\p>", temp);
 800485e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004862:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	f7fb fe76 	bl	8000558 <__aeabi_f2d>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	f107 0014 	add.w	r0, r7, #20
 8004874:	4918      	ldr	r1, [pc, #96]	; (80048d8 <Server_Handle+0xd4>)
 8004876:	f002 ffb3 	bl	80077e0 <siprintf>
//		strcat(datatosend, tempData);
//		strcat(datatosend, Terminate);
//		Server_Send(datatosend, Link_ID);
//	}

	sprintf(datatosend, Basic_inclusion);
 800487a:	4b18      	ldr	r3, [pc, #96]	; (80048dc <Server_Handle+0xd8>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004882:	4611      	mov	r1, r2
 8004884:	4618      	mov	r0, r3
 8004886:	f002 ffab 	bl	80077e0 <siprintf>
	strcat(datatosend, tempData);
 800488a:	f107 0214 	add.w	r2, r7, #20
 800488e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004892:	4611      	mov	r1, r2
 8004894:	4618      	mov	r0, r3
 8004896:	f003 f806 	bl	80078a6 <strcat>
	strcat(datatosend, REFRESH);
 800489a:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <Server_Handle+0xdc>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048a2:	4611      	mov	r1, r2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f002 fffe 	bl	80078a6 <strcat>
	strcat(datatosend, Terminate);
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <Server_Handle+0xe0>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f002 fff6 	bl	80078a6 <strcat>
	Server_Send(datatosend, Link_ID);
 80048ba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80048be:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80048c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7ff ff4b 	bl	8004764 <Server_Send>

}
 80048ce:	bf00      	nop
 80048d0:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	0800a0c0 	.word	0x0800a0c0
 80048dc:	20000010 	.word	0x20000010
 80048e0:	20000014 	.word	0x20000014
 80048e4:	20000018 	.word	0x20000018

080048e8 <Server_Start>:

uint8_t Server_Start(float temp) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b094      	sub	sp, #80	; 0x50
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	ed87 0a01 	vstr	s0, [r7, #4]
	char buftocopyinto[64] = { 0 };
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	223c      	movs	r2, #60	; 0x3c
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f002 f9ed 	bl	8006cde <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 8004904:	bf00      	nop
 8004906:	f107 020f 	add.w	r2, r7, #15
 800490a:	4b2e      	ldr	r3, [pc, #184]	; (80049c4 <Server_Start+0xdc>)
 800490c:	2101      	movs	r1, #1
 800490e:	482e      	ldr	r0, [pc, #184]	; (80049c8 <Server_Start+0xe0>)
 8004910:	f000 faaa 	bl	8004e68 <Get_after>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f5      	beq.n	8004906 <Server_Start+0x1e>
	Link_ID -= 48;
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	3b30      	subs	r3, #48	; 0x30
 800491e:	b2db      	uxtb	r3, r3
 8004920:	73fb      	strb	r3, [r7, #15]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 8004922:	bf00      	nop
 8004924:	f107 0310 	add.w	r3, r7, #16
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <Server_Start+0xdc>)
 800492a:	4619      	mov	r1, r3
 800492c:	4827      	ldr	r0, [pc, #156]	; (80049cc <Server_Start+0xe4>)
 800492e:	f000 fae1 	bl	8004ef4 <Copy_upto>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f5      	beq.n	8004924 <Server_Start+0x3c>
	if (Look_for("/ledon", buftocopyinto) == 1) {
 8004938:	f107 0310 	add.w	r3, r7, #16
 800493c:	4619      	mov	r1, r3
 800493e:	4824      	ldr	r0, [pc, #144]	; (80049d0 <Server_Start+0xe8>)
 8004940:	f000 f8bb 	bl	8004aba <Look_for>
 8004944:	4603      	mov	r3, r0
 8004946:	2b01      	cmp	r3, #1
 8004948:	d10c      	bne.n	8004964 <Server_Start+0x7c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800494a:	2201      	movs	r2, #1
 800494c:	2120      	movs	r1, #32
 800494e:	4821      	ldr	r0, [pc, #132]	; (80049d4 <Server_Start+0xec>)
 8004950:	f7fd fdf6 	bl	8002540 <HAL_GPIO_WritePin>
		Server_Handle("/ledon", Link_ID, temp);
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	ed97 0a01 	vldr	s0, [r7, #4]
 800495a:	4619      	mov	r1, r3
 800495c:	481c      	ldr	r0, [pc, #112]	; (80049d0 <Server_Start+0xe8>)
 800495e:	f7ff ff51 	bl	8004804 <Server_Handle>
 8004962:	e02a      	b.n	80049ba <Server_Start+0xd2>
	}

	else if (Look_for("/ledoff", buftocopyinto) == 1) {
 8004964:	f107 0310 	add.w	r3, r7, #16
 8004968:	4619      	mov	r1, r3
 800496a:	481b      	ldr	r0, [pc, #108]	; (80049d8 <Server_Start+0xf0>)
 800496c:	f000 f8a5 	bl	8004aba <Look_for>
 8004970:	4603      	mov	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d10c      	bne.n	8004990 <Server_Start+0xa8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8004976:	2200      	movs	r2, #0
 8004978:	2120      	movs	r1, #32
 800497a:	4816      	ldr	r0, [pc, #88]	; (80049d4 <Server_Start+0xec>)
 800497c:	f7fd fde0 	bl	8002540 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff", Link_ID, temp);
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	ed97 0a01 	vldr	s0, [r7, #4]
 8004986:	4619      	mov	r1, r3
 8004988:	4813      	ldr	r0, [pc, #76]	; (80049d8 <Server_Start+0xf0>)
 800498a:	f7ff ff3b 	bl	8004804 <Server_Handle>
 800498e:	e014      	b.n	80049ba <Server_Start+0xd2>
	}

	else if (Look_for("/favicon.ico", buftocopyinto) == 1)
 8004990:	f107 0310 	add.w	r3, r7, #16
 8004994:	4619      	mov	r1, r3
 8004996:	4811      	ldr	r0, [pc, #68]	; (80049dc <Server_Start+0xf4>)
 8004998:	f000 f88f 	bl	8004aba <Look_for>
 800499c:	4603      	mov	r3, r0
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d00b      	beq.n	80049ba <Server_Start+0xd2>
		;

	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2120      	movs	r1, #32
 80049a6:	480b      	ldr	r0, [pc, #44]	; (80049d4 <Server_Start+0xec>)
 80049a8:	f7fd fdca 	bl	8002540 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID, temp);
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80049b2:	4619      	mov	r1, r3
 80049b4:	480a      	ldr	r0, [pc, #40]	; (80049e0 <Server_Start+0xf8>)
 80049b6:	f7ff ff25 	bl	8004804 <Server_Handle>
	}
	return 1;
 80049ba:	2301      	movs	r3, #1
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3750      	adds	r7, #80	; 0x50
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	200005a0 	.word	0x200005a0
 80049c8:	0800a0dc 	.word	0x0800a0dc
 80049cc:	0800a0e4 	.word	0x0800a0e4
 80049d0:	0800a0f0 	.word	0x0800a0f0
 80049d4:	40020000 	.word	0x40020000
 80049d8:	0800a0f8 	.word	0x0800a0f8
 80049dc:	0800a100 	.word	0x0800a100
 80049e0:	0800a110 	.word	0x0800a110

080049e4 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 80049e8:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <Ringbuf_init+0x68>)
 80049ea:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <Ringbuf_init+0x6c>)
 80049ec:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 80049ee:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <Ringbuf_init+0x70>)
 80049f0:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <Ringbuf_init+0x74>)
 80049f2:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 80049f4:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <Ringbuf_init+0x78>)
 80049f6:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <Ringbuf_init+0x7c>)
 80049f8:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80049fa:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <Ringbuf_init+0x80>)
 80049fc:	4a1a      	ldr	r2, [pc, #104]	; (8004a68 <Ringbuf_init+0x84>)
 80049fe:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8004a00:	4b1a      	ldr	r3, [pc, #104]	; (8004a6c <Ringbuf_init+0x88>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <Ringbuf_init+0x88>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8004a10:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <Ringbuf_init+0x8c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <Ringbuf_init+0x8c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <Ringbuf_init+0x88>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <Ringbuf_init+0x88>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0220 	orr.w	r2, r2, #32
 8004a2e:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <Ringbuf_init+0x8c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <Ringbuf_init+0x8c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0220 	orr.w	r2, r2, #32
 8004a3e:	60da      	str	r2, [r3, #12]
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000f78 	.word	0x20000f78
 8004a50:	20000758 	.word	0x20000758
 8004a54:	20000f7c 	.word	0x20000f7c
 8004a58:	20000960 	.word	0x20000960
 8004a5c:	20000f80 	.word	0x20000f80
 8004a60:	20000b68 	.word	0x20000b68
 8004a64:	20000f84 	.word	0x20000f84
 8004a68:	20000d70 	.word	0x20000d70
 8004a6c:	200005a0 	.word	0x200005a0
 8004a70:	2000055c 	.word	0x2000055c

08004a74 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	6039      	str	r1, [r7, #0]
 8004a7e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a86:	3301      	adds	r3, #1
 8004a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d009      	beq.n	8004aae <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	79f9      	ldrb	r1, [r7, #7]
 8004aa4:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fb fb8b 	bl	80001e0 <strlen>
 8004aca:	4603      	mov	r3, r0
 8004acc:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8004ace:	6838      	ldr	r0, [r7, #0]
 8004ad0:	f7fb fb86 	bl	80001e0 <strlen>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8004ae0:	e002      	b.n	8004ae8 <Look_for+0x2e>
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	781a      	ldrb	r2, [r3, #0]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	440b      	add	r3, r1
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d1f2      	bne.n	8004ae2 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4413      	add	r3, r2
 8004b02:	781a      	ldrb	r2, [r3, #0]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	6839      	ldr	r1, [r7, #0]
 8004b08:	440b      	add	r3, r1
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d111      	bne.n	8004b34 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8004b10:	e005      	b.n	8004b1e <Look_for+0x64>
	{
		so_far++;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	3301      	adds	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
		indx++;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	440b      	add	r3, r1
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d0ef      	beq.n	8004b12 <Look_for+0x58>
 8004b32:	e008      	b.n	8004b46 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	dbcf      	blt.n	8004ae0 <Look_for+0x26>
 8004b40:	f04f 33ff 	mov.w	r3, #4294967295
 8004b44:	e007      	b.n	8004b56 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d101      	bne.n	8004b52 <Look_for+0x98>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e001      	b.n	8004b56 <Look_for+0x9c>
	else return -1;
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <Uart_flush>:
	}
}


void Uart_flush (UART_HandleTypeDef *uart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a12      	ldr	r2, [pc, #72]	; (8004bb4 <Uart_flush+0x54>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10c      	bne.n	8004b8a <Uart_flush+0x2a>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <Uart_flush+0x58>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f002 f8af 	bl	8006cde <memset>
		_rx_buffer1->head = 0;
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <Uart_flush+0x58>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == pc_uart)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a0b      	ldr	r2, [pc, #44]	; (8004bbc <Uart_flush+0x5c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d10c      	bne.n	8004bac <Uart_flush+0x4c>
	{
		memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <Uart_flush+0x60>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f002 f89e 	bl	8006cde <memset>
		_rx_buffer2->head = 0;
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <Uart_flush+0x60>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	200005a0 	.word	0x200005a0
 8004bb8:	20000f78 	.word	0x20000f78
 8004bbc:	2000055c 	.word	0x2000055c
 8004bc0:	20000f80 	.word	0x20000f80

08004bc4 <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <Uart_peek+0x7c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d114      	bne.n	8004bfe <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <Uart_peek+0x80>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004bdc:	4b19      	ldr	r3, [pc, #100]	; (8004c44 <Uart_peek+0x80>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d102      	bne.n	8004bee <Uart_peek+0x2a>
		  {
		    return -1;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bec:	e022      	b.n	8004c34 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8004bee:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <Uart_peek+0x80>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <Uart_peek+0x80>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	e01a      	b.n	8004c34 <Uart_peek+0x70>
		  }
	}

	else if (uart == pc_uart)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <Uart_peek+0x84>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d114      	bne.n	8004c30 <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8004c06:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <Uart_peek+0x88>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <Uart_peek+0x88>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d102      	bne.n	8004c20 <Uart_peek+0x5c>
		  {
		    return -1;
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	e009      	b.n	8004c34 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <Uart_peek+0x88>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <Uart_peek+0x88>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c2c:	5cd3      	ldrb	r3, [r2, r3]
 8004c2e:	e001      	b.n	8004c34 <Uart_peek+0x70>
		  }
	}

	return -1;
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	200005a0 	.word	0x200005a0
 8004c44:	20000f78 	.word	0x20000f78
 8004c48:	2000055c 	.word	0x2000055c
 8004c4c:	20000f80 	.word	0x20000f80

08004c50 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a29      	ldr	r2, [pc, #164]	; (8004d00 <Uart_read+0xb0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d121      	bne.n	8004ca4 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8004c60:	4b28      	ldr	r3, [pc, #160]	; (8004d04 <Uart_read+0xb4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004c68:	4b26      	ldr	r3, [pc, #152]	; (8004d04 <Uart_read+0xb4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d102      	bne.n	8004c7a <Uart_read+0x2a>
		  {
		    return -1;
 8004c74:	f04f 33ff 	mov.w	r3, #4294967295
 8004c78:	e03c      	b.n	8004cf4 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8004c7a:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <Uart_read+0xb4>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <Uart_read+0xb4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c86:	5cd3      	ldrb	r3, [r2, r3]
 8004c88:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8004c8a:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <Uart_read+0xb4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <Uart_read+0xb4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8004ca0:	7bbb      	ldrb	r3, [r7, #14]
 8004ca2:	e027      	b.n	8004cf4 <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <Uart_read+0xb8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d121      	bne.n	8004cf0 <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8004cac:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <Uart_read+0xbc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <Uart_read+0xbc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d102      	bne.n	8004cc6 <Uart_read+0x76>
		  {
		    return -1;
 8004cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc4:	e016      	b.n	8004cf4 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <Uart_read+0xbc>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <Uart_read+0xbc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004cd2:	5cd3      	ldrb	r3, [r2, r3]
 8004cd4:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <Uart_read+0xbc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <Uart_read+0xbc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	e001      	b.n	8004cf4 <Uart_read+0xa4>
		  }
	}

	else return -1;
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	200005a0 	.word	0x200005a0
 8004d04:	20000f78 	.word	0x20000f78
 8004d08:	2000055c 	.word	0x2000055c
 8004d0c:	20000f80 	.word	0x20000f80

08004d10 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	db54      	blt.n	8004dca <Uart_write+0xba>
	{
		if (uart == device_uart){
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	4a2d      	ldr	r2, [pc, #180]	; (8004dd8 <Uart_write+0xc8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d126      	bne.n	8004d76 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8004d28:	4b2c      	ldr	r3, [pc, #176]	; (8004ddc <Uart_write+0xcc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d30:	3301      	adds	r3, #1
 8004d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d36:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8004d38:	bf00      	nop
 8004d3a:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <Uart_write+0xcc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d0f8      	beq.n	8004d3a <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8004d48:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <Uart_write+0xcc>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <Uart_write+0xcc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	b2c9      	uxtb	r1, r1
 8004d58:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <Uart_write+0xcc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8004d64:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <Uart_write+0xc8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <Uart_write+0xc8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d72:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8004d74:	e029      	b.n	8004dca <Uart_write+0xba>
		else if (uart == pc_uart){
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	4a19      	ldr	r2, [pc, #100]	; (8004de0 <Uart_write+0xd0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d125      	bne.n	8004dca <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8004d7e:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <Uart_write+0xd4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d86:	3301      	adds	r3, #1
 8004d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8c:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8004d8e:	bf00      	nop
 8004d90:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <Uart_write+0xd4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d0f8      	beq.n	8004d90 <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <Uart_write+0xd4>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <Uart_write+0xd4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	b2c9      	uxtb	r1, r1
 8004dae:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <Uart_write+0xd4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8004dba:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <Uart_write+0xd0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <Uart_write+0xd0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dc8:	60da      	str	r2, [r3, #12]
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	200005a0 	.word	0x200005a0
 8004ddc:	20000f7c 	.word	0x20000f7c
 8004de0:	2000055c 	.word	0x2000055c
 8004de4:	20000f84 	.word	0x20000f84

08004de8 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <IsDataAvailable+0x70>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d111      	bne.n	8004e1c <IsDataAvailable+0x34>
 8004df8:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <IsDataAvailable+0x74>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <IsDataAvailable+0x74>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1a:	e017      	b.n	8004e4c <IsDataAvailable+0x64>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <IsDataAvailable+0x78>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d111      	bne.n	8004e48 <IsDataAvailable+0x60>
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <IsDataAvailable+0x7c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <IsDataAvailable+0x7c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e46:	e001      	b.n	8004e4c <IsDataAvailable+0x64>
	return -1;
 8004e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	200005a0 	.word	0x200005a0
 8004e5c:	20000f78 	.word	0x20000f78
 8004e60:	2000055c 	.word	0x2000055c
 8004e64:	20000f80 	.word	0x20000f80

08004e68 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	460b      	mov	r3, r1
 8004e76:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8004e78:	bf00      	nop
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f8b7 	bl	8004ff0 <Wait_for>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d1f8      	bne.n	8004e7a <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e012      	b.n	8004eb4 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8004e8e:	bf00      	nop
 8004e90:	6838      	ldr	r0, [r7, #0]
 8004e92:	f7ff ffa9 	bl	8004de8 <IsDataAvailable>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f9      	beq.n	8004e90 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8004e9c:	6838      	ldr	r0, [r7, #0]
 8004e9e:	f7ff fed7 	bl	8004c50 <Uart_read>
 8004ea2:	4601      	mov	r1, r0
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	b2ca      	uxtb	r2, r1
 8004eac:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	7afb      	ldrb	r3, [r7, #11]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	dbe8      	blt.n	8004e8e <Get_after+0x26>
	}
	return 1;
 8004ebc:	2301      	movs	r3, #1
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8004ed0:	e007      	b.n	8004ee2 <Uart_sendstring+0x1c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff ff17 	bl	8004d10 <Uart_write>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f3      	bne.n	8004ed2 <Uart_sendstring+0xc>
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7fb f96b 	bl	80001e0 <strlen>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8004f12:	bf00      	nop
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff67 	bl	8004de8 <IsDataAvailable>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f9      	beq.n	8004f14 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8004f20:	e01f      	b.n	8004f62 <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8004f22:	4b32      	ldr	r3, [pc, #200]	; (8004fec <Copy_upto+0xf8>)
 8004f24:	6819      	ldr	r1, [r3, #0]
 8004f26:	4b31      	ldr	r3, [pc, #196]	; (8004fec <Copy_upto+0xf8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	68b8      	ldr	r0, [r7, #8]
 8004f32:	4403      	add	r3, r0
 8004f34:	5c8a      	ldrb	r2, [r1, r2]
 8004f36:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8004f38:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <Copy_upto+0xf8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	4b2a      	ldr	r3, [pc, #168]	; (8004fec <Copy_upto+0xf8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8004f54:	bf00      	nop
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ff46 	bl	8004de8 <IsDataAvailable>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f9      	beq.n	8004f56 <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fe2e 	bl	8004bc4 <Uart_peek>
 8004f68:	4601      	mov	r1, r0
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	4299      	cmp	r1, r3
 8004f74:	d1d5      	bne.n	8004f22 <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8004f76:	e01b      	b.n	8004fb0 <Copy_upto+0xbc>
	{
		so_far++;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fe66 	bl	8004c50 <Uart_read>
 8004f84:	4601      	mov	r1, r0
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	61ba      	str	r2, [r7, #24]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4413      	add	r3, r2
 8004f92:	b2ca      	uxtb	r2, r1
 8004f94:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d101      	bne.n	8004fa2 <Copy_upto+0xae>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e01f      	b.n	8004fe2 <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 8004fa2:	bf00      	nop
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff ff1f 	bl	8004de8 <IsDataAvailable>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f9      	beq.n	8004fa4 <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff fe07 	bl	8004bc4 <Uart_peek>
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	4299      	cmp	r1, r3
 8004fc2:	d0d9      	beq.n	8004f78 <Copy_upto+0x84>
	}

	if (so_far != len)
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d002      	beq.n	8004fd2 <Copy_upto+0xde>
	{
		so_far = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61fb      	str	r3, [r7, #28]
		goto again;
 8004fd0:	e79f      	b.n	8004f12 <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d101      	bne.n	8004fde <Copy_upto+0xea>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e001      	b.n	8004fe2 <Copy_upto+0xee>
	else return -1;
 8004fde:	f04f 33ff 	mov.w	r3, #4294967295

}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000f78 	.word	0x20000f78

08004ff0 <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fb f8ee 	bl	80001e0 <strlen>
 8005004:	4603      	mov	r3, r0
 8005006:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8005008:	bf00      	nop
 800500a:	6838      	ldr	r0, [r7, #0]
 800500c:	f7ff feec 	bl	8004de8 <IsDataAvailable>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f9      	beq.n	800500a <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8005016:	6838      	ldr	r0, [r7, #0]
 8005018:	f7ff fdd4 	bl	8004bc4 <Uart_peek>
 800501c:	4601      	mov	r1, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	4413      	add	r3, r2
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	4299      	cmp	r1, r3
 8005028:	d01e      	beq.n	8005068 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 800502a:	4b1e      	ldr	r3, [pc, #120]	; (80050a4 <Wait_for+0xb4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <Wait_for+0xb4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800503c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8005040:	e7e2      	b.n	8005008 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3301      	adds	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8005048:	6838      	ldr	r0, [r7, #0]
 800504a:	f7ff fe01 	bl	8004c50 <Uart_read>
		if (so_far == len) return 1;
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	d101      	bne.n	800505a <Wait_for+0x6a>
 8005056:	2301      	movs	r3, #1
 8005058:	e01f      	b.n	800509a <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 800505a:	bf00      	nop
 800505c:	6838      	ldr	r0, [r7, #0]
 800505e:	f7ff fec3 	bl	8004de8 <IsDataAvailable>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f9      	beq.n	800505c <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 8005068:	6838      	ldr	r0, [r7, #0]
 800506a:	f7ff fdab 	bl	8004bc4 <Uart_peek>
 800506e:	4601      	mov	r1, r0
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	4299      	cmp	r1, r3
 800507a:	d0e2      	beq.n	8005042 <Wait_for+0x52>
	}

	if (so_far != len)
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d002      	beq.n	800508a <Wait_for+0x9a>
	{
		so_far = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8005088:	e7be      	b.n	8005008 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	d101      	bne.n	8005096 <Wait_for+0xa6>
 8005092:	2301      	movs	r3, #1
 8005094:	e001      	b.n	800509a <Wait_for+0xaa>
	else return -1;
 8005096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000f78 	.word	0x20000f78

080050a8 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d026      	beq.n	8005118 <Uart_isr+0x70>
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d021      	beq.n	8005118 <Uart_isr+0x70>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a40      	ldr	r2, [pc, #256]	; (80051e8 <Uart_isr+0x140>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d107      	bne.n	80050fa <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 80050ea:	4b40      	ldr	r3, [pc, #256]	; (80051ec <Uart_isr+0x144>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fcbe 	bl	8004a74 <store_char>
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
           	print("In PC UART IT\n\r");
        }

        return;
 80050f8:	e070      	b.n	80051dc <Uart_isr+0x134>
        else if (huart == pc_uart)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a3c      	ldr	r2, [pc, #240]	; (80051f0 <Uart_isr+0x148>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d16c      	bne.n	80051dc <Uart_isr+0x134>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8005102:	4b3c      	ldr	r3, [pc, #240]	; (80051f4 <Uart_isr+0x14c>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fcb2 	bl	8004a74 <store_char>
           	print("In PC UART IT\n\r");
 8005110:	4839      	ldr	r0, [pc, #228]	; (80051f8 <Uart_isr+0x150>)
 8005112:	f7ff fa01 	bl	8004518 <print>
        return;
 8005116:	e061      	b.n	80051dc <Uart_isr+0x134>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d05f      	beq.n	80051e2 <Uart_isr+0x13a>
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005128:	2b00      	cmp	r3, #0
 800512a:	d05a      	beq.n	80051e2 <Uart_isr+0x13a>
    {
    	if (huart == device_uart){
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a2e      	ldr	r2, [pc, #184]	; (80051e8 <Uart_isr+0x140>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d127      	bne.n	8005184 <Uart_isr+0xdc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8005134:	4b31      	ldr	r3, [pc, #196]	; (80051fc <Uart_isr+0x154>)
 8005136:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800513a:	4b30      	ldr	r3, [pc, #192]	; (80051fc <Uart_isr+0x154>)
 800513c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005140:	429a      	cmp	r2, r3
 8005142:	d108      	bne.n	8005156 <Uart_isr+0xae>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005152:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8005154:	e044      	b.n	80051e0 <Uart_isr+0x138>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8005156:	4b29      	ldr	r3, [pc, #164]	; (80051fc <Uart_isr+0x154>)
 8005158:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800515c:	4a27      	ldr	r2, [pc, #156]	; (80051fc <Uart_isr+0x154>)
 800515e:	5cd3      	ldrb	r3, [r2, r3]
 8005160:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8005162:	4b26      	ldr	r3, [pc, #152]	; (80051fc <Uart_isr+0x154>)
 8005164:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005168:	3301      	adds	r3, #1
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	4a23      	ldr	r2, [pc, #140]	; (80051fc <Uart_isr+0x154>)
 8005170:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	7b7a      	ldrb	r2, [r7, #13]
 8005180:	605a      	str	r2, [r3, #4]
    	return;
 8005182:	e02d      	b.n	80051e0 <Uart_isr+0x138>
    	else if (huart == pc_uart){
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a1a      	ldr	r2, [pc, #104]	; (80051f0 <Uart_isr+0x148>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d129      	bne.n	80051e0 <Uart_isr+0x138>
        	if(tx_buffer2.head == tx_buffer2.tail)
 800518c:	4b1c      	ldr	r3, [pc, #112]	; (8005200 <Uart_isr+0x158>)
 800518e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005192:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <Uart_isr+0x158>)
 8005194:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005198:	429a      	cmp	r2, r3
 800519a:	d108      	bne.n	80051ae <Uart_isr+0x106>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051aa:	60da      	str	r2, [r3, #12]
    	return;
 80051ac:	e018      	b.n	80051e0 <Uart_isr+0x138>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80051ae:	4b14      	ldr	r3, [pc, #80]	; (8005200 <Uart_isr+0x158>)
 80051b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80051b4:	4a12      	ldr	r2, [pc, #72]	; (8005200 <Uart_isr+0x158>)
 80051b6:	5cd3      	ldrb	r3, [r2, r3]
 80051b8:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80051ba:	4b11      	ldr	r3, [pc, #68]	; (8005200 <Uart_isr+0x158>)
 80051bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80051c0:	3301      	adds	r3, #1
 80051c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c6:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <Uart_isr+0x158>)
 80051c8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	7bba      	ldrb	r2, [r7, #14]
 80051d8:	605a      	str	r2, [r3, #4]
    	return;
 80051da:	e001      	b.n	80051e0 <Uart_isr+0x138>
        return;
 80051dc:	bf00      	nop
 80051de:	e000      	b.n	80051e2 <Uart_isr+0x13a>
    	return;
 80051e0:	bf00      	nop
    }
}
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	200005a0 	.word	0x200005a0
 80051ec:	20000f78 	.word	0x20000f78
 80051f0:	2000055c 	.word	0x2000055c
 80051f4:	20000f80 	.word	0x20000f80
 80051f8:	0800a114 	.word	0x0800a114
 80051fc:	20000960 	.word	0x20000960
 8005200:	20000d70 	.word	0x20000d70

08005204 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005216:	2b84      	cmp	r3, #132	; 0x84
 8005218:	d005      	beq.n	8005226 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800521a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	3303      	adds	r3, #3
 8005224:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005238:	f000 fc58 	bl	8005aec <vTaskStartScheduler>
  
  return osOK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	bd80      	pop	{r7, pc}

08005242 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005244:	b089      	sub	sp, #36	; 0x24
 8005246:	af04      	add	r7, sp, #16
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d020      	beq.n	8005296 <osThreadCreate+0x54>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01c      	beq.n	8005296 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685c      	ldr	r4, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681d      	ldr	r5, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691e      	ldr	r6, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff ffc8 	bl	8005204 <makeFreeRtosPriority>
 8005274:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800527e:	9202      	str	r2, [sp, #8]
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	9100      	str	r1, [sp, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4632      	mov	r2, r6
 8005288:	4629      	mov	r1, r5
 800528a:	4620      	mov	r0, r4
 800528c:	f000 fa4f 	bl	800572e <xTaskCreateStatic>
 8005290:	4603      	mov	r3, r0
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e01c      	b.n	80052d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685c      	ldr	r4, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052a2:	b29e      	uxth	r6, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff ffaa 	bl	8005204 <makeFreeRtosPriority>
 80052b0:	4602      	mov	r2, r0
 80052b2:	f107 030c 	add.w	r3, r7, #12
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	9200      	str	r2, [sp, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	4632      	mov	r2, r6
 80052be:	4629      	mov	r1, r5
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 fa91 	bl	80057e8 <xTaskCreate>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d001      	beq.n	80052d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80052d0:	68fb      	ldr	r3, [r7, #12]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <osDelay+0x16>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	e000      	b.n	80052f2 <osDelay+0x18>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fbc6 	bl	8005a84 <vTaskDelay>
  
  return osOK;
 80052f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005302:	b590      	push	{r4, r7, lr}
 8005304:	b085      	sub	sp, #20
 8005306:	af02      	add	r7, sp, #8
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d011      	beq.n	8005338 <osMessageCreate+0x36>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00d      	beq.n	8005338 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2400      	movs	r4, #0
 800532e:	9400      	str	r4, [sp, #0]
 8005330:	f000 f92c 	bl	800558c <xQueueGenericCreateStatic>
 8005334:	4603      	mov	r3, r0
 8005336:	e008      	b.n	800534a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	4619      	mov	r1, r3
 8005344:	f000 f99a 	bl	800567c <xQueueGenericCreate>
 8005348:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bd90      	pop	{r4, r7, pc}

08005352 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f103 0208 	add.w	r2, r3, #8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f04f 32ff 	mov.w	r2, #4294967295
 800536a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f103 0208 	add.w	r2, r3, #8
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f103 0208 	add.w	r2, r3, #8
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d103      	bne.n	8005414 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e00c      	b.n	800542e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3308      	adds	r3, #8
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	e002      	b.n	8005422 <vListInsert+0x2e>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	429a      	cmp	r2, r3
 800542c:	d2f6      	bcs.n	800541c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6892      	ldr	r2, [r2, #8]
 800547c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6852      	ldr	r2, [r2, #4]
 8005486:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	d103      	bne.n	800549a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	1e5a      	subs	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054e6:	f000 fffd 	bl	80064e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	441a      	add	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	3b01      	subs	r3, #1
 8005518:	68f9      	ldr	r1, [r7, #12]
 800551a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	22ff      	movs	r2, #255	; 0xff
 800552a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	22ff      	movs	r2, #255	; 0xff
 8005532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d114      	bne.n	8005566 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01a      	beq.n	800557a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3310      	adds	r3, #16
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fcfd 	bl	8005f48 <xTaskRemoveFromEventList>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d012      	beq.n	800557a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <xQueueGenericReset+0xcc>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	e009      	b.n	800557a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3310      	adds	r3, #16
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fef1 	bl	8005352 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3324      	adds	r3, #36	; 0x24
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff feec 	bl	8005352 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800557a:	f000 ffe3 	bl	8006544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800557e:	2301      	movs	r3, #1
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08e      	sub	sp, #56	; 0x38
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <xQueueGenericCreateStatic+0x52>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <xQueueGenericCreateStatic+0x56>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <xQueueGenericCreateStatic+0x58>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	623b      	str	r3, [r7, #32]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <xQueueGenericCreateStatic+0x7e>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <xQueueGenericCreateStatic+0x82>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <xQueueGenericCreateStatic+0x84>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	61fb      	str	r3, [r7, #28]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800562a:	2348      	movs	r3, #72	; 0x48
 800562c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b48      	cmp	r3, #72	; 0x48
 8005632:	d00a      	beq.n	800564a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	61bb      	str	r3, [r7, #24]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800564a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00d      	beq.n	8005672 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800565e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f83f 	bl	80056f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005674:	4618      	mov	r0, r3
 8005676:	3730      	adds	r7, #48	; 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	613b      	str	r3, [r7, #16]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	3348      	adds	r3, #72	; 0x48
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fff7 	bl	80066a8 <pvPortMalloc>
 80056ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d011      	beq.n	80056e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	3348      	adds	r3, #72	; 0x48
 80056ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056d4:	79fa      	ldrb	r2, [r7, #7]
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f805 	bl	80056f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056e6:	69bb      	ldr	r3, [r7, #24]
	}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d103      	bne.n	800570c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e002      	b.n	8005712 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800571e:	2101      	movs	r1, #1
 8005720:	69b8      	ldr	r0, [r7, #24]
 8005722:	f7ff fecb 	bl	80054bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08e      	sub	sp, #56	; 0x38
 8005732:	af04      	add	r7, sp, #16
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	607a      	str	r2, [r7, #4]
 800573a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	623b      	str	r3, [r7, #32]
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <xTaskCreateStatic+0x46>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	61fb      	str	r3, [r7, #28]
}
 8005770:	bf00      	nop
 8005772:	e7fe      	b.n	8005772 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005774:	23b4      	movs	r3, #180	; 0xb4
 8005776:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2bb4      	cmp	r3, #180	; 0xb4
 800577c:	d00a      	beq.n	8005794 <xTaskCreateStatic+0x66>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	61bb      	str	r3, [r7, #24]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005794:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01e      	beq.n	80057da <xTaskCreateStatic+0xac>
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01b      	beq.n	80057da <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057b4:	2300      	movs	r3, #0
 80057b6:	9303      	str	r3, [sp, #12]
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	9302      	str	r3, [sp, #8]
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f851 	bl	8005874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057d4:	f000 f8ec 	bl	80059b0 <prvAddNewTaskToReadyList>
 80057d8:	e001      	b.n	80057de <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057de:	697b      	ldr	r3, [r7, #20]
	}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3728      	adds	r7, #40	; 0x28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	; 0x30
 80057ec:	af04      	add	r7, sp, #16
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 ff53 	bl	80066a8 <pvPortMalloc>
 8005802:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00e      	beq.n	8005828 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800580a:	20b4      	movs	r0, #180	; 0xb4
 800580c:	f000 ff4c 	bl	80066a8 <pvPortMalloc>
 8005810:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	631a      	str	r2, [r3, #48]	; 0x30
 800581e:	e005      	b.n	800582c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005820:	6978      	ldr	r0, [r7, #20]
 8005822:	f001 f80d 	bl	8006840 <vPortFree>
 8005826:	e001      	b.n	800582c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d017      	beq.n	8005862 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	2300      	movs	r3, #0
 800583e:	9303      	str	r3, [sp, #12]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	9302      	str	r3, [sp, #8]
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f80f 	bl	8005874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005856:	69f8      	ldr	r0, [r7, #28]
 8005858:	f000 f8aa 	bl	80059b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800585c:	2301      	movs	r3, #1
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	e002      	b.n	8005868 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295
 8005866:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005868:	69bb      	ldr	r3, [r7, #24]
	}
 800586a:	4618      	mov	r0, r3
 800586c:	3720      	adds	r7, #32
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800588c:	3b01      	subs	r3, #1
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f023 0307 	bic.w	r3, r3, #7
 800589a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	617b      	str	r3, [r7, #20]
}
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01f      	beq.n	8005902 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	e012      	b.n	80058ee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	7819      	ldrb	r1, [r3, #0]
 80058d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	3334      	adds	r3, #52	; 0x34
 80058d8:	460a      	mov	r2, r1
 80058da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d006      	beq.n	80058f6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	3301      	adds	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	2b0f      	cmp	r3, #15
 80058f2:	d9e9      	bls.n	80058c8 <prvInitialiseNewTask+0x54>
 80058f4:	e000      	b.n	80058f8 <prvInitialiseNewTask+0x84>
			{
				break;
 80058f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005900:	e003      	b.n	800590a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	2b06      	cmp	r3, #6
 800590e:	d901      	bls.n	8005914 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005910:	2306      	movs	r3, #6
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005918:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800591e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	2200      	movs	r2, #0
 8005924:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	3304      	adds	r3, #4
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fd31 	bl	8005392 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	3318      	adds	r3, #24
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fd2c 	bl	8005392 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	f1c3 0207 	rsb	r2, r3, #7
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	2200      	movs	r2, #0
 800595c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	334c      	adds	r3, #76	; 0x4c
 8005964:	2260      	movs	r2, #96	; 0x60
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f9b8 	bl	8006cde <memset>
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	4a0c      	ldr	r2, [pc, #48]	; (80059a4 <prvInitialiseNewTask+0x130>)
 8005972:	651a      	str	r2, [r3, #80]	; 0x50
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	4a0c      	ldr	r2, [pc, #48]	; (80059a8 <prvInitialiseNewTask+0x134>)
 8005978:	655a      	str	r2, [r3, #84]	; 0x54
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	4a0b      	ldr	r2, [pc, #44]	; (80059ac <prvInitialiseNewTask+0x138>)
 800597e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	69b8      	ldr	r0, [r7, #24]
 8005986:	f000 fc81 	bl	800628c <pxPortInitialiseStack>
 800598a:	4602      	mov	r2, r0
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800599c:	bf00      	nop
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	0800a164 	.word	0x0800a164
 80059a8:	0800a184 	.word	0x0800a184
 80059ac:	0800a144 	.word	0x0800a144

080059b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059b8:	f000 fd94 	bl	80064e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059bc:	4b2a      	ldr	r3, [pc, #168]	; (8005a68 <prvAddNewTaskToReadyList+0xb8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	4a29      	ldr	r2, [pc, #164]	; (8005a68 <prvAddNewTaskToReadyList+0xb8>)
 80059c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059c6:	4b29      	ldr	r3, [pc, #164]	; (8005a6c <prvAddNewTaskToReadyList+0xbc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059ce:	4a27      	ldr	r2, [pc, #156]	; (8005a6c <prvAddNewTaskToReadyList+0xbc>)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059d4:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <prvAddNewTaskToReadyList+0xb8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d110      	bne.n	80059fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059dc:	f000 fb2e 	bl	800603c <prvInitialiseTaskLists>
 80059e0:	e00d      	b.n	80059fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059e2:	4b23      	ldr	r3, [pc, #140]	; (8005a70 <prvAddNewTaskToReadyList+0xc0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d109      	bne.n	80059fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059ea:	4b20      	ldr	r3, [pc, #128]	; (8005a6c <prvAddNewTaskToReadyList+0xbc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d802      	bhi.n	80059fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059f8:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <prvAddNewTaskToReadyList+0xbc>)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059fe:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <prvAddNewTaskToReadyList+0xc4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <prvAddNewTaskToReadyList+0xc4>)
 8005a06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	409a      	lsls	r2, r3
 8005a10:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <prvAddNewTaskToReadyList+0xc8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <prvAddNewTaskToReadyList+0xc8>)
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <prvAddNewTaskToReadyList+0xcc>)
 8005a28:	441a      	add	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f7ff fcbb 	bl	80053ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a36:	f000 fd85 	bl	8006544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <prvAddNewTaskToReadyList+0xc0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00e      	beq.n	8005a60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a42:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <prvAddNewTaskToReadyList+0xbc>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d207      	bcs.n	8005a60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <prvAddNewTaskToReadyList+0xd0>)
 8005a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20001088 	.word	0x20001088
 8005a6c:	20000f88 	.word	0x20000f88
 8005a70:	20001094 	.word	0x20001094
 8005a74:	200010a4 	.word	0x200010a4
 8005a78:	20001090 	.word	0x20001090
 8005a7c:	20000f8c 	.word	0x20000f8c
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d017      	beq.n	8005ac6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a96:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <vTaskDelay+0x60>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <vTaskDelay+0x30>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	60bb      	str	r3, [r7, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ab4:	f000 f884 	bl	8005bc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ab8:	2100      	movs	r1, #0
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fb80 	bl	80061c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ac0:	f000 f88c 	bl	8005bdc <xTaskResumeAll>
 8005ac4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d107      	bne.n	8005adc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <vTaskDelay+0x64>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	200010b0 	.word	0x200010b0
 8005ae8:	e000ed04 	.word	0xe000ed04

08005aec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	; 0x28
 8005af0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005afa:	463a      	mov	r2, r7
 8005afc:	1d39      	adds	r1, r7, #4
 8005afe:	f107 0308 	add.w	r3, r7, #8
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fb f9da 	bl	8000ebc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	9202      	str	r2, [sp, #8]
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	2300      	movs	r3, #0
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	2300      	movs	r3, #0
 8005b18:	460a      	mov	r2, r1
 8005b1a:	4921      	ldr	r1, [pc, #132]	; (8005ba0 <vTaskStartScheduler+0xb4>)
 8005b1c:	4821      	ldr	r0, [pc, #132]	; (8005ba4 <vTaskStartScheduler+0xb8>)
 8005b1e:	f7ff fe06 	bl	800572e <xTaskCreateStatic>
 8005b22:	4603      	mov	r3, r0
 8005b24:	4a20      	ldr	r2, [pc, #128]	; (8005ba8 <vTaskStartScheduler+0xbc>)
 8005b26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b28:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <vTaskStartScheduler+0xbc>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b30:	2301      	movs	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e001      	b.n	8005b3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d11b      	bne.n	8005b78 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	613b      	str	r3, [r7, #16]
}
 8005b52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b54:	4b15      	ldr	r3, [pc, #84]	; (8005bac <vTaskStartScheduler+0xc0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	334c      	adds	r3, #76	; 0x4c
 8005b5a:	4a15      	ldr	r2, [pc, #84]	; (8005bb0 <vTaskStartScheduler+0xc4>)
 8005b5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b5e:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <vTaskStartScheduler+0xc8>)
 8005b60:	f04f 32ff 	mov.w	r2, #4294967295
 8005b64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <vTaskStartScheduler+0xcc>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <vTaskStartScheduler+0xd0>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b72:	f000 fc15 	bl	80063a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b76:	e00e      	b.n	8005b96 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d10a      	bne.n	8005b96 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	60fb      	str	r3, [r7, #12]
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <vTaskStartScheduler+0xa8>
}
 8005b96:	bf00      	nop
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	0800a124 	.word	0x0800a124
 8005ba4:	0800600d 	.word	0x0800600d
 8005ba8:	200010ac 	.word	0x200010ac
 8005bac:	20000f88 	.word	0x20000f88
 8005bb0:	20000020 	.word	0x20000020
 8005bb4:	200010a8 	.word	0x200010a8
 8005bb8:	20001094 	.word	0x20001094
 8005bbc:	2000108c 	.word	0x2000108c

08005bc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bc4:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <vTaskSuspendAll+0x18>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	4a03      	ldr	r2, [pc, #12]	; (8005bd8 <vTaskSuspendAll+0x18>)
 8005bcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bce:	bf00      	nop
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	200010b0 	.word	0x200010b0

08005bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bea:	4b41      	ldr	r3, [pc, #260]	; (8005cf0 <xTaskResumeAll+0x114>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <xTaskResumeAll+0x2c>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	603b      	str	r3, [r7, #0]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c08:	f000 fc6c 	bl	80064e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c0c:	4b38      	ldr	r3, [pc, #224]	; (8005cf0 <xTaskResumeAll+0x114>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	4a37      	ldr	r2, [pc, #220]	; (8005cf0 <xTaskResumeAll+0x114>)
 8005c14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c16:	4b36      	ldr	r3, [pc, #216]	; (8005cf0 <xTaskResumeAll+0x114>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d161      	bne.n	8005ce2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c1e:	4b35      	ldr	r3, [pc, #212]	; (8005cf4 <xTaskResumeAll+0x118>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d05d      	beq.n	8005ce2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c26:	e02e      	b.n	8005c86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c28:	4b33      	ldr	r3, [pc, #204]	; (8005cf8 <xTaskResumeAll+0x11c>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3318      	adds	r3, #24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff fc16 	bl	8005466 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff fc11 	bl	8005466 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	2201      	movs	r2, #1
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <xTaskResumeAll+0x120>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	4a2a      	ldr	r2, [pc, #168]	; (8005cfc <xTaskResumeAll+0x120>)
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <xTaskResumeAll+0x124>)
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f7ff fb9d 	bl	80053ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c76:	4b23      	ldr	r3, [pc, #140]	; (8005d04 <xTaskResumeAll+0x128>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d302      	bcc.n	8005c86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c80:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <xTaskResumeAll+0x12c>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c86:	4b1c      	ldr	r3, [pc, #112]	; (8005cf8 <xTaskResumeAll+0x11c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1cc      	bne.n	8005c28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c94:	f000 fa74 	bl	8006180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c98:	4b1c      	ldr	r3, [pc, #112]	; (8005d0c <xTaskResumeAll+0x130>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d010      	beq.n	8005cc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ca4:	f000 f836 	bl	8005d14 <xTaskIncrementTick>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005cae:	4b16      	ldr	r3, [pc, #88]	; (8005d08 <xTaskResumeAll+0x12c>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f1      	bne.n	8005ca4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005cc0:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <xTaskResumeAll+0x130>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <xTaskResumeAll+0x12c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <xTaskResumeAll+0x134>)
 8005cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ce2:	f000 fc2f 	bl	8006544 <vPortExitCritical>

	return xAlreadyYielded;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	200010b0 	.word	0x200010b0
 8005cf4:	20001088 	.word	0x20001088
 8005cf8:	20001048 	.word	0x20001048
 8005cfc:	20001090 	.word	0x20001090
 8005d00:	20000f8c 	.word	0x20000f8c
 8005d04:	20000f88 	.word	0x20000f88
 8005d08:	2000109c 	.word	0x2000109c
 8005d0c:	20001098 	.word	0x20001098
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d1e:	4b4e      	ldr	r3, [pc, #312]	; (8005e58 <xTaskIncrementTick+0x144>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f040 808e 	bne.w	8005e44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d28:	4b4c      	ldr	r3, [pc, #304]	; (8005e5c <xTaskIncrementTick+0x148>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d30:	4a4a      	ldr	r2, [pc, #296]	; (8005e5c <xTaskIncrementTick+0x148>)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d120      	bne.n	8005d7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d3c:	4b48      	ldr	r3, [pc, #288]	; (8005e60 <xTaskIncrementTick+0x14c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <xTaskIncrementTick+0x48>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	603b      	str	r3, [r7, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <xTaskIncrementTick+0x46>
 8005d5c:	4b40      	ldr	r3, [pc, #256]	; (8005e60 <xTaskIncrementTick+0x14c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	4b40      	ldr	r3, [pc, #256]	; (8005e64 <xTaskIncrementTick+0x150>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3e      	ldr	r2, [pc, #248]	; (8005e60 <xTaskIncrementTick+0x14c>)
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	4a3e      	ldr	r2, [pc, #248]	; (8005e64 <xTaskIncrementTick+0x150>)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	4b3d      	ldr	r3, [pc, #244]	; (8005e68 <xTaskIncrementTick+0x154>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	4a3c      	ldr	r2, [pc, #240]	; (8005e68 <xTaskIncrementTick+0x154>)
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	f000 fa01 	bl	8006180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d7e:	4b3b      	ldr	r3, [pc, #236]	; (8005e6c <xTaskIncrementTick+0x158>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d348      	bcc.n	8005e1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d88:	4b35      	ldr	r3, [pc, #212]	; (8005e60 <xTaskIncrementTick+0x14c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d92:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <xTaskIncrementTick+0x158>)
 8005d94:	f04f 32ff 	mov.w	r2, #4294967295
 8005d98:	601a      	str	r2, [r3, #0]
					break;
 8005d9a:	e03e      	b.n	8005e1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9c:	4b30      	ldr	r3, [pc, #192]	; (8005e60 <xTaskIncrementTick+0x14c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d203      	bcs.n	8005dbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005db4:	4a2d      	ldr	r2, [pc, #180]	; (8005e6c <xTaskIncrementTick+0x158>)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dba:	e02e      	b.n	8005e1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fb50 	bl	8005466 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	3318      	adds	r3, #24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff fb47 	bl	8005466 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	2201      	movs	r2, #1
 8005dde:	409a      	lsls	r2, r3
 8005de0:	4b23      	ldr	r3, [pc, #140]	; (8005e70 <xTaskIncrementTick+0x15c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <xTaskIncrementTick+0x15c>)
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4a1f      	ldr	r2, [pc, #124]	; (8005e74 <xTaskIncrementTick+0x160>)
 8005df8:	441a      	add	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f7ff fad3 	bl	80053ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <xTaskIncrementTick+0x164>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d3b9      	bcc.n	8005d88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e18:	e7b6      	b.n	8005d88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e1a:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <xTaskIncrementTick+0x164>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	4914      	ldr	r1, [pc, #80]	; (8005e74 <xTaskIncrementTick+0x160>)
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d901      	bls.n	8005e36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005e32:	2301      	movs	r3, #1
 8005e34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <xTaskIncrementTick+0x168>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e004      	b.n	8005e4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e44:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <xTaskIncrementTick+0x16c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	4a0d      	ldr	r2, [pc, #52]	; (8005e80 <xTaskIncrementTick+0x16c>)
 8005e4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e4e:	697b      	ldr	r3, [r7, #20]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	200010b0 	.word	0x200010b0
 8005e5c:	2000108c 	.word	0x2000108c
 8005e60:	20001040 	.word	0x20001040
 8005e64:	20001044 	.word	0x20001044
 8005e68:	200010a0 	.word	0x200010a0
 8005e6c:	200010a8 	.word	0x200010a8
 8005e70:	20001090 	.word	0x20001090
 8005e74:	20000f8c 	.word	0x20000f8c
 8005e78:	20000f88 	.word	0x20000f88
 8005e7c:	2000109c 	.word	0x2000109c
 8005e80:	20001098 	.word	0x20001098

08005e84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e8a:	4b29      	ldr	r3, [pc, #164]	; (8005f30 <vTaskSwitchContext+0xac>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e92:	4b28      	ldr	r3, [pc, #160]	; (8005f34 <vTaskSwitchContext+0xb0>)
 8005e94:	2201      	movs	r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e98:	e044      	b.n	8005f24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005e9a:	4b26      	ldr	r3, [pc, #152]	; (8005f34 <vTaskSwitchContext+0xb0>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <vTaskSwitchContext+0xb4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	fab3 f383 	clz	r3, r3
 8005eac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005eae:	7afb      	ldrb	r3, [r7, #11]
 8005eb0:	f1c3 031f 	rsb	r3, r3, #31
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	4921      	ldr	r1, [pc, #132]	; (8005f3c <vTaskSwitchContext+0xb8>)
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	607b      	str	r3, [r7, #4]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <vTaskSwitchContext+0x5a>
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <vTaskSwitchContext+0xb8>)
 8005eec:	4413      	add	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	3308      	adds	r3, #8
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d104      	bne.n	8005f10 <vTaskSwitchContext+0x8c>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	605a      	str	r2, [r3, #4]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	4a0a      	ldr	r2, [pc, #40]	; (8005f40 <vTaskSwitchContext+0xbc>)
 8005f18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <vTaskSwitchContext+0xbc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	334c      	adds	r3, #76	; 0x4c
 8005f20:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <vTaskSwitchContext+0xc0>)
 8005f22:	6013      	str	r3, [r2, #0]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	200010b0 	.word	0x200010b0
 8005f34:	2000109c 	.word	0x2000109c
 8005f38:	20001090 	.word	0x20001090
 8005f3c:	20000f8c 	.word	0x20000f8c
 8005f40:	20000f88 	.word	0x20000f88
 8005f44:	20000020 	.word	0x20000020

08005f48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	60fb      	str	r3, [r7, #12]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	3318      	adds	r3, #24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fa74 	bl	8005466 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <xTaskRemoveFromEventList+0xac>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d11c      	bne.n	8005fc0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fa6b 	bl	8005466 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	2201      	movs	r2, #1
 8005f96:	409a      	lsls	r2, r3
 8005f98:	4b17      	ldr	r3, [pc, #92]	; (8005ff8 <xTaskRemoveFromEventList+0xb0>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <xTaskRemoveFromEventList+0xb0>)
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4a13      	ldr	r2, [pc, #76]	; (8005ffc <xTaskRemoveFromEventList+0xb4>)
 8005fb0:	441a      	add	r2, r3
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f7ff f9f7 	bl	80053ac <vListInsertEnd>
 8005fbe:	e005      	b.n	8005fcc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	3318      	adds	r3, #24
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	480e      	ldr	r0, [pc, #56]	; (8006000 <xTaskRemoveFromEventList+0xb8>)
 8005fc8:	f7ff f9f0 	bl	80053ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <xTaskRemoveFromEventList+0xbc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d905      	bls.n	8005fe6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fde:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <xTaskRemoveFromEventList+0xc0>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	e001      	b.n	8005fea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fea:	697b      	ldr	r3, [r7, #20]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	200010b0 	.word	0x200010b0
 8005ff8:	20001090 	.word	0x20001090
 8005ffc:	20000f8c 	.word	0x20000f8c
 8006000:	20001048 	.word	0x20001048
 8006004:	20000f88 	.word	0x20000f88
 8006008:	2000109c 	.word	0x2000109c

0800600c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006014:	f000 f852 	bl	80060bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <prvIdleTask+0x28>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d9f9      	bls.n	8006014 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <prvIdleTask+0x2c>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006030:	e7f0      	b.n	8006014 <prvIdleTask+0x8>
 8006032:	bf00      	nop
 8006034:	20000f8c 	.word	0x20000f8c
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	e00c      	b.n	8006062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4a12      	ldr	r2, [pc, #72]	; (800609c <prvInitialiseTaskLists+0x60>)
 8006054:	4413      	add	r3, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff f97b 	bl	8005352 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3301      	adds	r3, #1
 8006060:	607b      	str	r3, [r7, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b06      	cmp	r3, #6
 8006066:	d9ef      	bls.n	8006048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006068:	480d      	ldr	r0, [pc, #52]	; (80060a0 <prvInitialiseTaskLists+0x64>)
 800606a:	f7ff f972 	bl	8005352 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800606e:	480d      	ldr	r0, [pc, #52]	; (80060a4 <prvInitialiseTaskLists+0x68>)
 8006070:	f7ff f96f 	bl	8005352 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006074:	480c      	ldr	r0, [pc, #48]	; (80060a8 <prvInitialiseTaskLists+0x6c>)
 8006076:	f7ff f96c 	bl	8005352 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800607a:	480c      	ldr	r0, [pc, #48]	; (80060ac <prvInitialiseTaskLists+0x70>)
 800607c:	f7ff f969 	bl	8005352 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006080:	480b      	ldr	r0, [pc, #44]	; (80060b0 <prvInitialiseTaskLists+0x74>)
 8006082:	f7ff f966 	bl	8005352 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <prvInitialiseTaskLists+0x78>)
 8006088:	4a05      	ldr	r2, [pc, #20]	; (80060a0 <prvInitialiseTaskLists+0x64>)
 800608a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <prvInitialiseTaskLists+0x7c>)
 800608e:	4a05      	ldr	r2, [pc, #20]	; (80060a4 <prvInitialiseTaskLists+0x68>)
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000f8c 	.word	0x20000f8c
 80060a0:	20001018 	.word	0x20001018
 80060a4:	2000102c 	.word	0x2000102c
 80060a8:	20001048 	.word	0x20001048
 80060ac:	2000105c 	.word	0x2000105c
 80060b0:	20001074 	.word	0x20001074
 80060b4:	20001040 	.word	0x20001040
 80060b8:	20001044 	.word	0x20001044

080060bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060c2:	e019      	b.n	80060f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060c4:	f000 fa0e 	bl	80064e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c8:	4b10      	ldr	r3, [pc, #64]	; (800610c <prvCheckTasksWaitingTermination+0x50>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff f9c6 	bl	8005466 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <prvCheckTasksWaitingTermination+0x54>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3b01      	subs	r3, #1
 80060e0:	4a0b      	ldr	r2, [pc, #44]	; (8006110 <prvCheckTasksWaitingTermination+0x54>)
 80060e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060e4:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060ee:	f000 fa29 	bl	8006544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f810 	bl	8006118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e1      	bne.n	80060c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	2000105c 	.word	0x2000105c
 8006110:	20001088 	.word	0x20001088
 8006114:	20001070 	.word	0x20001070

08006118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	334c      	adds	r3, #76	; 0x4c
 8006124:	4618      	mov	r0, r3
 8006126:	f001 faef 	bl	8007708 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fb81 	bl	8006840 <vPortFree>
				vPortFree( pxTCB );
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fb7e 	bl	8006840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006144:	e018      	b.n	8006178 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800614c:	2b01      	cmp	r3, #1
 800614e:	d103      	bne.n	8006158 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fb75 	bl	8006840 <vPortFree>
	}
 8006156:	e00f      	b.n	8006178 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800615e:	2b02      	cmp	r3, #2
 8006160:	d00a      	beq.n	8006178 <prvDeleteTCB+0x60>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60fb      	str	r3, [r7, #12]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <prvDeleteTCB+0x5e>
	}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <prvResetNextTaskUnblockTime+0x38>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d104      	bne.n	800619a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <prvResetNextTaskUnblockTime+0x3c>)
 8006192:	f04f 32ff 	mov.w	r2, #4294967295
 8006196:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006198:	e008      	b.n	80061ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <prvResetNextTaskUnblockTime+0x38>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	4a04      	ldr	r2, [pc, #16]	; (80061bc <prvResetNextTaskUnblockTime+0x3c>)
 80061aa:	6013      	str	r3, [r2, #0]
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	20001040 	.word	0x20001040
 80061bc:	200010a8 	.word	0x200010a8

080061c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061ca:	4b29      	ldr	r3, [pc, #164]	; (8006270 <prvAddCurrentTaskToDelayedList+0xb0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d0:	4b28      	ldr	r3, [pc, #160]	; (8006274 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff f945 	bl	8005466 <uxListRemove>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10b      	bne.n	80061fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061e2:	4b24      	ldr	r3, [pc, #144]	; (8006274 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	2201      	movs	r2, #1
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	43da      	mvns	r2, r3
 80061f0:	4b21      	ldr	r3, [pc, #132]	; (8006278 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4013      	ands	r3, r2
 80061f6:	4a20      	ldr	r2, [pc, #128]	; (8006278 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d10a      	bne.n	8006218 <prvAddCurrentTaskToDelayedList+0x58>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006208:	4b1a      	ldr	r3, [pc, #104]	; (8006274 <prvAddCurrentTaskToDelayedList+0xb4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3304      	adds	r3, #4
 800620e:	4619      	mov	r1, r3
 8006210:	481a      	ldr	r0, [pc, #104]	; (800627c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006212:	f7ff f8cb 	bl	80053ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006216:	e026      	b.n	8006266 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4413      	add	r3, r2
 800621e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006220:	4b14      	ldr	r3, [pc, #80]	; (8006274 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	429a      	cmp	r2, r3
 800622e:	d209      	bcs.n	8006244 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006230:	4b13      	ldr	r3, [pc, #76]	; (8006280 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f7ff f8d9 	bl	80053f4 <vListInsert>
}
 8006242:	e010      	b.n	8006266 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006244:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <prvAddCurrentTaskToDelayedList+0xb4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3304      	adds	r3, #4
 800624e:	4619      	mov	r1, r3
 8006250:	4610      	mov	r0, r2
 8006252:	f7ff f8cf 	bl	80053f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006256:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	429a      	cmp	r2, r3
 800625e:	d202      	bcs.n	8006266 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006260:	4a09      	ldr	r2, [pc, #36]	; (8006288 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6013      	str	r3, [r2, #0]
}
 8006266:	bf00      	nop
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	2000108c 	.word	0x2000108c
 8006274:	20000f88 	.word	0x20000f88
 8006278:	20001090 	.word	0x20001090
 800627c:	20001074 	.word	0x20001074
 8006280:	20001044 	.word	0x20001044
 8006284:	20001040 	.word	0x20001040
 8006288:	200010a8 	.word	0x200010a8

0800628c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3b04      	subs	r3, #4
 800629c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3b04      	subs	r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f023 0201 	bic.w	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3b04      	subs	r3, #4
 80062ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062bc:	4a0c      	ldr	r2, [pc, #48]	; (80062f0 <pxPortInitialiseStack+0x64>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b14      	subs	r3, #20
 80062c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3b04      	subs	r3, #4
 80062d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f06f 0202 	mvn.w	r2, #2
 80062da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3b20      	subs	r3, #32
 80062e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062e2:	68fb      	ldr	r3, [r7, #12]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	080062f5 	.word	0x080062f5

080062f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062fe:	4b12      	ldr	r3, [pc, #72]	; (8006348 <prvTaskExitError+0x54>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006306:	d00a      	beq.n	800631e <prvTaskExitError+0x2a>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	60fb      	str	r3, [r7, #12]
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <prvTaskExitError+0x28>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60bb      	str	r3, [r7, #8]
}
 8006330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006332:	bf00      	nop
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0fc      	beq.n	8006334 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	2000001c 	.word	0x2000001c
 800634c:	00000000 	.word	0x00000000

08006350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006350:	4b07      	ldr	r3, [pc, #28]	; (8006370 <pxCurrentTCBConst2>)
 8006352:	6819      	ldr	r1, [r3, #0]
 8006354:	6808      	ldr	r0, [r1, #0]
 8006356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635a:	f380 8809 	msr	PSP, r0
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f04f 0000 	mov.w	r0, #0
 8006366:	f380 8811 	msr	BASEPRI, r0
 800636a:	4770      	bx	lr
 800636c:	f3af 8000 	nop.w

08006370 <pxCurrentTCBConst2>:
 8006370:	20000f88 	.word	0x20000f88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop

08006378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006378:	4808      	ldr	r0, [pc, #32]	; (800639c <prvPortStartFirstTask+0x24>)
 800637a:	6800      	ldr	r0, [r0, #0]
 800637c:	6800      	ldr	r0, [r0, #0]
 800637e:	f380 8808 	msr	MSP, r0
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8814 	msr	CONTROL, r0
 800638a:	b662      	cpsie	i
 800638c:	b661      	cpsie	f
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	df00      	svc	0
 8006398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800639a:	bf00      	nop
 800639c:	e000ed08 	.word	0xe000ed08

080063a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063a6:	4b46      	ldr	r3, [pc, #280]	; (80064c0 <xPortStartScheduler+0x120>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a46      	ldr	r2, [pc, #280]	; (80064c4 <xPortStartScheduler+0x124>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d10a      	bne.n	80063c6 <xPortStartScheduler+0x26>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063c6:	4b3e      	ldr	r3, [pc, #248]	; (80064c0 <xPortStartScheduler+0x120>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a3f      	ldr	r2, [pc, #252]	; (80064c8 <xPortStartScheduler+0x128>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d10a      	bne.n	80063e6 <xPortStartScheduler+0x46>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063e6:	4b39      	ldr	r3, [pc, #228]	; (80064cc <xPortStartScheduler+0x12c>)
 80063e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	22ff      	movs	r2, #255	; 0xff
 80063f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006408:	b2da      	uxtb	r2, r3
 800640a:	4b31      	ldr	r3, [pc, #196]	; (80064d0 <xPortStartScheduler+0x130>)
 800640c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800640e:	4b31      	ldr	r3, [pc, #196]	; (80064d4 <xPortStartScheduler+0x134>)
 8006410:	2207      	movs	r2, #7
 8006412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006414:	e009      	b.n	800642a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006416:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <xPortStartScheduler+0x134>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3b01      	subs	r3, #1
 800641c:	4a2d      	ldr	r2, [pc, #180]	; (80064d4 <xPortStartScheduler+0x134>)
 800641e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	b2db      	uxtb	r3, r3
 8006428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006432:	2b80      	cmp	r3, #128	; 0x80
 8006434:	d0ef      	beq.n	8006416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006436:	4b27      	ldr	r3, [pc, #156]	; (80064d4 <xPortStartScheduler+0x134>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f1c3 0307 	rsb	r3, r3, #7
 800643e:	2b04      	cmp	r3, #4
 8006440:	d00a      	beq.n	8006458 <xPortStartScheduler+0xb8>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60bb      	str	r3, [r7, #8]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006458:	4b1e      	ldr	r3, [pc, #120]	; (80064d4 <xPortStartScheduler+0x134>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <xPortStartScheduler+0x134>)
 8006460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006462:	4b1c      	ldr	r3, [pc, #112]	; (80064d4 <xPortStartScheduler+0x134>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800646a:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <xPortStartScheduler+0x134>)
 800646c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	b2da      	uxtb	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006476:	4b18      	ldr	r3, [pc, #96]	; (80064d8 <xPortStartScheduler+0x138>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a17      	ldr	r2, [pc, #92]	; (80064d8 <xPortStartScheduler+0x138>)
 800647c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006482:	4b15      	ldr	r3, [pc, #84]	; (80064d8 <xPortStartScheduler+0x138>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a14      	ldr	r2, [pc, #80]	; (80064d8 <xPortStartScheduler+0x138>)
 8006488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800648c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800648e:	f000 f8dd 	bl	800664c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <xPortStartScheduler+0x13c>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006498:	f000 f8fc 	bl	8006694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <xPortStartScheduler+0x140>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0f      	ldr	r2, [pc, #60]	; (80064e0 <xPortStartScheduler+0x140>)
 80064a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064a8:	f7ff ff66 	bl	8006378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064ac:	f7ff fcea 	bl	8005e84 <vTaskSwitchContext>
	prvTaskExitError();
 80064b0:	f7ff ff20 	bl	80062f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	e000ed00 	.word	0xe000ed00
 80064c4:	410fc271 	.word	0x410fc271
 80064c8:	410fc270 	.word	0x410fc270
 80064cc:	e000e400 	.word	0xe000e400
 80064d0:	200010b4 	.word	0x200010b4
 80064d4:	200010b8 	.word	0x200010b8
 80064d8:	e000ed20 	.word	0xe000ed20
 80064dc:	2000001c 	.word	0x2000001c
 80064e0:	e000ef34 	.word	0xe000ef34

080064e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	607b      	str	r3, [r7, #4]
}
 80064fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064fe:	4b0f      	ldr	r3, [pc, #60]	; (800653c <vPortEnterCritical+0x58>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3301      	adds	r3, #1
 8006504:	4a0d      	ldr	r2, [pc, #52]	; (800653c <vPortEnterCritical+0x58>)
 8006506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <vPortEnterCritical+0x58>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d10f      	bne.n	8006530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <vPortEnterCritical+0x5c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <vPortEnterCritical+0x4c>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	603b      	str	r3, [r7, #0]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <vPortEnterCritical+0x4a>
	}
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	2000001c 	.word	0x2000001c
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <vPortExitCritical+0x50>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <vPortExitCritical+0x24>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	607b      	str	r3, [r7, #4]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <vPortExitCritical+0x50>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3b01      	subs	r3, #1
 800656e:	4a09      	ldr	r2, [pc, #36]	; (8006594 <vPortExitCritical+0x50>)
 8006570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006572:	4b08      	ldr	r3, [pc, #32]	; (8006594 <vPortExitCritical+0x50>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d105      	bne.n	8006586 <vPortExitCritical+0x42>
 800657a:	2300      	movs	r3, #0
 800657c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	2000001c 	.word	0x2000001c
	...

080065a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065a0:	f3ef 8009 	mrs	r0, PSP
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4b15      	ldr	r3, [pc, #84]	; (8006600 <pxCurrentTCBConst>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	f01e 0f10 	tst.w	lr, #16
 80065b0:	bf08      	it	eq
 80065b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	6010      	str	r0, [r2, #0]
 80065bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065c4:	f380 8811 	msr	BASEPRI, r0
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f7ff fc58 	bl	8005e84 <vTaskSwitchContext>
 80065d4:	f04f 0000 	mov.w	r0, #0
 80065d8:	f380 8811 	msr	BASEPRI, r0
 80065dc:	bc09      	pop	{r0, r3}
 80065de:	6819      	ldr	r1, [r3, #0]
 80065e0:	6808      	ldr	r0, [r1, #0]
 80065e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e6:	f01e 0f10 	tst.w	lr, #16
 80065ea:	bf08      	it	eq
 80065ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065f0:	f380 8809 	msr	PSP, r0
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	f3af 8000 	nop.w

08006600 <pxCurrentTCBConst>:
 8006600:	20000f88 	.word	0x20000f88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop

08006608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	607b      	str	r3, [r7, #4]
}
 8006620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006622:	f7ff fb77 	bl	8005d14 <xTaskIncrementTick>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <SysTick_Handler+0x40>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	2300      	movs	r3, #0
 8006636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f383 8811 	msr	BASEPRI, r3
}
 800663e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <vPortSetupTimerInterrupt+0x34>)
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006656:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <vPortSetupTimerInterrupt+0x38>)
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800665c:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <vPortSetupTimerInterrupt+0x3c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a0a      	ldr	r2, [pc, #40]	; (800668c <vPortSetupTimerInterrupt+0x40>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	099b      	lsrs	r3, r3, #6
 8006668:	4a09      	ldr	r2, [pc, #36]	; (8006690 <vPortSetupTimerInterrupt+0x44>)
 800666a:	3b01      	subs	r3, #1
 800666c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800666e:	4b04      	ldr	r3, [pc, #16]	; (8006680 <vPortSetupTimerInterrupt+0x34>)
 8006670:	2207      	movs	r2, #7
 8006672:	601a      	str	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	e000e010 	.word	0xe000e010
 8006684:	e000e018 	.word	0xe000e018
 8006688:	20000004 	.word	0x20000004
 800668c:	10624dd3 	.word	0x10624dd3
 8006690:	e000e014 	.word	0xe000e014

08006694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066a4 <vPortEnableVFP+0x10>
 8006698:	6801      	ldr	r1, [r0, #0]
 800669a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800669e:	6001      	str	r1, [r0, #0]
 80066a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066a2:	bf00      	nop
 80066a4:	e000ed88 	.word	0xe000ed88

080066a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	; 0x28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066b4:	f7ff fa84 	bl	8005bc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066b8:	4b5b      	ldr	r3, [pc, #364]	; (8006828 <pvPortMalloc+0x180>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066c0:	f000 f920 	bl	8006904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066c4:	4b59      	ldr	r3, [pc, #356]	; (800682c <pvPortMalloc+0x184>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f040 8093 	bne.w	80067f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01d      	beq.n	8006714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066d8:	2208      	movs	r2, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4413      	add	r3, r2
 80066de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d014      	beq.n	8006714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f023 0307 	bic.w	r3, r3, #7
 80066f0:	3308      	adds	r3, #8
 80066f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <pvPortMalloc+0x6c>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	617b      	str	r3, [r7, #20]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d06e      	beq.n	80067f8 <pvPortMalloc+0x150>
 800671a:	4b45      	ldr	r3, [pc, #276]	; (8006830 <pvPortMalloc+0x188>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d869      	bhi.n	80067f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006724:	4b43      	ldr	r3, [pc, #268]	; (8006834 <pvPortMalloc+0x18c>)
 8006726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006728:	4b42      	ldr	r3, [pc, #264]	; (8006834 <pvPortMalloc+0x18c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800672e:	e004      	b.n	800673a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d903      	bls.n	800674c <pvPortMalloc+0xa4>
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f1      	bne.n	8006730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800674c:	4b36      	ldr	r3, [pc, #216]	; (8006828 <pvPortMalloc+0x180>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	429a      	cmp	r2, r3
 8006754:	d050      	beq.n	80067f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2208      	movs	r2, #8
 800675c:	4413      	add	r3, r2
 800675e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	2308      	movs	r3, #8
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	429a      	cmp	r2, r3
 8006776:	d91f      	bls.n	80067b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <pvPortMalloc+0xf8>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	613b      	str	r3, [r7, #16]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067b2:	69b8      	ldr	r0, [r7, #24]
 80067b4:	f000 f908 	bl	80069c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067b8:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <pvPortMalloc+0x188>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <pvPortMalloc+0x188>)
 80067c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <pvPortMalloc+0x188>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <pvPortMalloc+0x190>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d203      	bcs.n	80067da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067d2:	4b17      	ldr	r3, [pc, #92]	; (8006830 <pvPortMalloc+0x188>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <pvPortMalloc+0x190>)
 80067d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <pvPortMalloc+0x184>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067ee:	4b13      	ldr	r3, [pc, #76]	; (800683c <pvPortMalloc+0x194>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	4a11      	ldr	r2, [pc, #68]	; (800683c <pvPortMalloc+0x194>)
 80067f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067f8:	f7ff f9f0 	bl	8005bdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <pvPortMalloc+0x174>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	60fb      	str	r3, [r7, #12]
}
 8006818:	bf00      	nop
 800681a:	e7fe      	b.n	800681a <pvPortMalloc+0x172>
	return pvReturn;
 800681c:	69fb      	ldr	r3, [r7, #28]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3728      	adds	r7, #40	; 0x28
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20004cc4 	.word	0x20004cc4
 800682c:	20004cd8 	.word	0x20004cd8
 8006830:	20004cc8 	.word	0x20004cc8
 8006834:	20004cbc 	.word	0x20004cbc
 8006838:	20004ccc 	.word	0x20004ccc
 800683c:	20004cd0 	.word	0x20004cd0

08006840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d04d      	beq.n	80068ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006852:	2308      	movs	r3, #8
 8006854:	425b      	negs	r3, r3
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4413      	add	r3, r2
 800685a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <vPortFree+0xb8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4013      	ands	r3, r2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10a      	bne.n	8006884 <vPortFree+0x44>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	60fb      	str	r3, [r7, #12]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <vPortFree+0x62>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60bb      	str	r3, [r7, #8]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <vPortFree+0xb8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01e      	beq.n	80068ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11a      	bne.n	80068ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <vPortFree+0xb8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	401a      	ands	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068c8:	f7ff f97a 	bl	8005bc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <vPortFree+0xbc>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4413      	add	r3, r2
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <vPortFree+0xbc>)
 80068d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068da:	6938      	ldr	r0, [r7, #16]
 80068dc:	f000 f874 	bl	80069c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <vPortFree+0xc0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	4a06      	ldr	r2, [pc, #24]	; (8006900 <vPortFree+0xc0>)
 80068e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ea:	f7ff f977 	bl	8005bdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068ee:	bf00      	nop
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20004cd8 	.word	0x20004cd8
 80068fc:	20004cc8 	.word	0x20004cc8
 8006900:	20004cd4 	.word	0x20004cd4

08006904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800690a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800690e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006910:	4b27      	ldr	r3, [pc, #156]	; (80069b0 <prvHeapInit+0xac>)
 8006912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00c      	beq.n	8006938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3307      	adds	r3, #7
 8006922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	4a1f      	ldr	r2, [pc, #124]	; (80069b0 <prvHeapInit+0xac>)
 8006934:	4413      	add	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800693c:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <prvHeapInit+0xb0>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006942:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <prvHeapInit+0xb0>)
 8006944:	2200      	movs	r2, #0
 8006946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4413      	add	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006950:	2208      	movs	r2, #8
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0307 	bic.w	r3, r3, #7
 800695e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <prvHeapInit+0xb4>)
 8006964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <prvHeapInit+0xb4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2200      	movs	r2, #0
 800696c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800696e:	4b12      	ldr	r3, [pc, #72]	; (80069b8 <prvHeapInit+0xb4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <prvHeapInit+0xb4>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <prvHeapInit+0xb8>)
 8006992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <prvHeapInit+0xbc>)
 800699a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <prvHeapInit+0xc0>)
 800699e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069a2:	601a      	str	r2, [r3, #0]
}
 80069a4:	bf00      	nop
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	200010bc 	.word	0x200010bc
 80069b4:	20004cbc 	.word	0x20004cbc
 80069b8:	20004cc4 	.word	0x20004cc4
 80069bc:	20004ccc 	.word	0x20004ccc
 80069c0:	20004cc8 	.word	0x20004cc8
 80069c4:	20004cd8 	.word	0x20004cd8

080069c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069d0:	4b28      	ldr	r3, [pc, #160]	; (8006a74 <prvInsertBlockIntoFreeList+0xac>)
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e002      	b.n	80069dc <prvInsertBlockIntoFreeList+0x14>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d8f7      	bhi.n	80069d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d108      	bne.n	8006a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	441a      	add	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	441a      	add	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d118      	bne.n	8006a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <prvInsertBlockIntoFreeList+0xb0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d00d      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	441a      	add	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e008      	b.n	8006a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a46:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <prvInsertBlockIntoFreeList+0xb0>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e003      	b.n	8006a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d002      	beq.n	8006a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a66:	bf00      	nop
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20004cbc 	.word	0x20004cbc
 8006a78:	20004cc4 	.word	0x20004cc4

08006a7c <__errno>:
 8006a7c:	4b01      	ldr	r3, [pc, #4]	; (8006a84 <__errno+0x8>)
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20000020 	.word	0x20000020

08006a88 <std>:
 8006a88:	2300      	movs	r3, #0
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a96:	6083      	str	r3, [r0, #8]
 8006a98:	8181      	strh	r1, [r0, #12]
 8006a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a9c:	81c2      	strh	r2, [r0, #14]
 8006a9e:	6183      	str	r3, [r0, #24]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	305c      	adds	r0, #92	; 0x5c
 8006aa6:	f000 f91a 	bl	8006cde <memset>
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <std+0x38>)
 8006aac:	6263      	str	r3, [r4, #36]	; 0x24
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <std+0x3c>)
 8006ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ab2:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <std+0x40>)
 8006ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <std+0x44>)
 8006ab8:	6224      	str	r4, [r4, #32]
 8006aba:	6323      	str	r3, [r4, #48]	; 0x30
 8006abc:	bd10      	pop	{r4, pc}
 8006abe:	bf00      	nop
 8006ac0:	08007821 	.word	0x08007821
 8006ac4:	08007843 	.word	0x08007843
 8006ac8:	0800787b 	.word	0x0800787b
 8006acc:	0800789f 	.word	0x0800789f

08006ad0 <_cleanup_r>:
 8006ad0:	4901      	ldr	r1, [pc, #4]	; (8006ad8 <_cleanup_r+0x8>)
 8006ad2:	f000 b8af 	b.w	8006c34 <_fwalk_reent>
 8006ad6:	bf00      	nop
 8006ad8:	08008781 	.word	0x08008781

08006adc <__sfmoreglue>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	2268      	movs	r2, #104	; 0x68
 8006ae0:	1e4d      	subs	r5, r1, #1
 8006ae2:	4355      	muls	r5, r2
 8006ae4:	460e      	mov	r6, r1
 8006ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aea:	f000 f921 	bl	8006d30 <_malloc_r>
 8006aee:	4604      	mov	r4, r0
 8006af0:	b140      	cbz	r0, 8006b04 <__sfmoreglue+0x28>
 8006af2:	2100      	movs	r1, #0
 8006af4:	e9c0 1600 	strd	r1, r6, [r0]
 8006af8:	300c      	adds	r0, #12
 8006afa:	60a0      	str	r0, [r4, #8]
 8006afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b00:	f000 f8ed 	bl	8006cde <memset>
 8006b04:	4620      	mov	r0, r4
 8006b06:	bd70      	pop	{r4, r5, r6, pc}

08006b08 <__sfp_lock_acquire>:
 8006b08:	4801      	ldr	r0, [pc, #4]	; (8006b10 <__sfp_lock_acquire+0x8>)
 8006b0a:	f000 b8d8 	b.w	8006cbe <__retarget_lock_acquire_recursive>
 8006b0e:	bf00      	nop
 8006b10:	20004cdd 	.word	0x20004cdd

08006b14 <__sfp_lock_release>:
 8006b14:	4801      	ldr	r0, [pc, #4]	; (8006b1c <__sfp_lock_release+0x8>)
 8006b16:	f000 b8d3 	b.w	8006cc0 <__retarget_lock_release_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	20004cdd 	.word	0x20004cdd

08006b20 <__sinit_lock_acquire>:
 8006b20:	4801      	ldr	r0, [pc, #4]	; (8006b28 <__sinit_lock_acquire+0x8>)
 8006b22:	f000 b8cc 	b.w	8006cbe <__retarget_lock_acquire_recursive>
 8006b26:	bf00      	nop
 8006b28:	20004cde 	.word	0x20004cde

08006b2c <__sinit_lock_release>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <__sinit_lock_release+0x8>)
 8006b2e:	f000 b8c7 	b.w	8006cc0 <__retarget_lock_release_recursive>
 8006b32:	bf00      	nop
 8006b34:	20004cde 	.word	0x20004cde

08006b38 <__sinit>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	f7ff fff0 	bl	8006b20 <__sinit_lock_acquire>
 8006b40:	69a3      	ldr	r3, [r4, #24]
 8006b42:	b11b      	cbz	r3, 8006b4c <__sinit+0x14>
 8006b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b48:	f7ff bff0 	b.w	8006b2c <__sinit_lock_release>
 8006b4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b50:	6523      	str	r3, [r4, #80]	; 0x50
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <__sinit+0x68>)
 8006b54:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <__sinit+0x6c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b5a:	42a3      	cmp	r3, r4
 8006b5c:	bf04      	itt	eq
 8006b5e:	2301      	moveq	r3, #1
 8006b60:	61a3      	streq	r3, [r4, #24]
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f820 	bl	8006ba8 <__sfp>
 8006b68:	6060      	str	r0, [r4, #4]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 f81c 	bl	8006ba8 <__sfp>
 8006b70:	60a0      	str	r0, [r4, #8]
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 f818 	bl	8006ba8 <__sfp>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	60e0      	str	r0, [r4, #12]
 8006b7c:	2104      	movs	r1, #4
 8006b7e:	6860      	ldr	r0, [r4, #4]
 8006b80:	f7ff ff82 	bl	8006a88 <std>
 8006b84:	68a0      	ldr	r0, [r4, #8]
 8006b86:	2201      	movs	r2, #1
 8006b88:	2109      	movs	r1, #9
 8006b8a:	f7ff ff7d 	bl	8006a88 <std>
 8006b8e:	68e0      	ldr	r0, [r4, #12]
 8006b90:	2202      	movs	r2, #2
 8006b92:	2112      	movs	r1, #18
 8006b94:	f7ff ff78 	bl	8006a88 <std>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	61a3      	str	r3, [r4, #24]
 8006b9c:	e7d2      	b.n	8006b44 <__sinit+0xc>
 8006b9e:	bf00      	nop
 8006ba0:	0800a1a4 	.word	0x0800a1a4
 8006ba4:	08006ad1 	.word	0x08006ad1

08006ba8 <__sfp>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	4607      	mov	r7, r0
 8006bac:	f7ff ffac 	bl	8006b08 <__sfp_lock_acquire>
 8006bb0:	4b1e      	ldr	r3, [pc, #120]	; (8006c2c <__sfp+0x84>)
 8006bb2:	681e      	ldr	r6, [r3, #0]
 8006bb4:	69b3      	ldr	r3, [r6, #24]
 8006bb6:	b913      	cbnz	r3, 8006bbe <__sfp+0x16>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff ffbd 	bl	8006b38 <__sinit>
 8006bbe:	3648      	adds	r6, #72	; 0x48
 8006bc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	d503      	bpl.n	8006bd0 <__sfp+0x28>
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	b30b      	cbz	r3, 8006c10 <__sfp+0x68>
 8006bcc:	6836      	ldr	r6, [r6, #0]
 8006bce:	e7f7      	b.n	8006bc0 <__sfp+0x18>
 8006bd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bd4:	b9d5      	cbnz	r5, 8006c0c <__sfp+0x64>
 8006bd6:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <__sfp+0x88>)
 8006bd8:	60e3      	str	r3, [r4, #12]
 8006bda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bde:	6665      	str	r5, [r4, #100]	; 0x64
 8006be0:	f000 f86c 	bl	8006cbc <__retarget_lock_init_recursive>
 8006be4:	f7ff ff96 	bl	8006b14 <__sfp_lock_release>
 8006be8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bf0:	6025      	str	r5, [r4, #0]
 8006bf2:	61a5      	str	r5, [r4, #24]
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bfc:	f000 f86f 	bl	8006cde <memset>
 8006c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c08:	4620      	mov	r0, r4
 8006c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0c:	3468      	adds	r4, #104	; 0x68
 8006c0e:	e7d9      	b.n	8006bc4 <__sfp+0x1c>
 8006c10:	2104      	movs	r1, #4
 8006c12:	4638      	mov	r0, r7
 8006c14:	f7ff ff62 	bl	8006adc <__sfmoreglue>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	6030      	str	r0, [r6, #0]
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d1d5      	bne.n	8006bcc <__sfp+0x24>
 8006c20:	f7ff ff78 	bl	8006b14 <__sfp_lock_release>
 8006c24:	230c      	movs	r3, #12
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	e7ee      	b.n	8006c08 <__sfp+0x60>
 8006c2a:	bf00      	nop
 8006c2c:	0800a1a4 	.word	0x0800a1a4
 8006c30:	ffff0001 	.word	0xffff0001

08006c34 <_fwalk_reent>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	4606      	mov	r6, r0
 8006c3a:	4688      	mov	r8, r1
 8006c3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c40:	2700      	movs	r7, #0
 8006c42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c46:	f1b9 0901 	subs.w	r9, r9, #1
 8006c4a:	d505      	bpl.n	8006c58 <_fwalk_reent+0x24>
 8006c4c:	6824      	ldr	r4, [r4, #0]
 8006c4e:	2c00      	cmp	r4, #0
 8006c50:	d1f7      	bne.n	8006c42 <_fwalk_reent+0xe>
 8006c52:	4638      	mov	r0, r7
 8006c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c58:	89ab      	ldrh	r3, [r5, #12]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d907      	bls.n	8006c6e <_fwalk_reent+0x3a>
 8006c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c62:	3301      	adds	r3, #1
 8006c64:	d003      	beq.n	8006c6e <_fwalk_reent+0x3a>
 8006c66:	4629      	mov	r1, r5
 8006c68:	4630      	mov	r0, r6
 8006c6a:	47c0      	blx	r8
 8006c6c:	4307      	orrs	r7, r0
 8006c6e:	3568      	adds	r5, #104	; 0x68
 8006c70:	e7e9      	b.n	8006c46 <_fwalk_reent+0x12>
	...

08006c74 <__libc_init_array>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	4d0d      	ldr	r5, [pc, #52]	; (8006cac <__libc_init_array+0x38>)
 8006c78:	4c0d      	ldr	r4, [pc, #52]	; (8006cb0 <__libc_init_array+0x3c>)
 8006c7a:	1b64      	subs	r4, r4, r5
 8006c7c:	10a4      	asrs	r4, r4, #2
 8006c7e:	2600      	movs	r6, #0
 8006c80:	42a6      	cmp	r6, r4
 8006c82:	d109      	bne.n	8006c98 <__libc_init_array+0x24>
 8006c84:	4d0b      	ldr	r5, [pc, #44]	; (8006cb4 <__libc_init_array+0x40>)
 8006c86:	4c0c      	ldr	r4, [pc, #48]	; (8006cb8 <__libc_init_array+0x44>)
 8006c88:	f002 fec0 	bl	8009a0c <_init>
 8006c8c:	1b64      	subs	r4, r4, r5
 8006c8e:	10a4      	asrs	r4, r4, #2
 8006c90:	2600      	movs	r6, #0
 8006c92:	42a6      	cmp	r6, r4
 8006c94:	d105      	bne.n	8006ca2 <__libc_init_array+0x2e>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c9c:	4798      	blx	r3
 8006c9e:	3601      	adds	r6, #1
 8006ca0:	e7ee      	b.n	8006c80 <__libc_init_array+0xc>
 8006ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca6:	4798      	blx	r3
 8006ca8:	3601      	adds	r6, #1
 8006caa:	e7f2      	b.n	8006c92 <__libc_init_array+0x1e>
 8006cac:	0800a524 	.word	0x0800a524
 8006cb0:	0800a524 	.word	0x0800a524
 8006cb4:	0800a524 	.word	0x0800a524
 8006cb8:	0800a528 	.word	0x0800a528

08006cbc <__retarget_lock_init_recursive>:
 8006cbc:	4770      	bx	lr

08006cbe <__retarget_lock_acquire_recursive>:
 8006cbe:	4770      	bx	lr

08006cc0 <__retarget_lock_release_recursive>:
 8006cc0:	4770      	bx	lr

08006cc2 <memcpy>:
 8006cc2:	440a      	add	r2, r1
 8006cc4:	4291      	cmp	r1, r2
 8006cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cca:	d100      	bne.n	8006cce <memcpy+0xc>
 8006ccc:	4770      	bx	lr
 8006cce:	b510      	push	{r4, lr}
 8006cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cd8:	4291      	cmp	r1, r2
 8006cda:	d1f9      	bne.n	8006cd0 <memcpy+0xe>
 8006cdc:	bd10      	pop	{r4, pc}

08006cde <memset>:
 8006cde:	4402      	add	r2, r0
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d100      	bne.n	8006ce8 <memset+0xa>
 8006ce6:	4770      	bx	lr
 8006ce8:	f803 1b01 	strb.w	r1, [r3], #1
 8006cec:	e7f9      	b.n	8006ce2 <memset+0x4>
	...

08006cf0 <sbrk_aligned>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	4e0e      	ldr	r6, [pc, #56]	; (8006d2c <sbrk_aligned+0x3c>)
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	6831      	ldr	r1, [r6, #0]
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	b911      	cbnz	r1, 8006d02 <sbrk_aligned+0x12>
 8006cfc:	f000 fd60 	bl	80077c0 <_sbrk_r>
 8006d00:	6030      	str	r0, [r6, #0]
 8006d02:	4621      	mov	r1, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	f000 fd5b 	bl	80077c0 <_sbrk_r>
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	d00a      	beq.n	8006d24 <sbrk_aligned+0x34>
 8006d0e:	1cc4      	adds	r4, r0, #3
 8006d10:	f024 0403 	bic.w	r4, r4, #3
 8006d14:	42a0      	cmp	r0, r4
 8006d16:	d007      	beq.n	8006d28 <sbrk_aligned+0x38>
 8006d18:	1a21      	subs	r1, r4, r0
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f000 fd50 	bl	80077c0 <_sbrk_r>
 8006d20:	3001      	adds	r0, #1
 8006d22:	d101      	bne.n	8006d28 <sbrk_aligned+0x38>
 8006d24:	f04f 34ff 	mov.w	r4, #4294967295
 8006d28:	4620      	mov	r0, r4
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	20004ce4 	.word	0x20004ce4

08006d30 <_malloc_r>:
 8006d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d34:	1ccd      	adds	r5, r1, #3
 8006d36:	f025 0503 	bic.w	r5, r5, #3
 8006d3a:	3508      	adds	r5, #8
 8006d3c:	2d0c      	cmp	r5, #12
 8006d3e:	bf38      	it	cc
 8006d40:	250c      	movcc	r5, #12
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	4607      	mov	r7, r0
 8006d46:	db01      	blt.n	8006d4c <_malloc_r+0x1c>
 8006d48:	42a9      	cmp	r1, r5
 8006d4a:	d905      	bls.n	8006d58 <_malloc_r+0x28>
 8006d4c:	230c      	movs	r3, #12
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	2600      	movs	r6, #0
 8006d52:	4630      	mov	r0, r6
 8006d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d58:	4e2e      	ldr	r6, [pc, #184]	; (8006e14 <_malloc_r+0xe4>)
 8006d5a:	f001 fd6b 	bl	8008834 <__malloc_lock>
 8006d5e:	6833      	ldr	r3, [r6, #0]
 8006d60:	461c      	mov	r4, r3
 8006d62:	bb34      	cbnz	r4, 8006db2 <_malloc_r+0x82>
 8006d64:	4629      	mov	r1, r5
 8006d66:	4638      	mov	r0, r7
 8006d68:	f7ff ffc2 	bl	8006cf0 <sbrk_aligned>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	4604      	mov	r4, r0
 8006d70:	d14d      	bne.n	8006e0e <_malloc_r+0xde>
 8006d72:	6834      	ldr	r4, [r6, #0]
 8006d74:	4626      	mov	r6, r4
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d140      	bne.n	8006dfc <_malloc_r+0xcc>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4638      	mov	r0, r7
 8006d80:	eb04 0803 	add.w	r8, r4, r3
 8006d84:	f000 fd1c 	bl	80077c0 <_sbrk_r>
 8006d88:	4580      	cmp	r8, r0
 8006d8a:	d13a      	bne.n	8006e02 <_malloc_r+0xd2>
 8006d8c:	6821      	ldr	r1, [r4, #0]
 8006d8e:	3503      	adds	r5, #3
 8006d90:	1a6d      	subs	r5, r5, r1
 8006d92:	f025 0503 	bic.w	r5, r5, #3
 8006d96:	3508      	adds	r5, #8
 8006d98:	2d0c      	cmp	r5, #12
 8006d9a:	bf38      	it	cc
 8006d9c:	250c      	movcc	r5, #12
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4638      	mov	r0, r7
 8006da2:	f7ff ffa5 	bl	8006cf0 <sbrk_aligned>
 8006da6:	3001      	adds	r0, #1
 8006da8:	d02b      	beq.n	8006e02 <_malloc_r+0xd2>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	442b      	add	r3, r5
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	e00e      	b.n	8006dd0 <_malloc_r+0xa0>
 8006db2:	6822      	ldr	r2, [r4, #0]
 8006db4:	1b52      	subs	r2, r2, r5
 8006db6:	d41e      	bmi.n	8006df6 <_malloc_r+0xc6>
 8006db8:	2a0b      	cmp	r2, #11
 8006dba:	d916      	bls.n	8006dea <_malloc_r+0xba>
 8006dbc:	1961      	adds	r1, r4, r5
 8006dbe:	42a3      	cmp	r3, r4
 8006dc0:	6025      	str	r5, [r4, #0]
 8006dc2:	bf18      	it	ne
 8006dc4:	6059      	strne	r1, [r3, #4]
 8006dc6:	6863      	ldr	r3, [r4, #4]
 8006dc8:	bf08      	it	eq
 8006dca:	6031      	streq	r1, [r6, #0]
 8006dcc:	5162      	str	r2, [r4, r5]
 8006dce:	604b      	str	r3, [r1, #4]
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	f104 060b 	add.w	r6, r4, #11
 8006dd6:	f001 fd33 	bl	8008840 <__malloc_unlock>
 8006dda:	f026 0607 	bic.w	r6, r6, #7
 8006dde:	1d23      	adds	r3, r4, #4
 8006de0:	1af2      	subs	r2, r6, r3
 8006de2:	d0b6      	beq.n	8006d52 <_malloc_r+0x22>
 8006de4:	1b9b      	subs	r3, r3, r6
 8006de6:	50a3      	str	r3, [r4, r2]
 8006de8:	e7b3      	b.n	8006d52 <_malloc_r+0x22>
 8006dea:	6862      	ldr	r2, [r4, #4]
 8006dec:	42a3      	cmp	r3, r4
 8006dee:	bf0c      	ite	eq
 8006df0:	6032      	streq	r2, [r6, #0]
 8006df2:	605a      	strne	r2, [r3, #4]
 8006df4:	e7ec      	b.n	8006dd0 <_malloc_r+0xa0>
 8006df6:	4623      	mov	r3, r4
 8006df8:	6864      	ldr	r4, [r4, #4]
 8006dfa:	e7b2      	b.n	8006d62 <_malloc_r+0x32>
 8006dfc:	4634      	mov	r4, r6
 8006dfe:	6876      	ldr	r6, [r6, #4]
 8006e00:	e7b9      	b.n	8006d76 <_malloc_r+0x46>
 8006e02:	230c      	movs	r3, #12
 8006e04:	603b      	str	r3, [r7, #0]
 8006e06:	4638      	mov	r0, r7
 8006e08:	f001 fd1a 	bl	8008840 <__malloc_unlock>
 8006e0c:	e7a1      	b.n	8006d52 <_malloc_r+0x22>
 8006e0e:	6025      	str	r5, [r4, #0]
 8006e10:	e7de      	b.n	8006dd0 <_malloc_r+0xa0>
 8006e12:	bf00      	nop
 8006e14:	20004ce0 	.word	0x20004ce0

08006e18 <__cvt>:
 8006e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	ec55 4b10 	vmov	r4, r5, d0
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	460e      	mov	r6, r1
 8006e24:	4619      	mov	r1, r3
 8006e26:	462b      	mov	r3, r5
 8006e28:	bfbb      	ittet	lt
 8006e2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e2e:	461d      	movlt	r5, r3
 8006e30:	2300      	movge	r3, #0
 8006e32:	232d      	movlt	r3, #45	; 0x2d
 8006e34:	700b      	strb	r3, [r1, #0]
 8006e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e3c:	4691      	mov	r9, r2
 8006e3e:	f023 0820 	bic.w	r8, r3, #32
 8006e42:	bfbc      	itt	lt
 8006e44:	4622      	movlt	r2, r4
 8006e46:	4614      	movlt	r4, r2
 8006e48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e4c:	d005      	beq.n	8006e5a <__cvt+0x42>
 8006e4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e52:	d100      	bne.n	8006e56 <__cvt+0x3e>
 8006e54:	3601      	adds	r6, #1
 8006e56:	2102      	movs	r1, #2
 8006e58:	e000      	b.n	8006e5c <__cvt+0x44>
 8006e5a:	2103      	movs	r1, #3
 8006e5c:	ab03      	add	r3, sp, #12
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	ab02      	add	r3, sp, #8
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	ec45 4b10 	vmov	d0, r4, r5
 8006e68:	4653      	mov	r3, sl
 8006e6a:	4632      	mov	r2, r6
 8006e6c:	f000 fe14 	bl	8007a98 <_dtoa_r>
 8006e70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e74:	4607      	mov	r7, r0
 8006e76:	d102      	bne.n	8006e7e <__cvt+0x66>
 8006e78:	f019 0f01 	tst.w	r9, #1
 8006e7c:	d022      	beq.n	8006ec4 <__cvt+0xac>
 8006e7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e82:	eb07 0906 	add.w	r9, r7, r6
 8006e86:	d110      	bne.n	8006eaa <__cvt+0x92>
 8006e88:	783b      	ldrb	r3, [r7, #0]
 8006e8a:	2b30      	cmp	r3, #48	; 0x30
 8006e8c:	d10a      	bne.n	8006ea4 <__cvt+0x8c>
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2300      	movs	r3, #0
 8006e92:	4620      	mov	r0, r4
 8006e94:	4629      	mov	r1, r5
 8006e96:	f7f9 fe1f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e9a:	b918      	cbnz	r0, 8006ea4 <__cvt+0x8c>
 8006e9c:	f1c6 0601 	rsb	r6, r6, #1
 8006ea0:	f8ca 6000 	str.w	r6, [sl]
 8006ea4:	f8da 3000 	ldr.w	r3, [sl]
 8006ea8:	4499      	add	r9, r3
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2300      	movs	r3, #0
 8006eae:	4620      	mov	r0, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	f7f9 fe11 	bl	8000ad8 <__aeabi_dcmpeq>
 8006eb6:	b108      	cbz	r0, 8006ebc <__cvt+0xa4>
 8006eb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ebc:	2230      	movs	r2, #48	; 0x30
 8006ebe:	9b03      	ldr	r3, [sp, #12]
 8006ec0:	454b      	cmp	r3, r9
 8006ec2:	d307      	bcc.n	8006ed4 <__cvt+0xbc>
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ec8:	1bdb      	subs	r3, r3, r7
 8006eca:	4638      	mov	r0, r7
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	b004      	add	sp, #16
 8006ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed4:	1c59      	adds	r1, r3, #1
 8006ed6:	9103      	str	r1, [sp, #12]
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	e7f0      	b.n	8006ebe <__cvt+0xa6>

08006edc <__exponent>:
 8006edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	bfb8      	it	lt
 8006ee4:	4249      	neglt	r1, r1
 8006ee6:	f803 2b02 	strb.w	r2, [r3], #2
 8006eea:	bfb4      	ite	lt
 8006eec:	222d      	movlt	r2, #45	; 0x2d
 8006eee:	222b      	movge	r2, #43	; 0x2b
 8006ef0:	2909      	cmp	r1, #9
 8006ef2:	7042      	strb	r2, [r0, #1]
 8006ef4:	dd2a      	ble.n	8006f4c <__exponent+0x70>
 8006ef6:	f10d 0407 	add.w	r4, sp, #7
 8006efa:	46a4      	mov	ip, r4
 8006efc:	270a      	movs	r7, #10
 8006efe:	46a6      	mov	lr, r4
 8006f00:	460a      	mov	r2, r1
 8006f02:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f06:	fb07 1516 	mls	r5, r7, r6, r1
 8006f0a:	3530      	adds	r5, #48	; 0x30
 8006f0c:	2a63      	cmp	r2, #99	; 0x63
 8006f0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f16:	4631      	mov	r1, r6
 8006f18:	dcf1      	bgt.n	8006efe <__exponent+0x22>
 8006f1a:	3130      	adds	r1, #48	; 0x30
 8006f1c:	f1ae 0502 	sub.w	r5, lr, #2
 8006f20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f24:	1c44      	adds	r4, r0, #1
 8006f26:	4629      	mov	r1, r5
 8006f28:	4561      	cmp	r1, ip
 8006f2a:	d30a      	bcc.n	8006f42 <__exponent+0x66>
 8006f2c:	f10d 0209 	add.w	r2, sp, #9
 8006f30:	eba2 020e 	sub.w	r2, r2, lr
 8006f34:	4565      	cmp	r5, ip
 8006f36:	bf88      	it	hi
 8006f38:	2200      	movhi	r2, #0
 8006f3a:	4413      	add	r3, r2
 8006f3c:	1a18      	subs	r0, r3, r0
 8006f3e:	b003      	add	sp, #12
 8006f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006f4a:	e7ed      	b.n	8006f28 <__exponent+0x4c>
 8006f4c:	2330      	movs	r3, #48	; 0x30
 8006f4e:	3130      	adds	r1, #48	; 0x30
 8006f50:	7083      	strb	r3, [r0, #2]
 8006f52:	70c1      	strb	r1, [r0, #3]
 8006f54:	1d03      	adds	r3, r0, #4
 8006f56:	e7f1      	b.n	8006f3c <__exponent+0x60>

08006f58 <_printf_float>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	ed2d 8b02 	vpush	{d8}
 8006f60:	b08d      	sub	sp, #52	; 0x34
 8006f62:	460c      	mov	r4, r1
 8006f64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f68:	4616      	mov	r6, r2
 8006f6a:	461f      	mov	r7, r3
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	f001 fc43 	bl	80087f8 <_localeconv_r>
 8006f72:	f8d0 a000 	ldr.w	sl, [r0]
 8006f76:	4650      	mov	r0, sl
 8006f78:	f7f9 f932 	bl	80001e0 <strlen>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	9305      	str	r3, [sp, #20]
 8006f84:	f8d8 3000 	ldr.w	r3, [r8]
 8006f88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f8c:	3307      	adds	r3, #7
 8006f8e:	f023 0307 	bic.w	r3, r3, #7
 8006f92:	f103 0208 	add.w	r2, r3, #8
 8006f96:	f8c8 2000 	str.w	r2, [r8]
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006fa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006fa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006faa:	9307      	str	r3, [sp, #28]
 8006fac:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fb0:	ee08 0a10 	vmov	s16, r0
 8006fb4:	4b9f      	ldr	r3, [pc, #636]	; (8007234 <_printf_float+0x2dc>)
 8006fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fba:	f04f 32ff 	mov.w	r2, #4294967295
 8006fbe:	f7f9 fdbd 	bl	8000b3c <__aeabi_dcmpun>
 8006fc2:	bb88      	cbnz	r0, 8007028 <_printf_float+0xd0>
 8006fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fc8:	4b9a      	ldr	r3, [pc, #616]	; (8007234 <_printf_float+0x2dc>)
 8006fca:	f04f 32ff 	mov.w	r2, #4294967295
 8006fce:	f7f9 fd97 	bl	8000b00 <__aeabi_dcmple>
 8006fd2:	bb48      	cbnz	r0, 8007028 <_printf_float+0xd0>
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	4640      	mov	r0, r8
 8006fda:	4649      	mov	r1, r9
 8006fdc:	f7f9 fd86 	bl	8000aec <__aeabi_dcmplt>
 8006fe0:	b110      	cbz	r0, 8006fe8 <_printf_float+0x90>
 8006fe2:	232d      	movs	r3, #45	; 0x2d
 8006fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe8:	4b93      	ldr	r3, [pc, #588]	; (8007238 <_printf_float+0x2e0>)
 8006fea:	4894      	ldr	r0, [pc, #592]	; (800723c <_printf_float+0x2e4>)
 8006fec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ff0:	bf94      	ite	ls
 8006ff2:	4698      	movls	r8, r3
 8006ff4:	4680      	movhi	r8, r0
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	6123      	str	r3, [r4, #16]
 8006ffa:	9b05      	ldr	r3, [sp, #20]
 8006ffc:	f023 0204 	bic.w	r2, r3, #4
 8007000:	6022      	str	r2, [r4, #0]
 8007002:	f04f 0900 	mov.w	r9, #0
 8007006:	9700      	str	r7, [sp, #0]
 8007008:	4633      	mov	r3, r6
 800700a:	aa0b      	add	r2, sp, #44	; 0x2c
 800700c:	4621      	mov	r1, r4
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f9d8 	bl	80073c4 <_printf_common>
 8007014:	3001      	adds	r0, #1
 8007016:	f040 8090 	bne.w	800713a <_printf_float+0x1e2>
 800701a:	f04f 30ff 	mov.w	r0, #4294967295
 800701e:	b00d      	add	sp, #52	; 0x34
 8007020:	ecbd 8b02 	vpop	{d8}
 8007024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007028:	4642      	mov	r2, r8
 800702a:	464b      	mov	r3, r9
 800702c:	4640      	mov	r0, r8
 800702e:	4649      	mov	r1, r9
 8007030:	f7f9 fd84 	bl	8000b3c <__aeabi_dcmpun>
 8007034:	b140      	cbz	r0, 8007048 <_printf_float+0xf0>
 8007036:	464b      	mov	r3, r9
 8007038:	2b00      	cmp	r3, #0
 800703a:	bfbc      	itt	lt
 800703c:	232d      	movlt	r3, #45	; 0x2d
 800703e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007042:	487f      	ldr	r0, [pc, #508]	; (8007240 <_printf_float+0x2e8>)
 8007044:	4b7f      	ldr	r3, [pc, #508]	; (8007244 <_printf_float+0x2ec>)
 8007046:	e7d1      	b.n	8006fec <_printf_float+0x94>
 8007048:	6863      	ldr	r3, [r4, #4]
 800704a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800704e:	9206      	str	r2, [sp, #24]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	d13f      	bne.n	80070d4 <_printf_float+0x17c>
 8007054:	2306      	movs	r3, #6
 8007056:	6063      	str	r3, [r4, #4]
 8007058:	9b05      	ldr	r3, [sp, #20]
 800705a:	6861      	ldr	r1, [r4, #4]
 800705c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007060:	2300      	movs	r3, #0
 8007062:	9303      	str	r3, [sp, #12]
 8007064:	ab0a      	add	r3, sp, #40	; 0x28
 8007066:	e9cd b301 	strd	fp, r3, [sp, #4]
 800706a:	ab09      	add	r3, sp, #36	; 0x24
 800706c:	ec49 8b10 	vmov	d0, r8, r9
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	6022      	str	r2, [r4, #0]
 8007074:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007078:	4628      	mov	r0, r5
 800707a:	f7ff fecd 	bl	8006e18 <__cvt>
 800707e:	9b06      	ldr	r3, [sp, #24]
 8007080:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007082:	2b47      	cmp	r3, #71	; 0x47
 8007084:	4680      	mov	r8, r0
 8007086:	d108      	bne.n	800709a <_printf_float+0x142>
 8007088:	1cc8      	adds	r0, r1, #3
 800708a:	db02      	blt.n	8007092 <_printf_float+0x13a>
 800708c:	6863      	ldr	r3, [r4, #4]
 800708e:	4299      	cmp	r1, r3
 8007090:	dd41      	ble.n	8007116 <_printf_float+0x1be>
 8007092:	f1ab 0b02 	sub.w	fp, fp, #2
 8007096:	fa5f fb8b 	uxtb.w	fp, fp
 800709a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800709e:	d820      	bhi.n	80070e2 <_printf_float+0x18a>
 80070a0:	3901      	subs	r1, #1
 80070a2:	465a      	mov	r2, fp
 80070a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070a8:	9109      	str	r1, [sp, #36]	; 0x24
 80070aa:	f7ff ff17 	bl	8006edc <__exponent>
 80070ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070b0:	1813      	adds	r3, r2, r0
 80070b2:	2a01      	cmp	r2, #1
 80070b4:	4681      	mov	r9, r0
 80070b6:	6123      	str	r3, [r4, #16]
 80070b8:	dc02      	bgt.n	80070c0 <_printf_float+0x168>
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	07d2      	lsls	r2, r2, #31
 80070be:	d501      	bpl.n	80070c4 <_printf_float+0x16c>
 80070c0:	3301      	adds	r3, #1
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d09c      	beq.n	8007006 <_printf_float+0xae>
 80070cc:	232d      	movs	r3, #45	; 0x2d
 80070ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d2:	e798      	b.n	8007006 <_printf_float+0xae>
 80070d4:	9a06      	ldr	r2, [sp, #24]
 80070d6:	2a47      	cmp	r2, #71	; 0x47
 80070d8:	d1be      	bne.n	8007058 <_printf_float+0x100>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1bc      	bne.n	8007058 <_printf_float+0x100>
 80070de:	2301      	movs	r3, #1
 80070e0:	e7b9      	b.n	8007056 <_printf_float+0xfe>
 80070e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80070e6:	d118      	bne.n	800711a <_printf_float+0x1c2>
 80070e8:	2900      	cmp	r1, #0
 80070ea:	6863      	ldr	r3, [r4, #4]
 80070ec:	dd0b      	ble.n	8007106 <_printf_float+0x1ae>
 80070ee:	6121      	str	r1, [r4, #16]
 80070f0:	b913      	cbnz	r3, 80070f8 <_printf_float+0x1a0>
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	07d0      	lsls	r0, r2, #31
 80070f6:	d502      	bpl.n	80070fe <_printf_float+0x1a6>
 80070f8:	3301      	adds	r3, #1
 80070fa:	440b      	add	r3, r1
 80070fc:	6123      	str	r3, [r4, #16]
 80070fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007100:	f04f 0900 	mov.w	r9, #0
 8007104:	e7de      	b.n	80070c4 <_printf_float+0x16c>
 8007106:	b913      	cbnz	r3, 800710e <_printf_float+0x1b6>
 8007108:	6822      	ldr	r2, [r4, #0]
 800710a:	07d2      	lsls	r2, r2, #31
 800710c:	d501      	bpl.n	8007112 <_printf_float+0x1ba>
 800710e:	3302      	adds	r3, #2
 8007110:	e7f4      	b.n	80070fc <_printf_float+0x1a4>
 8007112:	2301      	movs	r3, #1
 8007114:	e7f2      	b.n	80070fc <_printf_float+0x1a4>
 8007116:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800711a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800711c:	4299      	cmp	r1, r3
 800711e:	db05      	blt.n	800712c <_printf_float+0x1d4>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	6121      	str	r1, [r4, #16]
 8007124:	07d8      	lsls	r0, r3, #31
 8007126:	d5ea      	bpl.n	80070fe <_printf_float+0x1a6>
 8007128:	1c4b      	adds	r3, r1, #1
 800712a:	e7e7      	b.n	80070fc <_printf_float+0x1a4>
 800712c:	2900      	cmp	r1, #0
 800712e:	bfd4      	ite	le
 8007130:	f1c1 0202 	rsble	r2, r1, #2
 8007134:	2201      	movgt	r2, #1
 8007136:	4413      	add	r3, r2
 8007138:	e7e0      	b.n	80070fc <_printf_float+0x1a4>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	055a      	lsls	r2, r3, #21
 800713e:	d407      	bmi.n	8007150 <_printf_float+0x1f8>
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	4642      	mov	r2, r8
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	d12c      	bne.n	80071a8 <_printf_float+0x250>
 800714e:	e764      	b.n	800701a <_printf_float+0xc2>
 8007150:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007154:	f240 80e0 	bls.w	8007318 <_printf_float+0x3c0>
 8007158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	f7f9 fcba 	bl	8000ad8 <__aeabi_dcmpeq>
 8007164:	2800      	cmp	r0, #0
 8007166:	d034      	beq.n	80071d2 <_printf_float+0x27a>
 8007168:	4a37      	ldr	r2, [pc, #220]	; (8007248 <_printf_float+0x2f0>)
 800716a:	2301      	movs	r3, #1
 800716c:	4631      	mov	r1, r6
 800716e:	4628      	mov	r0, r5
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	f43f af51 	beq.w	800701a <_printf_float+0xc2>
 8007178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800717c:	429a      	cmp	r2, r3
 800717e:	db02      	blt.n	8007186 <_printf_float+0x22e>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	07d8      	lsls	r0, r3, #31
 8007184:	d510      	bpl.n	80071a8 <_printf_float+0x250>
 8007186:	ee18 3a10 	vmov	r3, s16
 800718a:	4652      	mov	r2, sl
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	f43f af41 	beq.w	800701a <_printf_float+0xc2>
 8007198:	f04f 0800 	mov.w	r8, #0
 800719c:	f104 091a 	add.w	r9, r4, #26
 80071a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a2:	3b01      	subs	r3, #1
 80071a4:	4543      	cmp	r3, r8
 80071a6:	dc09      	bgt.n	80071bc <_printf_float+0x264>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	079b      	lsls	r3, r3, #30
 80071ac:	f100 8105 	bmi.w	80073ba <_printf_float+0x462>
 80071b0:	68e0      	ldr	r0, [r4, #12]
 80071b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b4:	4298      	cmp	r0, r3
 80071b6:	bfb8      	it	lt
 80071b8:	4618      	movlt	r0, r3
 80071ba:	e730      	b.n	800701e <_printf_float+0xc6>
 80071bc:	2301      	movs	r3, #1
 80071be:	464a      	mov	r2, r9
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f af27 	beq.w	800701a <_printf_float+0xc2>
 80071cc:	f108 0801 	add.w	r8, r8, #1
 80071d0:	e7e6      	b.n	80071a0 <_printf_float+0x248>
 80071d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	dc39      	bgt.n	800724c <_printf_float+0x2f4>
 80071d8:	4a1b      	ldr	r2, [pc, #108]	; (8007248 <_printf_float+0x2f0>)
 80071da:	2301      	movs	r3, #1
 80071dc:	4631      	mov	r1, r6
 80071de:	4628      	mov	r0, r5
 80071e0:	47b8      	blx	r7
 80071e2:	3001      	adds	r0, #1
 80071e4:	f43f af19 	beq.w	800701a <_printf_float+0xc2>
 80071e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071ec:	4313      	orrs	r3, r2
 80071ee:	d102      	bne.n	80071f6 <_printf_float+0x29e>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	07d9      	lsls	r1, r3, #31
 80071f4:	d5d8      	bpl.n	80071a8 <_printf_float+0x250>
 80071f6:	ee18 3a10 	vmov	r3, s16
 80071fa:	4652      	mov	r2, sl
 80071fc:	4631      	mov	r1, r6
 80071fe:	4628      	mov	r0, r5
 8007200:	47b8      	blx	r7
 8007202:	3001      	adds	r0, #1
 8007204:	f43f af09 	beq.w	800701a <_printf_float+0xc2>
 8007208:	f04f 0900 	mov.w	r9, #0
 800720c:	f104 0a1a 	add.w	sl, r4, #26
 8007210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007212:	425b      	negs	r3, r3
 8007214:	454b      	cmp	r3, r9
 8007216:	dc01      	bgt.n	800721c <_printf_float+0x2c4>
 8007218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721a:	e792      	b.n	8007142 <_printf_float+0x1ea>
 800721c:	2301      	movs	r3, #1
 800721e:	4652      	mov	r2, sl
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f aef7 	beq.w	800701a <_printf_float+0xc2>
 800722c:	f109 0901 	add.w	r9, r9, #1
 8007230:	e7ee      	b.n	8007210 <_printf_float+0x2b8>
 8007232:	bf00      	nop
 8007234:	7fefffff 	.word	0x7fefffff
 8007238:	0800a1a8 	.word	0x0800a1a8
 800723c:	0800a1ac 	.word	0x0800a1ac
 8007240:	0800a1b4 	.word	0x0800a1b4
 8007244:	0800a1b0 	.word	0x0800a1b0
 8007248:	0800a1b8 	.word	0x0800a1b8
 800724c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800724e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007250:	429a      	cmp	r2, r3
 8007252:	bfa8      	it	ge
 8007254:	461a      	movge	r2, r3
 8007256:	2a00      	cmp	r2, #0
 8007258:	4691      	mov	r9, r2
 800725a:	dc37      	bgt.n	80072cc <_printf_float+0x374>
 800725c:	f04f 0b00 	mov.w	fp, #0
 8007260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007264:	f104 021a 	add.w	r2, r4, #26
 8007268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800726a:	9305      	str	r3, [sp, #20]
 800726c:	eba3 0309 	sub.w	r3, r3, r9
 8007270:	455b      	cmp	r3, fp
 8007272:	dc33      	bgt.n	80072dc <_printf_float+0x384>
 8007274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007278:	429a      	cmp	r2, r3
 800727a:	db3b      	blt.n	80072f4 <_printf_float+0x39c>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	07da      	lsls	r2, r3, #31
 8007280:	d438      	bmi.n	80072f4 <_printf_float+0x39c>
 8007282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007284:	9a05      	ldr	r2, [sp, #20]
 8007286:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007288:	1a9a      	subs	r2, r3, r2
 800728a:	eba3 0901 	sub.w	r9, r3, r1
 800728e:	4591      	cmp	r9, r2
 8007290:	bfa8      	it	ge
 8007292:	4691      	movge	r9, r2
 8007294:	f1b9 0f00 	cmp.w	r9, #0
 8007298:	dc35      	bgt.n	8007306 <_printf_float+0x3ae>
 800729a:	f04f 0800 	mov.w	r8, #0
 800729e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072a2:	f104 0a1a 	add.w	sl, r4, #26
 80072a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	eba3 0309 	sub.w	r3, r3, r9
 80072b0:	4543      	cmp	r3, r8
 80072b2:	f77f af79 	ble.w	80071a8 <_printf_float+0x250>
 80072b6:	2301      	movs	r3, #1
 80072b8:	4652      	mov	r2, sl
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	f43f aeaa 	beq.w	800701a <_printf_float+0xc2>
 80072c6:	f108 0801 	add.w	r8, r8, #1
 80072ca:	e7ec      	b.n	80072a6 <_printf_float+0x34e>
 80072cc:	4613      	mov	r3, r2
 80072ce:	4631      	mov	r1, r6
 80072d0:	4642      	mov	r2, r8
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	d1c0      	bne.n	800725c <_printf_float+0x304>
 80072da:	e69e      	b.n	800701a <_printf_float+0xc2>
 80072dc:	2301      	movs	r3, #1
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	9205      	str	r2, [sp, #20]
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f ae97 	beq.w	800701a <_printf_float+0xc2>
 80072ec:	9a05      	ldr	r2, [sp, #20]
 80072ee:	f10b 0b01 	add.w	fp, fp, #1
 80072f2:	e7b9      	b.n	8007268 <_printf_float+0x310>
 80072f4:	ee18 3a10 	vmov	r3, s16
 80072f8:	4652      	mov	r2, sl
 80072fa:	4631      	mov	r1, r6
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b8      	blx	r7
 8007300:	3001      	adds	r0, #1
 8007302:	d1be      	bne.n	8007282 <_printf_float+0x32a>
 8007304:	e689      	b.n	800701a <_printf_float+0xc2>
 8007306:	9a05      	ldr	r2, [sp, #20]
 8007308:	464b      	mov	r3, r9
 800730a:	4442      	add	r2, r8
 800730c:	4631      	mov	r1, r6
 800730e:	4628      	mov	r0, r5
 8007310:	47b8      	blx	r7
 8007312:	3001      	adds	r0, #1
 8007314:	d1c1      	bne.n	800729a <_printf_float+0x342>
 8007316:	e680      	b.n	800701a <_printf_float+0xc2>
 8007318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800731a:	2a01      	cmp	r2, #1
 800731c:	dc01      	bgt.n	8007322 <_printf_float+0x3ca>
 800731e:	07db      	lsls	r3, r3, #31
 8007320:	d538      	bpl.n	8007394 <_printf_float+0x43c>
 8007322:	2301      	movs	r3, #1
 8007324:	4642      	mov	r2, r8
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	47b8      	blx	r7
 800732c:	3001      	adds	r0, #1
 800732e:	f43f ae74 	beq.w	800701a <_printf_float+0xc2>
 8007332:	ee18 3a10 	vmov	r3, s16
 8007336:	4652      	mov	r2, sl
 8007338:	4631      	mov	r1, r6
 800733a:	4628      	mov	r0, r5
 800733c:	47b8      	blx	r7
 800733e:	3001      	adds	r0, #1
 8007340:	f43f ae6b 	beq.w	800701a <_printf_float+0xc2>
 8007344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007348:	2200      	movs	r2, #0
 800734a:	2300      	movs	r3, #0
 800734c:	f7f9 fbc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007350:	b9d8      	cbnz	r0, 800738a <_printf_float+0x432>
 8007352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007354:	f108 0201 	add.w	r2, r8, #1
 8007358:	3b01      	subs	r3, #1
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	d10e      	bne.n	8007382 <_printf_float+0x42a>
 8007364:	e659      	b.n	800701a <_printf_float+0xc2>
 8007366:	2301      	movs	r3, #1
 8007368:	4652      	mov	r2, sl
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f ae52 	beq.w	800701a <_printf_float+0xc2>
 8007376:	f108 0801 	add.w	r8, r8, #1
 800737a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800737c:	3b01      	subs	r3, #1
 800737e:	4543      	cmp	r3, r8
 8007380:	dcf1      	bgt.n	8007366 <_printf_float+0x40e>
 8007382:	464b      	mov	r3, r9
 8007384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007388:	e6dc      	b.n	8007144 <_printf_float+0x1ec>
 800738a:	f04f 0800 	mov.w	r8, #0
 800738e:	f104 0a1a 	add.w	sl, r4, #26
 8007392:	e7f2      	b.n	800737a <_printf_float+0x422>
 8007394:	2301      	movs	r3, #1
 8007396:	4642      	mov	r2, r8
 8007398:	e7df      	b.n	800735a <_printf_float+0x402>
 800739a:	2301      	movs	r3, #1
 800739c:	464a      	mov	r2, r9
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	f43f ae38 	beq.w	800701a <_printf_float+0xc2>
 80073aa:	f108 0801 	add.w	r8, r8, #1
 80073ae:	68e3      	ldr	r3, [r4, #12]
 80073b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073b2:	1a5b      	subs	r3, r3, r1
 80073b4:	4543      	cmp	r3, r8
 80073b6:	dcf0      	bgt.n	800739a <_printf_float+0x442>
 80073b8:	e6fa      	b.n	80071b0 <_printf_float+0x258>
 80073ba:	f04f 0800 	mov.w	r8, #0
 80073be:	f104 0919 	add.w	r9, r4, #25
 80073c2:	e7f4      	b.n	80073ae <_printf_float+0x456>

080073c4 <_printf_common>:
 80073c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	4616      	mov	r6, r2
 80073ca:	4699      	mov	r9, r3
 80073cc:	688a      	ldr	r2, [r1, #8]
 80073ce:	690b      	ldr	r3, [r1, #16]
 80073d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073d4:	4293      	cmp	r3, r2
 80073d6:	bfb8      	it	lt
 80073d8:	4613      	movlt	r3, r2
 80073da:	6033      	str	r3, [r6, #0]
 80073dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073e0:	4607      	mov	r7, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	b10a      	cbz	r2, 80073ea <_printf_common+0x26>
 80073e6:	3301      	adds	r3, #1
 80073e8:	6033      	str	r3, [r6, #0]
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	0699      	lsls	r1, r3, #26
 80073ee:	bf42      	ittt	mi
 80073f0:	6833      	ldrmi	r3, [r6, #0]
 80073f2:	3302      	addmi	r3, #2
 80073f4:	6033      	strmi	r3, [r6, #0]
 80073f6:	6825      	ldr	r5, [r4, #0]
 80073f8:	f015 0506 	ands.w	r5, r5, #6
 80073fc:	d106      	bne.n	800740c <_printf_common+0x48>
 80073fe:	f104 0a19 	add.w	sl, r4, #25
 8007402:	68e3      	ldr	r3, [r4, #12]
 8007404:	6832      	ldr	r2, [r6, #0]
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	42ab      	cmp	r3, r5
 800740a:	dc26      	bgt.n	800745a <_printf_common+0x96>
 800740c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007410:	1e13      	subs	r3, r2, #0
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	bf18      	it	ne
 8007416:	2301      	movne	r3, #1
 8007418:	0692      	lsls	r2, r2, #26
 800741a:	d42b      	bmi.n	8007474 <_printf_common+0xb0>
 800741c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007420:	4649      	mov	r1, r9
 8007422:	4638      	mov	r0, r7
 8007424:	47c0      	blx	r8
 8007426:	3001      	adds	r0, #1
 8007428:	d01e      	beq.n	8007468 <_printf_common+0xa4>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	68e5      	ldr	r5, [r4, #12]
 800742e:	6832      	ldr	r2, [r6, #0]
 8007430:	f003 0306 	and.w	r3, r3, #6
 8007434:	2b04      	cmp	r3, #4
 8007436:	bf08      	it	eq
 8007438:	1aad      	subeq	r5, r5, r2
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	6922      	ldr	r2, [r4, #16]
 800743e:	bf0c      	ite	eq
 8007440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007444:	2500      	movne	r5, #0
 8007446:	4293      	cmp	r3, r2
 8007448:	bfc4      	itt	gt
 800744a:	1a9b      	subgt	r3, r3, r2
 800744c:	18ed      	addgt	r5, r5, r3
 800744e:	2600      	movs	r6, #0
 8007450:	341a      	adds	r4, #26
 8007452:	42b5      	cmp	r5, r6
 8007454:	d11a      	bne.n	800748c <_printf_common+0xc8>
 8007456:	2000      	movs	r0, #0
 8007458:	e008      	b.n	800746c <_printf_common+0xa8>
 800745a:	2301      	movs	r3, #1
 800745c:	4652      	mov	r2, sl
 800745e:	4649      	mov	r1, r9
 8007460:	4638      	mov	r0, r7
 8007462:	47c0      	blx	r8
 8007464:	3001      	adds	r0, #1
 8007466:	d103      	bne.n	8007470 <_printf_common+0xac>
 8007468:	f04f 30ff 	mov.w	r0, #4294967295
 800746c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007470:	3501      	adds	r5, #1
 8007472:	e7c6      	b.n	8007402 <_printf_common+0x3e>
 8007474:	18e1      	adds	r1, r4, r3
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	2030      	movs	r0, #48	; 0x30
 800747a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800747e:	4422      	add	r2, r4
 8007480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007488:	3302      	adds	r3, #2
 800748a:	e7c7      	b.n	800741c <_printf_common+0x58>
 800748c:	2301      	movs	r3, #1
 800748e:	4622      	mov	r2, r4
 8007490:	4649      	mov	r1, r9
 8007492:	4638      	mov	r0, r7
 8007494:	47c0      	blx	r8
 8007496:	3001      	adds	r0, #1
 8007498:	d0e6      	beq.n	8007468 <_printf_common+0xa4>
 800749a:	3601      	adds	r6, #1
 800749c:	e7d9      	b.n	8007452 <_printf_common+0x8e>
	...

080074a0 <_printf_i>:
 80074a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a4:	7e0f      	ldrb	r7, [r1, #24]
 80074a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074a8:	2f78      	cmp	r7, #120	; 0x78
 80074aa:	4691      	mov	r9, r2
 80074ac:	4680      	mov	r8, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	469a      	mov	sl, r3
 80074b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074b6:	d807      	bhi.n	80074c8 <_printf_i+0x28>
 80074b8:	2f62      	cmp	r7, #98	; 0x62
 80074ba:	d80a      	bhi.n	80074d2 <_printf_i+0x32>
 80074bc:	2f00      	cmp	r7, #0
 80074be:	f000 80d8 	beq.w	8007672 <_printf_i+0x1d2>
 80074c2:	2f58      	cmp	r7, #88	; 0x58
 80074c4:	f000 80a3 	beq.w	800760e <_printf_i+0x16e>
 80074c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074d0:	e03a      	b.n	8007548 <_printf_i+0xa8>
 80074d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074d6:	2b15      	cmp	r3, #21
 80074d8:	d8f6      	bhi.n	80074c8 <_printf_i+0x28>
 80074da:	a101      	add	r1, pc, #4	; (adr r1, 80074e0 <_printf_i+0x40>)
 80074dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074e0:	08007539 	.word	0x08007539
 80074e4:	0800754d 	.word	0x0800754d
 80074e8:	080074c9 	.word	0x080074c9
 80074ec:	080074c9 	.word	0x080074c9
 80074f0:	080074c9 	.word	0x080074c9
 80074f4:	080074c9 	.word	0x080074c9
 80074f8:	0800754d 	.word	0x0800754d
 80074fc:	080074c9 	.word	0x080074c9
 8007500:	080074c9 	.word	0x080074c9
 8007504:	080074c9 	.word	0x080074c9
 8007508:	080074c9 	.word	0x080074c9
 800750c:	08007659 	.word	0x08007659
 8007510:	0800757d 	.word	0x0800757d
 8007514:	0800763b 	.word	0x0800763b
 8007518:	080074c9 	.word	0x080074c9
 800751c:	080074c9 	.word	0x080074c9
 8007520:	0800767b 	.word	0x0800767b
 8007524:	080074c9 	.word	0x080074c9
 8007528:	0800757d 	.word	0x0800757d
 800752c:	080074c9 	.word	0x080074c9
 8007530:	080074c9 	.word	0x080074c9
 8007534:	08007643 	.word	0x08007643
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	1d1a      	adds	r2, r3, #4
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	602a      	str	r2, [r5, #0]
 8007540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007548:	2301      	movs	r3, #1
 800754a:	e0a3      	b.n	8007694 <_printf_i+0x1f4>
 800754c:	6820      	ldr	r0, [r4, #0]
 800754e:	6829      	ldr	r1, [r5, #0]
 8007550:	0606      	lsls	r6, r0, #24
 8007552:	f101 0304 	add.w	r3, r1, #4
 8007556:	d50a      	bpl.n	800756e <_printf_i+0xce>
 8007558:	680e      	ldr	r6, [r1, #0]
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	2e00      	cmp	r6, #0
 800755e:	da03      	bge.n	8007568 <_printf_i+0xc8>
 8007560:	232d      	movs	r3, #45	; 0x2d
 8007562:	4276      	negs	r6, r6
 8007564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007568:	485e      	ldr	r0, [pc, #376]	; (80076e4 <_printf_i+0x244>)
 800756a:	230a      	movs	r3, #10
 800756c:	e019      	b.n	80075a2 <_printf_i+0x102>
 800756e:	680e      	ldr	r6, [r1, #0]
 8007570:	602b      	str	r3, [r5, #0]
 8007572:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007576:	bf18      	it	ne
 8007578:	b236      	sxthne	r6, r6
 800757a:	e7ef      	b.n	800755c <_printf_i+0xbc>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	6820      	ldr	r0, [r4, #0]
 8007580:	1d19      	adds	r1, r3, #4
 8007582:	6029      	str	r1, [r5, #0]
 8007584:	0601      	lsls	r1, r0, #24
 8007586:	d501      	bpl.n	800758c <_printf_i+0xec>
 8007588:	681e      	ldr	r6, [r3, #0]
 800758a:	e002      	b.n	8007592 <_printf_i+0xf2>
 800758c:	0646      	lsls	r6, r0, #25
 800758e:	d5fb      	bpl.n	8007588 <_printf_i+0xe8>
 8007590:	881e      	ldrh	r6, [r3, #0]
 8007592:	4854      	ldr	r0, [pc, #336]	; (80076e4 <_printf_i+0x244>)
 8007594:	2f6f      	cmp	r7, #111	; 0x6f
 8007596:	bf0c      	ite	eq
 8007598:	2308      	moveq	r3, #8
 800759a:	230a      	movne	r3, #10
 800759c:	2100      	movs	r1, #0
 800759e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075a2:	6865      	ldr	r5, [r4, #4]
 80075a4:	60a5      	str	r5, [r4, #8]
 80075a6:	2d00      	cmp	r5, #0
 80075a8:	bfa2      	ittt	ge
 80075aa:	6821      	ldrge	r1, [r4, #0]
 80075ac:	f021 0104 	bicge.w	r1, r1, #4
 80075b0:	6021      	strge	r1, [r4, #0]
 80075b2:	b90e      	cbnz	r6, 80075b8 <_printf_i+0x118>
 80075b4:	2d00      	cmp	r5, #0
 80075b6:	d04d      	beq.n	8007654 <_printf_i+0x1b4>
 80075b8:	4615      	mov	r5, r2
 80075ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80075be:	fb03 6711 	mls	r7, r3, r1, r6
 80075c2:	5dc7      	ldrb	r7, [r0, r7]
 80075c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075c8:	4637      	mov	r7, r6
 80075ca:	42bb      	cmp	r3, r7
 80075cc:	460e      	mov	r6, r1
 80075ce:	d9f4      	bls.n	80075ba <_printf_i+0x11a>
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d10b      	bne.n	80075ec <_printf_i+0x14c>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	07de      	lsls	r6, r3, #31
 80075d8:	d508      	bpl.n	80075ec <_printf_i+0x14c>
 80075da:	6923      	ldr	r3, [r4, #16]
 80075dc:	6861      	ldr	r1, [r4, #4]
 80075de:	4299      	cmp	r1, r3
 80075e0:	bfde      	ittt	le
 80075e2:	2330      	movle	r3, #48	; 0x30
 80075e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075ec:	1b52      	subs	r2, r2, r5
 80075ee:	6122      	str	r2, [r4, #16]
 80075f0:	f8cd a000 	str.w	sl, [sp]
 80075f4:	464b      	mov	r3, r9
 80075f6:	aa03      	add	r2, sp, #12
 80075f8:	4621      	mov	r1, r4
 80075fa:	4640      	mov	r0, r8
 80075fc:	f7ff fee2 	bl	80073c4 <_printf_common>
 8007600:	3001      	adds	r0, #1
 8007602:	d14c      	bne.n	800769e <_printf_i+0x1fe>
 8007604:	f04f 30ff 	mov.w	r0, #4294967295
 8007608:	b004      	add	sp, #16
 800760a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760e:	4835      	ldr	r0, [pc, #212]	; (80076e4 <_printf_i+0x244>)
 8007610:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007614:	6829      	ldr	r1, [r5, #0]
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	f851 6b04 	ldr.w	r6, [r1], #4
 800761c:	6029      	str	r1, [r5, #0]
 800761e:	061d      	lsls	r5, r3, #24
 8007620:	d514      	bpl.n	800764c <_printf_i+0x1ac>
 8007622:	07df      	lsls	r7, r3, #31
 8007624:	bf44      	itt	mi
 8007626:	f043 0320 	orrmi.w	r3, r3, #32
 800762a:	6023      	strmi	r3, [r4, #0]
 800762c:	b91e      	cbnz	r6, 8007636 <_printf_i+0x196>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	f023 0320 	bic.w	r3, r3, #32
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	2310      	movs	r3, #16
 8007638:	e7b0      	b.n	800759c <_printf_i+0xfc>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	f043 0320 	orr.w	r3, r3, #32
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	2378      	movs	r3, #120	; 0x78
 8007644:	4828      	ldr	r0, [pc, #160]	; (80076e8 <_printf_i+0x248>)
 8007646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800764a:	e7e3      	b.n	8007614 <_printf_i+0x174>
 800764c:	0659      	lsls	r1, r3, #25
 800764e:	bf48      	it	mi
 8007650:	b2b6      	uxthmi	r6, r6
 8007652:	e7e6      	b.n	8007622 <_printf_i+0x182>
 8007654:	4615      	mov	r5, r2
 8007656:	e7bb      	b.n	80075d0 <_printf_i+0x130>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	6826      	ldr	r6, [r4, #0]
 800765c:	6961      	ldr	r1, [r4, #20]
 800765e:	1d18      	adds	r0, r3, #4
 8007660:	6028      	str	r0, [r5, #0]
 8007662:	0635      	lsls	r5, r6, #24
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	d501      	bpl.n	800766c <_printf_i+0x1cc>
 8007668:	6019      	str	r1, [r3, #0]
 800766a:	e002      	b.n	8007672 <_printf_i+0x1d2>
 800766c:	0670      	lsls	r0, r6, #25
 800766e:	d5fb      	bpl.n	8007668 <_printf_i+0x1c8>
 8007670:	8019      	strh	r1, [r3, #0]
 8007672:	2300      	movs	r3, #0
 8007674:	6123      	str	r3, [r4, #16]
 8007676:	4615      	mov	r5, r2
 8007678:	e7ba      	b.n	80075f0 <_printf_i+0x150>
 800767a:	682b      	ldr	r3, [r5, #0]
 800767c:	1d1a      	adds	r2, r3, #4
 800767e:	602a      	str	r2, [r5, #0]
 8007680:	681d      	ldr	r5, [r3, #0]
 8007682:	6862      	ldr	r2, [r4, #4]
 8007684:	2100      	movs	r1, #0
 8007686:	4628      	mov	r0, r5
 8007688:	f7f8 fdb2 	bl	80001f0 <memchr>
 800768c:	b108      	cbz	r0, 8007692 <_printf_i+0x1f2>
 800768e:	1b40      	subs	r0, r0, r5
 8007690:	6060      	str	r0, [r4, #4]
 8007692:	6863      	ldr	r3, [r4, #4]
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	2300      	movs	r3, #0
 8007698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800769c:	e7a8      	b.n	80075f0 <_printf_i+0x150>
 800769e:	6923      	ldr	r3, [r4, #16]
 80076a0:	462a      	mov	r2, r5
 80076a2:	4649      	mov	r1, r9
 80076a4:	4640      	mov	r0, r8
 80076a6:	47d0      	blx	sl
 80076a8:	3001      	adds	r0, #1
 80076aa:	d0ab      	beq.n	8007604 <_printf_i+0x164>
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	079b      	lsls	r3, r3, #30
 80076b0:	d413      	bmi.n	80076da <_printf_i+0x23a>
 80076b2:	68e0      	ldr	r0, [r4, #12]
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	4298      	cmp	r0, r3
 80076b8:	bfb8      	it	lt
 80076ba:	4618      	movlt	r0, r3
 80076bc:	e7a4      	b.n	8007608 <_printf_i+0x168>
 80076be:	2301      	movs	r3, #1
 80076c0:	4632      	mov	r2, r6
 80076c2:	4649      	mov	r1, r9
 80076c4:	4640      	mov	r0, r8
 80076c6:	47d0      	blx	sl
 80076c8:	3001      	adds	r0, #1
 80076ca:	d09b      	beq.n	8007604 <_printf_i+0x164>
 80076cc:	3501      	adds	r5, #1
 80076ce:	68e3      	ldr	r3, [r4, #12]
 80076d0:	9903      	ldr	r1, [sp, #12]
 80076d2:	1a5b      	subs	r3, r3, r1
 80076d4:	42ab      	cmp	r3, r5
 80076d6:	dcf2      	bgt.n	80076be <_printf_i+0x21e>
 80076d8:	e7eb      	b.n	80076b2 <_printf_i+0x212>
 80076da:	2500      	movs	r5, #0
 80076dc:	f104 0619 	add.w	r6, r4, #25
 80076e0:	e7f5      	b.n	80076ce <_printf_i+0x22e>
 80076e2:	bf00      	nop
 80076e4:	0800a1ba 	.word	0x0800a1ba
 80076e8:	0800a1cb 	.word	0x0800a1cb

080076ec <cleanup_glue>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	460c      	mov	r4, r1
 80076f0:	6809      	ldr	r1, [r1, #0]
 80076f2:	4605      	mov	r5, r0
 80076f4:	b109      	cbz	r1, 80076fa <cleanup_glue+0xe>
 80076f6:	f7ff fff9 	bl	80076ec <cleanup_glue>
 80076fa:	4621      	mov	r1, r4
 80076fc:	4628      	mov	r0, r5
 80076fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007702:	f001 bc3d 	b.w	8008f80 <_free_r>
	...

08007708 <_reclaim_reent>:
 8007708:	4b2c      	ldr	r3, [pc, #176]	; (80077bc <_reclaim_reent+0xb4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4283      	cmp	r3, r0
 800770e:	b570      	push	{r4, r5, r6, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	d051      	beq.n	80077b8 <_reclaim_reent+0xb0>
 8007714:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007716:	b143      	cbz	r3, 800772a <_reclaim_reent+0x22>
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d14a      	bne.n	80077b4 <_reclaim_reent+0xac>
 800771e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007720:	6819      	ldr	r1, [r3, #0]
 8007722:	b111      	cbz	r1, 800772a <_reclaim_reent+0x22>
 8007724:	4620      	mov	r0, r4
 8007726:	f001 fc2b 	bl	8008f80 <_free_r>
 800772a:	6961      	ldr	r1, [r4, #20]
 800772c:	b111      	cbz	r1, 8007734 <_reclaim_reent+0x2c>
 800772e:	4620      	mov	r0, r4
 8007730:	f001 fc26 	bl	8008f80 <_free_r>
 8007734:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007736:	b111      	cbz	r1, 800773e <_reclaim_reent+0x36>
 8007738:	4620      	mov	r0, r4
 800773a:	f001 fc21 	bl	8008f80 <_free_r>
 800773e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007740:	b111      	cbz	r1, 8007748 <_reclaim_reent+0x40>
 8007742:	4620      	mov	r0, r4
 8007744:	f001 fc1c 	bl	8008f80 <_free_r>
 8007748:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800774a:	b111      	cbz	r1, 8007752 <_reclaim_reent+0x4a>
 800774c:	4620      	mov	r0, r4
 800774e:	f001 fc17 	bl	8008f80 <_free_r>
 8007752:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007754:	b111      	cbz	r1, 800775c <_reclaim_reent+0x54>
 8007756:	4620      	mov	r0, r4
 8007758:	f001 fc12 	bl	8008f80 <_free_r>
 800775c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800775e:	b111      	cbz	r1, 8007766 <_reclaim_reent+0x5e>
 8007760:	4620      	mov	r0, r4
 8007762:	f001 fc0d 	bl	8008f80 <_free_r>
 8007766:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007768:	b111      	cbz	r1, 8007770 <_reclaim_reent+0x68>
 800776a:	4620      	mov	r0, r4
 800776c:	f001 fc08 	bl	8008f80 <_free_r>
 8007770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007772:	b111      	cbz	r1, 800777a <_reclaim_reent+0x72>
 8007774:	4620      	mov	r0, r4
 8007776:	f001 fc03 	bl	8008f80 <_free_r>
 800777a:	69a3      	ldr	r3, [r4, #24]
 800777c:	b1e3      	cbz	r3, 80077b8 <_reclaim_reent+0xb0>
 800777e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007780:	4620      	mov	r0, r4
 8007782:	4798      	blx	r3
 8007784:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007786:	b1b9      	cbz	r1, 80077b8 <_reclaim_reent+0xb0>
 8007788:	4620      	mov	r0, r4
 800778a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800778e:	f7ff bfad 	b.w	80076ec <cleanup_glue>
 8007792:	5949      	ldr	r1, [r1, r5]
 8007794:	b941      	cbnz	r1, 80077a8 <_reclaim_reent+0xa0>
 8007796:	3504      	adds	r5, #4
 8007798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800779a:	2d80      	cmp	r5, #128	; 0x80
 800779c:	68d9      	ldr	r1, [r3, #12]
 800779e:	d1f8      	bne.n	8007792 <_reclaim_reent+0x8a>
 80077a0:	4620      	mov	r0, r4
 80077a2:	f001 fbed 	bl	8008f80 <_free_r>
 80077a6:	e7ba      	b.n	800771e <_reclaim_reent+0x16>
 80077a8:	680e      	ldr	r6, [r1, #0]
 80077aa:	4620      	mov	r0, r4
 80077ac:	f001 fbe8 	bl	8008f80 <_free_r>
 80077b0:	4631      	mov	r1, r6
 80077b2:	e7ef      	b.n	8007794 <_reclaim_reent+0x8c>
 80077b4:	2500      	movs	r5, #0
 80077b6:	e7ef      	b.n	8007798 <_reclaim_reent+0x90>
 80077b8:	bd70      	pop	{r4, r5, r6, pc}
 80077ba:	bf00      	nop
 80077bc:	20000020 	.word	0x20000020

080077c0 <_sbrk_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	4d06      	ldr	r5, [pc, #24]	; (80077dc <_sbrk_r+0x1c>)
 80077c4:	2300      	movs	r3, #0
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	602b      	str	r3, [r5, #0]
 80077cc:	f7fa f886 	bl	80018dc <_sbrk>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_sbrk_r+0x1a>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b103      	cbz	r3, 80077da <_sbrk_r+0x1a>
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	20004ce8 	.word	0x20004ce8

080077e0 <siprintf>:
 80077e0:	b40e      	push	{r1, r2, r3}
 80077e2:	b500      	push	{lr}
 80077e4:	b09c      	sub	sp, #112	; 0x70
 80077e6:	ab1d      	add	r3, sp, #116	; 0x74
 80077e8:	9002      	str	r0, [sp, #8]
 80077ea:	9006      	str	r0, [sp, #24]
 80077ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077f0:	4809      	ldr	r0, [pc, #36]	; (8007818 <siprintf+0x38>)
 80077f2:	9107      	str	r1, [sp, #28]
 80077f4:	9104      	str	r1, [sp, #16]
 80077f6:	4909      	ldr	r1, [pc, #36]	; (800781c <siprintf+0x3c>)
 80077f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fc:	9105      	str	r1, [sp, #20]
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	a902      	add	r1, sp, #8
 8007804:	f001 fc64 	bl	80090d0 <_svfiprintf_r>
 8007808:	9b02      	ldr	r3, [sp, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
 800780e:	b01c      	add	sp, #112	; 0x70
 8007810:	f85d eb04 	ldr.w	lr, [sp], #4
 8007814:	b003      	add	sp, #12
 8007816:	4770      	bx	lr
 8007818:	20000020 	.word	0x20000020
 800781c:	ffff0208 	.word	0xffff0208

08007820 <__sread>:
 8007820:	b510      	push	{r4, lr}
 8007822:	460c      	mov	r4, r1
 8007824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007828:	f001 fd52 	bl	80092d0 <_read_r>
 800782c:	2800      	cmp	r0, #0
 800782e:	bfab      	itete	ge
 8007830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007832:	89a3      	ldrhlt	r3, [r4, #12]
 8007834:	181b      	addge	r3, r3, r0
 8007836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800783a:	bfac      	ite	ge
 800783c:	6563      	strge	r3, [r4, #84]	; 0x54
 800783e:	81a3      	strhlt	r3, [r4, #12]
 8007840:	bd10      	pop	{r4, pc}

08007842 <__swrite>:
 8007842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007846:	461f      	mov	r7, r3
 8007848:	898b      	ldrh	r3, [r1, #12]
 800784a:	05db      	lsls	r3, r3, #23
 800784c:	4605      	mov	r5, r0
 800784e:	460c      	mov	r4, r1
 8007850:	4616      	mov	r6, r2
 8007852:	d505      	bpl.n	8007860 <__swrite+0x1e>
 8007854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007858:	2302      	movs	r3, #2
 800785a:	2200      	movs	r2, #0
 800785c:	f000 ffd0 	bl	8008800 <_lseek_r>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	4632      	mov	r2, r6
 800786e:	463b      	mov	r3, r7
 8007870:	4628      	mov	r0, r5
 8007872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007876:	f000 b85f 	b.w	8007938 <_write_r>

0800787a <__sseek>:
 800787a:	b510      	push	{r4, lr}
 800787c:	460c      	mov	r4, r1
 800787e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007882:	f000 ffbd 	bl	8008800 <_lseek_r>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	bf15      	itete	ne
 800788c:	6560      	strne	r0, [r4, #84]	; 0x54
 800788e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007896:	81a3      	strheq	r3, [r4, #12]
 8007898:	bf18      	it	ne
 800789a:	81a3      	strhne	r3, [r4, #12]
 800789c:	bd10      	pop	{r4, pc}

0800789e <__sclose>:
 800789e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a2:	f000 b85b 	b.w	800795c <_close_r>

080078a6 <strcat>:
 80078a6:	b510      	push	{r4, lr}
 80078a8:	4602      	mov	r2, r0
 80078aa:	7814      	ldrb	r4, [r2, #0]
 80078ac:	4613      	mov	r3, r2
 80078ae:	3201      	adds	r2, #1
 80078b0:	2c00      	cmp	r4, #0
 80078b2:	d1fa      	bne.n	80078aa <strcat+0x4>
 80078b4:	3b01      	subs	r3, #1
 80078b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078be:	2a00      	cmp	r2, #0
 80078c0:	d1f9      	bne.n	80078b6 <strcat+0x10>
 80078c2:	bd10      	pop	{r4, pc}

080078c4 <_vsniprintf_r>:
 80078c4:	b530      	push	{r4, r5, lr}
 80078c6:	4614      	mov	r4, r2
 80078c8:	2c00      	cmp	r4, #0
 80078ca:	b09b      	sub	sp, #108	; 0x6c
 80078cc:	4605      	mov	r5, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	da05      	bge.n	80078de <_vsniprintf_r+0x1a>
 80078d2:	238b      	movs	r3, #139	; 0x8b
 80078d4:	6003      	str	r3, [r0, #0]
 80078d6:	f04f 30ff 	mov.w	r0, #4294967295
 80078da:	b01b      	add	sp, #108	; 0x6c
 80078dc:	bd30      	pop	{r4, r5, pc}
 80078de:	f44f 7302 	mov.w	r3, #520	; 0x208
 80078e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80078e6:	bf14      	ite	ne
 80078e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078ec:	4623      	moveq	r3, r4
 80078ee:	9302      	str	r3, [sp, #8]
 80078f0:	9305      	str	r3, [sp, #20]
 80078f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078f6:	9100      	str	r1, [sp, #0]
 80078f8:	9104      	str	r1, [sp, #16]
 80078fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80078fe:	4669      	mov	r1, sp
 8007900:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007902:	f001 fbe5 	bl	80090d0 <_svfiprintf_r>
 8007906:	1c43      	adds	r3, r0, #1
 8007908:	bfbc      	itt	lt
 800790a:	238b      	movlt	r3, #139	; 0x8b
 800790c:	602b      	strlt	r3, [r5, #0]
 800790e:	2c00      	cmp	r4, #0
 8007910:	d0e3      	beq.n	80078da <_vsniprintf_r+0x16>
 8007912:	9b00      	ldr	r3, [sp, #0]
 8007914:	2200      	movs	r2, #0
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	e7df      	b.n	80078da <_vsniprintf_r+0x16>
	...

0800791c <vsniprintf>:
 800791c:	b507      	push	{r0, r1, r2, lr}
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	460a      	mov	r2, r1
 8007924:	4601      	mov	r1, r0
 8007926:	4803      	ldr	r0, [pc, #12]	; (8007934 <vsniprintf+0x18>)
 8007928:	6800      	ldr	r0, [r0, #0]
 800792a:	f7ff ffcb 	bl	80078c4 <_vsniprintf_r>
 800792e:	b003      	add	sp, #12
 8007930:	f85d fb04 	ldr.w	pc, [sp], #4
 8007934:	20000020 	.word	0x20000020

08007938 <_write_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d07      	ldr	r5, [pc, #28]	; (8007958 <_write_r+0x20>)
 800793c:	4604      	mov	r4, r0
 800793e:	4608      	mov	r0, r1
 8007940:	4611      	mov	r1, r2
 8007942:	2200      	movs	r2, #0
 8007944:	602a      	str	r2, [r5, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	f7f9 ff77 	bl	800183a <_write>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d102      	bne.n	8007956 <_write_r+0x1e>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	b103      	cbz	r3, 8007956 <_write_r+0x1e>
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	20004ce8 	.word	0x20004ce8

0800795c <_close_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d06      	ldr	r5, [pc, #24]	; (8007978 <_close_r+0x1c>)
 8007960:	2300      	movs	r3, #0
 8007962:	4604      	mov	r4, r0
 8007964:	4608      	mov	r0, r1
 8007966:	602b      	str	r3, [r5, #0]
 8007968:	f7f9 ff83 	bl	8001872 <_close>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_close_r+0x1a>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_close_r+0x1a>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	20004ce8 	.word	0x20004ce8

0800797c <quorem>:
 800797c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	6903      	ldr	r3, [r0, #16]
 8007982:	690c      	ldr	r4, [r1, #16]
 8007984:	42a3      	cmp	r3, r4
 8007986:	4607      	mov	r7, r0
 8007988:	f2c0 8081 	blt.w	8007a8e <quorem+0x112>
 800798c:	3c01      	subs	r4, #1
 800798e:	f101 0814 	add.w	r8, r1, #20
 8007992:	f100 0514 	add.w	r5, r0, #20
 8007996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800799a:	9301      	str	r3, [sp, #4]
 800799c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079a4:	3301      	adds	r3, #1
 80079a6:	429a      	cmp	r2, r3
 80079a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80079b4:	d331      	bcc.n	8007a1a <quorem+0x9e>
 80079b6:	f04f 0e00 	mov.w	lr, #0
 80079ba:	4640      	mov	r0, r8
 80079bc:	46ac      	mov	ip, r5
 80079be:	46f2      	mov	sl, lr
 80079c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80079c4:	b293      	uxth	r3, r2
 80079c6:	fb06 e303 	mla	r3, r6, r3, lr
 80079ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ebaa 0303 	sub.w	r3, sl, r3
 80079d4:	f8dc a000 	ldr.w	sl, [ip]
 80079d8:	0c12      	lsrs	r2, r2, #16
 80079da:	fa13 f38a 	uxtah	r3, r3, sl
 80079de:	fb06 e202 	mla	r2, r6, r2, lr
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	9b00      	ldr	r3, [sp, #0]
 80079e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079ea:	b292      	uxth	r2, r2
 80079ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80079f8:	4581      	cmp	r9, r0
 80079fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079fe:	f84c 3b04 	str.w	r3, [ip], #4
 8007a02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a06:	d2db      	bcs.n	80079c0 <quorem+0x44>
 8007a08:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a0c:	b92b      	cbnz	r3, 8007a1a <quorem+0x9e>
 8007a0e:	9b01      	ldr	r3, [sp, #4]
 8007a10:	3b04      	subs	r3, #4
 8007a12:	429d      	cmp	r5, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	d32e      	bcc.n	8007a76 <quorem+0xfa>
 8007a18:	613c      	str	r4, [r7, #16]
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	f001 f998 	bl	8008d50 <__mcmp>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	db24      	blt.n	8007a6e <quorem+0xf2>
 8007a24:	3601      	adds	r6, #1
 8007a26:	4628      	mov	r0, r5
 8007a28:	f04f 0c00 	mov.w	ip, #0
 8007a2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a30:	f8d0 e000 	ldr.w	lr, [r0]
 8007a34:	b293      	uxth	r3, r2
 8007a36:	ebac 0303 	sub.w	r3, ip, r3
 8007a3a:	0c12      	lsrs	r2, r2, #16
 8007a3c:	fa13 f38e 	uxtah	r3, r3, lr
 8007a40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a4e:	45c1      	cmp	r9, r8
 8007a50:	f840 3b04 	str.w	r3, [r0], #4
 8007a54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a58:	d2e8      	bcs.n	8007a2c <quorem+0xb0>
 8007a5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a62:	b922      	cbnz	r2, 8007a6e <quorem+0xf2>
 8007a64:	3b04      	subs	r3, #4
 8007a66:	429d      	cmp	r5, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	d30a      	bcc.n	8007a82 <quorem+0x106>
 8007a6c:	613c      	str	r4, [r7, #16]
 8007a6e:	4630      	mov	r0, r6
 8007a70:	b003      	add	sp, #12
 8007a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	3b04      	subs	r3, #4
 8007a7a:	2a00      	cmp	r2, #0
 8007a7c:	d1cc      	bne.n	8007a18 <quorem+0x9c>
 8007a7e:	3c01      	subs	r4, #1
 8007a80:	e7c7      	b.n	8007a12 <quorem+0x96>
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	3b04      	subs	r3, #4
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	d1f0      	bne.n	8007a6c <quorem+0xf0>
 8007a8a:	3c01      	subs	r4, #1
 8007a8c:	e7eb      	b.n	8007a66 <quorem+0xea>
 8007a8e:	2000      	movs	r0, #0
 8007a90:	e7ee      	b.n	8007a70 <quorem+0xf4>
 8007a92:	0000      	movs	r0, r0
 8007a94:	0000      	movs	r0, r0
	...

08007a98 <_dtoa_r>:
 8007a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	ed2d 8b04 	vpush	{d8-d9}
 8007aa0:	ec57 6b10 	vmov	r6, r7, d0
 8007aa4:	b093      	sub	sp, #76	; 0x4c
 8007aa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007aa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007aac:	9106      	str	r1, [sp, #24]
 8007aae:	ee10 aa10 	vmov	sl, s0
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ab8:	46bb      	mov	fp, r7
 8007aba:	b975      	cbnz	r5, 8007ada <_dtoa_r+0x42>
 8007abc:	2010      	movs	r0, #16
 8007abe:	f000 feb1 	bl	8008824 <malloc>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ac6:	b920      	cbnz	r0, 8007ad2 <_dtoa_r+0x3a>
 8007ac8:	4ba7      	ldr	r3, [pc, #668]	; (8007d68 <_dtoa_r+0x2d0>)
 8007aca:	21ea      	movs	r1, #234	; 0xea
 8007acc:	48a7      	ldr	r0, [pc, #668]	; (8007d6c <_dtoa_r+0x2d4>)
 8007ace:	f001 fc11 	bl	80092f4 <__assert_func>
 8007ad2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ad6:	6005      	str	r5, [r0, #0]
 8007ad8:	60c5      	str	r5, [r0, #12]
 8007ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007adc:	6819      	ldr	r1, [r3, #0]
 8007ade:	b151      	cbz	r1, 8007af6 <_dtoa_r+0x5e>
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	604a      	str	r2, [r1, #4]
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	4093      	lsls	r3, r2
 8007ae8:	608b      	str	r3, [r1, #8]
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 feee 	bl	80088cc <_Bfree>
 8007af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	1e3b      	subs	r3, r7, #0
 8007af8:	bfaa      	itet	ge
 8007afa:	2300      	movge	r3, #0
 8007afc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b00:	f8c8 3000 	strge.w	r3, [r8]
 8007b04:	4b9a      	ldr	r3, [pc, #616]	; (8007d70 <_dtoa_r+0x2d8>)
 8007b06:	bfbc      	itt	lt
 8007b08:	2201      	movlt	r2, #1
 8007b0a:	f8c8 2000 	strlt.w	r2, [r8]
 8007b0e:	ea33 030b 	bics.w	r3, r3, fp
 8007b12:	d11b      	bne.n	8007b4c <_dtoa_r+0xb4>
 8007b14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b16:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b20:	4333      	orrs	r3, r6
 8007b22:	f000 8592 	beq.w	800864a <_dtoa_r+0xbb2>
 8007b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b28:	b963      	cbnz	r3, 8007b44 <_dtoa_r+0xac>
 8007b2a:	4b92      	ldr	r3, [pc, #584]	; (8007d74 <_dtoa_r+0x2dc>)
 8007b2c:	e022      	b.n	8007b74 <_dtoa_r+0xdc>
 8007b2e:	4b92      	ldr	r3, [pc, #584]	; (8007d78 <_dtoa_r+0x2e0>)
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	3308      	adds	r3, #8
 8007b34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	9801      	ldr	r0, [sp, #4]
 8007b3a:	b013      	add	sp, #76	; 0x4c
 8007b3c:	ecbd 8b04 	vpop	{d8-d9}
 8007b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b44:	4b8b      	ldr	r3, [pc, #556]	; (8007d74 <_dtoa_r+0x2dc>)
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	3303      	adds	r3, #3
 8007b4a:	e7f3      	b.n	8007b34 <_dtoa_r+0x9c>
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4650      	mov	r0, sl
 8007b52:	4659      	mov	r1, fp
 8007b54:	f7f8 ffc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b58:	ec4b ab19 	vmov	d9, sl, fp
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	b158      	cbz	r0, 8007b78 <_dtoa_r+0xe0>
 8007b60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b62:	2301      	movs	r3, #1
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 856b 	beq.w	8008644 <_dtoa_r+0xbac>
 8007b6e:	4883      	ldr	r0, [pc, #524]	; (8007d7c <_dtoa_r+0x2e4>)
 8007b70:	6018      	str	r0, [r3, #0]
 8007b72:	1e43      	subs	r3, r0, #1
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	e7df      	b.n	8007b38 <_dtoa_r+0xa0>
 8007b78:	ec4b ab10 	vmov	d0, sl, fp
 8007b7c:	aa10      	add	r2, sp, #64	; 0x40
 8007b7e:	a911      	add	r1, sp, #68	; 0x44
 8007b80:	4620      	mov	r0, r4
 8007b82:	f001 f98b 	bl	8008e9c <__d2b>
 8007b86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b8a:	ee08 0a10 	vmov	s16, r0
 8007b8e:	2d00      	cmp	r5, #0
 8007b90:	f000 8084 	beq.w	8007c9c <_dtoa_r+0x204>
 8007b94:	ee19 3a90 	vmov	r3, s19
 8007b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ba0:	4656      	mov	r6, sl
 8007ba2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007ba6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007baa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007bae:	4b74      	ldr	r3, [pc, #464]	; (8007d80 <_dtoa_r+0x2e8>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	4639      	mov	r1, r7
 8007bb6:	f7f8 fb6f 	bl	8000298 <__aeabi_dsub>
 8007bba:	a365      	add	r3, pc, #404	; (adr r3, 8007d50 <_dtoa_r+0x2b8>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f7f8 fd22 	bl	8000608 <__aeabi_dmul>
 8007bc4:	a364      	add	r3, pc, #400	; (adr r3, 8007d58 <_dtoa_r+0x2c0>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f7f8 fb67 	bl	800029c <__adddf3>
 8007bce:	4606      	mov	r6, r0
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	460f      	mov	r7, r1
 8007bd4:	f7f8 fcae 	bl	8000534 <__aeabi_i2d>
 8007bd8:	a361      	add	r3, pc, #388	; (adr r3, 8007d60 <_dtoa_r+0x2c8>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fd13 	bl	8000608 <__aeabi_dmul>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4630      	mov	r0, r6
 8007be8:	4639      	mov	r1, r7
 8007bea:	f7f8 fb57 	bl	800029c <__adddf3>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	460f      	mov	r7, r1
 8007bf2:	f7f8 ffb9 	bl	8000b68 <__aeabi_d2iz>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	9000      	str	r0, [sp, #0]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	4639      	mov	r1, r7
 8007c00:	f7f8 ff74 	bl	8000aec <__aeabi_dcmplt>
 8007c04:	b150      	cbz	r0, 8007c1c <_dtoa_r+0x184>
 8007c06:	9800      	ldr	r0, [sp, #0]
 8007c08:	f7f8 fc94 	bl	8000534 <__aeabi_i2d>
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	463b      	mov	r3, r7
 8007c10:	f7f8 ff62 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c14:	b910      	cbnz	r0, 8007c1c <_dtoa_r+0x184>
 8007c16:	9b00      	ldr	r3, [sp, #0]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	9b00      	ldr	r3, [sp, #0]
 8007c1e:	2b16      	cmp	r3, #22
 8007c20:	d85a      	bhi.n	8007cd8 <_dtoa_r+0x240>
 8007c22:	9a00      	ldr	r2, [sp, #0]
 8007c24:	4b57      	ldr	r3, [pc, #348]	; (8007d84 <_dtoa_r+0x2ec>)
 8007c26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2e:	ec51 0b19 	vmov	r0, r1, d9
 8007c32:	f7f8 ff5b 	bl	8000aec <__aeabi_dcmplt>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d050      	beq.n	8007cdc <_dtoa_r+0x244>
 8007c3a:	9b00      	ldr	r3, [sp, #0]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	2300      	movs	r3, #0
 8007c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c46:	1b5d      	subs	r5, r3, r5
 8007c48:	1e6b      	subs	r3, r5, #1
 8007c4a:	9305      	str	r3, [sp, #20]
 8007c4c:	bf45      	ittet	mi
 8007c4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c52:	9304      	strmi	r3, [sp, #16]
 8007c54:	2300      	movpl	r3, #0
 8007c56:	2300      	movmi	r3, #0
 8007c58:	bf4c      	ite	mi
 8007c5a:	9305      	strmi	r3, [sp, #20]
 8007c5c:	9304      	strpl	r3, [sp, #16]
 8007c5e:	9b00      	ldr	r3, [sp, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	db3d      	blt.n	8007ce0 <_dtoa_r+0x248>
 8007c64:	9b05      	ldr	r3, [sp, #20]
 8007c66:	9a00      	ldr	r2, [sp, #0]
 8007c68:	920a      	str	r2, [sp, #40]	; 0x28
 8007c6a:	4413      	add	r3, r2
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9307      	str	r3, [sp, #28]
 8007c72:	9b06      	ldr	r3, [sp, #24]
 8007c74:	2b09      	cmp	r3, #9
 8007c76:	f200 8089 	bhi.w	8007d8c <_dtoa_r+0x2f4>
 8007c7a:	2b05      	cmp	r3, #5
 8007c7c:	bfc4      	itt	gt
 8007c7e:	3b04      	subgt	r3, #4
 8007c80:	9306      	strgt	r3, [sp, #24]
 8007c82:	9b06      	ldr	r3, [sp, #24]
 8007c84:	f1a3 0302 	sub.w	r3, r3, #2
 8007c88:	bfcc      	ite	gt
 8007c8a:	2500      	movgt	r5, #0
 8007c8c:	2501      	movle	r5, #1
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	f200 8087 	bhi.w	8007da2 <_dtoa_r+0x30a>
 8007c94:	e8df f003 	tbb	[pc, r3]
 8007c98:	59383a2d 	.word	0x59383a2d
 8007c9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ca0:	441d      	add	r5, r3
 8007ca2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	bfc1      	itttt	gt
 8007caa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007cb2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007cb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cba:	bfda      	itte	le
 8007cbc:	f1c3 0320 	rsble	r3, r3, #32
 8007cc0:	fa06 f003 	lslle.w	r0, r6, r3
 8007cc4:	4318      	orrgt	r0, r3
 8007cc6:	f7f8 fc25 	bl	8000514 <__aeabi_ui2d>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4606      	mov	r6, r0
 8007cce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007cd2:	3d01      	subs	r5, #1
 8007cd4:	930e      	str	r3, [sp, #56]	; 0x38
 8007cd6:	e76a      	b.n	8007bae <_dtoa_r+0x116>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e7b2      	b.n	8007c42 <_dtoa_r+0x1aa>
 8007cdc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007cde:	e7b1      	b.n	8007c44 <_dtoa_r+0x1ac>
 8007ce0:	9b04      	ldr	r3, [sp, #16]
 8007ce2:	9a00      	ldr	r2, [sp, #0]
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	9304      	str	r3, [sp, #16]
 8007ce8:	4253      	negs	r3, r2
 8007cea:	9307      	str	r3, [sp, #28]
 8007cec:	2300      	movs	r3, #0
 8007cee:	930a      	str	r3, [sp, #40]	; 0x28
 8007cf0:	e7bf      	b.n	8007c72 <_dtoa_r+0x1da>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	9308      	str	r3, [sp, #32]
 8007cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dc55      	bgt.n	8007da8 <_dtoa_r+0x310>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d02:	461a      	mov	r2, r3
 8007d04:	9209      	str	r2, [sp, #36]	; 0x24
 8007d06:	e00c      	b.n	8007d22 <_dtoa_r+0x28a>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e7f3      	b.n	8007cf4 <_dtoa_r+0x25c>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d10:	9308      	str	r3, [sp, #32]
 8007d12:	9b00      	ldr	r3, [sp, #0]
 8007d14:	4413      	add	r3, r2
 8007d16:	9302      	str	r3, [sp, #8]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	9303      	str	r3, [sp, #12]
 8007d1e:	bfb8      	it	lt
 8007d20:	2301      	movlt	r3, #1
 8007d22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d24:	2200      	movs	r2, #0
 8007d26:	6042      	str	r2, [r0, #4]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	f102 0614 	add.w	r6, r2, #20
 8007d2e:	429e      	cmp	r6, r3
 8007d30:	6841      	ldr	r1, [r0, #4]
 8007d32:	d93d      	bls.n	8007db0 <_dtoa_r+0x318>
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 fd89 	bl	800884c <_Balloc>
 8007d3a:	9001      	str	r0, [sp, #4]
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d13b      	bne.n	8007db8 <_dtoa_r+0x320>
 8007d40:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <_dtoa_r+0x2f0>)
 8007d42:	4602      	mov	r2, r0
 8007d44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d48:	e6c0      	b.n	8007acc <_dtoa_r+0x34>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e7df      	b.n	8007d0e <_dtoa_r+0x276>
 8007d4e:	bf00      	nop
 8007d50:	636f4361 	.word	0x636f4361
 8007d54:	3fd287a7 	.word	0x3fd287a7
 8007d58:	8b60c8b3 	.word	0x8b60c8b3
 8007d5c:	3fc68a28 	.word	0x3fc68a28
 8007d60:	509f79fb 	.word	0x509f79fb
 8007d64:	3fd34413 	.word	0x3fd34413
 8007d68:	0800a1e9 	.word	0x0800a1e9
 8007d6c:	0800a200 	.word	0x0800a200
 8007d70:	7ff00000 	.word	0x7ff00000
 8007d74:	0800a1e5 	.word	0x0800a1e5
 8007d78:	0800a1dc 	.word	0x0800a1dc
 8007d7c:	0800a1b9 	.word	0x0800a1b9
 8007d80:	3ff80000 	.word	0x3ff80000
 8007d84:	0800a2f0 	.word	0x0800a2f0
 8007d88:	0800a25b 	.word	0x0800a25b
 8007d8c:	2501      	movs	r5, #1
 8007d8e:	2300      	movs	r3, #0
 8007d90:	9306      	str	r3, [sp, #24]
 8007d92:	9508      	str	r5, [sp, #32]
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295
 8007d98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2312      	movs	r3, #18
 8007da0:	e7b0      	b.n	8007d04 <_dtoa_r+0x26c>
 8007da2:	2301      	movs	r3, #1
 8007da4:	9308      	str	r3, [sp, #32]
 8007da6:	e7f5      	b.n	8007d94 <_dtoa_r+0x2fc>
 8007da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007daa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007dae:	e7b8      	b.n	8007d22 <_dtoa_r+0x28a>
 8007db0:	3101      	adds	r1, #1
 8007db2:	6041      	str	r1, [r0, #4]
 8007db4:	0052      	lsls	r2, r2, #1
 8007db6:	e7b8      	b.n	8007d2a <_dtoa_r+0x292>
 8007db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dba:	9a01      	ldr	r2, [sp, #4]
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	2b0e      	cmp	r3, #14
 8007dc2:	f200 809d 	bhi.w	8007f00 <_dtoa_r+0x468>
 8007dc6:	2d00      	cmp	r5, #0
 8007dc8:	f000 809a 	beq.w	8007f00 <_dtoa_r+0x468>
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	dd32      	ble.n	8007e38 <_dtoa_r+0x3a0>
 8007dd2:	4ab7      	ldr	r2, [pc, #732]	; (80080b0 <_dtoa_r+0x618>)
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007de0:	9b00      	ldr	r3, [sp, #0]
 8007de2:	05d8      	lsls	r0, r3, #23
 8007de4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007de8:	d516      	bpl.n	8007e18 <_dtoa_r+0x380>
 8007dea:	4bb2      	ldr	r3, [pc, #712]	; (80080b4 <_dtoa_r+0x61c>)
 8007dec:	ec51 0b19 	vmov	r0, r1, d9
 8007df0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007df4:	f7f8 fd32 	bl	800085c <__aeabi_ddiv>
 8007df8:	f007 070f 	and.w	r7, r7, #15
 8007dfc:	4682      	mov	sl, r0
 8007dfe:	468b      	mov	fp, r1
 8007e00:	2503      	movs	r5, #3
 8007e02:	4eac      	ldr	r6, [pc, #688]	; (80080b4 <_dtoa_r+0x61c>)
 8007e04:	b957      	cbnz	r7, 8007e1c <_dtoa_r+0x384>
 8007e06:	4642      	mov	r2, r8
 8007e08:	464b      	mov	r3, r9
 8007e0a:	4650      	mov	r0, sl
 8007e0c:	4659      	mov	r1, fp
 8007e0e:	f7f8 fd25 	bl	800085c <__aeabi_ddiv>
 8007e12:	4682      	mov	sl, r0
 8007e14:	468b      	mov	fp, r1
 8007e16:	e028      	b.n	8007e6a <_dtoa_r+0x3d2>
 8007e18:	2502      	movs	r5, #2
 8007e1a:	e7f2      	b.n	8007e02 <_dtoa_r+0x36a>
 8007e1c:	07f9      	lsls	r1, r7, #31
 8007e1e:	d508      	bpl.n	8007e32 <_dtoa_r+0x39a>
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e28:	f7f8 fbee 	bl	8000608 <__aeabi_dmul>
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	4680      	mov	r8, r0
 8007e30:	4689      	mov	r9, r1
 8007e32:	107f      	asrs	r7, r7, #1
 8007e34:	3608      	adds	r6, #8
 8007e36:	e7e5      	b.n	8007e04 <_dtoa_r+0x36c>
 8007e38:	f000 809b 	beq.w	8007f72 <_dtoa_r+0x4da>
 8007e3c:	9b00      	ldr	r3, [sp, #0]
 8007e3e:	4f9d      	ldr	r7, [pc, #628]	; (80080b4 <_dtoa_r+0x61c>)
 8007e40:	425e      	negs	r6, r3
 8007e42:	4b9b      	ldr	r3, [pc, #620]	; (80080b0 <_dtoa_r+0x618>)
 8007e44:	f006 020f 	and.w	r2, r6, #15
 8007e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	ec51 0b19 	vmov	r0, r1, d9
 8007e54:	f7f8 fbd8 	bl	8000608 <__aeabi_dmul>
 8007e58:	1136      	asrs	r6, r6, #4
 8007e5a:	4682      	mov	sl, r0
 8007e5c:	468b      	mov	fp, r1
 8007e5e:	2300      	movs	r3, #0
 8007e60:	2502      	movs	r5, #2
 8007e62:	2e00      	cmp	r6, #0
 8007e64:	d17a      	bne.n	8007f5c <_dtoa_r+0x4c4>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1d3      	bne.n	8007e12 <_dtoa_r+0x37a>
 8007e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 8082 	beq.w	8007f76 <_dtoa_r+0x4de>
 8007e72:	4b91      	ldr	r3, [pc, #580]	; (80080b8 <_dtoa_r+0x620>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	4650      	mov	r0, sl
 8007e78:	4659      	mov	r1, fp
 8007e7a:	f7f8 fe37 	bl	8000aec <__aeabi_dcmplt>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d079      	beq.n	8007f76 <_dtoa_r+0x4de>
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d076      	beq.n	8007f76 <_dtoa_r+0x4de>
 8007e88:	9b02      	ldr	r3, [sp, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	dd36      	ble.n	8007efc <_dtoa_r+0x464>
 8007e8e:	9b00      	ldr	r3, [sp, #0]
 8007e90:	4650      	mov	r0, sl
 8007e92:	4659      	mov	r1, fp
 8007e94:	1e5f      	subs	r7, r3, #1
 8007e96:	2200      	movs	r2, #0
 8007e98:	4b88      	ldr	r3, [pc, #544]	; (80080bc <_dtoa_r+0x624>)
 8007e9a:	f7f8 fbb5 	bl	8000608 <__aeabi_dmul>
 8007e9e:	9e02      	ldr	r6, [sp, #8]
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	468b      	mov	fp, r1
 8007ea4:	3501      	adds	r5, #1
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f7f8 fb44 	bl	8000534 <__aeabi_i2d>
 8007eac:	4652      	mov	r2, sl
 8007eae:	465b      	mov	r3, fp
 8007eb0:	f7f8 fbaa 	bl	8000608 <__aeabi_dmul>
 8007eb4:	4b82      	ldr	r3, [pc, #520]	; (80080c0 <_dtoa_r+0x628>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f7f8 f9f0 	bl	800029c <__adddf3>
 8007ebc:	46d0      	mov	r8, sl
 8007ebe:	46d9      	mov	r9, fp
 8007ec0:	4682      	mov	sl, r0
 8007ec2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ec6:	2e00      	cmp	r6, #0
 8007ec8:	d158      	bne.n	8007f7c <_dtoa_r+0x4e4>
 8007eca:	4b7e      	ldr	r3, [pc, #504]	; (80080c4 <_dtoa_r+0x62c>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	4640      	mov	r0, r8
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	f7f8 f9e1 	bl	8000298 <__aeabi_dsub>
 8007ed6:	4652      	mov	r2, sl
 8007ed8:	465b      	mov	r3, fp
 8007eda:	4680      	mov	r8, r0
 8007edc:	4689      	mov	r9, r1
 8007ede:	f7f8 fe23 	bl	8000b28 <__aeabi_dcmpgt>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	f040 8295 	bne.w	8008412 <_dtoa_r+0x97a>
 8007ee8:	4652      	mov	r2, sl
 8007eea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007eee:	4640      	mov	r0, r8
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	f7f8 fdfb 	bl	8000aec <__aeabi_dcmplt>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f040 8289 	bne.w	800840e <_dtoa_r+0x976>
 8007efc:	ec5b ab19 	vmov	sl, fp, d9
 8007f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f2c0 8148 	blt.w	8008198 <_dtoa_r+0x700>
 8007f08:	9a00      	ldr	r2, [sp, #0]
 8007f0a:	2a0e      	cmp	r2, #14
 8007f0c:	f300 8144 	bgt.w	8008198 <_dtoa_r+0x700>
 8007f10:	4b67      	ldr	r3, [pc, #412]	; (80080b0 <_dtoa_r+0x618>)
 8007f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f280 80d5 	bge.w	80080cc <_dtoa_r+0x634>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f300 80d1 	bgt.w	80080cc <_dtoa_r+0x634>
 8007f2a:	f040 826f 	bne.w	800840c <_dtoa_r+0x974>
 8007f2e:	4b65      	ldr	r3, [pc, #404]	; (80080c4 <_dtoa_r+0x62c>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	4640      	mov	r0, r8
 8007f34:	4649      	mov	r1, r9
 8007f36:	f7f8 fb67 	bl	8000608 <__aeabi_dmul>
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	f7f8 fde9 	bl	8000b14 <__aeabi_dcmpge>
 8007f42:	9e03      	ldr	r6, [sp, #12]
 8007f44:	4637      	mov	r7, r6
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f040 8245 	bne.w	80083d6 <_dtoa_r+0x93e>
 8007f4c:	9d01      	ldr	r5, [sp, #4]
 8007f4e:	2331      	movs	r3, #49	; 0x31
 8007f50:	f805 3b01 	strb.w	r3, [r5], #1
 8007f54:	9b00      	ldr	r3, [sp, #0]
 8007f56:	3301      	adds	r3, #1
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	e240      	b.n	80083de <_dtoa_r+0x946>
 8007f5c:	07f2      	lsls	r2, r6, #31
 8007f5e:	d505      	bpl.n	8007f6c <_dtoa_r+0x4d4>
 8007f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f64:	f7f8 fb50 	bl	8000608 <__aeabi_dmul>
 8007f68:	3501      	adds	r5, #1
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	1076      	asrs	r6, r6, #1
 8007f6e:	3708      	adds	r7, #8
 8007f70:	e777      	b.n	8007e62 <_dtoa_r+0x3ca>
 8007f72:	2502      	movs	r5, #2
 8007f74:	e779      	b.n	8007e6a <_dtoa_r+0x3d2>
 8007f76:	9f00      	ldr	r7, [sp, #0]
 8007f78:	9e03      	ldr	r6, [sp, #12]
 8007f7a:	e794      	b.n	8007ea6 <_dtoa_r+0x40e>
 8007f7c:	9901      	ldr	r1, [sp, #4]
 8007f7e:	4b4c      	ldr	r3, [pc, #304]	; (80080b0 <_dtoa_r+0x618>)
 8007f80:	4431      	add	r1, r6
 8007f82:	910d      	str	r1, [sp, #52]	; 0x34
 8007f84:	9908      	ldr	r1, [sp, #32]
 8007f86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d043      	beq.n	800801a <_dtoa_r+0x582>
 8007f92:	494d      	ldr	r1, [pc, #308]	; (80080c8 <_dtoa_r+0x630>)
 8007f94:	2000      	movs	r0, #0
 8007f96:	f7f8 fc61 	bl	800085c <__aeabi_ddiv>
 8007f9a:	4652      	mov	r2, sl
 8007f9c:	465b      	mov	r3, fp
 8007f9e:	f7f8 f97b 	bl	8000298 <__aeabi_dsub>
 8007fa2:	9d01      	ldr	r5, [sp, #4]
 8007fa4:	4682      	mov	sl, r0
 8007fa6:	468b      	mov	fp, r1
 8007fa8:	4649      	mov	r1, r9
 8007faa:	4640      	mov	r0, r8
 8007fac:	f7f8 fddc 	bl	8000b68 <__aeabi_d2iz>
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	f7f8 fabf 	bl	8000534 <__aeabi_i2d>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4640      	mov	r0, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	f7f8 f96b 	bl	8000298 <__aeabi_dsub>
 8007fc2:	3630      	adds	r6, #48	; 0x30
 8007fc4:	f805 6b01 	strb.w	r6, [r5], #1
 8007fc8:	4652      	mov	r2, sl
 8007fca:	465b      	mov	r3, fp
 8007fcc:	4680      	mov	r8, r0
 8007fce:	4689      	mov	r9, r1
 8007fd0:	f7f8 fd8c 	bl	8000aec <__aeabi_dcmplt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d163      	bne.n	80080a0 <_dtoa_r+0x608>
 8007fd8:	4642      	mov	r2, r8
 8007fda:	464b      	mov	r3, r9
 8007fdc:	4936      	ldr	r1, [pc, #216]	; (80080b8 <_dtoa_r+0x620>)
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f7f8 f95a 	bl	8000298 <__aeabi_dsub>
 8007fe4:	4652      	mov	r2, sl
 8007fe6:	465b      	mov	r3, fp
 8007fe8:	f7f8 fd80 	bl	8000aec <__aeabi_dcmplt>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f040 80b5 	bne.w	800815c <_dtoa_r+0x6c4>
 8007ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff4:	429d      	cmp	r5, r3
 8007ff6:	d081      	beq.n	8007efc <_dtoa_r+0x464>
 8007ff8:	4b30      	ldr	r3, [pc, #192]	; (80080bc <_dtoa_r+0x624>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4650      	mov	r0, sl
 8007ffe:	4659      	mov	r1, fp
 8008000:	f7f8 fb02 	bl	8000608 <__aeabi_dmul>
 8008004:	4b2d      	ldr	r3, [pc, #180]	; (80080bc <_dtoa_r+0x624>)
 8008006:	4682      	mov	sl, r0
 8008008:	468b      	mov	fp, r1
 800800a:	4640      	mov	r0, r8
 800800c:	4649      	mov	r1, r9
 800800e:	2200      	movs	r2, #0
 8008010:	f7f8 fafa 	bl	8000608 <__aeabi_dmul>
 8008014:	4680      	mov	r8, r0
 8008016:	4689      	mov	r9, r1
 8008018:	e7c6      	b.n	8007fa8 <_dtoa_r+0x510>
 800801a:	4650      	mov	r0, sl
 800801c:	4659      	mov	r1, fp
 800801e:	f7f8 faf3 	bl	8000608 <__aeabi_dmul>
 8008022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008024:	9d01      	ldr	r5, [sp, #4]
 8008026:	930f      	str	r3, [sp, #60]	; 0x3c
 8008028:	4682      	mov	sl, r0
 800802a:	468b      	mov	fp, r1
 800802c:	4649      	mov	r1, r9
 800802e:	4640      	mov	r0, r8
 8008030:	f7f8 fd9a 	bl	8000b68 <__aeabi_d2iz>
 8008034:	4606      	mov	r6, r0
 8008036:	f7f8 fa7d 	bl	8000534 <__aeabi_i2d>
 800803a:	3630      	adds	r6, #48	; 0x30
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4640      	mov	r0, r8
 8008042:	4649      	mov	r1, r9
 8008044:	f7f8 f928 	bl	8000298 <__aeabi_dsub>
 8008048:	f805 6b01 	strb.w	r6, [r5], #1
 800804c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800804e:	429d      	cmp	r5, r3
 8008050:	4680      	mov	r8, r0
 8008052:	4689      	mov	r9, r1
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	d124      	bne.n	80080a4 <_dtoa_r+0x60c>
 800805a:	4b1b      	ldr	r3, [pc, #108]	; (80080c8 <_dtoa_r+0x630>)
 800805c:	4650      	mov	r0, sl
 800805e:	4659      	mov	r1, fp
 8008060:	f7f8 f91c 	bl	800029c <__adddf3>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4640      	mov	r0, r8
 800806a:	4649      	mov	r1, r9
 800806c:	f7f8 fd5c 	bl	8000b28 <__aeabi_dcmpgt>
 8008070:	2800      	cmp	r0, #0
 8008072:	d173      	bne.n	800815c <_dtoa_r+0x6c4>
 8008074:	4652      	mov	r2, sl
 8008076:	465b      	mov	r3, fp
 8008078:	4913      	ldr	r1, [pc, #76]	; (80080c8 <_dtoa_r+0x630>)
 800807a:	2000      	movs	r0, #0
 800807c:	f7f8 f90c 	bl	8000298 <__aeabi_dsub>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4640      	mov	r0, r8
 8008086:	4649      	mov	r1, r9
 8008088:	f7f8 fd30 	bl	8000aec <__aeabi_dcmplt>
 800808c:	2800      	cmp	r0, #0
 800808e:	f43f af35 	beq.w	8007efc <_dtoa_r+0x464>
 8008092:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008094:	1e6b      	subs	r3, r5, #1
 8008096:	930f      	str	r3, [sp, #60]	; 0x3c
 8008098:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800809c:	2b30      	cmp	r3, #48	; 0x30
 800809e:	d0f8      	beq.n	8008092 <_dtoa_r+0x5fa>
 80080a0:	9700      	str	r7, [sp, #0]
 80080a2:	e049      	b.n	8008138 <_dtoa_r+0x6a0>
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <_dtoa_r+0x624>)
 80080a6:	f7f8 faaf 	bl	8000608 <__aeabi_dmul>
 80080aa:	4680      	mov	r8, r0
 80080ac:	4689      	mov	r9, r1
 80080ae:	e7bd      	b.n	800802c <_dtoa_r+0x594>
 80080b0:	0800a2f0 	.word	0x0800a2f0
 80080b4:	0800a2c8 	.word	0x0800a2c8
 80080b8:	3ff00000 	.word	0x3ff00000
 80080bc:	40240000 	.word	0x40240000
 80080c0:	401c0000 	.word	0x401c0000
 80080c4:	40140000 	.word	0x40140000
 80080c8:	3fe00000 	.word	0x3fe00000
 80080cc:	9d01      	ldr	r5, [sp, #4]
 80080ce:	4656      	mov	r6, sl
 80080d0:	465f      	mov	r7, fp
 80080d2:	4642      	mov	r2, r8
 80080d4:	464b      	mov	r3, r9
 80080d6:	4630      	mov	r0, r6
 80080d8:	4639      	mov	r1, r7
 80080da:	f7f8 fbbf 	bl	800085c <__aeabi_ddiv>
 80080de:	f7f8 fd43 	bl	8000b68 <__aeabi_d2iz>
 80080e2:	4682      	mov	sl, r0
 80080e4:	f7f8 fa26 	bl	8000534 <__aeabi_i2d>
 80080e8:	4642      	mov	r2, r8
 80080ea:	464b      	mov	r3, r9
 80080ec:	f7f8 fa8c 	bl	8000608 <__aeabi_dmul>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4630      	mov	r0, r6
 80080f6:	4639      	mov	r1, r7
 80080f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80080fc:	f7f8 f8cc 	bl	8000298 <__aeabi_dsub>
 8008100:	f805 6b01 	strb.w	r6, [r5], #1
 8008104:	9e01      	ldr	r6, [sp, #4]
 8008106:	9f03      	ldr	r7, [sp, #12]
 8008108:	1bae      	subs	r6, r5, r6
 800810a:	42b7      	cmp	r7, r6
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	d135      	bne.n	800817e <_dtoa_r+0x6e6>
 8008112:	f7f8 f8c3 	bl	800029c <__adddf3>
 8008116:	4642      	mov	r2, r8
 8008118:	464b      	mov	r3, r9
 800811a:	4606      	mov	r6, r0
 800811c:	460f      	mov	r7, r1
 800811e:	f7f8 fd03 	bl	8000b28 <__aeabi_dcmpgt>
 8008122:	b9d0      	cbnz	r0, 800815a <_dtoa_r+0x6c2>
 8008124:	4642      	mov	r2, r8
 8008126:	464b      	mov	r3, r9
 8008128:	4630      	mov	r0, r6
 800812a:	4639      	mov	r1, r7
 800812c:	f7f8 fcd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008130:	b110      	cbz	r0, 8008138 <_dtoa_r+0x6a0>
 8008132:	f01a 0f01 	tst.w	sl, #1
 8008136:	d110      	bne.n	800815a <_dtoa_r+0x6c2>
 8008138:	4620      	mov	r0, r4
 800813a:	ee18 1a10 	vmov	r1, s16
 800813e:	f000 fbc5 	bl	80088cc <_Bfree>
 8008142:	2300      	movs	r3, #0
 8008144:	9800      	ldr	r0, [sp, #0]
 8008146:	702b      	strb	r3, [r5, #0]
 8008148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800814a:	3001      	adds	r0, #1
 800814c:	6018      	str	r0, [r3, #0]
 800814e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008150:	2b00      	cmp	r3, #0
 8008152:	f43f acf1 	beq.w	8007b38 <_dtoa_r+0xa0>
 8008156:	601d      	str	r5, [r3, #0]
 8008158:	e4ee      	b.n	8007b38 <_dtoa_r+0xa0>
 800815a:	9f00      	ldr	r7, [sp, #0]
 800815c:	462b      	mov	r3, r5
 800815e:	461d      	mov	r5, r3
 8008160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008164:	2a39      	cmp	r2, #57	; 0x39
 8008166:	d106      	bne.n	8008176 <_dtoa_r+0x6de>
 8008168:	9a01      	ldr	r2, [sp, #4]
 800816a:	429a      	cmp	r2, r3
 800816c:	d1f7      	bne.n	800815e <_dtoa_r+0x6c6>
 800816e:	9901      	ldr	r1, [sp, #4]
 8008170:	2230      	movs	r2, #48	; 0x30
 8008172:	3701      	adds	r7, #1
 8008174:	700a      	strb	r2, [r1, #0]
 8008176:	781a      	ldrb	r2, [r3, #0]
 8008178:	3201      	adds	r2, #1
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	e790      	b.n	80080a0 <_dtoa_r+0x608>
 800817e:	4ba6      	ldr	r3, [pc, #664]	; (8008418 <_dtoa_r+0x980>)
 8008180:	2200      	movs	r2, #0
 8008182:	f7f8 fa41 	bl	8000608 <__aeabi_dmul>
 8008186:	2200      	movs	r2, #0
 8008188:	2300      	movs	r3, #0
 800818a:	4606      	mov	r6, r0
 800818c:	460f      	mov	r7, r1
 800818e:	f7f8 fca3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008192:	2800      	cmp	r0, #0
 8008194:	d09d      	beq.n	80080d2 <_dtoa_r+0x63a>
 8008196:	e7cf      	b.n	8008138 <_dtoa_r+0x6a0>
 8008198:	9a08      	ldr	r2, [sp, #32]
 800819a:	2a00      	cmp	r2, #0
 800819c:	f000 80d7 	beq.w	800834e <_dtoa_r+0x8b6>
 80081a0:	9a06      	ldr	r2, [sp, #24]
 80081a2:	2a01      	cmp	r2, #1
 80081a4:	f300 80ba 	bgt.w	800831c <_dtoa_r+0x884>
 80081a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081aa:	2a00      	cmp	r2, #0
 80081ac:	f000 80b2 	beq.w	8008314 <_dtoa_r+0x87c>
 80081b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081b4:	9e07      	ldr	r6, [sp, #28]
 80081b6:	9d04      	ldr	r5, [sp, #16]
 80081b8:	9a04      	ldr	r2, [sp, #16]
 80081ba:	441a      	add	r2, r3
 80081bc:	9204      	str	r2, [sp, #16]
 80081be:	9a05      	ldr	r2, [sp, #20]
 80081c0:	2101      	movs	r1, #1
 80081c2:	441a      	add	r2, r3
 80081c4:	4620      	mov	r0, r4
 80081c6:	9205      	str	r2, [sp, #20]
 80081c8:	f000 fc38 	bl	8008a3c <__i2b>
 80081cc:	4607      	mov	r7, r0
 80081ce:	2d00      	cmp	r5, #0
 80081d0:	dd0c      	ble.n	80081ec <_dtoa_r+0x754>
 80081d2:	9b05      	ldr	r3, [sp, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dd09      	ble.n	80081ec <_dtoa_r+0x754>
 80081d8:	42ab      	cmp	r3, r5
 80081da:	9a04      	ldr	r2, [sp, #16]
 80081dc:	bfa8      	it	ge
 80081de:	462b      	movge	r3, r5
 80081e0:	1ad2      	subs	r2, r2, r3
 80081e2:	9204      	str	r2, [sp, #16]
 80081e4:	9a05      	ldr	r2, [sp, #20]
 80081e6:	1aed      	subs	r5, r5, r3
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	9305      	str	r3, [sp, #20]
 80081ec:	9b07      	ldr	r3, [sp, #28]
 80081ee:	b31b      	cbz	r3, 8008238 <_dtoa_r+0x7a0>
 80081f0:	9b08      	ldr	r3, [sp, #32]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 80af 	beq.w	8008356 <_dtoa_r+0x8be>
 80081f8:	2e00      	cmp	r6, #0
 80081fa:	dd13      	ble.n	8008224 <_dtoa_r+0x78c>
 80081fc:	4639      	mov	r1, r7
 80081fe:	4632      	mov	r2, r6
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fcdb 	bl	8008bbc <__pow5mult>
 8008206:	ee18 2a10 	vmov	r2, s16
 800820a:	4601      	mov	r1, r0
 800820c:	4607      	mov	r7, r0
 800820e:	4620      	mov	r0, r4
 8008210:	f000 fc2a 	bl	8008a68 <__multiply>
 8008214:	ee18 1a10 	vmov	r1, s16
 8008218:	4680      	mov	r8, r0
 800821a:	4620      	mov	r0, r4
 800821c:	f000 fb56 	bl	80088cc <_Bfree>
 8008220:	ee08 8a10 	vmov	s16, r8
 8008224:	9b07      	ldr	r3, [sp, #28]
 8008226:	1b9a      	subs	r2, r3, r6
 8008228:	d006      	beq.n	8008238 <_dtoa_r+0x7a0>
 800822a:	ee18 1a10 	vmov	r1, s16
 800822e:	4620      	mov	r0, r4
 8008230:	f000 fcc4 	bl	8008bbc <__pow5mult>
 8008234:	ee08 0a10 	vmov	s16, r0
 8008238:	2101      	movs	r1, #1
 800823a:	4620      	mov	r0, r4
 800823c:	f000 fbfe 	bl	8008a3c <__i2b>
 8008240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	4606      	mov	r6, r0
 8008246:	f340 8088 	ble.w	800835a <_dtoa_r+0x8c2>
 800824a:	461a      	mov	r2, r3
 800824c:	4601      	mov	r1, r0
 800824e:	4620      	mov	r0, r4
 8008250:	f000 fcb4 	bl	8008bbc <__pow5mult>
 8008254:	9b06      	ldr	r3, [sp, #24]
 8008256:	2b01      	cmp	r3, #1
 8008258:	4606      	mov	r6, r0
 800825a:	f340 8081 	ble.w	8008360 <_dtoa_r+0x8c8>
 800825e:	f04f 0800 	mov.w	r8, #0
 8008262:	6933      	ldr	r3, [r6, #16]
 8008264:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008268:	6918      	ldr	r0, [r3, #16]
 800826a:	f000 fb97 	bl	800899c <__hi0bits>
 800826e:	f1c0 0020 	rsb	r0, r0, #32
 8008272:	9b05      	ldr	r3, [sp, #20]
 8008274:	4418      	add	r0, r3
 8008276:	f010 001f 	ands.w	r0, r0, #31
 800827a:	f000 8092 	beq.w	80083a2 <_dtoa_r+0x90a>
 800827e:	f1c0 0320 	rsb	r3, r0, #32
 8008282:	2b04      	cmp	r3, #4
 8008284:	f340 808a 	ble.w	800839c <_dtoa_r+0x904>
 8008288:	f1c0 001c 	rsb	r0, r0, #28
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	4403      	add	r3, r0
 8008290:	9304      	str	r3, [sp, #16]
 8008292:	9b05      	ldr	r3, [sp, #20]
 8008294:	4403      	add	r3, r0
 8008296:	4405      	add	r5, r0
 8008298:	9305      	str	r3, [sp, #20]
 800829a:	9b04      	ldr	r3, [sp, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	dd07      	ble.n	80082b0 <_dtoa_r+0x818>
 80082a0:	ee18 1a10 	vmov	r1, s16
 80082a4:	461a      	mov	r2, r3
 80082a6:	4620      	mov	r0, r4
 80082a8:	f000 fce2 	bl	8008c70 <__lshift>
 80082ac:	ee08 0a10 	vmov	s16, r0
 80082b0:	9b05      	ldr	r3, [sp, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dd05      	ble.n	80082c2 <_dtoa_r+0x82a>
 80082b6:	4631      	mov	r1, r6
 80082b8:	461a      	mov	r2, r3
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fcd8 	bl	8008c70 <__lshift>
 80082c0:	4606      	mov	r6, r0
 80082c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d06e      	beq.n	80083a6 <_dtoa_r+0x90e>
 80082c8:	ee18 0a10 	vmov	r0, s16
 80082cc:	4631      	mov	r1, r6
 80082ce:	f000 fd3f 	bl	8008d50 <__mcmp>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	da67      	bge.n	80083a6 <_dtoa_r+0x90e>
 80082d6:	9b00      	ldr	r3, [sp, #0]
 80082d8:	3b01      	subs	r3, #1
 80082da:	ee18 1a10 	vmov	r1, s16
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	220a      	movs	r2, #10
 80082e2:	2300      	movs	r3, #0
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fb13 	bl	8008910 <__multadd>
 80082ea:	9b08      	ldr	r3, [sp, #32]
 80082ec:	ee08 0a10 	vmov	s16, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 81b1 	beq.w	8008658 <_dtoa_r+0xbc0>
 80082f6:	2300      	movs	r3, #0
 80082f8:	4639      	mov	r1, r7
 80082fa:	220a      	movs	r2, #10
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fb07 	bl	8008910 <__multadd>
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	4607      	mov	r7, r0
 8008308:	f300 808e 	bgt.w	8008428 <_dtoa_r+0x990>
 800830c:	9b06      	ldr	r3, [sp, #24]
 800830e:	2b02      	cmp	r3, #2
 8008310:	dc51      	bgt.n	80083b6 <_dtoa_r+0x91e>
 8008312:	e089      	b.n	8008428 <_dtoa_r+0x990>
 8008314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800831a:	e74b      	b.n	80081b4 <_dtoa_r+0x71c>
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	1e5e      	subs	r6, r3, #1
 8008320:	9b07      	ldr	r3, [sp, #28]
 8008322:	42b3      	cmp	r3, r6
 8008324:	bfbf      	itttt	lt
 8008326:	9b07      	ldrlt	r3, [sp, #28]
 8008328:	9607      	strlt	r6, [sp, #28]
 800832a:	1af2      	sublt	r2, r6, r3
 800832c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800832e:	bfb6      	itet	lt
 8008330:	189b      	addlt	r3, r3, r2
 8008332:	1b9e      	subge	r6, r3, r6
 8008334:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	bfb8      	it	lt
 800833a:	2600      	movlt	r6, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	bfb7      	itett	lt
 8008340:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008344:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008348:	1a9d      	sublt	r5, r3, r2
 800834a:	2300      	movlt	r3, #0
 800834c:	e734      	b.n	80081b8 <_dtoa_r+0x720>
 800834e:	9e07      	ldr	r6, [sp, #28]
 8008350:	9d04      	ldr	r5, [sp, #16]
 8008352:	9f08      	ldr	r7, [sp, #32]
 8008354:	e73b      	b.n	80081ce <_dtoa_r+0x736>
 8008356:	9a07      	ldr	r2, [sp, #28]
 8008358:	e767      	b.n	800822a <_dtoa_r+0x792>
 800835a:	9b06      	ldr	r3, [sp, #24]
 800835c:	2b01      	cmp	r3, #1
 800835e:	dc18      	bgt.n	8008392 <_dtoa_r+0x8fa>
 8008360:	f1ba 0f00 	cmp.w	sl, #0
 8008364:	d115      	bne.n	8008392 <_dtoa_r+0x8fa>
 8008366:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800836a:	b993      	cbnz	r3, 8008392 <_dtoa_r+0x8fa>
 800836c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008370:	0d1b      	lsrs	r3, r3, #20
 8008372:	051b      	lsls	r3, r3, #20
 8008374:	b183      	cbz	r3, 8008398 <_dtoa_r+0x900>
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	3301      	adds	r3, #1
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	9b05      	ldr	r3, [sp, #20]
 800837e:	3301      	adds	r3, #1
 8008380:	9305      	str	r3, [sp, #20]
 8008382:	f04f 0801 	mov.w	r8, #1
 8008386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008388:	2b00      	cmp	r3, #0
 800838a:	f47f af6a 	bne.w	8008262 <_dtoa_r+0x7ca>
 800838e:	2001      	movs	r0, #1
 8008390:	e76f      	b.n	8008272 <_dtoa_r+0x7da>
 8008392:	f04f 0800 	mov.w	r8, #0
 8008396:	e7f6      	b.n	8008386 <_dtoa_r+0x8ee>
 8008398:	4698      	mov	r8, r3
 800839a:	e7f4      	b.n	8008386 <_dtoa_r+0x8ee>
 800839c:	f43f af7d 	beq.w	800829a <_dtoa_r+0x802>
 80083a0:	4618      	mov	r0, r3
 80083a2:	301c      	adds	r0, #28
 80083a4:	e772      	b.n	800828c <_dtoa_r+0x7f4>
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dc37      	bgt.n	800841c <_dtoa_r+0x984>
 80083ac:	9b06      	ldr	r3, [sp, #24]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	dd34      	ble.n	800841c <_dtoa_r+0x984>
 80083b2:	9b03      	ldr	r3, [sp, #12]
 80083b4:	9302      	str	r3, [sp, #8]
 80083b6:	9b02      	ldr	r3, [sp, #8]
 80083b8:	b96b      	cbnz	r3, 80083d6 <_dtoa_r+0x93e>
 80083ba:	4631      	mov	r1, r6
 80083bc:	2205      	movs	r2, #5
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 faa6 	bl	8008910 <__multadd>
 80083c4:	4601      	mov	r1, r0
 80083c6:	4606      	mov	r6, r0
 80083c8:	ee18 0a10 	vmov	r0, s16
 80083cc:	f000 fcc0 	bl	8008d50 <__mcmp>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	f73f adbb 	bgt.w	8007f4c <_dtoa_r+0x4b4>
 80083d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d8:	9d01      	ldr	r5, [sp, #4]
 80083da:	43db      	mvns	r3, r3
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	f04f 0800 	mov.w	r8, #0
 80083e2:	4631      	mov	r1, r6
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 fa71 	bl	80088cc <_Bfree>
 80083ea:	2f00      	cmp	r7, #0
 80083ec:	f43f aea4 	beq.w	8008138 <_dtoa_r+0x6a0>
 80083f0:	f1b8 0f00 	cmp.w	r8, #0
 80083f4:	d005      	beq.n	8008402 <_dtoa_r+0x96a>
 80083f6:	45b8      	cmp	r8, r7
 80083f8:	d003      	beq.n	8008402 <_dtoa_r+0x96a>
 80083fa:	4641      	mov	r1, r8
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 fa65 	bl	80088cc <_Bfree>
 8008402:	4639      	mov	r1, r7
 8008404:	4620      	mov	r0, r4
 8008406:	f000 fa61 	bl	80088cc <_Bfree>
 800840a:	e695      	b.n	8008138 <_dtoa_r+0x6a0>
 800840c:	2600      	movs	r6, #0
 800840e:	4637      	mov	r7, r6
 8008410:	e7e1      	b.n	80083d6 <_dtoa_r+0x93e>
 8008412:	9700      	str	r7, [sp, #0]
 8008414:	4637      	mov	r7, r6
 8008416:	e599      	b.n	8007f4c <_dtoa_r+0x4b4>
 8008418:	40240000 	.word	0x40240000
 800841c:	9b08      	ldr	r3, [sp, #32]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 80ca 	beq.w	80085b8 <_dtoa_r+0xb20>
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	9302      	str	r3, [sp, #8]
 8008428:	2d00      	cmp	r5, #0
 800842a:	dd05      	ble.n	8008438 <_dtoa_r+0x9a0>
 800842c:	4639      	mov	r1, r7
 800842e:	462a      	mov	r2, r5
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fc1d 	bl	8008c70 <__lshift>
 8008436:	4607      	mov	r7, r0
 8008438:	f1b8 0f00 	cmp.w	r8, #0
 800843c:	d05b      	beq.n	80084f6 <_dtoa_r+0xa5e>
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	4620      	mov	r0, r4
 8008442:	f000 fa03 	bl	800884c <_Balloc>
 8008446:	4605      	mov	r5, r0
 8008448:	b928      	cbnz	r0, 8008456 <_dtoa_r+0x9be>
 800844a:	4b87      	ldr	r3, [pc, #540]	; (8008668 <_dtoa_r+0xbd0>)
 800844c:	4602      	mov	r2, r0
 800844e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008452:	f7ff bb3b 	b.w	8007acc <_dtoa_r+0x34>
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	3202      	adds	r2, #2
 800845a:	0092      	lsls	r2, r2, #2
 800845c:	f107 010c 	add.w	r1, r7, #12
 8008460:	300c      	adds	r0, #12
 8008462:	f7fe fc2e 	bl	8006cc2 <memcpy>
 8008466:	2201      	movs	r2, #1
 8008468:	4629      	mov	r1, r5
 800846a:	4620      	mov	r0, r4
 800846c:	f000 fc00 	bl	8008c70 <__lshift>
 8008470:	9b01      	ldr	r3, [sp, #4]
 8008472:	f103 0901 	add.w	r9, r3, #1
 8008476:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800847a:	4413      	add	r3, r2
 800847c:	9305      	str	r3, [sp, #20]
 800847e:	f00a 0301 	and.w	r3, sl, #1
 8008482:	46b8      	mov	r8, r7
 8008484:	9304      	str	r3, [sp, #16]
 8008486:	4607      	mov	r7, r0
 8008488:	4631      	mov	r1, r6
 800848a:	ee18 0a10 	vmov	r0, s16
 800848e:	f7ff fa75 	bl	800797c <quorem>
 8008492:	4641      	mov	r1, r8
 8008494:	9002      	str	r0, [sp, #8]
 8008496:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800849a:	ee18 0a10 	vmov	r0, s16
 800849e:	f000 fc57 	bl	8008d50 <__mcmp>
 80084a2:	463a      	mov	r2, r7
 80084a4:	9003      	str	r0, [sp, #12]
 80084a6:	4631      	mov	r1, r6
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 fc6d 	bl	8008d88 <__mdiff>
 80084ae:	68c2      	ldr	r2, [r0, #12]
 80084b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80084b4:	4605      	mov	r5, r0
 80084b6:	bb02      	cbnz	r2, 80084fa <_dtoa_r+0xa62>
 80084b8:	4601      	mov	r1, r0
 80084ba:	ee18 0a10 	vmov	r0, s16
 80084be:	f000 fc47 	bl	8008d50 <__mcmp>
 80084c2:	4602      	mov	r2, r0
 80084c4:	4629      	mov	r1, r5
 80084c6:	4620      	mov	r0, r4
 80084c8:	9207      	str	r2, [sp, #28]
 80084ca:	f000 f9ff 	bl	80088cc <_Bfree>
 80084ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80084d2:	ea43 0102 	orr.w	r1, r3, r2
 80084d6:	9b04      	ldr	r3, [sp, #16]
 80084d8:	430b      	orrs	r3, r1
 80084da:	464d      	mov	r5, r9
 80084dc:	d10f      	bne.n	80084fe <_dtoa_r+0xa66>
 80084de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084e2:	d02a      	beq.n	800853a <_dtoa_r+0xaa2>
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	dd02      	ble.n	80084f0 <_dtoa_r+0xa58>
 80084ea:	9b02      	ldr	r3, [sp, #8]
 80084ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80084f0:	f88b a000 	strb.w	sl, [fp]
 80084f4:	e775      	b.n	80083e2 <_dtoa_r+0x94a>
 80084f6:	4638      	mov	r0, r7
 80084f8:	e7ba      	b.n	8008470 <_dtoa_r+0x9d8>
 80084fa:	2201      	movs	r2, #1
 80084fc:	e7e2      	b.n	80084c4 <_dtoa_r+0xa2c>
 80084fe:	9b03      	ldr	r3, [sp, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	db04      	blt.n	800850e <_dtoa_r+0xa76>
 8008504:	9906      	ldr	r1, [sp, #24]
 8008506:	430b      	orrs	r3, r1
 8008508:	9904      	ldr	r1, [sp, #16]
 800850a:	430b      	orrs	r3, r1
 800850c:	d122      	bne.n	8008554 <_dtoa_r+0xabc>
 800850e:	2a00      	cmp	r2, #0
 8008510:	ddee      	ble.n	80084f0 <_dtoa_r+0xa58>
 8008512:	ee18 1a10 	vmov	r1, s16
 8008516:	2201      	movs	r2, #1
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fba9 	bl	8008c70 <__lshift>
 800851e:	4631      	mov	r1, r6
 8008520:	ee08 0a10 	vmov	s16, r0
 8008524:	f000 fc14 	bl	8008d50 <__mcmp>
 8008528:	2800      	cmp	r0, #0
 800852a:	dc03      	bgt.n	8008534 <_dtoa_r+0xa9c>
 800852c:	d1e0      	bne.n	80084f0 <_dtoa_r+0xa58>
 800852e:	f01a 0f01 	tst.w	sl, #1
 8008532:	d0dd      	beq.n	80084f0 <_dtoa_r+0xa58>
 8008534:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008538:	d1d7      	bne.n	80084ea <_dtoa_r+0xa52>
 800853a:	2339      	movs	r3, #57	; 0x39
 800853c:	f88b 3000 	strb.w	r3, [fp]
 8008540:	462b      	mov	r3, r5
 8008542:	461d      	mov	r5, r3
 8008544:	3b01      	subs	r3, #1
 8008546:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800854a:	2a39      	cmp	r2, #57	; 0x39
 800854c:	d071      	beq.n	8008632 <_dtoa_r+0xb9a>
 800854e:	3201      	adds	r2, #1
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	e746      	b.n	80083e2 <_dtoa_r+0x94a>
 8008554:	2a00      	cmp	r2, #0
 8008556:	dd07      	ble.n	8008568 <_dtoa_r+0xad0>
 8008558:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800855c:	d0ed      	beq.n	800853a <_dtoa_r+0xaa2>
 800855e:	f10a 0301 	add.w	r3, sl, #1
 8008562:	f88b 3000 	strb.w	r3, [fp]
 8008566:	e73c      	b.n	80083e2 <_dtoa_r+0x94a>
 8008568:	9b05      	ldr	r3, [sp, #20]
 800856a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800856e:	4599      	cmp	r9, r3
 8008570:	d047      	beq.n	8008602 <_dtoa_r+0xb6a>
 8008572:	ee18 1a10 	vmov	r1, s16
 8008576:	2300      	movs	r3, #0
 8008578:	220a      	movs	r2, #10
 800857a:	4620      	mov	r0, r4
 800857c:	f000 f9c8 	bl	8008910 <__multadd>
 8008580:	45b8      	cmp	r8, r7
 8008582:	ee08 0a10 	vmov	s16, r0
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	f04f 020a 	mov.w	r2, #10
 800858e:	4641      	mov	r1, r8
 8008590:	4620      	mov	r0, r4
 8008592:	d106      	bne.n	80085a2 <_dtoa_r+0xb0a>
 8008594:	f000 f9bc 	bl	8008910 <__multadd>
 8008598:	4680      	mov	r8, r0
 800859a:	4607      	mov	r7, r0
 800859c:	f109 0901 	add.w	r9, r9, #1
 80085a0:	e772      	b.n	8008488 <_dtoa_r+0x9f0>
 80085a2:	f000 f9b5 	bl	8008910 <__multadd>
 80085a6:	4639      	mov	r1, r7
 80085a8:	4680      	mov	r8, r0
 80085aa:	2300      	movs	r3, #0
 80085ac:	220a      	movs	r2, #10
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 f9ae 	bl	8008910 <__multadd>
 80085b4:	4607      	mov	r7, r0
 80085b6:	e7f1      	b.n	800859c <_dtoa_r+0xb04>
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	9302      	str	r3, [sp, #8]
 80085bc:	9d01      	ldr	r5, [sp, #4]
 80085be:	ee18 0a10 	vmov	r0, s16
 80085c2:	4631      	mov	r1, r6
 80085c4:	f7ff f9da 	bl	800797c <quorem>
 80085c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	f805 ab01 	strb.w	sl, [r5], #1
 80085d2:	1aea      	subs	r2, r5, r3
 80085d4:	9b02      	ldr	r3, [sp, #8]
 80085d6:	4293      	cmp	r3, r2
 80085d8:	dd09      	ble.n	80085ee <_dtoa_r+0xb56>
 80085da:	ee18 1a10 	vmov	r1, s16
 80085de:	2300      	movs	r3, #0
 80085e0:	220a      	movs	r2, #10
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 f994 	bl	8008910 <__multadd>
 80085e8:	ee08 0a10 	vmov	s16, r0
 80085ec:	e7e7      	b.n	80085be <_dtoa_r+0xb26>
 80085ee:	9b02      	ldr	r3, [sp, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bfc8      	it	gt
 80085f4:	461d      	movgt	r5, r3
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	bfd8      	it	le
 80085fa:	2501      	movle	r5, #1
 80085fc:	441d      	add	r5, r3
 80085fe:	f04f 0800 	mov.w	r8, #0
 8008602:	ee18 1a10 	vmov	r1, s16
 8008606:	2201      	movs	r2, #1
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fb31 	bl	8008c70 <__lshift>
 800860e:	4631      	mov	r1, r6
 8008610:	ee08 0a10 	vmov	s16, r0
 8008614:	f000 fb9c 	bl	8008d50 <__mcmp>
 8008618:	2800      	cmp	r0, #0
 800861a:	dc91      	bgt.n	8008540 <_dtoa_r+0xaa8>
 800861c:	d102      	bne.n	8008624 <_dtoa_r+0xb8c>
 800861e:	f01a 0f01 	tst.w	sl, #1
 8008622:	d18d      	bne.n	8008540 <_dtoa_r+0xaa8>
 8008624:	462b      	mov	r3, r5
 8008626:	461d      	mov	r5, r3
 8008628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800862c:	2a30      	cmp	r2, #48	; 0x30
 800862e:	d0fa      	beq.n	8008626 <_dtoa_r+0xb8e>
 8008630:	e6d7      	b.n	80083e2 <_dtoa_r+0x94a>
 8008632:	9a01      	ldr	r2, [sp, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	d184      	bne.n	8008542 <_dtoa_r+0xaaa>
 8008638:	9b00      	ldr	r3, [sp, #0]
 800863a:	3301      	adds	r3, #1
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	2331      	movs	r3, #49	; 0x31
 8008640:	7013      	strb	r3, [r2, #0]
 8008642:	e6ce      	b.n	80083e2 <_dtoa_r+0x94a>
 8008644:	4b09      	ldr	r3, [pc, #36]	; (800866c <_dtoa_r+0xbd4>)
 8008646:	f7ff ba95 	b.w	8007b74 <_dtoa_r+0xdc>
 800864a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800864c:	2b00      	cmp	r3, #0
 800864e:	f47f aa6e 	bne.w	8007b2e <_dtoa_r+0x96>
 8008652:	4b07      	ldr	r3, [pc, #28]	; (8008670 <_dtoa_r+0xbd8>)
 8008654:	f7ff ba8e 	b.w	8007b74 <_dtoa_r+0xdc>
 8008658:	9b02      	ldr	r3, [sp, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	dcae      	bgt.n	80085bc <_dtoa_r+0xb24>
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	2b02      	cmp	r3, #2
 8008662:	f73f aea8 	bgt.w	80083b6 <_dtoa_r+0x91e>
 8008666:	e7a9      	b.n	80085bc <_dtoa_r+0xb24>
 8008668:	0800a25b 	.word	0x0800a25b
 800866c:	0800a1b8 	.word	0x0800a1b8
 8008670:	0800a1dc 	.word	0x0800a1dc

08008674 <__sflush_r>:
 8008674:	898a      	ldrh	r2, [r1, #12]
 8008676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867a:	4605      	mov	r5, r0
 800867c:	0710      	lsls	r0, r2, #28
 800867e:	460c      	mov	r4, r1
 8008680:	d458      	bmi.n	8008734 <__sflush_r+0xc0>
 8008682:	684b      	ldr	r3, [r1, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	dc05      	bgt.n	8008694 <__sflush_r+0x20>
 8008688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800868a:	2b00      	cmp	r3, #0
 800868c:	dc02      	bgt.n	8008694 <__sflush_r+0x20>
 800868e:	2000      	movs	r0, #0
 8008690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008696:	2e00      	cmp	r6, #0
 8008698:	d0f9      	beq.n	800868e <__sflush_r+0x1a>
 800869a:	2300      	movs	r3, #0
 800869c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086a0:	682f      	ldr	r7, [r5, #0]
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	d032      	beq.n	800870c <__sflush_r+0x98>
 80086a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	075a      	lsls	r2, r3, #29
 80086ac:	d505      	bpl.n	80086ba <__sflush_r+0x46>
 80086ae:	6863      	ldr	r3, [r4, #4]
 80086b0:	1ac0      	subs	r0, r0, r3
 80086b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086b4:	b10b      	cbz	r3, 80086ba <__sflush_r+0x46>
 80086b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086b8:	1ac0      	subs	r0, r0, r3
 80086ba:	2300      	movs	r3, #0
 80086bc:	4602      	mov	r2, r0
 80086be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086c0:	6a21      	ldr	r1, [r4, #32]
 80086c2:	4628      	mov	r0, r5
 80086c4:	47b0      	blx	r6
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	d106      	bne.n	80086da <__sflush_r+0x66>
 80086cc:	6829      	ldr	r1, [r5, #0]
 80086ce:	291d      	cmp	r1, #29
 80086d0:	d82c      	bhi.n	800872c <__sflush_r+0xb8>
 80086d2:	4a2a      	ldr	r2, [pc, #168]	; (800877c <__sflush_r+0x108>)
 80086d4:	40ca      	lsrs	r2, r1
 80086d6:	07d6      	lsls	r6, r2, #31
 80086d8:	d528      	bpl.n	800872c <__sflush_r+0xb8>
 80086da:	2200      	movs	r2, #0
 80086dc:	6062      	str	r2, [r4, #4]
 80086de:	04d9      	lsls	r1, r3, #19
 80086e0:	6922      	ldr	r2, [r4, #16]
 80086e2:	6022      	str	r2, [r4, #0]
 80086e4:	d504      	bpl.n	80086f0 <__sflush_r+0x7c>
 80086e6:	1c42      	adds	r2, r0, #1
 80086e8:	d101      	bne.n	80086ee <__sflush_r+0x7a>
 80086ea:	682b      	ldr	r3, [r5, #0]
 80086ec:	b903      	cbnz	r3, 80086f0 <__sflush_r+0x7c>
 80086ee:	6560      	str	r0, [r4, #84]	; 0x54
 80086f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086f2:	602f      	str	r7, [r5, #0]
 80086f4:	2900      	cmp	r1, #0
 80086f6:	d0ca      	beq.n	800868e <__sflush_r+0x1a>
 80086f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086fc:	4299      	cmp	r1, r3
 80086fe:	d002      	beq.n	8008706 <__sflush_r+0x92>
 8008700:	4628      	mov	r0, r5
 8008702:	f000 fc3d 	bl	8008f80 <_free_r>
 8008706:	2000      	movs	r0, #0
 8008708:	6360      	str	r0, [r4, #52]	; 0x34
 800870a:	e7c1      	b.n	8008690 <__sflush_r+0x1c>
 800870c:	6a21      	ldr	r1, [r4, #32]
 800870e:	2301      	movs	r3, #1
 8008710:	4628      	mov	r0, r5
 8008712:	47b0      	blx	r6
 8008714:	1c41      	adds	r1, r0, #1
 8008716:	d1c7      	bne.n	80086a8 <__sflush_r+0x34>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0c4      	beq.n	80086a8 <__sflush_r+0x34>
 800871e:	2b1d      	cmp	r3, #29
 8008720:	d001      	beq.n	8008726 <__sflush_r+0xb2>
 8008722:	2b16      	cmp	r3, #22
 8008724:	d101      	bne.n	800872a <__sflush_r+0xb6>
 8008726:	602f      	str	r7, [r5, #0]
 8008728:	e7b1      	b.n	800868e <__sflush_r+0x1a>
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008730:	81a3      	strh	r3, [r4, #12]
 8008732:	e7ad      	b.n	8008690 <__sflush_r+0x1c>
 8008734:	690f      	ldr	r7, [r1, #16]
 8008736:	2f00      	cmp	r7, #0
 8008738:	d0a9      	beq.n	800868e <__sflush_r+0x1a>
 800873a:	0793      	lsls	r3, r2, #30
 800873c:	680e      	ldr	r6, [r1, #0]
 800873e:	bf08      	it	eq
 8008740:	694b      	ldreq	r3, [r1, #20]
 8008742:	600f      	str	r7, [r1, #0]
 8008744:	bf18      	it	ne
 8008746:	2300      	movne	r3, #0
 8008748:	eba6 0807 	sub.w	r8, r6, r7
 800874c:	608b      	str	r3, [r1, #8]
 800874e:	f1b8 0f00 	cmp.w	r8, #0
 8008752:	dd9c      	ble.n	800868e <__sflush_r+0x1a>
 8008754:	6a21      	ldr	r1, [r4, #32]
 8008756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008758:	4643      	mov	r3, r8
 800875a:	463a      	mov	r2, r7
 800875c:	4628      	mov	r0, r5
 800875e:	47b0      	blx	r6
 8008760:	2800      	cmp	r0, #0
 8008762:	dc06      	bgt.n	8008772 <__sflush_r+0xfe>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	e78e      	b.n	8008690 <__sflush_r+0x1c>
 8008772:	4407      	add	r7, r0
 8008774:	eba8 0800 	sub.w	r8, r8, r0
 8008778:	e7e9      	b.n	800874e <__sflush_r+0xda>
 800877a:	bf00      	nop
 800877c:	20400001 	.word	0x20400001

08008780 <_fflush_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	690b      	ldr	r3, [r1, #16]
 8008784:	4605      	mov	r5, r0
 8008786:	460c      	mov	r4, r1
 8008788:	b913      	cbnz	r3, 8008790 <_fflush_r+0x10>
 800878a:	2500      	movs	r5, #0
 800878c:	4628      	mov	r0, r5
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	b118      	cbz	r0, 800879a <_fflush_r+0x1a>
 8008792:	6983      	ldr	r3, [r0, #24]
 8008794:	b90b      	cbnz	r3, 800879a <_fflush_r+0x1a>
 8008796:	f7fe f9cf 	bl	8006b38 <__sinit>
 800879a:	4b14      	ldr	r3, [pc, #80]	; (80087ec <_fflush_r+0x6c>)
 800879c:	429c      	cmp	r4, r3
 800879e:	d11b      	bne.n	80087d8 <_fflush_r+0x58>
 80087a0:	686c      	ldr	r4, [r5, #4]
 80087a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0ef      	beq.n	800878a <_fflush_r+0xa>
 80087aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087ac:	07d0      	lsls	r0, r2, #31
 80087ae:	d404      	bmi.n	80087ba <_fflush_r+0x3a>
 80087b0:	0599      	lsls	r1, r3, #22
 80087b2:	d402      	bmi.n	80087ba <_fflush_r+0x3a>
 80087b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087b6:	f7fe fa82 	bl	8006cbe <__retarget_lock_acquire_recursive>
 80087ba:	4628      	mov	r0, r5
 80087bc:	4621      	mov	r1, r4
 80087be:	f7ff ff59 	bl	8008674 <__sflush_r>
 80087c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087c4:	07da      	lsls	r2, r3, #31
 80087c6:	4605      	mov	r5, r0
 80087c8:	d4e0      	bmi.n	800878c <_fflush_r+0xc>
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	059b      	lsls	r3, r3, #22
 80087ce:	d4dd      	bmi.n	800878c <_fflush_r+0xc>
 80087d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087d2:	f7fe fa75 	bl	8006cc0 <__retarget_lock_release_recursive>
 80087d6:	e7d9      	b.n	800878c <_fflush_r+0xc>
 80087d8:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <_fflush_r+0x70>)
 80087da:	429c      	cmp	r4, r3
 80087dc:	d101      	bne.n	80087e2 <_fflush_r+0x62>
 80087de:	68ac      	ldr	r4, [r5, #8]
 80087e0:	e7df      	b.n	80087a2 <_fflush_r+0x22>
 80087e2:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <_fflush_r+0x74>)
 80087e4:	429c      	cmp	r4, r3
 80087e6:	bf08      	it	eq
 80087e8:	68ec      	ldreq	r4, [r5, #12]
 80087ea:	e7da      	b.n	80087a2 <_fflush_r+0x22>
 80087ec:	0800a164 	.word	0x0800a164
 80087f0:	0800a184 	.word	0x0800a184
 80087f4:	0800a144 	.word	0x0800a144

080087f8 <_localeconv_r>:
 80087f8:	4800      	ldr	r0, [pc, #0]	; (80087fc <_localeconv_r+0x4>)
 80087fa:	4770      	bx	lr
 80087fc:	20000174 	.word	0x20000174

08008800 <_lseek_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d07      	ldr	r5, [pc, #28]	; (8008820 <_lseek_r+0x20>)
 8008804:	4604      	mov	r4, r0
 8008806:	4608      	mov	r0, r1
 8008808:	4611      	mov	r1, r2
 800880a:	2200      	movs	r2, #0
 800880c:	602a      	str	r2, [r5, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	f7f9 f856 	bl	80018c0 <_lseek>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_lseek_r+0x1e>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	b103      	cbz	r3, 800881e <_lseek_r+0x1e>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	20004ce8 	.word	0x20004ce8

08008824 <malloc>:
 8008824:	4b02      	ldr	r3, [pc, #8]	; (8008830 <malloc+0xc>)
 8008826:	4601      	mov	r1, r0
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	f7fe ba81 	b.w	8006d30 <_malloc_r>
 800882e:	bf00      	nop
 8008830:	20000020 	.word	0x20000020

08008834 <__malloc_lock>:
 8008834:	4801      	ldr	r0, [pc, #4]	; (800883c <__malloc_lock+0x8>)
 8008836:	f7fe ba42 	b.w	8006cbe <__retarget_lock_acquire_recursive>
 800883a:	bf00      	nop
 800883c:	20004cdc 	.word	0x20004cdc

08008840 <__malloc_unlock>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__malloc_unlock+0x8>)
 8008842:	f7fe ba3d 	b.w	8006cc0 <__retarget_lock_release_recursive>
 8008846:	bf00      	nop
 8008848:	20004cdc 	.word	0x20004cdc

0800884c <_Balloc>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008850:	4604      	mov	r4, r0
 8008852:	460d      	mov	r5, r1
 8008854:	b976      	cbnz	r6, 8008874 <_Balloc+0x28>
 8008856:	2010      	movs	r0, #16
 8008858:	f7ff ffe4 	bl	8008824 <malloc>
 800885c:	4602      	mov	r2, r0
 800885e:	6260      	str	r0, [r4, #36]	; 0x24
 8008860:	b920      	cbnz	r0, 800886c <_Balloc+0x20>
 8008862:	4b18      	ldr	r3, [pc, #96]	; (80088c4 <_Balloc+0x78>)
 8008864:	4818      	ldr	r0, [pc, #96]	; (80088c8 <_Balloc+0x7c>)
 8008866:	2166      	movs	r1, #102	; 0x66
 8008868:	f000 fd44 	bl	80092f4 <__assert_func>
 800886c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008870:	6006      	str	r6, [r0, #0]
 8008872:	60c6      	str	r6, [r0, #12]
 8008874:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008876:	68f3      	ldr	r3, [r6, #12]
 8008878:	b183      	cbz	r3, 800889c <_Balloc+0x50>
 800887a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008882:	b9b8      	cbnz	r0, 80088b4 <_Balloc+0x68>
 8008884:	2101      	movs	r1, #1
 8008886:	fa01 f605 	lsl.w	r6, r1, r5
 800888a:	1d72      	adds	r2, r6, #5
 800888c:	0092      	lsls	r2, r2, #2
 800888e:	4620      	mov	r0, r4
 8008890:	f000 fb60 	bl	8008f54 <_calloc_r>
 8008894:	b160      	cbz	r0, 80088b0 <_Balloc+0x64>
 8008896:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800889a:	e00e      	b.n	80088ba <_Balloc+0x6e>
 800889c:	2221      	movs	r2, #33	; 0x21
 800889e:	2104      	movs	r1, #4
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fb57 	bl	8008f54 <_calloc_r>
 80088a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088a8:	60f0      	str	r0, [r6, #12]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e4      	bne.n	800887a <_Balloc+0x2e>
 80088b0:	2000      	movs	r0, #0
 80088b2:	bd70      	pop	{r4, r5, r6, pc}
 80088b4:	6802      	ldr	r2, [r0, #0]
 80088b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088ba:	2300      	movs	r3, #0
 80088bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088c0:	e7f7      	b.n	80088b2 <_Balloc+0x66>
 80088c2:	bf00      	nop
 80088c4:	0800a1e9 	.word	0x0800a1e9
 80088c8:	0800a26c 	.word	0x0800a26c

080088cc <_Bfree>:
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088d0:	4605      	mov	r5, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	b976      	cbnz	r6, 80088f4 <_Bfree+0x28>
 80088d6:	2010      	movs	r0, #16
 80088d8:	f7ff ffa4 	bl	8008824 <malloc>
 80088dc:	4602      	mov	r2, r0
 80088de:	6268      	str	r0, [r5, #36]	; 0x24
 80088e0:	b920      	cbnz	r0, 80088ec <_Bfree+0x20>
 80088e2:	4b09      	ldr	r3, [pc, #36]	; (8008908 <_Bfree+0x3c>)
 80088e4:	4809      	ldr	r0, [pc, #36]	; (800890c <_Bfree+0x40>)
 80088e6:	218a      	movs	r1, #138	; 0x8a
 80088e8:	f000 fd04 	bl	80092f4 <__assert_func>
 80088ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088f0:	6006      	str	r6, [r0, #0]
 80088f2:	60c6      	str	r6, [r0, #12]
 80088f4:	b13c      	cbz	r4, 8008906 <_Bfree+0x3a>
 80088f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088f8:	6862      	ldr	r2, [r4, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008900:	6021      	str	r1, [r4, #0]
 8008902:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	0800a1e9 	.word	0x0800a1e9
 800890c:	0800a26c 	.word	0x0800a26c

08008910 <__multadd>:
 8008910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008914:	690d      	ldr	r5, [r1, #16]
 8008916:	4607      	mov	r7, r0
 8008918:	460c      	mov	r4, r1
 800891a:	461e      	mov	r6, r3
 800891c:	f101 0c14 	add.w	ip, r1, #20
 8008920:	2000      	movs	r0, #0
 8008922:	f8dc 3000 	ldr.w	r3, [ip]
 8008926:	b299      	uxth	r1, r3
 8008928:	fb02 6101 	mla	r1, r2, r1, r6
 800892c:	0c1e      	lsrs	r6, r3, #16
 800892e:	0c0b      	lsrs	r3, r1, #16
 8008930:	fb02 3306 	mla	r3, r2, r6, r3
 8008934:	b289      	uxth	r1, r1
 8008936:	3001      	adds	r0, #1
 8008938:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800893c:	4285      	cmp	r5, r0
 800893e:	f84c 1b04 	str.w	r1, [ip], #4
 8008942:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008946:	dcec      	bgt.n	8008922 <__multadd+0x12>
 8008948:	b30e      	cbz	r6, 800898e <__multadd+0x7e>
 800894a:	68a3      	ldr	r3, [r4, #8]
 800894c:	42ab      	cmp	r3, r5
 800894e:	dc19      	bgt.n	8008984 <__multadd+0x74>
 8008950:	6861      	ldr	r1, [r4, #4]
 8008952:	4638      	mov	r0, r7
 8008954:	3101      	adds	r1, #1
 8008956:	f7ff ff79 	bl	800884c <_Balloc>
 800895a:	4680      	mov	r8, r0
 800895c:	b928      	cbnz	r0, 800896a <__multadd+0x5a>
 800895e:	4602      	mov	r2, r0
 8008960:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <__multadd+0x84>)
 8008962:	480d      	ldr	r0, [pc, #52]	; (8008998 <__multadd+0x88>)
 8008964:	21b5      	movs	r1, #181	; 0xb5
 8008966:	f000 fcc5 	bl	80092f4 <__assert_func>
 800896a:	6922      	ldr	r2, [r4, #16]
 800896c:	3202      	adds	r2, #2
 800896e:	f104 010c 	add.w	r1, r4, #12
 8008972:	0092      	lsls	r2, r2, #2
 8008974:	300c      	adds	r0, #12
 8008976:	f7fe f9a4 	bl	8006cc2 <memcpy>
 800897a:	4621      	mov	r1, r4
 800897c:	4638      	mov	r0, r7
 800897e:	f7ff ffa5 	bl	80088cc <_Bfree>
 8008982:	4644      	mov	r4, r8
 8008984:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008988:	3501      	adds	r5, #1
 800898a:	615e      	str	r6, [r3, #20]
 800898c:	6125      	str	r5, [r4, #16]
 800898e:	4620      	mov	r0, r4
 8008990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008994:	0800a25b 	.word	0x0800a25b
 8008998:	0800a26c 	.word	0x0800a26c

0800899c <__hi0bits>:
 800899c:	0c03      	lsrs	r3, r0, #16
 800899e:	041b      	lsls	r3, r3, #16
 80089a0:	b9d3      	cbnz	r3, 80089d8 <__hi0bits+0x3c>
 80089a2:	0400      	lsls	r0, r0, #16
 80089a4:	2310      	movs	r3, #16
 80089a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089aa:	bf04      	itt	eq
 80089ac:	0200      	lsleq	r0, r0, #8
 80089ae:	3308      	addeq	r3, #8
 80089b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089b4:	bf04      	itt	eq
 80089b6:	0100      	lsleq	r0, r0, #4
 80089b8:	3304      	addeq	r3, #4
 80089ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089be:	bf04      	itt	eq
 80089c0:	0080      	lsleq	r0, r0, #2
 80089c2:	3302      	addeq	r3, #2
 80089c4:	2800      	cmp	r0, #0
 80089c6:	db05      	blt.n	80089d4 <__hi0bits+0x38>
 80089c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089cc:	f103 0301 	add.w	r3, r3, #1
 80089d0:	bf08      	it	eq
 80089d2:	2320      	moveq	r3, #32
 80089d4:	4618      	mov	r0, r3
 80089d6:	4770      	bx	lr
 80089d8:	2300      	movs	r3, #0
 80089da:	e7e4      	b.n	80089a6 <__hi0bits+0xa>

080089dc <__lo0bits>:
 80089dc:	6803      	ldr	r3, [r0, #0]
 80089de:	f013 0207 	ands.w	r2, r3, #7
 80089e2:	4601      	mov	r1, r0
 80089e4:	d00b      	beq.n	80089fe <__lo0bits+0x22>
 80089e6:	07da      	lsls	r2, r3, #31
 80089e8:	d423      	bmi.n	8008a32 <__lo0bits+0x56>
 80089ea:	0798      	lsls	r0, r3, #30
 80089ec:	bf49      	itett	mi
 80089ee:	085b      	lsrmi	r3, r3, #1
 80089f0:	089b      	lsrpl	r3, r3, #2
 80089f2:	2001      	movmi	r0, #1
 80089f4:	600b      	strmi	r3, [r1, #0]
 80089f6:	bf5c      	itt	pl
 80089f8:	600b      	strpl	r3, [r1, #0]
 80089fa:	2002      	movpl	r0, #2
 80089fc:	4770      	bx	lr
 80089fe:	b298      	uxth	r0, r3
 8008a00:	b9a8      	cbnz	r0, 8008a2e <__lo0bits+0x52>
 8008a02:	0c1b      	lsrs	r3, r3, #16
 8008a04:	2010      	movs	r0, #16
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	b90a      	cbnz	r2, 8008a0e <__lo0bits+0x32>
 8008a0a:	3008      	adds	r0, #8
 8008a0c:	0a1b      	lsrs	r3, r3, #8
 8008a0e:	071a      	lsls	r2, r3, #28
 8008a10:	bf04      	itt	eq
 8008a12:	091b      	lsreq	r3, r3, #4
 8008a14:	3004      	addeq	r0, #4
 8008a16:	079a      	lsls	r2, r3, #30
 8008a18:	bf04      	itt	eq
 8008a1a:	089b      	lsreq	r3, r3, #2
 8008a1c:	3002      	addeq	r0, #2
 8008a1e:	07da      	lsls	r2, r3, #31
 8008a20:	d403      	bmi.n	8008a2a <__lo0bits+0x4e>
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	f100 0001 	add.w	r0, r0, #1
 8008a28:	d005      	beq.n	8008a36 <__lo0bits+0x5a>
 8008a2a:	600b      	str	r3, [r1, #0]
 8008a2c:	4770      	bx	lr
 8008a2e:	4610      	mov	r0, r2
 8008a30:	e7e9      	b.n	8008a06 <__lo0bits+0x2a>
 8008a32:	2000      	movs	r0, #0
 8008a34:	4770      	bx	lr
 8008a36:	2020      	movs	r0, #32
 8008a38:	4770      	bx	lr
	...

08008a3c <__i2b>:
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	460c      	mov	r4, r1
 8008a40:	2101      	movs	r1, #1
 8008a42:	f7ff ff03 	bl	800884c <_Balloc>
 8008a46:	4602      	mov	r2, r0
 8008a48:	b928      	cbnz	r0, 8008a56 <__i2b+0x1a>
 8008a4a:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <__i2b+0x24>)
 8008a4c:	4805      	ldr	r0, [pc, #20]	; (8008a64 <__i2b+0x28>)
 8008a4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a52:	f000 fc4f 	bl	80092f4 <__assert_func>
 8008a56:	2301      	movs	r3, #1
 8008a58:	6144      	str	r4, [r0, #20]
 8008a5a:	6103      	str	r3, [r0, #16]
 8008a5c:	bd10      	pop	{r4, pc}
 8008a5e:	bf00      	nop
 8008a60:	0800a25b 	.word	0x0800a25b
 8008a64:	0800a26c 	.word	0x0800a26c

08008a68 <__multiply>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	4691      	mov	r9, r2
 8008a6e:	690a      	ldr	r2, [r1, #16]
 8008a70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	bfb8      	it	lt
 8008a78:	460b      	movlt	r3, r1
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	bfbc      	itt	lt
 8008a7e:	464c      	movlt	r4, r9
 8008a80:	4699      	movlt	r9, r3
 8008a82:	6927      	ldr	r7, [r4, #16]
 8008a84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a88:	68a3      	ldr	r3, [r4, #8]
 8008a8a:	6861      	ldr	r1, [r4, #4]
 8008a8c:	eb07 060a 	add.w	r6, r7, sl
 8008a90:	42b3      	cmp	r3, r6
 8008a92:	b085      	sub	sp, #20
 8008a94:	bfb8      	it	lt
 8008a96:	3101      	addlt	r1, #1
 8008a98:	f7ff fed8 	bl	800884c <_Balloc>
 8008a9c:	b930      	cbnz	r0, 8008aac <__multiply+0x44>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	4b44      	ldr	r3, [pc, #272]	; (8008bb4 <__multiply+0x14c>)
 8008aa2:	4845      	ldr	r0, [pc, #276]	; (8008bb8 <__multiply+0x150>)
 8008aa4:	f240 115d 	movw	r1, #349	; 0x15d
 8008aa8:	f000 fc24 	bl	80092f4 <__assert_func>
 8008aac:	f100 0514 	add.w	r5, r0, #20
 8008ab0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ab4:	462b      	mov	r3, r5
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4543      	cmp	r3, r8
 8008aba:	d321      	bcc.n	8008b00 <__multiply+0x98>
 8008abc:	f104 0314 	add.w	r3, r4, #20
 8008ac0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ac4:	f109 0314 	add.w	r3, r9, #20
 8008ac8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008acc:	9202      	str	r2, [sp, #8]
 8008ace:	1b3a      	subs	r2, r7, r4
 8008ad0:	3a15      	subs	r2, #21
 8008ad2:	f022 0203 	bic.w	r2, r2, #3
 8008ad6:	3204      	adds	r2, #4
 8008ad8:	f104 0115 	add.w	r1, r4, #21
 8008adc:	428f      	cmp	r7, r1
 8008ade:	bf38      	it	cc
 8008ae0:	2204      	movcc	r2, #4
 8008ae2:	9201      	str	r2, [sp, #4]
 8008ae4:	9a02      	ldr	r2, [sp, #8]
 8008ae6:	9303      	str	r3, [sp, #12]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d80c      	bhi.n	8008b06 <__multiply+0x9e>
 8008aec:	2e00      	cmp	r6, #0
 8008aee:	dd03      	ble.n	8008af8 <__multiply+0x90>
 8008af0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d05a      	beq.n	8008bae <__multiply+0x146>
 8008af8:	6106      	str	r6, [r0, #16]
 8008afa:	b005      	add	sp, #20
 8008afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	f843 2b04 	str.w	r2, [r3], #4
 8008b04:	e7d8      	b.n	8008ab8 <__multiply+0x50>
 8008b06:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b0a:	f1ba 0f00 	cmp.w	sl, #0
 8008b0e:	d024      	beq.n	8008b5a <__multiply+0xf2>
 8008b10:	f104 0e14 	add.w	lr, r4, #20
 8008b14:	46a9      	mov	r9, r5
 8008b16:	f04f 0c00 	mov.w	ip, #0
 8008b1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b1e:	f8d9 1000 	ldr.w	r1, [r9]
 8008b22:	fa1f fb82 	uxth.w	fp, r2
 8008b26:	b289      	uxth	r1, r1
 8008b28:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b30:	f8d9 2000 	ldr.w	r2, [r9]
 8008b34:	4461      	add	r1, ip
 8008b36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b42:	b289      	uxth	r1, r1
 8008b44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b48:	4577      	cmp	r7, lr
 8008b4a:	f849 1b04 	str.w	r1, [r9], #4
 8008b4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b52:	d8e2      	bhi.n	8008b1a <__multiply+0xb2>
 8008b54:	9a01      	ldr	r2, [sp, #4]
 8008b56:	f845 c002 	str.w	ip, [r5, r2]
 8008b5a:	9a03      	ldr	r2, [sp, #12]
 8008b5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b60:	3304      	adds	r3, #4
 8008b62:	f1b9 0f00 	cmp.w	r9, #0
 8008b66:	d020      	beq.n	8008baa <__multiply+0x142>
 8008b68:	6829      	ldr	r1, [r5, #0]
 8008b6a:	f104 0c14 	add.w	ip, r4, #20
 8008b6e:	46ae      	mov	lr, r5
 8008b70:	f04f 0a00 	mov.w	sl, #0
 8008b74:	f8bc b000 	ldrh.w	fp, [ip]
 8008b78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b7c:	fb09 220b 	mla	r2, r9, fp, r2
 8008b80:	4492      	add	sl, r2
 8008b82:	b289      	uxth	r1, r1
 8008b84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b88:	f84e 1b04 	str.w	r1, [lr], #4
 8008b8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b90:	f8be 1000 	ldrh.w	r1, [lr]
 8008b94:	0c12      	lsrs	r2, r2, #16
 8008b96:	fb09 1102 	mla	r1, r9, r2, r1
 8008b9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b9e:	4567      	cmp	r7, ip
 8008ba0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ba4:	d8e6      	bhi.n	8008b74 <__multiply+0x10c>
 8008ba6:	9a01      	ldr	r2, [sp, #4]
 8008ba8:	50a9      	str	r1, [r5, r2]
 8008baa:	3504      	adds	r5, #4
 8008bac:	e79a      	b.n	8008ae4 <__multiply+0x7c>
 8008bae:	3e01      	subs	r6, #1
 8008bb0:	e79c      	b.n	8008aec <__multiply+0x84>
 8008bb2:	bf00      	nop
 8008bb4:	0800a25b 	.word	0x0800a25b
 8008bb8:	0800a26c 	.word	0x0800a26c

08008bbc <__pow5mult>:
 8008bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	f012 0203 	ands.w	r2, r2, #3
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	460f      	mov	r7, r1
 8008bca:	d007      	beq.n	8008bdc <__pow5mult+0x20>
 8008bcc:	4c25      	ldr	r4, [pc, #148]	; (8008c64 <__pow5mult+0xa8>)
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bd6:	f7ff fe9b 	bl	8008910 <__multadd>
 8008bda:	4607      	mov	r7, r0
 8008bdc:	10ad      	asrs	r5, r5, #2
 8008bde:	d03d      	beq.n	8008c5c <__pow5mult+0xa0>
 8008be0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008be2:	b97c      	cbnz	r4, 8008c04 <__pow5mult+0x48>
 8008be4:	2010      	movs	r0, #16
 8008be6:	f7ff fe1d 	bl	8008824 <malloc>
 8008bea:	4602      	mov	r2, r0
 8008bec:	6270      	str	r0, [r6, #36]	; 0x24
 8008bee:	b928      	cbnz	r0, 8008bfc <__pow5mult+0x40>
 8008bf0:	4b1d      	ldr	r3, [pc, #116]	; (8008c68 <__pow5mult+0xac>)
 8008bf2:	481e      	ldr	r0, [pc, #120]	; (8008c6c <__pow5mult+0xb0>)
 8008bf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bf8:	f000 fb7c 	bl	80092f4 <__assert_func>
 8008bfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c00:	6004      	str	r4, [r0, #0]
 8008c02:	60c4      	str	r4, [r0, #12]
 8008c04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c0c:	b94c      	cbnz	r4, 8008c22 <__pow5mult+0x66>
 8008c0e:	f240 2171 	movw	r1, #625	; 0x271
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7ff ff12 	bl	8008a3c <__i2b>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c1e:	4604      	mov	r4, r0
 8008c20:	6003      	str	r3, [r0, #0]
 8008c22:	f04f 0900 	mov.w	r9, #0
 8008c26:	07eb      	lsls	r3, r5, #31
 8008c28:	d50a      	bpl.n	8008c40 <__pow5mult+0x84>
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f7ff ff1a 	bl	8008a68 <__multiply>
 8008c34:	4639      	mov	r1, r7
 8008c36:	4680      	mov	r8, r0
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f7ff fe47 	bl	80088cc <_Bfree>
 8008c3e:	4647      	mov	r7, r8
 8008c40:	106d      	asrs	r5, r5, #1
 8008c42:	d00b      	beq.n	8008c5c <__pow5mult+0xa0>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	b938      	cbnz	r0, 8008c58 <__pow5mult+0x9c>
 8008c48:	4622      	mov	r2, r4
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7ff ff0b 	bl	8008a68 <__multiply>
 8008c52:	6020      	str	r0, [r4, #0]
 8008c54:	f8c0 9000 	str.w	r9, [r0]
 8008c58:	4604      	mov	r4, r0
 8008c5a:	e7e4      	b.n	8008c26 <__pow5mult+0x6a>
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c62:	bf00      	nop
 8008c64:	0800a3b8 	.word	0x0800a3b8
 8008c68:	0800a1e9 	.word	0x0800a1e9
 8008c6c:	0800a26c 	.word	0x0800a26c

08008c70 <__lshift>:
 8008c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	460c      	mov	r4, r1
 8008c76:	6849      	ldr	r1, [r1, #4]
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c7e:	68a3      	ldr	r3, [r4, #8]
 8008c80:	4607      	mov	r7, r0
 8008c82:	4691      	mov	r9, r2
 8008c84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c88:	f108 0601 	add.w	r6, r8, #1
 8008c8c:	42b3      	cmp	r3, r6
 8008c8e:	db0b      	blt.n	8008ca8 <__lshift+0x38>
 8008c90:	4638      	mov	r0, r7
 8008c92:	f7ff fddb 	bl	800884c <_Balloc>
 8008c96:	4605      	mov	r5, r0
 8008c98:	b948      	cbnz	r0, 8008cae <__lshift+0x3e>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	4b2a      	ldr	r3, [pc, #168]	; (8008d48 <__lshift+0xd8>)
 8008c9e:	482b      	ldr	r0, [pc, #172]	; (8008d4c <__lshift+0xdc>)
 8008ca0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ca4:	f000 fb26 	bl	80092f4 <__assert_func>
 8008ca8:	3101      	adds	r1, #1
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	e7ee      	b.n	8008c8c <__lshift+0x1c>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f100 0114 	add.w	r1, r0, #20
 8008cb4:	f100 0210 	add.w	r2, r0, #16
 8008cb8:	4618      	mov	r0, r3
 8008cba:	4553      	cmp	r3, sl
 8008cbc:	db37      	blt.n	8008d2e <__lshift+0xbe>
 8008cbe:	6920      	ldr	r0, [r4, #16]
 8008cc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cc4:	f104 0314 	add.w	r3, r4, #20
 8008cc8:	f019 091f 	ands.w	r9, r9, #31
 8008ccc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008cd4:	d02f      	beq.n	8008d36 <__lshift+0xc6>
 8008cd6:	f1c9 0e20 	rsb	lr, r9, #32
 8008cda:	468a      	mov	sl, r1
 8008cdc:	f04f 0c00 	mov.w	ip, #0
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	fa02 f209 	lsl.w	r2, r2, r9
 8008ce6:	ea42 020c 	orr.w	r2, r2, ip
 8008cea:	f84a 2b04 	str.w	r2, [sl], #4
 8008cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf2:	4298      	cmp	r0, r3
 8008cf4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008cf8:	d8f2      	bhi.n	8008ce0 <__lshift+0x70>
 8008cfa:	1b03      	subs	r3, r0, r4
 8008cfc:	3b15      	subs	r3, #21
 8008cfe:	f023 0303 	bic.w	r3, r3, #3
 8008d02:	3304      	adds	r3, #4
 8008d04:	f104 0215 	add.w	r2, r4, #21
 8008d08:	4290      	cmp	r0, r2
 8008d0a:	bf38      	it	cc
 8008d0c:	2304      	movcc	r3, #4
 8008d0e:	f841 c003 	str.w	ip, [r1, r3]
 8008d12:	f1bc 0f00 	cmp.w	ip, #0
 8008d16:	d001      	beq.n	8008d1c <__lshift+0xac>
 8008d18:	f108 0602 	add.w	r6, r8, #2
 8008d1c:	3e01      	subs	r6, #1
 8008d1e:	4638      	mov	r0, r7
 8008d20:	612e      	str	r6, [r5, #16]
 8008d22:	4621      	mov	r1, r4
 8008d24:	f7ff fdd2 	bl	80088cc <_Bfree>
 8008d28:	4628      	mov	r0, r5
 8008d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d32:	3301      	adds	r3, #1
 8008d34:	e7c1      	b.n	8008cba <__lshift+0x4a>
 8008d36:	3904      	subs	r1, #4
 8008d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d40:	4298      	cmp	r0, r3
 8008d42:	d8f9      	bhi.n	8008d38 <__lshift+0xc8>
 8008d44:	e7ea      	b.n	8008d1c <__lshift+0xac>
 8008d46:	bf00      	nop
 8008d48:	0800a25b 	.word	0x0800a25b
 8008d4c:	0800a26c 	.word	0x0800a26c

08008d50 <__mcmp>:
 8008d50:	b530      	push	{r4, r5, lr}
 8008d52:	6902      	ldr	r2, [r0, #16]
 8008d54:	690c      	ldr	r4, [r1, #16]
 8008d56:	1b12      	subs	r2, r2, r4
 8008d58:	d10e      	bne.n	8008d78 <__mcmp+0x28>
 8008d5a:	f100 0314 	add.w	r3, r0, #20
 8008d5e:	3114      	adds	r1, #20
 8008d60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d70:	42a5      	cmp	r5, r4
 8008d72:	d003      	beq.n	8008d7c <__mcmp+0x2c>
 8008d74:	d305      	bcc.n	8008d82 <__mcmp+0x32>
 8008d76:	2201      	movs	r2, #1
 8008d78:	4610      	mov	r0, r2
 8008d7a:	bd30      	pop	{r4, r5, pc}
 8008d7c:	4283      	cmp	r3, r0
 8008d7e:	d3f3      	bcc.n	8008d68 <__mcmp+0x18>
 8008d80:	e7fa      	b.n	8008d78 <__mcmp+0x28>
 8008d82:	f04f 32ff 	mov.w	r2, #4294967295
 8008d86:	e7f7      	b.n	8008d78 <__mcmp+0x28>

08008d88 <__mdiff>:
 8008d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	4606      	mov	r6, r0
 8008d90:	4611      	mov	r1, r2
 8008d92:	4620      	mov	r0, r4
 8008d94:	4690      	mov	r8, r2
 8008d96:	f7ff ffdb 	bl	8008d50 <__mcmp>
 8008d9a:	1e05      	subs	r5, r0, #0
 8008d9c:	d110      	bne.n	8008dc0 <__mdiff+0x38>
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4630      	mov	r0, r6
 8008da2:	f7ff fd53 	bl	800884c <_Balloc>
 8008da6:	b930      	cbnz	r0, 8008db6 <__mdiff+0x2e>
 8008da8:	4b3a      	ldr	r3, [pc, #232]	; (8008e94 <__mdiff+0x10c>)
 8008daa:	4602      	mov	r2, r0
 8008dac:	f240 2132 	movw	r1, #562	; 0x232
 8008db0:	4839      	ldr	r0, [pc, #228]	; (8008e98 <__mdiff+0x110>)
 8008db2:	f000 fa9f 	bl	80092f4 <__assert_func>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc0:	bfa4      	itt	ge
 8008dc2:	4643      	movge	r3, r8
 8008dc4:	46a0      	movge	r8, r4
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008dcc:	bfa6      	itte	ge
 8008dce:	461c      	movge	r4, r3
 8008dd0:	2500      	movge	r5, #0
 8008dd2:	2501      	movlt	r5, #1
 8008dd4:	f7ff fd3a 	bl	800884c <_Balloc>
 8008dd8:	b920      	cbnz	r0, 8008de4 <__mdiff+0x5c>
 8008dda:	4b2e      	ldr	r3, [pc, #184]	; (8008e94 <__mdiff+0x10c>)
 8008ddc:	4602      	mov	r2, r0
 8008dde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008de2:	e7e5      	b.n	8008db0 <__mdiff+0x28>
 8008de4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008de8:	6926      	ldr	r6, [r4, #16]
 8008dea:	60c5      	str	r5, [r0, #12]
 8008dec:	f104 0914 	add.w	r9, r4, #20
 8008df0:	f108 0514 	add.w	r5, r8, #20
 8008df4:	f100 0e14 	add.w	lr, r0, #20
 8008df8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e00:	f108 0210 	add.w	r2, r8, #16
 8008e04:	46f2      	mov	sl, lr
 8008e06:	2100      	movs	r1, #0
 8008e08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e10:	fa1f f883 	uxth.w	r8, r3
 8008e14:	fa11 f18b 	uxtah	r1, r1, fp
 8008e18:	0c1b      	lsrs	r3, r3, #16
 8008e1a:	eba1 0808 	sub.w	r8, r1, r8
 8008e1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e26:	fa1f f888 	uxth.w	r8, r8
 8008e2a:	1419      	asrs	r1, r3, #16
 8008e2c:	454e      	cmp	r6, r9
 8008e2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e32:	f84a 3b04 	str.w	r3, [sl], #4
 8008e36:	d8e7      	bhi.n	8008e08 <__mdiff+0x80>
 8008e38:	1b33      	subs	r3, r6, r4
 8008e3a:	3b15      	subs	r3, #21
 8008e3c:	f023 0303 	bic.w	r3, r3, #3
 8008e40:	3304      	adds	r3, #4
 8008e42:	3415      	adds	r4, #21
 8008e44:	42a6      	cmp	r6, r4
 8008e46:	bf38      	it	cc
 8008e48:	2304      	movcc	r3, #4
 8008e4a:	441d      	add	r5, r3
 8008e4c:	4473      	add	r3, lr
 8008e4e:	469e      	mov	lr, r3
 8008e50:	462e      	mov	r6, r5
 8008e52:	4566      	cmp	r6, ip
 8008e54:	d30e      	bcc.n	8008e74 <__mdiff+0xec>
 8008e56:	f10c 0203 	add.w	r2, ip, #3
 8008e5a:	1b52      	subs	r2, r2, r5
 8008e5c:	f022 0203 	bic.w	r2, r2, #3
 8008e60:	3d03      	subs	r5, #3
 8008e62:	45ac      	cmp	ip, r5
 8008e64:	bf38      	it	cc
 8008e66:	2200      	movcc	r2, #0
 8008e68:	441a      	add	r2, r3
 8008e6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e6e:	b17b      	cbz	r3, 8008e90 <__mdiff+0x108>
 8008e70:	6107      	str	r7, [r0, #16]
 8008e72:	e7a3      	b.n	8008dbc <__mdiff+0x34>
 8008e74:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e78:	fa11 f288 	uxtah	r2, r1, r8
 8008e7c:	1414      	asrs	r4, r2, #16
 8008e7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e82:	b292      	uxth	r2, r2
 8008e84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e88:	f84e 2b04 	str.w	r2, [lr], #4
 8008e8c:	1421      	asrs	r1, r4, #16
 8008e8e:	e7e0      	b.n	8008e52 <__mdiff+0xca>
 8008e90:	3f01      	subs	r7, #1
 8008e92:	e7ea      	b.n	8008e6a <__mdiff+0xe2>
 8008e94:	0800a25b 	.word	0x0800a25b
 8008e98:	0800a26c 	.word	0x0800a26c

08008e9c <__d2b>:
 8008e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ea0:	4689      	mov	r9, r1
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	ec57 6b10 	vmov	r6, r7, d0
 8008ea8:	4690      	mov	r8, r2
 8008eaa:	f7ff fccf 	bl	800884c <_Balloc>
 8008eae:	4604      	mov	r4, r0
 8008eb0:	b930      	cbnz	r0, 8008ec0 <__d2b+0x24>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b25      	ldr	r3, [pc, #148]	; (8008f4c <__d2b+0xb0>)
 8008eb6:	4826      	ldr	r0, [pc, #152]	; (8008f50 <__d2b+0xb4>)
 8008eb8:	f240 310a 	movw	r1, #778	; 0x30a
 8008ebc:	f000 fa1a 	bl	80092f4 <__assert_func>
 8008ec0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ec4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ec8:	bb35      	cbnz	r5, 8008f18 <__d2b+0x7c>
 8008eca:	2e00      	cmp	r6, #0
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	d028      	beq.n	8008f22 <__d2b+0x86>
 8008ed0:	4668      	mov	r0, sp
 8008ed2:	9600      	str	r6, [sp, #0]
 8008ed4:	f7ff fd82 	bl	80089dc <__lo0bits>
 8008ed8:	9900      	ldr	r1, [sp, #0]
 8008eda:	b300      	cbz	r0, 8008f1e <__d2b+0x82>
 8008edc:	9a01      	ldr	r2, [sp, #4]
 8008ede:	f1c0 0320 	rsb	r3, r0, #32
 8008ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee6:	430b      	orrs	r3, r1
 8008ee8:	40c2      	lsrs	r2, r0
 8008eea:	6163      	str	r3, [r4, #20]
 8008eec:	9201      	str	r2, [sp, #4]
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	61a3      	str	r3, [r4, #24]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bf14      	ite	ne
 8008ef6:	2202      	movne	r2, #2
 8008ef8:	2201      	moveq	r2, #1
 8008efa:	6122      	str	r2, [r4, #16]
 8008efc:	b1d5      	cbz	r5, 8008f34 <__d2b+0x98>
 8008efe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f02:	4405      	add	r5, r0
 8008f04:	f8c9 5000 	str.w	r5, [r9]
 8008f08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f0c:	f8c8 0000 	str.w	r0, [r8]
 8008f10:	4620      	mov	r0, r4
 8008f12:	b003      	add	sp, #12
 8008f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f1c:	e7d5      	b.n	8008eca <__d2b+0x2e>
 8008f1e:	6161      	str	r1, [r4, #20]
 8008f20:	e7e5      	b.n	8008eee <__d2b+0x52>
 8008f22:	a801      	add	r0, sp, #4
 8008f24:	f7ff fd5a 	bl	80089dc <__lo0bits>
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	6163      	str	r3, [r4, #20]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	6122      	str	r2, [r4, #16]
 8008f30:	3020      	adds	r0, #32
 8008f32:	e7e3      	b.n	8008efc <__d2b+0x60>
 8008f34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f3c:	f8c9 0000 	str.w	r0, [r9]
 8008f40:	6918      	ldr	r0, [r3, #16]
 8008f42:	f7ff fd2b 	bl	800899c <__hi0bits>
 8008f46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f4a:	e7df      	b.n	8008f0c <__d2b+0x70>
 8008f4c:	0800a25b 	.word	0x0800a25b
 8008f50:	0800a26c 	.word	0x0800a26c

08008f54 <_calloc_r>:
 8008f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f56:	fba1 2402 	umull	r2, r4, r1, r2
 8008f5a:	b94c      	cbnz	r4, 8008f70 <_calloc_r+0x1c>
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	9201      	str	r2, [sp, #4]
 8008f60:	f7fd fee6 	bl	8006d30 <_malloc_r>
 8008f64:	9a01      	ldr	r2, [sp, #4]
 8008f66:	4605      	mov	r5, r0
 8008f68:	b930      	cbnz	r0, 8008f78 <_calloc_r+0x24>
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	b003      	add	sp, #12
 8008f6e:	bd30      	pop	{r4, r5, pc}
 8008f70:	220c      	movs	r2, #12
 8008f72:	6002      	str	r2, [r0, #0]
 8008f74:	2500      	movs	r5, #0
 8008f76:	e7f8      	b.n	8008f6a <_calloc_r+0x16>
 8008f78:	4621      	mov	r1, r4
 8008f7a:	f7fd feb0 	bl	8006cde <memset>
 8008f7e:	e7f4      	b.n	8008f6a <_calloc_r+0x16>

08008f80 <_free_r>:
 8008f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f82:	2900      	cmp	r1, #0
 8008f84:	d044      	beq.n	8009010 <_free_r+0x90>
 8008f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f8a:	9001      	str	r0, [sp, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f92:	bfb8      	it	lt
 8008f94:	18e4      	addlt	r4, r4, r3
 8008f96:	f7ff fc4d 	bl	8008834 <__malloc_lock>
 8008f9a:	4a1e      	ldr	r2, [pc, #120]	; (8009014 <_free_r+0x94>)
 8008f9c:	9801      	ldr	r0, [sp, #4]
 8008f9e:	6813      	ldr	r3, [r2, #0]
 8008fa0:	b933      	cbnz	r3, 8008fb0 <_free_r+0x30>
 8008fa2:	6063      	str	r3, [r4, #4]
 8008fa4:	6014      	str	r4, [r2, #0]
 8008fa6:	b003      	add	sp, #12
 8008fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fac:	f7ff bc48 	b.w	8008840 <__malloc_unlock>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d908      	bls.n	8008fc6 <_free_r+0x46>
 8008fb4:	6825      	ldr	r5, [r4, #0]
 8008fb6:	1961      	adds	r1, r4, r5
 8008fb8:	428b      	cmp	r3, r1
 8008fba:	bf01      	itttt	eq
 8008fbc:	6819      	ldreq	r1, [r3, #0]
 8008fbe:	685b      	ldreq	r3, [r3, #4]
 8008fc0:	1949      	addeq	r1, r1, r5
 8008fc2:	6021      	streq	r1, [r4, #0]
 8008fc4:	e7ed      	b.n	8008fa2 <_free_r+0x22>
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	b10b      	cbz	r3, 8008fd0 <_free_r+0x50>
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	d9fa      	bls.n	8008fc6 <_free_r+0x46>
 8008fd0:	6811      	ldr	r1, [r2, #0]
 8008fd2:	1855      	adds	r5, r2, r1
 8008fd4:	42a5      	cmp	r5, r4
 8008fd6:	d10b      	bne.n	8008ff0 <_free_r+0x70>
 8008fd8:	6824      	ldr	r4, [r4, #0]
 8008fda:	4421      	add	r1, r4
 8008fdc:	1854      	adds	r4, r2, r1
 8008fde:	42a3      	cmp	r3, r4
 8008fe0:	6011      	str	r1, [r2, #0]
 8008fe2:	d1e0      	bne.n	8008fa6 <_free_r+0x26>
 8008fe4:	681c      	ldr	r4, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	6053      	str	r3, [r2, #4]
 8008fea:	4421      	add	r1, r4
 8008fec:	6011      	str	r1, [r2, #0]
 8008fee:	e7da      	b.n	8008fa6 <_free_r+0x26>
 8008ff0:	d902      	bls.n	8008ff8 <_free_r+0x78>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	6003      	str	r3, [r0, #0]
 8008ff6:	e7d6      	b.n	8008fa6 <_free_r+0x26>
 8008ff8:	6825      	ldr	r5, [r4, #0]
 8008ffa:	1961      	adds	r1, r4, r5
 8008ffc:	428b      	cmp	r3, r1
 8008ffe:	bf04      	itt	eq
 8009000:	6819      	ldreq	r1, [r3, #0]
 8009002:	685b      	ldreq	r3, [r3, #4]
 8009004:	6063      	str	r3, [r4, #4]
 8009006:	bf04      	itt	eq
 8009008:	1949      	addeq	r1, r1, r5
 800900a:	6021      	streq	r1, [r4, #0]
 800900c:	6054      	str	r4, [r2, #4]
 800900e:	e7ca      	b.n	8008fa6 <_free_r+0x26>
 8009010:	b003      	add	sp, #12
 8009012:	bd30      	pop	{r4, r5, pc}
 8009014:	20004ce0 	.word	0x20004ce0

08009018 <__ssputs_r>:
 8009018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800901c:	688e      	ldr	r6, [r1, #8]
 800901e:	429e      	cmp	r6, r3
 8009020:	4682      	mov	sl, r0
 8009022:	460c      	mov	r4, r1
 8009024:	4690      	mov	r8, r2
 8009026:	461f      	mov	r7, r3
 8009028:	d838      	bhi.n	800909c <__ssputs_r+0x84>
 800902a:	898a      	ldrh	r2, [r1, #12]
 800902c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009030:	d032      	beq.n	8009098 <__ssputs_r+0x80>
 8009032:	6825      	ldr	r5, [r4, #0]
 8009034:	6909      	ldr	r1, [r1, #16]
 8009036:	eba5 0901 	sub.w	r9, r5, r1
 800903a:	6965      	ldr	r5, [r4, #20]
 800903c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009040:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009044:	3301      	adds	r3, #1
 8009046:	444b      	add	r3, r9
 8009048:	106d      	asrs	r5, r5, #1
 800904a:	429d      	cmp	r5, r3
 800904c:	bf38      	it	cc
 800904e:	461d      	movcc	r5, r3
 8009050:	0553      	lsls	r3, r2, #21
 8009052:	d531      	bpl.n	80090b8 <__ssputs_r+0xa0>
 8009054:	4629      	mov	r1, r5
 8009056:	f7fd fe6b 	bl	8006d30 <_malloc_r>
 800905a:	4606      	mov	r6, r0
 800905c:	b950      	cbnz	r0, 8009074 <__ssputs_r+0x5c>
 800905e:	230c      	movs	r3, #12
 8009060:	f8ca 3000 	str.w	r3, [sl]
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800906a:	81a3      	strh	r3, [r4, #12]
 800906c:	f04f 30ff 	mov.w	r0, #4294967295
 8009070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009074:	6921      	ldr	r1, [r4, #16]
 8009076:	464a      	mov	r2, r9
 8009078:	f7fd fe23 	bl	8006cc2 <memcpy>
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009086:	81a3      	strh	r3, [r4, #12]
 8009088:	6126      	str	r6, [r4, #16]
 800908a:	6165      	str	r5, [r4, #20]
 800908c:	444e      	add	r6, r9
 800908e:	eba5 0509 	sub.w	r5, r5, r9
 8009092:	6026      	str	r6, [r4, #0]
 8009094:	60a5      	str	r5, [r4, #8]
 8009096:	463e      	mov	r6, r7
 8009098:	42be      	cmp	r6, r7
 800909a:	d900      	bls.n	800909e <__ssputs_r+0x86>
 800909c:	463e      	mov	r6, r7
 800909e:	6820      	ldr	r0, [r4, #0]
 80090a0:	4632      	mov	r2, r6
 80090a2:	4641      	mov	r1, r8
 80090a4:	f000 f968 	bl	8009378 <memmove>
 80090a8:	68a3      	ldr	r3, [r4, #8]
 80090aa:	1b9b      	subs	r3, r3, r6
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	4433      	add	r3, r6
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	2000      	movs	r0, #0
 80090b6:	e7db      	b.n	8009070 <__ssputs_r+0x58>
 80090b8:	462a      	mov	r2, r5
 80090ba:	f000 f977 	bl	80093ac <_realloc_r>
 80090be:	4606      	mov	r6, r0
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d1e1      	bne.n	8009088 <__ssputs_r+0x70>
 80090c4:	6921      	ldr	r1, [r4, #16]
 80090c6:	4650      	mov	r0, sl
 80090c8:	f7ff ff5a 	bl	8008f80 <_free_r>
 80090cc:	e7c7      	b.n	800905e <__ssputs_r+0x46>
	...

080090d0 <_svfiprintf_r>:
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	4698      	mov	r8, r3
 80090d6:	898b      	ldrh	r3, [r1, #12]
 80090d8:	061b      	lsls	r3, r3, #24
 80090da:	b09d      	sub	sp, #116	; 0x74
 80090dc:	4607      	mov	r7, r0
 80090de:	460d      	mov	r5, r1
 80090e0:	4614      	mov	r4, r2
 80090e2:	d50e      	bpl.n	8009102 <_svfiprintf_r+0x32>
 80090e4:	690b      	ldr	r3, [r1, #16]
 80090e6:	b963      	cbnz	r3, 8009102 <_svfiprintf_r+0x32>
 80090e8:	2140      	movs	r1, #64	; 0x40
 80090ea:	f7fd fe21 	bl	8006d30 <_malloc_r>
 80090ee:	6028      	str	r0, [r5, #0]
 80090f0:	6128      	str	r0, [r5, #16]
 80090f2:	b920      	cbnz	r0, 80090fe <_svfiprintf_r+0x2e>
 80090f4:	230c      	movs	r3, #12
 80090f6:	603b      	str	r3, [r7, #0]
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295
 80090fc:	e0d1      	b.n	80092a2 <_svfiprintf_r+0x1d2>
 80090fe:	2340      	movs	r3, #64	; 0x40
 8009100:	616b      	str	r3, [r5, #20]
 8009102:	2300      	movs	r3, #0
 8009104:	9309      	str	r3, [sp, #36]	; 0x24
 8009106:	2320      	movs	r3, #32
 8009108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800910c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009110:	2330      	movs	r3, #48	; 0x30
 8009112:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80092bc <_svfiprintf_r+0x1ec>
 8009116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800911a:	f04f 0901 	mov.w	r9, #1
 800911e:	4623      	mov	r3, r4
 8009120:	469a      	mov	sl, r3
 8009122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009126:	b10a      	cbz	r2, 800912c <_svfiprintf_r+0x5c>
 8009128:	2a25      	cmp	r2, #37	; 0x25
 800912a:	d1f9      	bne.n	8009120 <_svfiprintf_r+0x50>
 800912c:	ebba 0b04 	subs.w	fp, sl, r4
 8009130:	d00b      	beq.n	800914a <_svfiprintf_r+0x7a>
 8009132:	465b      	mov	r3, fp
 8009134:	4622      	mov	r2, r4
 8009136:	4629      	mov	r1, r5
 8009138:	4638      	mov	r0, r7
 800913a:	f7ff ff6d 	bl	8009018 <__ssputs_r>
 800913e:	3001      	adds	r0, #1
 8009140:	f000 80aa 	beq.w	8009298 <_svfiprintf_r+0x1c8>
 8009144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009146:	445a      	add	r2, fp
 8009148:	9209      	str	r2, [sp, #36]	; 0x24
 800914a:	f89a 3000 	ldrb.w	r3, [sl]
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 80a2 	beq.w	8009298 <_svfiprintf_r+0x1c8>
 8009154:	2300      	movs	r3, #0
 8009156:	f04f 32ff 	mov.w	r2, #4294967295
 800915a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800915e:	f10a 0a01 	add.w	sl, sl, #1
 8009162:	9304      	str	r3, [sp, #16]
 8009164:	9307      	str	r3, [sp, #28]
 8009166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800916a:	931a      	str	r3, [sp, #104]	; 0x68
 800916c:	4654      	mov	r4, sl
 800916e:	2205      	movs	r2, #5
 8009170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009174:	4851      	ldr	r0, [pc, #324]	; (80092bc <_svfiprintf_r+0x1ec>)
 8009176:	f7f7 f83b 	bl	80001f0 <memchr>
 800917a:	9a04      	ldr	r2, [sp, #16]
 800917c:	b9d8      	cbnz	r0, 80091b6 <_svfiprintf_r+0xe6>
 800917e:	06d0      	lsls	r0, r2, #27
 8009180:	bf44      	itt	mi
 8009182:	2320      	movmi	r3, #32
 8009184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009188:	0711      	lsls	r1, r2, #28
 800918a:	bf44      	itt	mi
 800918c:	232b      	movmi	r3, #43	; 0x2b
 800918e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009192:	f89a 3000 	ldrb.w	r3, [sl]
 8009196:	2b2a      	cmp	r3, #42	; 0x2a
 8009198:	d015      	beq.n	80091c6 <_svfiprintf_r+0xf6>
 800919a:	9a07      	ldr	r2, [sp, #28]
 800919c:	4654      	mov	r4, sl
 800919e:	2000      	movs	r0, #0
 80091a0:	f04f 0c0a 	mov.w	ip, #10
 80091a4:	4621      	mov	r1, r4
 80091a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091aa:	3b30      	subs	r3, #48	; 0x30
 80091ac:	2b09      	cmp	r3, #9
 80091ae:	d94e      	bls.n	800924e <_svfiprintf_r+0x17e>
 80091b0:	b1b0      	cbz	r0, 80091e0 <_svfiprintf_r+0x110>
 80091b2:	9207      	str	r2, [sp, #28]
 80091b4:	e014      	b.n	80091e0 <_svfiprintf_r+0x110>
 80091b6:	eba0 0308 	sub.w	r3, r0, r8
 80091ba:	fa09 f303 	lsl.w	r3, r9, r3
 80091be:	4313      	orrs	r3, r2
 80091c0:	9304      	str	r3, [sp, #16]
 80091c2:	46a2      	mov	sl, r4
 80091c4:	e7d2      	b.n	800916c <_svfiprintf_r+0x9c>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	1d19      	adds	r1, r3, #4
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	9103      	str	r1, [sp, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfbb      	ittet	lt
 80091d2:	425b      	neglt	r3, r3
 80091d4:	f042 0202 	orrlt.w	r2, r2, #2
 80091d8:	9307      	strge	r3, [sp, #28]
 80091da:	9307      	strlt	r3, [sp, #28]
 80091dc:	bfb8      	it	lt
 80091de:	9204      	strlt	r2, [sp, #16]
 80091e0:	7823      	ldrb	r3, [r4, #0]
 80091e2:	2b2e      	cmp	r3, #46	; 0x2e
 80091e4:	d10c      	bne.n	8009200 <_svfiprintf_r+0x130>
 80091e6:	7863      	ldrb	r3, [r4, #1]
 80091e8:	2b2a      	cmp	r3, #42	; 0x2a
 80091ea:	d135      	bne.n	8009258 <_svfiprintf_r+0x188>
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	1d1a      	adds	r2, r3, #4
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	9203      	str	r2, [sp, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bfb8      	it	lt
 80091f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80091fc:	3402      	adds	r4, #2
 80091fe:	9305      	str	r3, [sp, #20]
 8009200:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092cc <_svfiprintf_r+0x1fc>
 8009204:	7821      	ldrb	r1, [r4, #0]
 8009206:	2203      	movs	r2, #3
 8009208:	4650      	mov	r0, sl
 800920a:	f7f6 fff1 	bl	80001f0 <memchr>
 800920e:	b140      	cbz	r0, 8009222 <_svfiprintf_r+0x152>
 8009210:	2340      	movs	r3, #64	; 0x40
 8009212:	eba0 000a 	sub.w	r0, r0, sl
 8009216:	fa03 f000 	lsl.w	r0, r3, r0
 800921a:	9b04      	ldr	r3, [sp, #16]
 800921c:	4303      	orrs	r3, r0
 800921e:	3401      	adds	r4, #1
 8009220:	9304      	str	r3, [sp, #16]
 8009222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009226:	4826      	ldr	r0, [pc, #152]	; (80092c0 <_svfiprintf_r+0x1f0>)
 8009228:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800922c:	2206      	movs	r2, #6
 800922e:	f7f6 ffdf 	bl	80001f0 <memchr>
 8009232:	2800      	cmp	r0, #0
 8009234:	d038      	beq.n	80092a8 <_svfiprintf_r+0x1d8>
 8009236:	4b23      	ldr	r3, [pc, #140]	; (80092c4 <_svfiprintf_r+0x1f4>)
 8009238:	bb1b      	cbnz	r3, 8009282 <_svfiprintf_r+0x1b2>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	3307      	adds	r3, #7
 800923e:	f023 0307 	bic.w	r3, r3, #7
 8009242:	3308      	adds	r3, #8
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009248:	4433      	add	r3, r6
 800924a:	9309      	str	r3, [sp, #36]	; 0x24
 800924c:	e767      	b.n	800911e <_svfiprintf_r+0x4e>
 800924e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009252:	460c      	mov	r4, r1
 8009254:	2001      	movs	r0, #1
 8009256:	e7a5      	b.n	80091a4 <_svfiprintf_r+0xd4>
 8009258:	2300      	movs	r3, #0
 800925a:	3401      	adds	r4, #1
 800925c:	9305      	str	r3, [sp, #20]
 800925e:	4619      	mov	r1, r3
 8009260:	f04f 0c0a 	mov.w	ip, #10
 8009264:	4620      	mov	r0, r4
 8009266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800926a:	3a30      	subs	r2, #48	; 0x30
 800926c:	2a09      	cmp	r2, #9
 800926e:	d903      	bls.n	8009278 <_svfiprintf_r+0x1a8>
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0c5      	beq.n	8009200 <_svfiprintf_r+0x130>
 8009274:	9105      	str	r1, [sp, #20]
 8009276:	e7c3      	b.n	8009200 <_svfiprintf_r+0x130>
 8009278:	fb0c 2101 	mla	r1, ip, r1, r2
 800927c:	4604      	mov	r4, r0
 800927e:	2301      	movs	r3, #1
 8009280:	e7f0      	b.n	8009264 <_svfiprintf_r+0x194>
 8009282:	ab03      	add	r3, sp, #12
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	462a      	mov	r2, r5
 8009288:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <_svfiprintf_r+0x1f8>)
 800928a:	a904      	add	r1, sp, #16
 800928c:	4638      	mov	r0, r7
 800928e:	f7fd fe63 	bl	8006f58 <_printf_float>
 8009292:	1c42      	adds	r2, r0, #1
 8009294:	4606      	mov	r6, r0
 8009296:	d1d6      	bne.n	8009246 <_svfiprintf_r+0x176>
 8009298:	89ab      	ldrh	r3, [r5, #12]
 800929a:	065b      	lsls	r3, r3, #25
 800929c:	f53f af2c 	bmi.w	80090f8 <_svfiprintf_r+0x28>
 80092a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092a2:	b01d      	add	sp, #116	; 0x74
 80092a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a8:	ab03      	add	r3, sp, #12
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	462a      	mov	r2, r5
 80092ae:	4b06      	ldr	r3, [pc, #24]	; (80092c8 <_svfiprintf_r+0x1f8>)
 80092b0:	a904      	add	r1, sp, #16
 80092b2:	4638      	mov	r0, r7
 80092b4:	f7fe f8f4 	bl	80074a0 <_printf_i>
 80092b8:	e7eb      	b.n	8009292 <_svfiprintf_r+0x1c2>
 80092ba:	bf00      	nop
 80092bc:	0800a3c4 	.word	0x0800a3c4
 80092c0:	0800a3ce 	.word	0x0800a3ce
 80092c4:	08006f59 	.word	0x08006f59
 80092c8:	08009019 	.word	0x08009019
 80092cc:	0800a3ca 	.word	0x0800a3ca

080092d0 <_read_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d07      	ldr	r5, [pc, #28]	; (80092f0 <_read_r+0x20>)
 80092d4:	4604      	mov	r4, r0
 80092d6:	4608      	mov	r0, r1
 80092d8:	4611      	mov	r1, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	602a      	str	r2, [r5, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	f7f8 fa8e 	bl	8001800 <_read>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_read_r+0x1e>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_read_r+0x1e>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	20004ce8 	.word	0x20004ce8

080092f4 <__assert_func>:
 80092f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092f6:	4614      	mov	r4, r2
 80092f8:	461a      	mov	r2, r3
 80092fa:	4b09      	ldr	r3, [pc, #36]	; (8009320 <__assert_func+0x2c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4605      	mov	r5, r0
 8009300:	68d8      	ldr	r0, [r3, #12]
 8009302:	b14c      	cbz	r4, 8009318 <__assert_func+0x24>
 8009304:	4b07      	ldr	r3, [pc, #28]	; (8009324 <__assert_func+0x30>)
 8009306:	9100      	str	r1, [sp, #0]
 8009308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800930c:	4906      	ldr	r1, [pc, #24]	; (8009328 <__assert_func+0x34>)
 800930e:	462b      	mov	r3, r5
 8009310:	f000 f80e 	bl	8009330 <fiprintf>
 8009314:	f000 faa0 	bl	8009858 <abort>
 8009318:	4b04      	ldr	r3, [pc, #16]	; (800932c <__assert_func+0x38>)
 800931a:	461c      	mov	r4, r3
 800931c:	e7f3      	b.n	8009306 <__assert_func+0x12>
 800931e:	bf00      	nop
 8009320:	20000020 	.word	0x20000020
 8009324:	0800a3d5 	.word	0x0800a3d5
 8009328:	0800a3e2 	.word	0x0800a3e2
 800932c:	0800a410 	.word	0x0800a410

08009330 <fiprintf>:
 8009330:	b40e      	push	{r1, r2, r3}
 8009332:	b503      	push	{r0, r1, lr}
 8009334:	4601      	mov	r1, r0
 8009336:	ab03      	add	r3, sp, #12
 8009338:	4805      	ldr	r0, [pc, #20]	; (8009350 <fiprintf+0x20>)
 800933a:	f853 2b04 	ldr.w	r2, [r3], #4
 800933e:	6800      	ldr	r0, [r0, #0]
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	f000 f88b 	bl	800945c <_vfiprintf_r>
 8009346:	b002      	add	sp, #8
 8009348:	f85d eb04 	ldr.w	lr, [sp], #4
 800934c:	b003      	add	sp, #12
 800934e:	4770      	bx	lr
 8009350:	20000020 	.word	0x20000020

08009354 <__ascii_mbtowc>:
 8009354:	b082      	sub	sp, #8
 8009356:	b901      	cbnz	r1, 800935a <__ascii_mbtowc+0x6>
 8009358:	a901      	add	r1, sp, #4
 800935a:	b142      	cbz	r2, 800936e <__ascii_mbtowc+0x1a>
 800935c:	b14b      	cbz	r3, 8009372 <__ascii_mbtowc+0x1e>
 800935e:	7813      	ldrb	r3, [r2, #0]
 8009360:	600b      	str	r3, [r1, #0]
 8009362:	7812      	ldrb	r2, [r2, #0]
 8009364:	1e10      	subs	r0, r2, #0
 8009366:	bf18      	it	ne
 8009368:	2001      	movne	r0, #1
 800936a:	b002      	add	sp, #8
 800936c:	4770      	bx	lr
 800936e:	4610      	mov	r0, r2
 8009370:	e7fb      	b.n	800936a <__ascii_mbtowc+0x16>
 8009372:	f06f 0001 	mvn.w	r0, #1
 8009376:	e7f8      	b.n	800936a <__ascii_mbtowc+0x16>

08009378 <memmove>:
 8009378:	4288      	cmp	r0, r1
 800937a:	b510      	push	{r4, lr}
 800937c:	eb01 0402 	add.w	r4, r1, r2
 8009380:	d902      	bls.n	8009388 <memmove+0x10>
 8009382:	4284      	cmp	r4, r0
 8009384:	4623      	mov	r3, r4
 8009386:	d807      	bhi.n	8009398 <memmove+0x20>
 8009388:	1e43      	subs	r3, r0, #1
 800938a:	42a1      	cmp	r1, r4
 800938c:	d008      	beq.n	80093a0 <memmove+0x28>
 800938e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009396:	e7f8      	b.n	800938a <memmove+0x12>
 8009398:	4402      	add	r2, r0
 800939a:	4601      	mov	r1, r0
 800939c:	428a      	cmp	r2, r1
 800939e:	d100      	bne.n	80093a2 <memmove+0x2a>
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093aa:	e7f7      	b.n	800939c <memmove+0x24>

080093ac <_realloc_r>:
 80093ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b0:	4680      	mov	r8, r0
 80093b2:	4614      	mov	r4, r2
 80093b4:	460e      	mov	r6, r1
 80093b6:	b921      	cbnz	r1, 80093c2 <_realloc_r+0x16>
 80093b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093bc:	4611      	mov	r1, r2
 80093be:	f7fd bcb7 	b.w	8006d30 <_malloc_r>
 80093c2:	b92a      	cbnz	r2, 80093d0 <_realloc_r+0x24>
 80093c4:	f7ff fddc 	bl	8008f80 <_free_r>
 80093c8:	4625      	mov	r5, r4
 80093ca:	4628      	mov	r0, r5
 80093cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d0:	f000 faae 	bl	8009930 <_malloc_usable_size_r>
 80093d4:	4284      	cmp	r4, r0
 80093d6:	4607      	mov	r7, r0
 80093d8:	d802      	bhi.n	80093e0 <_realloc_r+0x34>
 80093da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093de:	d812      	bhi.n	8009406 <_realloc_r+0x5a>
 80093e0:	4621      	mov	r1, r4
 80093e2:	4640      	mov	r0, r8
 80093e4:	f7fd fca4 	bl	8006d30 <_malloc_r>
 80093e8:	4605      	mov	r5, r0
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d0ed      	beq.n	80093ca <_realloc_r+0x1e>
 80093ee:	42bc      	cmp	r4, r7
 80093f0:	4622      	mov	r2, r4
 80093f2:	4631      	mov	r1, r6
 80093f4:	bf28      	it	cs
 80093f6:	463a      	movcs	r2, r7
 80093f8:	f7fd fc63 	bl	8006cc2 <memcpy>
 80093fc:	4631      	mov	r1, r6
 80093fe:	4640      	mov	r0, r8
 8009400:	f7ff fdbe 	bl	8008f80 <_free_r>
 8009404:	e7e1      	b.n	80093ca <_realloc_r+0x1e>
 8009406:	4635      	mov	r5, r6
 8009408:	e7df      	b.n	80093ca <_realloc_r+0x1e>

0800940a <__sfputc_r>:
 800940a:	6893      	ldr	r3, [r2, #8]
 800940c:	3b01      	subs	r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	b410      	push	{r4}
 8009412:	6093      	str	r3, [r2, #8]
 8009414:	da08      	bge.n	8009428 <__sfputc_r+0x1e>
 8009416:	6994      	ldr	r4, [r2, #24]
 8009418:	42a3      	cmp	r3, r4
 800941a:	db01      	blt.n	8009420 <__sfputc_r+0x16>
 800941c:	290a      	cmp	r1, #10
 800941e:	d103      	bne.n	8009428 <__sfputc_r+0x1e>
 8009420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009424:	f000 b94a 	b.w	80096bc <__swbuf_r>
 8009428:	6813      	ldr	r3, [r2, #0]
 800942a:	1c58      	adds	r0, r3, #1
 800942c:	6010      	str	r0, [r2, #0]
 800942e:	7019      	strb	r1, [r3, #0]
 8009430:	4608      	mov	r0, r1
 8009432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009436:	4770      	bx	lr

08009438 <__sfputs_r>:
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943a:	4606      	mov	r6, r0
 800943c:	460f      	mov	r7, r1
 800943e:	4614      	mov	r4, r2
 8009440:	18d5      	adds	r5, r2, r3
 8009442:	42ac      	cmp	r4, r5
 8009444:	d101      	bne.n	800944a <__sfputs_r+0x12>
 8009446:	2000      	movs	r0, #0
 8009448:	e007      	b.n	800945a <__sfputs_r+0x22>
 800944a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944e:	463a      	mov	r2, r7
 8009450:	4630      	mov	r0, r6
 8009452:	f7ff ffda 	bl	800940a <__sfputc_r>
 8009456:	1c43      	adds	r3, r0, #1
 8009458:	d1f3      	bne.n	8009442 <__sfputs_r+0xa>
 800945a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800945c <_vfiprintf_r>:
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	460d      	mov	r5, r1
 8009462:	b09d      	sub	sp, #116	; 0x74
 8009464:	4614      	mov	r4, r2
 8009466:	4698      	mov	r8, r3
 8009468:	4606      	mov	r6, r0
 800946a:	b118      	cbz	r0, 8009474 <_vfiprintf_r+0x18>
 800946c:	6983      	ldr	r3, [r0, #24]
 800946e:	b90b      	cbnz	r3, 8009474 <_vfiprintf_r+0x18>
 8009470:	f7fd fb62 	bl	8006b38 <__sinit>
 8009474:	4b89      	ldr	r3, [pc, #548]	; (800969c <_vfiprintf_r+0x240>)
 8009476:	429d      	cmp	r5, r3
 8009478:	d11b      	bne.n	80094b2 <_vfiprintf_r+0x56>
 800947a:	6875      	ldr	r5, [r6, #4]
 800947c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800947e:	07d9      	lsls	r1, r3, #31
 8009480:	d405      	bmi.n	800948e <_vfiprintf_r+0x32>
 8009482:	89ab      	ldrh	r3, [r5, #12]
 8009484:	059a      	lsls	r2, r3, #22
 8009486:	d402      	bmi.n	800948e <_vfiprintf_r+0x32>
 8009488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800948a:	f7fd fc18 	bl	8006cbe <__retarget_lock_acquire_recursive>
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	071b      	lsls	r3, r3, #28
 8009492:	d501      	bpl.n	8009498 <_vfiprintf_r+0x3c>
 8009494:	692b      	ldr	r3, [r5, #16]
 8009496:	b9eb      	cbnz	r3, 80094d4 <_vfiprintf_r+0x78>
 8009498:	4629      	mov	r1, r5
 800949a:	4630      	mov	r0, r6
 800949c:	f000 f96e 	bl	800977c <__swsetup_r>
 80094a0:	b1c0      	cbz	r0, 80094d4 <_vfiprintf_r+0x78>
 80094a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094a4:	07dc      	lsls	r4, r3, #31
 80094a6:	d50e      	bpl.n	80094c6 <_vfiprintf_r+0x6a>
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ac:	b01d      	add	sp, #116	; 0x74
 80094ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b2:	4b7b      	ldr	r3, [pc, #492]	; (80096a0 <_vfiprintf_r+0x244>)
 80094b4:	429d      	cmp	r5, r3
 80094b6:	d101      	bne.n	80094bc <_vfiprintf_r+0x60>
 80094b8:	68b5      	ldr	r5, [r6, #8]
 80094ba:	e7df      	b.n	800947c <_vfiprintf_r+0x20>
 80094bc:	4b79      	ldr	r3, [pc, #484]	; (80096a4 <_vfiprintf_r+0x248>)
 80094be:	429d      	cmp	r5, r3
 80094c0:	bf08      	it	eq
 80094c2:	68f5      	ldreq	r5, [r6, #12]
 80094c4:	e7da      	b.n	800947c <_vfiprintf_r+0x20>
 80094c6:	89ab      	ldrh	r3, [r5, #12]
 80094c8:	0598      	lsls	r0, r3, #22
 80094ca:	d4ed      	bmi.n	80094a8 <_vfiprintf_r+0x4c>
 80094cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ce:	f7fd fbf7 	bl	8006cc0 <__retarget_lock_release_recursive>
 80094d2:	e7e9      	b.n	80094a8 <_vfiprintf_r+0x4c>
 80094d4:	2300      	movs	r3, #0
 80094d6:	9309      	str	r3, [sp, #36]	; 0x24
 80094d8:	2320      	movs	r3, #32
 80094da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094de:	f8cd 800c 	str.w	r8, [sp, #12]
 80094e2:	2330      	movs	r3, #48	; 0x30
 80094e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096a8 <_vfiprintf_r+0x24c>
 80094e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094ec:	f04f 0901 	mov.w	r9, #1
 80094f0:	4623      	mov	r3, r4
 80094f2:	469a      	mov	sl, r3
 80094f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094f8:	b10a      	cbz	r2, 80094fe <_vfiprintf_r+0xa2>
 80094fa:	2a25      	cmp	r2, #37	; 0x25
 80094fc:	d1f9      	bne.n	80094f2 <_vfiprintf_r+0x96>
 80094fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009502:	d00b      	beq.n	800951c <_vfiprintf_r+0xc0>
 8009504:	465b      	mov	r3, fp
 8009506:	4622      	mov	r2, r4
 8009508:	4629      	mov	r1, r5
 800950a:	4630      	mov	r0, r6
 800950c:	f7ff ff94 	bl	8009438 <__sfputs_r>
 8009510:	3001      	adds	r0, #1
 8009512:	f000 80aa 	beq.w	800966a <_vfiprintf_r+0x20e>
 8009516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009518:	445a      	add	r2, fp
 800951a:	9209      	str	r2, [sp, #36]	; 0x24
 800951c:	f89a 3000 	ldrb.w	r3, [sl]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 80a2 	beq.w	800966a <_vfiprintf_r+0x20e>
 8009526:	2300      	movs	r3, #0
 8009528:	f04f 32ff 	mov.w	r2, #4294967295
 800952c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009530:	f10a 0a01 	add.w	sl, sl, #1
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	9307      	str	r3, [sp, #28]
 8009538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800953c:	931a      	str	r3, [sp, #104]	; 0x68
 800953e:	4654      	mov	r4, sl
 8009540:	2205      	movs	r2, #5
 8009542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009546:	4858      	ldr	r0, [pc, #352]	; (80096a8 <_vfiprintf_r+0x24c>)
 8009548:	f7f6 fe52 	bl	80001f0 <memchr>
 800954c:	9a04      	ldr	r2, [sp, #16]
 800954e:	b9d8      	cbnz	r0, 8009588 <_vfiprintf_r+0x12c>
 8009550:	06d1      	lsls	r1, r2, #27
 8009552:	bf44      	itt	mi
 8009554:	2320      	movmi	r3, #32
 8009556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800955a:	0713      	lsls	r3, r2, #28
 800955c:	bf44      	itt	mi
 800955e:	232b      	movmi	r3, #43	; 0x2b
 8009560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009564:	f89a 3000 	ldrb.w	r3, [sl]
 8009568:	2b2a      	cmp	r3, #42	; 0x2a
 800956a:	d015      	beq.n	8009598 <_vfiprintf_r+0x13c>
 800956c:	9a07      	ldr	r2, [sp, #28]
 800956e:	4654      	mov	r4, sl
 8009570:	2000      	movs	r0, #0
 8009572:	f04f 0c0a 	mov.w	ip, #10
 8009576:	4621      	mov	r1, r4
 8009578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800957c:	3b30      	subs	r3, #48	; 0x30
 800957e:	2b09      	cmp	r3, #9
 8009580:	d94e      	bls.n	8009620 <_vfiprintf_r+0x1c4>
 8009582:	b1b0      	cbz	r0, 80095b2 <_vfiprintf_r+0x156>
 8009584:	9207      	str	r2, [sp, #28]
 8009586:	e014      	b.n	80095b2 <_vfiprintf_r+0x156>
 8009588:	eba0 0308 	sub.w	r3, r0, r8
 800958c:	fa09 f303 	lsl.w	r3, r9, r3
 8009590:	4313      	orrs	r3, r2
 8009592:	9304      	str	r3, [sp, #16]
 8009594:	46a2      	mov	sl, r4
 8009596:	e7d2      	b.n	800953e <_vfiprintf_r+0xe2>
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	1d19      	adds	r1, r3, #4
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	9103      	str	r1, [sp, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bfbb      	ittet	lt
 80095a4:	425b      	neglt	r3, r3
 80095a6:	f042 0202 	orrlt.w	r2, r2, #2
 80095aa:	9307      	strge	r3, [sp, #28]
 80095ac:	9307      	strlt	r3, [sp, #28]
 80095ae:	bfb8      	it	lt
 80095b0:	9204      	strlt	r2, [sp, #16]
 80095b2:	7823      	ldrb	r3, [r4, #0]
 80095b4:	2b2e      	cmp	r3, #46	; 0x2e
 80095b6:	d10c      	bne.n	80095d2 <_vfiprintf_r+0x176>
 80095b8:	7863      	ldrb	r3, [r4, #1]
 80095ba:	2b2a      	cmp	r3, #42	; 0x2a
 80095bc:	d135      	bne.n	800962a <_vfiprintf_r+0x1ce>
 80095be:	9b03      	ldr	r3, [sp, #12]
 80095c0:	1d1a      	adds	r2, r3, #4
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	9203      	str	r2, [sp, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	bfb8      	it	lt
 80095ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80095ce:	3402      	adds	r4, #2
 80095d0:	9305      	str	r3, [sp, #20]
 80095d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096b8 <_vfiprintf_r+0x25c>
 80095d6:	7821      	ldrb	r1, [r4, #0]
 80095d8:	2203      	movs	r2, #3
 80095da:	4650      	mov	r0, sl
 80095dc:	f7f6 fe08 	bl	80001f0 <memchr>
 80095e0:	b140      	cbz	r0, 80095f4 <_vfiprintf_r+0x198>
 80095e2:	2340      	movs	r3, #64	; 0x40
 80095e4:	eba0 000a 	sub.w	r0, r0, sl
 80095e8:	fa03 f000 	lsl.w	r0, r3, r0
 80095ec:	9b04      	ldr	r3, [sp, #16]
 80095ee:	4303      	orrs	r3, r0
 80095f0:	3401      	adds	r4, #1
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f8:	482c      	ldr	r0, [pc, #176]	; (80096ac <_vfiprintf_r+0x250>)
 80095fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095fe:	2206      	movs	r2, #6
 8009600:	f7f6 fdf6 	bl	80001f0 <memchr>
 8009604:	2800      	cmp	r0, #0
 8009606:	d03f      	beq.n	8009688 <_vfiprintf_r+0x22c>
 8009608:	4b29      	ldr	r3, [pc, #164]	; (80096b0 <_vfiprintf_r+0x254>)
 800960a:	bb1b      	cbnz	r3, 8009654 <_vfiprintf_r+0x1f8>
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	3307      	adds	r3, #7
 8009610:	f023 0307 	bic.w	r3, r3, #7
 8009614:	3308      	adds	r3, #8
 8009616:	9303      	str	r3, [sp, #12]
 8009618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961a:	443b      	add	r3, r7
 800961c:	9309      	str	r3, [sp, #36]	; 0x24
 800961e:	e767      	b.n	80094f0 <_vfiprintf_r+0x94>
 8009620:	fb0c 3202 	mla	r2, ip, r2, r3
 8009624:	460c      	mov	r4, r1
 8009626:	2001      	movs	r0, #1
 8009628:	e7a5      	b.n	8009576 <_vfiprintf_r+0x11a>
 800962a:	2300      	movs	r3, #0
 800962c:	3401      	adds	r4, #1
 800962e:	9305      	str	r3, [sp, #20]
 8009630:	4619      	mov	r1, r3
 8009632:	f04f 0c0a 	mov.w	ip, #10
 8009636:	4620      	mov	r0, r4
 8009638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800963c:	3a30      	subs	r2, #48	; 0x30
 800963e:	2a09      	cmp	r2, #9
 8009640:	d903      	bls.n	800964a <_vfiprintf_r+0x1ee>
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0c5      	beq.n	80095d2 <_vfiprintf_r+0x176>
 8009646:	9105      	str	r1, [sp, #20]
 8009648:	e7c3      	b.n	80095d2 <_vfiprintf_r+0x176>
 800964a:	fb0c 2101 	mla	r1, ip, r1, r2
 800964e:	4604      	mov	r4, r0
 8009650:	2301      	movs	r3, #1
 8009652:	e7f0      	b.n	8009636 <_vfiprintf_r+0x1da>
 8009654:	ab03      	add	r3, sp, #12
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	462a      	mov	r2, r5
 800965a:	4b16      	ldr	r3, [pc, #88]	; (80096b4 <_vfiprintf_r+0x258>)
 800965c:	a904      	add	r1, sp, #16
 800965e:	4630      	mov	r0, r6
 8009660:	f7fd fc7a 	bl	8006f58 <_printf_float>
 8009664:	4607      	mov	r7, r0
 8009666:	1c78      	adds	r0, r7, #1
 8009668:	d1d6      	bne.n	8009618 <_vfiprintf_r+0x1bc>
 800966a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800966c:	07d9      	lsls	r1, r3, #31
 800966e:	d405      	bmi.n	800967c <_vfiprintf_r+0x220>
 8009670:	89ab      	ldrh	r3, [r5, #12]
 8009672:	059a      	lsls	r2, r3, #22
 8009674:	d402      	bmi.n	800967c <_vfiprintf_r+0x220>
 8009676:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009678:	f7fd fb22 	bl	8006cc0 <__retarget_lock_release_recursive>
 800967c:	89ab      	ldrh	r3, [r5, #12]
 800967e:	065b      	lsls	r3, r3, #25
 8009680:	f53f af12 	bmi.w	80094a8 <_vfiprintf_r+0x4c>
 8009684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009686:	e711      	b.n	80094ac <_vfiprintf_r+0x50>
 8009688:	ab03      	add	r3, sp, #12
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	462a      	mov	r2, r5
 800968e:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <_vfiprintf_r+0x258>)
 8009690:	a904      	add	r1, sp, #16
 8009692:	4630      	mov	r0, r6
 8009694:	f7fd ff04 	bl	80074a0 <_printf_i>
 8009698:	e7e4      	b.n	8009664 <_vfiprintf_r+0x208>
 800969a:	bf00      	nop
 800969c:	0800a164 	.word	0x0800a164
 80096a0:	0800a184 	.word	0x0800a184
 80096a4:	0800a144 	.word	0x0800a144
 80096a8:	0800a3c4 	.word	0x0800a3c4
 80096ac:	0800a3ce 	.word	0x0800a3ce
 80096b0:	08006f59 	.word	0x08006f59
 80096b4:	08009439 	.word	0x08009439
 80096b8:	0800a3ca 	.word	0x0800a3ca

080096bc <__swbuf_r>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	460e      	mov	r6, r1
 80096c0:	4614      	mov	r4, r2
 80096c2:	4605      	mov	r5, r0
 80096c4:	b118      	cbz	r0, 80096ce <__swbuf_r+0x12>
 80096c6:	6983      	ldr	r3, [r0, #24]
 80096c8:	b90b      	cbnz	r3, 80096ce <__swbuf_r+0x12>
 80096ca:	f7fd fa35 	bl	8006b38 <__sinit>
 80096ce:	4b21      	ldr	r3, [pc, #132]	; (8009754 <__swbuf_r+0x98>)
 80096d0:	429c      	cmp	r4, r3
 80096d2:	d12b      	bne.n	800972c <__swbuf_r+0x70>
 80096d4:	686c      	ldr	r4, [r5, #4]
 80096d6:	69a3      	ldr	r3, [r4, #24]
 80096d8:	60a3      	str	r3, [r4, #8]
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	071a      	lsls	r2, r3, #28
 80096de:	d52f      	bpl.n	8009740 <__swbuf_r+0x84>
 80096e0:	6923      	ldr	r3, [r4, #16]
 80096e2:	b36b      	cbz	r3, 8009740 <__swbuf_r+0x84>
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	6820      	ldr	r0, [r4, #0]
 80096e8:	1ac0      	subs	r0, r0, r3
 80096ea:	6963      	ldr	r3, [r4, #20]
 80096ec:	b2f6      	uxtb	r6, r6
 80096ee:	4283      	cmp	r3, r0
 80096f0:	4637      	mov	r7, r6
 80096f2:	dc04      	bgt.n	80096fe <__swbuf_r+0x42>
 80096f4:	4621      	mov	r1, r4
 80096f6:	4628      	mov	r0, r5
 80096f8:	f7ff f842 	bl	8008780 <_fflush_r>
 80096fc:	bb30      	cbnz	r0, 800974c <__swbuf_r+0x90>
 80096fe:	68a3      	ldr	r3, [r4, #8]
 8009700:	3b01      	subs	r3, #1
 8009702:	60a3      	str	r3, [r4, #8]
 8009704:	6823      	ldr	r3, [r4, #0]
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	6022      	str	r2, [r4, #0]
 800970a:	701e      	strb	r6, [r3, #0]
 800970c:	6963      	ldr	r3, [r4, #20]
 800970e:	3001      	adds	r0, #1
 8009710:	4283      	cmp	r3, r0
 8009712:	d004      	beq.n	800971e <__swbuf_r+0x62>
 8009714:	89a3      	ldrh	r3, [r4, #12]
 8009716:	07db      	lsls	r3, r3, #31
 8009718:	d506      	bpl.n	8009728 <__swbuf_r+0x6c>
 800971a:	2e0a      	cmp	r6, #10
 800971c:	d104      	bne.n	8009728 <__swbuf_r+0x6c>
 800971e:	4621      	mov	r1, r4
 8009720:	4628      	mov	r0, r5
 8009722:	f7ff f82d 	bl	8008780 <_fflush_r>
 8009726:	b988      	cbnz	r0, 800974c <__swbuf_r+0x90>
 8009728:	4638      	mov	r0, r7
 800972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800972c:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <__swbuf_r+0x9c>)
 800972e:	429c      	cmp	r4, r3
 8009730:	d101      	bne.n	8009736 <__swbuf_r+0x7a>
 8009732:	68ac      	ldr	r4, [r5, #8]
 8009734:	e7cf      	b.n	80096d6 <__swbuf_r+0x1a>
 8009736:	4b09      	ldr	r3, [pc, #36]	; (800975c <__swbuf_r+0xa0>)
 8009738:	429c      	cmp	r4, r3
 800973a:	bf08      	it	eq
 800973c:	68ec      	ldreq	r4, [r5, #12]
 800973e:	e7ca      	b.n	80096d6 <__swbuf_r+0x1a>
 8009740:	4621      	mov	r1, r4
 8009742:	4628      	mov	r0, r5
 8009744:	f000 f81a 	bl	800977c <__swsetup_r>
 8009748:	2800      	cmp	r0, #0
 800974a:	d0cb      	beq.n	80096e4 <__swbuf_r+0x28>
 800974c:	f04f 37ff 	mov.w	r7, #4294967295
 8009750:	e7ea      	b.n	8009728 <__swbuf_r+0x6c>
 8009752:	bf00      	nop
 8009754:	0800a164 	.word	0x0800a164
 8009758:	0800a184 	.word	0x0800a184
 800975c:	0800a144 	.word	0x0800a144

08009760 <__ascii_wctomb>:
 8009760:	b149      	cbz	r1, 8009776 <__ascii_wctomb+0x16>
 8009762:	2aff      	cmp	r2, #255	; 0xff
 8009764:	bf85      	ittet	hi
 8009766:	238a      	movhi	r3, #138	; 0x8a
 8009768:	6003      	strhi	r3, [r0, #0]
 800976a:	700a      	strbls	r2, [r1, #0]
 800976c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009770:	bf98      	it	ls
 8009772:	2001      	movls	r0, #1
 8009774:	4770      	bx	lr
 8009776:	4608      	mov	r0, r1
 8009778:	4770      	bx	lr
	...

0800977c <__swsetup_r>:
 800977c:	4b32      	ldr	r3, [pc, #200]	; (8009848 <__swsetup_r+0xcc>)
 800977e:	b570      	push	{r4, r5, r6, lr}
 8009780:	681d      	ldr	r5, [r3, #0]
 8009782:	4606      	mov	r6, r0
 8009784:	460c      	mov	r4, r1
 8009786:	b125      	cbz	r5, 8009792 <__swsetup_r+0x16>
 8009788:	69ab      	ldr	r3, [r5, #24]
 800978a:	b913      	cbnz	r3, 8009792 <__swsetup_r+0x16>
 800978c:	4628      	mov	r0, r5
 800978e:	f7fd f9d3 	bl	8006b38 <__sinit>
 8009792:	4b2e      	ldr	r3, [pc, #184]	; (800984c <__swsetup_r+0xd0>)
 8009794:	429c      	cmp	r4, r3
 8009796:	d10f      	bne.n	80097b8 <__swsetup_r+0x3c>
 8009798:	686c      	ldr	r4, [r5, #4]
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a0:	0719      	lsls	r1, r3, #28
 80097a2:	d42c      	bmi.n	80097fe <__swsetup_r+0x82>
 80097a4:	06dd      	lsls	r5, r3, #27
 80097a6:	d411      	bmi.n	80097cc <__swsetup_r+0x50>
 80097a8:	2309      	movs	r3, #9
 80097aa:	6033      	str	r3, [r6, #0]
 80097ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	f04f 30ff 	mov.w	r0, #4294967295
 80097b6:	e03e      	b.n	8009836 <__swsetup_r+0xba>
 80097b8:	4b25      	ldr	r3, [pc, #148]	; (8009850 <__swsetup_r+0xd4>)
 80097ba:	429c      	cmp	r4, r3
 80097bc:	d101      	bne.n	80097c2 <__swsetup_r+0x46>
 80097be:	68ac      	ldr	r4, [r5, #8]
 80097c0:	e7eb      	b.n	800979a <__swsetup_r+0x1e>
 80097c2:	4b24      	ldr	r3, [pc, #144]	; (8009854 <__swsetup_r+0xd8>)
 80097c4:	429c      	cmp	r4, r3
 80097c6:	bf08      	it	eq
 80097c8:	68ec      	ldreq	r4, [r5, #12]
 80097ca:	e7e6      	b.n	800979a <__swsetup_r+0x1e>
 80097cc:	0758      	lsls	r0, r3, #29
 80097ce:	d512      	bpl.n	80097f6 <__swsetup_r+0x7a>
 80097d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097d2:	b141      	cbz	r1, 80097e6 <__swsetup_r+0x6a>
 80097d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097d8:	4299      	cmp	r1, r3
 80097da:	d002      	beq.n	80097e2 <__swsetup_r+0x66>
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff fbcf 	bl	8008f80 <_free_r>
 80097e2:	2300      	movs	r3, #0
 80097e4:	6363      	str	r3, [r4, #52]	; 0x34
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	2300      	movs	r3, #0
 80097f0:	6063      	str	r3, [r4, #4]
 80097f2:	6923      	ldr	r3, [r4, #16]
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	f043 0308 	orr.w	r3, r3, #8
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	b94b      	cbnz	r3, 8009816 <__swsetup_r+0x9a>
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800980c:	d003      	beq.n	8009816 <__swsetup_r+0x9a>
 800980e:	4621      	mov	r1, r4
 8009810:	4630      	mov	r0, r6
 8009812:	f000 f84d 	bl	80098b0 <__smakebuf_r>
 8009816:	89a0      	ldrh	r0, [r4, #12]
 8009818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800981c:	f010 0301 	ands.w	r3, r0, #1
 8009820:	d00a      	beq.n	8009838 <__swsetup_r+0xbc>
 8009822:	2300      	movs	r3, #0
 8009824:	60a3      	str	r3, [r4, #8]
 8009826:	6963      	ldr	r3, [r4, #20]
 8009828:	425b      	negs	r3, r3
 800982a:	61a3      	str	r3, [r4, #24]
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	b943      	cbnz	r3, 8009842 <__swsetup_r+0xc6>
 8009830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009834:	d1ba      	bne.n	80097ac <__swsetup_r+0x30>
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	0781      	lsls	r1, r0, #30
 800983a:	bf58      	it	pl
 800983c:	6963      	ldrpl	r3, [r4, #20]
 800983e:	60a3      	str	r3, [r4, #8]
 8009840:	e7f4      	b.n	800982c <__swsetup_r+0xb0>
 8009842:	2000      	movs	r0, #0
 8009844:	e7f7      	b.n	8009836 <__swsetup_r+0xba>
 8009846:	bf00      	nop
 8009848:	20000020 	.word	0x20000020
 800984c:	0800a164 	.word	0x0800a164
 8009850:	0800a184 	.word	0x0800a184
 8009854:	0800a144 	.word	0x0800a144

08009858 <abort>:
 8009858:	b508      	push	{r3, lr}
 800985a:	2006      	movs	r0, #6
 800985c:	f000 f898 	bl	8009990 <raise>
 8009860:	2001      	movs	r0, #1
 8009862:	f7f7 ffc3 	bl	80017ec <_exit>

08009866 <__swhatbuf_r>:
 8009866:	b570      	push	{r4, r5, r6, lr}
 8009868:	460e      	mov	r6, r1
 800986a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986e:	2900      	cmp	r1, #0
 8009870:	b096      	sub	sp, #88	; 0x58
 8009872:	4614      	mov	r4, r2
 8009874:	461d      	mov	r5, r3
 8009876:	da08      	bge.n	800988a <__swhatbuf_r+0x24>
 8009878:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	602a      	str	r2, [r5, #0]
 8009880:	061a      	lsls	r2, r3, #24
 8009882:	d410      	bmi.n	80098a6 <__swhatbuf_r+0x40>
 8009884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009888:	e00e      	b.n	80098a8 <__swhatbuf_r+0x42>
 800988a:	466a      	mov	r2, sp
 800988c:	f000 f89c 	bl	80099c8 <_fstat_r>
 8009890:	2800      	cmp	r0, #0
 8009892:	dbf1      	blt.n	8009878 <__swhatbuf_r+0x12>
 8009894:	9a01      	ldr	r2, [sp, #4]
 8009896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800989a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800989e:	425a      	negs	r2, r3
 80098a0:	415a      	adcs	r2, r3
 80098a2:	602a      	str	r2, [r5, #0]
 80098a4:	e7ee      	b.n	8009884 <__swhatbuf_r+0x1e>
 80098a6:	2340      	movs	r3, #64	; 0x40
 80098a8:	2000      	movs	r0, #0
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	b016      	add	sp, #88	; 0x58
 80098ae:	bd70      	pop	{r4, r5, r6, pc}

080098b0 <__smakebuf_r>:
 80098b0:	898b      	ldrh	r3, [r1, #12]
 80098b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098b4:	079d      	lsls	r5, r3, #30
 80098b6:	4606      	mov	r6, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	d507      	bpl.n	80098cc <__smakebuf_r+0x1c>
 80098bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	6123      	str	r3, [r4, #16]
 80098c4:	2301      	movs	r3, #1
 80098c6:	6163      	str	r3, [r4, #20]
 80098c8:	b002      	add	sp, #8
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	ab01      	add	r3, sp, #4
 80098ce:	466a      	mov	r2, sp
 80098d0:	f7ff ffc9 	bl	8009866 <__swhatbuf_r>
 80098d4:	9900      	ldr	r1, [sp, #0]
 80098d6:	4605      	mov	r5, r0
 80098d8:	4630      	mov	r0, r6
 80098da:	f7fd fa29 	bl	8006d30 <_malloc_r>
 80098de:	b948      	cbnz	r0, 80098f4 <__smakebuf_r+0x44>
 80098e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e4:	059a      	lsls	r2, r3, #22
 80098e6:	d4ef      	bmi.n	80098c8 <__smakebuf_r+0x18>
 80098e8:	f023 0303 	bic.w	r3, r3, #3
 80098ec:	f043 0302 	orr.w	r3, r3, #2
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	e7e3      	b.n	80098bc <__smakebuf_r+0xc>
 80098f4:	4b0d      	ldr	r3, [pc, #52]	; (800992c <__smakebuf_r+0x7c>)
 80098f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	6020      	str	r0, [r4, #0]
 80098fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	9b00      	ldr	r3, [sp, #0]
 8009904:	6163      	str	r3, [r4, #20]
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	6120      	str	r0, [r4, #16]
 800990a:	b15b      	cbz	r3, 8009924 <__smakebuf_r+0x74>
 800990c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009910:	4630      	mov	r0, r6
 8009912:	f000 f86b 	bl	80099ec <_isatty_r>
 8009916:	b128      	cbz	r0, 8009924 <__smakebuf_r+0x74>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f023 0303 	bic.w	r3, r3, #3
 800991e:	f043 0301 	orr.w	r3, r3, #1
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	89a0      	ldrh	r0, [r4, #12]
 8009926:	4305      	orrs	r5, r0
 8009928:	81a5      	strh	r5, [r4, #12]
 800992a:	e7cd      	b.n	80098c8 <__smakebuf_r+0x18>
 800992c:	08006ad1 	.word	0x08006ad1

08009930 <_malloc_usable_size_r>:
 8009930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009934:	1f18      	subs	r0, r3, #4
 8009936:	2b00      	cmp	r3, #0
 8009938:	bfbc      	itt	lt
 800993a:	580b      	ldrlt	r3, [r1, r0]
 800993c:	18c0      	addlt	r0, r0, r3
 800993e:	4770      	bx	lr

08009940 <_raise_r>:
 8009940:	291f      	cmp	r1, #31
 8009942:	b538      	push	{r3, r4, r5, lr}
 8009944:	4604      	mov	r4, r0
 8009946:	460d      	mov	r5, r1
 8009948:	d904      	bls.n	8009954 <_raise_r+0x14>
 800994a:	2316      	movs	r3, #22
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	f04f 30ff 	mov.w	r0, #4294967295
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009956:	b112      	cbz	r2, 800995e <_raise_r+0x1e>
 8009958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800995c:	b94b      	cbnz	r3, 8009972 <_raise_r+0x32>
 800995e:	4620      	mov	r0, r4
 8009960:	f000 f830 	bl	80099c4 <_getpid_r>
 8009964:	462a      	mov	r2, r5
 8009966:	4601      	mov	r1, r0
 8009968:	4620      	mov	r0, r4
 800996a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800996e:	f000 b817 	b.w	80099a0 <_kill_r>
 8009972:	2b01      	cmp	r3, #1
 8009974:	d00a      	beq.n	800998c <_raise_r+0x4c>
 8009976:	1c59      	adds	r1, r3, #1
 8009978:	d103      	bne.n	8009982 <_raise_r+0x42>
 800997a:	2316      	movs	r3, #22
 800997c:	6003      	str	r3, [r0, #0]
 800997e:	2001      	movs	r0, #1
 8009980:	e7e7      	b.n	8009952 <_raise_r+0x12>
 8009982:	2400      	movs	r4, #0
 8009984:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009988:	4628      	mov	r0, r5
 800998a:	4798      	blx	r3
 800998c:	2000      	movs	r0, #0
 800998e:	e7e0      	b.n	8009952 <_raise_r+0x12>

08009990 <raise>:
 8009990:	4b02      	ldr	r3, [pc, #8]	; (800999c <raise+0xc>)
 8009992:	4601      	mov	r1, r0
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	f7ff bfd3 	b.w	8009940 <_raise_r>
 800999a:	bf00      	nop
 800999c:	20000020 	.word	0x20000020

080099a0 <_kill_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4d07      	ldr	r5, [pc, #28]	; (80099c0 <_kill_r+0x20>)
 80099a4:	2300      	movs	r3, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	4611      	mov	r1, r2
 80099ac:	602b      	str	r3, [r5, #0]
 80099ae:	f7f7 ff0d 	bl	80017cc <_kill>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	d102      	bne.n	80099bc <_kill_r+0x1c>
 80099b6:	682b      	ldr	r3, [r5, #0]
 80099b8:	b103      	cbz	r3, 80099bc <_kill_r+0x1c>
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	bd38      	pop	{r3, r4, r5, pc}
 80099be:	bf00      	nop
 80099c0:	20004ce8 	.word	0x20004ce8

080099c4 <_getpid_r>:
 80099c4:	f7f7 befa 	b.w	80017bc <_getpid>

080099c8 <_fstat_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d07      	ldr	r5, [pc, #28]	; (80099e8 <_fstat_r+0x20>)
 80099cc:	2300      	movs	r3, #0
 80099ce:	4604      	mov	r4, r0
 80099d0:	4608      	mov	r0, r1
 80099d2:	4611      	mov	r1, r2
 80099d4:	602b      	str	r3, [r5, #0]
 80099d6:	f7f7 ff58 	bl	800188a <_fstat>
 80099da:	1c43      	adds	r3, r0, #1
 80099dc:	d102      	bne.n	80099e4 <_fstat_r+0x1c>
 80099de:	682b      	ldr	r3, [r5, #0]
 80099e0:	b103      	cbz	r3, 80099e4 <_fstat_r+0x1c>
 80099e2:	6023      	str	r3, [r4, #0]
 80099e4:	bd38      	pop	{r3, r4, r5, pc}
 80099e6:	bf00      	nop
 80099e8:	20004ce8 	.word	0x20004ce8

080099ec <_isatty_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4d06      	ldr	r5, [pc, #24]	; (8009a08 <_isatty_r+0x1c>)
 80099f0:	2300      	movs	r3, #0
 80099f2:	4604      	mov	r4, r0
 80099f4:	4608      	mov	r0, r1
 80099f6:	602b      	str	r3, [r5, #0]
 80099f8:	f7f7 ff57 	bl	80018aa <_isatty>
 80099fc:	1c43      	adds	r3, r0, #1
 80099fe:	d102      	bne.n	8009a06 <_isatty_r+0x1a>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	b103      	cbz	r3, 8009a06 <_isatty_r+0x1a>
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	20004ce8 	.word	0x20004ce8

08009a0c <_init>:
 8009a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0e:	bf00      	nop
 8009a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a12:	bc08      	pop	{r3}
 8009a14:	469e      	mov	lr, r3
 8009a16:	4770      	bx	lr

08009a18 <_fini>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	bf00      	nop
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr
